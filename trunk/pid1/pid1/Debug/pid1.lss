
pid1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001c3e  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000e2  00800060  00001c3e  00001cf2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000f7  00800142  00800142  00001dd4  2**0
                  ALLOC
  3 .eeprom       00000070  00810000  00810000  00001dd4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         00000ad4  00000000  00000000  00001e44  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      00000269  00000000  00000000  00002918  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      0000002f  00000000  00000000  00002b81  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000450  00000000  00000000  00002bb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00004782  00000000  00000000  00003000  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00001660  00000000  00000000  00007782  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00001e35  00000000  00000000  00008de2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  000009b0  00000000  00000000  0000ac18  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0000129b  00000000  00000000  0000b5c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00001ca0  00000000  00000000  0000c863  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000370  00000000  00000000  0000e503  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	ce c0       	rjmp	.+412    	; 0x19e <__ctors_end>
       2:	e8 c0       	rjmp	.+464    	; 0x1d4 <__bad_interrupt>
       4:	e7 c0       	rjmp	.+462    	; 0x1d4 <__bad_interrupt>
       6:	b2 cc       	rjmp	.-1692   	; 0xfffff96c <__eeprom_end+0xff7ef8fc>
       8:	e5 c0       	rjmp	.+458    	; 0x1d4 <__bad_interrupt>
       a:	e4 c0       	rjmp	.+456    	; 0x1d4 <__bad_interrupt>
       c:	e3 c0       	rjmp	.+454    	; 0x1d4 <__bad_interrupt>
       e:	e2 c0       	rjmp	.+452    	; 0x1d4 <__bad_interrupt>
      10:	e1 c0       	rjmp	.+450    	; 0x1d4 <__bad_interrupt>
      12:	63 cb       	rjmp	.-2362   	; 0xfffff6da <__eeprom_end+0xff7ef66a>
      14:	df c0       	rjmp	.+446    	; 0x1d4 <__bad_interrupt>
      16:	de c0       	rjmp	.+444    	; 0x1d4 <__bad_interrupt>
      18:	dd c0       	rjmp	.+442    	; 0x1d4 <__bad_interrupt>
      1a:	dc c0       	rjmp	.+440    	; 0x1d4 <__bad_interrupt>
      1c:	ed c1       	rjmp	.+986    	; 0x3f8 <__vector_14>
      1e:	da c0       	rjmp	.+436    	; 0x1d4 <__bad_interrupt>
      20:	1e cb       	rjmp	.-2500   	; 0xfffff65e <__eeprom_end+0xff7ef5ee>
      22:	d8 c0       	rjmp	.+432    	; 0x1d4 <__bad_interrupt>
      24:	d7 c0       	rjmp	.+430    	; 0x1d4 <__bad_interrupt>

00000026 <pmCalibrationDefaults>:
      26:	18 82 1c 03 88 06                                   ......

0000002c <pmGlobalDefaults>:
      2c:	32 0a 01 1e                                         2...

00000030 <led_encode_table>:
      30:	30 3f 4f 3f 31 06 32 5b 33 4f 34 66 53 6d 35 6d     0?O?1.2[3O4fSm5m
      40:	36 7d 37 07 38 7f 39 6f 2e 80 2c 80 2d 40 5f 08     6}7.8.9o..,.-@_.
      50:	20 00 b0 63 41 77 43 39 46 71 4e 54 44 5e 50 73      ..cAwC9FqNTD^Ps
      60:	45 79 55 3e 47 3d 52 50                             EyU>G=RP

00000068 <ms_calibDo>:
      68:	20 20 20 00                                            .

0000006c <ms_autoPoffDo>:
      6c:	4f 46 46 20 20 20 00                                OFF   .

00000073 <ms_soundEnDo>:
      73:	53 4e 44 20 20 20 00                                SND   .

0000007a <ms_rollDo>:
      7a:	20 20 20 20 20 20 00                                      .

00000081 <ms_realTempDo>:
      81:	20 20 20 20 b0 43 00                                    .C.

00000088 <menuFunctionSet>:
      88:	01 4c 07 4e 07 34 06 03 2c 06 1a 07 af 05 02 17     .L.N.4..,.......
      98:	07 cc 06 25 06 05 1f 06 9d 06 00 00 0b bd 05 9d     ...%............
      a8:	06 c5 05 04 19 06 3d 06 00 00 0c bd 05 3d 06 d3     ......=......=..
      b8:	05 06 0d 06 71 06 00 00 09 bd 05 71 06 e5 05 07     ....q......q....
      c8:	01 06 71 06 00 00 0a bd 05 71 06 e5 05 08 36 06     ..q......q....6.
      d8:	f3 05 00 00 0d 36 06 f3 05 00 00 0e f7 05 ec 05     .....6..........
      e8:	e1 05                                               ..

000000ea <menuJumpSet>:
      ea:	01 c0 00 03 8a 01 00 01 02 40 01 00 02 05 0a 02     .........@......
      fa:	00 01 01 80 02 00 02 05 0a 03 00 81 01 40 03 00     .............@..
     10a:	02 01 60 05 00 82 01 00 05 80 00 04 4a 05 40 00     ..`.........J.@.
     11a:	07 8a 05 00 01 0b 0a 0b 00 81 05 0a 0b 00 02 05     ................
     12a:	2a 04 00 82 01 00 04 80 00 06 4a 04 40 00 05 8a     *.........J.@...
     13a:	04 00 01 0c 0a 0c 00 81 04 0a 0c 00 02 04 2a 06     ..............*.
     14a:	00 82 01 00 06 80 00 07 4a 06 40 00 04 8a 06 00     ........J.@.....
     15a:	01 09 00 07 00 82 01 00 07 80 00 05 4a 07 40 00     ............J.@.
     16a:	06 8a 07 00 01 0a 00 09 00 02 06 0a 09 00 01 08     ................
     17a:	05 08 00 83 01 00 0a 00 02 07 0a 0a 00 01 0d 05     ................
     18a:	0d 00 83 01 00 01 00 40 0e 00 02 00 40 0e 00 0e     .......@....@...
     19a:	d5 03 01 00                                         ....

0000019e <__ctors_end>:
     19e:	11 24       	eor	r1, r1
     1a0:	1f be       	out	0x3f, r1	; 63
     1a2:	cf e5       	ldi	r28, 0x5F	; 95
     1a4:	d4 e0       	ldi	r29, 0x04	; 4
     1a6:	de bf       	out	0x3e, r29	; 62
     1a8:	cd bf       	out	0x3d, r28	; 61

000001aa <__do_copy_data>:
     1aa:	11 e0       	ldi	r17, 0x01	; 1
     1ac:	a0 e6       	ldi	r26, 0x60	; 96
     1ae:	b0 e0       	ldi	r27, 0x00	; 0
     1b0:	ee e3       	ldi	r30, 0x3E	; 62
     1b2:	fc e1       	ldi	r31, 0x1C	; 28
     1b4:	02 c0       	rjmp	.+4      	; 0x1ba <__do_copy_data+0x10>
     1b6:	05 90       	lpm	r0, Z+
     1b8:	0d 92       	st	X+, r0
     1ba:	a2 34       	cpi	r26, 0x42	; 66
     1bc:	b1 07       	cpc	r27, r17
     1be:	d9 f7       	brne	.-10     	; 0x1b6 <__do_copy_data+0xc>

000001c0 <__do_clear_bss>:
     1c0:	22 e0       	ldi	r18, 0x02	; 2
     1c2:	a2 e4       	ldi	r26, 0x42	; 66
     1c4:	b1 e0       	ldi	r27, 0x01	; 1
     1c6:	01 c0       	rjmp	.+2      	; 0x1ca <.do_clear_bss_start>

000001c8 <.do_clear_bss_loop>:
     1c8:	1d 92       	st	X+, r1

000001ca <.do_clear_bss_start>:
     1ca:	a9 33       	cpi	r26, 0x39	; 57
     1cc:	b2 07       	cpc	r27, r18
     1ce:	e1 f7       	brne	.-8      	; 0x1c8 <.do_clear_bss_loop>
     1d0:	97 d7       	rcall	.+3886   	; 0x1100 <main>
     1d2:	33 cd       	rjmp	.-1434   	; 0xfffffc3a <__eeprom_end+0xff7efbca>

000001d4 <__bad_interrupt>:
     1d4:	15 cf       	rjmp	.-470    	; 0x0 <__vectors>

000001d6 <conv_ADC_to_Celsius>:
//-------------------------------------------------------//
// Converts ADC counts to Celsius degree
//  using previously calculated k_norm and offset_norm
//-------------------------------------------------------//
int16_t conv_ADC_to_Celsius(uint16_t adc_value)
{	
     1d6:	0f 93       	push	r16
     1d8:	1f 93       	push	r17
	//return (int16_t)(((int32_t)adc_value * k_norm + offset_norm) / (COEFF_SCALE));					// Truncate
	return (int16_t)(((int32_t)adc_value * k_norm + offset_norm + (COEFF_SCALE>>1)) / (COEFF_SCALE));	// Round
     1da:	20 91 42 01 	lds	r18, 0x0142
     1de:	30 91 43 01 	lds	r19, 0x0143
     1e2:	40 91 44 01 	lds	r20, 0x0144
     1e6:	50 91 45 01 	lds	r21, 0x0145
     1ea:	dc 01       	movw	r26, r24
     1ec:	b9 dc       	rcall	.-1678   	; 0xfffffb60 <__eeprom_end+0xff7efaf0>
     1ee:	00 91 46 01 	lds	r16, 0x0146
     1f2:	10 91 47 01 	lds	r17, 0x0147
     1f6:	20 91 48 01 	lds	r18, 0x0148
     1fa:	30 91 49 01 	lds	r19, 0x0149
     1fe:	60 0f       	add	r22, r16
     200:	71 1f       	adc	r23, r17
     202:	82 1f       	adc	r24, r18
     204:	93 1f       	adc	r25, r19
     206:	68 57       	subi	r22, 0x78	; 120
     208:	7c 4e       	sbci	r23, 0xEC	; 236
     20a:	8f 4f       	sbci	r24, 0xFF	; 255
     20c:	9f 4f       	sbci	r25, 0xFF	; 255
     20e:	20 e1       	ldi	r18, 0x10	; 16
     210:	37 e2       	ldi	r19, 0x27	; 39
     212:	40 e0       	ldi	r20, 0x00	; 0
     214:	50 e0       	ldi	r21, 0x00	; 0
     216:	71 dc       	rcall	.-1822   	; 0xfffffafa <__eeprom_end+0xff7efa8a>
}
     218:	c9 01       	movw	r24, r18
     21a:	1f 91       	pop	r17
     21c:	0f 91       	pop	r16
     21e:	08 95       	ret

00000220 <conv_Celsius_to_ADC>:
//-------------------------------------------------------//
// Converts Celsius degree to ADC counts
//  using previously calculated k_norm and offset_norm
//-------------------------------------------------------//
uint16_t conv_Celsius_to_ADC(int16_t degree_value)
{
     220:	cf 92       	push	r12
     222:	df 92       	push	r13
     224:	ef 92       	push	r14
     226:	ff 92       	push	r15
     228:	0f 93       	push	r16
     22a:	1f 93       	push	r17
	//degree_value += 1;
	//return (uint16_t)(((int32_t)degree_value * COEFF_SCALE - offset_norm) / k_norm);				// Truncate
	return (uint16_t)(((int32_t)degree_value * COEFF_SCALE - offset_norm + (k_norm>>1)) / k_norm);	// Round
     22c:	c0 90 42 01 	lds	r12, 0x0142
     230:	d0 90 43 01 	lds	r13, 0x0143
     234:	e0 90 44 01 	lds	r14, 0x0144
     238:	f0 90 45 01 	lds	r15, 0x0145
     23c:	20 e1       	ldi	r18, 0x10	; 16
     23e:	37 e2       	ldi	r19, 0x27	; 39
     240:	dc 01       	movw	r26, r24
     242:	88 dc       	rcall	.-1776   	; 0xfffffb54 <__eeprom_end+0xff7efae4>
     244:	00 91 46 01 	lds	r16, 0x0146
     248:	10 91 47 01 	lds	r17, 0x0147
     24c:	20 91 48 01 	lds	r18, 0x0148
     250:	30 91 49 01 	lds	r19, 0x0149
     254:	60 1b       	sub	r22, r16
     256:	71 0b       	sbc	r23, r17
     258:	82 0b       	sbc	r24, r18
     25a:	93 0b       	sbc	r25, r19
     25c:	97 01       	movw	r18, r14
     25e:	86 01       	movw	r16, r12
     260:	35 95       	asr	r19
     262:	27 95       	ror	r18
     264:	17 95       	ror	r17
     266:	07 95       	ror	r16
     268:	60 0f       	add	r22, r16
     26a:	71 1f       	adc	r23, r17
     26c:	82 1f       	adc	r24, r18
     26e:	93 1f       	adc	r25, r19
     270:	a7 01       	movw	r20, r14
     272:	96 01       	movw	r18, r12
     274:	42 dc       	rcall	.-1916   	; 0xfffffafa <__eeprom_end+0xff7efa8a>
}
     276:	c9 01       	movw	r24, r18
     278:	1f 91       	pop	r17
     27a:	0f 91       	pop	r16
     27c:	ff 90       	pop	r15
     27e:	ef 90       	pop	r14
     280:	df 90       	pop	r13
     282:	cf 90       	pop	r12
     284:	08 95       	ret

00000286 <calculateCoeffs>:
//  ADC(sensor) function is considered linear, so two points are required.
//	Every point holds Celsius value and corresponding ADC value
// 	k_norm and offset_norm are scaled by COEFF_SCALE to reduce error
//-------------------------------------------------------//
void calculateCoeffs(void)
{
     286:	8f 92       	push	r8
     288:	9f 92       	push	r9
     28a:	af 92       	push	r10
     28c:	bf 92       	push	r11
     28e:	cf 92       	push	r12
     290:	df 92       	push	r13
     292:	ef 92       	push	r14
     294:	ff 92       	push	r15
     296:	cf 93       	push	r28
     298:	df 93       	push	r29
	//k_norm = ((int32_t)(cp.cpoint2 - cp.cpoint1) * COEFF_SCALE) / ((int32_t)(cp.cpoint2_adc - cp.cpoint1_adc));	// Truncate
	int16_t temp = cp.cpoint2_adc - cp.cpoint1_adc;
     29a:	c0 91 08 02 	lds	r28, 0x0208
     29e:	d0 91 09 02 	lds	r29, 0x0209
     2a2:	40 91 0a 02 	lds	r20, 0x020A
     2a6:	50 91 0b 02 	lds	r21, 0x020B
     2aa:	4c 1b       	sub	r20, r28
     2ac:	5d 0b       	sbc	r21, r29
	k_norm = ((int32_t)(cp.cpoint2 - cp.cpoint1) * COEFF_SCALE + (int32_t)(temp>>1)) / ((int32_t)temp);				// Round
     2ae:	f0 90 06 02 	lds	r15, 0x0206
     2b2:	a0 91 07 02 	lds	r26, 0x0207
     2b6:	b0 e0       	ldi	r27, 0x00	; 0
     2b8:	af 19       	sub	r26, r15
     2ba:	b1 09       	sbc	r27, r1
     2bc:	20 e1       	ldi	r18, 0x10	; 16
     2be:	37 e2       	ldi	r19, 0x27	; 39
     2c0:	49 dc       	rcall	.-1902   	; 0xfffffb54 <__eeprom_end+0xff7efae4>
     2c2:	4a 01       	movw	r8, r20
     2c4:	95 94       	asr	r9
     2c6:	87 94       	ror	r8
     2c8:	aa 24       	eor	r10, r10
     2ca:	97 fc       	sbrc	r9, 7
     2cc:	a0 94       	com	r10
     2ce:	ba 2c       	mov	r11, r10
     2d0:	68 0d       	add	r22, r8
     2d2:	79 1d       	adc	r23, r9
     2d4:	8a 1d       	adc	r24, r10
     2d6:	9b 1d       	adc	r25, r11
     2d8:	9a 01       	movw	r18, r20
     2da:	44 27       	eor	r20, r20
     2dc:	37 fd       	sbrc	r19, 7
     2de:	40 95       	com	r20
     2e0:	54 2f       	mov	r21, r20
     2e2:	0b dc       	rcall	.-2026   	; 0xfffffafa <__eeprom_end+0xff7efa8a>
     2e4:	49 01       	movw	r8, r18
     2e6:	5a 01       	movw	r10, r20
     2e8:	20 93 42 01 	sts	0x0142, r18
     2ec:	30 93 43 01 	sts	0x0143, r19
     2f0:	40 93 44 01 	sts	0x0144, r20
     2f4:	50 93 45 01 	sts	0x0145, r21
	offset_norm = (int32_t)cp.cpoint1 * COEFF_SCALE - (int32_t)cp.cpoint1_adc * k_norm;
     2f8:	2f 2d       	mov	r18, r15
     2fa:	30 e0       	ldi	r19, 0x00	; 0
     2fc:	a0 e1       	ldi	r26, 0x10	; 16
     2fe:	b7 e2       	ldi	r27, 0x27	; 39
     300:	1d dc       	rcall	.-1990   	; 0xfffffb3c <__eeprom_end+0xff7efacc>
     302:	6b 01       	movw	r12, r22
     304:	7c 01       	movw	r14, r24
     306:	de 01       	movw	r26, r28
     308:	a5 01       	movw	r20, r10
     30a:	94 01       	movw	r18, r8
     30c:	29 dc       	rcall	.-1966   	; 0xfffffb60 <__eeprom_end+0xff7efaf0>
     30e:	c6 1a       	sub	r12, r22
     310:	d7 0a       	sbc	r13, r23
     312:	e8 0a       	sbc	r14, r24
     314:	f9 0a       	sbc	r15, r25
     316:	c0 92 46 01 	sts	0x0146, r12
     31a:	d0 92 47 01 	sts	0x0147, r13
     31e:	e0 92 48 01 	sts	0x0148, r14
     322:	f0 92 49 01 	sts	0x0149, r15
}
     326:	df 91       	pop	r29
     328:	cf 91       	pop	r28
     32a:	ff 90       	pop	r15
     32c:	ef 90       	pop	r14
     32e:	df 90       	pop	r13
     330:	cf 90       	pop	r12
     332:	bf 90       	pop	r11
     334:	af 90       	pop	r10
     336:	9f 90       	pop	r9
     338:	8f 90       	pop	r8
     33a:	08 95       	ret

0000033c <update_normalized_adc>:
	uint8_t i;
	uint16_t adc_raw_summ = 0;
	uint16_t adc_oversampled;
	
	// Disable interrupts from ADC - to save data integrity
	ADCSRA = (1<<ADEN | 1<<ADPS2 | 1<<ADPS1 | 1<<ADPS0);
     33c:	87 e8       	ldi	r24, 0x87	; 135
     33e:	86 b9       	out	0x06, r24	; 6
     340:	ea e4       	ldi	r30, 0x4A	; 74
     342:	f1 e0       	ldi	r31, 0x01	; 1
//	adc_filtered - oversampled and filtered version, 4x adc_normalized
//-------------------------------------------------------//
void update_normalized_adc()
{
	uint8_t i;
	uint16_t adc_raw_summ = 0;
     344:	80 e0       	ldi	r24, 0x00	; 0
     346:	90 e0       	ldi	r25, 0x00	; 0
	// Disable interrupts from ADC - to save data integrity
	ADCSRA = (1<<ADEN | 1<<ADPS2 | 1<<ADPS1 | 1<<ADPS0);
	
	// Get normalized mean window summ
	for (i=0;i<ADC_BUFFER_LENGTH;i++)
		adc_raw_summ += raw_adc_buffer[i];
     348:	21 91       	ld	r18, Z+
     34a:	31 91       	ld	r19, Z+
     34c:	82 0f       	add	r24, r18
     34e:	93 1f       	adc	r25, r19
	
	// Disable interrupts from ADC - to save data integrity
	ADCSRA = (1<<ADEN | 1<<ADPS2 | 1<<ADPS1 | 1<<ADPS0);
	
	// Get normalized mean window summ
	for (i=0;i<ADC_BUFFER_LENGTH;i++)
     350:	21 e0       	ldi	r18, 0x01	; 1
     352:	ea 38       	cpi	r30, 0x8A	; 138
     354:	f2 07       	cpc	r31, r18
     356:	c1 f7       	brne	.-16     	; 0x348 <update_normalized_adc+0xc>
		adc_raw_summ += raw_adc_buffer[i];
	
	// Enable interrupts from ADC
	ADCSRA = (1<<ADEN | 1<<ADIE | 1<<ADPS2 | 1<<ADPS1 | 1<<ADPS0);
     358:	2f e8       	ldi	r18, 0x8F	; 143
     35a:	26 b9       	out	0x06, r18	; 6
	
	adc_normalized = adc_raw_summ >> 5;		// ADC_BUFFER_LENGTH = 32 !
     35c:	9c 01       	movw	r18, r24
     35e:	f5 e0       	ldi	r31, 0x05	; 5
     360:	36 95       	lsr	r19
     362:	27 95       	ror	r18
     364:	fa 95       	dec	r31
     366:	e1 f7       	brne	.-8      	; 0x360 <update_normalized_adc+0x24>
     368:	30 93 fd 01 	sts	0x01FD, r19
     36c:	20 93 fc 01 	sts	0x01FC, r18
	adc_oversampled = adc_raw_summ >> 3;	// adc_oversampled is 4 times greater than adc_normalized
	// Filter
	adc_filtered = fir_i16_i8(adc_oversampled, filter_buffer, &fir_filter_rect);	
     370:	40 e6       	ldi	r20, 0x60	; 96
     372:	50 e0       	ldi	r21, 0x00	; 0
     374:	6a e8       	ldi	r22, 0x8A	; 138
     376:	71 e0       	ldi	r23, 0x01	; 1
     378:	a3 e0       	ldi	r26, 0x03	; 3
     37a:	96 95       	lsr	r25
     37c:	87 95       	ror	r24
     37e:	aa 95       	dec	r26
     380:	e1 f7       	brne	.-8      	; 0x37a <update_normalized_adc+0x3e>
     382:	43 d2       	rcall	.+1158   	; 0x80a <fir_i16_i8>
     384:	90 93 fb 01 	sts	0x01FB, r25
     388:	80 93 fa 01 	sts	0x01FA, r24
	// Check sensor
	adc_status = 0;
     38c:	10 92 fe 01 	sts	0x01FE, r1
	if (adc_normalized < ADC_LOW_CORRECT)
     390:	80 91 fc 01 	lds	r24, 0x01FC
     394:	90 91 fd 01 	lds	r25, 0x01FD
     398:	82 33       	cpi	r24, 0x32	; 50
     39a:	91 05       	cpc	r25, r1
     39c:	10 f4       	brcc	.+4      	; 0x3a2 <update_normalized_adc+0x66>
		adc_status |= SENSOR_ERROR_NO_PRESENT;
     39e:	81 e0       	ldi	r24, 0x01	; 1
     3a0:	04 c0       	rjmp	.+8      	; 0x3aa <update_normalized_adc+0x6e>
	else if (adc_normalized > ADC_HIGH_CORRECT)
     3a2:	89 3e       	cpi	r24, 0xE9	; 233
     3a4:	93 40       	sbci	r25, 0x03	; 3
     3a6:	18 f0       	brcs	.+6      	; 0x3ae <update_normalized_adc+0x72>
		adc_status |= SENSOR_ERROR_SHORTED;
     3a8:	82 e0       	ldi	r24, 0x02	; 2
     3aa:	80 93 fe 01 	sts	0x01FE, r24
     3ae:	08 95       	ret

000003b0 <update_Celsius>:
// Updates global Celsius degree variable
//-------------------------------------------------------//
void update_Celsius(void)
{
	// Convert to Celsius degree
	adc_celsius = conv_ADC_to_Celsius(adc_filtered);
     3b0:	80 91 fa 01 	lds	r24, 0x01FA
     3b4:	90 91 fb 01 	lds	r25, 0x01FB
     3b8:	0e df       	rcall	.-484    	; 0x1d6 <conv_ADC_to_Celsius>
     3ba:	90 93 00 02 	sts	0x0200, r25
     3be:	80 93 ff 01 	sts	0x01FF, r24
     3c2:	08 95       	ret

000003c4 <update_CalibrationPoint>:
// Updates specified point Celsius value in global calibration parameters
// Used for sensor calibration.
//-------------------------------------------------------//
void update_CalibrationPoint(uint8_t point_number, uint8_t new_val_celsius)
{
	if (point_number == 1)
     3c4:	81 30       	cpi	r24, 0x01	; 1
     3c6:	59 f4       	brne	.+22     	; 0x3de <update_CalibrationPoint+0x1a>
	{
		cp.cpoint1 = new_val_celsius;
     3c8:	60 93 06 02 	sts	0x0206, r22
		cp.cpoint1_adc = adc_filtered;
     3cc:	80 91 fa 01 	lds	r24, 0x01FA
     3d0:	90 91 fb 01 	lds	r25, 0x01FB
     3d4:	90 93 09 02 	sts	0x0209, r25
     3d8:	80 93 08 02 	sts	0x0208, r24
     3dc:	08 95       	ret
	}
	else if (point_number == 2)
     3de:	82 30       	cpi	r24, 0x02	; 2
     3e0:	51 f4       	brne	.+20     	; 0x3f6 <update_CalibrationPoint+0x32>
	{
		cp.cpoint2 = new_val_celsius;
     3e2:	60 93 07 02 	sts	0x0207, r22
		cp.cpoint2_adc = adc_filtered;
     3e6:	80 91 fa 01 	lds	r24, 0x01FA
     3ea:	90 91 fb 01 	lds	r25, 0x01FB
     3ee:	90 93 0b 02 	sts	0x020B, r25
     3f2:	80 93 0a 02 	sts	0x020A, r24
     3f6:	08 95       	ret

000003f8 <__vector_14>:
//-------------------------------------------------------//
// Analog to digital converter ISR
// ADC conversion is started by system timer (Timer2 ISR) every 1 ms
//-------------------------------------------------------//
ISR(ADC_vect)
{
     3f8:	1f 92       	push	r1
     3fa:	0f 92       	push	r0
     3fc:	0f b6       	in	r0, 0x3f	; 63
     3fe:	0f 92       	push	r0
     400:	11 24       	eor	r1, r1
     402:	2f 93       	push	r18
     404:	3f 93       	push	r19
     406:	4f 93       	push	r20
     408:	8f 93       	push	r24
     40a:	9f 93       	push	r25
     40c:	ef 93       	push	r30
     40e:	ff 93       	push	r31
	static uint8_t adc_buffer_pointer = ADC_BUFFER_LENGTH;
	// Get new sample
	uint16_t new_sample = 1024 - ADC;	
     410:	24 b1       	in	r18, 0x04	; 4
     412:	35 b1       	in	r19, 0x05	; 5
	// Add new sample to the buffer
	raw_adc_buffer[--adc_buffer_pointer] = new_sample;
     414:	40 91 77 00 	lds	r20, 0x0077
     418:	41 50       	subi	r20, 0x01	; 1
     41a:	40 93 77 00 	sts	0x0077, r20
     41e:	e4 2f       	mov	r30, r20
     420:	f0 e0       	ldi	r31, 0x00	; 0
     422:	ee 0f       	add	r30, r30
     424:	ff 1f       	adc	r31, r31
     426:	e6 5b       	subi	r30, 0xB6	; 182
     428:	fe 4f       	sbci	r31, 0xFE	; 254
//-------------------------------------------------------//
ISR(ADC_vect)
{
	static uint8_t adc_buffer_pointer = ADC_BUFFER_LENGTH;
	// Get new sample
	uint16_t new_sample = 1024 - ADC;	
     42a:	80 e0       	ldi	r24, 0x00	; 0
     42c:	94 e0       	ldi	r25, 0x04	; 4
     42e:	82 1b       	sub	r24, r18
     430:	93 0b       	sbc	r25, r19
	// Add new sample to the buffer
	raw_adc_buffer[--adc_buffer_pointer] = new_sample;
     432:	91 83       	std	Z+1, r25	; 0x01
     434:	80 83       	st	Z, r24
	if (adc_buffer_pointer == 0)
     436:	41 11       	cpse	r20, r1
     438:	03 c0       	rjmp	.+6      	; 0x440 <__vector_14+0x48>
		adc_buffer_pointer = ADC_BUFFER_LENGTH;
     43a:	80 e2       	ldi	r24, 0x20	; 32
     43c:	80 93 77 00 	sts	0x0077, r24
}	
     440:	ff 91       	pop	r31
     442:	ef 91       	pop	r30
     444:	9f 91       	pop	r25
     446:	8f 91       	pop	r24
     448:	4f 91       	pop	r20
     44a:	3f 91       	pop	r19
     44c:	2f 91       	pop	r18
     44e:	0f 90       	pop	r0
     450:	0f be       	out	0x3f, r0	; 63
     452:	0f 90       	pop	r0
     454:	1f 90       	pop	r1
     456:	18 95       	reti

00000458 <process_buttons>:
	uint8_t event_hold = 0x00;
	buttons_t *buttons_p = &buttons;
	
	
	// Get the delayed versions of raw button state
	raw_delayed = raw_current;
     458:	40 91 b2 01 	lds	r20, 0x01B2
	raw_delayed_inv = ~raw_current;
     45c:	54 2f       	mov	r21, r20
     45e:	50 95       	com	r21
	// Update current
	raw_current = raw_button_state;
     460:	80 91 22 02 	lds	r24, 0x0222
     464:	80 93 b2 01 	sts	0x01B2, r24
	raw_current_inv = ~raw_current;
     468:	68 2f       	mov	r22, r24
     46a:	60 95       	com	r22
     46c:	90 91 b3 01 	lds	r25, 0x01B3
	
	
	// If some button is pressed or released
	if (raw_delayed != raw_current)
     470:	48 17       	cp	r20, r24
     472:	51 f0       	breq	.+20     	; 0x488 <__stack+0x29>
	{
		if (press_timer < LONG_PRESS_DELAY)
     474:	9c 30       	cpi	r25, 0x0C	; 12
     476:	10 f0       	brcs	.+4      	; 0x47c <__stack+0x1d>
	static uint8_t raw_current = 0;
	uint8_t raw_current_inv;
	uint8_t raw_delayed;
	uint8_t raw_delayed_inv;
	static uint8_t press_timer = 0;		
	uint8_t event_release_short = 0x00;
     478:	90 e0       	ldi	r25, 0x00	; 0
     47a:	01 c0       	rjmp	.+2      	; 0x47e <__stack+0x1f>
	
	// If some button is pressed or released
	if (raw_delayed != raw_current)
	{
		if (press_timer < LONG_PRESS_DELAY)
			event_release_short = 0xFF;			// Button release short
     47c:	9f ef       	ldi	r25, 0xFF	; 255
		//else
			//event_release_long = 0xFF;			// Button release long
			
		// Reset timer	
		press_timer = 0;
     47e:	10 92 b3 01 	sts	0x01B3, r1
	uint8_t raw_delayed_inv;
	static uint8_t press_timer = 0;		
	uint8_t event_release_short = 0x00;
	//uint8_t event_release_long = 0x00;
	uint8_t state_repeat = 0x00;
	uint8_t event_hold = 0x00;
     482:	20 e0       	ldi	r18, 0x00	; 0
	uint8_t raw_delayed;
	uint8_t raw_delayed_inv;
	static uint8_t press_timer = 0;		
	uint8_t event_release_short = 0x00;
	//uint8_t event_release_long = 0x00;
	uint8_t state_repeat = 0x00;
     484:	30 e0       	ldi	r19, 0x00	; 0
     486:	13 c0       	rjmp	.+38     	; 0x4ae <__stack+0x4f>
		press_timer = 0;
	}
	else
	{	
		// Increment timer
		if (press_timer != (LONG_PRESS_DELAY + 1))
     488:	9d 30       	cpi	r25, 0x0D	; 13
     48a:	19 f0       	breq	.+6      	; 0x492 <__stack+0x33>
		{
			press_timer++;
     48c:	9f 5f       	subi	r25, 0xFF	; 255
     48e:	90 93 b3 01 	sts	0x01B3, r25
		}
		
		if (press_timer >= REPEAT_DELAY)
     492:	90 91 b3 01 	lds	r25, 0x01B3
     496:	96 30       	cpi	r25, 0x06	; 6
     498:	20 f0       	brcs	.+8      	; 0x4a2 <__stack+0x43>
		{
			state_repeat = 0xFF;
		}
		if (press_timer == LONG_PRESS_DELAY)
     49a:	9c 30       	cpi	r25, 0x0C	; 12
     49c:	29 f0       	breq	.+10     	; 0x4a8 <__stack+0x49>
	uint8_t raw_delayed_inv;
	static uint8_t press_timer = 0;		
	uint8_t event_release_short = 0x00;
	//uint8_t event_release_long = 0x00;
	uint8_t state_repeat = 0x00;
	uint8_t event_hold = 0x00;
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	04 c0       	rjmp	.+8      	; 0x4aa <__stack+0x4b>
     4a2:	20 e0       	ldi	r18, 0x00	; 0
	uint8_t raw_delayed;
	uint8_t raw_delayed_inv;
	static uint8_t press_timer = 0;		
	uint8_t event_release_short = 0x00;
	//uint8_t event_release_long = 0x00;
	uint8_t state_repeat = 0x00;
     4a4:	30 e0       	ldi	r19, 0x00	; 0
     4a6:	02 c0       	rjmp	.+4      	; 0x4ac <__stack+0x4d>
		{
			state_repeat = 0xFF;
		}
		if (press_timer == LONG_PRESS_DELAY)
		{
			event_hold = 0xFF;
     4a8:	2f ef       	ldi	r18, 0xFF	; 255
			press_timer++;
		}
		
		if (press_timer >= REPEAT_DELAY)
		{
			state_repeat = 0xFF;
     4aa:	3f ef       	ldi	r19, 0xFF	; 255
	static uint8_t raw_current = 0;
	uint8_t raw_current_inv;
	uint8_t raw_delayed;
	uint8_t raw_delayed_inv;
	static uint8_t press_timer = 0;		
	uint8_t event_release_short = 0x00;
     4ac:	90 e0       	ldi	r25, 0x00	; 0
			event_hold = 0xFF;
		}
	}
	
	
	PRELOAD("z",buttons_p);
     4ae:	e1 e0       	ldi	r30, 0x01	; 1
     4b0:	f2 e0       	ldi	r31, 0x02	; 2
	buttons_p->raw_state = raw_current;
     4b2:	80 83       	st	Z, r24
	buttons_p->action_down = raw_current & raw_delayed_inv;
     4b4:	75 2f       	mov	r23, r21
     4b6:	78 23       	and	r23, r24
     4b8:	71 83       	std	Z+1, r23	; 0x01
	buttons_p->action_rep = raw_current & (raw_delayed_inv | state_repeat);
     4ba:	35 2b       	or	r19, r21
     4bc:	38 23       	and	r19, r24
     4be:	32 83       	std	Z+2, r19	; 0x02
	buttons_p->action_up_short = raw_current_inv & raw_delayed & event_release_short;
     4c0:	46 23       	and	r20, r22
     4c2:	49 23       	and	r20, r25
     4c4:	43 83       	std	Z+3, r20	; 0x03
	//buttons_p->action_up_long = raw_current_inv & raw_delayed & event_release_long;
	buttons_p->action_long = raw_current & event_hold;
     4c6:	82 23       	and	r24, r18
     4c8:	84 83       	std	Z+4, r24	; 0x04
     4ca:	08 95       	ret

000004cc <getDataCRC>:
//		uint8_t byte_count	<- number of bytes to use
//	returns:
//		8-bit CRC computed using _crc_ibutton_update() AVR_GCC function
//-------------------------------------------------------//
static uint8_t getDataCRC(void *p,uint8_t byte_count)
{
     4cc:	fc 01       	movw	r30, r24
	uint8_t crc_byte = 0;
     4ce:	80 e0       	ldi	r24, 0x00	; 0
	while(byte_count--)
     4d0:	09 c0       	rjmp	.+18     	; 0x4e4 <getDataCRC+0x18>
	{
		// Using ibutton CRC function for reason of 8-bit output CRC
		crc_byte = _crc_ibutton_update (crc_byte, *(uint8_t*)p++);	
     4d2:	91 91       	ld	r25, Z+

static __inline__ uint8_t
_crc_ibutton_update(uint8_t __crc, uint8_t __data)
{
	uint8_t __i, __pattern;
	__asm__ __volatile__ (
     4d4:	89 27       	eor	r24, r25
     4d6:	98 e0       	ldi	r25, 0x08	; 8
     4d8:	2c e8       	ldi	r18, 0x8C	; 140
     4da:	86 95       	lsr	r24
     4dc:	08 f4       	brcc	.+2      	; 0x4e0 <getDataCRC+0x14>
     4de:	82 27       	eor	r24, r18
     4e0:	9a 95       	dec	r25
     4e2:	d9 f7       	brne	.-10     	; 0x4da <getDataCRC+0xe>
//		8-bit CRC computed using _crc_ibutton_update() AVR_GCC function
//-------------------------------------------------------//
static uint8_t getDataCRC(void *p,uint8_t byte_count)
{
	uint8_t crc_byte = 0;
	while(byte_count--)
     4e4:	61 50       	subi	r22, 0x01	; 1
     4e6:	a8 f7       	brcc	.-22     	; 0x4d2 <getDataCRC+0x6>
	{
		// Using ibutton CRC function for reason of 8-bit output CRC
		crc_byte = _crc_ibutton_update (crc_byte, *(uint8_t*)p++);	
	}
	return crc_byte;
}
     4e8:	08 95       	ret

000004ea <processRollControl>:

//-------------------------------------------------------//
// Function to control motor rotation
//-------------------------------------------------------//
void processRollControl(void)
{	
     4ea:	cf 93       	push	r28
	uint8_t beepState = 0;
	
	// Process auto power off control
	if (autoPowerOffState & AUTO_POFF_ACTIVE)
     4ec:	90 91 b5 01 	lds	r25, 0x01B5
     4f0:	90 ff       	sbrs	r25, 0
     4f2:	1a c0       	rjmp	.+52     	; 0x528 <processRollControl+0x3e>
	{
		stopCycleRolling(RESET_POINTS);	
     4f4:	81 e0       	ldi	r24, 0x01	; 1
     4f6:	49 d8       	rcall	.-3950   	; 0xfffff58a <__eeprom_end+0xff7ef51a>
		if ( (adc_status & (SENSOR_ERROR_NO_PRESENT | SENSOR_ERROR_SHORTED)) ||
     4f8:	80 91 fe 01 	lds	r24, 0x01FE
     4fc:	83 70       	andi	r24, 0x03	; 3
     4fe:	39 f4       	brne	.+14     	; 0x50e <processRollControl+0x24>
			 (adc_celsius > (POFF_MOTOR_TRESHOLD + POFF_MOTOR_HYST)) )
     500:	80 91 ff 01 	lds	r24, 0x01FF
     504:	90 91 00 02 	lds	r25, 0x0200
	
	// Process auto power off control
	if (autoPowerOffState & AUTO_POFF_ACTIVE)
	{
		stopCycleRolling(RESET_POINTS);	
		if ( (adc_status & (SENSOR_ERROR_NO_PRESENT | SENSOR_ERROR_SHORTED)) ||
     508:	88 33       	cpi	r24, 0x38	; 56
     50a:	91 05       	cpc	r25, r1
     50c:	3c f0       	brlt	.+14     	; 0x51c <processRollControl+0x32>
			 (adc_celsius > (POFF_MOTOR_TRESHOLD + POFF_MOTOR_HYST)) )
		{
			// If there is any sensor error, or
			// if temperature is greater than (threshold + some hysteresis) 
			if (!(rollState & (ROLL_FWD | ROLL_REV)))
     50e:	80 91 d0 01 	lds	r24, 0x01D0
     512:	83 70       	andi	r24, 0x03	; 3
     514:	09 f0       	breq	.+2      	; 0x518 <processRollControl+0x2e>
     516:	64 c0       	rjmp	.+200    	; 0x5e0 <processRollControl+0xf6>
			{
				// If motor is stopped
				setMotorDirection(ROLL_FWD);		// Start rotating in order to prevent rollers damage
     518:	81 e0       	ldi	r24, 0x01	; 1
     51a:	04 c0       	rjmp	.+8      	; 0x524 <processRollControl+0x3a>
			}
		}
		else if (adc_celsius <= POFF_MOTOR_TRESHOLD)
     51c:	c3 97       	sbiw	r24, 0x33	; 51
     51e:	0c f0       	brlt	.+2      	; 0x522 <processRollControl+0x38>
     520:	5f c0       	rjmp	.+190    	; 0x5e0 <processRollControl+0xf6>
		{
			setMotorDirection(0);			// Stop the motor
     522:	80 e0       	ldi	r24, 0x00	; 0
     524:	13 d8       	rcall	.-4058   	; 0xfffff54c <__eeprom_end+0xff7ef4dc>
     526:	5c c0       	rjmp	.+184    	; 0x5e0 <processRollControl+0xf6>
	}
	else
	{
		//-------------------------------------//
		// Control direction by buttons
		if ((buttons.raw_state & (BD_ROTFWD | BD_ROTREV)) == (BD_ROTFWD | BD_ROTREV))
     528:	80 91 01 02 	lds	r24, 0x0201
     52c:	84 71       	andi	r24, 0x14	; 20
     52e:	84 31       	cpi	r24, 0x14	; 20
     530:	11 f4       	brne	.+4      	; 0x536 <processRollControl+0x4c>
		{
			// Both Forward and Reverse buttons are pressed - stop
			// Attention - stopping motor when rollers are hot can possibly damage them
			setMotorDirection(0);
     532:	80 e0       	ldi	r24, 0x00	; 0
     534:	15 c0       	rjmp	.+42     	; 0x560 <processRollControl+0x76>
		}
		else if (buttons.action_down & BD_ROTFWD)
     536:	80 91 02 02 	lds	r24, 0x0202
     53a:	82 ff       	sbrs	r24, 2
     53c:	04 c0       	rjmp	.+8      	; 0x546 <processRollControl+0x5c>
		{
			setMotorDirection(ROLL_FWD);	
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	05 d8       	rcall	.-4086   	; 0xfffff54c <__eeprom_end+0xff7ef4dc>
			beepState |= 0x01;			// pressed FWD button
     542:	c1 e0       	ldi	r28, 0x01	; 1
     544:	0f c0       	rjmp	.+30     	; 0x564 <processRollControl+0x7a>
		}		
		else if (buttons.action_down & BD_ROTREV)
     546:	84 ff       	sbrs	r24, 4
     548:	04 c0       	rjmp	.+8      	; 0x552 <processRollControl+0x68>
		{
			setMotorDirection(ROLL_REV);
     54a:	82 e0       	ldi	r24, 0x02	; 2
     54c:	ff d7       	rcall	.+4094   	; 0x154c <setMotorDirection>
			beepState |= 0x02;			// pressed REV button
     54e:	c2 e0       	ldi	r28, 0x02	; 2
     550:	09 c0       	rjmp	.+18     	; 0x564 <processRollControl+0x7a>
		}		
		else if (autoPowerOffState & AUTO_POFF_LEAVE)
     552:	91 ff       	sbrs	r25, 1
     554:	06 c0       	rjmp	.+12     	; 0x562 <processRollControl+0x78>
		{
			// Exiting auto power off mode
			if (!(rollState & (ROLL_FWD | ROLL_REV)))
     556:	80 91 d0 01 	lds	r24, 0x01D0
     55a:	83 70       	andi	r24, 0x03	; 3
     55c:	11 f4       	brne	.+4      	; 0x562 <processRollControl+0x78>
			{
				// Start rotating if motor is stopped
				setMotorDirection(ROLL_FWD);		
     55e:	81 e0       	ldi	r24, 0x01	; 1
     560:	f5 d7       	rcall	.+4074   	; 0x154c <setMotorDirection>
//-------------------------------------------------------//
// Function to control motor rotation
//-------------------------------------------------------//
void processRollControl(void)
{	
	uint8_t beepState = 0;
     562:	c0 e0       	ldi	r28, 0x00	; 0
			}
		}
			
		//-------------------------------------//
		// Control cycle rolling
		if (buttons.action_long & BD_CYCLE)
     564:	80 91 05 02 	lds	r24, 0x0205
     568:	83 ff       	sbrs	r24, 3
     56a:	04 c0       	rjmp	.+8      	; 0x574 <processRollControl+0x8a>
		{
			stopCycleRolling(RESET_POINTS);		// Reset points and disable CYCLE mode (if was enabled)
     56c:	81 e0       	ldi	r24, 0x01	; 1
     56e:	0d d8       	rcall	.-4070   	; 0xfffff58a <__eeprom_end+0xff7ef51a>
			beepState |= 0x08;					// reset of points by long pressing of ROLL button
     570:	c8 60       	ori	r28, 0x08	; 8
     572:	14 c0       	rjmp	.+40     	; 0x59c <processRollControl+0xb2>
		}
		else if (buttons.action_up_short & BD_CYCLE)
     574:	80 91 04 02 	lds	r24, 0x0204
     578:	83 ff       	sbrs	r24, 3
     57a:	10 c0       	rjmp	.+32     	; 0x59c <processRollControl+0xb2>
		{
			// Disable interrupts from timer0
			//	to prevent rollState from changes - not very beautiful approach
			// Interrupts from Timer0 will be reenabled in either stopCycleRolling() or startCycleRolling()
			TIMSK = (1<<OCIE2);
     57c:	80 e8       	ldi	r24, 0x80	; 128
     57e:	89 bf       	out	0x39, r24	; 57
			if (rollState & ROLL_CYCLE)
     580:	80 91 d0 01 	lds	r24, 0x01D0
     584:	82 ff       	sbrs	r24, 2
     586:	04 c0       	rjmp	.+8      	; 0x590 <processRollControl+0xa6>
			{
				stopCycleRolling(DO_NOT_RESET_POINTS);
     588:	80 e0       	ldi	r24, 0x00	; 0
     58a:	ff d7       	rcall	.+4094   	; 0x158a <stopCycleRolling>
				beepState |= 0x20;		// stopped cycle
     58c:	c0 62       	ori	r28, 0x20	; 32
     58e:	06 c0       	rjmp	.+12     	; 0x59c <processRollControl+0xb2>
			}
			else if (startCycleRolling())
     590:	49 d8       	rcall	.-3950   	; 0xfffff624 <__eeprom_end+0xff7ef5b4>
     592:	88 23       	and	r24, r24
     594:	11 f0       	breq	.+4      	; 0x59a <processRollControl+0xb0>
			{
				beepState |= 0x10;		// started cycle
     596:	c0 61       	ori	r28, 0x10	; 16
     598:	01 c0       	rjmp	.+2      	; 0x59c <processRollControl+0xb2>
			}
			else
			{
				beepState |= 0x40;		// failed to start cycle
     59a:	c0 64       	ori	r28, 0x40	; 64
		}		
		
		// ROLL_DIR_CHANGED is set only when direction is changed automatically,
		// not when changed by calling setMotorDirection() function
		// ROLL_DIR_CHANGED and CYCLE_ROLL_DONE flags are sticky
		if (rollState & ROLL_DIR_CHANGED)
     59c:	80 91 d0 01 	lds	r24, 0x01D0
     5a0:	85 ff       	sbrs	r24, 5
     5a2:	03 c0       	rjmp	.+6      	; 0x5aa <processRollControl+0xc0>
		{
			clearRollFlags(ROLL_DIR_CHANGED);
     5a4:	80 e2       	ldi	r24, 0x20	; 32
     5a6:	0b d8       	rcall	.-4074   	; 0xfffff5be <__eeprom_end+0xff7ef54e>
			beepState |= 0x04;	
     5a8:	c4 60       	ori	r28, 0x04	; 4
		}
		if (rollState & CYCLE_ROLL_DONE)
     5aa:	80 91 d0 01 	lds	r24, 0x01D0
     5ae:	84 ff       	sbrs	r24, 4
     5b0:	03 c0       	rjmp	.+6      	; 0x5b8 <processRollControl+0xce>
		{
			clearRollFlags(CYCLE_ROLL_DONE);
     5b2:	80 e1       	ldi	r24, 0x10	; 16
     5b4:	04 d8       	rcall	.-4088   	; 0xfffff5be <__eeprom_end+0xff7ef54e>
			beepState |= 0x80;	
     5b6:	c0 68       	ori	r28, 0x80	; 128
		}		
			
		//-------------------------------------//
		// Process sound events
		if (beepState & 0x80)		// Roll cycle done
     5b8:	c7 ff       	sbrs	r28, 7
     5ba:	03 c0       	rjmp	.+6      	; 0x5c2 <processRollControl+0xd8>
		{
			Sound_Play(m_siren4);	
     5bc:	8c e0       	ldi	r24, 0x0C	; 12
     5be:	90 e0       	ldi	r25, 0x00	; 0
     5c0:	0e c0       	rjmp	.+28     	; 0x5de <processRollControl+0xf4>
		}		
		else if (beepState & 0x40)	// Roll cycle start fail
     5c2:	c6 ff       	sbrs	r28, 6
     5c4:	03 c0       	rjmp	.+6      	; 0x5cc <processRollControl+0xe2>
		{
			Sound_Play(m_beep_500Hz_40ms);	
     5c6:	8c e5       	ldi	r24, 0x5C	; 92
     5c8:	90 e0       	ldi	r25, 0x00	; 0
     5ca:	09 c0       	rjmp	.+18     	; 0x5de <processRollControl+0xf4>
		} 
		else if (beepState & 0x08)	// Reset points
     5cc:	c3 ff       	sbrs	r28, 3
     5ce:	03 c0       	rjmp	.+6      	; 0x5d6 <processRollControl+0xec>
		{
			Sound_Play(m_beep_800Hz_40ms);	
     5d0:	80 e6       	ldi	r24, 0x60	; 96
     5d2:	90 e0       	ldi	r25, 0x00	; 0
     5d4:	04 c0       	rjmp	.+8      	; 0x5de <processRollControl+0xf4>
		}							// Other
		else if ( beepState & (0x01 | 0x02 | 0x10 | 0x20 | 0x04) )
     5d6:	c7 73       	andi	r28, 0x37	; 55
     5d8:	19 f0       	breq	.+6      	; 0x5e0 <processRollControl+0xf6>
		{
			Sound_Play(m_beep_1000Hz_40ms);	
     5da:	84 e6       	ldi	r24, 0x64	; 100
     5dc:	90 e0       	ldi	r25, 0x00	; 0
     5de:	4e da       	rcall	.-2916   	; 0xfffffa7c <__eeprom_end+0xff7efa0c>
		}			
			
	}

	//----- LED indication ------//
	clearExtraLeds(LED_ROTFWD | LED_ROTREV);
     5e0:	88 e1       	ldi	r24, 0x18	; 24
     5e2:	73 d2       	rcall	.+1254   	; 0xaca <clearExtraLeds>
	if (rollState & ROLL_FWD)
     5e4:	80 91 d0 01 	lds	r24, 0x01D0
     5e8:	80 ff       	sbrs	r24, 0
     5ea:	02 c0       	rjmp	.+4      	; 0x5f0 <processRollControl+0x106>
		setExtraLeds(LED_ROTFWD);
     5ec:	88 e0       	ldi	r24, 0x08	; 8
     5ee:	03 c0       	rjmp	.+6      	; 0x5f6 <processRollControl+0x10c>
	else if (rollState & ROLL_REV)
     5f0:	81 ff       	sbrs	r24, 1
     5f2:	03 c0       	rjmp	.+6      	; 0x5fa <processRollControl+0x110>
		setExtraLeds(LED_ROTREV);
     5f4:	80 e1       	ldi	r24, 0x10	; 16
}
     5f6:	cf 91       	pop	r28
	//----- LED indication ------//
	clearExtraLeds(LED_ROTFWD | LED_ROTREV);
	if (rollState & ROLL_FWD)
		setExtraLeds(LED_ROTFWD);
	else if (rollState & ROLL_REV)
		setExtraLeds(LED_ROTREV);
     5f8:	62 c2       	rjmp	.+1220   	; 0xabe <setExtraLeds>
}
     5fa:	cf 91       	pop	r28
     5fc:	08 95       	ret

000005fe <processHeaterControl>:
	uint16_t setPoint;
	uint16_t processValue;
	uint16_t pid_output;
	
	// Process heater ON/OFF control by button
	if (buttons.action_up_short & BD_HEATCTRL)
     5fe:	80 91 04 02 	lds	r24, 0x0204
     602:	80 ff       	sbrs	r24, 0
     604:	05 c0       	rjmp	.+10     	; 0x610 <processHeaterControl+0x12>
	{
		heaterState ^= HEATER_ENABLED;
     606:	80 b1       	in	r24, 0x00	; 0
     608:	91 e0       	ldi	r25, 0x01	; 1
     60a:	89 27       	eor	r24, r25
     60c:	80 b9       	out	0x00, r24	; 0
		// Force update heater power
		sys_timers_flags |= UPDATE_PID;		// Not very good approach if UPDATE_PID flag is used outside this function
     60e:	16 9a       	sbi	0x02, 6	; 2
	}
	
	// Process PID controller reset
	if (buttons.action_long & BD_HEATCTRL)
     610:	80 91 05 02 	lds	r24, 0x0205
     614:	80 ff       	sbrs	r24, 0
     616:	03 c0       	rjmp	.+6      	; 0x61e <processHeaterControl+0x20>
	{
		heaterState |= RESET_PID;
     618:	02 9a       	sbi	0x00, 2	; 0
		// Force update heater power
		sys_timers_flags |= UPDATE_PID;
     61a:	16 9a       	sbi	0x02, 6	; 2
     61c:	01 c0       	rjmp	.+2      	; 0x620 <processHeaterControl+0x22>
	}
	else
	{
		heaterState &= ~RESET_PID;
     61e:	02 98       	cbi	0x00, 2	; 0
	}
	
	// Process auto power off control and sensor errors
	if ((autoPowerOffState & AUTO_POFF_ACTIVE) || (adc_status & (SENSOR_ERROR_NO_PRESENT | SENSOR_ERROR_SHORTED)))
     620:	80 91 b5 01 	lds	r24, 0x01B5
     624:	80 fd       	sbrc	r24, 0
     626:	04 c0       	rjmp	.+8      	; 0x630 <processHeaterControl+0x32>
     628:	80 91 fe 01 	lds	r24, 0x01FE
     62c:	83 70       	andi	r24, 0x03	; 3
     62e:	09 f0       	breq	.+2      	; 0x632 <processHeaterControl+0x34>
	{
		heaterState &= ~HEATER_ENABLED;
     630:	00 98       	cbi	0x00, 0	; 0
	}	

	// Update integrator limits if set point is changed
	if (heaterState & SETPOINT_CHANGED)
     632:	03 9b       	sbis	0x00, 3	; 0
     634:	04 c0       	rjmp	.+8      	; 0x63e <processHeaterControl+0x40>
	{
		setPIDIntegratorLimit(p.setup_temp_value);
     636:	80 91 0c 02 	lds	r24, 0x020C
     63a:	6a d6       	rcall	.+3284   	; 0x1310 <setPIDIntegratorLimit>
		// Force update heater power
		sys_timers_flags |= UPDATE_PID;
     63c:	16 9a       	sbi	0x02, 6	; 2
	}

	
	// Check if heater control should be updated
	// PID call interval is a multiple of Celsius update interval. 
	if (sys_timers_flags & UPDATE_PID)
     63e:	16 9b       	sbis	0x02, 6	; 2
     640:	13 c0       	rjmp	.+38     	; 0x668 <processHeaterControl+0x6a>
	{
		// PID input: 1 count ~ 0.125 Celsius degree (see adc.c)
		setPoint = conv_Celsius_to_ADC(p.setup_temp_value);
     642:	80 91 0c 02 	lds	r24, 0x020C
     646:	90 e0       	ldi	r25, 0x00	; 0
     648:	eb dd       	rcall	.-1066   	; 0x220 <conv_Celsius_to_ADC>
		processValue = adc_filtered;
		
		// Process PID
		// If heater is disabled, output will be 0
		pid_output = processPID(setPoint, processValue, heaterState);		
     64a:	40 b1       	in	r20, 0x00	; 0
     64c:	60 91 fa 01 	lds	r22, 0x01FA
     650:	70 91 fb 01 	lds	r23, 0x01FB
     654:	6a d6       	rcall	.+3284   	; 0x132a <processPID>
		
		// If unregulated mode is selected, override PID output 
		// This mode must be used with care for calibration only
		if ((heaterState & HEATER_ENABLED) && (p.setup_temp_value >= MAX_SET_TEMP))
     656:	00 9b       	sbis	0x00, 0	; 0
     658:	06 c0       	rjmp	.+12     	; 0x666 <processHeaterControl+0x68>
     65a:	20 91 0c 02 	lds	r18, 0x020C
     65e:	2f 3f       	cpi	r18, 0xFF	; 255
     660:	11 f4       	brne	.+4      	; 0x666 <processHeaterControl+0x68>
			pid_output = HEATER_MAX_POWER;		
     662:	84 ef       	ldi	r24, 0xF4	; 244
     664:	91 e0       	ldi	r25, 0x01	; 1
			
		// Apply new heater power value	
		setHeaterPower(pid_output);			
     666:	64 d7       	rcall	.+3784   	; 0x1530 <setHeaterPower>
	}	
		
	
	//----- LED indication ------//
	if (heaterState & HEATER_ENABLED)
		setExtraLeds(LED_HEATER);
     668:	84 e0       	ldi	r24, 0x04	; 4
		setHeaterPower(pid_output);			
	}	
		
	
	//----- LED indication ------//
	if (heaterState & HEATER_ENABLED)
     66a:	00 99       	sbic	0x00, 0	; 0
		setExtraLeds(LED_HEATER);
     66c:	28 c2       	rjmp	.+1104   	; 0xabe <setExtraLeds>
	else
		clearExtraLeds(LED_HEATER);
     66e:	2d c2       	rjmp	.+1114   	; 0xaca <clearExtraLeds>

00000670 <processHeaterEvents>:
void processHeaterEvents(void)
{
	static uint8_t setPoint_prev = MIN_SET_TEMP + 1;	// Init with value that can never be set
	
	// Generate temperature changed event
	if (setPoint_prev != p.setup_temp_value)
     670:	90 91 78 00 	lds	r25, 0x0078
     674:	80 91 0c 02 	lds	r24, 0x020C
     678:	98 17       	cp	r25, r24
     67a:	21 f0       	breq	.+8      	; 0x684 <processHeaterEvents+0x14>
	{
		heaterState |= SETPOINT_CHANGED;
     67c:	03 9a       	sbi	0x00, 3	; 0
		setPoint_prev = p.setup_temp_value;
     67e:	80 93 78 00 	sts	0x0078, r24
     682:	08 95       	ret
	}
	else
	{
		heaterState &= ~SETPOINT_CHANGED;
     684:	03 98       	cbi	0x00, 3	; 0
     686:	08 95       	ret

00000688 <processHeaterAlerts>:
//	- sensor errors
//	- getting close to desired temperature
//	- continuous heating when disabled
//-------------------------------------------------------//
void processHeaterAlerts(void)
{
     688:	cf 93       	push	r28
     68a:	df 93       	push	r29
	static uint8_t tempAlertRange = TEMP_ALERT_RANGE;
	static int16_t refCapturedTemp = INT16_MAX;
	int16_t currentTemperature = adc_celsius;
     68c:	c0 91 ff 01 	lds	r28, 0x01FF
     690:	d0 91 00 02 	lds	r29, 0x0200
	
	// ADC sensor errors alert
	if (adc_status & (SENSOR_ERROR_NO_PRESENT | SENSOR_ERROR_SHORTED))
     694:	80 91 fe 01 	lds	r24, 0x01FE
     698:	83 70       	andi	r24, 0x03	; 3
     69a:	31 f0       	breq	.+12     	; 0x6a8 <processHeaterAlerts+0x20>
	{
		if (sys_timers_flags & EXPIRED_10SEC)
     69c:	11 9b       	sbis	0x02, 1	; 2
     69e:	3e c0       	rjmp	.+124    	; 0x71c <processHeaterAlerts+0x94>
		{
			// Enable beeper output regardless of menu setting
			Sound_OverrideDisable();
     6a0:	ff d9       	rcall	.-3074   	; 0xfffffaa0 <__eeprom_end+0xff7efa30>
			Sound_Play(m_siren3);
     6a2:	84 e1       	ldi	r24, 0x14	; 20
     6a4:	90 e0       	ldi	r25, 0x00	; 0
     6a6:	37 c0       	rjmp	.+110    	; 0x716 <processHeaterAlerts+0x8e>
		return;
	}
	
	
	// Indicate reaching of desired temperature
	if ( (currentTemperature > p.setup_temp_value - tempAlertRange) && (currentTemperature < p.setup_temp_value + tempAlertRange) )
     6a8:	20 91 0c 02 	lds	r18, 0x020C
     6ac:	30 e0       	ldi	r19, 0x00	; 0
     6ae:	60 91 79 00 	lds	r22, 0x0079
     6b2:	86 2f       	mov	r24, r22
     6b4:	90 e0       	ldi	r25, 0x00	; 0
     6b6:	a9 01       	movw	r20, r18
     6b8:	48 1b       	sub	r20, r24
     6ba:	59 0b       	sbc	r21, r25
     6bc:	4c 17       	cp	r20, r28
     6be:	5d 07       	cpc	r21, r29
     6c0:	74 f4       	brge	.+28     	; 0x6de <processHeaterAlerts+0x56>
     6c2:	82 0f       	add	r24, r18
     6c4:	93 1f       	adc	r25, r19
     6c6:	c8 17       	cp	r28, r24
     6c8:	d9 07       	cpc	r29, r25
     6ca:	4c f4       	brge	.+18     	; 0x6de <processHeaterAlerts+0x56>
	{
		if ((tempAlertRange == TEMP_ALERT_RANGE) && (heaterState & HEATER_ENABLED))
     6cc:	65 30       	cpi	r22, 0x05	; 5
     6ce:	29 f4       	brne	.+10     	; 0x6da <processHeaterAlerts+0x52>
     6d0:	00 9b       	sbis	0x00, 0	; 0
     6d2:	03 c0       	rjmp	.+6      	; 0x6da <processHeaterAlerts+0x52>
		{
			Sound_Play(m_siren1);
     6d4:	84 e3       	ldi	r24, 0x34	; 52
     6d6:	90 e0       	ldi	r25, 0x00	; 0
     6d8:	d1 d9       	rcall	.-3166   	; 0xfffffa7c <__eeprom_end+0xff7efa0c>
		}
		// Add some hysteresis
		tempAlertRange = TEMP_ALERT_RANGE + TEMP_ALERT_HYST;
     6da:	8a e0       	ldi	r24, 0x0A	; 10
     6dc:	01 c0       	rjmp	.+2      	; 0x6e0 <processHeaterAlerts+0x58>
	}			
	else
	{
		tempAlertRange = TEMP_ALERT_RANGE;
     6de:	85 e0       	ldi	r24, 0x05	; 5
     6e0:	80 93 79 00 	sts	0x0079, r24
	// Growing temperature with heater disabled alert 
	// This alert is done regardless of global sound enable
	// A false triggering may occur if ambient temperature grows.
	// To reset the warning in this case just turn on heater for at least one systimer tick (50ms)
	// If heater is enabled, it is implied that user controls heating process
	if (heaterState & (HEATER_ENABLED | CALIBRATION_ACTIVE))
     6e4:	80 b1       	in	r24, 0x00	; 0
     6e6:	83 70       	andi	r24, 0x03	; 3
     6e8:	09 f0       	breq	.+2      	; 0x6ec <processHeaterAlerts+0x64>
     6ea:	09 c0       	rjmp	.+18     	; 0x6fe <processHeaterAlerts+0x76>
	{
		// Heater enabled, just save current temperature as reference
		// Same if calibration in progress, even if heater is disabled
		refCapturedTemp = currentTemperature;
	}
	else if (sys_timers_flags & EXPIRED_10SEC)
     6ec:	11 9b       	sbis	0x02, 1	; 2
     6ee:	16 c0       	rjmp	.+44     	; 0x71c <processHeaterAlerts+0x94>
	{
		// Heater disabled. If temperature is falling,
		if (currentTemperature < refCapturedTemp)
     6f0:	80 91 7a 00 	lds	r24, 0x007A
     6f4:	90 91 7b 00 	lds	r25, 0x007B
     6f8:	c8 17       	cp	r28, r24
     6fa:	d9 07       	cpc	r29, r25
     6fc:	2c f4       	brge	.+10     	; 0x708 <processHeaterAlerts+0x80>
		{
			// save current temperature as reference
			refCapturedTemp = currentTemperature;
     6fe:	d0 93 7b 00 	sts	0x007B, r29
     702:	c0 93 7a 00 	sts	0x007A, r28
     706:	0a c0       	rjmp	.+20     	; 0x71c <processHeaterAlerts+0x94>
		else
		{
			// Heater is disabled. If current temperature is higher than reference + some safe interval,
			// there might be a hardware failure - short circuit, etc
			// BEEP like a devil  }:-(
			if (currentTemperature >= (refCapturedTemp + SAFE_TEMP_INTERVAL))
     708:	43 96       	adiw	r24, 0x13	; 19
     70a:	8c 17       	cp	r24, r28
     70c:	9d 07       	cpc	r25, r29
     70e:	34 f4       	brge	.+12     	; 0x71c <processHeaterAlerts+0x94>
			{
				// Enable beeper output regardless of menu setting
				Sound_OverrideDisable();
     710:	c7 d9       	rcall	.-3186   	; 0xfffffaa0 <__eeprom_end+0xff7efa30>
				Sound_Play(m_siren2);
     712:	8a e1       	ldi	r24, 0x1A	; 26
     714:	90 e0       	ldi	r25, 0x00	; 0
			}
		}
	}
}
     716:	df 91       	pop	r29
     718:	cf 91       	pop	r28
			// BEEP like a devil  }:-(
			if (currentTemperature >= (refCapturedTemp + SAFE_TEMP_INTERVAL))
			{
				// Enable beeper output regardless of menu setting
				Sound_OverrideDisable();
				Sound_Play(m_siren2);
     71a:	b0 c9       	rjmp	.-3232   	; 0xfffffa7c <__eeprom_end+0xff7efa0c>
			}
		}
	}
}
     71c:	df 91       	pop	r29
     71e:	cf 91       	pop	r28
     720:	08 95       	ret

00000722 <saveCalibrationToEEPROM>:
//  if USE_EEPROM_CRC is defined, CRC is calculated and stored as well
//-------------------------------------------------------//
void saveCalibrationToEEPROM(void)
{
	// Calibration parameters normally are only saved after calibrating 
	eeprom_update_block(&cp,&eeCalibrationParams,sizeof(cParams_t));	
     722:	46 e0       	ldi	r20, 0x06	; 6
     724:	50 e0       	ldi	r21, 0x00	; 0
     726:	62 e0       	ldi	r22, 0x02	; 2
     728:	70 e0       	ldi	r23, 0x00	; 0
     72a:	86 e0       	ldi	r24, 0x06	; 6
     72c:	92 e0       	ldi	r25, 0x02	; 2
     72e:	65 da       	rcall	.-2870   	; 0xfffffbfa <__eeprom_end+0xff7efb8a>
	#ifdef USE_EEPROM_CRC
	uint8_t new_crc_byte = getDataCRC(&cp,sizeof(cParams_t));
     730:	66 e0       	ldi	r22, 0x06	; 6
     732:	86 e0       	ldi	r24, 0x06	; 6
     734:	92 e0       	ldi	r25, 0x02	; 2
     736:	ca de       	rcall	.-620    	; 0x4cc <getDataCRC>
	eeprom_update_byte(&ee_cParamsCRC,new_crc_byte);
     738:	68 2f       	mov	r22, r24
     73a:	80 e0       	ldi	r24, 0x00	; 0
     73c:	90 e0       	ldi	r25, 0x00	; 0
     73e:	6c ca       	rjmp	.-2856   	; 0xfffffc18 <__eeprom_end+0xff7efba8>

00000740 <saveGlobalParamsToEEPROM>:
//-------------------------------------------------------//
void saveGlobalParamsToEEPROM(void)
{
	// Save global parameters to EEPROM
	// eeprom_update_block() updates only bytes that were changed
	eeprom_update_block(&p,&eeGlobalParams,sizeof(gParams_t));
     740:	44 e0       	ldi	r20, 0x04	; 4
     742:	50 e0       	ldi	r21, 0x00	; 0
     744:	68 e0       	ldi	r22, 0x08	; 8
     746:	70 e0       	ldi	r23, 0x00	; 0
     748:	8c e0       	ldi	r24, 0x0C	; 12
     74a:	92 e0       	ldi	r25, 0x02	; 2
     74c:	56 da       	rcall	.-2900   	; 0xfffffbfa <__eeprom_end+0xff7efb8a>
	#ifdef USE_EEPROM_CRC
	uint8_t new_crc_byte = getDataCRC(&p,sizeof(gParams_t));
     74e:	64 e0       	ldi	r22, 0x04	; 4
     750:	8c e0       	ldi	r24, 0x0C	; 12
     752:	92 e0       	ldi	r25, 0x02	; 2
     754:	bb de       	rcall	.-650    	; 0x4cc <getDataCRC>
	eeprom_update_byte(&ee_gParamsCRC,new_crc_byte);
     756:	68 2f       	mov	r22, r24
     758:	81 e0       	ldi	r24, 0x01	; 1
     75a:	90 e0       	ldi	r25, 0x00	; 0
     75c:	5d ca       	rjmp	.-2886   	; 0xfffffc18 <__eeprom_end+0xff7efba8>

0000075e <restoreGlobalParams>:
//		1 if control parameters were corrupted and restored from defaults stored in FLASH
//		2 if calibration parameters were corrupted and restored
//		3 if both were corrupted and restored.
//-------------------------------------------------------//
uint8_t restoreGlobalParams(void)
{	
     75e:	cf 93       	push	r28
     760:	df 93       	push	r29
	uint8_t defaults_used = 0;
	
	// Restore global parameters - temperature setting, sound enable, etc.
	eeprom_read_block(&p,&eeGlobalParams,sizeof(gParams_t));
     762:	44 e0       	ldi	r20, 0x04	; 4
     764:	50 e0       	ldi	r21, 0x00	; 0
     766:	68 e0       	ldi	r22, 0x08	; 8
     768:	70 e0       	ldi	r23, 0x00	; 0
     76a:	8c e0       	ldi	r24, 0x0C	; 12
     76c:	92 e0       	ldi	r25, 0x02	; 2
     76e:	2d da       	rcall	.-2982   	; 0xfffffbca <__eeprom_end+0xff7efb5a>
	// Restore ADC calibration parameters
	eeprom_read_block(&cp,&eeCalibrationParams,sizeof(cParams_t));
     770:	46 e0       	ldi	r20, 0x06	; 6
     772:	50 e0       	ldi	r21, 0x00	; 0
     774:	62 e0       	ldi	r22, 0x02	; 2
     776:	70 e0       	ldi	r23, 0x00	; 0
     778:	86 e0       	ldi	r24, 0x06	; 6
     77a:	92 e0       	ldi	r25, 0x02	; 2
     77c:	26 da       	rcall	.-2996   	; 0xfffffbca <__eeprom_end+0xff7efb5a>
	#ifdef USE_EEPROM_CRC
	uint8_t crc_byte;
	uint8_t temp8u;
	
	//------- Check global params -------//
	crc_byte = getDataCRC(&p,sizeof(gParams_t));
     77e:	64 e0       	ldi	r22, 0x04	; 4
     780:	8c e0       	ldi	r24, 0x0C	; 12
     782:	92 e0       	ldi	r25, 0x02	; 2
     784:	a3 de       	rcall	.-698    	; 0x4cc <getDataCRC>
     786:	c8 2f       	mov	r28, r24
	temp8u = eeprom_read_byte(&ee_gParamsCRC);
     788:	81 e0       	ldi	r24, 0x01	; 1
     78a:	90 e0       	ldi	r25, 0x00	; 0
     78c:	2e da       	rcall	.-2980   	; 0xfffffbea <__eeprom_end+0xff7efb7a>
	// Restore global defaults if corrupted
	if (temp8u != crc_byte)
     78e:	8c 17       	cp	r24, r28
     790:	51 f0       	breq	.+20     	; 0x7a6 <restoreGlobalParams+0x48>
	{
		//PGM_read_block(&p,&pmGlobalDefaults,sizeof(gParams_t));
		memcpy_P(&p,&pmGlobalDefaults,sizeof(gParams_t));
     792:	44 e0       	ldi	r20, 0x04	; 4
     794:	50 e0       	ldi	r21, 0x00	; 0
     796:	6c e2       	ldi	r22, 0x2C	; 44
     798:	70 e0       	ldi	r23, 0x00	; 0
     79a:	8c e0       	ldi	r24, 0x0C	; 12
     79c:	92 e0       	ldi	r25, 0x02	; 2
     79e:	0c da       	rcall	.-3048   	; 0xfffffbb8 <__eeprom_end+0xff7efb48>
		// Save restored default values with correct CRC
		saveGlobalParamsToEEPROM();
     7a0:	cf df       	rcall	.-98     	; 0x740 <saveGlobalParamsToEEPROM>
		defaults_used |= 0x01;
     7a2:	c1 e0       	ldi	r28, 0x01	; 1
     7a4:	01 c0       	rjmp	.+2      	; 0x7a8 <restoreGlobalParams+0x4a>
//		2 if calibration parameters were corrupted and restored
//		3 if both were corrupted and restored.
//-------------------------------------------------------//
uint8_t restoreGlobalParams(void)
{	
	uint8_t defaults_used = 0;
     7a6:	c0 e0       	ldi	r28, 0x00	; 0
		saveGlobalParamsToEEPROM();
		defaults_used |= 0x01;
	}
	
	//----- Check calibration params -----//
	crc_byte = getDataCRC(&cp,sizeof(cParams_t));
     7a8:	66 e0       	ldi	r22, 0x06	; 6
     7aa:	86 e0       	ldi	r24, 0x06	; 6
     7ac:	92 e0       	ldi	r25, 0x02	; 2
     7ae:	8e de       	rcall	.-740    	; 0x4cc <getDataCRC>
     7b0:	d8 2f       	mov	r29, r24
	temp8u = eeprom_read_byte(&ee_cParamsCRC);
     7b2:	80 e0       	ldi	r24, 0x00	; 0
     7b4:	90 e0       	ldi	r25, 0x00	; 0
     7b6:	19 da       	rcall	.-3022   	; 0xfffffbea <__eeprom_end+0xff7efb7a>
	// Restore calibration defaults if corrupted
	if (temp8u != crc_byte)
     7b8:	8d 17       	cp	r24, r29
     7ba:	49 f0       	breq	.+18     	; 0x7ce <restoreGlobalParams+0x70>
	{
		//PGM_read_block(&cp,&pmCalibrationDefaults,sizeof(cParams_t));
		memcpy_P(&cp,&pmCalibrationDefaults,sizeof(cParams_t));
     7bc:	46 e0       	ldi	r20, 0x06	; 6
     7be:	50 e0       	ldi	r21, 0x00	; 0
     7c0:	66 e2       	ldi	r22, 0x26	; 38
     7c2:	70 e0       	ldi	r23, 0x00	; 0
     7c4:	86 e0       	ldi	r24, 0x06	; 6
     7c6:	92 e0       	ldi	r25, 0x02	; 2
     7c8:	f7 d9       	rcall	.-3090   	; 0xfffffbb8 <__eeprom_end+0xff7efb48>
		// Save restored default values with correct CRC
		saveCalibrationToEEPROM();
     7ca:	ab df       	rcall	.-170    	; 0x722 <saveCalibrationToEEPROM>
		defaults_used |= 0x02;	
     7cc:	c2 60       	ori	r28, 0x02	; 2
	}
	#endif
	
	return defaults_used;
}
     7ce:	8c 2f       	mov	r24, r28
     7d0:	df 91       	pop	r29
     7d2:	cf 91       	pop	r28
     7d4:	08 95       	ret

000007d6 <exitPowerOff>:
//	are switched off, and global control parameters are saved to EEPROM
//-------------------------------------------------------//
void exitPowerOff(void)
{
	// Disable all interrupts
	cli();
     7d6:	f8 94       	cli
	
	// Put all ports into HI-Z
	DDRB = 0x00;
     7d8:	17 ba       	out	0x17, r1	; 23
	PORTB = 0x00;
     7da:	18 ba       	out	0x18, r1	; 24
	DDRC = 0x00;
     7dc:	14 ba       	out	0x14, r1	; 20
	PORTC = 0x00;
     7de:	15 ba       	out	0x15, r1	; 21
	

	PORTD = 0x00;			// Prevent pull-ups
     7e0:	12 ba       	out	0x12, r1	; 18
	DDRD = (1<<PD_TXD);
     7e2:	82 e0       	ldi	r24, 0x02	; 2
     7e4:	81 bb       	out	0x11, r24	; 17
	USART_sendstr("\r\nAC sync lost\r\n");
     7e6:	80 e9       	ldi	r24, 0x90	; 144
     7e8:	90 e0       	ldi	r25, 0x00	; 0
     7ea:	62 d9       	rcall	.-3388   	; 0xfffffab0 <__eeprom_end+0xff7efa40>
	
	saveGlobalParamsToEEPROM();
     7ec:	a9 df       	rcall	.-174    	; 0x740 <saveGlobalParamsToEEPROM>
	
	#ifdef MAIN_LOOP_TIME_PROFILING				
	USART_sendstr("Max. main loop time:");
     7ee:	81 ea       	ldi	r24, 0xA1	; 161
     7f0:	90 e0       	ldi	r25, 0x00	; 0
     7f2:	5e d9       	rcall	.-3396   	; 0xfffffab0 <__eeprom_end+0xff7efa40>
	logU16p(max_work_time);
     7f4:	80 91 b4 01 	lds	r24, 0x01B4
     7f8:	90 e0       	ldi	r25, 0x00	; 0
     7fa:	65 d9       	rcall	.-3382   	; 0xfffffac6 <__eeprom_end+0xff7efa56>
	USART_sendstr(" ms\r\n");
     7fc:	86 eb       	ldi	r24, 0xB6	; 182
     7fe:	90 e0       	ldi	r25, 0x00	; 0
     800:	57 d9       	rcall	.-3410   	; 0xfffffab0 <__eeprom_end+0xff7efa40>
	#endif
	
	USART_sendstr("Turn OFF");
     802:	8c eb       	ldi	r24, 0xBC	; 188
     804:	90 e0       	ldi	r25, 0x00	; 0
     806:	54 d9       	rcall	.-3416   	; 0xfffffab0 <__eeprom_end+0xff7efa40>
     808:	ff cf       	rjmp	.-2      	; 0x808 <exitPowerOff+0x32>

0000080a <fir_i16_i8>:
// FIR digital filter
// Samples: signed, 16-bit
// Coeffs:  signed, 8-bit
//---------------------------------------------//
int16_t fir_i16_i8(int16_t new_sample, int16_t *samples, filter8bit_core_t* iir_core)
{
     80a:	cf 92       	push	r12
     80c:	df 92       	push	r13
     80e:	ef 92       	push	r14
     810:	ff 92       	push	r15
     812:	0f 93       	push	r16
     814:	1f 93       	push	r17
     816:	cf 93       	push	r28
     818:	df 93       	push	r29
     81a:	8c 01       	movw	r16, r24
     81c:	eb 01       	movw	r28, r22
     81e:	fa 01       	movw	r30, r20
	int32_t summ;
	uint8_t i;
	
	summ = new_sample * iir_core->coeffs[0];
     820:	23 81       	ldd	r18, Z+3	; 0x03
     822:	20 03       	mulsu	r18, r16
     824:	60 01       	movw	r12, r0
     826:	21 9f       	mul	r18, r17
     828:	d0 0c       	add	r13, r0
     82a:	11 24       	eor	r1, r1
     82c:	ee 24       	eor	r14, r14
     82e:	d7 fc       	sbrc	r13, 7
     830:	e0 94       	com	r14
     832:	fe 2c       	mov	r15, r14
	for (i=iir_core->n-1; i>0; i--)
     834:	40 81       	ld	r20, Z
     836:	1e c0       	rjmp	.+60     	; 0x874 <fir_i16_i8+0x6a>
	{
		samples[i] = samples[i-1];
     838:	84 2f       	mov	r24, r20
     83a:	90 e0       	ldi	r25, 0x00	; 0
     83c:	dc 01       	movw	r26, r24
     83e:	11 97       	sbiw	r26, 0x01	; 1
     840:	aa 0f       	add	r26, r26
     842:	bb 1f       	adc	r27, r27
     844:	ac 0f       	add	r26, r28
     846:	bd 1f       	adc	r27, r29
     848:	2d 91       	ld	r18, X+
     84a:	3c 91       	ld	r19, X
     84c:	dc 01       	movw	r26, r24
     84e:	aa 0f       	add	r26, r26
     850:	bb 1f       	adc	r27, r27
     852:	ac 0f       	add	r26, r28
     854:	bd 1f       	adc	r27, r29
     856:	2d 93       	st	X+, r18
     858:	3c 93       	st	X, r19
		summ += (int32_t)samples[i] * iir_core->coeffs[i];
     85a:	df 01       	movw	r26, r30
     85c:	a8 0f       	add	r26, r24
     85e:	b9 1f       	adc	r27, r25
     860:	13 96       	adiw	r26, 0x03	; 3
     862:	ac 91       	ld	r26, X
     864:	bb 27       	eor	r27, r27
     866:	a7 fd       	sbrc	r26, 7
     868:	b0 95       	com	r27
     86a:	62 d9       	rcall	.-3388   	; 0xfffffb30 <__eeprom_end+0xff7efac0>
     86c:	c6 0e       	add	r12, r22
     86e:	d7 1e       	adc	r13, r23
     870:	e8 1e       	adc	r14, r24
     872:	f9 1e       	adc	r15, r25
{
	int32_t summ;
	uint8_t i;
	
	summ = new_sample * iir_core->coeffs[0];
	for (i=iir_core->n-1; i>0; i--)
     874:	41 50       	subi	r20, 0x01	; 1
     876:	01 f7       	brne	.-64     	; 0x838 <fir_i16_i8+0x2e>
	{
		samples[i] = samples[i-1];
		summ += (int32_t)samples[i] * iir_core->coeffs[i];
	}
	samples[0] = new_sample;
     878:	19 83       	std	Y+1, r17	; 0x01
     87a:	08 83       	st	Y, r16
	return (int16_t)(summ / iir_core->dc_gain);
     87c:	21 81       	ldd	r18, Z+1	; 0x01
     87e:	32 81       	ldd	r19, Z+2	; 0x02
     880:	40 e0       	ldi	r20, 0x00	; 0
     882:	50 e0       	ldi	r21, 0x00	; 0
     884:	c7 01       	movw	r24, r14
     886:	b6 01       	movw	r22, r12
     888:	38 d9       	rcall	.-3472   	; 0xfffffafa <__eeprom_end+0xff7efa8a>
}
     88a:	c9 01       	movw	r24, r18
     88c:	df 91       	pop	r29
     88e:	cf 91       	pop	r28
     890:	1f 91       	pop	r17
     892:	0f 91       	pop	r16
     894:	ff 90       	pop	r15
     896:	ef 90       	pop	r14
     898:	df 90       	pop	r13
     89a:	cf 90       	pop	r12
     89c:	08 95       	ret

0000089e <decode_led_char>:
//---------------------------------------------//
// Decodes normal string literal to the
//	7-segment representation
//---------------------------------------------//
static uint8_t decode_led_char(char c)
{
     89e:	20 e0       	ldi	r18, 0x00	; 0
     8a0:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t i;
	encode_7seg_pair encode_pair;
	for (i = 0; i < sizeof(led_encode_table)/sizeof(encode_7seg_pair); i++  )
	{
		encode_pair.code = pgm_read_byte(&led_encode_table[i].code);
     8a2:	a9 01       	movw	r20, r18
     8a4:	44 0f       	add	r20, r20
     8a6:	55 1f       	adc	r21, r21
     8a8:	fa 01       	movw	r30, r20
     8aa:	e0 5d       	subi	r30, 0xD0	; 208
     8ac:	ff 4f       	sbci	r31, 0xFF	; 255
     8ae:	e4 91       	lpm	r30, Z
		if (encode_pair.code == c)
     8b0:	e8 13       	cpse	r30, r24
     8b2:	05 c0       	rjmp	.+10     	; 0x8be <decode_led_char+0x20>
		{
			i = pgm_read_byte(&led_encode_table[i].segdata);
     8b4:	fa 01       	movw	r30, r20
     8b6:	ef 5c       	subi	r30, 0xCF	; 207
     8b8:	ff 4f       	sbci	r31, 0xFF	; 255
     8ba:	84 91       	lpm	r24, Z
     8bc:	08 95       	ret
     8be:	2f 5f       	subi	r18, 0xFF	; 255
     8c0:	3f 4f       	sbci	r19, 0xFF	; 255
//---------------------------------------------//
static uint8_t decode_led_char(char c)
{
	uint8_t i;
	encode_7seg_pair encode_pair;
	for (i = 0; i < sizeof(led_encode_table)/sizeof(encode_7seg_pair); i++  )
     8c2:	2c 31       	cpi	r18, 0x1C	; 28
     8c4:	31 05       	cpc	r19, r1
     8c6:	69 f7       	brne	.-38     	; 0x8a2 <decode_led_char+0x4>
			return i;
		}		
	}			
	// No item was found - return argument value
	return  c;
}
     8c8:	08 95       	ret

000008ca <wrap_led_buffer_index>:
//---------------------------------------------//
// Ensures that index is inside the buffer
// -128 <= index <= 127
//---------------------------------------------//
static uint8_t wrap_led_buffer_index(int8_t buf_index)
{
     8ca:	28 2f       	mov	r18, r24
	uint8_t new_index_u;
	new_index_u = (uint8_t) ((buf_index < 0) ? -buf_index : buf_index);
     8cc:	87 fd       	sbrc	r24, 7
     8ce:	81 95       	neg	r24
	if (new_index_u >= LED_BUFFER_LENGTH)
     8d0:	8e 30       	cpi	r24, 0x0E	; 14
     8d2:	18 f0       	brcs	.+6      	; 0x8da <wrap_led_buffer_index+0x10>
		new_index_u = new_index_u % LED_BUFFER_LENGTH;
     8d4:	6e e0       	ldi	r22, 0x0E	; 14
     8d6:	05 d9       	rcall	.-3574   	; 0xfffffae2 <__eeprom_end+0xff7efa72>
     8d8:	89 2f       	mov	r24, r25
	new_index_u = ((buf_index >= 0) || (new_index_u == 0)) ? new_index_u :  LED_BUFFER_LENGTH - new_index_u ;
     8da:	27 ff       	sbrs	r18, 7
     8dc:	05 c0       	rjmp	.+10     	; 0x8e8 <wrap_led_buffer_index+0x1e>
     8de:	88 23       	and	r24, r24
     8e0:	19 f0       	breq	.+6      	; 0x8e8 <wrap_led_buffer_index+0x1e>
     8e2:	9e e0       	ldi	r25, 0x0E	; 14
     8e4:	98 1b       	sub	r25, r24
     8e6:	89 2f       	mov	r24, r25
	return new_index_u;
}
     8e8:	08 95       	ret

000008ea <processLedIndicator>:
// Call this function N times per sec to get N/NUM_DIGITS_TOTAL display update rate, where
// NUM_DIGITS_TOTAL is number_of_digits_of_LED_display if no extra LEDs are used or
// (number_of_digits_of_LED_display + 1) otherwise.
//---------------------------------------------//
void processLedIndicator()
{
     8ea:	cf 93       	push	r28
	uint8_t next_wActivePos;
	
	// Turn off segments
	#ifdef CLEAN_OPERATION
	disable_led_segments();
     8ec:	21 d1       	rcall	.+578    	; 0xb30 <disable_led_segments>
	#endif
	
	
	// Perform regular shift
	led_clock_pulse(!LED_DIGIT_ACT_LVL);
     8ee:	81 e0       	ldi	r24, 0x01	; 1
     8f0:	f3 d0       	rcall	.+486    	; 0xad8 <led_clock_pulse>
	
	// Switch on active window item position
	switch (wActivePos)
     8f2:	c0 91 b7 01 	lds	r28, 0x01B7
     8f6:	cc 23       	and	r28, r28
     8f8:	19 f0       	breq	.+6      	; 0x900 <processLedIndicator+0x16>
     8fa:	c6 30       	cpi	r28, 0x06	; 6
     8fc:	c1 f5       	brne	.+112    	; 0x96e <processLedIndicator+0x84>
     8fe:	0f c0       	rjmp	.+30     	; 0x91e <processLedIndicator+0x34>
	case 0:
		// Get buttons
		#ifndef CLEAN_OPERATION
		disable_led_segments();
		#endif
		enable_led_segments_pullups();
     900:	09 d1       	rcall	.+530    	; 0xb14 <enable_led_segments_pullups>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     902:	85 e3       	ldi	r24, 0x35	; 53
     904:	8a 95       	dec	r24
     906:	f1 f7       	brne	.-4      	; 0x904 <processLedIndicator+0x1a>
     908:	00 00       	nop
		_delay_us(PULLUP_DELAY_US);
		capture_button_state();
     90a:	19 d1       	rcall	.+562    	; 0xb3e <capture_button_state>
		#ifndef CLEAN_OPERATION
		enable_led_segments();
		#endif
		// Start new cycle with active digit level
		led_clock_pulse(LED_DIGIT_ACT_LVL);
     90c:	80 e0       	ldi	r24, 0x00	; 0
     90e:	e4 d0       	rcall	.+456    	; 0xad8 <led_clock_pulse>
		// Always start new cycle from specified buffer start position
		bufActivePos = wStartPos;
     910:	80 91 11 02 	lds	r24, 0x0211
     914:	80 93 b6 01 	sts	0x01B6, r24
		next_wActivePos = wActivePos + 1;
     918:	c0 91 b7 01 	lds	r28, 0x01B7
     91c:	28 c0       	rjmp	.+80     	; 0x96e <processLedIndicator+0x84>
//---------------------------------------------//
// Performs window shifting
//---------------------------------------------//
static void processWindowShifter(void)
{
	if (shifterState == LED_SHIFT_DONE)
     91e:	80 91 12 02 	lds	r24, 0x0212
     922:	81 11       	cpse	r24, r1
     924:	01 c0       	rjmp	.+2      	; 0x928 <processLedIndicator+0x3e>
     926:	1b c0       	rjmp	.+54     	; 0x95e <processLedIndicator+0x74>
		return;
	
	// Process shift timer
	processSoftTimer8b(&shiftTimer);	
     928:	88 eb       	ldi	r24, 0xB8	; 184
     92a:	91 e0       	ldi	r25, 0x01	; 1
     92c:	9f d7       	rcall	.+3902   	; 0x186c <processSoftTimer8b>
	
	if (shiftTimer.FTop)
     92e:	80 91 b8 01 	lds	r24, 0x01B8
     932:	85 ff       	sbrs	r24, 5
     934:	14 c0       	rjmp	.+40     	; 0x95e <processLedIndicator+0x74>
	{
		// Check if finished
		if (wStartPos == bufStartPos)	
     936:	80 91 11 02 	lds	r24, 0x0211
     93a:	90 91 13 02 	lds	r25, 0x0213
     93e:	89 13       	cpse	r24, r25
     940:	03 c0       	rjmp	.+6      	; 0x948 <processLedIndicator+0x5e>
		{
			// Update state
			shifterState = LED_SHIFT_DONE;
     942:	10 92 12 02 	sts	0x0212, r1
     946:	0b c0       	rjmp	.+22     	; 0x95e <processLedIndicator+0x74>
		}
		else if (shifterState == LED_SHIFT_RIGHT)
     948:	90 91 12 02 	lds	r25, 0x0212
     94c:	92 30       	cpi	r25, 0x02	; 2
     94e:	49 f4       	brne	.+18     	; 0x962 <processLedIndicator+0x78>
// Increments index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t inc_buffer_position(uint8_t position)
{
	return (position >= LED_BUFFER_LENGTH - 1) ? 0 : position + 1;
     950:	8d 30       	cpi	r24, 0x0D	; 13
     952:	10 f4       	brcc	.+4      	; 0x958 <processLedIndicator+0x6e>
     954:	8f 5f       	subi	r24, 0xFF	; 255
     956:	01 c0       	rjmp	.+2      	; 0x95a <processLedIndicator+0x70>
     958:	80 e0       	ldi	r24, 0x00	; 0
			// Update state
			shifterState = LED_SHIFT_DONE;
		}
		else if (shifterState == LED_SHIFT_RIGHT)
		{
			wStartPos = inc_buffer_position(wStartPos);	
     95a:	80 93 11 02 	sts	0x0211, r24
		// Always start new cycle from specified buffer start position
		bufActivePos = wStartPos;
		next_wActivePos = wActivePos + 1;
		break;
	case NUM_DIGITS_TOTAL-1:
		next_wActivePos = 0;
     95e:	c0 e0       	ldi	r28, 0x00	; 0
     960:	07 c0       	rjmp	.+14     	; 0x970 <processLedIndicator+0x86>
// Decrements index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t dec_buffer_position(uint8_t position)
{
	return (position == 0) ? LED_BUFFER_LENGTH - 1 : position - 1;
     962:	88 23       	and	r24, r24
     964:	11 f0       	breq	.+4      	; 0x96a <processLedIndicator+0x80>
     966:	81 50       	subi	r24, 0x01	; 1
     968:	f8 cf       	rjmp	.-16     	; 0x95a <processLedIndicator+0x70>
     96a:	8d e0       	ldi	r24, 0x0D	; 13
     96c:	f6 cf       	rjmp	.-20     	; 0x95a <processLedIndicator+0x70>
		next_wActivePos = 0;
		// Shift LED window
		processWindowShifter();	
		break;
	default:
		next_wActivePos = wActivePos + 1;
     96e:	cf 5f       	subi	r28, 0xFF	; 255
		break;
	}		
	
	#ifdef 	USE_EXTRA_LED_DIGIT
	if (wActivePos == EXTRA_DIGIT_NUM)
     970:	80 91 b7 01 	lds	r24, 0x01B7
     974:	86 30       	cpi	r24, 0x06	; 6
     976:	21 f4       	brne	.+8      	; 0x980 <processLedIndicator+0x96>
	{
		// Output separate LEDs state
		set_led_segments(extra_led_state);
     978:	80 91 10 02 	lds	r24, 0x0210
     97c:	bd d0       	rcall	.+378    	; 0xaf8 <set_led_segments>
     97e:	10 c0       	rjmp	.+32     	; 0x9a0 <processLedIndicator+0xb6>
	}
	else
	#endif
	{
		// Output new segment data
		set_led_segments(led_data_buffer[bufActivePos]);
     980:	e0 91 b6 01 	lds	r30, 0x01B6
     984:	f0 e0       	ldi	r31, 0x00	; 0
     986:	ec 5e       	subi	r30, 0xEC	; 236
     988:	fd 4f       	sbci	r31, 0xFD	; 253
     98a:	80 81       	ld	r24, Z
     98c:	b5 d0       	rcall	.+362    	; 0xaf8 <set_led_segments>
		// Wrap around buffer length
		bufActivePos = inc_buffer_position(bufActivePos );
     98e:	80 91 b6 01 	lds	r24, 0x01B6
// Increments index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t inc_buffer_position(uint8_t position)
{
	return (position >= LED_BUFFER_LENGTH - 1) ? 0 : position + 1;
     992:	8d 30       	cpi	r24, 0x0D	; 13
     994:	10 f4       	brcc	.+4      	; 0x99a <processLedIndicator+0xb0>
     996:	8f 5f       	subi	r24, 0xFF	; 255
     998:	01 c0       	rjmp	.+2      	; 0x99c <processLedIndicator+0xb2>
     99a:	80 e0       	ldi	r24, 0x00	; 0
	#endif
	{
		// Output new segment data
		set_led_segments(led_data_buffer[bufActivePos]);
		// Wrap around buffer length
		bufActivePos = inc_buffer_position(bufActivePos );
     99c:	80 93 b6 01 	sts	0x01B6, r24
	}
		
	wActivePos = next_wActivePos;
     9a0:	c0 93 b7 01 	sts	0x01B7, r28
	
	#ifdef CLEAN_OPERATION
	enable_led_segments();
	#endif

}
     9a4:	cf 91       	pop	r28
	}
		
	wActivePos = next_wActivePos;
	
	#ifdef CLEAN_OPERATION
	enable_led_segments();
     9a6:	bd c0       	rjmp	.+378    	; 0xb22 <enable_led_segments>

000009a8 <fillLedBuffer>:
//---------------------------------------------//
// Fills buffer from (bufStartPos + offset) 
//	position with single char
//---------------------------------------------//
void fillLedBuffer(int8_t offset, uint8_t length, char c)
{
     9a8:	0f 93       	push	r16
     9aa:	1f 93       	push	r17
     9ac:	cf 93       	push	r28
     9ae:	df 93       	push	r29
     9b0:	1f 92       	push	r1
     9b2:	cd b7       	in	r28, 0x3d	; 61
     9b4:	de b7       	in	r29, 0x3e	; 62
     9b6:	18 2f       	mov	r17, r24
     9b8:	84 2f       	mov	r24, r20
	uint8_t val = decode_led_char(c);
     9ba:	69 83       	std	Y+1, r22	; 0x01
     9bc:	70 df       	rcall	.-288    	; 0x89e <decode_led_char>
     9be:	08 2f       	mov	r16, r24
	// Ensure index is inside the buffer
	uint8_t position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
     9c0:	80 91 13 02 	lds	r24, 0x0213
     9c4:	81 0f       	add	r24, r17
     9c6:	81 df       	rcall	.-254    	; 0x8ca <wrap_led_buffer_index>
	while(length--)
     9c8:	69 81       	ldd	r22, Y+1	; 0x01
     9ca:	0a c0       	rjmp	.+20     	; 0x9e0 <fillLedBuffer+0x38>
	{
		led_data_buffer[position] = val;
     9cc:	e8 2f       	mov	r30, r24
     9ce:	f0 e0       	ldi	r31, 0x00	; 0
     9d0:	ec 5e       	subi	r30, 0xEC	; 236
     9d2:	fd 4f       	sbci	r31, 0xFD	; 253
     9d4:	00 83       	st	Z, r16
// Increments index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t inc_buffer_position(uint8_t position)
{
	return (position >= LED_BUFFER_LENGTH - 1) ? 0 : position + 1;
     9d6:	8d 30       	cpi	r24, 0x0D	; 13
     9d8:	10 f4       	brcc	.+4      	; 0x9de <fillLedBuffer+0x36>
     9da:	8f 5f       	subi	r24, 0xFF	; 255
     9dc:	01 c0       	rjmp	.+2      	; 0x9e0 <fillLedBuffer+0x38>
     9de:	80 e0       	ldi	r24, 0x00	; 0
void fillLedBuffer(int8_t offset, uint8_t length, char c)
{
	uint8_t val = decode_led_char(c);
	// Ensure index is inside the buffer
	uint8_t position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
	while(length--)
     9e0:	61 50       	subi	r22, 0x01	; 1
     9e2:	a0 f7       	brcc	.-24     	; 0x9cc <fillLedBuffer+0x24>
	{
		led_data_buffer[position] = val;
		position = inc_buffer_position(position);
	}
}
     9e4:	0f 90       	pop	r0
     9e6:	df 91       	pop	r29
     9e8:	cf 91       	pop	r28
     9ea:	1f 91       	pop	r17
     9ec:	0f 91       	pop	r16
     9ee:	08 95       	ret

000009f0 <startShiftingWindowLeft>:
//	LED window left 
//---------------------------------------------//
void startShiftingWindowLeft(void)
{
	// Clear spaces between menu states
	fillLedBuffer(-2,2,' ');
     9f0:	40 e2       	ldi	r20, 0x20	; 32
     9f2:	62 e0       	ldi	r22, 0x02	; 2
     9f4:	8e ef       	ldi	r24, 0xFE	; 254
     9f6:	d8 df       	rcall	.-80     	; 0x9a8 <fillLedBuffer>
	// Set new buffer position for writing
	bufStartPos = wrap_led_buffer_index( (int8_t)bufStartPos - (NUM_DIGITS + 2) );
     9f8:	80 91 13 02 	lds	r24, 0x0213
     9fc:	88 50       	subi	r24, 0x08	; 8
     9fe:	65 df       	rcall	.-310    	; 0x8ca <wrap_led_buffer_index>
     a00:	80 93 13 02 	sts	0x0213, r24
	// Set shifter state
	shifterState = LED_SHIFT_LEFT;
     a04:	81 e0       	ldi	r24, 0x01	; 1
     a06:	80 93 12 02 	sts	0x0212, r24
     a0a:	08 95       	ret

00000a0c <startShiftingWindowRight>:
//	LED window right 
//---------------------------------------------//
void startShiftingWindowRight(void)
{
	// Clear spaces between menu states
	fillLedBuffer(NUM_DIGITS,2,' ');
     a0c:	40 e2       	ldi	r20, 0x20	; 32
     a0e:	62 e0       	ldi	r22, 0x02	; 2
     a10:	86 e0       	ldi	r24, 0x06	; 6
     a12:	ca df       	rcall	.-108    	; 0x9a8 <fillLedBuffer>
	// Set new buffer position for writing
	bufStartPos = wrap_led_buffer_index( (int8_t)bufStartPos + NUM_DIGITS + 2 );
     a14:	80 91 13 02 	lds	r24, 0x0213
     a18:	88 5f       	subi	r24, 0xF8	; 248
     a1a:	57 df       	rcall	.-338    	; 0x8ca <wrap_led_buffer_index>
     a1c:	80 93 13 02 	sts	0x0213, r24
	// Set shifter state
	shifterState = LED_SHIFT_RIGHT;
     a20:	82 e0       	ldi	r24, 0x02	; 2
     a22:	80 93 12 02 	sts	0x0212, r24
     a26:	08 95       	ret

00000a28 <initLedIndicator>:
//---------------------------------------------//
//	Initialization
//	Call this function at start of your program
//---------------------------------------------//
void initLedIndicator()
{
     a28:	cf 93       	push	r28
	uint8_t i;
	// First disable outputs
	disable_led_segments();
     a2a:	82 d0       	rcall	.+260    	; 0xb30 <disable_led_segments>
     a2c:	c7 e0       	ldi	r28, 0x07	; 7
	// Fill shift register with non-active levels
	for (i=0;i<NUM_DIGITS_TOTAL;i++)
	{
		led_clock_pulse(!LED_DIGIT_ACT_LVL);
     a2e:	81 e0       	ldi	r24, 0x01	; 1
     a30:	53 d0       	rcall	.+166    	; 0xad8 <led_clock_pulse>
     a32:	c1 50       	subi	r28, 0x01	; 1
{
	uint8_t i;
	// First disable outputs
	disable_led_segments();
	// Fill shift register with non-active levels
	for (i=0;i<NUM_DIGITS_TOTAL;i++)
     a34:	e1 f7       	brne	.-8      	; 0xa2e <initLedIndicator+0x6>
	{
		led_clock_pulse(!LED_DIGIT_ACT_LVL);
	}
	// Now enable outputs
	enable_led_segments();
     a36:	75 d0       	rcall	.+234    	; 0xb22 <enable_led_segments>
	
	// Reset pointers
	wStartPos = 0;
     a38:	10 92 11 02 	sts	0x0211, r1
	bufStartPos = 0;
     a3c:	10 92 13 02 	sts	0x0213, r1
	bufActivePos = 0;
     a40:	10 92 b6 01 	sts	0x01B6, r1
	wActivePos = 0;
     a44:	10 92 b7 01 	sts	0x01B7, r1
	#ifdef 	USE_EXTRA_LED_DIGIT
	extra_led_state = 0;
     a48:	10 92 10 02 	sts	0x0210, r1
	#endif
	
	// Clear the buffer 
	fillLedBuffer(0,LED_BUFFER_LENGTH,' ');
     a4c:	40 e2       	ldi	r20, 0x20	; 32
     a4e:	6e e0       	ldi	r22, 0x0E	; 14
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	aa df       	rcall	.-172    	; 0x9a8 <fillLedBuffer>
	
	// Initialize shift timer - always enabled, but 
	//	processed only when shifting is active
	shifterState = LED_SHIFT_DONE;
     a54:	10 92 12 02 	sts	0x0212, r1
	shiftTimer.Enabled = 1;
     a58:	80 91 b8 01 	lds	r24, 0x01B8
	shiftTimer.RunOnce = 0;
     a5c:	81 60       	ori	r24, 0x01	; 1
     a5e:	8d 7f       	andi	r24, 0xFD	; 253
     a60:	80 93 b8 01 	sts	0x01B8, r24
	shiftTimer.Top = LED_SHIFT_INTERVAL-1;
     a64:	89 e0       	ldi	r24, 0x09	; 9
     a66:	80 93 ba 01 	sts	0x01BA, r24
}
     a6a:	cf 91       	pop	r28
     a6c:	08 95       	ret

00000a6e <printLedBuffer>:
// Arguments:
//		offset	- buffer index to start with (with respect to bufStartPos)
//		str - null-terminated char string
//---------------------------------------------//		
void printLedBuffer(int8_t offset, char* str)
{
     a6e:	1f 93       	push	r17
     a70:	cf 93       	push	r28
     a72:	df 93       	push	r29
     a74:	eb 01       	movw	r28, r22
	char c;
	uint8_t decoded_sym;
	// Ensure index is inside the buffer
	uint8_t buffer_position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
     a76:	90 91 13 02 	lds	r25, 0x0213
     a7a:	89 0f       	add	r24, r25
     a7c:	26 df       	rcall	.-436    	; 0x8ca <wrap_led_buffer_index>
     a7e:	18 2f       	mov	r17, r24
	// Output chars
	while((c = *str++))
     a80:	0b c0       	rjmp	.+22     	; 0xa98 <printLedBuffer+0x2a>
	{
		decoded_sym = decode_led_char(c);
     a82:	0d df       	rcall	.-486    	; 0x89e <decode_led_char>
		led_data_buffer[buffer_position] = decoded_sym;
     a84:	e1 2f       	mov	r30, r17
     a86:	f0 e0       	ldi	r31, 0x00	; 0
     a88:	ec 5e       	subi	r30, 0xEC	; 236
     a8a:	fd 4f       	sbci	r31, 0xFD	; 253
     a8c:	80 83       	st	Z, r24
// Increments index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t inc_buffer_position(uint8_t position)
{
	return (position >= LED_BUFFER_LENGTH - 1) ? 0 : position + 1;
     a8e:	1d 30       	cpi	r17, 0x0D	; 13
     a90:	10 f4       	brcc	.+4      	; 0xa96 <printLedBuffer+0x28>
     a92:	1f 5f       	subi	r17, 0xFF	; 255
     a94:	01 c0       	rjmp	.+2      	; 0xa98 <printLedBuffer+0x2a>
     a96:	10 e0       	ldi	r17, 0x00	; 0
	char c;
	uint8_t decoded_sym;
	// Ensure index is inside the buffer
	uint8_t buffer_position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
	// Output chars
	while((c = *str++))
     a98:	89 91       	ld	r24, Y+
     a9a:	81 11       	cpse	r24, r1
     a9c:	f2 cf       	rjmp	.-28     	; 0xa82 <printLedBuffer+0x14>
	{
		decoded_sym = decode_led_char(c);
		led_data_buffer[buffer_position] = decoded_sym;
		buffer_position = inc_buffer_position(buffer_position);
	}
}
     a9e:	df 91       	pop	r29
     aa0:	cf 91       	pop	r28
     aa2:	1f 91       	pop	r17
     aa4:	08 95       	ret

00000aa6 <setComma>:
//	buffer cell
//---------------------------------------------//
void setComma(int8_t offset)
{
	// Ensure index is inside the buffer
	uint8_t position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
     aa6:	90 91 13 02 	lds	r25, 0x0213
     aaa:	89 0f       	add	r24, r25
     aac:	0e df       	rcall	.-484    	; 0x8ca <wrap_led_buffer_index>
	led_data_buffer[position] |= (SEGH);
     aae:	e8 2f       	mov	r30, r24
     ab0:	f0 e0       	ldi	r31, 0x00	; 0
     ab2:	ec 5e       	subi	r30, 0xEC	; 236
     ab4:	fd 4f       	sbci	r31, 0xFD	; 253
     ab6:	80 81       	ld	r24, Z
     ab8:	80 68       	ori	r24, 0x80	; 128
     aba:	80 83       	st	Z, r24
     abc:	08 95       	ret

00000abe <setExtraLeds>:
// Argument is ORed with current LED state
//---------------------------------------------//
inline void setExtraLeds(uint8_t leds_set_value)
{
		//asm("cli");
		extra_led_state |= leds_set_value;
     abe:	90 91 10 02 	lds	r25, 0x0210
     ac2:	98 2b       	or	r25, r24
     ac4:	90 93 10 02 	sts	0x0210, r25
     ac8:	08 95       	ret

00000aca <clearExtraLeds>:
// Argument is AND NOTed with current LED state
//---------------------------------------------//
inline void clearExtraLeds(uint8_t leds_clear_value)
{
		//asm("cli");
		extra_led_state &= ~leds_clear_value;
     aca:	90 91 10 02 	lds	r25, 0x0210
     ace:	80 95       	com	r24
     ad0:	89 23       	and	r24, r25
     ad2:	80 93 10 02 	sts	0x0210, r24
     ad6:	08 95       	ret

00000ad8 <led_clock_pulse>:
//-------------------------------------------------------//
// Clocks in bit into the shift register
//-------------------------------------------------------//
void led_clock_pulse(uint8_t bit)
{
	if (bit)
     ad8:	88 23       	and	r24, r24
     ada:	11 f0       	breq	.+4      	; 0xae0 <led_clock_pulse+0x8>
		PORTB |= (1<<PB_LED_DOUT);
     adc:	c0 9a       	sbi	0x18, 0	; 24
     ade:	01 c0       	rjmp	.+2      	; 0xae2 <led_clock_pulse+0xa>
	else
		PORTB &= ~(1<<PB_LED_DOUT);
     ae0:	c0 98       	cbi	0x18, 0	; 24
     ae2:	8a e1       	ldi	r24, 0x1A	; 26
     ae4:	8a 95       	dec	r24
     ae6:	f1 f7       	brne	.-4      	; 0xae4 <led_clock_pulse+0xc>
     ae8:	00 c0       	rjmp	.+0      	; 0xaea <led_clock_pulse+0x12>
	_delay_us(SETUP_DELAY_US);
	PORTB |= (1<<PB_LED_CLK);
     aea:	c2 9a       	sbi	0x18, 2	; 24
     aec:	8a e1       	ldi	r24, 0x1A	; 26
     aee:	8a 95       	dec	r24
     af0:	f1 f7       	brne	.-4      	; 0xaee <led_clock_pulse+0x16>
     af2:	00 c0       	rjmp	.+0      	; 0xaf4 <led_clock_pulse+0x1c>
	_delay_us(SHIFT_DELAY_US);
	PORTB &= ~(1<<PB_LED_CLK);
     af4:	c2 98       	cbi	0x18, 2	; 24
     af6:	08 95       	ret

00000af8 <set_led_segments>:
//-------------------------------------------------------//
void set_led_segments(uint8_t seg_ch)
{
	uint8_t pdat;
	seg_ch ^= LED_SEGMENT_MASK;
	pdat = PORTC & ~( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
     af8:	25 b3       	in	r18, 0x15	; 21
	pdat |= (seg_ch & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
     afa:	98 2f       	mov	r25, r24
     afc:	9f 71       	andi	r25, 0x1F	; 31
//-------------------------------------------------------//
void set_led_segments(uint8_t seg_ch)
{
	uint8_t pdat;
	seg_ch ^= LED_SEGMENT_MASK;
	pdat = PORTC & ~( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
     afe:	20 7e       	andi	r18, 0xE0	; 224
	pdat |= (seg_ch & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
     b00:	92 2b       	or	r25, r18
	PORTC = pdat;
     b02:	95 bb       	out	0x15, r25	; 21
	seg_ch >>= 2;
	pdat = PORTB & ~( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     b04:	98 b3       	in	r25, 0x18	; 24
	uint8_t pdat;
	seg_ch ^= LED_SEGMENT_MASK;
	pdat = PORTC & ~( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
	pdat |= (seg_ch & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
	PORTC = pdat;
	seg_ch >>= 2;
     b06:	86 95       	lsr	r24
     b08:	86 95       	lsr	r24
	pdat = PORTB & ~( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
	pdat |= (seg_ch & ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) ));
     b0a:	88 73       	andi	r24, 0x38	; 56
	seg_ch ^= LED_SEGMENT_MASK;
	pdat = PORTC & ~( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
	pdat |= (seg_ch & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
	PORTC = pdat;
	seg_ch >>= 2;
	pdat = PORTB & ~( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     b0c:	97 7c       	andi	r25, 0xC7	; 199
	pdat |= (seg_ch & ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) ));
     b0e:	89 2b       	or	r24, r25
	PORTB = pdat;
     b10:	88 bb       	out	0x18, r24	; 24
     b12:	08 95       	ret

00000b14 <enable_led_segments_pullups>:
//-------------------------------------------------------//
// Enables pull-ups on disabled led segments
//-------------------------------------------------------//
void enable_led_segments_pullups()
{
	PORTC |= ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
     b14:	85 b3       	in	r24, 0x15	; 21
     b16:	8f 61       	ori	r24, 0x1F	; 31
     b18:	85 bb       	out	0x15, r24	; 21
	PORTB |= ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     b1a:	88 b3       	in	r24, 0x18	; 24
     b1c:	88 63       	ori	r24, 0x38	; 56
     b1e:	88 bb       	out	0x18, r24	; 24
     b20:	08 95       	ret

00000b22 <enable_led_segments>:
//-------------------------------------------------------//
// Turns led segment ports to active state
//-------------------------------------------------------//
void enable_led_segments()
{
	DDRC |= ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
     b22:	84 b3       	in	r24, 0x14	; 20
     b24:	8f 61       	ori	r24, 0x1F	; 31
     b26:	84 bb       	out	0x14, r24	; 20
	DDRB |= ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     b28:	87 b3       	in	r24, 0x17	; 23
     b2a:	88 63       	ori	r24, 0x38	; 56
     b2c:	87 bb       	out	0x17, r24	; 23
     b2e:	08 95       	ret

00000b30 <disable_led_segments>:
//-------------------------------------------------------//
// Turns led segment ports to HI-Z state
//-------------------------------------------------------//
void disable_led_segments()
{
	DDRC &= ~( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
     b30:	84 b3       	in	r24, 0x14	; 20
     b32:	80 7e       	andi	r24, 0xE0	; 224
     b34:	84 bb       	out	0x14, r24	; 20
	DDRB &= ~( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     b36:	87 b3       	in	r24, 0x17	; 23
     b38:	87 7c       	andi	r24, 0xC7	; 199
     b3a:	87 bb       	out	0x17, r24	; 23
     b3c:	08 95       	ret

00000b3e <capture_button_state>:
// ports are in HI-Z with pull-ups enabled
//-------------------------------------------------------//
void capture_button_state()
{
	uint8_t pdat;
	pdat = PINB  & ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     b3e:	86 b3       	in	r24, 0x16	; 22
     b40:	88 73       	andi	r24, 0x38	; 56
	pdat <<= 2;
	pdat |= (PINC & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
     b42:	93 b3       	in	r25, 0x13	; 19
//-------------------------------------------------------//
void capture_button_state()
{
	uint8_t pdat;
	pdat = PINB  & ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
	pdat <<= 2;
     b44:	88 0f       	add	r24, r24
     b46:	88 0f       	add	r24, r24
	pdat |= (PINC & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
     b48:	9f 71       	andi	r25, 0x1F	; 31
     b4a:	89 2b       	or	r24, r25
	raw_button_state = pdat ^ RAW_BUTTONS_INVERSE_MASK;
     b4c:	80 95       	com	r24
     b4e:	80 93 22 02 	sts	0x0222, r24
     b52:	08 95       	ret

00000b54 <processItemFunction>:
//	Arguments:
//		funcAddr - address of the function to run.
//-----------------------------------------------------------------//
static inline void processItemFunction(FuncPtr funcAddr)
{
	if (funcAddr != 0)
     b54:	00 97       	sbiw	r24, 0x00	; 0
     b56:	11 f0       	breq	.+4      	; 0xb5c <processItemFunction+0x8>
		((FuncPtr)funcAddr)();
     b58:	fc 01       	movw	r30, r24
     b5a:	09 94       	ijmp
     b5c:	08 95       	ret

00000b5e <mf_setTempLeave>:
	userTimer.Enabled = 1;
}

void mf_leafExit(void)
{
	userTimer.Enabled = 0;	
     b5e:	80 91 7c 00 	lds	r24, 0x007C
     b62:	8e 7f       	andi	r24, 0xFE	; 254
     b64:	80 93 7c 00 	sts	0x007C, r24
}

void mf_setTempLeave(void)
{
	mf_leafExit();
	if (!(jumpFlags & DISCARD_CHANGES))
     b68:	80 91 c6 01 	lds	r24, 0x01C6
     b6c:	85 fd       	sbrc	r24, 5
     b6e:	04 c0       	rjmp	.+8      	; 0xb78 <mf_setTempLeave+0x1a>
	{
		p.setup_temp_value = setupValue_u8;		// Apply changes		
     b70:	80 91 c4 01 	lds	r24, 0x01C4
     b74:	80 93 0c 02 	sts	0x020C, r24
     b78:	08 95       	ret

00000b7a <mf_leafSelectAct>:
	userTimer.FA_GE = 1;	
}

void mf_leafSelectAct(void)
{
	userTimer.Timer = 0;
     b7a:	10 92 7d 00 	sts	0x007D, r1
	userTimer.Enabled = 1;
     b7e:	ec e7       	ldi	r30, 0x7C	; 124
     b80:	f0 e0       	ldi	r31, 0x00	; 0
     b82:	80 81       	ld	r24, Z
     b84:	81 60       	ori	r24, 0x01	; 1
     b86:	80 83       	st	Z, r24
     b88:	08 95       	ret

00000b8a <mf_sndenLeave>:
}

void mf_leafExit(void)
{
	userTimer.Enabled = 0;	
     b8a:	80 91 7c 00 	lds	r24, 0x007C
     b8e:	8e 7f       	andi	r24, 0xFE	; 254
     b90:	80 93 7c 00 	sts	0x007C, r24
}

void mf_sndenLeave(void)
{
	mf_leafExit();
	if (!(jumpFlags & DISCARD_CHANGES))
     b94:	80 91 c6 01 	lds	r24, 0x01C6
     b98:	85 fd       	sbrc	r24, 5
     b9a:	04 c0       	rjmp	.+8      	; 0xba4 <mf_sndenLeave+0x1a>
	{
		p.sound_enable = setupValue_u8;		// Apply changes
     b9c:	80 91 c4 01 	lds	r24, 0x01C4
     ba0:	80 93 0e 02 	sts	0x020E, r24
     ba4:	08 95       	ret

00000ba6 <mf_autopoffLeave>:
	userTimer.Enabled = 1;
}

void mf_leafExit(void)
{
	userTimer.Enabled = 0;	
     ba6:	80 91 7c 00 	lds	r24, 0x007C
     baa:	8e 7f       	andi	r24, 0xFE	; 254
     bac:	80 93 7c 00 	sts	0x007C, r24
}

void mf_autopoffLeave(void)
{
	mf_leafExit();
	if (!(jumpFlags & DISCARD_CHANGES))
     bb0:	80 91 c6 01 	lds	r24, 0x01C6
     bb4:	85 fd       	sbrc	r24, 5
     bb6:	04 c0       	rjmp	.+8      	; 0xbc0 <mf_autopoffLeave+0x1a>
	{
		p.power_off_timeout = setupValue_u8;		// Apply changes
     bb8:	80 91 c4 01 	lds	r24, 0x01C4
     bbc:	80 93 0f 02 	sts	0x020F, r24
     bc0:	08 95       	ret

00000bc2 <mf_actpoffLeave>:
	printLedBuffer(0,"   OFF");
}

void mf_actpoffLeave(void)
{
	autoPowerOffState = AUTO_POFF_LEAVE;		// Set global flag
     bc2:	82 e0       	ldi	r24, 0x02	; 2
     bc4:	80 93 b5 01 	sts	0x01B5, r24
     bc8:	08 95       	ret

00000bca <mf_calibDoExit>:
	userTimer.Enabled = 1;
}

void mf_leafExit(void)
{
	userTimer.Enabled = 0;	
     bca:	ec e7       	ldi	r30, 0x7C	; 124
     bcc:	f0 e0       	ldi	r31, 0x00	; 0
     bce:	80 81       	ld	r24, Z
     bd0:	8e 7f       	andi	r24, 0xFE	; 254
     bd2:	80 83       	st	Z, r24


void mf_calibDoExit(void)
{
	mf_leafExit();
	heaterState &= ~CALIBRATION_ACTIVE;
     bd4:	01 98       	cbi	0x00, 1	; 0
     bd6:	08 95       	ret

00000bd8 <mf_actpoffDo>:
}

// Indication of power off mode
void mf_actpoffDo(void)
{
	autoPowerOffState = AUTO_POFF_ACTIVE;		// Set global flag
     bd8:	81 e0       	ldi	r24, 0x01	; 1
     bda:	80 93 b5 01 	sts	0x01B5, r24
	printLedBuffer(0,"   OFF");
     bde:	65 ec       	ldi	r22, 0xC5	; 197
     be0:	70 e0       	ldi	r23, 0x00	; 0
     be2:	80 e0       	ldi	r24, 0x00	; 0
     be4:	44 cf       	rjmp	.-376    	; 0xa6e <printLedBuffer>

00000be6 <mf_cdoneDo>:
}


void mf_cdoneDo(void)
{
	printLedBuffer(0," DONE ");
     be6:	6c ec       	ldi	r22, 0xCC	; 204
     be8:	70 e0       	ldi	r23, 0x00	; 0
     bea:	80 e0       	ldi	r24, 0x00	; 0
     bec:	40 cf       	rjmp	.-384    	; 0xa6e <printLedBuffer>

00000bee <mf_actpoffSelect>:
// Menu item "Active power off"
// Specific menu item - used as indicator of system state
//------------------------------------------------//
void mf_actpoffSelect(void)
{
	clearExtraLeds(LED_TEMP | LED_ROLL);
     bee:	80 ec       	ldi	r24, 0xC0	; 192
     bf0:	6c cf       	rjmp	.-296    	; 0xaca <clearExtraLeds>

00000bf2 <mf_leafSelect>:

// Select and exit functions, common for leaf menu items 

void mf_leafSelect(void)
{
	clearExtraLeds(LED_TEMP | LED_ROLL);
     bf2:	80 ec       	ldi	r24, 0xC0	; 192
     bf4:	6a df       	rcall	.-300    	; 0xaca <clearExtraLeds>
	userTimer.FA_GE = 1;	
     bf6:	ec e7       	ldi	r30, 0x7C	; 124
     bf8:	f0 e0       	ldi	r31, 0x00	; 0
     bfa:	80 81       	ld	r24, Z
     bfc:	80 61       	ori	r24, 0x10	; 16
     bfe:	80 83       	st	Z, r24
     c00:	08 95       	ret

00000c02 <mf_calibP2Select>:
	printLedBuffer(0,"P1    ");
}

void mf_calibP2Select(void)
{
	mf_leafSelect();
     c02:	f7 df       	rcall	.-18     	; 0xbf2 <mf_leafSelect>
	setupValue_u8 = cp.cpoint2;	// determine which point to use at select func
     c04:	80 91 07 02 	lds	r24, 0x0207
     c08:	80 93 c4 01 	sts	0x01C4, r24
	cpointNum = 2;
     c0c:	82 e0       	ldi	r24, 0x02	; 2
     c0e:	80 93 c5 01 	sts	0x01C5, r24
	printLedBuffer(0,"P2    ");
     c12:	63 ed       	ldi	r22, 0xD3	; 211
     c14:	70 e0       	ldi	r23, 0x00	; 0
     c16:	80 e0       	ldi	r24, 0x00	; 0
     c18:	2a cf       	rjmp	.-428    	; 0xa6e <printLedBuffer>

00000c1a <mf_calibP1Select>:
// There are two calibration points - the menu item is 
// same for both.
//------------------------------------------------//
void mf_calibP1Select(void)
{
	mf_leafSelect();
     c1a:	eb df       	rcall	.-42     	; 0xbf2 <mf_leafSelect>
	setupValue_u8 = cp.cpoint1;	// determine which point to use at select func
     c1c:	80 91 06 02 	lds	r24, 0x0206
     c20:	80 93 c4 01 	sts	0x01C4, r24
	cpointNum = 1;
     c24:	81 e0       	ldi	r24, 0x01	; 1
     c26:	80 93 c5 01 	sts	0x01C5, r24
	printLedBuffer(0,"P1    ");
     c2a:	6a ed       	ldi	r22, 0xDA	; 218
     c2c:	70 e0       	ldi	r23, 0x00	; 0
     c2e:	80 e0       	ldi	r24, 0x00	; 0
     c30:	1e cf       	rjmp	.-452    	; 0xa6e <printLedBuffer>

00000c32 <mf_autopoffSelect>:
//------------------------------------------------//
// Menu item "Auto power off setup"
//------------------------------------------------//
void mf_autopoffSelect(void)
{
	mf_leafSelect();						
     c32:	df df       	rcall	.-66     	; 0xbf2 <mf_leafSelect>
	setupValue_u8 = p.power_off_timeout;	// Make a copy of parameter being changed
     c34:	80 91 0f 02 	lds	r24, 0x020F
     c38:	80 93 c4 01 	sts	0x01C4, r24
     c3c:	08 95       	ret

00000c3e <mf_sndenSelect>:
//------------------------------------------------//
// Menu item "Sound enable/disable"
//------------------------------------------------//
void mf_sndenSelect(void)
{
	mf_leafSelect();					
     c3e:	d9 df       	rcall	.-78     	; 0xbf2 <mf_leafSelect>
	setupValue_u8 = p.sound_enable;		// Make a copy of parameter being changed
     c40:	80 91 0e 02 	lds	r24, 0x020E
     c44:	80 93 c4 01 	sts	0x01C4, r24
     c48:	08 95       	ret

00000c4a <mf_rollLeave>:
	userTimer.Enabled = 1;
}

void mf_leafExit(void)
{
	userTimer.Enabled = 0;	
     c4a:	ec e7       	ldi	r30, 0x7C	; 124
     c4c:	f0 e0       	ldi	r31, 0x00	; 0
     c4e:	80 81       	ld	r24, Z
     c50:	8e 7f       	andi	r24, 0xFE	; 254
     c52:	80 83       	st	Z, r24
}

void mf_rollLeave(void)
{
	mf_leafExit();
	clearExtraLeds(LED_ROLL);
     c54:	80 e4       	ldi	r24, 0x40	; 64
     c56:	39 cf       	rjmp	.-398    	; 0xaca <clearExtraLeds>

00000c58 <mf_setTempSelect>:
// Menu item "Temperature setting"
// TOP level
//------------------------------------------------//
void mf_setTempSelect(void)
{
	clearExtraLeds(LED_TEMP);
     c58:	80 e8       	ldi	r24, 0x80	; 128
     c5a:	37 df       	rcall	.-402    	; 0xaca <clearExtraLeds>
	mf_leafSelectAct();						// setup and start timer
     c5c:	8e df       	rcall	.-228    	; 0xb7a <mf_leafSelectAct>
	setupValue_u8 = p.setup_temp_value;		// Make a copy of parameter being changed
     c5e:	80 91 0c 02 	lds	r24, 0x020C
     c62:	80 93 c4 01 	sts	0x01C4, r24
     c66:	08 95       	ret

00000c68 <mf_realTempLeave>:
	}
}

void mf_realTempLeave(void)
{
	clearExtraLeds(LED_TEMP);
     c68:	80 e8       	ldi	r24, 0x80	; 128
     c6a:	2f cf       	rjmp	.-418    	; 0xaca <clearExtraLeds>

00000c6c <mf_cdoneSelect>:
// There are two calibration points - the menu item is
// same for both.
//------------------------------------------------//
void mf_cdoneSelect(void)
{
	update_CalibrationPoint(cpointNum,setupValue_u8);
     c6c:	60 91 c4 01 	lds	r22, 0x01C4
     c70:	80 91 c5 01 	lds	r24, 0x01C5
     c74:	a7 db       	rcall	.-2226   	; 0x3c4 <update_CalibrationPoint>
	calculateCoeffs();
     c76:	07 db       	rcall	.-2546   	; 0x286 <calculateCoeffs>
	saveCalibrationToEEPROM();
     c78:	54 cd       	rjmp	.-1368   	; 0x722 <saveCalibrationToEEPROM>

00000c7a <mf_autopoffDo>:
}

void mf_autopoffDo(void)
{
	char *str = (char *)&temp_str;
	memcpy_P(str,&ms_autoPoffDo,7);	
     c7a:	47 e0       	ldi	r20, 0x07	; 7
     c7c:	50 e0       	ldi	r21, 0x00	; 0
     c7e:	6c e6       	ldi	r22, 0x6C	; 108
     c80:	70 e0       	ldi	r23, 0x00	; 0
     c82:	83 e2       	ldi	r24, 0x23	; 35
     c84:	92 e0       	ldi	r25, 0x02	; 2
     c86:	98 d7       	rcall	.+3888   	; 0x1bb8 <memcpy_P>
		
	if (buttons.action_rep & BD_UP)
     c88:	80 91 03 02 	lds	r24, 0x0203
     c8c:	86 ff       	sbrs	r24, 6
     c8e:	06 c0       	rjmp	.+12     	; 0xc9c <mf_autopoffDo+0x22>
	{
		if (setupValue_u8 < MAX_POWEROFF_TIMEOUT)
     c90:	80 91 c4 01 	lds	r24, 0x01C4
     c94:	8f 35       	cpi	r24, 0x5F	; 95
     c96:	58 f4       	brcc	.+22     	; 0xcae <mf_autopoffDo+0x34>
			setupValue_u8 += POWEROFF_SET_STEP;
     c98:	8b 5f       	subi	r24, 0xFB	; 251
     c9a:	07 c0       	rjmp	.+14     	; 0xcaa <mf_autopoffDo+0x30>
		restartMenuTimer();
	}
	else if (buttons.action_rep & BD_DOWN)
     c9c:	87 ff       	sbrs	r24, 7
     c9e:	09 c0       	rjmp	.+18     	; 0xcb2 <mf_autopoffDo+0x38>
	{
		if (setupValue_u8 > MIN_POWEROFF_TIMEOUT)
     ca0:	80 91 c4 01 	lds	r24, 0x01C4
     ca4:	86 30       	cpi	r24, 0x06	; 6
     ca6:	18 f0       	brcs	.+6      	; 0xcae <mf_autopoffDo+0x34>
			setupValue_u8 -= POWEROFF_SET_STEP;
     ca8:	85 50       	subi	r24, 0x05	; 5
     caa:	80 93 c4 01 	sts	0x01C4, r24
//	 Restarts menu state timeout
//	Should be used in RUN function when control buttons are pressed.
//-----------------------------------------------------------------//
static void restartMenuTimer(void)
{
	menuTimer.Timer = 0;
     cae:	10 92 81 00 	sts	0x0081, r1
		if (setupValue_u8 > MIN_POWEROFF_TIMEOUT)
			setupValue_u8 -= POWEROFF_SET_STEP;
		restartMenuTimer();
	}	
		
	if (userTimer.FA_GE)
     cb2:	80 91 7c 00 	lds	r24, 0x007C
     cb6:	84 ff       	sbrs	r24, 4
     cb8:	10 c0       	rjmp	.+32     	; 0xcda <mf_autopoffDo+0x60>
	{
		if (setupValue_u8 < MAX_POWEROFF_TIMEOUT)
     cba:	80 91 c4 01 	lds	r24, 0x01C4
     cbe:	8f 35       	cpi	r24, 0x5F	; 95
     cc0:	30 f4       	brcc	.+12     	; 0xcce <mf_autopoffDo+0x54>
		{
			u16toa_align_right(setupValue_u8,str + 4,NO_TERMINATING_ZERO | 2);	
     cc2:	42 e8       	ldi	r20, 0x82	; 130
     cc4:	67 e2       	ldi	r22, 0x27	; 39
     cc6:	72 e0       	ldi	r23, 0x02	; 2
     cc8:	90 e0       	ldi	r25, 0x00	; 0
     cca:	13 d2       	rcall	.+1062   	; 0x10f2 <u16toa_align_right>
     ccc:	06 c0       	rjmp	.+12     	; 0xcda <mf_autopoffDo+0x60>
		}			
		else 
		{
			str[4] = 'N';
     cce:	8e e4       	ldi	r24, 0x4E	; 78
     cd0:	80 93 27 02 	sts	0x0227, r24
			str[5] = 'O';
     cd4:	8f e4       	ldi	r24, 0x4F	; 79
     cd6:	80 93 28 02 	sts	0x0228, r24
		}			
	}		
		
	printLedBuffer(0,str);
     cda:	63 e2       	ldi	r22, 0x23	; 35
     cdc:	72 e0       	ldi	r23, 0x02	; 2
     cde:	80 e0       	ldi	r24, 0x00	; 0
     ce0:	c6 ce       	rjmp	.-628    	; 0xa6e <printLedBuffer>

00000ce2 <mf_calibDo>:
}

void mf_calibDo(void)
{
	char *str = (char *)&temp_str;
	memcpy_P(str,&ms_calibDo,4);
     ce2:	44 e0       	ldi	r20, 0x04	; 4
     ce4:	50 e0       	ldi	r21, 0x00	; 0
     ce6:	68 e6       	ldi	r22, 0x68	; 104
     ce8:	70 e0       	ldi	r23, 0x00	; 0
     cea:	83 e2       	ldi	r24, 0x23	; 35
     cec:	92 e0       	ldi	r25, 0x02	; 2
     cee:	64 d7       	rcall	.+3784   	; 0x1bb8 <memcpy_P>
	
	if (buttons.action_rep & BD_UP)
     cf0:	80 91 03 02 	lds	r24, 0x0203
     cf4:	86 ff       	sbrs	r24, 6
     cf6:	06 c0       	rjmp	.+12     	; 0xd04 <mf_calibDo+0x22>
	{
		if (setupValue_u8 < MAX_CALIB_TEMP)
     cf8:	80 91 c4 01 	lds	r24, 0x01C4
     cfc:	8a 3f       	cpi	r24, 0xFA	; 250
     cfe:	58 f4       	brcc	.+22     	; 0xd16 <mf_calibDo+0x34>
		setupValue_u8 += CALIB_TEMP_STEP;
     d00:	8f 5f       	subi	r24, 0xFF	; 255
     d02:	07 c0       	rjmp	.+14     	; 0xd12 <mf_calibDo+0x30>
	}
	else if (buttons.action_rep & BD_DOWN)
     d04:	87 ff       	sbrs	r24, 7
     d06:	07 c0       	rjmp	.+14     	; 0xd16 <mf_calibDo+0x34>
	{
		if (setupValue_u8 > MIN_CALIB_TEMP)
     d08:	80 91 c4 01 	lds	r24, 0x01C4
     d0c:	8b 30       	cpi	r24, 0x0B	; 11
     d0e:	18 f0       	brcs	.+6      	; 0xd16 <mf_calibDo+0x34>
		setupValue_u8 -= CALIB_TEMP_STEP;
     d10:	81 50       	subi	r24, 0x01	; 1
     d12:	80 93 c4 01 	sts	0x01C4, r24
	}
	
	if (userTimer.FA_GE)
     d16:	80 91 7c 00 	lds	r24, 0x007C
     d1a:	84 ff       	sbrs	r24, 4
     d1c:	08 c0       	rjmp	.+16     	; 0xd2e <mf_calibDo+0x4c>
	{	
		// Blinking setup value
		u16toa_align_right(setupValue_u8,str,3);	
     d1e:	43 e0       	ldi	r20, 0x03	; 3
     d20:	63 e2       	ldi	r22, 0x23	; 35
     d22:	72 e0       	ldi	r23, 0x02	; 2
     d24:	80 91 c4 01 	lds	r24, 0x01C4
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	e3 d1       	rcall	.+966    	; 0x10f2 <u16toa_align_right>
     d2c:	02 c0       	rjmp	.+4      	; 0xd32 <mf_calibDo+0x50>
	}
	else
	{
		// This is executed only when calibration is active and setup value is blinking
		resetAutoPowerOffCounter();
     d2e:	1b d6       	rcall	.+3126   	; 0x1966 <resetAutoPowerOffCounter>
		heaterState |= CALIBRATION_ACTIVE; 
     d30:	01 9a       	sbi	0x00, 1	; 0
	}
	
	printLedBuffer(3,str);
     d32:	63 e2       	ldi	r22, 0x23	; 35
     d34:	72 e0       	ldi	r23, 0x02	; 2
     d36:	83 e0       	ldi	r24, 0x03	; 3
     d38:	9a ce       	rjmp	.-716    	; 0xa6e <printLedBuffer>

00000d3a <mf_sndenDo>:
}

void mf_sndenDo(void)
{
	char *str = (char *)&temp_str;
	memcpy_P(str,&ms_soundEnDo,7);	
     d3a:	47 e0       	ldi	r20, 0x07	; 7
     d3c:	50 e0       	ldi	r21, 0x00	; 0
     d3e:	63 e7       	ldi	r22, 0x73	; 115
     d40:	70 e0       	ldi	r23, 0x00	; 0
     d42:	83 e2       	ldi	r24, 0x23	; 35
     d44:	92 e0       	ldi	r25, 0x02	; 2
     d46:	38 d7       	rcall	.+3696   	; 0x1bb8 <memcpy_P>
		
	if (buttons.action_rep & (BD_DOWN | BD_UP))
     d48:	80 91 03 02 	lds	r24, 0x0203
     d4c:	80 7c       	andi	r24, 0xC0	; 192
     d4e:	49 f0       	breq	.+18     	; 0xd62 <mf_sndenDo+0x28>
	{
		setupValue_u8 = !setupValue_u8;
     d50:	81 e0       	ldi	r24, 0x01	; 1
     d52:	90 91 c4 01 	lds	r25, 0x01C4
     d56:	91 11       	cpse	r25, r1
     d58:	80 e0       	ldi	r24, 0x00	; 0
     d5a:	80 93 c4 01 	sts	0x01C4, r24
//	 Restarts menu state timeout
//	Should be used in RUN function when control buttons are pressed.
//-----------------------------------------------------------------//
static void restartMenuTimer(void)
{
	menuTimer.Timer = 0;
     d5e:	10 92 81 00 	sts	0x0081, r1
	{
		setupValue_u8 = !setupValue_u8;
		restartMenuTimer();
	}			
		
	if (userTimer.FA_GE)
     d62:	80 91 7c 00 	lds	r24, 0x007C
     d66:	84 ff       	sbrs	r24, 4
     d68:	11 c0       	rjmp	.+34     	; 0xd8c <mf_sndenDo+0x52>
	{
		if (setupValue_u8)		
     d6a:	80 91 c4 01 	lds	r24, 0x01C4
     d6e:	88 23       	and	r24, r24
     d70:	29 f0       	breq	.+10     	; 0xd7c <mf_sndenDo+0x42>
		{
			str[4] = 'O';
     d72:	8f e4       	ldi	r24, 0x4F	; 79
     d74:	80 93 27 02 	sts	0x0227, r24
			str[5] = 'N';
     d78:	8e e4       	ldi	r24, 0x4E	; 78
     d7a:	06 c0       	rjmp	.+12     	; 0xd88 <mf_sndenDo+0x4e>
		}
		else
		{
			str[3] = 'O';
     d7c:	8f e4       	ldi	r24, 0x4F	; 79
     d7e:	80 93 26 02 	sts	0x0226, r24
			str[4] = 'F';
     d82:	86 e4       	ldi	r24, 0x46	; 70
     d84:	80 93 27 02 	sts	0x0227, r24
			str[5] = 'F';
     d88:	80 93 28 02 	sts	0x0228, r24
		}			
	}
		
	printLedBuffer(0,str);
     d8c:	63 e2       	ldi	r22, 0x23	; 35
     d8e:	72 e0       	ldi	r23, 0x02	; 2
     d90:	80 e0       	ldi	r24, 0x00	; 0
     d92:	6d de       	rcall	.-806    	; 0xa6e <printLedBuffer>
	setComma(2);
     d94:	82 e0       	ldi	r24, 0x02	; 2
     d96:	87 ce       	rjmp	.-754    	; 0xaa6 <setComma>

00000d98 <mf_rollDo>:
}

void mf_rollDo(void)
{
	char *str = (char *)&temp_str;
	memcpy_P(str,&ms_rollDo,7);
     d98:	47 e0       	ldi	r20, 0x07	; 7
     d9a:	50 e0       	ldi	r21, 0x00	; 0
     d9c:	6a e7       	ldi	r22, 0x7A	; 122
     d9e:	70 e0       	ldi	r23, 0x00	; 0
     da0:	83 e2       	ldi	r24, 0x23	; 35
     da2:	92 e0       	ldi	r25, 0x02	; 2
     da4:	09 d7       	rcall	.+3602   	; 0x1bb8 <memcpy_P>
		
	if (buttons.action_rep & BD_UP)
     da6:	90 91 03 02 	lds	r25, 0x0203
     daa:	80 91 0d 02 	lds	r24, 0x020D
     dae:	96 ff       	sbrs	r25, 6
     db0:	04 c0       	rjmp	.+8      	; 0xdba <mf_rollDo+0x22>
	{
		if (p.rollCycleSet < MAX_ROLL_CYCLES)
     db2:	83 36       	cpi	r24, 0x63	; 99
     db4:	48 f4       	brcc	.+18     	; 0xdc8 <mf_rollDo+0x30>
			p.rollCycleSet += ROLL_CYCLES_STEP;
     db6:	8f 5f       	subi	r24, 0xFF	; 255
     db8:	05 c0       	rjmp	.+10     	; 0xdc4 <mf_rollDo+0x2c>
	}
	else if (buttons.action_rep & BD_DOWN)
     dba:	97 ff       	sbrs	r25, 7
     dbc:	05 c0       	rjmp	.+10     	; 0xdc8 <mf_rollDo+0x30>
	{
		if (p.rollCycleSet > MIN_ROLL_CYCLES)
     dbe:	82 30       	cpi	r24, 0x02	; 2
     dc0:	18 f0       	brcs	.+6      	; 0xdc8 <mf_rollDo+0x30>
			p.rollCycleSet -= ROLL_CYCLES_STEP;
     dc2:	81 50       	subi	r24, 0x01	; 1
     dc4:	80 93 0d 02 	sts	0x020D, r24
	}	
		
	u16toa_align_right(p.rollCycleSet,str + 4,NO_TERMINATING_ZERO | 2);
     dc8:	42 e8       	ldi	r20, 0x82	; 130
     dca:	67 e2       	ldi	r22, 0x27	; 39
     dcc:	72 e0       	ldi	r23, 0x02	; 2
     dce:	80 91 0d 02 	lds	r24, 0x020D
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	8e d1       	rcall	.+796    	; 0x10f2 <u16toa_align_right>
	
	if ((!(rollState & ROLL_CYCLE)) || (userTimer.FA_GE))
     dd6:	80 91 d0 01 	lds	r24, 0x01D0
     dda:	82 ff       	sbrs	r24, 2
     ddc:	04 c0       	rjmp	.+8      	; 0xde6 <mf_rollDo+0x4e>
     dde:	80 91 7c 00 	lds	r24, 0x007C
     de2:	84 ff       	sbrs	r24, 4
     de4:	07 c0       	rjmp	.+14     	; 0xdf4 <mf_rollDo+0x5c>
	{
		u16toa_align_right(activeRollCycle,str + 1,NO_TERMINATING_ZERO | 2);
     de6:	42 e8       	ldi	r20, 0x82	; 130
     de8:	64 e2       	ldi	r22, 0x24	; 36
     dea:	72 e0       	ldi	r23, 0x02	; 2
     dec:	80 91 cf 01 	lds	r24, 0x01CF
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	7f d1       	rcall	.+766    	; 0x10f2 <u16toa_align_right>
	}
	
	str[0] = 0;
     df4:	10 92 23 02 	sts	0x0223, r1
	if (isTopPointValid())
     df8:	ed d3       	rcall	.+2010   	; 0x15d4 <isTopPointValid>
     dfa:	88 23       	and	r24, r24
     dfc:	29 f0       	breq	.+10     	; 0xe08 <mf_rollDo+0x70>
		str[0] |= SEGA;
     dfe:	80 91 23 02 	lds	r24, 0x0223
     e02:	81 60       	ori	r24, 0x01	; 1
     e04:	80 93 23 02 	sts	0x0223, r24
	if (isBottomPointValid())
     e08:	f9 d3       	rcall	.+2034   	; 0x15fc <isBottomPointValid>
     e0a:	88 23       	and	r24, r24
     e0c:	29 f0       	breq	.+10     	; 0xe18 <mf_rollDo+0x80>
		str[0] |= SEGD;
     e0e:	80 91 23 02 	lds	r24, 0x0223
     e12:	88 60       	ori	r24, 0x08	; 8
     e14:	80 93 23 02 	sts	0x0223, r24
	if (str[0] == 0)
     e18:	80 91 23 02 	lds	r24, 0x0223
     e1c:	81 11       	cpse	r24, r1
     e1e:	03 c0       	rjmp	.+6      	; 0xe26 <mf_rollDo+0x8e>
		str[0] = ' ';
     e20:	80 e2       	ldi	r24, 0x20	; 32
     e22:	80 93 23 02 	sts	0x0223, r24
		
	printLedBuffer(0,str);
     e26:	63 e2       	ldi	r22, 0x23	; 35
     e28:	72 e0       	ldi	r23, 0x02	; 2
     e2a:	80 e0       	ldi	r24, 0x00	; 0
     e2c:	20 ce       	rjmp	.-960    	; 0xa6e <printLedBuffer>

00000e2e <mf_rollSelect>:
// TOP level
//------------------------------------------------//

void mf_rollSelect(void)
{
	mf_leafSelectAct();		// setup and start timer
     e2e:	a5 de       	rcall	.-694    	; 0xb7a <mf_leafSelectAct>
	setExtraLeds(LED_ROLL);
     e30:	80 e4       	ldi	r24, 0x40	; 64
     e32:	45 ce       	rjmp	.-886    	; 0xabe <setExtraLeds>

00000e34 <mf_setTempDo>:
}

void mf_setTempDo(void)
{
	char *str = (char *)&temp_str;
	memcpy_P(str,&ms_realTempDo,7);
     e34:	47 e0       	ldi	r20, 0x07	; 7
     e36:	50 e0       	ldi	r21, 0x00	; 0
     e38:	61 e8       	ldi	r22, 0x81	; 129
     e3a:	70 e0       	ldi	r23, 0x00	; 0
     e3c:	83 e2       	ldi	r24, 0x23	; 35
     e3e:	92 e0       	ldi	r25, 0x02	; 2
     e40:	bb d6       	rcall	.+3446   	; 0x1bb8 <memcpy_P>
	
	if (buttons.action_rep & BD_UP)
     e42:	90 91 03 02 	lds	r25, 0x0203
     e46:	80 91 c4 01 	lds	r24, 0x01C4
     e4a:	96 ff       	sbrs	r25, 6
     e4c:	04 c0       	rjmp	.+8      	; 0xe56 <mf_setTempDo+0x22>
	{
		if (setupValue_u8 < MAX_SET_TEMP)
     e4e:	8f 3f       	cpi	r24, 0xFF	; 255
     e50:	49 f0       	breq	.+18     	; 0xe64 <mf_setTempDo+0x30>
			setupValue_u8 += TEMP_SET_STEP;
     e52:	8b 5f       	subi	r24, 0xFB	; 251
     e54:	05 c0       	rjmp	.+10     	; 0xe60 <mf_setTempDo+0x2c>
		restartMenuTimer();
	}
	else if (buttons.action_rep & BD_DOWN)
     e56:	97 ff       	sbrs	r25, 7
     e58:	07 c0       	rjmp	.+14     	; 0xe68 <mf_setTempDo+0x34>
	{
		if (setupValue_u8 > MIN_SET_TEMP)
     e5a:	8f 31       	cpi	r24, 0x1F	; 31
     e5c:	18 f0       	brcs	.+6      	; 0xe64 <mf_setTempDo+0x30>
			setupValue_u8 -= TEMP_SET_STEP;
     e5e:	85 50       	subi	r24, 0x05	; 5
     e60:	80 93 c4 01 	sts	0x01C4, r24
//	 Restarts menu state timeout
//	Should be used in RUN function when control buttons are pressed.
//-----------------------------------------------------------------//
static void restartMenuTimer(void)
{
	menuTimer.Timer = 0;
     e64:	10 92 81 00 	sts	0x0081, r1
			setupValue_u8 -= TEMP_SET_STEP;
		restartMenuTimer();
	}					
		
	// Output setting to LED
	if (setupValue_u8 < MAX_SET_TEMP)
     e68:	80 91 c4 01 	lds	r24, 0x01C4
     e6c:	8f 3f       	cpi	r24, 0xFF	; 255
     e6e:	41 f0       	breq	.+16     	; 0xe80 <mf_setTempDo+0x4c>
	{
		u16toa_align_right(setupValue_u8,str,NO_TERMINATING_ZERO | 4);
     e70:	44 e8       	ldi	r20, 0x84	; 132
     e72:	63 e2       	ldi	r22, 0x23	; 35
     e74:	72 e0       	ldi	r23, 0x02	; 2
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	3c d1       	rcall	.+632    	; 0x10f2 <u16toa_align_right>
		printLedBuffer(0,str);
     e7a:	63 e2       	ldi	r22, 0x23	; 35
     e7c:	72 e0       	ldi	r23, 0x02	; 2
     e7e:	02 c0       	rjmp	.+4      	; 0xe84 <mf_setTempDo+0x50>
	}		
	else
	{
		printLedBuffer(0," UNREG");
     e80:	61 ee       	ldi	r22, 0xE1	; 225
     e82:	70 e0       	ldi	r23, 0x00	; 0
     e84:	80 e0       	ldi	r24, 0x00	; 0
     e86:	f3 dd       	rcall	.-1050   	; 0xa6e <printLedBuffer>
	}
	
	if (userTimer.FA_GE)
     e88:	80 91 7c 00 	lds	r24, 0x007C
     e8c:	84 ff       	sbrs	r24, 4
     e8e:	02 c0       	rjmp	.+4      	; 0xe94 <mf_setTempDo+0x60>
		setExtraLeds(LED_TEMP);
     e90:	80 e8       	ldi	r24, 0x80	; 128
     e92:	15 ce       	rjmp	.-982    	; 0xabe <setExtraLeds>
	else
		clearExtraLeds(LED_TEMP);
     e94:	80 e8       	ldi	r24, 0x80	; 128
     e96:	19 ce       	rjmp	.-974    	; 0xaca <clearExtraLeds>

00000e98 <mf_realTempSelect>:
// Menu item "Real temperature indication"
// TOP level
//------------------------------------------------//
void mf_realTempSelect(void)
{
	setExtraLeds(LED_TEMP);
     e98:	80 e8       	ldi	r24, 0x80	; 128
     e9a:	11 ce       	rjmp	.-990    	; 0xabe <setExtraLeds>

00000e9c <mf_realTempDo>:
}

void mf_realTempDo(void)
{
	char *str = (char *)&temp_str;
	memcpy_P(str,&ms_realTempDo,7);
     e9c:	47 e0       	ldi	r20, 0x07	; 7
     e9e:	50 e0       	ldi	r21, 0x00	; 0
     ea0:	61 e8       	ldi	r22, 0x81	; 129
     ea2:	70 e0       	ldi	r23, 0x00	; 0
     ea4:	83 e2       	ldi	r24, 0x23	; 35
     ea6:	92 e0       	ldi	r25, 0x02	; 2
     ea8:	87 d6       	rcall	.+3342   	; 0x1bb8 <memcpy_P>
	
	if (adc_status & (SENSOR_ERROR_NO_PRESENT))
     eaa:	80 91 fe 01 	lds	r24, 0x01FE
     eae:	80 ff       	sbrs	r24, 0
     eb0:	03 c0       	rjmp	.+6      	; 0xeb8 <mf_realTempDo+0x1c>
	{
		printLedBuffer(0,"ERR 01");
     eb2:	68 ee       	ldi	r22, 0xE8	; 232
     eb4:	70 e0       	ldi	r23, 0x00	; 0
     eb6:	13 c0       	rjmp	.+38     	; 0xede <mf_realTempDo+0x42>
	}
	else if (adc_status & (SENSOR_ERROR_SHORTED))
     eb8:	81 ff       	sbrs	r24, 1
     eba:	03 c0       	rjmp	.+6      	; 0xec2 <mf_realTempDo+0x26>
	{
		printLedBuffer(0,"ERR 02");
     ebc:	6f ee       	ldi	r22, 0xEF	; 239
     ebe:	70 e0       	ldi	r23, 0x00	; 0
     ec0:	0e c0       	rjmp	.+28     	; 0xede <mf_realTempDo+0x42>
	}
	else
	{
		// Output ADC result to LED
		i32toa_align_right((int32_t)adc_celsius,str,NO_TERMINATING_ZERO | 4);
     ec2:	60 91 ff 01 	lds	r22, 0x01FF
     ec6:	70 91 00 02 	lds	r23, 0x0200
     eca:	88 27       	eor	r24, r24
     ecc:	77 fd       	sbrc	r23, 7
     ece:	80 95       	com	r24
     ed0:	98 2f       	mov	r25, r24
     ed2:	24 e8       	ldi	r18, 0x84	; 132
     ed4:	43 e2       	ldi	r20, 0x23	; 35
     ed6:	52 e0       	ldi	r21, 0x02	; 2
     ed8:	bf d0       	rcall	.+382    	; 0x1058 <i32toa_align_right>
		printLedBuffer(0,str);
     eda:	63 e2       	ldi	r22, 0x23	; 35
     edc:	72 e0       	ldi	r23, 0x02	; 2
     ede:	80 e0       	ldi	r24, 0x00	; 0
     ee0:	c6 cd       	rjmp	.-1140   	; 0xa6e <printLedBuffer>

00000ee2 <getMenuFunctionRecord.constprop.1>:
//	Arguments:
//		menuItemID - ID of an item
//		menuRecord - pointer to function structure to fill
//	Output:
//-----------------------------------------------------------------//
static void getMenuFunctionRecord(uint8_t menuItemID, MenuFunctionRecord* menuRecord )
     ee2:	0f 93       	push	r16
     ee4:	1f 93       	push	r17
     ee6:	cf 93       	push	r28
     ee8:	df 93       	push	r29
     eea:	18 2f       	mov	r17, r24
     eec:	c0 e0       	ldi	r28, 0x00	; 0
     eee:	d0 e0       	ldi	r29, 0x00	; 0
{
	uint8_t i;
	for (i = 0; i < sizeof(menuFunctionSet)/sizeof(MenuFunctionRecord); i++  )
	{
		memcpy_P(menuRecord,&menuFunctionSet[i],sizeof(MenuFunctionRecord));
     ef0:	07 e0       	ldi	r16, 0x07	; 7
     ef2:	0c 9f       	mul	r16, r28
     ef4:	b0 01       	movw	r22, r0
     ef6:	0d 9f       	mul	r16, r29
     ef8:	70 0d       	add	r23, r0
     efa:	11 24       	eor	r1, r1
     efc:	68 57       	subi	r22, 0x78	; 120
     efe:	7f 4f       	sbci	r23, 0xFF	; 255
     f00:	47 e0       	ldi	r20, 0x07	; 7
     f02:	50 e0       	ldi	r21, 0x00	; 0
     f04:	8d eb       	ldi	r24, 0xBD	; 189
     f06:	91 e0       	ldi	r25, 0x01	; 1
     f08:	57 d6       	rcall	.+3246   	; 0x1bb8 <memcpy_P>
		if (menuRecord->Item == menuItemID)
     f0a:	80 91 bd 01 	lds	r24, 0x01BD
     f0e:	81 17       	cp	r24, r17
     f10:	21 f0       	breq	.+8      	; 0xf1a <getMenuFunctionRecord.constprop.1+0x38>
     f12:	21 96       	adiw	r28, 0x01	; 1
//	Output:
//-----------------------------------------------------------------//
static void getMenuFunctionRecord(uint8_t menuItemID, MenuFunctionRecord* menuRecord )
{
	uint8_t i;
	for (i = 0; i < sizeof(menuFunctionSet)/sizeof(MenuFunctionRecord); i++  )
     f14:	ce 30       	cpi	r28, 0x0E	; 14
     f16:	d1 05       	cpc	r29, r1
     f18:	61 f7       	brne	.-40     	; 0xef2 <getMenuFunctionRecord.constprop.1+0x10>
	{
		memcpy_P(menuRecord,&menuFunctionSet[i],sizeof(MenuFunctionRecord));
		if (menuRecord->Item == menuItemID)
			break;
	}
}
     f1a:	df 91       	pop	r29
     f1c:	cf 91       	pop	r28
     f1e:	1f 91       	pop	r17
     f20:	0f 91       	pop	r16
     f22:	08 95       	ret

00000f24 <InitMenu>:
//	Menu initialization
//	Call this function at start of your program before processMenu()
//-----------------------------------------------------------------//
void InitMenu(void)
{
	selectedMenuItemID = mi_REALTEMP;
     f24:	81 e0       	ldi	r24, 0x01	; 1
     f26:	80 93 bc 01 	sts	0x01BC, r24
	getMenuFunctionRecord(selectedMenuItemID, &selectedMenuFunctionRecord);
     f2a:	db df       	rcall	.-74     	; 0xee2 <getMenuFunctionRecord.constprop.1>
	processItemFunction(selectedMenuFunctionRecord.SelectFunction);
     f2c:	80 91 be 01 	lds	r24, 0x01BE
     f30:	90 91 bf 01 	lds	r25, 0x01BF
     f34:	0f ce       	rjmp	.-994    	; 0xb54 <processItemFunction>

00000f36 <processMenu>:
//	Main menu control, -  state function calls, jumps 
//	between menu states and indication
//	Call this function from main() with a fixed time interval.
//-----------------------------------------------------------------//
void processMenu(void)
{
     f36:	af 92       	push	r10
     f38:	bf 92       	push	r11
     f3a:	cf 92       	push	r12
     f3c:	df 92       	push	r13
     f3e:	ef 92       	push	r14
     f40:	ff 92       	push	r15
     f42:	0f 93       	push	r16
     f44:	1f 93       	push	r17
     f46:	cf 93       	push	r28
     f48:	df 93       	push	r29
     f4a:	00 d0       	rcall	.+0      	; 0xf4c <processMenu+0x16>
     f4c:	00 d0       	rcall	.+0      	; 0xf4e <processMenu+0x18>
     f4e:	1f 92       	push	r1
     f50:	cd b7       	in	r28, 0x3d	; 61
     f52:	de b7       	in	r29, 0x3e	; 62
	NextItem_t nextItem;
	uint16_t jumpCondition;
	
	processSoftTimer8b(&menuTimer);	
     f54:	80 e8       	ldi	r24, 0x80	; 128
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	89 d4       	rcall	.+2322   	; 0x186c <processSoftTimer8b>
	
	// Compose jump condition
	jumpCondition = (uint16_t)buttons.action_down;
     f5a:	00 91 02 02 	lds	r16, 0x0202
     f5e:	10 e0       	ldi	r17, 0x00	; 0
	if (buttons.action_up_short & BD_MENU)	
     f60:	80 91 04 02 	lds	r24, 0x0204
     f64:	85 fd       	sbrc	r24, 5
		jumpCondition |= BS_MENU;
     f66:	11 60       	ori	r17, 0x01	; 1
	if (buttons.action_long & BD_MENU)	
     f68:	80 91 05 02 	lds	r24, 0x0205
     f6c:	85 fd       	sbrc	r24, 5
		jumpCondition |= BL_MENU;
     f6e:	12 60       	ori	r17, 0x02	; 2
	if (menuTimer.FTop)	
     f70:	80 91 80 00 	lds	r24, 0x0080
     f74:	85 fd       	sbrc	r24, 5
		jumpCondition |= TMR_EXP;
     f76:	10 68       	ori	r17, 0x80	; 128
	if (sys_timers_flags & AUTOPOFF_EXPIRED)
     f78:	14 99       	sbic	0x02, 4	; 2
		jumpCondition |= GOTO_POFF;
     f7a:	10 64       	ori	r17, 0x40	; 64
	
	autoPowerOffState = 0;	// ACTIVE or LEAVE flags are set in the Run or Leave functions
     f7c:	10 92 b5 01 	sts	0x01B5, r1
	
	// Get next menu item according to current state and jump conditions
	nextItem = getNextMenuItem(selectedMenuItemID, jumpCondition);
     f80:	d0 90 bc 01 	lds	r13, 0x01BC
     f84:	e1 2c       	mov	r14, r1
     f86:	f1 2c       	mov	r15, r1
	MenuJumpRecord	jRecord;
	uint8_t i;
	
	for (i = 0; i < sizeof(menuJumpSet)/sizeof(MenuJumpRecord); i++  )
	{
		memcpy_P(&jRecord,&menuJumpSet[i],sizeof(MenuJumpRecord));
     f88:	35 e0       	ldi	r19, 0x05	; 5
     f8a:	a3 2e       	mov	r10, r19
     f8c:	ae 9c       	mul	r10, r14
     f8e:	b0 01       	movw	r22, r0
     f90:	af 9c       	mul	r10, r15
     f92:	70 0d       	add	r23, r0
     f94:	11 24       	eor	r1, r1
     f96:	66 51       	subi	r22, 0x16	; 22
     f98:	7f 4f       	sbci	r23, 0xFF	; 255
     f9a:	45 e0       	ldi	r20, 0x05	; 5
     f9c:	50 e0       	ldi	r21, 0x00	; 0
     f9e:	ce 01       	movw	r24, r28
     fa0:	01 96       	adiw	r24, 0x01	; 1
     fa2:	0a d6       	rcall	.+3092   	; 0x1bb8 <memcpy_P>
		if (jRecord.Item == selectedItemId)				// If ID match,
     fa4:	89 81       	ldd	r24, Y+1	; 0x01
     fa6:	8d 11       	cpse	r24, r13
     fa8:	0f c0       	rjmp	.+30     	; 0xfc8 <processMenu+0x92>
		{
			if ((jRecord.JumpCondition & jmpCond) != 0)		// if any of jump conditions match too,
     faa:	2a 81       	ldd	r18, Y+2	; 0x02
     fac:	3b 81       	ldd	r19, Y+3	; 0x03
     fae:	20 23       	and	r18, r16
     fb0:	31 23       	and	r19, r17
     fb2:	23 2b       	or	r18, r19
     fb4:	49 f0       	breq	.+18     	; 0xfc8 <processMenu+0x92>
			{
				nextItem.ItemID = jRecord.NextItem;			// switch to next menu item
     fb6:	dc 80       	ldd	r13, Y+4	; 0x04
				nextItem.ItemTimeout = jRecord.Flags & TIMEOUT_MASK;
     fb8:	8d 81       	ldd	r24, Y+5	; 0x05
     fba:	9f e0       	ldi	r25, 0x0F	; 15
     fbc:	b9 2e       	mov	r11, r25
     fbe:	b8 22       	and	r11, r24
				nextItem.Flags = jRecord.Flags & ~TIMEOUT_MASK;
     fc0:	20 ef       	ldi	r18, 0xF0	; 240
     fc2:	c2 2e       	mov	r12, r18
     fc4:	c8 22       	and	r12, r24
     fc6:	07 c0       	rjmp	.+14     	; 0xfd6 <processMenu+0xa0>
     fc8:	8f ef       	ldi	r24, 0xFF	; 255
     fca:	e8 1a       	sub	r14, r24
     fcc:	f8 0a       	sbc	r15, r24
	NextItem_t nextItem;
	nextItem.ItemID = selectedItemId;
	MenuJumpRecord	jRecord;
	uint8_t i;
	
	for (i = 0; i < sizeof(menuJumpSet)/sizeof(MenuJumpRecord); i++  )
     fce:	84 e2       	ldi	r24, 0x24	; 36
     fd0:	e8 16       	cp	r14, r24
     fd2:	f1 04       	cpc	r15, r1
     fd4:	d9 f6       	brne	.-74     	; 0xf8c <processMenu+0x56>
	
	// Get next menu item according to current state and jump conditions
	nextItem = getNextMenuItem(selectedMenuItemID, jumpCondition);
	
	// If next item differs from current
	if (nextItem.ItemID != selectedMenuItemID)
     fd6:	80 91 bc 01 	lds	r24, 0x01BC
     fda:	d8 16       	cp	r13, r24
     fdc:	29 f1       	breq	.+74     	; 0x1028 <processMenu+0xf2>
	{		
		jumpFlags = nextItem.Flags;
     fde:	c0 92 c6 01 	sts	0x01C6, r12
		// Call exit function for current item
		processItemFunction(selectedMenuFunctionRecord.LeaveFunction);
     fe2:	80 91 c2 01 	lds	r24, 0x01C2
     fe6:	90 91 c3 01 	lds	r25, 0x01C3
     fea:	b4 dd       	rcall	.-1176   	; 0xb54 <processItemFunction>
		
		// If shifting is specified, start it before calling any 
		//	new menu item functions 
		if (nextItem.Flags & SHIFT_RIGHT)
     fec:	c6 fe       	sbrs	r12, 6
     fee:	02 c0       	rjmp	.+4      	; 0xff4 <processMenu+0xbe>
			startShiftingWindowRight();
     ff0:	0d dd       	rcall	.-1510   	; 0xa0c <startShiftingWindowRight>
     ff2:	02 c0       	rjmp	.+4      	; 0xff8 <processMenu+0xc2>
		else if (nextItem.Flags & SHIFT_LEFT)
     ff4:	c7 fc       	sbrc	r12, 7
			startShiftingWindowLeft();
     ff6:	fc dc       	rcall	.-1544   	; 0x9f0 <startShiftingWindowLeft>
		
		// Select new item
		selectedMenuItemID = nextItem.ItemID;
     ff8:	d0 92 bc 01 	sts	0x01BC, r13
		
		// Load from FLASH and save function pointers
		getMenuFunctionRecord(selectedMenuItemID, &selectedMenuFunctionRecord);
     ffc:	8d 2d       	mov	r24, r13
     ffe:	71 df       	rcall	.-286    	; 0xee2 <getMenuFunctionRecord.constprop.1>
		// Call select function for next item
		processItemFunction(selectedMenuFunctionRecord.SelectFunction);
    1000:	80 91 be 01 	lds	r24, 0x01BE
    1004:	90 91 bf 01 	lds	r25, 0x01BF
    1008:	a5 dd       	rcall	.-1206   	; 0xb54 <processItemFunction>
		// Start timer if timeout is enabled
		if (nextItem.ItemTimeout != 0)
    100a:	bb 20       	and	r11, r11
    100c:	a9 f0       	breq	.+42     	; 0x1038 <processMenu+0x102>
		{
			menuTimer.Top = nextItem.ItemTimeout * MENU_TIMEOUT_MULT;
    100e:	bb 0c       	add	r11, r11
    1010:	bb 0c       	add	r11, r11
    1012:	bb 0c       	add	r11, r11
    1014:	b0 92 82 00 	sts	0x0082, r11
			menuTimer.Timer = 0;
    1018:	10 92 81 00 	sts	0x0081, r1
			menuTimer.Enabled = 1;	
    101c:	80 91 80 00 	lds	r24, 0x0080
    1020:	81 60       	ori	r24, 0x01	; 1
    1022:	80 93 80 00 	sts	0x0080, r24
    1026:	08 c0       	rjmp	.+16     	; 0x1038 <processMenu+0x102>
		}	
	}
	else
	{
		processSoftTimer8b(&userTimer);
    1028:	8c e7       	ldi	r24, 0x7C	; 124
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	1f d4       	rcall	.+2110   	; 0x186c <processSoftTimer8b>
		// Stay at previous item
		processItemFunction(selectedMenuFunctionRecord.RunFunction);
    102e:	80 91 c0 01 	lds	r24, 0x01C0
    1032:	90 91 c1 01 	lds	r25, 0x01C1
    1036:	8e dd       	rcall	.-1252   	; 0xb54 <processItemFunction>
	}	
}
    1038:	0f 90       	pop	r0
    103a:	0f 90       	pop	r0
    103c:	0f 90       	pop	r0
    103e:	0f 90       	pop	r0
    1040:	0f 90       	pop	r0
    1042:	df 91       	pop	r29
    1044:	cf 91       	pop	r28
    1046:	1f 91       	pop	r17
    1048:	0f 91       	pop	r16
    104a:	ff 90       	pop	r15
    104c:	ef 90       	pop	r14
    104e:	df 90       	pop	r13
    1050:	cf 90       	pop	r12
    1052:	bf 90       	pop	r11
    1054:	af 90       	pop	r10
    1056:	08 95       	ret

00001058 <i32toa_align_right>:
//				If result length < len[6:0], result will be cut to fit buffer
//				If result length > len[6:0], buffer will be filled with spaces
//		len[7] - if set, result string will be null-terminated
//-------------------------------------------------------//
void i32toa_align_right(int32_t val, char *buffer, uint8_t len)
{
    1058:	cf 92       	push	r12
    105a:	df 92       	push	r13
    105c:	ef 92       	push	r14
    105e:	ff 92       	push	r15
    1060:	0f 93       	push	r16
    1062:	1f 93       	push	r17
    1064:	cf 93       	push	r28
    1066:	df 93       	push	r29
    1068:	12 2f       	mov	r17, r18
	uint8_t is_negative = 0;
	if (!len)	return;
    106a:	22 23       	and	r18, r18
    106c:	c9 f1       	breq	.+114    	; 0x10e0 <i32toa_align_right+0x88>
	
	if (val < 0)
    106e:	97 ff       	sbrs	r25, 7
    1070:	09 c0       	rjmp	.+18     	; 0x1084 <i32toa_align_right+0x2c>
	{
		val = -val;
    1072:	90 95       	com	r25
    1074:	80 95       	com	r24
    1076:	70 95       	com	r23
    1078:	61 95       	neg	r22
    107a:	7f 4f       	sbci	r23, 0xFF	; 255
    107c:	8f 4f       	sbci	r24, 0xFF	; 255
    107e:	9f 4f       	sbci	r25, 0xFF	; 255
		is_negative = 1;
    1080:	01 e0       	ldi	r16, 0x01	; 1
    1082:	01 c0       	rjmp	.+2      	; 0x1086 <i32toa_align_right+0x2e>
//				If result length > len[6:0], buffer will be filled with spaces
//		len[7] - if set, result string will be null-terminated
//-------------------------------------------------------//
void i32toa_align_right(int32_t val, char *buffer, uint8_t len)
{
	uint8_t is_negative = 0;
    1084:	00 e0       	ldi	r16, 0x00	; 0
	{
		val = -val;
		is_negative = 1;
	}
	
	if (len & NO_TERMINATING_ZERO)
    1086:	17 ff       	sbrs	r17, 7
    1088:	05 c0       	rjmp	.+10     	; 0x1094 <i32toa_align_right+0x3c>
	{
		len = len & ~NO_TERMINATING_ZERO;
    108a:	1f 77       	andi	r17, 0x7F	; 127
		buffer += len;	
    108c:	ea 01       	movw	r28, r20
    108e:	c1 0f       	add	r28, r17
    1090:	d1 1d       	adc	r29, r1
    1092:	04 c0       	rjmp	.+8      	; 0x109c <i32toa_align_right+0x44>
	}
	else
	{
		buffer += len;	
    1094:	ea 01       	movw	r28, r20
    1096:	c1 0f       	add	r28, r17
    1098:	d1 1d       	adc	r29, r1
		*buffer = 0;
    109a:	18 82       	st	Y, r1
	}
	
	do
	{
		*--buffer = val % 10 + '0';
    109c:	2a e0       	ldi	r18, 0x0A	; 10
    109e:	c2 2e       	mov	r12, r18
    10a0:	d1 2c       	mov	r13, r1
    10a2:	e1 2c       	mov	r14, r1
    10a4:	f1 2c       	mov	r15, r1
    10a6:	a7 01       	movw	r20, r14
    10a8:	96 01       	movw	r18, r12
    10aa:	27 d5       	rcall	.+2638   	; 0x1afa <__divmodsi4>
    10ac:	60 5d       	subi	r22, 0xD0	; 208
    10ae:	6a 93       	st	-Y, r22
		val /= 10;
    10b0:	b9 01       	movw	r22, r18
    10b2:	ca 01       	movw	r24, r20
		len--;
    10b4:	11 50       	subi	r17, 0x01	; 1
	}
	while ((val != 0) && len);
    10b6:	61 15       	cp	r22, r1
    10b8:	71 05       	cpc	r23, r1
    10ba:	81 05       	cpc	r24, r1
    10bc:	91 05       	cpc	r25, r1
    10be:	19 f0       	breq	.+6      	; 0x10c6 <i32toa_align_right+0x6e>
    10c0:	11 11       	cpse	r17, r1
    10c2:	f1 cf       	rjmp	.-30     	; 0x10a6 <i32toa_align_right+0x4e>
    10c4:	08 c0       	rjmp	.+16     	; 0x10d6 <i32toa_align_right+0x7e>
	
	if ( (len) && (is_negative) )
    10c6:	11 23       	and	r17, r17
    10c8:	31 f0       	breq	.+12     	; 0x10d6 <i32toa_align_right+0x7e>
    10ca:	00 23       	and	r16, r16
    10cc:	21 f0       	breq	.+8      	; 0x10d6 <i32toa_align_right+0x7e>
	{
		*--buffer = '-';
    10ce:	21 97       	sbiw	r28, 0x01	; 1
    10d0:	8d e2       	ldi	r24, 0x2D	; 45
    10d2:	88 83       	st	Y, r24
		len--;	
    10d4:	11 50       	subi	r17, 0x01	; 1
	}	
	
	// Padding
	while(len--)
		*--buffer = ' ';
    10d6:	80 e2       	ldi	r24, 0x20	; 32
    10d8:	01 c0       	rjmp	.+2      	; 0x10dc <i32toa_align_right+0x84>
    10da:	8a 93       	st	-Y, r24
		*--buffer = '-';
		len--;	
	}	
	
	// Padding
	while(len--)
    10dc:	11 50       	subi	r17, 0x01	; 1
    10de:	e8 f7       	brcc	.-6      	; 0x10da <i32toa_align_right+0x82>
		*--buffer = ' ';
}
    10e0:	df 91       	pop	r29
    10e2:	cf 91       	pop	r28
    10e4:	1f 91       	pop	r17
    10e6:	0f 91       	pop	r16
    10e8:	ff 90       	pop	r15
    10ea:	ef 90       	pop	r14
    10ec:	df 90       	pop	r13
    10ee:	cf 90       	pop	r12
    10f0:	08 95       	ret

000010f2 <u16toa_align_right>:
//-------------------------------------------------------//
// Converts uint16_t to a string
// See the i32toa_align_right() function
//-------------------------------------------------------//
void u16toa_align_right(uint16_t val, char *buffer, uint8_t len)
{
    10f2:	fb 01       	movw	r30, r22
    10f4:	24 2f       	mov	r18, r20
	i32toa_align_right((int32_t)val, buffer, len);
    10f6:	bc 01       	movw	r22, r24
    10f8:	80 e0       	ldi	r24, 0x00	; 0
    10fa:	90 e0       	ldi	r25, 0x00	; 0
    10fc:	af 01       	movw	r20, r30
    10fe:	ac cf       	rjmp	.-168    	; 0x1058 <i32toa_align_right>

00001100 <main>:
// Initializes system IO
//-------------------------------------------------------//
static void init_system_io()
{
	// Setup Ports
	PORTD = 0;//(1<<PD_SYNCA | 1<<PD_SYNCB);
    1100:	12 ba       	out	0x12, r1	; 18
	DDRD = (1<<PD_TXD | 1<<PD_M1 | 1<<PD_M2 | 1<<PD_HEATER | 1<<PD_HEAT_INDIC );
    1102:	8e e3       	ldi	r24, 0x3E	; 62
    1104:	81 bb       	out	0x11, r24	; 17
	
	PORTB = 0;
    1106:	18 ba       	out	0x18, r1	; 24
	DDRB = (1<<PB_BEEPER | 1<<PB_LED_DOUT | 1<<PB_LED_CLK | 1<<PB_SEGF | 1<<PB_SEGG | 1<<PB_SEGH);
    1108:	8f e3       	ldi	r24, 0x3F	; 63
    110a:	87 bb       	out	0x17, r24	; 23
	
	PORTC = 0;
    110c:	15 ba       	out	0x15, r1	; 21
	DDRC = (1<<PC_SEGA | 1<<PC_SEGB | 1<<PC_SEGC | 1<<PC_SEGD | 1<<PC_SEGE);	
    110e:	8f e1       	ldi	r24, 0x1F	; 31
    1110:	84 bb       	out	0x14, r24	; 20

	// Setup timer0
	// 1/1024 prescaler, T=64us @16MHz
	TCCR0 = (1<<CS02 | 0<<CS01 | 1<<CS00);
    1112:	85 e0       	ldi	r24, 0x05	; 5
    1114:	83 bf       	out	0x33, r24	; 51
	TCNT0 = 0;
    1116:	12 be       	out	0x32, r1	; 50
	// Clear interrupt flag
	TIFR = (1<<TOV0);
    1118:	81 e0       	ldi	r24, 0x01	; 1
    111a:	88 bf       	out	0x38, r24	; 56
	
	// Setup timer2 as 1ms system frequency generator
	// 1/64 prescaler, CTC mode, OC2 disconnected
	TCCR2 = (1<<CS22 | 1<<WGM21);
    111c:	8c e0       	ldi	r24, 0x0C	; 12
    111e:	85 bd       	out	0x25, r24	; 37
	OCR2 = 249;						// 1ms @ 16MHz
    1120:	89 ef       	ldi	r24, 0xF9	; 249
    1122:	83 bd       	out	0x23, r24	; 35
	
	// Enable interrupts from timers 0 and 2
	TIMSK = (1<<TOIE0 | 1<<OCIE2);
    1124:	81 e8       	ldi	r24, 0x81	; 129
    1126:	89 bf       	out	0x39, r24	; 57
	
	// Setup timer1 as beeper frequency generator
	// CTC mode, 1/64 prescaler
	TCCR1A = 0;
    1128:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = (1<<WGM12 | 1<<CS11 | 1<<CS10);
    112a:	8b e0       	ldi	r24, 0x0B	; 11
    112c:	8e bd       	out	0x2e, r24	; 46
	// 1kHz beeper frequency default
	OCR1A = 127;
    112e:	8f e7       	ldi	r24, 0x7F	; 127
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	9b bd       	out	0x2b, r25	; 43
    1134:	8a bd       	out	0x2a, r24	; 42

	// Setup AC sync comparator
	// Interrupt on output toggle
	ACSR = (1<<ACIE | 0<<ACIS1 | 0<<ACIS0);
    1136:	88 e0       	ldi	r24, 0x08	; 8
    1138:	88 b9       	out	0x08, r24	; 8
	
	// Setup ADC
	// Internal Vref + cap, input ADC5, 
	ADMUX = (1<<REFS1 | 1<<REFS0 | 0<<MUX3 | 1<<MUX2 | 0<<MUX1 | 1<<MUX0 );
    113a:	85 ec       	ldi	r24, 0xC5	; 197
    113c:	87 b9       	out	0x07, r24	; 7
	// Prescaler = 128
	ADCSRA = (1<<ADEN | 1<<ADIE | 1<<ADPS2 | 1<<ADPS1 | 1<<ADPS0);
    113e:	8f e8       	ldi	r24, 0x8F	; 143
    1140:	86 b9       	out	0x06, r24	; 6
	
	// Setup USART
	// Double speed
	UCSRA = (1<<U2X);
    1142:	82 e0       	ldi	r24, 0x02	; 2
    1144:	8b b9       	out	0x0b, r24	; 11
	UCSRB = (1<<RXEN | 1<<TXEN | 0<<UCSZ2);
    1146:	88 e1       	ldi	r24, 0x18	; 24
    1148:	8a b9       	out	0x0a, r24	; 10
	// No parity, 1 stop bit, 8 bit
	UCSRC = (1<<URSEL | 0<<UPM1 | 0<<UPM0 | 0<<USBS | 1<<UCSZ1 | 1<<UCSZ0);
    114a:	86 e8       	ldi	r24, 0x86	; 134
    114c:	80 bd       	out	0x20, r24	; 32
	// 57600 @16MHz, 2x
	UBRRH=0x00;
    114e:	10 bc       	out	0x20, r1	; 32
	UBRRL=0x22;
    1150:	82 e2       	ldi	r24, 0x22	; 34
    1152:	89 b9       	out	0x09, r24	; 9
	
	
	// Init IO locations which are used as globals
	TWBR = 0x00;	// heaterState 			(control)
    1154:	10 b8       	out	0x00, r1	; 0
	TWAR = 0x00;	// sys_timers_flags		(systimer)
    1156:	12 b8       	out	0x02, r1	; 2
	
	// Initialize MCU IO
	init_system_io();
	// Restore params from EEPROM
	// If some values are corrupted, settings or/and calibration are loaded with default configuration.
	temp8u = restoreGlobalParams();
    1158:	02 db       	rcall	.-2556   	; 0x75e <restoreGlobalParams>
    115a:	c8 2f       	mov	r28, r24
	// Calibrate ADC coefficients using restored params
	calculateCoeffs();
    115c:	94 d8       	rcall	.-3800   	; 0x286 <calculateCoeffs>
	// Initialize LED indicator
	initLedIndicator();
    115e:	64 dc       	rcall	.-1848   	; 0xa28 <initLedIndicator>
	// Clear comparator interrupt flag to prevent false triggering
	ACSR |= (1<<ACI);
    1160:	44 9a       	sbi	0x08, 4	; 8
	sei();
    1162:	78 94       	sei
	// Send greeting
	USART_sendstr("\r\n\r\nLaminator controller v0.501 by Avega\r\n");
    1164:	86 ef       	ldi	r24, 0xF6	; 246
    1166:	90 e0       	ldi	r25, 0x00	; 0
    1168:	a3 d4       	rcall	.+2374   	; 0x1ab0 <USART_sendstr>
	
	// If default values were loaded from EEPROM, inform user
	#ifdef USE_EEPROM_CRC
	if (temp8u)
    116a:	cc 23       	and	r28, r28
    116c:	a9 f0       	breq	.+42     	; 0x1198 <main+0x98>
	{
		printLedBuffer(0,"ERR E");
    116e:	61 e2       	ldi	r22, 0x21	; 33
    1170:	71 e0       	ldi	r23, 0x01	; 1
    1172:	80 e0       	ldi	r24, 0x00	; 0
    1174:	7c dc       	rcall	.-1800   	; 0xa6e <printLedBuffer>
		fillLedBuffer(5,1,temp8u + 0x30);	// error code: E1 - CRC error in global params, E2 - CRC error in calibration, E3 - both
    1176:	4c 2f       	mov	r20, r28
    1178:	40 5d       	subi	r20, 0xD0	; 208
    117a:	61 e0       	ldi	r22, 0x01	; 1
    117c:	85 e0       	ldi	r24, 0x05	; 5
    117e:	14 dc       	rcall	.-2008   	; 0x9a8 <fillLedBuffer>
		Sound_Play(m_beep_err1);
    1180:	84 e5       	ldi	r24, 0x54	; 84
    1182:	90 e0       	ldi	r25, 0x00	; 0
    1184:	7b d4       	rcall	.+2294   	; 0x1a7c <Sound_Play>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1186:	2f ef       	ldi	r18, 0xFF	; 255
    1188:	83 ed       	ldi	r24, 0xD3	; 211
    118a:	90 e3       	ldi	r25, 0x30	; 48
    118c:	21 50       	subi	r18, 0x01	; 1
    118e:	80 40       	sbci	r24, 0x00	; 0
    1190:	90 40       	sbci	r25, 0x00	; 0
    1192:	e1 f7       	brne	.-8      	; 0x118c <main+0x8c>
    1194:	00 c0       	rjmp	.+0      	; 0x1196 <main+0x96>
    1196:	00 00       	nop
    1198:	2f ef       	ldi	r18, 0xFF	; 255
    119a:	81 ee       	ldi	r24, 0xE1	; 225
    119c:	94 e0       	ldi	r25, 0x04	; 4
    119e:	21 50       	subi	r18, 0x01	; 1
    11a0:	80 40       	sbci	r24, 0x00	; 0
    11a2:	90 40       	sbci	r25, 0x00	; 0
    11a4:	e1 f7       	brne	.-8      	; 0x119e <main+0x9e>
    11a6:	00 c0       	rjmp	.+0      	; 0x11a8 <main+0xa8>
    11a8:	00 00       	nop
	} 
	#endif
	// Safety delay for power part and ADC buffer
	_delay_ms(100);
	// Check AC line
	if(isACSyncPresent()) 	
    11aa:	52 d2       	rcall	.+1188   	; 0x1650 <isACSyncPresent>
    11ac:	88 23       	and	r24, r24
    11ae:	69 f0       	breq	.+26     	; 0x11ca <main+0xca>
	{
		// Power control state machine has not changed - sync has not been detected
		printLedBuffer(0,"ERR AC");
    11b0:	67 e2       	ldi	r22, 0x27	; 39
    11b2:	71 e0       	ldi	r23, 0x01	; 1
    11b4:	80 e0       	ldi	r24, 0x00	; 0
    11b6:	5b dc       	rcall	.-1866   	; 0xa6e <printLedBuffer>
    11b8:	2f ef       	ldi	r18, 0xFF	; 255
    11ba:	83 ed       	ldi	r24, 0xD3	; 211
    11bc:	90 e3       	ldi	r25, 0x30	; 48
    11be:	21 50       	subi	r18, 0x01	; 1
    11c0:	80 40       	sbci	r24, 0x00	; 0
    11c2:	90 40       	sbci	r25, 0x00	; 0
    11c4:	e1 f7       	brne	.-8      	; 0x11be <main+0xbe>
    11c6:	00 c0       	rjmp	.+0      	; 0x11c8 <main+0xc8>
    11c8:	00 00       	nop
		_delay_ms(1000);
	}
	// Initialize menu
	InitMenu();
    11ca:	ac de       	rcall	.-680    	; 0xf24 <InitMenu>
	// Beep
	Sound_Play(m_beep_1000Hz_100ms);
    11cc:	88 e6       	ldi	r24, 0x68	; 104
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	55 d4       	rcall	.+2218   	; 0x1a7c <Sound_Play>
	
	// When we get here, full ADC buffer have been sampled
	// Initialize ADC filter
	temp8u = 20;				// depth of ADC filter sample buffer
	while(--temp8u)
    11d2:	c4 e1       	ldi	r28, 0x14	; 20
    11d4:	01 c0       	rjmp	.+2      	; 0x11d8 <main+0xd8>
		update_normalized_adc();	
    11d6:	b2 d8       	rcall	.-3740   	; 0x33c <update_normalized_adc>
    11d8:	c1 50       	subi	r28, 0x01	; 1
	Sound_Play(m_beep_1000Hz_100ms);
	
	// When we get here, full ADC buffer have been sampled
	// Initialize ADC filter
	temp8u = 20;				// depth of ADC filter sample buffer
	while(--temp8u)
    11da:	e9 f7       	brne	.-6      	; 0x11d6 <main+0xd6>
		update_normalized_adc();	
	
	// Start rotating
	setMotorDirection(ROLL_FWD);
    11dc:	81 e0       	ldi	r24, 0x01	; 1
    11de:	b6 d1       	rcall	.+876    	; 0x154c <setMotorDirection>
	// Clear timer
	cli();
    11e0:	f8 94       	cli
	menuUpdateTimer.FOvfl = 0;
    11e2:	80 91 8c 00 	lds	r24, 0x008C
    11e6:	8f 7b       	andi	r24, 0xBF	; 191
    11e8:	80 93 8c 00 	sts	0x008C, r24
	sei();
    11ec:	78 94       	sei
	// Enable watchdog
	wdt_enable(WDTO_1S);
    11ee:	2e e0       	ldi	r18, 0x0E	; 14
    11f0:	88 e1       	ldi	r24, 0x18	; 24
    11f2:	90 e0       	ldi	r25, 0x00	; 0
    11f4:	0f b6       	in	r0, 0x3f	; 63
    11f6:	f8 94       	cli
    11f8:	a8 95       	wdr
    11fa:	81 bd       	out	0x21, r24	; 33
    11fc:	0f be       	out	0x3f, r0	; 63
    11fe:	21 bd       	out	0x21, r18	; 33
	
	// Dump calibration data over UART - might be useful for debug
	USART_sendstr("Calibration data: ");
    1200:	8e e2       	ldi	r24, 0x2E	; 46
    1202:	91 e0       	ldi	r25, 0x01	; 1
    1204:	55 d4       	rcall	.+2218   	; 0x1ab0 <USART_sendstr>
	logU16p(cp.cpoint1);
    1206:	80 91 06 02 	lds	r24, 0x0206
    120a:	90 e0       	ldi	r25, 0x00	; 0
    120c:	5c d4       	rcall	.+2232   	; 0x1ac6 <logU16p>
	logU16p(cp.cpoint1_adc);
    120e:	80 91 08 02 	lds	r24, 0x0208
    1212:	90 91 09 02 	lds	r25, 0x0209
    1216:	57 d4       	rcall	.+2222   	; 0x1ac6 <logU16p>
	logU16p(cp.cpoint2);
    1218:	80 91 07 02 	lds	r24, 0x0207
    121c:	90 e0       	ldi	r25, 0x00	; 0
    121e:	53 d4       	rcall	.+2214   	; 0x1ac6 <logU16p>
	logU16p(cp.cpoint2_adc);
    1220:	80 91 0a 02 	lds	r24, 0x020A
    1224:	90 91 0b 02 	lds	r25, 0x020B
    1228:	4e d4       	rcall	.+2204   	; 0x1ac6 <logU16p>
	USART_sendstr("\r\n");
    122a:	8e e1       	ldi	r24, 0x1E	; 30
    122c:	91 e0       	ldi	r25, 0x01	; 1
    122e:	40 d4       	rcall	.+2176   	; 0x1ab0 <USART_sendstr>
//	ISR:	ADC (ADC conversion is started by Timer2 ISR)
//-------------------------------------------------------//
int main(void)
{
	uint8_t temp8u = 0x00;
	dbg_PID_t* dbg_p = &dbg_PID_struct;
    1230:	cd e2       	ldi	r28, 0x2D	; 45
    1232:	d2 e0       	ldi	r29, 0x02	; 2
	logU16p(cp.cpoint2_adc);
	USART_sendstr("\r\n");

    while(1)
    {
		if (menuUpdateTimer.FOvfl)
    1234:	80 91 8c 00 	lds	r24, 0x008C
    1238:	86 ff       	sbrs	r24, 6
    123a:	fc cf       	rjmp	.-8      	; 0x1234 <main+0x134>
		{
			// Reset watchdog timer
			wdt_reset();
    123c:	a8 95       	wdr
			
			//--------- BUTTONS ----------//
			
			// Get new button state
			process_buttons();
    123e:	0c d9       	rcall	.-3560   	; 0x458 <process_buttons>
			
			// Give sound feedback
			if (buttons.action_long & (BD_MENU | BD_HEATCTRL))
    1240:	80 91 05 02 	lds	r24, 0x0205
    1244:	81 72       	andi	r24, 0x21	; 33
    1246:	19 f0       	breq	.+6      	; 0x124e <main+0x14e>
			{
				Sound_Play(m_beep_800Hz_40ms);
    1248:	80 e6       	ldi	r24, 0x60	; 96
    124a:	90 e0       	ldi	r25, 0x00	; 0
    124c:	06 c0       	rjmp	.+12     	; 0x125a <main+0x15a>
			}
			else if (buttons.action_down & (BD_MENU | BD_UP | BD_DOWN | BD_HEATCTRL))
    124e:	80 91 02 02 	lds	r24, 0x0202
    1252:	81 7e       	andi	r24, 0xE1	; 225
    1254:	19 f0       	breq	.+6      	; 0x125c <main+0x15c>
			{
				Sound_Play(m_beep_1000Hz_40ms);
    1256:	84 e6       	ldi	r24, 0x64	; 100
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	10 d4       	rcall	.+2080   	; 0x1a7c <Sound_Play>
			}	
			// Direction control buttons sounds get special processing at processRollControl()
			
			// If any button is pressed, restart power off interval
			if (buttons.action_down)
    125c:	80 91 02 02 	lds	r24, 0x0202
    1260:	81 11       	cpse	r24, r1
			{
				resetAutoPowerOffCounter();
    1262:	81 d3       	rcall	.+1794   	; 0x1966 <resetAutoPowerOffCounter>
			
			//---------- TIMERS ----------//
			
			// Process timers and time counters - it is important to call
			// this function before menu and power controls processing
			processSystemTimers();
    1264:	2f d3       	rcall	.+1630   	; 0x18c4 <processSystemTimers>

			// Warn user about soon auto powering off
			if (sys_timers_flags & AUTOPOFF_SOON)
    1266:	13 9b       	sbis	0x02, 3	; 2
    1268:	03 c0       	rjmp	.+6      	; 0x1270 <main+0x170>
			{
				Sound_Play(m_beep_warn_poff);
    126a:	80 e4       	ldi	r24, 0x40	; 64
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	06 d4       	rcall	.+2060   	; 0x1a7c <Sound_Play>
			}		
			
			//----------- ADC ------------//
			
			// Get new temperature measurement
			update_normalized_adc();			
    1270:	65 d8       	rcall	.-3894   	; 0x33c <update_normalized_adc>
		
			// Update indicated Celsius degree
			if (sys_timers_flags & EXPIRED_CELSIUS)
    1272:	10 99       	sbic	0x02, 0	; 2
			{
				update_Celsius();		
    1274:	9d d8       	rcall	.-3782   	; 0x3b0 <update_Celsius>
			}
			
			//----------- MENU -----------//		
				
			// Process user menu states, settings and indication
			processMenu();
    1276:	5f de       	rcall	.-834    	; 0xf36 <processMenu>
			
			//--------- CONTROLS ---------//		
			
			// Process cyclic rolling, direction control
			processRollControl();	
    1278:	38 d9       	rcall	.-3472   	; 0x4ea <processRollControl>
			
			// Process heater events monitoring
			// Must be called before processHeaterControl()
			processHeaterEvents();
    127a:	fa d9       	rcall	.-3084   	; 0x670 <processHeaterEvents>
			
			// Process heater regulation
			processHeaterControl();
    127c:	c0 d9       	rcall	.-3200   	; 0x5fe <processHeaterControl>
			//setHeaterPower(0);		// bug test
		
			// Process heater warnings
			processHeaterAlerts();
    127e:	04 da       	rcall	.-3064   	; 0x688 <processHeaterAlerts>
			
			
			
			//------- LOG to UART --------//	
			if (sys_timers_flags & EXPIRED_LOG)
    1280:	15 9b       	sbis	0x02, 5	; 2
    1282:	36 c0       	rjmp	.+108    	; 0x12f0 <main+0x1f0>
			{
				PRELOAD("y",dbg_p);
				
				logU16p(adc_celsius);					// Actual temp Celsius
    1284:	80 91 ff 01 	lds	r24, 0x01FF
    1288:	90 91 00 02 	lds	r25, 0x0200
    128c:	1c d4       	rcall	.+2104   	; 0x1ac6 <logU16p>
				logU16p(adc_normalized);				// ADC, normalized (adc_normalized = 1024 - adc_raw)
    128e:	80 91 fc 01 	lds	r24, 0x01FC
    1292:	90 91 fd 01 	lds	r25, 0x01FD
    1296:	17 d4       	rcall	.+2094   	; 0x1ac6 <logU16p>
				logU16p(adc_filtered);					// ADC, oversampled and filtered
    1298:	80 91 fa 01 	lds	r24, 0x01FA
    129c:	90 91 fb 01 	lds	r25, 0x01FB
    12a0:	12 d4       	rcall	.+2084   	; 0x1ac6 <logU16p>
				USART_sendstr("    ");
    12a2:	8c ed       	ldi	r24, 0xDC	; 220
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	04 d4       	rcall	.+2056   	; 0x1ab0 <USART_sendstr>

				logU16p(dbg_p->PID_SetPoint);
    12a8:	88 81       	ld	r24, Y
    12aa:	99 81       	ldd	r25, Y+1	; 0x01
    12ac:	0c d4       	rcall	.+2072   	; 0x1ac6 <logU16p>
				logU16p(dbg_p->PID_ProcessValue);
    12ae:	8a 81       	ldd	r24, Y+2	; 0x02
    12b0:	9b 81       	ldd	r25, Y+3	; 0x03
    12b2:	09 d4       	rcall	.+2066   	; 0x1ac6 <logU16p>

				logI32p(dbg_p->PID_p_term);
    12b4:	6c 81       	ldd	r22, Y+4	; 0x04
    12b6:	7d 81       	ldd	r23, Y+5	; 0x05
    12b8:	88 27       	eor	r24, r24
    12ba:	77 fd       	sbrc	r23, 7
    12bc:	80 95       	com	r24
    12be:	98 2f       	mov	r25, r24
    12c0:	09 d4       	rcall	.+2066   	; 0x1ad4 <logI32p>
				logI32p(dbg_p->PID_d_term);
    12c2:	68 85       	ldd	r22, Y+8	; 0x08
    12c4:	79 85       	ldd	r23, Y+9	; 0x09
    12c6:	88 27       	eor	r24, r24
    12c8:	77 fd       	sbrc	r23, 7
    12ca:	80 95       	com	r24
    12cc:	98 2f       	mov	r25, r24
    12ce:	02 d4       	rcall	.+2052   	; 0x1ad4 <logI32p>
				logI32p(dbg_p->PID_i_term);
    12d0:	6e 81       	ldd	r22, Y+6	; 0x06
    12d2:	7f 81       	ldd	r23, Y+7	; 0x07
    12d4:	88 27       	eor	r24, r24
    12d6:	77 fd       	sbrc	r23, 7
    12d8:	80 95       	com	r24
    12da:	98 2f       	mov	r25, r24
    12dc:	fb d3       	rcall	.+2038   	; 0x1ad4 <logI32p>
				
				USART_sendstr("    ");
    12de:	8c ed       	ldi	r24, 0xDC	; 220
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	e6 d3       	rcall	.+1996   	; 0x1ab0 <USART_sendstr>
				
				logU16p(dbg_p->PID_output);
    12e4:	8a 85       	ldd	r24, Y+10	; 0x0a
    12e6:	9b 85       	ldd	r25, Y+11	; 0x0b
    12e8:	ee d3       	rcall	.+2012   	; 0x1ac6 <logU16p>
				
				//USART_sendstr("    ");
				//logU16p(menuUpdateTimer.Timer);			// Main loop time (ms)
				
				USART_sendstr("\r\n");
    12ea:	8e e1       	ldi	r24, 0x1E	; 30
    12ec:	91 e0       	ldi	r25, 0x01	; 1
    12ee:	e0 d3       	rcall	.+1984   	; 0x1ab0 <USART_sendstr>

				//---------------------------------//
			}
			
			#ifdef MAIN_LOOP_TIME_PROFILING
			temp8u = menuUpdateTimer.Timer;
    12f0:	80 91 8d 00 	lds	r24, 0x008D
			if (temp8u > max_work_time)
    12f4:	90 91 b4 01 	lds	r25, 0x01B4
    12f8:	98 17       	cp	r25, r24
    12fa:	10 f4       	brcc	.+4      	; 0x1300 <main+0x200>
				max_work_time = temp8u;
    12fc:	80 93 b4 01 	sts	0x01B4, r24
			#endif
			
			cli();
    1300:	f8 94       	cli
			menuUpdateTimer.FOvfl = 0;	
    1302:	80 91 8c 00 	lds	r24, 0x008C
    1306:	8f 7b       	andi	r24, 0xBF	; 191
    1308:	80 93 8c 00 	sts	0x008C, r24
			sei();
    130c:	78 94       	sei
    130e:	92 cf       	rjmp	.-220    	; 0x1234 <main+0x134>

00001310 <setPIDIntegratorLimit>:
	// When error = 0, maximum is simply integ_soft_k * INTEGRATOR_SOFT_RANGE
	// integ_soft_k is chosen for desired maximum
	// For example, we want integrator maximum of about 30% at 90C. Then integ_soft_k = 300_000 / INTEGRATOR_SOFT_RANGE = 862
	// The "magic" coefficient in the integ_soft_k expression should be 862 / (90 - 15) = 11.49 => 12
	
	if (set_temp < 50)
    1310:	82 33       	cpi	r24, 0x32	; 50
    1312:	08 f4       	brcc	.+2      	; 0x1316 <setPIDIntegratorLimit+0x6>
		set_temp = 50;
    1314:	82 e3       	ldi	r24, 0x32	; 50
	set_temp -= 15;
    1316:	8f 50       	subi	r24, 0x0F	; 15
	integ_soft_k = (uint16_t)set_temp * 12;
    1318:	2c e0       	ldi	r18, 0x0C	; 12
    131a:	82 9f       	mul	r24, r18
    131c:	c0 01       	movw	r24, r0
    131e:	11 24       	eor	r1, r1
    1320:	90 93 c8 01 	sts	0x01C8, r25
    1324:	80 93 c7 01 	sts	0x01C7, r24
    1328:	08 95       	ret

0000132a <processPID>:
//	setPoint - desired process value
//	processValue - actual process value
//	mode - enable/disable controller - 
//	  terms are calculated anyway, but output is set to 0 when disabled
uint16_t processPID(uint16_t setPoint, uint16_t processValue, uint8_t mode)
{
    132a:	4f 92       	push	r4
    132c:	5f 92       	push	r5
    132e:	6f 92       	push	r6
    1330:	7f 92       	push	r7
    1332:	9f 92       	push	r9
    1334:	af 92       	push	r10
    1336:	bf 92       	push	r11
    1338:	cf 92       	push	r12
    133a:	df 92       	push	r13
    133c:	ef 92       	push	r14
    133e:	ff 92       	push	r15
    1340:	0f 93       	push	r16
    1342:	1f 93       	push	r17
    1344:	cf 93       	push	r28
    1346:	df 93       	push	r29
    1348:	5c 01       	movw	r10, r24
    134a:	7b 01       	movw	r14, r22
    134c:	94 2e       	mov	r9, r20
	int16_t error, p_term, i_term, d_term, temp;
	int32_t integ_max;
	dbg_PID_t* dbg_p = &dbg_PID_struct;
	
	// Get the error
	error = setPoint - processValue;
    134e:	9c 01       	movw	r18, r24
    1350:	26 1b       	sub	r18, r22
    1352:	37 0b       	sbc	r19, r23
	
	//------ Calculate P term --------//
	if (error > (PROP_MAX / Kp))			// Compare before multiplication to avoid overflow
    1354:	2d 35       	cpi	r18, 0x5D	; 93
    1356:	81 e0       	ldi	r24, 0x01	; 1
    1358:	38 07       	cpc	r19, r24
    135a:	5c f4       	brge	.+22     	; 0x1372 <processPID+0x48>
	{
		p_term = PROP_MAX;	
	}
	else if (error < (PROP_MIN / Kp))
    135c:	24 3a       	cpi	r18, 0xA4	; 164
    135e:	8e ef       	ldi	r24, 0xFE	; 254
    1360:	38 07       	cpc	r19, r24
    1362:	54 f0       	brlt	.+20     	; 0x1378 <processPID+0x4e>
	{
		p_term = PROP_MIN;	
	}
	else
	{
		p_term = error * Kp;
    1364:	8b e2       	ldi	r24, 0x2B	; 43
    1366:	82 9f       	mul	r24, r18
    1368:	80 01       	movw	r16, r0
    136a:	83 9f       	mul	r24, r19
    136c:	10 0d       	add	r17, r0
    136e:	11 24       	eor	r1, r1
    1370:	05 c0       	rjmp	.+10     	; 0x137c <processPID+0x52>
	error = setPoint - processValue;
	
	//------ Calculate P term --------//
	if (error > (PROP_MAX / Kp))			// Compare before multiplication to avoid overflow
	{
		p_term = PROP_MAX;	
    1372:	08 e9       	ldi	r16, 0x98	; 152
    1374:	1a e3       	ldi	r17, 0x3A	; 58
    1376:	02 c0       	rjmp	.+4      	; 0x137c <processPID+0x52>
	}
	else if (error < (PROP_MIN / Kp))
	{
		p_term = PROP_MIN;	
    1378:	08 e6       	ldi	r16, 0x68	; 104
    137a:	15 ec       	ldi	r17, 0xC5	; 197
	{
		p_term = error * Kp;
	}
	
	//------ Calculate I term --------//
	if (!(mode & PID_RESET_INTEGRATOR))
    137c:	92 fc       	sbrc	r9, 2
    137e:	1f c0       	rjmp	.+62     	; 0x13be <processPID+0x94>
		integAcc += error * Ki;
    1380:	83 e2       	ldi	r24, 0x23	; 35
    1382:	82 9f       	mul	r24, r18
    1384:	a0 01       	movw	r20, r0
    1386:	83 9f       	mul	r24, r19
    1388:	50 0d       	add	r21, r0
    138a:	11 24       	eor	r1, r1
    138c:	66 27       	eor	r22, r22
    138e:	57 fd       	sbrc	r21, 7
    1390:	60 95       	com	r22
    1392:	76 2f       	mov	r23, r22
    1394:	80 91 c9 01 	lds	r24, 0x01C9
    1398:	90 91 ca 01 	lds	r25, 0x01CA
    139c:	a0 91 cb 01 	lds	r26, 0x01CB
    13a0:	b0 91 cc 01 	lds	r27, 0x01CC
    13a4:	84 0f       	add	r24, r20
    13a6:	95 1f       	adc	r25, r21
    13a8:	a6 1f       	adc	r26, r22
    13aa:	b7 1f       	adc	r27, r23
    13ac:	80 93 c9 01 	sts	0x01C9, r24
    13b0:	90 93 ca 01 	sts	0x01CA, r25
    13b4:	a0 93 cb 01 	sts	0x01CB, r26
    13b8:	b0 93 cc 01 	sts	0x01CC, r27
    13bc:	08 c0       	rjmp	.+16     	; 0x13ce <processPID+0xa4>
	else
		integAcc = 0;		// May be useful for debug
    13be:	10 92 c9 01 	sts	0x01C9, r1
    13c2:	10 92 ca 01 	sts	0x01CA, r1
    13c6:	10 92 cb 01 	sts	0x01CB, r1
    13ca:	10 92 cc 01 	sts	0x01CC, r1

	#ifdef INTEGRATOR_SOFT_LIMIT
	// Soft limit is a monotone linear function f(error), f(error) = 0 when error = INTEGRATOR_SOFT_RANGE
	// growing up to f(error) = INTEGRATOR_SOFT_MAX when error = 0
	if (error > INTEGRATOR_SOFT_RANGE)
    13ce:	2d 35       	cpi	r18, 0x5D	; 93
    13d0:	81 e0       	ldi	r24, 0x01	; 1
    13d2:	38 07       	cpc	r19, r24
    13d4:	64 f4       	brge	.+24     	; 0x13ee <processPID+0xc4>
		integ_max = 0;
	else if (error < 0)
    13d6:	37 fd       	sbrc	r19, 7
    13d8:	0e c0       	rjmp	.+28     	; 0x13f6 <processPID+0xcc>
		integ_max = INTEGRATOR_MAX;
	else
	{
		integ_max = (int32_t)(INTEGRATOR_SOFT_RANGE - error) * integ_soft_k;	// <- optimized
    13da:	ac e5       	ldi	r26, 0x5C	; 92
    13dc:	b1 e0       	ldi	r27, 0x01	; 1
    13de:	a2 1b       	sub	r26, r18
    13e0:	b3 0b       	sbc	r27, r19
    13e2:	20 91 c7 01 	lds	r18, 0x01C7
    13e6:	30 91 c8 01 	lds	r19, 0x01C8
    13ea:	b4 d3       	rcall	.+1896   	; 0x1b54 <__usmulhisi3>
    13ec:	08 c0       	rjmp	.+16     	; 0x13fe <processPID+0xd4>

	#ifdef INTEGRATOR_SOFT_LIMIT
	// Soft limit is a monotone linear function f(error), f(error) = 0 when error = INTEGRATOR_SOFT_RANGE
	// growing up to f(error) = INTEGRATOR_SOFT_MAX when error = 0
	if (error > INTEGRATOR_SOFT_RANGE)
		integ_max = 0;
    13ee:	60 e0       	ldi	r22, 0x00	; 0
    13f0:	70 e0       	ldi	r23, 0x00	; 0
    13f2:	cb 01       	movw	r24, r22
    13f4:	04 c0       	rjmp	.+8      	; 0x13fe <processPID+0xd4>
	else if (error < 0)
		integ_max = INTEGRATOR_MAX;
    13f6:	60 e2       	ldi	r22, 0x20	; 32
    13f8:	71 ea       	ldi	r23, 0xA1	; 161
    13fa:	87 e0       	ldi	r24, 0x07	; 7
    13fc:	90 e0       	ldi	r25, 0x00	; 0
	else
	{
		integ_max = (int32_t)(INTEGRATOR_SOFT_RANGE - error) * integ_soft_k;	// <- optimized
	}

	if (integAcc > integ_max )
    13fe:	40 90 c9 01 	lds	r4, 0x01C9
    1402:	50 90 ca 01 	lds	r5, 0x01CA
    1406:	60 90 cb 01 	lds	r6, 0x01CB
    140a:	70 90 cc 01 	lds	r7, 0x01CC
    140e:	64 15       	cp	r22, r4
    1410:	75 05       	cpc	r23, r5
    1412:	86 05       	cpc	r24, r6
    1414:	97 05       	cpc	r25, r7
    1416:	4c f4       	brge	.+18     	; 0x142a <processPID+0x100>
	{
		integAcc = integ_max;
    1418:	60 93 c9 01 	sts	0x01C9, r22
    141c:	70 93 ca 01 	sts	0x01CA, r23
    1420:	80 93 cb 01 	sts	0x01CB, r24
    1424:	90 93 cc 01 	sts	0x01CC, r25
    1428:	0a c0       	rjmp	.+20     	; 0x143e <processPID+0x114>
	}
	else if (integAcc < INTEGRATOR_MIN)
    142a:	77 fe       	sbrs	r7, 7
    142c:	08 c0       	rjmp	.+16     	; 0x143e <processPID+0x114>
	{
		integAcc = INTEGRATOR_MIN;
    142e:	10 92 c9 01 	sts	0x01C9, r1
    1432:	10 92 ca 01 	sts	0x01CA, r1
    1436:	10 92 cb 01 	sts	0x01CB, r1
    143a:	10 92 cc 01 	sts	0x01CC, r1
	{
		integAcc = INTEGRATOR_MIN;
	}
	#endif
	
	i_term = (int16_t)(integAcc / INTEGRATOR_SCALE);	// Should not exceed MAXINT16
    143e:	60 91 c9 01 	lds	r22, 0x01C9
    1442:	70 91 ca 01 	lds	r23, 0x01CA
    1446:	80 91 cb 01 	lds	r24, 0x01CB
    144a:	90 91 cc 01 	lds	r25, 0x01CC
    144e:	24 e6       	ldi	r18, 0x64	; 100
    1450:	30 e0       	ldi	r19, 0x00	; 0
    1452:	40 e0       	ldi	r20, 0x00	; 0
    1454:	50 e0       	ldi	r21, 0x00	; 0
    1456:	51 d3       	rcall	.+1698   	; 0x1afa <__divmodsi4>
    1458:	69 01       	movw	r12, r18

	//------ Calculate D term --------//
	d_term = lastProcessValue - processValue;	
    145a:	80 91 cd 01 	lds	r24, 0x01CD
    145e:	90 91 ce 01 	lds	r25, 0x01CE
    1462:	8e 19       	sub	r24, r14
    1464:	9f 09       	sbc	r25, r15
	if (d_term > DIFF_MAX / Kd)
    1466:	88 30       	cpi	r24, 0x08	; 8
    1468:	91 05       	cpc	r25, r1
    146a:	74 f4       	brge	.+28     	; 0x1488 <processPID+0x15e>
	{
		d_term = DIFF_MAX;
	}
	else if (d_term < DIFF_MIN / Kd)
    146c:	89 3f       	cpi	r24, 0xF9	; 249
    146e:	2f ef       	ldi	r18, 0xFF	; 255
    1470:	92 07       	cpc	r25, r18
    1472:	6c f0       	brlt	.+26     	; 0x148e <processPID+0x164>
	{
		d_term = DIFF_MIN;
	}
	else
	{
		d_term = Kd * d_term;
    1474:	20 e9       	ldi	r18, 0x90	; 144
    1476:	31 e0       	ldi	r19, 0x01	; 1
    1478:	82 9f       	mul	r24, r18
    147a:	e0 01       	movw	r28, r0
    147c:	83 9f       	mul	r24, r19
    147e:	d0 0d       	add	r29, r0
    1480:	92 9f       	mul	r25, r18
    1482:	d0 0d       	add	r29, r0
    1484:	11 24       	eor	r1, r1
    1486:	05 c0       	rjmp	.+10     	; 0x1492 <processPID+0x168>

	//------ Calculate D term --------//
	d_term = lastProcessValue - processValue;	
	if (d_term > DIFF_MAX / Kd)
	{
		d_term = DIFF_MAX;
    1488:	c8 eb       	ldi	r28, 0xB8	; 184
    148a:	db e0       	ldi	r29, 0x0B	; 11
    148c:	02 c0       	rjmp	.+4      	; 0x1492 <processPID+0x168>
	}
	else if (d_term < DIFF_MIN / Kd)
	{
		d_term = DIFF_MIN;
    148e:	c8 e4       	ldi	r28, 0x48	; 72
    1490:	d4 ef       	ldi	r29, 0xF4	; 244
	}
	else
	{
		d_term = Kd * d_term;
	}
	lastProcessValue = processValue;
    1492:	f0 92 ce 01 	sts	0x01CE, r15
    1496:	e0 92 cd 01 	sts	0x01CD, r14
	
	//--------- Summ terms -----------//
	if (mode & PID_ENABLED)
    149a:	90 fe       	sbrs	r9, 0
    149c:	21 c0       	rjmp	.+66     	; 0x14e0 <processPID+0x1b6>
		temp = (int16_t)( ((int32_t)p_term + (int32_t)i_term + (int32_t)d_term) / SCALING_FACTOR );
    149e:	b8 01       	movw	r22, r16
    14a0:	88 27       	eor	r24, r24
    14a2:	77 fd       	sbrc	r23, 7
    14a4:	80 95       	com	r24
    14a6:	98 2f       	mov	r25, r24
    14a8:	26 01       	movw	r4, r12
    14aa:	66 24       	eor	r6, r6
    14ac:	57 fc       	sbrc	r5, 7
    14ae:	60 94       	com	r6
    14b0:	76 2c       	mov	r7, r6
    14b2:	64 0d       	add	r22, r4
    14b4:	75 1d       	adc	r23, r5
    14b6:	86 1d       	adc	r24, r6
    14b8:	97 1d       	adc	r25, r7
    14ba:	2e 01       	movw	r4, r28
    14bc:	66 24       	eor	r6, r6
    14be:	57 fc       	sbrc	r5, 7
    14c0:	60 94       	com	r6
    14c2:	76 2c       	mov	r7, r6
    14c4:	64 0d       	add	r22, r4
    14c6:	75 1d       	adc	r23, r5
    14c8:	86 1d       	adc	r24, r6
    14ca:	97 1d       	adc	r25, r7
    14cc:	24 e1       	ldi	r18, 0x14	; 20
    14ce:	30 e0       	ldi	r19, 0x00	; 0
    14d0:	40 e0       	ldi	r20, 0x00	; 0
    14d2:	50 e0       	ldi	r21, 0x00	; 0
    14d4:	12 d3       	rcall	.+1572   	; 0x1afa <__divmodsi4>
	else
		temp = 0;
	
	if (temp > PID_OUTPUT_MAX)
    14d6:	25 3f       	cpi	r18, 0xF5	; 245
    14d8:	81 e0       	ldi	r24, 0x01	; 1
    14da:	38 07       	cpc	r19, r24
    14dc:	44 f4       	brge	.+16     	; 0x14ee <processPID+0x1c4>
    14de:	02 c0       	rjmp	.+4      	; 0x14e4 <processPID+0x1ba>
	
	//--------- Summ terms -----------//
	if (mode & PID_ENABLED)
		temp = (int16_t)( ((int32_t)p_term + (int32_t)i_term + (int32_t)d_term) / SCALING_FACTOR );
	else
		temp = 0;
    14e0:	20 e0       	ldi	r18, 0x00	; 0
    14e2:	30 e0       	ldi	r19, 0x00	; 0
    14e4:	37 ff       	sbrs	r19, 7
    14e6:	05 c0       	rjmp	.+10     	; 0x14f2 <processPID+0x1c8>
    14e8:	20 e0       	ldi	r18, 0x00	; 0
    14ea:	30 e0       	ldi	r19, 0x00	; 0
    14ec:	02 c0       	rjmp	.+4      	; 0x14f2 <processPID+0x1c8>
	
	if (temp > PID_OUTPUT_MAX)
	{
		temp = PID_OUTPUT_MAX;
    14ee:	24 ef       	ldi	r18, 0xF4	; 244
    14f0:	31 e0       	ldi	r19, 0x01	; 1
	{
		temp = PID_OUTPUT_MIN;
	}
	
	//------- Debug --------//
	PRELOAD("z",dbg_p);			// A trick used to make GCC use indirect addressing with displacement
    14f2:	ed e2       	ldi	r30, 0x2D	; 45
    14f4:	f2 e0       	ldi	r31, 0x02	; 2
								// This macro puts dbg_p into specified registers (Z for this case)
	dbg_p->PID_SetPoint = setPoint;
    14f6:	b1 82       	std	Z+1, r11	; 0x01
    14f8:	a0 82       	st	Z, r10
	dbg_p->PID_ProcessValue = processValue;
    14fa:	f3 82       	std	Z+3, r15	; 0x03
    14fc:	e2 82       	std	Z+2, r14	; 0x02
	//dbg_p->PID_error = error;
	dbg_p->PID_p_term = p_term;
    14fe:	15 83       	std	Z+5, r17	; 0x05
    1500:	04 83       	std	Z+4, r16	; 0x04
	dbg_p->PID_i_term = i_term;
    1502:	d7 82       	std	Z+7, r13	; 0x07
    1504:	c6 82       	std	Z+6, r12	; 0x06
	//dbg_p->PID_i_max = (int16_t)(integ_max / INTEGRATOR_SCALE);
	dbg_p->PID_d_term = d_term;
    1506:	d1 87       	std	Z+9, r29	; 0x09
    1508:	c0 87       	std	Z+8, r28	; 0x08
	dbg_p->PID_output = (uint16_t)temp;
    150a:	22 87       	std	Z+10, r18	; 0x0a
    150c:	33 87       	std	Z+11, r19	; 0x0b

	
	return (uint16_t)temp;	
}
    150e:	c9 01       	movw	r24, r18
    1510:	df 91       	pop	r29
    1512:	cf 91       	pop	r28
    1514:	1f 91       	pop	r17
    1516:	0f 91       	pop	r16
    1518:	ff 90       	pop	r15
    151a:	ef 90       	pop	r14
    151c:	df 90       	pop	r13
    151e:	cf 90       	pop	r12
    1520:	bf 90       	pop	r11
    1522:	af 90       	pop	r10
    1524:	9f 90       	pop	r9
    1526:	7f 90       	pop	r7
    1528:	6f 90       	pop	r6
    152a:	5f 90       	pop	r5
    152c:	4f 90       	pop	r4
    152e:	08 95       	ret

00001530 <setHeaterPower>:
void setHeaterPower(uint16_t value)
{
	// Disable interrupts from analog comparator
	//ACSR = (0<<ACIS1 | 0<<ACIS0);
	uint16_t temp = (value > HEATER_MAX_POWER) ? HEATER_MAX_POWER : value;
	cli();
    1530:	f8 94       	cli
//-------------------------------------------------------//
void setHeaterPower(uint16_t value)
{
	// Disable interrupts from analog comparator
	//ACSR = (0<<ACIS1 | 0<<ACIS0);
	uint16_t temp = (value > HEATER_MAX_POWER) ? HEATER_MAX_POWER : value;
    1532:	9c 01       	movw	r18, r24
    1534:	25 3f       	cpi	r18, 0xF5	; 245
    1536:	81 e0       	ldi	r24, 0x01	; 1
    1538:	38 07       	cpc	r19, r24
    153a:	10 f0       	brcs	.+4      	; 0x1540 <setHeaterPower+0x10>
    153c:	24 ef       	ldi	r18, 0xF4	; 244
    153e:	31 e0       	ldi	r19, 0x01	; 1
	cli();
	// Update value
	heaterPower = temp;		
    1540:	30 93 d2 01 	sts	0x01D2, r19
    1544:	20 93 d1 01 	sts	0x01D1, r18
	// Reenable interrupts
	//ACSR = (1<<ACIE | 0<<ACIS1 | 0<<ACIS0);
	sei();
    1548:	78 94       	sei
    154a:	08 95       	ret

0000154c <setMotorDirection>:
//		0 - stop
//-------------------------------------------------------//
void setMotorDirection(uint8_t dir)
{
	// Disable interrupts from timer0 
	TIMSK = (1<<OCIE2);
    154c:	90 e8       	ldi	r25, 0x80	; 128
    154e:	99 bf       	out	0x39, r25	; 57
		
	newDirReq = dir;	// save new direction request
    1550:	80 93 d3 01 	sts	0x01D3, r24
	dirChangedMask = ~ROLL_DIR_CHANGED;
    1554:	9f ed       	ldi	r25, 0xDF	; 223
    1556:	90 93 84 00 	sts	0x0084, r25
	
	if (dir & ROLL_FWD)
    155a:	80 ff       	sbrs	r24, 0
    155c:	09 c0       	rjmp	.+18     	; 0x1570 <setMotorDirection+0x24>
		bottomPoint = rollPoint;  
    155e:	80 91 d4 01 	lds	r24, 0x01D4
    1562:	90 91 d5 01 	lds	r25, 0x01D5
    1566:	90 93 d7 01 	sts	0x01D7, r25
    156a:	80 93 d6 01 	sts	0x01D6, r24
    156e:	0a c0       	rjmp	.+20     	; 0x1584 <setMotorDirection+0x38>
	else if (dir & ROLL_REV)
    1570:	81 ff       	sbrs	r24, 1
    1572:	08 c0       	rjmp	.+16     	; 0x1584 <setMotorDirection+0x38>
		topPoint = rollPoint;
    1574:	80 91 d4 01 	lds	r24, 0x01D4
    1578:	90 91 d5 01 	lds	r25, 0x01D5
    157c:	90 93 d9 01 	sts	0x01D9, r25
    1580:	80 93 d8 01 	sts	0x01D8, r24

	// Enable interrupts from timer 0
	TIMSK = (1<<TOIE0 | 1<<OCIE2);
    1584:	81 e8       	ldi	r24, 0x81	; 129
    1586:	89 bf       	out	0x39, r24	; 57
    1588:	08 95       	ret

0000158a <stopCycleRolling>:
//		DO_NOT_RESET_POINTS - stop cycle rolling but do not touch roll points
//-------------------------------------------------------//
void stopCycleRolling(uint8_t doResetPoints)
{
	// Disable interrupts from timer0 
	TIMSK = (1<<OCIE2);
    158a:	90 e8       	ldi	r25, 0x80	; 128
    158c:	99 bf       	out	0x39, r25	; 57
	
	rollState &= ~ROLL_CYCLE;
    158e:	90 91 d0 01 	lds	r25, 0x01D0
    1592:	9b 7f       	andi	r25, 0xFB	; 251
    1594:	90 93 d0 01 	sts	0x01D0, r25
	if (doResetPoints)
    1598:	88 23       	and	r24, r24
    159a:	71 f0       	breq	.+28     	; 0x15b8 <stopCycleRolling+0x2e>
	{
		topPoint = bottomPoint = rollPoint;
    159c:	80 91 d4 01 	lds	r24, 0x01D4
    15a0:	90 91 d5 01 	lds	r25, 0x01D5
    15a4:	90 93 d7 01 	sts	0x01D7, r25
    15a8:	80 93 d6 01 	sts	0x01D6, r24
    15ac:	90 93 d9 01 	sts	0x01D9, r25
    15b0:	80 93 d8 01 	sts	0x01D8, r24
		activeRollCycle = 0;	
    15b4:	10 92 cf 01 	sts	0x01CF, r1
	}		
	
	// Enable interrupts from timer 0
	TIMSK = (1<<TOIE0 | 1<<OCIE2);
    15b8:	81 e8       	ldi	r24, 0x81	; 129
    15ba:	89 bf       	out	0x39, r24	; 57
    15bc:	08 95       	ret

000015be <clearRollFlags>:
// Function for clearing rollState sticky flags
//-------------------------------------------------------//
void clearRollFlags(uint8_t flags)
{
	// Disable interrupts from timer0 
	TIMSK = (1<<OCIE2);
    15be:	90 e8       	ldi	r25, 0x80	; 128
    15c0:	99 bf       	out	0x39, r25	; 57

	// Clear specified bits
	rollState &= ~flags;
    15c2:	80 95       	com	r24
    15c4:	90 91 d0 01 	lds	r25, 0x01D0
    15c8:	98 23       	and	r25, r24
    15ca:	90 93 d0 01 	sts	0x01D0, r25
	
	// Enable interrupts from timer 0
	TIMSK = (1<<TOIE0 | 1<<OCIE2);
    15ce:	81 e8       	ldi	r24, 0x81	; 129
    15d0:	89 bf       	out	0x39, r24	; 57
    15d2:	08 95       	ret

000015d4 <isTopPointValid>:
// Returns non-zero if valid
//-------------------------------------------------------//
uint8_t isTopPointValid(void)
{
	// Disable interrupts from timer0 
	TIMSK = (1<<OCIE2);
    15d4:	80 e8       	ldi	r24, 0x80	; 128
    15d6:	89 bf       	out	0x39, r24	; 57
	uint8_t temp = ( (int16_t)(topPoint - rollPoint) >= 0 );
    15d8:	80 91 d8 01 	lds	r24, 0x01D8
    15dc:	90 91 d9 01 	lds	r25, 0x01D9
    15e0:	20 91 d4 01 	lds	r18, 0x01D4
    15e4:	30 91 d5 01 	lds	r19, 0x01D5
    15e8:	82 1b       	sub	r24, r18
    15ea:	93 0b       	sbc	r25, r19
    15ec:	89 2f       	mov	r24, r25
    15ee:	80 95       	com	r24
	// Enable interrupts from timer 0
	TIMSK = (1<<TOIE0 | 1<<OCIE2);
    15f0:	91 e8       	ldi	r25, 0x81	; 129
    15f2:	99 bf       	out	0x39, r25	; 57
	return temp;
}
    15f4:	88 1f       	adc	r24, r24
    15f6:	88 27       	eor	r24, r24
    15f8:	88 1f       	adc	r24, r24
    15fa:	08 95       	ret

000015fc <isBottomPointValid>:
// Returns non-zero if valid
//-------------------------------------------------------//
uint8_t isBottomPointValid(void)
{
	// Disable interrupts from timer0 
	TIMSK = (1<<OCIE2);
    15fc:	80 e8       	ldi	r24, 0x80	; 128
    15fe:	89 bf       	out	0x39, r24	; 57
	uint8_t temp = ( (int16_t)(rollPoint - bottomPoint) >= 0 );
    1600:	80 91 d4 01 	lds	r24, 0x01D4
    1604:	90 91 d5 01 	lds	r25, 0x01D5
    1608:	20 91 d6 01 	lds	r18, 0x01D6
    160c:	30 91 d7 01 	lds	r19, 0x01D7
    1610:	82 1b       	sub	r24, r18
    1612:	93 0b       	sbc	r25, r19
    1614:	89 2f       	mov	r24, r25
    1616:	80 95       	com	r24
	// Enable interrupts from timer 0
	TIMSK = (1<<TOIE0 | 1<<OCIE2);
    1618:	91 e8       	ldi	r25, 0x81	; 129
    161a:	99 bf       	out	0x39, r25	; 57
	return temp;
}
    161c:	88 1f       	adc	r24, r24
    161e:	88 27       	eor	r24, r24
    1620:	88 1f       	adc	r24, r24
    1622:	08 95       	ret

00001624 <startCycleRolling>:
//		0 otherwise
//-------------------------------------------------------//
uint8_t startCycleRolling(void)
{
	// Disable interrupts from timer0 
	TIMSK = (1<<OCIE2);
    1624:	80 e8       	ldi	r24, 0x80	; 128
    1626:	89 bf       	out	0x39, r24	; 57
	
	if ( isTopPointValid() && isBottomPointValid() )
    1628:	d5 df       	rcall	.-86     	; 0x15d4 <isTopPointValid>
    162a:	88 23       	and	r24, r24
    162c:	59 f0       	breq	.+22     	; 0x1644 <startCycleRolling+0x20>
    162e:	e6 df       	rcall	.-52     	; 0x15fc <isBottomPointValid>
    1630:	88 23       	and	r24, r24
    1632:	41 f0       	breq	.+16     	; 0x1644 <startCycleRolling+0x20>
	{
		rollState |= ROLL_CYCLE;
    1634:	80 91 d0 01 	lds	r24, 0x01D0
    1638:	84 60       	ori	r24, 0x04	; 4
    163a:	80 93 d0 01 	sts	0x01D0, r24
		activeRollCycle = 1;
    163e:	81 e0       	ldi	r24, 0x01	; 1
    1640:	80 93 cf 01 	sts	0x01CF, r24
	}
	
	// Enable interrupts from timer 0
	TIMSK = (1<<TOIE0 | 1<<OCIE2);
    1644:	81 e8       	ldi	r24, 0x81	; 129
    1646:	89 bf       	out	0x39, r24	; 57
	
	return (rollState & ROLL_CYCLE);
    1648:	80 91 d0 01 	lds	r24, 0x01D0
}
    164c:	84 70       	andi	r24, 0x04	; 4
    164e:	08 95       	ret

00001650 <isACSyncPresent>:
// Test if AC sync has been detected
// Returns non-zero if valid
//-------------------------------------------------------//
uint8_t isACSyncPresent(void)
{
	return 	p_state == 0x0F;
    1650:	81 e0       	ldi	r24, 0x01	; 1
    1652:	90 91 85 00 	lds	r25, 0x0085
    1656:	9f 30       	cpi	r25, 0x0F	; 15
    1658:	09 f0       	breq	.+2      	; 0x165c <isACSyncPresent+0xc>
    165a:	80 e0       	ldi	r24, 0x00	; 0
}
    165c:	08 95       	ret

0000165e <__vector_16>:
//-------------------------------------------------------//
// Analog comparator ISR
// Used for detecting AC line zeroes and heater control
//-------------------------------------------------------//
ISR(ANA_COMP_vect)
{
    165e:	1f 92       	push	r1
    1660:	0f 92       	push	r0
    1662:	0f b6       	in	r0, 0x3f	; 63
    1664:	0f 92       	push	r0
    1666:	11 24       	eor	r1, r1
    1668:	2f 93       	push	r18
    166a:	3f 93       	push	r19
    166c:	4f 93       	push	r20
    166e:	5f 93       	push	r21
    1670:	8f 93       	push	r24
    1672:	9f 93       	push	r25
	static uint16_t sigma = 0;
	uint16_t delta;
	
	// Once triggered, disable further comparator interrupt
	ACSR &= ~(1<<ACIE);		// safe - ACI flag will be cleared anyway before reenabling comparator interrupt
    1674:	43 98       	cbi	0x08, 3	; 8
	
	// Process heater delta-sigma modulator
	if (sigma >= HEATER_MAX_POWER)
    1676:	40 91 da 01 	lds	r20, 0x01DA
    167a:	50 91 db 01 	lds	r21, 0x01DB
    167e:	44 3f       	cpi	r20, 0xF4	; 244
    1680:	81 e0       	ldi	r24, 0x01	; 1
    1682:	58 07       	cpc	r21, r24
    1684:	30 f0       	brcs	.+12     	; 0x1692 <__vector_16+0x34>
	{
		PORTD |= (1<<PD_HEATER | 1<<PD_HEAT_INDIC);
    1686:	82 b3       	in	r24, 0x12	; 18
    1688:	80 63       	ori	r24, 0x30	; 48
    168a:	82 bb       	out	0x12, r24	; 18
		delta = -HEATER_MAX_POWER;	
    168c:	2c e0       	ldi	r18, 0x0C	; 12
    168e:	3e ef       	ldi	r19, 0xFE	; 254
    1690:	03 c0       	rjmp	.+6      	; 0x1698 <__vector_16+0x3a>
	}		
	else
	{
		PORTD &= ~(1<<PD_HEAT_INDIC);
    1692:	95 98       	cbi	0x12, 5	; 18
		delta = 0;
    1694:	20 e0       	ldi	r18, 0x00	; 0
    1696:	30 e0       	ldi	r19, 0x00	; 0
	}
	sigma += delta + heaterPower;	
    1698:	80 91 d1 01 	lds	r24, 0x01D1
    169c:	90 91 d2 01 	lds	r25, 0x01D2
    16a0:	84 0f       	add	r24, r20
    16a2:	95 1f       	adc	r25, r21
    16a4:	82 0f       	add	r24, r18
    16a6:	93 1f       	adc	r25, r19
    16a8:	90 93 db 01 	sts	0x01DB, r25
    16ac:	80 93 da 01 	sts	0x01DA, r24
	
	// Reprogram timer0
	TCNT0 = 256 - TRIAC_IMPULSE_TIME;		// Triac gate impulse time
    16b0:	86 ef       	ldi	r24, 0xF6	; 246
    16b2:	82 bf       	out	0x32, r24	; 50
	TIFR = (1<<TOV0);						// Clear interrupt flag - safe, write operation is used (not r-m-w)
    16b4:	81 e0       	ldi	r24, 0x01	; 1
    16b6:	88 bf       	out	0x38, r24	; 56
	// Modify state	
	p_state &= ~STATE_MASK;					// Start new state machine cycle
    16b8:	80 91 85 00 	lds	r24, 0x0085
    16bc:	80 7f       	andi	r24, 0xF0	; 240
	p_state ^= HALF_PERIOD_FLAG;			// Toggle flag
    16be:	80 58       	subi	r24, 0x80	; 128
    16c0:	80 93 85 00 	sts	0x0085, r24
	
}
    16c4:	9f 91       	pop	r25
    16c6:	8f 91       	pop	r24
    16c8:	5f 91       	pop	r21
    16ca:	4f 91       	pop	r20
    16cc:	3f 91       	pop	r19
    16ce:	2f 91       	pop	r18
    16d0:	0f 90       	pop	r0
    16d2:	0f be       	out	0x3f, r0	; 63
    16d4:	0f 90       	pop	r0
    16d6:	1f 90       	pop	r1
    16d8:	18 95       	reti

000016da <__vector_9>:
// Timer 0 ISR
// Used for heater and motor control
// Also used for detecting AC line sync missing
//-------------------------------------------------------//
ISR(TIMER0_OVF_vect)
{
    16da:	1f 92       	push	r1
    16dc:	0f 92       	push	r0
    16de:	0f b6       	in	r0, 0x3f	; 63
    16e0:	0f 92       	push	r0
    16e2:	11 24       	eor	r1, r1
    16e4:	2f 93       	push	r18
    16e6:	3f 93       	push	r19
    16e8:	4f 93       	push	r20
    16ea:	5f 93       	push	r21
    16ec:	6f 93       	push	r22
    16ee:	7f 93       	push	r23
    16f0:	8f 93       	push	r24
    16f2:	9f 93       	push	r25
    16f4:	af 93       	push	r26
    16f6:	bf 93       	push	r27
    16f8:	ef 93       	push	r30
    16fa:	ff 93       	push	r31
	uint8_t temp;
	
	switch(p_state & STATE_MASK)
    16fc:	80 91 85 00 	lds	r24, 0x0085
    1700:	8f 70       	andi	r24, 0x0F	; 15
    1702:	81 30       	cpi	r24, 0x01	; 1
    1704:	49 f0       	breq	.+18     	; 0x1718 <__vector_9+0x3e>
    1706:	28 f0       	brcs	.+10     	; 0x1712 <__vector_9+0x38>
    1708:	82 30       	cpi	r24, 0x02	; 2
    170a:	49 f0       	breq	.+18     	; 0x171e <__vector_9+0x44>
    170c:	83 30       	cpi	r24, 0x03	; 3
    170e:	69 f4       	brne	.+26     	; 0x172a <__vector_9+0x50>
    1710:	0b c0       	rjmp	.+22     	; 0x1728 <__vector_9+0x4e>
	{
		// TRIAC_IMPULSE_TIME finished
		case 0x00:
			// Turn off heater TRIAC
			PORTD &= ~(1<<PD_HEATER);
    1712:	94 98       	cbi	0x12, 4	; 18
			TCNT0 = 256 - (QUATER_PERIOD_TIME - TRIAC_IMPULSE_TIME);
    1714:	8c eb       	ldi	r24, 0xBC	; 188
    1716:	01 c0       	rjmp	.+2      	; 0x171a <__vector_9+0x40>
			break;
		// QUATER_PERIOD_TIME finished	
		case 0x01:	
			TCNT0 = 256 - (SYNC_IGNORE_TIME - QUATER_PERIOD_TIME);
    1718:	81 ed       	ldi	r24, 0xD1	; 209
    171a:	82 bf       	out	0x32, r24	; 50
			break;	
    171c:	06 c0       	rjmp	.+12     	; 0x172a <__vector_9+0x50>
		// SYNC_IGNORE_TIME finished	
		case 0x02:
			TCNT0 = 256 - SYNC_LOST_TIMEOUT;
    171e:	82 ec       	ldi	r24, 0xC2	; 194
    1720:	82 bf       	out	0x32, r24	; 50
			// Clear flag and enable interrupt from analog comparator
			ACSR = (1<<ACI | 1<<ACIE | 0<<ACIS1 | 0<<ACIS0);
    1722:	88 e1       	ldi	r24, 0x18	; 24
    1724:	88 b9       	out	0x08, r24	; 8
			break;
    1726:	01 c0       	rjmp	.+2      	; 0x172a <__vector_9+0x50>
		// SYNC_LOST_TIMEOUT finished
		case 0x03:
			// Error - sync is lost. It means that device has been disconnected from AC line.
			// Disable all power-consuming devices like LEDs and save user settings to EEPROM.
			exitPowerOff();
    1728:	56 d8       	rcall	.-3924   	; 0x7d6 <exitPowerOff>
			// Sync is not present - do nothing
			break;
	}	

	// Full period check
	if ((p_state & (HALF_PERIOD_FLAG | STATE_MASK)) == (HALF_PERIOD_FLAG | 0x01))
    172a:	80 91 85 00 	lds	r24, 0x0085
    172e:	8f 78       	andi	r24, 0x8F	; 143
    1730:	81 38       	cpi	r24, 0x81	; 129
    1732:	09 f0       	breq	.+2      	; 0x1736 <__vector_9+0x5c>
    1734:	81 c0       	rjmp	.+258    	; 0x1838 <__vector_9+0x15e>
	{
		// Quarter AC line period is done. Update motor controls.
		temp = PORTD;
    1736:	82 b3       	in	r24, 0x12	; 18
		temp &= ~(1<<PD_M1 | 1<<PD_M2);
    1738:	83 7f       	andi	r24, 0xF3	; 243
		if ( rollState & SKIP_CURRENT_MOTOR_CTRL )
    173a:	90 91 d0 01 	lds	r25, 0x01D0
    173e:	93 ff       	sbrs	r25, 3
    1740:	05 c0       	rjmp	.+10     	; 0x174c <__vector_9+0x72>
		{
			// Direction control changed. Skip current period to allow TRIACs fully close
			rollState &= ~SKIP_CURRENT_MOTOR_CTRL;
    1742:	97 7f       	andi	r25, 0xF7	; 247
    1744:	90 93 d0 01 	sts	0x01D0, r25
			PORTD = temp; 	
    1748:	82 bb       	out	0x12, r24	; 18
    174a:	76 c0       	rjmp	.+236    	; 0x1838 <__vector_9+0x15e>
		}
		else
		{
			// Apply direction control 
			if (rollState & ROLL_FWD)
    174c:	90 ff       	sbrs	r25, 0
    174e:	02 c0       	rjmp	.+4      	; 0x1754 <__vector_9+0x7a>
				temp |= (1<<PD_M1);
    1750:	84 60       	ori	r24, 0x04	; 4
    1752:	02 c0       	rjmp	.+4      	; 0x1758 <__vector_9+0x7e>
			else if (rollState & ROLL_REV)
    1754:	91 fd       	sbrc	r25, 1
				temp |= (1<<PD_M2);
    1756:	88 60       	ori	r24, 0x08	; 8
			PORTD = temp; 
    1758:	82 bb       	out	0x12, r24	; 18
// Function is called from Timer0 ISR only
//-------------------------------------------------------//
static inline void controlRolling()
{
	// Process cycle rolling
	switch(rollState & (ROLL_FWD | ROLL_REV | ROLL_CYCLE))
    175a:	40 91 d0 01 	lds	r20, 0x01D0
    175e:	84 2f       	mov	r24, r20
    1760:	87 70       	andi	r24, 0x07	; 7
    1762:	85 30       	cpi	r24, 0x05	; 5
    1764:	19 f0       	breq	.+6      	; 0x176c <__vector_9+0x92>
    1766:	86 30       	cpi	r24, 0x06	; 6
    1768:	e9 f5       	brne	.+122    	; 0x17e4 <__vector_9+0x10a>
    176a:	1d c0       	rjmp	.+58     	; 0x17a6 <__vector_9+0xcc>
// Test reaching of top point during cycle rolling
// Function is called from Timer0 ISR only
//-------------------------------------------------------//
static inline uint8_t reachedTopPoint(void)
{
	return (	(int16_t)(topPoint - rollPoint) <= 0 );
    176c:	80 91 d8 01 	lds	r24, 0x01D8
    1770:	90 91 d9 01 	lds	r25, 0x01D9
    1774:	20 91 d4 01 	lds	r18, 0x01D4
    1778:	30 91 d5 01 	lds	r19, 0x01D5
    177c:	82 1b       	sub	r24, r18
    177e:	93 0b       	sbc	r25, r19
{
	// Process cycle rolling
	switch(rollState & (ROLL_FWD | ROLL_REV | ROLL_CYCLE))
	{
		case (ROLL_FWD | ROLL_CYCLE):
			if (reachedTopPoint())
    1780:	18 16       	cp	r1, r24
    1782:	19 06       	cpc	r1, r25
    1784:	7c f1       	brlt	.+94     	; 0x17e4 <__vector_9+0x10a>
			{
				if (activeRollCycle >= p.rollCycleSet)	
    1786:	80 91 cf 01 	lds	r24, 0x01CF
    178a:	90 91 0d 02 	lds	r25, 0x020D
    178e:	89 17       	cp	r24, r25
    1790:	28 f0       	brcs	.+10     	; 0x179c <__vector_9+0xc2>
				{
					// DONE!
					rollState &= ~ROLL_CYCLE;
    1792:	4b 7f       	andi	r20, 0xFB	; 251
					rollState |= CYCLE_ROLL_DONE;
    1794:	40 61       	ori	r20, 0x10	; 16
    1796:	40 93 d0 01 	sts	0x01D0, r20
    179a:	24 c0       	rjmp	.+72     	; 0x17e4 <__vector_9+0x10a>
				}
				else
				{
					activeRollCycle++;
    179c:	8f 5f       	subi	r24, 0xFF	; 255
    179e:	80 93 cf 01 	sts	0x01CF, r24
					// Change dir	
					newDirReq = ROLL_REV;				
    17a2:	82 e0       	ldi	r24, 0x02	; 2
    17a4:	1d c0       	rjmp	.+58     	; 0x17e0 <__vector_9+0x106>
// Test reaching of bottom point during cycle rolling
// Function is called from Timer0 ISR only
//-------------------------------------------------------//
static inline uint8_t reachedBottomPoint(void)
{
	return (	(int16_t)(rollPoint - bottomPoint) <= 0 );
    17a6:	80 91 d4 01 	lds	r24, 0x01D4
    17aa:	90 91 d5 01 	lds	r25, 0x01D5
    17ae:	20 91 d6 01 	lds	r18, 0x01D6
    17b2:	30 91 d7 01 	lds	r19, 0x01D7
    17b6:	82 1b       	sub	r24, r18
    17b8:	93 0b       	sbc	r25, r19
				}
			}
			break;
		
		case (ROLL_REV | ROLL_CYCLE):	
			if (reachedBottomPoint())
    17ba:	18 16       	cp	r1, r24
    17bc:	19 06       	cpc	r1, r25
    17be:	94 f0       	brlt	.+36     	; 0x17e4 <__vector_9+0x10a>
			{
				if (activeRollCycle >= p.rollCycleSet)	
    17c0:	80 91 cf 01 	lds	r24, 0x01CF
    17c4:	90 91 0d 02 	lds	r25, 0x020D
    17c8:	89 17       	cp	r24, r25
    17ca:	30 f0       	brcs	.+12     	; 0x17d8 <__vector_9+0xfe>
				{
					// DONE!
					rollState &= ~ROLL_CYCLE;
    17cc:	84 2f       	mov	r24, r20
    17ce:	8b 7f       	andi	r24, 0xFB	; 251
					rollState |= CYCLE_ROLL_DONE;
    17d0:	80 61       	ori	r24, 0x10	; 16
    17d2:	80 93 d0 01 	sts	0x01D0, r24
    17d6:	06 c0       	rjmp	.+12     	; 0x17e4 <__vector_9+0x10a>
				}
				else
				{
					activeRollCycle++;
    17d8:	8f 5f       	subi	r24, 0xFF	; 255
    17da:	80 93 cf 01 	sts	0x01CF, r24
					// Change dir	
					newDirReq = ROLL_FWD;
    17de:	81 e0       	ldi	r24, 0x01	; 1
    17e0:	80 93 d3 01 	sts	0x01D3, r24
		default:
			break;
	}
	
	// Process direction change
	if ((rollState ^ newDirReq) & (ROLL_FWD | ROLL_REV))
    17e4:	20 91 d0 01 	lds	r18, 0x01D0
    17e8:	90 91 d3 01 	lds	r25, 0x01D3
    17ec:	89 2f       	mov	r24, r25
    17ee:	82 27       	eor	r24, r18
    17f0:	83 70       	andi	r24, 0x03	; 3
    17f2:	19 f0       	breq	.+6      	; 0x17fa <__vector_9+0x120>
	{
		// ROLL_DIR_CHANGED is used for sound beep
		rollState |= (SKIP_CURRENT_MOTOR_CTRL | ROLL_DIR_CHANGED);
    17f4:	28 62       	ori	r18, 0x28	; 40
    17f6:	20 93 d0 01 	sts	0x01D0, r18
	}
	
	rollState &= ~(ROLL_FWD | ROLL_REV);
    17fa:	80 91 d0 01 	lds	r24, 0x01D0
    17fe:	8c 7f       	andi	r24, 0xFC	; 252
	rollState |= newDirReq;
    1800:	89 2b       	or	r24, r25
	rollState &= dirChangedMask;
    1802:	90 91 84 00 	lds	r25, 0x0084
    1806:	89 23       	and	r24, r25
    1808:	80 93 d0 01 	sts	0x01D0, r24
	dirChangedMask = 0xFF;
    180c:	9f ef       	ldi	r25, 0xFF	; 255
    180e:	90 93 84 00 	sts	0x0084, r25
// Updates actual roll point depending upon direction
// Function is called from Timer0 ISR only
//-------------------------------------------------------//
static inline void updateRollPoint(void)
{	
	if (rollState & ROLL_FWD)
    1812:	80 ff       	sbrs	r24, 0
    1814:	06 c0       	rjmp	.+12     	; 0x1822 <__vector_9+0x148>
		rollPoint++;
    1816:	80 91 d4 01 	lds	r24, 0x01D4
    181a:	90 91 d5 01 	lds	r25, 0x01D5
    181e:	01 96       	adiw	r24, 0x01	; 1
    1820:	07 c0       	rjmp	.+14     	; 0x1830 <__vector_9+0x156>
	else if (rollState & ROLL_REV)
    1822:	81 ff       	sbrs	r24, 1
    1824:	09 c0       	rjmp	.+18     	; 0x1838 <__vector_9+0x15e>
		rollPoint--;	
    1826:	80 91 d4 01 	lds	r24, 0x01D4
    182a:	90 91 d5 01 	lds	r25, 0x01D5
    182e:	01 97       	sbiw	r24, 0x01	; 1
    1830:	90 93 d5 01 	sts	0x01D5, r25
    1834:	80 93 d4 01 	sts	0x01D4, r24
			controlRolling();
		}
	}
	
	
	if ((p_state & STATE_MASK)  != 0x0F)
    1838:	80 91 85 00 	lds	r24, 0x0085
    183c:	98 2f       	mov	r25, r24
    183e:	9f 70       	andi	r25, 0x0F	; 15
    1840:	9f 30       	cpi	r25, 0x0F	; 15
    1842:	19 f0       	breq	.+6      	; 0x184a <__vector_9+0x170>
		p_state++;
    1844:	8f 5f       	subi	r24, 0xFF	; 255
    1846:	80 93 85 00 	sts	0x0085, r24
}	
    184a:	ff 91       	pop	r31
    184c:	ef 91       	pop	r30
    184e:	bf 91       	pop	r27
    1850:	af 91       	pop	r26
    1852:	9f 91       	pop	r25
    1854:	8f 91       	pop	r24
    1856:	7f 91       	pop	r23
    1858:	6f 91       	pop	r22
    185a:	5f 91       	pop	r21
    185c:	4f 91       	pop	r20
    185e:	3f 91       	pop	r19
    1860:	2f 91       	pop	r18
    1862:	0f 90       	pop	r0
    1864:	0f be       	out	0x3f, r0	; 63
    1866:	0f 90       	pop	r0
    1868:	1f 90       	pop	r1
    186a:	18 95       	reti

0000186c <processSoftTimer8b>:
 
 
 
 
 void processSoftTimer8b(SoftTimer8b_t *tmr)
 {
    186c:	fc 01       	movw	r30, r24
	 uint8_t newTimerVal;

	 if (!tmr->Enabled)
    186e:	90 81       	ld	r25, Z
    1870:	90 ff       	sbrs	r25, 0
    1872:	27 c0       	rjmp	.+78     	; 0x18c2 <processSoftTimer8b+0x56>
		return;
	 
	 tmr->FA_EQ = 0;
	 tmr->FA_GE = 0;
	 tmr->FTop = 0;
    1874:	97 7e       	andi	r25, 0xE7	; 231
    1876:	9f 7d       	andi	r25, 0xDF	; 223
    1878:	90 83       	st	Z, r25
	 
	 if (tmr->Timer >= tmr->Top)
    187a:	81 81       	ldd	r24, Z+1	; 0x01
    187c:	22 81       	ldd	r18, Z+2	; 0x02
    187e:	82 17       	cp	r24, r18
    1880:	50 f0       	brcs	.+20     	; 0x1896 <processSoftTimer8b+0x2a>
	 {
		 if (tmr->RunOnce)
    1882:	91 ff       	sbrs	r25, 1
    1884:	02 c0       	rjmp	.+4      	; 0x188a <processSoftTimer8b+0x1e>
		 {
			 tmr->Enabled = 0;
    1886:	9e 7f       	andi	r25, 0xFE	; 254
    1888:	90 83       	st	Z, r25
		 }
		 tmr->FTop = 1;
    188a:	90 81       	ld	r25, Z
		 tmr->FOvfl = 1;
    188c:	90 62       	ori	r25, 0x20	; 32
    188e:	90 64       	ori	r25, 0x40	; 64
    1890:	90 83       	st	Z, r25
		 newTimerVal = 0;
    1892:	20 e0       	ldi	r18, 0x00	; 0
    1894:	02 c0       	rjmp	.+4      	; 0x189a <processSoftTimer8b+0x2e>
	 }
	 else
	 {
		 newTimerVal = tmr->Timer + 1;
    1896:	28 2f       	mov	r18, r24
    1898:	2f 5f       	subi	r18, 0xFF	; 255
	 }
	 
	 if (tmr->Timer == tmr->CompA)
    189a:	93 81       	ldd	r25, Z+3	; 0x03
    189c:	89 13       	cpse	r24, r25
    189e:	0b c0       	rjmp	.+22     	; 0x18b6 <processSoftTimer8b+0x4a>
	 {
		 tmr->FA_EQ = 1;
    18a0:	80 81       	ld	r24, Z
		 tmr->FA_GE = 1;
    18a2:	88 60       	ori	r24, 0x08	; 8
    18a4:	80 61       	ori	r24, 0x10	; 16
		 tmr->FA_TGL = !tmr->FA_TGL;
    18a6:	82 fb       	bst	r24, 2
    18a8:	99 27       	eor	r25, r25
    18aa:	90 f9       	bld	r25, 0
    18ac:	31 e0       	ldi	r19, 0x01	; 1
    18ae:	93 27       	eor	r25, r19
    18b0:	90 fb       	bst	r25, 0
    18b2:	82 f9       	bld	r24, 2
    18b4:	04 c0       	rjmp	.+8      	; 0x18be <processSoftTimer8b+0x52>
	 }
	 else if (tmr->Timer >= tmr->CompA)
    18b6:	89 17       	cp	r24, r25
    18b8:	18 f0       	brcs	.+6      	; 0x18c0 <processSoftTimer8b+0x54>
	 {
		 tmr->FA_GE = 1;
    18ba:	80 81       	ld	r24, Z
    18bc:	80 61       	ori	r24, 0x10	; 16
    18be:	80 83       	st	Z, r24
	 }
	 
	 tmr->Timer = newTimerVal; 
    18c0:	21 83       	std	Z+1, r18	; 0x01
    18c2:	08 95       	ret

000018c4 <processSystemTimers>:
// Main function for system time processing
// Updates global system timers flags
//-------------------------------------------------------//
void processSystemTimers(void)
{
	sys_timers_flags = 0x00;
    18c4:	12 b8       	out	0x02, r1	; 2
	
	// Process Celsius counter
	if (--sys_timers.celsius_upd_counter == 0)
    18c6:	80 91 86 00 	lds	r24, 0x0086
    18ca:	81 50       	subi	r24, 0x01	; 1
    18cc:	80 93 86 00 	sts	0x0086, r24
    18d0:	81 11       	cpse	r24, r1
    18d2:	0f c0       	rjmp	.+30     	; 0x18f2 <processSystemTimers+0x2e>
	{
		sys_timers.celsius_upd_counter = CELSIUS_UDPATE_INTERVAL;
    18d4:	84 e0       	ldi	r24, 0x04	; 4
    18d6:	80 93 86 00 	sts	0x0086, r24
		sys_timers_flags |= EXPIRED_CELSIUS;
    18da:	10 9a       	sbi	0x02, 0	; 2
		
		// Process PID update counter
		if (--sys_timers.pid_update_counter == 0)
    18dc:	80 91 8b 00 	lds	r24, 0x008B
    18e0:	81 50       	subi	r24, 0x01	; 1
    18e2:	80 93 8b 00 	sts	0x008B, r24
    18e6:	81 11       	cpse	r24, r1
    18e8:	04 c0       	rjmp	.+8      	; 0x18f2 <processSystemTimers+0x2e>
		{
			sys_timers.pid_update_counter = PID_UPDATE_INTERVAL;
    18ea:	84 e1       	ldi	r24, 0x14	; 20
    18ec:	80 93 8b 00 	sts	0x008B, r24
			sys_timers_flags |= UPDATE_PID;
    18f0:	16 9a       	sbi	0x02, 6	; 2
		}
	}
	
	// Process log counter
	if (--sys_timers.log_counter == 0)
    18f2:	80 91 8a 00 	lds	r24, 0x008A
    18f6:	81 50       	subi	r24, 0x01	; 1
    18f8:	19 f0       	breq	.+6      	; 0x1900 <processSystemTimers+0x3c>
    18fa:	80 93 8a 00 	sts	0x008A, r24
    18fe:	04 c0       	rjmp	.+8      	; 0x1908 <processSystemTimers+0x44>
	{
		sys_timers.log_counter = LOG_INTERVAL;
    1900:	82 e0       	ldi	r24, 0x02	; 2
    1902:	80 93 8a 00 	sts	0x008A, r24
		sys_timers_flags |= EXPIRED_LOG;
    1906:	15 9a       	sbi	0x02, 5	; 2
	}
	
	// Process 10 seconds counter
	if (--sys_timers.counter_10sec == 0)
    1908:	80 91 87 00 	lds	r24, 0x0087
    190c:	81 50       	subi	r24, 0x01	; 1
    190e:	80 93 87 00 	sts	0x0087, r24
    1912:	81 11       	cpse	r24, r1
    1914:	27 c0       	rjmp	.+78     	; 0x1964 <processSystemTimers+0xa0>
	{
		sys_timers.counter_10sec = COUNTER_10SEC_INTERVAL;
    1916:	88 ec       	ldi	r24, 0xC8	; 200
    1918:	80 93 87 00 	sts	0x0087, r24
		sys_timers_flags |= EXPIRED_10SEC;
    191c:	11 9a       	sbi	0x02, 1	; 2
		
		// Process 1 minute counter
		if (--sys_timers.counter_1min == 0)
    191e:	80 91 88 00 	lds	r24, 0x0088
    1922:	81 50       	subi	r24, 0x01	; 1
    1924:	80 93 88 00 	sts	0x0088, r24
    1928:	81 11       	cpse	r24, r1
    192a:	1c c0       	rjmp	.+56     	; 0x1964 <processSystemTimers+0xa0>
		{
			sys_timers.counter_1min = COUNTER_1MIN_INTERVAL;
    192c:	86 e0       	ldi	r24, 0x06	; 6
    192e:	80 93 88 00 	sts	0x0088, r24
			sys_timers_flags |= EXPIRED_1MIN;
    1932:	12 9a       	sbi	0x02, 2	; 2
			
			// Process auto power off counter
			if (sys_timers.poff_counter != MAX_POWEROFF_TIMEOUT - 1)
    1934:	80 91 89 00 	lds	r24, 0x0089
    1938:	8e 35       	cpi	r24, 0x5E	; 94
    193a:	19 f0       	breq	.+6      	; 0x1942 <processSystemTimers+0x7e>
				sys_timers.poff_counter++;
    193c:	8f 5f       	subi	r24, 0xFF	; 255
    193e:	80 93 89 00 	sts	0x0089, r24
			if (sys_timers.poff_counter == p.power_off_timeout - 1)
    1942:	40 91 89 00 	lds	r20, 0x0089
    1946:	24 2f       	mov	r18, r20
    1948:	30 e0       	ldi	r19, 0x00	; 0
    194a:	80 91 0f 02 	lds	r24, 0x020F
    194e:	90 e0       	ldi	r25, 0x00	; 0
    1950:	01 97       	sbiw	r24, 0x01	; 1
    1952:	28 17       	cp	r18, r24
    1954:	39 07       	cpc	r19, r25
    1956:	09 f4       	brne	.+2      	; 0x195a <processSystemTimers+0x96>
				sys_timers_flags |= AUTOPOFF_SOON;
    1958:	13 9a       	sbi	0x02, 3	; 2
			if (sys_timers.poff_counter == p.power_off_timeout)
    195a:	80 91 0f 02 	lds	r24, 0x020F
    195e:	48 13       	cpse	r20, r24
    1960:	01 c0       	rjmp	.+2      	; 0x1964 <processSystemTimers+0xa0>
				sys_timers_flags |= AUTOPOFF_EXPIRED;			
    1962:	14 9a       	sbi	0x02, 4	; 2
    1964:	08 95       	ret

00001966 <resetAutoPowerOffCounter>:
//-------------------------------------------------------//
// Resets auto power off timer
//-------------------------------------------------------//
void resetAutoPowerOffCounter(void)
{
	sys_timers.poff_counter = 0;
    1966:	10 92 89 00 	sts	0x0089, r1
    196a:	08 95       	ret

0000196c <__vector_3>:
//-------------------------------------------------------//
// Timer 2 ISR - systick
// Period is 1ms @ 16MHz
//-------------------------------------------------------//
ISR(TIMER2_COMP_vect)
{	
    196c:	1f 92       	push	r1
    196e:	0f 92       	push	r0
    1970:	0f b6       	in	r0, 0x3f	; 63
    1972:	0f 92       	push	r0
    1974:	11 24       	eor	r1, r1
    1976:	2f 93       	push	r18
    1978:	3f 93       	push	r19
    197a:	4f 93       	push	r20
    197c:	5f 93       	push	r21
    197e:	6f 93       	push	r22
    1980:	7f 93       	push	r23
    1982:	8f 93       	push	r24
    1984:	9f 93       	push	r25
    1986:	af 93       	push	r26
    1988:	bf 93       	push	r27
    198a:	ef 93       	push	r30
    198c:	ff 93       	push	r31
	// Manage LED indicator
	processLedIndicator();
    198e:	ad d7       	rcall	.+3930   	; 0x28ea <__data_load_end+0xbca>
static inline void Sound_Process(void)
{
	static uint16_t note_time_counter;
	static tone_t tone;
	static const tone_t* p_melody;
	uint8_t new_state = sound_state;
    1990:	20 91 dc 01 	lds	r18, 0x01DC
	
	switch (sound_state)
    1994:	22 30       	cpi	r18, 0x02	; 2
    1996:	99 f1       	breq	.+102    	; 0x19fe <__vector_3+0x92>
    1998:	20 f4       	brcc	.+8      	; 0x19a2 <__vector_3+0x36>
    199a:	21 30       	cpi	r18, 0x01	; 1
    199c:	09 f0       	breq	.+2      	; 0x19a0 <__vector_3+0x34>
    199e:	50 c0       	rjmp	.+160    	; 0x1a40 <__vector_3+0xd4>
    19a0:	0f c0       	rjmp	.+30     	; 0x19c0 <__vector_3+0x54>
    19a2:	23 30       	cpi	r18, 0x03	; 3
    19a4:	21 f0       	breq	.+8      	; 0x19ae <__vector_3+0x42>
    19a6:	25 30       	cpi	r18, 0x05	; 5
    19a8:	09 f0       	breq	.+2      	; 0x19ac <__vector_3+0x40>
    19aa:	4a c0       	rjmp	.+148    	; 0x1a40 <__vector_3+0xd4>
    19ac:	15 c0       	rjmp	.+42     	; 0x19d8 <__vector_3+0x6c>
	{
		case SOUND_START_NEW:
			p_melody = new_melody;
    19ae:	80 91 dd 01 	lds	r24, 0x01DD
    19b2:	90 91 de 01 	lds	r25, 0x01DE
    19b6:	90 93 e0 01 	sts	0x01E0, r25
    19ba:	80 93 df 01 	sts	0x01DF, r24
    19be:	44 c0       	rjmp	.+136    	; 0x1a48 <__vector_3+0xdc>
			new_state = SOUND_APPLY_TONE;
			p_melody = NULL;				// Beeper mode
			break;
		#endif
		case SOUND_PLAY:
			if (--note_time_counter == 0)
    19c0:	80 91 e1 01 	lds	r24, 0x01E1
    19c4:	90 91 e2 01 	lds	r25, 0x01E2
    19c8:	01 97       	sbiw	r24, 0x01	; 1
    19ca:	90 93 e2 01 	sts	0x01E2, r25
    19ce:	80 93 e1 01 	sts	0x01E1, r24
    19d2:	89 2b       	or	r24, r25
    19d4:	c9 f1       	breq	.+114    	; 0x1a48 <__vector_3+0xdc>
    19d6:	3b c0       	rjmp	.+118    	; 0x1a4e <__vector_3+0xe2>
		case SOUND_GET_NEXT_TONE:
			#ifdef USE_BEEP_FUNCTION
			if (p_melody != NULL)			// If driver is playing melody, not beeping
			{
				#endif
				if (!eeprom_is_ready())		// If EEPROM is busy and Sound_Process() is called from an ISR, deadly block may appear
    19d8:	e1 99       	sbic	0x1c, 1	; 28
    19da:	3b c0       	rjmp	.+118    	; 0x1a52 <__vector_3+0xe6>
					return;
				eeprom_read_block(&tone,p_melody++,sizeof(tone_t));
    19dc:	60 91 df 01 	lds	r22, 0x01DF
    19e0:	70 91 e0 01 	lds	r23, 0x01E0
    19e4:	cb 01       	movw	r24, r22
    19e6:	02 96       	adiw	r24, 0x02	; 2
    19e8:	90 93 e0 01 	sts	0x01E0, r25
    19ec:	80 93 df 01 	sts	0x01DF, r24
    19f0:	42 e0       	ldi	r20, 0x02	; 2
    19f2:	50 e0       	ldi	r21, 0x00	; 0
    19f4:	83 ee       	ldi	r24, 0xE3	; 227
    19f6:	91 e0       	ldi	r25, 0x01	; 1
    19f8:	e8 d0       	rcall	.+464    	; 0x1bca <__eerd_block_m8>
				new_state = SOUND_APPLY_TONE;
    19fa:	22 e0       	ldi	r18, 0x02	; 2
    19fc:	28 c0       	rjmp	.+80     	; 0x1a4e <__vector_3+0xe2>
				new_state = SOUND_OFF;
			}
			#endif
			break;
		case SOUND_APPLY_TONE:
			if (tone.duration == 0)
    19fe:	80 91 e4 01 	lds	r24, 0x01E4
    1a02:	88 23       	and	r24, r24
    1a04:	19 f1       	breq	.+70     	; 0x1a4c <__vector_3+0xe0>
				new_state = SOUND_OFF;
			}
			else
			{
				// Setup period
				if (tone.tone_period != 0)
    1a06:	80 91 e3 01 	lds	r24, 0x01E3
    1a0a:	88 23       	and	r24, r24
    1a0c:	49 f0       	breq	.+18     	; 0x1a20 <__vector_3+0xb4>
				{
					// Timer runs at 250kHz (T = 4us), tone_period is set in units of 8us
					// Output toggles on compare match
					OCR1A = tone.tone_period - 1;
    1a0e:	90 e0       	ldi	r25, 0x00	; 0
    1a10:	01 97       	sbiw	r24, 0x01	; 1
    1a12:	9b bd       	out	0x2b, r25	; 43
    1a14:	8a bd       	out	0x2a, r24	; 42
					TCNT1 = 0;
    1a16:	1d bc       	out	0x2d, r1	; 45
    1a18:	1c bc       	out	0x2c, r1	; 44
					// Toggle OCR1A on compare match
					TCCR1A |= (1<<COM1A0);
    1a1a:	8f b5       	in	r24, 0x2f	; 47
    1a1c:	80 64       	ori	r24, 0x40	; 64
    1a1e:	02 c0       	rjmp	.+4      	; 0x1a24 <__vector_3+0xb8>
				}
				else
				{
					// Disable OCR1A output
					TCCR1A &= ~(1<<COM1A0 | 1<<COM1A1);
    1a20:	8f b5       	in	r24, 0x2f	; 47
    1a22:	8f 73       	andi	r24, 0x3F	; 63
    1a24:	8f bd       	out	0x2f, r24	; 47
				}
				note_time_counter = (uint16_t)tone.duration * TONE_DURATION_SCALE - 2;
    1a26:	80 91 e4 01 	lds	r24, 0x01E4
    1a2a:	2a e0       	ldi	r18, 0x0A	; 10
    1a2c:	82 9f       	mul	r24, r18
    1a2e:	c0 01       	movw	r24, r0
    1a30:	11 24       	eor	r1, r1
    1a32:	02 97       	sbiw	r24, 0x02	; 2
    1a34:	90 93 e2 01 	sts	0x01E2, r25
    1a38:	80 93 e1 01 	sts	0x01E1, r24
				new_state = SOUND_PLAY;
    1a3c:	21 e0       	ldi	r18, 0x01	; 1
    1a3e:	07 c0       	rjmp	.+14     	; 0x1a4e <__vector_3+0xe2>
			}
			break;
			default:
			// Disable OCR1A output
			TCCR1A &= ~(1<<COM1A0 | 1<<COM1A1);
    1a40:	8f b5       	in	r24, 0x2f	; 47
    1a42:	8f 73       	andi	r24, 0x3F	; 63
    1a44:	8f bd       	out	0x2f, r24	; 47
    1a46:	03 c0       	rjmp	.+6      	; 0x1a4e <__vector_3+0xe2>
			p_melody = NULL;				// Beeper mode
			break;
		#endif
		case SOUND_PLAY:
			if (--note_time_counter == 0)
				new_state = SOUND_GET_NEXT_TONE;
    1a48:	25 e0       	ldi	r18, 0x05	; 5
    1a4a:	01 c0       	rjmp	.+2      	; 0x1a4e <__vector_3+0xe2>
			break;
		case SOUND_APPLY_TONE:
			if (tone.duration == 0)
			{
				// Finished
				new_state = SOUND_OFF;
    1a4c:	20 e0       	ldi	r18, 0x00	; 0
			default:
			// Disable OCR1A output
			TCCR1A &= ~(1<<COM1A0 | 1<<COM1A1);
			break;
	}
	sound_state = new_state;
    1a4e:	20 93 dc 01 	sts	0x01DC, r18
	
	// Do sound stuff
	Sound_Process();
	
	// Process menu update timer
	processSoftTimer8b(&menuUpdateTimer);	
    1a52:	8c e8       	ldi	r24, 0x8C	; 140
    1a54:	90 e0       	ldi	r25, 0x00	; 0
    1a56:	0a df       	rcall	.-492    	; 0x186c <processSoftTimer8b>
	
	// Start ADC conversion 
	// Safe to use read-modify-write - this ISR is the only source of ADC conversion start
	ADCSRA |= (1<<ADSC);
    1a58:	36 9a       	sbi	0x06, 6	; 6
}
    1a5a:	ff 91       	pop	r31
    1a5c:	ef 91       	pop	r30
    1a5e:	bf 91       	pop	r27
    1a60:	af 91       	pop	r26
    1a62:	9f 91       	pop	r25
    1a64:	8f 91       	pop	r24
    1a66:	7f 91       	pop	r23
    1a68:	6f 91       	pop	r22
    1a6a:	5f 91       	pop	r21
    1a6c:	4f 91       	pop	r20
    1a6e:	3f 91       	pop	r19
    1a70:	2f 91       	pop	r18
    1a72:	0f 90       	pop	r0
    1a74:	0f be       	out	0x3f, r0	; 63
    1a76:	0f 90       	pop	r0
    1a78:	1f 90       	pop	r1
    1a7a:	18 95       	reti

00001a7c <Sound_Play>:
//-------------------------------------------------------//
// Starts playing a melody from EEPROM
//-------------------------------------------------------//
void Sound_Play(const tone_t* p_melody)
{
	if ((p.sound_enable) || (SoundEnable_override))
    1a7c:	20 91 0e 02 	lds	r18, 0x020E
    1a80:	21 11       	cpse	r18, r1
    1a82:	04 c0       	rjmp	.+8      	; 0x1a8c <Sound_Play+0x10>
    1a84:	20 91 e5 01 	lds	r18, 0x01E5
    1a88:	22 23       	and	r18, r18
    1a8a:	49 f0       	breq	.+18     	; 0x1a9e <Sound_Play+0x22>
	{
		new_melody =  p_melody;
    1a8c:	90 93 de 01 	sts	0x01DE, r25
    1a90:	80 93 dd 01 	sts	0x01DD, r24
		sound_state = SOUND_START_NEW;		// No need to disable interrupts - atomic operation
    1a94:	83 e0       	ldi	r24, 0x03	; 3
    1a96:	80 93 dc 01 	sts	0x01DC, r24
		SoundEnable_override = 0;
    1a9a:	10 92 e5 01 	sts	0x01E5, r1
    1a9e:	08 95       	ret

00001aa0 <Sound_OverrideDisable>:
// Provides a way to inform about critical errors even when 
// sound is disabled in menu
//-------------------------------------------------------//
void Sound_OverrideDisable(void)
{
	SoundEnable_override = 1;
    1aa0:	81 e0       	ldi	r24, 0x01	; 1
    1aa2:	80 93 e5 01 	sts	0x01E5, r24
    1aa6:	08 95       	ret

00001aa8 <USART_send>:
// Blocks until transmit is complete
//-------------------------------------------------------//
void USART_send( uint8_t data )
{
	//  Wait for empty transmit buffer 
	while ( !( UCSRA & (1<<UDRE)) );
    1aa8:	5d 9b       	sbis	0x0b, 5	; 11
    1aaa:	fe cf       	rjmp	.-4      	; 0x1aa8 <USART_send>
	//  Put data into buffer, sends the data
	UDR = data;
    1aac:	8c b9       	out	0x0c, r24	; 12
    1aae:	08 95       	ret

00001ab0 <USART_sendstr>:
// Sends a null-terminated char string over UART
// null-terminating symbol is not transmitted
// Blocks until transmit is complete
//-------------------------------------------------------//
void USART_sendstr(char* str)
{
    1ab0:	cf 93       	push	r28
    1ab2:	df 93       	push	r29
    1ab4:	ec 01       	movw	r28, r24
	while (*str)
    1ab6:	01 c0       	rjmp	.+2      	; 0x1aba <USART_sendstr+0xa>
	{
		USART_send(*str++);
    1ab8:	f7 df       	rcall	.-18     	; 0x1aa8 <USART_send>
// null-terminating symbol is not transmitted
// Blocks until transmit is complete
//-------------------------------------------------------//
void USART_sendstr(char* str)
{
	while (*str)
    1aba:	89 91       	ld	r24, Y+
    1abc:	81 11       	cpse	r24, r1
    1abe:	fc cf       	rjmp	.-8      	; 0x1ab8 <USART_sendstr+0x8>
	{
		USART_send(*str++);
	}
}
    1ac0:	df 91       	pop	r29
    1ac2:	cf 91       	pop	r28
    1ac4:	08 95       	ret

00001ac6 <logU16p>:
//-------------------------------------------------------//
// Function to log uint16_t type data
//-------------------------------------------------------//
void logU16p(uint16_t val)
{
	u16toa_align_right(val,str,6);
    1ac6:	46 e0       	ldi	r20, 0x06	; 6
    1ac8:	66 ee       	ldi	r22, 0xE6	; 230
    1aca:	71 e0       	ldi	r23, 0x01	; 1
    1acc:	12 db       	rcall	.-2524   	; 0x10f2 <u16toa_align_right>
	USART_sendstr(str);
    1ace:	86 ee       	ldi	r24, 0xE6	; 230
    1ad0:	91 e0       	ldi	r25, 0x01	; 1
    1ad2:	ee cf       	rjmp	.-36     	; 0x1ab0 <USART_sendstr>

00001ad4 <logI32p>:
//-------------------------------------------------------//
// Function to log int32_t type data
//-------------------------------------------------------//
void logI32p(int32_t val)
{
	i32toa_align_right(val,str,12);
    1ad4:	2c e0       	ldi	r18, 0x0C	; 12
    1ad6:	46 ee       	ldi	r20, 0xE6	; 230
    1ad8:	51 e0       	ldi	r21, 0x01	; 1
    1ada:	be da       	rcall	.-2692   	; 0x1058 <i32toa_align_right>
	USART_sendstr(str);
    1adc:	86 ee       	ldi	r24, 0xE6	; 230
    1ade:	91 e0       	ldi	r25, 0x01	; 1
    1ae0:	e7 cf       	rjmp	.-50     	; 0x1ab0 <USART_sendstr>

00001ae2 <__udivmodqi4>:
    1ae2:	99 1b       	sub	r25, r25
    1ae4:	79 e0       	ldi	r23, 0x09	; 9
    1ae6:	04 c0       	rjmp	.+8      	; 0x1af0 <__udivmodqi4_ep>

00001ae8 <__udivmodqi4_loop>:
    1ae8:	99 1f       	adc	r25, r25
    1aea:	96 17       	cp	r25, r22
    1aec:	08 f0       	brcs	.+2      	; 0x1af0 <__udivmodqi4_ep>
    1aee:	96 1b       	sub	r25, r22

00001af0 <__udivmodqi4_ep>:
    1af0:	88 1f       	adc	r24, r24
    1af2:	7a 95       	dec	r23
    1af4:	c9 f7       	brne	.-14     	; 0x1ae8 <__udivmodqi4_loop>
    1af6:	80 95       	com	r24
    1af8:	08 95       	ret

00001afa <__divmodsi4>:
    1afa:	05 2e       	mov	r0, r21
    1afc:	97 fb       	bst	r25, 7
    1afe:	16 f4       	brtc	.+4      	; 0x1b04 <__divmodsi4+0xa>
    1b00:	00 94       	com	r0
    1b02:	06 d0       	rcall	.+12     	; 0x1b10 <__divmodsi4_neg1>
    1b04:	57 fd       	sbrc	r21, 7
    1b06:	0c d0       	rcall	.+24     	; 0x1b20 <__divmodsi4_neg2>
    1b08:	35 d0       	rcall	.+106    	; 0x1b74 <__udivmodsi4>
    1b0a:	07 fc       	sbrc	r0, 7
    1b0c:	09 d0       	rcall	.+18     	; 0x1b20 <__divmodsi4_neg2>
    1b0e:	7e f4       	brtc	.+30     	; 0x1b2e <__divmodsi4_exit>

00001b10 <__divmodsi4_neg1>:
    1b10:	90 95       	com	r25
    1b12:	80 95       	com	r24
    1b14:	70 95       	com	r23
    1b16:	61 95       	neg	r22
    1b18:	7f 4f       	sbci	r23, 0xFF	; 255
    1b1a:	8f 4f       	sbci	r24, 0xFF	; 255
    1b1c:	9f 4f       	sbci	r25, 0xFF	; 255
    1b1e:	08 95       	ret

00001b20 <__divmodsi4_neg2>:
    1b20:	50 95       	com	r21
    1b22:	40 95       	com	r20
    1b24:	30 95       	com	r19
    1b26:	21 95       	neg	r18
    1b28:	3f 4f       	sbci	r19, 0xFF	; 255
    1b2a:	4f 4f       	sbci	r20, 0xFF	; 255
    1b2c:	5f 4f       	sbci	r21, 0xFF	; 255

00001b2e <__divmodsi4_exit>:
    1b2e:	08 95       	ret

00001b30 <__mulhisi3>:
    1b30:	05 d0       	rcall	.+10     	; 0x1b3c <__umulhisi3>
    1b32:	33 23       	and	r19, r19
    1b34:	12 f4       	brpl	.+4      	; 0x1b3a <__mulhisi3+0xa>
    1b36:	8a 1b       	sub	r24, r26
    1b38:	9b 0b       	sbc	r25, r27
    1b3a:	0d c0       	rjmp	.+26     	; 0x1b56 <__usmulhisi3_tail>

00001b3c <__umulhisi3>:
    1b3c:	a2 9f       	mul	r26, r18
    1b3e:	b0 01       	movw	r22, r0
    1b40:	b3 9f       	mul	r27, r19
    1b42:	c0 01       	movw	r24, r0
    1b44:	a3 9f       	mul	r26, r19
    1b46:	01 d0       	rcall	.+2      	; 0x1b4a <__umulhisi3+0xe>
    1b48:	b2 9f       	mul	r27, r18
    1b4a:	70 0d       	add	r23, r0
    1b4c:	81 1d       	adc	r24, r1
    1b4e:	11 24       	eor	r1, r1
    1b50:	91 1d       	adc	r25, r1
    1b52:	08 95       	ret

00001b54 <__usmulhisi3>:
    1b54:	f3 df       	rcall	.-26     	; 0x1b3c <__umulhisi3>

00001b56 <__usmulhisi3_tail>:
    1b56:	b7 ff       	sbrs	r27, 7
    1b58:	08 95       	ret
    1b5a:	82 1b       	sub	r24, r18
    1b5c:	93 0b       	sbc	r25, r19
    1b5e:	08 95       	ret

00001b60 <__muluhisi3>:
    1b60:	ed df       	rcall	.-38     	; 0x1b3c <__umulhisi3>
    1b62:	a5 9f       	mul	r26, r21
    1b64:	90 0d       	add	r25, r0
    1b66:	b4 9f       	mul	r27, r20
    1b68:	90 0d       	add	r25, r0
    1b6a:	a4 9f       	mul	r26, r20
    1b6c:	80 0d       	add	r24, r0
    1b6e:	91 1d       	adc	r25, r1
    1b70:	11 24       	eor	r1, r1
    1b72:	08 95       	ret

00001b74 <__udivmodsi4>:
    1b74:	a1 e2       	ldi	r26, 0x21	; 33
    1b76:	1a 2e       	mov	r1, r26
    1b78:	aa 1b       	sub	r26, r26
    1b7a:	bb 1b       	sub	r27, r27
    1b7c:	fd 01       	movw	r30, r26
    1b7e:	0d c0       	rjmp	.+26     	; 0x1b9a <__udivmodsi4_ep>

00001b80 <__udivmodsi4_loop>:
    1b80:	aa 1f       	adc	r26, r26
    1b82:	bb 1f       	adc	r27, r27
    1b84:	ee 1f       	adc	r30, r30
    1b86:	ff 1f       	adc	r31, r31
    1b88:	a2 17       	cp	r26, r18
    1b8a:	b3 07       	cpc	r27, r19
    1b8c:	e4 07       	cpc	r30, r20
    1b8e:	f5 07       	cpc	r31, r21
    1b90:	20 f0       	brcs	.+8      	; 0x1b9a <__udivmodsi4_ep>
    1b92:	a2 1b       	sub	r26, r18
    1b94:	b3 0b       	sbc	r27, r19
    1b96:	e4 0b       	sbc	r30, r20
    1b98:	f5 0b       	sbc	r31, r21

00001b9a <__udivmodsi4_ep>:
    1b9a:	66 1f       	adc	r22, r22
    1b9c:	77 1f       	adc	r23, r23
    1b9e:	88 1f       	adc	r24, r24
    1ba0:	99 1f       	adc	r25, r25
    1ba2:	1a 94       	dec	r1
    1ba4:	69 f7       	brne	.-38     	; 0x1b80 <__udivmodsi4_loop>
    1ba6:	60 95       	com	r22
    1ba8:	70 95       	com	r23
    1baa:	80 95       	com	r24
    1bac:	90 95       	com	r25
    1bae:	9b 01       	movw	r18, r22
    1bb0:	ac 01       	movw	r20, r24
    1bb2:	bd 01       	movw	r22, r26
    1bb4:	cf 01       	movw	r24, r30
    1bb6:	08 95       	ret

00001bb8 <memcpy_P>:
    1bb8:	fb 01       	movw	r30, r22
    1bba:	dc 01       	movw	r26, r24
    1bbc:	02 c0       	rjmp	.+4      	; 0x1bc2 <memcpy_P+0xa>
    1bbe:	05 90       	lpm	r0, Z+
    1bc0:	0d 92       	st	X+, r0
    1bc2:	41 50       	subi	r20, 0x01	; 1
    1bc4:	50 40       	sbci	r21, 0x00	; 0
    1bc6:	d8 f7       	brcc	.-10     	; 0x1bbe <memcpy_P+0x6>
    1bc8:	08 95       	ret

00001bca <__eerd_block_m8>:
    1bca:	dc 01       	movw	r26, r24
    1bcc:	cb 01       	movw	r24, r22

00001bce <__eerd_blraw_m8>:
    1bce:	fc 01       	movw	r30, r24
    1bd0:	e1 99       	sbic	0x1c, 1	; 28
    1bd2:	fe cf       	rjmp	.-4      	; 0x1bd0 <__eerd_blraw_m8+0x2>
    1bd4:	06 c0       	rjmp	.+12     	; 0x1be2 <__eerd_blraw_m8+0x14>
    1bd6:	ff bb       	out	0x1f, r31	; 31
    1bd8:	ee bb       	out	0x1e, r30	; 30
    1bda:	e0 9a       	sbi	0x1c, 0	; 28
    1bdc:	31 96       	adiw	r30, 0x01	; 1
    1bde:	0d b2       	in	r0, 0x1d	; 29
    1be0:	0d 92       	st	X+, r0
    1be2:	41 50       	subi	r20, 0x01	; 1
    1be4:	50 40       	sbci	r21, 0x00	; 0
    1be6:	b8 f7       	brcc	.-18     	; 0x1bd6 <__eerd_blraw_m8+0x8>
    1be8:	08 95       	ret

00001bea <__eerd_byte_m8>:
    1bea:	e1 99       	sbic	0x1c, 1	; 28
    1bec:	fe cf       	rjmp	.-4      	; 0x1bea <__eerd_byte_m8>
    1bee:	9f bb       	out	0x1f, r25	; 31
    1bf0:	8e bb       	out	0x1e, r24	; 30
    1bf2:	e0 9a       	sbi	0x1c, 0	; 28
    1bf4:	99 27       	eor	r25, r25
    1bf6:	8d b3       	in	r24, 0x1d	; 29
    1bf8:	08 95       	ret

00001bfa <__eeupd_block_m8>:
    1bfa:	dc 01       	movw	r26, r24
    1bfc:	a4 0f       	add	r26, r20
    1bfe:	b5 1f       	adc	r27, r21
    1c00:	41 50       	subi	r20, 0x01	; 1
    1c02:	50 40       	sbci	r21, 0x00	; 0
    1c04:	40 f0       	brcs	.+16     	; 0x1c16 <__eeupd_block_m8+0x1c>
    1c06:	cb 01       	movw	r24, r22
    1c08:	84 0f       	add	r24, r20
    1c0a:	95 1f       	adc	r25, r21
    1c0c:	2e 91       	ld	r18, -X
    1c0e:	05 d0       	rcall	.+10     	; 0x1c1a <__eeupd_r18_m8>
    1c10:	41 50       	subi	r20, 0x01	; 1
    1c12:	50 40       	sbci	r21, 0x00	; 0
    1c14:	d8 f7       	brcc	.-10     	; 0x1c0c <__eeupd_block_m8+0x12>
    1c16:	08 95       	ret

00001c18 <__eeupd_byte_m8>:
    1c18:	26 2f       	mov	r18, r22

00001c1a <__eeupd_r18_m8>:
    1c1a:	e1 99       	sbic	0x1c, 1	; 28
    1c1c:	fe cf       	rjmp	.-4      	; 0x1c1a <__eeupd_r18_m8>
    1c1e:	9f bb       	out	0x1f, r25	; 31
    1c20:	8e bb       	out	0x1e, r24	; 30
    1c22:	e0 9a       	sbi	0x1c, 0	; 28
    1c24:	01 97       	sbiw	r24, 0x01	; 1
    1c26:	0d b2       	in	r0, 0x1d	; 29
    1c28:	02 16       	cp	r0, r18
    1c2a:	31 f0       	breq	.+12     	; 0x1c38 <__eeupd_r18_m8+0x1e>
    1c2c:	2d bb       	out	0x1d, r18	; 29
    1c2e:	0f b6       	in	r0, 0x3f	; 63
    1c30:	f8 94       	cli
    1c32:	e2 9a       	sbi	0x1c, 2	; 28
    1c34:	e1 9a       	sbi	0x1c, 1	; 28
    1c36:	0f be       	out	0x3f, r0	; 63
    1c38:	08 95       	ret

00001c3a <_exit>:
    1c3a:	f8 94       	cli

00001c3c <__stop_program>:
    1c3c:	ff cf       	rjmp	.-2      	; 0x1c3c <__stop_program>
