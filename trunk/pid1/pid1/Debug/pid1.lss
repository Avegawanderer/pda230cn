
pid1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001b64  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000008c  00800060  00001b64  00001c18  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000df  008000ec  008000ec  00001ca4  2**0
                  ALLOC
  3 .eeprom       0000000a  00810000  00810000  00001ca4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         000009c0  00000000  00000000  00001cb0  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      000001a6  00000000  00000000  00002670  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      0000002f  00000000  00000000  00002816  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 000003f0  00000000  00000000  00002845  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00003dad  00000000  00000000  00002c35  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000013f5  00000000  00000000  000069e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000187e  00000000  00000000  00007dd7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  0000095c  00000000  00000000  00009658  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00001062  00000000  00000000  00009fb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00001cdb  00000000  00000000  0000b016  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000360  00000000  00000000  0000ccf1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	af c0       	rjmp	.+350    	; 0x160 <__ctors_end>
       2:	c9 c0       	rjmp	.+402    	; 0x196 <__bad_interrupt>
       4:	c8 c0       	rjmp	.+400    	; 0x196 <__bad_interrupt>
       6:	9d cc       	rjmp	.-1734   	; 0xfffff942 <__eeprom_end+0xff7ef938>
       8:	c6 c0       	rjmp	.+396    	; 0x196 <__bad_interrupt>
       a:	c5 c0       	rjmp	.+394    	; 0x196 <__bad_interrupt>
       c:	c4 c0       	rjmp	.+392    	; 0x196 <__bad_interrupt>
       e:	c3 c0       	rjmp	.+390    	; 0x196 <__bad_interrupt>
      10:	c2 c0       	rjmp	.+388    	; 0x196 <__bad_interrupt>
      12:	02 cb       	rjmp	.-2556   	; 0xfffff618 <__eeprom_end+0xff7ef60e>
      14:	c0 c0       	rjmp	.+384    	; 0x196 <__bad_interrupt>
      16:	bf c0       	rjmp	.+382    	; 0x196 <__bad_interrupt>
      18:	be c0       	rjmp	.+380    	; 0x196 <__bad_interrupt>
      1a:	bd c0       	rjmp	.+378    	; 0x196 <__bad_interrupt>
      1c:	56 c1       	rjmp	.+684    	; 0x2ca <__vector_14>
      1e:	bb c0       	rjmp	.+374    	; 0x196 <__bad_interrupt>
      20:	bd ca       	rjmp	.-2694   	; 0xfffff59c <__eeprom_end+0xff7ef592>
      22:	b9 c0       	rjmp	.+370    	; 0x196 <__bad_interrupt>
      24:	b8 c0       	rjmp	.+368    	; 0x196 <__bad_interrupt>

00000026 <led_encode_table>:
      26:	30 3f 4f 3f 31 06 32 5b 33 4f 34 66 53 6d 35 6d     0?O?1.2[3O4fSm5m
      36:	36 7d 37 07 38 7f 39 6f 2e 80 2c 80 2d 40 5f 08     6}7.8.9o..,.-@_.
      46:	20 00 b0 63 41 77 43 39 46 71 4e 54 44 5e 50 73      ..cAwC9FqNTD^Ps
      56:	45 79 55 3e 47 3d 52 50                             EyU>G=RP

0000005e <menuFunctionSet>:
      5e:	01 f3 07 f5 07 42 06 03 3f 06 a0 07 e1 05 02 9d     .....B..?.......
      6e:	07 38 07 37 06 05 17 06 f3 06 00 00 0b e7 05 f3     .8.7............
      7e:	06 f5 05 04 17 06 5d 06 00 00 0c e7 05 5d 06 f5     ......]......]..
      8e:	05 06 2b 06 ad 06 00 00 09 e7 05 ad 06 fe 05 07     ..+.............
      9e:	1f 06 ad 06 00 00 0a e7 05 ad 06 fe 05 08 44 06     ..............D.
      ae:	0d 06 00 00 0d 44 06 0d 06 00 00 0e 11 06 09 06     .....D..........
      be:	fb 05                                               ..

000000c0 <menuJumpSet>:
      c0:	01 c0 00 03 a8 01 00 01 02 40 01 00 02 05 28 02     .........@....(.
      d0:	00 01 01 80 03 00 83 01 40 05 00 82 01 00 05 80     ........@.......
      e0:	00 04 68 05 40 00 07 a8 05 00 01 0b 28 0b 00 83     ..h.@.......(...
      f0:	05 28 04 00 82 01 00 04 80 00 06 68 04 40 00 05     .(.........h.@..
     100:	a8 04 00 01 0c 28 0c 00 83 04 28 06 00 82 01 00     .....(....(.....
     110:	06 80 00 07 68 06 40 00 04 a8 06 00 01 09 00 07     ....h.@.........
     120:	00 82 01 00 07 80 00 05 68 07 40 00 06 a8 07 00     ........h.@.....
     130:	01 0a 00 09 00 02 06 28 09 00 01 08 14 08 00 83     .......(........
     140:	01 00 0a 00 02 07 28 0a 00 01 0d 14 0d 00 83 01     ......(.........
     150:	00 01 00 40 0e 00 02 00 40 0e 00 0e d5 01 01 00     ...@....@.......

00000160 <__ctors_end>:
     160:	11 24       	eor	r1, r1
     162:	1f be       	out	0x3f, r1	; 63
     164:	cf e5       	ldi	r28, 0x5F	; 95
     166:	d4 e0       	ldi	r29, 0x04	; 4
     168:	de bf       	out	0x3e, r29	; 62
     16a:	cd bf       	out	0x3d, r28	; 61

0000016c <__do_copy_data>:
     16c:	10 e0       	ldi	r17, 0x00	; 0
     16e:	a0 e6       	ldi	r26, 0x60	; 96
     170:	b0 e0       	ldi	r27, 0x00	; 0
     172:	e4 e6       	ldi	r30, 0x64	; 100
     174:	fb e1       	ldi	r31, 0x1B	; 27
     176:	02 c0       	rjmp	.+4      	; 0x17c <__do_copy_data+0x10>
     178:	05 90       	lpm	r0, Z+
     17a:	0d 92       	st	X+, r0
     17c:	ac 3e       	cpi	r26, 0xEC	; 236
     17e:	b1 07       	cpc	r27, r17
     180:	d9 f7       	brne	.-10     	; 0x178 <__do_copy_data+0xc>

00000182 <__do_clear_bss>:
     182:	21 e0       	ldi	r18, 0x01	; 1
     184:	ac ee       	ldi	r26, 0xEC	; 236
     186:	b0 e0       	ldi	r27, 0x00	; 0
     188:	01 c0       	rjmp	.+2      	; 0x18c <.do_clear_bss_start>

0000018a <.do_clear_bss_loop>:
     18a:	1d 92       	st	X+, r1

0000018c <.do_clear_bss_start>:
     18c:	ab 3c       	cpi	r26, 0xCB	; 203
     18e:	b2 07       	cpc	r27, r18
     190:	e1 f7       	brne	.-8      	; 0x18a <.do_clear_bss_loop>
     192:	c6 d8       	rcall	.-3700   	; 0xfffff320 <__eeprom_end+0xff7ef316>
     194:	e5 cc       	rjmp	.-1590   	; 0xfffffb60 <__eeprom_end+0xff7efb56>

00000196 <__bad_interrupt>:
     196:	34 cf       	rjmp	.-408    	; 0x0 <__vectors>

00000198 <conv_ADC_to_Celsius>:
//---------------------------------------------//
//---------------------------------------------//


uint16_t conv_ADC_to_Celsius(uint16_t adc_value)
{	
     198:	0f 93       	push	r16
     19a:	1f 93       	push	r17
	return (uint16_t)(((int32_t)adc_value * k_norm + offset_norm) / (COEFF_SCALE));
     19c:	20 91 ec 00 	lds	r18, 0x00EC
     1a0:	30 91 ed 00 	lds	r19, 0x00ED
     1a4:	40 91 ee 00 	lds	r20, 0x00EE
     1a8:	50 91 ef 00 	lds	r21, 0x00EF
     1ac:	dc 01       	movw	r26, r24
     1ae:	68 dc       	rcall	.-1840   	; 0xfffffa80 <__eeprom_end+0xff7efa76>
     1b0:	00 91 f0 00 	lds	r16, 0x00F0
     1b4:	10 91 f1 00 	lds	r17, 0x00F1
     1b8:	20 91 f2 00 	lds	r18, 0x00F2
     1bc:	30 91 f3 00 	lds	r19, 0x00F3
     1c0:	60 0f       	add	r22, r16
     1c2:	71 1f       	adc	r23, r17
     1c4:	82 1f       	adc	r24, r18
     1c6:	93 1f       	adc	r25, r19
     1c8:	28 ee       	ldi	r18, 0xE8	; 232
     1ca:	33 e0       	ldi	r19, 0x03	; 3
     1cc:	40 e0       	ldi	r20, 0x00	; 0
     1ce:	50 e0       	ldi	r21, 0x00	; 0
     1d0:	24 dc       	rcall	.-1976   	; 0xfffffa1a <__eeprom_end+0xff7efa10>
}
     1d2:	c9 01       	movw	r24, r18
     1d4:	1f 91       	pop	r17
     1d6:	0f 91       	pop	r16
     1d8:	08 95       	ret

000001da <conv_Celsius_to_ADC>:

uint16_t conv_Celsius_to_ADC(uint16_t degree_value)
{
     1da:	0f 93       	push	r16
     1dc:	1f 93       	push	r17
	degree_value += 1;
     1de:	9c 01       	movw	r18, r24
     1e0:	2f 5f       	subi	r18, 0xFF	; 255
     1e2:	3f 4f       	sbci	r19, 0xFF	; 255
	return (uint16_t)(((int32_t)degree_value * COEFF_SCALE - offset_norm) / k_norm);
     1e4:	a8 ee       	ldi	r26, 0xE8	; 232
     1e6:	b3 e0       	ldi	r27, 0x03	; 3
     1e8:	39 dc       	rcall	.-1934   	; 0xfffffa5c <__eeprom_end+0xff7efa52>
     1ea:	00 91 f0 00 	lds	r16, 0x00F0
     1ee:	10 91 f1 00 	lds	r17, 0x00F1
     1f2:	20 91 f2 00 	lds	r18, 0x00F2
     1f6:	30 91 f3 00 	lds	r19, 0x00F3
     1fa:	60 1b       	sub	r22, r16
     1fc:	71 0b       	sbc	r23, r17
     1fe:	82 0b       	sbc	r24, r18
     200:	93 0b       	sbc	r25, r19
     202:	20 91 ec 00 	lds	r18, 0x00EC
     206:	30 91 ed 00 	lds	r19, 0x00ED
     20a:	40 91 ee 00 	lds	r20, 0x00EE
     20e:	50 91 ef 00 	lds	r21, 0x00EF
     212:	03 dc       	rcall	.-2042   	; 0xfffffa1a <__eeprom_end+0xff7efa10>
}
     214:	c9 01       	movw	r24, r18
     216:	1f 91       	pop	r17
     218:	0f 91       	pop	r16
     21a:	08 95       	ret

0000021c <calculateCoeffs>:

void calculateCoeffs(void)
{
     21c:	8f 92       	push	r8
     21e:	9f 92       	push	r9
     220:	af 92       	push	r10
     222:	bf 92       	push	r11
     224:	cf 92       	push	r12
     226:	df 92       	push	r13
     228:	ef 92       	push	r14
     22a:	ff 92       	push	r15
     22c:	cf 93       	push	r28
     22e:	df 93       	push	r29
	k_norm = ((int32_t)(cp.cpoint2 - cp.cpoint1) * COEFF_SCALE) / ((int32_t)(cp.cpoint2_adc - cp.cpoint1_adc));
     230:	f0 90 99 01 	lds	r15, 0x0199
     234:	a0 91 9a 01 	lds	r26, 0x019A
     238:	b0 e0       	ldi	r27, 0x00	; 0
     23a:	af 19       	sub	r26, r15
     23c:	b1 09       	sbc	r27, r1
     23e:	c0 91 9b 01 	lds	r28, 0x019B
     242:	d0 91 9c 01 	lds	r29, 0x019C
     246:	28 ee       	ldi	r18, 0xE8	; 232
     248:	33 e0       	ldi	r19, 0x03	; 3
     24a:	14 dc       	rcall	.-2008   	; 0xfffffa74 <__eeprom_end+0xff7efa6a>
     24c:	20 91 9d 01 	lds	r18, 0x019D
     250:	30 91 9e 01 	lds	r19, 0x019E
     254:	2c 1b       	sub	r18, r28
     256:	3d 0b       	sbc	r19, r29
     258:	40 e0       	ldi	r20, 0x00	; 0
     25a:	50 e0       	ldi	r21, 0x00	; 0
     25c:	de db       	rcall	.-2116   	; 0xfffffa1a <__eeprom_end+0xff7efa10>
     25e:	49 01       	movw	r8, r18
     260:	5a 01       	movw	r10, r20
     262:	20 93 ec 00 	sts	0x00EC, r18
     266:	30 93 ed 00 	sts	0x00ED, r19
     26a:	40 93 ee 00 	sts	0x00EE, r20
     26e:	50 93 ef 00 	sts	0x00EF, r21
	offset_norm = (int32_t)cp.cpoint1 * COEFF_SCALE - (int32_t)cp.cpoint1_adc * k_norm;
     272:	2f 2d       	mov	r18, r15
     274:	30 e0       	ldi	r19, 0x00	; 0
     276:	a8 ee       	ldi	r26, 0xE8	; 232
     278:	b3 e0       	ldi	r27, 0x03	; 3
     27a:	f0 db       	rcall	.-2080   	; 0xfffffa5c <__eeprom_end+0xff7efa52>
     27c:	6b 01       	movw	r12, r22
     27e:	7c 01       	movw	r14, r24
     280:	de 01       	movw	r26, r28
     282:	a5 01       	movw	r20, r10
     284:	94 01       	movw	r18, r8
     286:	fc db       	rcall	.-2056   	; 0xfffffa80 <__eeprom_end+0xff7efa76>
     288:	c6 1a       	sub	r12, r22
     28a:	d7 0a       	sbc	r13, r23
     28c:	e8 0a       	sbc	r14, r24
     28e:	f9 0a       	sbc	r15, r25
     290:	c0 92 f0 00 	sts	0x00F0, r12
     294:	d0 92 f1 00 	sts	0x00F1, r13
     298:	e0 92 f2 00 	sts	0x00F2, r14
     29c:	f0 92 f3 00 	sts	0x00F3, r15
}
     2a0:	df 91       	pop	r29
     2a2:	cf 91       	pop	r28
     2a4:	ff 90       	pop	r15
     2a6:	ef 90       	pop	r14
     2a8:	df 90       	pop	r13
     2aa:	cf 90       	pop	r12
     2ac:	bf 90       	pop	r11
     2ae:	af 90       	pop	r10
     2b0:	9f 90       	pop	r9
     2b2:	8f 90       	pop	r8
     2b4:	08 95       	ret

000002b6 <update_Celsius>:
}

void update_Celsius(void)
{
	// Convert to Celsius degree
	adc_celsius = conv_ADC_to_Celsius(adc_normalized);
     2b6:	80 91 6b 01 	lds	r24, 0x016B
     2ba:	90 91 6c 01 	lds	r25, 0x016C
     2be:	6c df       	rcall	.-296    	; 0x198 <conv_ADC_to_Celsius>
     2c0:	90 93 6f 01 	sts	0x016F, r25
     2c4:	80 93 6e 01 	sts	0x016E, r24
     2c8:	08 95       	ret

000002ca <__vector_14>:




ISR(ADC_vect)
{
     2ca:	1f 92       	push	r1
     2cc:	0f 92       	push	r0
     2ce:	0f b6       	in	r0, 0x3f	; 63
     2d0:	0f 92       	push	r0
     2d2:	11 24       	eor	r1, r1
     2d4:	2f 93       	push	r18
     2d6:	3f 93       	push	r19
     2d8:	4f 93       	push	r20
     2da:	8f 93       	push	r24
     2dc:	9f 93       	push	r25
     2de:	ef 93       	push	r30
     2e0:	ff 93       	push	r31
	static uint8_t adc_buffer_pointer = ADC_BUFFER_LENGTH;
	// Get new sample
	uint16_t new_sample = 1024 - ADC;	
     2e2:	24 b1       	in	r18, 0x04	; 4
     2e4:	35 b1       	in	r19, 0x05	; 5
	// Add new sample to the buffer
	raw_adc_buffer[--adc_buffer_pointer] = new_sample;
     2e6:	40 91 77 00 	lds	r20, 0x0077
     2ea:	41 50       	subi	r20, 0x01	; 1
     2ec:	40 93 77 00 	sts	0x0077, r20
     2f0:	e4 2f       	mov	r30, r20
     2f2:	f0 e0       	ldi	r31, 0x00	; 0
     2f4:	ee 0f       	add	r30, r30
     2f6:	ff 1f       	adc	r31, r31
     2f8:	e5 5d       	subi	r30, 0xD5	; 213
     2fa:	fe 4f       	sbci	r31, 0xFE	; 254

ISR(ADC_vect)
{
	static uint8_t adc_buffer_pointer = ADC_BUFFER_LENGTH;
	// Get new sample
	uint16_t new_sample = 1024 - ADC;	
     2fc:	80 e0       	ldi	r24, 0x00	; 0
     2fe:	94 e0       	ldi	r25, 0x04	; 4
     300:	82 1b       	sub	r24, r18
     302:	93 0b       	sbc	r25, r19
	// Add new sample to the buffer
	raw_adc_buffer[--adc_buffer_pointer] = new_sample;
     304:	91 83       	std	Z+1, r25	; 0x01
     306:	80 83       	st	Z, r24
	if (adc_buffer_pointer == 0)
     308:	41 11       	cpse	r20, r1
     30a:	03 c0       	rjmp	.+6      	; 0x312 <__vector_14+0x48>
		adc_buffer_pointer = ADC_BUFFER_LENGTH;
     30c:	80 e2       	ldi	r24, 0x20	; 32
     30e:	80 93 77 00 	sts	0x0077, r24
}	
     312:	ff 91       	pop	r31
     314:	ef 91       	pop	r30
     316:	9f 91       	pop	r25
     318:	8f 91       	pop	r24
     31a:	4f 91       	pop	r20
     31c:	3f 91       	pop	r19
     31e:	2f 91       	pop	r18
     320:	0f 90       	pop	r0
     322:	0f be       	out	0x3f, r0	; 63
     324:	0f 90       	pop	r0
     326:	1f 90       	pop	r1
     328:	18 95       	reti

0000032a <fir_i16_i8>:
// FIR digital filter
// Samples: signed, 16-bit
// Coeffs:  signed, 8-bit
//---------------------------------------------//
int16_t fir_i16_i8(int16_t new_sample, int16_t *samples, filter8bit_core_t* iir_core)
{
     32a:	cf 92       	push	r12
     32c:	df 92       	push	r13
     32e:	ef 92       	push	r14
     330:	ff 92       	push	r15
     332:	0f 93       	push	r16
     334:	1f 93       	push	r17
     336:	cf 93       	push	r28
     338:	df 93       	push	r29
     33a:	8c 01       	movw	r16, r24
     33c:	eb 01       	movw	r28, r22
     33e:	fa 01       	movw	r30, r20
	int32_t summ;
	uint8_t i;
	
	summ = new_sample * iir_core->coeffs[0];
     340:	23 81       	ldd	r18, Z+3	; 0x03
     342:	20 03       	mulsu	r18, r16
     344:	60 01       	movw	r12, r0
     346:	21 9f       	mul	r18, r17
     348:	d0 0c       	add	r13, r0
     34a:	11 24       	eor	r1, r1
     34c:	ee 24       	eor	r14, r14
     34e:	d7 fc       	sbrc	r13, 7
     350:	e0 94       	com	r14
     352:	fe 2c       	mov	r15, r14
	for (i=iir_core->n-1; i>0; i--)
     354:	40 81       	ld	r20, Z
     356:	1e c0       	rjmp	.+60     	; 0x394 <fir_i16_i8+0x6a>
	{
		samples[i] = samples[i-1];
     358:	84 2f       	mov	r24, r20
     35a:	90 e0       	ldi	r25, 0x00	; 0
     35c:	dc 01       	movw	r26, r24
     35e:	11 97       	sbiw	r26, 0x01	; 1
     360:	aa 0f       	add	r26, r26
     362:	bb 1f       	adc	r27, r27
     364:	ac 0f       	add	r26, r28
     366:	bd 1f       	adc	r27, r29
     368:	2d 91       	ld	r18, X+
     36a:	3c 91       	ld	r19, X
     36c:	dc 01       	movw	r26, r24
     36e:	aa 0f       	add	r26, r26
     370:	bb 1f       	adc	r27, r27
     372:	ac 0f       	add	r26, r28
     374:	bd 1f       	adc	r27, r29
     376:	2d 93       	st	X+, r18
     378:	3c 93       	st	X, r19
		summ += (int32_t)samples[i] * iir_core->coeffs[i];
     37a:	df 01       	movw	r26, r30
     37c:	a8 0f       	add	r26, r24
     37e:	b9 1f       	adc	r27, r25
     380:	13 96       	adiw	r26, 0x03	; 3
     382:	ac 91       	ld	r26, X
     384:	bb 27       	eor	r27, r27
     386:	a7 fd       	sbrc	r26, 7
     388:	b0 95       	com	r27
     38a:	62 db       	rcall	.-2364   	; 0xfffffa50 <__eeprom_end+0xff7efa46>
     38c:	c6 0e       	add	r12, r22
     38e:	d7 1e       	adc	r13, r23
     390:	e8 1e       	adc	r14, r24
     392:	f9 1e       	adc	r15, r25
{
	int32_t summ;
	uint8_t i;
	
	summ = new_sample * iir_core->coeffs[0];
	for (i=iir_core->n-1; i>0; i--)
     394:	41 50       	subi	r20, 0x01	; 1
     396:	01 f7       	brne	.-64     	; 0x358 <fir_i16_i8+0x2e>
	{
		samples[i] = samples[i-1];
		summ += (int32_t)samples[i] * iir_core->coeffs[i];
	}
	samples[0] = new_sample;
     398:	19 83       	std	Y+1, r17	; 0x01
     39a:	08 83       	st	Y, r16
	return (int16_t)(summ / iir_core->dc_gain);
     39c:	21 81       	ldd	r18, Z+1	; 0x01
     39e:	32 81       	ldd	r19, Z+2	; 0x02
     3a0:	40 e0       	ldi	r20, 0x00	; 0
     3a2:	50 e0       	ldi	r21, 0x00	; 0
     3a4:	c7 01       	movw	r24, r14
     3a6:	b6 01       	movw	r22, r12
     3a8:	38 db       	rcall	.-2448   	; 0xfffffa1a <__eeprom_end+0xff7efa10>
}
     3aa:	c9 01       	movw	r24, r18
     3ac:	df 91       	pop	r29
     3ae:	cf 91       	pop	r28
     3b0:	1f 91       	pop	r17
     3b2:	0f 91       	pop	r16
     3b4:	ff 90       	pop	r15
     3b6:	ef 90       	pop	r14
     3b8:	df 90       	pop	r13
     3ba:	cf 90       	pop	r12
     3bc:	08 95       	ret

000003be <update_normalized_adc>:
void update_normalized_adc()
{
	uint8_t i;
	uint16_t adc_raw_summ = 0;
	// Disable interrupts from ADC - to save data integrity
	ADCSRA &= ~(1<<ADIE);	
     3be:	33 98       	cbi	0x06, 3	; 6
     3c0:	eb e2       	ldi	r30, 0x2B	; 43
     3c2:	f1 e0       	ldi	r31, 0x01	; 1


void update_normalized_adc()
{
	uint8_t i;
	uint16_t adc_raw_summ = 0;
     3c4:	80 e0       	ldi	r24, 0x00	; 0
     3c6:	90 e0       	ldi	r25, 0x00	; 0
	// Disable interrupts from ADC - to save data integrity
	ADCSRA &= ~(1<<ADIE);	
	// Get normalized mean window summ
	for (i=0;i<ADC_BUFFER_LENGTH;i++)
		adc_raw_summ += raw_adc_buffer[i];
     3c8:	21 91       	ld	r18, Z+
     3ca:	31 91       	ld	r19, Z+
     3cc:	82 0f       	add	r24, r18
     3ce:	93 1f       	adc	r25, r19
	uint8_t i;
	uint16_t adc_raw_summ = 0;
	// Disable interrupts from ADC - to save data integrity
	ADCSRA &= ~(1<<ADIE);	
	// Get normalized mean window summ
	for (i=0;i<ADC_BUFFER_LENGTH;i++)
     3d0:	21 e0       	ldi	r18, 0x01	; 1
     3d2:	eb 36       	cpi	r30, 0x6B	; 107
     3d4:	f2 07       	cpc	r31, r18
     3d6:	c1 f7       	brne	.-16     	; 0x3c8 <update_normalized_adc+0xa>
		adc_raw_summ += raw_adc_buffer[i];
	// Enable interrupts from ADC
	ADCSRA |= (1<<ADIE);
     3d8:	33 9a       	sbi	0x06, 3	; 6
	
	adc_normalized = adc_raw_summ >> 5;		// ADC_BUFFER_LENGTH = 32 !
     3da:	9c 01       	movw	r18, r24
     3dc:	65 e0       	ldi	r22, 0x05	; 5
     3de:	36 95       	lsr	r19
     3e0:	27 95       	ror	r18
     3e2:	6a 95       	dec	r22
     3e4:	e1 f7       	brne	.-8      	; 0x3de <update_normalized_adc+0x20>
     3e6:	30 93 6c 01 	sts	0x016C, r19
     3ea:	20 93 6b 01 	sts	0x016B, r18
	adc_oversampled = adc_raw_summ >> 3;
     3ee:	73 e0       	ldi	r23, 0x03	; 3
     3f0:	96 95       	lsr	r25
     3f2:	87 95       	ror	r24
     3f4:	7a 95       	dec	r23
     3f6:	e1 f7       	brne	.-8      	; 0x3f0 <update_normalized_adc+0x32>
     3f8:	90 93 2a 01 	sts	0x012A, r25
     3fc:	80 93 29 01 	sts	0x0129, r24
	// Filter
	adc_filtered = fir_i16_i8(adc_oversampled, filter_buffer, &fir_filter_rect);	
     400:	40 e6       	ldi	r20, 0x60	; 96
     402:	50 e0       	ldi	r21, 0x00	; 0
     404:	60 e7       	ldi	r22, 0x70	; 112
     406:	71 e0       	ldi	r23, 0x01	; 1
     408:	90 df       	rcall	.-224    	; 0x32a <fir_i16_i8>
     40a:	90 93 28 01 	sts	0x0128, r25
     40e:	80 93 27 01 	sts	0x0127, r24
	// Check sensor
	adc_status = 0;
     412:	10 92 6d 01 	sts	0x016D, r1
	if (adc_normalized < 50)
     416:	80 91 6b 01 	lds	r24, 0x016B
     41a:	90 91 6c 01 	lds	r25, 0x016C
     41e:	82 33       	cpi	r24, 0x32	; 50
     420:	91 05       	cpc	r25, r1
     422:	10 f4       	brcc	.+4      	; 0x428 <update_normalized_adc+0x6a>
		adc_status |= SENSOR_ERROR_NO_PRESENT;
     424:	81 e0       	ldi	r24, 0x01	; 1
     426:	04 c0       	rjmp	.+8      	; 0x430 <update_normalized_adc+0x72>
	else if (adc_normalized > 1000)
     428:	89 3e       	cpi	r24, 0xE9	; 233
     42a:	93 40       	sbci	r25, 0x03	; 3
     42c:	18 f0       	brcs	.+6      	; 0x434 <update_normalized_adc+0x76>
		adc_status |= SENSOR_ERROR_SHORTED;
     42e:	82 e0       	ldi	r24, 0x02	; 2
     430:	80 93 6d 01 	sts	0x016D, r24
     434:	08 95       	ret

00000436 <process_buttons>:
	uint8_t long_press_mask;
	uint8_t long_press_event_mask;
	
	uint16_t composed_state;
	
	raw_delayed = raw_current;
     436:	50 91 fa 00 	lds	r21, 0x00FA
	raw_delayed_inv = raw_current_inv;
     43a:	30 91 78 00 	lds	r19, 0x0078
	raw_current = raw_button_state;
     43e:	90 91 ca 01 	lds	r25, 0x01CA
     442:	90 93 fa 00 	sts	0x00FA, r25
	raw_current_inv = ~raw_current;
     446:	69 2f       	mov	r22, r25
     448:	60 95       	com	r22
     44a:	60 93 78 00 	sts	0x0078, r22
	
	// Must be before press_timer update
	long_press_mask = (press_timer >= LONG_PRESS_DELAY) ? 0xFF : 0x00;
     44e:	80 91 fb 00 	lds	r24, 0x00FB
     452:	8c 30       	cpi	r24, 0x0C	; 12
     454:	10 f0       	brcs	.+4      	; 0x45a <process_buttons+0x24>
     456:	2f ef       	ldi	r18, 0xFF	; 255
     458:	01 c0       	rjmp	.+2      	; 0x45c <process_buttons+0x26>
     45a:	20 e0       	ldi	r18, 0x00	; 0
	
	if (raw_delayed != raw_current)
     45c:	59 17       	cp	r21, r25
     45e:	19 f0       	breq	.+6      	; 0x466 <__stack+0x7>
	{
		press_timer = 0;
     460:	10 92 fb 00 	sts	0x00FB, r1
     464:	05 c0       	rjmp	.+10     	; 0x470 <__stack+0x11>
	}
	else if (press_timer <= LONG_PRESS_DELAY)
     466:	8d 30       	cpi	r24, 0x0D	; 13
     468:	18 f4       	brcc	.+6      	; 0x470 <__stack+0x11>
	{
		press_timer++;
     46a:	8f 5f       	subi	r24, 0xFF	; 255
     46c:	80 93 fb 00 	sts	0x00FB, r24
	}
	
	// Must after press_timer update
	long_press_event_mask = (press_timer == LONG_PRESS_DELAY) ? 0xFF : 0x00;
     470:	70 91 fb 00 	lds	r23, 0x00FB
     474:	7c 30       	cpi	r23, 0x0C	; 12
     476:	11 f4       	brne	.+4      	; 0x47c <__stack+0x1d>
     478:	4f ef       	ldi	r20, 0xFF	; 255
     47a:	01 c0       	rjmp	.+2      	; 0x47e <__stack+0x1f>
     47c:	40 e0       	ldi	r20, 0x00	; 0
			
	button_action_down = raw_current & raw_delayed_inv;
     47e:	89 2f       	mov	r24, r25
     480:	83 23       	and	r24, r19
     482:	80 93 f7 00 	sts	0x00F7, r24
			
	if (press_timer > REPEAT_DELAY)
     486:	77 30       	cpi	r23, 0x07	; 7
     488:	08 f0       	brcs	.+2      	; 0x48c <__stack+0x2d>
		raw_delayed_inv |= 0xFF;
     48a:	3f ef       	ldi	r19, 0xFF	; 255
	
	button_action_rep = raw_current & raw_delayed_inv;
     48c:	39 23       	and	r19, r25
     48e:	30 93 f6 00 	sts	0x00F6, r19
	
	button_action_up_short = raw_current_inv & raw_delayed & ~long_press_mask;
     492:	20 95       	com	r18
     494:	56 23       	and	r21, r22
     496:	25 23       	and	r18, r21
     498:	20 93 f5 00 	sts	0x00F5, r18
	//button_action_up_long  = raw_current_inv & raw_delayed & long_press_mask;
	button_action_long  = raw_current & long_press_event_mask;
     49c:	49 23       	and	r20, r25
     49e:	40 93 f4 00 	sts	0x00F4, r20
	
	// Compose button state
	composed_state = (button_action_down & (BD_MENU | BD_UP | BD_DOWN | BD_ROTFWD | BD_ROTREV | BD_HEATCTRL | BD_CYCLE));
     4a2:	8d 7f       	andi	r24, 0xFD	; 253
     4a4:	90 e0       	ldi	r25, 0x00	; 0
	if (button_action_up_short & BD_MENU)
     4a6:	25 fd       	sbrc	r18, 5
		composed_state |= BS_MENU;
     4a8:	91 60       	ori	r25, 0x01	; 1
	//if (button_action_up_long & BD_MENU)
	if (button_action_long & BD_MENU)
     4aa:	45 fd       	sbrc	r20, 5
		composed_state |= BL_MENU;
     4ac:	92 60       	ori	r25, 0x02	; 2
	if (button_action_rep & BD_UP)
     4ae:	36 fd       	sbrc	r19, 6
		composed_state |= BR_UP;	
     4b0:	94 60       	ori	r25, 0x04	; 4
	if (button_action_rep & BD_DOWN)
     4b2:	37 fd       	sbrc	r19, 7
		composed_state |= BR_DOWN;
     4b4:	98 60       	ori	r25, 0x08	; 8

	button_state = composed_state;
     4b6:	90 93 f9 00 	sts	0x00F9, r25
     4ba:	80 93 f8 00 	sts	0x00F8, r24
     4be:	08 95       	ret

000004c0 <processPID>:




uint8_t processPID(uint16_t setPoint, uint16_t processValue)
{
     4c0:	ef 92       	push	r14
     4c2:	ff 92       	push	r15
     4c4:	0f 93       	push	r16
     4c6:	1f 93       	push	r17
     4c8:	cf 93       	push	r28
     4ca:	df 93       	push	r29
     4cc:	8b 01       	movw	r16, r22
	int16_t error, p_term, i_term, d_term, temp;
	static uint16_t lastProcessValue;
	static int16_t integAcc = 0;
	
	error = setPoint - processValue;
     4ce:	86 1b       	sub	r24, r22
     4d0:	97 0b       	sbc	r25, r23
	
	
	//------ Calculate P term --------//
	
	if (error > 100 )
     4d2:	85 36       	cpi	r24, 0x65	; 101
     4d4:	91 05       	cpc	r25, r1
     4d6:	5c f4       	brge	.+22     	; 0x4ee <processPID+0x2e>
	{
		p_term = 2000;	
	}
	else if (error < -100 )
     4d8:	8c 39       	cpi	r24, 0x9C	; 156
     4da:	2f ef       	ldi	r18, 0xFF	; 255
     4dc:	92 07       	cpc	r25, r18
     4de:	54 f0       	brlt	.+20     	; 0x4f4 <processPID+0x34>
	{
		p_term = -2000 ;	
	}
	else
	{
		p_term = error * Kp;
     4e0:	2a e0       	ldi	r18, 0x0A	; 10
     4e2:	28 9f       	mul	r18, r24
     4e4:	e0 01       	movw	r28, r0
     4e6:	29 9f       	mul	r18, r25
     4e8:	d0 0d       	add	r29, r0
     4ea:	11 24       	eor	r1, r1
     4ec:	05 c0       	rjmp	.+10     	; 0x4f8 <processPID+0x38>
	
	//------ Calculate P term --------//
	
	if (error > 100 )
	{
		p_term = 2000;	
     4ee:	c0 ed       	ldi	r28, 0xD0	; 208
     4f0:	d7 e0       	ldi	r29, 0x07	; 7
     4f2:	02 c0       	rjmp	.+4      	; 0x4f8 <processPID+0x38>
	}
	else if (error < -100 )
	{
		p_term = -2000 ;	
     4f4:	c0 e3       	ldi	r28, 0x30	; 48
     4f6:	d8 ef       	ldi	r29, 0xF8	; 248
		p_term = error * Kp;
	}
	
	//------ Calculate I term --------//

	integAcc += error;
     4f8:	20 91 ff 00 	lds	r18, 0x00FF
     4fc:	30 91 00 01 	lds	r19, 0x0100
     500:	28 0f       	add	r18, r24
     502:	39 1f       	adc	r19, r25
	
	if (integAcc > 2000 )
     504:	21 3d       	cpi	r18, 0xD1	; 209
     506:	87 e0       	ldi	r24, 0x07	; 7
     508:	38 07       	cpc	r19, r24
     50a:	3c f0       	brlt	.+14     	; 0x51a <processPID+0x5a>
	{
		integAcc = 2000;
     50c:	80 ed       	ldi	r24, 0xD0	; 208
     50e:	97 e0       	ldi	r25, 0x07	; 7
     510:	90 93 00 01 	sts	0x0100, r25
     514:	80 93 ff 00 	sts	0x00FF, r24
     518:	0b c0       	rjmp	.+22     	; 0x530 <processPID+0x70>
	}
	else if (integAcc < 0)
     51a:	37 fd       	sbrc	r19, 7
     51c:	05 c0       	rjmp	.+10     	; 0x528 <processPID+0x68>
		p_term = error * Kp;
	}
	
	//------ Calculate I term --------//

	integAcc += error;
     51e:	30 93 00 01 	sts	0x0100, r19
     522:	20 93 ff 00 	sts	0x00FF, r18
     526:	04 c0       	rjmp	.+8      	; 0x530 <processPID+0x70>
	{
		integAcc = 2000;
	}
	else if (integAcc < 0)
	{
		integAcc = 0;
     528:	10 92 00 01 	sts	0x0100, r1
     52c:	10 92 ff 00 	sts	0x00FF, r1
	}
	i_term = integAcc * Ki;
     530:	20 91 ff 00 	lds	r18, 0x00FF
     534:	30 91 00 01 	lds	r19, 0x0100
     538:	45 e0       	ldi	r20, 0x05	; 5
     53a:	42 9f       	mul	r20, r18
     53c:	c0 01       	movw	r24, r0
     53e:	43 9f       	mul	r20, r19
     540:	90 0d       	add	r25, r0
     542:	11 24       	eor	r1, r1
	i_term /= 40;
     544:	68 e2       	ldi	r22, 0x28	; 40
     546:	70 e0       	ldi	r23, 0x00	; 0
     548:	55 da       	rcall	.-2902   	; 0xfffff9f4 <__eeprom_end+0xff7ef9ea>
     54a:	7b 01       	movw	r14, r22
	
	
	//------ Calculate D term --------//
	// 13_1
	d_term = fir_i16_i8((lastProcessValue - processValue)*10, pid_dterm_buffer, &dterm_filter_core);
     54c:	80 91 01 01 	lds	r24, 0x0101
     550:	90 91 02 01 	lds	r25, 0x0102
     554:	80 1b       	sub	r24, r16
     556:	91 0b       	sbc	r25, r17
     558:	49 e7       	ldi	r20, 0x79	; 121
     55a:	50 e0       	ldi	r21, 0x00	; 0
     55c:	6b ea       	ldi	r22, 0xAB	; 171
     55e:	71 e0       	ldi	r23, 0x01	; 1
     560:	2a e0       	ldi	r18, 0x0A	; 10
     562:	fc 01       	movw	r30, r24
     564:	2e 9f       	mul	r18, r30
     566:	c0 01       	movw	r24, r0
     568:	2f 9f       	mul	r18, r31
     56a:	90 0d       	add	r25, r0
     56c:	11 24       	eor	r1, r1
     56e:	dd de       	rcall	.-582    	; 0x32a <fir_i16_i8>
	lastProcessValue = processValue;
     570:	10 93 02 01 	sts	0x0102, r17
     574:	00 93 01 01 	sts	0x0101, r16
	d_term = Kd * d_term;
     578:	22 e3       	ldi	r18, 0x32	; 50
     57a:	28 9f       	mul	r18, r24
     57c:	f0 01       	movw	r30, r0
     57e:	29 9f       	mul	r18, r25
     580:	f0 0d       	add	r31, r0
     582:	11 24       	eor	r1, r1
	
	//--------- Summ terms -----------//
	temp = (p_term + i_term + d_term) / SCALING_FACTOR;
     584:	ce 01       	movw	r24, r28
     586:	8e 0d       	add	r24, r14
     588:	9f 1d       	adc	r25, r15
     58a:	8e 0f       	add	r24, r30
     58c:	9f 1f       	adc	r25, r31
     58e:	65 e0       	ldi	r22, 0x05	; 5
     590:	70 e0       	ldi	r23, 0x00	; 0
     592:	30 da       	rcall	.-2976   	; 0xfffff9f4 <__eeprom_end+0xff7ef9ea>
     594:	9b 01       	movw	r18, r22
     596:	77 ff       	sbrs	r23, 7
     598:	02 c0       	rjmp	.+4      	; 0x59e <processPID+0xde>
     59a:	20 e0       	ldi	r18, 0x00	; 0
     59c:	30 e0       	ldi	r19, 0x00	; 0
     59e:	c9 01       	movw	r24, r18
     5a0:	25 36       	cpi	r18, 0x65	; 101
     5a2:	31 05       	cpc	r19, r1
     5a4:	14 f0       	brlt	.+4      	; 0x5aa <processPID+0xea>
     5a6:	84 e6       	ldi	r24, 0x64	; 100
     5a8:	90 e0       	ldi	r25, 0x00	; 0
		temp = 0;
	}
	
	
	//------- Debug --------//
	dbg_PID_p_term = p_term;
     5aa:	d0 93 a6 01 	sts	0x01A6, r29
     5ae:	c0 93 a5 01 	sts	0x01A5, r28
	dbg_PID_d_term = d_term;
     5b2:	f0 93 b4 01 	sts	0x01B4, r31
     5b6:	e0 93 b3 01 	sts	0x01B3, r30
	dbg_PID_i_term = i_term;
     5ba:	f0 92 aa 01 	sts	0x01AA, r15
     5be:	e0 92 a9 01 	sts	0x01A9, r14
	dbg_PID_output = temp;
     5c2:	90 93 a4 01 	sts	0x01A4, r25
     5c6:	80 93 a3 01 	sts	0x01A3, r24
	
	
	return temp;
	
}
     5ca:	df 91       	pop	r29
     5cc:	cf 91       	pop	r28
     5ce:	1f 91       	pop	r17
     5d0:	0f 91       	pop	r16
     5d2:	ff 90       	pop	r15
     5d4:	ef 90       	pop	r14
     5d6:	08 95       	ret

000005d8 <processRollControl>:



// Function to control motor rotation
void processRollControl(void)
{	
     5d8:	cf 93       	push	r28
	uint8_t beepState = 0;
	static uint8_t force_rotate = 0;
	
	// Process auto power off control
	if (autoPowerOffState & AUTO_POFF_ACTIVE)
     5da:	80 91 fc 00 	lds	r24, 0x00FC
     5de:	80 ff       	sbrs	r24, 0
     5e0:	25 c0       	rjmp	.+74     	; 0x62c <processRollControl+0x54>
	{
		stopCycleRolling(RESET_POINTS);	
     5e2:	81 e0       	ldi	r24, 0x01	; 1
     5e4:	87 d7       	rcall	.+3854   	; 0x14f4 <stopCycleRolling>
		if ( (adc_status & (SENSOR_ERROR_NO_PRESENT | SENSOR_ERROR_SHORTED)) ||
     5e6:	80 91 6d 01 	lds	r24, 0x016D
     5ea:	83 70       	andi	r24, 0x03	; 3
     5ec:	39 f4       	brne	.+14     	; 0x5fc <processRollControl+0x24>
			 (adc_celsius > (POFF_MOTOR_TRESHOLD + POFF_MOTOR_HYST)) )
     5ee:	80 91 6e 01 	lds	r24, 0x016E
     5f2:	90 91 6f 01 	lds	r25, 0x016F
	
	// Process auto power off control
	if (autoPowerOffState & AUTO_POFF_ACTIVE)
	{
		stopCycleRolling(RESET_POINTS);	
		if ( (adc_status & (SENSOR_ERROR_NO_PRESENT | SENSOR_ERROR_SHORTED)) ||
     5f6:	88 33       	cpi	r24, 0x38	; 56
     5f8:	91 05       	cpc	r25, r1
     5fa:	50 f0       	brcs	.+20     	; 0x610 <processRollControl+0x38>
			 (adc_celsius > (POFF_MOTOR_TRESHOLD + POFF_MOTOR_HYST)) )
		{
			// If there is any sensor error, or
			// if temperature is greater than (threshold + some hysteresis) 
			if (!(rollState & (ROLL_FWD | ROLL_REV)))
     5fc:	80 91 18 01 	lds	r24, 0x0118
     600:	83 70       	andi	r24, 0x03	; 3
     602:	09 f0       	breq	.+2      	; 0x606 <processRollControl+0x2e>
     604:	73 c0       	rjmp	.+230    	; 0x6ec <processRollControl+0x114>
			{
				// If motor is stopped
				setMotorDirection(ROLL_FWD);		// Start rotating in order to prevent rollers damage
     606:	81 e0       	ldi	r24, 0x01	; 1
     608:	54 d7       	rcall	.+3752   	; 0x14b2 <setMotorDirection>
				force_rotate = 0;					// Do not start motor on power off exit
     60a:	10 92 fe 00 	sts	0x00FE, r1
     60e:	6e c0       	rjmp	.+220    	; 0x6ec <processRollControl+0x114>
			}
		}
		else if (adc_celsius <= POFF_MOTOR_TRESHOLD)
     610:	c3 97       	sbiw	r24, 0x33	; 51
     612:	08 f0       	brcs	.+2      	; 0x616 <processRollControl+0x3e>
     614:	6b c0       	rjmp	.+214    	; 0x6ec <processRollControl+0x114>
		{
			if (rollState & (ROLL_FWD | ROLL_REV))
     616:	80 91 18 01 	lds	r24, 0x0118
     61a:	83 70       	andi	r24, 0x03	; 3
     61c:	09 f4       	brne	.+2      	; 0x620 <processRollControl+0x48>
     61e:	66 c0       	rjmp	.+204    	; 0x6ec <processRollControl+0x114>
			{	
				// If temperature is below threshold and motor is rotating
				setMotorDirection(0);			// Stop the motor
     620:	80 e0       	ldi	r24, 0x00	; 0
     622:	47 d7       	rcall	.+3726   	; 0x14b2 <setMotorDirection>
				force_rotate = ROLL_FWD;		// Start motor on power-off mode exit
     624:	81 e0       	ldi	r24, 0x01	; 1
     626:	80 93 fe 00 	sts	0x00FE, r24
     62a:	60 c0       	rjmp	.+192    	; 0x6ec <processRollControl+0x114>
		}
	}
	else
	{
		// Control direction by buttons
		if ((raw_button_state & (BD_ROTFWD | BD_ROTREV)) == (BD_ROTFWD | BD_ROTREV))
     62c:	80 91 ca 01 	lds	r24, 0x01CA
     630:	84 71       	andi	r24, 0x14	; 20
     632:	84 31       	cpi	r24, 0x14	; 20
     634:	11 f4       	brne	.+4      	; 0x63a <processRollControl+0x62>
		{
			// Both Forward and Reverse buttons are pressed - stop
			// Attention - stopping motor when rollers are hot can possibly damage them
			setMotorDirection(0);
     636:	80 e0       	ldi	r24, 0x00	; 0
     638:	19 c0       	rjmp	.+50     	; 0x66c <processRollControl+0x94>
		}
		else if (button_action_down & BD_ROTFWD)
     63a:	80 91 f7 00 	lds	r24, 0x00F7
     63e:	82 ff       	sbrs	r24, 2
     640:	04 c0       	rjmp	.+8      	; 0x64a <processRollControl+0x72>
		{
			setMotorDirection(ROLL_FWD);	
     642:	81 e0       	ldi	r24, 0x01	; 1
     644:	36 d7       	rcall	.+3692   	; 0x14b2 <setMotorDirection>
			beepState |= 0x01;			// pressed FWD button
     646:	c1 e0       	ldi	r28, 0x01	; 1
     648:	13 c0       	rjmp	.+38     	; 0x670 <processRollControl+0x98>
		}		
		else if (button_action_down & BD_ROTREV)
     64a:	84 ff       	sbrs	r24, 4
     64c:	04 c0       	rjmp	.+8      	; 0x656 <processRollControl+0x7e>
		{
			setMotorDirection(ROLL_REV);
     64e:	82 e0       	ldi	r24, 0x02	; 2
     650:	30 d7       	rcall	.+3680   	; 0x14b2 <setMotorDirection>
			beepState |= 0x02;			// pressed REV button
     652:	c2 e0       	ldi	r28, 0x02	; 2
     654:	0d c0       	rjmp	.+26     	; 0x670 <processRollControl+0x98>
		}		
		else if (button_action_long & BD_CYCLE)
     656:	80 91 f4 00 	lds	r24, 0x00F4
     65a:	83 ff       	sbrs	r24, 3
     65c:	04 c0       	rjmp	.+8      	; 0x666 <processRollControl+0x8e>
		{
			stopCycleRolling(RESET_POINTS);		// Reset points and disable CYCLE mode (if was enabled)
     65e:	81 e0       	ldi	r24, 0x01	; 1
     660:	49 d7       	rcall	.+3730   	; 0x14f4 <stopCycleRolling>
			beepState |= 0x08;					// reset of points by long pressing of ROLL button
     662:	c8 e0       	ldi	r28, 0x08	; 8
     664:	05 c0       	rjmp	.+10     	; 0x670 <processRollControl+0x98>
		}
		else if (force_rotate)
     666:	80 91 fe 00 	lds	r24, 0x00FE
     66a:	81 11       	cpse	r24, r1
		{
			// Auto power off mode was exited by pressing some other button, not direction buttons
			// Start roll, but do not beep in this case
			setMotorDirection(force_rotate);
     66c:	22 d7       	rcall	.+3652   	; 0x14b2 <setMotorDirection>


// Function to control motor rotation
void processRollControl(void)
{	
	uint8_t beepState = 0;
     66e:	c0 e0       	ldi	r28, 0x00	; 0
		{
			// Auto power off mode was exited by pressing some other button, not direction buttons
			// Start roll, but do not beep in this case
			setMotorDirection(force_rotate);
		}
		force_rotate = 0;		// First normal pass will clear 
     670:	10 92 fe 00 	sts	0x00FE, r1
			
		if (button_action_up_short & BD_CYCLE)
     674:	80 91 f5 00 	lds	r24, 0x00F5
     678:	83 ff       	sbrs	r24, 3
     67a:	0e c0       	rjmp	.+28     	; 0x698 <processRollControl+0xc0>
		{
			if (rollState & ROLL_CYCLE)
     67c:	80 91 18 01 	lds	r24, 0x0118
     680:	82 ff       	sbrs	r24, 2
     682:	04 c0       	rjmp	.+8      	; 0x68c <processRollControl+0xb4>
			{
				stopCycleRolling(DO_NOT_RESET_POINTS);
     684:	80 e0       	ldi	r24, 0x00	; 0
     686:	36 d7       	rcall	.+3692   	; 0x14f4 <stopCycleRolling>
				beepState |= 0x20;		// stopped cycle
     688:	c0 62       	ori	r28, 0x20	; 32
     68a:	06 c0       	rjmp	.+12     	; 0x698 <processRollControl+0xc0>
			}
			else if (startCycleRolling())
     68c:	6f d7       	rcall	.+3806   	; 0x156c <startCycleRolling>
     68e:	88 23       	and	r24, r24
     690:	11 f0       	breq	.+4      	; 0x696 <processRollControl+0xbe>
			{
				beepState |= 0x10;		// started cycle
     692:	c0 61       	ori	r28, 0x10	; 16
     694:	01 c0       	rjmp	.+2      	; 0x698 <processRollControl+0xc0>
			}
			else
			{
				beepState |= 0x40;		// failed to start cycle
     696:	c0 64       	ori	r28, 0x40	; 64
			}			
		}		
		
		// ROLL_DIR_CHANGED is set only when direction is changed automaticaly,
		// not when changed by calling setMotorDirection() function
		if (rollState & ROLL_DIR_CHANGED)
     698:	80 91 18 01 	lds	r24, 0x0118
     69c:	85 ff       	sbrs	r24, 5
     69e:	04 c0       	rjmp	.+8      	; 0x6a8 <processRollControl+0xd0>
		{
			rollState &= ~ROLL_DIR_CHANGED;
     6a0:	8f 7d       	andi	r24, 0xDF	; 223
     6a2:	80 93 18 01 	sts	0x0118, r24
			beepState |= 0x04;	
     6a6:	c4 60       	ori	r28, 0x04	; 4
		}
		if (rollState & CYCLE_ROLL_DONE)
     6a8:	80 91 18 01 	lds	r24, 0x0118
     6ac:	84 ff       	sbrs	r24, 4
     6ae:	04 c0       	rjmp	.+8      	; 0x6b8 <processRollControl+0xe0>
		{
			rollState &= ~CYCLE_ROLL_DONE;
     6b0:	8f 7e       	andi	r24, 0xEF	; 239
     6b2:	80 93 18 01 	sts	0x0118, r24
			beepState |= 0x80;	
     6b6:	c0 68       	ori	r28, 0x80	; 128
		}		
			
		//-----------//
			
		if (beepState & 0x80)		// Roll cycle done
     6b8:	c7 ff       	sbrs	r28, 7
     6ba:	06 c0       	rjmp	.+12     	; 0x6c8 <processRollControl+0xf0>
		{
			SetBeeperFreq(1000);
     6bc:	88 ee       	ldi	r24, 0xE8	; 232
     6be:	93 e0       	ldi	r25, 0x03	; 3
     6c0:	0a d9       	rcall	.-3564   	; 0xfffff8d6 <__eeprom_end+0xff7ef8cc>
			StartBeep(200);
     6c2:	88 ec       	ldi	r24, 0xC8	; 200
     6c4:	90 e0       	ldi	r25, 0x00	; 0
     6c6:	11 c0       	rjmp	.+34     	; 0x6ea <processRollControl+0x112>
		}		
		else if (beepState & 0x40)	// Roll cycle start fail
     6c8:	c6 ff       	sbrs	r28, 6
     6ca:	03 c0       	rjmp	.+6      	; 0x6d2 <processRollControl+0xfa>
		{
			SetBeeperFreq(500);
     6cc:	84 ef       	ldi	r24, 0xF4	; 244
     6ce:	91 e0       	ldi	r25, 0x01	; 1
     6d0:	09 c0       	rjmp	.+18     	; 0x6e4 <processRollControl+0x10c>
			StartBeep(50);
		} 
		else if (beepState & 0x08)	// Reset points
     6d2:	c3 ff       	sbrs	r28, 3
     6d4:	03 c0       	rjmp	.+6      	; 0x6dc <processRollControl+0x104>
		{
			SetBeeperFreq(800);
     6d6:	80 e2       	ldi	r24, 0x20	; 32
     6d8:	93 e0       	ldi	r25, 0x03	; 3
     6da:	04 c0       	rjmp	.+8      	; 0x6e4 <processRollControl+0x10c>
			StartBeep(50);
		}							// Other
		else if ( beepState & (0x01 | 0x02 | 0x10 | 0x20 | 0x04) )
     6dc:	c7 73       	andi	r28, 0x37	; 55
     6de:	31 f0       	breq	.+12     	; 0x6ec <processRollControl+0x114>
		{
			SetBeeperFreq(1000);
     6e0:	88 ee       	ldi	r24, 0xE8	; 232
     6e2:	93 e0       	ldi	r25, 0x03	; 3
     6e4:	f8 d8       	rcall	.-3600   	; 0xfffff8d6 <__eeprom_end+0xff7ef8cc>
			StartBeep(50);	
     6e6:	82 e3       	ldi	r24, 0x32	; 50
     6e8:	90 e0       	ldi	r25, 0x00	; 0
     6ea:	15 d9       	rcall	.-3542   	; 0xfffff916 <__eeprom_end+0xff7ef90c>
		}			
			
	}

	//----- LED indication ------//
	clearExtraLeds(LED_ROTFWD | LED_ROTREV);
     6ec:	88 e1       	ldi	r24, 0x18	; 24
     6ee:	1f d2       	rcall	.+1086   	; 0xb2e <clearExtraLeds>
	if (rollState & ROLL_FWD)
     6f0:	80 91 18 01 	lds	r24, 0x0118
     6f4:	80 ff       	sbrs	r24, 0
     6f6:	02 c0       	rjmp	.+4      	; 0x6fc <processRollControl+0x124>
		setExtraLeds(LED_ROTFWD);
     6f8:	88 e0       	ldi	r24, 0x08	; 8
     6fa:	03 c0       	rjmp	.+6      	; 0x702 <processRollControl+0x12a>
	else if (rollState & ROLL_REV)
     6fc:	81 ff       	sbrs	r24, 1
     6fe:	03 c0       	rjmp	.+6      	; 0x706 <processRollControl+0x12e>
		setExtraLeds(LED_ROTREV);
     700:	80 e1       	ldi	r24, 0x10	; 16
}
     702:	cf 91       	pop	r28
	//----- LED indication ------//
	clearExtraLeds(LED_ROTFWD | LED_ROTREV);
	if (rollState & ROLL_FWD)
		setExtraLeds(LED_ROTFWD);
	else if (rollState & ROLL_REV)
		setExtraLeds(LED_ROTREV);
     704:	0e c2       	rjmp	.+1052   	; 0xb22 <setExtraLeds>
}
     706:	cf 91       	pop	r28
     708:	08 95       	ret

0000070a <heaterInit>:

void heaterInit(void)
{
	// FIXME
	//processPID(0,adc_normalized);
	processPID(0,adc_filtered);			// oversampled PID control
     70a:	60 91 27 01 	lds	r22, 0x0127
     70e:	70 91 28 01 	lds	r23, 0x0128
     712:	80 e0       	ldi	r24, 0x00	; 0
     714:	90 e0       	ldi	r25, 0x00	; 0
     716:	d4 ce       	rjmp	.-600    	; 0x4c0 <processPID>

00000718 <processHeaterControl>:
}


void processHeaterControl(void)
{
     718:	0f 93       	push	r16
     71a:	1f 93       	push	r17
     71c:	cf 93       	push	r28
     71e:	df 93       	push	r29
	uint16_t setPoint;
	uint16_t processValue;
	uint16_t pid_output;
	
	// Process heater ON/OFF control by button
	if (button_state & BD_HEATCTRL)
     720:	80 91 f8 00 	lds	r24, 0x00F8
     724:	80 ff       	sbrs	r24, 0
     726:	0b c0       	rjmp	.+22     	; 0x73e <processHeaterControl+0x26>
	{
		heaterState ^= HEATER_ENABLED;
     728:	80 91 fd 00 	lds	r24, 0x00FD
     72c:	91 e0       	ldi	r25, 0x01	; 1
     72e:	89 27       	eor	r24, r25
     730:	80 93 fd 00 	sts	0x00FD, r24
		// Force update heater power
		sys_timers.flags |= UPDATE_PID;		// Not very good approach if UPDATE_PID flag is used somewhere else
     734:	80 91 8f 00 	lds	r24, 0x008F
     738:	80 64       	ori	r24, 0x40	; 64
     73a:	80 93 8f 00 	sts	0x008F, r24
	}
	
	// Process auto power off control and sensor errors
	if ((autoPowerOffState & AUTO_POFF_ACTIVE) || (adc_status & (SENSOR_ERROR_NO_PRESENT | SENSOR_ERROR_SHORTED)))
     73e:	80 91 fc 00 	lds	r24, 0x00FC
     742:	80 fd       	sbrc	r24, 0
     744:	04 c0       	rjmp	.+8      	; 0x74e <processHeaterControl+0x36>
     746:	80 91 6d 01 	lds	r24, 0x016D
     74a:	83 70       	andi	r24, 0x03	; 3
     74c:	29 f0       	breq	.+10     	; 0x758 <processHeaterControl+0x40>
	{
		heaterState &= ~HEATER_ENABLED;
     74e:	80 91 fd 00 	lds	r24, 0x00FD
     752:	8e 7f       	andi	r24, 0xFE	; 254
     754:	80 93 fd 00 	sts	0x00FD, r24
	}		
	
	// Check if heater control should be updated
	// PID call interval is a multiple of Celsius update interval. 
	if (sys_timers.flags & UPDATE_PID)
     758:	80 91 8f 00 	lds	r24, 0x008F
     75c:	86 ff       	sbrs	r24, 6
     75e:	40 c0       	rjmp	.+128    	; 0x7e0 <processHeaterControl+0xc8>
	{
		// Convert temperature setup to equal ADC value
		set_value_adc = conv_Celsius_to_ADC(p.setup_temp_value);					
     760:	80 91 9f 01 	lds	r24, 0x019F
     764:	90 e0       	ldi	r25, 0x00	; 0
     766:	39 dd       	rcall	.-1422   	; 0x1da <conv_Celsius_to_ADC>

		setPoint = set_value_adc * 4;		
     768:	ec 01       	movw	r28, r24
     76a:	cc 0f       	add	r28, r28
     76c:	dd 1f       	adc	r29, r29
     76e:	cc 0f       	add	r28, r28
     770:	dd 1f       	adc	r29, r29
		setPoint >>= 1;
     772:	d6 95       	lsr	r29
     774:	c7 95       	ror	r28
		processValue = adc_filtered >> 1;	// normal PID control
     776:	00 91 27 01 	lds	r16, 0x0127
     77a:	10 91 28 01 	lds	r17, 0x0128
     77e:	16 95       	lsr	r17
     780:	07 95       	ror	r16
		
		// Process PID
		pid_output = processPID(setPoint, processValue);		
     782:	b8 01       	movw	r22, r16
     784:	ce 01       	movw	r24, r28
     786:	9c de       	rcall	.-712    	; 0x4c0 <processPID>
					
		// If heater is disabled, override output
		if (!(heaterState & HEATER_ENABLED))
     788:	90 91 fd 00 	lds	r25, 0x00FD
     78c:	90 ff       	sbrs	r25, 0
     78e:	06 c0       	rjmp	.+12     	; 0x79c <processHeaterControl+0x84>
			pid_output = 0;
		// If unregulated mode is selected, set full power
		else if (p.setup_temp_value >= MAX_SET_TEMP)
     790:	90 91 9f 01 	lds	r25, 0x019F
     794:	9f 3f       	cpi	r25, 0xFF	; 255
     796:	29 f0       	breq	.+10     	; 0x7a2 <processHeaterControl+0x8a>
		setPoint = set_value_adc * 4;		
		setPoint >>= 1;
		processValue = adc_filtered >> 1;	// normal PID control
		
		// Process PID
		pid_output = processPID(setPoint, processValue);		
     798:	90 e0       	ldi	r25, 0x00	; 0
     79a:	05 c0       	rjmp	.+10     	; 0x7a6 <processHeaterControl+0x8e>
					
		// If heater is disabled, override output
		if (!(heaterState & HEATER_ENABLED))
			pid_output = 0;
     79c:	80 e0       	ldi	r24, 0x00	; 0
     79e:	90 e0       	ldi	r25, 0x00	; 0
     7a0:	02 c0       	rjmp	.+4      	; 0x7a6 <processHeaterControl+0x8e>
		// If unregulated mode is selected, set full power
		else if (p.setup_temp_value >= MAX_SET_TEMP)
			pid_output = HEATER_MAX_POWER;		// This mode must be used with care for calibration only
     7a2:	84 e6       	ldi	r24, 0x64	; 100
     7a4:	90 e0       	ldi	r25, 0x00	; 0
			
		// Set new heater power value	
		setHeaterPower(pid_output);	
     7a6:	78 d6       	rcall	.+3312   	; 0x1498 <setHeaterPower>
		
		
		//------- Debug --------//		
		// PID input:
		dbg_SetPointCelsius = (heaterState & HEATER_ENABLED) ? p.setup_temp_value : 0;
     7a8:	80 91 fd 00 	lds	r24, 0x00FD
     7ac:	98 2f       	mov	r25, r24
     7ae:	91 70       	andi	r25, 0x01	; 1
     7b0:	80 ff       	sbrs	r24, 0
     7b2:	03 c0       	rjmp	.+6      	; 0x7ba <processHeaterControl+0xa2>
     7b4:	80 91 9f 01 	lds	r24, 0x019F
     7b8:	01 c0       	rjmp	.+2      	; 0x7bc <processHeaterControl+0xa4>
     7ba:	80 e0       	ldi	r24, 0x00	; 0
     7bc:	80 93 98 01 	sts	0x0198, r24
		dbg_SetPointPID = (heaterState & HEATER_ENABLED) ? setPoint : 0;
     7c0:	91 11       	cpse	r25, r1
     7c2:	02 c0       	rjmp	.+4      	; 0x7c8 <processHeaterControl+0xb0>
     7c4:	c0 e0       	ldi	r28, 0x00	; 0
     7c6:	d0 e0       	ldi	r29, 0x00	; 0
     7c8:	d0 93 b6 01 	sts	0x01B6, r29
     7cc:	c0 93 b5 01 	sts	0x01B5, r28
		dbg_RealTempCelsius = adc_filtered;
     7d0:	80 91 27 01 	lds	r24, 0x0127
     7d4:	80 93 b7 01 	sts	0x01B7, r24
		dbg_RealTempPID = processValue;
     7d8:	10 93 a8 01 	sts	0x01A8, r17
     7dc:	00 93 a7 01 	sts	0x01A7, r16
		
	}	
		
	
	//----- LED indication ------//
	if (heaterState & HEATER_ENABLED)
     7e0:	80 91 fd 00 	lds	r24, 0x00FD
     7e4:	80 ff       	sbrs	r24, 0
     7e6:	06 c0       	rjmp	.+12     	; 0x7f4 <processHeaterControl+0xdc>
		setExtraLeds(LED_HEATER);
     7e8:	84 e0       	ldi	r24, 0x04	; 4
	else
		clearExtraLeds(LED_HEATER);
	
}
     7ea:	df 91       	pop	r29
     7ec:	cf 91       	pop	r28
     7ee:	1f 91       	pop	r17
     7f0:	0f 91       	pop	r16
	}	
		
	
	//----- LED indication ------//
	if (heaterState & HEATER_ENABLED)
		setExtraLeds(LED_HEATER);
     7f2:	97 c1       	rjmp	.+814    	; 0xb22 <setExtraLeds>
	else
		clearExtraLeds(LED_HEATER);
     7f4:	84 e0       	ldi	r24, 0x04	; 4
	
}
     7f6:	df 91       	pop	r29
     7f8:	cf 91       	pop	r28
     7fa:	1f 91       	pop	r17
     7fc:	0f 91       	pop	r16
	
	//----- LED indication ------//
	if (heaterState & HEATER_ENABLED)
		setExtraLeds(LED_HEATER);
	else
		clearExtraLeds(LED_HEATER);
     7fe:	97 c1       	rjmp	.+814    	; 0xb2e <clearExtraLeds>

00000800 <processHeaterAlerts>:
// Function to process all heater alerts:
//	- sensor errors
//	- getting near to desired temperature
//	- continuous heating when disabled
void processHeaterAlerts(void)
{
     800:	cf 93       	push	r28
     802:	df 93       	push	r29
	static uint8_t tempAlertRange = TEMP_ALERT_RANGE;
	static uint16_t refCapturedTemp = 0xFFFF;
	uint16_t currentTemperature = adc_celsius;
     804:	c0 91 6e 01 	lds	r28, 0x016E
     808:	d0 91 6f 01 	lds	r29, 0x016F
	
	// ADC sensor errors alert
	if (adc_status & (SENSOR_ERROR_NO_PRESENT | SENSOR_ERROR_SHORTED))
     80c:	80 91 6d 01 	lds	r24, 0x016D
     810:	83 70       	andi	r24, 0x03	; 3
     812:	59 f0       	breq	.+22     	; 0x82a <processHeaterAlerts+0x2a>
	{
		if (sys_timers.flags & EXPIRED_10SEC)
     814:	80 91 8f 00 	lds	r24, 0x008F
     818:	81 ff       	sbrs	r24, 1
     81a:	4c c0       	rjmp	.+152    	; 0x8b4 <processHeaterAlerts+0xb4>
		{
			// Enable beeper output regardless of menu setting
			OverrideSoundDisable();
     81c:	8e d8       	rcall	.-3812   	; 0xfffff93a <__eeprom_end+0xff7ef930>
			SetBeeperFreq(800);
     81e:	80 e2       	ldi	r24, 0x20	; 32
     820:	93 e0       	ldi	r25, 0x03	; 3
     822:	59 d8       	rcall	.-3918   	; 0xfffff8d6 <__eeprom_end+0xff7ef8cc>
			StartBeep(2000);	
     824:	80 ed       	ldi	r24, 0xD0	; 208
     826:	97 e0       	ldi	r25, 0x07	; 7
     828:	42 c0       	rjmp	.+132    	; 0x8ae <processHeaterAlerts+0xae>
		return;
	}
	
	
	// Indicate reaching of desired temperature
	if ( (currentTemperature > p.setup_temp_value - tempAlertRange) && (currentTemperature < p.setup_temp_value + tempAlertRange) )
     82a:	20 91 9f 01 	lds	r18, 0x019F
     82e:	30 e0       	ldi	r19, 0x00	; 0
     830:	60 91 80 00 	lds	r22, 0x0080
     834:	86 2f       	mov	r24, r22
     836:	90 e0       	ldi	r25, 0x00	; 0
     838:	a9 01       	movw	r20, r18
     83a:	48 1b       	sub	r20, r24
     83c:	59 0b       	sbc	r21, r25
     83e:	4c 17       	cp	r20, r28
     840:	5d 07       	cpc	r21, r29
     842:	98 f4       	brcc	.+38     	; 0x86a <processHeaterAlerts+0x6a>
     844:	82 0f       	add	r24, r18
     846:	93 1f       	adc	r25, r19
     848:	c8 17       	cp	r28, r24
     84a:	d9 07       	cpc	r29, r25
     84c:	70 f4       	brcc	.+28     	; 0x86a <processHeaterAlerts+0x6a>
	{
		if ((tempAlertRange == TEMP_ALERT_RANGE) && (heaterState & HEATER_ENABLED))
     84e:	65 30       	cpi	r22, 0x05	; 5
     850:	51 f4       	brne	.+20     	; 0x866 <processHeaterAlerts+0x66>
     852:	80 91 fd 00 	lds	r24, 0x00FD
     856:	80 ff       	sbrs	r24, 0
     858:	06 c0       	rjmp	.+12     	; 0x866 <processHeaterAlerts+0x66>
		{
			SetBeeperFreq(1000);
     85a:	88 ee       	ldi	r24, 0xE8	; 232
     85c:	93 e0       	ldi	r25, 0x03	; 3
     85e:	3b d8       	rcall	.-3978   	; 0xfffff8d6 <__eeprom_end+0xff7ef8cc>
			StartBeep(400);
     860:	80 e9       	ldi	r24, 0x90	; 144
     862:	91 e0       	ldi	r25, 0x01	; 1
     864:	58 d8       	rcall	.-3920   	; 0xfffff916 <__eeprom_end+0xff7ef90c>
		}
		// Add some hysteresis
		tempAlertRange = TEMP_ALERT_RANGE + TEMP_ALERT_HYST;
     866:	8a e0       	ldi	r24, 0x0A	; 10
     868:	01 c0       	rjmp	.+2      	; 0x86c <processHeaterAlerts+0x6c>
	}			
	else
	{
		tempAlertRange = TEMP_ALERT_RANGE;
     86a:	85 e0       	ldi	r24, 0x05	; 5
     86c:	80 93 80 00 	sts	0x0080, r24
	// Growing temperature with heater disabled alert 
	// This alert is done regardless of global sound enable
	// A false triggering may occur if ambient temperature grows.
	// To reset the warning in this case just turn on heater for at least one systimer tick (50ms)
	// If heater is enabled, it is implied that user controls heating process
	if (heaterState & (HEATER_ENABLED | CALIBRATION_ACTIVE))
     870:	80 91 fd 00 	lds	r24, 0x00FD
     874:	83 70       	andi	r24, 0x03	; 3
     876:	09 f0       	breq	.+2      	; 0x87a <processHeaterAlerts+0x7a>
     878:	0b c0       	rjmp	.+22     	; 0x890 <processHeaterAlerts+0x90>
	{
		// Heater enabled, just save current temperature as reference
		// Same if calibration in progress, even if heater is disabled
		refCapturedTemp = currentTemperature;
	}
	else if (sys_timers.flags & EXPIRED_10SEC)
     87a:	80 91 8f 00 	lds	r24, 0x008F
     87e:	81 ff       	sbrs	r24, 1
     880:	19 c0       	rjmp	.+50     	; 0x8b4 <processHeaterAlerts+0xb4>
	{
		// Heater disabled. If temperature is falling,
		if (currentTemperature < refCapturedTemp)
     882:	80 91 81 00 	lds	r24, 0x0081
     886:	90 91 82 00 	lds	r25, 0x0082
     88a:	c8 17       	cp	r28, r24
     88c:	d9 07       	cpc	r29, r25
     88e:	28 f4       	brcc	.+10     	; 0x89a <processHeaterAlerts+0x9a>
		{
			// save current temperature as reference
			refCapturedTemp = currentTemperature;
     890:	d0 93 82 00 	sts	0x0082, r29
     894:	c0 93 81 00 	sts	0x0081, r28
     898:	0d c0       	rjmp	.+26     	; 0x8b4 <processHeaterAlerts+0xb4>
		else
		{
			// Heater is disabled. If current temperature is higher than reference + some safe interval,
			// there might be a hardware failure - short circuit, etc
			// BEEP like a devil  }:-(
			if (currentTemperature >= (refCapturedTemp + SAFE_TEMP_INTERVAL))
     89a:	44 96       	adiw	r24, 0x14	; 20
     89c:	c8 17       	cp	r28, r24
     89e:	d9 07       	cpc	r29, r25
     8a0:	48 f0       	brcs	.+18     	; 0x8b4 <processHeaterAlerts+0xb4>
			{
				// Enable beeper output regardless of menu setting
				OverrideSoundDisable();
     8a2:	4b d8       	rcall	.-3946   	; 0xfffff93a <__eeprom_end+0xff7ef930>
				SetBeeperFreq(1500);
     8a4:	8c ed       	ldi	r24, 0xDC	; 220
     8a6:	95 e0       	ldi	r25, 0x05	; 5
     8a8:	16 d8       	rcall	.-4052   	; 0xfffff8d6 <__eeprom_end+0xff7ef8cc>
				StartBeep(5000);	
     8aa:	88 e8       	ldi	r24, 0x88	; 136
     8ac:	93 e1       	ldi	r25, 0x13	; 19
			}
		}
	}
	

}
     8ae:	df 91       	pop	r29
     8b0:	cf 91       	pop	r28
			if (currentTemperature >= (refCapturedTemp + SAFE_TEMP_INTERVAL))
			{
				// Enable beeper output regardless of menu setting
				OverrideSoundDisable();
				SetBeeperFreq(1500);
				StartBeep(5000);	
     8b2:	31 c8       	rjmp	.-3998   	; 0xfffff916 <__eeprom_end+0xff7ef90c>
			}
		}
	}
	

}
     8b4:	df 91       	pop	r29
     8b6:	cf 91       	pop	r28
     8b8:	08 95       	ret

000008ba <restoreGlobalParams>:


void restoreGlobalParams(void)
{
	// Restore global parameters - temperature setting, sound enable, etc.
	eeprom_read_block(&p,&eeGlobalParams,sizeof(eeGlobalParams));
     8ba:	44 e0       	ldi	r20, 0x04	; 4
     8bc:	50 e0       	ldi	r21, 0x00	; 0
     8be:	66 e0       	ldi	r22, 0x06	; 6
     8c0:	70 e0       	ldi	r23, 0x00	; 0
     8c2:	8f e9       	ldi	r24, 0x9F	; 159
     8c4:	91 e0       	ldi	r25, 0x01	; 1
     8c6:	1c d9       	rcall	.-3528   	; 0xfffffb00 <__eeprom_end+0xff7efaf6>
	// Restore ADC calibration parameters
	eeprom_read_block(&cp,&eeCalibrationParams,sizeof(eeCalibrationParams));	 
     8c8:	46 e0       	ldi	r20, 0x06	; 6
     8ca:	50 e0       	ldi	r21, 0x00	; 0
     8cc:	60 e0       	ldi	r22, 0x00	; 0
     8ce:	70 e0       	ldi	r23, 0x00	; 0
     8d0:	89 e9       	ldi	r24, 0x99	; 153
     8d2:	91 e0       	ldi	r25, 0x01	; 1
     8d4:	15 c9       	rjmp	.-3542   	; 0xfffffb00 <__eeprom_end+0xff7efaf6>

000008d6 <saveCalibrationToEEPROM>:
}


void saveCalibrationToEEPROM(void)
{
	eeprom_update_block(&cp,&eeCalibrationParams,sizeof(eeCalibrationParams));	
     8d6:	46 e0       	ldi	r20, 0x06	; 6
     8d8:	50 e0       	ldi	r21, 0x00	; 0
     8da:	60 e0       	ldi	r22, 0x00	; 0
     8dc:	70 e0       	ldi	r23, 0x00	; 0
     8de:	89 e9       	ldi	r24, 0x99	; 153
     8e0:	91 e0       	ldi	r25, 0x01	; 1
     8e2:	1e c9       	rjmp	.-3524   	; 0xfffffb20 <__eeprom_end+0xff7efb16>

000008e4 <exitPowerOff>:


void exitPowerOff(void)
{
	// Put all ports into HI-Z
	DDRB = 0x00;
     8e4:	17 ba       	out	0x17, r1	; 23
	PORTB = 0x00;
     8e6:	18 ba       	out	0x18, r1	; 24
	DDRC = 0x00;
     8e8:	14 ba       	out	0x14, r1	; 20
	PORTC = 0x00;
     8ea:	15 ba       	out	0x15, r1	; 21
	DDRD = 0x00;
     8ec:	11 ba       	out	0x11, r1	; 17
	PORTD = 0x00;
     8ee:	12 ba       	out	0x12, r1	; 18
	
	// Disable all interrupts
	cli();
     8f0:	f8 94       	cli
	
	// Save global parameters to EEPROM
	// Calibration parameters are only saved after calibrating 
	eeprom_update_block(&p,&eeGlobalParams,sizeof(eeGlobalParams));	
     8f2:	44 e0       	ldi	r20, 0x04	; 4
     8f4:	50 e0       	ldi	r21, 0x00	; 0
     8f6:	66 e0       	ldi	r22, 0x06	; 6
     8f8:	70 e0       	ldi	r23, 0x00	; 0
     8fa:	8f e9       	ldi	r24, 0x9F	; 159
     8fc:	91 e0       	ldi	r25, 0x01	; 1
     8fe:	10 d9       	rcall	.-3552   	; 0xfffffb20 <__eeprom_end+0xff7efb16>
     900:	ff cf       	rjmp	.-2      	; 0x900 <exitPowerOff+0x1c>

00000902 <decode_led_char>:
//---------------------------------------------//
// Decodes normal string literal to the
//	7-segment representation
//---------------------------------------------//
static uint8_t decode_led_char(char c)
{
     902:	20 e0       	ldi	r18, 0x00	; 0
     904:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t i;
	encode_7seg_pair encode_pair;
	for (i = 0; i < sizeof(led_encode_table)/sizeof(encode_7seg_pair); i++  )
	{
		encode_pair.code = pgm_read_byte(&led_encode_table[i].code);
     906:	a9 01       	movw	r20, r18
     908:	44 0f       	add	r20, r20
     90a:	55 1f       	adc	r21, r21
     90c:	fa 01       	movw	r30, r20
     90e:	ea 5d       	subi	r30, 0xDA	; 218
     910:	ff 4f       	sbci	r31, 0xFF	; 255
     912:	e4 91       	lpm	r30, Z
		if (encode_pair.code == c)
     914:	e8 13       	cpse	r30, r24
     916:	05 c0       	rjmp	.+10     	; 0x922 <decode_led_char+0x20>
		{
			i = pgm_read_byte(&led_encode_table[i].segdata);
     918:	fa 01       	movw	r30, r20
     91a:	e9 5d       	subi	r30, 0xD9	; 217
     91c:	ff 4f       	sbci	r31, 0xFF	; 255
     91e:	84 91       	lpm	r24, Z
     920:	08 95       	ret
     922:	2f 5f       	subi	r18, 0xFF	; 255
     924:	3f 4f       	sbci	r19, 0xFF	; 255
//---------------------------------------------//
static uint8_t decode_led_char(char c)
{
	uint8_t i;
	encode_7seg_pair encode_pair;
	for (i = 0; i < sizeof(led_encode_table)/sizeof(encode_7seg_pair); i++  )
     926:	2c 31       	cpi	r18, 0x1C	; 28
     928:	31 05       	cpc	r19, r1
     92a:	69 f7       	brne	.-38     	; 0x906 <decode_led_char+0x4>
			return i;
		}		
	}			
	// No item was found - return argument value
	return  c;
}
     92c:	08 95       	ret

0000092e <wrap_led_buffer_index>:
//---------------------------------------------//
// Ensures that index is inside the buffer
// -128 <= index <= 127
//---------------------------------------------//
static uint8_t wrap_led_buffer_index(int8_t buf_index)
{
     92e:	28 2f       	mov	r18, r24
	uint8_t new_index_u;
	new_index_u = (uint8_t) ((buf_index < 0) ? -buf_index : buf_index);
     930:	87 fd       	sbrc	r24, 7
     932:	81 95       	neg	r24
	if (new_index_u >= LED_BUFFER_LENGTH)
     934:	8e 30       	cpi	r24, 0x0E	; 14
     936:	18 f0       	brcs	.+6      	; 0x93e <wrap_led_buffer_index+0x10>
		new_index_u = new_index_u % LED_BUFFER_LENGTH;
     938:	6e e0       	ldi	r22, 0x0E	; 14
     93a:	50 d8       	rcall	.-3936   	; 0xfffff9dc <__eeprom_end+0xff7ef9d2>
     93c:	89 2f       	mov	r24, r25
	new_index_u = ((buf_index >= 0) || (new_index_u == 0)) ? new_index_u :  LED_BUFFER_LENGTH - new_index_u ;
     93e:	27 ff       	sbrs	r18, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <wrap_led_buffer_index+0x1e>
     942:	88 23       	and	r24, r24
     944:	19 f0       	breq	.+6      	; 0x94c <wrap_led_buffer_index+0x1e>
     946:	9e e0       	ldi	r25, 0x0E	; 14
     948:	98 1b       	sub	r25, r24
     94a:	89 2f       	mov	r24, r25
	return new_index_u;
}
     94c:	08 95       	ret

0000094e <processLedIndicator>:
// Call this function N times per sec to get N/NUM_DIGITS_TOTAL display update rate, where
// NUM_DIGITS_TOTAL is number_of_digits_of_LED_display if no extra LEDs are used or
// (number_of_digits_of_LED_display + 1) otherwise.
//---------------------------------------------//
void processLedIndicator()
{
     94e:	cf 93       	push	r28
	uint8_t next_wActivePos;
	
	// Turn off segments
	#ifdef CLEAN_OPERATION
	disable_led_segments();
     950:	21 d1       	rcall	.+578    	; 0xb94 <disable_led_segments>
	#endif
	
	
	// Perform regular shift
	led_clock_pulse(!LED_DIGIT_ACT_LVL);
     952:	81 e0       	ldi	r24, 0x01	; 1
     954:	f3 d0       	rcall	.+486    	; 0xb3c <led_clock_pulse>
	
	// Switch on active window item position
	switch (wActivePos)
     956:	c0 91 04 01 	lds	r28, 0x0104
     95a:	cc 23       	and	r28, r28
     95c:	19 f0       	breq	.+6      	; 0x964 <processLedIndicator+0x16>
     95e:	c6 30       	cpi	r28, 0x06	; 6
     960:	c1 f5       	brne	.+112    	; 0x9d2 <processLedIndicator+0x84>
     962:	0f c0       	rjmp	.+30     	; 0x982 <processLedIndicator+0x34>
	case 0:
		// Get buttons
		#ifndef CLEAN_OPERATION
		disable_led_segments();
		#endif
		enable_led_segments_pullups();
     964:	09 d1       	rcall	.+530    	; 0xb78 <enable_led_segments_pullups>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     966:	85 e3       	ldi	r24, 0x35	; 53
     968:	8a 95       	dec	r24
     96a:	f1 f7       	brne	.-4      	; 0x968 <processLedIndicator+0x1a>
     96c:	00 00       	nop
		_delay_us(PULLUP_DELAY_US);
		capture_button_state();
     96e:	19 d1       	rcall	.+562    	; 0xba2 <capture_button_state>
		#ifndef CLEAN_OPERATION
		enable_led_segments();
		#endif
		// Start new cycle with active digit level
		led_clock_pulse(LED_DIGIT_ACT_LVL);
     970:	80 e0       	ldi	r24, 0x00	; 0
     972:	e4 d0       	rcall	.+456    	; 0xb3c <led_clock_pulse>
		// Always start new cycle from specified buffer start position
		bufActivePos = wStartPos;
     974:	80 91 b9 01 	lds	r24, 0x01B9
     978:	80 93 03 01 	sts	0x0103, r24
		next_wActivePos = wActivePos + 1;
     97c:	c0 91 04 01 	lds	r28, 0x0104
     980:	28 c0       	rjmp	.+80     	; 0x9d2 <processLedIndicator+0x84>
//---------------------------------------------//
// Performs window shifting
//---------------------------------------------//
static void processWindowShifter(void)
{
	if (shifterState == LED_SHIFT_DONE)
     982:	80 91 ba 01 	lds	r24, 0x01BA
     986:	81 11       	cpse	r24, r1
     988:	01 c0       	rjmp	.+2      	; 0x98c <processLedIndicator+0x3e>
     98a:	1b c0       	rjmp	.+54     	; 0x9c2 <processLedIndicator+0x74>
		return;
	
	// Process shift timer
	processSoftTimer8b(&shiftTimer);	
     98c:	85 e0       	ldi	r24, 0x05	; 5
     98e:	91 e0       	ldi	r25, 0x01	; 1
     990:	0c d7       	rcall	.+3608   	; 0x17aa <processSoftTimer8b>
	
	if (shiftTimer.FTop)
     992:	80 91 05 01 	lds	r24, 0x0105
     996:	85 ff       	sbrs	r24, 5
     998:	14 c0       	rjmp	.+40     	; 0x9c2 <processLedIndicator+0x74>
	{
		// Check if finished
		if (wStartPos == bufStartPos)	
     99a:	80 91 b9 01 	lds	r24, 0x01B9
     99e:	90 91 bb 01 	lds	r25, 0x01BB
     9a2:	89 13       	cpse	r24, r25
     9a4:	03 c0       	rjmp	.+6      	; 0x9ac <processLedIndicator+0x5e>
		{
			// Update state
			shifterState = LED_SHIFT_DONE;
     9a6:	10 92 ba 01 	sts	0x01BA, r1
     9aa:	0b c0       	rjmp	.+22     	; 0x9c2 <processLedIndicator+0x74>
		}
		else if (shifterState == LED_SHIFT_RIGHT)
     9ac:	90 91 ba 01 	lds	r25, 0x01BA
     9b0:	92 30       	cpi	r25, 0x02	; 2
     9b2:	49 f4       	brne	.+18     	; 0x9c6 <processLedIndicator+0x78>
// Increments index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t inc_buffer_position(uint8_t position)
{
	return (position >= LED_BUFFER_LENGTH - 1) ? 0 : position + 1;
     9b4:	8d 30       	cpi	r24, 0x0D	; 13
     9b6:	10 f4       	brcc	.+4      	; 0x9bc <processLedIndicator+0x6e>
     9b8:	8f 5f       	subi	r24, 0xFF	; 255
     9ba:	01 c0       	rjmp	.+2      	; 0x9be <processLedIndicator+0x70>
     9bc:	80 e0       	ldi	r24, 0x00	; 0
			// Update state
			shifterState = LED_SHIFT_DONE;
		}
		else if (shifterState == LED_SHIFT_RIGHT)
		{
			wStartPos = inc_buffer_position(wStartPos);	
     9be:	80 93 b9 01 	sts	0x01B9, r24
		// Always start new cycle from specified buffer start position
		bufActivePos = wStartPos;
		next_wActivePos = wActivePos + 1;
		break;
	case NUM_DIGITS_TOTAL-1:
		next_wActivePos = 0;
     9c2:	c0 e0       	ldi	r28, 0x00	; 0
     9c4:	07 c0       	rjmp	.+14     	; 0x9d4 <processLedIndicator+0x86>
// Decrements index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t dec_buffer_position(uint8_t position)
{
	return (position == 0) ? LED_BUFFER_LENGTH - 1 : position - 1;
     9c6:	88 23       	and	r24, r24
     9c8:	11 f0       	breq	.+4      	; 0x9ce <processLedIndicator+0x80>
     9ca:	81 50       	subi	r24, 0x01	; 1
     9cc:	f8 cf       	rjmp	.-16     	; 0x9be <processLedIndicator+0x70>
     9ce:	8d e0       	ldi	r24, 0x0D	; 13
     9d0:	f6 cf       	rjmp	.-20     	; 0x9be <processLedIndicator+0x70>
		next_wActivePos = 0;
		// Shift LED window
		processWindowShifter();	
		break;
	default:
		next_wActivePos = wActivePos + 1;
     9d2:	cf 5f       	subi	r28, 0xFF	; 255
		break;
	}		
	
	#ifdef 	USE_EXTRA_LED_DIGIT
	if (wActivePos == EXTRA_DIGIT_NUM)
     9d4:	80 91 04 01 	lds	r24, 0x0104
     9d8:	86 30       	cpi	r24, 0x06	; 6
     9da:	21 f4       	brne	.+8      	; 0x9e4 <processLedIndicator+0x96>
	{
		// Output separate LEDs state
		set_led_segments(extra_led_state);
     9dc:	80 91 b8 01 	lds	r24, 0x01B8
     9e0:	bd d0       	rcall	.+378    	; 0xb5c <set_led_segments>
     9e2:	10 c0       	rjmp	.+32     	; 0xa04 <processLedIndicator+0xb6>
	}
	else
	#endif
	{
		// Output new segment data
		set_led_segments(led_data_buffer[bufActivePos]);
     9e4:	e0 91 03 01 	lds	r30, 0x0103
     9e8:	f0 e0       	ldi	r31, 0x00	; 0
     9ea:	e4 54       	subi	r30, 0x44	; 68
     9ec:	fe 4f       	sbci	r31, 0xFE	; 254
     9ee:	80 81       	ld	r24, Z
     9f0:	b5 d0       	rcall	.+362    	; 0xb5c <set_led_segments>
		// Wrap around buffer length
		bufActivePos = inc_buffer_position(bufActivePos );
     9f2:	80 91 03 01 	lds	r24, 0x0103
// Increments index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t inc_buffer_position(uint8_t position)
{
	return (position >= LED_BUFFER_LENGTH - 1) ? 0 : position + 1;
     9f6:	8d 30       	cpi	r24, 0x0D	; 13
     9f8:	10 f4       	brcc	.+4      	; 0x9fe <processLedIndicator+0xb0>
     9fa:	8f 5f       	subi	r24, 0xFF	; 255
     9fc:	01 c0       	rjmp	.+2      	; 0xa00 <processLedIndicator+0xb2>
     9fe:	80 e0       	ldi	r24, 0x00	; 0
	#endif
	{
		// Output new segment data
		set_led_segments(led_data_buffer[bufActivePos]);
		// Wrap around buffer length
		bufActivePos = inc_buffer_position(bufActivePos );
     a00:	80 93 03 01 	sts	0x0103, r24
	}
		
	wActivePos = next_wActivePos;
     a04:	c0 93 04 01 	sts	0x0104, r28
	
	#ifdef CLEAN_OPERATION
	enable_led_segments();
	#endif

}
     a08:	cf 91       	pop	r28
	}
		
	wActivePos = next_wActivePos;
	
	#ifdef CLEAN_OPERATION
	enable_led_segments();
     a0a:	bd c0       	rjmp	.+378    	; 0xb86 <enable_led_segments>

00000a0c <fillLedBuffer>:
//---------------------------------------------//
// Fills buffer from (bufStartPos + offset) 
//	position with single char
//---------------------------------------------//
void fillLedBuffer(int8_t offset, uint8_t length, char c)
{
     a0c:	0f 93       	push	r16
     a0e:	1f 93       	push	r17
     a10:	cf 93       	push	r28
     a12:	df 93       	push	r29
     a14:	1f 92       	push	r1
     a16:	cd b7       	in	r28, 0x3d	; 61
     a18:	de b7       	in	r29, 0x3e	; 62
     a1a:	18 2f       	mov	r17, r24
     a1c:	84 2f       	mov	r24, r20
	uint8_t val = decode_led_char(c);
     a1e:	69 83       	std	Y+1, r22	; 0x01
     a20:	70 df       	rcall	.-288    	; 0x902 <decode_led_char>
     a22:	08 2f       	mov	r16, r24
	// Ensure index is inside the buffer
	uint8_t position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
     a24:	80 91 bb 01 	lds	r24, 0x01BB
     a28:	81 0f       	add	r24, r17
     a2a:	81 df       	rcall	.-254    	; 0x92e <wrap_led_buffer_index>
	while(length--)
     a2c:	69 81       	ldd	r22, Y+1	; 0x01
     a2e:	0a c0       	rjmp	.+20     	; 0xa44 <fillLedBuffer+0x38>
	{
		led_data_buffer[position] = val;
     a30:	e8 2f       	mov	r30, r24
     a32:	f0 e0       	ldi	r31, 0x00	; 0
     a34:	e4 54       	subi	r30, 0x44	; 68
     a36:	fe 4f       	sbci	r31, 0xFE	; 254
     a38:	00 83       	st	Z, r16
// Increments index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t inc_buffer_position(uint8_t position)
{
	return (position >= LED_BUFFER_LENGTH - 1) ? 0 : position + 1;
     a3a:	8d 30       	cpi	r24, 0x0D	; 13
     a3c:	10 f4       	brcc	.+4      	; 0xa42 <fillLedBuffer+0x36>
     a3e:	8f 5f       	subi	r24, 0xFF	; 255
     a40:	01 c0       	rjmp	.+2      	; 0xa44 <fillLedBuffer+0x38>
     a42:	80 e0       	ldi	r24, 0x00	; 0
void fillLedBuffer(int8_t offset, uint8_t length, char c)
{
	uint8_t val = decode_led_char(c);
	// Ensure index is inside the buffer
	uint8_t position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
	while(length--)
     a44:	61 50       	subi	r22, 0x01	; 1
     a46:	a0 f7       	brcc	.-24     	; 0xa30 <fillLedBuffer+0x24>
	{
		led_data_buffer[position] = val;
		position = inc_buffer_position(position);
	}
}
     a48:	0f 90       	pop	r0
     a4a:	df 91       	pop	r29
     a4c:	cf 91       	pop	r28
     a4e:	1f 91       	pop	r17
     a50:	0f 91       	pop	r16
     a52:	08 95       	ret

00000a54 <startShiftingWindowLeft>:
//	LED window left 
//---------------------------------------------//
void startShiftingWindowLeft(void)
{
	// Clear spaces between menu states
	fillLedBuffer(-2,2,' ');
     a54:	40 e2       	ldi	r20, 0x20	; 32
     a56:	62 e0       	ldi	r22, 0x02	; 2
     a58:	8e ef       	ldi	r24, 0xFE	; 254
     a5a:	d8 df       	rcall	.-80     	; 0xa0c <fillLedBuffer>
	// Set new buffer position for writing
	bufStartPos = wrap_led_buffer_index( (int8_t)bufStartPos - (NUM_DIGITS + 2) );
     a5c:	80 91 bb 01 	lds	r24, 0x01BB
     a60:	88 50       	subi	r24, 0x08	; 8
     a62:	65 df       	rcall	.-310    	; 0x92e <wrap_led_buffer_index>
     a64:	80 93 bb 01 	sts	0x01BB, r24
	// Set shifter state
	shifterState = LED_SHIFT_LEFT;
     a68:	81 e0       	ldi	r24, 0x01	; 1
     a6a:	80 93 ba 01 	sts	0x01BA, r24
     a6e:	08 95       	ret

00000a70 <startShiftingWindowRight>:
//	LED window right 
//---------------------------------------------//
void startShiftingWindowRight(void)
{
	// Clear spaces between menu states
	fillLedBuffer(NUM_DIGITS,2,' ');
     a70:	40 e2       	ldi	r20, 0x20	; 32
     a72:	62 e0       	ldi	r22, 0x02	; 2
     a74:	86 e0       	ldi	r24, 0x06	; 6
     a76:	ca df       	rcall	.-108    	; 0xa0c <fillLedBuffer>
	// Set new buffer position for writing
	bufStartPos = wrap_led_buffer_index( (int8_t)bufStartPos + NUM_DIGITS + 2 );
     a78:	80 91 bb 01 	lds	r24, 0x01BB
     a7c:	88 5f       	subi	r24, 0xF8	; 248
     a7e:	57 df       	rcall	.-338    	; 0x92e <wrap_led_buffer_index>
     a80:	80 93 bb 01 	sts	0x01BB, r24
	// Set shifter state
	shifterState = LED_SHIFT_RIGHT;
     a84:	82 e0       	ldi	r24, 0x02	; 2
     a86:	80 93 ba 01 	sts	0x01BA, r24
     a8a:	08 95       	ret

00000a8c <initLedIndicator>:
//---------------------------------------------//
//	Initialization
//	Call this function at start of your program
//---------------------------------------------//
void initLedIndicator()
{
     a8c:	cf 93       	push	r28
	uint8_t i;
	// First disable outputs
	disable_led_segments();
     a8e:	82 d0       	rcall	.+260    	; 0xb94 <disable_led_segments>
     a90:	c7 e0       	ldi	r28, 0x07	; 7
	// Fill shift register with non-active levels
	for (i=0;i<NUM_DIGITS_TOTAL;i++)
	{
		led_clock_pulse(!LED_DIGIT_ACT_LVL);
     a92:	81 e0       	ldi	r24, 0x01	; 1
     a94:	53 d0       	rcall	.+166    	; 0xb3c <led_clock_pulse>
     a96:	c1 50       	subi	r28, 0x01	; 1
{
	uint8_t i;
	// First disable outputs
	disable_led_segments();
	// Fill shift register with non-active levels
	for (i=0;i<NUM_DIGITS_TOTAL;i++)
     a98:	e1 f7       	brne	.-8      	; 0xa92 <initLedIndicator+0x6>
	{
		led_clock_pulse(!LED_DIGIT_ACT_LVL);
	}
	// Now enable outputs
	enable_led_segments();
     a9a:	75 d0       	rcall	.+234    	; 0xb86 <enable_led_segments>
	
	// Reset pointers
	wStartPos = 0;
     a9c:	10 92 b9 01 	sts	0x01B9, r1
	bufStartPos = 0;
     aa0:	10 92 bb 01 	sts	0x01BB, r1
	bufActivePos = 0;
     aa4:	10 92 03 01 	sts	0x0103, r1
	wActivePos = 0;
     aa8:	10 92 04 01 	sts	0x0104, r1
	#ifdef 	USE_EXTRA_LED_DIGIT
	extra_led_state = 0;
     aac:	10 92 b8 01 	sts	0x01B8, r1
	#endif
	
	// Clear the buffer 
	fillLedBuffer(0,LED_BUFFER_LENGTH,' ');
     ab0:	40 e2       	ldi	r20, 0x20	; 32
     ab2:	6e e0       	ldi	r22, 0x0E	; 14
     ab4:	80 e0       	ldi	r24, 0x00	; 0
     ab6:	aa df       	rcall	.-172    	; 0xa0c <fillLedBuffer>
	
	// Initialize shift timer - always enabled, but 
	//	processed only when shifting is active
	shifterState = LED_SHIFT_DONE;
     ab8:	10 92 ba 01 	sts	0x01BA, r1
	shiftTimer.Enabled = 1;
     abc:	80 91 05 01 	lds	r24, 0x0105
	shiftTimer.RunOnce = 0;
     ac0:	81 60       	ori	r24, 0x01	; 1
     ac2:	8d 7f       	andi	r24, 0xFD	; 253
     ac4:	80 93 05 01 	sts	0x0105, r24
	shiftTimer.Top = LED_SHIFT_INTERVAL-1;
     ac8:	89 e0       	ldi	r24, 0x09	; 9
     aca:	80 93 07 01 	sts	0x0107, r24
}
     ace:	cf 91       	pop	r28
     ad0:	08 95       	ret

00000ad2 <printLedBuffer>:
// Arguments:
//		offset	- buffer index to start with (with respect to bufStartPos)
//		str - null-terminated char string
//---------------------------------------------//		
void printLedBuffer(int8_t offset, char* str)
{
     ad2:	1f 93       	push	r17
     ad4:	cf 93       	push	r28
     ad6:	df 93       	push	r29
     ad8:	eb 01       	movw	r28, r22
	char c;
	uint8_t decoded_sym;
	// Ensure index is inside the buffer
	uint8_t buffer_position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
     ada:	90 91 bb 01 	lds	r25, 0x01BB
     ade:	89 0f       	add	r24, r25
     ae0:	26 df       	rcall	.-436    	; 0x92e <wrap_led_buffer_index>
     ae2:	18 2f       	mov	r17, r24
	// Output chars
	while((c = *str++))
     ae4:	0b c0       	rjmp	.+22     	; 0xafc <printLedBuffer+0x2a>
	{
		decoded_sym = decode_led_char(c);
     ae6:	0d df       	rcall	.-486    	; 0x902 <decode_led_char>
		led_data_buffer[buffer_position] = decoded_sym;
     ae8:	e1 2f       	mov	r30, r17
     aea:	f0 e0       	ldi	r31, 0x00	; 0
     aec:	e4 54       	subi	r30, 0x44	; 68
     aee:	fe 4f       	sbci	r31, 0xFE	; 254
     af0:	80 83       	st	Z, r24
// Increments index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t inc_buffer_position(uint8_t position)
{
	return (position >= LED_BUFFER_LENGTH - 1) ? 0 : position + 1;
     af2:	1d 30       	cpi	r17, 0x0D	; 13
     af4:	10 f4       	brcc	.+4      	; 0xafa <printLedBuffer+0x28>
     af6:	1f 5f       	subi	r17, 0xFF	; 255
     af8:	01 c0       	rjmp	.+2      	; 0xafc <printLedBuffer+0x2a>
     afa:	10 e0       	ldi	r17, 0x00	; 0
	char c;
	uint8_t decoded_sym;
	// Ensure index is inside the buffer
	uint8_t buffer_position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
	// Output chars
	while((c = *str++))
     afc:	89 91       	ld	r24, Y+
     afe:	81 11       	cpse	r24, r1
     b00:	f2 cf       	rjmp	.-28     	; 0xae6 <printLedBuffer+0x14>
	{
		decoded_sym = decode_led_char(c);
		led_data_buffer[buffer_position] = decoded_sym;
		buffer_position = inc_buffer_position(buffer_position);
	}
}
     b02:	df 91       	pop	r29
     b04:	cf 91       	pop	r28
     b06:	1f 91       	pop	r17
     b08:	08 95       	ret

00000b0a <setComma>:
//	buffer cell
//---------------------------------------------//
void setComma(int8_t offset)
{
	// Ensure index is inside the buffer
	uint8_t position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
     b0a:	90 91 bb 01 	lds	r25, 0x01BB
     b0e:	89 0f       	add	r24, r25
     b10:	0e df       	rcall	.-484    	; 0x92e <wrap_led_buffer_index>
	led_data_buffer[position] |= (SEGH);
     b12:	e8 2f       	mov	r30, r24
     b14:	f0 e0       	ldi	r31, 0x00	; 0
     b16:	e4 54       	subi	r30, 0x44	; 68
     b18:	fe 4f       	sbci	r31, 0xFE	; 254
     b1a:	80 81       	ld	r24, Z
     b1c:	80 68       	ori	r24, 0x80	; 128
     b1e:	80 83       	st	Z, r24
     b20:	08 95       	ret

00000b22 <setExtraLeds>:
// Argument is ORed with current LED state
//---------------------------------------------//
inline void setExtraLeds(uint8_t leds_set_value)
{
		//asm("cli");
		extra_led_state |= leds_set_value;
     b22:	90 91 b8 01 	lds	r25, 0x01B8
     b26:	98 2b       	or	r25, r24
     b28:	90 93 b8 01 	sts	0x01B8, r25
     b2c:	08 95       	ret

00000b2e <clearExtraLeds>:
// Argument is AND NOTed with current LED state
//---------------------------------------------//
inline void clearExtraLeds(uint8_t leds_clear_value)
{
		//asm("cli");
		extra_led_state &= ~leds_clear_value;
     b2e:	90 91 b8 01 	lds	r25, 0x01B8
     b32:	80 95       	com	r24
     b34:	89 23       	and	r24, r25
     b36:	80 93 b8 01 	sts	0x01B8, r24
     b3a:	08 95       	ret

00000b3c <led_clock_pulse>:


// Clocks in bit into the shift register
void led_clock_pulse(uint8_t bit)
{
	if (bit)
     b3c:	88 23       	and	r24, r24
     b3e:	11 f0       	breq	.+4      	; 0xb44 <led_clock_pulse+0x8>
		PORTB |= (1<<PB_LED_DOUT);
     b40:	c0 9a       	sbi	0x18, 0	; 24
     b42:	01 c0       	rjmp	.+2      	; 0xb46 <led_clock_pulse+0xa>
	else
		PORTB &= ~(1<<PB_LED_DOUT);
     b44:	c0 98       	cbi	0x18, 0	; 24
     b46:	8a e1       	ldi	r24, 0x1A	; 26
     b48:	8a 95       	dec	r24
     b4a:	f1 f7       	brne	.-4      	; 0xb48 <led_clock_pulse+0xc>
     b4c:	00 c0       	rjmp	.+0      	; 0xb4e <led_clock_pulse+0x12>
	_delay_us(SETUP_DELAY_US);
	PORTB |= (1<<PB_LED_CLK);
     b4e:	c2 9a       	sbi	0x18, 2	; 24
     b50:	8a e1       	ldi	r24, 0x1A	; 26
     b52:	8a 95       	dec	r24
     b54:	f1 f7       	brne	.-4      	; 0xb52 <led_clock_pulse+0x16>
     b56:	00 c0       	rjmp	.+0      	; 0xb58 <led_clock_pulse+0x1c>
	_delay_us(SHIFT_DELAY_US);
	PORTB &= ~(1<<PB_LED_CLK);
     b58:	c2 98       	cbi	0x18, 2	; 24
     b5a:	08 95       	ret

00000b5c <set_led_segments>:
// Outputs decoded segment data to port bits
void set_led_segments(uint8_t seg_ch)
{
	uint8_t pdat;
	seg_ch ^= LED_SEGMENT_MASK;
	pdat = PORTC & ~( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
     b5c:	25 b3       	in	r18, 0x15	; 21
	pdat |= (seg_ch & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
     b5e:	98 2f       	mov	r25, r24
     b60:	9f 71       	andi	r25, 0x1F	; 31
// Outputs decoded segment data to port bits
void set_led_segments(uint8_t seg_ch)
{
	uint8_t pdat;
	seg_ch ^= LED_SEGMENT_MASK;
	pdat = PORTC & ~( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
     b62:	20 7e       	andi	r18, 0xE0	; 224
	pdat |= (seg_ch & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
     b64:	92 2b       	or	r25, r18
	PORTC = pdat;
     b66:	95 bb       	out	0x15, r25	; 21
	seg_ch >>= 2;
	pdat = PORTB & ~( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     b68:	98 b3       	in	r25, 0x18	; 24
	uint8_t pdat;
	seg_ch ^= LED_SEGMENT_MASK;
	pdat = PORTC & ~( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
	pdat |= (seg_ch & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
	PORTC = pdat;
	seg_ch >>= 2;
     b6a:	86 95       	lsr	r24
     b6c:	86 95       	lsr	r24
	pdat = PORTB & ~( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
	pdat |= (seg_ch & ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) ));
     b6e:	88 73       	andi	r24, 0x38	; 56
	seg_ch ^= LED_SEGMENT_MASK;
	pdat = PORTC & ~( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
	pdat |= (seg_ch & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
	PORTC = pdat;
	seg_ch >>= 2;
	pdat = PORTB & ~( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     b70:	97 7c       	andi	r25, 0xC7	; 199
	pdat |= (seg_ch & ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) ));
     b72:	89 2b       	or	r24, r25
	PORTB = pdat;
     b74:	88 bb       	out	0x18, r24	; 24
     b76:	08 95       	ret

00000b78 <enable_led_segments_pullups>:

// Turns segment port bits to HI-Z and
// enables pull-ups
void enable_led_segments_pullups()
{
	PORTC |= ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
     b78:	85 b3       	in	r24, 0x15	; 21
     b7a:	8f 61       	ori	r24, 0x1F	; 31
     b7c:	85 bb       	out	0x15, r24	; 21
	PORTB |= ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     b7e:	88 b3       	in	r24, 0x18	; 24
     b80:	88 63       	ori	r24, 0x38	; 56
     b82:	88 bb       	out	0x18, r24	; 24
     b84:	08 95       	ret

00000b86 <enable_led_segments>:
}	

void enable_led_segments()
{
	DDRC |= ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
     b86:	84 b3       	in	r24, 0x14	; 20
     b88:	8f 61       	ori	r24, 0x1F	; 31
     b8a:	84 bb       	out	0x14, r24	; 20
	DDRB |= ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     b8c:	87 b3       	in	r24, 0x17	; 23
     b8e:	88 63       	ori	r24, 0x38	; 56
     b90:	87 bb       	out	0x17, r24	; 23
     b92:	08 95       	ret

00000b94 <disable_led_segments>:
}

void disable_led_segments()
{
	DDRC &= ~( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
     b94:	84 b3       	in	r24, 0x14	; 20
     b96:	80 7e       	andi	r24, 0xE0	; 224
     b98:	84 bb       	out	0x14, r24	; 20
	DDRB &= ~( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     b9a:	87 b3       	in	r24, 0x17	; 23
     b9c:	87 7c       	andi	r24, 0xC7	; 199
     b9e:	87 bb       	out	0x17, r24	; 23
     ba0:	08 95       	ret

00000ba2 <capture_button_state>:


void capture_button_state()
{
	uint8_t pdat;
	pdat = PINB  & ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     ba2:	86 b3       	in	r24, 0x16	; 22
     ba4:	88 73       	andi	r24, 0x38	; 56
	pdat <<= 2;
	pdat |= (PINC & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
     ba6:	93 b3       	in	r25, 0x13	; 19

void capture_button_state()
{
	uint8_t pdat;
	pdat = PINB  & ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
	pdat <<= 2;
     ba8:	88 0f       	add	r24, r24
     baa:	88 0f       	add	r24, r24
	pdat |= (PINC & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
     bac:	9f 71       	andi	r25, 0x1F	; 31
     bae:	89 2b       	or	r24, r25
	raw_button_state = pdat ^ RAW_BUTTONS_INVERSE_MASK;
     bb0:	80 95       	com	r24
     bb2:	80 93 ca 01 	sts	0x01CA, r24
     bb6:	08 95       	ret

00000bb8 <processItemFunction>:
//	Arguments:
//		funcAddr - address of the function to run.
//-----------------------------------------------------------------//
static inline void processItemFunction(FuncPtr funcAddr)
{
	if (funcAddr != 0)
     bb8:	00 97       	sbiw	r24, 0x00	; 0
     bba:	11 f0       	breq	.+4      	; 0xbc0 <processItemFunction+0x8>
		((FuncPtr)funcAddr)();
     bbc:	fc 01       	movw	r30, r24
     bbe:	09 94       	ijmp
     bc0:	08 95       	ret

00000bc2 <mf_setTempLeave>:
		clearExtraLeds(LED_TEMP);
}

void mf_setTempLeave(void)
{
	userTimer.Enabled = 0;
     bc2:	e3 e1       	ldi	r30, 0x13	; 19
     bc4:	f1 e0       	ldi	r31, 0x01	; 1
     bc6:	80 81       	ld	r24, Z
     bc8:	8e 7f       	andi	r24, 0xFE	; 254
     bca:	80 83       	st	Z, r24
     bcc:	08 95       	ret

00000bce <mf_leafSelectAct>:
	userTimer.FA_GE = 1;	
}

void mf_leafSelectAct(void)
{
	userTimer.Timer = 0;
     bce:	10 92 14 01 	sts	0x0114, r1
	userTimer.Top = BLINK_PERIOD - 1;
     bd2:	87 e0       	ldi	r24, 0x07	; 7
     bd4:	80 93 15 01 	sts	0x0115, r24
	userTimer.CompA = BLINK_PERIOD / 2;
     bd8:	84 e0       	ldi	r24, 0x04	; 4
     bda:	80 93 16 01 	sts	0x0116, r24
	userTimer.Enabled = 1;
     bde:	e3 e1       	ldi	r30, 0x13	; 19
     be0:	f1 e0       	ldi	r31, 0x01	; 1
     be2:	80 81       	ld	r24, Z
     be4:	81 60       	ori	r24, 0x01	; 1
     be6:	80 83       	st	Z, r24
     be8:	08 95       	ret

00000bea <mf_leafExit>:
}

void mf_leafExit(void)
{
	userTimer.Enabled = 0;	
     bea:	e3 e1       	ldi	r30, 0x13	; 19
     bec:	f1 e0       	ldi	r31, 0x01	; 1
     bee:	80 81       	ld	r24, Z
     bf0:	8e 7f       	andi	r24, 0xFE	; 254
     bf2:	80 83       	st	Z, r24
     bf4:	08 95       	ret

00000bf6 <mf_actpoffLeave>:
	printLedBuffer(0,"   OFF");
}

void mf_actpoffLeave(void)
{
	autoPowerOffState = 0;	
     bf6:	10 92 fc 00 	sts	0x00FC, r1
     bfa:	08 95       	ret

00000bfc <mf_calibDoExit>:
	userTimer.Enabled = 1;
}

void mf_leafExit(void)
{
	userTimer.Enabled = 0;	
     bfc:	e3 e1       	ldi	r30, 0x13	; 19
     bfe:	f1 e0       	ldi	r31, 0x01	; 1
     c00:	80 81       	ld	r24, Z
     c02:	8e 7f       	andi	r24, 0xFE	; 254
     c04:	80 83       	st	Z, r24


void mf_calibDoExit(void)
{
	mf_leafExit();
	heaterState &= ~CALIBRATION_ACTIVE;
     c06:	80 91 fd 00 	lds	r24, 0x00FD
     c0a:	8d 7f       	andi	r24, 0xFD	; 253
     c0c:	80 93 fd 00 	sts	0x00FD, r24
     c10:	08 95       	ret

00000c12 <mf_actpoffDo>:
}

// Indication of power off mode
void mf_actpoffDo(void)
{
	printLedBuffer(0,"   OFF");
     c12:	60 eb       	ldi	r22, 0xB0	; 176
     c14:	70 e0       	ldi	r23, 0x00	; 0
     c16:	80 e0       	ldi	r24, 0x00	; 0
     c18:	5c cf       	rjmp	.-328    	; 0xad2 <printLedBuffer>

00000c1a <mf_cdoneDo>:
}


void mf_cdoneDo(void)
{
	printLedBuffer(0," DONE ");
     c1a:	67 eb       	ldi	r22, 0xB7	; 183
     c1c:	70 e0       	ldi	r23, 0x00	; 0
     c1e:	80 e0       	ldi	r24, 0x00	; 0
     c20:	58 cf       	rjmp	.-336    	; 0xad2 <printLedBuffer>

00000c22 <mf_actpoffSelect>:



void mf_actpoffSelect(void)
{
	clearExtraLeds(LED_TEMP | LED_ROLL);
     c22:	80 ec       	ldi	r24, 0xC0	; 192
     c24:	84 df       	rcall	.-248    	; 0xb2e <clearExtraLeds>
	autoPowerOffState = AUTO_POFF_ACTIVE;	// Set global flag
     c26:	81 e0       	ldi	r24, 0x01	; 1
     c28:	80 93 fc 00 	sts	0x00FC, r24
     c2c:	08 95       	ret

00000c2e <mf_leafSelect>:

// Select and exit functions, common for leaf menu items 

void mf_leafSelect(void)
{
	clearExtraLeds(LED_TEMP | LED_ROLL);
     c2e:	80 ec       	ldi	r24, 0xC0	; 192
     c30:	7e df       	rcall	.-260    	; 0xb2e <clearExtraLeds>
	userTimer.FA_GE = 1;	
     c32:	e3 e1       	ldi	r30, 0x13	; 19
     c34:	f1 e0       	ldi	r31, 0x01	; 1
     c36:	80 81       	ld	r24, Z
     c38:	80 61       	ori	r24, 0x10	; 16
     c3a:	80 83       	st	Z, r24
     c3c:	08 95       	ret

00000c3e <mf_calibP2Select>:
	printLedBuffer(0,"P1    ");
}

void mf_calibP2Select(void)
{
	mf_leafSelect();
     c3e:	f7 df       	rcall	.-18     	; 0xc2e <mf_leafSelect>
	cpoint_user_val = cp.cpoint2;	// determine which point to use at select func
     c40:	80 91 9a 01 	lds	r24, 0x019A
     c44:	80 93 11 01 	sts	0x0111, r24
	cpointNum = 2;
     c48:	82 e0       	ldi	r24, 0x02	; 2
     c4a:	80 93 12 01 	sts	0x0112, r24
	printLedBuffer(0,"P2    ");
     c4e:	6e eb       	ldi	r22, 0xBE	; 190
     c50:	70 e0       	ldi	r23, 0x00	; 0
     c52:	80 e0       	ldi	r24, 0x00	; 0
     c54:	3e cf       	rjmp	.-388    	; 0xad2 <printLedBuffer>

00000c56 <mf_calibP1Select>:
//---------------------------------------------//


void mf_calibP1Select(void)
{
	mf_leafSelect();
     c56:	eb df       	rcall	.-42     	; 0xc2e <mf_leafSelect>
	cpoint_user_val = cp.cpoint1;	// determine which point to use at select func
     c58:	80 91 99 01 	lds	r24, 0x0199
     c5c:	80 93 11 01 	sts	0x0111, r24
	cpointNum = 1;
     c60:	81 e0       	ldi	r24, 0x01	; 1
     c62:	80 93 12 01 	sts	0x0112, r24
	printLedBuffer(0,"P1    ");
     c66:	65 ec       	ldi	r22, 0xC5	; 197
     c68:	70 e0       	ldi	r23, 0x00	; 0
     c6a:	80 e0       	ldi	r24, 0x00	; 0
     c6c:	32 cf       	rjmp	.-412    	; 0xad2 <printLedBuffer>

00000c6e <mf_rollLeave>:
	printLedBuffer(0,str);
}

void mf_rollLeave(void)
{
	clearExtraLeds(LED_ROLL);
     c6e:	80 e4       	ldi	r24, 0x40	; 64
     c70:	5e df       	rcall	.-324    	; 0xb2e <clearExtraLeds>
	userTimer.Enabled = 0;
     c72:	e3 e1       	ldi	r30, 0x13	; 19
     c74:	f1 e0       	ldi	r31, 0x01	; 1
     c76:	80 81       	ld	r24, Z
     c78:	8e 7f       	andi	r24, 0xFE	; 254
     c7a:	80 83       	st	Z, r24
     c7c:	08 95       	ret

00000c7e <mf_setTempSelect>:
//---------------------------------------------//


void mf_setTempSelect(void)
{
	clearExtraLeds(LED_TEMP);
     c7e:	80 e8       	ldi	r24, 0x80	; 128
     c80:	56 df       	rcall	.-340    	; 0xb2e <clearExtraLeds>
	mf_leafSelectAct();		// setup and start timer
     c82:	a5 cf       	rjmp	.-182    	; 0xbce <mf_leafSelectAct>

00000c84 <mf_realTempLeave>:
	}
}

void mf_realTempLeave(void)
{
	clearExtraLeds(LED_TEMP);
     c84:	80 e8       	ldi	r24, 0x80	; 128
     c86:	53 cf       	rjmp	.-346    	; 0xb2e <clearExtraLeds>

00000c88 <mf_cdoneSelect>:

//---------------------------------------------//

void mf_cdoneSelect(void)
{
	applyCalibrationPoint(cpointNum,cpoint_user_val);
     c88:	20 91 11 01 	lds	r18, 0x0111
}


void applyCalibrationPoint(uint8_t cpointNum, uint8_t cpointVal)
{
	if (cpointNum == 1)
     c8c:	30 91 12 01 	lds	r19, 0x0112
     c90:	80 91 6b 01 	lds	r24, 0x016B
     c94:	90 91 6c 01 	lds	r25, 0x016C
     c98:	31 30       	cpi	r19, 0x01	; 1
     c9a:	39 f4       	brne	.+14     	; 0xcaa <mf_cdoneSelect+0x22>
	{
		cp.cpoint1_adc = adc_normalized;
     c9c:	90 93 9c 01 	sts	0x019C, r25
     ca0:	80 93 9b 01 	sts	0x019B, r24
		cp.cpoint1 = cpointVal;
     ca4:	20 93 99 01 	sts	0x0199, r18
     ca8:	06 c0       	rjmp	.+12     	; 0xcb6 <mf_cdoneSelect+0x2e>
	}
	else
	{
		cp.cpoint2_adc = adc_normalized;
     caa:	90 93 9e 01 	sts	0x019E, r25
     cae:	80 93 9d 01 	sts	0x019D, r24
		cp.cpoint2 = cpointVal;
     cb2:	20 93 9a 01 	sts	0x019A, r18
	}
	calculateCoeffs();
     cb6:	b2 da       	rcall	.-2716   	; 0x21c <calculateCoeffs>
	saveCalibrationToEEPROM();
     cb8:	0e ce       	rjmp	.-996    	; 0x8d6 <saveCalibrationToEEPROM>

00000cba <mf_autopoffDo>:

//---------------------------------------------//


void mf_autopoffDo(void)
{
     cba:	cf 93       	push	r28
     cbc:	df 93       	push	r29
     cbe:	cd b7       	in	r28, 0x3d	; 61
     cc0:	de b7       	in	r29, 0x3e	; 62
     cc2:	27 97       	sbiw	r28, 0x07	; 7
     cc4:	0f b6       	in	r0, 0x3f	; 63
     cc6:	f8 94       	cli
     cc8:	de bf       	out	0x3e, r29	; 62
     cca:	0f be       	out	0x3f, r0	; 63
     ccc:	cd bf       	out	0x3d, r28	; 61
	char str[] = {'O','F','F',' ',' ',' ',0};
     cce:	87 e0       	ldi	r24, 0x07	; 7
     cd0:	e4 e9       	ldi	r30, 0x94	; 148
     cd2:	f0 e0       	ldi	r31, 0x00	; 0
     cd4:	de 01       	movw	r26, r28
     cd6:	11 96       	adiw	r26, 0x01	; 1
     cd8:	01 90       	ld	r0, Z+
     cda:	0d 92       	st	X+, r0
     cdc:	8a 95       	dec	r24
     cde:	e1 f7       	brne	.-8      	; 0xcd8 <mf_autopoffDo+0x1e>
		
	if (button_state & (BD_UP | BR_UP))
     ce0:	80 91 f8 00 	lds	r24, 0x00F8
     ce4:	90 91 f9 00 	lds	r25, 0x00F9
     ce8:	9c 01       	movw	r18, r24
     cea:	20 74       	andi	r18, 0x40	; 64
     cec:	34 70       	andi	r19, 0x04	; 4
     cee:	23 2b       	or	r18, r19
     cf0:	31 f0       	breq	.+12     	; 0xcfe <mf_autopoffDo+0x44>
	{
		if (p.power_off_timeout < MAX_POWEROFF_TIMEOUT)
     cf2:	80 91 a2 01 	lds	r24, 0x01A2
     cf6:	8f 35       	cpi	r24, 0x5F	; 95
     cf8:	68 f4       	brcc	.+26     	; 0xd14 <mf_autopoffDo+0x5a>
			p.power_off_timeout += POWEROFF_SET_STEP;
     cfa:	8b 5f       	subi	r24, 0xFB	; 251
     cfc:	09 c0       	rjmp	.+18     	; 0xd10 <mf_autopoffDo+0x56>
		restartMenuTimer();
	}
	else if (button_state & (BD_DOWN | BR_DOWN))
     cfe:	80 78       	andi	r24, 0x80	; 128
     d00:	98 70       	andi	r25, 0x08	; 8
     d02:	89 2b       	or	r24, r25
     d04:	49 f0       	breq	.+18     	; 0xd18 <mf_autopoffDo+0x5e>
	{
		if (p.power_off_timeout > MIN_POWEROFF_TIMEOUT)
     d06:	80 91 a2 01 	lds	r24, 0x01A2
     d0a:	86 30       	cpi	r24, 0x06	; 6
     d0c:	18 f0       	brcs	.+6      	; 0xd14 <mf_autopoffDo+0x5a>
			p.power_off_timeout -= POWEROFF_SET_STEP;
     d0e:	85 50       	subi	r24, 0x05	; 5
     d10:	80 93 a2 01 	sts	0x01A2, r24
//	 Restarts menu state timeout
//	Should be used in RUN function when control buttons are pressed.
//-----------------------------------------------------------------//
static void restartMenuTimer(void)
{
	menuTimer.Timer = 0;
     d14:	10 92 84 00 	sts	0x0084, r1
		if (p.power_off_timeout > MIN_POWEROFF_TIMEOUT)
			p.power_off_timeout -= POWEROFF_SET_STEP;
		restartMenuTimer();
	}	
		
	if (userTimer.FA_GE)
     d18:	80 91 13 01 	lds	r24, 0x0113
     d1c:	84 ff       	sbrs	r24, 4
     d1e:	0f c0       	rjmp	.+30     	; 0xd3e <mf_autopoffDo+0x84>
	{
		if (p.power_off_timeout < MAX_POWEROFF_TIMEOUT)
     d20:	80 91 a2 01 	lds	r24, 0x01A2
     d24:	8f 35       	cpi	r24, 0x5F	; 95
     d26:	38 f4       	brcc	.+14     	; 0xd36 <mf_autopoffDo+0x7c>
		{
			u16toa_align_right(p.power_off_timeout,str + 4,NO_TERMINATING_ZERO | 2);	
     d28:	42 e8       	ldi	r20, 0x82	; 130
     d2a:	be 01       	movw	r22, r28
     d2c:	6b 5f       	subi	r22, 0xFB	; 251
     d2e:	7f 4f       	sbci	r23, 0xFF	; 255
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	8c d2       	rcall	.+1304   	; 0x124c <u16toa_align_right>
     d34:	04 c0       	rjmp	.+8      	; 0xd3e <mf_autopoffDo+0x84>
		}			
		else 
		{
			str[4] = 'N';
     d36:	8e e4       	ldi	r24, 0x4E	; 78
     d38:	8d 83       	std	Y+5, r24	; 0x05
			str[5] = 'O';
     d3a:	8f e4       	ldi	r24, 0x4F	; 79
     d3c:	8e 83       	std	Y+6, r24	; 0x06
		}			
	}		
		
	printLedBuffer(0,str);
     d3e:	be 01       	movw	r22, r28
     d40:	6f 5f       	subi	r22, 0xFF	; 255
     d42:	7f 4f       	sbci	r23, 0xFF	; 255
     d44:	80 e0       	ldi	r24, 0x00	; 0
     d46:	c5 de       	rcall	.-630    	; 0xad2 <printLedBuffer>
}
     d48:	27 96       	adiw	r28, 0x07	; 7
     d4a:	0f b6       	in	r0, 0x3f	; 63
     d4c:	f8 94       	cli
     d4e:	de bf       	out	0x3e, r29	; 62
     d50:	0f be       	out	0x3f, r0	; 63
     d52:	cd bf       	out	0x3d, r28	; 61
     d54:	df 91       	pop	r29
     d56:	cf 91       	pop	r28
     d58:	08 95       	ret

00000d5a <mf_calibDo>:
	cpointNum = 2;
	printLedBuffer(0,"P2    ");
}

void mf_calibDo(void)
{
     d5a:	cf 93       	push	r28
     d5c:	df 93       	push	r29
     d5e:	00 d0       	rcall	.+0      	; 0xd60 <mf_calibDo+0x6>
     d60:	00 d0       	rcall	.+0      	; 0xd62 <mf_calibDo+0x8>
     d62:	cd b7       	in	r28, 0x3d	; 61
     d64:	de b7       	in	r29, 0x3e	; 62
	char str[] = "   ";
     d66:	80 e2       	ldi	r24, 0x20	; 32
     d68:	90 e2       	ldi	r25, 0x20	; 32
     d6a:	a0 e2       	ldi	r26, 0x20	; 32
     d6c:	b0 e0       	ldi	r27, 0x00	; 0
     d6e:	89 83       	std	Y+1, r24	; 0x01
     d70:	9a 83       	std	Y+2, r25	; 0x02
     d72:	ab 83       	std	Y+3, r26	; 0x03
     d74:	bc 83       	std	Y+4, r27	; 0x04
	
	if (button_state & (BD_UP | BR_UP))
     d76:	80 91 f8 00 	lds	r24, 0x00F8
     d7a:	90 91 f9 00 	lds	r25, 0x00F9
     d7e:	9c 01       	movw	r18, r24
     d80:	20 74       	andi	r18, 0x40	; 64
     d82:	34 70       	andi	r19, 0x04	; 4
     d84:	23 2b       	or	r18, r19
     d86:	31 f0       	breq	.+12     	; 0xd94 <mf_calibDo+0x3a>
	{
		if (cpoint_user_val < MAX_CALIB_TEMP)
     d88:	80 91 11 01 	lds	r24, 0x0111
     d8c:	8a 3f       	cpi	r24, 0xFA	; 250
     d8e:	68 f4       	brcc	.+26     	; 0xdaa <mf_calibDo+0x50>
		cpoint_user_val += CALIB_TEMP_STEP;
     d90:	8f 5f       	subi	r24, 0xFF	; 255
     d92:	09 c0       	rjmp	.+18     	; 0xda6 <mf_calibDo+0x4c>
	}
	else if (button_state & (BD_DOWN | BR_DOWN))
     d94:	80 78       	andi	r24, 0x80	; 128
     d96:	98 70       	andi	r25, 0x08	; 8
     d98:	89 2b       	or	r24, r25
     d9a:	39 f0       	breq	.+14     	; 0xdaa <mf_calibDo+0x50>
	{
		if (cpoint_user_val > MIN_CALIB_TEMP)
     d9c:	80 91 11 01 	lds	r24, 0x0111
     da0:	8b 30       	cpi	r24, 0x0B	; 11
     da2:	18 f0       	brcs	.+6      	; 0xdaa <mf_calibDo+0x50>
		cpoint_user_val -= CALIB_TEMP_STEP;
     da4:	81 50       	subi	r24, 0x01	; 1
     da6:	80 93 11 01 	sts	0x0111, r24
	}
	
	if (userTimer.FA_GE)
     daa:	80 91 13 01 	lds	r24, 0x0113
     dae:	84 ff       	sbrs	r24, 4
     db0:	0e c0       	rjmp	.+28     	; 0xdce <mf_calibDo+0x74>
	{
		u16toa_align_right(cpoint_user_val,str,3);
     db2:	43 e0       	ldi	r20, 0x03	; 3
     db4:	be 01       	movw	r22, r28
     db6:	6f 5f       	subi	r22, 0xFF	; 255
     db8:	7f 4f       	sbci	r23, 0xFF	; 255
     dba:	80 91 11 01 	lds	r24, 0x0111
     dbe:	90 e0       	ldi	r25, 0x00	; 0
     dc0:	45 d2       	rcall	.+1162   	; 0x124c <u16toa_align_right>
		resetAutoPowerOffCounter();
     dc2:	86 d5       	rcall	.+2828   	; 0x18d0 <resetAutoPowerOffCounter>
		heaterState |= CALIBRATION_ACTIVE;
     dc4:	80 91 fd 00 	lds	r24, 0x00FD
     dc8:	82 60       	ori	r24, 0x02	; 2
     dca:	80 93 fd 00 	sts	0x00FD, r24
	}
	
	printLedBuffer(3,str);
     dce:	be 01       	movw	r22, r28
     dd0:	6f 5f       	subi	r22, 0xFF	; 255
     dd2:	7f 4f       	sbci	r23, 0xFF	; 255
     dd4:	83 e0       	ldi	r24, 0x03	; 3
     dd6:	7d de       	rcall	.-774    	; 0xad2 <printLedBuffer>
}
     dd8:	0f 90       	pop	r0
     dda:	0f 90       	pop	r0
     ddc:	0f 90       	pop	r0
     dde:	0f 90       	pop	r0
     de0:	df 91       	pop	r29
     de2:	cf 91       	pop	r28
     de4:	08 95       	ret

00000de6 <mf_sndenDo>:

//---------------------------------------------//


void mf_sndenDo(void)
{
     de6:	cf 93       	push	r28
     de8:	df 93       	push	r29
     dea:	cd b7       	in	r28, 0x3d	; 61
     dec:	de b7       	in	r29, 0x3e	; 62
     dee:	27 97       	sbiw	r28, 0x07	; 7
     df0:	0f b6       	in	r0, 0x3f	; 63
     df2:	f8 94       	cli
     df4:	de bf       	out	0x3e, r29	; 62
     df6:	0f be       	out	0x3f, r0	; 63
     df8:	cd bf       	out	0x3d, r28	; 61
	char str[] = {'S','N','D',' ',' ',' ',0};
     dfa:	87 e0       	ldi	r24, 0x07	; 7
     dfc:	eb e9       	ldi	r30, 0x9B	; 155
     dfe:	f0 e0       	ldi	r31, 0x00	; 0
     e00:	de 01       	movw	r26, r28
     e02:	11 96       	adiw	r26, 0x01	; 1
     e04:	01 90       	ld	r0, Z+
     e06:	0d 92       	st	X+, r0
     e08:	8a 95       	dec	r24
     e0a:	e1 f7       	brne	.-8      	; 0xe04 <mf_sndenDo+0x1e>
		
	if (button_state & (BD_UP | BD_DOWN))
     e0c:	80 91 f8 00 	lds	r24, 0x00F8
     e10:	90 91 f9 00 	lds	r25, 0x00F9
     e14:	80 7c       	andi	r24, 0xC0	; 192
     e16:	99 27       	eor	r25, r25
     e18:	89 2b       	or	r24, r25
     e1a:	49 f0       	breq	.+18     	; 0xe2e <mf_sndenDo+0x48>
	{
		p.sound_enable = !p.sound_enable;
     e1c:	81 e0       	ldi	r24, 0x01	; 1
     e1e:	90 91 a1 01 	lds	r25, 0x01A1
     e22:	91 11       	cpse	r25, r1
     e24:	80 e0       	ldi	r24, 0x00	; 0
     e26:	80 93 a1 01 	sts	0x01A1, r24
//	 Restarts menu state timeout
//	Should be used in RUN function when control buttons are pressed.
//-----------------------------------------------------------------//
static void restartMenuTimer(void)
{
	menuTimer.Timer = 0;
     e2a:	10 92 84 00 	sts	0x0084, r1
	{
		p.sound_enable = !p.sound_enable;
		restartMenuTimer();
	}			
		
	if (userTimer.FA_GE)
     e2e:	80 91 13 01 	lds	r24, 0x0113
     e32:	84 ff       	sbrs	r24, 4
     e34:	0d c0       	rjmp	.+26     	; 0xe50 <mf_sndenDo+0x6a>
	{
		if (p.sound_enable)		
     e36:	80 91 a1 01 	lds	r24, 0x01A1
     e3a:	88 23       	and	r24, r24
     e3c:	21 f0       	breq	.+8      	; 0xe46 <mf_sndenDo+0x60>
		{
			str[4] = 'O';
     e3e:	8f e4       	ldi	r24, 0x4F	; 79
     e40:	8d 83       	std	Y+5, r24	; 0x05
			str[5] = 'N';
     e42:	8e e4       	ldi	r24, 0x4E	; 78
     e44:	04 c0       	rjmp	.+8      	; 0xe4e <mf_sndenDo+0x68>
		}
		else
		{
			str[3] = 'O';
     e46:	8f e4       	ldi	r24, 0x4F	; 79
     e48:	8c 83       	std	Y+4, r24	; 0x04
			str[4] = 'F';
     e4a:	86 e4       	ldi	r24, 0x46	; 70
     e4c:	8d 83       	std	Y+5, r24	; 0x05
			str[5] = 'F';
     e4e:	8e 83       	std	Y+6, r24	; 0x06
		}			
	}
		
	printLedBuffer(0,str);
     e50:	be 01       	movw	r22, r28
     e52:	6f 5f       	subi	r22, 0xFF	; 255
     e54:	7f 4f       	sbci	r23, 0xFF	; 255
     e56:	80 e0       	ldi	r24, 0x00	; 0
     e58:	3c de       	rcall	.-904    	; 0xad2 <printLedBuffer>
	setComma(2);
     e5a:	82 e0       	ldi	r24, 0x02	; 2
     e5c:	56 de       	rcall	.-852    	; 0xb0a <setComma>
}
     e5e:	27 96       	adiw	r28, 0x07	; 7
     e60:	0f b6       	in	r0, 0x3f	; 63
     e62:	f8 94       	cli
     e64:	de bf       	out	0x3e, r29	; 62
     e66:	0f be       	out	0x3f, r0	; 63
     e68:	cd bf       	out	0x3d, r28	; 61
     e6a:	df 91       	pop	r29
     e6c:	cf 91       	pop	r28
     e6e:	08 95       	ret

00000e70 <mf_rollDo>:
	setExtraLeds(LED_ROLL);
	mf_leafSelectAct();		// setup and start timer
}

void mf_rollDo(void)
{
     e70:	cf 93       	push	r28
     e72:	df 93       	push	r29
     e74:	cd b7       	in	r28, 0x3d	; 61
     e76:	de b7       	in	r29, 0x3e	; 62
     e78:	27 97       	sbiw	r28, 0x07	; 7
     e7a:	0f b6       	in	r0, 0x3f	; 63
     e7c:	f8 94       	cli
     e7e:	de bf       	out	0x3e, r29	; 62
     e80:	0f be       	out	0x3f, r0	; 63
     e82:	cd bf       	out	0x3d, r28	; 61
	char str[] = {' ',' ',' ',' ',' ',' ',0};
     e84:	87 e0       	ldi	r24, 0x07	; 7
     e86:	e2 ea       	ldi	r30, 0xA2	; 162
     e88:	f0 e0       	ldi	r31, 0x00	; 0
     e8a:	de 01       	movw	r26, r28
     e8c:	11 96       	adiw	r26, 0x01	; 1
     e8e:	01 90       	ld	r0, Z+
     e90:	0d 92       	st	X+, r0
     e92:	8a 95       	dec	r24
     e94:	e1 f7       	brne	.-8      	; 0xe8e <mf_rollDo+0x1e>
		
	if (button_state & (BD_UP | BR_UP))
     e96:	80 91 f8 00 	lds	r24, 0x00F8
     e9a:	90 91 f9 00 	lds	r25, 0x00F9
     e9e:	9c 01       	movw	r18, r24
     ea0:	20 74       	andi	r18, 0x40	; 64
     ea2:	34 70       	andi	r19, 0x04	; 4
     ea4:	23 2b       	or	r18, r19
     ea6:	31 f0       	breq	.+12     	; 0xeb4 <mf_rollDo+0x44>
	{
		if (p.rollCycleSet < MAX_ROLL_CYCLES)
     ea8:	80 91 a0 01 	lds	r24, 0x01A0
     eac:	83 36       	cpi	r24, 0x63	; 99
     eae:	68 f4       	brcc	.+26     	; 0xeca <mf_rollDo+0x5a>
			p.rollCycleSet += ROLL_CYCLES_STEP;
     eb0:	8f 5f       	subi	r24, 0xFF	; 255
     eb2:	09 c0       	rjmp	.+18     	; 0xec6 <mf_rollDo+0x56>
	}
	else if (button_state & (BD_DOWN | BR_DOWN))
     eb4:	80 78       	andi	r24, 0x80	; 128
     eb6:	98 70       	andi	r25, 0x08	; 8
     eb8:	89 2b       	or	r24, r25
     eba:	39 f0       	breq	.+14     	; 0xeca <mf_rollDo+0x5a>
	{
		if (p.rollCycleSet > MIN_ROLL_CYCLES)
     ebc:	80 91 a0 01 	lds	r24, 0x01A0
     ec0:	82 30       	cpi	r24, 0x02	; 2
     ec2:	18 f0       	brcs	.+6      	; 0xeca <mf_rollDo+0x5a>
			p.rollCycleSet -= ROLL_CYCLES_STEP;
     ec4:	81 50       	subi	r24, 0x01	; 1
     ec6:	80 93 a0 01 	sts	0x01A0, r24
	}	
		
	u16toa_align_right(p.rollCycleSet,str + 4,NO_TERMINATING_ZERO | 2);
     eca:	42 e8       	ldi	r20, 0x82	; 130
     ecc:	be 01       	movw	r22, r28
     ece:	6b 5f       	subi	r22, 0xFB	; 251
     ed0:	7f 4f       	sbci	r23, 0xFF	; 255
     ed2:	80 91 a0 01 	lds	r24, 0x01A0
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	b9 d1       	rcall	.+882    	; 0x124c <u16toa_align_right>
	
	if ((!(rollState & ROLL_CYCLE)) || (userTimer.FA_GE))
     eda:	80 91 18 01 	lds	r24, 0x0118
     ede:	82 ff       	sbrs	r24, 2
     ee0:	04 c0       	rjmp	.+8      	; 0xeea <mf_rollDo+0x7a>
     ee2:	80 91 13 01 	lds	r24, 0x0113
     ee6:	84 ff       	sbrs	r24, 4
     ee8:	08 c0       	rjmp	.+16     	; 0xefa <mf_rollDo+0x8a>
	{
		u16toa_align_right(activeRollCycle,str + 1,NO_TERMINATING_ZERO | 2);
     eea:	42 e8       	ldi	r20, 0x82	; 130
     eec:	be 01       	movw	r22, r28
     eee:	6e 5f       	subi	r22, 0xFE	; 254
     ef0:	7f 4f       	sbci	r23, 0xFF	; 255
     ef2:	80 91 17 01 	lds	r24, 0x0117
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	a9 d1       	rcall	.+850    	; 0x124c <u16toa_align_right>
	}
	
	str[0] = 0;
     efa:	19 82       	std	Y+1, r1	; 0x01
	if (isTopPointValid())
     efc:	17 d3       	rcall	.+1582   	; 0x152c <isTopPointValid>
     efe:	88 23       	and	r24, r24
     f00:	19 f0       	breq	.+6      	; 0xf08 <mf_rollDo+0x98>
		str[0] |= SEGA;
     f02:	89 81       	ldd	r24, Y+1	; 0x01
     f04:	81 60       	ori	r24, 0x01	; 1
     f06:	89 83       	std	Y+1, r24	; 0x01
	if (isBottomPointValid())
     f08:	21 d3       	rcall	.+1602   	; 0x154c <isBottomPointValid>
     f0a:	88 23       	and	r24, r24
     f0c:	19 f0       	breq	.+6      	; 0xf14 <mf_rollDo+0xa4>
		str[0] |= SEGD;
     f0e:	89 81       	ldd	r24, Y+1	; 0x01
     f10:	88 60       	ori	r24, 0x08	; 8
     f12:	89 83       	std	Y+1, r24	; 0x01
	if (str[0] == 0)
     f14:	89 81       	ldd	r24, Y+1	; 0x01
     f16:	81 11       	cpse	r24, r1
     f18:	02 c0       	rjmp	.+4      	; 0xf1e <mf_rollDo+0xae>
		str[0] = ' ';
     f1a:	80 e2       	ldi	r24, 0x20	; 32
     f1c:	89 83       	std	Y+1, r24	; 0x01
		
	printLedBuffer(0,str);
     f1e:	be 01       	movw	r22, r28
     f20:	6f 5f       	subi	r22, 0xFF	; 255
     f22:	7f 4f       	sbci	r23, 0xFF	; 255
     f24:	80 e0       	ldi	r24, 0x00	; 0
     f26:	d5 dd       	rcall	.-1110   	; 0xad2 <printLedBuffer>
}
     f28:	27 96       	adiw	r28, 0x07	; 7
     f2a:	0f b6       	in	r0, 0x3f	; 63
     f2c:	f8 94       	cli
     f2e:	de bf       	out	0x3e, r29	; 62
     f30:	0f be       	out	0x3f, r0	; 63
     f32:	cd bf       	out	0x3d, r28	; 61
     f34:	df 91       	pop	r29
     f36:	cf 91       	pop	r28
     f38:	08 95       	ret

00000f3a <mf_rollSelect>:
//---------------------------------------------//
//---------------------------------------------//

void mf_rollSelect(void)
{
	setExtraLeds(LED_ROLL);
     f3a:	80 e4       	ldi	r24, 0x40	; 64
     f3c:	f2 dd       	rcall	.-1052   	; 0xb22 <setExtraLeds>
	mf_leafSelectAct();		// setup and start timer
     f3e:	47 ce       	rjmp	.-882    	; 0xbce <mf_leafSelectAct>

00000f40 <mf_setTempDo>:

//PROGMEM const char ms_setTempDo[] =  {' ',' ',' ',' ',0xB0,'C',0};
//PROGMEM const char ms_setTempUnreg[] = " UNREG";

void mf_setTempDo(void)
{
     f40:	cf 93       	push	r28
     f42:	df 93       	push	r29
     f44:	cd b7       	in	r28, 0x3d	; 61
     f46:	de b7       	in	r29, 0x3e	; 62
     f48:	27 97       	sbiw	r28, 0x07	; 7
     f4a:	0f b6       	in	r0, 0x3f	; 63
     f4c:	f8 94       	cli
     f4e:	de bf       	out	0x3e, r29	; 62
     f50:	0f be       	out	0x3f, r0	; 63
     f52:	cd bf       	out	0x3d, r28	; 61
	char str[] = {' ',' ',' ',' ',0xB0,'C',0};
     f54:	87 e0       	ldi	r24, 0x07	; 7
     f56:	e9 ea       	ldi	r30, 0xA9	; 169
     f58:	f0 e0       	ldi	r31, 0x00	; 0
     f5a:	de 01       	movw	r26, r28
     f5c:	11 96       	adiw	r26, 0x01	; 1
     f5e:	01 90       	ld	r0, Z+
     f60:	0d 92       	st	X+, r0
     f62:	8a 95       	dec	r24
     f64:	e1 f7       	brne	.-8      	; 0xf5e <mf_setTempDo+0x1e>
	//char str[7];
	//strcpy_P(str,str1_PM);
	
	if (button_state & (BD_UP | BR_UP))
     f66:	80 91 f8 00 	lds	r24, 0x00F8
     f6a:	90 91 f9 00 	lds	r25, 0x00F9
     f6e:	9c 01       	movw	r18, r24
     f70:	20 74       	andi	r18, 0x40	; 64
     f72:	34 70       	andi	r19, 0x04	; 4
     f74:	23 2b       	or	r18, r19
     f76:	31 f0       	breq	.+12     	; 0xf84 <mf_setTempDo+0x44>
	{
		if (p.setup_temp_value < MAX_SET_TEMP)
     f78:	80 91 9f 01 	lds	r24, 0x019F
     f7c:	8f 3f       	cpi	r24, 0xFF	; 255
     f7e:	69 f0       	breq	.+26     	; 0xf9a <mf_setTempDo+0x5a>
			p.setup_temp_value += TEMP_SET_STEP;
     f80:	8b 5f       	subi	r24, 0xFB	; 251
     f82:	09 c0       	rjmp	.+18     	; 0xf96 <mf_setTempDo+0x56>
		restartMenuTimer();
	}
	else if (button_state & (BD_DOWN | BR_DOWN))
     f84:	80 78       	andi	r24, 0x80	; 128
     f86:	98 70       	andi	r25, 0x08	; 8
     f88:	89 2b       	or	r24, r25
     f8a:	49 f0       	breq	.+18     	; 0xf9e <mf_setTempDo+0x5e>
	{
		if (p.setup_temp_value > MIN_SET_TEMP)
     f8c:	80 91 9f 01 	lds	r24, 0x019F
     f90:	8f 31       	cpi	r24, 0x1F	; 31
     f92:	18 f0       	brcs	.+6      	; 0xf9a <mf_setTempDo+0x5a>
			p.setup_temp_value -= TEMP_SET_STEP;
     f94:	85 50       	subi	r24, 0x05	; 5
     f96:	80 93 9f 01 	sts	0x019F, r24
//	 Restarts menu state timeout
//	Should be used in RUN function when control buttons are pressed.
//-----------------------------------------------------------------//
static void restartMenuTimer(void)
{
	menuTimer.Timer = 0;
     f9a:	10 92 84 00 	sts	0x0084, r1
			p.setup_temp_value -= TEMP_SET_STEP;
		restartMenuTimer();
	}					
		
	// Output setting to LED
	if (p.setup_temp_value < MAX_SET_TEMP)
     f9e:	80 91 9f 01 	lds	r24, 0x019F
     fa2:	8f 3f       	cpi	r24, 0xFF	; 255
     fa4:	51 f0       	breq	.+20     	; 0xfba <mf_setTempDo+0x7a>
	{
		u16toa_align_right(p.setup_temp_value,str,NO_TERMINATING_ZERO | 4);
     fa6:	44 e8       	ldi	r20, 0x84	; 132
     fa8:	be 01       	movw	r22, r28
     faa:	6f 5f       	subi	r22, 0xFF	; 255
     fac:	7f 4f       	sbci	r23, 0xFF	; 255
     fae:	90 e0       	ldi	r25, 0x00	; 0
     fb0:	4d d1       	rcall	.+666    	; 0x124c <u16toa_align_right>
		printLedBuffer(0,str);
     fb2:	be 01       	movw	r22, r28
     fb4:	6f 5f       	subi	r22, 0xFF	; 255
     fb6:	7f 4f       	sbci	r23, 0xFF	; 255
     fb8:	02 c0       	rjmp	.+4      	; 0xfbe <mf_setTempDo+0x7e>
	}		
	else
	{
		printLedBuffer(0," UNREG");
     fba:	6c ec       	ldi	r22, 0xCC	; 204
     fbc:	70 e0       	ldi	r23, 0x00	; 0
     fbe:	80 e0       	ldi	r24, 0x00	; 0
     fc0:	88 dd       	rcall	.-1264   	; 0xad2 <printLedBuffer>
	}
	
	
	if (userTimer.FA_GE)
     fc2:	80 91 13 01 	lds	r24, 0x0113
     fc6:	84 ff       	sbrs	r24, 4
     fc8:	03 c0       	rjmp	.+6      	; 0xfd0 <mf_setTempDo+0x90>
		setExtraLeds(LED_TEMP);
     fca:	80 e8       	ldi	r24, 0x80	; 128
     fcc:	aa dd       	rcall	.-1196   	; 0xb22 <setExtraLeds>
     fce:	02 c0       	rjmp	.+4      	; 0xfd4 <mf_setTempDo+0x94>
	else
		clearExtraLeds(LED_TEMP);
     fd0:	80 e8       	ldi	r24, 0x80	; 128
     fd2:	ad dd       	rcall	.-1190   	; 0xb2e <clearExtraLeds>
}
     fd4:	27 96       	adiw	r28, 0x07	; 7
     fd6:	0f b6       	in	r0, 0x3f	; 63
     fd8:	f8 94       	cli
     fda:	de bf       	out	0x3e, r29	; 62
     fdc:	0f be       	out	0x3f, r0	; 63
     fde:	cd bf       	out	0x3d, r28	; 61
     fe0:	df 91       	pop	r29
     fe2:	cf 91       	pop	r28
     fe4:	08 95       	ret

00000fe6 <mf_realTempSelect>:
//=================================================================//


void mf_realTempSelect(void)
{
	setExtraLeds(LED_TEMP);
     fe6:	80 e8       	ldi	r24, 0x80	; 128
     fe8:	9c cd       	rjmp	.-1224   	; 0xb22 <setExtraLeds>

00000fea <mf_realTempDo>:
}

void mf_realTempDo(void)
{
     fea:	cf 93       	push	r28
     fec:	df 93       	push	r29
     fee:	cd b7       	in	r28, 0x3d	; 61
     ff0:	de b7       	in	r29, 0x3e	; 62
     ff2:	27 97       	sbiw	r28, 0x07	; 7
     ff4:	0f b6       	in	r0, 0x3f	; 63
     ff6:	f8 94       	cli
     ff8:	de bf       	out	0x3e, r29	; 62
     ffa:	0f be       	out	0x3f, r0	; 63
     ffc:	cd bf       	out	0x3d, r28	; 61
	char str[] = {' ',' ',' ',' ',0xB0,'C',0};
     ffe:	87 e0       	ldi	r24, 0x07	; 7
    1000:	e9 ea       	ldi	r30, 0xA9	; 169
    1002:	f0 e0       	ldi	r31, 0x00	; 0
    1004:	de 01       	movw	r26, r28
    1006:	11 96       	adiw	r26, 0x01	; 1
    1008:	01 90       	ld	r0, Z+
    100a:	0d 92       	st	X+, r0
    100c:	8a 95       	dec	r24
    100e:	e1 f7       	brne	.-8      	; 0x1008 <mf_realTempDo+0x1e>

	if (adc_status & (SENSOR_ERROR_NO_PRESENT))
    1010:	80 91 6d 01 	lds	r24, 0x016D
    1014:	80 ff       	sbrs	r24, 0
    1016:	03 c0       	rjmp	.+6      	; 0x101e <mf_realTempDo+0x34>
	{
		printLedBuffer(0,"ERR 01");
    1018:	63 ed       	ldi	r22, 0xD3	; 211
    101a:	70 e0       	ldi	r23, 0x00	; 0
    101c:	11 c0       	rjmp	.+34     	; 0x1040 <mf_realTempDo+0x56>
	}
	else if (adc_status & (SENSOR_ERROR_SHORTED))
    101e:	81 ff       	sbrs	r24, 1
    1020:	03 c0       	rjmp	.+6      	; 0x1028 <mf_realTempDo+0x3e>
	{
		printLedBuffer(0,"ERR 02");
    1022:	6a ed       	ldi	r22, 0xDA	; 218
    1024:	70 e0       	ldi	r23, 0x00	; 0
    1026:	0c c0       	rjmp	.+24     	; 0x1040 <mf_realTempDo+0x56>
	}
	else
	{
		// Output ADC result to LED
		u16toa_align_right(adc_celsius,str,NO_TERMINATING_ZERO | 4);
    1028:	44 e8       	ldi	r20, 0x84	; 132
    102a:	be 01       	movw	r22, r28
    102c:	6f 5f       	subi	r22, 0xFF	; 255
    102e:	7f 4f       	sbci	r23, 0xFF	; 255
    1030:	80 91 6e 01 	lds	r24, 0x016E
    1034:	90 91 6f 01 	lds	r25, 0x016F
    1038:	09 d1       	rcall	.+530    	; 0x124c <u16toa_align_right>
		printLedBuffer(0,str);
    103a:	be 01       	movw	r22, r28
    103c:	6f 5f       	subi	r22, 0xFF	; 255
    103e:	7f 4f       	sbci	r23, 0xFF	; 255
    1040:	80 e0       	ldi	r24, 0x00	; 0
    1042:	47 dd       	rcall	.-1394   	; 0xad2 <printLedBuffer>
	}
}
    1044:	27 96       	adiw	r28, 0x07	; 7
    1046:	0f b6       	in	r0, 0x3f	; 63
    1048:	f8 94       	cli
    104a:	de bf       	out	0x3e, r29	; 62
    104c:	0f be       	out	0x3f, r0	; 63
    104e:	cd bf       	out	0x3d, r28	; 61
    1050:	df 91       	pop	r29
    1052:	cf 91       	pop	r28
    1054:	08 95       	ret

00001056 <getMenuFunctionRecord.constprop.1>:
//	Arguments:
//		menuItemID - ID of an item
//		menuRecord - pointer to function structure to fill
//	Output:
//-----------------------------------------------------------------//
static void getMenuFunctionRecord(uint8_t menuItemID, MenuFunctionRecord* menuRecord )
    1056:	1f 93       	push	r17
    1058:	cf 93       	push	r28
    105a:	df 93       	push	r29
    105c:	c0 e0       	ldi	r28, 0x00	; 0
    105e:	d0 e0       	ldi	r29, 0x00	; 0
{
	uint8_t i;
	for (i = 0; i < sizeof(menuFunctionSet)/sizeof(MenuFunctionRecord); i++  )
	{
		readMenuRecord(&menuFunctionSet[i], menuRecord);
    1060:	17 e0       	ldi	r17, 0x07	; 7
    1062:	1c 9f       	mul	r17, r28
    1064:	90 01       	movw	r18, r0
    1066:	1d 9f       	mul	r17, r29
    1068:	30 0d       	add	r19, r0
    106a:	11 24       	eor	r1, r1
    106c:	22 5a       	subi	r18, 0xA2	; 162
    106e:	3f 4f       	sbci	r19, 0xFF	; 255
//		fRecPtr		- address of the function record in the FLASH
//		resPtr		- address of the record to fill in the SRAM
//-----------------------------------------------------------------//
static inline void readMenuRecord(const MenuFunctionRecord* fRecPtr, MenuFunctionRecord* resPtr )
{
	resPtr->Item = pgm_read_byte(&fRecPtr->Item);
    1070:	f9 01       	movw	r30, r18
    1072:	94 91       	lpm	r25, Z
	resPtr->SelectFunction = (FuncPtr)pgm_read_word(&fRecPtr->SelectFunction);
    1074:	31 96       	adiw	r30, 0x01	; 1
    1076:	a5 91       	lpm	r26, Z+
    1078:	b4 91       	lpm	r27, Z
	resPtr->RunFunction = (FuncPtr)pgm_read_word(&fRecPtr->RunFunction);
    107a:	f9 01       	movw	r30, r18
    107c:	33 96       	adiw	r30, 0x03	; 3
    107e:	65 91       	lpm	r22, Z+
    1080:	74 91       	lpm	r23, Z
	resPtr->LeaveFunction = (FuncPtr)pgm_read_word(&fRecPtr->LeaveFunction);
    1082:	2b 5f       	subi	r18, 0xFB	; 251
    1084:	3f 4f       	sbci	r19, 0xFF	; 255
    1086:	f9 01       	movw	r30, r18
    1088:	45 91       	lpm	r20, Z+
    108a:	54 91       	lpm	r21, Z
{
	uint8_t i;
	for (i = 0; i < sizeof(menuFunctionSet)/sizeof(MenuFunctionRecord); i++  )
	{
		readMenuRecord(&menuFunctionSet[i], menuRecord);
		if (menuRecord->Item == menuItemID)
    108c:	98 13       	cpse	r25, r24
    108e:	03 c0       	rjmp	.+6      	; 0x1096 <getMenuFunctionRecord.constprop.1+0x40>
    1090:	80 93 0a 01 	sts	0x010A, r24
    1094:	06 c0       	rjmp	.+12     	; 0x10a2 <getMenuFunctionRecord.constprop.1+0x4c>
    1096:	21 96       	adiw	r28, 0x01	; 1
//	Output:
//-----------------------------------------------------------------//
static void getMenuFunctionRecord(uint8_t menuItemID, MenuFunctionRecord* menuRecord )
{
	uint8_t i;
	for (i = 0; i < sizeof(menuFunctionSet)/sizeof(MenuFunctionRecord); i++  )
    1098:	ce 30       	cpi	r28, 0x0E	; 14
    109a:	d1 05       	cpc	r29, r1
    109c:	11 f7       	brne	.-60     	; 0x1062 <getMenuFunctionRecord.constprop.1+0xc>
    109e:	90 93 0a 01 	sts	0x010A, r25
    10a2:	a0 93 0b 01 	sts	0x010B, r26
    10a6:	b0 93 0c 01 	sts	0x010C, r27
    10aa:	60 93 0d 01 	sts	0x010D, r22
    10ae:	70 93 0e 01 	sts	0x010E, r23
    10b2:	40 93 0f 01 	sts	0x010F, r20
    10b6:	50 93 10 01 	sts	0x0110, r21
	{
		readMenuRecord(&menuFunctionSet[i], menuRecord);
		if (menuRecord->Item == menuItemID)
			break;
	}
}
    10ba:	df 91       	pop	r29
    10bc:	cf 91       	pop	r28
    10be:	1f 91       	pop	r17
    10c0:	08 95       	ret

000010c2 <InitMenu>:
//	Menu initialization
//	Call this function at start of your program before processMenu()
//-----------------------------------------------------------------//
void InitMenu(void)
{
	selectedMenuItemID = mi_REALTEMP;
    10c2:	81 e0       	ldi	r24, 0x01	; 1
    10c4:	80 93 09 01 	sts	0x0109, r24
	getMenuFunctionRecord(selectedMenuItemID, &selectedMenuFunctionRecord);
    10c8:	c6 df       	rcall	.-116    	; 0x1056 <getMenuFunctionRecord.constprop.1>
	processItemFunction(selectedMenuFunctionRecord.SelectFunction);
    10ca:	80 91 0b 01 	lds	r24, 0x010B
    10ce:	90 91 0c 01 	lds	r25, 0x010C
    10d2:	72 cd       	rjmp	.-1308   	; 0xbb8 <processItemFunction>

000010d4 <processMenu>:
//	Main menu control, -  state function calls, jumps 
//	between menu states and indication
//	Call this function from main() with a fixed time interval.
//-----------------------------------------------------------------//
void processMenu(void)
{
    10d4:	0f 93       	push	r16
    10d6:	1f 93       	push	r17
    10d8:	cf 93       	push	r28
    10da:	df 93       	push	r29
	NextItem_t nextItem;
	uint16_t jumpCondition;
	
	processSoftTimer8b(&menuTimer);	
    10dc:	83 e8       	ldi	r24, 0x83	; 131
    10de:	90 e0       	ldi	r25, 0x00	; 0
    10e0:	64 d3       	rcall	.+1736   	; 0x17aa <processSoftTimer8b>
	
	// Compose jump condition
	jumpCondition = button_state;		
    10e2:	40 91 f8 00 	lds	r20, 0x00F8
    10e6:	50 91 f9 00 	lds	r21, 0x00F9
	if (menuTimer.FTop)
    10ea:	80 91 83 00 	lds	r24, 0x0083
    10ee:	85 fd       	sbrc	r24, 5
		jumpCondition |= TMR_EXP;
    10f0:	50 68       	ori	r21, 0x80	; 128
	if (sys_timers.flags & AUTOPOFF_EXPIRED)
    10f2:	80 91 8f 00 	lds	r24, 0x008F
    10f6:	84 fd       	sbrc	r24, 4
		jumpCondition |= GOTO_POFF;
    10f8:	50 64       	ori	r21, 0x40	; 64
	
	// Get next menu item according to current state and jump conditions
	nextItem = getNextMenuItem(selectedMenuItemID, jumpCondition);
    10fa:	80 91 09 01 	lds	r24, 0x0109
    10fe:	60 e0       	ldi	r22, 0x00	; 0
    1100:	70 e0       	ldi	r23, 0x00	; 0
	MenuJumpRecord	jRecord;
	uint8_t i;
	
	for (i = 0; i < sizeof(menuJumpSet)/sizeof(MenuJumpRecord); i++  )
	{
		readJumpRecord(&menuJumpSet[i], &jRecord);		// read full jump record
    1102:	95 e0       	ldi	r25, 0x05	; 5
    1104:	96 9f       	mul	r25, r22
    1106:	90 01       	movw	r18, r0
    1108:	97 9f       	mul	r25, r23
    110a:	30 0d       	add	r19, r0
    110c:	11 24       	eor	r1, r1
    110e:	20 54       	subi	r18, 0x40	; 64
    1110:	3f 4f       	sbci	r19, 0xFF	; 255
//		jRecPtr		- address of the jump record in the FLASH
//		resPtr		- address of the record to fill in the SRAM
//-----------------------------------------------------------------//
static inline void readJumpRecord(const MenuJumpRecord* jRecPtr, MenuJumpRecord* resPtr )
{
	resPtr->Item = pgm_read_byte(&jRecPtr->Item);
    1112:	f9 01       	movw	r30, r18
    1114:	14 91       	lpm	r17, Z
	resPtr->JumpCondition = pgm_read_word(&jRecPtr->JumpCondition);
    1116:	31 96       	adiw	r30, 0x01	; 1
    1118:	a5 91       	lpm	r26, Z+
    111a:	b4 91       	lpm	r27, Z
	resPtr->NextItem= pgm_read_byte(&jRecPtr->NextItem);
    111c:	f9 01       	movw	r30, r18
    111e:	33 96       	adiw	r30, 0x03	; 3
    1120:	c4 91       	lpm	r28, Z
	resPtr->Flags= pgm_read_byte(&jRecPtr->Flags);
    1122:	f9 01       	movw	r30, r18
    1124:	34 96       	adiw	r30, 0x04	; 4
    1126:	d4 91       	lpm	r29, Z
	uint8_t i;
	
	for (i = 0; i < sizeof(menuJumpSet)/sizeof(MenuJumpRecord); i++  )
	{
		readJumpRecord(&menuJumpSet[i], &jRecord);		// read full jump record
		if (jRecord.Item == selectedItemId)				// If ID match,
    1128:	18 13       	cpse	r17, r24
    112a:	0b c0       	rjmp	.+22     	; 0x1142 <processMenu+0x6e>
		{
			if ((jRecord.JumpCondition & jmpCond) != 0)		// if any of jump conditions match too,
    112c:	a4 23       	and	r26, r20
    112e:	b5 23       	and	r27, r21
    1130:	ab 2b       	or	r26, r27
    1132:	39 f0       	breq	.+14     	; 0x1142 <processMenu+0x6e>
			{
				nextItem.ItemID = jRecord.NextItem;			// switch to next menu item
				nextItem.ItemTimeout = jRecord.Flags & TIMEOUT_MASK;
    1134:	1d 2f       	mov	r17, r29
    1136:	1f 73       	andi	r17, 0x3F	; 63
				nextItem.ShiftFlags = (jRecord.Flags & (SHIFT_LEFT | SHIFT_RIGHT));
    1138:	0d 2f       	mov	r16, r29
    113a:	00 7c       	andi	r16, 0xC0	; 192
	
	// Get next menu item according to current state and jump conditions
	nextItem = getNextMenuItem(selectedMenuItemID, jumpCondition);
	
	// If next item differs from current
	if (nextItem.ItemID != selectedMenuItemID)
    113c:	c8 13       	cpse	r28, r24
    113e:	07 c0       	rjmp	.+14     	; 0x114e <processMenu+0x7a>
    1140:	27 c0       	rjmp	.+78     	; 0x1190 <processMenu+0xbc>
    1142:	6f 5f       	subi	r22, 0xFF	; 255
    1144:	7f 4f       	sbci	r23, 0xFF	; 255
	NextItem_t nextItem;
	nextItem.ItemID = selectedItemId;
	MenuJumpRecord	jRecord;
	uint8_t i;
	
	for (i = 0; i < sizeof(menuJumpSet)/sizeof(MenuJumpRecord); i++  )
    1146:	60 32       	cpi	r22, 0x20	; 32
    1148:	71 05       	cpc	r23, r1
    114a:	e1 f6       	brne	.-72     	; 0x1104 <processMenu+0x30>
    114c:	21 c0       	rjmp	.+66     	; 0x1190 <processMenu+0xbc>
	
	// If next item differs from current
	if (nextItem.ItemID != selectedMenuItemID)
	{		
		// Call exit function for current item
		processItemFunction(selectedMenuFunctionRecord.LeaveFunction);
    114e:	80 91 0f 01 	lds	r24, 0x010F
    1152:	90 91 10 01 	lds	r25, 0x0110
    1156:	30 dd       	rcall	.-1440   	; 0xbb8 <processItemFunction>
		
		// If shifting is specified, start it before calling any 
		//	new menu item functions 
		if (nextItem.ShiftFlags & SHIFT_RIGHT)
    1158:	d6 ff       	sbrs	r29, 6
    115a:	02 c0       	rjmp	.+4      	; 0x1160 <processMenu+0x8c>
			startShiftingWindowRight();
    115c:	89 dc       	rcall	.-1774   	; 0xa70 <startShiftingWindowRight>
    115e:	02 c0       	rjmp	.+4      	; 0x1164 <processMenu+0x90>
		else if (nextItem.ShiftFlags & SHIFT_LEFT)
    1160:	07 fd       	sbrc	r16, 7
			startShiftingWindowLeft();
    1162:	78 dc       	rcall	.-1808   	; 0xa54 <startShiftingWindowLeft>
		
		// Select new item
		selectedMenuItemID = nextItem.ItemID;
    1164:	c0 93 09 01 	sts	0x0109, r28
		
		// Load from FLASH and save function pointers
		getMenuFunctionRecord(selectedMenuItemID, &selectedMenuFunctionRecord);
    1168:	8c 2f       	mov	r24, r28
    116a:	75 df       	rcall	.-278    	; 0x1056 <getMenuFunctionRecord.constprop.1>
		// Call select function for next item
		processItemFunction(selectedMenuFunctionRecord.SelectFunction);
    116c:	80 91 0b 01 	lds	r24, 0x010B
    1170:	90 91 0c 01 	lds	r25, 0x010C
    1174:	21 dd       	rcall	.-1470   	; 0xbb8 <processItemFunction>
		// Start timer if timeout is enabled
		if (nextItem.ItemTimeout != 0)
    1176:	11 23       	and	r17, r17
    1178:	b9 f0       	breq	.+46     	; 0x11a8 <processMenu+0xd4>
		{
			menuTimer.Top = nextItem.ItemTimeout * MENU_TIMEOUT_MULT;
    117a:	11 0f       	add	r17, r17
    117c:	10 93 85 00 	sts	0x0085, r17
			menuTimer.Timer = 0;
    1180:	10 92 84 00 	sts	0x0084, r1
			menuTimer.Enabled = 1;	
    1184:	80 91 83 00 	lds	r24, 0x0083
    1188:	81 60       	ori	r24, 0x01	; 1
    118a:	80 93 83 00 	sts	0x0083, r24
    118e:	0c c0       	rjmp	.+24     	; 0x11a8 <processMenu+0xd4>
		}
		
	}
	else
	{
		processSoftTimer8b(&userTimer);
    1190:	83 e1       	ldi	r24, 0x13	; 19
    1192:	91 e0       	ldi	r25, 0x01	; 1
    1194:	0a d3       	rcall	.+1556   	; 0x17aa <processSoftTimer8b>
		// Stay at previous item
		processItemFunction(selectedMenuFunctionRecord.RunFunction);
    1196:	80 91 0d 01 	lds	r24, 0x010D
    119a:	90 91 0e 01 	lds	r25, 0x010E
	}	
}
    119e:	df 91       	pop	r29
    11a0:	cf 91       	pop	r28
    11a2:	1f 91       	pop	r17
    11a4:	0f 91       	pop	r16
	}
	else
	{
		processSoftTimer8b(&userTimer);
		// Stay at previous item
		processItemFunction(selectedMenuFunctionRecord.RunFunction);
    11a6:	08 cd       	rjmp	.-1520   	; 0xbb8 <processItemFunction>
	}	
}
    11a8:	df 91       	pop	r29
    11aa:	cf 91       	pop	r28
    11ac:	1f 91       	pop	r17
    11ae:	0f 91       	pop	r16
    11b0:	08 95       	ret

000011b2 <i32toa_align_right>:
}



void i32toa_align_right(int32_t val, char *buffer, uint8_t len)
{
    11b2:	cf 92       	push	r12
    11b4:	df 92       	push	r13
    11b6:	ef 92       	push	r14
    11b8:	ff 92       	push	r15
    11ba:	0f 93       	push	r16
    11bc:	1f 93       	push	r17
    11be:	cf 93       	push	r28
    11c0:	df 93       	push	r29
    11c2:	12 2f       	mov	r17, r18
	uint8_t is_negative = 0;
	if (!len)	return;
    11c4:	22 23       	and	r18, r18
    11c6:	c9 f1       	breq	.+114    	; 0x123a <i32toa_align_right+0x88>
	
	if (val < 0)
    11c8:	97 ff       	sbrs	r25, 7
    11ca:	09 c0       	rjmp	.+18     	; 0x11de <i32toa_align_right+0x2c>
	{
		val = -val;
    11cc:	90 95       	com	r25
    11ce:	80 95       	com	r24
    11d0:	70 95       	com	r23
    11d2:	61 95       	neg	r22
    11d4:	7f 4f       	sbci	r23, 0xFF	; 255
    11d6:	8f 4f       	sbci	r24, 0xFF	; 255
    11d8:	9f 4f       	sbci	r25, 0xFF	; 255
		is_negative = 1;
    11da:	01 e0       	ldi	r16, 0x01	; 1
    11dc:	01 c0       	rjmp	.+2      	; 0x11e0 <i32toa_align_right+0x2e>



void i32toa_align_right(int32_t val, char *buffer, uint8_t len)
{
	uint8_t is_negative = 0;
    11de:	00 e0       	ldi	r16, 0x00	; 0
	{
		val = -val;
		is_negative = 1;
	}
	
	if (len & NO_TERMINATING_ZERO)
    11e0:	17 ff       	sbrs	r17, 7
    11e2:	05 c0       	rjmp	.+10     	; 0x11ee <i32toa_align_right+0x3c>
	{
		len = len & ~NO_TERMINATING_ZERO;
    11e4:	1f 77       	andi	r17, 0x7F	; 127
		buffer += len;	
    11e6:	ea 01       	movw	r28, r20
    11e8:	c1 0f       	add	r28, r17
    11ea:	d1 1d       	adc	r29, r1
    11ec:	04 c0       	rjmp	.+8      	; 0x11f6 <i32toa_align_right+0x44>
	}
	else
	{
		buffer += len;	
    11ee:	ea 01       	movw	r28, r20
    11f0:	c1 0f       	add	r28, r17
    11f2:	d1 1d       	adc	r29, r1
		*buffer = 0;
    11f4:	18 82       	st	Y, r1
	}
	
	do
	{
		*--buffer = val % 10 + '0';
    11f6:	2a e0       	ldi	r18, 0x0A	; 10
    11f8:	c2 2e       	mov	r12, r18
    11fa:	d1 2c       	mov	r13, r1
    11fc:	e1 2c       	mov	r14, r1
    11fe:	f1 2c       	mov	r15, r1
    1200:	a7 01       	movw	r20, r14
    1202:	96 01       	movw	r18, r12
    1204:	0a d4       	rcall	.+2068   	; 0x1a1a <__divmodsi4>
    1206:	60 5d       	subi	r22, 0xD0	; 208
    1208:	6a 93       	st	-Y, r22
		val /= 10;
    120a:	b9 01       	movw	r22, r18
    120c:	ca 01       	movw	r24, r20
		len--;
    120e:	11 50       	subi	r17, 0x01	; 1
	}
	while ((val != 0) && len);
    1210:	61 15       	cp	r22, r1
    1212:	71 05       	cpc	r23, r1
    1214:	81 05       	cpc	r24, r1
    1216:	91 05       	cpc	r25, r1
    1218:	19 f0       	breq	.+6      	; 0x1220 <i32toa_align_right+0x6e>
    121a:	11 11       	cpse	r17, r1
    121c:	f1 cf       	rjmp	.-30     	; 0x1200 <i32toa_align_right+0x4e>
    121e:	08 c0       	rjmp	.+16     	; 0x1230 <i32toa_align_right+0x7e>
	
	if ( (len) && (is_negative) )
    1220:	11 23       	and	r17, r17
    1222:	31 f0       	breq	.+12     	; 0x1230 <i32toa_align_right+0x7e>
    1224:	00 23       	and	r16, r16
    1226:	21 f0       	breq	.+8      	; 0x1230 <i32toa_align_right+0x7e>
	{
		*--buffer = '-';
    1228:	21 97       	sbiw	r28, 0x01	; 1
    122a:	8d e2       	ldi	r24, 0x2D	; 45
    122c:	88 83       	st	Y, r24
		len--;	
    122e:	11 50       	subi	r17, 0x01	; 1
	}	
	
	// Padding
	while(len--)
		*--buffer = ' ';
    1230:	80 e2       	ldi	r24, 0x20	; 32
    1232:	01 c0       	rjmp	.+2      	; 0x1236 <i32toa_align_right+0x84>
    1234:	8a 93       	st	-Y, r24
		*--buffer = '-';
		len--;	
	}	
	
	// Padding
	while(len--)
    1236:	11 50       	subi	r17, 0x01	; 1
    1238:	e8 f7       	brcc	.-6      	; 0x1234 <i32toa_align_right+0x82>
		*--buffer = ' ';
}
    123a:	df 91       	pop	r29
    123c:	cf 91       	pop	r28
    123e:	1f 91       	pop	r17
    1240:	0f 91       	pop	r16
    1242:	ff 90       	pop	r15
    1244:	ef 90       	pop	r14
    1246:	df 90       	pop	r13
    1248:	cf 90       	pop	r12
    124a:	08 95       	ret

0000124c <u16toa_align_right>:




void u16toa_align_right(uint16_t val, char *buffer, uint8_t len)
{
    124c:	fb 01       	movw	r30, r22
    124e:	24 2f       	mov	r18, r20
	i32toa_align_right((int32_t)val, buffer, len);
    1250:	bc 01       	movw	r22, r24
    1252:	80 e0       	ldi	r24, 0x00	; 0
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	af 01       	movw	r20, r30
    1258:	ac cf       	rjmp	.-168    	; 0x11b2 <i32toa_align_right>

0000125a <logI32p>:
	u16toa_align_right(val,str,6);
	USART_sendstr(str);
}

static void logI32p(int32_t val)
{
    125a:	cf 93       	push	r28
    125c:	df 93       	push	r29
    125e:	cd b7       	in	r28, 0x3d	; 61
    1260:	de b7       	in	r29, 0x3e	; 62
    1262:	2c 97       	sbiw	r28, 0x0c	; 12
    1264:	0f b6       	in	r0, 0x3f	; 63
    1266:	f8 94       	cli
    1268:	de bf       	out	0x3e, r29	; 62
    126a:	0f be       	out	0x3f, r0	; 63
    126c:	cd bf       	out	0x3d, r28	; 61
	char str[12];
	i32toa_align_right(val,str,12);
    126e:	2c e0       	ldi	r18, 0x0C	; 12
    1270:	ae 01       	movw	r20, r28
    1272:	4f 5f       	subi	r20, 0xFF	; 255
    1274:	5f 4f       	sbci	r21, 0xFF	; 255
    1276:	9d df       	rcall	.-198    	; 0x11b2 <i32toa_align_right>
	USART_sendstr(str);
    1278:	ce 01       	movw	r24, r28
    127a:	01 96       	adiw	r24, 0x01	; 1
    127c:	9d d3       	rcall	.+1850   	; 0x19b8 <USART_sendstr>
}
    127e:	2c 96       	adiw	r28, 0x0c	; 12
    1280:	0f b6       	in	r0, 0x3f	; 63
    1282:	f8 94       	cli
    1284:	de bf       	out	0x3e, r29	; 62
    1286:	0f be       	out	0x3f, r0	; 63
    1288:	cd bf       	out	0x3d, r28	; 61
    128a:	df 91       	pop	r29
    128c:	cf 91       	pop	r28
    128e:	08 95       	ret

00001290 <logU16p>:
    }
}


static void logU16p(uint16_t val)
{
    1290:	cf 93       	push	r28
    1292:	df 93       	push	r29
    1294:	00 d0       	rcall	.+0      	; 0x1296 <logU16p+0x6>
    1296:	00 d0       	rcall	.+0      	; 0x1298 <logU16p+0x8>
    1298:	00 d0       	rcall	.+0      	; 0x129a <logU16p+0xa>
    129a:	cd b7       	in	r28, 0x3d	; 61
    129c:	de b7       	in	r29, 0x3e	; 62
	char str[6];
	u16toa_align_right(val,str,6);
    129e:	46 e0       	ldi	r20, 0x06	; 6
    12a0:	be 01       	movw	r22, r28
    12a2:	6f 5f       	subi	r22, 0xFF	; 255
    12a4:	7f 4f       	sbci	r23, 0xFF	; 255
    12a6:	d2 df       	rcall	.-92     	; 0x124c <u16toa_align_right>
	USART_sendstr(str);
    12a8:	ce 01       	movw	r24, r28
    12aa:	01 96       	adiw	r24, 0x01	; 1
    12ac:	85 d3       	rcall	.+1802   	; 0x19b8 <USART_sendstr>
}
    12ae:	26 96       	adiw	r28, 0x06	; 6
    12b0:	0f b6       	in	r0, 0x3f	; 63
    12b2:	f8 94       	cli
    12b4:	de bf       	out	0x3e, r29	; 62
    12b6:	0f be       	out	0x3f, r0	; 63
    12b8:	cd bf       	out	0x3d, r28	; 61
    12ba:	df 91       	pop	r29
    12bc:	cf 91       	pop	r28
    12be:	08 95       	ret

000012c0 <init_system_io>:


void init_system_io()
{
	// Setup Port D
	PORTD = 0;//(1<<PD_SYNCA | 1<<PD_SYNCB);
    12c0:	12 ba       	out	0x12, r1	; 18
	DDRD = (1<<PD_TXD | 1<<PD_M1 | 1<<PD_M2 | 1<<PD_HEATER | 1<<PD_HEAT_INDIC );
    12c2:	8e e3       	ldi	r24, 0x3E	; 62
    12c4:	81 bb       	out	0x11, r24	; 17
	
	// Setup Port B
	PORTB = 0;
    12c6:	18 ba       	out	0x18, r1	; 24
	DDRB = (1<<PB_BEEPER | 1<<PB_LED_DOUT | 1<<PB_LED_CLK | 1<<PB_SEGF | 1<<PB_SEGG | 1<<PB_SEGH);
    12c8:	8f e3       	ldi	r24, 0x3F	; 63
    12ca:	87 bb       	out	0x17, r24	; 23
	
	PORTC = 0;
    12cc:	15 ba       	out	0x15, r1	; 21
	DDRC = (1<<PC_SEGA | 1<<PC_SEGB | 1<<PC_SEGC | 1<<PC_SEGD | 1<<PC_SEGE);	
    12ce:	8f e1       	ldi	r24, 0x1F	; 31
    12d0:	84 bb       	out	0x14, r24	; 20

	// Setup timer0
	// 1/1024 prescaler, T=64us @16MHz
	TCCR0 = (1<<CS02 | 0<<CS01 | 1<<CS00);
    12d2:	85 e0       	ldi	r24, 0x05	; 5
    12d4:	83 bf       	out	0x33, r24	; 51
	TCNT0 = 0;
    12d6:	12 be       	out	0x32, r1	; 50
	// Clear interrupt flag
	TIFR |= (1<<TOV0);
    12d8:	88 b7       	in	r24, 0x38	; 56
    12da:	81 60       	ori	r24, 0x01	; 1
    12dc:	88 bf       	out	0x38, r24	; 56
	// Enable interrupts from timer 0
	TIMSK |= (1<<TOIE0);
    12de:	89 b7       	in	r24, 0x39	; 57
    12e0:	81 60       	ori	r24, 0x01	; 1
    12e2:	89 bf       	out	0x39, r24	; 57
	
	// Setup timer2 as 1ms system frequency generator
	// 1/64 prescaler, CTC mode, OC2 disconnected
	TCCR2 = (1<<CS22 | 1<<WGM21);
    12e4:	8c e0       	ldi	r24, 0x0C	; 12
    12e6:	85 bd       	out	0x25, r24	; 37
	OCR2 = 249;						// 1ms @ 16MHz
    12e8:	89 ef       	ldi	r24, 0xF9	; 249
    12ea:	83 bd       	out	0x23, r24	; 35
	TIMSK |= (1<<OCIE2);
    12ec:	89 b7       	in	r24, 0x39	; 57
    12ee:	80 68       	ori	r24, 0x80	; 128
    12f0:	89 bf       	out	0x39, r24	; 57
	
	// Setup timer1 as beeper frequency generator
	// CTC mode, 1/64 prescaler
	TCCR1A = 0;
    12f2:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = (1<<WGM12 | 1<<CS11 | 1<<CS10);
    12f4:	8b e0       	ldi	r24, 0x0B	; 11
    12f6:	8e bd       	out	0x2e, r24	; 46
	// 1kHz beeper frequency default
	OCR1A = 127;
    12f8:	8f e7       	ldi	r24, 0x7F	; 127
    12fa:	90 e0       	ldi	r25, 0x00	; 0
    12fc:	9b bd       	out	0x2b, r25	; 43
    12fe:	8a bd       	out	0x2a, r24	; 42

	// Setup AC sync comparator
	// Interrupt on output toggle
	ACSR = (1<<ACIE | 0<<ACIS1 | 0<<ACIS0);
    1300:	88 e0       	ldi	r24, 0x08	; 8
    1302:	88 b9       	out	0x08, r24	; 8
	
	// Setup ADC
	// Internal Vref + cap, input ADC5, 
	ADMUX = (1<<REFS1 | 1<<REFS0 | 0<<MUX3 | 1<<MUX2 | 0<<MUX1 | 1<<MUX0 );
    1304:	85 ec       	ldi	r24, 0xC5	; 197
    1306:	87 b9       	out	0x07, r24	; 7
	// Prescaler = 128
	ADCSRA = (1<<ADEN |/* 1<<ADFR |*/  1<<ADIE | 1<<ADPS2 | 1<<ADPS1 | 1<<ADPS0);
    1308:	8f e8       	ldi	r24, 0x8F	; 143
    130a:	86 b9       	out	0x06, r24	; 6
	
	// Setup USART
	// Double speed
	UCSRA = (1<<U2X);
    130c:	82 e0       	ldi	r24, 0x02	; 2
    130e:	8b b9       	out	0x0b, r24	; 11
	UCSRB = (1<<RXEN | 1<<TXEN | 0<<UCSZ2);
    1310:	88 e1       	ldi	r24, 0x18	; 24
    1312:	8a b9       	out	0x0a, r24	; 10
	// No parity, 1 stop bit, 8 bit
	UCSRC = (1<<URSEL | 0<<UPM1 | 0<<UPM0 | 0<<USBS | 1<<UCSZ1 | 1<<UCSZ0);
    1314:	86 e8       	ldi	r24, 0x86	; 134
    1316:	80 bd       	out	0x20, r24	; 32
	// 57600 @16MHz, 2x
	UBRRH=0x00;
    1318:	10 bc       	out	0x20, r1	; 32
	UBRRL=0x22;
    131a:	82 e2       	ldi	r24, 0x22	; 34
    131c:	89 b9       	out	0x09, r24	; 9
    131e:	08 95       	ret

00001320 <main>:
}



int main(void)
{
    1320:	cf 93       	push	r28
    1322:	df 93       	push	r29
    1324:	1f 92       	push	r1
    1326:	cd b7       	in	r28, 0x3d	; 61
    1328:	de b7       	in	r29, 0x3e	; 62
	volatile char str[12];
	volatile uint8_t temp8u = 0x00;
    132a:	19 82       	std	Y+1, r1	; 0x01
	volatile uint16_t temp16u;
	
	// Initialize MCU IO
	init_system_io();
    132c:	c9 df       	rcall	.-110    	; 0x12c0 <init_system_io>
	// Restore params from EEPROM
	restoreGlobalParams();
    132e:	c5 da       	rcall	.-2678   	; 0x8ba <restoreGlobalParams>
	// Calibrate ADC coefficients using restored params
	calculateCoeffs();
    1330:	75 d7       	rcall	.+3818   	; 0x221c <__data_load_end+0x62c>
	// Initialize LED indicator
	initLedIndicator();
    1332:	ac db       	rcall	.-2216   	; 0xa8c <initLedIndicator>
	// Clear comparator interrupt flag to prevent false triggering
	ACSR |= (1<<ACI);
    1334:	44 9a       	sbi	0x08, 4	; 8
	sei();
    1336:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1338:	2f ef       	ldi	r18, 0xFF	; 255
    133a:	81 ee       	ldi	r24, 0xE1	; 225
    133c:	94 e0       	ldi	r25, 0x04	; 4
    133e:	21 50       	subi	r18, 0x01	; 1
    1340:	80 40       	sbci	r24, 0x00	; 0
    1342:	90 40       	sbci	r25, 0x00	; 0
    1344:	e1 f7       	brne	.-8      	; 0x133e <main+0x1e>
    1346:	00 c0       	rjmp	.+0      	; 0x1348 <main+0x28>
    1348:	00 00       	nop
	// Safety delay for power part and ADC buffer
	_delay_ms(100);
	// Check AC line
	if(p_state == 0x0F) 	
    134a:	80 91 87 00 	lds	r24, 0x0087
    134e:	8f 30       	cpi	r24, 0x0F	; 15
    1350:	69 f4       	brne	.+26     	; 0x136c <main+0x4c>
	{
		// Power control state machine has not changed - sync has not been detected
		printLedBuffer(0,"ERR AC");
    1352:	61 ee       	ldi	r22, 0xE1	; 225
    1354:	70 e0       	ldi	r23, 0x00	; 0
    1356:	80 e0       	ldi	r24, 0x00	; 0
    1358:	bc db       	rcall	.-2184   	; 0xad2 <printLedBuffer>
    135a:	2f ef       	ldi	r18, 0xFF	; 255
    135c:	83 ed       	ldi	r24, 0xD3	; 211
    135e:	90 e3       	ldi	r25, 0x30	; 48
    1360:	21 50       	subi	r18, 0x01	; 1
    1362:	80 40       	sbci	r24, 0x00	; 0
    1364:	90 40       	sbci	r25, 0x00	; 0
    1366:	e1 f7       	brne	.-8      	; 0x1360 <main+0x40>
    1368:	00 c0       	rjmp	.+0      	; 0x136a <main+0x4a>
    136a:	00 00       	nop
		_delay_ms(1000);
	}
	// Initialize menu
	InitMenu();
    136c:	aa de       	rcall	.-684    	; 0x10c2 <InitMenu>
	// Beep
	SetBeeperFreq(1000);
    136e:	88 ee       	ldi	r24, 0xE8	; 232
    1370:	93 e0       	ldi	r25, 0x03	; 3
    1372:	b1 d2       	rcall	.+1378   	; 0x18d6 <SetBeeperFreq>
	StartBeep(200);
    1374:	88 ec       	ldi	r24, 0xC8	; 200
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	ce d2       	rcall	.+1436   	; 0x1916 <StartBeep>
	// When we get here, full ADC buffer have been sampled
	// Get oversampled and filtered ADC for PID controller
	update_normalized_adc();
    137a:	21 d8       	rcall	.-4030   	; 0x3be <update_normalized_adc>
	// Call PID controller function in order to initialize it's internal structures
	heaterInit();
    137c:	c6 d9       	rcall	.-3188   	; 0x70a <heaterInit>
	// Start rotating
	setMotorDirection(ROLL_FWD);
    137e:	81 e0       	ldi	r24, 0x01	; 1
    1380:	98 d0       	rcall	.+304    	; 0x14b2 <setMotorDirection>
	// Clear timer
	menuUpdateTimer.FOvfl = 0;
    1382:	80 91 90 00 	lds	r24, 0x0090
    1386:	8f 7b       	andi	r24, 0xBF	; 191
    1388:	80 93 90 00 	sts	0x0090, r24
	// Enable watchdog
	wdt_enable(WDTO_1S);
    138c:	2e e0       	ldi	r18, 0x0E	; 14
    138e:	88 e1       	ldi	r24, 0x18	; 24
    1390:	90 e0       	ldi	r25, 0x00	; 0
    1392:	0f b6       	in	r0, 0x3f	; 63
    1394:	f8 94       	cli
    1396:	a8 95       	wdr
    1398:	81 bd       	out	0x21, r24	; 33
    139a:	0f be       	out	0x3f, r0	; 63
    139c:	21 bd       	out	0x21, r18	; 33

    while(1)
    {
		
		if (menuUpdateTimer.FOvfl)
    139e:	80 91 90 00 	lds	r24, 0x0090
    13a2:	86 ff       	sbrs	r24, 6
    13a4:	fc cf       	rjmp	.-8      	; 0x139e <main+0x7e>
		{
			// Reset watchdog timer
			wdt_reset();
    13a6:	a8 95       	wdr
			
			//--------- BUTTONS ----------//
			
			// Get new button state
			process_buttons();
    13a8:	46 d8       	rcall	.-3956   	; 0x436 <process_buttons>
			
			// Give sound feedback
			if (button_state & BL_MENU)
    13aa:	80 91 f8 00 	lds	r24, 0x00F8
    13ae:	90 91 f9 00 	lds	r25, 0x00F9
    13b2:	91 ff       	sbrs	r25, 1
    13b4:	03 c0       	rjmp	.+6      	; 0x13bc <main+0x9c>
			{
				SetBeeperFreq(800);
    13b6:	80 e2       	ldi	r24, 0x20	; 32
    13b8:	93 e0       	ldi	r25, 0x03	; 3
    13ba:	06 c0       	rjmp	.+12     	; 0x13c8 <main+0xa8>
				StartBeep(40);
			}
			else if (button_action_down & (BD_MENU | BD_UP | BD_DOWN | BD_HEATCTRL))
    13bc:	80 91 f7 00 	lds	r24, 0x00F7
    13c0:	81 7e       	andi	r24, 0xE1	; 225
    13c2:	31 f0       	breq	.+12     	; 0x13d0 <main+0xb0>
			{
				SetBeeperFreq(1000);
    13c4:	88 ee       	ldi	r24, 0xE8	; 232
    13c6:	93 e0       	ldi	r25, 0x03	; 3
    13c8:	86 d2       	rcall	.+1292   	; 0x18d6 <SetBeeperFreq>
				StartBeep(40);
    13ca:	88 e2       	ldi	r24, 0x28	; 40
    13cc:	90 e0       	ldi	r25, 0x00	; 0
    13ce:	a3 d2       	rcall	.+1350   	; 0x1916 <StartBeep>
			}	
			// Direction control buttons sounds get special processing at processRollControl()
			
			// If any button is pressed, restart power off interval
			if (button_action_down)
    13d0:	80 91 f7 00 	lds	r24, 0x00F7
    13d4:	81 11       	cpse	r24, r1
				resetAutoPowerOffCounter();
    13d6:	7c d2       	rcall	.+1272   	; 0x18d0 <resetAutoPowerOffCounter>
			
			//---------- TIMERS ----------//
			
			// Process timers and time counters - it is important to call
			// this function before menu and power controls processing
			processSystemTimers();
    13d8:	14 d2       	rcall	.+1064   	; 0x1802 <processSystemTimers>

			// Warn user about near auto powering off
			if (sys_timers.flags & AUTOPOFF_SOON)
    13da:	80 91 8f 00 	lds	r24, 0x008F
    13de:	83 ff       	sbrs	r24, 3
    13e0:	06 c0       	rjmp	.+12     	; 0x13ee <main+0xce>
			{
				SetBeeperFreq(1200);
    13e2:	80 eb       	ldi	r24, 0xB0	; 176
    13e4:	94 e0       	ldi	r25, 0x04	; 4
    13e6:	77 d2       	rcall	.+1262   	; 0x18d6 <SetBeeperFreq>
				StartBeep(200);
    13e8:	88 ec       	ldi	r24, 0xC8	; 200
    13ea:	90 e0       	ldi	r25, 0x00	; 0
    13ec:	94 d2       	rcall	.+1320   	; 0x1916 <StartBeep>
			}		
			
			//----------- ADC ------------//
			
			// Get new temperature measurement
			update_normalized_adc();			
    13ee:	e7 d7       	rcall	.+4046   	; 0x23be <__data_load_end+0x7ce>
		
			// Update indicated Celsius degree
			if (sys_timers.flags & EXPIRED_CELSIUS)
    13f0:	80 91 8f 00 	lds	r24, 0x008F
    13f4:	80 fd       	sbrc	r24, 0
				update_Celsius();		
    13f6:	5f d7       	rcall	.+3774   	; 0x22b6 <__data_load_end+0x6c6>
			
			//----------- MENU -----------//		
				
			// Process user menu states, settings and indication
			processMenu();
    13f8:	6d de       	rcall	.-806    	; 0x10d4 <processMenu>
			
			//--------- CONTROLS ---------//		
			
			// Process cyclic rolling, direction control
			processRollControl();	
    13fa:	ee d8       	rcall	.-3620   	; 0x5d8 <processRollControl>
			
			// Process heater regulation
			processHeaterControl();
    13fc:	8d d9       	rcall	.-3302   	; 0x718 <processHeaterControl>
		
			// Process heater events and warnings
			processHeaterAlerts();
    13fe:	00 da       	rcall	.-3072   	; 0x800 <processHeaterAlerts>
			
			
			
			//------- LOG to UART --------//	
			if (sys_timers.flags & EXPIRED_LOG)
    1400:	80 91 8f 00 	lds	r24, 0x008F
    1404:	85 ff       	sbrs	r24, 5
    1406:	42 c0       	rjmp	.+132    	; 0x148c <main+0x16c>
			{
				
				logU16p(adc_celsius);					// Actual temp Celsius
    1408:	80 91 6e 01 	lds	r24, 0x016E
    140c:	90 91 6f 01 	lds	r25, 0x016F
    1410:	3f df       	rcall	.-386    	; 0x1290 <logU16p>
				logU16p(adc_oversampled);				// Actual temp (ADC), oversampled
    1412:	80 91 29 01 	lds	r24, 0x0129
    1416:	90 91 2a 01 	lds	r25, 0x012A
    141a:	3a df       	rcall	.-396    	; 0x1290 <logU16p>
				logU16p(adc_filtered);					// Actual temp (ADC), oversampled, filtered
    141c:	80 91 27 01 	lds	r24, 0x0127
    1420:	90 91 28 01 	lds	r25, 0x0128
    1424:	35 df       	rcall	.-406    	; 0x1290 <logU16p>
				USART_sendstr("    ");
    1426:	87 ec       	ldi	r24, 0xC7	; 199
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	c6 d2       	rcall	.+1420   	; 0x19b8 <USART_sendstr>
				
				logU16p(dbg_SetPointPID);				// Temp setting, as input to PID
    142c:	80 91 b5 01 	lds	r24, 0x01B5
    1430:	90 91 b6 01 	lds	r25, 0x01B6
    1434:	2d df       	rcall	.-422    	; 0x1290 <logU16p>
				logU16p(dbg_RealTempPID);				// Real temp, sampled for PID input
    1436:	80 91 a7 01 	lds	r24, 0x01A7
    143a:	90 91 a8 01 	lds	r25, 0x01A8
    143e:	28 df       	rcall	.-432    	; 0x1290 <logU16p>
				
				logI32p(dbg_PID_p_term);				// p term
    1440:	60 91 a5 01 	lds	r22, 0x01A5
    1444:	70 91 a6 01 	lds	r23, 0x01A6
    1448:	88 27       	eor	r24, r24
    144a:	77 fd       	sbrc	r23, 7
    144c:	80 95       	com	r24
    144e:	98 2f       	mov	r25, r24
    1450:	04 df       	rcall	.-504    	; 0x125a <logI32p>
				logI32p(dbg_PID_d_term);				// d term
    1452:	60 91 b3 01 	lds	r22, 0x01B3
    1456:	70 91 b4 01 	lds	r23, 0x01B4
    145a:	88 27       	eor	r24, r24
    145c:	77 fd       	sbrc	r23, 7
    145e:	80 95       	com	r24
    1460:	98 2f       	mov	r25, r24
    1462:	fb de       	rcall	.-522    	; 0x125a <logI32p>
				logI32p(dbg_PID_i_term);				// i term
    1464:	60 91 a9 01 	lds	r22, 0x01A9
    1468:	70 91 aa 01 	lds	r23, 0x01AA
    146c:	88 27       	eor	r24, r24
    146e:	77 fd       	sbrc	r23, 7
    1470:	80 95       	com	r24
    1472:	98 2f       	mov	r25, r24
    1474:	f2 de       	rcall	.-540    	; 0x125a <logI32p>
				USART_sendstr("    ");
    1476:	87 ec       	ldi	r24, 0xC7	; 199
    1478:	90 e0       	ldi	r25, 0x00	; 0
    147a:	9e d2       	rcall	.+1340   	; 0x19b8 <USART_sendstr>
				
				logU16p(dbg_PID_output);				// PID output
    147c:	80 91 a3 01 	lds	r24, 0x01A3
    1480:	90 91 a4 01 	lds	r25, 0x01A4
    1484:	05 df       	rcall	.-502    	; 0x1290 <logU16p>
			
				USART_sendstr("\n\r");
    1486:	88 ee       	ldi	r24, 0xE8	; 232
    1488:	90 e0       	ldi	r25, 0x00	; 0
    148a:	96 d2       	rcall	.+1324   	; 0x19b8 <USART_sendstr>
				//---------------------------------//
				
			}
			
			
			menuUpdateTimer.FOvfl = 0;	
    148c:	80 91 90 00 	lds	r24, 0x0090
    1490:	8f 7b       	andi	r24, 0xBF	; 191
    1492:	80 93 90 00 	sts	0x0090, r24
    1496:	83 cf       	rjmp	.-250    	; 0x139e <main+0x7e>

00001498 <setHeaterPower>:

// User function to control heater intensity
void setHeaterPower(uint16_t value)
{
	// Disable interrupts from analog comparator
	ACSR &= ~(1<<ACIE);
    1498:	43 98       	cbi	0x08, 3	; 8
	// Update value
	heaterPower = (value > HEATER_MAX_POWER) ? HEATER_MAX_POWER : value;
    149a:	9c 01       	movw	r18, r24
    149c:	85 36       	cpi	r24, 0x65	; 101
    149e:	91 05       	cpc	r25, r1
    14a0:	10 f0       	brcs	.+4      	; 0x14a6 <setHeaterPower+0xe>
    14a2:	24 e6       	ldi	r18, 0x64	; 100
    14a4:	30 e0       	ldi	r19, 0x00	; 0
    14a6:	30 93 1a 01 	sts	0x011A, r19
    14aa:	20 93 19 01 	sts	0x0119, r18
	// Reenable interrupts
	ACSR |= (1<<ACIE);
    14ae:	43 9a       	sbi	0x08, 3	; 8
    14b0:	08 95       	ret

000014b2 <setMotorDirection>:

// User function to control motor rotation
void setMotorDirection(uint8_t dir)
{
	// Disable interrupts from timer0 
	TIMSK &= ~(1<<TOIE0);
    14b2:	99 b7       	in	r25, 0x39	; 57
    14b4:	9e 7f       	andi	r25, 0xFE	; 254
    14b6:	99 bf       	out	0x39, r25	; 57
		
	newDirReq = dir;	// save new direction request
    14b8:	80 93 1b 01 	sts	0x011B, r24
	dirChangedMask = ~ROLL_DIR_CHANGED;
    14bc:	9f ed       	ldi	r25, 0xDF	; 223
    14be:	90 93 88 00 	sts	0x0088, r25
	
	if (dir & ROLL_FWD)
    14c2:	80 ff       	sbrs	r24, 0
    14c4:	09 c0       	rjmp	.+18     	; 0x14d8 <setMotorDirection+0x26>
		bottomPoint = rollPoint;  
    14c6:	80 91 1c 01 	lds	r24, 0x011C
    14ca:	90 91 1d 01 	lds	r25, 0x011D
    14ce:	90 93 1f 01 	sts	0x011F, r25
    14d2:	80 93 1e 01 	sts	0x011E, r24
    14d6:	0a c0       	rjmp	.+20     	; 0x14ec <setMotorDirection+0x3a>
	else if (dir & ROLL_REV)
    14d8:	81 ff       	sbrs	r24, 1
    14da:	08 c0       	rjmp	.+16     	; 0x14ec <setMotorDirection+0x3a>
		topPoint = rollPoint;
    14dc:	80 91 1c 01 	lds	r24, 0x011C
    14e0:	90 91 1d 01 	lds	r25, 0x011D
    14e4:	90 93 21 01 	sts	0x0121, r25
    14e8:	80 93 20 01 	sts	0x0120, r24

	// Enable interrupts from timer 0
	TIMSK |= (1<<TOIE0);	
    14ec:	89 b7       	in	r24, 0x39	; 57
    14ee:	81 60       	ori	r24, 0x01	; 1
    14f0:	89 bf       	out	0x39, r24	; 57
    14f2:	08 95       	ret

000014f4 <stopCycleRolling>:
}

void stopCycleRolling(uint8_t doResetPoints)
{
	// Disable interrupts from timer0 
	TIMSK &= ~(1<<TOIE0);
    14f4:	99 b7       	in	r25, 0x39	; 57
    14f6:	9e 7f       	andi	r25, 0xFE	; 254
    14f8:	99 bf       	out	0x39, r25	; 57
	
	rollState &= ~ROLL_CYCLE;
    14fa:	90 91 18 01 	lds	r25, 0x0118
    14fe:	9b 7f       	andi	r25, 0xFB	; 251
    1500:	90 93 18 01 	sts	0x0118, r25
	if (doResetPoints)
    1504:	88 23       	and	r24, r24
    1506:	71 f0       	breq	.+28     	; 0x1524 <stopCycleRolling+0x30>
	{
		topPoint = bottomPoint = rollPoint;
    1508:	80 91 1c 01 	lds	r24, 0x011C
    150c:	90 91 1d 01 	lds	r25, 0x011D
    1510:	90 93 1f 01 	sts	0x011F, r25
    1514:	80 93 1e 01 	sts	0x011E, r24
    1518:	90 93 21 01 	sts	0x0121, r25
    151c:	80 93 20 01 	sts	0x0120, r24
		activeRollCycle = 0;	
    1520:	10 92 17 01 	sts	0x0117, r1
	}		
	
	// Enable interrupts from timer 0
	TIMSK |= (1<<TOIE0);
    1524:	89 b7       	in	r24, 0x39	; 57
    1526:	81 60       	ori	r24, 0x01	; 1
    1528:	89 bf       	out	0x39, r24	; 57
    152a:	08 95       	ret

0000152c <isTopPointValid>:



uint8_t isTopPointValid(void)
{
	return (	(int16_t)(topPoint - rollPoint) >= 0 );
    152c:	80 91 20 01 	lds	r24, 0x0120
    1530:	90 91 21 01 	lds	r25, 0x0121
    1534:	20 91 1c 01 	lds	r18, 0x011C
    1538:	30 91 1d 01 	lds	r19, 0x011D
    153c:	82 1b       	sub	r24, r18
    153e:	93 0b       	sbc	r25, r19
    1540:	89 2f       	mov	r24, r25
    1542:	80 95       	com	r24
}
    1544:	88 1f       	adc	r24, r24
    1546:	88 27       	eor	r24, r24
    1548:	88 1f       	adc	r24, r24
    154a:	08 95       	ret

0000154c <isBottomPointValid>:

uint8_t isBottomPointValid(void)
{
	return (	(int16_t)(rollPoint - bottomPoint) >= 0	);
    154c:	80 91 1c 01 	lds	r24, 0x011C
    1550:	90 91 1d 01 	lds	r25, 0x011D
    1554:	20 91 1e 01 	lds	r18, 0x011E
    1558:	30 91 1f 01 	lds	r19, 0x011F
    155c:	82 1b       	sub	r24, r18
    155e:	93 0b       	sbc	r25, r19
    1560:	89 2f       	mov	r24, r25
    1562:	80 95       	com	r24
}
    1564:	88 1f       	adc	r24, r24
    1566:	88 27       	eor	r24, r24
    1568:	88 1f       	adc	r24, r24
    156a:	08 95       	ret

0000156c <startCycleRolling>:


uint8_t startCycleRolling(void)
{
	// Disable interrupts from timer0 
	TIMSK &= ~(1<<TOIE0);
    156c:	89 b7       	in	r24, 0x39	; 57
    156e:	8e 7f       	andi	r24, 0xFE	; 254
    1570:	89 bf       	out	0x39, r24	; 57
	
	if ( isTopPointValid() && isBottomPointValid() )
    1572:	dc df       	rcall	.-72     	; 0x152c <isTopPointValid>
    1574:	88 23       	and	r24, r24
    1576:	59 f0       	breq	.+22     	; 0x158e <startCycleRolling+0x22>
    1578:	e9 df       	rcall	.-46     	; 0x154c <isBottomPointValid>
    157a:	88 23       	and	r24, r24
    157c:	41 f0       	breq	.+16     	; 0x158e <startCycleRolling+0x22>
	{
		rollState |= ROLL_CYCLE;
    157e:	80 91 18 01 	lds	r24, 0x0118
    1582:	84 60       	ori	r24, 0x04	; 4
    1584:	80 93 18 01 	sts	0x0118, r24
		activeRollCycle = 1;
    1588:	81 e0       	ldi	r24, 0x01	; 1
    158a:	80 93 17 01 	sts	0x0117, r24
	}
	
	// Enable interrupts from timer 0
	TIMSK |= (1<<TOIE0);
    158e:	89 b7       	in	r24, 0x39	; 57
    1590:	81 60       	ori	r24, 0x01	; 1
    1592:	89 bf       	out	0x39, r24	; 57
	
	return (rollState & ROLL_CYCLE);
    1594:	80 91 18 01 	lds	r24, 0x0118
}
    1598:	84 70       	andi	r24, 0x04	; 4
    159a:	08 95       	ret

0000159c <__vector_16>:




ISR(ANA_COMP_vect)
{
    159c:	1f 92       	push	r1
    159e:	0f 92       	push	r0
    15a0:	0f b6       	in	r0, 0x3f	; 63
    15a2:	0f 92       	push	r0
    15a4:	11 24       	eor	r1, r1
    15a6:	2f 93       	push	r18
    15a8:	3f 93       	push	r19
    15aa:	4f 93       	push	r20
    15ac:	5f 93       	push	r21
    15ae:	8f 93       	push	r24
    15b0:	9f 93       	push	r25
	static uint16_t sigma = 0;
	uint16_t delta;
	
	// Once triggered, disable further comparator interrupt
	ACSR &= ~(1<<ACIE);
    15b2:	43 98       	cbi	0x08, 3	; 8
	
	// Process heater delta-sigma modulator
	if (sigma >= HEATER_MAX_POWER)
    15b4:	40 91 22 01 	lds	r20, 0x0122
    15b8:	50 91 23 01 	lds	r21, 0x0123
    15bc:	44 36       	cpi	r20, 0x64	; 100
    15be:	51 05       	cpc	r21, r1
    15c0:	30 f0       	brcs	.+12     	; 0x15ce <__vector_16+0x32>
	{
		PORTD |= (1<<PD_HEATER | 1<<PD_HEAT_INDIC);
    15c2:	82 b3       	in	r24, 0x12	; 18
    15c4:	80 63       	ori	r24, 0x30	; 48
    15c6:	82 bb       	out	0x12, r24	; 18
		delta = -HEATER_MAX_POWER;	
    15c8:	2c e9       	ldi	r18, 0x9C	; 156
    15ca:	3f ef       	ldi	r19, 0xFF	; 255
    15cc:	03 c0       	rjmp	.+6      	; 0x15d4 <__vector_16+0x38>
	}		
	else
	{
		PORTD &= ~(1<<PD_HEAT_INDIC);
    15ce:	95 98       	cbi	0x12, 5	; 18
		delta = 0;
    15d0:	20 e0       	ldi	r18, 0x00	; 0
    15d2:	30 e0       	ldi	r19, 0x00	; 0
	}
	sigma += delta + heaterPower;	
    15d4:	80 91 19 01 	lds	r24, 0x0119
    15d8:	90 91 1a 01 	lds	r25, 0x011A
    15dc:	84 0f       	add	r24, r20
    15de:	95 1f       	adc	r25, r21
    15e0:	82 0f       	add	r24, r18
    15e2:	93 1f       	adc	r25, r19
    15e4:	90 93 23 01 	sts	0x0123, r25
    15e8:	80 93 22 01 	sts	0x0122, r24
	
	// Reprogram timer0
	TCNT0 = 256 - TRIAC_IMPULSE_TIME;		// Triac gate impulse time
    15ec:	86 ef       	ldi	r24, 0xF6	; 246
    15ee:	82 bf       	out	0x32, r24	; 50
	TIFR |= (1<<TOV0);						// Clear interrupt flag
    15f0:	88 b7       	in	r24, 0x38	; 56
    15f2:	81 60       	ori	r24, 0x01	; 1
    15f4:	88 bf       	out	0x38, r24	; 56
	// Modify state	
	p_state &= ~STATE_MASK;					// Start new state machine cycle
    15f6:	80 91 87 00 	lds	r24, 0x0087
    15fa:	80 7f       	andi	r24, 0xF0	; 240
	p_state ^= HALF_PERIOD_FLAG;			// Toggle flag
    15fc:	80 58       	subi	r24, 0x80	; 128
    15fe:	80 93 87 00 	sts	0x0087, r24
	
}
    1602:	9f 91       	pop	r25
    1604:	8f 91       	pop	r24
    1606:	5f 91       	pop	r21
    1608:	4f 91       	pop	r20
    160a:	3f 91       	pop	r19
    160c:	2f 91       	pop	r18
    160e:	0f 90       	pop	r0
    1610:	0f be       	out	0x3f, r0	; 63
    1612:	0f 90       	pop	r0
    1614:	1f 90       	pop	r1
    1616:	18 95       	reti

00001618 <__vector_9>:



ISR(TIMER0_OVF_vect)
{
    1618:	1f 92       	push	r1
    161a:	0f 92       	push	r0
    161c:	0f b6       	in	r0, 0x3f	; 63
    161e:	0f 92       	push	r0
    1620:	11 24       	eor	r1, r1
    1622:	2f 93       	push	r18
    1624:	3f 93       	push	r19
    1626:	4f 93       	push	r20
    1628:	5f 93       	push	r21
    162a:	6f 93       	push	r22
    162c:	7f 93       	push	r23
    162e:	8f 93       	push	r24
    1630:	9f 93       	push	r25
    1632:	af 93       	push	r26
    1634:	bf 93       	push	r27
    1636:	ef 93       	push	r30
    1638:	ff 93       	push	r31
	uint8_t temp;
	
	switch(p_state & STATE_MASK)
    163a:	80 91 87 00 	lds	r24, 0x0087
    163e:	8f 70       	andi	r24, 0x0F	; 15
    1640:	81 30       	cpi	r24, 0x01	; 1
    1642:	49 f0       	breq	.+18     	; 0x1656 <__vector_9+0x3e>
    1644:	28 f0       	brcs	.+10     	; 0x1650 <__vector_9+0x38>
    1646:	82 30       	cpi	r24, 0x02	; 2
    1648:	49 f0       	breq	.+18     	; 0x165c <__vector_9+0x44>
    164a:	83 30       	cpi	r24, 0x03	; 3
    164c:	69 f4       	brne	.+26     	; 0x1668 <__vector_9+0x50>
    164e:	0b c0       	rjmp	.+22     	; 0x1666 <__vector_9+0x4e>
	{
		// TRIAC_IMPULSE_TIME finished
		case 0x00:
			// Turn off heater TRIAC
			PORTD &= ~(1<<PD_HEATER);
    1650:	94 98       	cbi	0x12, 4	; 18
			TCNT0 = 256 - (QUATER_PERIOD_TIME - TRIAC_IMPULSE_TIME);
    1652:	8c eb       	ldi	r24, 0xBC	; 188
    1654:	01 c0       	rjmp	.+2      	; 0x1658 <__vector_9+0x40>
			break;
		// QUATER_PERIOD_TIME finished	
		case 0x01:	
			TCNT0 = 256 - (SYNC_IGNORE_TIME - QUATER_PERIOD_TIME);
    1656:	81 ed       	ldi	r24, 0xD1	; 209
    1658:	82 bf       	out	0x32, r24	; 50
			break;	
    165a:	06 c0       	rjmp	.+12     	; 0x1668 <__vector_9+0x50>
		// SYNC_IGNORE_TIME finished	
		case 0x02:
			TCNT0 = 256 - SYNC_LOST_TIMEOUT;
    165c:	82 ec       	ldi	r24, 0xC2	; 194
    165e:	82 bf       	out	0x32, r24	; 50
			// Clear flag and enable interrupt from analog comparator
			ACSR |= (1<<ACI);
    1660:	44 9a       	sbi	0x08, 4	; 8
			ACSR |= (1<<ACIE);
    1662:	43 9a       	sbi	0x08, 3	; 8
			break;
    1664:	01 c0       	rjmp	.+2      	; 0x1668 <__vector_9+0x50>
		// SYNC_LOST_TIMEOUT finished
		case 0x03:
			// Error - sync is lost. It means that device has been disconnected from AC line.
			// Disable all power-consuming devices like LEDs and save user settings to EEPROM.
			exitPowerOff();
    1666:	3e d9       	rcall	.-3460   	; 0x8e4 <exitPowerOff>
			// Sync is not present - do nothing
			break;
	}	

	// Full period check
	if ((p_state & (HALF_PERIOD_FLAG | STATE_MASK)) == (HALF_PERIOD_FLAG | 0x01))
    1668:	80 91 87 00 	lds	r24, 0x0087
    166c:	8f 78       	andi	r24, 0x8F	; 143
    166e:	81 38       	cpi	r24, 0x81	; 129
    1670:	09 f0       	breq	.+2      	; 0x1674 <__vector_9+0x5c>
    1672:	81 c0       	rjmp	.+258    	; 0x1776 <__vector_9+0x15e>
	{
		// Quarter AC line period is done. Update motor controls.
		temp = PORTD;
    1674:	82 b3       	in	r24, 0x12	; 18
		temp &= ~(1<<PD_M1 | 1<<PD_M2);
    1676:	83 7f       	andi	r24, 0xF3	; 243
		if ( rollState & SKIP_CURRENT_MOTOR_CTRL )
    1678:	90 91 18 01 	lds	r25, 0x0118
    167c:	93 ff       	sbrs	r25, 3
    167e:	05 c0       	rjmp	.+10     	; 0x168a <__vector_9+0x72>
		{
			// Direction control changed. Skip current period to allow TRIACs fully close
			rollState &= ~SKIP_CURRENT_MOTOR_CTRL;
    1680:	97 7f       	andi	r25, 0xF7	; 247
    1682:	90 93 18 01 	sts	0x0118, r25
			PORTD = temp; 	
    1686:	82 bb       	out	0x12, r24	; 18
    1688:	76 c0       	rjmp	.+236    	; 0x1776 <__vector_9+0x15e>
		}
		else
		{
			// Apply direction control 
			if (rollState & ROLL_FWD)
    168a:	90 ff       	sbrs	r25, 0
    168c:	02 c0       	rjmp	.+4      	; 0x1692 <__vector_9+0x7a>
				temp |= (1<<PD_M1);
    168e:	84 60       	ori	r24, 0x04	; 4
    1690:	02 c0       	rjmp	.+4      	; 0x1696 <__vector_9+0x7e>
			else if (rollState & ROLL_REV)
    1692:	91 fd       	sbrc	r25, 1
				temp |= (1<<PD_M2);
    1694:	88 60       	ori	r24, 0x08	; 8
			PORTD = temp; 
    1696:	82 bb       	out	0x12, r24	; 18
// Function to process rolling - sets rotation direction for next period
// Call once per each AC line period
static inline void controlRolling()
{
	// Process cycle rolling
	switch(rollState & (ROLL_FWD | ROLL_REV | ROLL_CYCLE))
    1698:	40 91 18 01 	lds	r20, 0x0118
    169c:	84 2f       	mov	r24, r20
    169e:	87 70       	andi	r24, 0x07	; 7
    16a0:	85 30       	cpi	r24, 0x05	; 5
    16a2:	19 f0       	breq	.+6      	; 0x16aa <__vector_9+0x92>
    16a4:	86 30       	cpi	r24, 0x06	; 6
    16a6:	e9 f5       	brne	.+122    	; 0x1722 <__vector_9+0x10a>
    16a8:	1d c0       	rjmp	.+58     	; 0x16e4 <__vector_9+0xcc>
//---------------------------------------------//
//---------------------------------------------//

static inline uint8_t reachedTopPoint(void)
{
	return (	(int16_t)(topPoint - rollPoint) <= 0 );
    16aa:	80 91 20 01 	lds	r24, 0x0120
    16ae:	90 91 21 01 	lds	r25, 0x0121
    16b2:	20 91 1c 01 	lds	r18, 0x011C
    16b6:	30 91 1d 01 	lds	r19, 0x011D
    16ba:	82 1b       	sub	r24, r18
    16bc:	93 0b       	sbc	r25, r19
{
	// Process cycle rolling
	switch(rollState & (ROLL_FWD | ROLL_REV | ROLL_CYCLE))
	{
		case (ROLL_FWD | ROLL_CYCLE):
			if (reachedTopPoint())
    16be:	18 16       	cp	r1, r24
    16c0:	19 06       	cpc	r1, r25
    16c2:	7c f1       	brlt	.+94     	; 0x1722 <__vector_9+0x10a>
			{
				if (activeRollCycle >= p.rollCycleSet)	
    16c4:	80 91 17 01 	lds	r24, 0x0117
    16c8:	90 91 a0 01 	lds	r25, 0x01A0
    16cc:	89 17       	cp	r24, r25
    16ce:	28 f0       	brcs	.+10     	; 0x16da <__vector_9+0xc2>
				{
					// DONE!
					rollState &= ~ROLL_CYCLE;
    16d0:	4b 7f       	andi	r20, 0xFB	; 251
					rollState |= CYCLE_ROLL_DONE;
    16d2:	40 61       	ori	r20, 0x10	; 16
    16d4:	40 93 18 01 	sts	0x0118, r20
    16d8:	24 c0       	rjmp	.+72     	; 0x1722 <__vector_9+0x10a>
				}
				else
				{
					activeRollCycle++;
    16da:	8f 5f       	subi	r24, 0xFF	; 255
    16dc:	80 93 17 01 	sts	0x0117, r24
					// Change dir	
					newDirReq = ROLL_REV;				
    16e0:	82 e0       	ldi	r24, 0x02	; 2
    16e2:	1d c0       	rjmp	.+58     	; 0x171e <__vector_9+0x106>
	return (	(int16_t)(topPoint - rollPoint) <= 0 );
}

static inline uint8_t reachedBottomPoint(void)
{
	return (	(int16_t)(rollPoint - bottomPoint) <= 0 );
    16e4:	80 91 1c 01 	lds	r24, 0x011C
    16e8:	90 91 1d 01 	lds	r25, 0x011D
    16ec:	20 91 1e 01 	lds	r18, 0x011E
    16f0:	30 91 1f 01 	lds	r19, 0x011F
    16f4:	82 1b       	sub	r24, r18
    16f6:	93 0b       	sbc	r25, r19
				}
			}
			break;
		
		case (ROLL_REV | ROLL_CYCLE):	
			if (reachedBottomPoint())
    16f8:	18 16       	cp	r1, r24
    16fa:	19 06       	cpc	r1, r25
    16fc:	94 f0       	brlt	.+36     	; 0x1722 <__vector_9+0x10a>
			{
				if (activeRollCycle >= p.rollCycleSet)	
    16fe:	80 91 17 01 	lds	r24, 0x0117
    1702:	90 91 a0 01 	lds	r25, 0x01A0
    1706:	89 17       	cp	r24, r25
    1708:	30 f0       	brcs	.+12     	; 0x1716 <__vector_9+0xfe>
				{
					// DONE!
					rollState &= ~ROLL_CYCLE;
    170a:	84 2f       	mov	r24, r20
    170c:	8b 7f       	andi	r24, 0xFB	; 251
					rollState |= CYCLE_ROLL_DONE;
    170e:	80 61       	ori	r24, 0x10	; 16
    1710:	80 93 18 01 	sts	0x0118, r24
    1714:	06 c0       	rjmp	.+12     	; 0x1722 <__vector_9+0x10a>
				}
				else
				{
					activeRollCycle++;
    1716:	8f 5f       	subi	r24, 0xFF	; 255
    1718:	80 93 17 01 	sts	0x0117, r24
					// Change dir	
					newDirReq = ROLL_FWD;
    171c:	81 e0       	ldi	r24, 0x01	; 1
    171e:	80 93 1b 01 	sts	0x011B, r24
		default:
			break;
	}
	
	// Process direction change
	if ((rollState ^ newDirReq) & (ROLL_FWD | ROLL_REV))
    1722:	20 91 18 01 	lds	r18, 0x0118
    1726:	90 91 1b 01 	lds	r25, 0x011B
    172a:	89 2f       	mov	r24, r25
    172c:	82 27       	eor	r24, r18
    172e:	83 70       	andi	r24, 0x03	; 3
    1730:	19 f0       	breq	.+6      	; 0x1738 <__vector_9+0x120>
	{
		// ROLL_DIR_CHANGED is used for sound beep
		rollState |= (SKIP_CURRENT_MOTOR_CTRL | ROLL_DIR_CHANGED);
    1732:	28 62       	ori	r18, 0x28	; 40
    1734:	20 93 18 01 	sts	0x0118, r18
	}
	
	rollState &= ~(ROLL_FWD | ROLL_REV);
    1738:	80 91 18 01 	lds	r24, 0x0118
    173c:	8c 7f       	andi	r24, 0xFC	; 252
	rollState |= newDirReq;
    173e:	89 2b       	or	r24, r25
	rollState &= dirChangedMask;
    1740:	90 91 88 00 	lds	r25, 0x0088
    1744:	89 23       	and	r24, r25
    1746:	80 93 18 01 	sts	0x0118, r24
	dirChangedMask = 0xFF;
    174a:	9f ef       	ldi	r25, 0xFF	; 255
    174c:	90 93 88 00 	sts	0x0088, r25
	return (	(int16_t)(rollPoint - bottomPoint) <= 0 );
}

static inline void updateRollPoint(void)
{	
	if (rollState & ROLL_FWD)
    1750:	80 ff       	sbrs	r24, 0
    1752:	06 c0       	rjmp	.+12     	; 0x1760 <__vector_9+0x148>
		rollPoint++;
    1754:	80 91 1c 01 	lds	r24, 0x011C
    1758:	90 91 1d 01 	lds	r25, 0x011D
    175c:	01 96       	adiw	r24, 0x01	; 1
    175e:	07 c0       	rjmp	.+14     	; 0x176e <__vector_9+0x156>
	else if (rollState & ROLL_REV)
    1760:	81 ff       	sbrs	r24, 1
    1762:	09 c0       	rjmp	.+18     	; 0x1776 <__vector_9+0x15e>
		rollPoint--;	
    1764:	80 91 1c 01 	lds	r24, 0x011C
    1768:	90 91 1d 01 	lds	r25, 0x011D
    176c:	01 97       	sbiw	r24, 0x01	; 1
    176e:	90 93 1d 01 	sts	0x011D, r25
    1772:	80 93 1c 01 	sts	0x011C, r24
			controlRolling();
		}
	}
	
	
	if ((p_state & STATE_MASK)  != 0x0F)
    1776:	80 91 87 00 	lds	r24, 0x0087
    177a:	98 2f       	mov	r25, r24
    177c:	9f 70       	andi	r25, 0x0F	; 15
    177e:	9f 30       	cpi	r25, 0x0F	; 15
    1780:	19 f0       	breq	.+6      	; 0x1788 <__vector_9+0x170>
		p_state++;
    1782:	8f 5f       	subi	r24, 0xFF	; 255
    1784:	80 93 87 00 	sts	0x0087, r24
}	
    1788:	ff 91       	pop	r31
    178a:	ef 91       	pop	r30
    178c:	bf 91       	pop	r27
    178e:	af 91       	pop	r26
    1790:	9f 91       	pop	r25
    1792:	8f 91       	pop	r24
    1794:	7f 91       	pop	r23
    1796:	6f 91       	pop	r22
    1798:	5f 91       	pop	r21
    179a:	4f 91       	pop	r20
    179c:	3f 91       	pop	r19
    179e:	2f 91       	pop	r18
    17a0:	0f 90       	pop	r0
    17a2:	0f be       	out	0x3f, r0	; 63
    17a4:	0f 90       	pop	r0
    17a6:	1f 90       	pop	r1
    17a8:	18 95       	reti

000017aa <processSoftTimer8b>:
 
 
 
 
 void processSoftTimer8b(SoftTimer8b_t *tmr)
 {
    17aa:	fc 01       	movw	r30, r24
	 uint8_t newTimerVal;

	 if (!tmr->Enabled)
    17ac:	90 81       	ld	r25, Z
    17ae:	90 ff       	sbrs	r25, 0
    17b0:	27 c0       	rjmp	.+78     	; 0x1800 <processSoftTimer8b+0x56>
		return;
	 
	 tmr->FA_EQ = 0;
	 tmr->FA_GE = 0;
	 tmr->FTop = 0;
    17b2:	97 7e       	andi	r25, 0xE7	; 231
    17b4:	9f 7d       	andi	r25, 0xDF	; 223
    17b6:	90 83       	st	Z, r25
	 
	 if (tmr->Timer >= tmr->Top)
    17b8:	81 81       	ldd	r24, Z+1	; 0x01
    17ba:	22 81       	ldd	r18, Z+2	; 0x02
    17bc:	82 17       	cp	r24, r18
    17be:	50 f0       	brcs	.+20     	; 0x17d4 <processSoftTimer8b+0x2a>
	 {
		 if (tmr->RunOnce)
    17c0:	91 ff       	sbrs	r25, 1
    17c2:	02 c0       	rjmp	.+4      	; 0x17c8 <processSoftTimer8b+0x1e>
		 {
			 tmr->Enabled = 0;
    17c4:	9e 7f       	andi	r25, 0xFE	; 254
    17c6:	90 83       	st	Z, r25
		 }
		 tmr->FTop = 1;
    17c8:	90 81       	ld	r25, Z
		 tmr->FOvfl = 1;
    17ca:	90 62       	ori	r25, 0x20	; 32
    17cc:	90 64       	ori	r25, 0x40	; 64
    17ce:	90 83       	st	Z, r25
		 newTimerVal = 0;
    17d0:	20 e0       	ldi	r18, 0x00	; 0
    17d2:	02 c0       	rjmp	.+4      	; 0x17d8 <processSoftTimer8b+0x2e>
	 }
	 else
	 {
		 newTimerVal = tmr->Timer + 1;
    17d4:	28 2f       	mov	r18, r24
    17d6:	2f 5f       	subi	r18, 0xFF	; 255
	 }
	 
	 if (tmr->Timer == tmr->CompA)
    17d8:	93 81       	ldd	r25, Z+3	; 0x03
    17da:	89 13       	cpse	r24, r25
    17dc:	0b c0       	rjmp	.+22     	; 0x17f4 <processSoftTimer8b+0x4a>
	 {
		 tmr->FA_EQ = 1;
    17de:	80 81       	ld	r24, Z
		 tmr->FA_GE = 1;
    17e0:	88 60       	ori	r24, 0x08	; 8
    17e2:	80 61       	ori	r24, 0x10	; 16
		 tmr->FA_TGL = !tmr->FA_TGL;
    17e4:	82 fb       	bst	r24, 2
    17e6:	99 27       	eor	r25, r25
    17e8:	90 f9       	bld	r25, 0
    17ea:	31 e0       	ldi	r19, 0x01	; 1
    17ec:	93 27       	eor	r25, r19
    17ee:	90 fb       	bst	r25, 0
    17f0:	82 f9       	bld	r24, 2
    17f2:	04 c0       	rjmp	.+8      	; 0x17fc <processSoftTimer8b+0x52>
	 }
	 else if (tmr->Timer >= tmr->CompA)
    17f4:	89 17       	cp	r24, r25
    17f6:	18 f0       	brcs	.+6      	; 0x17fe <processSoftTimer8b+0x54>
	 {
		 tmr->FA_GE = 1;
    17f8:	80 81       	ld	r24, Z
    17fa:	80 61       	ori	r24, 0x10	; 16
    17fc:	80 83       	st	Z, r24
	 }
	 
	 tmr->Timer = newTimerVal; 
    17fe:	21 83       	std	Z+1, r18	; 0x01
    1800:	08 95       	ret

00001802 <processSystemTimers>:



void processSystemTimers(void)
{
	sys_timers.flags = 0x00;
    1802:	10 92 8f 00 	sts	0x008F, r1
	
	// Process Celsius counter
	if (--sys_timers.celsius_upd_counter == 0)
    1806:	80 91 89 00 	lds	r24, 0x0089
    180a:	81 50       	subi	r24, 0x01	; 1
    180c:	80 93 89 00 	sts	0x0089, r24
    1810:	81 11       	cpse	r24, r1
    1812:	13 c0       	rjmp	.+38     	; 0x183a <processSystemTimers+0x38>
	{
		sys_timers.celsius_upd_counter = CELSIUS_UDPATE_INTERVAL;
    1814:	84 e0       	ldi	r24, 0x04	; 4
    1816:	80 93 89 00 	sts	0x0089, r24
		sys_timers.flags |= EXPIRED_CELSIUS;
    181a:	81 e0       	ldi	r24, 0x01	; 1
    181c:	80 93 8f 00 	sts	0x008F, r24
		
		// Process PID update counter
		if (--sys_timers.pid_update_counter == 0)
    1820:	80 91 8e 00 	lds	r24, 0x008E
    1824:	81 50       	subi	r24, 0x01	; 1
    1826:	80 93 8e 00 	sts	0x008E, r24
    182a:	81 11       	cpse	r24, r1
    182c:	06 c0       	rjmp	.+12     	; 0x183a <processSystemTimers+0x38>
		{
			sys_timers.pid_update_counter = PID_UPDATE_INTERVAL;
    182e:	8a e0       	ldi	r24, 0x0A	; 10
    1830:	80 93 8e 00 	sts	0x008E, r24
			sys_timers.flags |= UPDATE_PID;
    1834:	81 e4       	ldi	r24, 0x41	; 65
    1836:	80 93 8f 00 	sts	0x008F, r24
		}
	}
	
	// Process log counter
	if (--sys_timers.log_counter == 0)
    183a:	80 91 8d 00 	lds	r24, 0x008D
    183e:	81 50       	subi	r24, 0x01	; 1
    1840:	19 f0       	breq	.+6      	; 0x1848 <processSystemTimers+0x46>
    1842:	80 93 8d 00 	sts	0x008D, r24
    1846:	08 c0       	rjmp	.+16     	; 0x1858 <processSystemTimers+0x56>
	{
		sys_timers.log_counter = LOG_INTERVAL;
    1848:	82 e0       	ldi	r24, 0x02	; 2
    184a:	80 93 8d 00 	sts	0x008D, r24
		sys_timers.flags |= EXPIRED_LOG;
    184e:	80 91 8f 00 	lds	r24, 0x008F
    1852:	80 62       	ori	r24, 0x20	; 32
    1854:	80 93 8f 00 	sts	0x008F, r24
	}
	
	// Process 10 seconds counter
	if (--sys_timers.counter_10sec == 0)
    1858:	80 91 8a 00 	lds	r24, 0x008A
    185c:	81 50       	subi	r24, 0x01	; 1
    185e:	80 93 8a 00 	sts	0x008A, r24
    1862:	81 11       	cpse	r24, r1
    1864:	34 c0       	rjmp	.+104    	; 0x18ce <processSystemTimers+0xcc>
	{
		sys_timers.counter_10sec = COUNTER_10SEC_INTERVAL;
    1866:	88 ec       	ldi	r24, 0xC8	; 200
    1868:	80 93 8a 00 	sts	0x008A, r24
		sys_timers.flags |= EXPIRED_10SEC;
    186c:	40 91 8f 00 	lds	r20, 0x008F
    1870:	84 2f       	mov	r24, r20
    1872:	82 60       	ori	r24, 0x02	; 2
    1874:	80 93 8f 00 	sts	0x008F, r24
		
		// Process 1 minute counter
		if (--sys_timers.counter_1min == 0)
    1878:	80 91 8b 00 	lds	r24, 0x008B
    187c:	81 50       	subi	r24, 0x01	; 1
    187e:	80 93 8b 00 	sts	0x008B, r24
    1882:	81 11       	cpse	r24, r1
    1884:	24 c0       	rjmp	.+72     	; 0x18ce <processSystemTimers+0xcc>
		{
			sys_timers.counter_1min = COUNTER_1MIN_INTERVAL;
    1886:	86 e0       	ldi	r24, 0x06	; 6
    1888:	80 93 8b 00 	sts	0x008B, r24
			sys_timers.flags |= EXPIRED_1MIN;
    188c:	84 2f       	mov	r24, r20
    188e:	86 60       	ori	r24, 0x06	; 6
    1890:	80 93 8f 00 	sts	0x008F, r24
			
			// Process auto power off counter
			if (sys_timers.poff_counter != MAX_POWEROFF_TIMEOUT - 1)
    1894:	80 91 8c 00 	lds	r24, 0x008C
    1898:	8e 35       	cpi	r24, 0x5E	; 94
    189a:	19 f0       	breq	.+6      	; 0x18a2 <processSystemTimers+0xa0>
				sys_timers.poff_counter++;
    189c:	8f 5f       	subi	r24, 0xFF	; 255
    189e:	80 93 8c 00 	sts	0x008C, r24
			if (sys_timers.poff_counter == p.power_off_timeout - 1)
    18a2:	60 91 8c 00 	lds	r22, 0x008C
    18a6:	50 91 a2 01 	lds	r21, 0x01A2
    18aa:	26 2f       	mov	r18, r22
    18ac:	30 e0       	ldi	r19, 0x00	; 0
    18ae:	85 2f       	mov	r24, r21
    18b0:	90 e0       	ldi	r25, 0x00	; 0
    18b2:	01 97       	sbiw	r24, 0x01	; 1
    18b4:	28 17       	cp	r18, r24
    18b6:	39 07       	cpc	r19, r25
    18b8:	19 f4       	brne	.+6      	; 0x18c0 <processSystemTimers+0xbe>
				sys_timers.flags |= AUTOPOFF_SOON;
    18ba:	4e 60       	ori	r20, 0x0E	; 14
    18bc:	40 93 8f 00 	sts	0x008F, r20
			if (sys_timers.poff_counter == p.power_off_timeout)
    18c0:	65 13       	cpse	r22, r21
    18c2:	05 c0       	rjmp	.+10     	; 0x18ce <processSystemTimers+0xcc>
				sys_timers.flags |= AUTOPOFF_EXPIRED;			
    18c4:	80 91 8f 00 	lds	r24, 0x008F
    18c8:	80 61       	ori	r24, 0x10	; 16
    18ca:	80 93 8f 00 	sts	0x008F, r24
    18ce:	08 95       	ret

000018d0 <resetAutoPowerOffCounter>:
}


void resetAutoPowerOffCounter(void)
{
	sys_timers.poff_counter = 0;
    18d0:	10 92 8c 00 	sts	0x008C, r1
    18d4:	08 95       	ret

000018d6 <SetBeeperFreq>:
}

// Setup beeper frequency (Hz)
void SetBeeperFreq(uint16_t freq_hz)
{
	uint16_t period_us = 1000000 / freq_hz;
    18d6:	9c 01       	movw	r18, r24
    18d8:	40 e0       	ldi	r20, 0x00	; 0
    18da:	50 e0       	ldi	r21, 0x00	; 0
    18dc:	60 e4       	ldi	r22, 0x40	; 64
    18de:	72 e4       	ldi	r23, 0x42	; 66
    18e0:	8f e0       	ldi	r24, 0x0F	; 15
    18e2:	90 e0       	ldi	r25, 0x00	; 0
    18e4:	9a d0       	rcall	.+308    	; 0x1a1a <__divmodsi4>
	if (period_us & 0xFFF8)
    18e6:	da 01       	movw	r26, r20
    18e8:	c9 01       	movw	r24, r18
    18ea:	88 7f       	andi	r24, 0xF8	; 248
    18ec:	aa 27       	eor	r26, r26
    18ee:	bb 27       	eor	r27, r27
    18f0:	89 2b       	or	r24, r25
    18f2:	51 f0       	breq	.+20     	; 0x1908 <SetBeeperFreq+0x32>
		OCR1A = (period_us>>3) - 1;
    18f4:	43 e0       	ldi	r20, 0x03	; 3
    18f6:	36 95       	lsr	r19
    18f8:	27 95       	ror	r18
    18fa:	4a 95       	dec	r20
    18fc:	e1 f7       	brne	.-8      	; 0x18f6 <SetBeeperFreq+0x20>
    18fe:	21 50       	subi	r18, 0x01	; 1
    1900:	31 09       	sbc	r19, r1
    1902:	3b bd       	out	0x2b, r19	; 43
    1904:	2a bd       	out	0x2a, r18	; 42
    1906:	04 c0       	rjmp	.+8      	; 0x1910 <SetBeeperFreq+0x3a>
	else
		OCR1A = 0x1;
    1908:	81 e0       	ldi	r24, 0x01	; 1
    190a:	90 e0       	ldi	r25, 0x00	; 0
    190c:	9b bd       	out	0x2b, r25	; 43
    190e:	8a bd       	out	0x2a, r24	; 42
	TCNT1 = 0;
    1910:	1d bc       	out	0x2d, r1	; 45
    1912:	1c bc       	out	0x2c, r1	; 44
    1914:	08 95       	ret

00001916 <StartBeep>:
}

// Beep for some time in ms
void StartBeep(uint16_t time_ms)
{
	if ( (p.sound_enable) || (enableOverride) )
    1916:	20 91 a1 01 	lds	r18, 0x01A1
    191a:	21 11       	cpse	r18, r1
    191c:	04 c0       	rjmp	.+8      	; 0x1926 <StartBeep+0x10>
    191e:	20 91 24 01 	lds	r18, 0x0124
    1922:	22 23       	and	r18, r18
    1924:	39 f0       	breq	.+14     	; 0x1934 <StartBeep+0x1e>
	{
		beep_cnt = time_ms;
    1926:	90 93 26 01 	sts	0x0126, r25
    192a:	80 93 25 01 	sts	0x0125, r24
// Enable / disable beeper output
inline void SetBeepOutput(uint8_t val)
{
	if (val)
		// Toggle OCR1A on compare match
		TCCR1A |= (1<<COM1A0);
    192e:	8f b5       	in	r24, 0x2f	; 47
    1930:	80 64       	ori	r24, 0x40	; 64
    1932:	8f bd       	out	0x2f, r24	; 47
	if ( (p.sound_enable) || (enableOverride) )
	{
		beep_cnt = time_ms;
		SetBeepOutput(1);		
	}
	enableOverride = 0;
    1934:	10 92 24 01 	sts	0x0124, r1
    1938:	08 95       	ret

0000193a <OverrideSoundDisable>:
}

void OverrideSoundDisable(void)
{
	enableOverride = 1;
    193a:	81 e0       	ldi	r24, 0x01	; 1
    193c:	80 93 24 01 	sts	0x0124, r24
    1940:	08 95       	ret

00001942 <__vector_3>:




ISR(TIMER2_COMP_vect)
{	
    1942:	1f 92       	push	r1
    1944:	0f 92       	push	r0
    1946:	0f b6       	in	r0, 0x3f	; 63
    1948:	0f 92       	push	r0
    194a:	11 24       	eor	r1, r1
    194c:	2f 93       	push	r18
    194e:	3f 93       	push	r19
    1950:	4f 93       	push	r20
    1952:	5f 93       	push	r21
    1954:	6f 93       	push	r22
    1956:	7f 93       	push	r23
    1958:	8f 93       	push	r24
    195a:	9f 93       	push	r25
    195c:	af 93       	push	r26
    195e:	bf 93       	push	r27
    1960:	ef 93       	push	r30
    1962:	ff 93       	push	r31
	
	// Manage beeper
	if (beep_cnt)
    1964:	80 91 25 01 	lds	r24, 0x0125
    1968:	90 91 26 01 	lds	r25, 0x0126
    196c:	00 97       	sbiw	r24, 0x00	; 0
    196e:	31 f0       	breq	.+12     	; 0x197c <__vector_3+0x3a>
		beep_cnt--;
    1970:	01 97       	sbiw	r24, 0x01	; 1
    1972:	90 93 26 01 	sts	0x0126, r25
    1976:	80 93 25 01 	sts	0x0125, r24
    197a:	03 c0       	rjmp	.+6      	; 0x1982 <__vector_3+0x40>
	if (val)
		// Toggle OCR1A on compare match
		TCCR1A |= (1<<COM1A0);
	else
		// Disable OCR1A output
		TCCR1A &= ~(1<<COM1A0 | 1<<COM1A1);
    197c:	8f b5       	in	r24, 0x2f	; 47
    197e:	8f 73       	andi	r24, 0x3F	; 63
    1980:	8f bd       	out	0x2f, r24	; 47
		beep_cnt--;
	else
		SetBeepOutput(0);	// done
	
	// Manage LED indicator
	processLedIndicator();
    1982:	e5 d7       	rcall	.+4042   	; 0x294e <__data_load_end+0xd5e>
	
	// Process menu update timer
	processSoftTimer8b(&menuUpdateTimer);	
    1984:	80 e9       	ldi	r24, 0x90	; 144
    1986:	90 e0       	ldi	r25, 0x00	; 0
    1988:	10 df       	rcall	.-480    	; 0x17aa <processSoftTimer8b>
	
	// Start ADC conversion 
	ADCSRA |= (1<<ADSC);
    198a:	36 9a       	sbi	0x06, 6	; 6
	
}
    198c:	ff 91       	pop	r31
    198e:	ef 91       	pop	r30
    1990:	bf 91       	pop	r27
    1992:	af 91       	pop	r26
    1994:	9f 91       	pop	r25
    1996:	8f 91       	pop	r24
    1998:	7f 91       	pop	r23
    199a:	6f 91       	pop	r22
    199c:	5f 91       	pop	r21
    199e:	4f 91       	pop	r20
    19a0:	3f 91       	pop	r19
    19a2:	2f 91       	pop	r18
    19a4:	0f 90       	pop	r0
    19a6:	0f be       	out	0x3f, r0	; 63
    19a8:	0f 90       	pop	r0
    19aa:	1f 90       	pop	r1
    19ac:	18 95       	reti

000019ae <USART_send>:



void USART_send( uint8_t data )
{
	UCSRA |= (1<<TXC);                 // Clear flag
    19ae:	5e 9a       	sbi	0x0b, 6	; 11
	UDR = data;
    19b0:	8c b9       	out	0x0c, r24	; 12
	while ( !(UCSRA & (1<<TXC)) );  // Wait
    19b2:	5e 9b       	sbis	0x0b, 6	; 11
    19b4:	fe cf       	rjmp	.-4      	; 0x19b2 <USART_send+0x4>
}
    19b6:	08 95       	ret

000019b8 <USART_sendstr>:


void USART_sendstr(char* str)
{
    19b8:	1f 93       	push	r17
    19ba:	cf 93       	push	r28
    19bc:	df 93       	push	r29
    19be:	ec 01       	movw	r28, r24
	uint8_t i = 0;
    19c0:	10 e0       	ldi	r17, 0x00	; 0
	while (str[i])
    19c2:	02 c0       	rjmp	.+4      	; 0x19c8 <USART_sendstr+0x10>
	{
		USART_send(str[i++]);
    19c4:	1f 5f       	subi	r17, 0xFF	; 255
    19c6:	f3 df       	rcall	.-26     	; 0x19ae <USART_send>


void USART_sendstr(char* str)
{
	uint8_t i = 0;
	while (str[i])
    19c8:	fe 01       	movw	r30, r28
    19ca:	e1 0f       	add	r30, r17
    19cc:	f1 1d       	adc	r31, r1
    19ce:	80 81       	ld	r24, Z
    19d0:	81 11       	cpse	r24, r1
    19d2:	f8 cf       	rjmp	.-16     	; 0x19c4 <USART_sendstr+0xc>
	{
		USART_send(str[i++]);
	}
}
    19d4:	df 91       	pop	r29
    19d6:	cf 91       	pop	r28
    19d8:	1f 91       	pop	r17
    19da:	08 95       	ret

000019dc <__udivmodqi4>:
    19dc:	99 1b       	sub	r25, r25
    19de:	79 e0       	ldi	r23, 0x09	; 9
    19e0:	04 c0       	rjmp	.+8      	; 0x19ea <__udivmodqi4_ep>

000019e2 <__udivmodqi4_loop>:
    19e2:	99 1f       	adc	r25, r25
    19e4:	96 17       	cp	r25, r22
    19e6:	08 f0       	brcs	.+2      	; 0x19ea <__udivmodqi4_ep>
    19e8:	96 1b       	sub	r25, r22

000019ea <__udivmodqi4_ep>:
    19ea:	88 1f       	adc	r24, r24
    19ec:	7a 95       	dec	r23
    19ee:	c9 f7       	brne	.-14     	; 0x19e2 <__udivmodqi4_loop>
    19f0:	80 95       	com	r24
    19f2:	08 95       	ret

000019f4 <__divmodhi4>:
    19f4:	97 fb       	bst	r25, 7
    19f6:	07 2e       	mov	r0, r23
    19f8:	16 f4       	brtc	.+4      	; 0x19fe <__divmodhi4+0xa>
    19fa:	00 94       	com	r0
    19fc:	06 d0       	rcall	.+12     	; 0x1a0a <__divmodhi4_neg1>
    19fe:	77 fd       	sbrc	r23, 7
    1a00:	08 d0       	rcall	.+16     	; 0x1a12 <__divmodhi4_neg2>
    1a02:	48 d0       	rcall	.+144    	; 0x1a94 <__udivmodhi4>
    1a04:	07 fc       	sbrc	r0, 7
    1a06:	05 d0       	rcall	.+10     	; 0x1a12 <__divmodhi4_neg2>
    1a08:	3e f4       	brtc	.+14     	; 0x1a18 <__divmodhi4_exit>

00001a0a <__divmodhi4_neg1>:
    1a0a:	90 95       	com	r25
    1a0c:	81 95       	neg	r24
    1a0e:	9f 4f       	sbci	r25, 0xFF	; 255
    1a10:	08 95       	ret

00001a12 <__divmodhi4_neg2>:
    1a12:	70 95       	com	r23
    1a14:	61 95       	neg	r22
    1a16:	7f 4f       	sbci	r23, 0xFF	; 255

00001a18 <__divmodhi4_exit>:
    1a18:	08 95       	ret

00001a1a <__divmodsi4>:
    1a1a:	05 2e       	mov	r0, r21
    1a1c:	97 fb       	bst	r25, 7
    1a1e:	16 f4       	brtc	.+4      	; 0x1a24 <__divmodsi4+0xa>
    1a20:	00 94       	com	r0
    1a22:	06 d0       	rcall	.+12     	; 0x1a30 <__divmodsi4_neg1>
    1a24:	57 fd       	sbrc	r21, 7
    1a26:	0c d0       	rcall	.+24     	; 0x1a40 <__divmodsi4_neg2>
    1a28:	49 d0       	rcall	.+146    	; 0x1abc <__udivmodsi4>
    1a2a:	07 fc       	sbrc	r0, 7
    1a2c:	09 d0       	rcall	.+18     	; 0x1a40 <__divmodsi4_neg2>
    1a2e:	7e f4       	brtc	.+30     	; 0x1a4e <__divmodsi4_exit>

00001a30 <__divmodsi4_neg1>:
    1a30:	90 95       	com	r25
    1a32:	80 95       	com	r24
    1a34:	70 95       	com	r23
    1a36:	61 95       	neg	r22
    1a38:	7f 4f       	sbci	r23, 0xFF	; 255
    1a3a:	8f 4f       	sbci	r24, 0xFF	; 255
    1a3c:	9f 4f       	sbci	r25, 0xFF	; 255
    1a3e:	08 95       	ret

00001a40 <__divmodsi4_neg2>:
    1a40:	50 95       	com	r21
    1a42:	40 95       	com	r20
    1a44:	30 95       	com	r19
    1a46:	21 95       	neg	r18
    1a48:	3f 4f       	sbci	r19, 0xFF	; 255
    1a4a:	4f 4f       	sbci	r20, 0xFF	; 255
    1a4c:	5f 4f       	sbci	r21, 0xFF	; 255

00001a4e <__divmodsi4_exit>:
    1a4e:	08 95       	ret

00001a50 <__mulhisi3>:
    1a50:	05 d0       	rcall	.+10     	; 0x1a5c <__umulhisi3>
    1a52:	33 23       	and	r19, r19
    1a54:	12 f4       	brpl	.+4      	; 0x1a5a <__mulhisi3+0xa>
    1a56:	8a 1b       	sub	r24, r26
    1a58:	9b 0b       	sbc	r25, r27
    1a5a:	0d c0       	rjmp	.+26     	; 0x1a76 <__usmulhisi3_tail>

00001a5c <__umulhisi3>:
    1a5c:	a2 9f       	mul	r26, r18
    1a5e:	b0 01       	movw	r22, r0
    1a60:	b3 9f       	mul	r27, r19
    1a62:	c0 01       	movw	r24, r0
    1a64:	a3 9f       	mul	r26, r19
    1a66:	01 d0       	rcall	.+2      	; 0x1a6a <__umulhisi3+0xe>
    1a68:	b2 9f       	mul	r27, r18
    1a6a:	70 0d       	add	r23, r0
    1a6c:	81 1d       	adc	r24, r1
    1a6e:	11 24       	eor	r1, r1
    1a70:	91 1d       	adc	r25, r1
    1a72:	08 95       	ret

00001a74 <__usmulhisi3>:
    1a74:	f3 df       	rcall	.-26     	; 0x1a5c <__umulhisi3>

00001a76 <__usmulhisi3_tail>:
    1a76:	b7 ff       	sbrs	r27, 7
    1a78:	08 95       	ret
    1a7a:	82 1b       	sub	r24, r18
    1a7c:	93 0b       	sbc	r25, r19
    1a7e:	08 95       	ret

00001a80 <__muluhisi3>:
    1a80:	ed df       	rcall	.-38     	; 0x1a5c <__umulhisi3>
    1a82:	a5 9f       	mul	r26, r21
    1a84:	90 0d       	add	r25, r0
    1a86:	b4 9f       	mul	r27, r20
    1a88:	90 0d       	add	r25, r0
    1a8a:	a4 9f       	mul	r26, r20
    1a8c:	80 0d       	add	r24, r0
    1a8e:	91 1d       	adc	r25, r1
    1a90:	11 24       	eor	r1, r1
    1a92:	08 95       	ret

00001a94 <__udivmodhi4>:
    1a94:	aa 1b       	sub	r26, r26
    1a96:	bb 1b       	sub	r27, r27
    1a98:	51 e1       	ldi	r21, 0x11	; 17
    1a9a:	07 c0       	rjmp	.+14     	; 0x1aaa <__udivmodhi4_ep>

00001a9c <__udivmodhi4_loop>:
    1a9c:	aa 1f       	adc	r26, r26
    1a9e:	bb 1f       	adc	r27, r27
    1aa0:	a6 17       	cp	r26, r22
    1aa2:	b7 07       	cpc	r27, r23
    1aa4:	10 f0       	brcs	.+4      	; 0x1aaa <__udivmodhi4_ep>
    1aa6:	a6 1b       	sub	r26, r22
    1aa8:	b7 0b       	sbc	r27, r23

00001aaa <__udivmodhi4_ep>:
    1aaa:	88 1f       	adc	r24, r24
    1aac:	99 1f       	adc	r25, r25
    1aae:	5a 95       	dec	r21
    1ab0:	a9 f7       	brne	.-22     	; 0x1a9c <__udivmodhi4_loop>
    1ab2:	80 95       	com	r24
    1ab4:	90 95       	com	r25
    1ab6:	bc 01       	movw	r22, r24
    1ab8:	cd 01       	movw	r24, r26
    1aba:	08 95       	ret

00001abc <__udivmodsi4>:
    1abc:	a1 e2       	ldi	r26, 0x21	; 33
    1abe:	1a 2e       	mov	r1, r26
    1ac0:	aa 1b       	sub	r26, r26
    1ac2:	bb 1b       	sub	r27, r27
    1ac4:	fd 01       	movw	r30, r26
    1ac6:	0d c0       	rjmp	.+26     	; 0x1ae2 <__udivmodsi4_ep>

00001ac8 <__udivmodsi4_loop>:
    1ac8:	aa 1f       	adc	r26, r26
    1aca:	bb 1f       	adc	r27, r27
    1acc:	ee 1f       	adc	r30, r30
    1ace:	ff 1f       	adc	r31, r31
    1ad0:	a2 17       	cp	r26, r18
    1ad2:	b3 07       	cpc	r27, r19
    1ad4:	e4 07       	cpc	r30, r20
    1ad6:	f5 07       	cpc	r31, r21
    1ad8:	20 f0       	brcs	.+8      	; 0x1ae2 <__udivmodsi4_ep>
    1ada:	a2 1b       	sub	r26, r18
    1adc:	b3 0b       	sbc	r27, r19
    1ade:	e4 0b       	sbc	r30, r20
    1ae0:	f5 0b       	sbc	r31, r21

00001ae2 <__udivmodsi4_ep>:
    1ae2:	66 1f       	adc	r22, r22
    1ae4:	77 1f       	adc	r23, r23
    1ae6:	88 1f       	adc	r24, r24
    1ae8:	99 1f       	adc	r25, r25
    1aea:	1a 94       	dec	r1
    1aec:	69 f7       	brne	.-38     	; 0x1ac8 <__udivmodsi4_loop>
    1aee:	60 95       	com	r22
    1af0:	70 95       	com	r23
    1af2:	80 95       	com	r24
    1af4:	90 95       	com	r25
    1af6:	9b 01       	movw	r18, r22
    1af8:	ac 01       	movw	r20, r24
    1afa:	bd 01       	movw	r22, r26
    1afc:	cf 01       	movw	r24, r30
    1afe:	08 95       	ret

00001b00 <__eerd_block_m8>:
    1b00:	dc 01       	movw	r26, r24
    1b02:	cb 01       	movw	r24, r22

00001b04 <__eerd_blraw_m8>:
    1b04:	fc 01       	movw	r30, r24
    1b06:	e1 99       	sbic	0x1c, 1	; 28
    1b08:	fe cf       	rjmp	.-4      	; 0x1b06 <__eerd_blraw_m8+0x2>
    1b0a:	06 c0       	rjmp	.+12     	; 0x1b18 <__eerd_blraw_m8+0x14>
    1b0c:	ff bb       	out	0x1f, r31	; 31
    1b0e:	ee bb       	out	0x1e, r30	; 30
    1b10:	e0 9a       	sbi	0x1c, 0	; 28
    1b12:	31 96       	adiw	r30, 0x01	; 1
    1b14:	0d b2       	in	r0, 0x1d	; 29
    1b16:	0d 92       	st	X+, r0
    1b18:	41 50       	subi	r20, 0x01	; 1
    1b1a:	50 40       	sbci	r21, 0x00	; 0
    1b1c:	b8 f7       	brcc	.-18     	; 0x1b0c <__eerd_blraw_m8+0x8>
    1b1e:	08 95       	ret

00001b20 <__eeupd_block_m8>:
    1b20:	dc 01       	movw	r26, r24
    1b22:	a4 0f       	add	r26, r20
    1b24:	b5 1f       	adc	r27, r21
    1b26:	41 50       	subi	r20, 0x01	; 1
    1b28:	50 40       	sbci	r21, 0x00	; 0
    1b2a:	40 f0       	brcs	.+16     	; 0x1b3c <__eeupd_block_m8+0x1c>
    1b2c:	cb 01       	movw	r24, r22
    1b2e:	84 0f       	add	r24, r20
    1b30:	95 1f       	adc	r25, r21
    1b32:	2e 91       	ld	r18, -X
    1b34:	05 d0       	rcall	.+10     	; 0x1b40 <__eeupd_r18_m8>
    1b36:	41 50       	subi	r20, 0x01	; 1
    1b38:	50 40       	sbci	r21, 0x00	; 0
    1b3a:	d8 f7       	brcc	.-10     	; 0x1b32 <__eeupd_block_m8+0x12>
    1b3c:	08 95       	ret

00001b3e <__eeupd_byte_m8>:
    1b3e:	26 2f       	mov	r18, r22

00001b40 <__eeupd_r18_m8>:
    1b40:	e1 99       	sbic	0x1c, 1	; 28
    1b42:	fe cf       	rjmp	.-4      	; 0x1b40 <__eeupd_r18_m8>
    1b44:	9f bb       	out	0x1f, r25	; 31
    1b46:	8e bb       	out	0x1e, r24	; 30
    1b48:	e0 9a       	sbi	0x1c, 0	; 28
    1b4a:	01 97       	sbiw	r24, 0x01	; 1
    1b4c:	0d b2       	in	r0, 0x1d	; 29
    1b4e:	02 16       	cp	r0, r18
    1b50:	31 f0       	breq	.+12     	; 0x1b5e <__eeupd_r18_m8+0x1e>
    1b52:	2d bb       	out	0x1d, r18	; 29
    1b54:	0f b6       	in	r0, 0x3f	; 63
    1b56:	f8 94       	cli
    1b58:	e2 9a       	sbi	0x1c, 2	; 28
    1b5a:	e1 9a       	sbi	0x1c, 1	; 28
    1b5c:	0f be       	out	0x3f, r0	; 63
    1b5e:	08 95       	ret

00001b60 <_exit>:
    1b60:	f8 94       	cli

00001b62 <__stop_program>:
    1b62:	ff cf       	rjmp	.-2      	; 0x1b62 <__stop_program>
