
pid1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000018c6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000004e  00800060  000018c6  0000195a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000004f  008000ae  008000ae  000019a8  2**0
                  ALLOC
  3 .stab         00001ba8  00000000  00000000  000019a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000559  00000000  00000000  00003550  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00003aa9  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000350  00000000  00000000  00003ad8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002dc4  00000000  00000000  00003e28  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001045  00000000  00000000  00006bec  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001465  00000000  00000000  00007c31  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000006f0  00000000  00000000  00009098  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000beb  00000000  00000000  00009788  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001818  00000000  00000000  0000a373  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000002f8  00000000  00000000  0000bb8b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	19 c1       	rjmp	.+562    	; 0x234 <__ctors_end>
       2:	33 c1       	rjmp	.+614    	; 0x26a <__bad_interrupt>
       4:	32 c1       	rjmp	.+612    	; 0x26a <__bad_interrupt>
       6:	43 ca       	rjmp	.-2938   	; 0xfffff48e <__eeprom_end+0xff7ef48e>
       8:	30 c1       	rjmp	.+608    	; 0x26a <__bad_interrupt>
       a:	2f c1       	rjmp	.+606    	; 0x26a <__bad_interrupt>
       c:	2e c1       	rjmp	.+604    	; 0x26a <__bad_interrupt>
       e:	2d c1       	rjmp	.+602    	; 0x26a <__bad_interrupt>
      10:	2c c1       	rjmp	.+600    	; 0x26a <__bad_interrupt>
      12:	1d c9       	rjmp	.-3526   	; 0xfffff24e <__eeprom_end+0xff7ef24e>
      14:	2a c1       	rjmp	.+596    	; 0x26a <__bad_interrupt>
      16:	29 c1       	rjmp	.+594    	; 0x26a <__bad_interrupt>
      18:	28 c1       	rjmp	.+592    	; 0x26a <__bad_interrupt>
      1a:	27 c1       	rjmp	.+590    	; 0x26a <__bad_interrupt>
      1c:	53 c1       	rjmp	.+678    	; 0x2c4 <__vector_14>
      1e:	25 c1       	rjmp	.+586    	; 0x26a <__bad_interrupt>
      20:	f4 c8       	rjmp	.-3608   	; 0xfffff20a <__eeprom_end+0xff7ef20a>
      22:	23 c1       	rjmp	.+582    	; 0x26a <__bad_interrupt>
      24:	22 c1       	rjmp	.+580    	; 0x26a <__bad_interrupt>
      26:	7d c2       	rjmp	.+1274   	; 0x522 <decode_led_char+0x48>
      28:	8d c2       	rjmp	.+1306   	; 0x544 <decode_led_char+0x6a>
      2a:	8c c2       	rjmp	.+1304   	; 0x544 <decode_led_char+0x6a>
      2c:	8b c2       	rjmp	.+1302   	; 0x544 <decode_led_char+0x6a>
      2e:	8a c2       	rjmp	.+1300   	; 0x544 <decode_led_char+0x6a>
      30:	89 c2       	rjmp	.+1298   	; 0x544 <decode_led_char+0x6a>
      32:	88 c2       	rjmp	.+1296   	; 0x544 <decode_led_char+0x6a>
      34:	87 c2       	rjmp	.+1294   	; 0x544 <decode_led_char+0x6a>
      36:	86 c2       	rjmp	.+1292   	; 0x544 <decode_led_char+0x6a>
      38:	85 c2       	rjmp	.+1290   	; 0x544 <decode_led_char+0x6a>
      3a:	84 c2       	rjmp	.+1288   	; 0x544 <decode_led_char+0x6a>
      3c:	83 c2       	rjmp	.+1286   	; 0x544 <decode_led_char+0x6a>
      3e:	6b c2       	rjmp	.+1238   	; 0x516 <decode_led_char+0x3c>
      40:	6c c2       	rjmp	.+1240   	; 0x51a <decode_led_char+0x40>
      42:	67 c2       	rjmp	.+1230   	; 0x512 <decode_led_char+0x38>
      44:	7f c2       	rjmp	.+1278   	; 0x544 <decode_led_char+0x6a>
      46:	53 c2       	rjmp	.+1190   	; 0x4ee <decode_led_char+0x14>
      48:	7c c2       	rjmp	.+1272   	; 0x542 <decode_led_char+0x68>
      4a:	53 c2       	rjmp	.+1190   	; 0x4f2 <decode_led_char+0x18>
      4c:	54 c2       	rjmp	.+1192   	; 0x4f6 <decode_led_char+0x1c>
      4e:	55 c2       	rjmp	.+1194   	; 0x4fa <decode_led_char+0x20>
      50:	56 c2       	rjmp	.+1196   	; 0x4fe <decode_led_char+0x24>
      52:	57 c2       	rjmp	.+1198   	; 0x502 <decode_led_char+0x28>
      54:	58 c2       	rjmp	.+1200   	; 0x506 <decode_led_char+0x2c>
      56:	59 c2       	rjmp	.+1202   	; 0x50a <decode_led_char+0x30>
      58:	5a c2       	rjmp	.+1204   	; 0x50e <decode_led_char+0x34>
      5a:	74 c2       	rjmp	.+1256   	; 0x544 <decode_led_char+0x6a>
      5c:	73 c2       	rjmp	.+1254   	; 0x544 <decode_led_char+0x6a>
      5e:	72 c2       	rjmp	.+1252   	; 0x544 <decode_led_char+0x6a>
      60:	71 c2       	rjmp	.+1250   	; 0x544 <decode_led_char+0x6a>
      62:	70 c2       	rjmp	.+1248   	; 0x544 <decode_led_char+0x6a>
      64:	6f c2       	rjmp	.+1246   	; 0x544 <decode_led_char+0x6a>
      66:	6e c2       	rjmp	.+1244   	; 0x544 <decode_led_char+0x6a>
      68:	6d c2       	rjmp	.+1242   	; 0x544 <decode_led_char+0x6a>
      6a:	6c c2       	rjmp	.+1240   	; 0x544 <decode_led_char+0x6a>
      6c:	5e c2       	rjmp	.+1212   	; 0x52a <decode_led_char+0x50>
      6e:	63 c2       	rjmp	.+1222   	; 0x536 <decode_led_char+0x5c>
      70:	66 c2       	rjmp	.+1228   	; 0x53e <decode_led_char+0x64>
      72:	5d c2       	rjmp	.+1210   	; 0x52e <decode_led_char+0x54>
      74:	67 c2       	rjmp	.+1230   	; 0x544 <decode_led_char+0x6a>
      76:	66 c2       	rjmp	.+1228   	; 0x544 <decode_led_char+0x6a>
      78:	65 c2       	rjmp	.+1226   	; 0x544 <decode_led_char+0x6a>
      7a:	64 c2       	rjmp	.+1224   	; 0x544 <decode_led_char+0x6a>
      7c:	63 c2       	rjmp	.+1222   	; 0x544 <decode_led_char+0x6a>
      7e:	62 c2       	rjmp	.+1220   	; 0x544 <decode_led_char+0x6a>
      80:	61 c2       	rjmp	.+1218   	; 0x544 <decode_led_char+0x6a>
      82:	57 c2       	rjmp	.+1198   	; 0x532 <decode_led_char+0x58>
      84:	34 c2       	rjmp	.+1128   	; 0x4ee <decode_led_char+0x14>
      86:	59 c2       	rjmp	.+1202   	; 0x53a <decode_led_char+0x60>
      88:	5d c2       	rjmp	.+1210   	; 0x544 <decode_led_char+0x6a>
      8a:	5c c2       	rjmp	.+1208   	; 0x544 <decode_led_char+0x6a>
      8c:	38 c2       	rjmp	.+1136   	; 0x4fe <decode_led_char+0x24>
      8e:	5a c2       	rjmp	.+1204   	; 0x544 <decode_led_char+0x6a>
      90:	59 c2       	rjmp	.+1202   	; 0x544 <decode_led_char+0x6a>
      92:	58 c2       	rjmp	.+1200   	; 0x544 <decode_led_char+0x6a>
      94:	57 c2       	rjmp	.+1198   	; 0x544 <decode_led_char+0x6a>
      96:	56 c2       	rjmp	.+1196   	; 0x544 <decode_led_char+0x6a>
      98:	55 c2       	rjmp	.+1194   	; 0x544 <decode_led_char+0x6a>
      9a:	54 c2       	rjmp	.+1192   	; 0x544 <decode_led_char+0x6a>
      9c:	53 c2       	rjmp	.+1190   	; 0x544 <decode_led_char+0x6a>
      9e:	52 c2       	rjmp	.+1188   	; 0x544 <decode_led_char+0x6a>
      a0:	51 c2       	rjmp	.+1186   	; 0x544 <decode_led_char+0x6a>
      a2:	50 c2       	rjmp	.+1184   	; 0x544 <decode_led_char+0x6a>
      a4:	3c c2       	rjmp	.+1144   	; 0x51e <decode_led_char+0x44>
      a6:	4e c2       	rjmp	.+1180   	; 0x544 <decode_led_char+0x6a>
      a8:	4d c2       	rjmp	.+1178   	; 0x544 <decode_led_char+0x6a>
      aa:	4c c2       	rjmp	.+1176   	; 0x544 <decode_led_char+0x6a>
      ac:	4b c2       	rjmp	.+1174   	; 0x544 <decode_led_char+0x6a>
      ae:	4a c2       	rjmp	.+1172   	; 0x544 <decode_led_char+0x6a>
      b0:	49 c2       	rjmp	.+1170   	; 0x544 <decode_led_char+0x6a>
      b2:	48 c2       	rjmp	.+1168   	; 0x544 <decode_led_char+0x6a>
      b4:	47 c2       	rjmp	.+1166   	; 0x544 <decode_led_char+0x6a>
      b6:	46 c2       	rjmp	.+1164   	; 0x544 <decode_led_char+0x6a>
      b8:	45 c2       	rjmp	.+1162   	; 0x544 <decode_led_char+0x6a>
      ba:	44 c2       	rjmp	.+1160   	; 0x544 <decode_led_char+0x6a>
      bc:	43 c2       	rjmp	.+1158   	; 0x544 <decode_led_char+0x6a>
      be:	42 c2       	rjmp	.+1156   	; 0x544 <decode_led_char+0x6a>
      c0:	41 c2       	rjmp	.+1154   	; 0x544 <decode_led_char+0x6a>
      c2:	40 c2       	rjmp	.+1152   	; 0x544 <decode_led_char+0x6a>
      c4:	3f c2       	rjmp	.+1150   	; 0x544 <decode_led_char+0x6a>
      c6:	3e c2       	rjmp	.+1148   	; 0x544 <decode_led_char+0x6a>
      c8:	3d c2       	rjmp	.+1146   	; 0x544 <decode_led_char+0x6a>
      ca:	3c c2       	rjmp	.+1144   	; 0x544 <decode_led_char+0x6a>
      cc:	3b c2       	rjmp	.+1142   	; 0x544 <decode_led_char+0x6a>
      ce:	3a c2       	rjmp	.+1140   	; 0x544 <decode_led_char+0x6a>
      d0:	39 c2       	rjmp	.+1138   	; 0x544 <decode_led_char+0x6a>
      d2:	38 c2       	rjmp	.+1136   	; 0x544 <decode_led_char+0x6a>
      d4:	37 c2       	rjmp	.+1134   	; 0x544 <decode_led_char+0x6a>
      d6:	36 c2       	rjmp	.+1132   	; 0x544 <decode_led_char+0x6a>
      d8:	35 c2       	rjmp	.+1130   	; 0x544 <decode_led_char+0x6a>
      da:	34 c2       	rjmp	.+1128   	; 0x544 <decode_led_char+0x6a>
      dc:	33 c2       	rjmp	.+1126   	; 0x544 <decode_led_char+0x6a>
      de:	32 c2       	rjmp	.+1124   	; 0x544 <decode_led_char+0x6a>
      e0:	31 c2       	rjmp	.+1122   	; 0x544 <decode_led_char+0x6a>
      e2:	30 c2       	rjmp	.+1120   	; 0x544 <decode_led_char+0x6a>
      e4:	2f c2       	rjmp	.+1118   	; 0x544 <decode_led_char+0x6a>
      e6:	2e c2       	rjmp	.+1116   	; 0x544 <decode_led_char+0x6a>
      e8:	2d c2       	rjmp	.+1114   	; 0x544 <decode_led_char+0x6a>
      ea:	2c c2       	rjmp	.+1112   	; 0x544 <decode_led_char+0x6a>
      ec:	2b c2       	rjmp	.+1110   	; 0x544 <decode_led_char+0x6a>
      ee:	2a c2       	rjmp	.+1108   	; 0x544 <decode_led_char+0x6a>
      f0:	29 c2       	rjmp	.+1106   	; 0x544 <decode_led_char+0x6a>
      f2:	28 c2       	rjmp	.+1104   	; 0x544 <decode_led_char+0x6a>
      f4:	27 c2       	rjmp	.+1102   	; 0x544 <decode_led_char+0x6a>
      f6:	26 c2       	rjmp	.+1100   	; 0x544 <decode_led_char+0x6a>
      f8:	25 c2       	rjmp	.+1098   	; 0x544 <decode_led_char+0x6a>
      fa:	24 c2       	rjmp	.+1096   	; 0x544 <decode_led_char+0x6a>
      fc:	23 c2       	rjmp	.+1094   	; 0x544 <decode_led_char+0x6a>
      fe:	22 c2       	rjmp	.+1092   	; 0x544 <decode_led_char+0x6a>
     100:	21 c2       	rjmp	.+1090   	; 0x544 <decode_led_char+0x6a>
     102:	20 c2       	rjmp	.+1088   	; 0x544 <decode_led_char+0x6a>
     104:	1f c2       	rjmp	.+1086   	; 0x544 <decode_led_char+0x6a>
     106:	1e c2       	rjmp	.+1084   	; 0x544 <decode_led_char+0x6a>
     108:	1d c2       	rjmp	.+1082   	; 0x544 <decode_led_char+0x6a>
     10a:	1c c2       	rjmp	.+1080   	; 0x544 <decode_led_char+0x6a>
     10c:	1b c2       	rjmp	.+1078   	; 0x544 <decode_led_char+0x6a>
     10e:	1a c2       	rjmp	.+1076   	; 0x544 <decode_led_char+0x6a>
     110:	19 c2       	rjmp	.+1074   	; 0x544 <decode_led_char+0x6a>
     112:	18 c2       	rjmp	.+1072   	; 0x544 <decode_led_char+0x6a>
     114:	17 c2       	rjmp	.+1070   	; 0x544 <decode_led_char+0x6a>
     116:	16 c2       	rjmp	.+1068   	; 0x544 <decode_led_char+0x6a>
     118:	15 c2       	rjmp	.+1066   	; 0x544 <decode_led_char+0x6a>
     11a:	14 c2       	rjmp	.+1064   	; 0x544 <decode_led_char+0x6a>
     11c:	13 c2       	rjmp	.+1062   	; 0x544 <decode_led_char+0x6a>
     11e:	12 c2       	rjmp	.+1060   	; 0x544 <decode_led_char+0x6a>
     120:	11 c2       	rjmp	.+1058   	; 0x544 <decode_led_char+0x6a>
     122:	10 c2       	rjmp	.+1056   	; 0x544 <decode_led_char+0x6a>
     124:	0f c2       	rjmp	.+1054   	; 0x544 <decode_led_char+0x6a>
     126:	0e c2       	rjmp	.+1052   	; 0x544 <decode_led_char+0x6a>
     128:	0d c2       	rjmp	.+1050   	; 0x544 <decode_led_char+0x6a>
     12a:	0c c2       	rjmp	.+1048   	; 0x544 <decode_led_char+0x6a>
     12c:	0b c2       	rjmp	.+1046   	; 0x544 <decode_led_char+0x6a>
     12e:	0a c2       	rjmp	.+1044   	; 0x544 <decode_led_char+0x6a>
     130:	09 c2       	rjmp	.+1042   	; 0x544 <decode_led_char+0x6a>
     132:	08 c2       	rjmp	.+1040   	; 0x544 <decode_led_char+0x6a>
     134:	07 c2       	rjmp	.+1038   	; 0x544 <decode_led_char+0x6a>
     136:	06 c2       	rjmp	.+1036   	; 0x544 <decode_led_char+0x6a>
     138:	05 c2       	rjmp	.+1034   	; 0x544 <decode_led_char+0x6a>
     13a:	04 c2       	rjmp	.+1032   	; 0x544 <decode_led_char+0x6a>
     13c:	03 c2       	rjmp	.+1030   	; 0x544 <decode_led_char+0x6a>
     13e:	02 c2       	rjmp	.+1028   	; 0x544 <decode_led_char+0x6a>
     140:	01 c2       	rjmp	.+1026   	; 0x544 <decode_led_char+0x6a>
     142:	00 c2       	rjmp	.+1024   	; 0x544 <decode_led_char+0x6a>
     144:	ff c1       	rjmp	.+1022   	; 0x544 <decode_led_char+0x6a>
     146:	ef c1       	rjmp	.+990    	; 0x526 <decode_led_char+0x4c>

00000148 <menuFunctionSet>:
     148:	01 54 06 57 06 88 05 03 84 05 f8 05 25 04 02 f4     .T.W........%...
     158:	05 8b 05 7c 05 05 72 05 2d 05 00 00 0b 2b 04 2d     ...|..r.-....+.-
     168:	05 39 04 04 72 05 da 04 00 00 0c 2b 04 da 04 39     .9..r......+...9
     178:	04 06 7a 05 90 04 00 00 09 2b 04 90 04 39 04 07     ..z......+...9..
     188:	7a 05 46 04 00 00 0a 2b 04 46 04 39 04 08 3f 04     z.F....+.F.9..?.
     198:	41 04 00 00 0d 40 04 41 04 00 00                    A....@.A...

000001a3 <menuJumpSet>:
     1a3:	01 06 00 03 a8 01 00 01 02 40 01 00 02 05 28 02     .........@....(.
     1b3:	00 01 01 80 03 00 83 01 40 05 00 82 01 00 05 04     ........@.......
     1c3:	00 04 68 05 02 00 07 a8 05 00 01 0b 28 0b 00 83     ..h.........(...
     1d3:	05 28 04 00 82 01 00 04 04 00 06 68 04 02 00 05     .(.........h....
     1e3:	a8 04 00 01 0c 28 0c 00 83 04 28 06 00 82 01 00     .....(....(.....
     1f3:	06 04 00 07 68 06 02 00 04 a8 06 00 01 09 00 07     ....h...........
     203:	00 82 01 00 07 04 00 05 68 07 02 00 06 a8 07 00     ........h.......
     213:	01 0a 00 09 00 02 06 00 09 00 01 08 14 08 00 83     ................
     223:	01 00 0a 00 02 07 00 0a 00 01 0d 14 0d 00 83 01     ................
	...

00000234 <__ctors_end>:
     234:	11 24       	eor	r1, r1
     236:	1f be       	out	0x3f, r1	; 63
     238:	cf e5       	ldi	r28, 0x5F	; 95
     23a:	d4 e0       	ldi	r29, 0x04	; 4
     23c:	de bf       	out	0x3e, r29	; 62
     23e:	cd bf       	out	0x3d, r28	; 61

00000240 <__do_copy_data>:
     240:	10 e0       	ldi	r17, 0x00	; 0
     242:	a0 e6       	ldi	r26, 0x60	; 96
     244:	b0 e0       	ldi	r27, 0x00	; 0
     246:	e6 ec       	ldi	r30, 0xC6	; 198
     248:	f8 e1       	ldi	r31, 0x18	; 24
     24a:	02 c0       	rjmp	.+4      	; 0x250 <__do_copy_data+0x10>
     24c:	05 90       	lpm	r0, Z+
     24e:	0d 92       	st	X+, r0
     250:	ae 3a       	cpi	r26, 0xAE	; 174
     252:	b1 07       	cpc	r27, r17
     254:	d9 f7       	brne	.-10     	; 0x24c <__do_copy_data+0xc>

00000256 <__do_clear_bss>:
     256:	20 e0       	ldi	r18, 0x00	; 0
     258:	ae ea       	ldi	r26, 0xAE	; 174
     25a:	b0 e0       	ldi	r27, 0x00	; 0
     25c:	01 c0       	rjmp	.+2      	; 0x260 <.do_clear_bss_start>

0000025e <.do_clear_bss_loop>:
     25e:	1d 92       	st	X+, r1

00000260 <.do_clear_bss_start>:
     260:	ad 3f       	cpi	r26, 0xFD	; 253
     262:	b2 07       	cpc	r27, r18
     264:	e1 f7       	brne	.-8      	; 0x25e <.do_clear_bss_loop>
     266:	d8 d6       	rcall	.+3504   	; 0x1018 <main>
     268:	2c cb       	rjmp	.-2472   	; 0xfffff8c2 <__eeprom_end+0xff7ef8c2>

0000026a <__bad_interrupt>:
     26a:	ca ce       	rjmp	.-620    	; 0x0 <__vectors>

0000026c <conv_ADC_to_Celsius>:
{
	float k_norm = -0.4454;
	float offset_norm = 408.2037;
	
	
	return (uint16_t)((float)adc_value * k_norm + offset_norm);
     26c:	bc 01       	movw	r22, r24
     26e:	80 e0       	ldi	r24, 0x00	; 0
     270:	90 e0       	ldi	r25, 0x00	; 0
     272:	ed d9       	rcall	.-3110   	; 0xfffff64e <__eeprom_end+0xff7ef64e>
     274:	28 e7       	ldi	r18, 0x78	; 120
     276:	3b e0       	ldi	r19, 0x0B	; 11
     278:	44 ee       	ldi	r20, 0xE4	; 228
     27a:	5e eb       	ldi	r21, 0xBE	; 190
     27c:	76 da       	rcall	.-2836   	; 0xfffff76a <__eeprom_end+0xff7ef76a>
     27e:	23 e1       	ldi	r18, 0x13	; 19
     280:	3a e1       	ldi	r19, 0x1A	; 26
     282:	4c ec       	ldi	r20, 0xCC	; 204
     284:	53 e4       	ldi	r21, 0x43	; 67
     286:	53 d9       	rcall	.-3418   	; 0xfffff52e <__eeprom_end+0xff7ef52e>
     288:	b6 d9       	rcall	.-3220   	; 0xfffff5f6 <__eeprom_end+0xff7ef5f6>
}
     28a:	86 2f       	mov	r24, r22
     28c:	97 2f       	mov	r25, r23
     28e:	08 95       	ret

00000290 <update_filtered_adc>:
void update_filtered_adc()
{
	uint8_t i;
	uint16_t filtered_value = 0;
	// Disable interrupts from ADC - to save data integrity
	ACSR &= ~(1<<ACIE);	
     290:	43 98       	cbi	0x08, 3	; 8
     292:	ee ea       	ldi	r30, 0xAE	; 174
     294:	f0 e0       	ldi	r31, 0x00	; 0
	
	return (uint16_t)((float)adc_value * k_norm + offset_norm);
}


void update_filtered_adc()
     296:	4e eb       	ldi	r20, 0xBE	; 190
     298:	50 e0       	ldi	r21, 0x00	; 0
{
	uint8_t i;
	uint16_t filtered_value = 0;
     29a:	80 e0       	ldi	r24, 0x00	; 0
     29c:	90 e0       	ldi	r25, 0x00	; 0
	// Disable interrupts from ADC - to save data integrity
	ACSR &= ~(1<<ACIE);	
	// Count up
	for(i=0;i<ADC_BUFFER_LENGTH;i++)
	{
		filtered_value += adc_sample_buffer[i];
     29e:	21 91       	ld	r18, Z+
     2a0:	31 91       	ld	r19, Z+
     2a2:	82 0f       	add	r24, r18
     2a4:	93 1f       	adc	r25, r19
	uint8_t i;
	uint16_t filtered_value = 0;
	// Disable interrupts from ADC - to save data integrity
	ACSR &= ~(1<<ACIE);	
	// Count up
	for(i=0;i<ADC_BUFFER_LENGTH;i++)
     2a6:	e4 17       	cp	r30, r20
     2a8:	f5 07       	cpc	r31, r21
     2aa:	c9 f7       	brne	.-14     	; 0x29e <update_filtered_adc+0xe>
	{
		filtered_value += adc_sample_buffer[i];
	}	
	// Enable interrupts from ADC
	ACSR |= (1<<ACIE);
     2ac:	43 9a       	sbi	0x08, 3	; 8
	filtered_value /= ADC_BUFFER_LENGTH;
     2ae:	96 95       	lsr	r25
     2b0:	87 95       	ror	r24
     2b2:	96 95       	lsr	r25
     2b4:	87 95       	ror	r24
     2b6:	96 95       	lsr	r25
     2b8:	87 95       	ror	r24
	adc_filtered_value = filtered_value;
     2ba:	90 93 d8 00 	sts	0x00D8, r25
     2be:	80 93 d7 00 	sts	0x00D7, r24
     2c2:	08 95       	ret

000002c4 <__vector_14>:




ISR(ADC_vect)
{
     2c4:	1f 92       	push	r1
     2c6:	0f 92       	push	r0
     2c8:	0f b6       	in	r0, 0x3f	; 63
     2ca:	0f 92       	push	r0
     2cc:	11 24       	eor	r1, r1
     2ce:	2f 93       	push	r18
     2d0:	8f 93       	push	r24
     2d2:	9f 93       	push	r25
     2d4:	ef 93       	push	r30
     2d6:	ff 93       	push	r31
	uint16_t new_sample = ADC;
     2d8:	84 b1       	in	r24, 0x04	; 4
     2da:	95 b1       	in	r25, 0x05	; 5
	
	if (adc_buffer_pos < 0)
     2dc:	20 91 60 00 	lds	r18, 0x0060
     2e0:	22 23       	and	r18, r18
     2e2:	fc f4       	brge	.+62     	; 0x322 <__vector_14+0x5e>
	{
		// First call to the function, fill whole buffer with current sample
		for (adc_buffer_pos = ADC_BUFFER_LENGTH-1; adc_buffer_pos > 0; adc_buffer_pos--)
		adc_sample_buffer[adc_buffer_pos] = new_sample;
     2e4:	90 93 bd 00 	sts	0x00BD, r25
     2e8:	80 93 bc 00 	sts	0x00BC, r24
     2ec:	90 93 bb 00 	sts	0x00BB, r25
     2f0:	80 93 ba 00 	sts	0x00BA, r24
     2f4:	90 93 b9 00 	sts	0x00B9, r25
     2f8:	80 93 b8 00 	sts	0x00B8, r24
     2fc:	90 93 b7 00 	sts	0x00B7, r25
     300:	80 93 b6 00 	sts	0x00B6, r24
     304:	90 93 b5 00 	sts	0x00B5, r25
     308:	80 93 b4 00 	sts	0x00B4, r24
     30c:	90 93 b3 00 	sts	0x00B3, r25
     310:	80 93 b2 00 	sts	0x00B2, r24
     314:	90 93 b1 00 	sts	0x00B1, r25
     318:	80 93 b0 00 	sts	0x00B0, r24
     31c:	10 92 60 00 	sts	0x0060, r1
     320:	0e c0       	rjmp	.+28     	; 0x33e <__vector_14+0x7a>
	}
	else
	{
		// Normal call
		adc_sample_buffer[adc_buffer_pos] = new_sample;
     322:	e2 2f       	mov	r30, r18
     324:	ee 0f       	add	r30, r30
     326:	ff 0b       	sbc	r31, r31
     328:	e2 55       	subi	r30, 0x52	; 82
     32a:	ff 4f       	sbci	r31, 0xFF	; 255
     32c:	91 83       	std	Z+1, r25	; 0x01
     32e:	80 83       	st	Z, r24
		adc_buffer_pos = (adc_buffer_pos == ADC_BUFFER_LENGTH - 1) ? 0 : adc_buffer_pos + 1;
     330:	27 30       	cpi	r18, 0x07	; 7
     332:	11 f0       	breq	.+4      	; 0x338 <__vector_14+0x74>
     334:	2f 5f       	subi	r18, 0xFF	; 255
     336:	01 c0       	rjmp	.+2      	; 0x33a <__vector_14+0x76>
     338:	20 e0       	ldi	r18, 0x00	; 0
     33a:	20 93 60 00 	sts	0x0060, r18
	}		
}	
     33e:	ff 91       	pop	r31
     340:	ef 91       	pop	r30
     342:	9f 91       	pop	r25
     344:	8f 91       	pop	r24
     346:	2f 91       	pop	r18
     348:	0f 90       	pop	r0
     34a:	0f be       	out	0x3f, r0	; 63
     34c:	0f 90       	pop	r0
     34e:	1f 90       	pop	r1
     350:	18 95       	reti

00000352 <process_buttons>:
	uint8_t raw_delayed_inv;
	static uint8_t press_timer = 0;
	uint8_t long_press_mask;
	uint8_t long_press_event_mask;
	
	raw_delayed = raw_current;
     352:	30 91 c4 00 	lds	r19, 0x00C4
	raw_delayed_inv = raw_current_inv;
     356:	20 91 61 00 	lds	r18, 0x0061
	raw_current = raw_button_state;
     35a:	90 91 eb 00 	lds	r25, 0x00EB
     35e:	90 93 c4 00 	sts	0x00C4, r25
	raw_current_inv = ~raw_current;
     362:	49 2f       	mov	r20, r25
     364:	40 95       	com	r20
     366:	40 93 61 00 	sts	0x0061, r20
	
	// Must be before press_timer update
	long_press_mask = (press_timer >= LONG_PRESS_DELAY) ? 0xFF : 0x00;
     36a:	80 91 c5 00 	lds	r24, 0x00C5
     36e:	8c 30       	cpi	r24, 0x0C	; 12
     370:	10 f0       	brcs	.+4      	; 0x376 <process_buttons+0x24>
     372:	6f ef       	ldi	r22, 0xFF	; 255
     374:	01 c0       	rjmp	.+2      	; 0x378 <process_buttons+0x26>
     376:	60 e0       	ldi	r22, 0x00	; 0
	
	if (raw_delayed != raw_current)
     378:	39 17       	cp	r19, r25
     37a:	41 f0       	breq	.+16     	; 0x38c <process_buttons+0x3a>
	{
		press_timer = 0;
     37c:	10 92 c5 00 	sts	0x00C5, r1
	}
	
	// Must after press_timer update
	long_press_event_mask = (press_timer == LONG_PRESS_DELAY) ? 0xFF : 0x00;
			
	button_action_down = raw_current & raw_delayed_inv;
     380:	89 2f       	mov	r24, r25
     382:	82 23       	and	r24, r18
     384:	80 93 c1 00 	sts	0x00C1, r24
     388:	50 e0       	ldi	r21, 0x00	; 0
     38a:	14 c0       	rjmp	.+40     	; 0x3b4 <process_buttons+0x62>
	
	if (raw_delayed != raw_current)
	{
		press_timer = 0;
	}
	else if (press_timer <= LONG_PRESS_DELAY)
     38c:	8d 30       	cpi	r24, 0x0D	; 13
     38e:	18 f4       	brcc	.+6      	; 0x396 <process_buttons+0x44>
	{
		press_timer++;
     390:	8f 5f       	subi	r24, 0xFF	; 255
     392:	80 93 c5 00 	sts	0x00C5, r24
	}
	
	// Must after press_timer update
	long_press_event_mask = (press_timer == LONG_PRESS_DELAY) ? 0xFF : 0x00;
     396:	50 91 c5 00 	lds	r21, 0x00C5
     39a:	5c 30       	cpi	r21, 0x0C	; 12
     39c:	09 f4       	brne	.+2      	; 0x3a0 <process_buttons+0x4e>
     39e:	45 c0       	rjmp	.+138    	; 0x42a <process_buttons+0xd8>
			
	button_action_down = raw_current & raw_delayed_inv;
     3a0:	89 2f       	mov	r24, r25
     3a2:	82 23       	and	r24, r18
     3a4:	80 93 c1 00 	sts	0x00C1, r24
			
	if (press_timer > REPEAT_DELAY)
     3a8:	57 30       	cpi	r21, 0x07	; 7
     3aa:	18 f0       	brcs	.+6      	; 0x3b2 <process_buttons+0x60>
     3ac:	50 e0       	ldi	r21, 0x00	; 0
		raw_delayed_inv |= 0xFF;
     3ae:	2f ef       	ldi	r18, 0xFF	; 255
     3b0:	01 c0       	rjmp	.+2      	; 0x3b4 <process_buttons+0x62>
	// Must after press_timer update
	long_press_event_mask = (press_timer == LONG_PRESS_DELAY) ? 0xFF : 0x00;
			
	button_action_down = raw_current & raw_delayed_inv;
			
	if (press_timer > REPEAT_DELAY)
     3b2:	50 e0       	ldi	r21, 0x00	; 0
		raw_delayed_inv |= 0xFF;
	
	button_action_rep = raw_current & raw_delayed_inv;
     3b4:	29 23       	and	r18, r25
     3b6:	20 93 c0 00 	sts	0x00C0, r18
	
	button_action_up_short = raw_current_inv & raw_delayed & ~long_press_mask;
     3ba:	60 95       	com	r22
     3bc:	34 23       	and	r19, r20
     3be:	36 23       	and	r19, r22
     3c0:	30 93 bf 00 	sts	0x00BF, r19
	//button_action_up_long  = raw_current_inv & raw_delayed & long_press_mask;
	button_action_long  = raw_current & long_press_event_mask;
     3c4:	59 23       	and	r21, r25
     3c6:	50 93 be 00 	sts	0x00BE, r21
	
	// Compose button state
	button_state = (button_action_down & (BD_MENU | BD_UP | BD_DOWN | BD_ROTFWD | BD_ROTREV | BD_HEATCTRL));
     3ca:	87 77       	andi	r24, 0x77	; 119
     3cc:	90 e0       	ldi	r25, 0x00	; 0
	if (button_action_up_short & BD_MENU)
     3ce:	30 fd       	sbrc	r19, 0
     3d0:	05 c0       	rjmp	.+10     	; 0x3dc <process_buttons+0x8a>
	button_action_up_short = raw_current_inv & raw_delayed & ~long_press_mask;
	//button_action_up_long  = raw_current_inv & raw_delayed & long_press_mask;
	button_action_long  = raw_current & long_press_event_mask;
	
	// Compose button state
	button_state = (button_action_down & (BD_MENU | BD_UP | BD_DOWN | BD_ROTFWD | BD_ROTREV | BD_HEATCTRL));
     3d2:	90 93 c3 00 	sts	0x00C3, r25
     3d6:	80 93 c2 00 	sts	0x00C2, r24
     3da:	05 c0       	rjmp	.+10     	; 0x3e6 <process_buttons+0x94>
	if (button_action_up_short & BD_MENU)
		button_state |= BS_MENU;
     3dc:	91 60       	ori	r25, 0x01	; 1
     3de:	90 93 c3 00 	sts	0x00C3, r25
     3e2:	80 93 c2 00 	sts	0x00C2, r24
	//if (button_action_up_long & BD_MENU)
	if (button_action_long & BD_MENU)
     3e6:	50 ff       	sbrs	r21, 0
     3e8:	09 c0       	rjmp	.+18     	; 0x3fc <process_buttons+0xaa>
		button_state |= BL_MENU;
     3ea:	80 91 c2 00 	lds	r24, 0x00C2
     3ee:	90 91 c3 00 	lds	r25, 0x00C3
     3f2:	92 60       	ori	r25, 0x02	; 2
     3f4:	90 93 c3 00 	sts	0x00C3, r25
     3f8:	80 93 c2 00 	sts	0x00C2, r24
	if (button_action_rep & BD_UP)
     3fc:	21 ff       	sbrs	r18, 1
     3fe:	09 c0       	rjmp	.+18     	; 0x412 <process_buttons+0xc0>
		button_state |= BR_UP;	
     400:	80 91 c2 00 	lds	r24, 0x00C2
     404:	90 91 c3 00 	lds	r25, 0x00C3
     408:	94 60       	ori	r25, 0x04	; 4
     40a:	90 93 c3 00 	sts	0x00C3, r25
     40e:	80 93 c2 00 	sts	0x00C2, r24
	if (button_action_rep & BD_DOWN)
     412:	22 ff       	sbrs	r18, 2
     414:	10 c0       	rjmp	.+32     	; 0x436 <process_buttons+0xe4>
		button_state |= BR_DOWN;
     416:	80 91 c2 00 	lds	r24, 0x00C2
     41a:	90 91 c3 00 	lds	r25, 0x00C3
     41e:	98 60       	ori	r25, 0x08	; 8
     420:	90 93 c3 00 	sts	0x00C3, r25
     424:	80 93 c2 00 	sts	0x00C2, r24
     428:	08 95       	ret
	}
	
	// Must after press_timer update
	long_press_event_mask = (press_timer == LONG_PRESS_DELAY) ? 0xFF : 0x00;
			
	button_action_down = raw_current & raw_delayed_inv;
     42a:	83 2f       	mov	r24, r19
     42c:	82 23       	and	r24, r18
     42e:	80 93 c1 00 	sts	0x00C1, r24
	{
		press_timer++;
	}
	
	// Must after press_timer update
	long_press_event_mask = (press_timer == LONG_PRESS_DELAY) ? 0xFF : 0x00;
     432:	5f ef       	ldi	r21, 0xFF	; 255
     434:	bc cf       	rjmp	.-136    	; 0x3ae <process_buttons+0x5c>
     436:	08 95       	ret

00000438 <processRollControl>:
// Function to control motor rotation
void processRollControl(void)
{	
	
	// Control direction by buttons
	if (button_state & BD_ROTFWD)
     438:	80 91 c2 00 	lds	r24, 0x00C2
     43c:	84 ff       	sbrs	r24, 4
     43e:	03 c0       	rjmp	.+6      	; 0x446 <processRollControl+0xe>
		setMotorDirection(ROLL_FWD);
     440:	81 e0       	ldi	r24, 0x01	; 1
     442:	75 d6       	rcall	.+3306   	; 0x112e <setMotorDirection>
     444:	04 c0       	rjmp	.+8      	; 0x44e <processRollControl+0x16>
	else if (button_state & BD_ROTREV)
     446:	85 ff       	sbrs	r24, 5
     448:	02 c0       	rjmp	.+4      	; 0x44e <processRollControl+0x16>
		setMotorDirection(ROLL_REV);
     44a:	82 e0       	ldi	r24, 0x02	; 2
     44c:	70 d6       	rcall	.+3296   	; 0x112e <setMotorDirection>
		
	if (button_action_down & 0x80)
     44e:	80 91 c1 00 	lds	r24, 0x00C1
     452:	88 23       	and	r24, r24
     454:	e4 f4       	brge	.+56     	; 0x48e <__stack+0x2f>
	{
		if (rollState & ROLL_CYCLE)
     456:	80 91 ce 00 	lds	r24, 0x00CE
     45a:	82 ff       	sbrs	r24, 2
     45c:	08 c0       	rjmp	.+16     	; 0x46e <__stack+0xf>
		{
			stopCycleRolling();
     45e:	ad d6       	rcall	.+3418   	; 0x11ba <stopCycleRolling>
			SetBeeperFreq(1000);
     460:	88 ee       	ldi	r24, 0xE8	; 232
     462:	93 e0       	ldi	r25, 0x03	; 3
     464:	e7 d7       	rcall	.+4046   	; 0x1434 <SetBeeperFreq>
			StartBeep(50);
     466:	82 e3       	ldi	r24, 0x32	; 50
     468:	90 e0       	ldi	r25, 0x00	; 0
     46a:	05 d8       	rcall	.-4086   	; 0xfffff476 <__eeprom_end+0xff7ef476>
     46c:	10 c0       	rjmp	.+32     	; 0x48e <__stack+0x2f>
		}
		else if (startCycleRolling())
     46e:	7d d6       	rcall	.+3322   	; 0x116a <startCycleRolling>
     470:	88 23       	and	r24, r24
     472:	39 f0       	breq	.+14     	; 0x482 <__stack+0x23>
		{
			SetBeeperFreq(1000);
     474:	88 ee       	ldi	r24, 0xE8	; 232
     476:	93 e0       	ldi	r25, 0x03	; 3
     478:	dd d7       	rcall	.+4026   	; 0x1434 <SetBeeperFreq>
			StartBeep(100);
     47a:	84 e6       	ldi	r24, 0x64	; 100
     47c:	90 e0       	ldi	r25, 0x00	; 0
     47e:	fb d7       	rcall	.+4086   	; 0x1476 <StartBeep>
     480:	06 c0       	rjmp	.+12     	; 0x48e <__stack+0x2f>
		}
		else
		{
			SetBeeperFreq(500);
     482:	84 ef       	ldi	r24, 0xF4	; 244
     484:	91 e0       	ldi	r25, 0x01	; 1
     486:	d6 d7       	rcall	.+4012   	; 0x1434 <SetBeeperFreq>
			StartBeep(50);
     488:	82 e3       	ldi	r24, 0x32	; 50
     48a:	90 e0       	ldi	r25, 0x00	; 0
     48c:	f4 d7       	rcall	.+4072   	; 0x1476 <StartBeep>
		}
	}
		
		
	// Indicate direction by LEDs
	clearExtraLeds(LED_ROTFWD | LED_ROTREV);
     48e:	80 e3       	ldi	r24, 0x30	; 48
     490:	94 d1       	rcall	.+808    	; 0x7ba <clearExtraLeds>
	if (rollState & ROLL_FWD)
     492:	80 91 ce 00 	lds	r24, 0x00CE
     496:	80 ff       	sbrs	r24, 0
     498:	03 c0       	rjmp	.+6      	; 0x4a0 <__stack+0x41>
		setExtraLeds(LED_ROTFWD);
     49a:	80 e1       	ldi	r24, 0x10	; 16
     49c:	88 d1       	rcall	.+784    	; 0x7ae <setExtraLeds>
     49e:	08 95       	ret
	else if (rollState & ROLL_REV)
     4a0:	81 ff       	sbrs	r24, 1
     4a2:	02 c0       	rjmp	.+4      	; 0x4a8 <__stack+0x49>
		setExtraLeds(LED_ROTREV);
     4a4:	80 e2       	ldi	r24, 0x20	; 32
     4a6:	83 d1       	rcall	.+774    	; 0x7ae <setExtraLeds>
     4a8:	08 95       	ret

000004aa <processHeaterControl>:
{
	// p_flags & HEATER_ENABLED
	static uint8_t heater_ctrl = 0;
	
	// Process heater ON/OFF control by button
	if (button_state & BD_HEATCTRL)
     4aa:	80 91 c2 00 	lds	r24, 0x00C2
     4ae:	86 ff       	sbrs	r24, 6
     4b0:	06 c0       	rjmp	.+12     	; 0x4be <processHeaterControl+0x14>
	{
		heater_ctrl ^= 0x01;
     4b2:	90 91 c7 00 	lds	r25, 0x00C7
     4b6:	81 e0       	ldi	r24, 0x01	; 1
     4b8:	89 27       	eor	r24, r25
     4ba:	80 93 c7 00 	sts	0x00C7, r24
	}
	
	
	if (heater_ctrl)
     4be:	80 91 c7 00 	lds	r24, 0x00C7
     4c2:	88 23       	and	r24, r24
     4c4:	29 f0       	breq	.+10     	; 0x4d0 <processHeaterControl+0x26>
		// Heater enabled

		//-----------------//
		// Process PID
		//// TODO!!!!
		setHeaterControl(10);
     4c6:	8a e0       	ldi	r24, 0x0A	; 10
     4c8:	22 d6       	rcall	.+3140   	; 0x110e <setHeaterControl>
		//-----------------//
		
		setExtraLeds(LED_HEATER);
     4ca:	80 e4       	ldi	r24, 0x40	; 64
     4cc:	70 d1       	rcall	.+736    	; 0x7ae <setExtraLeds>
     4ce:	08 95       	ret
	}
	else
	{
		// Heater disabled
		setHeaterControl(0);
     4d0:	80 e0       	ldi	r24, 0x00	; 0
     4d2:	1d d6       	rcall	.+3130   	; 0x110e <setHeaterControl>
		clearExtraLeds(LED_HEATER);
     4d4:	80 e4       	ldi	r24, 0x40	; 64
     4d6:	71 d1       	rcall	.+738    	; 0x7ba <clearExtraLeds>
     4d8:	08 95       	ret

000004da <decode_led_char>:
// Decodes normal string literal to the 
//	7-segment representation
//---------------------------------------------//
static uint8_t decode_led_char(char c)
{
	switch(c)
     4da:	48 2f       	mov	r20, r24
     4dc:	50 e0       	ldi	r21, 0x00	; 0
     4de:	fa 01       	movw	r30, r20
     4e0:	b0 97       	sbiw	r30, 0x20	; 32
     4e2:	e1 39       	cpi	r30, 0x91	; 145
     4e4:	f1 05       	cpc	r31, r1
     4e6:	70 f5       	brcc	.+92     	; 0x544 <decode_led_char+0x6a>
     4e8:	ed 5e       	subi	r30, 0xED	; 237
     4ea:	ff 4f       	sbci	r31, 0xFF	; 255
     4ec:	09 94       	ijmp
	{
		case 'O':
		case '0': return (SEGA | SEGB | SEGC | SEGD | SEGE | SEGF);
     4ee:	8f e3       	ldi	r24, 0x3F	; 63
     4f0:	08 95       	ret
		case '1': return (SEGB | SEGC );
		case '2': return (SEGA | SEGB | SEGD | SEGE | SEGG);
     4f2:	8b e5       	ldi	r24, 0x5B	; 91
     4f4:	08 95       	ret
		case '3': return (SEGA | SEGB | SEGC | SEGD | SEGG);
     4f6:	8f e4       	ldi	r24, 0x4F	; 79
     4f8:	08 95       	ret
		case '4': return (SEGB | SEGC | SEGF | SEGG);
     4fa:	86 e6       	ldi	r24, 0x66	; 102
     4fc:	08 95       	ret
		case 'S':
		case '5': return (SEGA | SEGC | SEGD | SEGF | SEGG);
     4fe:	8d e6       	ldi	r24, 0x6D	; 109
     500:	08 95       	ret
		case '6': return (SEGA | SEGC | SEGD | SEGE | SEGF | SEGG);
     502:	8d e7       	ldi	r24, 0x7D	; 125
     504:	08 95       	ret
		case '7': return (SEGA | SEGB | SEGC );
     506:	87 e0       	ldi	r24, 0x07	; 7
     508:	08 95       	ret
		case '8': return (SEGA | SEGB | SEGC | SEGD | SEGE | SEGF | SEGG);
     50a:	8f e7       	ldi	r24, 0x7F	; 127
     50c:	08 95       	ret
		case '9': return (SEGA | SEGB | SEGC | SEGD | SEGF | SEGG);
     50e:	8f e6       	ldi	r24, 0x6F	; 111
     510:	08 95       	ret
		case '.': return (SEGH);
     512:	80 e8       	ldi	r24, 0x80	; 128
     514:	08 95       	ret
		case ',': return (SEGH);
     516:	80 e8       	ldi	r24, 0x80	; 128
     518:	08 95       	ret
		case '-': return (SEGG);
     51a:	80 e4       	ldi	r24, 0x40	; 64
     51c:	08 95       	ret
		case '_': return (SEGD);
     51e:	88 e0       	ldi	r24, 0x08	; 8
     520:	08 95       	ret
		case ' ': return 0;
     522:	80 e0       	ldi	r24, 0x00	; 0
     524:	08 95       	ret
		case 0xB0:	return (SEGA | SEGB | SEGF | SEGG);		// Degree sin
     526:	83 e6       	ldi	r24, 0x63	; 99
     528:	08 95       	ret
		case 'C':	return (SEGA | SEGD | SEGE | SEGF);
     52a:	89 e3       	ldi	r24, 0x39	; 57
     52c:	08 95       	ret
		case 'F':	return (SEGA | SEGE | SEGF | SEGG);
     52e:	81 e7       	ldi	r24, 0x71	; 113
     530:	08 95       	ret
		case 'N':	return (SEGC | SEGE | SEGG);
     532:	84 e5       	ldi	r24, 0x54	; 84
     534:	08 95       	ret
		case 'D': return (SEGB | SEGC | SEGD | SEGE | SEGG);
     536:	8e e5       	ldi	r24, 0x5E	; 94
     538:	08 95       	ret
		case 'P': return (SEGA | SEGB | SEGE | SEGF | SEGG);
     53a:	83 e7       	ldi	r24, 0x73	; 115
     53c:	08 95       	ret
		case 'E': return (SEGA | SEGD | SEGE | SEGF | SEGG);
     53e:	89 e7       	ldi	r24, 0x79	; 121
     540:	08 95       	ret
{
	switch(c)
	{
		case 'O':
		case '0': return (SEGA | SEGB | SEGC | SEGD | SEGE | SEGF);
		case '1': return (SEGB | SEGC );
     542:	86 e0       	ldi	r24, 0x06	; 6
		case 'D': return (SEGB | SEGC | SEGD | SEGE | SEGG);
		case 'P': return (SEGA | SEGB | SEGE | SEGF | SEGG);
		case 'E': return (SEGA | SEGD | SEGE | SEGF | SEGG);
		default:  return c;	
	}
}
     544:	08 95       	ret

00000546 <wrap_led_buffer_index>:
//---------------------------------------------//
// Ensures that index is inside the buffer
// -128 <= index <= 127
//---------------------------------------------//
static uint8_t wrap_led_buffer_index(int8_t buf_index)
{
     546:	98 2f       	mov	r25, r24
	uint8_t new_index_u;
	new_index_u = (uint8_t) ((buf_index < 0) ? -buf_index : buf_index);
     548:	87 fd       	sbrc	r24, 7
     54a:	81 95       	neg	r24
	if (new_index_u >= LED_BUFFER_LENGTH)
     54c:	8e 30       	cpi	r24, 0x0E	; 14
     54e:	78 f0       	brcs	.+30     	; 0x56e <wrap_led_buffer_index+0x28>
		new_index_u = new_index_u % LED_BUFFER_LENGTH;
     550:	38 2f       	mov	r19, r24
     552:	36 95       	lsr	r19
     554:	23 e9       	ldi	r18, 0x93	; 147
     556:	32 9f       	mul	r19, r18
     558:	21 2d       	mov	r18, r1
     55a:	11 24       	eor	r1, r1
     55c:	26 95       	lsr	r18
     55e:	26 95       	lsr	r18
     560:	22 0f       	add	r18, r18
     562:	32 2f       	mov	r19, r18
     564:	33 0f       	add	r19, r19
     566:	33 0f       	add	r19, r19
     568:	33 0f       	add	r19, r19
     56a:	32 1b       	sub	r19, r18
     56c:	83 1b       	sub	r24, r19
	new_index_u = ((buf_index >= 0) || (new_index_u == 0)) ? new_index_u :  LED_BUFFER_LENGTH - new_index_u ;
     56e:	99 23       	and	r25, r25
     570:	2c f4       	brge	.+10     	; 0x57c <wrap_led_buffer_index+0x36>
     572:	88 23       	and	r24, r24
     574:	19 f0       	breq	.+6      	; 0x57c <wrap_led_buffer_index+0x36>
     576:	9e e0       	ldi	r25, 0x0E	; 14
     578:	98 1b       	sub	r25, r24
     57a:	89 2f       	mov	r24, r25
	return new_index_u;
}
     57c:	08 95       	ret

0000057e <processLedIndicator>:
// Call this function N times per sec to get N/NUM_DIGITS_TOTAL display update rate, where
// NUM_DIGITS_TOTAL is number_of_digits_of_LED_display if no extra LEDs are used or
// (number_of_digits_of_LED_display + 1) otherwise.
//---------------------------------------------//
void processLedIndicator()
{
     57e:	cf 93       	push	r28
	disable_led_segments();
	#endif
	
	
	// Perform regular shift
	led_clock_pulse(!LED_DIGIT_ACT_LVL);
     580:	81 e0       	ldi	r24, 0x01	; 1
     582:	22 d1       	rcall	.+580    	; 0x7c8 <led_clock_pulse>
	
	switch (wActivePos)
     584:	80 91 c9 00 	lds	r24, 0x00C9
     588:	88 23       	and	r24, r24
     58a:	19 f0       	breq	.+6      	; 0x592 <processLedIndicator+0x14>
     58c:	86 30       	cpi	r24, 0x06	; 6
     58e:	f1 f5       	brne	.+124    	; 0x60c <processLedIndicator+0x8e>
     590:	12 c0       	rjmp	.+36     	; 0x5b6 <processLedIndicator+0x38>
	{
	case 0:
		// Get buttons
		#ifndef CLEAN_OPERATION
		disable_led_segments();
     592:	46 d1       	rcall	.+652    	; 0x820 <disable_led_segments>
		#endif
		enable_led_segments_pullups();
     594:	37 d1       	rcall	.+622    	; 0x804 <enable_led_segments_pullups>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     596:	85 e3       	ldi	r24, 0x35	; 53
     598:	8a 95       	dec	r24
     59a:	f1 f7       	brne	.-4      	; 0x598 <processLedIndicator+0x1a>
     59c:	00 00       	nop
		_delay_us(PULLUP_DELAY_US);
		capture_button_state();
     59e:	47 d1       	rcall	.+654    	; 0x82e <capture_button_state>
		#ifndef CLEAN_OPERATION
		enable_led_segments();
     5a0:	38 d1       	rcall	.+624    	; 0x812 <enable_led_segments>
		#endif
		// Start new cycle with active digit level
		led_clock_pulse(LED_DIGIT_ACT_LVL);
     5a2:	80 e0       	ldi	r24, 0x00	; 0
     5a4:	11 d1       	rcall	.+546    	; 0x7c8 <led_clock_pulse>
		// Always start new cycle from specified buffer start position
		bufActivePos = wStartPos;
     5a6:	80 91 da 00 	lds	r24, 0x00DA
     5aa:	80 93 c8 00 	sts	0x00C8, r24
		next_wActivePos = wActivePos + 1;
     5ae:	c0 91 c9 00 	lds	r28, 0x00C9
     5b2:	cf 5f       	subi	r28, 0xFF	; 255
		break;
     5b4:	2f c0       	rjmp	.+94     	; 0x614 <processLedIndicator+0x96>
//---------------------------------------------//
// Performs window shifting
//---------------------------------------------//
static void processWindowShifter(void)
{
	if (shifterState == LED_SHIFT_DONE)
     5b6:	80 91 db 00 	lds	r24, 0x00DB
     5ba:	88 23       	and	r24, r24
     5bc:	81 f1       	breq	.+96     	; 0x61e <processLedIndicator+0xa0>
		return;
	
	// Process shift timer
	processSoftTimer8b(&shiftTimer);	
     5be:	8a ec       	ldi	r24, 0xCA	; 202
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	0a d7       	rcall	.+3604   	; 0x13d8 <processSoftTimer8b>
	
	if (shiftTimer.FTop)
     5c4:	80 91 ca 00 	lds	r24, 0x00CA
     5c8:	85 ff       	sbrs	r24, 5
     5ca:	23 c0       	rjmp	.+70     	; 0x612 <processLedIndicator+0x94>
	{
		// Check if finished
		if (wStartPos == bufStartPos)	
     5cc:	80 91 da 00 	lds	r24, 0x00DA
     5d0:	90 91 dc 00 	lds	r25, 0x00DC
     5d4:	89 13       	cpse	r24, r25
     5d6:	04 c0       	rjmp	.+8      	; 0x5e0 <processLedIndicator+0x62>
		{
			// Update state
			shifterState = LED_SHIFT_DONE;
     5d8:	10 92 db 00 	sts	0x00DB, r1
		// Always start new cycle from specified buffer start position
		bufActivePos = wStartPos;
		next_wActivePos = wActivePos + 1;
		break;
	case NUM_DIGITS_TOTAL-1:
		next_wActivePos = 0;
     5dc:	c0 e0       	ldi	r28, 0x00	; 0
     5de:	1a c0       	rjmp	.+52     	; 0x614 <processLedIndicator+0x96>
		if (wStartPos == bufStartPos)	
		{
			// Update state
			shifterState = LED_SHIFT_DONE;
		}
		else if (shifterState == LED_SHIFT_RIGHT)
     5e0:	90 91 db 00 	lds	r25, 0x00DB
     5e4:	92 30       	cpi	r25, 0x02	; 2
     5e6:	49 f4       	brne	.+18     	; 0x5fa <processLedIndicator+0x7c>
// Increments index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t inc_buffer_position(uint8_t position)
{
	return (position >= LED_BUFFER_LENGTH - 1) ? 0 : position + 1;
     5e8:	8d 30       	cpi	r24, 0x0D	; 13
     5ea:	10 f4       	brcc	.+4      	; 0x5f0 <processLedIndicator+0x72>
     5ec:	8f 5f       	subi	r24, 0xFF	; 255
     5ee:	01 c0       	rjmp	.+2      	; 0x5f2 <processLedIndicator+0x74>
     5f0:	80 e0       	ldi	r24, 0x00	; 0
			// Update state
			shifterState = LED_SHIFT_DONE;
		}
		else if (shifterState == LED_SHIFT_RIGHT)
		{
			wStartPos = inc_buffer_position(wStartPos);	
     5f2:	80 93 da 00 	sts	0x00DA, r24
		// Always start new cycle from specified buffer start position
		bufActivePos = wStartPos;
		next_wActivePos = wActivePos + 1;
		break;
	case NUM_DIGITS_TOTAL-1:
		next_wActivePos = 0;
     5f6:	c0 e0       	ldi	r28, 0x00	; 0
     5f8:	0d c0       	rjmp	.+26     	; 0x614 <processLedIndicator+0x96>
// Decrements index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t dec_buffer_position(uint8_t position)
{
	return (position == 0) ? LED_BUFFER_LENGTH - 1 : position - 1;
     5fa:	88 23       	and	r24, r24
     5fc:	11 f0       	breq	.+4      	; 0x602 <processLedIndicator+0x84>
     5fe:	81 50       	subi	r24, 0x01	; 1
     600:	01 c0       	rjmp	.+2      	; 0x604 <processLedIndicator+0x86>
     602:	8d e0       	ldi	r24, 0x0D	; 13
		{
			wStartPos = inc_buffer_position(wStartPos);	
		}
		else
		{
			wStartPos = dec_buffer_position(wStartPos);		
     604:	80 93 da 00 	sts	0x00DA, r24
		// Always start new cycle from specified buffer start position
		bufActivePos = wStartPos;
		next_wActivePos = wActivePos + 1;
		break;
	case NUM_DIGITS_TOTAL-1:
		next_wActivePos = 0;
     608:	c0 e0       	ldi	r28, 0x00	; 0
     60a:	04 c0       	rjmp	.+8      	; 0x614 <processLedIndicator+0x96>
		// Shift LED window
		processWindowShifter();	
		break;
	default:
		next_wActivePos = wActivePos + 1;
     60c:	c8 2f       	mov	r28, r24
     60e:	cf 5f       	subi	r28, 0xFF	; 255
		break;
     610:	01 c0       	rjmp	.+2      	; 0x614 <processLedIndicator+0x96>
		// Always start new cycle from specified buffer start position
		bufActivePos = wStartPos;
		next_wActivePos = wActivePos + 1;
		break;
	case NUM_DIGITS_TOTAL-1:
		next_wActivePos = 0;
     612:	c0 e0       	ldi	r28, 0x00	; 0
		next_wActivePos = wActivePos + 1;
		break;
	}		
	
	#ifdef 	USE_EXTRA_LED_DIGIT
	if (wActivePos == EXTRA_DIGIT_NUM)
     614:	80 91 c9 00 	lds	r24, 0x00C9
     618:	86 30       	cpi	r24, 0x06	; 6
     61a:	31 f4       	brne	.+12     	; 0x628 <processLedIndicator+0xaa>
     61c:	01 c0       	rjmp	.+2      	; 0x620 <processLedIndicator+0xa2>
		// Always start new cycle from specified buffer start position
		bufActivePos = wStartPos;
		next_wActivePos = wActivePos + 1;
		break;
	case NUM_DIGITS_TOTAL-1:
		next_wActivePos = 0;
     61e:	c0 e0       	ldi	r28, 0x00	; 0
	
	#ifdef 	USE_EXTRA_LED_DIGIT
	if (wActivePos == EXTRA_DIGIT_NUM)
	{
		// Output separate LEDs state
		set_led_segments(extra_led_state);
     620:	80 91 d9 00 	lds	r24, 0x00D9
     624:	e1 d0       	rcall	.+450    	; 0x7e8 <set_led_segments>
     626:	10 c0       	rjmp	.+32     	; 0x648 <processLedIndicator+0xca>
	}
	else
	#endif
	{
		// Output new segment data
		set_led_segments(led_data_buffer[bufActivePos]);
     628:	e0 91 c8 00 	lds	r30, 0x00C8
     62c:	f0 e0       	ldi	r31, 0x00	; 0
     62e:	e3 52       	subi	r30, 0x23	; 35
     630:	ff 4f       	sbci	r31, 0xFF	; 255
     632:	80 81       	ld	r24, Z
     634:	d9 d0       	rcall	.+434    	; 0x7e8 <set_led_segments>
		// Wrap around buffer length
		bufActivePos = inc_buffer_position(bufActivePos );
     636:	90 91 c8 00 	lds	r25, 0x00C8
// Increments index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t inc_buffer_position(uint8_t position)
{
	return (position >= LED_BUFFER_LENGTH - 1) ? 0 : position + 1;
     63a:	9d 30       	cpi	r25, 0x0D	; 13
     63c:	10 f4       	brcc	.+4      	; 0x642 <processLedIndicator+0xc4>
     63e:	9f 5f       	subi	r25, 0xFF	; 255
     640:	01 c0       	rjmp	.+2      	; 0x644 <processLedIndicator+0xc6>
     642:	90 e0       	ldi	r25, 0x00	; 0
	#endif
	{
		// Output new segment data
		set_led_segments(led_data_buffer[bufActivePos]);
		// Wrap around buffer length
		bufActivePos = inc_buffer_position(bufActivePos );
     644:	90 93 c8 00 	sts	0x00C8, r25
	}
		
	wActivePos = next_wActivePos;
     648:	c0 93 c9 00 	sts	0x00C9, r28
	
	#ifdef CLEAN_OPERATION
	enable_led_segments();
	#endif

}
     64c:	cf 91       	pop	r28
     64e:	08 95       	ret

00000650 <fillLedBuffer>:
//---------------------------------------------//
// Fills buffer from (bufStartPos + offset) 
//	position with single char
//---------------------------------------------//
void fillLedBuffer(int8_t offset, uint8_t length, char c)
{
     650:	1f 93       	push	r17
     652:	cf 93       	push	r28
     654:	df 93       	push	r29
     656:	18 2f       	mov	r17, r24
     658:	c6 2f       	mov	r28, r22
     65a:	84 2f       	mov	r24, r20
	uint8_t val = decode_led_char(c);
     65c:	3e df       	rcall	.-388    	; 0x4da <decode_led_char>
     65e:	d8 2f       	mov	r29, r24
	// Ensure index is inside the buffer
	uint8_t position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
     660:	80 91 dc 00 	lds	r24, 0x00DC
     664:	81 0f       	add	r24, r17
     666:	6f df       	rcall	.-290    	; 0x546 <wrap_led_buffer_index>
// Increments index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t inc_buffer_position(uint8_t position)
{
	return (position >= LED_BUFFER_LENGTH - 1) ? 0 : position + 1;
     668:	90 e0       	ldi	r25, 0x00	; 0
void fillLedBuffer(int8_t offset, uint8_t length, char c)
{
	uint8_t val = decode_led_char(c);
	// Ensure index is inside the buffer
	uint8_t position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
	while(length--)
     66a:	0a c0       	rjmp	.+20     	; 0x680 <fillLedBuffer+0x30>
	{
		led_data_buffer[position] = val;
     66c:	e8 2f       	mov	r30, r24
     66e:	f0 e0       	ldi	r31, 0x00	; 0
     670:	e3 52       	subi	r30, 0x23	; 35
     672:	ff 4f       	sbci	r31, 0xFF	; 255
     674:	d0 83       	st	Z, r29
// Increments index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t inc_buffer_position(uint8_t position)
{
	return (position >= LED_BUFFER_LENGTH - 1) ? 0 : position + 1;
     676:	8d 30       	cpi	r24, 0x0D	; 13
     678:	10 f4       	brcc	.+4      	; 0x67e <fillLedBuffer+0x2e>
     67a:	8f 5f       	subi	r24, 0xFF	; 255
     67c:	01 c0       	rjmp	.+2      	; 0x680 <fillLedBuffer+0x30>
     67e:	89 2f       	mov	r24, r25
void fillLedBuffer(int8_t offset, uint8_t length, char c)
{
	uint8_t val = decode_led_char(c);
	// Ensure index is inside the buffer
	uint8_t position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
	while(length--)
     680:	c1 50       	subi	r28, 0x01	; 1
     682:	a0 f7       	brcc	.-24     	; 0x66c <fillLedBuffer+0x1c>
	{
		led_data_buffer[position] = val;
		position = inc_buffer_position(position);
	}
}
     684:	df 91       	pop	r29
     686:	cf 91       	pop	r28
     688:	1f 91       	pop	r17
     68a:	08 95       	ret

0000068c <startShiftingWindowLeft>:
//	LED window left 
//---------------------------------------------//
void startShiftingWindowLeft(void)
{
	// Clear spaces between menu states
	fillLedBuffer(-2,2,' ');
     68c:	40 e2       	ldi	r20, 0x20	; 32
     68e:	62 e0       	ldi	r22, 0x02	; 2
     690:	8e ef       	ldi	r24, 0xFE	; 254
     692:	de df       	rcall	.-68     	; 0x650 <fillLedBuffer>
	// Set new buffer position for writing
	bufStartPos = wrap_led_buffer_index( (int8_t)bufStartPos - (NUM_DIGITS + 2) );
     694:	80 91 dc 00 	lds	r24, 0x00DC
     698:	88 50       	subi	r24, 0x08	; 8
     69a:	55 df       	rcall	.-342    	; 0x546 <wrap_led_buffer_index>
     69c:	80 93 dc 00 	sts	0x00DC, r24
	// Set shifter state
	shifterState = LED_SHIFT_LEFT;
     6a0:	81 e0       	ldi	r24, 0x01	; 1
     6a2:	80 93 db 00 	sts	0x00DB, r24
     6a6:	08 95       	ret

000006a8 <startShiftingWindowRight>:
//	LED window right 
//---------------------------------------------//
void startShiftingWindowRight(void)
{
	// Clear spaces between menu states
	fillLedBuffer(NUM_DIGITS,2,' ');
     6a8:	40 e2       	ldi	r20, 0x20	; 32
     6aa:	62 e0       	ldi	r22, 0x02	; 2
     6ac:	86 e0       	ldi	r24, 0x06	; 6
     6ae:	d0 df       	rcall	.-96     	; 0x650 <fillLedBuffer>
	// Set new buffer position for writing
	bufStartPos = wrap_led_buffer_index( (int8_t)bufStartPos + NUM_DIGITS + 2 );
     6b0:	80 91 dc 00 	lds	r24, 0x00DC
     6b4:	88 5f       	subi	r24, 0xF8	; 248
     6b6:	47 df       	rcall	.-370    	; 0x546 <wrap_led_buffer_index>
     6b8:	80 93 dc 00 	sts	0x00DC, r24
	// Set shifter state
	shifterState = LED_SHIFT_RIGHT;
     6bc:	82 e0       	ldi	r24, 0x02	; 2
     6be:	80 93 db 00 	sts	0x00DB, r24
     6c2:	08 95       	ret

000006c4 <initLedIndicator>:
//---------------------------------------------//
//	Initialization
//	Call this function at start of your program
//---------------------------------------------//
void initLedIndicator()
{
     6c4:	cf 93       	push	r28
	uint8_t i;
	// First disable outputs
	disable_led_segments();
     6c6:	ac d0       	rcall	.+344    	; 0x820 <disable_led_segments>
     6c8:	c7 e0       	ldi	r28, 0x07	; 7
	// Fill shift register with non-active levels
	for (i=0;i<NUM_DIGITS_TOTAL;i++)
	{
		led_clock_pulse(!LED_DIGIT_ACT_LVL);
     6ca:	81 e0       	ldi	r24, 0x01	; 1
     6cc:	7d d0       	rcall	.+250    	; 0x7c8 <led_clock_pulse>
     6ce:	c1 50       	subi	r28, 0x01	; 1
{
	uint8_t i;
	// First disable outputs
	disable_led_segments();
	// Fill shift register with non-active levels
	for (i=0;i<NUM_DIGITS_TOTAL;i++)
     6d0:	e1 f7       	brne	.-8      	; 0x6ca <initLedIndicator+0x6>
	{
		led_clock_pulse(!LED_DIGIT_ACT_LVL);
	}
	// Now enable outputs
	enable_led_segments();
     6d2:	9f d0       	rcall	.+318    	; 0x812 <enable_led_segments>
	
	// Reset pointers
	wStartPos = 0;
     6d4:	10 92 da 00 	sts	0x00DA, r1
	bufStartPos = 0;
     6d8:	10 92 dc 00 	sts	0x00DC, r1
	bufActivePos = 0;
     6dc:	10 92 c8 00 	sts	0x00C8, r1
	wActivePos = 0;
     6e0:	10 92 c9 00 	sts	0x00C9, r1
	#ifdef 	USE_EXTRA_LED_DIGIT
	extra_led_state = 0;
     6e4:	10 92 d9 00 	sts	0x00D9, r1
	#endif
	
	// Clear the buffer 
	fillLedBuffer(0,LED_BUFFER_LENGTH,' ');
     6e8:	40 e2       	ldi	r20, 0x20	; 32
     6ea:	6e e0       	ldi	r22, 0x0E	; 14
     6ec:	80 e0       	ldi	r24, 0x00	; 0
     6ee:	b0 df       	rcall	.-160    	; 0x650 <fillLedBuffer>
	
	// Initialize shift timer - always enabled, but 
	//	processed only when shifting is active
	shifterState = LED_SHIFT_DONE;
     6f0:	10 92 db 00 	sts	0x00DB, r1
	shiftTimer.Enabled = 1;
     6f4:	ea ec       	ldi	r30, 0xCA	; 202
     6f6:	f0 e0       	ldi	r31, 0x00	; 0
     6f8:	80 81       	ld	r24, Z
	shiftTimer.RunOnce = 0;
     6fa:	81 60       	ori	r24, 0x01	; 1
     6fc:	8d 7f       	andi	r24, 0xFD	; 253
     6fe:	80 83       	st	Z, r24
	shiftTimer.Top = LED_SHIFT_INTERVAL-1;
     700:	89 e0       	ldi	r24, 0x09	; 9
     702:	80 93 cc 00 	sts	0x00CC, r24
}
     706:	cf 91       	pop	r28
     708:	08 95       	ret

0000070a <printLedBuffer>:
//		str - null-terminated char string
// Comma and dot (".", ",") get special processing - first occurrence is added to
// a preceding char, next are displayed as a single digit
//---------------------------------------------//
void printLedBuffer(int8_t offset, char* str)
{
     70a:	df 92       	push	r13
     70c:	ef 92       	push	r14
     70e:	ff 92       	push	r15
     710:	0f 93       	push	r16
     712:	1f 93       	push	r17
     714:	cf 93       	push	r28
     716:	df 93       	push	r29
     718:	eb 01       	movw	r28, r22
	char c;
	uint8_t decoded_sym;
	uint8_t state = 0x02;
	uint8_t comma_pos;
	// Ensure index is inside the buffer
	uint8_t buffer_position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
     71a:	90 91 dc 00 	lds	r25, 0x00DC
     71e:	89 0f       	add	r24, r25
     720:	12 df       	rcall	.-476    	; 0x546 <wrap_led_buffer_index>
     722:	18 2f       	mov	r17, r24
	comma_pos = buffer_position;
     724:	d8 2e       	mov	r13, r24
//---------------------------------------------//
void printLedBuffer(int8_t offset, char* str)
{
	char c;
	uint8_t decoded_sym;
	uint8_t state = 0x02;
     726:	02 e0       	ldi	r16, 0x02	; 2
		comma_pos = buffer_position;
		if (state != 0x01)
		{
			buffer_position = inc_buffer_position(buffer_position);
		}
		state = (state & 0x01) ? 0x03 : 0x00;		
     728:	f1 2c       	mov	r15, r1
     72a:	0f 2e       	mov	r0, r31
     72c:	f3 e0       	ldi	r31, 0x03	; 3
     72e:	ef 2e       	mov	r14, r31
     730:	f0 2d       	mov	r31, r0
	uint8_t comma_pos;
	// Ensure index is inside the buffer
	uint8_t buffer_position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
	comma_pos = buffer_position;
	// Output chars
	while((c = *str++))
     732:	26 c0       	rjmp	.+76     	; 0x780 <printLedBuffer+0x76>
	{
		decoded_sym = decode_led_char(c);
     734:	d2 de       	rcall	.-604    	; 0x4da <decode_led_char>
		state = (decoded_sym == SEGH) ? (state | 0x01) : (state & ~0x01);
     736:	80 38       	cpi	r24, 0x80	; 128
     738:	19 f4       	brne	.+6      	; 0x740 <printLedBuffer+0x36>
     73a:	90 2f       	mov	r25, r16
     73c:	91 60       	ori	r25, 0x01	; 1
     73e:	02 c0       	rjmp	.+4      	; 0x744 <printLedBuffer+0x3a>
     740:	90 2f       	mov	r25, r16
     742:	9e 7f       	andi	r25, 0xFE	; 254
		if (state == 0x01)			
     744:	91 30       	cpi	r25, 0x01	; 1
     746:	51 f4       	brne	.+20     	; 0x75c <printLedBuffer+0x52>
		{
			led_data_buffer[comma_pos] |= decoded_sym;
     748:	ed 2d       	mov	r30, r13
     74a:	f0 e0       	ldi	r31, 0x00	; 0
     74c:	e3 52       	subi	r30, 0x23	; 35
     74e:	ff 4f       	sbci	r31, 0xFF	; 255
     750:	90 81       	ld	r25, Z
     752:	89 2b       	or	r24, r25
     754:	80 83       	st	Z, r24
     756:	81 2f       	mov	r24, r17
		comma_pos = buffer_position;
		if (state != 0x01)
		{
			buffer_position = inc_buffer_position(buffer_position);
		}
		state = (state & 0x01) ? 0x03 : 0x00;		
     758:	0e 2d       	mov	r16, r14
     75a:	10 c0       	rjmp	.+32     	; 0x77c <printLedBuffer+0x72>
		{
			led_data_buffer[comma_pos] |= decoded_sym;
		}
		else
		{
			led_data_buffer[buffer_position] = decoded_sym;	
     75c:	e1 2f       	mov	r30, r17
     75e:	f0 e0       	ldi	r31, 0x00	; 0
     760:	e3 52       	subi	r30, 0x23	; 35
     762:	ff 4f       	sbci	r31, 0xFF	; 255
     764:	80 83       	st	Z, r24
// Increments index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t inc_buffer_position(uint8_t position)
{
	return (position >= LED_BUFFER_LENGTH - 1) ? 0 : position + 1;
     766:	1d 30       	cpi	r17, 0x0D	; 13
     768:	18 f4       	brcc	.+6      	; 0x770 <printLedBuffer+0x66>
     76a:	81 2f       	mov	r24, r17
     76c:	8f 5f       	subi	r24, 0xFF	; 255
     76e:	01 c0       	rjmp	.+2      	; 0x772 <printLedBuffer+0x68>
     770:	8f 2d       	mov	r24, r15
		comma_pos = buffer_position;
		if (state != 0x01)
		{
			buffer_position = inc_buffer_position(buffer_position);
		}
		state = (state & 0x01) ? 0x03 : 0x00;		
     772:	90 ff       	sbrs	r25, 0
     774:	02 c0       	rjmp	.+4      	; 0x77a <printLedBuffer+0x70>
     776:	0e 2d       	mov	r16, r14
     778:	01 c0       	rjmp	.+2      	; 0x77c <printLedBuffer+0x72>
     77a:	0f 2d       	mov	r16, r15
     77c:	d1 2e       	mov	r13, r17
     77e:	18 2f       	mov	r17, r24
	uint8_t comma_pos;
	// Ensure index is inside the buffer
	uint8_t buffer_position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
	comma_pos = buffer_position;
	// Output chars
	while((c = *str++))
     780:	89 91       	ld	r24, Y+
     782:	81 11       	cpse	r24, r1
     784:	d7 cf       	rjmp	.-82     	; 0x734 <printLedBuffer+0x2a>
		{
			buffer_position = inc_buffer_position(buffer_position);
		}
		state = (state & 0x01) ? 0x03 : 0x00;		
	}
}
     786:	df 91       	pop	r29
     788:	cf 91       	pop	r28
     78a:	1f 91       	pop	r17
     78c:	0f 91       	pop	r16
     78e:	ff 90       	pop	r15
     790:	ef 90       	pop	r14
     792:	df 90       	pop	r13
     794:	08 95       	ret

00000796 <setComma>:
//	buffer cell
//---------------------------------------------//
void setComma(int8_t offset)
{
	// Ensure index is inside the buffer
	uint8_t position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
     796:	90 91 dc 00 	lds	r25, 0x00DC
     79a:	89 0f       	add	r24, r25
     79c:	d4 de       	rcall	.-600    	; 0x546 <wrap_led_buffer_index>
	led_data_buffer[position] |= (SEGH);
     79e:	e8 2f       	mov	r30, r24
     7a0:	f0 e0       	ldi	r31, 0x00	; 0
     7a2:	e3 52       	subi	r30, 0x23	; 35
     7a4:	ff 4f       	sbci	r31, 0xFF	; 255
     7a6:	80 81       	ld	r24, Z
     7a8:	80 68       	ori	r24, 0x80	; 128
     7aa:	80 83       	st	Z, r24
     7ac:	08 95       	ret

000007ae <setExtraLeds>:
// Argument is ORed with current LED state
//---------------------------------------------//
inline void setExtraLeds(uint8_t leds_set_value)
{
		//asm("cli");
		extra_led_state |= leds_set_value;
     7ae:	90 91 d9 00 	lds	r25, 0x00D9
     7b2:	89 2b       	or	r24, r25
     7b4:	80 93 d9 00 	sts	0x00D9, r24
     7b8:	08 95       	ret

000007ba <clearExtraLeds>:
// Argument is AND NOTed with current LED state
//---------------------------------------------//
inline void clearExtraLeds(uint8_t leds_clear_value)
{
		//asm("cli");
		extra_led_state &= ~leds_clear_value;
     7ba:	90 91 d9 00 	lds	r25, 0x00D9
     7be:	80 95       	com	r24
     7c0:	98 23       	and	r25, r24
     7c2:	90 93 d9 00 	sts	0x00D9, r25
     7c6:	08 95       	ret

000007c8 <led_clock_pulse>:


// Clocks in bit into the shift register
void led_clock_pulse(uint8_t bit)
{
	if (bit)
     7c8:	88 23       	and	r24, r24
     7ca:	11 f0       	breq	.+4      	; 0x7d0 <led_clock_pulse+0x8>
		PORTB |= (1<<PB_LED_DOUT);
     7cc:	c0 9a       	sbi	0x18, 0	; 24
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <led_clock_pulse+0xa>
	else
		PORTB &= ~(1<<PB_LED_DOUT);
     7d0:	c0 98       	cbi	0x18, 0	; 24
     7d2:	8a e1       	ldi	r24, 0x1A	; 26
     7d4:	8a 95       	dec	r24
     7d6:	f1 f7       	brne	.-4      	; 0x7d4 <led_clock_pulse+0xc>
     7d8:	00 c0       	rjmp	.+0      	; 0x7da <led_clock_pulse+0x12>
	_delay_us(SETUP_DELAY_US);
	PORTB |= (1<<PB_LED_CLK);
     7da:	c2 9a       	sbi	0x18, 2	; 24
     7dc:	8a e1       	ldi	r24, 0x1A	; 26
     7de:	8a 95       	dec	r24
     7e0:	f1 f7       	brne	.-4      	; 0x7de <led_clock_pulse+0x16>
     7e2:	00 c0       	rjmp	.+0      	; 0x7e4 <led_clock_pulse+0x1c>
	_delay_us(SHIFT_DELAY_US);
	PORTB &= ~(1<<PB_LED_CLK);
     7e4:	c2 98       	cbi	0x18, 2	; 24
     7e6:	08 95       	ret

000007e8 <set_led_segments>:
// Outputs decoded segment data to port bits
void set_led_segments(uint8_t seg_ch)
{
	uint8_t pdat;
	seg_ch ^= LED_SEGMENT_MASK;
	pdat = PORTC & ~( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
     7e8:	95 b3       	in	r25, 0x15	; 21
	pdat |= (seg_ch & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
     7ea:	28 2f       	mov	r18, r24
     7ec:	2f 71       	andi	r18, 0x1F	; 31
// Outputs decoded segment data to port bits
void set_led_segments(uint8_t seg_ch)
{
	uint8_t pdat;
	seg_ch ^= LED_SEGMENT_MASK;
	pdat = PORTC & ~( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
     7ee:	90 7e       	andi	r25, 0xE0	; 224
	pdat |= (seg_ch & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
     7f0:	92 2b       	or	r25, r18
	PORTC = pdat;
     7f2:	95 bb       	out	0x15, r25	; 21
	seg_ch >>= 2;
	pdat = PORTB & ~( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     7f4:	98 b3       	in	r25, 0x18	; 24
	uint8_t pdat;
	seg_ch ^= LED_SEGMENT_MASK;
	pdat = PORTC & ~( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
	pdat |= (seg_ch & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
	PORTC = pdat;
	seg_ch >>= 2;
     7f6:	86 95       	lsr	r24
     7f8:	86 95       	lsr	r24
	pdat = PORTB & ~( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
	pdat |= (seg_ch & ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) ));
     7fa:	88 73       	andi	r24, 0x38	; 56
	seg_ch ^= LED_SEGMENT_MASK;
	pdat = PORTC & ~( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
	pdat |= (seg_ch & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
	PORTC = pdat;
	seg_ch >>= 2;
	pdat = PORTB & ~( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     7fc:	97 7c       	andi	r25, 0xC7	; 199
	pdat |= (seg_ch & ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) ));
     7fe:	89 2b       	or	r24, r25
	PORTB = pdat;
     800:	88 bb       	out	0x18, r24	; 24
     802:	08 95       	ret

00000804 <enable_led_segments_pullups>:

// Turns segment port bits to HI-Z and
// enables pull-ups
void enable_led_segments_pullups()
{
	PORTC |= ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
     804:	85 b3       	in	r24, 0x15	; 21
     806:	8f 61       	ori	r24, 0x1F	; 31
     808:	85 bb       	out	0x15, r24	; 21
	PORTB |= ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     80a:	88 b3       	in	r24, 0x18	; 24
     80c:	88 63       	ori	r24, 0x38	; 56
     80e:	88 bb       	out	0x18, r24	; 24
     810:	08 95       	ret

00000812 <enable_led_segments>:
}	

void enable_led_segments()
{
	DDRC |= ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
     812:	84 b3       	in	r24, 0x14	; 20
     814:	8f 61       	ori	r24, 0x1F	; 31
     816:	84 bb       	out	0x14, r24	; 20
	DDRB |= ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     818:	87 b3       	in	r24, 0x17	; 23
     81a:	88 63       	ori	r24, 0x38	; 56
     81c:	87 bb       	out	0x17, r24	; 23
     81e:	08 95       	ret

00000820 <disable_led_segments>:
}

void disable_led_segments()
{
	DDRC &= ~( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
     820:	84 b3       	in	r24, 0x14	; 20
     822:	80 7e       	andi	r24, 0xE0	; 224
     824:	84 bb       	out	0x14, r24	; 20
	DDRB &= ~( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     826:	87 b3       	in	r24, 0x17	; 23
     828:	87 7c       	andi	r24, 0xC7	; 199
     82a:	87 bb       	out	0x17, r24	; 23
     82c:	08 95       	ret

0000082e <capture_button_state>:


void capture_button_state()
{
	uint8_t pdat;
	pdat = PINB  & ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     82e:	86 b3       	in	r24, 0x16	; 22
     830:	88 73       	andi	r24, 0x38	; 56
	pdat <<= 2;
	pdat |= (PINC & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
     832:	93 b3       	in	r25, 0x13	; 19

void capture_button_state()
{
	uint8_t pdat;
	pdat = PINB  & ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
	pdat <<= 2;
     834:	88 0f       	add	r24, r24
     836:	88 0f       	add	r24, r24
	pdat |= (PINC & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
     838:	9f 71       	andi	r25, 0x1F	; 31
     83a:	89 2b       	or	r24, r25
	raw_button_state = pdat ^ RAW_BUTTONS_INVERSE_MASK;
     83c:	80 95       	com	r24
     83e:	80 93 eb 00 	sts	0x00EB, r24
     842:	08 95       	ret

00000844 <restartMenuTimer>:
//	 Restarts menu state timeout
//	Should be used in RUN function when control buttons are pressed.
//-----------------------------------------------------------------//
static void restartMenuTimer(void)
{
	menuTimer.Timer = 0;
     844:	10 92 ee 00 	sts	0x00EE, r1
     848:	08 95       	ret

0000084a <mf_setTempLeave>:
		clearExtraLeds(LED_TEMP);
}

void mf_setTempLeave(void)
{
	userTimer.Enabled = 0;
     84a:	e1 ef       	ldi	r30, 0xF1	; 241
     84c:	f0 e0       	ldi	r31, 0x00	; 0
     84e:	80 81       	ld	r24, Z
     850:	8e 7f       	andi	r24, 0xFE	; 254
     852:	80 83       	st	Z, r24
     854:	08 95       	ret

00000856 <mf_leafSelectAct>:
	userTimer.FA_GE = 1;	
}

void mf_leafSelectAct(void)
{
	userTimer.Timer = 0;
     856:	10 92 f2 00 	sts	0x00F2, r1
	userTimer.Top = BLINK_PERIOD - 1;
     85a:	87 e0       	ldi	r24, 0x07	; 7
     85c:	80 93 f3 00 	sts	0x00F3, r24
	userTimer.CompA = BLINK_PERIOD / 2;
     860:	84 e0       	ldi	r24, 0x04	; 4
     862:	80 93 f4 00 	sts	0x00F4, r24
	userTimer.Enabled = 1;
     866:	e1 ef       	ldi	r30, 0xF1	; 241
     868:	f0 e0       	ldi	r31, 0x00	; 0
     86a:	80 81       	ld	r24, Z
     86c:	81 60       	ori	r24, 0x01	; 1
     86e:	80 83       	st	Z, r24
     870:	08 95       	ret

00000872 <mf_leafExit>:
}

void mf_leafExit(void)
{
	userTimer.Enabled = 0;	
     872:	e1 ef       	ldi	r30, 0xF1	; 241
     874:	f0 e0       	ldi	r31, 0x00	; 0
     876:	80 81       	ld	r24, Z
     878:	8e 7f       	andi	r24, 0xFE	; 254
     87a:	80 83       	st	Z, r24
     87c:	08 95       	ret

0000087e <mf_cdone1Select>:
}

//---------------------------------------------//

void mf_cdone1Select(void)
{
     87e:	08 95       	ret

00000880 <mf_cdone2Select>:
	// Calculate new coefficient for temperature conversion
}

void mf_cdone2Select(void)
{
     880:	08 95       	ret

00000882 <mf_cdoneDo>:
	// Calculate new coefficient for temperature conversion
}

void mf_cdoneDo(void)
{
	printLedBuffer(0," DONE ");
     882:	6d e9       	ldi	r22, 0x9D	; 157
     884:	70 e0       	ldi	r23, 0x00	; 0
     886:	80 e0       	ldi	r24, 0x00	; 0
     888:	40 df       	rcall	.-384    	; 0x70a <printLedBuffer>
     88a:	08 95       	ret

0000088c <mf_calib2Do>:
}

//---------------------------------------------//

void mf_calib2Do(void)
{
     88c:	cf 93       	push	r28
     88e:	df 93       	push	r29
     890:	cd b7       	in	r28, 0x3d	; 61
     892:	de b7       	in	r29, 0x3e	; 62
     894:	27 97       	sbiw	r28, 0x07	; 7
     896:	0f b6       	in	r0, 0x3f	; 63
     898:	f8 94       	cli
     89a:	de bf       	out	0x3e, r29	; 62
     89c:	0f be       	out	0x3f, r0	; 63
     89e:	cd bf       	out	0x3d, r28	; 61
	char str[] = {'P','2',' ',' ',' ',' ',0};
     8a0:	87 e0       	ldi	r24, 0x07	; 7
     8a2:	e3 e7       	ldi	r30, 0x73	; 115
     8a4:	f0 e0       	ldi	r31, 0x00	; 0
     8a6:	de 01       	movw	r26, r28
     8a8:	11 96       	adiw	r26, 0x01	; 1
     8aa:	01 90       	ld	r0, Z+
     8ac:	0d 92       	st	X+, r0
     8ae:	8a 95       	dec	r24
     8b0:	e1 f7       	brne	.-8      	; 0x8aa <mf_calib2Do+0x1e>
	
	
	if (button_state & (BD_UP | BR_UP))
     8b2:	80 91 c2 00 	lds	r24, 0x00C2
     8b6:	90 91 c3 00 	lds	r25, 0x00C3
     8ba:	9c 01       	movw	r18, r24
     8bc:	22 70       	andi	r18, 0x02	; 2
     8be:	34 70       	andi	r19, 0x04	; 4
     8c0:	23 2b       	or	r18, r19
     8c2:	41 f0       	breq	.+16     	; 0x8d4 <mf_calib2Do+0x48>
	{
		if (cpoint2 < MAX_CALIB_TEMP)
     8c4:	80 91 62 00 	lds	r24, 0x0062
     8c8:	8a 3f       	cpi	r24, 0xFA	; 250
     8ca:	78 f4       	brcc	.+30     	; 0x8ea <mf_calib2Do+0x5e>
		cpoint2 += 1;
     8cc:	8f 5f       	subi	r24, 0xFF	; 255
     8ce:	80 93 62 00 	sts	0x0062, r24
     8d2:	0b c0       	rjmp	.+22     	; 0x8ea <mf_calib2Do+0x5e>
	}
	else if (button_state & (BD_DOWN | BR_DOWN))
     8d4:	84 70       	andi	r24, 0x04	; 4
     8d6:	98 70       	andi	r25, 0x08	; 8
     8d8:	89 2b       	or	r24, r25
     8da:	39 f0       	breq	.+14     	; 0x8ea <mf_calib2Do+0x5e>
	{
		if (cpoint2 > MIN_CALIB_TEMP)
     8dc:	80 91 62 00 	lds	r24, 0x0062
     8e0:	8b 30       	cpi	r24, 0x0B	; 11
     8e2:	18 f0       	brcs	.+6      	; 0x8ea <mf_calib2Do+0x5e>
		cpoint2 -= 1;
     8e4:	81 50       	subi	r24, 0x01	; 1
     8e6:	80 93 62 00 	sts	0x0062, r24
	}
	
	if (userTimer.FA_GE)
     8ea:	80 91 f1 00 	lds	r24, 0x00F1
     8ee:	84 ff       	sbrs	r24, 4
     8f0:	09 c0       	rjmp	.+18     	; 0x904 <mf_calib2Do+0x78>
	{
		u16toa_align_right(cpoint2,str + 3,0x80 | 3,' ');
     8f2:	20 e2       	ldi	r18, 0x20	; 32
     8f4:	43 e8       	ldi	r20, 0x83	; 131
     8f6:	be 01       	movw	r22, r28
     8f8:	6c 5f       	subi	r22, 0xFC	; 252
     8fa:	7f 4f       	sbci	r23, 0xFF	; 255
     8fc:	80 91 62 00 	lds	r24, 0x0062
     900:	90 e0       	ldi	r25, 0x00	; 0
     902:	1d d3       	rcall	.+1594   	; 0xf3e <u16toa_align_right>
	}
	
	printLedBuffer(0,str);
     904:	be 01       	movw	r22, r28
     906:	6f 5f       	subi	r22, 0xFF	; 255
     908:	7f 4f       	sbci	r23, 0xFF	; 255
     90a:	80 e0       	ldi	r24, 0x00	; 0
     90c:	fe de       	rcall	.-516    	; 0x70a <printLedBuffer>
	
}
     90e:	27 96       	adiw	r28, 0x07	; 7
     910:	0f b6       	in	r0, 0x3f	; 63
     912:	f8 94       	cli
     914:	de bf       	out	0x3e, r29	; 62
     916:	0f be       	out	0x3f, r0	; 63
     918:	cd bf       	out	0x3d, r28	; 61
     91a:	df 91       	pop	r29
     91c:	cf 91       	pop	r28
     91e:	08 95       	ret

00000920 <mf_calib1Do>:
	// restore cpoint1, cpoint2
	mf_leafSelect();
}

void mf_calib1Do(void)
{
     920:	cf 93       	push	r28
     922:	df 93       	push	r29
     924:	cd b7       	in	r28, 0x3d	; 61
     926:	de b7       	in	r29, 0x3e	; 62
     928:	27 97       	sbiw	r28, 0x07	; 7
     92a:	0f b6       	in	r0, 0x3f	; 63
     92c:	f8 94       	cli
     92e:	de bf       	out	0x3e, r29	; 62
     930:	0f be       	out	0x3f, r0	; 63
     932:	cd bf       	out	0x3d, r28	; 61
	char str[] = {'P','1',' ',' ',' ',' ',0};
     934:	87 e0       	ldi	r24, 0x07	; 7
     936:	ea e7       	ldi	r30, 0x7A	; 122
     938:	f0 e0       	ldi	r31, 0x00	; 0
     93a:	de 01       	movw	r26, r28
     93c:	11 96       	adiw	r26, 0x01	; 1
     93e:	01 90       	ld	r0, Z+
     940:	0d 92       	st	X+, r0
     942:	8a 95       	dec	r24
     944:	e1 f7       	brne	.-8      	; 0x93e <mf_calib1Do+0x1e>
	
	
	if (button_state & (BD_UP | BR_UP))
     946:	80 91 c2 00 	lds	r24, 0x00C2
     94a:	90 91 c3 00 	lds	r25, 0x00C3
     94e:	9c 01       	movw	r18, r24
     950:	22 70       	andi	r18, 0x02	; 2
     952:	34 70       	andi	r19, 0x04	; 4
     954:	23 2b       	or	r18, r19
     956:	41 f0       	breq	.+16     	; 0x968 <mf_calib1Do+0x48>
	{
		if (cpoint1 < MAX_CALIB_TEMP)
     958:	80 91 63 00 	lds	r24, 0x0063
     95c:	8a 3f       	cpi	r24, 0xFA	; 250
     95e:	78 f4       	brcc	.+30     	; 0x97e <mf_calib1Do+0x5e>
			cpoint1 += 1;
     960:	8f 5f       	subi	r24, 0xFF	; 255
     962:	80 93 63 00 	sts	0x0063, r24
     966:	0b c0       	rjmp	.+22     	; 0x97e <mf_calib1Do+0x5e>
	}
	else if (button_state & (BD_DOWN | BR_DOWN))
     968:	84 70       	andi	r24, 0x04	; 4
     96a:	98 70       	andi	r25, 0x08	; 8
     96c:	89 2b       	or	r24, r25
     96e:	39 f0       	breq	.+14     	; 0x97e <mf_calib1Do+0x5e>
	{
		if (cpoint1 > MIN_CALIB_TEMP)
     970:	80 91 63 00 	lds	r24, 0x0063
     974:	8b 30       	cpi	r24, 0x0B	; 11
     976:	18 f0       	brcs	.+6      	; 0x97e <mf_calib1Do+0x5e>
			cpoint1 -= 1;
     978:	81 50       	subi	r24, 0x01	; 1
     97a:	80 93 63 00 	sts	0x0063, r24
	}
	
	if (userTimer.FA_GE)
     97e:	80 91 f1 00 	lds	r24, 0x00F1
     982:	84 ff       	sbrs	r24, 4
     984:	09 c0       	rjmp	.+18     	; 0x998 <mf_calib1Do+0x78>
	{
		u16toa_align_right(cpoint1,str + 3,0x80 | 3,' ');
     986:	20 e2       	ldi	r18, 0x20	; 32
     988:	43 e8       	ldi	r20, 0x83	; 131
     98a:	be 01       	movw	r22, r28
     98c:	6c 5f       	subi	r22, 0xFC	; 252
     98e:	7f 4f       	sbci	r23, 0xFF	; 255
     990:	80 91 63 00 	lds	r24, 0x0063
     994:	90 e0       	ldi	r25, 0x00	; 0
     996:	d3 d2       	rcall	.+1446   	; 0xf3e <u16toa_align_right>
	}
	
	printLedBuffer(0,str);
     998:	be 01       	movw	r22, r28
     99a:	6f 5f       	subi	r22, 0xFF	; 255
     99c:	7f 4f       	sbci	r23, 0xFF	; 255
     99e:	80 e0       	ldi	r24, 0x00	; 0
     9a0:	b4 de       	rcall	.-664    	; 0x70a <printLedBuffer>
}
     9a2:	27 96       	adiw	r28, 0x07	; 7
     9a4:	0f b6       	in	r0, 0x3f	; 63
     9a6:	f8 94       	cli
     9a8:	de bf       	out	0x3e, r29	; 62
     9aa:	0f be       	out	0x3f, r0	; 63
     9ac:	cd bf       	out	0x3d, r28	; 61
     9ae:	df 91       	pop	r29
     9b0:	cf 91       	pop	r28
     9b2:	08 95       	ret

000009b4 <mf_autopoffDo>:

//---------------------------------------------//


void mf_autopoffDo(void)
{
     9b4:	cf 93       	push	r28
     9b6:	df 93       	push	r29
     9b8:	cd b7       	in	r28, 0x3d	; 61
     9ba:	de b7       	in	r29, 0x3e	; 62
     9bc:	27 97       	sbiw	r28, 0x07	; 7
     9be:	0f b6       	in	r0, 0x3f	; 63
     9c0:	f8 94       	cli
     9c2:	de bf       	out	0x3e, r29	; 62
     9c4:	0f be       	out	0x3f, r0	; 63
     9c6:	cd bf       	out	0x3d, r28	; 61
	char str[] = {'O','F','F',' ',' ',' ',0};
     9c8:	87 e0       	ldi	r24, 0x07	; 7
     9ca:	e1 e8       	ldi	r30, 0x81	; 129
     9cc:	f0 e0       	ldi	r31, 0x00	; 0
     9ce:	de 01       	movw	r26, r28
     9d0:	11 96       	adiw	r26, 0x01	; 1
     9d2:	01 90       	ld	r0, Z+
     9d4:	0d 92       	st	X+, r0
     9d6:	8a 95       	dec	r24
     9d8:	e1 f7       	brne	.-8      	; 0x9d2 <mf_autopoffDo+0x1e>
		
		
	if (button_state & (BD_UP | BR_UP))
     9da:	80 91 c2 00 	lds	r24, 0x00C2
     9de:	90 91 c3 00 	lds	r25, 0x00C3
     9e2:	9c 01       	movw	r18, r24
     9e4:	22 70       	andi	r18, 0x02	; 2
     9e6:	34 70       	andi	r19, 0x04	; 4
     9e8:	23 2b       	or	r18, r19
     9ea:	49 f0       	breq	.+18     	; 0x9fe <mf_autopoffDo+0x4a>
	{
		if (power_off_timeout < MAX_POWEROFF_TIMEOUT)
     9ec:	80 91 64 00 	lds	r24, 0x0064
     9f0:	8f 35       	cpi	r24, 0x5F	; 95
     9f2:	18 f4       	brcc	.+6      	; 0x9fa <mf_autopoffDo+0x46>
			power_off_timeout += 5;
     9f4:	8b 5f       	subi	r24, 0xFB	; 251
     9f6:	80 93 64 00 	sts	0x0064, r24
		restartMenuTimer();
     9fa:	24 df       	rcall	.-440    	; 0x844 <restartMenuTimer>
     9fc:	0c c0       	rjmp	.+24     	; 0xa16 <mf_autopoffDo+0x62>
	}
	else if (button_state & (BD_DOWN | BR_DOWN))
     9fe:	84 70       	andi	r24, 0x04	; 4
     a00:	98 70       	andi	r25, 0x08	; 8
     a02:	89 2b       	or	r24, r25
     a04:	41 f0       	breq	.+16     	; 0xa16 <mf_autopoffDo+0x62>
	{
		if (power_off_timeout > MIN_POWEROFF_TIMEOUT)
     a06:	80 91 64 00 	lds	r24, 0x0064
     a0a:	86 30       	cpi	r24, 0x06	; 6
     a0c:	18 f0       	brcs	.+6      	; 0xa14 <mf_autopoffDo+0x60>
			power_off_timeout -= 5;
     a0e:	85 50       	subi	r24, 0x05	; 5
     a10:	80 93 64 00 	sts	0x0064, r24
		restartMenuTimer();
     a14:	17 df       	rcall	.-466    	; 0x844 <restartMenuTimer>
	}	
		
	if (userTimer.FA_GE)
     a16:	80 91 f1 00 	lds	r24, 0x00F1
     a1a:	84 ff       	sbrs	r24, 4
     a1c:	10 c0       	rjmp	.+32     	; 0xa3e <mf_autopoffDo+0x8a>
	{
		if (power_off_timeout != MAX_POWEROFF_TIMEOUT)
     a1e:	80 91 64 00 	lds	r24, 0x0064
     a22:	8f 35       	cpi	r24, 0x5F	; 95
     a24:	41 f0       	breq	.+16     	; 0xa36 <mf_autopoffDo+0x82>
			u16toa_align_right(power_off_timeout,str + 4,0x80 | 2,' ');	
     a26:	20 e2       	ldi	r18, 0x20	; 32
     a28:	42 e8       	ldi	r20, 0x82	; 130
     a2a:	be 01       	movw	r22, r28
     a2c:	6b 5f       	subi	r22, 0xFB	; 251
     a2e:	7f 4f       	sbci	r23, 0xFF	; 255
     a30:	90 e0       	ldi	r25, 0x00	; 0
     a32:	85 d2       	rcall	.+1290   	; 0xf3e <u16toa_align_right>
     a34:	04 c0       	rjmp	.+8      	; 0xa3e <mf_autopoffDo+0x8a>
		else 
		{
			str[4] = 'N';
     a36:	8e e4       	ldi	r24, 0x4E	; 78
     a38:	8d 83       	std	Y+5, r24	; 0x05
			str[5] = 'O';
     a3a:	8f e4       	ldi	r24, 0x4F	; 79
     a3c:	8e 83       	std	Y+6, r24	; 0x06
		}			
	}		
		
	printLedBuffer(0,str);
     a3e:	be 01       	movw	r22, r28
     a40:	6f 5f       	subi	r22, 0xFF	; 255
     a42:	7f 4f       	sbci	r23, 0xFF	; 255
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	61 de       	rcall	.-830    	; 0x70a <printLedBuffer>
}
     a48:	27 96       	adiw	r28, 0x07	; 7
     a4a:	0f b6       	in	r0, 0x3f	; 63
     a4c:	f8 94       	cli
     a4e:	de bf       	out	0x3e, r29	; 62
     a50:	0f be       	out	0x3f, r0	; 63
     a52:	cd bf       	out	0x3d, r28	; 61
     a54:	df 91       	pop	r29
     a56:	cf 91       	pop	r28
     a58:	08 95       	ret

00000a5a <mf_sndenDo>:

//---------------------------------------------//


void mf_sndenDo(void)
{
     a5a:	cf 93       	push	r28
     a5c:	df 93       	push	r29
     a5e:	cd b7       	in	r28, 0x3d	; 61
     a60:	de b7       	in	r29, 0x3e	; 62
     a62:	27 97       	sbiw	r28, 0x07	; 7
     a64:	0f b6       	in	r0, 0x3f	; 63
     a66:	f8 94       	cli
     a68:	de bf       	out	0x3e, r29	; 62
     a6a:	0f be       	out	0x3f, r0	; 63
     a6c:	cd bf       	out	0x3d, r28	; 61
	char str[] = {'S','N','D',' ',' ',' ',0};
     a6e:	87 e0       	ldi	r24, 0x07	; 7
     a70:	e8 e8       	ldi	r30, 0x88	; 136
     a72:	f0 e0       	ldi	r31, 0x00	; 0
     a74:	de 01       	movw	r26, r28
     a76:	11 96       	adiw	r26, 0x01	; 1
     a78:	01 90       	ld	r0, Z+
     a7a:	0d 92       	st	X+, r0
     a7c:	8a 95       	dec	r24
     a7e:	e1 f7       	brne	.-8      	; 0xa78 <mf_sndenDo+0x1e>
		
	if (button_state & (BD_UP | BD_DOWN))
     a80:	80 91 c2 00 	lds	r24, 0x00C2
     a84:	90 91 c3 00 	lds	r25, 0x00C3
     a88:	86 70       	andi	r24, 0x06	; 6
     a8a:	99 27       	eor	r25, r25
     a8c:	89 2b       	or	r24, r25
     a8e:	41 f0       	breq	.+16     	; 0xaa0 <mf_sndenDo+0x46>
	{
		sound_enable = !sound_enable;
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	90 91 c6 00 	lds	r25, 0x00C6
     a96:	91 11       	cpse	r25, r1
     a98:	80 e0       	ldi	r24, 0x00	; 0
     a9a:	80 93 c6 00 	sts	0x00C6, r24
		restartMenuTimer();
     a9e:	d2 de       	rcall	.-604    	; 0x844 <restartMenuTimer>
	}			
		
	if (userTimer.FA_GE)
     aa0:	80 91 f1 00 	lds	r24, 0x00F1
     aa4:	84 ff       	sbrs	r24, 4
     aa6:	0e c0       	rjmp	.+28     	; 0xac4 <mf_sndenDo+0x6a>
	{
		if (sound_enable)		
     aa8:	80 91 c6 00 	lds	r24, 0x00C6
     aac:	88 23       	and	r24, r24
     aae:	29 f0       	breq	.+10     	; 0xaba <mf_sndenDo+0x60>
		{
			str[4] = 'O';
     ab0:	8f e4       	ldi	r24, 0x4F	; 79
     ab2:	8d 83       	std	Y+5, r24	; 0x05
			str[5] = 'N';
     ab4:	8e e4       	ldi	r24, 0x4E	; 78
     ab6:	8e 83       	std	Y+6, r24	; 0x06
     ab8:	05 c0       	rjmp	.+10     	; 0xac4 <mf_sndenDo+0x6a>
		}
		else
		{
			str[3] = 'O';
     aba:	8f e4       	ldi	r24, 0x4F	; 79
     abc:	8c 83       	std	Y+4, r24	; 0x04
			str[4] = 'F';
     abe:	86 e4       	ldi	r24, 0x46	; 70
     ac0:	8d 83       	std	Y+5, r24	; 0x05
			str[5] = 'F';
     ac2:	8e 83       	std	Y+6, r24	; 0x06
		}			
	}
		
	printLedBuffer(0,str);
     ac4:	be 01       	movw	r22, r28
     ac6:	6f 5f       	subi	r22, 0xFF	; 255
     ac8:	7f 4f       	sbci	r23, 0xFF	; 255
     aca:	80 e0       	ldi	r24, 0x00	; 0
     acc:	1e de       	rcall	.-964    	; 0x70a <printLedBuffer>
	setComma(2);
     ace:	82 e0       	ldi	r24, 0x02	; 2
     ad0:	62 de       	rcall	.-828    	; 0x796 <setComma>
}
     ad2:	27 96       	adiw	r28, 0x07	; 7
     ad4:	0f b6       	in	r0, 0x3f	; 63
     ad6:	f8 94       	cli
     ad8:	de bf       	out	0x3e, r29	; 62
     ada:	0f be       	out	0x3f, r0	; 63
     adc:	cd bf       	out	0x3d, r28	; 61
     ade:	df 91       	pop	r29
     ae0:	cf 91       	pop	r28
     ae2:	08 95       	ret

00000ae4 <mf_leafSelect>:

// Select and exit functions, common for leaf menu items 

void mf_leafSelect(void)
{
	clearExtraLeds(LED_TEMP | LED_ROLL);
     ae4:	83 e0       	ldi	r24, 0x03	; 3
     ae6:	69 de       	rcall	.-814    	; 0x7ba <clearExtraLeds>
	userTimer.FA_GE = 1;	
     ae8:	e1 ef       	ldi	r30, 0xF1	; 241
     aea:	f0 e0       	ldi	r31, 0x00	; 0
     aec:	80 81       	ld	r24, Z
     aee:	80 61       	ori	r24, 0x10	; 16
     af0:	80 83       	st	Z, r24
     af2:	08 95       	ret

00000af4 <mf_calibSelect>:
//---------------------------------------------//

void mf_calibSelect(void)
{
	// restore cpoint1, cpoint2
	mf_leafSelect();
     af4:	f7 df       	rcall	.-18     	; 0xae4 <mf_leafSelect>
     af6:	08 95       	ret

00000af8 <mf_rollLeave>:
	printLedBuffer(0,str);
}

void mf_rollLeave(void)
{
	clearExtraLeds(LED_ROLL);
     af8:	82 e0       	ldi	r24, 0x02	; 2
     afa:	5f de       	rcall	.-834    	; 0x7ba <clearExtraLeds>
	userTimer.Enabled = 0;
     afc:	e1 ef       	ldi	r30, 0xF1	; 241
     afe:	f0 e0       	ldi	r31, 0x00	; 0
     b00:	80 81       	ld	r24, Z
     b02:	8e 7f       	andi	r24, 0xFE	; 254
     b04:	80 83       	st	Z, r24
     b06:	08 95       	ret

00000b08 <mf_setTempSelect>:
//---------------------------------------------//


void mf_setTempSelect(void)
{
	clearExtraLeds(LED_TEMP);
     b08:	81 e0       	ldi	r24, 0x01	; 1
     b0a:	57 de       	rcall	.-850    	; 0x7ba <clearExtraLeds>
	mf_leafSelectAct();		// setup and start timer
     b0c:	a4 de       	rcall	.-696    	; 0x856 <mf_leafSelectAct>
     b0e:	08 95       	ret

00000b10 <mf_realTempLeave>:
	printLedBuffer(0,str);
}

void mf_realTempLeave(void)
{
	clearExtraLeds(LED_TEMP);
     b10:	81 e0       	ldi	r24, 0x01	; 1
     b12:	53 de       	rcall	.-858    	; 0x7ba <clearExtraLeds>
     b14:	08 95       	ret

00000b16 <mf_rollDo>:
	setExtraLeds(LED_ROLL);
	mf_leafSelectAct();		// setup and start timer
}

void mf_rollDo(void)
{
     b16:	cf 93       	push	r28
     b18:	df 93       	push	r29
     b1a:	cd b7       	in	r28, 0x3d	; 61
     b1c:	de b7       	in	r29, 0x3e	; 62
     b1e:	27 97       	sbiw	r28, 0x07	; 7
     b20:	0f b6       	in	r0, 0x3f	; 63
     b22:	f8 94       	cli
     b24:	de bf       	out	0x3e, r29	; 62
     b26:	0f be       	out	0x3f, r0	; 63
     b28:	cd bf       	out	0x3d, r28	; 61
	char str[] = {' ',' ',' ',' ',' ',' ',0};
     b2a:	87 e0       	ldi	r24, 0x07	; 7
     b2c:	ef e8       	ldi	r30, 0x8F	; 143
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	de 01       	movw	r26, r28
     b32:	11 96       	adiw	r26, 0x01	; 1
     b34:	01 90       	ld	r0, Z+
     b36:	0d 92       	st	X+, r0
     b38:	8a 95       	dec	r24
     b3a:	e1 f7       	brne	.-8      	; 0xb34 <mf_rollDo+0x1e>
		
	if (button_state & (BD_UP | BR_UP))
     b3c:	80 91 c2 00 	lds	r24, 0x00C2
     b40:	90 91 c3 00 	lds	r25, 0x00C3
     b44:	9c 01       	movw	r18, r24
     b46:	22 70       	andi	r18, 0x02	; 2
     b48:	34 70       	andi	r19, 0x04	; 4
     b4a:	23 2b       	or	r18, r19
     b4c:	41 f0       	breq	.+16     	; 0xb5e <mf_rollDo+0x48>
	{
		if (rollCycleSet < MAX_ROLL_CYCLES)
     b4e:	80 91 65 00 	lds	r24, 0x0065
     b52:	83 36       	cpi	r24, 0x63	; 99
     b54:	78 f4       	brcc	.+30     	; 0xb74 <mf_rollDo+0x5e>
		rollCycleSet += 1;
     b56:	8f 5f       	subi	r24, 0xFF	; 255
     b58:	80 93 65 00 	sts	0x0065, r24
     b5c:	0b c0       	rjmp	.+22     	; 0xb74 <mf_rollDo+0x5e>
	}
	else if (button_state & (BD_DOWN | BR_DOWN))
     b5e:	84 70       	andi	r24, 0x04	; 4
     b60:	98 70       	andi	r25, 0x08	; 8
     b62:	89 2b       	or	r24, r25
     b64:	39 f0       	breq	.+14     	; 0xb74 <mf_rollDo+0x5e>
	{
		if (rollCycleSet > MIN_ROLL_CYCLES)
     b66:	80 91 65 00 	lds	r24, 0x0065
     b6a:	82 30       	cpi	r24, 0x02	; 2
     b6c:	18 f0       	brcs	.+6      	; 0xb74 <mf_rollDo+0x5e>
		rollCycleSet -= 1;
     b6e:	81 50       	subi	r24, 0x01	; 1
     b70:	80 93 65 00 	sts	0x0065, r24
	}	
		
	u16toa_align_right(rollCycleSet,str + 4,0x80 | 2,' ');
     b74:	20 e2       	ldi	r18, 0x20	; 32
     b76:	42 e8       	ldi	r20, 0x82	; 130
     b78:	be 01       	movw	r22, r28
     b7a:	6b 5f       	subi	r22, 0xFB	; 251
     b7c:	7f 4f       	sbci	r23, 0xFF	; 255
     b7e:	80 91 65 00 	lds	r24, 0x0065
     b82:	90 e0       	ldi	r25, 0x00	; 0
     b84:	dc d1       	rcall	.+952    	; 0xf3e <u16toa_align_right>
	
	if ((!(rollState & ROLL_CYCLE)) || (userTimer.FA_GE))
     b86:	80 91 ce 00 	lds	r24, 0x00CE
     b8a:	82 ff       	sbrs	r24, 2
     b8c:	04 c0       	rjmp	.+8      	; 0xb96 <mf_rollDo+0x80>
     b8e:	80 91 f1 00 	lds	r24, 0x00F1
     b92:	84 ff       	sbrs	r24, 4
     b94:	09 c0       	rjmp	.+18     	; 0xba8 <mf_rollDo+0x92>
	{
		u16toa_align_right(activeRollCycle,str + 1,0x80 | 2,' ');
     b96:	20 e2       	ldi	r18, 0x20	; 32
     b98:	42 e8       	ldi	r20, 0x82	; 130
     b9a:	be 01       	movw	r22, r28
     b9c:	6e 5f       	subi	r22, 0xFE	; 254
     b9e:	7f 4f       	sbci	r23, 0xFF	; 255
     ba0:	80 91 fc 00 	lds	r24, 0x00FC
     ba4:	90 e0       	ldi	r25, 0x00	; 0
     ba6:	cb d1       	rcall	.+918    	; 0xf3e <u16toa_align_right>
	}
	
	str[0] = 0;
     ba8:	19 82       	std	Y+1, r1	; 0x01
	if (isTopPointValid())
     baa:	13 d3       	rcall	.+1574   	; 0x11d2 <isTopPointValid>
     bac:	88 23       	and	r24, r24
     bae:	19 f0       	breq	.+6      	; 0xbb6 <mf_rollDo+0xa0>
		str[0] |= SEGA;
     bb0:	89 81       	ldd	r24, Y+1	; 0x01
     bb2:	81 60       	ori	r24, 0x01	; 1
     bb4:	89 83       	std	Y+1, r24	; 0x01
	if (isBottomPointValid())
     bb6:	1b d3       	rcall	.+1590   	; 0x11ee <isBottomPointValid>
     bb8:	88 23       	and	r24, r24
     bba:	19 f0       	breq	.+6      	; 0xbc2 <mf_rollDo+0xac>
		str[0] |= SEGD;
     bbc:	89 81       	ldd	r24, Y+1	; 0x01
     bbe:	88 60       	ori	r24, 0x08	; 8
     bc0:	89 83       	std	Y+1, r24	; 0x01
	if (str[0] == 0)
     bc2:	89 81       	ldd	r24, Y+1	; 0x01
     bc4:	81 11       	cpse	r24, r1
     bc6:	02 c0       	rjmp	.+4      	; 0xbcc <mf_rollDo+0xb6>
		str[0] = ' ';
     bc8:	80 e2       	ldi	r24, 0x20	; 32
     bca:	89 83       	std	Y+1, r24	; 0x01
		
	printLedBuffer(0,str);
     bcc:	be 01       	movw	r22, r28
     bce:	6f 5f       	subi	r22, 0xFF	; 255
     bd0:	7f 4f       	sbci	r23, 0xFF	; 255
     bd2:	80 e0       	ldi	r24, 0x00	; 0
     bd4:	9a dd       	rcall	.-1228   	; 0x70a <printLedBuffer>
}
     bd6:	27 96       	adiw	r28, 0x07	; 7
     bd8:	0f b6       	in	r0, 0x3f	; 63
     bda:	f8 94       	cli
     bdc:	de bf       	out	0x3e, r29	; 62
     bde:	0f be       	out	0x3f, r0	; 63
     be0:	cd bf       	out	0x3d, r28	; 61
     be2:	df 91       	pop	r29
     be4:	cf 91       	pop	r28
     be6:	08 95       	ret

00000be8 <mf_rollSelect>:
//---------------------------------------------//
//---------------------------------------------//

void mf_rollSelect(void)
{
	setExtraLeds(LED_ROLL);
     be8:	82 e0       	ldi	r24, 0x02	; 2
     bea:	e1 dd       	rcall	.-1086   	; 0x7ae <setExtraLeds>
	mf_leafSelectAct();		// setup and start timer
     bec:	34 de       	rcall	.-920    	; 0x856 <mf_leafSelectAct>
     bee:	08 95       	ret

00000bf0 <mf_setTempDo>:
	clearExtraLeds(LED_TEMP);
	mf_leafSelectAct();		// setup and start timer
}

void mf_setTempDo(void)
{
     bf0:	cf 93       	push	r28
     bf2:	df 93       	push	r29
     bf4:	cd b7       	in	r28, 0x3d	; 61
     bf6:	de b7       	in	r29, 0x3e	; 62
     bf8:	27 97       	sbiw	r28, 0x07	; 7
     bfa:	0f b6       	in	r0, 0x3f	; 63
     bfc:	f8 94       	cli
     bfe:	de bf       	out	0x3e, r29	; 62
     c00:	0f be       	out	0x3f, r0	; 63
     c02:	cd bf       	out	0x3d, r28	; 61
	char str[] = {' ',' ',' ',' ',0xB0,'C',0};
     c04:	87 e0       	ldi	r24, 0x07	; 7
     c06:	e6 e9       	ldi	r30, 0x96	; 150
     c08:	f0 e0       	ldi	r31, 0x00	; 0
     c0a:	de 01       	movw	r26, r28
     c0c:	11 96       	adiw	r26, 0x01	; 1
     c0e:	01 90       	ld	r0, Z+
     c10:	0d 92       	st	X+, r0
     c12:	8a 95       	dec	r24
     c14:	e1 f7       	brne	.-8      	; 0xc0e <mf_setTempDo+0x1e>

	
	if (button_state & (BD_UP | BR_UP))
     c16:	80 91 c2 00 	lds	r24, 0x00C2
     c1a:	90 91 c3 00 	lds	r25, 0x00C3
     c1e:	9c 01       	movw	r18, r24
     c20:	22 70       	andi	r18, 0x02	; 2
     c22:	34 70       	andi	r19, 0x04	; 4
     c24:	23 2b       	or	r18, r19
     c26:	71 f0       	breq	.+28     	; 0xc44 <mf_setTempDo+0x54>
	{
		if (setup_temp_value < MAX_SET_TEMP)
     c28:	80 91 66 00 	lds	r24, 0x0066
     c2c:	90 91 67 00 	lds	r25, 0x0067
     c30:	82 3d       	cpi	r24, 0xD2	; 210
     c32:	91 05       	cpc	r25, r1
     c34:	28 f4       	brcc	.+10     	; 0xc40 <mf_setTempDo+0x50>
			setup_temp_value += 5;
     c36:	05 96       	adiw	r24, 0x05	; 5
     c38:	90 93 67 00 	sts	0x0067, r25
     c3c:	80 93 66 00 	sts	0x0066, r24
		restartMenuTimer();
     c40:	01 de       	rcall	.-1022   	; 0x844 <restartMenuTimer>
     c42:	11 c0       	rjmp	.+34     	; 0xc66 <mf_setTempDo+0x76>
	}
	else if (button_state & (BD_DOWN | BR_DOWN))
     c44:	84 70       	andi	r24, 0x04	; 4
     c46:	98 70       	andi	r25, 0x08	; 8
     c48:	89 2b       	or	r24, r25
     c4a:	69 f0       	breq	.+26     	; 0xc66 <mf_setTempDo+0x76>
	{
		if (setup_temp_value > MIN_SET_TEMP)
     c4c:	80 91 66 00 	lds	r24, 0x0066
     c50:	90 91 67 00 	lds	r25, 0x0067
     c54:	8f 31       	cpi	r24, 0x1F	; 31
     c56:	91 05       	cpc	r25, r1
     c58:	28 f0       	brcs	.+10     	; 0xc64 <mf_setTempDo+0x74>
			setup_temp_value -= 5;
     c5a:	05 97       	sbiw	r24, 0x05	; 5
     c5c:	90 93 67 00 	sts	0x0067, r25
     c60:	80 93 66 00 	sts	0x0066, r24
		restartMenuTimer();
     c64:	ef dd       	rcall	.-1058   	; 0x844 <restartMenuTimer>
	}					
		
	// Output ADC result to LED
	u16toa_align_right(setup_temp_value,str,0x80 | 4,' ');
     c66:	20 e2       	ldi	r18, 0x20	; 32
     c68:	44 e8       	ldi	r20, 0x84	; 132
     c6a:	be 01       	movw	r22, r28
     c6c:	6f 5f       	subi	r22, 0xFF	; 255
     c6e:	7f 4f       	sbci	r23, 0xFF	; 255
     c70:	80 91 66 00 	lds	r24, 0x0066
     c74:	90 91 67 00 	lds	r25, 0x0067
     c78:	62 d1       	rcall	.+708    	; 0xf3e <u16toa_align_right>
	printLedBuffer(0,str);
     c7a:	be 01       	movw	r22, r28
     c7c:	6f 5f       	subi	r22, 0xFF	; 255
     c7e:	7f 4f       	sbci	r23, 0xFF	; 255
     c80:	80 e0       	ldi	r24, 0x00	; 0
     c82:	43 dd       	rcall	.-1402   	; 0x70a <printLedBuffer>
	
	if (userTimer.FA_GE)
     c84:	80 91 f1 00 	lds	r24, 0x00F1
     c88:	84 ff       	sbrs	r24, 4
     c8a:	03 c0       	rjmp	.+6      	; 0xc92 <mf_setTempDo+0xa2>
		setExtraLeds(LED_TEMP);
     c8c:	81 e0       	ldi	r24, 0x01	; 1
     c8e:	8f dd       	rcall	.-1250   	; 0x7ae <setExtraLeds>
     c90:	02 c0       	rjmp	.+4      	; 0xc96 <mf_setTempDo+0xa6>
	else
		clearExtraLeds(LED_TEMP);
     c92:	81 e0       	ldi	r24, 0x01	; 1
     c94:	92 dd       	rcall	.-1244   	; 0x7ba <clearExtraLeds>
}
     c96:	27 96       	adiw	r28, 0x07	; 7
     c98:	0f b6       	in	r0, 0x3f	; 63
     c9a:	f8 94       	cli
     c9c:	de bf       	out	0x3e, r29	; 62
     c9e:	0f be       	out	0x3f, r0	; 63
     ca0:	cd bf       	out	0x3d, r28	; 61
     ca2:	df 91       	pop	r29
     ca4:	cf 91       	pop	r28
     ca6:	08 95       	ret

00000ca8 <mf_realTempSelect>:
//=================================================================//


void mf_realTempSelect(void)
{
	setExtraLeds(LED_TEMP);
     ca8:	81 e0       	ldi	r24, 0x01	; 1
     caa:	81 dd       	rcall	.-1278   	; 0x7ae <setExtraLeds>
     cac:	08 95       	ret

00000cae <mf_realTempDo>:
}

void mf_realTempDo(void)
{
     cae:	cf 93       	push	r28
     cb0:	df 93       	push	r29
     cb2:	cd b7       	in	r28, 0x3d	; 61
     cb4:	de b7       	in	r29, 0x3e	; 62
     cb6:	27 97       	sbiw	r28, 0x07	; 7
     cb8:	0f b6       	in	r0, 0x3f	; 63
     cba:	f8 94       	cli
     cbc:	de bf       	out	0x3e, r29	; 62
     cbe:	0f be       	out	0x3f, r0	; 63
     cc0:	cd bf       	out	0x3d, r28	; 61
	char str[] = {' ',' ',' ',' ',0xB0,'C',0};
     cc2:	87 e0       	ldi	r24, 0x07	; 7
     cc4:	e6 e9       	ldi	r30, 0x96	; 150
     cc6:	f0 e0       	ldi	r31, 0x00	; 0
     cc8:	de 01       	movw	r26, r28
     cca:	11 96       	adiw	r26, 0x01	; 1
     ccc:	01 90       	ld	r0, Z+
     cce:	0d 92       	st	X+, r0
     cd0:	8a 95       	dec	r24
     cd2:	e1 f7       	brne	.-8      	; 0xccc <mf_realTempDo+0x1e>
	// Output ADC result to LED
	uint16_t temp_celsius = conv_ADC_to_Celsius(adc_filtered_value);
     cd4:	80 91 d7 00 	lds	r24, 0x00D7
     cd8:	90 91 d8 00 	lds	r25, 0x00D8
     cdc:	c7 da       	rcall	.-2674   	; 0x26c <conv_ADC_to_Celsius>
	u16toa_align_right(temp_celsius,str,0x80 | 4,' ');
     cde:	20 e2       	ldi	r18, 0x20	; 32
     ce0:	44 e8       	ldi	r20, 0x84	; 132
     ce2:	be 01       	movw	r22, r28
     ce4:	6f 5f       	subi	r22, 0xFF	; 255
     ce6:	7f 4f       	sbci	r23, 0xFF	; 255
     ce8:	2a d1       	rcall	.+596    	; 0xf3e <u16toa_align_right>
	printLedBuffer(0,str);
     cea:	be 01       	movw	r22, r28
     cec:	6f 5f       	subi	r22, 0xFF	; 255
     cee:	7f 4f       	sbci	r23, 0xFF	; 255
     cf0:	80 e0       	ldi	r24, 0x00	; 0
     cf2:	0b dd       	rcall	.-1514   	; 0x70a <printLedBuffer>
}
     cf4:	27 96       	adiw	r28, 0x07	; 7
     cf6:	0f b6       	in	r0, 0x3f	; 63
     cf8:	f8 94       	cli
     cfa:	de bf       	out	0x3e, r29	; 62
     cfc:	0f be       	out	0x3f, r0	; 63
     cfe:	cd bf       	out	0x3d, r28	; 61
     d00:	df 91       	pop	r29
     d02:	cf 91       	pop	r28
     d04:	08 95       	ret

00000d06 <InitMenu>:
//	Menu initialization
//	Call this function at start of your program before processMenu()
//-----------------------------------------------------------------//
void InitMenu(void)
{
	selectedMenuItemID = mi_REALTEMP;
     d06:	81 e0       	ldi	r24, 0x01	; 1
     d08:	80 93 ec 00 	sts	0x00EC, r24
     d0c:	20 e0       	ldi	r18, 0x00	; 0
     d0e:	30 e0       	ldi	r19, 0x00	; 0
static void getMenuFunctionRecord(uint8_t menuItemID, MenuFunctionRecord* menuRecord )
{
	uint8_t i;
	for (i = 0; i < sizeof(menuFunctionSet)/sizeof(MenuFunctionRecord); i++  )
	{
		readMenuRecord(&menuFunctionSet[i], menuRecord);
     d10:	c9 01       	movw	r24, r18
     d12:	88 0f       	add	r24, r24
     d14:	99 1f       	adc	r25, r25
     d16:	88 0f       	add	r24, r24
     d18:	99 1f       	adc	r25, r25
     d1a:	88 0f       	add	r24, r24
     d1c:	99 1f       	adc	r25, r25
     d1e:	82 1b       	sub	r24, r18
     d20:	93 0b       	sbc	r25, r19
     d22:	88 5b       	subi	r24, 0xB8	; 184
     d24:	9e 4f       	sbci	r25, 0xFE	; 254
//		fRecPtr		- address of the function record in the FLASH
//		resPtr		- address of the record to fill in the SRAM
//-----------------------------------------------------------------//
static inline void readMenuRecord(const MenuFunctionRecord* fRecPtr, MenuFunctionRecord* resPtr )
{
	resPtr->Item = pgm_read_byte(&fRecPtr->Item);
     d26:	fc 01       	movw	r30, r24
     d28:	64 91       	lpm	r22, Z
	resPtr->SelectFunction = (FuncPtr)pgm_read_word(&fRecPtr->SelectFunction);
     d2a:	31 96       	adiw	r30, 0x01	; 1
     d2c:	45 91       	lpm	r20, Z+
     d2e:	54 91       	lpm	r21, Z
     d30:	b4 2f       	mov	r27, r20
     d32:	a5 2f       	mov	r26, r21
	resPtr->RunFunction = (FuncPtr)pgm_read_word(&fRecPtr->RunFunction);
     d34:	fc 01       	movw	r30, r24
     d36:	33 96       	adiw	r30, 0x03	; 3
     d38:	45 91       	lpm	r20, Z+
     d3a:	54 91       	lpm	r21, Z
     d3c:	74 2f       	mov	r23, r20
     d3e:	45 2f       	mov	r20, r21
	resPtr->LeaveFunction = (FuncPtr)pgm_read_word(&fRecPtr->LeaveFunction);
     d40:	05 96       	adiw	r24, 0x05	; 5
     d42:	fc 01       	movw	r30, r24
     d44:	85 91       	lpm	r24, Z+
     d46:	94 91       	lpm	r25, Z
     d48:	58 2f       	mov	r21, r24
{
	uint8_t i;
	for (i = 0; i < sizeof(menuFunctionSet)/sizeof(MenuFunctionRecord); i++  )
	{
		readMenuRecord(&menuFunctionSet[i], menuRecord);
		if (menuRecord->Item == menuItemID)
     d4a:	61 30       	cpi	r22, 0x01	; 1
     d4c:	79 f4       	brne	.+30     	; 0xd6c <InitMenu+0x66>
     d4e:	60 93 f5 00 	sts	0x00F5, r22
     d52:	e6 ef       	ldi	r30, 0xF6	; 246
     d54:	f0 e0       	ldi	r31, 0x00	; 0
     d56:	b0 83       	st	Z, r27
     d58:	a1 83       	std	Z+1, r26	; 0x01
     d5a:	e8 ef       	ldi	r30, 0xF8	; 248
     d5c:	f0 e0       	ldi	r31, 0x00	; 0
     d5e:	70 83       	st	Z, r23
     d60:	41 83       	std	Z+1, r20	; 0x01
     d62:	ea ef       	ldi	r30, 0xFA	; 250
     d64:	f0 e0       	ldi	r31, 0x00	; 0
     d66:	50 83       	st	Z, r21
     d68:	91 83       	std	Z+1, r25	; 0x01
     d6a:	14 c0       	rjmp	.+40     	; 0xd94 <InitMenu+0x8e>
     d6c:	2f 5f       	subi	r18, 0xFF	; 255
     d6e:	3f 4f       	sbci	r19, 0xFF	; 255
//	Output:
//-----------------------------------------------------------------//
static void getMenuFunctionRecord(uint8_t menuItemID, MenuFunctionRecord* menuRecord )
{
	uint8_t i;
	for (i = 0; i < sizeof(menuFunctionSet)/sizeof(MenuFunctionRecord); i++  )
     d70:	2d 30       	cpi	r18, 0x0D	; 13
     d72:	31 05       	cpc	r19, r1
     d74:	09 f0       	breq	.+2      	; 0xd78 <InitMenu+0x72>
     d76:	cc cf       	rjmp	.-104    	; 0xd10 <InitMenu+0xa>
     d78:	60 93 f5 00 	sts	0x00F5, r22
     d7c:	e6 ef       	ldi	r30, 0xF6	; 246
     d7e:	f0 e0       	ldi	r31, 0x00	; 0
     d80:	b0 83       	st	Z, r27
     d82:	a1 83       	std	Z+1, r26	; 0x01
     d84:	e8 ef       	ldi	r30, 0xF8	; 248
     d86:	f0 e0       	ldi	r31, 0x00	; 0
     d88:	70 83       	st	Z, r23
     d8a:	41 83       	std	Z+1, r20	; 0x01
     d8c:	ea ef       	ldi	r30, 0xFA	; 250
     d8e:	f0 e0       	ldi	r31, 0x00	; 0
     d90:	50 83       	st	Z, r21
     d92:	91 83       	std	Z+1, r25	; 0x01
//-----------------------------------------------------------------//
void InitMenu(void)
{
	selectedMenuItemID = mi_REALTEMP;
	getMenuFunctionRecord(selectedMenuItemID, &selectedMenuFunctionRecord);
	processItemFunction(selectedMenuFunctionRecord.SelectFunction);
     d94:	e0 91 f6 00 	lds	r30, 0x00F6
     d98:	f0 91 f7 00 	lds	r31, 0x00F7
//	Arguments:
//		funcAddr - address of the function to run.
//-----------------------------------------------------------------//
static inline void processItemFunction(FuncPtr funcAddr)
{
	if (funcAddr != 0)
     d9c:	30 97       	sbiw	r30, 0x00	; 0
     d9e:	09 f0       	breq	.+2      	; 0xda2 <InitMenu+0x9c>
		((FuncPtr)funcAddr)();
     da0:	09 95       	icall
	selectedMenuItemID = mi_REALTEMP;
	getMenuFunctionRecord(selectedMenuItemID, &selectedMenuFunctionRecord);
	processItemFunction(selectedMenuFunctionRecord.SelectFunction);
	
	// Initialize menu state timer
	menuTimer.Timer = 0;
     da2:	10 92 ee 00 	sts	0x00EE, r1
	menuTimer.Enabled = 0;
     da6:	ed ee       	ldi	r30, 0xED	; 237
     da8:	f0 e0       	ldi	r31, 0x00	; 0
     daa:	80 81       	ld	r24, Z
	menuTimer.RunOnce = 1;
     dac:	8e 7f       	andi	r24, 0xFE	; 254
     dae:	82 60       	ori	r24, 0x02	; 2
     db0:	80 83       	st	Z, r24
	
	// Initialize user timer
	userTimer.Enabled = 0;
     db2:	e1 ef       	ldi	r30, 0xF1	; 241
     db4:	f0 e0       	ldi	r31, 0x00	; 0
     db6:	80 81       	ld	r24, Z
	userTimer.RunOnce = 0;
     db8:	8e 7f       	andi	r24, 0xFE	; 254
     dba:	8d 7f       	andi	r24, 0xFD	; 253
     dbc:	80 83       	st	Z, r24
     dbe:	08 95       	ret

00000dc0 <processMenu>:
//	Main menu control, -  state function calls, jumps 
//	between menu states and indication
//	Call this function from main() with a fixed time interval.
//-----------------------------------------------------------------//
void processMenu(void)
{
     dc0:	ff 92       	push	r15
     dc2:	0f 93       	push	r16
     dc4:	1f 93       	push	r17
     dc6:	cf 93       	push	r28
     dc8:	df 93       	push	r29
	NextItem_t nextItem;
	uint16_t jumpCondition;
	
	processSoftTimer8b(&menuTimer);	
     dca:	8d ee       	ldi	r24, 0xED	; 237
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	04 d3       	rcall	.+1544   	; 0x13d8 <processSoftTimer8b>
	
	// Compose jump condition
	jumpCondition = button_state;		
     dd0:	40 91 c2 00 	lds	r20, 0x00C2
     dd4:	50 91 c3 00 	lds	r21, 0x00C3
	if (menuTimer.FTop)
     dd8:	80 91 ed 00 	lds	r24, 0x00ED
     ddc:	85 fd       	sbrc	r24, 5
		jumpCondition |= TMR_EXP;
     dde:	50 68       	ori	r21, 0x80	; 128
	
	// Get next menu item according to current state and jump conditions
	nextItem = getNextMenuItem(selectedMenuItemID, jumpCondition);
     de0:	b0 91 ec 00 	lds	r27, 0x00EC
     de4:	80 e0       	ldi	r24, 0x00	; 0
     de6:	90 e0       	ldi	r25, 0x00	; 0
	MenuJumpRecord	jRecord;
	uint8_t i;
	
	for (i = 0; i < sizeof(menuJumpSet)/sizeof(MenuJumpRecord); i++  )
	{
		readJumpRecord(&menuJumpSet[i], &jRecord);		// read full jump record
     de8:	9c 01       	movw	r18, r24
     dea:	22 0f       	add	r18, r18
     dec:	33 1f       	adc	r19, r19
     dee:	22 0f       	add	r18, r18
     df0:	33 1f       	adc	r19, r19
     df2:	28 0f       	add	r18, r24
     df4:	39 1f       	adc	r19, r25
     df6:	2d 55       	subi	r18, 0x5D	; 93
     df8:	3e 4f       	sbci	r19, 0xFE	; 254
//		jRecPtr		- address of the jump record in the FLASH
//		resPtr		- address of the record to fill in the SRAM
//-----------------------------------------------------------------//
static inline void readJumpRecord(const MenuJumpRecord* jRecPtr, MenuJumpRecord* resPtr )
{
	resPtr->Item = pgm_read_byte(&jRecPtr->Item);
     dfa:	f9 01       	movw	r30, r18
     dfc:	a4 91       	lpm	r26, Z
	resPtr->JumpCondition = pgm_read_word(&jRecPtr->JumpCondition);
     dfe:	31 96       	adiw	r30, 0x01	; 1
     e00:	65 91       	lpm	r22, Z+
     e02:	74 91       	lpm	r23, Z
	resPtr->NextItem= pgm_read_byte(&jRecPtr->NextItem);
     e04:	f9 01       	movw	r30, r18
     e06:	33 96       	adiw	r30, 0x03	; 3
     e08:	c4 91       	lpm	r28, Z
	resPtr->Flags= pgm_read_byte(&jRecPtr->Flags);
     e0a:	f9 01       	movw	r30, r18
     e0c:	34 96       	adiw	r30, 0x04	; 4
     e0e:	24 91       	lpm	r18, Z
	uint8_t i;
	
	for (i = 0; i < sizeof(menuJumpSet)/sizeof(MenuJumpRecord); i++  )
	{
		readJumpRecord(&menuJumpSet[i], &jRecord);		// read full jump record
		if (jRecord.Item == selectedItemId)				// If ID match,
     e10:	ba 13       	cpse	r27, r26
     e12:	15 c0       	rjmp	.+42     	; 0xe3e <processMenu+0x7e>
		{
			if ((jRecord.JumpCondition & jmpCond) != 0)		// if any of jump conditions match too,
     e14:	64 23       	and	r22, r20
     e16:	75 23       	and	r23, r21
     e18:	67 2b       	or	r22, r23
     e1a:	89 f0       	breq	.+34     	; 0xe3e <processMenu+0x7e>
			{
				nextItem.ItemID = jRecord.NextItem;			// switch to next menu item
				nextItem.ItemTimeout = jRecord.Flags & TIMEOUT_MASK;
     e1c:	d2 2f       	mov	r29, r18
     e1e:	df 73       	andi	r29, 0x3F	; 63
				nextItem.ShiftRight = (jRecord.Flags & SHIFT_RIGHT) ? 1 : 0;
     e20:	26 fb       	bst	r18, 6
     e22:	00 27       	eor	r16, r16
     e24:	00 f9       	bld	r16, 0
				nextItem.ShiftLeft = (jRecord.Flags & SHIFT_LEFT) ? 1 : 0;
     e26:	f2 2e       	mov	r15, r18
     e28:	ff 1c       	adc	r15, r15
     e2a:	ff 24       	eor	r15, r15
     e2c:	ff 1c       	adc	r15, r15
     e2e:	10 e0       	ldi	r17, 0x00	; 0
     e30:	f0 fa       	bst	r15, 0
     e32:	10 f9       	bld	r17, 0
     e34:	00 fb       	bst	r16, 0
     e36:	11 f9       	bld	r17, 1
	
	// Get next menu item according to current state and jump conditions
	nextItem = getNextMenuItem(selectedMenuItemID, jumpCondition);
	
	// If next item differs from current
	if (nextItem.ItemID != selectedMenuItemID)
     e38:	bc 13       	cpse	r27, r28
     e3a:	06 c0       	rjmp	.+12     	; 0xe48 <processMenu+0x88>
     e3c:	70 c0       	rjmp	.+224    	; 0xf1e <processMenu+0x15e>
     e3e:	01 96       	adiw	r24, 0x01	; 1
	NextItem_t nextItem;
	nextItem.ItemID = selectedItemId;
	MenuJumpRecord	jRecord;
	uint8_t i;
	
	for (i = 0; i < sizeof(menuJumpSet)/sizeof(MenuJumpRecord); i++  )
     e40:	8d 31       	cpi	r24, 0x1D	; 29
     e42:	91 05       	cpc	r25, r1
     e44:	89 f6       	brne	.-94     	; 0xde8 <processMenu+0x28>
     e46:	6b c0       	rjmp	.+214    	; 0xf1e <processMenu+0x15e>
	
	// If next item differs from current
	if (nextItem.ItemID != selectedMenuItemID)
	{		
		// Call exit function for current item
		processItemFunction(selectedMenuFunctionRecord.LeaveFunction);
     e48:	e0 91 fa 00 	lds	r30, 0x00FA
     e4c:	f0 91 fb 00 	lds	r31, 0x00FB
//	Arguments:
//		funcAddr - address of the function to run.
//-----------------------------------------------------------------//
static inline void processItemFunction(FuncPtr funcAddr)
{
	if (funcAddr != 0)
     e50:	30 97       	sbiw	r30, 0x00	; 0
     e52:	09 f0       	breq	.+2      	; 0xe56 <processMenu+0x96>
		((FuncPtr)funcAddr)();
     e54:	09 95       	icall
		// Call exit function for current item
		processItemFunction(selectedMenuFunctionRecord.LeaveFunction);
		
		// If shifting is specified, start it before calling any 
		//	new menu item functions 
		if (nextItem.ShiftRight)
     e56:	f0 fa       	bst	r15, 0
     e58:	10 f9       	bld	r17, 0
     e5a:	00 fb       	bst	r16, 0
     e5c:	11 f9       	bld	r17, 1
     e5e:	11 ff       	sbrs	r17, 1
     e60:	02 c0       	rjmp	.+4      	; 0xe66 <processMenu+0xa6>
			startShiftingWindowRight();
     e62:	22 dc       	rcall	.-1980   	; 0x6a8 <startShiftingWindowRight>
     e64:	02 c0       	rjmp	.+4      	; 0xe6a <processMenu+0xaa>
		else if (nextItem.ShiftLeft)
     e66:	10 fd       	sbrc	r17, 0
			startShiftingWindowLeft();
     e68:	11 dc       	rcall	.-2014   	; 0x68c <startShiftingWindowLeft>
		
		// Select new item
		selectedMenuItemID = nextItem.ItemID;
     e6a:	c0 93 ec 00 	sts	0x00EC, r28
     e6e:	20 e0       	ldi	r18, 0x00	; 0
     e70:	30 e0       	ldi	r19, 0x00	; 0
static void getMenuFunctionRecord(uint8_t menuItemID, MenuFunctionRecord* menuRecord )
{
	uint8_t i;
	for (i = 0; i < sizeof(menuFunctionSet)/sizeof(MenuFunctionRecord); i++  )
	{
		readMenuRecord(&menuFunctionSet[i], menuRecord);
     e72:	c9 01       	movw	r24, r18
     e74:	88 0f       	add	r24, r24
     e76:	99 1f       	adc	r25, r25
     e78:	88 0f       	add	r24, r24
     e7a:	99 1f       	adc	r25, r25
     e7c:	88 0f       	add	r24, r24
     e7e:	99 1f       	adc	r25, r25
     e80:	82 1b       	sub	r24, r18
     e82:	93 0b       	sbc	r25, r19
     e84:	88 5b       	subi	r24, 0xB8	; 184
     e86:	9e 4f       	sbci	r25, 0xFE	; 254
//		fRecPtr		- address of the function record in the FLASH
//		resPtr		- address of the record to fill in the SRAM
//-----------------------------------------------------------------//
static inline void readMenuRecord(const MenuFunctionRecord* fRecPtr, MenuFunctionRecord* resPtr )
{
	resPtr->Item = pgm_read_byte(&fRecPtr->Item);
     e88:	fc 01       	movw	r30, r24
     e8a:	64 91       	lpm	r22, Z
	resPtr->SelectFunction = (FuncPtr)pgm_read_word(&fRecPtr->SelectFunction);
     e8c:	31 96       	adiw	r30, 0x01	; 1
     e8e:	45 91       	lpm	r20, Z+
     e90:	54 91       	lpm	r21, Z
     e92:	b4 2f       	mov	r27, r20
     e94:	a5 2f       	mov	r26, r21
	resPtr->RunFunction = (FuncPtr)pgm_read_word(&fRecPtr->RunFunction);
     e96:	fc 01       	movw	r30, r24
     e98:	33 96       	adiw	r30, 0x03	; 3
     e9a:	45 91       	lpm	r20, Z+
     e9c:	54 91       	lpm	r21, Z
     e9e:	74 2f       	mov	r23, r20
     ea0:	45 2f       	mov	r20, r21
	resPtr->LeaveFunction = (FuncPtr)pgm_read_word(&fRecPtr->LeaveFunction);
     ea2:	05 96       	adiw	r24, 0x05	; 5
     ea4:	fc 01       	movw	r30, r24
     ea6:	85 91       	lpm	r24, Z+
     ea8:	94 91       	lpm	r25, Z
     eaa:	58 2f       	mov	r21, r24
{
	uint8_t i;
	for (i = 0; i < sizeof(menuFunctionSet)/sizeof(MenuFunctionRecord); i++  )
	{
		readMenuRecord(&menuFunctionSet[i], menuRecord);
		if (menuRecord->Item == menuItemID)
     eac:	c6 13       	cpse	r28, r22
     eae:	0f c0       	rjmp	.+30     	; 0xece <processMenu+0x10e>
     eb0:	60 93 f5 00 	sts	0x00F5, r22
     eb4:	e6 ef       	ldi	r30, 0xF6	; 246
     eb6:	f0 e0       	ldi	r31, 0x00	; 0
     eb8:	b0 83       	st	Z, r27
     eba:	a1 83       	std	Z+1, r26	; 0x01
     ebc:	e8 ef       	ldi	r30, 0xF8	; 248
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	70 83       	st	Z, r23
     ec2:	41 83       	std	Z+1, r20	; 0x01
     ec4:	ea ef       	ldi	r30, 0xFA	; 250
     ec6:	f0 e0       	ldi	r31, 0x00	; 0
     ec8:	50 83       	st	Z, r21
     eca:	91 83       	std	Z+1, r25	; 0x01
     ecc:	14 c0       	rjmp	.+40     	; 0xef6 <processMenu+0x136>
     ece:	2f 5f       	subi	r18, 0xFF	; 255
     ed0:	3f 4f       	sbci	r19, 0xFF	; 255
//	Output:
//-----------------------------------------------------------------//
static void getMenuFunctionRecord(uint8_t menuItemID, MenuFunctionRecord* menuRecord )
{
	uint8_t i;
	for (i = 0; i < sizeof(menuFunctionSet)/sizeof(MenuFunctionRecord); i++  )
     ed2:	2d 30       	cpi	r18, 0x0D	; 13
     ed4:	31 05       	cpc	r19, r1
     ed6:	09 f0       	breq	.+2      	; 0xeda <processMenu+0x11a>
     ed8:	cc cf       	rjmp	.-104    	; 0xe72 <processMenu+0xb2>
     eda:	60 93 f5 00 	sts	0x00F5, r22
     ede:	e6 ef       	ldi	r30, 0xF6	; 246
     ee0:	f0 e0       	ldi	r31, 0x00	; 0
     ee2:	b0 83       	st	Z, r27
     ee4:	a1 83       	std	Z+1, r26	; 0x01
     ee6:	e8 ef       	ldi	r30, 0xF8	; 248
     ee8:	f0 e0       	ldi	r31, 0x00	; 0
     eea:	70 83       	st	Z, r23
     eec:	41 83       	std	Z+1, r20	; 0x01
     eee:	ea ef       	ldi	r30, 0xFA	; 250
     ef0:	f0 e0       	ldi	r31, 0x00	; 0
     ef2:	50 83       	st	Z, r21
     ef4:	91 83       	std	Z+1, r25	; 0x01
		selectedMenuItemID = nextItem.ItemID;
		
		// Load from FLASH and save function pointers
		getMenuFunctionRecord(selectedMenuItemID, &selectedMenuFunctionRecord);
		// Call select function for next item
		processItemFunction(selectedMenuFunctionRecord.SelectFunction);
     ef6:	e0 91 f6 00 	lds	r30, 0x00F6
     efa:	f0 91 f7 00 	lds	r31, 0x00F7
//	Arguments:
//		funcAddr - address of the function to run.
//-----------------------------------------------------------------//
static inline void processItemFunction(FuncPtr funcAddr)
{
	if (funcAddr != 0)
     efe:	30 97       	sbiw	r30, 0x00	; 0
     f00:	09 f0       	breq	.+2      	; 0xf04 <processMenu+0x144>
		((FuncPtr)funcAddr)();
     f02:	09 95       	icall
		// Load from FLASH and save function pointers
		getMenuFunctionRecord(selectedMenuItemID, &selectedMenuFunctionRecord);
		// Call select function for next item
		processItemFunction(selectedMenuFunctionRecord.SelectFunction);
		// Start timer if timeout is enabled
		if (nextItem.ItemTimeout != 0)
     f04:	dd 23       	and	r29, r29
     f06:	a9 f0       	breq	.+42     	; 0xf32 <processMenu+0x172>
		{
			menuTimer.Top = nextItem.ItemTimeout * MENU_TIMEOUT_MULT;
     f08:	dd 0f       	add	r29, r29
     f0a:	d0 93 ef 00 	sts	0x00EF, r29
			menuTimer.Timer = 0;
     f0e:	10 92 ee 00 	sts	0x00EE, r1
			menuTimer.Enabled = 1;	
     f12:	ed ee       	ldi	r30, 0xED	; 237
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	80 81       	ld	r24, Z
     f18:	81 60       	ori	r24, 0x01	; 1
     f1a:	80 83       	st	Z, r24
     f1c:	0a c0       	rjmp	.+20     	; 0xf32 <processMenu+0x172>
		}
		
	}
	else
	{
		processSoftTimer8b(&userTimer);
     f1e:	81 ef       	ldi	r24, 0xF1	; 241
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	5a d2       	rcall	.+1204   	; 0x13d8 <processSoftTimer8b>
		// Stay at previous item
		processItemFunction(selectedMenuFunctionRecord.RunFunction);
     f24:	e0 91 f8 00 	lds	r30, 0x00F8
     f28:	f0 91 f9 00 	lds	r31, 0x00F9
//	Arguments:
//		funcAddr - address of the function to run.
//-----------------------------------------------------------------//
static inline void processItemFunction(FuncPtr funcAddr)
{
	if (funcAddr != 0)
     f2c:	30 97       	sbiw	r30, 0x00	; 0
     f2e:	09 f0       	breq	.+2      	; 0xf32 <processMenu+0x172>
		((FuncPtr)funcAddr)();
     f30:	09 95       	icall
	{
		processSoftTimer8b(&userTimer);
		// Stay at previous item
		processItemFunction(selectedMenuFunctionRecord.RunFunction);
	}	
}
     f32:	df 91       	pop	r29
     f34:	cf 91       	pop	r28
     f36:	1f 91       	pop	r17
     f38:	0f 91       	pop	r16
     f3a:	ff 90       	pop	r15
     f3c:	08 95       	ret

00000f3e <u16toa_align_right>:
// Converts uint16_t value into decimal string with right alignment
// len = number of digits output (without terminating '\0')
// len[7] = 1 -> no terminating '\0' at buffer[len]
// fill_char -> char used for string padding
void u16toa_align_right(uint16_t val, char *buffer, uint8_t len,char fill_char)
{
     f3e:	cf 93       	push	r28
     f40:	df 93       	push	r29
     f42:	fc 01       	movw	r30, r24
     f44:	52 2f       	mov	r21, r18
	if (len & 0x80)
     f46:	44 23       	and	r20, r20
     f48:	2c f4       	brge	.+10     	; 0xf54 <u16toa_align_right+0x16>
	{
		len = len & 0x7F;
     f4a:	4f 77       	andi	r20, 0x7F	; 127
		buffer += len;	
     f4c:	eb 01       	movw	r28, r22
     f4e:	c4 0f       	add	r28, r20
     f50:	d1 1d       	adc	r29, r1
     f52:	04 c0       	rjmp	.+8      	; 0xf5c <u16toa_align_right+0x1e>
	}
	else
	{
		buffer += len;	
     f54:	eb 01       	movw	r28, r22
     f56:	c4 0f       	add	r28, r20
     f58:	d1 1d       	adc	r29, r1
		*buffer = 0;
     f5a:	18 82       	st	Y, r1
	}
	
	do
	{
		*--buffer = val % 10 + '0';
     f5c:	9f 01       	movw	r18, r30
     f5e:	ad ec       	ldi	r26, 0xCD	; 205
     f60:	bc ec       	ldi	r27, 0xCC	; 204
     f62:	81 d4       	rcall	.+2306   	; 0x1866 <__umulhisi3>
     f64:	96 95       	lsr	r25
     f66:	87 95       	ror	r24
     f68:	96 95       	lsr	r25
     f6a:	87 95       	ror	r24
     f6c:	96 95       	lsr	r25
     f6e:	87 95       	ror	r24
     f70:	dc 01       	movw	r26, r24
     f72:	aa 0f       	add	r26, r26
     f74:	bb 1f       	adc	r27, r27
     f76:	bc 01       	movw	r22, r24
     f78:	66 0f       	add	r22, r22
     f7a:	77 1f       	adc	r23, r23
     f7c:	66 0f       	add	r22, r22
     f7e:	77 1f       	adc	r23, r23
     f80:	66 0f       	add	r22, r22
     f82:	77 1f       	adc	r23, r23
     f84:	6a 0f       	add	r22, r26
     f86:	7b 1f       	adc	r23, r27
     f88:	e6 1b       	sub	r30, r22
     f8a:	f7 0b       	sbc	r31, r23
     f8c:	e0 5d       	subi	r30, 0xD0	; 208
     f8e:	ea 93       	st	-Y, r30
		val /= 10;
     f90:	fc 01       	movw	r30, r24
		len--;
     f92:	41 50       	subi	r20, 0x01	; 1
	}
	while ((val != 0) && len);
     f94:	00 97       	sbiw	r24, 0x00	; 0
     f96:	29 f4       	brne	.+10     	; 0xfa2 <u16toa_align_right+0x64>
	
	// Padding
	while(len--)
     f98:	84 2f       	mov	r24, r20
     f9a:	81 50       	subi	r24, 0x01	; 1
     f9c:	41 11       	cpse	r20, r1
     f9e:	04 c0       	rjmp	.+8      	; 0xfa8 <u16toa_align_right+0x6a>
     fa0:	07 c0       	rjmp	.+14     	; 0xfb0 <u16toa_align_right+0x72>
	{
		*--buffer = val % 10 + '0';
		val /= 10;
		len--;
	}
	while ((val != 0) && len);
     fa2:	41 11       	cpse	r20, r1
     fa4:	db cf       	rjmp	.-74     	; 0xf5c <u16toa_align_right+0x1e>
     fa6:	04 c0       	rjmp	.+8      	; 0xfb0 <u16toa_align_right+0x72>
     fa8:	fe 01       	movw	r30, r28
	
	// Padding
	while(len--)
		*--buffer = fill_char;
     faa:	52 93       	st	-Z, r21
		len--;
	}
	while ((val != 0) && len);
	
	// Padding
	while(len--)
     fac:	81 50       	subi	r24, 0x01	; 1
     fae:	e8 f7       	brcc	.-6      	; 0xfaa <u16toa_align_right+0x6c>
		*--buffer = fill_char;
}
     fb0:	df 91       	pop	r29
     fb2:	cf 91       	pop	r28
     fb4:	08 95       	ret

00000fb6 <init_system>:


void init_system()
{
	// Setup Port D
	PORTD = 0; //(1<<PD_SYNCA | 1<<PD_SYNCB);
     fb6:	12 ba       	out	0x12, r1	; 18
	DDRD = (1<<PD_TXD | 1<<PD_M1 | 1<<PD_M2 | 1<<PD_HEATER | 1<<PD_HEAT_INDIC );
     fb8:	8e e3       	ldi	r24, 0x3E	; 62
     fba:	81 bb       	out	0x11, r24	; 17
	
	// Setup Port B
	PORTB = 0;
     fbc:	18 ba       	out	0x18, r1	; 24
	DDRB = (1<<PB_BEEPER | 1<<PB_LED_DOUT | 1<<PB_LED_CLK | 1<<PB_SEGF | 1<<PB_SEGG | 1<<PB_SEGH);
     fbe:	8f e3       	ldi	r24, 0x3F	; 63
     fc0:	87 bb       	out	0x17, r24	; 23
	
	PORTC = 0;
     fc2:	15 ba       	out	0x15, r1	; 21
	DDRC = (1<<PC_SEGA | 1<<PC_SEGB | 1<<PC_SEGC | 1<<PC_SEGD | 1<<PC_SEGE);	
     fc4:	8f e1       	ldi	r24, 0x1F	; 31
     fc6:	84 bb       	out	0x14, r24	; 20

	// Setup timer0
	// 1/1024 prescaler, T=64us @16MHz
	TCCR0 = (1<<CS02 | 0<<CS01 | 1<<CS00);
     fc8:	85 e0       	ldi	r24, 0x05	; 5
     fca:	83 bf       	out	0x33, r24	; 51
	// Start 256 * 64us = 16384us interval
	TCNT0 = 0;
     fcc:	12 be       	out	0x32, r1	; 50
	// Clear interrupt flag
	TIFR |= (1<<TOV0);
     fce:	88 b7       	in	r24, 0x38	; 56
     fd0:	81 60       	ori	r24, 0x01	; 1
     fd2:	88 bf       	out	0x38, r24	; 56
	// Enable interrupts from timer 0
	TIMSK |= (1<<TOIE0);
     fd4:	89 b7       	in	r24, 0x39	; 57
     fd6:	81 60       	ori	r24, 0x01	; 1
     fd8:	89 bf       	out	0x39, r24	; 57
	
	// Setup timer2 as 1ms system frequency generator
	// 1/64 prescaler, CTC mode, OC2 disconnected
	TCCR2 = (1<<CS22 | 1<<WGM21);
     fda:	8c e0       	ldi	r24, 0x0C	; 12
     fdc:	85 bd       	out	0x25, r24	; 37
	OCR2 = 249;
     fde:	89 ef       	ldi	r24, 0xF9	; 249
     fe0:	83 bd       	out	0x23, r24	; 35
	TIMSK |= (1<<OCIE2);
     fe2:	89 b7       	in	r24, 0x39	; 57
     fe4:	80 68       	ori	r24, 0x80	; 128
     fe6:	89 bf       	out	0x39, r24	; 57
	
	// Setup timer1 as beeper frequency generator
	// CTC mode, 1/64 prescaler
	TCCR1A = 0;
     fe8:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = (1<<WGM12 | 1<<CS11 | 1<<CS10);
     fea:	8b e0       	ldi	r24, 0x0B	; 11
     fec:	8e bd       	out	0x2e, r24	; 46
	// 1kHz beeper frequency default
	OCR1A = 127;
     fee:	8f e7       	ldi	r24, 0x7F	; 127
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	9b bd       	out	0x2b, r25	; 43
     ff4:	8a bd       	out	0x2a, r24	; 42

	// Setup AC sync comparator
	// Interrupt on output toggle
	ACSR |= (1<<ACI);
     ff6:	44 9a       	sbi	0x08, 4	; 8
	ACSR = (1<<ACIE | 0<<ACIS1 | 0<<ACIS0);
     ff8:	88 e0       	ldi	r24, 0x08	; 8
     ffa:	88 b9       	out	0x08, r24	; 8
	
	// Setup ADC
	// Internal Vref + cap, input ADC5, 
	ADMUX = (1<<REFS1 | 1<<REFS0 | 0<<MUX3 | 1<<MUX2 | 0<<MUX1 | 1<<MUX0 );
     ffc:	85 ec       	ldi	r24, 0xC5	; 197
     ffe:	87 b9       	out	0x07, r24	; 7
	// Prescaler = 128
	ADCSRA = (1<<ADEN |/* 1<<ADFR |*/  1<<ADIE | 1<<ADPS2 | 1<<ADPS1 | 1<<ADPS0);
    1000:	8f e8       	ldi	r24, 0x8F	; 143
    1002:	86 b9       	out	0x06, r24	; 6
	
	// Setup USART
	// Double speed
	UCSRA = (1<<U2X);
    1004:	82 e0       	ldi	r24, 0x02	; 2
    1006:	8b b9       	out	0x0b, r24	; 11
	UCSRB = (1<<RXEN | 1<<TXEN | 0<<UCSZ2);
    1008:	88 e1       	ldi	r24, 0x18	; 24
    100a:	8a b9       	out	0x0a, r24	; 10
	// No parity, 1 stop bit, 8 bit
	UCSRC = (1<<URSEL | 0<<UPM1 | 0<<UPM0 | 0<<USBS | 1<<UCSZ1 | 1<<UCSZ0);
    100c:	86 e8       	ldi	r24, 0x86	; 134
    100e:	80 bd       	out	0x20, r24	; 32
	// 57600 @16MHz, 2x
	UBRRH=0x00;
    1010:	10 bc       	out	0x20, r1	; 32
	UBRRL=0x22;
    1012:	82 e2       	ldi	r24, 0x22	; 34
    1014:	89 b9       	out	0x09, r24	; 9
    1016:	08 95       	ret

00001018 <main>:




int main(void)
{
    1018:	cf 93       	push	r28
    101a:	df 93       	push	r29
    101c:	cd b7       	in	r28, 0x3d	; 61
    101e:	de b7       	in	r29, 0x3e	; 62
    1020:	2a 97       	sbiw	r28, 0x0a	; 10
    1022:	0f b6       	in	r0, 0x3f	; 63
    1024:	f8 94       	cli
    1026:	de bf       	out	0x3e, r29	; 62
    1028:	0f be       	out	0x3f, r0	; 63
    102a:	cd bf       	out	0x3d, r28	; 61
	uint8_t temp8u = 0x00;
	uint8_t uart_log_timeout_counter = 0;
	uint16_t uart_log_counter = 0;
	
	// Initialize IO
	init_system();
    102c:	c4 df       	rcall	.-120    	; 0xfb6 <init_system>
	// Initialize LED indicator
	initLedIndicator();
    102e:	4a db       	rcall	.-2412   	; 0x6c4 <initLedIndicator>
	// Enable interrupts
	sei();
    1030:	78 94       	sei
	
	// Beep
	SetBeeperFreq(1000);
    1032:	88 ee       	ldi	r24, 0xE8	; 232
    1034:	93 e0       	ldi	r25, 0x03	; 3
    1036:	fe d1       	rcall	.+1020   	; 0x1434 <SetBeeperFreq>
	StartBeep(100);
    1038:	84 e6       	ldi	r24, 0x64	; 100
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	1c d2       	rcall	.+1080   	; 0x1476 <StartBeep>
	
	InitMenu();
    103e:	63 de       	rcall	.-826    	; 0xd06 <InitMenu>

	setMotorDirection(ROLL_FWD);
    1040:	81 e0       	ldi	r24, 0x01	; 1
    1042:	75 d0       	rcall	.+234    	; 0x112e <setMotorDirection>
	
	//button_state = BD_UP;
	//processMenu();
	
	printLedBuffer(0,"      ");
    1044:	64 ea       	ldi	r22, 0xA4	; 164
    1046:	70 e0       	ldi	r23, 0x00	; 0
    1048:	80 e0       	ldi	r24, 0x00	; 0
    104a:	5f db       	rcall	.-2370   	; 0x70a <printLedBuffer>
int main(void)
{
	char str[10];
	uint8_t temp8u = 0x00;
	uint8_t uart_log_timeout_counter = 0;
	uint16_t uart_log_counter = 0;
    104c:	e1 2c       	mov	r14, r1
    104e:	f1 2c       	mov	r15, r1

int main(void)
{
	char str[10];
	uint8_t temp8u = 0x00;
	uint8_t uart_log_timeout_counter = 0;
    1050:	d1 2c       	mov	r13, r1
	printLedBuffer(0,"      ");
	
    while(1)
    {
		
		if (menuUpdateTimer.FOvfl)
    1052:	0f e6       	ldi	r16, 0x6F	; 111
    1054:	10 e0       	ldi	r17, 0x00	; 0
				//---------------------------------//
				// Function is called every 100ms
				// UART message is sent every second
				if (uart_log_timeout_counter == 9)
				{
					uart_log_timeout_counter = 0;
    1056:	c1 2c       	mov	r12, r1
	printLedBuffer(0,"      ");
	
    while(1)
    {
		
		if (menuUpdateTimer.FOvfl)
    1058:	f8 01       	movw	r30, r16
    105a:	80 81       	ld	r24, Z
    105c:	86 ff       	sbrs	r24, 6
    105e:	fc cf       	rjmp	.-8      	; 0x1058 <main+0x40>
		{
			// Get new temperature measurement
			update_filtered_adc();
    1060:	17 d9       	rcall	.-3538   	; 0x290 <update_filtered_adc>
			
			// Get new button state
			process_buttons();
    1062:	77 d9       	rcall	.-3346   	; 0x352 <process_buttons>
			
			// Give audio feedback
			if (button_state & BL_MENU)
    1064:	20 91 c2 00 	lds	r18, 0x00C2
    1068:	30 91 c3 00 	lds	r19, 0x00C3
    106c:	31 ff       	sbrs	r19, 1
    106e:	07 c0       	rjmp	.+14     	; 0x107e <main+0x66>
			{
				SetBeeperFreq(800);
    1070:	80 e2       	ldi	r24, 0x20	; 32
    1072:	93 e0       	ldi	r25, 0x03	; 3
    1074:	df d1       	rcall	.+958    	; 0x1434 <SetBeeperFreq>
				StartBeep(40);
    1076:	88 e2       	ldi	r24, 0x28	; 40
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	fd d1       	rcall	.+1018   	; 0x1476 <StartBeep>
    107c:	0a c0       	rjmp	.+20     	; 0x1092 <main+0x7a>
			}
			else if (button_action_down)
    107e:	80 91 c1 00 	lds	r24, 0x00C1
    1082:	88 23       	and	r24, r24
    1084:	31 f0       	breq	.+12     	; 0x1092 <main+0x7a>
			{
				SetBeeperFreq(1000);
    1086:	88 ee       	ldi	r24, 0xE8	; 232
    1088:	93 e0       	ldi	r25, 0x03	; 3
    108a:	d4 d1       	rcall	.+936    	; 0x1434 <SetBeeperFreq>
				StartBeep(40);
    108c:	88 e2       	ldi	r24, 0x28	; 40
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	f2 d1       	rcall	.+996    	; 0x1476 <StartBeep>
			}	
			

			// Process user menu states, settings and indication
			processMenu();
    1092:	96 de       	rcall	.-724    	; 0xdc0 <processMenu>
			
			// Process cyclic rolling, direction control
			processRollControl();	
    1094:	d1 d9       	rcall	.-3166   	; 0x438 <processRollControl>
			
			// Process heater regulation
			processHeaterControl();
    1096:	09 da       	rcall	.-3054   	; 0x4aa <processHeaterControl>
		


			if (menuUpdateTimer.FA_TGL)
    1098:	f8 01       	movw	r30, r16
    109a:	80 81       	ld	r24, Z
    109c:	82 ff       	sbrs	r24, 2
    109e:	32 c0       	rjmp	.+100    	; 0x1104 <main+0xec>
				//---------------------------------//
				// Log to UART
				//---------------------------------//
				// Function is called every 100ms
				// UART message is sent every second
				if (uart_log_timeout_counter == 9)
    10a0:	f9 e0       	ldi	r31, 0x09	; 9
    10a2:	df 12       	cpse	r13, r31
    10a4:	2e c0       	rjmp	.+92     	; 0x1102 <main+0xea>
				{
					uart_log_timeout_counter = 0;
					
					
					u16toa_align_right(uart_log_counter,str,5,' ');
    10a6:	20 e2       	ldi	r18, 0x20	; 32
    10a8:	45 e0       	ldi	r20, 0x05	; 5
    10aa:	be 01       	movw	r22, r28
    10ac:	6f 5f       	subi	r22, 0xFF	; 255
    10ae:	7f 4f       	sbci	r23, 0xFF	; 255
    10b0:	c7 01       	movw	r24, r14
    10b2:	45 df       	rcall	.-374    	; 0xf3e <u16toa_align_right>
					USART_sendstr(str);
    10b4:	ce 01       	movw	r24, r28
    10b6:	01 96       	adiw	r24, 0x01	; 1
    10b8:	25 d2       	rcall	.+1098   	; 0x1504 <USART_sendstr>
					USART_sendstr("     ");
    10ba:	85 ea       	ldi	r24, 0xA5	; 165
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	22 d2       	rcall	.+1092   	; 0x1504 <USART_sendstr>
					
					u16toa_align_right(adc_filtered_value,str,5,' ');
    10c0:	20 e2       	ldi	r18, 0x20	; 32
    10c2:	45 e0       	ldi	r20, 0x05	; 5
    10c4:	be 01       	movw	r22, r28
    10c6:	6f 5f       	subi	r22, 0xFF	; 255
    10c8:	7f 4f       	sbci	r23, 0xFF	; 255
    10ca:	80 91 d7 00 	lds	r24, 0x00D7
    10ce:	90 91 d8 00 	lds	r25, 0x00D8
    10d2:	35 df       	rcall	.-406    	; 0xf3e <u16toa_align_right>
					USART_sendstr(str);
    10d4:	ce 01       	movw	r24, r28
    10d6:	01 96       	adiw	r24, 0x01	; 1
    10d8:	15 d2       	rcall	.+1066   	; 0x1504 <USART_sendstr>
					USART_sendstr("     ");
    10da:	85 ea       	ldi	r24, 0xA5	; 165
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	12 d2       	rcall	.+1060   	; 0x1504 <USART_sendstr>
					
					if (heaterState & HEATER_ENABLED)
    10e0:	80 91 cf 00 	lds	r24, 0x00CF
    10e4:	86 ff       	sbrs	r24, 6
    10e6:	03 c0       	rjmp	.+6      	; 0x10ee <main+0xd6>
					USART_send('1');
    10e8:	81 e3       	ldi	r24, 0x31	; 49
    10ea:	07 d2       	rcall	.+1038   	; 0x14fa <USART_send>
    10ec:	02 c0       	rjmp	.+4      	; 0x10f2 <main+0xda>
					else
					USART_send('0');
    10ee:	80 e3       	ldi	r24, 0x30	; 48
    10f0:	04 d2       	rcall	.+1032   	; 0x14fa <USART_send>
					
					USART_sendstr("\n\r");
    10f2:	8b ea       	ldi	r24, 0xAB	; 171
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	06 d2       	rcall	.+1036   	; 0x1504 <USART_sendstr>
					
					uart_log_counter++;
    10f8:	8f ef       	ldi	r24, 0xFF	; 255
    10fa:	e8 1a       	sub	r14, r24
    10fc:	f8 0a       	sbc	r15, r24
				//---------------------------------//
				// Function is called every 100ms
				// UART message is sent every second
				if (uart_log_timeout_counter == 9)
				{
					uart_log_timeout_counter = 0;
    10fe:	dc 2c       	mov	r13, r12
    1100:	01 c0       	rjmp	.+2      	; 0x1104 <main+0xec>
					uart_log_counter++;
					
				}
				else
				{
					uart_log_timeout_counter++;
    1102:	d3 94       	inc	r13
			}
			
			
			
			
			menuUpdateTimer.FOvfl = 0;	
    1104:	f8 01       	movw	r30, r16
    1106:	80 81       	ld	r24, Z
    1108:	8f 7b       	andi	r24, 0xBF	; 191
    110a:	80 83       	st	Z, r24
    110c:	a5 cf       	rjmp	.-182    	; 0x1058 <main+0x40>

0000110e <setHeaterControl>:


// User function to control heater intensity
inline void setHeaterControl(uint8_t value)
{
	ctrl_heater = value;
    110e:	80 93 d0 00 	sts	0x00D0, r24
	heaterState &= ~READY_TO_UPDATE_HEATER;
    1112:	90 91 cf 00 	lds	r25, 0x00CF
    1116:	29 2f       	mov	r18, r25
    1118:	2f 77       	andi	r18, 0x7F	; 127
	
	if (ctrl_heater)
    111a:	88 23       	and	r24, r24
    111c:	21 f0       	breq	.+8      	; 0x1126 <setHeaterControl+0x18>
		heaterState |= HEATER_ENABLED;
    111e:	20 64       	ori	r18, 0x40	; 64
    1120:	20 93 cf 00 	sts	0x00CF, r18
    1124:	08 95       	ret
	else
		heaterState &= ~HEATER_ENABLED;	
    1126:	9f 73       	andi	r25, 0x3F	; 63
    1128:	90 93 cf 00 	sts	0x00CF, r25
    112c:	08 95       	ret

0000112e <setMotorDirection>:
	
// User function to control motor rotation
void setMotorDirection(uint8_t dir)
{
	// Disable interrupts from timer0 
	TIMSK &= ~(1<<TOIE0);
    112e:	99 b7       	in	r25, 0x39	; 57
    1130:	9e 7f       	andi	r25, 0xFE	; 254
    1132:	99 bf       	out	0x39, r25	; 57
	{
		rollState &= ~(ROLL_FWD | ROLL_REV);
		rollState |= dir;
	}
*/
	newDirReq = dir;	// save new direction request
    1134:	80 93 d1 00 	sts	0x00D1, r24
	
	if (dir & ROLL_FWD)
    1138:	80 ff       	sbrs	r24, 0
    113a:	09 c0       	rjmp	.+18     	; 0x114e <setMotorDirection+0x20>
		bottomPoint = rollPoint;
    113c:	80 91 68 00 	lds	r24, 0x0068
    1140:	90 91 69 00 	lds	r25, 0x0069
    1144:	90 93 6b 00 	sts	0x006B, r25
    1148:	80 93 6a 00 	sts	0x006A, r24
    114c:	0a c0       	rjmp	.+20     	; 0x1162 <setMotorDirection+0x34>
	else if (dir & ROLL_REV)
    114e:	81 ff       	sbrs	r24, 1
    1150:	08 c0       	rjmp	.+16     	; 0x1162 <setMotorDirection+0x34>
		topPoint = rollPoint;
    1152:	80 91 68 00 	lds	r24, 0x0068
    1156:	90 91 69 00 	lds	r25, 0x0069
    115a:	90 93 6d 00 	sts	0x006D, r25
    115e:	80 93 6c 00 	sts	0x006C, r24
		

	// Enable interrupts from timer 0
	TIMSK |= (1<<TOIE0);	
    1162:	89 b7       	in	r24, 0x39	; 57
    1164:	81 60       	ori	r24, 0x01	; 1
    1166:	89 bf       	out	0x39, r24	; 57
    1168:	08 95       	ret

0000116a <startCycleRolling>:


uint8_t startCycleRolling(void)
{
	// Disable interrupts from timer0 
	TIMSK &= ~(1<<TOIE0);
    116a:	89 b7       	in	r24, 0x39	; 57
    116c:	8e 7f       	andi	r24, 0xFE	; 254
    116e:	89 bf       	out	0x39, r24	; 57
	
	if ( ((rollPoint + CYCLE_SAFE_MARGIN) <= topPoint) && 
    1170:	80 91 68 00 	lds	r24, 0x0068
    1174:	90 91 69 00 	lds	r25, 0x0069
    1178:	ac 01       	movw	r20, r24
    117a:	46 5f       	subi	r20, 0xF6	; 246
    117c:	5f 4f       	sbci	r21, 0xFF	; 255
    117e:	20 91 6c 00 	lds	r18, 0x006C
    1182:	30 91 6d 00 	lds	r19, 0x006D
    1186:	24 17       	cp	r18, r20
    1188:	35 07       	cpc	r19, r21
    118a:	80 f0       	brcs	.+32     	; 0x11ac <startCycleRolling+0x42>
		 ((rollPoint - CYCLE_SAFE_MARGIN) >= bottomPoint) )
    118c:	0a 97       	sbiw	r24, 0x0a	; 10
uint8_t startCycleRolling(void)
{
	// Disable interrupts from timer0 
	TIMSK &= ~(1<<TOIE0);
	
	if ( ((rollPoint + CYCLE_SAFE_MARGIN) <= topPoint) && 
    118e:	20 91 6a 00 	lds	r18, 0x006A
    1192:	30 91 6b 00 	lds	r19, 0x006B
    1196:	82 17       	cp	r24, r18
    1198:	93 07       	cpc	r25, r19
    119a:	40 f0       	brcs	.+16     	; 0x11ac <startCycleRolling+0x42>
		 ((rollPoint - CYCLE_SAFE_MARGIN) >= bottomPoint) )
	{
		rollState |= ROLL_CYCLE;
    119c:	80 91 ce 00 	lds	r24, 0x00CE
    11a0:	84 60       	ori	r24, 0x04	; 4
    11a2:	80 93 ce 00 	sts	0x00CE, r24
		activeRollCycle = 1;
    11a6:	81 e0       	ldi	r24, 0x01	; 1
    11a8:	80 93 fc 00 	sts	0x00FC, r24
	}
	
	// Enable interrupts from timer 0
	TIMSK |= (1<<TOIE0);
    11ac:	89 b7       	in	r24, 0x39	; 57
    11ae:	81 60       	ori	r24, 0x01	; 1
    11b0:	89 bf       	out	0x39, r24	; 57
	
	return (rollState & ROLL_CYCLE);
    11b2:	80 91 ce 00 	lds	r24, 0x00CE
}
    11b6:	84 70       	andi	r24, 0x04	; 4
    11b8:	08 95       	ret

000011ba <stopCycleRolling>:

void stopCycleRolling(void)
{
	// Disable interrupts from timer0 
	TIMSK &= ~(1<<TOIE0);
    11ba:	89 b7       	in	r24, 0x39	; 57
    11bc:	8e 7f       	andi	r24, 0xFE	; 254
    11be:	89 bf       	out	0x39, r24	; 57
	
	rollState &= ~ROLL_CYCLE;
    11c0:	80 91 ce 00 	lds	r24, 0x00CE
    11c4:	8b 7f       	andi	r24, 0xFB	; 251
    11c6:	80 93 ce 00 	sts	0x00CE, r24
	
	// Enable interrupts from timer 0
	TIMSK |= (1<<TOIE0);
    11ca:	89 b7       	in	r24, 0x39	; 57
    11cc:	81 60       	ori	r24, 0x01	; 1
    11ce:	89 bf       	out	0x39, r24	; 57
    11d0:	08 95       	ret

000011d2 <isTopPointValid>:


// Used for indication
uint8_t isTopPointValid(void)
{
	return (	rollPoint <= topPoint	);	
    11d2:	81 e0       	ldi	r24, 0x01	; 1
    11d4:	40 91 68 00 	lds	r20, 0x0068
    11d8:	50 91 69 00 	lds	r21, 0x0069
    11dc:	20 91 6c 00 	lds	r18, 0x006C
    11e0:	30 91 6d 00 	lds	r19, 0x006D
    11e4:	24 17       	cp	r18, r20
    11e6:	35 07       	cpc	r19, r21
    11e8:	08 f4       	brcc	.+2      	; 0x11ec <isTopPointValid+0x1a>
    11ea:	80 e0       	ldi	r24, 0x00	; 0
}
    11ec:	08 95       	ret

000011ee <isBottomPointValid>:

uint8_t isBottomPointValid(void)
{
	return (	rollPoint >= bottomPoint	);	
    11ee:	81 e0       	ldi	r24, 0x01	; 1
    11f0:	40 91 68 00 	lds	r20, 0x0068
    11f4:	50 91 69 00 	lds	r21, 0x0069
    11f8:	20 91 6a 00 	lds	r18, 0x006A
    11fc:	30 91 6b 00 	lds	r19, 0x006B
    1200:	42 17       	cp	r20, r18
    1202:	53 07       	cpc	r21, r19
    1204:	08 f4       	brcc	.+2      	; 0x1208 <isBottomPointValid+0x1a>
    1206:	80 e0       	ldi	r24, 0x00	; 0
}
    1208:	08 95       	ret

0000120a <__vector_16>:




ISR(ANA_COMP_vect)
{
    120a:	1f 92       	push	r1
    120c:	0f 92       	push	r0
    120e:	0f b6       	in	r0, 0x3f	; 63
    1210:	0f 92       	push	r0
    1212:	11 24       	eor	r1, r1
    1214:	8f 93       	push	r24
    1216:	9f 93       	push	r25
	// Once triggered, disable further comparator interrupt
	ACSR &= ~(1<<ACIE);
    1218:	43 98       	cbi	0x08, 3	; 8
	// Turn on heater TRIAC
	if (heater_cnt < ctrl_heater_sync)
    121a:	90 91 d2 00 	lds	r25, 0x00D2
    121e:	80 91 d3 00 	lds	r24, 0x00D3
    1222:	98 17       	cp	r25, r24
    1224:	20 f4       	brcc	.+8      	; 0x122e <__vector_16+0x24>
		PORTD |= (1<<PD_HEATER | 1<<PD_HEAT_INDIC);	// Direct heater indication
    1226:	82 b3       	in	r24, 0x12	; 18
    1228:	80 63       	ori	r24, 0x30	; 48
    122a:	82 bb       	out	0x12, r24	; 18
    122c:	01 c0       	rjmp	.+2      	; 0x1230 <__vector_16+0x26>
	else
		PORTD &= ~(1<<PD_HEAT_INDIC);
    122e:	95 98       	cbi	0x12, 5	; 18
	// Reprogram timer0
	TCNT0 = 256 - TRIAC_IMPULSE_TIME;		// Triac gate impulse time
    1230:	86 ef       	ldi	r24, 0xF6	; 246
    1232:	82 bf       	out	0x32, r24	; 50
	// Modify state	
	p_state &= ~STATE_MASK;					// Start new state machine cycle
    1234:	80 91 6e 00 	lds	r24, 0x006E
    1238:	80 7f       	andi	r24, 0xF0	; 240
	p_state ^= HALF_PERIOD_FLAG;			// Toggle flag
    123a:	80 58       	subi	r24, 0x80	; 128
    123c:	80 93 6e 00 	sts	0x006E, r24
	
}
    1240:	9f 91       	pop	r25
    1242:	8f 91       	pop	r24
    1244:	0f 90       	pop	r0
    1246:	0f be       	out	0x3f, r0	; 63
    1248:	0f 90       	pop	r0
    124a:	1f 90       	pop	r1
    124c:	18 95       	reti

0000124e <__vector_9>:



ISR(TIMER0_OVF_vect)
{
    124e:	1f 92       	push	r1
    1250:	0f 92       	push	r0
    1252:	0f b6       	in	r0, 0x3f	; 63
    1254:	0f 92       	push	r0
    1256:	11 24       	eor	r1, r1
    1258:	2f 93       	push	r18
    125a:	3f 93       	push	r19
    125c:	4f 93       	push	r20
    125e:	8f 93       	push	r24
    1260:	9f 93       	push	r25
	uint8_t temp;
	static uint8_t rollStatePrev = 0;
	
	switch(p_state & STATE_MASK)
    1262:	80 91 6e 00 	lds	r24, 0x006E
    1266:	8f 70       	andi	r24, 0x0F	; 15
    1268:	81 30       	cpi	r24, 0x01	; 1
    126a:	51 f0       	breq	.+20     	; 0x1280 <__vector_9+0x32>
    126c:	28 f0       	brcs	.+10     	; 0x1278 <__vector_9+0x2a>
    126e:	82 30       	cpi	r24, 0x02	; 2
    1270:	51 f0       	breq	.+20     	; 0x1286 <__vector_9+0x38>
    1272:	83 30       	cpi	r24, 0x03	; 3
    1274:	91 f4       	brne	.+36     	; 0x129a <__vector_9+0x4c>
    1276:	0c c0       	rjmp	.+24     	; 0x1290 <__vector_9+0x42>
	{
		// TRIAC_IMPULSE_TIME finished
		case 0x00:
			// Turn off heater TRIAC
			PORTD &= ~(1<<PD_HEATER);
    1278:	94 98       	cbi	0x12, 4	; 18
			TCNT0 = 256 - (QUATER_PERIOD_TIME - TRIAC_IMPULSE_TIME);
    127a:	8c eb       	ldi	r24, 0xBC	; 188
    127c:	82 bf       	out	0x32, r24	; 50
			break;
    127e:	0d c0       	rjmp	.+26     	; 0x129a <__vector_9+0x4c>
		// QUATER_PERIOD_TIME finished	
		case 0x01:	
			TCNT0 = 256 - (SYNC_IGNORE_TIME - QUATER_PERIOD_TIME);
    1280:	82 ec       	ldi	r24, 0xC2	; 194
    1282:	82 bf       	out	0x32, r24	; 50
			break;	
    1284:	0a c0       	rjmp	.+20     	; 0x129a <__vector_9+0x4c>
		// SYNC_IGNORE_TIME finished	
		case 0x02:
			TCNT0 = 256 - SYNC_LOST_TIMEOUT;
    1286:	80 ee       	ldi	r24, 0xE0	; 224
    1288:	82 bf       	out	0x32, r24	; 50
			// Clear flag and enable interrupt from analog comparator
			ACSR |= (1<<ACI);
    128a:	44 9a       	sbi	0x08, 4	; 8
			ACSR |= (1<<ACIE);
    128c:	43 9a       	sbi	0x08, 3	; 8
			break;
    128e:	05 c0       	rjmp	.+10     	; 0x129a <__vector_9+0x4c>
		// SYNC_LOST_TIMEOUT finished
		case 0x03:
			// Error - sync is lost. It means that device has been disconnected from AC line.
			// Disable all power-consuming devices like LEDs and save user settings to EEPROM.
			PORTD &= ~(1<<PD_HEATER | 1<<PD_M1 | 1<<PD_M2);
    1290:	82 b3       	in	r24, 0x12	; 18
    1292:	83 7e       	andi	r24, 0xE3	; 227
    1294:	82 bb       	out	0x12, r24	; 18
			heater_cnt = 0;
    1296:	10 92 d2 00 	sts	0x00D2, r1
			// Sync is not present - TODO
			break;
	}	

	// Full period check
	if ((p_state & (HALF_PERIOD_FLAG | STATE_MASK)) == (HALF_PERIOD_FLAG | 0x01))
    129a:	80 91 6e 00 	lds	r24, 0x006E
    129e:	8f 78       	andi	r24, 0x8F	; 143
    12a0:	81 38       	cpi	r24, 0x81	; 129
    12a2:	09 f0       	breq	.+2      	; 0x12a6 <__vector_9+0x58>
    12a4:	86 c0       	rjmp	.+268    	; 0x13b2 <__vector_9+0x164>
	{
		// Full AC line period is done. Update controls.
		
		temp = PORTD;
    12a6:	92 b3       	in	r25, 0x12	; 18
		temp &= ~(1<<PD_M1 | 1<<PD_M2);
    12a8:	93 7f       	andi	r25, 0xF3	; 243
		if ( (rollStatePrev ^ rollState) & (ROLL_FWD | ROLL_REV) )
    12aa:	80 91 ce 00 	lds	r24, 0x00CE
    12ae:	20 91 d4 00 	lds	r18, 0x00D4
    12b2:	28 27       	eor	r18, r24
    12b4:	23 70       	andi	r18, 0x03	; 3
    12b6:	21 f0       	breq	.+8      	; 0x12c0 <__vector_9+0x72>
		{
			// Direction control changed. Skip current period to allow TRIACs fully close
			rollStatePrev = rollState;
    12b8:	80 93 d4 00 	sts	0x00D4, r24
			PORTD = temp; 	
    12bc:	92 bb       	out	0x12, r25	; 18
    12be:	66 c0       	rjmp	.+204    	; 0x138c <__vector_9+0x13e>
		}
		else
		{
			// Apply direction control 
			if (rollState & ROLL_FWD)
    12c0:	80 ff       	sbrs	r24, 0
    12c2:	02 c0       	rjmp	.+4      	; 0x12c8 <__vector_9+0x7a>
				temp |= (1<<PD_M1);
    12c4:	94 60       	ori	r25, 0x04	; 4
    12c6:	02 c0       	rjmp	.+4      	; 0x12cc <__vector_9+0x7e>
			else if (rollState & ROLL_REV)
    12c8:	81 fd       	sbrc	r24, 1
				temp |= (1<<PD_M2);
    12ca:	98 60       	ori	r25, 0x08	; 8
			PORTD = temp; 
    12cc:	92 bb       	out	0x12, r25	; 18
	
// Function to process rolling - sets rotation direction for next period
// Call once per each AC line period
static inline void controllRolling()
{
	switch(rollState & (ROLL_FWD | ROLL_REV | ROLL_CYCLE))
    12ce:	40 91 ce 00 	lds	r20, 0x00CE
    12d2:	84 2f       	mov	r24, r20
    12d4:	87 70       	andi	r24, 0x07	; 7
    12d6:	85 30       	cpi	r24, 0x05	; 5
    12d8:	19 f0       	breq	.+6      	; 0x12e0 <__vector_9+0x92>
    12da:	86 30       	cpi	r24, 0x06	; 6
    12dc:	c1 f5       	brne	.+112    	; 0x134e <__vector_9+0x100>
    12de:	1c c0       	rjmp	.+56     	; 0x1318 <__vector_9+0xca>
	{
		case (ROLL_FWD | ROLL_CYCLE):
			if (rollPoint >=  topPoint)
    12e0:	20 91 68 00 	lds	r18, 0x0068
    12e4:	30 91 69 00 	lds	r19, 0x0069
    12e8:	80 91 6c 00 	lds	r24, 0x006C
    12ec:	90 91 6d 00 	lds	r25, 0x006D
    12f0:	28 17       	cp	r18, r24
    12f2:	39 07       	cpc	r19, r25
    12f4:	60 f1       	brcs	.+88     	; 0x134e <__vector_9+0x100>
			{
				if (activeRollCycle >= rollCycleSet)	
    12f6:	80 91 fc 00 	lds	r24, 0x00FC
    12fa:	90 91 65 00 	lds	r25, 0x0065
    12fe:	89 17       	cp	r24, r25
    1300:	20 f0       	brcs	.+8      	; 0x130a <__vector_9+0xbc>
				{
					// DONE!
					rollState &= ~ROLL_CYCLE;
    1302:	4b 7f       	andi	r20, 0xFB	; 251
    1304:	40 93 ce 00 	sts	0x00CE, r20
    1308:	22 c0       	rjmp	.+68     	; 0x134e <__vector_9+0x100>
				}
				else
				{
					activeRollCycle++;
    130a:	8f 5f       	subi	r24, 0xFF	; 255
    130c:	80 93 fc 00 	sts	0x00FC, r24
					// Change dir
					//rollState &= ~ROLL_FWD;
					//rollState |= ROLL_REV;		
					newDirReq = ROLL_REV;
    1310:	82 e0       	ldi	r24, 0x02	; 2
    1312:	80 93 d1 00 	sts	0x00D1, r24
    1316:	1b c0       	rjmp	.+54     	; 0x134e <__vector_9+0x100>
				}
			}
			break;
		
		case (ROLL_REV | ROLL_CYCLE):	
			if (rollPoint <=  bottomPoint)
    1318:	20 91 68 00 	lds	r18, 0x0068
    131c:	30 91 69 00 	lds	r19, 0x0069
    1320:	80 91 6a 00 	lds	r24, 0x006A
    1324:	90 91 6b 00 	lds	r25, 0x006B
    1328:	82 17       	cp	r24, r18
    132a:	93 07       	cpc	r25, r19
    132c:	80 f0       	brcs	.+32     	; 0x134e <__vector_9+0x100>
			{
				if (activeRollCycle >= rollCycleSet)	
    132e:	80 91 fc 00 	lds	r24, 0x00FC
    1332:	90 91 65 00 	lds	r25, 0x0065
    1336:	89 17       	cp	r24, r25
    1338:	20 f0       	brcs	.+8      	; 0x1342 <__vector_9+0xf4>
				{
					// DONE!
					rollState &= ~ROLL_CYCLE;
    133a:	4b 7f       	andi	r20, 0xFB	; 251
    133c:	40 93 ce 00 	sts	0x00CE, r20
    1340:	06 c0       	rjmp	.+12     	; 0x134e <__vector_9+0x100>
				}
				else
				{
					activeRollCycle++;
    1342:	8f 5f       	subi	r24, 0xFF	; 255
    1344:	80 93 fc 00 	sts	0x00FC, r24
					// Change dir
					//rollState &= ~ROLL_REV;
					//rollState |= ROLL_FWD;		
					newDirReq = ROLL_FWD;
    1348:	81 e0       	ldi	r24, 0x01	; 1
    134a:	80 93 d1 00 	sts	0x00D1, r24
		default:
			break;
	}
	
	// Process direction
	rollState &= ~(ROLL_FWD | ROLL_REV);
    134e:	80 91 ce 00 	lds	r24, 0x00CE
    1352:	8c 7f       	andi	r24, 0xFC	; 252
	rollState |= newDirReq;
    1354:	90 91 d1 00 	lds	r25, 0x00D1
    1358:	89 2b       	or	r24, r25
    135a:	80 93 ce 00 	sts	0x00CE, r24

static inline void updateRollPoint(void)
{
	uint16_t diff;
	
	if (rollState & ROLL_FWD)
    135e:	80 ff       	sbrs	r24, 0
    1360:	0a c0       	rjmp	.+20     	; 0x1376 <__vector_9+0x128>
		rollPoint++;
    1362:	80 91 68 00 	lds	r24, 0x0068
    1366:	90 91 69 00 	lds	r25, 0x0069
    136a:	01 96       	adiw	r24, 0x01	; 1
    136c:	90 93 69 00 	sts	0x0069, r25
    1370:	80 93 68 00 	sts	0x0068, r24
    1374:	0b c0       	rjmp	.+22     	; 0x138c <__vector_9+0x13e>
	else if (rollState & ROLL_REV)
    1376:	81 ff       	sbrs	r24, 1
    1378:	09 c0       	rjmp	.+18     	; 0x138c <__vector_9+0x13e>
		rollPoint--;	
    137a:	80 91 68 00 	lds	r24, 0x0068
    137e:	90 91 69 00 	lds	r25, 0x0069
    1382:	01 97       	sbiw	r24, 0x01	; 1
    1384:	90 93 69 00 	sts	0x0069, r25
    1388:	80 93 68 00 	sts	0x0068, r24
			controllRolling();
		}
			

		// Process heater control counter
		if (heater_cnt == HEATER_REGULATION_PERIODS - 1)
    138c:	80 91 d2 00 	lds	r24, 0x00D2
    1390:	89 30       	cpi	r24, 0x09	; 9
    1392:	61 f4       	brne	.+24     	; 0x13ac <__vector_9+0x15e>
		{
			heater_cnt = 0;
    1394:	10 92 d2 00 	sts	0x00D2, r1
			ctrl_heater_sync = ctrl_heater;
    1398:	80 91 d0 00 	lds	r24, 0x00D0
    139c:	80 93 d3 00 	sts	0x00D3, r24
			heaterState |= READY_TO_UPDATE_HEATER;
    13a0:	80 91 cf 00 	lds	r24, 0x00CF
    13a4:	80 68       	ori	r24, 0x80	; 128
    13a6:	80 93 cf 00 	sts	0x00CF, r24
    13aa:	03 c0       	rjmp	.+6      	; 0x13b2 <__vector_9+0x164>
		}
		else
		{
			heater_cnt++;
    13ac:	8f 5f       	subi	r24, 0xFF	; 255
    13ae:	80 93 d2 00 	sts	0x00D2, r24
			
			
	}
	

	if ((p_state & STATE_MASK)  != 0x0F)
    13b2:	80 91 6e 00 	lds	r24, 0x006E
    13b6:	98 2f       	mov	r25, r24
    13b8:	9f 70       	andi	r25, 0x0F	; 15
    13ba:	9f 30       	cpi	r25, 0x0F	; 15
    13bc:	19 f0       	breq	.+6      	; 0x13c4 <__vector_9+0x176>
		p_state++;
    13be:	8f 5f       	subi	r24, 0xFF	; 255
    13c0:	80 93 6e 00 	sts	0x006E, r24

}	
    13c4:	9f 91       	pop	r25
    13c6:	8f 91       	pop	r24
    13c8:	4f 91       	pop	r20
    13ca:	3f 91       	pop	r19
    13cc:	2f 91       	pop	r18
    13ce:	0f 90       	pop	r0
    13d0:	0f be       	out	0x3f, r0	; 63
    13d2:	0f 90       	pop	r0
    13d4:	1f 90       	pop	r1
    13d6:	18 95       	reti

000013d8 <processSoftTimer8b>:
 
 
 
 
 void processSoftTimer8b(SoftTimer8b_t *tmr)
 {
    13d8:	fc 01       	movw	r30, r24
	 uint8_t newTimerVal;

	 if (!tmr->Enabled)
    13da:	80 81       	ld	r24, Z
    13dc:	80 ff       	sbrs	r24, 0
    13de:	29 c0       	rjmp	.+82     	; 0x1432 <processSoftTimer8b+0x5a>
		return;
	 
	 tmr->FA_EQ = 0;
	 tmr->FA_GE = 0;
	 tmr->FTop = 0;
    13e0:	87 7e       	andi	r24, 0xE7	; 231
    13e2:	8f 7d       	andi	r24, 0xDF	; 223
    13e4:	80 83       	st	Z, r24
	 
	 if (tmr->Timer >= tmr->Top)
    13e6:	81 81       	ldd	r24, Z+1	; 0x01
    13e8:	92 81       	ldd	r25, Z+2	; 0x02
    13ea:	89 17       	cp	r24, r25
    13ec:	58 f0       	brcs	.+22     	; 0x1404 <processSoftTimer8b+0x2c>
	 {
		 if (tmr->RunOnce)
    13ee:	90 81       	ld	r25, Z
    13f0:	91 ff       	sbrs	r25, 1
    13f2:	02 c0       	rjmp	.+4      	; 0x13f8 <processSoftTimer8b+0x20>
		 {
			 tmr->Enabled = 0;
    13f4:	9e 7f       	andi	r25, 0xFE	; 254
    13f6:	90 83       	st	Z, r25
		 }
		 tmr->FTop = 1;
    13f8:	90 81       	ld	r25, Z
		 tmr->FOvfl = 1;
    13fa:	90 62       	ori	r25, 0x20	; 32
    13fc:	90 64       	ori	r25, 0x40	; 64
    13fe:	90 83       	st	Z, r25
		 newTimerVal = 0;
    1400:	20 e0       	ldi	r18, 0x00	; 0
    1402:	02 c0       	rjmp	.+4      	; 0x1408 <processSoftTimer8b+0x30>
	 }
	 else
	 {
		 newTimerVal = tmr->Timer + 1;
    1404:	28 2f       	mov	r18, r24
    1406:	2f 5f       	subi	r18, 0xFF	; 255
	 }
	 
	 if (tmr->Timer == tmr->CompA)
    1408:	93 81       	ldd	r25, Z+3	; 0x03
    140a:	89 13       	cpse	r24, r25
    140c:	0c c0       	rjmp	.+24     	; 0x1426 <processSoftTimer8b+0x4e>
	 {
		 tmr->FA_EQ = 1;
    140e:	80 81       	ld	r24, Z
		 tmr->FA_GE = 1;
    1410:	88 60       	ori	r24, 0x08	; 8
    1412:	80 61       	ori	r24, 0x10	; 16
		 tmr->FA_TGL = !tmr->FA_TGL;
    1414:	82 fb       	bst	r24, 2
    1416:	33 27       	eor	r19, r19
    1418:	30 f9       	bld	r19, 0
    141a:	91 e0       	ldi	r25, 0x01	; 1
    141c:	93 27       	eor	r25, r19
    141e:	90 fb       	bst	r25, 0
    1420:	82 f9       	bld	r24, 2
    1422:	80 83       	st	Z, r24
    1424:	05 c0       	rjmp	.+10     	; 0x1430 <processSoftTimer8b+0x58>
	 }
	 else if (tmr->Timer >= tmr->CompA)
    1426:	89 17       	cp	r24, r25
    1428:	18 f0       	brcs	.+6      	; 0x1430 <processSoftTimer8b+0x58>
	 {
		 tmr->FA_GE = 1;
    142a:	80 81       	ld	r24, Z
    142c:	80 61       	ori	r24, 0x10	; 16
    142e:	80 83       	st	Z, r24
	 }
	 
	 tmr->Timer = newTimerVal; 
    1430:	21 83       	std	Z+1, r18	; 0x01
    1432:	08 95       	ret

00001434 <SetBeeperFreq>:
}

// Setup beeper frequency (Hz)
void SetBeeperFreq(uint16_t freq_hz)
{
	uint16_t period_us = 1000000 / freq_hz;
    1434:	9c 01       	movw	r18, r24
    1436:	40 e0       	ldi	r20, 0x00	; 0
    1438:	50 e0       	ldi	r21, 0x00	; 0
    143a:	60 e4       	ldi	r22, 0x40	; 64
    143c:	72 e4       	ldi	r23, 0x42	; 66
    143e:	8f e0       	ldi	r24, 0x0F	; 15
    1440:	90 e0       	ldi	r25, 0x00	; 0
    1442:	f6 d1       	rcall	.+1004   	; 0x1830 <__divmodsi4>
	if (period_us & 0xFFF8)
    1444:	da 01       	movw	r26, r20
    1446:	c9 01       	movw	r24, r18
    1448:	88 7f       	andi	r24, 0xF8	; 248
    144a:	aa 27       	eor	r26, r26
    144c:	bb 27       	eor	r27, r27
    144e:	89 2b       	or	r24, r25
    1450:	59 f0       	breq	.+22     	; 0x1468 <SetBeeperFreq+0x34>
	OCR1A = (period_us>>3) - 1;
    1452:	36 95       	lsr	r19
    1454:	27 95       	ror	r18
    1456:	36 95       	lsr	r19
    1458:	27 95       	ror	r18
    145a:	36 95       	lsr	r19
    145c:	27 95       	ror	r18
    145e:	21 50       	subi	r18, 0x01	; 1
    1460:	31 09       	sbc	r19, r1
    1462:	3b bd       	out	0x2b, r19	; 43
    1464:	2a bd       	out	0x2a, r18	; 42
    1466:	04 c0       	rjmp	.+8      	; 0x1470 <SetBeeperFreq+0x3c>
		else
	OCR1A = 0x1;
    1468:	81 e0       	ldi	r24, 0x01	; 1
    146a:	90 e0       	ldi	r25, 0x00	; 0
    146c:	9b bd       	out	0x2b, r25	; 43
    146e:	8a bd       	out	0x2a, r24	; 42
	TCNT1 = 0;
    1470:	1d bc       	out	0x2d, r1	; 45
    1472:	1c bc       	out	0x2c, r1	; 44
    1474:	08 95       	ret

00001476 <StartBeep>:
}

// Beep for some time in ms
void StartBeep(uint16_t time_ms)
{
	if (sound_enable)
    1476:	20 91 c6 00 	lds	r18, 0x00C6
    147a:	22 23       	and	r18, r18
    147c:	39 f0       	breq	.+14     	; 0x148c <StartBeep+0x16>
	{
		beep_cnt = time_ms;
    147e:	90 93 d6 00 	sts	0x00D6, r25
    1482:	80 93 d5 00 	sts	0x00D5, r24
// Enable / disable beeper output
inline void SetBeepOutput(uint8_t val)
{
	if (val)
		// Toggle OCR1A on compare match
		TCCR1A |= (1<<COM1A0);
    1486:	8f b5       	in	r24, 0x2f	; 47
    1488:	80 64       	ori	r24, 0x40	; 64
    148a:	8f bd       	out	0x2f, r24	; 47
    148c:	08 95       	ret

0000148e <__vector_3>:
	SetBeepOutput(0);
}


ISR(TIMER2_COMP_vect)
{	
    148e:	1f 92       	push	r1
    1490:	0f 92       	push	r0
    1492:	0f b6       	in	r0, 0x3f	; 63
    1494:	0f 92       	push	r0
    1496:	11 24       	eor	r1, r1
    1498:	2f 93       	push	r18
    149a:	3f 93       	push	r19
    149c:	4f 93       	push	r20
    149e:	5f 93       	push	r21
    14a0:	6f 93       	push	r22
    14a2:	7f 93       	push	r23
    14a4:	8f 93       	push	r24
    14a6:	9f 93       	push	r25
    14a8:	af 93       	push	r26
    14aa:	bf 93       	push	r27
    14ac:	ef 93       	push	r30
    14ae:	ff 93       	push	r31
	// Manage beeper
	if (beep_cnt)
    14b0:	80 91 d5 00 	lds	r24, 0x00D5
    14b4:	90 91 d6 00 	lds	r25, 0x00D6
    14b8:	00 97       	sbiw	r24, 0x00	; 0
    14ba:	31 f0       	breq	.+12     	; 0x14c8 <__vector_3+0x3a>
		beep_cnt--;
    14bc:	01 97       	sbiw	r24, 0x01	; 1
    14be:	90 93 d6 00 	sts	0x00D6, r25
    14c2:	80 93 d5 00 	sts	0x00D5, r24
    14c6:	03 c0       	rjmp	.+6      	; 0x14ce <__vector_3+0x40>
	if (val)
		// Toggle OCR1A on compare match
		TCCR1A |= (1<<COM1A0);
	else
		// Disable OCR1A output
		TCCR1A &= ~(1<<COM1A0 | 1<<COM1A1);
    14c8:	8f b5       	in	r24, 0x2f	; 47
    14ca:	8f 73       	andi	r24, 0x3F	; 63
    14cc:	8f bd       	out	0x2f, r24	; 47
		beep_cnt--;
	else
		SetBeepOutput(0);	// done
	
	// Manage LED indicator
	processLedIndicator();
    14ce:	57 d8       	rcall	.-3922   	; 0x57e <processLedIndicator>
	
	// Process menu update timer
	processSoftTimer8b(&menuUpdateTimer);	
    14d0:	8f e6       	ldi	r24, 0x6F	; 111
    14d2:	90 e0       	ldi	r25, 0x00	; 0
    14d4:	81 df       	rcall	.-254    	; 0x13d8 <processSoftTimer8b>
	
	
	// Start ADC conversion
	ADCSRA |= (1<<ADSC);
    14d6:	36 9a       	sbi	0x06, 6	; 6
	
		
}
    14d8:	ff 91       	pop	r31
    14da:	ef 91       	pop	r30
    14dc:	bf 91       	pop	r27
    14de:	af 91       	pop	r26
    14e0:	9f 91       	pop	r25
    14e2:	8f 91       	pop	r24
    14e4:	7f 91       	pop	r23
    14e6:	6f 91       	pop	r22
    14e8:	5f 91       	pop	r21
    14ea:	4f 91       	pop	r20
    14ec:	3f 91       	pop	r19
    14ee:	2f 91       	pop	r18
    14f0:	0f 90       	pop	r0
    14f2:	0f be       	out	0x3f, r0	; 63
    14f4:	0f 90       	pop	r0
    14f6:	1f 90       	pop	r1
    14f8:	18 95       	reti

000014fa <USART_send>:



void USART_send( uint8_t data )
{
	UCSRA |= (1<<TXC);                 // Clear flag
    14fa:	5e 9a       	sbi	0x0b, 6	; 11
	UDR = data;
    14fc:	8c b9       	out	0x0c, r24	; 12
	while ( !(UCSRA & (1<<TXC)) );  // Wait
    14fe:	5e 9b       	sbis	0x0b, 6	; 11
    1500:	fe cf       	rjmp	.-4      	; 0x14fe <USART_send+0x4>
}
    1502:	08 95       	ret

00001504 <USART_sendstr>:


void USART_sendstr(char* str)
{
    1504:	1f 93       	push	r17
    1506:	cf 93       	push	r28
    1508:	df 93       	push	r29
    150a:	ec 01       	movw	r28, r24
	uint8_t i = 0;
	while (str[i])
    150c:	88 81       	ld	r24, Y
    150e:	88 23       	and	r24, r24
    1510:	49 f0       	breq	.+18     	; 0x1524 <USART_sendstr+0x20>
}


void USART_sendstr(char* str)
{
	uint8_t i = 0;
    1512:	10 e0       	ldi	r17, 0x00	; 0
	while (str[i])
	{
		USART_send(str[i++]);
    1514:	1f 5f       	subi	r17, 0xFF	; 255
    1516:	f1 df       	rcall	.-30     	; 0x14fa <USART_send>


void USART_sendstr(char* str)
{
	uint8_t i = 0;
	while (str[i])
    1518:	fe 01       	movw	r30, r28
    151a:	e1 0f       	add	r30, r17
    151c:	f1 1d       	adc	r31, r1
    151e:	80 81       	ld	r24, Z
    1520:	81 11       	cpse	r24, r1
    1522:	f8 cf       	rjmp	.-16     	; 0x1514 <USART_sendstr+0x10>
	{
		USART_send(str[i++]);
	}
}
    1524:	df 91       	pop	r29
    1526:	cf 91       	pop	r28
    1528:	1f 91       	pop	r17
    152a:	08 95       	ret

0000152c <__subsf3>:
    152c:	50 58       	subi	r21, 0x80	; 128

0000152e <__addsf3>:
    152e:	bb 27       	eor	r27, r27
    1530:	aa 27       	eor	r26, r26
    1532:	0e d0       	rcall	.+28     	; 0x1550 <__addsf3x>
    1534:	e0 c0       	rjmp	.+448    	; 0x16f6 <__fp_round>
    1536:	d1 d0       	rcall	.+418    	; 0x16da <__fp_pscA>
    1538:	30 f0       	brcs	.+12     	; 0x1546 <__addsf3+0x18>
    153a:	d6 d0       	rcall	.+428    	; 0x16e8 <__fp_pscB>
    153c:	20 f0       	brcs	.+8      	; 0x1546 <__addsf3+0x18>
    153e:	31 f4       	brne	.+12     	; 0x154c <__addsf3+0x1e>
    1540:	9f 3f       	cpi	r25, 0xFF	; 255
    1542:	11 f4       	brne	.+4      	; 0x1548 <__addsf3+0x1a>
    1544:	1e f4       	brtc	.+6      	; 0x154c <__addsf3+0x1e>
    1546:	c6 c0       	rjmp	.+396    	; 0x16d4 <__fp_nan>
    1548:	0e f4       	brtc	.+2      	; 0x154c <__addsf3+0x1e>
    154a:	e0 95       	com	r30
    154c:	e7 fb       	bst	r30, 7
    154e:	bc c0       	rjmp	.+376    	; 0x16c8 <__fp_inf>

00001550 <__addsf3x>:
    1550:	e9 2f       	mov	r30, r25
    1552:	e2 d0       	rcall	.+452    	; 0x1718 <__fp_split3>
    1554:	80 f3       	brcs	.-32     	; 0x1536 <__addsf3+0x8>
    1556:	ba 17       	cp	r27, r26
    1558:	62 07       	cpc	r22, r18
    155a:	73 07       	cpc	r23, r19
    155c:	84 07       	cpc	r24, r20
    155e:	95 07       	cpc	r25, r21
    1560:	18 f0       	brcs	.+6      	; 0x1568 <__addsf3x+0x18>
    1562:	71 f4       	brne	.+28     	; 0x1580 <__addsf3x+0x30>
    1564:	9e f5       	brtc	.+102    	; 0x15cc <__addsf3x+0x7c>
    1566:	fa c0       	rjmp	.+500    	; 0x175c <__fp_zero>
    1568:	0e f4       	brtc	.+2      	; 0x156c <__addsf3x+0x1c>
    156a:	e0 95       	com	r30
    156c:	0b 2e       	mov	r0, r27
    156e:	ba 2f       	mov	r27, r26
    1570:	a0 2d       	mov	r26, r0
    1572:	0b 01       	movw	r0, r22
    1574:	b9 01       	movw	r22, r18
    1576:	90 01       	movw	r18, r0
    1578:	0c 01       	movw	r0, r24
    157a:	ca 01       	movw	r24, r20
    157c:	a0 01       	movw	r20, r0
    157e:	11 24       	eor	r1, r1
    1580:	ff 27       	eor	r31, r31
    1582:	59 1b       	sub	r21, r25
    1584:	99 f0       	breq	.+38     	; 0x15ac <__addsf3x+0x5c>
    1586:	59 3f       	cpi	r21, 0xF9	; 249
    1588:	50 f4       	brcc	.+20     	; 0x159e <__addsf3x+0x4e>
    158a:	50 3e       	cpi	r21, 0xE0	; 224
    158c:	68 f1       	brcs	.+90     	; 0x15e8 <__addsf3x+0x98>
    158e:	1a 16       	cp	r1, r26
    1590:	f0 40       	sbci	r31, 0x00	; 0
    1592:	a2 2f       	mov	r26, r18
    1594:	23 2f       	mov	r18, r19
    1596:	34 2f       	mov	r19, r20
    1598:	44 27       	eor	r20, r20
    159a:	58 5f       	subi	r21, 0xF8	; 248
    159c:	f3 cf       	rjmp	.-26     	; 0x1584 <__addsf3x+0x34>
    159e:	46 95       	lsr	r20
    15a0:	37 95       	ror	r19
    15a2:	27 95       	ror	r18
    15a4:	a7 95       	ror	r26
    15a6:	f0 40       	sbci	r31, 0x00	; 0
    15a8:	53 95       	inc	r21
    15aa:	c9 f7       	brne	.-14     	; 0x159e <__addsf3x+0x4e>
    15ac:	7e f4       	brtc	.+30     	; 0x15cc <__addsf3x+0x7c>
    15ae:	1f 16       	cp	r1, r31
    15b0:	ba 0b       	sbc	r27, r26
    15b2:	62 0b       	sbc	r22, r18
    15b4:	73 0b       	sbc	r23, r19
    15b6:	84 0b       	sbc	r24, r20
    15b8:	ba f0       	brmi	.+46     	; 0x15e8 <__addsf3x+0x98>
    15ba:	91 50       	subi	r25, 0x01	; 1
    15bc:	a1 f0       	breq	.+40     	; 0x15e6 <__addsf3x+0x96>
    15be:	ff 0f       	add	r31, r31
    15c0:	bb 1f       	adc	r27, r27
    15c2:	66 1f       	adc	r22, r22
    15c4:	77 1f       	adc	r23, r23
    15c6:	88 1f       	adc	r24, r24
    15c8:	c2 f7       	brpl	.-16     	; 0x15ba <__addsf3x+0x6a>
    15ca:	0e c0       	rjmp	.+28     	; 0x15e8 <__addsf3x+0x98>
    15cc:	ba 0f       	add	r27, r26
    15ce:	62 1f       	adc	r22, r18
    15d0:	73 1f       	adc	r23, r19
    15d2:	84 1f       	adc	r24, r20
    15d4:	48 f4       	brcc	.+18     	; 0x15e8 <__addsf3x+0x98>
    15d6:	87 95       	ror	r24
    15d8:	77 95       	ror	r23
    15da:	67 95       	ror	r22
    15dc:	b7 95       	ror	r27
    15de:	f7 95       	ror	r31
    15e0:	9e 3f       	cpi	r25, 0xFE	; 254
    15e2:	08 f0       	brcs	.+2      	; 0x15e6 <__addsf3x+0x96>
    15e4:	b3 cf       	rjmp	.-154    	; 0x154c <__addsf3+0x1e>
    15e6:	93 95       	inc	r25
    15e8:	88 0f       	add	r24, r24
    15ea:	08 f0       	brcs	.+2      	; 0x15ee <__addsf3x+0x9e>
    15ec:	99 27       	eor	r25, r25
    15ee:	ee 0f       	add	r30, r30
    15f0:	97 95       	ror	r25
    15f2:	87 95       	ror	r24
    15f4:	08 95       	ret

000015f6 <__fixunssfsi>:
    15f6:	98 d0       	rcall	.+304    	; 0x1728 <__fp_splitA>
    15f8:	88 f0       	brcs	.+34     	; 0x161c <__fixunssfsi+0x26>
    15fa:	9f 57       	subi	r25, 0x7F	; 127
    15fc:	90 f0       	brcs	.+36     	; 0x1622 <__fixunssfsi+0x2c>
    15fe:	b9 2f       	mov	r27, r25
    1600:	99 27       	eor	r25, r25
    1602:	b7 51       	subi	r27, 0x17	; 23
    1604:	a0 f0       	brcs	.+40     	; 0x162e <__fixunssfsi+0x38>
    1606:	d1 f0       	breq	.+52     	; 0x163c <__fixunssfsi+0x46>
    1608:	66 0f       	add	r22, r22
    160a:	77 1f       	adc	r23, r23
    160c:	88 1f       	adc	r24, r24
    160e:	99 1f       	adc	r25, r25
    1610:	1a f0       	brmi	.+6      	; 0x1618 <__fixunssfsi+0x22>
    1612:	ba 95       	dec	r27
    1614:	c9 f7       	brne	.-14     	; 0x1608 <__fixunssfsi+0x12>
    1616:	12 c0       	rjmp	.+36     	; 0x163c <__fixunssfsi+0x46>
    1618:	b1 30       	cpi	r27, 0x01	; 1
    161a:	81 f0       	breq	.+32     	; 0x163c <__fixunssfsi+0x46>
    161c:	9f d0       	rcall	.+318    	; 0x175c <__fp_zero>
    161e:	b1 e0       	ldi	r27, 0x01	; 1
    1620:	08 95       	ret
    1622:	9c c0       	rjmp	.+312    	; 0x175c <__fp_zero>
    1624:	67 2f       	mov	r22, r23
    1626:	78 2f       	mov	r23, r24
    1628:	88 27       	eor	r24, r24
    162a:	b8 5f       	subi	r27, 0xF8	; 248
    162c:	39 f0       	breq	.+14     	; 0x163c <__fixunssfsi+0x46>
    162e:	b9 3f       	cpi	r27, 0xF9	; 249
    1630:	cc f3       	brlt	.-14     	; 0x1624 <__fixunssfsi+0x2e>
    1632:	86 95       	lsr	r24
    1634:	77 95       	ror	r23
    1636:	67 95       	ror	r22
    1638:	b3 95       	inc	r27
    163a:	d9 f7       	brne	.-10     	; 0x1632 <__fixunssfsi+0x3c>
    163c:	3e f4       	brtc	.+14     	; 0x164c <__fixunssfsi+0x56>
    163e:	90 95       	com	r25
    1640:	80 95       	com	r24
    1642:	70 95       	com	r23
    1644:	61 95       	neg	r22
    1646:	7f 4f       	sbci	r23, 0xFF	; 255
    1648:	8f 4f       	sbci	r24, 0xFF	; 255
    164a:	9f 4f       	sbci	r25, 0xFF	; 255
    164c:	08 95       	ret

0000164e <__floatunsisf>:
    164e:	e8 94       	clt
    1650:	09 c0       	rjmp	.+18     	; 0x1664 <__floatsisf+0x12>

00001652 <__floatsisf>:
    1652:	97 fb       	bst	r25, 7
    1654:	3e f4       	brtc	.+14     	; 0x1664 <__floatsisf+0x12>
    1656:	90 95       	com	r25
    1658:	80 95       	com	r24
    165a:	70 95       	com	r23
    165c:	61 95       	neg	r22
    165e:	7f 4f       	sbci	r23, 0xFF	; 255
    1660:	8f 4f       	sbci	r24, 0xFF	; 255
    1662:	9f 4f       	sbci	r25, 0xFF	; 255
    1664:	99 23       	and	r25, r25
    1666:	a9 f0       	breq	.+42     	; 0x1692 <__floatsisf+0x40>
    1668:	f9 2f       	mov	r31, r25
    166a:	96 e9       	ldi	r25, 0x96	; 150
    166c:	bb 27       	eor	r27, r27
    166e:	93 95       	inc	r25
    1670:	f6 95       	lsr	r31
    1672:	87 95       	ror	r24
    1674:	77 95       	ror	r23
    1676:	67 95       	ror	r22
    1678:	b7 95       	ror	r27
    167a:	f1 11       	cpse	r31, r1
    167c:	f8 cf       	rjmp	.-16     	; 0x166e <__floatsisf+0x1c>
    167e:	fa f4       	brpl	.+62     	; 0x16be <__floatsisf+0x6c>
    1680:	bb 0f       	add	r27, r27
    1682:	11 f4       	brne	.+4      	; 0x1688 <__floatsisf+0x36>
    1684:	60 ff       	sbrs	r22, 0
    1686:	1b c0       	rjmp	.+54     	; 0x16be <__floatsisf+0x6c>
    1688:	6f 5f       	subi	r22, 0xFF	; 255
    168a:	7f 4f       	sbci	r23, 0xFF	; 255
    168c:	8f 4f       	sbci	r24, 0xFF	; 255
    168e:	9f 4f       	sbci	r25, 0xFF	; 255
    1690:	16 c0       	rjmp	.+44     	; 0x16be <__floatsisf+0x6c>
    1692:	88 23       	and	r24, r24
    1694:	11 f0       	breq	.+4      	; 0x169a <__floatsisf+0x48>
    1696:	96 e9       	ldi	r25, 0x96	; 150
    1698:	11 c0       	rjmp	.+34     	; 0x16bc <__floatsisf+0x6a>
    169a:	77 23       	and	r23, r23
    169c:	21 f0       	breq	.+8      	; 0x16a6 <__floatsisf+0x54>
    169e:	9e e8       	ldi	r25, 0x8E	; 142
    16a0:	87 2f       	mov	r24, r23
    16a2:	76 2f       	mov	r23, r22
    16a4:	05 c0       	rjmp	.+10     	; 0x16b0 <__floatsisf+0x5e>
    16a6:	66 23       	and	r22, r22
    16a8:	71 f0       	breq	.+28     	; 0x16c6 <__floatsisf+0x74>
    16aa:	96 e8       	ldi	r25, 0x86	; 134
    16ac:	86 2f       	mov	r24, r22
    16ae:	70 e0       	ldi	r23, 0x00	; 0
    16b0:	60 e0       	ldi	r22, 0x00	; 0
    16b2:	2a f0       	brmi	.+10     	; 0x16be <__floatsisf+0x6c>
    16b4:	9a 95       	dec	r25
    16b6:	66 0f       	add	r22, r22
    16b8:	77 1f       	adc	r23, r23
    16ba:	88 1f       	adc	r24, r24
    16bc:	da f7       	brpl	.-10     	; 0x16b4 <__floatsisf+0x62>
    16be:	88 0f       	add	r24, r24
    16c0:	96 95       	lsr	r25
    16c2:	87 95       	ror	r24
    16c4:	97 f9       	bld	r25, 7
    16c6:	08 95       	ret

000016c8 <__fp_inf>:
    16c8:	97 f9       	bld	r25, 7
    16ca:	9f 67       	ori	r25, 0x7F	; 127
    16cc:	80 e8       	ldi	r24, 0x80	; 128
    16ce:	70 e0       	ldi	r23, 0x00	; 0
    16d0:	60 e0       	ldi	r22, 0x00	; 0
    16d2:	08 95       	ret

000016d4 <__fp_nan>:
    16d4:	9f ef       	ldi	r25, 0xFF	; 255
    16d6:	80 ec       	ldi	r24, 0xC0	; 192
    16d8:	08 95       	ret

000016da <__fp_pscA>:
    16da:	00 24       	eor	r0, r0
    16dc:	0a 94       	dec	r0
    16de:	16 16       	cp	r1, r22
    16e0:	17 06       	cpc	r1, r23
    16e2:	18 06       	cpc	r1, r24
    16e4:	09 06       	cpc	r0, r25
    16e6:	08 95       	ret

000016e8 <__fp_pscB>:
    16e8:	00 24       	eor	r0, r0
    16ea:	0a 94       	dec	r0
    16ec:	12 16       	cp	r1, r18
    16ee:	13 06       	cpc	r1, r19
    16f0:	14 06       	cpc	r1, r20
    16f2:	05 06       	cpc	r0, r21
    16f4:	08 95       	ret

000016f6 <__fp_round>:
    16f6:	09 2e       	mov	r0, r25
    16f8:	03 94       	inc	r0
    16fa:	00 0c       	add	r0, r0
    16fc:	11 f4       	brne	.+4      	; 0x1702 <__fp_round+0xc>
    16fe:	88 23       	and	r24, r24
    1700:	52 f0       	brmi	.+20     	; 0x1716 <__fp_round+0x20>
    1702:	bb 0f       	add	r27, r27
    1704:	40 f4       	brcc	.+16     	; 0x1716 <__fp_round+0x20>
    1706:	bf 2b       	or	r27, r31
    1708:	11 f4       	brne	.+4      	; 0x170e <__fp_round+0x18>
    170a:	60 ff       	sbrs	r22, 0
    170c:	04 c0       	rjmp	.+8      	; 0x1716 <__fp_round+0x20>
    170e:	6f 5f       	subi	r22, 0xFF	; 255
    1710:	7f 4f       	sbci	r23, 0xFF	; 255
    1712:	8f 4f       	sbci	r24, 0xFF	; 255
    1714:	9f 4f       	sbci	r25, 0xFF	; 255
    1716:	08 95       	ret

00001718 <__fp_split3>:
    1718:	57 fd       	sbrc	r21, 7
    171a:	90 58       	subi	r25, 0x80	; 128
    171c:	44 0f       	add	r20, r20
    171e:	55 1f       	adc	r21, r21
    1720:	59 f0       	breq	.+22     	; 0x1738 <__fp_splitA+0x10>
    1722:	5f 3f       	cpi	r21, 0xFF	; 255
    1724:	71 f0       	breq	.+28     	; 0x1742 <__fp_splitA+0x1a>
    1726:	47 95       	ror	r20

00001728 <__fp_splitA>:
    1728:	88 0f       	add	r24, r24
    172a:	97 fb       	bst	r25, 7
    172c:	99 1f       	adc	r25, r25
    172e:	61 f0       	breq	.+24     	; 0x1748 <__fp_splitA+0x20>
    1730:	9f 3f       	cpi	r25, 0xFF	; 255
    1732:	79 f0       	breq	.+30     	; 0x1752 <__fp_splitA+0x2a>
    1734:	87 95       	ror	r24
    1736:	08 95       	ret
    1738:	12 16       	cp	r1, r18
    173a:	13 06       	cpc	r1, r19
    173c:	14 06       	cpc	r1, r20
    173e:	55 1f       	adc	r21, r21
    1740:	f2 cf       	rjmp	.-28     	; 0x1726 <__fp_split3+0xe>
    1742:	46 95       	lsr	r20
    1744:	f1 df       	rcall	.-30     	; 0x1728 <__fp_splitA>
    1746:	08 c0       	rjmp	.+16     	; 0x1758 <__fp_splitA+0x30>
    1748:	16 16       	cp	r1, r22
    174a:	17 06       	cpc	r1, r23
    174c:	18 06       	cpc	r1, r24
    174e:	99 1f       	adc	r25, r25
    1750:	f1 cf       	rjmp	.-30     	; 0x1734 <__fp_splitA+0xc>
    1752:	86 95       	lsr	r24
    1754:	71 05       	cpc	r23, r1
    1756:	61 05       	cpc	r22, r1
    1758:	08 94       	sec
    175a:	08 95       	ret

0000175c <__fp_zero>:
    175c:	e8 94       	clt

0000175e <__fp_szero>:
    175e:	bb 27       	eor	r27, r27
    1760:	66 27       	eor	r22, r22
    1762:	77 27       	eor	r23, r23
    1764:	cb 01       	movw	r24, r22
    1766:	97 f9       	bld	r25, 7
    1768:	08 95       	ret

0000176a <__mulsf3>:
    176a:	0b d0       	rcall	.+22     	; 0x1782 <__mulsf3x>
    176c:	c4 cf       	rjmp	.-120    	; 0x16f6 <__fp_round>
    176e:	b5 df       	rcall	.-150    	; 0x16da <__fp_pscA>
    1770:	28 f0       	brcs	.+10     	; 0x177c <__mulsf3+0x12>
    1772:	ba df       	rcall	.-140    	; 0x16e8 <__fp_pscB>
    1774:	18 f0       	brcs	.+6      	; 0x177c <__mulsf3+0x12>
    1776:	95 23       	and	r25, r21
    1778:	09 f0       	breq	.+2      	; 0x177c <__mulsf3+0x12>
    177a:	a6 cf       	rjmp	.-180    	; 0x16c8 <__fp_inf>
    177c:	ab cf       	rjmp	.-170    	; 0x16d4 <__fp_nan>
    177e:	11 24       	eor	r1, r1
    1780:	ee cf       	rjmp	.-36     	; 0x175e <__fp_szero>

00001782 <__mulsf3x>:
    1782:	ca df       	rcall	.-108    	; 0x1718 <__fp_split3>
    1784:	a0 f3       	brcs	.-24     	; 0x176e <__mulsf3+0x4>

00001786 <__mulsf3_pse>:
    1786:	95 9f       	mul	r25, r21
    1788:	d1 f3       	breq	.-12     	; 0x177e <__mulsf3+0x14>
    178a:	95 0f       	add	r25, r21
    178c:	50 e0       	ldi	r21, 0x00	; 0
    178e:	55 1f       	adc	r21, r21
    1790:	62 9f       	mul	r22, r18
    1792:	f0 01       	movw	r30, r0
    1794:	72 9f       	mul	r23, r18
    1796:	bb 27       	eor	r27, r27
    1798:	f0 0d       	add	r31, r0
    179a:	b1 1d       	adc	r27, r1
    179c:	63 9f       	mul	r22, r19
    179e:	aa 27       	eor	r26, r26
    17a0:	f0 0d       	add	r31, r0
    17a2:	b1 1d       	adc	r27, r1
    17a4:	aa 1f       	adc	r26, r26
    17a6:	64 9f       	mul	r22, r20
    17a8:	66 27       	eor	r22, r22
    17aa:	b0 0d       	add	r27, r0
    17ac:	a1 1d       	adc	r26, r1
    17ae:	66 1f       	adc	r22, r22
    17b0:	82 9f       	mul	r24, r18
    17b2:	22 27       	eor	r18, r18
    17b4:	b0 0d       	add	r27, r0
    17b6:	a1 1d       	adc	r26, r1
    17b8:	62 1f       	adc	r22, r18
    17ba:	73 9f       	mul	r23, r19
    17bc:	b0 0d       	add	r27, r0
    17be:	a1 1d       	adc	r26, r1
    17c0:	62 1f       	adc	r22, r18
    17c2:	83 9f       	mul	r24, r19
    17c4:	a0 0d       	add	r26, r0
    17c6:	61 1d       	adc	r22, r1
    17c8:	22 1f       	adc	r18, r18
    17ca:	74 9f       	mul	r23, r20
    17cc:	33 27       	eor	r19, r19
    17ce:	a0 0d       	add	r26, r0
    17d0:	61 1d       	adc	r22, r1
    17d2:	23 1f       	adc	r18, r19
    17d4:	84 9f       	mul	r24, r20
    17d6:	60 0d       	add	r22, r0
    17d8:	21 1d       	adc	r18, r1
    17da:	82 2f       	mov	r24, r18
    17dc:	76 2f       	mov	r23, r22
    17de:	6a 2f       	mov	r22, r26
    17e0:	11 24       	eor	r1, r1
    17e2:	9f 57       	subi	r25, 0x7F	; 127
    17e4:	50 40       	sbci	r21, 0x00	; 0
    17e6:	8a f0       	brmi	.+34     	; 0x180a <__mulsf3_pse+0x84>
    17e8:	e1 f0       	breq	.+56     	; 0x1822 <__mulsf3_pse+0x9c>
    17ea:	88 23       	and	r24, r24
    17ec:	4a f0       	brmi	.+18     	; 0x1800 <__mulsf3_pse+0x7a>
    17ee:	ee 0f       	add	r30, r30
    17f0:	ff 1f       	adc	r31, r31
    17f2:	bb 1f       	adc	r27, r27
    17f4:	66 1f       	adc	r22, r22
    17f6:	77 1f       	adc	r23, r23
    17f8:	88 1f       	adc	r24, r24
    17fa:	91 50       	subi	r25, 0x01	; 1
    17fc:	50 40       	sbci	r21, 0x00	; 0
    17fe:	a9 f7       	brne	.-22     	; 0x17ea <__mulsf3_pse+0x64>
    1800:	9e 3f       	cpi	r25, 0xFE	; 254
    1802:	51 05       	cpc	r21, r1
    1804:	70 f0       	brcs	.+28     	; 0x1822 <__mulsf3_pse+0x9c>
    1806:	60 cf       	rjmp	.-320    	; 0x16c8 <__fp_inf>
    1808:	aa cf       	rjmp	.-172    	; 0x175e <__fp_szero>
    180a:	5f 3f       	cpi	r21, 0xFF	; 255
    180c:	ec f3       	brlt	.-6      	; 0x1808 <__mulsf3_pse+0x82>
    180e:	98 3e       	cpi	r25, 0xE8	; 232
    1810:	dc f3       	brlt	.-10     	; 0x1808 <__mulsf3_pse+0x82>
    1812:	86 95       	lsr	r24
    1814:	77 95       	ror	r23
    1816:	67 95       	ror	r22
    1818:	b7 95       	ror	r27
    181a:	f7 95       	ror	r31
    181c:	e7 95       	ror	r30
    181e:	9f 5f       	subi	r25, 0xFF	; 255
    1820:	c1 f7       	brne	.-16     	; 0x1812 <__mulsf3_pse+0x8c>
    1822:	fe 2b       	or	r31, r30
    1824:	88 0f       	add	r24, r24
    1826:	91 1d       	adc	r25, r1
    1828:	96 95       	lsr	r25
    182a:	87 95       	ror	r24
    182c:	97 f9       	bld	r25, 7
    182e:	08 95       	ret

00001830 <__divmodsi4>:
    1830:	05 2e       	mov	r0, r21
    1832:	97 fb       	bst	r25, 7
    1834:	16 f4       	brtc	.+4      	; 0x183a <__divmodsi4+0xa>
    1836:	00 94       	com	r0
    1838:	06 d0       	rcall	.+12     	; 0x1846 <__divmodsi4_neg1>
    183a:	57 fd       	sbrc	r21, 7
    183c:	0c d0       	rcall	.+24     	; 0x1856 <__divmodsi4_neg2>
    183e:	1f d0       	rcall	.+62     	; 0x187e <__udivmodsi4>
    1840:	07 fc       	sbrc	r0, 7
    1842:	09 d0       	rcall	.+18     	; 0x1856 <__divmodsi4_neg2>
    1844:	7e f4       	brtc	.+30     	; 0x1864 <__divmodsi4_exit>

00001846 <__divmodsi4_neg1>:
    1846:	90 95       	com	r25
    1848:	80 95       	com	r24
    184a:	70 95       	com	r23
    184c:	61 95       	neg	r22
    184e:	7f 4f       	sbci	r23, 0xFF	; 255
    1850:	8f 4f       	sbci	r24, 0xFF	; 255
    1852:	9f 4f       	sbci	r25, 0xFF	; 255
    1854:	08 95       	ret

00001856 <__divmodsi4_neg2>:
    1856:	50 95       	com	r21
    1858:	40 95       	com	r20
    185a:	30 95       	com	r19
    185c:	21 95       	neg	r18
    185e:	3f 4f       	sbci	r19, 0xFF	; 255
    1860:	4f 4f       	sbci	r20, 0xFF	; 255
    1862:	5f 4f       	sbci	r21, 0xFF	; 255

00001864 <__divmodsi4_exit>:
    1864:	08 95       	ret

00001866 <__umulhisi3>:
    1866:	a2 9f       	mul	r26, r18
    1868:	b0 01       	movw	r22, r0
    186a:	b3 9f       	mul	r27, r19
    186c:	c0 01       	movw	r24, r0
    186e:	a3 9f       	mul	r26, r19
    1870:	01 d0       	rcall	.+2      	; 0x1874 <__umulhisi3+0xe>
    1872:	b2 9f       	mul	r27, r18
    1874:	70 0d       	add	r23, r0
    1876:	81 1d       	adc	r24, r1
    1878:	11 24       	eor	r1, r1
    187a:	91 1d       	adc	r25, r1
    187c:	08 95       	ret

0000187e <__udivmodsi4>:
    187e:	a1 e2       	ldi	r26, 0x21	; 33
    1880:	1a 2e       	mov	r1, r26
    1882:	aa 1b       	sub	r26, r26
    1884:	bb 1b       	sub	r27, r27
    1886:	fd 01       	movw	r30, r26
    1888:	0d c0       	rjmp	.+26     	; 0x18a4 <__udivmodsi4_ep>

0000188a <__udivmodsi4_loop>:
    188a:	aa 1f       	adc	r26, r26
    188c:	bb 1f       	adc	r27, r27
    188e:	ee 1f       	adc	r30, r30
    1890:	ff 1f       	adc	r31, r31
    1892:	a2 17       	cp	r26, r18
    1894:	b3 07       	cpc	r27, r19
    1896:	e4 07       	cpc	r30, r20
    1898:	f5 07       	cpc	r31, r21
    189a:	20 f0       	brcs	.+8      	; 0x18a4 <__udivmodsi4_ep>
    189c:	a2 1b       	sub	r26, r18
    189e:	b3 0b       	sbc	r27, r19
    18a0:	e4 0b       	sbc	r30, r20
    18a2:	f5 0b       	sbc	r31, r21

000018a4 <__udivmodsi4_ep>:
    18a4:	66 1f       	adc	r22, r22
    18a6:	77 1f       	adc	r23, r23
    18a8:	88 1f       	adc	r24, r24
    18aa:	99 1f       	adc	r25, r25
    18ac:	1a 94       	dec	r1
    18ae:	69 f7       	brne	.-38     	; 0x188a <__udivmodsi4_loop>
    18b0:	60 95       	com	r22
    18b2:	70 95       	com	r23
    18b4:	80 95       	com	r24
    18b6:	90 95       	com	r25
    18b8:	9b 01       	movw	r18, r22
    18ba:	ac 01       	movw	r20, r24
    18bc:	bd 01       	movw	r22, r26
    18be:	cf 01       	movw	r24, r30
    18c0:	08 95       	ret

000018c2 <_exit>:
    18c2:	f8 94       	cli

000018c4 <__stop_program>:
    18c4:	ff cf       	rjmp	.-2      	; 0x18c4 <__stop_program>
