
pid1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001a0c  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000060  00800060  00001a0c  00001ac0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000a5  008000c0  008000c0  00001b20  2**0
                  ALLOC
  3 .eeprom       0000000a  00810000  00810000  00001b20  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         000007d4  00000000  00000000  00001b2c  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      000000e3  00000000  00000000  00002300  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      0000002f  00000000  00000000  000023e3  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 000003d0  00000000  00000000  00002412  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   000036a0  00000000  00000000  000027e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00001341  00000000  00000000  00005e82  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   000017cd  00000000  00000000  000071c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  000008f4  00000000  00000000  00008990  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000f12  00000000  00000000  00009284  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00001c01  00000000  00000000  0000a196  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000310  00000000  00000000  0000bd97  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	93 c0       	rjmp	.+294    	; 0x128 <__ctors_end>
       2:	ad c0       	rjmp	.+346    	; 0x15e <__bad_interrupt>
       4:	ac c0       	rjmp	.+344    	; 0x15e <__bad_interrupt>
       6:	17 cc       	rjmp	.-2002   	; 0xfffff836 <__eeprom_end+0xff7ef82c>
       8:	aa c0       	rjmp	.+340    	; 0x15e <__bad_interrupt>
       a:	a9 c0       	rjmp	.+338    	; 0x15e <__bad_interrupt>
       c:	a8 c0       	rjmp	.+336    	; 0x15e <__bad_interrupt>
       e:	a7 c0       	rjmp	.+334    	; 0x15e <__bad_interrupt>
      10:	a6 c0       	rjmp	.+332    	; 0x15e <__bad_interrupt>
      12:	a8 ca       	rjmp	.-2736   	; 0xfffff564 <__eeprom_end+0xff7ef55a>
      14:	a4 c0       	rjmp	.+328    	; 0x15e <__bad_interrupt>
      16:	a3 c0       	rjmp	.+326    	; 0x15e <__bad_interrupt>
      18:	a2 c0       	rjmp	.+324    	; 0x15e <__bad_interrupt>
      1a:	a1 c0       	rjmp	.+322    	; 0x15e <__bad_interrupt>
      1c:	b5 c1       	rjmp	.+874    	; 0x388 <__vector_14>
      1e:	9f c0       	rjmp	.+318    	; 0x15e <__bad_interrupt>
      20:	7f ca       	rjmp	.-2818   	; 0xfffff520 <__eeprom_end+0xff7ef516>
      22:	9d c0       	rjmp	.+314    	; 0x15e <__bad_interrupt>
      24:	9c c0       	rjmp	.+312    	; 0x15e <__bad_interrupt>

00000026 <menuFunctionSet>:
      26:	01 6a 08 87 06 67 07 03 64 07 16 08 f7 05 02 13     .j...g..d.......
      36:	08 ae 07 5c 07 05 4a 07 69 07 00 00 0b fd 05 69     ...\..J.i......i
      46:	07 0b 06 04 4a 07 36 06 00 00 0c fd 05 36 06 0b     ....J.6......6..
      56:	06 06 52 07 fb 06 00 00 09 fd 05 fb 06 0b 06 07     ..R.............
      66:	52 07 b2 06 00 00 0a fd 05 b2 06 0b 06 08 29 06     R.............).
      76:	14 06 00 00 0d 1c 06 14 06 00 00 0e 44 07 18 06     ............D...
      86:	11 06                                               ..

00000088 <menuJumpSet>:
      88:	01 06 00 03 a8 01 00 01 02 40 01 00 02 05 28 02     .........@....(.
      98:	00 01 01 80 03 00 83 01 40 05 00 82 01 00 05 04     ........@.......
      a8:	00 04 68 05 02 00 07 a8 05 00 01 0b 28 0b 00 83     ..h.........(...
      b8:	05 28 04 00 82 01 00 04 04 00 06 68 04 02 00 05     .(.........h....
      c8:	a8 04 00 01 0c 28 0c 00 83 04 28 06 00 82 01 00     .....(....(.....
      d8:	06 04 00 07 68 06 02 00 04 a8 06 00 01 09 00 07     ....h...........
      e8:	00 82 01 00 07 04 00 05 68 07 02 00 06 a8 07 00     ........h.......
      f8:	01 0a 00 09 00 02 06 28 09 00 01 08 14 08 00 83     .......(........
     108:	01 00 0a 00 02 07 28 0a 00 01 0d 14 0d 00 83 01     ......(.........
     118:	00 01 00 40 0e 00 02 00 40 0e 00 0e 76 01 01 00     ...@....@...v...

00000128 <__ctors_end>:
     128:	11 24       	eor	r1, r1
     12a:	1f be       	out	0x3f, r1	; 63
     12c:	cf e5       	ldi	r28, 0x5F	; 95
     12e:	d4 e0       	ldi	r29, 0x04	; 4
     130:	de bf       	out	0x3e, r29	; 62
     132:	cd bf       	out	0x3d, r28	; 61

00000134 <__do_copy_data>:
     134:	10 e0       	ldi	r17, 0x00	; 0
     136:	a0 e6       	ldi	r26, 0x60	; 96
     138:	b0 e0       	ldi	r27, 0x00	; 0
     13a:	ec e0       	ldi	r30, 0x0C	; 12
     13c:	fa e1       	ldi	r31, 0x1A	; 26
     13e:	02 c0       	rjmp	.+4      	; 0x144 <__do_copy_data+0x10>
     140:	05 90       	lpm	r0, Z+
     142:	0d 92       	st	X+, r0
     144:	a0 3c       	cpi	r26, 0xC0	; 192
     146:	b1 07       	cpc	r27, r17
     148:	d9 f7       	brne	.-10     	; 0x140 <__do_copy_data+0xc>

0000014a <__do_clear_bss>:
     14a:	21 e0       	ldi	r18, 0x01	; 1
     14c:	a0 ec       	ldi	r26, 0xC0	; 192
     14e:	b0 e0       	ldi	r27, 0x00	; 0
     150:	01 c0       	rjmp	.+2      	; 0x154 <.do_clear_bss_start>

00000152 <.do_clear_bss_loop>:
     152:	1d 92       	st	X+, r1

00000154 <.do_clear_bss_start>:
     154:	a5 36       	cpi	r26, 0x65	; 101
     156:	b2 07       	cpc	r27, r18
     158:	e1 f7       	brne	.-8      	; 0x152 <.do_clear_bss_loop>
     15a:	cd d8       	rcall	.-3686   	; 0xfffff2f6 <__eeprom_end+0xff7ef2ec>
     15c:	55 cc       	rjmp	.-1878   	; 0xfffffa08 <__eeprom_end+0xff7ef9fe>

0000015e <__bad_interrupt>:
     15e:	50 cf       	rjmp	.-352    	; 0x0 <__vectors>

00000160 <conv_ADC_to_Celsius>:
//---------------------------------------------//
//---------------------------------------------//


uint16_t conv_ADC_to_Celsius(uint16_t adc_value)
{	
     160:	0f 93       	push	r16
     162:	1f 93       	push	r17
	return (uint16_t)(((int32_t)adc_value * k_norm + offset_norm) / (COEFF_SCALE));
     164:	20 91 c0 00 	lds	r18, 0x00C0
     168:	30 91 c1 00 	lds	r19, 0x00C1
     16c:	40 91 c2 00 	lds	r20, 0x00C2
     170:	50 91 c3 00 	lds	r21, 0x00C3
     174:	dc 01       	movw	r26, r24
     176:	2e dc       	rcall	.-1956   	; 0xfffff9d4 <__eeprom_end+0xff7ef9ca>
     178:	00 91 c4 00 	lds	r16, 0x00C4
     17c:	10 91 c5 00 	lds	r17, 0x00C5
     180:	20 91 c6 00 	lds	r18, 0x00C6
     184:	30 91 c7 00 	lds	r19, 0x00C7
     188:	60 0f       	add	r22, r16
     18a:	71 1f       	adc	r23, r17
     18c:	82 1f       	adc	r24, r18
     18e:	93 1f       	adc	r25, r19
     190:	28 ee       	ldi	r18, 0xE8	; 232
     192:	33 e0       	ldi	r19, 0x03	; 3
     194:	40 e0       	ldi	r20, 0x00	; 0
     196:	50 e0       	ldi	r21, 0x00	; 0
     198:	f0 db       	rcall	.-2080   	; 0xfffff97a <__eeprom_end+0xff7ef970>
}
     19a:	c9 01       	movw	r24, r18
     19c:	1f 91       	pop	r17
     19e:	0f 91       	pop	r16
     1a0:	08 95       	ret

000001a2 <conv_Celsius_to_ADC>:

uint16_t conv_Celsius_to_ADC(uint16_t degree_value)
{
     1a2:	0f 93       	push	r16
     1a4:	1f 93       	push	r17
	degree_value += 1;
     1a6:	9c 01       	movw	r18, r24
     1a8:	2f 5f       	subi	r18, 0xFF	; 255
     1aa:	3f 4f       	sbci	r19, 0xFF	; 255
	return (uint16_t)(((int32_t)degree_value * COEFF_SCALE - offset_norm) / k_norm);
     1ac:	a8 ee       	ldi	r26, 0xE8	; 232
     1ae:	b3 e0       	ldi	r27, 0x03	; 3
     1b0:	ff db       	rcall	.-2050   	; 0xfffff9b0 <__eeprom_end+0xff7ef9a6>
     1b2:	00 91 c4 00 	lds	r16, 0x00C4
     1b6:	10 91 c5 00 	lds	r17, 0x00C5
     1ba:	20 91 c6 00 	lds	r18, 0x00C6
     1be:	30 91 c7 00 	lds	r19, 0x00C7
     1c2:	60 1b       	sub	r22, r16
     1c4:	71 0b       	sbc	r23, r17
     1c6:	82 0b       	sbc	r24, r18
     1c8:	93 0b       	sbc	r25, r19
     1ca:	20 91 c0 00 	lds	r18, 0x00C0
     1ce:	30 91 c1 00 	lds	r19, 0x00C1
     1d2:	40 91 c2 00 	lds	r20, 0x00C2
     1d6:	50 91 c3 00 	lds	r21, 0x00C3
     1da:	cf db       	rcall	.-2146   	; 0xfffff97a <__eeprom_end+0xff7ef970>
}
     1dc:	c9 01       	movw	r24, r18
     1de:	1f 91       	pop	r17
     1e0:	0f 91       	pop	r16
     1e2:	08 95       	ret

000001e4 <calculateCoeffs>:

void calculateCoeffs(void)
{
     1e4:	8f 92       	push	r8
     1e6:	9f 92       	push	r9
     1e8:	af 92       	push	r10
     1ea:	bf 92       	push	r11
     1ec:	cf 92       	push	r12
     1ee:	df 92       	push	r13
     1f0:	ef 92       	push	r14
     1f2:	ff 92       	push	r15
     1f4:	cf 93       	push	r28
     1f6:	df 93       	push	r29
	k_norm = ((int32_t)(cpoint2 - cpoint1) * COEFF_SCALE) / ((int32_t)(cpoint2_adc - cpoint1_adc));
     1f8:	f0 90 31 01 	lds	r15, 0x0131
     1fc:	a0 91 51 01 	lds	r26, 0x0151
     200:	b0 e0       	ldi	r27, 0x00	; 0
     202:	af 19       	sub	r26, r15
     204:	b1 09       	sbc	r27, r1
     206:	c0 91 49 01 	lds	r28, 0x0149
     20a:	d0 91 4a 01 	lds	r29, 0x014A
     20e:	28 ee       	ldi	r18, 0xE8	; 232
     210:	33 e0       	ldi	r19, 0x03	; 3
     212:	da db       	rcall	.-2124   	; 0xfffff9c8 <__eeprom_end+0xff7ef9be>
     214:	20 91 4d 01 	lds	r18, 0x014D
     218:	30 91 4e 01 	lds	r19, 0x014E
     21c:	2c 1b       	sub	r18, r28
     21e:	3d 0b       	sbc	r19, r29
     220:	40 e0       	ldi	r20, 0x00	; 0
     222:	50 e0       	ldi	r21, 0x00	; 0
     224:	aa db       	rcall	.-2220   	; 0xfffff97a <__eeprom_end+0xff7ef970>
     226:	49 01       	movw	r8, r18
     228:	5a 01       	movw	r10, r20
     22a:	20 93 c0 00 	sts	0x00C0, r18
     22e:	30 93 c1 00 	sts	0x00C1, r19
     232:	40 93 c2 00 	sts	0x00C2, r20
     236:	50 93 c3 00 	sts	0x00C3, r21
	offset_norm = (int32_t)cpoint1 * COEFF_SCALE - (int32_t)cpoint1_adc * k_norm;
     23a:	2f 2d       	mov	r18, r15
     23c:	30 e0       	ldi	r19, 0x00	; 0
     23e:	a8 ee       	ldi	r26, 0xE8	; 232
     240:	b3 e0       	ldi	r27, 0x03	; 3
     242:	b6 db       	rcall	.-2196   	; 0xfffff9b0 <__eeprom_end+0xff7ef9a6>
     244:	6b 01       	movw	r12, r22
     246:	7c 01       	movw	r14, r24
     248:	de 01       	movw	r26, r28
     24a:	a5 01       	movw	r20, r10
     24c:	94 01       	movw	r18, r8
     24e:	c2 db       	rcall	.-2172   	; 0xfffff9d4 <__eeprom_end+0xff7ef9ca>
     250:	c6 1a       	sub	r12, r22
     252:	d7 0a       	sbc	r13, r23
     254:	e8 0a       	sbc	r14, r24
     256:	f9 0a       	sbc	r15, r25
     258:	c0 92 c4 00 	sts	0x00C4, r12
     25c:	d0 92 c5 00 	sts	0x00C5, r13
     260:	e0 92 c6 00 	sts	0x00C6, r14
     264:	f0 92 c7 00 	sts	0x00C7, r15
}
     268:	df 91       	pop	r29
     26a:	cf 91       	pop	r28
     26c:	ff 90       	pop	r15
     26e:	ef 90       	pop	r14
     270:	df 90       	pop	r13
     272:	cf 90       	pop	r12
     274:	bf 90       	pop	r11
     276:	af 90       	pop	r10
     278:	9f 90       	pop	r9
     27a:	8f 90       	pop	r8
     27c:	08 95       	ret

0000027e <update_normalized_adc>:


void update_normalized_adc()
{
     27e:	cf 92       	push	r12
     280:	df 92       	push	r13
     282:	ef 92       	push	r14
     284:	ff 92       	push	r15
	// Disable interrupts from ADC - to save data integrity
	ACSR &= ~(1<<ACIE);	
     286:	43 98       	cbi	0x08, 3	; 8
}

// Get ring buffer normalized value
uint16_t getNormalizedRingU16(RingBufU16_t* bptr)
{
	return 	bptr->summ / bptr->length;
     288:	c0 90 63 00 	lds	r12, 0x0063
     28c:	d0 90 64 00 	lds	r13, 0x0064
     290:	e0 90 65 00 	lds	r14, 0x0065
     294:	f0 90 66 00 	lds	r15, 0x0066
     298:	20 91 60 00 	lds	r18, 0x0060
     29c:	30 e0       	ldi	r19, 0x00	; 0
     29e:	40 e0       	ldi	r20, 0x00	; 0
     2a0:	50 e0       	ldi	r21, 0x00	; 0
     2a2:	c7 01       	movw	r24, r14
     2a4:	b6 01       	movw	r22, r12
     2a6:	47 db       	rcall	.-2418   	; 0xfffff936 <__eeprom_end+0xff7ef92c>
     2a8:	30 93 2e 01 	sts	0x012E, r19
     2ac:	20 93 2d 01 	sts	0x012D, r18
{
	// Disable interrupts from ADC - to save data integrity
	ACSR &= ~(1<<ACIE);	
	// Get normalized mean window summ
	adc_normalized = (uint16_t)getNormalizedRingU16(&ringBufADC);
	adc_oversampled = ringBufADC.summ >> 2;
     2b0:	82 e0       	ldi	r24, 0x02	; 2
     2b2:	f6 94       	lsr	r15
     2b4:	e7 94       	ror	r14
     2b6:	d7 94       	ror	r13
     2b8:	c7 94       	ror	r12
     2ba:	8a 95       	dec	r24
     2bc:	d1 f7       	brne	.-12     	; 0x2b2 <update_normalized_adc+0x34>
     2be:	d0 92 04 01 	sts	0x0104, r13
     2c2:	c0 92 03 01 	sts	0x0103, r12
	// Enable interrupts from ADC
	ACSR |= (1<<ACIE);
     2c6:	43 9a       	sbi	0x08, 3	; 8
}
     2c8:	ff 90       	pop	r15
     2ca:	ef 90       	pop	r14
     2cc:	df 90       	pop	r13
     2ce:	cf 90       	pop	r12
     2d0:	08 95       	ret

000002d2 <update_Celsius>:

void update_Celsius(void)
{
	// Convert to Celsius degree
	adc_celsius = conv_ADC_to_Celsius(adc_normalized);
     2d2:	80 91 2d 01 	lds	r24, 0x012D
     2d6:	90 91 2e 01 	lds	r25, 0x012E
     2da:	42 df       	rcall	.-380    	; 0x160 <conv_ADC_to_Celsius>
     2dc:	90 93 30 01 	sts	0x0130, r25
     2e0:	80 93 2f 01 	sts	0x012F, r24
     2e4:	08 95       	ret

000002e6 <addToRingU16>:
//---------------------------------------------//
//---------------------------------------------//

// Ring buffer main function - add new data and update summ
void addToRingU16(RingBufU16_t* bptr, uint16_t sample)
{
     2e6:	ff 92       	push	r15
     2e8:	0f 93       	push	r16
     2ea:	1f 93       	push	r17
     2ec:	cf 93       	push	r28
     2ee:	df 93       	push	r29
     2f0:	fc 01       	movw	r30, r24
     2f2:	cb 01       	movw	r24, r22
	if (bptr->stat == RNORM)
     2f4:	20 85       	ldd	r18, Z+8	; 0x08
     2f6:	21 11       	cpse	r18, r1
     2f8:	18 c0       	rjmp	.+48     	; 0x32a <addToRingU16+0x44>
	{
		bptr->summ -= bptr->data[bptr->curr_pos];
     2fa:	27 81       	ldd	r18, Z+7	; 0x07
     2fc:	41 81       	ldd	r20, Z+1	; 0x01
     2fe:	32 81       	ldd	r19, Z+2	; 0x02
     300:	a4 2f       	mov	r26, r20
     302:	b3 2f       	mov	r27, r19
     304:	a2 0f       	add	r26, r18
     306:	b1 1d       	adc	r27, r1
     308:	a2 0f       	add	r26, r18
     30a:	b1 1d       	adc	r27, r1
     30c:	2d 91       	ld	r18, X+
     30e:	3c 91       	ld	r19, X
     310:	43 81       	ldd	r20, Z+3	; 0x03
     312:	54 81       	ldd	r21, Z+4	; 0x04
     314:	65 81       	ldd	r22, Z+5	; 0x05
     316:	76 81       	ldd	r23, Z+6	; 0x06
     318:	42 1b       	sub	r20, r18
     31a:	53 0b       	sbc	r21, r19
     31c:	61 09       	sbc	r22, r1
     31e:	71 09       	sbc	r23, r1
     320:	43 83       	std	Z+3, r20	; 0x03
     322:	54 83       	std	Z+4, r21	; 0x04
     324:	65 83       	std	Z+5, r22	; 0x05
     326:	76 83       	std	Z+6, r23	; 0x06
     328:	05 c0       	rjmp	.+10     	; 0x334 <addToRingU16+0x4e>
	}
	else
	{
		bptr->curr_pos = 0;
     32a:	17 82       	std	Z+7, r1	; 0x07
		bptr->summ = 0;
     32c:	13 82       	std	Z+3, r1	; 0x03
     32e:	14 82       	std	Z+4, r1	; 0x04
     330:	15 82       	std	Z+5, r1	; 0x05
     332:	16 82       	std	Z+6, r1	; 0x06
	}
	do	
	{
		bptr->data[bptr->curr_pos++] = sample;
     334:	d1 81       	ldd	r29, Z+1	; 0x01
     336:	f2 80       	ldd	r15, Z+2	; 0x02
     338:	43 81       	ldd	r20, Z+3	; 0x03
     33a:	54 81       	ldd	r21, Z+4	; 0x04
     33c:	65 81       	ldd	r22, Z+5	; 0x05
     33e:	76 81       	ldd	r23, Z+6	; 0x06
		bptr->summ += sample;
     340:	8c 01       	movw	r16, r24
     342:	20 e0       	ldi	r18, 0x00	; 0
     344:	30 e0       	ldi	r19, 0x00	; 0
		bptr->curr_pos = 0;
		bptr->summ = 0;
	}
	do	
	{
		bptr->data[bptr->curr_pos++] = sample;
     346:	c7 81       	ldd	r28, Z+7	; 0x07
     348:	ad 2f       	mov	r26, r29
     34a:	bf 2d       	mov	r27, r15
     34c:	ac 0f       	add	r26, r28
     34e:	b1 1d       	adc	r27, r1
     350:	ac 0f       	add	r26, r28
     352:	b1 1d       	adc	r27, r1
     354:	8d 93       	st	X+, r24
     356:	9c 93       	st	X, r25
     358:	cf 5f       	subi	r28, 0xFF	; 255
     35a:	c7 83       	std	Z+7, r28	; 0x07
//---------------------------------------------//
//---------------------------------------------//
//---------------------------------------------//

// Ring buffer main function - add new data and update summ
void addToRingU16(RingBufU16_t* bptr, uint16_t sample)
     35c:	40 0f       	add	r20, r16
     35e:	51 1f       	adc	r21, r17
     360:	62 1f       	adc	r22, r18
     362:	73 1f       	adc	r23, r19
	}
	do	
	{
		bptr->data[bptr->curr_pos++] = sample;
		bptr->summ += sample;
		if (bptr->curr_pos == bptr->length)	
     364:	a0 81       	ld	r26, Z
     366:	ca 13       	cpse	r28, r26
     368:	02 c0       	rjmp	.+4      	; 0x36e <addToRingU16+0x88>
		{	
			bptr->curr_pos = 0;	
     36a:	17 82       	std	Z+7, r1	; 0x07
			bptr->stat = RNORM;
     36c:	10 86       	std	Z+8, r1	; 0x08
		}
	} 
	while (bptr->stat != RNORM);
     36e:	a0 85       	ldd	r26, Z+8	; 0x08
     370:	a1 11       	cpse	r26, r1
     372:	e9 cf       	rjmp	.-46     	; 0x346 <addToRingU16+0x60>
     374:	43 83       	std	Z+3, r20	; 0x03
     376:	54 83       	std	Z+4, r21	; 0x04
     378:	65 83       	std	Z+5, r22	; 0x05
     37a:	76 83       	std	Z+6, r23	; 0x06
}
     37c:	df 91       	pop	r29
     37e:	cf 91       	pop	r28
     380:	1f 91       	pop	r17
     382:	0f 91       	pop	r16
     384:	ff 90       	pop	r15
     386:	08 95       	ret

00000388 <__vector_14>:




ISR(ADC_vect)
{
     388:	1f 92       	push	r1
     38a:	0f 92       	push	r0
     38c:	0f b6       	in	r0, 0x3f	; 63
     38e:	0f 92       	push	r0
     390:	11 24       	eor	r1, r1
     392:	2f 93       	push	r18
     394:	3f 93       	push	r19
     396:	4f 93       	push	r20
     398:	5f 93       	push	r21
     39a:	6f 93       	push	r22
     39c:	7f 93       	push	r23
     39e:	8f 93       	push	r24
     3a0:	9f 93       	push	r25
     3a2:	af 93       	push	r26
     3a4:	bf 93       	push	r27
     3a6:	ef 93       	push	r30
     3a8:	ff 93       	push	r31
	// Get new sample
	uint16_t new_sample = 1024 - ADC;	
     3aa:	84 b1       	in	r24, 0x04	; 4
     3ac:	95 b1       	in	r25, 0x05	; 5
     3ae:	60 e0       	ldi	r22, 0x00	; 0
     3b0:	74 e0       	ldi	r23, 0x04	; 4
     3b2:	68 1b       	sub	r22, r24
     3b4:	79 0b       	sbc	r23, r25
	// Add new sample to the ring buffer
	addToRingU16(&ringBufADC, new_sample);
     3b6:	80 e6       	ldi	r24, 0x60	; 96
     3b8:	90 e0       	ldi	r25, 0x00	; 0
     3ba:	95 df       	rcall	.-214    	; 0x2e6 <addToRingU16>
}	
     3bc:	ff 91       	pop	r31
     3be:	ef 91       	pop	r30
     3c0:	bf 91       	pop	r27
     3c2:	af 91       	pop	r26
     3c4:	9f 91       	pop	r25
     3c6:	8f 91       	pop	r24
     3c8:	7f 91       	pop	r23
     3ca:	6f 91       	pop	r22
     3cc:	5f 91       	pop	r21
     3ce:	4f 91       	pop	r20
     3d0:	3f 91       	pop	r19
     3d2:	2f 91       	pop	r18
     3d4:	0f 90       	pop	r0
     3d6:	0f be       	out	0x3f, r0	; 63
     3d8:	0f 90       	pop	r0
     3da:	1f 90       	pop	r1
     3dc:	18 95       	reti

000003de <getNormalizedRingU16>:
}

// Get ring buffer normalized value
uint16_t getNormalizedRingU16(RingBufU16_t* bptr)
{
	return 	bptr->summ / bptr->length;
     3de:	fc 01       	movw	r30, r24
     3e0:	20 81       	ld	r18, Z
     3e2:	30 e0       	ldi	r19, 0x00	; 0
     3e4:	40 e0       	ldi	r20, 0x00	; 0
     3e6:	50 e0       	ldi	r21, 0x00	; 0
     3e8:	63 81       	ldd	r22, Z+3	; 0x03
     3ea:	74 81       	ldd	r23, Z+4	; 0x04
     3ec:	85 81       	ldd	r24, Z+5	; 0x05
     3ee:	96 81       	ldd	r25, Z+6	; 0x06
     3f0:	a2 da       	rcall	.-2748   	; 0xfffff936 <__eeprom_end+0xff7ef92c>
}
     3f2:	c9 01       	movw	r24, r18
     3f4:	08 95       	ret

000003f6 <process_buttons>:
	uint8_t raw_delayed_inv;
	static uint8_t press_timer = 0;
	uint8_t long_press_mask;
	uint8_t long_press_event_mask;
	
	raw_delayed = raw_current;
     3f6:	50 91 ce 00 	lds	r21, 0x00CE
	raw_delayed_inv = raw_current_inv;
     3fa:	30 91 69 00 	lds	r19, 0x0069
	raw_current = raw_button_state;
     3fe:	90 91 64 01 	lds	r25, 0x0164
     402:	90 93 ce 00 	sts	0x00CE, r25
	raw_current_inv = ~raw_current;
     406:	69 2f       	mov	r22, r25
     408:	60 95       	com	r22
     40a:	60 93 69 00 	sts	0x0069, r22
	
	// Must be before press_timer update
	long_press_mask = (press_timer >= LONG_PRESS_DELAY) ? 0xFF : 0x00;
     40e:	80 91 cf 00 	lds	r24, 0x00CF
     412:	8c 30       	cpi	r24, 0x0C	; 12
     414:	10 f0       	brcs	.+4      	; 0x41a <process_buttons+0x24>
     416:	2f ef       	ldi	r18, 0xFF	; 255
     418:	01 c0       	rjmp	.+2      	; 0x41c <process_buttons+0x26>
     41a:	20 e0       	ldi	r18, 0x00	; 0
	
	if (raw_delayed != raw_current)
     41c:	59 17       	cp	r21, r25
     41e:	19 f0       	breq	.+6      	; 0x426 <process_buttons+0x30>
	{
		press_timer = 0;
     420:	10 92 cf 00 	sts	0x00CF, r1
     424:	05 c0       	rjmp	.+10     	; 0x430 <process_buttons+0x3a>
	}
	else if (press_timer <= LONG_PRESS_DELAY)
     426:	8d 30       	cpi	r24, 0x0D	; 13
     428:	18 f4       	brcc	.+6      	; 0x430 <process_buttons+0x3a>
	{
		press_timer++;
     42a:	8f 5f       	subi	r24, 0xFF	; 255
     42c:	80 93 cf 00 	sts	0x00CF, r24
	}
	
	// Must after press_timer update
	long_press_event_mask = (press_timer == LONG_PRESS_DELAY) ? 0xFF : 0x00;
     430:	70 91 cf 00 	lds	r23, 0x00CF
     434:	7c 30       	cpi	r23, 0x0C	; 12
     436:	11 f4       	brne	.+4      	; 0x43c <process_buttons+0x46>
     438:	4f ef       	ldi	r20, 0xFF	; 255
     43a:	01 c0       	rjmp	.+2      	; 0x43e <process_buttons+0x48>
     43c:	40 e0       	ldi	r20, 0x00	; 0
			
	button_action_down = raw_current & raw_delayed_inv;
     43e:	89 2f       	mov	r24, r25
     440:	83 23       	and	r24, r19
     442:	80 93 cb 00 	sts	0x00CB, r24
			
	if (press_timer > REPEAT_DELAY)
     446:	77 30       	cpi	r23, 0x07	; 7
     448:	08 f0       	brcs	.+2      	; 0x44c <process_buttons+0x56>
		raw_delayed_inv |= 0xFF;
     44a:	3f ef       	ldi	r19, 0xFF	; 255
	
	button_action_rep = raw_current & raw_delayed_inv;
     44c:	39 23       	and	r19, r25
     44e:	30 93 ca 00 	sts	0x00CA, r19
	
	button_action_up_short = raw_current_inv & raw_delayed & ~long_press_mask;
     452:	20 95       	com	r18
     454:	56 23       	and	r21, r22
     456:	25 23       	and	r18, r21
     458:	20 93 c9 00 	sts	0x00C9, r18
	//button_action_up_long  = raw_current_inv & raw_delayed & long_press_mask;
	button_action_long  = raw_current & long_press_event_mask;
     45c:	49 23       	and	r20, r25
     45e:	40 93 c8 00 	sts	0x00C8, r20
	
	// Compose button state
	button_state = (button_action_down & (BD_MENU | BD_UP | BD_DOWN | BD_ROTFWD | BD_ROTREV | BD_HEATCTRL | BD_CYCLE));
     462:	87 7f       	andi	r24, 0xF7	; 247
     464:	90 e0       	ldi	r25, 0x00	; 0
	if (button_action_up_short & BD_MENU)
     466:	20 ff       	sbrs	r18, 0
     468:	01 c0       	rjmp	.+2      	; 0x46c <__stack+0xd>
		button_state |= BS_MENU;
     46a:	91 60       	ori	r25, 0x01	; 1
     46c:	90 93 cd 00 	sts	0x00CD, r25
     470:	80 93 cc 00 	sts	0x00CC, r24
	//if (button_action_up_long & BD_MENU)
	if (button_action_long & BD_MENU)
     474:	40 ff       	sbrs	r20, 0
     476:	09 c0       	rjmp	.+18     	; 0x48a <__stack+0x2b>
		button_state |= BL_MENU;
     478:	80 91 cc 00 	lds	r24, 0x00CC
     47c:	90 91 cd 00 	lds	r25, 0x00CD
     480:	92 60       	ori	r25, 0x02	; 2
     482:	90 93 cd 00 	sts	0x00CD, r25
     486:	80 93 cc 00 	sts	0x00CC, r24
	if (button_action_rep & BD_UP)
     48a:	31 ff       	sbrs	r19, 1
     48c:	09 c0       	rjmp	.+18     	; 0x4a0 <__stack+0x41>
		button_state |= BR_UP;	
     48e:	80 91 cc 00 	lds	r24, 0x00CC
     492:	90 91 cd 00 	lds	r25, 0x00CD
     496:	94 60       	ori	r25, 0x04	; 4
     498:	90 93 cd 00 	sts	0x00CD, r25
     49c:	80 93 cc 00 	sts	0x00CC, r24
	if (button_action_rep & BD_DOWN)
     4a0:	32 ff       	sbrs	r19, 2
     4a2:	09 c0       	rjmp	.+18     	; 0x4b6 <__stack+0x57>
		button_state |= BR_DOWN;
     4a4:	80 91 cc 00 	lds	r24, 0x00CC
     4a8:	90 91 cd 00 	lds	r25, 0x00CD
     4ac:	98 60       	ori	r25, 0x08	; 8
     4ae:	90 93 cd 00 	sts	0x00CD, r25
     4b2:	80 93 cc 00 	sts	0x00CC, r24
     4b6:	08 95       	ret

000004b8 <processRollControl>:
int16_t dbg_PID_output;


// Function to control motor rotation
void processRollControl(void)
{	
     4b8:	cf 93       	push	r28
//	static uint8_t beepMask = 0x00;
//	uint8_t nextBeepMask = 0xFF;
	static uint8_t force_rotate = 0;
	
	// Process auto power off control
	if (autoPowerOffState & AUTO_POFF_ACTIVE)
     4ba:	80 91 fc 00 	lds	r24, 0x00FC
     4be:	80 ff       	sbrs	r24, 0
     4c0:	0f c0       	rjmp	.+30     	; 0x4e0 <processRollControl+0x28>
	{
		stopCycleRolling(1);	
     4c2:	81 e0       	ldi	r24, 0x01	; 1
     4c4:	d9 d7       	rcall	.+4018   	; 0x1478 <stopCycleRolling>
		if (adc_celsius <= POFF_MOTOR_TRESHOLD)
     4c6:	80 91 2f 01 	lds	r24, 0x012F
     4ca:	90 91 30 01 	lds	r25, 0x0130
     4ce:	c3 97       	sbiw	r24, 0x33	; 51
     4d0:	08 f0       	brcs	.+2      	; 0x4d4 <processRollControl+0x1c>
     4d2:	5f c0       	rjmp	.+190    	; 0x592 <processRollControl+0xda>
		{
			force_rotate = ROLL_FWD;		// Default direction
     4d4:	81 e0       	ldi	r24, 0x01	; 1
     4d6:	80 93 d0 00 	sts	0x00D0, r24
			setMotorDirection(0);			// Stop the motor
     4da:	80 e0       	ldi	r24, 0x00	; 0
     4dc:	ac d7       	rcall	.+3928   	; 0x1436 <setMotorDirection>
     4de:	59 c0       	rjmp	.+178    	; 0x592 <processRollControl+0xda>
		}
	}
	else
	{
		// Control direction by buttons
		if (button_action_down & BD_ROTFWD)
     4e0:	80 91 cb 00 	lds	r24, 0x00CB
     4e4:	84 ff       	sbrs	r24, 4
     4e6:	04 c0       	rjmp	.+8      	; 0x4f0 <processRollControl+0x38>
		{
			setMotorDirection(ROLL_FWD);	
     4e8:	81 e0       	ldi	r24, 0x01	; 1
     4ea:	a5 d7       	rcall	.+3914   	; 0x1436 <setMotorDirection>
			beepState |= 0x01;			// pressed FWD button
     4ec:	c1 e0       	ldi	r28, 0x01	; 1
     4ee:	13 c0       	rjmp	.+38     	; 0x516 <processRollControl+0x5e>
	//		nextBeepMask &= ~0x04;		// Disable CHANGED_DIR beep on next cycle
		}		
		else if (button_action_down & BD_ROTREV)
     4f0:	85 ff       	sbrs	r24, 5
     4f2:	04 c0       	rjmp	.+8      	; 0x4fc <processRollControl+0x44>
		{
			setMotorDirection(ROLL_REV);
     4f4:	82 e0       	ldi	r24, 0x02	; 2
     4f6:	9f d7       	rcall	.+3902   	; 0x1436 <setMotorDirection>
			beepState |= 0x02;			// pressed REV button
     4f8:	c2 e0       	ldi	r28, 0x02	; 2
     4fa:	0d c0       	rjmp	.+26     	; 0x516 <processRollControl+0x5e>
	//		nextBeepMask &= ~0x04;		// Disable CHANGED_DIR beep on next cycle
		}		
		else if (button_action_long & BD_CYCLE)
     4fc:	80 91 c8 00 	lds	r24, 0x00C8
     500:	87 ff       	sbrs	r24, 7
     502:	04 c0       	rjmp	.+8      	; 0x50c <processRollControl+0x54>
		{
			stopCycleRolling(1);		// Reset points and disable CYCLE mode (if was enabled)
     504:	81 e0       	ldi	r24, 0x01	; 1
     506:	b8 d7       	rcall	.+3952   	; 0x1478 <stopCycleRolling>
			beepState |= 0x08;			// reset of points by long pressing of ROLL button
     508:	c8 e0       	ldi	r28, 0x08	; 8
     50a:	05 c0       	rjmp	.+10     	; 0x516 <processRollControl+0x5e>
		}
		else if (force_rotate)
     50c:	80 91 d0 00 	lds	r24, 0x00D0
     510:	81 11       	cpse	r24, r1
		{
			// Auto power off mode was exited by pressing some other button, not direction buttons
			// Start roll, but do not beep in this case
			setMotorDirection(force_rotate);
     512:	91 d7       	rcall	.+3874   	; 0x1436 <setMotorDirection>


// Function to control motor rotation
void processRollControl(void)
{	
	uint8_t beepState = 0;
     514:	c0 e0       	ldi	r28, 0x00	; 0
			// Auto power off mode was exited by pressing some other button, not direction buttons
			// Start roll, but do not beep in this case
			setMotorDirection(force_rotate);
	//		nextBeepMask &= ~0x04;		// Disable CHANGED_DIR beep on next cycle
		}
		force_rotate = 0;		// First normal pass will clear 
     516:	10 92 d0 00 	sts	0x00D0, r1
			
		if (button_action_up_short & BD_CYCLE)
     51a:	80 91 c9 00 	lds	r24, 0x00C9
     51e:	87 ff       	sbrs	r24, 7
     520:	0e c0       	rjmp	.+28     	; 0x53e <processRollControl+0x86>
		{
			if (rollState & ROLL_CYCLE)
     522:	80 91 ee 00 	lds	r24, 0x00EE
     526:	82 ff       	sbrs	r24, 2
     528:	04 c0       	rjmp	.+8      	; 0x532 <processRollControl+0x7a>
			{
				stopCycleRolling(0);
     52a:	80 e0       	ldi	r24, 0x00	; 0
     52c:	a5 d7       	rcall	.+3914   	; 0x1478 <stopCycleRolling>
				beepState |= 0x20;		// stopped cycle
     52e:	c0 62       	ori	r28, 0x20	; 32
     530:	06 c0       	rjmp	.+12     	; 0x53e <processRollControl+0x86>
			}
			else if (startCycleRolling())
     532:	de d7       	rcall	.+4028   	; 0x14f0 <startCycleRolling>
     534:	88 23       	and	r24, r24
     536:	11 f0       	breq	.+4      	; 0x53c <processRollControl+0x84>
			{
				beepState |= 0x10;		// started cycle
     538:	c0 61       	ori	r28, 0x10	; 16
     53a:	01 c0       	rjmp	.+2      	; 0x53e <processRollControl+0x86>
			}
			else
			{
				beepState |= 0x40;		// failed to start cycle
     53c:	c0 64       	ori	r28, 0x40	; 64
			}			
		}		
			
		if (rollState & ROLL_DIR_CHANGED)
     53e:	80 91 ee 00 	lds	r24, 0x00EE
     542:	85 ff       	sbrs	r24, 5
     544:	04 c0       	rjmp	.+8      	; 0x54e <processRollControl+0x96>
		{
			rollState &= ~ROLL_DIR_CHANGED;
     546:	8f 7d       	andi	r24, 0xDF	; 223
     548:	80 93 ee 00 	sts	0x00EE, r24
			beepState |= 0x04;	
     54c:	c4 60       	ori	r28, 0x04	; 4
		}
			
		if (rollState & CYCLE_ROLL_DONE)
     54e:	80 91 ee 00 	lds	r24, 0x00EE
     552:	84 ff       	sbrs	r24, 4
     554:	04 c0       	rjmp	.+8      	; 0x55e <processRollControl+0xa6>
		{
			rollState &= ~CYCLE_ROLL_DONE;
     556:	8f 7e       	andi	r24, 0xEF	; 239
     558:	80 93 ee 00 	sts	0x00EE, r24
			beepState |= 0x80;	
     55c:	c0 68       	ori	r28, 0x80	; 128
		}		
			
		//beepState &= beepMask;
			
		if (beepState & 0x80)		// Roll cycle done
     55e:	c7 ff       	sbrs	r28, 7
     560:	06 c0       	rjmp	.+12     	; 0x56e <processRollControl+0xb6>
		{
			SetBeeperFreq(1000);
     562:	88 ee       	ldi	r24, 0xE8	; 232
     564:	93 e0       	ldi	r25, 0x03	; 3
     566:	1b d9       	rcall	.-3530   	; 0xfffff79e <__eeprom_end+0xff7ef794>
			StartBeep(200);
     568:	88 ec       	ldi	r24, 0xC8	; 200
     56a:	90 e0       	ldi	r25, 0x00	; 0
     56c:	11 c0       	rjmp	.+34     	; 0x590 <processRollControl+0xd8>
		}		
		else if (beepState & 0x40)	// Roll cycle start fail
     56e:	c6 ff       	sbrs	r28, 6
     570:	03 c0       	rjmp	.+6      	; 0x578 <processRollControl+0xc0>
		{
			SetBeeperFreq(500);
     572:	84 ef       	ldi	r24, 0xF4	; 244
     574:	91 e0       	ldi	r25, 0x01	; 1
     576:	09 c0       	rjmp	.+18     	; 0x58a <processRollControl+0xd2>
			StartBeep(50);
		} 
		else if (beepState & 0x08)	// Reset points
     578:	c3 ff       	sbrs	r28, 3
     57a:	03 c0       	rjmp	.+6      	; 0x582 <processRollControl+0xca>
		{
			SetBeeperFreq(800);
     57c:	80 e2       	ldi	r24, 0x20	; 32
     57e:	93 e0       	ldi	r25, 0x03	; 3
     580:	04 c0       	rjmp	.+8      	; 0x58a <processRollControl+0xd2>
			StartBeep(50);
		}							// Other
		else if ( beepState & (0x01 | 0x02 | 0x10 | 0x20 | 0x04) )
     582:	c7 73       	andi	r28, 0x37	; 55
     584:	31 f0       	breq	.+12     	; 0x592 <processRollControl+0xda>
		{
			SetBeeperFreq(1000);
     586:	88 ee       	ldi	r24, 0xE8	; 232
     588:	93 e0       	ldi	r25, 0x03	; 3
     58a:	09 d9       	rcall	.-3566   	; 0xfffff79e <__eeprom_end+0xff7ef794>
			StartBeep(50);	
     58c:	82 e3       	ldi	r24, 0x32	; 50
     58e:	90 e0       	ldi	r25, 0x00	; 0
     590:	26 d9       	rcall	.-3508   	; 0xfffff7de <__eeprom_end+0xff7ef7d4>
		// Apply mask to next sound events
		//beepMask = nextBeepMask;	
	}

	// Indicate direction by LEDs
	clearExtraLeds(LED_ROTFWD | LED_ROTREV);
     592:	80 e3       	ldi	r24, 0x30	; 48
     594:	e2 d2       	rcall	.+1476   	; 0xb5a <clearExtraLeds>
	if (rollState & ROLL_FWD)
     596:	80 91 ee 00 	lds	r24, 0x00EE
     59a:	80 ff       	sbrs	r24, 0
     59c:	02 c0       	rjmp	.+4      	; 0x5a2 <processRollControl+0xea>
		setExtraLeds(LED_ROTFWD);
     59e:	80 e1       	ldi	r24, 0x10	; 16
     5a0:	03 c0       	rjmp	.+6      	; 0x5a8 <processRollControl+0xf0>
	else if (rollState & ROLL_REV)
     5a2:	81 ff       	sbrs	r24, 1
     5a4:	03 c0       	rjmp	.+6      	; 0x5ac <processRollControl+0xf4>
		setExtraLeds(LED_ROTREV);
     5a6:	80 e2       	ldi	r24, 0x20	; 32
}
     5a8:	cf 91       	pop	r28
	// Indicate direction by LEDs
	clearExtraLeds(LED_ROTFWD | LED_ROTREV);
	if (rollState & ROLL_FWD)
		setExtraLeds(LED_ROTFWD);
	else if (rollState & ROLL_REV)
		setExtraLeds(LED_ROTREV);
     5aa:	d1 c2       	rjmp	.+1442   	; 0xb4e <setExtraLeds>
}
     5ac:	cf 91       	pop	r28
     5ae:	08 95       	ret

000005b0 <processPID>:




uint8_t processPID(uint16_t setPoint, uint16_t processValue)
{
     5b0:	0f 93       	push	r16
     5b2:	1f 93       	push	r17
     5b4:	cf 93       	push	r28
     5b6:	df 93       	push	r29
	int16_t error, p_term, i_term, d_term, temp;
	static uint16_t lastProcessValue;
	static int16_t integAcc = 0;
	
	error = setPoint - processValue;
     5b8:	86 1b       	sub	r24, r22
     5ba:	97 0b       	sbc	r25, r23
	
	
	//------ Calculate P term --------//
	if (error > 20)
     5bc:	85 31       	cpi	r24, 0x15	; 21
     5be:	91 05       	cpc	r25, r1
     5c0:	5c f4       	brge	.+22     	; 0x5d8 <processPID+0x28>
	{
		p_term = 1000;
	}
	else if (error < -20)
     5c2:	8c 3e       	cpi	r24, 0xEC	; 236
     5c4:	2f ef       	ldi	r18, 0xFF	; 255
     5c6:	92 07       	cpc	r25, r18
     5c8:	54 f0       	brlt	.+20     	; 0x5de <processPID+0x2e>
	{
		p_term = -1000;
	}
	else
	{
		p_term = error * Kp;
     5ca:	2f e0       	ldi	r18, 0x0F	; 15
     5cc:	28 9f       	mul	r18, r24
     5ce:	e0 01       	movw	r28, r0
     5d0:	29 9f       	mul	r18, r25
     5d2:	d0 0d       	add	r29, r0
     5d4:	11 24       	eor	r1, r1
     5d6:	05 c0       	rjmp	.+10     	; 0x5e2 <processPID+0x32>
	
	
	//------ Calculate P term --------//
	if (error > 20)
	{
		p_term = 1000;
     5d8:	c8 ee       	ldi	r28, 0xE8	; 232
     5da:	d3 e0       	ldi	r29, 0x03	; 3
     5dc:	02 c0       	rjmp	.+4      	; 0x5e2 <processPID+0x32>
	}
	else if (error < -20)
	{
		p_term = -1000;
     5de:	c8 e1       	ldi	r28, 0x18	; 24
     5e0:	dc ef       	ldi	r29, 0xFC	; 252
	{
		p_term = error * Kp;
	}
	
	//------ Calculate I term --------//
	integAcc += error;
     5e2:	20 91 d5 00 	lds	r18, 0x00D5
     5e6:	30 91 d6 00 	lds	r19, 0x00D6
	if (error <= 0)
     5ea:	18 16       	cp	r1, r24
     5ec:	19 06       	cpc	r1, r25
     5ee:	0c f0       	brlt	.+2      	; 0x5f2 <processPID+0x42>
     5f0:	0f c0       	rjmp	.+30     	; 0x610 <processPID+0x60>
	{
		p_term = error * Kp;
	}
	
	//------ Calculate I term --------//
	integAcc += error;
     5f2:	82 0f       	add	r24, r18
     5f4:	93 1f       	adc	r25, r19
	if (error <= 0)
	{
		integAcc = 0;
	}
	else if (integAcc > 10)
     5f6:	8b 30       	cpi	r24, 0x0B	; 11
     5f8:	91 05       	cpc	r25, r1
     5fa:	1c f0       	brlt	.+6      	; 0x602 <processPID+0x52>
	{
		integAcc = 10;
     5fc:	8a e0       	ldi	r24, 0x0A	; 10
     5fe:	90 e0       	ldi	r25, 0x00	; 0
     600:	02 c0       	rjmp	.+4      	; 0x606 <processPID+0x56>
	}
	else if (integAcc < 0)
     602:	97 fd       	sbrc	r25, 7
     604:	05 c0       	rjmp	.+10     	; 0x610 <processPID+0x60>
	{
		p_term = error * Kp;
	}
	
	//------ Calculate I term --------//
	integAcc += error;
     606:	90 93 d6 00 	sts	0x00D6, r25
     60a:	80 93 d5 00 	sts	0x00D5, r24
     60e:	04 c0       	rjmp	.+8      	; 0x618 <processPID+0x68>
	{
		integAcc = 10;
	}
	else if (integAcc < 0)
	{
		integAcc = 0;
     610:	10 92 d6 00 	sts	0x00D6, r1
     614:	10 92 d5 00 	sts	0x00D5, r1
	}
	i_term = integAcc * Ki;
     618:	80 91 d5 00 	lds	r24, 0x00D5
     61c:	90 91 d6 00 	lds	r25, 0x00D6
     620:	2f e0       	ldi	r18, 0x0F	; 15
     622:	28 9f       	mul	r18, r24
     624:	80 01       	movw	r16, r0
     626:	29 9f       	mul	r18, r25
     628:	10 0d       	add	r17, r0
     62a:	11 24       	eor	r1, r1
	//------ Calculate D term --------//
	//lastProcessValue = getNormalizedRingU16(&ringBufDterm);
	//addToRingU16(&ringBufDterm, processValue);
	//d_term = Kd * ((int16_t)(lastProcessValue - processValue));
	
	lastProcessValue = ringBufDterm.summ;
     62c:	80 91 6d 00 	lds	r24, 0x006D
     630:	90 91 6e 00 	lds	r25, 0x006E
     634:	90 93 d8 00 	sts	0x00D8, r25
     638:	80 93 d7 00 	sts	0x00D7, r24
	addToRingU16(&ringBufDterm, processValue);
     63c:	8a e6       	ldi	r24, 0x6A	; 106
     63e:	90 e0       	ldi	r25, 0x00	; 0
     640:	52 de       	rcall	.-860    	; 0x2e6 <addToRingU16>
	processValue = ringBufDterm.summ;
	d_term = Kd * ((int16_t)(lastProcessValue - processValue));
     642:	80 91 d7 00 	lds	r24, 0x00D7
     646:	90 91 d8 00 	lds	r25, 0x00D8
     64a:	20 91 6d 00 	lds	r18, 0x006D
     64e:	30 91 6e 00 	lds	r19, 0x006E
     652:	82 1b       	sub	r24, r18
     654:	93 0b       	sbc	r25, r19
     656:	40 e5       	ldi	r20, 0x50	; 80
     658:	48 9f       	mul	r20, r24
     65a:	90 01       	movw	r18, r0
     65c:	49 9f       	mul	r20, r25
     65e:	30 0d       	add	r19, r0
     660:	11 24       	eor	r1, r1
	
	//--------- Summ terms -----------//
	temp = (p_term + i_term + d_term) / SCALING_FACTOR;
     662:	ce 01       	movw	r24, r28
     664:	80 0f       	add	r24, r16
     666:	91 1f       	adc	r25, r17
     668:	82 0f       	add	r24, r18
     66a:	93 1f       	adc	r25, r19
     66c:	65 e0       	ldi	r22, 0x05	; 5
     66e:	70 e0       	ldi	r23, 0x00	; 0
     670:	4f d9       	rcall	.-3426   	; 0xfffff910 <__eeprom_end+0xff7ef906>
     672:	cb 01       	movw	r24, r22
     674:	77 ff       	sbrs	r23, 7
     676:	02 c0       	rjmp	.+4      	; 0x67c <processPID+0xcc>
     678:	80 e0       	ldi	r24, 0x00	; 0
     67a:	90 e0       	ldi	r25, 0x00	; 0
     67c:	83 33       	cpi	r24, 0x33	; 51
     67e:	91 05       	cpc	r25, r1
     680:	14 f0       	brlt	.+4      	; 0x686 <processPID+0xd6>
     682:	82 e3       	ldi	r24, 0x32	; 50
     684:	90 e0       	ldi	r25, 0x00	; 0
		temp = 0;
	}
	
	
	//------- Debug --------//
	dbg_PID_p_term = p_term;
     686:	d0 93 36 01 	sts	0x0136, r29
     68a:	c0 93 35 01 	sts	0x0135, r28
	dbg_PID_d_term = d_term;
     68e:	30 93 48 01 	sts	0x0148, r19
     692:	20 93 47 01 	sts	0x0147, r18
	dbg_PID_i_term = i_term;
     696:	10 93 3d 01 	sts	0x013D, r17
     69a:	00 93 3c 01 	sts	0x013C, r16
	dbg_PID_output = temp;
     69e:	90 93 33 01 	sts	0x0133, r25
     6a2:	80 93 32 01 	sts	0x0132, r24
	
	
	return temp;
	
}
     6a6:	df 91       	pop	r29
     6a8:	cf 91       	pop	r28
     6aa:	1f 91       	pop	r17
     6ac:	0f 91       	pop	r16
     6ae:	08 95       	ret

000006b0 <processHeaterControl>:
	static uint16_t set_value_adc;		// static for debug
	static uint16_t pid_output;			// static for debug
	
	
	// Process heater ON/OFF control by button
	if (button_state & BD_HEATCTRL)
     6b0:	80 91 cc 00 	lds	r24, 0x00CC
     6b4:	86 ff       	sbrs	r24, 6
     6b6:	07 c0       	rjmp	.+14     	; 0x6c6 <processHeaterControl+0x16>
	{
		heaterState ^= HEATER_ENABLED;
     6b8:	80 91 f0 00 	lds	r24, 0x00F0
     6bc:	91 e0       	ldi	r25, 0x01	; 1
     6be:	89 27       	eor	r24, r25
     6c0:	80 93 f0 00 	sts	0x00F0, r24
		// Make heater controller set update flag on next call
		forceHeaterControlUpdate();
     6c4:	ab d6       	rcall	.+3414   	; 0x141c <forceHeaterControlUpdate>
	}
	
	// Process auto power off control
	if (autoPowerOffState & AUTO_POFF_ACTIVE)
     6c6:	80 91 fc 00 	lds	r24, 0x00FC
     6ca:	80 ff       	sbrs	r24, 0
     6cc:	05 c0       	rjmp	.+10     	; 0x6d8 <processHeaterControl+0x28>
	{
		heaterState &= ~HEATER_ENABLED;
     6ce:	80 91 f0 00 	lds	r24, 0x00F0
     6d2:	8e 7f       	andi	r24, 0xFE	; 254
     6d4:	80 93 f0 00 	sts	0x00F0, r24
	}		
	
	
	// Check if heater control should be updated
	// PID call interval is a multiple of AC line periods, computed as HEATER_REGULATION_PERIODS * 20ms
	if (heaterState & READY_TO_UPDATE_HEATER)
     6d8:	80 91 f0 00 	lds	r24, 0x00F0
     6dc:	87 ff       	sbrs	r24, 7
     6de:	18 c0       	rjmp	.+48     	; 0x710 <processHeaterControl+0x60>
	{
		// Convert temperature setup to equal ADC value
		set_value_adc = conv_Celsius_to_ADC(setup_temp_value);					
     6e0:	80 91 39 01 	lds	r24, 0x0139
     6e4:	90 91 3a 01 	lds	r25, 0x013A
     6e8:	5c dd       	rcall	.-1352   	; 0x1a2 <conv_Celsius_to_ADC>
     6ea:	90 93 d2 00 	sts	0x00D2, r25
     6ee:	80 93 d1 00 	sts	0x00D1, r24
		// Process PID
		pid_output = processPID(set_value_adc,PIDsampledADC);
     6f2:	60 91 01 01 	lds	r22, 0x0101
     6f6:	70 91 02 01 	lds	r23, 0x0102
     6fa:	5a df       	rcall	.-332    	; 0x5b0 <processPID>
     6fc:	80 93 d3 00 	sts	0x00D3, r24
     700:	10 92 d4 00 	sts	0x00D4, r1
			
		// Heater control is updated only when flag is set, even if heater must be powered OFF
		if (heaterState & HEATER_ENABLED)
     704:	90 91 f0 00 	lds	r25, 0x00F0
     708:	90 fd       	sbrc	r25, 0
     70a:	01 c0       	rjmp	.+2      	; 0x70e <processHeaterControl+0x5e>
			setHeaterControl(pid_output);	// Flag is cleared automatically
		else
			setHeaterControl(0);
     70c:	80 e0       	ldi	r24, 0x00	; 0
     70e:	78 d6       	rcall	.+3312   	; 0x1400 <setHeaterControl>
	}	
		
	
	//------- Debug --------//
	if (heaterState & HEATER_ENABLED)
     710:	80 91 f0 00 	lds	r24, 0x00F0
     714:	80 ff       	sbrs	r24, 0
     716:	0f c0       	rjmp	.+30     	; 0x736 <processHeaterControl+0x86>
	{
		setExtraLeds(LED_HEATER);
     718:	80 e4       	ldi	r24, 0x40	; 64
     71a:	19 d2       	rcall	.+1074   	; 0xb4e <setExtraLeds>
		dbg_SetTempCelsius = setup_temp_value;
     71c:	80 91 39 01 	lds	r24, 0x0139
     720:	80 93 34 01 	sts	0x0134, r24
		dbg_SetTempPID = set_value_adc;
     724:	80 91 d1 00 	lds	r24, 0x00D1
     728:	90 91 d2 00 	lds	r25, 0x00D2
     72c:	90 93 50 01 	sts	0x0150, r25
     730:	80 93 4f 01 	sts	0x014F, r24
     734:	08 c0       	rjmp	.+16     	; 0x746 <processHeaterControl+0x96>
	}
	else
	{
		dbg_SetTempCelsius = 0;
     736:	10 92 34 01 	sts	0x0134, r1
		dbg_SetTempPID = 0;
     73a:	10 92 50 01 	sts	0x0150, r1
     73e:	10 92 4f 01 	sts	0x014F, r1
		clearExtraLeds(LED_HEATER);
     742:	80 e4       	ldi	r24, 0x40	; 64
     744:	0a d2       	rcall	.+1044   	; 0xb5a <clearExtraLeds>
	}
	
	dbg_RealTempCelsius = conv_ADC_to_Celsius(PIDsampledADC);
     746:	80 91 01 01 	lds	r24, 0x0101
     74a:	90 91 02 01 	lds	r25, 0x0102
     74e:	08 dd       	rcall	.-1520   	; 0x160 <conv_ADC_to_Celsius>
     750:	80 93 4c 01 	sts	0x014C, r24
	dbg_RealTempPID = PIDsampledADC;
     754:	80 91 01 01 	lds	r24, 0x0101
     758:	90 91 02 01 	lds	r25, 0x0102
     75c:	90 93 38 01 	sts	0x0138, r25
     760:	80 93 37 01 	sts	0x0137, r24
     764:	08 95       	ret

00000766 <processHeaterAlerts>:
void processHeaterAlerts(void)
{
	static uint8_t tempAlertRange = TEMP_ALERT_RANGE;
	
	// Indicate reaching of desired temperature
	if ( (adc_celsius > setup_temp_value - tempAlertRange) && (adc_celsius < setup_temp_value + tempAlertRange) )
     766:	80 91 2f 01 	lds	r24, 0x012F
     76a:	90 91 30 01 	lds	r25, 0x0130
     76e:	20 91 39 01 	lds	r18, 0x0139
     772:	30 91 3a 01 	lds	r19, 0x013A
     776:	e0 91 73 00 	lds	r30, 0x0073
     77a:	4e 2f       	mov	r20, r30
     77c:	50 e0       	ldi	r21, 0x00	; 0
     77e:	b9 01       	movw	r22, r18
     780:	64 1b       	sub	r22, r20
     782:	75 0b       	sbc	r23, r21
     784:	68 17       	cp	r22, r24
     786:	79 07       	cpc	r23, r25
     788:	98 f4       	brcc	.+38     	; 0x7b0 <processHeaterAlerts+0x4a>
     78a:	24 0f       	add	r18, r20
     78c:	35 1f       	adc	r19, r21
     78e:	82 17       	cp	r24, r18
     790:	93 07       	cpc	r25, r19
     792:	70 f4       	brcc	.+28     	; 0x7b0 <processHeaterAlerts+0x4a>
	{
		if ((tempAlertRange == TEMP_ALERT_RANGE) && (heaterState & HEATER_ENABLED))
     794:	e5 30       	cpi	r30, 0x05	; 5
     796:	51 f4       	brne	.+20     	; 0x7ac <processHeaterAlerts+0x46>
     798:	80 91 f0 00 	lds	r24, 0x00F0
     79c:	80 ff       	sbrs	r24, 0
     79e:	06 c0       	rjmp	.+12     	; 0x7ac <processHeaterAlerts+0x46>
		{
			SetBeeperFreq(1000);
     7a0:	88 ee       	ldi	r24, 0xE8	; 232
     7a2:	93 e0       	ldi	r25, 0x03	; 3
     7a4:	fc d7       	rcall	.+4088   	; 0x179e <SetBeeperFreq>
			StartBeep(400);
     7a6:	80 e9       	ldi	r24, 0x90	; 144
     7a8:	91 e0       	ldi	r25, 0x01	; 1
     7aa:	19 d8       	rcall	.-4046   	; 0xfffff7de <__eeprom_end+0xff7ef7d4>
		}
		// Add some hysteresis
		tempAlertRange = TEMP_ALERT_RANGE + TEMP_ALERT_HYST;
     7ac:	8a e0       	ldi	r24, 0x0A	; 10
     7ae:	01 c0       	rjmp	.+2      	; 0x7b2 <processHeaterAlerts+0x4c>
	}			
	else
	{
		tempAlertRange = TEMP_ALERT_RANGE;
     7b0:	85 e0       	ldi	r24, 0x05	; 5
     7b2:	80 93 73 00 	sts	0x0073, r24
     7b6:	08 95       	ret

000007b8 <restoreGlobalParams>:

}


void restoreGlobalParams(void)
{
     7b8:	cf 93       	push	r28
     7ba:	df 93       	push	r29
     7bc:	cd b7       	in	r28, 0x3d	; 61
     7be:	de b7       	in	r29, 0x3e	; 62
     7c0:	2a 97       	sbiw	r28, 0x0a	; 10
     7c2:	0f b6       	in	r0, 0x3f	; 63
     7c4:	f8 94       	cli
     7c6:	de bf       	out	0x3e, r29	; 62
     7c8:	0f be       	out	0x3f, r0	; 63
     7ca:	cd bf       	out	0x3d, r28	; 61
	 gParams_t gParams;
	 eeprom_read_block(&gParams,&nvParams,sizeof(nvParams));
     7cc:	4a e0       	ldi	r20, 0x0A	; 10
     7ce:	50 e0       	ldi	r21, 0x00	; 0
     7d0:	60 e0       	ldi	r22, 0x00	; 0
     7d2:	70 e0       	ldi	r23, 0x00	; 0
     7d4:	ce 01       	movw	r24, r28
     7d6:	01 96       	adiw	r24, 0x01	; 1
     7d8:	07 d9       	rcall	.-3570   	; 0xfffff9e8 <__eeprom_end+0xff7ef9de>
	 setup_temp_value = gParams.setup_temp_value;	// reference temperature
     7da:	89 81       	ldd	r24, Y+1	; 0x01
     7dc:	80 93 39 01 	sts	0x0139, r24
     7e0:	10 92 3a 01 	sts	0x013A, r1
	 rollCycleSet = gParams.rollCycleSet;			// number of rolling cycles
     7e4:	8a 81       	ldd	r24, Y+2	; 0x02
     7e6:	80 93 3e 01 	sts	0x013E, r24
	 sound_enable = gParams.sound_enable;			// Global sound enable
     7ea:	8b 81       	ldd	r24, Y+3	; 0x03
     7ec:	80 93 3b 01 	sts	0x013B, r24
	 power_off_timeout = gParams.power_off_timeout;	// Auto power OFF timeout, minutes
     7f0:	8c 81       	ldd	r24, Y+4	; 0x04
     7f2:	80 93 4b 01 	sts	0x014B, r24
	 cpoint1 = gParams.cpoint1;						// Calibration point 1
     7f6:	8d 81       	ldd	r24, Y+5	; 0x05
     7f8:	80 93 31 01 	sts	0x0131, r24
	 cpoint2 = gParams.cpoint2;						// Calibration point 2
     7fc:	8e 81       	ldd	r24, Y+6	; 0x06
     7fe:	80 93 51 01 	sts	0x0151, r24
	 cpoint1_adc = gParams.cpoint1_adc;
     802:	8f 81       	ldd	r24, Y+7	; 0x07
     804:	98 85       	ldd	r25, Y+8	; 0x08
     806:	90 93 4a 01 	sts	0x014A, r25
     80a:	80 93 49 01 	sts	0x0149, r24
	 cpoint2_adc = gParams.cpoint2_adc;
     80e:	89 85       	ldd	r24, Y+9	; 0x09
     810:	9a 85       	ldd	r25, Y+10	; 0x0a
     812:	90 93 4e 01 	sts	0x014E, r25
     816:	80 93 4d 01 	sts	0x014D, r24
//	 cpoint1 		= 25;		// TODO: check and remove
//	 cpoint1_adc 	= 164;
//	 cpoint2 		= 145;
//	 cpoint2_adc 	= 433;
	 
}
     81a:	2a 96       	adiw	r28, 0x0a	; 10
     81c:	0f b6       	in	r0, 0x3f	; 63
     81e:	f8 94       	cli
     820:	de bf       	out	0x3e, r29	; 62
     822:	0f be       	out	0x3f, r0	; 63
     824:	cd bf       	out	0x3d, r28	; 61
     826:	df 91       	pop	r29
     828:	cf 91       	pop	r28
     82a:	08 95       	ret

0000082c <exitPowerOff>:




void exitPowerOff(void)
{
     82c:	08 95       	ret

0000082e <decode_led_char>:
// Decodes normal string literal to the 
//	7-segment representation
//---------------------------------------------//
static uint8_t decode_led_char(char c)
{
	switch(c)
     82e:	88 33       	cpi	r24, 0x38	; 56
     830:	09 f4       	brne	.+2      	; 0x834 <decode_led_char+0x6>
     832:	54 c0       	rjmp	.+168    	; 0x8dc <decode_led_char+0xae>
     834:	18 f5       	brcc	.+70     	; 0x87c <decode_led_char+0x4e>
     836:	81 33       	cpi	r24, 0x31	; 49
     838:	09 f4       	brne	.+2      	; 0x83c <decode_led_char+0xe>
     83a:	6e c0       	rjmp	.+220    	; 0x918 <decode_led_char+0xea>
     83c:	90 f4       	brcc	.+36     	; 0x862 <decode_led_char+0x34>
     83e:	8d 32       	cpi	r24, 0x2D	; 45
     840:	09 f4       	brne	.+2      	; 0x844 <decode_led_char+0x16>
     842:	52 c0       	rjmp	.+164    	; 0x8e8 <decode_led_char+0xba>
     844:	38 f4       	brcc	.+14     	; 0x854 <decode_led_char+0x26>
     846:	80 32       	cpi	r24, 0x20	; 32
     848:	09 f4       	brne	.+2      	; 0x84c <decode_led_char+0x1e>
     84a:	52 c0       	rjmp	.+164    	; 0x8f0 <decode_led_char+0xc2>
     84c:	8c 32       	cpi	r24, 0x2C	; 44
     84e:	09 f0       	breq	.+2      	; 0x852 <decode_led_char+0x24>
     850:	64 c0       	rjmp	.+200    	; 0x91a <decode_led_char+0xec>
     852:	48 c0       	rjmp	.+144    	; 0x8e4 <decode_led_char+0xb6>
     854:	8e 32       	cpi	r24, 0x2E	; 46
     856:	09 f4       	brne	.+2      	; 0x85a <decode_led_char+0x2c>
     858:	45 c0       	rjmp	.+138    	; 0x8e4 <decode_led_char+0xb6>
     85a:	80 33       	cpi	r24, 0x30	; 48
     85c:	09 f0       	breq	.+2      	; 0x860 <decode_led_char+0x32>
     85e:	5d c0       	rjmp	.+186    	; 0x91a <decode_led_char+0xec>
     860:	2f c0       	rjmp	.+94     	; 0x8c0 <decode_led_char+0x92>
     862:	84 33       	cpi	r24, 0x34	; 52
     864:	99 f1       	breq	.+102    	; 0x8cc <decode_led_char+0x9e>
     866:	30 f4       	brcc	.+12     	; 0x874 <decode_led_char+0x46>
     868:	82 33       	cpi	r24, 0x32	; 50
     86a:	61 f1       	breq	.+88     	; 0x8c4 <decode_led_char+0x96>
     86c:	83 33       	cpi	r24, 0x33	; 51
     86e:	09 f0       	breq	.+2      	; 0x872 <decode_led_char+0x44>
     870:	54 c0       	rjmp	.+168    	; 0x91a <decode_led_char+0xec>
     872:	2a c0       	rjmp	.+84     	; 0x8c8 <decode_led_char+0x9a>
     874:	86 33       	cpi	r24, 0x36	; 54
     876:	71 f1       	breq	.+92     	; 0x8d4 <decode_led_char+0xa6>
     878:	78 f5       	brcc	.+94     	; 0x8d8 <decode_led_char+0xaa>
     87a:	2a c0       	rjmp	.+84     	; 0x8d0 <decode_led_char+0xa2>
     87c:	8e 34       	cpi	r24, 0x4E	; 78
     87e:	09 f4       	brne	.+2      	; 0x882 <decode_led_char+0x54>
     880:	41 c0       	rjmp	.+130    	; 0x904 <decode_led_char+0xd6>
     882:	78 f4       	brcc	.+30     	; 0x8a2 <decode_led_char+0x74>
     884:	83 34       	cpi	r24, 0x43	; 67
     886:	d1 f1       	breq	.+116    	; 0x8fc <decode_led_char+0xce>
     888:	30 f4       	brcc	.+12     	; 0x896 <decode_led_char+0x68>
     88a:	89 33       	cpi	r24, 0x39	; 57
     88c:	49 f1       	breq	.+82     	; 0x8e0 <decode_led_char+0xb2>
     88e:	81 34       	cpi	r24, 0x41	; 65
     890:	09 f0       	breq	.+2      	; 0x894 <decode_led_char+0x66>
     892:	43 c0       	rjmp	.+134    	; 0x91a <decode_led_char+0xec>
     894:	31 c0       	rjmp	.+98     	; 0x8f8 <decode_led_char+0xca>
     896:	85 34       	cpi	r24, 0x45	; 69
     898:	d9 f1       	breq	.+118    	; 0x910 <decode_led_char+0xe2>
     89a:	b0 f1       	brcs	.+108    	; 0x908 <decode_led_char+0xda>
     89c:	86 34       	cpi	r24, 0x46	; 70
     89e:	e9 f5       	brne	.+122    	; 0x91a <decode_led_char+0xec>
     8a0:	2f c0       	rjmp	.+94     	; 0x900 <decode_led_char+0xd2>
     8a2:	82 35       	cpi	r24, 0x52	; 82
     8a4:	b9 f1       	breq	.+110    	; 0x914 <decode_led_char+0xe6>
     8a6:	28 f4       	brcc	.+10     	; 0x8b2 <decode_led_char+0x84>
     8a8:	8f 34       	cpi	r24, 0x4F	; 79
     8aa:	51 f0       	breq	.+20     	; 0x8c0 <decode_led_char+0x92>
     8ac:	80 35       	cpi	r24, 0x50	; 80
     8ae:	a9 f5       	brne	.+106    	; 0x91a <decode_led_char+0xec>
     8b0:	2d c0       	rjmp	.+90     	; 0x90c <decode_led_char+0xde>
     8b2:	8f 35       	cpi	r24, 0x5F	; 95
     8b4:	d9 f0       	breq	.+54     	; 0x8ec <decode_led_char+0xbe>
     8b6:	80 3b       	cpi	r24, 0xB0	; 176
     8b8:	e9 f0       	breq	.+58     	; 0x8f4 <decode_led_char+0xc6>
     8ba:	83 35       	cpi	r24, 0x53	; 83
     8bc:	71 f5       	brne	.+92     	; 0x91a <decode_led_char+0xec>
     8be:	08 c0       	rjmp	.+16     	; 0x8d0 <decode_led_char+0xa2>
	{
		case 'O':
		case '0': return (SEGA | SEGB | SEGC | SEGD | SEGE | SEGF);
     8c0:	8f e3       	ldi	r24, 0x3F	; 63
     8c2:	08 95       	ret
		case '1': return (SEGB | SEGC );
		case '2': return (SEGA | SEGB | SEGD | SEGE | SEGG);
     8c4:	8b e5       	ldi	r24, 0x5B	; 91
     8c6:	08 95       	ret
		case '3': return (SEGA | SEGB | SEGC | SEGD | SEGG);
     8c8:	8f e4       	ldi	r24, 0x4F	; 79
     8ca:	08 95       	ret
		case '4': return (SEGB | SEGC | SEGF | SEGG);
     8cc:	86 e6       	ldi	r24, 0x66	; 102
     8ce:	08 95       	ret
		case 'S':
		case '5': return (SEGA | SEGC | SEGD | SEGF | SEGG);
     8d0:	8d e6       	ldi	r24, 0x6D	; 109
     8d2:	08 95       	ret
		case '6': return (SEGA | SEGC | SEGD | SEGE | SEGF | SEGG);
     8d4:	8d e7       	ldi	r24, 0x7D	; 125
     8d6:	08 95       	ret
		case '7': return (SEGA | SEGB | SEGC );
     8d8:	87 e0       	ldi	r24, 0x07	; 7
     8da:	08 95       	ret
		case '8': return (SEGA | SEGB | SEGC | SEGD | SEGE | SEGF | SEGG);
     8dc:	8f e7       	ldi	r24, 0x7F	; 127
     8de:	08 95       	ret
		case '9': return (SEGA | SEGB | SEGC | SEGD | SEGF | SEGG);
     8e0:	8f e6       	ldi	r24, 0x6F	; 111
     8e2:	08 95       	ret
		case '.': return (SEGH);
		case ',': return (SEGH);
     8e4:	80 e8       	ldi	r24, 0x80	; 128
     8e6:	08 95       	ret
		case '-': return (SEGG);
     8e8:	80 e4       	ldi	r24, 0x40	; 64
     8ea:	08 95       	ret
		case '_': return (SEGD);
     8ec:	88 e0       	ldi	r24, 0x08	; 8
     8ee:	08 95       	ret
		case ' ': return 0;
     8f0:	80 e0       	ldi	r24, 0x00	; 0
     8f2:	08 95       	ret
		case 0xB0:	return (SEGA | SEGB | SEGF | SEGG);		// Degree sign
     8f4:	83 e6       	ldi	r24, 0x63	; 99
     8f6:	08 95       	ret
		case 'A': return (SEGA | SEGB | SEGC | SEGE | SEGF | SEGG);
     8f8:	87 e7       	ldi	r24, 0x77	; 119
     8fa:	08 95       	ret
		case 'C':	return (SEGA | SEGD | SEGE | SEGF);
     8fc:	89 e3       	ldi	r24, 0x39	; 57
     8fe:	08 95       	ret
		case 'F':	return (SEGA | SEGE | SEGF | SEGG);
     900:	81 e7       	ldi	r24, 0x71	; 113
     902:	08 95       	ret
		case 'N':	return (SEGC | SEGE | SEGG);
     904:	84 e5       	ldi	r24, 0x54	; 84
     906:	08 95       	ret
		case 'D': return (SEGB | SEGC | SEGD | SEGE | SEGG);
     908:	8e e5       	ldi	r24, 0x5E	; 94
     90a:	08 95       	ret
		case 'P': return (SEGA | SEGB | SEGE | SEGF | SEGG);
     90c:	83 e7       	ldi	r24, 0x73	; 115
     90e:	08 95       	ret
		case 'E': return (SEGA | SEGD | SEGE | SEGF | SEGG);
     910:	89 e7       	ldi	r24, 0x79	; 121
     912:	08 95       	ret
		case 'R': return (SEGE | SEGG);
     914:	80 e5       	ldi	r24, 0x50	; 80
     916:	08 95       	ret
{
	switch(c)
	{
		case 'O':
		case '0': return (SEGA | SEGB | SEGC | SEGD | SEGE | SEGF);
		case '1': return (SEGB | SEGC );
     918:	86 e0       	ldi	r24, 0x06	; 6
		case 'P': return (SEGA | SEGB | SEGE | SEGF | SEGG);
		case 'E': return (SEGA | SEGD | SEGE | SEGF | SEGG);
		case 'R': return (SEGE | SEGG);
		default:  return c;	
	}
}
     91a:	08 95       	ret

0000091c <wrap_led_buffer_index>:
//---------------------------------------------//
// Ensures that index is inside the buffer
// -128 <= index <= 127
//---------------------------------------------//
static uint8_t wrap_led_buffer_index(int8_t buf_index)
{
     91c:	28 2f       	mov	r18, r24
	uint8_t new_index_u;
	new_index_u = (uint8_t) ((buf_index < 0) ? -buf_index : buf_index);
     91e:	87 fd       	sbrc	r24, 7
     920:	81 95       	neg	r24
	if (new_index_u >= LED_BUFFER_LENGTH)
     922:	8e 30       	cpi	r24, 0x0E	; 14
     924:	18 f0       	brcs	.+6      	; 0x92c <wrap_led_buffer_index+0x10>
		new_index_u = new_index_u % LED_BUFFER_LENGTH;
     926:	6e e0       	ldi	r22, 0x0E	; 14
     928:	d3 d7       	rcall	.+4006   	; 0x18d0 <__udivmodqi4>
     92a:	89 2f       	mov	r24, r25
	new_index_u = ((buf_index >= 0) || (new_index_u == 0)) ? new_index_u :  LED_BUFFER_LENGTH - new_index_u ;
     92c:	27 ff       	sbrs	r18, 7
     92e:	05 c0       	rjmp	.+10     	; 0x93a <wrap_led_buffer_index+0x1e>
     930:	88 23       	and	r24, r24
     932:	19 f0       	breq	.+6      	; 0x93a <wrap_led_buffer_index+0x1e>
     934:	9e e0       	ldi	r25, 0x0E	; 14
     936:	98 1b       	sub	r25, r24
     938:	89 2f       	mov	r24, r25
	return new_index_u;
}
     93a:	08 95       	ret

0000093c <processLedIndicator>:
// Call this function N times per sec to get N/NUM_DIGITS_TOTAL display update rate, where
// NUM_DIGITS_TOTAL is number_of_digits_of_LED_display if no extra LEDs are used or
// (number_of_digits_of_LED_display + 1) otherwise.
//---------------------------------------------//
void processLedIndicator()
{
     93c:	cf 93       	push	r28
	disable_led_segments();
	#endif
	
	
	// Perform regular shift
	led_clock_pulse(!LED_DIGIT_ACT_LVL);
     93e:	81 e0       	ldi	r24, 0x01	; 1
     940:	13 d1       	rcall	.+550    	; 0xb68 <led_clock_pulse>
	
	switch (wActivePos)
     942:	c0 91 da 00 	lds	r28, 0x00DA
     946:	cc 23       	and	r28, r28
     948:	19 f0       	breq	.+6      	; 0x950 <processLedIndicator+0x14>
     94a:	c6 30       	cpi	r28, 0x06	; 6
     94c:	d1 f5       	brne	.+116    	; 0x9c2 <processLedIndicator+0x86>
     94e:	11 c0       	rjmp	.+34     	; 0x972 <processLedIndicator+0x36>
	{
	case 0:
		// Get buttons
		#ifndef CLEAN_OPERATION
		disable_led_segments();
     950:	37 d1       	rcall	.+622    	; 0xbc0 <disable_led_segments>
		#endif
		enable_led_segments_pullups();
     952:	28 d1       	rcall	.+592    	; 0xba4 <enable_led_segments_pullups>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     954:	85 e3       	ldi	r24, 0x35	; 53
     956:	8a 95       	dec	r24
     958:	f1 f7       	brne	.-4      	; 0x956 <processLedIndicator+0x1a>
     95a:	00 00       	nop
		_delay_us(PULLUP_DELAY_US);
		capture_button_state();
     95c:	38 d1       	rcall	.+624    	; 0xbce <capture_button_state>
		#ifndef CLEAN_OPERATION
		enable_led_segments();
     95e:	29 d1       	rcall	.+594    	; 0xbb2 <enable_led_segments>
		#endif
		// Start new cycle with active digit level
		led_clock_pulse(LED_DIGIT_ACT_LVL);
     960:	80 e0       	ldi	r24, 0x00	; 0
     962:	02 d1       	rcall	.+516    	; 0xb68 <led_clock_pulse>
		// Always start new cycle from specified buffer start position
		bufActivePos = wStartPos;
     964:	80 91 53 01 	lds	r24, 0x0153
     968:	80 93 d9 00 	sts	0x00D9, r24
		next_wActivePos = wActivePos + 1;
     96c:	c0 91 da 00 	lds	r28, 0x00DA
     970:	28 c0       	rjmp	.+80     	; 0x9c2 <processLedIndicator+0x86>
//---------------------------------------------//
// Performs window shifting
//---------------------------------------------//
static void processWindowShifter(void)
{
	if (shifterState == LED_SHIFT_DONE)
     972:	80 91 54 01 	lds	r24, 0x0154
     976:	81 11       	cpse	r24, r1
     978:	01 c0       	rjmp	.+2      	; 0x97c <processLedIndicator+0x40>
     97a:	1b c0       	rjmp	.+54     	; 0x9b2 <processLedIndicator+0x76>
		return;
	
	// Process shift timer
	processSoftTimer8b(&shiftTimer);	
     97c:	8b ed       	ldi	r24, 0xDB	; 219
     97e:	90 e0       	ldi	r25, 0x00	; 0
     980:	e2 d6       	rcall	.+3524   	; 0x1746 <processSoftTimer8b>
	
	if (shiftTimer.FTop)
     982:	80 91 db 00 	lds	r24, 0x00DB
     986:	85 ff       	sbrs	r24, 5
     988:	14 c0       	rjmp	.+40     	; 0x9b2 <processLedIndicator+0x76>
	{
		// Check if finished
		if (wStartPos == bufStartPos)	
     98a:	80 91 53 01 	lds	r24, 0x0153
     98e:	90 91 55 01 	lds	r25, 0x0155
     992:	89 13       	cpse	r24, r25
     994:	03 c0       	rjmp	.+6      	; 0x99c <processLedIndicator+0x60>
		{
			// Update state
			shifterState = LED_SHIFT_DONE;
     996:	10 92 54 01 	sts	0x0154, r1
     99a:	0b c0       	rjmp	.+22     	; 0x9b2 <processLedIndicator+0x76>
		}
		else if (shifterState == LED_SHIFT_RIGHT)
     99c:	90 91 54 01 	lds	r25, 0x0154
     9a0:	92 30       	cpi	r25, 0x02	; 2
     9a2:	49 f4       	brne	.+18     	; 0x9b6 <processLedIndicator+0x7a>
// Increments index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t inc_buffer_position(uint8_t position)
{
	return (position >= LED_BUFFER_LENGTH - 1) ? 0 : position + 1;
     9a4:	8d 30       	cpi	r24, 0x0D	; 13
     9a6:	10 f4       	brcc	.+4      	; 0x9ac <processLedIndicator+0x70>
     9a8:	8f 5f       	subi	r24, 0xFF	; 255
     9aa:	01 c0       	rjmp	.+2      	; 0x9ae <processLedIndicator+0x72>
     9ac:	80 e0       	ldi	r24, 0x00	; 0
			// Update state
			shifterState = LED_SHIFT_DONE;
		}
		else if (shifterState == LED_SHIFT_RIGHT)
		{
			wStartPos = inc_buffer_position(wStartPos);	
     9ae:	80 93 53 01 	sts	0x0153, r24
		// Always start new cycle from specified buffer start position
		bufActivePos = wStartPos;
		next_wActivePos = wActivePos + 1;
		break;
	case NUM_DIGITS_TOTAL-1:
		next_wActivePos = 0;
     9b2:	c0 e0       	ldi	r28, 0x00	; 0
     9b4:	07 c0       	rjmp	.+14     	; 0x9c4 <processLedIndicator+0x88>
// Decrements index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t dec_buffer_position(uint8_t position)
{
	return (position == 0) ? LED_BUFFER_LENGTH - 1 : position - 1;
     9b6:	88 23       	and	r24, r24
     9b8:	11 f0       	breq	.+4      	; 0x9be <processLedIndicator+0x82>
     9ba:	81 50       	subi	r24, 0x01	; 1
     9bc:	f8 cf       	rjmp	.-16     	; 0x9ae <processLedIndicator+0x72>
     9be:	8d e0       	ldi	r24, 0x0D	; 13
     9c0:	f6 cf       	rjmp	.-20     	; 0x9ae <processLedIndicator+0x72>
		next_wActivePos = 0;
		// Shift LED window
		processWindowShifter();	
		break;
	default:
		next_wActivePos = wActivePos + 1;
     9c2:	cf 5f       	subi	r28, 0xFF	; 255
		break;
	}		
	
	#ifdef 	USE_EXTRA_LED_DIGIT
	if (wActivePos == EXTRA_DIGIT_NUM)
     9c4:	80 91 da 00 	lds	r24, 0x00DA
     9c8:	86 30       	cpi	r24, 0x06	; 6
     9ca:	21 f4       	brne	.+8      	; 0x9d4 <processLedIndicator+0x98>
	{
		// Output separate LEDs state
		set_led_segments(extra_led_state);
     9cc:	80 91 52 01 	lds	r24, 0x0152
     9d0:	db d0       	rcall	.+438    	; 0xb88 <set_led_segments>
     9d2:	10 c0       	rjmp	.+32     	; 0x9f4 <processLedIndicator+0xb8>
	}
	else
	#endif
	{
		// Output new segment data
		set_led_segments(led_data_buffer[bufActivePos]);
     9d4:	e0 91 d9 00 	lds	r30, 0x00D9
     9d8:	f0 e0       	ldi	r31, 0x00	; 0
     9da:	ea 5a       	subi	r30, 0xAA	; 170
     9dc:	fe 4f       	sbci	r31, 0xFE	; 254
     9de:	80 81       	ld	r24, Z
     9e0:	d3 d0       	rcall	.+422    	; 0xb88 <set_led_segments>
		// Wrap around buffer length
		bufActivePos = inc_buffer_position(bufActivePos );
     9e2:	80 91 d9 00 	lds	r24, 0x00D9
// Increments index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t inc_buffer_position(uint8_t position)
{
	return (position >= LED_BUFFER_LENGTH - 1) ? 0 : position + 1;
     9e6:	8d 30       	cpi	r24, 0x0D	; 13
     9e8:	10 f4       	brcc	.+4      	; 0x9ee <processLedIndicator+0xb2>
     9ea:	8f 5f       	subi	r24, 0xFF	; 255
     9ec:	01 c0       	rjmp	.+2      	; 0x9f0 <processLedIndicator+0xb4>
     9ee:	80 e0       	ldi	r24, 0x00	; 0
	#endif
	{
		// Output new segment data
		set_led_segments(led_data_buffer[bufActivePos]);
		// Wrap around buffer length
		bufActivePos = inc_buffer_position(bufActivePos );
     9f0:	80 93 d9 00 	sts	0x00D9, r24
	}
		
	wActivePos = next_wActivePos;
     9f4:	c0 93 da 00 	sts	0x00DA, r28
	
	#ifdef CLEAN_OPERATION
	enable_led_segments();
	#endif

}
     9f8:	cf 91       	pop	r28
     9fa:	08 95       	ret

000009fc <fillLedBuffer>:
//---------------------------------------------//
// Fills buffer from (bufStartPos + offset) 
//	position with single char
//---------------------------------------------//
void fillLedBuffer(int8_t offset, uint8_t length, char c)
{
     9fc:	0f 93       	push	r16
     9fe:	1f 93       	push	r17
     a00:	cf 93       	push	r28
     a02:	df 93       	push	r29
     a04:	1f 92       	push	r1
     a06:	cd b7       	in	r28, 0x3d	; 61
     a08:	de b7       	in	r29, 0x3e	; 62
     a0a:	18 2f       	mov	r17, r24
     a0c:	84 2f       	mov	r24, r20
	uint8_t val = decode_led_char(c);
     a0e:	69 83       	std	Y+1, r22	; 0x01
     a10:	0e df       	rcall	.-484    	; 0x82e <decode_led_char>
     a12:	08 2f       	mov	r16, r24
	// Ensure index is inside the buffer
	uint8_t position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
     a14:	80 91 55 01 	lds	r24, 0x0155
     a18:	81 0f       	add	r24, r17
     a1a:	80 df       	rcall	.-256    	; 0x91c <wrap_led_buffer_index>
	while(length--)
     a1c:	69 81       	ldd	r22, Y+1	; 0x01
     a1e:	0a c0       	rjmp	.+20     	; 0xa34 <fillLedBuffer+0x38>
	{
		led_data_buffer[position] = val;
     a20:	e8 2f       	mov	r30, r24
     a22:	f0 e0       	ldi	r31, 0x00	; 0
     a24:	ea 5a       	subi	r30, 0xAA	; 170
     a26:	fe 4f       	sbci	r31, 0xFE	; 254
     a28:	00 83       	st	Z, r16
// Increments index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t inc_buffer_position(uint8_t position)
{
	return (position >= LED_BUFFER_LENGTH - 1) ? 0 : position + 1;
     a2a:	8d 30       	cpi	r24, 0x0D	; 13
     a2c:	10 f4       	brcc	.+4      	; 0xa32 <fillLedBuffer+0x36>
     a2e:	8f 5f       	subi	r24, 0xFF	; 255
     a30:	01 c0       	rjmp	.+2      	; 0xa34 <fillLedBuffer+0x38>
     a32:	80 e0       	ldi	r24, 0x00	; 0
void fillLedBuffer(int8_t offset, uint8_t length, char c)
{
	uint8_t val = decode_led_char(c);
	// Ensure index is inside the buffer
	uint8_t position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
	while(length--)
     a34:	61 50       	subi	r22, 0x01	; 1
     a36:	a0 f7       	brcc	.-24     	; 0xa20 <fillLedBuffer+0x24>
	{
		led_data_buffer[position] = val;
		position = inc_buffer_position(position);
	}
}
     a38:	0f 90       	pop	r0
     a3a:	df 91       	pop	r29
     a3c:	cf 91       	pop	r28
     a3e:	1f 91       	pop	r17
     a40:	0f 91       	pop	r16
     a42:	08 95       	ret

00000a44 <startShiftingWindowLeft>:
//	LED window left 
//---------------------------------------------//
void startShiftingWindowLeft(void)
{
	// Clear spaces between menu states
	fillLedBuffer(-2,2,' ');
     a44:	40 e2       	ldi	r20, 0x20	; 32
     a46:	62 e0       	ldi	r22, 0x02	; 2
     a48:	8e ef       	ldi	r24, 0xFE	; 254
     a4a:	d8 df       	rcall	.-80     	; 0x9fc <fillLedBuffer>
	// Set new buffer position for writing
	bufStartPos = wrap_led_buffer_index( (int8_t)bufStartPos - (NUM_DIGITS + 2) );
     a4c:	80 91 55 01 	lds	r24, 0x0155
     a50:	88 50       	subi	r24, 0x08	; 8
     a52:	64 df       	rcall	.-312    	; 0x91c <wrap_led_buffer_index>
     a54:	80 93 55 01 	sts	0x0155, r24
	// Set shifter state
	shifterState = LED_SHIFT_LEFT;
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	80 93 54 01 	sts	0x0154, r24
     a5e:	08 95       	ret

00000a60 <startShiftingWindowRight>:
//	LED window right 
//---------------------------------------------//
void startShiftingWindowRight(void)
{
	// Clear spaces between menu states
	fillLedBuffer(NUM_DIGITS,2,' ');
     a60:	40 e2       	ldi	r20, 0x20	; 32
     a62:	62 e0       	ldi	r22, 0x02	; 2
     a64:	86 e0       	ldi	r24, 0x06	; 6
     a66:	ca df       	rcall	.-108    	; 0x9fc <fillLedBuffer>
	// Set new buffer position for writing
	bufStartPos = wrap_led_buffer_index( (int8_t)bufStartPos + NUM_DIGITS + 2 );
     a68:	80 91 55 01 	lds	r24, 0x0155
     a6c:	88 5f       	subi	r24, 0xF8	; 248
     a6e:	56 df       	rcall	.-340    	; 0x91c <wrap_led_buffer_index>
     a70:	80 93 55 01 	sts	0x0155, r24
	// Set shifter state
	shifterState = LED_SHIFT_RIGHT;
     a74:	82 e0       	ldi	r24, 0x02	; 2
     a76:	80 93 54 01 	sts	0x0154, r24
     a7a:	08 95       	ret

00000a7c <initLedIndicator>:
//---------------------------------------------//
//	Initialization
//	Call this function at start of your program
//---------------------------------------------//
void initLedIndicator()
{
     a7c:	cf 93       	push	r28
	uint8_t i;
	// First disable outputs
	disable_led_segments();
     a7e:	a0 d0       	rcall	.+320    	; 0xbc0 <disable_led_segments>
     a80:	c7 e0       	ldi	r28, 0x07	; 7
	// Fill shift register with non-active levels
	for (i=0;i<NUM_DIGITS_TOTAL;i++)
	{
		led_clock_pulse(!LED_DIGIT_ACT_LVL);
     a82:	81 e0       	ldi	r24, 0x01	; 1
     a84:	71 d0       	rcall	.+226    	; 0xb68 <led_clock_pulse>
     a86:	c1 50       	subi	r28, 0x01	; 1
{
	uint8_t i;
	// First disable outputs
	disable_led_segments();
	// Fill shift register with non-active levels
	for (i=0;i<NUM_DIGITS_TOTAL;i++)
     a88:	e1 f7       	brne	.-8      	; 0xa82 <initLedIndicator+0x6>
	{
		led_clock_pulse(!LED_DIGIT_ACT_LVL);
	}
	// Now enable outputs
	enable_led_segments();
     a8a:	93 d0       	rcall	.+294    	; 0xbb2 <enable_led_segments>
	
	// Reset pointers
	wStartPos = 0;
     a8c:	10 92 53 01 	sts	0x0153, r1
	bufStartPos = 0;
     a90:	10 92 55 01 	sts	0x0155, r1
	bufActivePos = 0;
     a94:	10 92 d9 00 	sts	0x00D9, r1
	wActivePos = 0;
     a98:	10 92 da 00 	sts	0x00DA, r1
	#ifdef 	USE_EXTRA_LED_DIGIT
	extra_led_state = 0;
     a9c:	10 92 52 01 	sts	0x0152, r1
	#endif
	
	// Clear the buffer 
	fillLedBuffer(0,LED_BUFFER_LENGTH,' ');
     aa0:	40 e2       	ldi	r20, 0x20	; 32
     aa2:	6e e0       	ldi	r22, 0x0E	; 14
     aa4:	80 e0       	ldi	r24, 0x00	; 0
     aa6:	aa df       	rcall	.-172    	; 0x9fc <fillLedBuffer>
	
	// Initialize shift timer - always enabled, but 
	//	processed only when shifting is active
	shifterState = LED_SHIFT_DONE;
     aa8:	10 92 54 01 	sts	0x0154, r1
	shiftTimer.Enabled = 1;
     aac:	80 91 db 00 	lds	r24, 0x00DB
	shiftTimer.RunOnce = 0;
     ab0:	81 60       	ori	r24, 0x01	; 1
     ab2:	8d 7f       	andi	r24, 0xFD	; 253
     ab4:	80 93 db 00 	sts	0x00DB, r24
	shiftTimer.Top = LED_SHIFT_INTERVAL-1;
     ab8:	89 e0       	ldi	r24, 0x09	; 9
     aba:	80 93 dd 00 	sts	0x00DD, r24
}
     abe:	cf 91       	pop	r28
     ac0:	08 95       	ret

00000ac2 <printLedBuffer>:
//		str - null-terminated char string
// Comma and dot (".", ",") get special processing - first occurrence is added to
// a preceding char, next are displayed as a single digit
//---------------------------------------------//
void printLedBuffer(int8_t offset, char* str)
{
     ac2:	ff 92       	push	r15
     ac4:	0f 93       	push	r16
     ac6:	1f 93       	push	r17
     ac8:	cf 93       	push	r28
     aca:	df 93       	push	r29
     acc:	eb 01       	movw	r28, r22
	char c;
	uint8_t decoded_sym;
	uint8_t state = 0x02;
	uint8_t comma_pos;
	// Ensure index is inside the buffer
	uint8_t buffer_position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
     ace:	90 91 55 01 	lds	r25, 0x0155
     ad2:	89 0f       	add	r24, r25
     ad4:	23 df       	rcall	.-442    	; 0x91c <wrap_led_buffer_index>
     ad6:	18 2f       	mov	r17, r24
	comma_pos = buffer_position;
     ad8:	f8 2e       	mov	r15, r24
//---------------------------------------------//
void printLedBuffer(int8_t offset, char* str)
{
	char c;
	uint8_t decoded_sym;
	uint8_t state = 0x02;
     ada:	02 e0       	ldi	r16, 0x02	; 2
	uint8_t comma_pos;
	// Ensure index is inside the buffer
	uint8_t buffer_position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
	comma_pos = buffer_position;
	// Output chars
	while((c = *str++))
     adc:	23 c0       	rjmp	.+70     	; 0xb24 <printLedBuffer+0x62>
	{
		decoded_sym = decode_led_char(c);
     ade:	a7 de       	rcall	.-690    	; 0x82e <decode_led_char>
		state = (decoded_sym == SEGH) ? (state | 0x01) : (state & ~0x01);
     ae0:	80 38       	cpi	r24, 0x80	; 128
     ae2:	11 f4       	brne	.+4      	; 0xae8 <printLedBuffer+0x26>
     ae4:	01 60       	ori	r16, 0x01	; 1
     ae6:	01 c0       	rjmp	.+2      	; 0xaea <printLedBuffer+0x28>
     ae8:	0e 7f       	andi	r16, 0xFE	; 254
		if (state == 0x01)			
     aea:	01 30       	cpi	r16, 0x01	; 1
     aec:	49 f4       	brne	.+18     	; 0xb00 <printLedBuffer+0x3e>
		{
			led_data_buffer[comma_pos] |= decoded_sym;
     aee:	ef 2d       	mov	r30, r15
     af0:	f0 e0       	ldi	r31, 0x00	; 0
     af2:	ea 5a       	subi	r30, 0xAA	; 170
     af4:	fe 4f       	sbci	r31, 0xFE	; 254
     af6:	90 81       	ld	r25, Z
     af8:	98 2b       	or	r25, r24
     afa:	90 83       	st	Z, r25
     afc:	81 2f       	mov	r24, r17
     afe:	0b c0       	rjmp	.+22     	; 0xb16 <printLedBuffer+0x54>
		}
		else
		{
			led_data_buffer[buffer_position] = decoded_sym;	
     b00:	e1 2f       	mov	r30, r17
     b02:	f0 e0       	ldi	r31, 0x00	; 0
     b04:	ea 5a       	subi	r30, 0xAA	; 170
     b06:	fe 4f       	sbci	r31, 0xFE	; 254
     b08:	80 83       	st	Z, r24
// Increments index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t inc_buffer_position(uint8_t position)
{
	return (position >= LED_BUFFER_LENGTH - 1) ? 0 : position + 1;
     b0a:	1d 30       	cpi	r17, 0x0D	; 13
     b0c:	18 f4       	brcc	.+6      	; 0xb14 <printLedBuffer+0x52>
     b0e:	81 2f       	mov	r24, r17
     b10:	8f 5f       	subi	r24, 0xFF	; 255
     b12:	01 c0       	rjmp	.+2      	; 0xb16 <printLedBuffer+0x54>
     b14:	80 e0       	ldi	r24, 0x00	; 0
		comma_pos = buffer_position;
		if (state != 0x01)
		{
			buffer_position = inc_buffer_position(buffer_position);
		}
		state = (state & 0x01) ? 0x03 : 0x00;		
     b16:	00 ff       	sbrs	r16, 0
     b18:	02 c0       	rjmp	.+4      	; 0xb1e <printLedBuffer+0x5c>
     b1a:	03 e0       	ldi	r16, 0x03	; 3
     b1c:	01 c0       	rjmp	.+2      	; 0xb20 <printLedBuffer+0x5e>
     b1e:	00 e0       	ldi	r16, 0x00	; 0
     b20:	f1 2e       	mov	r15, r17
     b22:	18 2f       	mov	r17, r24
	uint8_t comma_pos;
	// Ensure index is inside the buffer
	uint8_t buffer_position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
	comma_pos = buffer_position;
	// Output chars
	while((c = *str++))
     b24:	89 91       	ld	r24, Y+
     b26:	81 11       	cpse	r24, r1
     b28:	da cf       	rjmp	.-76     	; 0xade <printLedBuffer+0x1c>
		{
			buffer_position = inc_buffer_position(buffer_position);
		}
		state = (state & 0x01) ? 0x03 : 0x00;		
	}
}
     b2a:	df 91       	pop	r29
     b2c:	cf 91       	pop	r28
     b2e:	1f 91       	pop	r17
     b30:	0f 91       	pop	r16
     b32:	ff 90       	pop	r15
     b34:	08 95       	ret

00000b36 <setComma>:
//	buffer cell
//---------------------------------------------//
void setComma(int8_t offset)
{
	// Ensure index is inside the buffer
	uint8_t position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
     b36:	90 91 55 01 	lds	r25, 0x0155
     b3a:	89 0f       	add	r24, r25
     b3c:	ef de       	rcall	.-546    	; 0x91c <wrap_led_buffer_index>
	led_data_buffer[position] |= (SEGH);
     b3e:	e8 2f       	mov	r30, r24
     b40:	f0 e0       	ldi	r31, 0x00	; 0
     b42:	ea 5a       	subi	r30, 0xAA	; 170
     b44:	fe 4f       	sbci	r31, 0xFE	; 254
     b46:	80 81       	ld	r24, Z
     b48:	80 68       	ori	r24, 0x80	; 128
     b4a:	80 83       	st	Z, r24
     b4c:	08 95       	ret

00000b4e <setExtraLeds>:
// Argument is ORed with current LED state
//---------------------------------------------//
inline void setExtraLeds(uint8_t leds_set_value)
{
		//asm("cli");
		extra_led_state |= leds_set_value;
     b4e:	90 91 52 01 	lds	r25, 0x0152
     b52:	98 2b       	or	r25, r24
     b54:	90 93 52 01 	sts	0x0152, r25
     b58:	08 95       	ret

00000b5a <clearExtraLeds>:
// Argument is AND NOTed with current LED state
//---------------------------------------------//
inline void clearExtraLeds(uint8_t leds_clear_value)
{
		//asm("cli");
		extra_led_state &= ~leds_clear_value;
     b5a:	90 91 52 01 	lds	r25, 0x0152
     b5e:	80 95       	com	r24
     b60:	89 23       	and	r24, r25
     b62:	80 93 52 01 	sts	0x0152, r24
     b66:	08 95       	ret

00000b68 <led_clock_pulse>:


// Clocks in bit into the shift register
void led_clock_pulse(uint8_t bit)
{
	if (bit)
     b68:	88 23       	and	r24, r24
     b6a:	11 f0       	breq	.+4      	; 0xb70 <led_clock_pulse+0x8>
		PORTB |= (1<<PB_LED_DOUT);
     b6c:	c0 9a       	sbi	0x18, 0	; 24
     b6e:	01 c0       	rjmp	.+2      	; 0xb72 <led_clock_pulse+0xa>
	else
		PORTB &= ~(1<<PB_LED_DOUT);
     b70:	c0 98       	cbi	0x18, 0	; 24
     b72:	8a e1       	ldi	r24, 0x1A	; 26
     b74:	8a 95       	dec	r24
     b76:	f1 f7       	brne	.-4      	; 0xb74 <led_clock_pulse+0xc>
     b78:	00 c0       	rjmp	.+0      	; 0xb7a <led_clock_pulse+0x12>
	_delay_us(SETUP_DELAY_US);
	PORTB |= (1<<PB_LED_CLK);
     b7a:	c2 9a       	sbi	0x18, 2	; 24
     b7c:	8a e1       	ldi	r24, 0x1A	; 26
     b7e:	8a 95       	dec	r24
     b80:	f1 f7       	brne	.-4      	; 0xb7e <led_clock_pulse+0x16>
     b82:	00 c0       	rjmp	.+0      	; 0xb84 <led_clock_pulse+0x1c>
	_delay_us(SHIFT_DELAY_US);
	PORTB &= ~(1<<PB_LED_CLK);
     b84:	c2 98       	cbi	0x18, 2	; 24
     b86:	08 95       	ret

00000b88 <set_led_segments>:
// Outputs decoded segment data to port bits
void set_led_segments(uint8_t seg_ch)
{
	uint8_t pdat;
	seg_ch ^= LED_SEGMENT_MASK;
	pdat = PORTC & ~( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
     b88:	25 b3       	in	r18, 0x15	; 21
	pdat |= (seg_ch & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
     b8a:	98 2f       	mov	r25, r24
     b8c:	9f 71       	andi	r25, 0x1F	; 31
// Outputs decoded segment data to port bits
void set_led_segments(uint8_t seg_ch)
{
	uint8_t pdat;
	seg_ch ^= LED_SEGMENT_MASK;
	pdat = PORTC & ~( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
     b8e:	20 7e       	andi	r18, 0xE0	; 224
	pdat |= (seg_ch & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
     b90:	92 2b       	or	r25, r18
	PORTC = pdat;
     b92:	95 bb       	out	0x15, r25	; 21
	seg_ch >>= 2;
	pdat = PORTB & ~( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     b94:	98 b3       	in	r25, 0x18	; 24
	uint8_t pdat;
	seg_ch ^= LED_SEGMENT_MASK;
	pdat = PORTC & ~( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
	pdat |= (seg_ch & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
	PORTC = pdat;
	seg_ch >>= 2;
     b96:	86 95       	lsr	r24
     b98:	86 95       	lsr	r24
	pdat = PORTB & ~( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
	pdat |= (seg_ch & ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) ));
     b9a:	88 73       	andi	r24, 0x38	; 56
	seg_ch ^= LED_SEGMENT_MASK;
	pdat = PORTC & ~( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
	pdat |= (seg_ch & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
	PORTC = pdat;
	seg_ch >>= 2;
	pdat = PORTB & ~( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     b9c:	97 7c       	andi	r25, 0xC7	; 199
	pdat |= (seg_ch & ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) ));
     b9e:	89 2b       	or	r24, r25
	PORTB = pdat;
     ba0:	88 bb       	out	0x18, r24	; 24
     ba2:	08 95       	ret

00000ba4 <enable_led_segments_pullups>:

// Turns segment port bits to HI-Z and
// enables pull-ups
void enable_led_segments_pullups()
{
	PORTC |= ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
     ba4:	85 b3       	in	r24, 0x15	; 21
     ba6:	8f 61       	ori	r24, 0x1F	; 31
     ba8:	85 bb       	out	0x15, r24	; 21
	PORTB |= ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     baa:	88 b3       	in	r24, 0x18	; 24
     bac:	88 63       	ori	r24, 0x38	; 56
     bae:	88 bb       	out	0x18, r24	; 24
     bb0:	08 95       	ret

00000bb2 <enable_led_segments>:
}	

void enable_led_segments()
{
	DDRC |= ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
     bb2:	84 b3       	in	r24, 0x14	; 20
     bb4:	8f 61       	ori	r24, 0x1F	; 31
     bb6:	84 bb       	out	0x14, r24	; 20
	DDRB |= ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     bb8:	87 b3       	in	r24, 0x17	; 23
     bba:	88 63       	ori	r24, 0x38	; 56
     bbc:	87 bb       	out	0x17, r24	; 23
     bbe:	08 95       	ret

00000bc0 <disable_led_segments>:
}

void disable_led_segments()
{
	DDRC &= ~( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
     bc0:	84 b3       	in	r24, 0x14	; 20
     bc2:	80 7e       	andi	r24, 0xE0	; 224
     bc4:	84 bb       	out	0x14, r24	; 20
	DDRB &= ~( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     bc6:	87 b3       	in	r24, 0x17	; 23
     bc8:	87 7c       	andi	r24, 0xC7	; 199
     bca:	87 bb       	out	0x17, r24	; 23
     bcc:	08 95       	ret

00000bce <capture_button_state>:


void capture_button_state()
{
	uint8_t pdat;
	pdat = PINB  & ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     bce:	86 b3       	in	r24, 0x16	; 22
     bd0:	88 73       	andi	r24, 0x38	; 56
	pdat <<= 2;
	pdat |= (PINC & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
     bd2:	93 b3       	in	r25, 0x13	; 19

void capture_button_state()
{
	uint8_t pdat;
	pdat = PINB  & ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
	pdat <<= 2;
     bd4:	88 0f       	add	r24, r24
     bd6:	88 0f       	add	r24, r24
	pdat |= (PINC & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
     bd8:	9f 71       	andi	r25, 0x1F	; 31
     bda:	89 2b       	or	r24, r25
	raw_button_state = pdat ^ RAW_BUTTONS_INVERSE_MASK;
     bdc:	80 95       	com	r24
     bde:	80 93 64 01 	sts	0x0164, r24
     be2:	08 95       	ret

00000be4 <processItemFunction>:
//	Arguments:
//		funcAddr - address of the function to run.
//-----------------------------------------------------------------//
static inline void processItemFunction(FuncPtr funcAddr)
{
	if (funcAddr != 0)
     be4:	00 97       	sbiw	r24, 0x00	; 0
     be6:	11 f0       	breq	.+4      	; 0xbec <processItemFunction+0x8>
		((FuncPtr)funcAddr)();
     be8:	fc 01       	movw	r30, r24
     bea:	09 94       	ijmp
     bec:	08 95       	ret

00000bee <mf_setTempLeave>:
		clearExtraLeds(LED_TEMP);
}

void mf_setTempLeave(void)
{
	userTimer.Enabled = 0;
     bee:	e7 ee       	ldi	r30, 0xE7	; 231
     bf0:	f0 e0       	ldi	r31, 0x00	; 0
     bf2:	80 81       	ld	r24, Z
     bf4:	8e 7f       	andi	r24, 0xFE	; 254
     bf6:	80 83       	st	Z, r24
     bf8:	08 95       	ret

00000bfa <mf_leafSelectAct>:
	userTimer.FA_GE = 1;	
}

void mf_leafSelectAct(void)
{
	userTimer.Timer = 0;
     bfa:	10 92 e8 00 	sts	0x00E8, r1
	userTimer.Top = BLINK_PERIOD - 1;
     bfe:	87 e0       	ldi	r24, 0x07	; 7
     c00:	80 93 e9 00 	sts	0x00E9, r24
	userTimer.CompA = BLINK_PERIOD / 2;
     c04:	84 e0       	ldi	r24, 0x04	; 4
     c06:	80 93 ea 00 	sts	0x00EA, r24
	userTimer.Enabled = 1;
     c0a:	e7 ee       	ldi	r30, 0xE7	; 231
     c0c:	f0 e0       	ldi	r31, 0x00	; 0
     c0e:	80 81       	ld	r24, Z
     c10:	81 60       	ori	r24, 0x01	; 1
     c12:	80 83       	st	Z, r24
     c14:	08 95       	ret

00000c16 <mf_leafExit>:
}

void mf_leafExit(void)
{
	userTimer.Enabled = 0;	
     c16:	e7 ee       	ldi	r30, 0xE7	; 231
     c18:	f0 e0       	ldi	r31, 0x00	; 0
     c1a:	80 81       	ld	r24, Z
     c1c:	8e 7f       	andi	r24, 0xFE	; 254
     c1e:	80 83       	st	Z, r24
     c20:	08 95       	ret

00000c22 <mf_actpoffLeave>:
	printLedBuffer(0,"   OFF");
}

void mf_actpoffLeave(void)
{
	autoPowerOffState = 0;	
     c22:	10 92 fc 00 	sts	0x00FC, r1
     c26:	08 95       	ret

00000c28 <mf_cdoneDo>:
	calculateCoeffs();
}

void mf_cdoneDo(void)
{
	printLedBuffer(0," DONE ");
     c28:	68 ea       	ldi	r22, 0xA8	; 168
     c2a:	70 e0       	ldi	r23, 0x00	; 0
     c2c:	80 e0       	ldi	r24, 0x00	; 0
     c2e:	49 cf       	rjmp	.-366    	; 0xac2 <printLedBuffer>

00000c30 <mf_actpoffDo>:
}

// Indication of power off mode
void mf_actpoffDo(void)
{
	printLedBuffer(0,"   OFF");
     c30:	6f ea       	ldi	r22, 0xAF	; 175
     c32:	70 e0       	ldi	r23, 0x00	; 0
     c34:	80 e0       	ldi	r24, 0x00	; 0
     c36:	45 cf       	rjmp	.-374    	; 0xac2 <printLedBuffer>

00000c38 <mf_cdone2Select>:
}

void mf_cdone2Select(void)
{
	// Save current ADC as calibrating point
	cpoint2_adc = adc_normalized;
     c38:	80 91 2d 01 	lds	r24, 0x012D
     c3c:	90 91 2e 01 	lds	r25, 0x012E
     c40:	90 93 4e 01 	sts	0x014E, r25
     c44:	80 93 4d 01 	sts	0x014D, r24
	// Save current Celsius degree
	cpoint2 = cpoint2_copy;
     c48:	80 91 ec 00 	lds	r24, 0x00EC
     c4c:	80 93 51 01 	sts	0x0151, r24
	// Calculate new coefficient for temperature conversion
	calculateCoeffs();
     c50:	c9 ca       	rjmp	.-2670   	; 0x1e4 <calculateCoeffs>

00000c52 <mf_cdone1Select>:
//---------------------------------------------//

void mf_cdone1Select(void)
{
	// Save current ADC as calibrating point
	cpoint1_adc = adc_normalized;
     c52:	80 91 2d 01 	lds	r24, 0x012D
     c56:	90 91 2e 01 	lds	r25, 0x012E
     c5a:	90 93 4a 01 	sts	0x014A, r25
     c5e:	80 93 49 01 	sts	0x0149, r24
	// Save current Celsius degree
	cpoint1 = cpoint1_copy;
     c62:	80 91 eb 00 	lds	r24, 0x00EB
     c66:	80 93 31 01 	sts	0x0131, r24
	// Calculate new coefficient for temperature conversion
	calculateCoeffs();
     c6a:	bc ca       	rjmp	.-2696   	; 0x1e4 <calculateCoeffs>

00000c6c <mf_autopoffDo>:

//---------------------------------------------//


void mf_autopoffDo(void)
{
     c6c:	cf 93       	push	r28
     c6e:	df 93       	push	r29
     c70:	cd b7       	in	r28, 0x3d	; 61
     c72:	de b7       	in	r29, 0x3e	; 62
     c74:	27 97       	sbiw	r28, 0x07	; 7
     c76:	0f b6       	in	r0, 0x3f	; 63
     c78:	f8 94       	cli
     c7a:	de bf       	out	0x3e, r29	; 62
     c7c:	0f be       	out	0x3f, r0	; 63
     c7e:	cd bf       	out	0x3d, r28	; 61
	char str[] = {'O','F','F',' ',' ',' ',0};
     c80:	87 e0       	ldi	r24, 0x07	; 7
     c82:	ee e7       	ldi	r30, 0x7E	; 126
     c84:	f0 e0       	ldi	r31, 0x00	; 0
     c86:	de 01       	movw	r26, r28
     c88:	11 96       	adiw	r26, 0x01	; 1
     c8a:	01 90       	ld	r0, Z+
     c8c:	0d 92       	st	X+, r0
     c8e:	8a 95       	dec	r24
     c90:	e1 f7       	brne	.-8      	; 0xc8a <mf_autopoffDo+0x1e>
		
		
	if (button_state & (BD_UP | BR_UP))
     c92:	80 91 cc 00 	lds	r24, 0x00CC
     c96:	90 91 cd 00 	lds	r25, 0x00CD
     c9a:	9c 01       	movw	r18, r24
     c9c:	22 70       	andi	r18, 0x02	; 2
     c9e:	34 70       	andi	r19, 0x04	; 4
     ca0:	23 2b       	or	r18, r19
     ca2:	31 f0       	breq	.+12     	; 0xcb0 <mf_autopoffDo+0x44>
	{
		if (power_off_timeout < MAX_POWEROFF_TIMEOUT)
     ca4:	80 91 4b 01 	lds	r24, 0x014B
     ca8:	8f 35       	cpi	r24, 0x5F	; 95
     caa:	68 f4       	brcc	.+26     	; 0xcc6 <mf_autopoffDo+0x5a>
			power_off_timeout += 5;
     cac:	8b 5f       	subi	r24, 0xFB	; 251
     cae:	09 c0       	rjmp	.+18     	; 0xcc2 <mf_autopoffDo+0x56>
		restartMenuTimer();
	}
	else if (button_state & (BD_DOWN | BR_DOWN))
     cb0:	84 70       	andi	r24, 0x04	; 4
     cb2:	98 70       	andi	r25, 0x08	; 8
     cb4:	89 2b       	or	r24, r25
     cb6:	49 f0       	breq	.+18     	; 0xcca <mf_autopoffDo+0x5e>
	{
		if (power_off_timeout > MIN_POWEROFF_TIMEOUT)
     cb8:	80 91 4b 01 	lds	r24, 0x014B
     cbc:	86 30       	cpi	r24, 0x06	; 6
     cbe:	18 f0       	brcs	.+6      	; 0xcc6 <mf_autopoffDo+0x5a>
			power_off_timeout -= 5;
     cc0:	85 50       	subi	r24, 0x05	; 5
     cc2:	80 93 4b 01 	sts	0x014B, r24
//	 Restarts menu state timeout
//	Should be used in RUN function when control buttons are pressed.
//-----------------------------------------------------------------//
static void restartMenuTimer(void)
{
	menuTimer.Timer = 0;
     cc6:	10 92 75 00 	sts	0x0075, r1
		if (power_off_timeout > MIN_POWEROFF_TIMEOUT)
			power_off_timeout -= 5;
		restartMenuTimer();
	}	
		
	if (userTimer.FA_GE)
     cca:	80 91 e7 00 	lds	r24, 0x00E7
     cce:	84 ff       	sbrs	r24, 4
     cd0:	10 c0       	rjmp	.+32     	; 0xcf2 <mf_autopoffDo+0x86>
	{
		if (power_off_timeout != MAX_POWEROFF_TIMEOUT)
     cd2:	80 91 4b 01 	lds	r24, 0x014B
     cd6:	8f 35       	cpi	r24, 0x5F	; 95
     cd8:	41 f0       	breq	.+16     	; 0xcea <mf_autopoffDo+0x7e>
			u16toa_align_right(power_off_timeout,str + 4,0x80 | 2,' ');	
     cda:	20 e2       	ldi	r18, 0x20	; 32
     cdc:	42 e8       	ldi	r20, 0x82	; 130
     cde:	be 01       	movw	r22, r28
     ce0:	6b 5f       	subi	r22, 0xFB	; 251
     ce2:	7f 4f       	sbci	r23, 0xFF	; 255
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	b6 d2       	rcall	.+1388   	; 0x1254 <u16toa_align_right>
     ce8:	04 c0       	rjmp	.+8      	; 0xcf2 <mf_autopoffDo+0x86>
		else 
		{
			str[4] = 'N';
     cea:	8e e4       	ldi	r24, 0x4E	; 78
     cec:	8d 83       	std	Y+5, r24	; 0x05
			str[5] = 'O';
     cee:	8f e4       	ldi	r24, 0x4F	; 79
     cf0:	8e 83       	std	Y+6, r24	; 0x06
		}			
	}		
		
	printLedBuffer(0,str);
     cf2:	be 01       	movw	r22, r28
     cf4:	6f 5f       	subi	r22, 0xFF	; 255
     cf6:	7f 4f       	sbci	r23, 0xFF	; 255
     cf8:	80 e0       	ldi	r24, 0x00	; 0
     cfa:	e3 de       	rcall	.-570    	; 0xac2 <printLedBuffer>
}
     cfc:	27 96       	adiw	r28, 0x07	; 7
     cfe:	0f b6       	in	r0, 0x3f	; 63
     d00:	f8 94       	cli
     d02:	de bf       	out	0x3e, r29	; 62
     d04:	0f be       	out	0x3f, r0	; 63
     d06:	cd bf       	out	0x3d, r28	; 61
     d08:	df 91       	pop	r29
     d0a:	cf 91       	pop	r28
     d0c:	08 95       	ret

00000d0e <mf_realTempDo>:
{
	setExtraLeds(LED_TEMP);
}

void mf_realTempDo(void)
{
     d0e:	cf 93       	push	r28
     d10:	df 93       	push	r29
     d12:	cd b7       	in	r28, 0x3d	; 61
     d14:	de b7       	in	r29, 0x3e	; 62
     d16:	27 97       	sbiw	r28, 0x07	; 7
     d18:	0f b6       	in	r0, 0x3f	; 63
     d1a:	f8 94       	cli
     d1c:	de bf       	out	0x3e, r29	; 62
     d1e:	0f be       	out	0x3f, r0	; 63
     d20:	cd bf       	out	0x3d, r28	; 61
	char str[] = {' ',' ',' ',' ',0xB0,'C',0};
     d22:	87 e0       	ldi	r24, 0x07	; 7
     d24:	e5 e8       	ldi	r30, 0x85	; 133
     d26:	f0 e0       	ldi	r31, 0x00	; 0
     d28:	de 01       	movw	r26, r28
     d2a:	11 96       	adiw	r26, 0x01	; 1
     d2c:	01 90       	ld	r0, Z+
     d2e:	0d 92       	st	X+, r0
     d30:	8a 95       	dec	r24
     d32:	e1 f7       	brne	.-8      	; 0xd2c <mf_realTempDo+0x1e>
	// Output ADC result to LED
	u16toa_align_right(adc_celsius,str,0x80 | 4,' ');
     d34:	20 e2       	ldi	r18, 0x20	; 32
     d36:	44 e8       	ldi	r20, 0x84	; 132
     d38:	be 01       	movw	r22, r28
     d3a:	6f 5f       	subi	r22, 0xFF	; 255
     d3c:	7f 4f       	sbci	r23, 0xFF	; 255
     d3e:	80 91 2f 01 	lds	r24, 0x012F
     d42:	90 91 30 01 	lds	r25, 0x0130
     d46:	86 d2       	rcall	.+1292   	; 0x1254 <u16toa_align_right>
	printLedBuffer(0,str);
     d48:	be 01       	movw	r22, r28
     d4a:	6f 5f       	subi	r22, 0xFF	; 255
     d4c:	7f 4f       	sbci	r23, 0xFF	; 255
     d4e:	80 e0       	ldi	r24, 0x00	; 0
     d50:	b8 de       	rcall	.-656    	; 0xac2 <printLedBuffer>
}
     d52:	27 96       	adiw	r28, 0x07	; 7
     d54:	0f b6       	in	r0, 0x3f	; 63
     d56:	f8 94       	cli
     d58:	de bf       	out	0x3e, r29	; 62
     d5a:	0f be       	out	0x3f, r0	; 63
     d5c:	cd bf       	out	0x3d, r28	; 61
     d5e:	df 91       	pop	r29
     d60:	cf 91       	pop	r28
     d62:	08 95       	ret

00000d64 <mf_calib2Do>:
}

//---------------------------------------------//

void mf_calib2Do(void)
{
     d64:	cf 93       	push	r28
     d66:	df 93       	push	r29
     d68:	cd b7       	in	r28, 0x3d	; 61
     d6a:	de b7       	in	r29, 0x3e	; 62
     d6c:	27 97       	sbiw	r28, 0x07	; 7
     d6e:	0f b6       	in	r0, 0x3f	; 63
     d70:	f8 94       	cli
     d72:	de bf       	out	0x3e, r29	; 62
     d74:	0f be       	out	0x3f, r0	; 63
     d76:	cd bf       	out	0x3d, r28	; 61
	char str[] = {'P','2',' ',' ',' ',' ',0};
     d78:	87 e0       	ldi	r24, 0x07	; 7
     d7a:	ec e8       	ldi	r30, 0x8C	; 140
     d7c:	f0 e0       	ldi	r31, 0x00	; 0
     d7e:	de 01       	movw	r26, r28
     d80:	11 96       	adiw	r26, 0x01	; 1
     d82:	01 90       	ld	r0, Z+
     d84:	0d 92       	st	X+, r0
     d86:	8a 95       	dec	r24
     d88:	e1 f7       	brne	.-8      	; 0xd82 <mf_calib2Do+0x1e>
	
	
	if (button_state & (BD_UP | BR_UP))
     d8a:	80 91 cc 00 	lds	r24, 0x00CC
     d8e:	90 91 cd 00 	lds	r25, 0x00CD
     d92:	9c 01       	movw	r18, r24
     d94:	22 70       	andi	r18, 0x02	; 2
     d96:	34 70       	andi	r19, 0x04	; 4
     d98:	23 2b       	or	r18, r19
     d9a:	31 f0       	breq	.+12     	; 0xda8 <mf_calib2Do+0x44>
	{
		if (cpoint2_copy < MAX_CALIB_TEMP)
     d9c:	80 91 ec 00 	lds	r24, 0x00EC
     da0:	8a 3f       	cpi	r24, 0xFA	; 250
     da2:	68 f4       	brcc	.+26     	; 0xdbe <mf_calib2Do+0x5a>
		cpoint2_copy += 1;
     da4:	8f 5f       	subi	r24, 0xFF	; 255
     da6:	09 c0       	rjmp	.+18     	; 0xdba <mf_calib2Do+0x56>
	}
	else if (button_state & (BD_DOWN | BR_DOWN))
     da8:	84 70       	andi	r24, 0x04	; 4
     daa:	98 70       	andi	r25, 0x08	; 8
     dac:	89 2b       	or	r24, r25
     dae:	39 f0       	breq	.+14     	; 0xdbe <mf_calib2Do+0x5a>
	{
		if (cpoint2_copy > MIN_CALIB_TEMP)
     db0:	80 91 ec 00 	lds	r24, 0x00EC
     db4:	8b 30       	cpi	r24, 0x0B	; 11
     db6:	18 f0       	brcs	.+6      	; 0xdbe <mf_calib2Do+0x5a>
		cpoint2_copy -= 1;
     db8:	81 50       	subi	r24, 0x01	; 1
     dba:	80 93 ec 00 	sts	0x00EC, r24
	}
	
	if (userTimer.FA_GE)
     dbe:	80 91 e7 00 	lds	r24, 0x00E7
     dc2:	84 ff       	sbrs	r24, 4
     dc4:	09 c0       	rjmp	.+18     	; 0xdd8 <mf_calib2Do+0x74>
	{
		u16toa_align_right(cpoint2_copy,str + 3,0x80 | 3,' ');
     dc6:	20 e2       	ldi	r18, 0x20	; 32
     dc8:	43 e8       	ldi	r20, 0x83	; 131
     dca:	be 01       	movw	r22, r28
     dcc:	6c 5f       	subi	r22, 0xFC	; 252
     dce:	7f 4f       	sbci	r23, 0xFF	; 255
     dd0:	80 91 ec 00 	lds	r24, 0x00EC
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	3e d2       	rcall	.+1148   	; 0x1254 <u16toa_align_right>
	}
	
	printLedBuffer(0,str);
     dd8:	be 01       	movw	r22, r28
     dda:	6f 5f       	subi	r22, 0xFF	; 255
     ddc:	7f 4f       	sbci	r23, 0xFF	; 255
     dde:	80 e0       	ldi	r24, 0x00	; 0
     de0:	70 de       	rcall	.-800    	; 0xac2 <printLedBuffer>
	
	resetAutoPowerOffCounter();
     de2:	09 d5       	rcall	.+2578   	; 0x17f6 <resetAutoPowerOffCounter>
}
     de4:	27 96       	adiw	r28, 0x07	; 7
     de6:	0f b6       	in	r0, 0x3f	; 63
     de8:	f8 94       	cli
     dea:	de bf       	out	0x3e, r29	; 62
     dec:	0f be       	out	0x3f, r0	; 63
     dee:	cd bf       	out	0x3d, r28	; 61
     df0:	df 91       	pop	r29
     df2:	cf 91       	pop	r28
     df4:	08 95       	ret

00000df6 <mf_calib1Do>:
	cpoint1_copy = cpoint1;
	cpoint2_copy = cpoint2;
}

void mf_calib1Do(void)
{
     df6:	cf 93       	push	r28
     df8:	df 93       	push	r29
     dfa:	cd b7       	in	r28, 0x3d	; 61
     dfc:	de b7       	in	r29, 0x3e	; 62
     dfe:	27 97       	sbiw	r28, 0x07	; 7
     e00:	0f b6       	in	r0, 0x3f	; 63
     e02:	f8 94       	cli
     e04:	de bf       	out	0x3e, r29	; 62
     e06:	0f be       	out	0x3f, r0	; 63
     e08:	cd bf       	out	0x3d, r28	; 61
	char str[] = {'P','1',' ',' ',' ',' ',0};
     e0a:	87 e0       	ldi	r24, 0x07	; 7
     e0c:	e3 e9       	ldi	r30, 0x93	; 147
     e0e:	f0 e0       	ldi	r31, 0x00	; 0
     e10:	de 01       	movw	r26, r28
     e12:	11 96       	adiw	r26, 0x01	; 1
     e14:	01 90       	ld	r0, Z+
     e16:	0d 92       	st	X+, r0
     e18:	8a 95       	dec	r24
     e1a:	e1 f7       	brne	.-8      	; 0xe14 <mf_calib1Do+0x1e>
	
	
	if (button_state & (BD_UP | BR_UP))
     e1c:	80 91 cc 00 	lds	r24, 0x00CC
     e20:	90 91 cd 00 	lds	r25, 0x00CD
     e24:	9c 01       	movw	r18, r24
     e26:	22 70       	andi	r18, 0x02	; 2
     e28:	34 70       	andi	r19, 0x04	; 4
     e2a:	23 2b       	or	r18, r19
     e2c:	31 f0       	breq	.+12     	; 0xe3a <mf_calib1Do+0x44>
	{
		if (cpoint1_copy < MAX_CALIB_TEMP)
     e2e:	80 91 eb 00 	lds	r24, 0x00EB
     e32:	8a 3f       	cpi	r24, 0xFA	; 250
     e34:	68 f4       	brcc	.+26     	; 0xe50 <mf_calib1Do+0x5a>
			cpoint1_copy += 1;
     e36:	8f 5f       	subi	r24, 0xFF	; 255
     e38:	09 c0       	rjmp	.+18     	; 0xe4c <mf_calib1Do+0x56>
	}
	else if (button_state & (BD_DOWN | BR_DOWN))
     e3a:	84 70       	andi	r24, 0x04	; 4
     e3c:	98 70       	andi	r25, 0x08	; 8
     e3e:	89 2b       	or	r24, r25
     e40:	39 f0       	breq	.+14     	; 0xe50 <mf_calib1Do+0x5a>
	{
		if (cpoint1_copy > MIN_CALIB_TEMP)
     e42:	80 91 eb 00 	lds	r24, 0x00EB
     e46:	8b 30       	cpi	r24, 0x0B	; 11
     e48:	18 f0       	brcs	.+6      	; 0xe50 <mf_calib1Do+0x5a>
			cpoint1_copy -= 1;
     e4a:	81 50       	subi	r24, 0x01	; 1
     e4c:	80 93 eb 00 	sts	0x00EB, r24
	}
	
	if (userTimer.FA_GE)
     e50:	80 91 e7 00 	lds	r24, 0x00E7
     e54:	84 ff       	sbrs	r24, 4
     e56:	09 c0       	rjmp	.+18     	; 0xe6a <mf_calib1Do+0x74>
	{
		u16toa_align_right(cpoint1_copy,str + 3,0x80 | 3,' ');
     e58:	20 e2       	ldi	r18, 0x20	; 32
     e5a:	43 e8       	ldi	r20, 0x83	; 131
     e5c:	be 01       	movw	r22, r28
     e5e:	6c 5f       	subi	r22, 0xFC	; 252
     e60:	7f 4f       	sbci	r23, 0xFF	; 255
     e62:	80 91 eb 00 	lds	r24, 0x00EB
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	f5 d1       	rcall	.+1002   	; 0x1254 <u16toa_align_right>
	}
	
	printLedBuffer(0,str);
     e6a:	be 01       	movw	r22, r28
     e6c:	6f 5f       	subi	r22, 0xFF	; 255
     e6e:	7f 4f       	sbci	r23, 0xFF	; 255
     e70:	80 e0       	ldi	r24, 0x00	; 0
     e72:	27 de       	rcall	.-946    	; 0xac2 <printLedBuffer>
	
	resetAutoPowerOffCounter();
     e74:	c0 d4       	rcall	.+2432   	; 0x17f6 <resetAutoPowerOffCounter>
}
     e76:	27 96       	adiw	r28, 0x07	; 7
     e78:	0f b6       	in	r0, 0x3f	; 63
     e7a:	f8 94       	cli
     e7c:	de bf       	out	0x3e, r29	; 62
     e7e:	0f be       	out	0x3f, r0	; 63
     e80:	cd bf       	out	0x3d, r28	; 61
     e82:	df 91       	pop	r29
     e84:	cf 91       	pop	r28
     e86:	08 95       	ret

00000e88 <mf_actpoffSelect>:



void mf_actpoffSelect(void)
{
	clearExtraLeds(LED_TEMP | LED_ROLL);
     e88:	83 e0       	ldi	r24, 0x03	; 3
     e8a:	67 de       	rcall	.-818    	; 0xb5a <clearExtraLeds>
	autoPowerOffState = AUTO_POFF_ACTIVE;
     e8c:	81 e0       	ldi	r24, 0x01	; 1
     e8e:	80 93 fc 00 	sts	0x00FC, r24
     e92:	08 95       	ret

00000e94 <mf_leafSelect>:

// Select and exit functions, common for leaf menu items 

void mf_leafSelect(void)
{
	clearExtraLeds(LED_TEMP | LED_ROLL);
     e94:	83 e0       	ldi	r24, 0x03	; 3
     e96:	61 de       	rcall	.-830    	; 0xb5a <clearExtraLeds>
	userTimer.FA_GE = 1;	
     e98:	e7 ee       	ldi	r30, 0xE7	; 231
     e9a:	f0 e0       	ldi	r31, 0x00	; 0
     e9c:	80 81       	ld	r24, Z
     e9e:	80 61       	ori	r24, 0x10	; 16
     ea0:	80 83       	st	Z, r24
     ea2:	08 95       	ret

00000ea4 <mf_calibSelect>:

//---------------------------------------------//

void mf_calibSelect(void)
{
	mf_leafSelect();
     ea4:	f7 df       	rcall	.-18     	; 0xe94 <mf_leafSelect>
	cpoint1_copy = cpoint1;
     ea6:	80 91 31 01 	lds	r24, 0x0131
     eaa:	80 93 eb 00 	sts	0x00EB, r24
	cpoint2_copy = cpoint2;
     eae:	80 91 51 01 	lds	r24, 0x0151
     eb2:	80 93 ec 00 	sts	0x00EC, r24
     eb6:	08 95       	ret

00000eb8 <mf_rollLeave>:
	printLedBuffer(0,str);
}

void mf_rollLeave(void)
{
	clearExtraLeds(LED_ROLL);
     eb8:	82 e0       	ldi	r24, 0x02	; 2
     eba:	4f de       	rcall	.-866    	; 0xb5a <clearExtraLeds>
	userTimer.Enabled = 0;
     ebc:	e7 ee       	ldi	r30, 0xE7	; 231
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	80 81       	ld	r24, Z
     ec2:	8e 7f       	andi	r24, 0xFE	; 254
     ec4:	80 83       	st	Z, r24
     ec6:	08 95       	ret

00000ec8 <mf_setTempSelect>:
//---------------------------------------------//


void mf_setTempSelect(void)
{
	clearExtraLeds(LED_TEMP);
     ec8:	81 e0       	ldi	r24, 0x01	; 1
     eca:	47 de       	rcall	.-882    	; 0xb5a <clearExtraLeds>
	mf_leafSelectAct();		// setup and start timer
     ecc:	96 ce       	rjmp	.-724    	; 0xbfa <mf_leafSelectAct>

00000ece <mf_realTempLeave>:
	printLedBuffer(0,str);
}

void mf_realTempLeave(void)
{
	clearExtraLeds(LED_TEMP);
     ece:	81 e0       	ldi	r24, 0x01	; 1
     ed0:	44 ce       	rjmp	.-888    	; 0xb5a <clearExtraLeds>

00000ed2 <mf_sndenDo>:

//---------------------------------------------//


void mf_sndenDo(void)
{
     ed2:	cf 93       	push	r28
     ed4:	df 93       	push	r29
     ed6:	cd b7       	in	r28, 0x3d	; 61
     ed8:	de b7       	in	r29, 0x3e	; 62
     eda:	27 97       	sbiw	r28, 0x07	; 7
     edc:	0f b6       	in	r0, 0x3f	; 63
     ede:	f8 94       	cli
     ee0:	de bf       	out	0x3e, r29	; 62
     ee2:	0f be       	out	0x3f, r0	; 63
     ee4:	cd bf       	out	0x3d, r28	; 61
	char str[] = {'S','N','D',' ',' ',' ',0};
     ee6:	87 e0       	ldi	r24, 0x07	; 7
     ee8:	ea e9       	ldi	r30, 0x9A	; 154
     eea:	f0 e0       	ldi	r31, 0x00	; 0
     eec:	de 01       	movw	r26, r28
     eee:	11 96       	adiw	r26, 0x01	; 1
     ef0:	01 90       	ld	r0, Z+
     ef2:	0d 92       	st	X+, r0
     ef4:	8a 95       	dec	r24
     ef6:	e1 f7       	brne	.-8      	; 0xef0 <mf_sndenDo+0x1e>
		
	if (button_state & (BD_UP | BD_DOWN))
     ef8:	80 91 cc 00 	lds	r24, 0x00CC
     efc:	90 91 cd 00 	lds	r25, 0x00CD
     f00:	86 70       	andi	r24, 0x06	; 6
     f02:	99 27       	eor	r25, r25
     f04:	89 2b       	or	r24, r25
     f06:	49 f0       	breq	.+18     	; 0xf1a <mf_sndenDo+0x48>
	{
		sound_enable = !sound_enable;
     f08:	81 e0       	ldi	r24, 0x01	; 1
     f0a:	90 91 3b 01 	lds	r25, 0x013B
     f0e:	91 11       	cpse	r25, r1
     f10:	80 e0       	ldi	r24, 0x00	; 0
     f12:	80 93 3b 01 	sts	0x013B, r24
//	 Restarts menu state timeout
//	Should be used in RUN function when control buttons are pressed.
//-----------------------------------------------------------------//
static void restartMenuTimer(void)
{
	menuTimer.Timer = 0;
     f16:	10 92 75 00 	sts	0x0075, r1
	{
		sound_enable = !sound_enable;
		restartMenuTimer();
	}			
		
	if (userTimer.FA_GE)
     f1a:	80 91 e7 00 	lds	r24, 0x00E7
     f1e:	84 ff       	sbrs	r24, 4
     f20:	0d c0       	rjmp	.+26     	; 0xf3c <mf_sndenDo+0x6a>
	{
		if (sound_enable)		
     f22:	80 91 3b 01 	lds	r24, 0x013B
     f26:	88 23       	and	r24, r24
     f28:	21 f0       	breq	.+8      	; 0xf32 <mf_sndenDo+0x60>
		{
			str[4] = 'O';
     f2a:	8f e4       	ldi	r24, 0x4F	; 79
     f2c:	8d 83       	std	Y+5, r24	; 0x05
			str[5] = 'N';
     f2e:	8e e4       	ldi	r24, 0x4E	; 78
     f30:	04 c0       	rjmp	.+8      	; 0xf3a <mf_sndenDo+0x68>
		}
		else
		{
			str[3] = 'O';
     f32:	8f e4       	ldi	r24, 0x4F	; 79
     f34:	8c 83       	std	Y+4, r24	; 0x04
			str[4] = 'F';
     f36:	86 e4       	ldi	r24, 0x46	; 70
     f38:	8d 83       	std	Y+5, r24	; 0x05
			str[5] = 'F';
     f3a:	8e 83       	std	Y+6, r24	; 0x06
		}			
	}
		
	printLedBuffer(0,str);
     f3c:	be 01       	movw	r22, r28
     f3e:	6f 5f       	subi	r22, 0xFF	; 255
     f40:	7f 4f       	sbci	r23, 0xFF	; 255
     f42:	80 e0       	ldi	r24, 0x00	; 0
     f44:	be dd       	rcall	.-1156   	; 0xac2 <printLedBuffer>
	setComma(2);
     f46:	82 e0       	ldi	r24, 0x02	; 2
     f48:	f6 dd       	rcall	.-1044   	; 0xb36 <setComma>
}
     f4a:	27 96       	adiw	r28, 0x07	; 7
     f4c:	0f b6       	in	r0, 0x3f	; 63
     f4e:	f8 94       	cli
     f50:	de bf       	out	0x3e, r29	; 62
     f52:	0f be       	out	0x3f, r0	; 63
     f54:	cd bf       	out	0x3d, r28	; 61
     f56:	df 91       	pop	r29
     f58:	cf 91       	pop	r28
     f5a:	08 95       	ret

00000f5c <mf_rollDo>:
	setExtraLeds(LED_ROLL);
	mf_leafSelectAct();		// setup and start timer
}

void mf_rollDo(void)
{
     f5c:	cf 93       	push	r28
     f5e:	df 93       	push	r29
     f60:	cd b7       	in	r28, 0x3d	; 61
     f62:	de b7       	in	r29, 0x3e	; 62
     f64:	27 97       	sbiw	r28, 0x07	; 7
     f66:	0f b6       	in	r0, 0x3f	; 63
     f68:	f8 94       	cli
     f6a:	de bf       	out	0x3e, r29	; 62
     f6c:	0f be       	out	0x3f, r0	; 63
     f6e:	cd bf       	out	0x3d, r28	; 61
	char str[] = {' ',' ',' ',' ',' ',' ',0};
     f70:	87 e0       	ldi	r24, 0x07	; 7
     f72:	e1 ea       	ldi	r30, 0xA1	; 161
     f74:	f0 e0       	ldi	r31, 0x00	; 0
     f76:	de 01       	movw	r26, r28
     f78:	11 96       	adiw	r26, 0x01	; 1
     f7a:	01 90       	ld	r0, Z+
     f7c:	0d 92       	st	X+, r0
     f7e:	8a 95       	dec	r24
     f80:	e1 f7       	brne	.-8      	; 0xf7a <mf_rollDo+0x1e>
		
	if (button_state & (BD_UP | BR_UP))
     f82:	80 91 cc 00 	lds	r24, 0x00CC
     f86:	90 91 cd 00 	lds	r25, 0x00CD
     f8a:	9c 01       	movw	r18, r24
     f8c:	22 70       	andi	r18, 0x02	; 2
     f8e:	34 70       	andi	r19, 0x04	; 4
     f90:	40 91 3e 01 	lds	r20, 0x013E
     f94:	23 2b       	or	r18, r19
     f96:	21 f0       	breq	.+8      	; 0xfa0 <mf_rollDo+0x44>
	{
		if (rollCycleSet < MAX_ROLL_CYCLES)
     f98:	43 36       	cpi	r20, 0x63	; 99
     f9a:	58 f4       	brcc	.+22     	; 0xfb2 <mf_rollDo+0x56>
		rollCycleSet += 1;
     f9c:	4f 5f       	subi	r20, 0xFF	; 255
     f9e:	07 c0       	rjmp	.+14     	; 0xfae <mf_rollDo+0x52>
	}
	else if (button_state & (BD_DOWN | BR_DOWN))
     fa0:	84 70       	andi	r24, 0x04	; 4
     fa2:	98 70       	andi	r25, 0x08	; 8
     fa4:	89 2b       	or	r24, r25
     fa6:	29 f0       	breq	.+10     	; 0xfb2 <mf_rollDo+0x56>
	{
		if (rollCycleSet > MIN_ROLL_CYCLES)
     fa8:	42 30       	cpi	r20, 0x02	; 2
     faa:	18 f0       	brcs	.+6      	; 0xfb2 <mf_rollDo+0x56>
		rollCycleSet -= 1;
     fac:	41 50       	subi	r20, 0x01	; 1
     fae:	40 93 3e 01 	sts	0x013E, r20
	}	
		
	u16toa_align_right(rollCycleSet,str + 4,0x80 | 2,' ');
     fb2:	20 e2       	ldi	r18, 0x20	; 32
     fb4:	42 e8       	ldi	r20, 0x82	; 130
     fb6:	be 01       	movw	r22, r28
     fb8:	6b 5f       	subi	r22, 0xFB	; 251
     fba:	7f 4f       	sbci	r23, 0xFF	; 255
     fbc:	80 91 3e 01 	lds	r24, 0x013E
     fc0:	90 e0       	ldi	r25, 0x00	; 0
     fc2:	48 d1       	rcall	.+656    	; 0x1254 <u16toa_align_right>
	
	if ((!(rollState & ROLL_CYCLE)) || (userTimer.FA_GE))
     fc4:	80 91 ee 00 	lds	r24, 0x00EE
     fc8:	82 ff       	sbrs	r24, 2
     fca:	04 c0       	rjmp	.+8      	; 0xfd4 <mf_rollDo+0x78>
     fcc:	80 91 e7 00 	lds	r24, 0x00E7
     fd0:	84 ff       	sbrs	r24, 4
     fd2:	09 c0       	rjmp	.+18     	; 0xfe6 <mf_rollDo+0x8a>
	{
		u16toa_align_right(activeRollCycle,str + 1,0x80 | 2,' ');
     fd4:	20 e2       	ldi	r18, 0x20	; 32
     fd6:	42 e8       	ldi	r20, 0x82	; 130
     fd8:	be 01       	movw	r22, r28
     fda:	6e 5f       	subi	r22, 0xFE	; 254
     fdc:	7f 4f       	sbci	r23, 0xFF	; 255
     fde:	80 91 ed 00 	lds	r24, 0x00ED
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	37 d1       	rcall	.+622    	; 0x1254 <u16toa_align_right>
	}
	
	str[0] = 0;
     fe6:	19 82       	std	Y+1, r1	; 0x01
	if (isTopPointValid())
     fe8:	63 d2       	rcall	.+1222   	; 0x14b0 <isTopPointValid>
     fea:	88 23       	and	r24, r24
     fec:	19 f0       	breq	.+6      	; 0xff4 <mf_rollDo+0x98>
		str[0] |= SEGA;
     fee:	89 81       	ldd	r24, Y+1	; 0x01
     ff0:	81 60       	ori	r24, 0x01	; 1
     ff2:	89 83       	std	Y+1, r24	; 0x01
	if (isBottomPointValid())
     ff4:	6d d2       	rcall	.+1242   	; 0x14d0 <isBottomPointValid>
     ff6:	88 23       	and	r24, r24
     ff8:	19 f0       	breq	.+6      	; 0x1000 <mf_rollDo+0xa4>
		str[0] |= SEGD;
     ffa:	89 81       	ldd	r24, Y+1	; 0x01
     ffc:	88 60       	ori	r24, 0x08	; 8
     ffe:	89 83       	std	Y+1, r24	; 0x01
	if (str[0] == 0)
    1000:	89 81       	ldd	r24, Y+1	; 0x01
    1002:	81 11       	cpse	r24, r1
    1004:	02 c0       	rjmp	.+4      	; 0x100a <mf_rollDo+0xae>
		str[0] = ' ';
    1006:	80 e2       	ldi	r24, 0x20	; 32
    1008:	89 83       	std	Y+1, r24	; 0x01
		
	printLedBuffer(0,str);
    100a:	be 01       	movw	r22, r28
    100c:	6f 5f       	subi	r22, 0xFF	; 255
    100e:	7f 4f       	sbci	r23, 0xFF	; 255
    1010:	80 e0       	ldi	r24, 0x00	; 0
    1012:	57 dd       	rcall	.-1362   	; 0xac2 <printLedBuffer>
}
    1014:	27 96       	adiw	r28, 0x07	; 7
    1016:	0f b6       	in	r0, 0x3f	; 63
    1018:	f8 94       	cli
    101a:	de bf       	out	0x3e, r29	; 62
    101c:	0f be       	out	0x3f, r0	; 63
    101e:	cd bf       	out	0x3d, r28	; 61
    1020:	df 91       	pop	r29
    1022:	cf 91       	pop	r28
    1024:	08 95       	ret

00001026 <mf_rollSelect>:
//---------------------------------------------//
//---------------------------------------------//

void mf_rollSelect(void)
{
	setExtraLeds(LED_ROLL);
    1026:	82 e0       	ldi	r24, 0x02	; 2
    1028:	92 dd       	rcall	.-1244   	; 0xb4e <setExtraLeds>
	mf_leafSelectAct();		// setup and start timer
    102a:	e7 cd       	rjmp	.-1074   	; 0xbfa <mf_leafSelectAct>

0000102c <mf_setTempDo>:
	clearExtraLeds(LED_TEMP);
	mf_leafSelectAct();		// setup and start timer
}

void mf_setTempDo(void)
{
    102c:	cf 93       	push	r28
    102e:	df 93       	push	r29
    1030:	cd b7       	in	r28, 0x3d	; 61
    1032:	de b7       	in	r29, 0x3e	; 62
    1034:	27 97       	sbiw	r28, 0x07	; 7
    1036:	0f b6       	in	r0, 0x3f	; 63
    1038:	f8 94       	cli
    103a:	de bf       	out	0x3e, r29	; 62
    103c:	0f be       	out	0x3f, r0	; 63
    103e:	cd bf       	out	0x3d, r28	; 61
	char str[] = {' ',' ',' ',' ',0xB0,'C',0};
    1040:	87 e0       	ldi	r24, 0x07	; 7
    1042:	e5 e8       	ldi	r30, 0x85	; 133
    1044:	f0 e0       	ldi	r31, 0x00	; 0
    1046:	de 01       	movw	r26, r28
    1048:	11 96       	adiw	r26, 0x01	; 1
    104a:	01 90       	ld	r0, Z+
    104c:	0d 92       	st	X+, r0
    104e:	8a 95       	dec	r24
    1050:	e1 f7       	brne	.-8      	; 0x104a <mf_setTempDo+0x1e>

	
	if (button_state & (BD_UP | BR_UP))
    1052:	20 91 cc 00 	lds	r18, 0x00CC
    1056:	30 91 cd 00 	lds	r19, 0x00CD
    105a:	a9 01       	movw	r20, r18
    105c:	42 70       	andi	r20, 0x02	; 2
    105e:	54 70       	andi	r21, 0x04	; 4
    1060:	80 91 39 01 	lds	r24, 0x0139
    1064:	90 91 3a 01 	lds	r25, 0x013A
    1068:	45 2b       	or	r20, r21
    106a:	29 f0       	breq	.+10     	; 0x1076 <mf_setTempDo+0x4a>
	{
		if (setup_temp_value < MAX_SET_TEMP)
    106c:	82 3d       	cpi	r24, 0xD2	; 210
    106e:	91 05       	cpc	r25, r1
    1070:	70 f4       	brcc	.+28     	; 0x108e <mf_setTempDo+0x62>
			setup_temp_value += 5;
    1072:	05 96       	adiw	r24, 0x05	; 5
    1074:	08 c0       	rjmp	.+16     	; 0x1086 <mf_setTempDo+0x5a>
		restartMenuTimer();
	}
	else if (button_state & (BD_DOWN | BR_DOWN))
    1076:	24 70       	andi	r18, 0x04	; 4
    1078:	38 70       	andi	r19, 0x08	; 8
    107a:	23 2b       	or	r18, r19
    107c:	51 f0       	breq	.+20     	; 0x1092 <mf_setTempDo+0x66>
	{
		if (setup_temp_value > MIN_SET_TEMP)
    107e:	8f 31       	cpi	r24, 0x1F	; 31
    1080:	91 05       	cpc	r25, r1
    1082:	28 f0       	brcs	.+10     	; 0x108e <mf_setTempDo+0x62>
			setup_temp_value -= 5;
    1084:	05 97       	sbiw	r24, 0x05	; 5
    1086:	90 93 3a 01 	sts	0x013A, r25
    108a:	80 93 39 01 	sts	0x0139, r24
//	 Restarts menu state timeout
//	Should be used in RUN function when control buttons are pressed.
//-----------------------------------------------------------------//
static void restartMenuTimer(void)
{
	menuTimer.Timer = 0;
    108e:	10 92 75 00 	sts	0x0075, r1
			setup_temp_value -= 5;
		restartMenuTimer();
	}					
		
	// Output ADC result to LED
	u16toa_align_right(setup_temp_value,str,0x80 | 4,' ');
    1092:	20 e2       	ldi	r18, 0x20	; 32
    1094:	44 e8       	ldi	r20, 0x84	; 132
    1096:	be 01       	movw	r22, r28
    1098:	6f 5f       	subi	r22, 0xFF	; 255
    109a:	7f 4f       	sbci	r23, 0xFF	; 255
    109c:	80 91 39 01 	lds	r24, 0x0139
    10a0:	90 91 3a 01 	lds	r25, 0x013A
    10a4:	d7 d0       	rcall	.+430    	; 0x1254 <u16toa_align_right>
	printLedBuffer(0,str);
    10a6:	be 01       	movw	r22, r28
    10a8:	6f 5f       	subi	r22, 0xFF	; 255
    10aa:	7f 4f       	sbci	r23, 0xFF	; 255
    10ac:	80 e0       	ldi	r24, 0x00	; 0
    10ae:	09 dd       	rcall	.-1518   	; 0xac2 <printLedBuffer>
	
	if (userTimer.FA_GE)
    10b0:	80 91 e7 00 	lds	r24, 0x00E7
    10b4:	84 ff       	sbrs	r24, 4
    10b6:	03 c0       	rjmp	.+6      	; 0x10be <mf_setTempDo+0x92>
		setExtraLeds(LED_TEMP);
    10b8:	81 e0       	ldi	r24, 0x01	; 1
    10ba:	49 dd       	rcall	.-1390   	; 0xb4e <setExtraLeds>
    10bc:	02 c0       	rjmp	.+4      	; 0x10c2 <mf_setTempDo+0x96>
	else
		clearExtraLeds(LED_TEMP);
    10be:	81 e0       	ldi	r24, 0x01	; 1
    10c0:	4c dd       	rcall	.-1384   	; 0xb5a <clearExtraLeds>
}
    10c2:	27 96       	adiw	r28, 0x07	; 7
    10c4:	0f b6       	in	r0, 0x3f	; 63
    10c6:	f8 94       	cli
    10c8:	de bf       	out	0x3e, r29	; 62
    10ca:	0f be       	out	0x3f, r0	; 63
    10cc:	cd bf       	out	0x3d, r28	; 61
    10ce:	df 91       	pop	r29
    10d0:	cf 91       	pop	r28
    10d2:	08 95       	ret

000010d4 <mf_realTempSelect>:
//=================================================================//


void mf_realTempSelect(void)
{
	setExtraLeds(LED_TEMP);
    10d4:	81 e0       	ldi	r24, 0x01	; 1
    10d6:	3b cd       	rjmp	.-1418   	; 0xb4e <setExtraLeds>

000010d8 <getMenuFunctionRecord.constprop.0>:
//	Arguments:
//		menuItemID - ID of an item
//		menuRecord - pointer to function structure to fill
//	Output:
//-----------------------------------------------------------------//
static void getMenuFunctionRecord(uint8_t menuItemID, MenuFunctionRecord* menuRecord )
    10d8:	1f 93       	push	r17
    10da:	cf 93       	push	r28
    10dc:	df 93       	push	r29
    10de:	c0 e0       	ldi	r28, 0x00	; 0
    10e0:	d0 e0       	ldi	r29, 0x00	; 0
{
	uint8_t i;
	for (i = 0; i < sizeof(menuFunctionSet)/sizeof(MenuFunctionRecord); i++  )
	{
		readMenuRecord(&menuFunctionSet[i], menuRecord);
    10e2:	17 e0       	ldi	r17, 0x07	; 7
    10e4:	1c 9f       	mul	r17, r28
    10e6:	90 01       	movw	r18, r0
    10e8:	1d 9f       	mul	r17, r29
    10ea:	30 0d       	add	r19, r0
    10ec:	11 24       	eor	r1, r1
    10ee:	2a 5d       	subi	r18, 0xDA	; 218
    10f0:	3f 4f       	sbci	r19, 0xFF	; 255
//		fRecPtr		- address of the function record in the FLASH
//		resPtr		- address of the record to fill in the SRAM
//-----------------------------------------------------------------//
static inline void readMenuRecord(const MenuFunctionRecord* fRecPtr, MenuFunctionRecord* resPtr )
{
	resPtr->Item = pgm_read_byte(&fRecPtr->Item);
    10f2:	f9 01       	movw	r30, r18
    10f4:	94 91       	lpm	r25, Z
	resPtr->SelectFunction = (FuncPtr)pgm_read_word(&fRecPtr->SelectFunction);
    10f6:	31 96       	adiw	r30, 0x01	; 1
    10f8:	a5 91       	lpm	r26, Z+
    10fa:	b4 91       	lpm	r27, Z
	resPtr->RunFunction = (FuncPtr)pgm_read_word(&fRecPtr->RunFunction);
    10fc:	f9 01       	movw	r30, r18
    10fe:	33 96       	adiw	r30, 0x03	; 3
    1100:	65 91       	lpm	r22, Z+
    1102:	74 91       	lpm	r23, Z
	resPtr->LeaveFunction = (FuncPtr)pgm_read_word(&fRecPtr->LeaveFunction);
    1104:	2b 5f       	subi	r18, 0xFB	; 251
    1106:	3f 4f       	sbci	r19, 0xFF	; 255
    1108:	f9 01       	movw	r30, r18
    110a:	45 91       	lpm	r20, Z+
    110c:	54 91       	lpm	r21, Z
{
	uint8_t i;
	for (i = 0; i < sizeof(menuFunctionSet)/sizeof(MenuFunctionRecord); i++  )
	{
		readMenuRecord(&menuFunctionSet[i], menuRecord);
		if (menuRecord->Item == menuItemID)
    110e:	98 13       	cpse	r25, r24
    1110:	03 c0       	rjmp	.+6      	; 0x1118 <getMenuFunctionRecord.constprop.0+0x40>
    1112:	80 93 e0 00 	sts	0x00E0, r24
    1116:	06 c0       	rjmp	.+12     	; 0x1124 <getMenuFunctionRecord.constprop.0+0x4c>
    1118:	21 96       	adiw	r28, 0x01	; 1
//	Output:
//-----------------------------------------------------------------//
static void getMenuFunctionRecord(uint8_t menuItemID, MenuFunctionRecord* menuRecord )
{
	uint8_t i;
	for (i = 0; i < sizeof(menuFunctionSet)/sizeof(MenuFunctionRecord); i++  )
    111a:	ce 30       	cpi	r28, 0x0E	; 14
    111c:	d1 05       	cpc	r29, r1
    111e:	11 f7       	brne	.-60     	; 0x10e4 <getMenuFunctionRecord.constprop.0+0xc>
    1120:	90 93 e0 00 	sts	0x00E0, r25
    1124:	a0 93 e1 00 	sts	0x00E1, r26
    1128:	b0 93 e2 00 	sts	0x00E2, r27
    112c:	60 93 e3 00 	sts	0x00E3, r22
    1130:	70 93 e4 00 	sts	0x00E4, r23
    1134:	40 93 e5 00 	sts	0x00E5, r20
    1138:	50 93 e6 00 	sts	0x00E6, r21
	{
		readMenuRecord(&menuFunctionSet[i], menuRecord);
		if (menuRecord->Item == menuItemID)
			break;
	}
}
    113c:	df 91       	pop	r29
    113e:	cf 91       	pop	r28
    1140:	1f 91       	pop	r17
    1142:	08 95       	ret

00001144 <InitMenu>:
//	Menu initialization
//	Call this function at start of your program before processMenu()
//-----------------------------------------------------------------//
void InitMenu(void)
{
	selectedMenuItemID = mi_REALTEMP;
    1144:	81 e0       	ldi	r24, 0x01	; 1
    1146:	80 93 df 00 	sts	0x00DF, r24
	getMenuFunctionRecord(selectedMenuItemID, &selectedMenuFunctionRecord);
    114a:	c6 df       	rcall	.-116    	; 0x10d8 <getMenuFunctionRecord.constprop.0>
	processItemFunction(selectedMenuFunctionRecord.SelectFunction);
    114c:	80 91 e1 00 	lds	r24, 0x00E1
    1150:	90 91 e2 00 	lds	r25, 0x00E2
    1154:	47 cd       	rjmp	.-1394   	; 0xbe4 <processItemFunction>

00001156 <processMenu>:
//	Main menu control, -  state function calls, jumps 
//	between menu states and indication
//	Call this function from main() with a fixed time interval.
//-----------------------------------------------------------------//
void processMenu(void)
{
    1156:	ff 92       	push	r15
    1158:	0f 93       	push	r16
    115a:	1f 93       	push	r17
    115c:	cf 93       	push	r28
    115e:	df 93       	push	r29
	NextItem_t nextItem;
	uint16_t jumpCondition;
	
	processSoftTimer8b(&menuTimer);	
    1160:	84 e7       	ldi	r24, 0x74	; 116
    1162:	90 e0       	ldi	r25, 0x00	; 0
    1164:	f0 d2       	rcall	.+1504   	; 0x1746 <processSoftTimer8b>
	
	// Compose jump condition
	jumpCondition = button_state;		
    1166:	40 91 cc 00 	lds	r20, 0x00CC
    116a:	50 91 cd 00 	lds	r21, 0x00CD
	if (menuTimer.FTop)
    116e:	80 91 74 00 	lds	r24, 0x0074
    1172:	85 fd       	sbrc	r24, 5
		jumpCondition |= TMR_EXP;
    1174:	50 68       	ori	r21, 0x80	; 128
	if (minute_counter >= power_off_timeout)
    1176:	90 91 fb 00 	lds	r25, 0x00FB
    117a:	80 91 4b 01 	lds	r24, 0x014B
    117e:	98 17       	cp	r25, r24
    1180:	08 f0       	brcs	.+2      	; 0x1184 <processMenu+0x2e>
		jumpCondition |= GOTO_POFF;
    1182:	50 64       	ori	r21, 0x40	; 64
	
	// Get next menu item according to current state and jump conditions
	nextItem = getNextMenuItem(selectedMenuItemID, jumpCondition);
    1184:	80 91 df 00 	lds	r24, 0x00DF
    1188:	60 e0       	ldi	r22, 0x00	; 0
    118a:	70 e0       	ldi	r23, 0x00	; 0
	MenuJumpRecord	jRecord;
	uint8_t i;
	
	for (i = 0; i < sizeof(menuJumpSet)/sizeof(MenuJumpRecord); i++  )
	{
		readJumpRecord(&menuJumpSet[i], &jRecord);		// read full jump record
    118c:	95 e0       	ldi	r25, 0x05	; 5
    118e:	96 9f       	mul	r25, r22
    1190:	90 01       	movw	r18, r0
    1192:	97 9f       	mul	r25, r23
    1194:	30 0d       	add	r19, r0
    1196:	11 24       	eor	r1, r1
    1198:	28 57       	subi	r18, 0x78	; 120
    119a:	3f 4f       	sbci	r19, 0xFF	; 255
//		jRecPtr		- address of the jump record in the FLASH
//		resPtr		- address of the record to fill in the SRAM
//-----------------------------------------------------------------//
static inline void readJumpRecord(const MenuJumpRecord* jRecPtr, MenuJumpRecord* resPtr )
{
	resPtr->Item = pgm_read_byte(&jRecPtr->Item);
    119c:	f9 01       	movw	r30, r18
    119e:	14 91       	lpm	r17, Z
	resPtr->JumpCondition = pgm_read_word(&jRecPtr->JumpCondition);
    11a0:	31 96       	adiw	r30, 0x01	; 1
    11a2:	a5 91       	lpm	r26, Z+
    11a4:	b4 91       	lpm	r27, Z
	resPtr->NextItem= pgm_read_byte(&jRecPtr->NextItem);
    11a6:	f9 01       	movw	r30, r18
    11a8:	33 96       	adiw	r30, 0x03	; 3
    11aa:	d4 91       	lpm	r29, Z
	resPtr->Flags= pgm_read_byte(&jRecPtr->Flags);
    11ac:	f9 01       	movw	r30, r18
    11ae:	34 96       	adiw	r30, 0x04	; 4
    11b0:	24 91       	lpm	r18, Z
	uint8_t i;
	
	for (i = 0; i < sizeof(menuJumpSet)/sizeof(MenuJumpRecord); i++  )
	{
		readJumpRecord(&menuJumpSet[i], &jRecord);		// read full jump record
		if (jRecord.Item == selectedItemId)				// If ID match,
    11b2:	18 13       	cpse	r17, r24
    11b4:	0e c0       	rjmp	.+28     	; 0x11d2 <processMenu+0x7c>
		{
			if ((jRecord.JumpCondition & jmpCond) != 0)		// if any of jump conditions match too,
    11b6:	a4 23       	and	r26, r20
    11b8:	b5 23       	and	r27, r21
    11ba:	ab 2b       	or	r26, r27
    11bc:	51 f0       	breq	.+20     	; 0x11d2 <processMenu+0x7c>
			{
				nextItem.ItemID = jRecord.NextItem;			// switch to next menu item
				nextItem.ItemTimeout = jRecord.Flags & TIMEOUT_MASK;
    11be:	c2 2f       	mov	r28, r18
    11c0:	cf 73       	andi	r28, 0x3F	; 63
				nextItem.ShiftRight = (jRecord.Flags & SHIFT_RIGHT) ? 1 : 0;
    11c2:	26 fb       	bst	r18, 6
    11c4:	00 27       	eor	r16, r16
    11c6:	00 f9       	bld	r16, 0
				nextItem.ShiftLeft = (jRecord.Flags & SHIFT_LEFT) ? 1 : 0;
    11c8:	f2 2e       	mov	r15, r18
    11ca:	ff 1c       	adc	r15, r15
    11cc:	ff 24       	eor	r15, r15
    11ce:	ff 1c       	adc	r15, r15
    11d0:	06 c0       	rjmp	.+12     	; 0x11de <processMenu+0x88>
    11d2:	6f 5f       	subi	r22, 0xFF	; 255
    11d4:	7f 4f       	sbci	r23, 0xFF	; 255
	NextItem_t nextItem;
	nextItem.ItemID = selectedItemId;
	MenuJumpRecord	jRecord;
	uint8_t i;
	
	for (i = 0; i < sizeof(menuJumpSet)/sizeof(MenuJumpRecord); i++  )
    11d6:	60 32       	cpi	r22, 0x20	; 32
    11d8:	71 05       	cpc	r23, r1
    11da:	c9 f6       	brne	.-78     	; 0x118e <processMenu+0x38>
		jumpCondition |= TMR_EXP;
	if (minute_counter >= power_off_timeout)
		jumpCondition |= GOTO_POFF;
	
	// Get next menu item according to current state and jump conditions
	nextItem = getNextMenuItem(selectedMenuItemID, jumpCondition);
    11dc:	d8 2f       	mov	r29, r24
    11de:	10 e0       	ldi	r17, 0x00	; 0
    11e0:	f0 fa       	bst	r15, 0
    11e2:	10 f9       	bld	r17, 0
    11e4:	00 fb       	bst	r16, 0
    11e6:	11 f9       	bld	r17, 1
	
	// If next item differs from current
	if (nextItem.ItemID != selectedMenuItemID)
    11e8:	d8 17       	cp	r29, r24
    11ea:	09 f1       	breq	.+66     	; 0x122e <processMenu+0xd8>
	{		
		// Call exit function for current item
		processItemFunction(selectedMenuFunctionRecord.LeaveFunction);
    11ec:	80 91 e5 00 	lds	r24, 0x00E5
    11f0:	90 91 e6 00 	lds	r25, 0x00E6
    11f4:	f7 dc       	rcall	.-1554   	; 0xbe4 <processItemFunction>
		
		// If shifting is specified, start it before calling any 
		//	new menu item functions 
		if (nextItem.ShiftRight)
    11f6:	11 ff       	sbrs	r17, 1
    11f8:	02 c0       	rjmp	.+4      	; 0x11fe <processMenu+0xa8>
			startShiftingWindowRight();
    11fa:	32 dc       	rcall	.-1948   	; 0xa60 <startShiftingWindowRight>
    11fc:	02 c0       	rjmp	.+4      	; 0x1202 <processMenu+0xac>
		else if (nextItem.ShiftLeft)
    11fe:	10 fd       	sbrc	r17, 0
			startShiftingWindowLeft();
    1200:	21 dc       	rcall	.-1982   	; 0xa44 <startShiftingWindowLeft>
		
		// Select new item
		selectedMenuItemID = nextItem.ItemID;
    1202:	d0 93 df 00 	sts	0x00DF, r29
		
		// Load from FLASH and save function pointers
		getMenuFunctionRecord(selectedMenuItemID, &selectedMenuFunctionRecord);
    1206:	8d 2f       	mov	r24, r29
    1208:	67 df       	rcall	.-306    	; 0x10d8 <getMenuFunctionRecord.constprop.0>
		// Call select function for next item
		processItemFunction(selectedMenuFunctionRecord.SelectFunction);
    120a:	80 91 e1 00 	lds	r24, 0x00E1
    120e:	90 91 e2 00 	lds	r25, 0x00E2
    1212:	e8 dc       	rcall	.-1584   	; 0xbe4 <processItemFunction>
		// Start timer if timeout is enabled
		if (nextItem.ItemTimeout != 0)
    1214:	cc 23       	and	r28, r28
    1216:	c1 f0       	breq	.+48     	; 0x1248 <processMenu+0xf2>
		{
			menuTimer.Top = nextItem.ItemTimeout * MENU_TIMEOUT_MULT;
    1218:	cc 0f       	add	r28, r28
    121a:	c0 93 76 00 	sts	0x0076, r28
			menuTimer.Timer = 0;
    121e:	10 92 75 00 	sts	0x0075, r1
			menuTimer.Enabled = 1;	
    1222:	80 91 74 00 	lds	r24, 0x0074
    1226:	81 60       	ori	r24, 0x01	; 1
    1228:	80 93 74 00 	sts	0x0074, r24
    122c:	0d c0       	rjmp	.+26     	; 0x1248 <processMenu+0xf2>
		}
		
	}
	else
	{
		processSoftTimer8b(&userTimer);
    122e:	87 ee       	ldi	r24, 0xE7	; 231
    1230:	90 e0       	ldi	r25, 0x00	; 0
    1232:	89 d2       	rcall	.+1298   	; 0x1746 <processSoftTimer8b>
		// Stay at previous item
		processItemFunction(selectedMenuFunctionRecord.RunFunction);
    1234:	80 91 e3 00 	lds	r24, 0x00E3
    1238:	90 91 e4 00 	lds	r25, 0x00E4
	}	
}
    123c:	df 91       	pop	r29
    123e:	cf 91       	pop	r28
    1240:	1f 91       	pop	r17
    1242:	0f 91       	pop	r16
    1244:	ff 90       	pop	r15
	}
	else
	{
		processSoftTimer8b(&userTimer);
		// Stay at previous item
		processItemFunction(selectedMenuFunctionRecord.RunFunction);
    1246:	ce cc       	rjmp	.-1636   	; 0xbe4 <processItemFunction>
	}	
}
    1248:	df 91       	pop	r29
    124a:	cf 91       	pop	r28
    124c:	1f 91       	pop	r17
    124e:	0f 91       	pop	r16
    1250:	ff 90       	pop	r15
    1252:	08 95       	ret

00001254 <u16toa_align_right>:
// Converts uint16_t value into decimal string with right alignment
// len = number of digits output (without terminating '\0')
// len[7] = 1 -> no terminating '\0' at buffer[len]
// fill_char -> char used for string padding
void u16toa_align_right(uint16_t val, char *buffer, uint8_t len,char fill_char)
{
    1254:	cf 93       	push	r28
    1256:	df 93       	push	r29
	if (len & 0x80)
    1258:	47 ff       	sbrs	r20, 7
    125a:	05 c0       	rjmp	.+10     	; 0x1266 <u16toa_align_right+0x12>
	{
		len = len & 0x7F;
    125c:	4f 77       	andi	r20, 0x7F	; 127
		buffer += len;	
    125e:	fb 01       	movw	r30, r22
    1260:	e4 0f       	add	r30, r20
    1262:	f1 1d       	adc	r31, r1
    1264:	04 c0       	rjmp	.+8      	; 0x126e <u16toa_align_right+0x1a>
	}
	else
	{
		buffer += len;	
    1266:	fb 01       	movw	r30, r22
    1268:	e4 0f       	add	r30, r20
    126a:	f1 1d       	adc	r31, r1
		*buffer = 0;
    126c:	10 82       	st	Z, r1
	}
	
	do
	{
		*--buffer = val % 10 + '0';
    126e:	ca e0       	ldi	r28, 0x0A	; 10
    1270:	d0 e0       	ldi	r29, 0x00	; 0
    1272:	be 01       	movw	r22, r28
    1274:	39 d3       	rcall	.+1650   	; 0x18e8 <__udivmodhi4>
    1276:	80 5d       	subi	r24, 0xD0	; 208
    1278:	82 93       	st	-Z, r24
		val /= 10;
    127a:	cb 01       	movw	r24, r22
		len--;
    127c:	41 50       	subi	r20, 0x01	; 1
	}
	while ((val != 0) && len);
    127e:	00 97       	sbiw	r24, 0x00	; 0
    1280:	21 f0       	breq	.+8      	; 0x128a <u16toa_align_right+0x36>
    1282:	41 11       	cpse	r20, r1
    1284:	f6 cf       	rjmp	.-20     	; 0x1272 <u16toa_align_right+0x1e>
    1286:	01 c0       	rjmp	.+2      	; 0x128a <u16toa_align_right+0x36>
	
	// Padding
	while(len--)
		*--buffer = fill_char;
    1288:	22 93       	st	-Z, r18
		len--;
	}
	while ((val != 0) && len);
	
	// Padding
	while(len--)
    128a:	41 50       	subi	r20, 0x01	; 1
    128c:	e8 f7       	brcc	.-6      	; 0x1288 <u16toa_align_right+0x34>
		*--buffer = fill_char;
}
    128e:	df 91       	pop	r29
    1290:	cf 91       	pop	r28
    1292:	08 95       	ret

00001294 <init_system_io>:
//extern void powTest(void);

void init_system_io()
{
	// Setup Port D
	PORTD = (1<<PD_SYNCA | 1<<PD_SYNCB);
    1294:	80 ec       	ldi	r24, 0xC0	; 192
    1296:	82 bb       	out	0x12, r24	; 18
	DDRD = (1<<PD_TXD | 1<<PD_M1 | 1<<PD_M2 | 1<<PD_HEATER | 1<<PD_HEAT_INDIC );
    1298:	8e e3       	ldi	r24, 0x3E	; 62
    129a:	81 bb       	out	0x11, r24	; 17
	
	// Setup Port B
	PORTB = 0;
    129c:	18 ba       	out	0x18, r1	; 24
	DDRB = (1<<PB_BEEPER | 1<<PB_LED_DOUT | 1<<PB_LED_CLK | 1<<PB_SEGF | 1<<PB_SEGG | 1<<PB_SEGH);
    129e:	8f e3       	ldi	r24, 0x3F	; 63
    12a0:	87 bb       	out	0x17, r24	; 23
	
	PORTC = 0;
    12a2:	15 ba       	out	0x15, r1	; 21
	DDRC = (1<<PC_SEGA | 1<<PC_SEGB | 1<<PC_SEGC | 1<<PC_SEGD | 1<<PC_SEGE);	
    12a4:	8f e1       	ldi	r24, 0x1F	; 31
    12a6:	84 bb       	out	0x14, r24	; 20

	// Setup timer0
	// 1/1024 prescaler, T=64us @16MHz
	TCCR0 = (1<<CS02 | 0<<CS01 | 1<<CS00);
    12a8:	85 e0       	ldi	r24, 0x05	; 5
    12aa:	83 bf       	out	0x33, r24	; 51
	TCNT0 = 0;
    12ac:	12 be       	out	0x32, r1	; 50
	// Clear interrupt flag
	TIFR |= (1<<TOV0);
    12ae:	88 b7       	in	r24, 0x38	; 56
    12b0:	81 60       	ori	r24, 0x01	; 1
    12b2:	88 bf       	out	0x38, r24	; 56
	// Enable interrupts from timer 0
	TIMSK |= (1<<TOIE0);
    12b4:	89 b7       	in	r24, 0x39	; 57
    12b6:	81 60       	ori	r24, 0x01	; 1
    12b8:	89 bf       	out	0x39, r24	; 57
	
	// Setup timer2 as 1ms system frequency generator
	// 1/64 prescaler, CTC mode, OC2 disconnected
	TCCR2 = (1<<CS22 | 1<<WGM21);
    12ba:	8c e0       	ldi	r24, 0x0C	; 12
    12bc:	85 bd       	out	0x25, r24	; 37
	OCR2 = 249;
    12be:	89 ef       	ldi	r24, 0xF9	; 249
    12c0:	83 bd       	out	0x23, r24	; 35
	TIMSK |= (1<<OCIE2);
    12c2:	89 b7       	in	r24, 0x39	; 57
    12c4:	80 68       	ori	r24, 0x80	; 128
    12c6:	89 bf       	out	0x39, r24	; 57
	
	// Setup timer1 as beeper frequency generator
	// CTC mode, 1/64 prescaler
	TCCR1A = 0;
    12c8:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = (1<<WGM12 | 1<<CS11 | 1<<CS10);
    12ca:	8b e0       	ldi	r24, 0x0B	; 11
    12cc:	8e bd       	out	0x2e, r24	; 46
	// 1kHz beeper frequency default
	OCR1A = 127;
    12ce:	8f e7       	ldi	r24, 0x7F	; 127
    12d0:	90 e0       	ldi	r25, 0x00	; 0
    12d2:	9b bd       	out	0x2b, r25	; 43
    12d4:	8a bd       	out	0x2a, r24	; 42

	// Setup AC sync comparator
	// Interrupt on output toggle
	//ACSR |= (1<<ACI);		// Will be cleared just before sei
	ACSR = (1<<ACIE | 0<<ACIS1 | 0<<ACIS0);
    12d6:	88 e0       	ldi	r24, 0x08	; 8
    12d8:	88 b9       	out	0x08, r24	; 8
	
	// Setup ADC
	// Internal Vref + cap, input ADC5, 
	ADMUX = (1<<REFS1 | 1<<REFS0 | 0<<MUX3 | 1<<MUX2 | 0<<MUX1 | 1<<MUX0 );
    12da:	85 ec       	ldi	r24, 0xC5	; 197
    12dc:	87 b9       	out	0x07, r24	; 7
	// Prescaler = 128
	ADCSRA = (1<<ADEN |/* 1<<ADFR |*/  1<<ADIE | 1<<ADPS2 | 1<<ADPS1 | 1<<ADPS0);
    12de:	8f e8       	ldi	r24, 0x8F	; 143
    12e0:	86 b9       	out	0x06, r24	; 6
	
	// Setup USART
	// Double speed
	UCSRA = (1<<U2X);
    12e2:	82 e0       	ldi	r24, 0x02	; 2
    12e4:	8b b9       	out	0x0b, r24	; 11
	UCSRB = (1<<RXEN | 1<<TXEN | 0<<UCSZ2);
    12e6:	88 e1       	ldi	r24, 0x18	; 24
    12e8:	8a b9       	out	0x0a, r24	; 10
	// No parity, 1 stop bit, 8 bit
	UCSRC = (1<<URSEL | 0<<UPM1 | 0<<UPM0 | 0<<USBS | 1<<UCSZ1 | 1<<UCSZ0);
    12ea:	86 e8       	ldi	r24, 0x86	; 134
    12ec:	80 bd       	out	0x20, r24	; 32
	// 57600 @16MHz, 2x
	UBRRH=0x00;
    12ee:	10 bc       	out	0x20, r1	; 32
	UBRRL=0x22;
    12f0:	82 e2       	ldi	r24, 0x22	; 34
    12f2:	89 b9       	out	0x09, r24	; 9
    12f4:	08 95       	ret

000012f6 <main>:




int main(void)
{
    12f6:	cf 93       	push	r28
    12f8:	df 93       	push	r29
    12fa:	cd b7       	in	r28, 0x3d	; 61
    12fc:	de b7       	in	r29, 0x3e	; 62
    12fe:	2b 97       	sbiw	r28, 0x0b	; 11
    1300:	0f b6       	in	r0, 0x3f	; 63
    1302:	f8 94       	cli
    1304:	de bf       	out	0x3e, r29	; 62
    1306:	0f be       	out	0x3f, r0	; 63
    1308:	cd bf       	out	0x3d, r28	; 61
	char str[10];
	volatile uint8_t temp8u = 0x00;
    130a:	1b 86       	std	Y+11, r1	; 0x0b
	volatile uint16_t temp16u;
	uint8_t celsiusUpdateCounter = 0;
	
	// Initialize MCU IO
	init_system_io();
    130c:	c3 df       	rcall	.-122    	; 0x1294 <init_system_io>
	// Restore params from EEPROM
	restoreGlobalParams();
    130e:	54 da       	rcall	.-2904   	; 0x7b8 <restoreGlobalParams>
	// Calibrate ADC coefficients using restored params
	calculateCoeffs();
    1310:	69 d7       	rcall	.+3794   	; 0x21e4 <__data_load_end+0x778>
	// Initialize LED indicator
	initLedIndicator();
    1312:	b4 db       	rcall	.-2200   	; 0xa7c <initLedIndicator>
	// Clear comparator interrupt flag to prevent false triggering
	ACSR |= (1<<ACI);
    1314:	44 9a       	sbi	0x08, 4	; 8
	sei();
    1316:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1318:	2f ef       	ldi	r18, 0xFF	; 255
    131a:	80 e7       	ldi	r24, 0x70	; 112
    131c:	92 e0       	ldi	r25, 0x02	; 2
    131e:	21 50       	subi	r18, 0x01	; 1
    1320:	80 40       	sbci	r24, 0x00	; 0
    1322:	90 40       	sbci	r25, 0x00	; 0
    1324:	e1 f7       	brne	.-8      	; 0x131e <main+0x28>
    1326:	00 c0       	rjmp	.+0      	; 0x1328 <main+0x32>
    1328:	00 00       	nop
	// Safety delay for power part
	_delay_ms(50);
	// Check AC line
	if(p_state == 0x0F) 	
    132a:	80 91 78 00 	lds	r24, 0x0078
    132e:	8f 30       	cpi	r24, 0x0F	; 15
    1330:	69 f4       	brne	.+26     	; 0x134c <main+0x56>
	{
		// Power control state machine has not changed - sync has not been detected
		printLedBuffer(0,"AC ERR");
    1332:	66 eb       	ldi	r22, 0xB6	; 182
    1334:	70 e0       	ldi	r23, 0x00	; 0
    1336:	80 e0       	ldi	r24, 0x00	; 0
    1338:	c4 db       	rcall	.-2168   	; 0xac2 <printLedBuffer>
    133a:	2f ef       	ldi	r18, 0xFF	; 255
    133c:	83 ed       	ldi	r24, 0xD3	; 211
    133e:	90 e3       	ldi	r25, 0x30	; 48
    1340:	21 50       	subi	r18, 0x01	; 1
    1342:	80 40       	sbci	r24, 0x00	; 0
    1344:	90 40       	sbci	r25, 0x00	; 0
    1346:	e1 f7       	brne	.-8      	; 0x1340 <main+0x4a>
    1348:	00 c0       	rjmp	.+0      	; 0x134a <main+0x54>
    134a:	00 00       	nop
		_delay_ms(1000);
	}
	// Initialize menu
	InitMenu();
    134c:	fb de       	rcall	.-522    	; 0x1144 <InitMenu>
	// Beep
	SetBeeperFreq(1000);
    134e:	88 ee       	ldi	r24, 0xE8	; 232
    1350:	93 e0       	ldi	r25, 0x03	; 3
    1352:	25 d2       	rcall	.+1098   	; 0x179e <SetBeeperFreq>
	StartBeep(200);
    1354:	88 ec       	ldi	r24, 0xC8	; 200
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	42 d2       	rcall	.+1156   	; 0x17de <StartBeep>
	// When we get here, few ADC counts have been sampled
	// First call to PID controller initializes it's internal structures
	forceHeaterControlUpdate();
    135a:	60 d0       	rcall	.+192    	; 0x141c <forceHeaterControlUpdate>
    135c:	2f ef       	ldi	r18, 0xFF	; 255
    135e:	81 ee       	ldi	r24, 0xE1	; 225
    1360:	94 e0       	ldi	r25, 0x04	; 4
    1362:	21 50       	subi	r18, 0x01	; 1
    1364:	80 40       	sbci	r24, 0x00	; 0
    1366:	90 40       	sbci	r25, 0x00	; 0
    1368:	e1 f7       	brne	.-8      	; 0x1362 <main+0x6c>
    136a:	00 c0       	rjmp	.+0      	; 0x136c <main+0x76>
    136c:	00 00       	nop
	_delay_ms(100);
	// Start rotating
	setMotorDirection(ROLL_FWD);
    136e:	81 e0       	ldi	r24, 0x01	; 1
    1370:	62 d0       	rcall	.+196    	; 0x1436 <setMotorDirection>
	// Clear timer
	menuUpdateTimer.FOvfl = 0;
    1372:	80 91 7a 00 	lds	r24, 0x007A
    1376:	8f 7b       	andi	r24, 0xBF	; 191
    1378:	80 93 7a 00 	sts	0x007A, r24
int main(void)
{
	char str[10];
	volatile uint8_t temp8u = 0x00;
	volatile uint16_t temp16u;
	uint8_t celsiusUpdateCounter = 0;
    137c:	10 e0       	ldi	r17, 0x00	; 0
	menuUpdateTimer.FOvfl = 0;

    while(1)
    {
		
		if (menuUpdateTimer.FOvfl)
    137e:	80 91 7a 00 	lds	r24, 0x007A
    1382:	86 ff       	sbrs	r24, 6
    1384:	fc cf       	rjmp	.-8      	; 0x137e <main+0x88>
		{
			
			// Get new temperature measurement
			update_normalized_adc();			
    1386:	7b d7       	rcall	.+3830   	; 0x227e <__data_load_end+0x812>
		
			// Update indicated Celsius degree
			if (celsiusUpdateCounter == 0)	
    1388:	11 11       	cpse	r17, r1
    138a:	02 c0       	rjmp	.+4      	; 0x1390 <main+0x9a>
			{
				update_Celsius();
    138c:	a2 d7       	rcall	.+3908   	; 0x22d2 <__data_load_end+0x866>
				celsiusUpdateCounter = CELSIUS_UDPATE_INTERVAL;
    138e:	14 e0       	ldi	r17, 0x04	; 4
			}				
			celsiusUpdateCounter--;
    1390:	11 50       	subi	r17, 0x01	; 1
			
			// Get new button state
			process_buttons();
    1392:	31 d8       	rcall	.-3998   	; 0x3f6 <process_buttons>
			
			// Give sound feedback
			if (button_state & BL_MENU)
    1394:	80 91 cc 00 	lds	r24, 0x00CC
    1398:	90 91 cd 00 	lds	r25, 0x00CD
    139c:	91 ff       	sbrs	r25, 1
    139e:	03 c0       	rjmp	.+6      	; 0x13a6 <main+0xb0>
			{
				SetBeeperFreq(800);
    13a0:	80 e2       	ldi	r24, 0x20	; 32
    13a2:	93 e0       	ldi	r25, 0x03	; 3
    13a4:	06 c0       	rjmp	.+12     	; 0x13b2 <main+0xbc>
				StartBeep(40);
			}
			else if (button_action_down & (BD_MENU | BD_UP | BD_DOWN | BD_HEATCTRL))
    13a6:	80 91 cb 00 	lds	r24, 0x00CB
    13aa:	87 74       	andi	r24, 0x47	; 71
    13ac:	31 f0       	breq	.+12     	; 0x13ba <main+0xc4>
			{
				SetBeeperFreq(1000);
    13ae:	88 ee       	ldi	r24, 0xE8	; 232
    13b0:	93 e0       	ldi	r25, 0x03	; 3
    13b2:	f5 d1       	rcall	.+1002   	; 0x179e <SetBeeperFreq>
				StartBeep(40);
    13b4:	88 e2       	ldi	r24, 0x28	; 40
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	12 d2       	rcall	.+1060   	; 0x17de <StartBeep>
			}	
			// Direction control buttons sounds get special processing at processRollControl()
			
			// Process automatic power off - it is important to call
			// this function before menu and power controls processing
			if (button_action_down)
    13ba:	80 91 cb 00 	lds	r24, 0x00CB
    13be:	81 11       	cpse	r24, r1
			{
				resetAutoPowerOffCounter();
    13c0:	1a d2       	rcall	.+1076   	; 0x17f6 <resetAutoPowerOffCounter>
			}
			processAutoPowerOff();
    13c2:	20 d2       	rcall	.+1088   	; 0x1804 <processAutoPowerOff>

			// Process user menu states, settings and indication
			processMenu();
    13c4:	c8 de       	rcall	.-624    	; 0x1156 <processMenu>
			
			// Process cyclic rolling, direction control
			processRollControl();	
    13c6:	78 d8       	rcall	.-3856   	; 0x4b8 <processRollControl>
			
			// Process heater regulation
			processHeaterControl();
    13c8:	73 d9       	rcall	.-3354   	; 0x6b0 <processHeaterControl>
		
			// Process heater events and warnings
			processHeaterAlerts();
    13ca:	cd d9       	rcall	.-3174   	; 0x766 <processHeaterAlerts>

			// Process log
			if (menuUpdateTimer.FA_TGL)
    13cc:	80 91 7a 00 	lds	r24, 0x007A
    13d0:	82 ff       	sbrs	r24, 2
    13d2:	10 c0       	rjmp	.+32     	; 0x13f4 <main+0xfe>
				// Log to UART
				//---------------------------------//
				// Function is called every 50ms
				// UART message is sent every second call (once per 100ms)
				
				u16toa_align_right(adc_oversampled,str,6,' ');				// Displayed temp, Celsius
    13d4:	20 e2       	ldi	r18, 0x20	; 32
    13d6:	46 e0       	ldi	r20, 0x06	; 6
    13d8:	be 01       	movw	r22, r28
    13da:	6f 5f       	subi	r22, 0xFF	; 255
    13dc:	7f 4f       	sbci	r23, 0xFF	; 255
    13de:	80 91 03 01 	lds	r24, 0x0103
    13e2:	90 91 04 01 	lds	r25, 0x0104
    13e6:	36 df       	rcall	.-404    	; 0x1254 <u16toa_align_right>
				USART_sendstr(str);
    13e8:	ce 01       	movw	r24, r28
    13ea:	01 96       	adiw	r24, 0x01	; 1
    13ec:	5f d2       	rcall	.+1214   	; 0x18ac <USART_sendstr>
				
				u16toa_align_right(ctrl_heater,str,6,' ');				// Heater control (PID output, synchronized)
				USART_sendstr(str);
				
*/				
				USART_sendstr("\n\r");
    13ee:	8d eb       	ldi	r24, 0xBD	; 189
    13f0:	90 e0       	ldi	r25, 0x00	; 0
    13f2:	5c d2       	rcall	.+1208   	; 0x18ac <USART_sendstr>
				//---------------------------------//
				
			}
			
			
			menuUpdateTimer.FOvfl = 0;	
    13f4:	80 91 7a 00 	lds	r24, 0x007A
    13f8:	8f 7b       	andi	r24, 0xBF	; 191
    13fa:	80 93 7a 00 	sts	0x007A, r24
    13fe:	bf cf       	rjmp	.-130    	; 0x137e <main+0x88>

00001400 <setHeaterControl>:

// User function to control heater intensity
void setHeaterControl(uint8_t value)
{
	// Disable interrupts from timer0 
	TIMSK &= ~(1<<TOIE0);
    1400:	99 b7       	in	r25, 0x39	; 57
    1402:	9e 7f       	andi	r25, 0xFE	; 254
    1404:	99 bf       	out	0x39, r25	; 57
	
	ctrl_heater = value;
    1406:	80 93 f1 00 	sts	0x00F1, r24
	heaterState &= ~READY_TO_UPDATE_HEATER;
    140a:	80 91 f0 00 	lds	r24, 0x00F0
    140e:	8f 77       	andi	r24, 0x7F	; 127
    1410:	80 93 f0 00 	sts	0x00F0, r24
	
	// Enable interrupts from timer 0
	TIMSK |= (1<<TOIE0);	
    1414:	89 b7       	in	r24, 0x39	; 57
    1416:	81 60       	ori	r24, 0x01	; 1
    1418:	89 bf       	out	0x39, r24	; 57
    141a:	08 95       	ret

0000141c <forceHeaterControlUpdate>:


void forceHeaterControlUpdate(void)
{
	// Disable interrupts from timer0 
	TIMSK &= ~(1<<TOIE0);
    141c:	89 b7       	in	r24, 0x39	; 57
    141e:	8e 7f       	andi	r24, 0xFE	; 254
    1420:	89 bf       	out	0x39, r24	; 57
	
	// Flag READY_TO_UPDATE_HEATER will be set on next on next AC line period
	heater_cnt = HEATER_REGULATION_PERIODS - 6;
    1422:	8c e2       	ldi	r24, 0x2C	; 44
    1424:	80 93 f2 00 	sts	0x00F2, r24
	heater_reg_cnt = HEATER_PID_CALL_INTERVAL - 1;
    1428:	83 e0       	ldi	r24, 0x03	; 3
    142a:	80 93 ef 00 	sts	0x00EF, r24
	
	// Enable interrupts from timer 0
	TIMSK |= (1<<TOIE0);	
    142e:	89 b7       	in	r24, 0x39	; 57
    1430:	81 60       	ori	r24, 0x01	; 1
    1432:	89 bf       	out	0x39, r24	; 57
    1434:	08 95       	ret

00001436 <setMotorDirection>:
	
// User function to control motor rotation
void setMotorDirection(uint8_t dir)
{
	// Disable interrupts from timer0 
	TIMSK &= ~(1<<TOIE0);
    1436:	99 b7       	in	r25, 0x39	; 57
    1438:	9e 7f       	andi	r25, 0xFE	; 254
    143a:	99 bf       	out	0x39, r25	; 57
		
	newDirReq = dir;	// save new direction request
    143c:	80 93 f3 00 	sts	0x00F3, r24
	dirChangedMask = ~ROLL_DIR_CHANGED;
    1440:	9f ed       	ldi	r25, 0xDF	; 223
    1442:	90 93 79 00 	sts	0x0079, r25
	
	if (dir & ROLL_FWD)
    1446:	80 ff       	sbrs	r24, 0
    1448:	09 c0       	rjmp	.+18     	; 0x145c <setMotorDirection+0x26>
		bottomPoint = rollPoint;
    144a:	80 91 f4 00 	lds	r24, 0x00F4
    144e:	90 91 f5 00 	lds	r25, 0x00F5
    1452:	90 93 f7 00 	sts	0x00F7, r25
    1456:	80 93 f6 00 	sts	0x00F6, r24
    145a:	0a c0       	rjmp	.+20     	; 0x1470 <setMotorDirection+0x3a>
	else if (dir & ROLL_REV)
    145c:	81 ff       	sbrs	r24, 1
    145e:	08 c0       	rjmp	.+16     	; 0x1470 <setMotorDirection+0x3a>
		topPoint = rollPoint;
    1460:	80 91 f4 00 	lds	r24, 0x00F4
    1464:	90 91 f5 00 	lds	r25, 0x00F5
    1468:	90 93 f9 00 	sts	0x00F9, r25
    146c:	80 93 f8 00 	sts	0x00F8, r24

	// Enable interrupts from timer 0
	TIMSK |= (1<<TOIE0);	
    1470:	89 b7       	in	r24, 0x39	; 57
    1472:	81 60       	ori	r24, 0x01	; 1
    1474:	89 bf       	out	0x39, r24	; 57
    1476:	08 95       	ret

00001478 <stopCycleRolling>:
}

void stopCycleRolling(uint8_t doResetPoints)
{
	// Disable interrupts from timer0 
	TIMSK &= ~(1<<TOIE0);
    1478:	99 b7       	in	r25, 0x39	; 57
    147a:	9e 7f       	andi	r25, 0xFE	; 254
    147c:	99 bf       	out	0x39, r25	; 57
	
	rollState &= ~ROLL_CYCLE;
    147e:	90 91 ee 00 	lds	r25, 0x00EE
    1482:	9b 7f       	andi	r25, 0xFB	; 251
    1484:	90 93 ee 00 	sts	0x00EE, r25
	if (doResetPoints)
    1488:	88 23       	and	r24, r24
    148a:	71 f0       	breq	.+28     	; 0x14a8 <stopCycleRolling+0x30>
	{
		topPoint = bottomPoint = rollPoint;
    148c:	80 91 f4 00 	lds	r24, 0x00F4
    1490:	90 91 f5 00 	lds	r25, 0x00F5
    1494:	90 93 f7 00 	sts	0x00F7, r25
    1498:	80 93 f6 00 	sts	0x00F6, r24
    149c:	90 93 f9 00 	sts	0x00F9, r25
    14a0:	80 93 f8 00 	sts	0x00F8, r24
		activeRollCycle = 0;	
    14a4:	10 92 ed 00 	sts	0x00ED, r1
	}		
	
	// Enable interrupts from timer 0
	TIMSK |= (1<<TOIE0);
    14a8:	89 b7       	in	r24, 0x39	; 57
    14aa:	81 60       	ori	r24, 0x01	; 1
    14ac:	89 bf       	out	0x39, r24	; 57
    14ae:	08 95       	ret

000014b0 <isTopPointValid>:



uint8_t isTopPointValid(void)
{
	return (	(int16_t)(topPoint - rollPoint) >= 0 );
    14b0:	80 91 f8 00 	lds	r24, 0x00F8
    14b4:	90 91 f9 00 	lds	r25, 0x00F9
    14b8:	20 91 f4 00 	lds	r18, 0x00F4
    14bc:	30 91 f5 00 	lds	r19, 0x00F5
    14c0:	82 1b       	sub	r24, r18
    14c2:	93 0b       	sbc	r25, r19
    14c4:	89 2f       	mov	r24, r25
    14c6:	80 95       	com	r24
}
    14c8:	88 1f       	adc	r24, r24
    14ca:	88 27       	eor	r24, r24
    14cc:	88 1f       	adc	r24, r24
    14ce:	08 95       	ret

000014d0 <isBottomPointValid>:

uint8_t isBottomPointValid(void)
{
	return (	(int16_t)(rollPoint - bottomPoint) >= 0	);
    14d0:	80 91 f4 00 	lds	r24, 0x00F4
    14d4:	90 91 f5 00 	lds	r25, 0x00F5
    14d8:	20 91 f6 00 	lds	r18, 0x00F6
    14dc:	30 91 f7 00 	lds	r19, 0x00F7
    14e0:	82 1b       	sub	r24, r18
    14e2:	93 0b       	sbc	r25, r19
    14e4:	89 2f       	mov	r24, r25
    14e6:	80 95       	com	r24
}
    14e8:	88 1f       	adc	r24, r24
    14ea:	88 27       	eor	r24, r24
    14ec:	88 1f       	adc	r24, r24
    14ee:	08 95       	ret

000014f0 <startCycleRolling>:


uint8_t startCycleRolling(void)
{
	// Disable interrupts from timer0 
	TIMSK &= ~(1<<TOIE0);
    14f0:	89 b7       	in	r24, 0x39	; 57
    14f2:	8e 7f       	andi	r24, 0xFE	; 254
    14f4:	89 bf       	out	0x39, r24	; 57
	
	if ( isTopPointValid() && isBottomPointValid() )
    14f6:	dc df       	rcall	.-72     	; 0x14b0 <isTopPointValid>
    14f8:	88 23       	and	r24, r24
    14fa:	59 f0       	breq	.+22     	; 0x1512 <startCycleRolling+0x22>
    14fc:	e9 df       	rcall	.-46     	; 0x14d0 <isBottomPointValid>
    14fe:	88 23       	and	r24, r24
    1500:	41 f0       	breq	.+16     	; 0x1512 <startCycleRolling+0x22>
	{
		rollState |= ROLL_CYCLE;
    1502:	80 91 ee 00 	lds	r24, 0x00EE
    1506:	84 60       	ori	r24, 0x04	; 4
    1508:	80 93 ee 00 	sts	0x00EE, r24
		activeRollCycle = 1;
    150c:	81 e0       	ldi	r24, 0x01	; 1
    150e:	80 93 ed 00 	sts	0x00ED, r24
	}
	
	// Enable interrupts from timer 0
	TIMSK |= (1<<TOIE0);
    1512:	89 b7       	in	r24, 0x39	; 57
    1514:	81 60       	ori	r24, 0x01	; 1
    1516:	89 bf       	out	0x39, r24	; 57
	
	return (rollState & ROLL_CYCLE);
    1518:	80 91 ee 00 	lds	r24, 0x00EE
}
    151c:	84 70       	andi	r24, 0x04	; 4
    151e:	08 95       	ret

00001520 <__vector_16>:




ISR(ANA_COMP_vect)
{
    1520:	1f 92       	push	r1
    1522:	0f 92       	push	r0
    1524:	0f b6       	in	r0, 0x3f	; 63
    1526:	0f 92       	push	r0
    1528:	11 24       	eor	r1, r1
    152a:	8f 93       	push	r24
    152c:	9f 93       	push	r25
	// Once triggered, disable further comparator interrupt
	ACSR &= ~(1<<ACIE);
    152e:	43 98       	cbi	0x08, 3	; 8
	// Turn on heater TRIAC
	if (heater_cnt < ctrl_heater_sync)
    1530:	90 91 f2 00 	lds	r25, 0x00F2
    1534:	80 91 fa 00 	lds	r24, 0x00FA
    1538:	98 17       	cp	r25, r24
    153a:	20 f4       	brcc	.+8      	; 0x1544 <__vector_16+0x24>
		PORTD |= (1<<PD_HEATER | 1<<PD_HEAT_INDIC);	// Direct heater indication
    153c:	82 b3       	in	r24, 0x12	; 18
    153e:	80 63       	ori	r24, 0x30	; 48
    1540:	82 bb       	out	0x12, r24	; 18
    1542:	01 c0       	rjmp	.+2      	; 0x1546 <__vector_16+0x26>
	else
		PORTD &= ~(1<<PD_HEAT_INDIC);
    1544:	95 98       	cbi	0x12, 5	; 18
	// Reprogram timer0
	TCNT0 = 256 - TRIAC_IMPULSE_TIME;		// Triac gate impulse time
    1546:	86 ef       	ldi	r24, 0xF6	; 246
    1548:	82 bf       	out	0x32, r24	; 50
	// Modify state	
	p_state &= ~STATE_MASK;					// Start new state machine cycle
    154a:	80 91 78 00 	lds	r24, 0x0078
    154e:	80 7f       	andi	r24, 0xF0	; 240
	p_state ^= HALF_PERIOD_FLAG;			// Toggle flag
    1550:	80 58       	subi	r24, 0x80	; 128
    1552:	80 93 78 00 	sts	0x0078, r24
	
}
    1556:	9f 91       	pop	r25
    1558:	8f 91       	pop	r24
    155a:	0f 90       	pop	r0
    155c:	0f be       	out	0x3f, r0	; 63
    155e:	0f 90       	pop	r0
    1560:	1f 90       	pop	r1
    1562:	18 95       	reti

00001564 <__vector_9>:



ISR(TIMER0_OVF_vect)
{
    1564:	1f 92       	push	r1
    1566:	0f 92       	push	r0
    1568:	0f b6       	in	r0, 0x3f	; 63
    156a:	0f 92       	push	r0
    156c:	11 24       	eor	r1, r1
    156e:	2f 93       	push	r18
    1570:	3f 93       	push	r19
    1572:	4f 93       	push	r20
    1574:	5f 93       	push	r21
    1576:	6f 93       	push	r22
    1578:	7f 93       	push	r23
    157a:	8f 93       	push	r24
    157c:	9f 93       	push	r25
    157e:	af 93       	push	r26
    1580:	bf 93       	push	r27
    1582:	ef 93       	push	r30
    1584:	ff 93       	push	r31
	uint8_t temp;
	
	switch(p_state & STATE_MASK)
    1586:	80 91 78 00 	lds	r24, 0x0078
    158a:	8f 70       	andi	r24, 0x0F	; 15
    158c:	81 30       	cpi	r24, 0x01	; 1
    158e:	49 f0       	breq	.+18     	; 0x15a2 <__vector_9+0x3e>
    1590:	28 f0       	brcs	.+10     	; 0x159c <__vector_9+0x38>
    1592:	82 30       	cpi	r24, 0x02	; 2
    1594:	49 f0       	breq	.+18     	; 0x15a8 <__vector_9+0x44>
    1596:	83 30       	cpi	r24, 0x03	; 3
    1598:	69 f4       	brne	.+26     	; 0x15b4 <__vector_9+0x50>
    159a:	0b c0       	rjmp	.+22     	; 0x15b2 <__vector_9+0x4e>
	{
		// TRIAC_IMPULSE_TIME finished
		case 0x00:
			// Turn off heater TRIAC
			PORTD &= ~(1<<PD_HEATER);
    159c:	94 98       	cbi	0x12, 4	; 18
			TCNT0 = 256 - (QUATER_PERIOD_TIME - TRIAC_IMPULSE_TIME);
    159e:	8c eb       	ldi	r24, 0xBC	; 188
    15a0:	01 c0       	rjmp	.+2      	; 0x15a4 <__vector_9+0x40>
			break;
		// QUATER_PERIOD_TIME finished	
		case 0x01:	
			TCNT0 = 256 - (SYNC_IGNORE_TIME - QUATER_PERIOD_TIME);
    15a2:	82 ec       	ldi	r24, 0xC2	; 194
    15a4:	82 bf       	out	0x32, r24	; 50
			break;	
    15a6:	06 c0       	rjmp	.+12     	; 0x15b4 <__vector_9+0x50>
		// SYNC_IGNORE_TIME finished	
		case 0x02:
			TCNT0 = 256 - SYNC_LOST_TIMEOUT;
    15a8:	80 ee       	ldi	r24, 0xE0	; 224
    15aa:	82 bf       	out	0x32, r24	; 50
			// Clear flag and enable interrupt from analog comparator
			ACSR |= (1<<ACI);
    15ac:	44 9a       	sbi	0x08, 4	; 8
			ACSR |= (1<<ACIE);
    15ae:	43 9a       	sbi	0x08, 3	; 8
			break;
    15b0:	01 c0       	rjmp	.+2      	; 0x15b4 <__vector_9+0x50>
		// SYNC_LOST_TIMEOUT finished
		case 0x03:
			// Error - sync is lost. It means that device has been disconnected from AC line.
			// Disable all power-consuming devices like LEDs and save user settings to EEPROM.
			exitPowerOff();
    15b2:	3c d9       	rcall	.-3464   	; 0x82c <exitPowerOff>
			// Sync is not present - do nothing
			break;
	}	

	// Full period check
	if ((p_state & (HALF_PERIOD_FLAG | STATE_MASK)) == (HALF_PERIOD_FLAG | 0x01))
    15b4:	80 91 78 00 	lds	r24, 0x0078
    15b8:	8f 78       	andi	r24, 0x8F	; 143
    15ba:	81 38       	cpi	r24, 0x81	; 129
    15bc:	09 f0       	breq	.+2      	; 0x15c0 <__vector_9+0x5c>
    15be:	a9 c0       	rjmp	.+338    	; 0x1712 <__vector_9+0x1ae>
	{
		// Full AC line period is done. Update controls.
		
		temp = PORTD;
    15c0:	82 b3       	in	r24, 0x12	; 18
		temp &= ~(1<<PD_M1 | 1<<PD_M2);
    15c2:	83 7f       	andi	r24, 0xF3	; 243
		if ( rollState & SKIP_CURRENT_MOTOR_CTRL )
    15c4:	90 91 ee 00 	lds	r25, 0x00EE
    15c8:	93 ff       	sbrs	r25, 3
    15ca:	05 c0       	rjmp	.+10     	; 0x15d6 <__vector_9+0x72>
		{
			// Direction control changed. Skip current period to allow TRIACs fully close
			rollState &= ~SKIP_CURRENT_MOTOR_CTRL;
    15cc:	97 7f       	andi	r25, 0xF7	; 247
    15ce:	90 93 ee 00 	sts	0x00EE, r25
			PORTD = temp; 	
    15d2:	82 bb       	out	0x12, r24	; 18
    15d4:	76 c0       	rjmp	.+236    	; 0x16c2 <__vector_9+0x15e>
		}
		else
		{
			// Apply direction control 
			if (rollState & ROLL_FWD)
    15d6:	90 ff       	sbrs	r25, 0
    15d8:	02 c0       	rjmp	.+4      	; 0x15de <__vector_9+0x7a>
				temp |= (1<<PD_M1);
    15da:	84 60       	ori	r24, 0x04	; 4
    15dc:	02 c0       	rjmp	.+4      	; 0x15e2 <__vector_9+0x7e>
			else if (rollState & ROLL_REV)
    15de:	91 fd       	sbrc	r25, 1
				temp |= (1<<PD_M2);
    15e0:	88 60       	ori	r24, 0x08	; 8
			PORTD = temp; 
    15e2:	82 bb       	out	0x12, r24	; 18
// Function to process rolling - sets rotation direction for next period
// Call once per each AC line period
static inline void controlRolling()
{
	// Process cycle rolling
	switch(rollState & (ROLL_FWD | ROLL_REV | ROLL_CYCLE))
    15e4:	40 91 ee 00 	lds	r20, 0x00EE
    15e8:	84 2f       	mov	r24, r20
    15ea:	87 70       	andi	r24, 0x07	; 7
    15ec:	85 30       	cpi	r24, 0x05	; 5
    15ee:	19 f0       	breq	.+6      	; 0x15f6 <__vector_9+0x92>
    15f0:	86 30       	cpi	r24, 0x06	; 6
    15f2:	e9 f5       	brne	.+122    	; 0x166e <__vector_9+0x10a>
    15f4:	1d c0       	rjmp	.+58     	; 0x1630 <__vector_9+0xcc>
//---------------------------------------------//
//---------------------------------------------//

static inline uint8_t reachedTopPoint(void)
{
	return (	(int16_t)(topPoint - rollPoint) <= 0 );
    15f6:	80 91 f8 00 	lds	r24, 0x00F8
    15fa:	90 91 f9 00 	lds	r25, 0x00F9
    15fe:	20 91 f4 00 	lds	r18, 0x00F4
    1602:	30 91 f5 00 	lds	r19, 0x00F5
    1606:	82 1b       	sub	r24, r18
    1608:	93 0b       	sbc	r25, r19
{
	// Process cycle rolling
	switch(rollState & (ROLL_FWD | ROLL_REV | ROLL_CYCLE))
	{
		case (ROLL_FWD | ROLL_CYCLE):
			if (reachedTopPoint())
    160a:	18 16       	cp	r1, r24
    160c:	19 06       	cpc	r1, r25
    160e:	7c f1       	brlt	.+94     	; 0x166e <__vector_9+0x10a>
			{
				if (activeRollCycle >= rollCycleSet)	
    1610:	80 91 ed 00 	lds	r24, 0x00ED
    1614:	90 91 3e 01 	lds	r25, 0x013E
    1618:	89 17       	cp	r24, r25
    161a:	28 f0       	brcs	.+10     	; 0x1626 <__vector_9+0xc2>
				{
					// DONE!
					rollState &= ~ROLL_CYCLE;
    161c:	4b 7f       	andi	r20, 0xFB	; 251
					rollState |= CYCLE_ROLL_DONE;
    161e:	40 61       	ori	r20, 0x10	; 16
    1620:	40 93 ee 00 	sts	0x00EE, r20
    1624:	24 c0       	rjmp	.+72     	; 0x166e <__vector_9+0x10a>
				}
				else
				{
					activeRollCycle++;
    1626:	8f 5f       	subi	r24, 0xFF	; 255
    1628:	80 93 ed 00 	sts	0x00ED, r24
					// Change dir	
					newDirReq = ROLL_REV;				
    162c:	82 e0       	ldi	r24, 0x02	; 2
    162e:	1d c0       	rjmp	.+58     	; 0x166a <__vector_9+0x106>
	return (	(int16_t)(topPoint - rollPoint) <= 0 );
}

static inline uint8_t reachedBottomPoint(void)
{
	return (	(int16_t)(rollPoint - bottomPoint) <= 0 );
    1630:	80 91 f4 00 	lds	r24, 0x00F4
    1634:	90 91 f5 00 	lds	r25, 0x00F5
    1638:	20 91 f6 00 	lds	r18, 0x00F6
    163c:	30 91 f7 00 	lds	r19, 0x00F7
    1640:	82 1b       	sub	r24, r18
    1642:	93 0b       	sbc	r25, r19
				}
			}
			break;
		
		case (ROLL_REV | ROLL_CYCLE):	
			if (reachedBottomPoint())
    1644:	18 16       	cp	r1, r24
    1646:	19 06       	cpc	r1, r25
    1648:	94 f0       	brlt	.+36     	; 0x166e <__vector_9+0x10a>
			{
				if (activeRollCycle >= rollCycleSet)	
    164a:	80 91 ed 00 	lds	r24, 0x00ED
    164e:	90 91 3e 01 	lds	r25, 0x013E
    1652:	89 17       	cp	r24, r25
    1654:	30 f0       	brcs	.+12     	; 0x1662 <__vector_9+0xfe>
				{
					// DONE!
					rollState &= ~ROLL_CYCLE;
    1656:	84 2f       	mov	r24, r20
    1658:	8b 7f       	andi	r24, 0xFB	; 251
					rollState |= CYCLE_ROLL_DONE;
    165a:	80 61       	ori	r24, 0x10	; 16
    165c:	80 93 ee 00 	sts	0x00EE, r24
    1660:	06 c0       	rjmp	.+12     	; 0x166e <__vector_9+0x10a>
				}
				else
				{
					activeRollCycle++;
    1662:	8f 5f       	subi	r24, 0xFF	; 255
    1664:	80 93 ed 00 	sts	0x00ED, r24
					// Change dir	
					newDirReq = ROLL_FWD;
    1668:	81 e0       	ldi	r24, 0x01	; 1
    166a:	80 93 f3 00 	sts	0x00F3, r24
		default:
			break;
	}
	
	// Process direction change
	if ((rollState ^ newDirReq) & (ROLL_FWD | ROLL_REV))
    166e:	20 91 ee 00 	lds	r18, 0x00EE
    1672:	90 91 f3 00 	lds	r25, 0x00F3
    1676:	89 2f       	mov	r24, r25
    1678:	82 27       	eor	r24, r18
    167a:	83 70       	andi	r24, 0x03	; 3
    167c:	19 f0       	breq	.+6      	; 0x1684 <__vector_9+0x120>
	{
		// ROLL_DIR_CHANGED is used for sound beep
		rollState |= (SKIP_CURRENT_MOTOR_CTRL | ROLL_DIR_CHANGED);
    167e:	28 62       	ori	r18, 0x28	; 40
    1680:	20 93 ee 00 	sts	0x00EE, r18
	}
	
	rollState &= ~(ROLL_FWD | ROLL_REV);
    1684:	80 91 ee 00 	lds	r24, 0x00EE
    1688:	8c 7f       	andi	r24, 0xFC	; 252
	rollState |= newDirReq;
    168a:	89 2b       	or	r24, r25
	rollState &= dirChangedMask;
    168c:	90 91 79 00 	lds	r25, 0x0079
    1690:	89 23       	and	r24, r25
    1692:	80 93 ee 00 	sts	0x00EE, r24
	dirChangedMask = 0xFF;
    1696:	9f ef       	ldi	r25, 0xFF	; 255
    1698:	90 93 79 00 	sts	0x0079, r25
	return (	(int16_t)(rollPoint - bottomPoint) <= 0 );
}

static inline void updateRollPoint(void)
{	
	if (rollState & ROLL_FWD)
    169c:	80 ff       	sbrs	r24, 0
    169e:	06 c0       	rjmp	.+12     	; 0x16ac <__vector_9+0x148>
		rollPoint++;
    16a0:	80 91 f4 00 	lds	r24, 0x00F4
    16a4:	90 91 f5 00 	lds	r25, 0x00F5
    16a8:	01 96       	adiw	r24, 0x01	; 1
    16aa:	07 c0       	rjmp	.+14     	; 0x16ba <__vector_9+0x156>
	else if (rollState & ROLL_REV)
    16ac:	81 ff       	sbrs	r24, 1
    16ae:	09 c0       	rjmp	.+18     	; 0x16c2 <__vector_9+0x15e>
		rollPoint--;	
    16b0:	80 91 f4 00 	lds	r24, 0x00F4
    16b4:	90 91 f5 00 	lds	r25, 0x00F5
    16b8:	01 97       	sbiw	r24, 0x01	; 1
    16ba:	90 93 f5 00 	sts	0x00F5, r25
    16be:	80 93 f4 00 	sts	0x00F4, r24
			controlRolling();
		}
			

		// Process heater control 
		if (heater_cnt == HEATER_REGULATION_PERIODS - 6)
    16c2:	80 91 f2 00 	lds	r24, 0x00F2
    16c6:	8c 32       	cpi	r24, 0x2C	; 44
    16c8:	b1 f4       	brne	.+44     	; 0x16f6 <__vector_9+0x192>
		{
			 if (heater_reg_cnt == HEATER_PID_CALL_INTERVAL - 1)
    16ca:	80 91 ef 00 	lds	r24, 0x00EF
    16ce:	83 30       	cpi	r24, 0x03	; 3
    16d0:	79 f4       	brne	.+30     	; 0x16f0 <__vector_9+0x18c>
			 {
				 heater_reg_cnt = 0;
    16d2:	10 92 ef 00 	sts	0x00EF, r1
				 // Set flag for PID control
				 heaterState |= READY_TO_UPDATE_HEATER;
    16d6:	80 91 f0 00 	lds	r24, 0x00F0
    16da:	80 68       	ori	r24, 0x80	; 128
    16dc:	80 93 f0 00 	sts	0x00F0, r24
				 // Save temperature measure at current time
				 PIDsampledADC = getNormalizedRingU16(&ringBufADC);
    16e0:	80 e6       	ldi	r24, 0x60	; 96
    16e2:	90 e0       	ldi	r25, 0x00	; 0
    16e4:	7c d6       	rcall	.+3320   	; 0x23de <__data_load_end+0x972>
    16e6:	90 93 02 01 	sts	0x0102, r25
    16ea:	80 93 01 01 	sts	0x0101, r24
    16ee:	03 c0       	rjmp	.+6      	; 0x16f6 <__vector_9+0x192>
			 }
			 else
			 {
				 heater_reg_cnt++;
    16f0:	8f 5f       	subi	r24, 0xFF	; 255
    16f2:	80 93 ef 00 	sts	0x00EF, r24
			 }
		}			 
		
		
		if (heater_cnt == HEATER_REGULATION_PERIODS - 1)
    16f6:	80 91 f2 00 	lds	r24, 0x00F2
    16fa:	81 33       	cpi	r24, 0x31	; 49
    16fc:	39 f4       	brne	.+14     	; 0x170c <__vector_9+0x1a8>
		{
			heater_cnt = 0;
    16fe:	10 92 f2 00 	sts	0x00F2, r1
			// Copy new output value
			ctrl_heater_sync = ctrl_heater;
    1702:	80 91 f1 00 	lds	r24, 0x00F1
    1706:	80 93 fa 00 	sts	0x00FA, r24
    170a:	03 c0       	rjmp	.+6      	; 0x1712 <__vector_9+0x1ae>
		}
		else
		{
			heater_cnt++;
    170c:	8f 5f       	subi	r24, 0xFF	; 255
    170e:	80 93 f2 00 	sts	0x00F2, r24
			
			
	}
	

	if ((p_state & STATE_MASK)  != 0x0F)
    1712:	80 91 78 00 	lds	r24, 0x0078
    1716:	98 2f       	mov	r25, r24
    1718:	9f 70       	andi	r25, 0x0F	; 15
    171a:	9f 30       	cpi	r25, 0x0F	; 15
    171c:	19 f0       	breq	.+6      	; 0x1724 <__vector_9+0x1c0>
		p_state++;
    171e:	8f 5f       	subi	r24, 0xFF	; 255
    1720:	80 93 78 00 	sts	0x0078, r24

}	
    1724:	ff 91       	pop	r31
    1726:	ef 91       	pop	r30
    1728:	bf 91       	pop	r27
    172a:	af 91       	pop	r26
    172c:	9f 91       	pop	r25
    172e:	8f 91       	pop	r24
    1730:	7f 91       	pop	r23
    1732:	6f 91       	pop	r22
    1734:	5f 91       	pop	r21
    1736:	4f 91       	pop	r20
    1738:	3f 91       	pop	r19
    173a:	2f 91       	pop	r18
    173c:	0f 90       	pop	r0
    173e:	0f be       	out	0x3f, r0	; 63
    1740:	0f 90       	pop	r0
    1742:	1f 90       	pop	r1
    1744:	18 95       	reti

00001746 <processSoftTimer8b>:
 
 
 
 
 void processSoftTimer8b(SoftTimer8b_t *tmr)
 {
    1746:	fc 01       	movw	r30, r24
	 uint8_t newTimerVal;

	 if (!tmr->Enabled)
    1748:	90 81       	ld	r25, Z
    174a:	90 ff       	sbrs	r25, 0
    174c:	27 c0       	rjmp	.+78     	; 0x179c <processSoftTimer8b+0x56>
		return;
	 
	 tmr->FA_EQ = 0;
	 tmr->FA_GE = 0;
	 tmr->FTop = 0;
    174e:	97 7e       	andi	r25, 0xE7	; 231
    1750:	9f 7d       	andi	r25, 0xDF	; 223
    1752:	90 83       	st	Z, r25
	 
	 if (tmr->Timer >= tmr->Top)
    1754:	81 81       	ldd	r24, Z+1	; 0x01
    1756:	22 81       	ldd	r18, Z+2	; 0x02
    1758:	82 17       	cp	r24, r18
    175a:	50 f0       	brcs	.+20     	; 0x1770 <processSoftTimer8b+0x2a>
	 {
		 if (tmr->RunOnce)
    175c:	91 ff       	sbrs	r25, 1
    175e:	02 c0       	rjmp	.+4      	; 0x1764 <processSoftTimer8b+0x1e>
		 {
			 tmr->Enabled = 0;
    1760:	9e 7f       	andi	r25, 0xFE	; 254
    1762:	90 83       	st	Z, r25
		 }
		 tmr->FTop = 1;
    1764:	90 81       	ld	r25, Z
		 tmr->FOvfl = 1;
    1766:	90 62       	ori	r25, 0x20	; 32
    1768:	90 64       	ori	r25, 0x40	; 64
    176a:	90 83       	st	Z, r25
		 newTimerVal = 0;
    176c:	20 e0       	ldi	r18, 0x00	; 0
    176e:	02 c0       	rjmp	.+4      	; 0x1774 <processSoftTimer8b+0x2e>
	 }
	 else
	 {
		 newTimerVal = tmr->Timer + 1;
    1770:	28 2f       	mov	r18, r24
    1772:	2f 5f       	subi	r18, 0xFF	; 255
	 }
	 
	 if (tmr->Timer == tmr->CompA)
    1774:	93 81       	ldd	r25, Z+3	; 0x03
    1776:	89 13       	cpse	r24, r25
    1778:	0b c0       	rjmp	.+22     	; 0x1790 <processSoftTimer8b+0x4a>
	 {
		 tmr->FA_EQ = 1;
    177a:	80 81       	ld	r24, Z
		 tmr->FA_GE = 1;
    177c:	88 60       	ori	r24, 0x08	; 8
    177e:	80 61       	ori	r24, 0x10	; 16
		 tmr->FA_TGL = !tmr->FA_TGL;
    1780:	82 fb       	bst	r24, 2
    1782:	99 27       	eor	r25, r25
    1784:	90 f9       	bld	r25, 0
    1786:	31 e0       	ldi	r19, 0x01	; 1
    1788:	93 27       	eor	r25, r19
    178a:	90 fb       	bst	r25, 0
    178c:	82 f9       	bld	r24, 2
    178e:	04 c0       	rjmp	.+8      	; 0x1798 <processSoftTimer8b+0x52>
	 }
	 else if (tmr->Timer >= tmr->CompA)
    1790:	89 17       	cp	r24, r25
    1792:	18 f0       	brcs	.+6      	; 0x179a <processSoftTimer8b+0x54>
	 {
		 tmr->FA_GE = 1;
    1794:	80 81       	ld	r24, Z
    1796:	80 61       	ori	r24, 0x10	; 16
    1798:	80 83       	st	Z, r24
	 }
	 
	 tmr->Timer = newTimerVal; 
    179a:	21 83       	std	Z+1, r18	; 0x01
    179c:	08 95       	ret

0000179e <SetBeeperFreq>:
}

// Setup beeper frequency (Hz)
void SetBeeperFreq(uint16_t freq_hz)
{
	uint16_t period_us = 1000000 / freq_hz;
    179e:	9c 01       	movw	r18, r24
    17a0:	40 e0       	ldi	r20, 0x00	; 0
    17a2:	50 e0       	ldi	r21, 0x00	; 0
    17a4:	60 e4       	ldi	r22, 0x40	; 64
    17a6:	72 e4       	ldi	r23, 0x42	; 66
    17a8:	8f e0       	ldi	r24, 0x0F	; 15
    17aa:	90 e0       	ldi	r25, 0x00	; 0
    17ac:	e6 d0       	rcall	.+460    	; 0x197a <__divmodsi4>
	if (period_us & 0xFFF8)
    17ae:	da 01       	movw	r26, r20
    17b0:	c9 01       	movw	r24, r18
    17b2:	88 7f       	andi	r24, 0xF8	; 248
    17b4:	aa 27       	eor	r26, r26
    17b6:	bb 27       	eor	r27, r27
    17b8:	89 2b       	or	r24, r25
    17ba:	51 f0       	breq	.+20     	; 0x17d0 <SetBeeperFreq+0x32>
		OCR1A = (period_us>>3) - 1;
    17bc:	43 e0       	ldi	r20, 0x03	; 3
    17be:	36 95       	lsr	r19
    17c0:	27 95       	ror	r18
    17c2:	4a 95       	dec	r20
    17c4:	e1 f7       	brne	.-8      	; 0x17be <SetBeeperFreq+0x20>
    17c6:	21 50       	subi	r18, 0x01	; 1
    17c8:	31 09       	sbc	r19, r1
    17ca:	3b bd       	out	0x2b, r19	; 43
    17cc:	2a bd       	out	0x2a, r18	; 42
    17ce:	04 c0       	rjmp	.+8      	; 0x17d8 <SetBeeperFreq+0x3a>
	else
		OCR1A = 0x1;
    17d0:	81 e0       	ldi	r24, 0x01	; 1
    17d2:	90 e0       	ldi	r25, 0x00	; 0
    17d4:	9b bd       	out	0x2b, r25	; 43
    17d6:	8a bd       	out	0x2a, r24	; 42
	TCNT1 = 0;
    17d8:	1d bc       	out	0x2d, r1	; 45
    17da:	1c bc       	out	0x2c, r1	; 44
    17dc:	08 95       	ret

000017de <StartBeep>:
}

// Beep for some time in ms
void StartBeep(uint16_t time_ms)
{
	if (sound_enable)
    17de:	20 91 3b 01 	lds	r18, 0x013B
    17e2:	22 23       	and	r18, r18
    17e4:	39 f0       	breq	.+14     	; 0x17f4 <StartBeep+0x16>
	{
		beep_cnt = time_ms;
    17e6:	90 93 fe 00 	sts	0x00FE, r25
    17ea:	80 93 fd 00 	sts	0x00FD, r24
// Enable / disable beeper output
inline void SetBeepOutput(uint8_t val)
{
	if (val)
		// Toggle OCR1A on compare match
		TCCR1A |= (1<<COM1A0);
    17ee:	8f b5       	in	r24, 0x2f	; 47
    17f0:	80 64       	ori	r24, 0x40	; 64
    17f2:	8f bd       	out	0x2f, r24	; 47
    17f4:	08 95       	ret

000017f6 <resetAutoPowerOffCounter>:



void resetAutoPowerOffCounter(void)
{
	systick_counter = 0;
    17f6:	10 92 00 01 	sts	0x0100, r1
    17fa:	10 92 ff 00 	sts	0x00FF, r1
	minute_counter = 0;
    17fe:	10 92 fb 00 	sts	0x00FB, r1
    1802:	08 95       	ret

00001804 <processAutoPowerOff>:
}

void processAutoPowerOff(void)
{
	//if (systick_counter == SYSTICKS_PER_SECOND * 60 - 1)
	if (systick_counter == SYSTICKS_PER_SECOND * 5 - 1)
    1804:	80 91 ff 00 	lds	r24, 0x00FF
    1808:	90 91 00 01 	lds	r25, 0x0100
    180c:	83 36       	cpi	r24, 0x63	; 99
    180e:	91 05       	cpc	r25, r1
    1810:	61 f4       	brne	.+24     	; 0x182a <processAutoPowerOff+0x26>
	{
		systick_counter = 0;
    1812:	10 92 00 01 	sts	0x0100, r1
    1816:	10 92 ff 00 	sts	0x00FF, r1
		if (minute_counter != MAX_POWEROFF_TIMEOUT - 1)
    181a:	80 91 fb 00 	lds	r24, 0x00FB
    181e:	8e 35       	cpi	r24, 0x5E	; 94
    1820:	49 f0       	breq	.+18     	; 0x1834 <processAutoPowerOff+0x30>
		{
			minute_counter++;
    1822:	8f 5f       	subi	r24, 0xFF	; 255
    1824:	80 93 fb 00 	sts	0x00FB, r24
    1828:	08 95       	ret
		//	 Alert user - TODO
		//}
	}
	else
	{
		systick_counter++;
    182a:	01 96       	adiw	r24, 0x01	; 1
    182c:	90 93 00 01 	sts	0x0100, r25
    1830:	80 93 ff 00 	sts	0x00FF, r24
    1834:	08 95       	ret

00001836 <__vector_3>:




ISR(TIMER2_COMP_vect)
{	
    1836:	1f 92       	push	r1
    1838:	0f 92       	push	r0
    183a:	0f b6       	in	r0, 0x3f	; 63
    183c:	0f 92       	push	r0
    183e:	11 24       	eor	r1, r1
    1840:	2f 93       	push	r18
    1842:	3f 93       	push	r19
    1844:	4f 93       	push	r20
    1846:	5f 93       	push	r21
    1848:	6f 93       	push	r22
    184a:	7f 93       	push	r23
    184c:	8f 93       	push	r24
    184e:	9f 93       	push	r25
    1850:	af 93       	push	r26
    1852:	bf 93       	push	r27
    1854:	ef 93       	push	r30
    1856:	ff 93       	push	r31
	
	// Manage beeper
	if (beep_cnt)
    1858:	80 91 fd 00 	lds	r24, 0x00FD
    185c:	90 91 fe 00 	lds	r25, 0x00FE
    1860:	00 97       	sbiw	r24, 0x00	; 0
    1862:	31 f0       	breq	.+12     	; 0x1870 <__vector_3+0x3a>
		beep_cnt--;
    1864:	01 97       	sbiw	r24, 0x01	; 1
    1866:	90 93 fe 00 	sts	0x00FE, r25
    186a:	80 93 fd 00 	sts	0x00FD, r24
    186e:	03 c0       	rjmp	.+6      	; 0x1876 <__vector_3+0x40>
	if (val)
		// Toggle OCR1A on compare match
		TCCR1A |= (1<<COM1A0);
	else
		// Disable OCR1A output
		TCCR1A &= ~(1<<COM1A0 | 1<<COM1A1);
    1870:	8f b5       	in	r24, 0x2f	; 47
    1872:	8f 73       	andi	r24, 0x3F	; 63
    1874:	8f bd       	out	0x2f, r24	; 47
		beep_cnt--;
	else
		SetBeepOutput(0);	// done
	
	// Manage LED indicator
	processLedIndicator();
    1876:	62 d8       	rcall	.-3900   	; 0x93c <processLedIndicator>
	
	// Process menu update timer
	processSoftTimer8b(&menuUpdateTimer);	
    1878:	8a e7       	ldi	r24, 0x7A	; 122
    187a:	90 e0       	ldi	r25, 0x00	; 0
    187c:	64 df       	rcall	.-312    	; 0x1746 <processSoftTimer8b>
	
	// Start ADC conversion 
	ADCSRA |= (1<<ADSC);
    187e:	36 9a       	sbi	0x06, 6	; 6
	
}
    1880:	ff 91       	pop	r31
    1882:	ef 91       	pop	r30
    1884:	bf 91       	pop	r27
    1886:	af 91       	pop	r26
    1888:	9f 91       	pop	r25
    188a:	8f 91       	pop	r24
    188c:	7f 91       	pop	r23
    188e:	6f 91       	pop	r22
    1890:	5f 91       	pop	r21
    1892:	4f 91       	pop	r20
    1894:	3f 91       	pop	r19
    1896:	2f 91       	pop	r18
    1898:	0f 90       	pop	r0
    189a:	0f be       	out	0x3f, r0	; 63
    189c:	0f 90       	pop	r0
    189e:	1f 90       	pop	r1
    18a0:	18 95       	reti

000018a2 <USART_send>:



void USART_send( uint8_t data )
{
	UCSRA |= (1<<TXC);                 // Clear flag
    18a2:	5e 9a       	sbi	0x0b, 6	; 11
	UDR = data;
    18a4:	8c b9       	out	0x0c, r24	; 12
	while ( !(UCSRA & (1<<TXC)) );  // Wait
    18a6:	5e 9b       	sbis	0x0b, 6	; 11
    18a8:	fe cf       	rjmp	.-4      	; 0x18a6 <USART_send+0x4>
}
    18aa:	08 95       	ret

000018ac <USART_sendstr>:


void USART_sendstr(char* str)
{
    18ac:	1f 93       	push	r17
    18ae:	cf 93       	push	r28
    18b0:	df 93       	push	r29
    18b2:	ec 01       	movw	r28, r24
	uint8_t i = 0;
    18b4:	10 e0       	ldi	r17, 0x00	; 0
	while (str[i])
    18b6:	02 c0       	rjmp	.+4      	; 0x18bc <USART_sendstr+0x10>
	{
		USART_send(str[i++]);
    18b8:	1f 5f       	subi	r17, 0xFF	; 255
    18ba:	f3 df       	rcall	.-26     	; 0x18a2 <USART_send>


void USART_sendstr(char* str)
{
	uint8_t i = 0;
	while (str[i])
    18bc:	fe 01       	movw	r30, r28
    18be:	e1 0f       	add	r30, r17
    18c0:	f1 1d       	adc	r31, r1
    18c2:	80 81       	ld	r24, Z
    18c4:	81 11       	cpse	r24, r1
    18c6:	f8 cf       	rjmp	.-16     	; 0x18b8 <USART_sendstr+0xc>
	{
		USART_send(str[i++]);
	}
}
    18c8:	df 91       	pop	r29
    18ca:	cf 91       	pop	r28
    18cc:	1f 91       	pop	r17
    18ce:	08 95       	ret

000018d0 <__udivmodqi4>:
    18d0:	99 1b       	sub	r25, r25
    18d2:	79 e0       	ldi	r23, 0x09	; 9
    18d4:	04 c0       	rjmp	.+8      	; 0x18de <__udivmodqi4_ep>

000018d6 <__udivmodqi4_loop>:
    18d6:	99 1f       	adc	r25, r25
    18d8:	96 17       	cp	r25, r22
    18da:	08 f0       	brcs	.+2      	; 0x18de <__udivmodqi4_ep>
    18dc:	96 1b       	sub	r25, r22

000018de <__udivmodqi4_ep>:
    18de:	88 1f       	adc	r24, r24
    18e0:	7a 95       	dec	r23
    18e2:	c9 f7       	brne	.-14     	; 0x18d6 <__udivmodqi4_loop>
    18e4:	80 95       	com	r24
    18e6:	08 95       	ret

000018e8 <__udivmodhi4>:
    18e8:	aa 1b       	sub	r26, r26
    18ea:	bb 1b       	sub	r27, r27
    18ec:	51 e1       	ldi	r21, 0x11	; 17
    18ee:	07 c0       	rjmp	.+14     	; 0x18fe <__udivmodhi4_ep>

000018f0 <__udivmodhi4_loop>:
    18f0:	aa 1f       	adc	r26, r26
    18f2:	bb 1f       	adc	r27, r27
    18f4:	a6 17       	cp	r26, r22
    18f6:	b7 07       	cpc	r27, r23
    18f8:	10 f0       	brcs	.+4      	; 0x18fe <__udivmodhi4_ep>
    18fa:	a6 1b       	sub	r26, r22
    18fc:	b7 0b       	sbc	r27, r23

000018fe <__udivmodhi4_ep>:
    18fe:	88 1f       	adc	r24, r24
    1900:	99 1f       	adc	r25, r25
    1902:	5a 95       	dec	r21
    1904:	a9 f7       	brne	.-22     	; 0x18f0 <__udivmodhi4_loop>
    1906:	80 95       	com	r24
    1908:	90 95       	com	r25
    190a:	bc 01       	movw	r22, r24
    190c:	cd 01       	movw	r24, r26
    190e:	08 95       	ret

00001910 <__divmodhi4>:
    1910:	97 fb       	bst	r25, 7
    1912:	07 2e       	mov	r0, r23
    1914:	16 f4       	brtc	.+4      	; 0x191a <__divmodhi4+0xa>
    1916:	00 94       	com	r0
    1918:	06 d0       	rcall	.+12     	; 0x1926 <__divmodhi4_neg1>
    191a:	77 fd       	sbrc	r23, 7
    191c:	08 d0       	rcall	.+16     	; 0x192e <__divmodhi4_neg2>
    191e:	e4 df       	rcall	.-56     	; 0x18e8 <__udivmodhi4>
    1920:	07 fc       	sbrc	r0, 7
    1922:	05 d0       	rcall	.+10     	; 0x192e <__divmodhi4_neg2>
    1924:	3e f4       	brtc	.+14     	; 0x1934 <__divmodhi4_exit>

00001926 <__divmodhi4_neg1>:
    1926:	90 95       	com	r25
    1928:	81 95       	neg	r24
    192a:	9f 4f       	sbci	r25, 0xFF	; 255
    192c:	08 95       	ret

0000192e <__divmodhi4_neg2>:
    192e:	70 95       	com	r23
    1930:	61 95       	neg	r22
    1932:	7f 4f       	sbci	r23, 0xFF	; 255

00001934 <__divmodhi4_exit>:
    1934:	08 95       	ret

00001936 <__udivmodsi4>:
    1936:	a1 e2       	ldi	r26, 0x21	; 33
    1938:	1a 2e       	mov	r1, r26
    193a:	aa 1b       	sub	r26, r26
    193c:	bb 1b       	sub	r27, r27
    193e:	fd 01       	movw	r30, r26
    1940:	0d c0       	rjmp	.+26     	; 0x195c <__udivmodsi4_ep>

00001942 <__udivmodsi4_loop>:
    1942:	aa 1f       	adc	r26, r26
    1944:	bb 1f       	adc	r27, r27
    1946:	ee 1f       	adc	r30, r30
    1948:	ff 1f       	adc	r31, r31
    194a:	a2 17       	cp	r26, r18
    194c:	b3 07       	cpc	r27, r19
    194e:	e4 07       	cpc	r30, r20
    1950:	f5 07       	cpc	r31, r21
    1952:	20 f0       	brcs	.+8      	; 0x195c <__udivmodsi4_ep>
    1954:	a2 1b       	sub	r26, r18
    1956:	b3 0b       	sbc	r27, r19
    1958:	e4 0b       	sbc	r30, r20
    195a:	f5 0b       	sbc	r31, r21

0000195c <__udivmodsi4_ep>:
    195c:	66 1f       	adc	r22, r22
    195e:	77 1f       	adc	r23, r23
    1960:	88 1f       	adc	r24, r24
    1962:	99 1f       	adc	r25, r25
    1964:	1a 94       	dec	r1
    1966:	69 f7       	brne	.-38     	; 0x1942 <__udivmodsi4_loop>
    1968:	60 95       	com	r22
    196a:	70 95       	com	r23
    196c:	80 95       	com	r24
    196e:	90 95       	com	r25
    1970:	9b 01       	movw	r18, r22
    1972:	ac 01       	movw	r20, r24
    1974:	bd 01       	movw	r22, r26
    1976:	cf 01       	movw	r24, r30
    1978:	08 95       	ret

0000197a <__divmodsi4>:
    197a:	05 2e       	mov	r0, r21
    197c:	97 fb       	bst	r25, 7
    197e:	16 f4       	brtc	.+4      	; 0x1984 <__divmodsi4+0xa>
    1980:	00 94       	com	r0
    1982:	06 d0       	rcall	.+12     	; 0x1990 <__divmodsi4_neg1>
    1984:	57 fd       	sbrc	r21, 7
    1986:	0c d0       	rcall	.+24     	; 0x19a0 <__divmodsi4_neg2>
    1988:	d6 df       	rcall	.-84     	; 0x1936 <__udivmodsi4>
    198a:	07 fc       	sbrc	r0, 7
    198c:	09 d0       	rcall	.+18     	; 0x19a0 <__divmodsi4_neg2>
    198e:	7e f4       	brtc	.+30     	; 0x19ae <__divmodsi4_exit>

00001990 <__divmodsi4_neg1>:
    1990:	90 95       	com	r25
    1992:	80 95       	com	r24
    1994:	70 95       	com	r23
    1996:	61 95       	neg	r22
    1998:	7f 4f       	sbci	r23, 0xFF	; 255
    199a:	8f 4f       	sbci	r24, 0xFF	; 255
    199c:	9f 4f       	sbci	r25, 0xFF	; 255
    199e:	08 95       	ret

000019a0 <__divmodsi4_neg2>:
    19a0:	50 95       	com	r21
    19a2:	40 95       	com	r20
    19a4:	30 95       	com	r19
    19a6:	21 95       	neg	r18
    19a8:	3f 4f       	sbci	r19, 0xFF	; 255
    19aa:	4f 4f       	sbci	r20, 0xFF	; 255
    19ac:	5f 4f       	sbci	r21, 0xFF	; 255

000019ae <__divmodsi4_exit>:
    19ae:	08 95       	ret

000019b0 <__umulhisi3>:
    19b0:	a2 9f       	mul	r26, r18
    19b2:	b0 01       	movw	r22, r0
    19b4:	b3 9f       	mul	r27, r19
    19b6:	c0 01       	movw	r24, r0
    19b8:	a3 9f       	mul	r26, r19
    19ba:	01 d0       	rcall	.+2      	; 0x19be <__umulhisi3+0xe>
    19bc:	b2 9f       	mul	r27, r18
    19be:	70 0d       	add	r23, r0
    19c0:	81 1d       	adc	r24, r1
    19c2:	11 24       	eor	r1, r1
    19c4:	91 1d       	adc	r25, r1
    19c6:	08 95       	ret

000019c8 <__usmulhisi3>:
    19c8:	f3 df       	rcall	.-26     	; 0x19b0 <__umulhisi3>

000019ca <__usmulhisi3_tail>:
    19ca:	b7 ff       	sbrs	r27, 7
    19cc:	08 95       	ret
    19ce:	82 1b       	sub	r24, r18
    19d0:	93 0b       	sbc	r25, r19
    19d2:	08 95       	ret

000019d4 <__muluhisi3>:
    19d4:	ed df       	rcall	.-38     	; 0x19b0 <__umulhisi3>
    19d6:	a5 9f       	mul	r26, r21
    19d8:	90 0d       	add	r25, r0
    19da:	b4 9f       	mul	r27, r20
    19dc:	90 0d       	add	r25, r0
    19de:	a4 9f       	mul	r26, r20
    19e0:	80 0d       	add	r24, r0
    19e2:	91 1d       	adc	r25, r1
    19e4:	11 24       	eor	r1, r1
    19e6:	08 95       	ret

000019e8 <__eerd_block_m8>:
    19e8:	dc 01       	movw	r26, r24
    19ea:	cb 01       	movw	r24, r22

000019ec <__eerd_blraw_m8>:
    19ec:	fc 01       	movw	r30, r24
    19ee:	e1 99       	sbic	0x1c, 1	; 28
    19f0:	fe cf       	rjmp	.-4      	; 0x19ee <__eerd_blraw_m8+0x2>
    19f2:	06 c0       	rjmp	.+12     	; 0x1a00 <__eerd_blraw_m8+0x14>
    19f4:	ff bb       	out	0x1f, r31	; 31
    19f6:	ee bb       	out	0x1e, r30	; 30
    19f8:	e0 9a       	sbi	0x1c, 0	; 28
    19fa:	31 96       	adiw	r30, 0x01	; 1
    19fc:	0d b2       	in	r0, 0x1d	; 29
    19fe:	0d 92       	st	X+, r0
    1a00:	41 50       	subi	r20, 0x01	; 1
    1a02:	50 40       	sbci	r21, 0x00	; 0
    1a04:	b8 f7       	brcc	.-18     	; 0x19f4 <__eerd_blraw_m8+0x8>
    1a06:	08 95       	ret

00001a08 <_exit>:
    1a08:	f8 94       	cli

00001a0a <__stop_program>:
    1a0a:	ff cf       	rjmp	.-2      	; 0x1a0a <__stop_program>
