
pid1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001af8  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000066  00800060  00001af8  00001bac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000008f  008000c6  008000c6  00001c12  2**0
                  ALLOC
  3 .eeprom       0000000a  00810000  00810000  00001c12  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         000007d4  00000000  00000000  00001c1c  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      000000e3  00000000  00000000  000023f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      0000002f  00000000  00000000  000024d3  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 000003c8  00000000  00000000  00002502  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   000039c9  00000000  00000000  000028ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00001320  00000000  00000000  00006293  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   000017c8  00000000  00000000  000075b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  000008d0  00000000  00000000  00008d7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000ede  00000000  00000000  0000964c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00001b19  00000000  00000000  0000a52a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000308  00000000  00000000  0000c043  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	93 c0       	rjmp	.+294    	; 0x128 <__ctors_end>
       2:	ad c0       	rjmp	.+346    	; 0x15e <__bad_interrupt>
       4:	ac c0       	rjmp	.+344    	; 0x15e <__bad_interrupt>
       6:	8e cc       	rjmp	.-1764   	; 0xfffff924 <__eeprom_end+0xff7ef91a>
       8:	aa c0       	rjmp	.+340    	; 0x15e <__bad_interrupt>
       a:	a9 c0       	rjmp	.+338    	; 0x15e <__bad_interrupt>
       c:	a8 c0       	rjmp	.+336    	; 0x15e <__bad_interrupt>
       e:	a7 c0       	rjmp	.+334    	; 0x15e <__bad_interrupt>
      10:	a6 c0       	rjmp	.+332    	; 0x15e <__bad_interrupt>
      12:	1a cb       	rjmp	.-2508   	; 0xfffff648 <__eeprom_end+0xff7ef63e>
      14:	a4 c0       	rjmp	.+328    	; 0x15e <__bad_interrupt>
      16:	a3 c0       	rjmp	.+326    	; 0x15e <__bad_interrupt>
      18:	a2 c0       	rjmp	.+324    	; 0x15e <__bad_interrupt>
      1a:	a1 c0       	rjmp	.+322    	; 0x15e <__bad_interrupt>
      1c:	9c c1       	rjmp	.+824    	; 0x356 <__vector_14>
      1e:	9f c0       	rjmp	.+318    	; 0x15e <__bad_interrupt>
      20:	f1 ca       	rjmp	.-2590   	; 0xfffff604 <__eeprom_end+0xff7ef5fa>
      22:	9d c0       	rjmp	.+314    	; 0x15e <__bad_interrupt>
      24:	9c c0       	rjmp	.+312    	; 0x15e <__bad_interrupt>

00000026 <menuFunctionSet>:
      26:	01 4d 08 6a 06 4a 07 03 47 07 f9 07 da 05 02 f6     .M.j.J..G.......
      36:	07 91 07 3f 07 05 2d 07 4c 07 00 00 0b e0 05 4c     ...?..-.L......L
      46:	07 ee 05 04 2d 07 19 06 00 00 0c e0 05 19 06 ee     ....-...........
      56:	05 06 35 07 de 06 00 00 09 e0 05 de 06 ee 05 07     ..5.............
      66:	35 07 95 06 00 00 0a e0 05 95 06 ee 05 08 0c 06     5...............
      76:	f7 05 00 00 0d ff 05 f7 05 00 00 0e 27 07 fb 05     ............'...
      86:	f4 05                                               ..

00000088 <menuJumpSet>:
      88:	01 06 00 03 a8 01 00 01 02 40 01 00 02 05 28 02     .........@....(.
      98:	00 01 01 80 03 00 83 01 40 05 00 82 01 00 05 04     ........@.......
      a8:	00 04 68 05 02 00 07 a8 05 00 01 0b 28 0b 00 83     ..h.........(...
      b8:	05 28 04 00 82 01 00 04 04 00 06 68 04 02 00 05     .(.........h....
      c8:	a8 04 00 01 0c 28 0c 00 83 04 28 06 00 82 01 00     .....(....(.....
      d8:	06 04 00 07 68 06 02 00 04 a8 06 00 01 09 00 07     ....h...........
      e8:	00 82 01 00 07 04 00 05 68 07 02 00 06 a8 07 00     ........h.......
      f8:	01 0a 00 09 00 02 06 28 09 00 01 08 14 08 00 83     .......(........
     108:	01 00 0a 00 02 07 28 0a 00 01 0d 14 0d 00 83 01     ......(.........
     118:	00 01 00 40 0e 00 02 00 40 0e 00 0e 76 01 01 00     ...@....@...v...

00000128 <__ctors_end>:
     128:	11 24       	eor	r1, r1
     12a:	1f be       	out	0x3f, r1	; 63
     12c:	cf e5       	ldi	r28, 0x5F	; 95
     12e:	d4 e0       	ldi	r29, 0x04	; 4
     130:	de bf       	out	0x3e, r29	; 62
     132:	cd bf       	out	0x3d, r28	; 61

00000134 <__do_copy_data>:
     134:	10 e0       	ldi	r17, 0x00	; 0
     136:	a0 e6       	ldi	r26, 0x60	; 96
     138:	b0 e0       	ldi	r27, 0x00	; 0
     13a:	e8 ef       	ldi	r30, 0xF8	; 248
     13c:	fa e1       	ldi	r31, 0x1A	; 26
     13e:	02 c0       	rjmp	.+4      	; 0x144 <__do_copy_data+0x10>
     140:	05 90       	lpm	r0, Z+
     142:	0d 92       	st	X+, r0
     144:	a6 3c       	cpi	r26, 0xC6	; 198
     146:	b1 07       	cpc	r27, r17
     148:	d9 f7       	brne	.-10     	; 0x140 <__do_copy_data+0xc>

0000014a <__do_clear_bss>:
     14a:	21 e0       	ldi	r18, 0x01	; 1
     14c:	a6 ec       	ldi	r26, 0xC6	; 198
     14e:	b0 e0       	ldi	r27, 0x00	; 0
     150:	01 c0       	rjmp	.+2      	; 0x154 <.do_clear_bss_start>

00000152 <.do_clear_bss_loop>:
     152:	1d 92       	st	X+, r1

00000154 <.do_clear_bss_start>:
     154:	a5 35       	cpi	r26, 0x55	; 85
     156:	b2 07       	cpc	r27, r18
     158:	e1 f7       	brne	.-8      	; 0x152 <.do_clear_bss_loop>
     15a:	b0 d8       	rcall	.-3744   	; 0xfffff2bc <__eeprom_end+0xff7ef2b2>
     15c:	cb cc       	rjmp	.-1642   	; 0xfffffaf4 <__eeprom_end+0xff7efaea>

0000015e <__bad_interrupt>:
     15e:	50 cf       	rjmp	.-352    	; 0x0 <__vectors>

00000160 <conv_ADC_to_Celsius>:
//---------------------------------------------//
//---------------------------------------------//


uint16_t conv_ADC_to_Celsius(uint16_t adc_value)
{	
     160:	0f 93       	push	r16
     162:	1f 93       	push	r17
	return (uint16_t)(((int32_t)adc_value * k_norm + offset_norm) / (COEFF_SCALE));
     164:	20 91 c6 00 	lds	r18, 0x00C6
     168:	30 91 c7 00 	lds	r19, 0x00C7
     16c:	40 91 c8 00 	lds	r20, 0x00C8
     170:	50 91 c9 00 	lds	r21, 0x00C9
     174:	dc 01       	movw	r26, r24
     176:	a4 dc       	rcall	.-1720   	; 0xfffffac0 <__eeprom_end+0xff7efab6>
     178:	00 91 ca 00 	lds	r16, 0x00CA
     17c:	10 91 cb 00 	lds	r17, 0x00CB
     180:	20 91 cc 00 	lds	r18, 0x00CC
     184:	30 91 cd 00 	lds	r19, 0x00CD
     188:	60 0f       	add	r22, r16
     18a:	71 1f       	adc	r23, r17
     18c:	82 1f       	adc	r24, r18
     18e:	93 1f       	adc	r25, r19
     190:	28 ee       	ldi	r18, 0xE8	; 232
     192:	33 e0       	ldi	r19, 0x03	; 3
     194:	40 e0       	ldi	r20, 0x00	; 0
     196:	50 e0       	ldi	r21, 0x00	; 0
     198:	66 dc       	rcall	.-1844   	; 0xfffffa66 <__eeprom_end+0xff7efa5c>
}
     19a:	c9 01       	movw	r24, r18
     19c:	1f 91       	pop	r17
     19e:	0f 91       	pop	r16
     1a0:	08 95       	ret

000001a2 <conv_Celsius_to_ADC>:

uint16_t conv_Celsius_to_ADC(uint16_t degree_value)
{
     1a2:	0f 93       	push	r16
     1a4:	1f 93       	push	r17
	degree_value += 1;
     1a6:	9c 01       	movw	r18, r24
     1a8:	2f 5f       	subi	r18, 0xFF	; 255
     1aa:	3f 4f       	sbci	r19, 0xFF	; 255
	return (uint16_t)(((int32_t)degree_value * COEFF_SCALE - offset_norm) / k_norm);
     1ac:	a8 ee       	ldi	r26, 0xE8	; 232
     1ae:	b3 e0       	ldi	r27, 0x03	; 3
     1b0:	75 dc       	rcall	.-1814   	; 0xfffffa9c <__eeprom_end+0xff7efa92>
     1b2:	00 91 ca 00 	lds	r16, 0x00CA
     1b6:	10 91 cb 00 	lds	r17, 0x00CB
     1ba:	20 91 cc 00 	lds	r18, 0x00CC
     1be:	30 91 cd 00 	lds	r19, 0x00CD
     1c2:	60 1b       	sub	r22, r16
     1c4:	71 0b       	sbc	r23, r17
     1c6:	82 0b       	sbc	r24, r18
     1c8:	93 0b       	sbc	r25, r19
     1ca:	20 91 c6 00 	lds	r18, 0x00C6
     1ce:	30 91 c7 00 	lds	r19, 0x00C7
     1d2:	40 91 c8 00 	lds	r20, 0x00C8
     1d6:	50 91 c9 00 	lds	r21, 0x00C9
     1da:	45 dc       	rcall	.-1910   	; 0xfffffa66 <__eeprom_end+0xff7efa5c>
}
     1dc:	c9 01       	movw	r24, r18
     1de:	1f 91       	pop	r17
     1e0:	0f 91       	pop	r16
     1e2:	08 95       	ret

000001e4 <calculateCoeffs>:

void calculateCoeffs(void)
{
     1e4:	8f 92       	push	r8
     1e6:	9f 92       	push	r9
     1e8:	af 92       	push	r10
     1ea:	bf 92       	push	r11
     1ec:	cf 92       	push	r12
     1ee:	df 92       	push	r13
     1f0:	ef 92       	push	r14
     1f2:	ff 92       	push	r15
     1f4:	cf 93       	push	r28
     1f6:	df 93       	push	r29
	k_norm = ((int32_t)(cpoint2 - cpoint1) * COEFF_SCALE) / ((int32_t)(cpoint2_adc - cpoint1_adc));
     1f8:	f0 90 21 01 	lds	r15, 0x0121
     1fc:	a0 91 41 01 	lds	r26, 0x0141
     200:	b0 e0       	ldi	r27, 0x00	; 0
     202:	af 19       	sub	r26, r15
     204:	b1 09       	sbc	r27, r1
     206:	c0 91 39 01 	lds	r28, 0x0139
     20a:	d0 91 3a 01 	lds	r29, 0x013A
     20e:	28 ee       	ldi	r18, 0xE8	; 232
     210:	33 e0       	ldi	r19, 0x03	; 3
     212:	50 dc       	rcall	.-1888   	; 0xfffffab4 <__eeprom_end+0xff7efaaa>
     214:	20 91 3d 01 	lds	r18, 0x013D
     218:	30 91 3e 01 	lds	r19, 0x013E
     21c:	2c 1b       	sub	r18, r28
     21e:	3d 0b       	sbc	r19, r29
     220:	40 e0       	ldi	r20, 0x00	; 0
     222:	50 e0       	ldi	r21, 0x00	; 0
     224:	20 dc       	rcall	.-1984   	; 0xfffffa66 <__eeprom_end+0xff7efa5c>
     226:	49 01       	movw	r8, r18
     228:	5a 01       	movw	r10, r20
     22a:	20 93 c6 00 	sts	0x00C6, r18
     22e:	30 93 c7 00 	sts	0x00C7, r19
     232:	40 93 c8 00 	sts	0x00C8, r20
     236:	50 93 c9 00 	sts	0x00C9, r21
	offset_norm = (int32_t)cpoint1 * COEFF_SCALE - (int32_t)cpoint1_adc * k_norm;
     23a:	2f 2d       	mov	r18, r15
     23c:	30 e0       	ldi	r19, 0x00	; 0
     23e:	a8 ee       	ldi	r26, 0xE8	; 232
     240:	b3 e0       	ldi	r27, 0x03	; 3
     242:	2c dc       	rcall	.-1960   	; 0xfffffa9c <__eeprom_end+0xff7efa92>
     244:	6b 01       	movw	r12, r22
     246:	7c 01       	movw	r14, r24
     248:	de 01       	movw	r26, r28
     24a:	a5 01       	movw	r20, r10
     24c:	94 01       	movw	r18, r8
     24e:	38 dc       	rcall	.-1936   	; 0xfffffac0 <__eeprom_end+0xff7efab6>
     250:	c6 1a       	sub	r12, r22
     252:	d7 0a       	sbc	r13, r23
     254:	e8 0a       	sbc	r14, r24
     256:	f9 0a       	sbc	r15, r25
     258:	c0 92 ca 00 	sts	0x00CA, r12
     25c:	d0 92 cb 00 	sts	0x00CB, r13
     260:	e0 92 cc 00 	sts	0x00CC, r14
     264:	f0 92 cd 00 	sts	0x00CD, r15
}
     268:	df 91       	pop	r29
     26a:	cf 91       	pop	r28
     26c:	ff 90       	pop	r15
     26e:	ef 90       	pop	r14
     270:	df 90       	pop	r13
     272:	cf 90       	pop	r12
     274:	bf 90       	pop	r11
     276:	af 90       	pop	r10
     278:	9f 90       	pop	r9
     27a:	8f 90       	pop	r8
     27c:	08 95       	ret

0000027e <update_normalized_adc>:


void update_normalized_adc()
{
	// Disable interrupts from ADC - to save data integrity
	ACSR &= ~(1<<ACIE);	
     27e:	43 98       	cbi	0x08, 3	; 8
}

// Get ring buffer normalized value
uint16_t getNormalizedRingU16(RingBufU16_t* bptr)
{
	return 	bptr->summ / bptr->length;
     280:	20 91 60 00 	lds	r18, 0x0060
     284:	30 e0       	ldi	r19, 0x00	; 0
     286:	40 e0       	ldi	r20, 0x00	; 0
     288:	50 e0       	ldi	r21, 0x00	; 0
     28a:	60 91 63 00 	lds	r22, 0x0063
     28e:	70 91 64 00 	lds	r23, 0x0064
     292:	80 91 65 00 	lds	r24, 0x0065
     296:	90 91 66 00 	lds	r25, 0x0066
     29a:	c3 db       	rcall	.-2170   	; 0xfffffa22 <__eeprom_end+0xff7efa18>
     29c:	30 93 1e 01 	sts	0x011E, r19
     2a0:	20 93 1d 01 	sts	0x011D, r18
	// Disable interrupts from ADC - to save data integrity
	ACSR &= ~(1<<ACIE);	
	// Get normalized mean window summ
	adc_normalized = (uint16_t)getNormalizedRingU16(&ringBufADC);
	// Enable interrupts from ADC
	ACSR |= (1<<ACIE);
     2a4:	43 9a       	sbi	0x08, 3	; 8
	// Convert to Celsius degree
	adc_celsius = conv_ADC_to_Celsius(adc_normalized);
     2a6:	c9 01       	movw	r24, r18
     2a8:	5b df       	rcall	.-330    	; 0x160 <conv_ADC_to_Celsius>
     2aa:	90 93 20 01 	sts	0x0120, r25
     2ae:	80 93 1f 01 	sts	0x011F, r24
     2b2:	08 95       	ret

000002b4 <addToRingU16>:
//---------------------------------------------//
//---------------------------------------------//

// Ring buffer main function - add new data and update summ
void addToRingU16(RingBufU16_t* bptr, uint16_t sample)
{
     2b4:	ff 92       	push	r15
     2b6:	0f 93       	push	r16
     2b8:	1f 93       	push	r17
     2ba:	cf 93       	push	r28
     2bc:	df 93       	push	r29
     2be:	fc 01       	movw	r30, r24
     2c0:	cb 01       	movw	r24, r22
	if (bptr->stat == RNORM)
     2c2:	20 85       	ldd	r18, Z+8	; 0x08
     2c4:	21 11       	cpse	r18, r1
     2c6:	18 c0       	rjmp	.+48     	; 0x2f8 <addToRingU16+0x44>
	{
		bptr->summ -= bptr->data[bptr->curr_pos];
     2c8:	27 81       	ldd	r18, Z+7	; 0x07
     2ca:	41 81       	ldd	r20, Z+1	; 0x01
     2cc:	32 81       	ldd	r19, Z+2	; 0x02
     2ce:	a4 2f       	mov	r26, r20
     2d0:	b3 2f       	mov	r27, r19
     2d2:	a2 0f       	add	r26, r18
     2d4:	b1 1d       	adc	r27, r1
     2d6:	a2 0f       	add	r26, r18
     2d8:	b1 1d       	adc	r27, r1
     2da:	2d 91       	ld	r18, X+
     2dc:	3c 91       	ld	r19, X
     2de:	43 81       	ldd	r20, Z+3	; 0x03
     2e0:	54 81       	ldd	r21, Z+4	; 0x04
     2e2:	65 81       	ldd	r22, Z+5	; 0x05
     2e4:	76 81       	ldd	r23, Z+6	; 0x06
     2e6:	42 1b       	sub	r20, r18
     2e8:	53 0b       	sbc	r21, r19
     2ea:	61 09       	sbc	r22, r1
     2ec:	71 09       	sbc	r23, r1
     2ee:	43 83       	std	Z+3, r20	; 0x03
     2f0:	54 83       	std	Z+4, r21	; 0x04
     2f2:	65 83       	std	Z+5, r22	; 0x05
     2f4:	76 83       	std	Z+6, r23	; 0x06
     2f6:	05 c0       	rjmp	.+10     	; 0x302 <addToRingU16+0x4e>
	}
	else
	{
		bptr->curr_pos = 0;
     2f8:	17 82       	std	Z+7, r1	; 0x07
		bptr->summ = 0;
     2fa:	13 82       	std	Z+3, r1	; 0x03
     2fc:	14 82       	std	Z+4, r1	; 0x04
     2fe:	15 82       	std	Z+5, r1	; 0x05
     300:	16 82       	std	Z+6, r1	; 0x06
	}
	do	
	{
		bptr->data[bptr->curr_pos++] = sample;
     302:	d1 81       	ldd	r29, Z+1	; 0x01
     304:	f2 80       	ldd	r15, Z+2	; 0x02
     306:	43 81       	ldd	r20, Z+3	; 0x03
     308:	54 81       	ldd	r21, Z+4	; 0x04
     30a:	65 81       	ldd	r22, Z+5	; 0x05
     30c:	76 81       	ldd	r23, Z+6	; 0x06
		bptr->summ += sample;
     30e:	8c 01       	movw	r16, r24
     310:	20 e0       	ldi	r18, 0x00	; 0
     312:	30 e0       	ldi	r19, 0x00	; 0
		bptr->curr_pos = 0;
		bptr->summ = 0;
	}
	do	
	{
		bptr->data[bptr->curr_pos++] = sample;
     314:	c7 81       	ldd	r28, Z+7	; 0x07
     316:	ad 2f       	mov	r26, r29
     318:	bf 2d       	mov	r27, r15
     31a:	ac 0f       	add	r26, r28
     31c:	b1 1d       	adc	r27, r1
     31e:	ac 0f       	add	r26, r28
     320:	b1 1d       	adc	r27, r1
     322:	8d 93       	st	X+, r24
     324:	9c 93       	st	X, r25
     326:	cf 5f       	subi	r28, 0xFF	; 255
     328:	c7 83       	std	Z+7, r28	; 0x07
//---------------------------------------------//
//---------------------------------------------//
//---------------------------------------------//

// Ring buffer main function - add new data and update summ
void addToRingU16(RingBufU16_t* bptr, uint16_t sample)
     32a:	40 0f       	add	r20, r16
     32c:	51 1f       	adc	r21, r17
     32e:	62 1f       	adc	r22, r18
     330:	73 1f       	adc	r23, r19
	}
	do	
	{
		bptr->data[bptr->curr_pos++] = sample;
		bptr->summ += sample;
		if (bptr->curr_pos == bptr->length)	
     332:	a0 81       	ld	r26, Z
     334:	ca 13       	cpse	r28, r26
     336:	02 c0       	rjmp	.+4      	; 0x33c <addToRingU16+0x88>
		{	
			bptr->curr_pos = 0;	
     338:	17 82       	std	Z+7, r1	; 0x07
			bptr->stat = RNORM;
     33a:	10 86       	std	Z+8, r1	; 0x08
		}
	} 
	while (bptr->stat != RNORM);
     33c:	a0 85       	ldd	r26, Z+8	; 0x08
     33e:	a1 11       	cpse	r26, r1
     340:	e9 cf       	rjmp	.-46     	; 0x314 <addToRingU16+0x60>
     342:	43 83       	std	Z+3, r20	; 0x03
     344:	54 83       	std	Z+4, r21	; 0x04
     346:	65 83       	std	Z+5, r22	; 0x05
     348:	76 83       	std	Z+6, r23	; 0x06
}
     34a:	df 91       	pop	r29
     34c:	cf 91       	pop	r28
     34e:	1f 91       	pop	r17
     350:	0f 91       	pop	r16
     352:	ff 90       	pop	r15
     354:	08 95       	ret

00000356 <__vector_14>:




ISR(ADC_vect)
{
     356:	1f 92       	push	r1
     358:	0f 92       	push	r0
     35a:	0f b6       	in	r0, 0x3f	; 63
     35c:	0f 92       	push	r0
     35e:	11 24       	eor	r1, r1
     360:	2f 93       	push	r18
     362:	3f 93       	push	r19
     364:	4f 93       	push	r20
     366:	5f 93       	push	r21
     368:	6f 93       	push	r22
     36a:	7f 93       	push	r23
     36c:	8f 93       	push	r24
     36e:	9f 93       	push	r25
     370:	af 93       	push	r26
     372:	bf 93       	push	r27
     374:	ef 93       	push	r30
     376:	ff 93       	push	r31
	// Get new sample
	uint16_t new_sample = 1024 - ADC;	
     378:	84 b1       	in	r24, 0x04	; 4
     37a:	95 b1       	in	r25, 0x05	; 5
     37c:	60 e0       	ldi	r22, 0x00	; 0
     37e:	74 e0       	ldi	r23, 0x04	; 4
     380:	68 1b       	sub	r22, r24
     382:	79 0b       	sbc	r23, r25
	// Add new sample to the ring buffer
	addToRingU16(&ringBufADC, new_sample);
     384:	80 e6       	ldi	r24, 0x60	; 96
     386:	90 e0       	ldi	r25, 0x00	; 0
     388:	95 df       	rcall	.-214    	; 0x2b4 <addToRingU16>
}	
     38a:	ff 91       	pop	r31
     38c:	ef 91       	pop	r30
     38e:	bf 91       	pop	r27
     390:	af 91       	pop	r26
     392:	9f 91       	pop	r25
     394:	8f 91       	pop	r24
     396:	7f 91       	pop	r23
     398:	6f 91       	pop	r22
     39a:	5f 91       	pop	r21
     39c:	4f 91       	pop	r20
     39e:	3f 91       	pop	r19
     3a0:	2f 91       	pop	r18
     3a2:	0f 90       	pop	r0
     3a4:	0f be       	out	0x3f, r0	; 63
     3a6:	0f 90       	pop	r0
     3a8:	1f 90       	pop	r1
     3aa:	18 95       	reti

000003ac <getNormalizedRingU16>:
}

// Get ring buffer normalized value
uint16_t getNormalizedRingU16(RingBufU16_t* bptr)
{
	return 	bptr->summ / bptr->length;
     3ac:	fc 01       	movw	r30, r24
     3ae:	20 81       	ld	r18, Z
     3b0:	30 e0       	ldi	r19, 0x00	; 0
     3b2:	40 e0       	ldi	r20, 0x00	; 0
     3b4:	50 e0       	ldi	r21, 0x00	; 0
     3b6:	63 81       	ldd	r22, Z+3	; 0x03
     3b8:	74 81       	ldd	r23, Z+4	; 0x04
     3ba:	85 81       	ldd	r24, Z+5	; 0x05
     3bc:	96 81       	ldd	r25, Z+6	; 0x06
     3be:	31 db       	rcall	.-2462   	; 0xfffffa22 <__eeprom_end+0xff7efa18>
}
     3c0:	c9 01       	movw	r24, r18
     3c2:	08 95       	ret

000003c4 <process_buttons>:
	uint8_t raw_delayed_inv;
	static uint8_t press_timer = 0;
	uint8_t long_press_mask;
	uint8_t long_press_event_mask;
	
	raw_delayed = raw_current;
     3c4:	50 91 d4 00 	lds	r21, 0x00D4
	raw_delayed_inv = raw_current_inv;
     3c8:	30 91 69 00 	lds	r19, 0x0069
	raw_current = raw_button_state;
     3cc:	90 91 54 01 	lds	r25, 0x0154
     3d0:	90 93 d4 00 	sts	0x00D4, r25
	raw_current_inv = ~raw_current;
     3d4:	69 2f       	mov	r22, r25
     3d6:	60 95       	com	r22
     3d8:	60 93 69 00 	sts	0x0069, r22
	
	// Must be before press_timer update
	long_press_mask = (press_timer >= LONG_PRESS_DELAY) ? 0xFF : 0x00;
     3dc:	80 91 d5 00 	lds	r24, 0x00D5
     3e0:	8c 30       	cpi	r24, 0x0C	; 12
     3e2:	10 f0       	brcs	.+4      	; 0x3e8 <process_buttons+0x24>
     3e4:	2f ef       	ldi	r18, 0xFF	; 255
     3e6:	01 c0       	rjmp	.+2      	; 0x3ea <process_buttons+0x26>
     3e8:	20 e0       	ldi	r18, 0x00	; 0
	
	if (raw_delayed != raw_current)
     3ea:	59 17       	cp	r21, r25
     3ec:	19 f0       	breq	.+6      	; 0x3f4 <process_buttons+0x30>
	{
		press_timer = 0;
     3ee:	10 92 d5 00 	sts	0x00D5, r1
     3f2:	05 c0       	rjmp	.+10     	; 0x3fe <process_buttons+0x3a>
	}
	else if (press_timer <= LONG_PRESS_DELAY)
     3f4:	8d 30       	cpi	r24, 0x0D	; 13
     3f6:	18 f4       	brcc	.+6      	; 0x3fe <process_buttons+0x3a>
	{
		press_timer++;
     3f8:	8f 5f       	subi	r24, 0xFF	; 255
     3fa:	80 93 d5 00 	sts	0x00D5, r24
	}
	
	// Must after press_timer update
	long_press_event_mask = (press_timer == LONG_PRESS_DELAY) ? 0xFF : 0x00;
     3fe:	70 91 d5 00 	lds	r23, 0x00D5
     402:	7c 30       	cpi	r23, 0x0C	; 12
     404:	11 f4       	brne	.+4      	; 0x40a <process_buttons+0x46>
     406:	4f ef       	ldi	r20, 0xFF	; 255
     408:	01 c0       	rjmp	.+2      	; 0x40c <process_buttons+0x48>
     40a:	40 e0       	ldi	r20, 0x00	; 0
			
	button_action_down = raw_current & raw_delayed_inv;
     40c:	89 2f       	mov	r24, r25
     40e:	83 23       	and	r24, r19
     410:	80 93 d1 00 	sts	0x00D1, r24
			
	if (press_timer > REPEAT_DELAY)
     414:	77 30       	cpi	r23, 0x07	; 7
     416:	08 f0       	brcs	.+2      	; 0x41a <process_buttons+0x56>
		raw_delayed_inv |= 0xFF;
     418:	3f ef       	ldi	r19, 0xFF	; 255
	
	button_action_rep = raw_current & raw_delayed_inv;
     41a:	39 23       	and	r19, r25
     41c:	30 93 d0 00 	sts	0x00D0, r19
	
	button_action_up_short = raw_current_inv & raw_delayed & ~long_press_mask;
     420:	20 95       	com	r18
     422:	56 23       	and	r21, r22
     424:	25 23       	and	r18, r21
     426:	20 93 cf 00 	sts	0x00CF, r18
	//button_action_up_long  = raw_current_inv & raw_delayed & long_press_mask;
	button_action_long  = raw_current & long_press_event_mask;
     42a:	49 23       	and	r20, r25
     42c:	40 93 ce 00 	sts	0x00CE, r20
	
	// Compose button state
	button_state = (button_action_down & (BD_MENU | BD_UP | BD_DOWN | BD_ROTFWD | BD_ROTREV | BD_HEATCTRL | BD_CYCLE));
     430:	87 7f       	andi	r24, 0xF7	; 247
     432:	90 e0       	ldi	r25, 0x00	; 0
	if (button_action_up_short & BD_MENU)
     434:	20 ff       	sbrs	r18, 0
     436:	01 c0       	rjmp	.+2      	; 0x43a <process_buttons+0x76>
		button_state |= BS_MENU;
     438:	91 60       	ori	r25, 0x01	; 1
     43a:	90 93 d3 00 	sts	0x00D3, r25
     43e:	80 93 d2 00 	sts	0x00D2, r24
	//if (button_action_up_long & BD_MENU)
	if (button_action_long & BD_MENU)
     442:	40 ff       	sbrs	r20, 0
     444:	09 c0       	rjmp	.+18     	; 0x458 <process_buttons+0x94>
		button_state |= BL_MENU;
     446:	80 91 d2 00 	lds	r24, 0x00D2
     44a:	90 91 d3 00 	lds	r25, 0x00D3
     44e:	92 60       	ori	r25, 0x02	; 2
     450:	90 93 d3 00 	sts	0x00D3, r25
     454:	80 93 d2 00 	sts	0x00D2, r24
	if (button_action_rep & BD_UP)
     458:	31 ff       	sbrs	r19, 1
     45a:	09 c0       	rjmp	.+18     	; 0x46e <__stack+0xf>
		button_state |= BR_UP;	
     45c:	80 91 d2 00 	lds	r24, 0x00D2
     460:	90 91 d3 00 	lds	r25, 0x00D3
     464:	94 60       	ori	r25, 0x04	; 4
     466:	90 93 d3 00 	sts	0x00D3, r25
     46a:	80 93 d2 00 	sts	0x00D2, r24
	if (button_action_rep & BD_DOWN)
     46e:	32 ff       	sbrs	r19, 2
     470:	09 c0       	rjmp	.+18     	; 0x484 <__stack+0x25>
		button_state |= BR_DOWN;
     472:	80 91 d2 00 	lds	r24, 0x00D2
     476:	90 91 d3 00 	lds	r25, 0x00D3
     47a:	98 60       	ori	r25, 0x08	; 8
     47c:	90 93 d3 00 	sts	0x00D3, r25
     480:	80 93 d2 00 	sts	0x00D2, r24
     484:	08 95       	ret

00000486 <processRollControl>:
int16_t dbg_PID_output;


// Function to control motor rotation
void processRollControl(void)
{	
     486:	cf 93       	push	r28
//	static uint8_t beepMask = 0x00;
//	uint8_t nextBeepMask = 0xFF;
	static uint8_t force_rotate = 0;
	
	// Process auto power off control
	if (autoPowerOffState & AUTO_POFF_ACTIVE)
     488:	80 91 02 01 	lds	r24, 0x0102
     48c:	80 ff       	sbrs	r24, 0
     48e:	0f c0       	rjmp	.+30     	; 0x4ae <processRollControl+0x28>
	{
		stopCycleRolling(1);	
     490:	81 e0       	ldi	r24, 0x01	; 1
     492:	64 d8       	rcall	.-3896   	; 0xfffff55c <__eeprom_end+0xff7ef552>
		if (adc_celsius <= POFF_MOTOR_TRESHOLD)
     494:	80 91 1f 01 	lds	r24, 0x011F
     498:	90 91 20 01 	lds	r25, 0x0120
     49c:	c3 97       	sbiw	r24, 0x33	; 51
     49e:	08 f0       	brcs	.+2      	; 0x4a2 <processRollControl+0x1c>
     4a0:	5f c0       	rjmp	.+190    	; 0x560 <processRollControl+0xda>
		{
			force_rotate = ROLL_FWD;		// Default direction
     4a2:	81 e0       	ldi	r24, 0x01	; 1
     4a4:	80 93 d6 00 	sts	0x00D6, r24
			setMotorDirection(0);			// Stop the motor
     4a8:	80 e0       	ldi	r24, 0x00	; 0
     4aa:	37 d8       	rcall	.-3986   	; 0xfffff51a <__eeprom_end+0xff7ef510>
     4ac:	59 c0       	rjmp	.+178    	; 0x560 <processRollControl+0xda>
		}
	}
	else
	{
		// Control direction by buttons
		if (button_action_down & BD_ROTFWD)
     4ae:	80 91 d1 00 	lds	r24, 0x00D1
     4b2:	84 ff       	sbrs	r24, 4
     4b4:	04 c0       	rjmp	.+8      	; 0x4be <processRollControl+0x38>
		{
			setMotorDirection(ROLL_FWD);	
     4b6:	81 e0       	ldi	r24, 0x01	; 1
     4b8:	30 d8       	rcall	.-4000   	; 0xfffff51a <__eeprom_end+0xff7ef510>
			beepState |= 0x01;			// pressed FWD button
     4ba:	c1 e0       	ldi	r28, 0x01	; 1
     4bc:	13 c0       	rjmp	.+38     	; 0x4e4 <processRollControl+0x5e>
	//		nextBeepMask &= ~0x04;		// Disable CHANGED_DIR beep on next cycle
		}		
		else if (button_action_down & BD_ROTREV)
     4be:	85 ff       	sbrs	r24, 5
     4c0:	04 c0       	rjmp	.+8      	; 0x4ca <processRollControl+0x44>
		{
			setMotorDirection(ROLL_REV);
     4c2:	82 e0       	ldi	r24, 0x02	; 2
     4c4:	2a d8       	rcall	.-4012   	; 0xfffff51a <__eeprom_end+0xff7ef510>
			beepState |= 0x02;			// pressed REV button
     4c6:	c2 e0       	ldi	r28, 0x02	; 2
     4c8:	0d c0       	rjmp	.+26     	; 0x4e4 <processRollControl+0x5e>
	//		nextBeepMask &= ~0x04;		// Disable CHANGED_DIR beep on next cycle
		}		
		else if (button_action_long & BD_CYCLE)
     4ca:	80 91 ce 00 	lds	r24, 0x00CE
     4ce:	87 ff       	sbrs	r24, 7
     4d0:	04 c0       	rjmp	.+8      	; 0x4da <processRollControl+0x54>
		{
			stopCycleRolling(1);		// Reset points and disable CYCLE mode (if was enabled)
     4d2:	81 e0       	ldi	r24, 0x01	; 1
     4d4:	43 d8       	rcall	.-3962   	; 0xfffff55c <__eeprom_end+0xff7ef552>
			beepState |= 0x08;			// reset of points by long pressing of ROLL button
     4d6:	c8 e0       	ldi	r28, 0x08	; 8
     4d8:	05 c0       	rjmp	.+10     	; 0x4e4 <processRollControl+0x5e>
		}
		else if (force_rotate)
     4da:	80 91 d6 00 	lds	r24, 0x00D6
     4de:	81 11       	cpse	r24, r1
		{
			// Auto power off mode was exited by pressing some other button, not direction buttons
			// Start roll, but do not beep in this case
			setMotorDirection(force_rotate);
     4e0:	1c d8       	rcall	.-4040   	; 0xfffff51a <__eeprom_end+0xff7ef510>


// Function to control motor rotation
void processRollControl(void)
{	
	uint8_t beepState = 0;
     4e2:	c0 e0       	ldi	r28, 0x00	; 0
			// Auto power off mode was exited by pressing some other button, not direction buttons
			// Start roll, but do not beep in this case
			setMotorDirection(force_rotate);
	//		nextBeepMask &= ~0x04;		// Disable CHANGED_DIR beep on next cycle
		}
		force_rotate = 0;		// First normal pass will clear 
     4e4:	10 92 d6 00 	sts	0x00D6, r1
			
		if (button_action_up_short & BD_CYCLE)
     4e8:	80 91 cf 00 	lds	r24, 0x00CF
     4ec:	87 ff       	sbrs	r24, 7
     4ee:	0e c0       	rjmp	.+28     	; 0x50c <processRollControl+0x86>
		{
			if (rollState & ROLL_CYCLE)
     4f0:	80 91 f4 00 	lds	r24, 0x00F4
     4f4:	82 ff       	sbrs	r24, 2
     4f6:	04 c0       	rjmp	.+8      	; 0x500 <processRollControl+0x7a>
			{
				stopCycleRolling(0);
     4f8:	80 e0       	ldi	r24, 0x00	; 0
     4fa:	30 d8       	rcall	.-4000   	; 0xfffff55c <__eeprom_end+0xff7ef552>
				beepState |= 0x20;		// stopped cycle
     4fc:	c0 62       	ori	r28, 0x20	; 32
     4fe:	06 c0       	rjmp	.+12     	; 0x50c <processRollControl+0x86>
			}
			else if (startCycleRolling())
     500:	69 d8       	rcall	.-3886   	; 0xfffff5d4 <__eeprom_end+0xff7ef5ca>
     502:	88 23       	and	r24, r24
     504:	11 f0       	breq	.+4      	; 0x50a <processRollControl+0x84>
			{
				beepState |= 0x10;		// started cycle
     506:	c0 61       	ori	r28, 0x10	; 16
     508:	01 c0       	rjmp	.+2      	; 0x50c <processRollControl+0x86>
			}
			else
			{
				beepState |= 0x40;		// failed to start cycle
     50a:	c0 64       	ori	r28, 0x40	; 64
			}			
		}		
			
		if (rollState & ROLL_DIR_CHANGED)
     50c:	80 91 f4 00 	lds	r24, 0x00F4
     510:	85 ff       	sbrs	r24, 5
     512:	04 c0       	rjmp	.+8      	; 0x51c <processRollControl+0x96>
		{
			rollState &= ~ROLL_DIR_CHANGED;
     514:	8f 7d       	andi	r24, 0xDF	; 223
     516:	80 93 f4 00 	sts	0x00F4, r24
			beepState |= 0x04;	
     51a:	c4 60       	ori	r28, 0x04	; 4
		}
			
		if (rollState & CYCLE_ROLL_DONE)
     51c:	80 91 f4 00 	lds	r24, 0x00F4
     520:	84 ff       	sbrs	r24, 4
     522:	04 c0       	rjmp	.+8      	; 0x52c <processRollControl+0xa6>
		{
			rollState &= ~CYCLE_ROLL_DONE;
     524:	8f 7e       	andi	r24, 0xEF	; 239
     526:	80 93 f4 00 	sts	0x00F4, r24
			beepState |= 0x80;	
     52a:	c0 68       	ori	r28, 0x80	; 128
		}		
			
		//beepState &= beepMask;
			
		if (beepState & 0x80)		// Roll cycle done
     52c:	c7 ff       	sbrs	r28, 7
     52e:	06 c0       	rjmp	.+12     	; 0x53c <processRollControl+0xb6>
		{
			SetBeeperFreq(1000);
     530:	88 ee       	ldi	r24, 0xE8	; 232
     532:	93 e0       	ldi	r25, 0x03	; 3
     534:	ab d9       	rcall	.-3242   	; 0xfffff88c <__eeprom_end+0xff7ef882>
			StartBeep(200);
     536:	88 ec       	ldi	r24, 0xC8	; 200
     538:	90 e0       	ldi	r25, 0x00	; 0
     53a:	11 c0       	rjmp	.+34     	; 0x55e <processRollControl+0xd8>
		}		
		else if (beepState & 0x40)	// Roll cycle start fail
     53c:	c6 ff       	sbrs	r28, 6
     53e:	03 c0       	rjmp	.+6      	; 0x546 <processRollControl+0xc0>
		{
			SetBeeperFreq(500);
     540:	84 ef       	ldi	r24, 0xF4	; 244
     542:	91 e0       	ldi	r25, 0x01	; 1
     544:	09 c0       	rjmp	.+18     	; 0x558 <processRollControl+0xd2>
			StartBeep(50);
		} 
		else if (beepState & 0x08)	// Reset points
     546:	c3 ff       	sbrs	r28, 3
     548:	03 c0       	rjmp	.+6      	; 0x550 <processRollControl+0xca>
		{
			SetBeeperFreq(800);
     54a:	80 e2       	ldi	r24, 0x20	; 32
     54c:	93 e0       	ldi	r25, 0x03	; 3
     54e:	04 c0       	rjmp	.+8      	; 0x558 <processRollControl+0xd2>
			StartBeep(50);
		}							// Other
		else if ( beepState & (0x01 | 0x02 | 0x10 | 0x20 | 0x04) )
     550:	c7 73       	andi	r28, 0x37	; 55
     552:	31 f0       	breq	.+12     	; 0x560 <processRollControl+0xda>
		{
			SetBeeperFreq(1000);
     554:	88 ee       	ldi	r24, 0xE8	; 232
     556:	93 e0       	ldi	r25, 0x03	; 3
     558:	99 d9       	rcall	.-3278   	; 0xfffff88c <__eeprom_end+0xff7ef882>
			StartBeep(50);	
     55a:	82 e3       	ldi	r24, 0x32	; 50
     55c:	90 e0       	ldi	r25, 0x00	; 0
     55e:	b6 d9       	rcall	.-3220   	; 0xfffff8cc <__eeprom_end+0xff7ef8c2>
		// Apply mask to next sound events
		//beepMask = nextBeepMask;	
	}

	// Indicate direction by LEDs
	clearExtraLeds(LED_ROTFWD | LED_ROTREV);
     560:	80 e3       	ldi	r24, 0x30	; 48
     562:	de d2       	rcall	.+1468   	; 0xb20 <clearExtraLeds>
	if (rollState & ROLL_FWD)
     564:	80 91 f4 00 	lds	r24, 0x00F4
     568:	80 ff       	sbrs	r24, 0
     56a:	02 c0       	rjmp	.+4      	; 0x570 <processRollControl+0xea>
		setExtraLeds(LED_ROTFWD);
     56c:	80 e1       	ldi	r24, 0x10	; 16
     56e:	03 c0       	rjmp	.+6      	; 0x576 <processRollControl+0xf0>
	else if (rollState & ROLL_REV)
     570:	81 ff       	sbrs	r24, 1
     572:	03 c0       	rjmp	.+6      	; 0x57a <processRollControl+0xf4>
		setExtraLeds(LED_ROTREV);
     574:	80 e2       	ldi	r24, 0x20	; 32
}
     576:	cf 91       	pop	r28
	// Indicate direction by LEDs
	clearExtraLeds(LED_ROTFWD | LED_ROTREV);
	if (rollState & ROLL_FWD)
		setExtraLeds(LED_ROTFWD);
	else if (rollState & ROLL_REV)
		setExtraLeds(LED_ROTREV);
     578:	cd c2       	rjmp	.+1434   	; 0xb14 <setExtraLeds>
}
     57a:	cf 91       	pop	r28
     57c:	08 95       	ret

0000057e <processPID>:




uint8_t processPID(uint16_t setPoint, uint16_t processValue)
{
     57e:	0f 93       	push	r16
     580:	1f 93       	push	r17
     582:	cf 93       	push	r28
     584:	df 93       	push	r29
	int16_t error, p_term, i_term, d_term, temp;
	static uint16_t lastProcessValue;
	static int16_t integAcc = 0;
	
	error = setPoint - processValue;
     586:	86 1b       	sub	r24, r22
     588:	97 0b       	sbc	r25, r23
	
	
	//------ Calculate P term --------//
	if (error > 20)
     58a:	85 31       	cpi	r24, 0x15	; 21
     58c:	91 05       	cpc	r25, r1
     58e:	5c f4       	brge	.+22     	; 0x5a6 <processPID+0x28>
	{
		p_term = 1000;
	}
	else if (error < -20)
     590:	8c 3e       	cpi	r24, 0xEC	; 236
     592:	2f ef       	ldi	r18, 0xFF	; 255
     594:	92 07       	cpc	r25, r18
     596:	54 f0       	brlt	.+20     	; 0x5ac <processPID+0x2e>
	{
		p_term = -1000;
	}
	else
	{
		p_term = error * Kp;
     598:	2f e0       	ldi	r18, 0x0F	; 15
     59a:	28 9f       	mul	r18, r24
     59c:	e0 01       	movw	r28, r0
     59e:	29 9f       	mul	r18, r25
     5a0:	d0 0d       	add	r29, r0
     5a2:	11 24       	eor	r1, r1
     5a4:	05 c0       	rjmp	.+10     	; 0x5b0 <processPID+0x32>
	
	
	//------ Calculate P term --------//
	if (error > 20)
	{
		p_term = 1000;
     5a6:	c8 ee       	ldi	r28, 0xE8	; 232
     5a8:	d3 e0       	ldi	r29, 0x03	; 3
     5aa:	02 c0       	rjmp	.+4      	; 0x5b0 <processPID+0x32>
	}
	else if (error < -20)
	{
		p_term = -1000;
     5ac:	c8 e1       	ldi	r28, 0x18	; 24
     5ae:	dc ef       	ldi	r29, 0xFC	; 252
	{
		p_term = error * Kp;
	}
	
	//------ Calculate I term --------//
	integAcc += error;
     5b0:	20 91 db 00 	lds	r18, 0x00DB
     5b4:	30 91 dc 00 	lds	r19, 0x00DC
	if (error <= 0)
     5b8:	18 16       	cp	r1, r24
     5ba:	19 06       	cpc	r1, r25
     5bc:	0c f0       	brlt	.+2      	; 0x5c0 <processPID+0x42>
     5be:	0f c0       	rjmp	.+30     	; 0x5de <processPID+0x60>
	{
		p_term = error * Kp;
	}
	
	//------ Calculate I term --------//
	integAcc += error;
     5c0:	82 0f       	add	r24, r18
     5c2:	93 1f       	adc	r25, r19
	if (error <= 0)
	{
		integAcc = 0;
	}
	else if (integAcc > 10)
     5c4:	8b 30       	cpi	r24, 0x0B	; 11
     5c6:	91 05       	cpc	r25, r1
     5c8:	1c f0       	brlt	.+6      	; 0x5d0 <processPID+0x52>
	{
		integAcc = 10;
     5ca:	8a e0       	ldi	r24, 0x0A	; 10
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	02 c0       	rjmp	.+4      	; 0x5d4 <processPID+0x56>
	}
	else if (integAcc < 0)
     5d0:	97 fd       	sbrc	r25, 7
     5d2:	05 c0       	rjmp	.+10     	; 0x5de <processPID+0x60>
	{
		p_term = error * Kp;
	}
	
	//------ Calculate I term --------//
	integAcc += error;
     5d4:	90 93 dc 00 	sts	0x00DC, r25
     5d8:	80 93 db 00 	sts	0x00DB, r24
     5dc:	04 c0       	rjmp	.+8      	; 0x5e6 <processPID+0x68>
	{
		integAcc = 10;
	}
	else if (integAcc < 0)
	{
		integAcc = 0;
     5de:	10 92 dc 00 	sts	0x00DC, r1
     5e2:	10 92 db 00 	sts	0x00DB, r1
	}
	i_term = integAcc * Ki;
     5e6:	80 91 db 00 	lds	r24, 0x00DB
     5ea:	90 91 dc 00 	lds	r25, 0x00DC
     5ee:	2f e0       	ldi	r18, 0x0F	; 15
     5f0:	28 9f       	mul	r18, r24
     5f2:	80 01       	movw	r16, r0
     5f4:	29 9f       	mul	r18, r25
     5f6:	10 0d       	add	r17, r0
     5f8:	11 24       	eor	r1, r1
	//------ Calculate D term --------//
	//lastProcessValue = getNormalizedRingU16(&ringBufDterm);
	//addToRingU16(&ringBufDterm, processValue);
	//d_term = Kd * ((int16_t)(lastProcessValue - processValue));
	
	lastProcessValue = ringBufDterm.summ;
     5fa:	80 91 6d 00 	lds	r24, 0x006D
     5fe:	90 91 6e 00 	lds	r25, 0x006E
     602:	90 93 de 00 	sts	0x00DE, r25
     606:	80 93 dd 00 	sts	0x00DD, r24
	addToRingU16(&ringBufDterm, processValue);
     60a:	8a e6       	ldi	r24, 0x6A	; 106
     60c:	90 e0       	ldi	r25, 0x00	; 0
     60e:	52 de       	rcall	.-860    	; 0x2b4 <addToRingU16>
	processValue = ringBufDterm.summ;
	d_term = Kd * ((int16_t)(lastProcessValue - processValue));
     610:	80 91 dd 00 	lds	r24, 0x00DD
     614:	90 91 de 00 	lds	r25, 0x00DE
     618:	20 91 6d 00 	lds	r18, 0x006D
     61c:	30 91 6e 00 	lds	r19, 0x006E
     620:	82 1b       	sub	r24, r18
     622:	93 0b       	sbc	r25, r19
     624:	40 e5       	ldi	r20, 0x50	; 80
     626:	48 9f       	mul	r20, r24
     628:	90 01       	movw	r18, r0
     62a:	49 9f       	mul	r20, r25
     62c:	30 0d       	add	r19, r0
     62e:	11 24       	eor	r1, r1
	
	//--------- Summ terms -----------//
	temp = (p_term + i_term + d_term) / SCALING_FACTOR;
     630:	ce 01       	movw	r24, r28
     632:	80 0f       	add	r24, r16
     634:	91 1f       	adc	r25, r17
     636:	82 0f       	add	r24, r18
     638:	93 1f       	adc	r25, r19
     63a:	65 e0       	ldi	r22, 0x05	; 5
     63c:	70 e0       	ldi	r23, 0x00	; 0
     63e:	de d9       	rcall	.-3140   	; 0xfffff9fc <__eeprom_end+0xff7ef9f2>
     640:	cb 01       	movw	r24, r22
     642:	77 ff       	sbrs	r23, 7
     644:	02 c0       	rjmp	.+4      	; 0x64a <processPID+0xcc>
     646:	80 e0       	ldi	r24, 0x00	; 0
     648:	90 e0       	ldi	r25, 0x00	; 0
     64a:	83 33       	cpi	r24, 0x33	; 51
     64c:	91 05       	cpc	r25, r1
     64e:	14 f0       	brlt	.+4      	; 0x654 <processPID+0xd6>
     650:	82 e3       	ldi	r24, 0x32	; 50
     652:	90 e0       	ldi	r25, 0x00	; 0
		temp = 0;
	}
	
	
	//------- Debug --------//
	dbg_PID_p_term = p_term;
     654:	d0 93 26 01 	sts	0x0126, r29
     658:	c0 93 25 01 	sts	0x0125, r28
	dbg_PID_d_term = d_term;
     65c:	30 93 38 01 	sts	0x0138, r19
     660:	20 93 37 01 	sts	0x0137, r18
	dbg_PID_i_term = i_term;
     664:	10 93 2d 01 	sts	0x012D, r17
     668:	00 93 2c 01 	sts	0x012C, r16
	dbg_PID_output = temp;
     66c:	90 93 23 01 	sts	0x0123, r25
     670:	80 93 22 01 	sts	0x0122, r24
	
	
	return temp;
	
}
     674:	df 91       	pop	r29
     676:	cf 91       	pop	r28
     678:	1f 91       	pop	r17
     67a:	0f 91       	pop	r16
     67c:	08 95       	ret

0000067e <processHeaterControl>:
	static uint16_t set_value_adc;		// static for debug
	static uint16_t pid_output;			// static for debug
	
	
	// Process heater ON/OFF control by button
	if (button_state & BD_HEATCTRL)
     67e:	80 91 d2 00 	lds	r24, 0x00D2
     682:	86 ff       	sbrs	r24, 6
     684:	07 c0       	rjmp	.+14     	; 0x694 <processHeaterControl+0x16>
	{
		heaterState ^= HEATER_ENABLED;
     686:	80 91 f6 00 	lds	r24, 0x00F6
     68a:	91 e0       	ldi	r25, 0x01	; 1
     68c:	89 27       	eor	r24, r25
     68e:	80 93 f6 00 	sts	0x00F6, r24
		// Make heater controller set update flag on next call
		forceHeaterControlUpdate();
     692:	36 d7       	rcall	.+3692   	; 0x1500 <forceHeaterControlUpdate>
	}
	
	// Process auto power off control
	if (autoPowerOffState & AUTO_POFF_ACTIVE)
     694:	80 91 02 01 	lds	r24, 0x0102
     698:	80 ff       	sbrs	r24, 0
     69a:	05 c0       	rjmp	.+10     	; 0x6a6 <processHeaterControl+0x28>
	{
		heaterState &= ~HEATER_ENABLED;
     69c:	80 91 f6 00 	lds	r24, 0x00F6
     6a0:	8e 7f       	andi	r24, 0xFE	; 254
     6a2:	80 93 f6 00 	sts	0x00F6, r24
	}		
	
	
	// Check if heater control should be updated
	// PID call interval is a multiple of AC line periods, computed as HEATER_REGULATION_PERIODS * 20ms
	if (heaterState & READY_TO_UPDATE_HEATER)
     6a6:	80 91 f6 00 	lds	r24, 0x00F6
     6aa:	87 ff       	sbrs	r24, 7
     6ac:	18 c0       	rjmp	.+48     	; 0x6de <processHeaterControl+0x60>
	{
		// Convert temperature setup to equal ADC value
		set_value_adc = conv_Celsius_to_ADC(setup_temp_value);					
     6ae:	80 91 29 01 	lds	r24, 0x0129
     6b2:	90 91 2a 01 	lds	r25, 0x012A
     6b6:	75 dd       	rcall	.-1302   	; 0x1a2 <conv_Celsius_to_ADC>
     6b8:	90 93 d8 00 	sts	0x00D8, r25
     6bc:	80 93 d7 00 	sts	0x00D7, r24
		// Process PID
		pid_output = processPID(set_value_adc,PIDsampledADC);
     6c0:	60 91 07 01 	lds	r22, 0x0107
     6c4:	70 91 08 01 	lds	r23, 0x0108
     6c8:	5a df       	rcall	.-332    	; 0x57e <processPID>
     6ca:	80 93 d9 00 	sts	0x00D9, r24
     6ce:	10 92 da 00 	sts	0x00DA, r1
			
		// Heater control is updated only when flag is set, even if heater must be powered OFF
		if (heaterState & HEATER_ENABLED)
     6d2:	90 91 f6 00 	lds	r25, 0x00F6
     6d6:	90 fd       	sbrc	r25, 0
     6d8:	01 c0       	rjmp	.+2      	; 0x6dc <processHeaterControl+0x5e>
			setHeaterControl(pid_output);	// Flag is cleared automatically
		else
			setHeaterControl(0);
     6da:	80 e0       	ldi	r24, 0x00	; 0
     6dc:	03 d7       	rcall	.+3590   	; 0x14e4 <setHeaterControl>
	}	
		
	
	//------- Debug --------//
	if (heaterState & HEATER_ENABLED)
     6de:	80 91 f6 00 	lds	r24, 0x00F6
     6e2:	80 ff       	sbrs	r24, 0
     6e4:	0f c0       	rjmp	.+30     	; 0x704 <processHeaterControl+0x86>
	{
		setExtraLeds(LED_HEATER);
     6e6:	80 e4       	ldi	r24, 0x40	; 64
     6e8:	15 d2       	rcall	.+1066   	; 0xb14 <setExtraLeds>
		dbg_SetTempCelsius = setup_temp_value;
     6ea:	80 91 29 01 	lds	r24, 0x0129
     6ee:	80 93 24 01 	sts	0x0124, r24
		dbg_SetTempPID = set_value_adc;
     6f2:	80 91 d7 00 	lds	r24, 0x00D7
     6f6:	90 91 d8 00 	lds	r25, 0x00D8
     6fa:	90 93 40 01 	sts	0x0140, r25
     6fe:	80 93 3f 01 	sts	0x013F, r24
     702:	08 c0       	rjmp	.+16     	; 0x714 <processHeaterControl+0x96>
	}
	else
	{
		dbg_SetTempCelsius = 0;
     704:	10 92 24 01 	sts	0x0124, r1
		dbg_SetTempPID = 0;
     708:	10 92 40 01 	sts	0x0140, r1
     70c:	10 92 3f 01 	sts	0x013F, r1
		clearExtraLeds(LED_HEATER);
     710:	80 e4       	ldi	r24, 0x40	; 64
     712:	06 d2       	rcall	.+1036   	; 0xb20 <clearExtraLeds>
	}
	
	dbg_RealTempCelsius = conv_ADC_to_Celsius(PIDsampledADC);
     714:	80 91 07 01 	lds	r24, 0x0107
     718:	90 91 08 01 	lds	r25, 0x0108
     71c:	21 dd       	rcall	.-1470   	; 0x160 <conv_ADC_to_Celsius>
     71e:	80 93 3c 01 	sts	0x013C, r24
	dbg_RealTempPID = PIDsampledADC;
     722:	80 91 07 01 	lds	r24, 0x0107
     726:	90 91 08 01 	lds	r25, 0x0108
     72a:	90 93 28 01 	sts	0x0128, r25
     72e:	80 93 27 01 	sts	0x0127, r24
     732:	08 95       	ret

00000734 <processHeaterAlerts>:
void processHeaterAlerts(void)
{
	static uint8_t tempAlertRange = TEMP_ALERT_RANGE;
	
	// Indicate reaching of desired temperature
	if ( (adc_celsius > setup_temp_value - tempAlertRange) && (adc_celsius < setup_temp_value + tempAlertRange) )
     734:	80 91 1f 01 	lds	r24, 0x011F
     738:	90 91 20 01 	lds	r25, 0x0120
     73c:	20 91 29 01 	lds	r18, 0x0129
     740:	30 91 2a 01 	lds	r19, 0x012A
     744:	e0 91 73 00 	lds	r30, 0x0073
     748:	4e 2f       	mov	r20, r30
     74a:	50 e0       	ldi	r21, 0x00	; 0
     74c:	b9 01       	movw	r22, r18
     74e:	64 1b       	sub	r22, r20
     750:	75 0b       	sbc	r23, r21
     752:	68 17       	cp	r22, r24
     754:	79 07       	cpc	r23, r25
     756:	98 f4       	brcc	.+38     	; 0x77e <processHeaterAlerts+0x4a>
     758:	24 0f       	add	r18, r20
     75a:	35 1f       	adc	r19, r21
     75c:	82 17       	cp	r24, r18
     75e:	93 07       	cpc	r25, r19
     760:	70 f4       	brcc	.+28     	; 0x77e <processHeaterAlerts+0x4a>
	{
		if ((tempAlertRange == TEMP_ALERT_RANGE) && (heaterState & HEATER_ENABLED))
     762:	e5 30       	cpi	r30, 0x05	; 5
     764:	51 f4       	brne	.+20     	; 0x77a <processHeaterAlerts+0x46>
     766:	80 91 f6 00 	lds	r24, 0x00F6
     76a:	80 ff       	sbrs	r24, 0
     76c:	06 c0       	rjmp	.+12     	; 0x77a <processHeaterAlerts+0x46>
		{
			SetBeeperFreq(1000);
     76e:	88 ee       	ldi	r24, 0xE8	; 232
     770:	93 e0       	ldi	r25, 0x03	; 3
     772:	8c d8       	rcall	.-3816   	; 0xfffff88c <__eeprom_end+0xff7ef882>
			StartBeep(400);
     774:	80 e9       	ldi	r24, 0x90	; 144
     776:	91 e0       	ldi	r25, 0x01	; 1
     778:	a9 d8       	rcall	.-3758   	; 0xfffff8cc <__eeprom_end+0xff7ef8c2>
		}
		// Add some hysteresis
		tempAlertRange = TEMP_ALERT_RANGE + TEMP_ALERT_HYST;
     77a:	8a e0       	ldi	r24, 0x0A	; 10
     77c:	01 c0       	rjmp	.+2      	; 0x780 <processHeaterAlerts+0x4c>
	}			
	else
	{
		tempAlertRange = TEMP_ALERT_RANGE;
     77e:	85 e0       	ldi	r24, 0x05	; 5
     780:	80 93 73 00 	sts	0x0073, r24
     784:	08 95       	ret

00000786 <restoreGlobalParams>:

}


void restoreGlobalParams(void)
{
     786:	cf 93       	push	r28
     788:	df 93       	push	r29
     78a:	cd b7       	in	r28, 0x3d	; 61
     78c:	de b7       	in	r29, 0x3e	; 62
     78e:	2a 97       	sbiw	r28, 0x0a	; 10
     790:	0f b6       	in	r0, 0x3f	; 63
     792:	f8 94       	cli
     794:	de bf       	out	0x3e, r29	; 62
     796:	0f be       	out	0x3f, r0	; 63
     798:	cd bf       	out	0x3d, r28	; 61
	 gParams_t gParams;
	 eeprom_read_block(&gParams,&nvParams,sizeof(nvParams));
     79a:	4a e0       	ldi	r20, 0x0A	; 10
     79c:	50 e0       	ldi	r21, 0x00	; 0
     79e:	60 e0       	ldi	r22, 0x00	; 0
     7a0:	70 e0       	ldi	r23, 0x00	; 0
     7a2:	ce 01       	movw	r24, r28
     7a4:	01 96       	adiw	r24, 0x01	; 1
     7a6:	96 d9       	rcall	.-3284   	; 0xfffffad4 <__eeprom_end+0xff7efaca>
	 setup_temp_value = gParams.setup_temp_value;	// reference temperature
     7a8:	89 81       	ldd	r24, Y+1	; 0x01
     7aa:	80 93 29 01 	sts	0x0129, r24
     7ae:	10 92 2a 01 	sts	0x012A, r1
	 rollCycleSet = gParams.rollCycleSet;			// number of rolling cycles
     7b2:	8a 81       	ldd	r24, Y+2	; 0x02
     7b4:	80 93 2e 01 	sts	0x012E, r24
	 sound_enable = gParams.sound_enable;			// Global sound enable
     7b8:	8b 81       	ldd	r24, Y+3	; 0x03
     7ba:	80 93 2b 01 	sts	0x012B, r24
	 power_off_timeout = gParams.power_off_timeout;	// Auto power OFF timeout, minutes
     7be:	8c 81       	ldd	r24, Y+4	; 0x04
     7c0:	80 93 3b 01 	sts	0x013B, r24
	 cpoint1 = gParams.cpoint1;						// Calibration point 1
     7c4:	8d 81       	ldd	r24, Y+5	; 0x05
     7c6:	80 93 21 01 	sts	0x0121, r24
	 cpoint2 = gParams.cpoint2;						// Calibration point 2
     7ca:	8e 81       	ldd	r24, Y+6	; 0x06
     7cc:	80 93 41 01 	sts	0x0141, r24
	 cpoint1_adc = gParams.cpoint1_adc;
     7d0:	8f 81       	ldd	r24, Y+7	; 0x07
     7d2:	98 85       	ldd	r25, Y+8	; 0x08
     7d4:	90 93 3a 01 	sts	0x013A, r25
     7d8:	80 93 39 01 	sts	0x0139, r24
	 cpoint2_adc = gParams.cpoint2_adc;
     7dc:	89 85       	ldd	r24, Y+9	; 0x09
     7de:	9a 85       	ldd	r25, Y+10	; 0x0a
     7e0:	90 93 3e 01 	sts	0x013E, r25
     7e4:	80 93 3d 01 	sts	0x013D, r24
//	 cpoint1 		= 25;		// TODO: check and remove
//	 cpoint1_adc 	= 164;
//	 cpoint2 		= 145;
//	 cpoint2_adc 	= 433;
	 
}
     7e8:	2a 96       	adiw	r28, 0x0a	; 10
     7ea:	0f b6       	in	r0, 0x3f	; 63
     7ec:	f8 94       	cli
     7ee:	de bf       	out	0x3e, r29	; 62
     7f0:	0f be       	out	0x3f, r0	; 63
     7f2:	cd bf       	out	0x3d, r28	; 61
     7f4:	df 91       	pop	r29
     7f6:	cf 91       	pop	r28
     7f8:	08 95       	ret

000007fa <exitPowerOff>:




void exitPowerOff(void)
{
     7fa:	08 95       	ret

000007fc <decode_led_char>:
// Decodes normal string literal to the 
//	7-segment representation
//---------------------------------------------//
static uint8_t decode_led_char(char c)
{
	switch(c)
     7fc:	88 33       	cpi	r24, 0x38	; 56
     7fe:	09 f4       	brne	.+2      	; 0x802 <decode_led_char+0x6>
     800:	52 c0       	rjmp	.+164    	; 0x8a6 <decode_led_char+0xaa>
     802:	18 f5       	brcc	.+70     	; 0x84a <decode_led_char+0x4e>
     804:	81 33       	cpi	r24, 0x31	; 49
     806:	09 f4       	brne	.+2      	; 0x80a <decode_led_char+0xe>
     808:	6a c0       	rjmp	.+212    	; 0x8de <decode_led_char+0xe2>
     80a:	90 f4       	brcc	.+36     	; 0x830 <decode_led_char+0x34>
     80c:	8d 32       	cpi	r24, 0x2D	; 45
     80e:	09 f4       	brne	.+2      	; 0x812 <decode_led_char+0x16>
     810:	50 c0       	rjmp	.+160    	; 0x8b2 <decode_led_char+0xb6>
     812:	38 f4       	brcc	.+14     	; 0x822 <decode_led_char+0x26>
     814:	80 32       	cpi	r24, 0x20	; 32
     816:	09 f4       	brne	.+2      	; 0x81a <decode_led_char+0x1e>
     818:	50 c0       	rjmp	.+160    	; 0x8ba <decode_led_char+0xbe>
     81a:	8c 32       	cpi	r24, 0x2C	; 44
     81c:	09 f0       	breq	.+2      	; 0x820 <decode_led_char+0x24>
     81e:	60 c0       	rjmp	.+192    	; 0x8e0 <decode_led_char+0xe4>
     820:	46 c0       	rjmp	.+140    	; 0x8ae <decode_led_char+0xb2>
     822:	8e 32       	cpi	r24, 0x2E	; 46
     824:	09 f4       	brne	.+2      	; 0x828 <decode_led_char+0x2c>
     826:	43 c0       	rjmp	.+134    	; 0x8ae <decode_led_char+0xb2>
     828:	80 33       	cpi	r24, 0x30	; 48
     82a:	09 f0       	breq	.+2      	; 0x82e <decode_led_char+0x32>
     82c:	59 c0       	rjmp	.+178    	; 0x8e0 <decode_led_char+0xe4>
     82e:	2d c0       	rjmp	.+90     	; 0x88a <decode_led_char+0x8e>
     830:	84 33       	cpi	r24, 0x34	; 52
     832:	89 f1       	breq	.+98     	; 0x896 <decode_led_char+0x9a>
     834:	30 f4       	brcc	.+12     	; 0x842 <decode_led_char+0x46>
     836:	82 33       	cpi	r24, 0x32	; 50
     838:	51 f1       	breq	.+84     	; 0x88e <decode_led_char+0x92>
     83a:	83 33       	cpi	r24, 0x33	; 51
     83c:	09 f0       	breq	.+2      	; 0x840 <decode_led_char+0x44>
     83e:	50 c0       	rjmp	.+160    	; 0x8e0 <decode_led_char+0xe4>
     840:	28 c0       	rjmp	.+80     	; 0x892 <decode_led_char+0x96>
     842:	86 33       	cpi	r24, 0x36	; 54
     844:	61 f1       	breq	.+88     	; 0x89e <decode_led_char+0xa2>
     846:	68 f5       	brcc	.+90     	; 0x8a2 <decode_led_char+0xa6>
     848:	28 c0       	rjmp	.+80     	; 0x89a <decode_led_char+0x9e>
     84a:	8e 34       	cpi	r24, 0x4E	; 78
     84c:	f1 f1       	breq	.+124    	; 0x8ca <decode_led_char+0xce>
     84e:	70 f4       	brcc	.+28     	; 0x86c <decode_led_char+0x70>
     850:	84 34       	cpi	r24, 0x44	; 68
     852:	e9 f1       	breq	.+122    	; 0x8ce <decode_led_char+0xd2>
     854:	30 f4       	brcc	.+12     	; 0x862 <decode_led_char+0x66>
     856:	89 33       	cpi	r24, 0x39	; 57
     858:	41 f1       	breq	.+80     	; 0x8aa <decode_led_char+0xae>
     85a:	83 34       	cpi	r24, 0x43	; 67
     85c:	09 f0       	breq	.+2      	; 0x860 <decode_led_char+0x64>
     85e:	40 c0       	rjmp	.+128    	; 0x8e0 <decode_led_char+0xe4>
     860:	30 c0       	rjmp	.+96     	; 0x8c2 <decode_led_char+0xc6>
     862:	85 34       	cpi	r24, 0x45	; 69
     864:	c1 f1       	breq	.+112    	; 0x8d6 <decode_led_char+0xda>
     866:	86 34       	cpi	r24, 0x46	; 70
     868:	d9 f5       	brne	.+118    	; 0x8e0 <decode_led_char+0xe4>
     86a:	2d c0       	rjmp	.+90     	; 0x8c6 <decode_led_char+0xca>
     86c:	82 35       	cpi	r24, 0x52	; 82
     86e:	a9 f1       	breq	.+106    	; 0x8da <decode_led_char+0xde>
     870:	28 f4       	brcc	.+10     	; 0x87c <decode_led_char+0x80>
     872:	8f 34       	cpi	r24, 0x4F	; 79
     874:	51 f0       	breq	.+20     	; 0x88a <decode_led_char+0x8e>
     876:	80 35       	cpi	r24, 0x50	; 80
     878:	99 f5       	brne	.+102    	; 0x8e0 <decode_led_char+0xe4>
     87a:	2b c0       	rjmp	.+86     	; 0x8d2 <decode_led_char+0xd6>
     87c:	8f 35       	cpi	r24, 0x5F	; 95
     87e:	d9 f0       	breq	.+54     	; 0x8b6 <decode_led_char+0xba>
     880:	80 3b       	cpi	r24, 0xB0	; 176
     882:	e9 f0       	breq	.+58     	; 0x8be <decode_led_char+0xc2>
     884:	83 35       	cpi	r24, 0x53	; 83
     886:	61 f5       	brne	.+88     	; 0x8e0 <decode_led_char+0xe4>
     888:	08 c0       	rjmp	.+16     	; 0x89a <decode_led_char+0x9e>
	{
		case 'O':
		case '0': return (SEGA | SEGB | SEGC | SEGD | SEGE | SEGF);
     88a:	8f e3       	ldi	r24, 0x3F	; 63
     88c:	08 95       	ret
		case '1': return (SEGB | SEGC );
		case '2': return (SEGA | SEGB | SEGD | SEGE | SEGG);
     88e:	8b e5       	ldi	r24, 0x5B	; 91
     890:	08 95       	ret
		case '3': return (SEGA | SEGB | SEGC | SEGD | SEGG);
     892:	8f e4       	ldi	r24, 0x4F	; 79
     894:	08 95       	ret
		case '4': return (SEGB | SEGC | SEGF | SEGG);
     896:	86 e6       	ldi	r24, 0x66	; 102
     898:	08 95       	ret
		case 'S':
		case '5': return (SEGA | SEGC | SEGD | SEGF | SEGG);
     89a:	8d e6       	ldi	r24, 0x6D	; 109
     89c:	08 95       	ret
		case '6': return (SEGA | SEGC | SEGD | SEGE | SEGF | SEGG);
     89e:	8d e7       	ldi	r24, 0x7D	; 125
     8a0:	08 95       	ret
		case '7': return (SEGA | SEGB | SEGC );
     8a2:	87 e0       	ldi	r24, 0x07	; 7
     8a4:	08 95       	ret
		case '8': return (SEGA | SEGB | SEGC | SEGD | SEGE | SEGF | SEGG);
     8a6:	8f e7       	ldi	r24, 0x7F	; 127
     8a8:	08 95       	ret
		case '9': return (SEGA | SEGB | SEGC | SEGD | SEGF | SEGG);
     8aa:	8f e6       	ldi	r24, 0x6F	; 111
     8ac:	08 95       	ret
		case '.': return (SEGH);
		case ',': return (SEGH);
     8ae:	80 e8       	ldi	r24, 0x80	; 128
     8b0:	08 95       	ret
		case '-': return (SEGG);
     8b2:	80 e4       	ldi	r24, 0x40	; 64
     8b4:	08 95       	ret
		case '_': return (SEGD);
     8b6:	88 e0       	ldi	r24, 0x08	; 8
     8b8:	08 95       	ret
		case ' ': return 0;
     8ba:	80 e0       	ldi	r24, 0x00	; 0
     8bc:	08 95       	ret
		case 0xB0:	return (SEGA | SEGB | SEGF | SEGG);		// Degree sin
     8be:	83 e6       	ldi	r24, 0x63	; 99
     8c0:	08 95       	ret
		case 'C':	return (SEGA | SEGD | SEGE | SEGF);
     8c2:	89 e3       	ldi	r24, 0x39	; 57
     8c4:	08 95       	ret
		case 'F':	return (SEGA | SEGE | SEGF | SEGG);
     8c6:	81 e7       	ldi	r24, 0x71	; 113
     8c8:	08 95       	ret
		case 'N':	return (SEGC | SEGE | SEGG);
     8ca:	84 e5       	ldi	r24, 0x54	; 84
     8cc:	08 95       	ret
		case 'D': return (SEGB | SEGC | SEGD | SEGE | SEGG);
     8ce:	8e e5       	ldi	r24, 0x5E	; 94
     8d0:	08 95       	ret
		case 'P': return (SEGA | SEGB | SEGE | SEGF | SEGG);
     8d2:	83 e7       	ldi	r24, 0x73	; 115
     8d4:	08 95       	ret
		case 'E': return (SEGA | SEGD | SEGE | SEGF | SEGG);
     8d6:	89 e7       	ldi	r24, 0x79	; 121
     8d8:	08 95       	ret
		case 'R': return (SEGE | SEGG);
     8da:	80 e5       	ldi	r24, 0x50	; 80
     8dc:	08 95       	ret
{
	switch(c)
	{
		case 'O':
		case '0': return (SEGA | SEGB | SEGC | SEGD | SEGE | SEGF);
		case '1': return (SEGB | SEGC );
     8de:	86 e0       	ldi	r24, 0x06	; 6
		case 'P': return (SEGA | SEGB | SEGE | SEGF | SEGG);
		case 'E': return (SEGA | SEGD | SEGE | SEGF | SEGG);
		case 'R': return (SEGE | SEGG);
		default:  return c;	
	}
}
     8e0:	08 95       	ret

000008e2 <wrap_led_buffer_index>:
//---------------------------------------------//
// Ensures that index is inside the buffer
// -128 <= index <= 127
//---------------------------------------------//
static uint8_t wrap_led_buffer_index(int8_t buf_index)
{
     8e2:	28 2f       	mov	r18, r24
	uint8_t new_index_u;
	new_index_u = (uint8_t) ((buf_index < 0) ? -buf_index : buf_index);
     8e4:	87 fd       	sbrc	r24, 7
     8e6:	81 95       	neg	r24
	if (new_index_u >= LED_BUFFER_LENGTH)
     8e8:	8e 30       	cpi	r24, 0x0E	; 14
     8ea:	18 f0       	brcs	.+6      	; 0x8f2 <wrap_led_buffer_index+0x10>
		new_index_u = new_index_u % LED_BUFFER_LENGTH;
     8ec:	6e e0       	ldi	r22, 0x0E	; 14
     8ee:	66 d8       	rcall	.-3892   	; 0xfffff9bc <__eeprom_end+0xff7ef9b2>
     8f0:	89 2f       	mov	r24, r25
	new_index_u = ((buf_index >= 0) || (new_index_u == 0)) ? new_index_u :  LED_BUFFER_LENGTH - new_index_u ;
     8f2:	27 ff       	sbrs	r18, 7
     8f4:	05 c0       	rjmp	.+10     	; 0x900 <wrap_led_buffer_index+0x1e>
     8f6:	88 23       	and	r24, r24
     8f8:	19 f0       	breq	.+6      	; 0x900 <wrap_led_buffer_index+0x1e>
     8fa:	9e e0       	ldi	r25, 0x0E	; 14
     8fc:	98 1b       	sub	r25, r24
     8fe:	89 2f       	mov	r24, r25
	return new_index_u;
}
     900:	08 95       	ret

00000902 <processLedIndicator>:
// Call this function N times per sec to get N/NUM_DIGITS_TOTAL display update rate, where
// NUM_DIGITS_TOTAL is number_of_digits_of_LED_display if no extra LEDs are used or
// (number_of_digits_of_LED_display + 1) otherwise.
//---------------------------------------------//
void processLedIndicator()
{
     902:	cf 93       	push	r28
	disable_led_segments();
	#endif
	
	
	// Perform regular shift
	led_clock_pulse(!LED_DIGIT_ACT_LVL);
     904:	81 e0       	ldi	r24, 0x01	; 1
     906:	13 d1       	rcall	.+550    	; 0xb2e <led_clock_pulse>
	
	switch (wActivePos)
     908:	c0 91 e0 00 	lds	r28, 0x00E0
     90c:	cc 23       	and	r28, r28
     90e:	19 f0       	breq	.+6      	; 0x916 <processLedIndicator+0x14>
     910:	c6 30       	cpi	r28, 0x06	; 6
     912:	d1 f5       	brne	.+116    	; 0x988 <processLedIndicator+0x86>
     914:	11 c0       	rjmp	.+34     	; 0x938 <processLedIndicator+0x36>
	{
	case 0:
		// Get buttons
		#ifndef CLEAN_OPERATION
		disable_led_segments();
     916:	37 d1       	rcall	.+622    	; 0xb86 <disable_led_segments>
		#endif
		enable_led_segments_pullups();
     918:	28 d1       	rcall	.+592    	; 0xb6a <enable_led_segments_pullups>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     91a:	85 e3       	ldi	r24, 0x35	; 53
     91c:	8a 95       	dec	r24
     91e:	f1 f7       	brne	.-4      	; 0x91c <processLedIndicator+0x1a>
     920:	00 00       	nop
		_delay_us(PULLUP_DELAY_US);
		capture_button_state();
     922:	38 d1       	rcall	.+624    	; 0xb94 <capture_button_state>
		#ifndef CLEAN_OPERATION
		enable_led_segments();
     924:	29 d1       	rcall	.+594    	; 0xb78 <enable_led_segments>
		#endif
		// Start new cycle with active digit level
		led_clock_pulse(LED_DIGIT_ACT_LVL);
     926:	80 e0       	ldi	r24, 0x00	; 0
     928:	02 d1       	rcall	.+516    	; 0xb2e <led_clock_pulse>
		// Always start new cycle from specified buffer start position
		bufActivePos = wStartPos;
     92a:	80 91 43 01 	lds	r24, 0x0143
     92e:	80 93 df 00 	sts	0x00DF, r24
		next_wActivePos = wActivePos + 1;
     932:	c0 91 e0 00 	lds	r28, 0x00E0
     936:	28 c0       	rjmp	.+80     	; 0x988 <processLedIndicator+0x86>
//---------------------------------------------//
// Performs window shifting
//---------------------------------------------//
static void processWindowShifter(void)
{
	if (shifterState == LED_SHIFT_DONE)
     938:	80 91 44 01 	lds	r24, 0x0144
     93c:	81 11       	cpse	r24, r1
     93e:	01 c0       	rjmp	.+2      	; 0x942 <processLedIndicator+0x40>
     940:	1b c0       	rjmp	.+54     	; 0x978 <processLedIndicator+0x76>
		return;
	
	// Process shift timer
	processSoftTimer8b(&shiftTimer);	
     942:	81 ee       	ldi	r24, 0xE1	; 225
     944:	90 e0       	ldi	r25, 0x00	; 0
     946:	76 d7       	rcall	.+3820   	; 0x1834 <processSoftTimer8b>
	
	if (shiftTimer.FTop)
     948:	80 91 e1 00 	lds	r24, 0x00E1
     94c:	85 ff       	sbrs	r24, 5
     94e:	14 c0       	rjmp	.+40     	; 0x978 <processLedIndicator+0x76>
	{
		// Check if finished
		if (wStartPos == bufStartPos)	
     950:	80 91 43 01 	lds	r24, 0x0143
     954:	90 91 45 01 	lds	r25, 0x0145
     958:	89 13       	cpse	r24, r25
     95a:	03 c0       	rjmp	.+6      	; 0x962 <processLedIndicator+0x60>
		{
			// Update state
			shifterState = LED_SHIFT_DONE;
     95c:	10 92 44 01 	sts	0x0144, r1
     960:	0b c0       	rjmp	.+22     	; 0x978 <processLedIndicator+0x76>
		}
		else if (shifterState == LED_SHIFT_RIGHT)
     962:	90 91 44 01 	lds	r25, 0x0144
     966:	92 30       	cpi	r25, 0x02	; 2
     968:	49 f4       	brne	.+18     	; 0x97c <processLedIndicator+0x7a>
// Increments index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t inc_buffer_position(uint8_t position)
{
	return (position >= LED_BUFFER_LENGTH - 1) ? 0 : position + 1;
     96a:	8d 30       	cpi	r24, 0x0D	; 13
     96c:	10 f4       	brcc	.+4      	; 0x972 <processLedIndicator+0x70>
     96e:	8f 5f       	subi	r24, 0xFF	; 255
     970:	01 c0       	rjmp	.+2      	; 0x974 <processLedIndicator+0x72>
     972:	80 e0       	ldi	r24, 0x00	; 0
			// Update state
			shifterState = LED_SHIFT_DONE;
		}
		else if (shifterState == LED_SHIFT_RIGHT)
		{
			wStartPos = inc_buffer_position(wStartPos);	
     974:	80 93 43 01 	sts	0x0143, r24
		// Always start new cycle from specified buffer start position
		bufActivePos = wStartPos;
		next_wActivePos = wActivePos + 1;
		break;
	case NUM_DIGITS_TOTAL-1:
		next_wActivePos = 0;
     978:	c0 e0       	ldi	r28, 0x00	; 0
     97a:	07 c0       	rjmp	.+14     	; 0x98a <processLedIndicator+0x88>
// Decrements index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t dec_buffer_position(uint8_t position)
{
	return (position == 0) ? LED_BUFFER_LENGTH - 1 : position - 1;
     97c:	88 23       	and	r24, r24
     97e:	11 f0       	breq	.+4      	; 0x984 <processLedIndicator+0x82>
     980:	81 50       	subi	r24, 0x01	; 1
     982:	f8 cf       	rjmp	.-16     	; 0x974 <processLedIndicator+0x72>
     984:	8d e0       	ldi	r24, 0x0D	; 13
     986:	f6 cf       	rjmp	.-20     	; 0x974 <processLedIndicator+0x72>
		next_wActivePos = 0;
		// Shift LED window
		processWindowShifter();	
		break;
	default:
		next_wActivePos = wActivePos + 1;
     988:	cf 5f       	subi	r28, 0xFF	; 255
		break;
	}		
	
	#ifdef 	USE_EXTRA_LED_DIGIT
	if (wActivePos == EXTRA_DIGIT_NUM)
     98a:	80 91 e0 00 	lds	r24, 0x00E0
     98e:	86 30       	cpi	r24, 0x06	; 6
     990:	21 f4       	brne	.+8      	; 0x99a <processLedIndicator+0x98>
	{
		// Output separate LEDs state
		set_led_segments(extra_led_state);
     992:	80 91 42 01 	lds	r24, 0x0142
     996:	db d0       	rcall	.+438    	; 0xb4e <set_led_segments>
     998:	10 c0       	rjmp	.+32     	; 0x9ba <processLedIndicator+0xb8>
	}
	else
	#endif
	{
		// Output new segment data
		set_led_segments(led_data_buffer[bufActivePos]);
     99a:	e0 91 df 00 	lds	r30, 0x00DF
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	ea 5b       	subi	r30, 0xBA	; 186
     9a2:	fe 4f       	sbci	r31, 0xFE	; 254
     9a4:	80 81       	ld	r24, Z
     9a6:	d3 d0       	rcall	.+422    	; 0xb4e <set_led_segments>
		// Wrap around buffer length
		bufActivePos = inc_buffer_position(bufActivePos );
     9a8:	80 91 df 00 	lds	r24, 0x00DF
// Increments index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t inc_buffer_position(uint8_t position)
{
	return (position >= LED_BUFFER_LENGTH - 1) ? 0 : position + 1;
     9ac:	8d 30       	cpi	r24, 0x0D	; 13
     9ae:	10 f4       	brcc	.+4      	; 0x9b4 <processLedIndicator+0xb2>
     9b0:	8f 5f       	subi	r24, 0xFF	; 255
     9b2:	01 c0       	rjmp	.+2      	; 0x9b6 <processLedIndicator+0xb4>
     9b4:	80 e0       	ldi	r24, 0x00	; 0
	#endif
	{
		// Output new segment data
		set_led_segments(led_data_buffer[bufActivePos]);
		// Wrap around buffer length
		bufActivePos = inc_buffer_position(bufActivePos );
     9b6:	80 93 df 00 	sts	0x00DF, r24
	}
		
	wActivePos = next_wActivePos;
     9ba:	c0 93 e0 00 	sts	0x00E0, r28
	
	#ifdef CLEAN_OPERATION
	enable_led_segments();
	#endif

}
     9be:	cf 91       	pop	r28
     9c0:	08 95       	ret

000009c2 <fillLedBuffer>:
//---------------------------------------------//
// Fills buffer from (bufStartPos + offset) 
//	position with single char
//---------------------------------------------//
void fillLedBuffer(int8_t offset, uint8_t length, char c)
{
     9c2:	0f 93       	push	r16
     9c4:	1f 93       	push	r17
     9c6:	cf 93       	push	r28
     9c8:	df 93       	push	r29
     9ca:	1f 92       	push	r1
     9cc:	cd b7       	in	r28, 0x3d	; 61
     9ce:	de b7       	in	r29, 0x3e	; 62
     9d0:	18 2f       	mov	r17, r24
     9d2:	84 2f       	mov	r24, r20
	uint8_t val = decode_led_char(c);
     9d4:	69 83       	std	Y+1, r22	; 0x01
     9d6:	12 df       	rcall	.-476    	; 0x7fc <decode_led_char>
     9d8:	08 2f       	mov	r16, r24
	// Ensure index is inside the buffer
	uint8_t position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
     9da:	80 91 45 01 	lds	r24, 0x0145
     9de:	81 0f       	add	r24, r17
     9e0:	80 df       	rcall	.-256    	; 0x8e2 <wrap_led_buffer_index>
	while(length--)
     9e2:	69 81       	ldd	r22, Y+1	; 0x01
     9e4:	0a c0       	rjmp	.+20     	; 0x9fa <fillLedBuffer+0x38>
	{
		led_data_buffer[position] = val;
     9e6:	e8 2f       	mov	r30, r24
     9e8:	f0 e0       	ldi	r31, 0x00	; 0
     9ea:	ea 5b       	subi	r30, 0xBA	; 186
     9ec:	fe 4f       	sbci	r31, 0xFE	; 254
     9ee:	00 83       	st	Z, r16
// Increments index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t inc_buffer_position(uint8_t position)
{
	return (position >= LED_BUFFER_LENGTH - 1) ? 0 : position + 1;
     9f0:	8d 30       	cpi	r24, 0x0D	; 13
     9f2:	10 f4       	brcc	.+4      	; 0x9f8 <fillLedBuffer+0x36>
     9f4:	8f 5f       	subi	r24, 0xFF	; 255
     9f6:	01 c0       	rjmp	.+2      	; 0x9fa <fillLedBuffer+0x38>
     9f8:	80 e0       	ldi	r24, 0x00	; 0
void fillLedBuffer(int8_t offset, uint8_t length, char c)
{
	uint8_t val = decode_led_char(c);
	// Ensure index is inside the buffer
	uint8_t position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
	while(length--)
     9fa:	61 50       	subi	r22, 0x01	; 1
     9fc:	a0 f7       	brcc	.-24     	; 0x9e6 <fillLedBuffer+0x24>
	{
		led_data_buffer[position] = val;
		position = inc_buffer_position(position);
	}
}
     9fe:	0f 90       	pop	r0
     a00:	df 91       	pop	r29
     a02:	cf 91       	pop	r28
     a04:	1f 91       	pop	r17
     a06:	0f 91       	pop	r16
     a08:	08 95       	ret

00000a0a <startShiftingWindowLeft>:
//	LED window left 
//---------------------------------------------//
void startShiftingWindowLeft(void)
{
	// Clear spaces between menu states
	fillLedBuffer(-2,2,' ');
     a0a:	40 e2       	ldi	r20, 0x20	; 32
     a0c:	62 e0       	ldi	r22, 0x02	; 2
     a0e:	8e ef       	ldi	r24, 0xFE	; 254
     a10:	d8 df       	rcall	.-80     	; 0x9c2 <fillLedBuffer>
	// Set new buffer position for writing
	bufStartPos = wrap_led_buffer_index( (int8_t)bufStartPos - (NUM_DIGITS + 2) );
     a12:	80 91 45 01 	lds	r24, 0x0145
     a16:	88 50       	subi	r24, 0x08	; 8
     a18:	64 df       	rcall	.-312    	; 0x8e2 <wrap_led_buffer_index>
     a1a:	80 93 45 01 	sts	0x0145, r24
	// Set shifter state
	shifterState = LED_SHIFT_LEFT;
     a1e:	81 e0       	ldi	r24, 0x01	; 1
     a20:	80 93 44 01 	sts	0x0144, r24
     a24:	08 95       	ret

00000a26 <startShiftingWindowRight>:
//	LED window right 
//---------------------------------------------//
void startShiftingWindowRight(void)
{
	// Clear spaces between menu states
	fillLedBuffer(NUM_DIGITS,2,' ');
     a26:	40 e2       	ldi	r20, 0x20	; 32
     a28:	62 e0       	ldi	r22, 0x02	; 2
     a2a:	86 e0       	ldi	r24, 0x06	; 6
     a2c:	ca df       	rcall	.-108    	; 0x9c2 <fillLedBuffer>
	// Set new buffer position for writing
	bufStartPos = wrap_led_buffer_index( (int8_t)bufStartPos + NUM_DIGITS + 2 );
     a2e:	80 91 45 01 	lds	r24, 0x0145
     a32:	88 5f       	subi	r24, 0xF8	; 248
     a34:	56 df       	rcall	.-340    	; 0x8e2 <wrap_led_buffer_index>
     a36:	80 93 45 01 	sts	0x0145, r24
	// Set shifter state
	shifterState = LED_SHIFT_RIGHT;
     a3a:	82 e0       	ldi	r24, 0x02	; 2
     a3c:	80 93 44 01 	sts	0x0144, r24
     a40:	08 95       	ret

00000a42 <initLedIndicator>:
//---------------------------------------------//
//	Initialization
//	Call this function at start of your program
//---------------------------------------------//
void initLedIndicator()
{
     a42:	cf 93       	push	r28
	uint8_t i;
	// First disable outputs
	disable_led_segments();
     a44:	a0 d0       	rcall	.+320    	; 0xb86 <disable_led_segments>
     a46:	c7 e0       	ldi	r28, 0x07	; 7
	// Fill shift register with non-active levels
	for (i=0;i<NUM_DIGITS_TOTAL;i++)
	{
		led_clock_pulse(!LED_DIGIT_ACT_LVL);
     a48:	81 e0       	ldi	r24, 0x01	; 1
     a4a:	71 d0       	rcall	.+226    	; 0xb2e <led_clock_pulse>
     a4c:	c1 50       	subi	r28, 0x01	; 1
{
	uint8_t i;
	// First disable outputs
	disable_led_segments();
	// Fill shift register with non-active levels
	for (i=0;i<NUM_DIGITS_TOTAL;i++)
     a4e:	e1 f7       	brne	.-8      	; 0xa48 <initLedIndicator+0x6>
	{
		led_clock_pulse(!LED_DIGIT_ACT_LVL);
	}
	// Now enable outputs
	enable_led_segments();
     a50:	93 d0       	rcall	.+294    	; 0xb78 <enable_led_segments>
	
	// Reset pointers
	wStartPos = 0;
     a52:	10 92 43 01 	sts	0x0143, r1
	bufStartPos = 0;
     a56:	10 92 45 01 	sts	0x0145, r1
	bufActivePos = 0;
     a5a:	10 92 df 00 	sts	0x00DF, r1
	wActivePos = 0;
     a5e:	10 92 e0 00 	sts	0x00E0, r1
	#ifdef 	USE_EXTRA_LED_DIGIT
	extra_led_state = 0;
     a62:	10 92 42 01 	sts	0x0142, r1
	#endif
	
	// Clear the buffer 
	fillLedBuffer(0,LED_BUFFER_LENGTH,' ');
     a66:	40 e2       	ldi	r20, 0x20	; 32
     a68:	6e e0       	ldi	r22, 0x0E	; 14
     a6a:	80 e0       	ldi	r24, 0x00	; 0
     a6c:	aa df       	rcall	.-172    	; 0x9c2 <fillLedBuffer>
	
	// Initialize shift timer - always enabled, but 
	//	processed only when shifting is active
	shifterState = LED_SHIFT_DONE;
     a6e:	10 92 44 01 	sts	0x0144, r1
	shiftTimer.Enabled = 1;
     a72:	80 91 e1 00 	lds	r24, 0x00E1
	shiftTimer.RunOnce = 0;
     a76:	81 60       	ori	r24, 0x01	; 1
     a78:	8d 7f       	andi	r24, 0xFD	; 253
     a7a:	80 93 e1 00 	sts	0x00E1, r24
	shiftTimer.Top = LED_SHIFT_INTERVAL-1;
     a7e:	89 e0       	ldi	r24, 0x09	; 9
     a80:	80 93 e3 00 	sts	0x00E3, r24
}
     a84:	cf 91       	pop	r28
     a86:	08 95       	ret

00000a88 <printLedBuffer>:
//		str - null-terminated char string
// Comma and dot (".", ",") get special processing - first occurrence is added to
// a preceding char, next are displayed as a single digit
//---------------------------------------------//
void printLedBuffer(int8_t offset, char* str)
{
     a88:	ff 92       	push	r15
     a8a:	0f 93       	push	r16
     a8c:	1f 93       	push	r17
     a8e:	cf 93       	push	r28
     a90:	df 93       	push	r29
     a92:	eb 01       	movw	r28, r22
	char c;
	uint8_t decoded_sym;
	uint8_t state = 0x02;
	uint8_t comma_pos;
	// Ensure index is inside the buffer
	uint8_t buffer_position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
     a94:	90 91 45 01 	lds	r25, 0x0145
     a98:	89 0f       	add	r24, r25
     a9a:	23 df       	rcall	.-442    	; 0x8e2 <wrap_led_buffer_index>
     a9c:	18 2f       	mov	r17, r24
	comma_pos = buffer_position;
     a9e:	f8 2e       	mov	r15, r24
//---------------------------------------------//
void printLedBuffer(int8_t offset, char* str)
{
	char c;
	uint8_t decoded_sym;
	uint8_t state = 0x02;
     aa0:	02 e0       	ldi	r16, 0x02	; 2
	uint8_t comma_pos;
	// Ensure index is inside the buffer
	uint8_t buffer_position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
	comma_pos = buffer_position;
	// Output chars
	while((c = *str++))
     aa2:	23 c0       	rjmp	.+70     	; 0xaea <printLedBuffer+0x62>
	{
		decoded_sym = decode_led_char(c);
     aa4:	ab de       	rcall	.-682    	; 0x7fc <decode_led_char>
		state = (decoded_sym == SEGH) ? (state | 0x01) : (state & ~0x01);
     aa6:	80 38       	cpi	r24, 0x80	; 128
     aa8:	11 f4       	brne	.+4      	; 0xaae <printLedBuffer+0x26>
     aaa:	01 60       	ori	r16, 0x01	; 1
     aac:	01 c0       	rjmp	.+2      	; 0xab0 <printLedBuffer+0x28>
     aae:	0e 7f       	andi	r16, 0xFE	; 254
		if (state == 0x01)			
     ab0:	01 30       	cpi	r16, 0x01	; 1
     ab2:	49 f4       	brne	.+18     	; 0xac6 <printLedBuffer+0x3e>
		{
			led_data_buffer[comma_pos] |= decoded_sym;
     ab4:	ef 2d       	mov	r30, r15
     ab6:	f0 e0       	ldi	r31, 0x00	; 0
     ab8:	ea 5b       	subi	r30, 0xBA	; 186
     aba:	fe 4f       	sbci	r31, 0xFE	; 254
     abc:	90 81       	ld	r25, Z
     abe:	98 2b       	or	r25, r24
     ac0:	90 83       	st	Z, r25
     ac2:	81 2f       	mov	r24, r17
     ac4:	0b c0       	rjmp	.+22     	; 0xadc <printLedBuffer+0x54>
		}
		else
		{
			led_data_buffer[buffer_position] = decoded_sym;	
     ac6:	e1 2f       	mov	r30, r17
     ac8:	f0 e0       	ldi	r31, 0x00	; 0
     aca:	ea 5b       	subi	r30, 0xBA	; 186
     acc:	fe 4f       	sbci	r31, 0xFE	; 254
     ace:	80 83       	st	Z, r24
// Increments index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t inc_buffer_position(uint8_t position)
{
	return (position >= LED_BUFFER_LENGTH - 1) ? 0 : position + 1;
     ad0:	1d 30       	cpi	r17, 0x0D	; 13
     ad2:	18 f4       	brcc	.+6      	; 0xada <printLedBuffer+0x52>
     ad4:	81 2f       	mov	r24, r17
     ad6:	8f 5f       	subi	r24, 0xFF	; 255
     ad8:	01 c0       	rjmp	.+2      	; 0xadc <printLedBuffer+0x54>
     ada:	80 e0       	ldi	r24, 0x00	; 0
		comma_pos = buffer_position;
		if (state != 0x01)
		{
			buffer_position = inc_buffer_position(buffer_position);
		}
		state = (state & 0x01) ? 0x03 : 0x00;		
     adc:	00 ff       	sbrs	r16, 0
     ade:	02 c0       	rjmp	.+4      	; 0xae4 <printLedBuffer+0x5c>
     ae0:	03 e0       	ldi	r16, 0x03	; 3
     ae2:	01 c0       	rjmp	.+2      	; 0xae6 <printLedBuffer+0x5e>
     ae4:	00 e0       	ldi	r16, 0x00	; 0
     ae6:	f1 2e       	mov	r15, r17
     ae8:	18 2f       	mov	r17, r24
	uint8_t comma_pos;
	// Ensure index is inside the buffer
	uint8_t buffer_position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
	comma_pos = buffer_position;
	// Output chars
	while((c = *str++))
     aea:	89 91       	ld	r24, Y+
     aec:	81 11       	cpse	r24, r1
     aee:	da cf       	rjmp	.-76     	; 0xaa4 <printLedBuffer+0x1c>
		{
			buffer_position = inc_buffer_position(buffer_position);
		}
		state = (state & 0x01) ? 0x03 : 0x00;		
	}
}
     af0:	df 91       	pop	r29
     af2:	cf 91       	pop	r28
     af4:	1f 91       	pop	r17
     af6:	0f 91       	pop	r16
     af8:	ff 90       	pop	r15
     afa:	08 95       	ret

00000afc <setComma>:
//	buffer cell
//---------------------------------------------//
void setComma(int8_t offset)
{
	// Ensure index is inside the buffer
	uint8_t position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
     afc:	90 91 45 01 	lds	r25, 0x0145
     b00:	89 0f       	add	r24, r25
     b02:	ef de       	rcall	.-546    	; 0x8e2 <wrap_led_buffer_index>
	led_data_buffer[position] |= (SEGH);
     b04:	e8 2f       	mov	r30, r24
     b06:	f0 e0       	ldi	r31, 0x00	; 0
     b08:	ea 5b       	subi	r30, 0xBA	; 186
     b0a:	fe 4f       	sbci	r31, 0xFE	; 254
     b0c:	80 81       	ld	r24, Z
     b0e:	80 68       	ori	r24, 0x80	; 128
     b10:	80 83       	st	Z, r24
     b12:	08 95       	ret

00000b14 <setExtraLeds>:
// Argument is ORed with current LED state
//---------------------------------------------//
inline void setExtraLeds(uint8_t leds_set_value)
{
		//asm("cli");
		extra_led_state |= leds_set_value;
     b14:	90 91 42 01 	lds	r25, 0x0142
     b18:	98 2b       	or	r25, r24
     b1a:	90 93 42 01 	sts	0x0142, r25
     b1e:	08 95       	ret

00000b20 <clearExtraLeds>:
// Argument is AND NOTed with current LED state
//---------------------------------------------//
inline void clearExtraLeds(uint8_t leds_clear_value)
{
		//asm("cli");
		extra_led_state &= ~leds_clear_value;
     b20:	90 91 42 01 	lds	r25, 0x0142
     b24:	80 95       	com	r24
     b26:	89 23       	and	r24, r25
     b28:	80 93 42 01 	sts	0x0142, r24
     b2c:	08 95       	ret

00000b2e <led_clock_pulse>:


// Clocks in bit into the shift register
void led_clock_pulse(uint8_t bit)
{
	if (bit)
     b2e:	88 23       	and	r24, r24
     b30:	11 f0       	breq	.+4      	; 0xb36 <led_clock_pulse+0x8>
		PORTB |= (1<<PB_LED_DOUT);
     b32:	c0 9a       	sbi	0x18, 0	; 24
     b34:	01 c0       	rjmp	.+2      	; 0xb38 <led_clock_pulse+0xa>
	else
		PORTB &= ~(1<<PB_LED_DOUT);
     b36:	c0 98       	cbi	0x18, 0	; 24
     b38:	8a e1       	ldi	r24, 0x1A	; 26
     b3a:	8a 95       	dec	r24
     b3c:	f1 f7       	brne	.-4      	; 0xb3a <led_clock_pulse+0xc>
     b3e:	00 c0       	rjmp	.+0      	; 0xb40 <led_clock_pulse+0x12>
	_delay_us(SETUP_DELAY_US);
	PORTB |= (1<<PB_LED_CLK);
     b40:	c2 9a       	sbi	0x18, 2	; 24
     b42:	8a e1       	ldi	r24, 0x1A	; 26
     b44:	8a 95       	dec	r24
     b46:	f1 f7       	brne	.-4      	; 0xb44 <led_clock_pulse+0x16>
     b48:	00 c0       	rjmp	.+0      	; 0xb4a <led_clock_pulse+0x1c>
	_delay_us(SHIFT_DELAY_US);
	PORTB &= ~(1<<PB_LED_CLK);
     b4a:	c2 98       	cbi	0x18, 2	; 24
     b4c:	08 95       	ret

00000b4e <set_led_segments>:
// Outputs decoded segment data to port bits
void set_led_segments(uint8_t seg_ch)
{
	uint8_t pdat;
	seg_ch ^= LED_SEGMENT_MASK;
	pdat = PORTC & ~( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
     b4e:	25 b3       	in	r18, 0x15	; 21
	pdat |= (seg_ch & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
     b50:	98 2f       	mov	r25, r24
     b52:	9f 71       	andi	r25, 0x1F	; 31
// Outputs decoded segment data to port bits
void set_led_segments(uint8_t seg_ch)
{
	uint8_t pdat;
	seg_ch ^= LED_SEGMENT_MASK;
	pdat = PORTC & ~( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
     b54:	20 7e       	andi	r18, 0xE0	; 224
	pdat |= (seg_ch & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
     b56:	92 2b       	or	r25, r18
	PORTC = pdat;
     b58:	95 bb       	out	0x15, r25	; 21
	seg_ch >>= 2;
	pdat = PORTB & ~( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     b5a:	98 b3       	in	r25, 0x18	; 24
	uint8_t pdat;
	seg_ch ^= LED_SEGMENT_MASK;
	pdat = PORTC & ~( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
	pdat |= (seg_ch & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
	PORTC = pdat;
	seg_ch >>= 2;
     b5c:	86 95       	lsr	r24
     b5e:	86 95       	lsr	r24
	pdat = PORTB & ~( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
	pdat |= (seg_ch & ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) ));
     b60:	88 73       	andi	r24, 0x38	; 56
	seg_ch ^= LED_SEGMENT_MASK;
	pdat = PORTC & ~( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
	pdat |= (seg_ch & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
	PORTC = pdat;
	seg_ch >>= 2;
	pdat = PORTB & ~( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     b62:	97 7c       	andi	r25, 0xC7	; 199
	pdat |= (seg_ch & ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) ));
     b64:	89 2b       	or	r24, r25
	PORTB = pdat;
     b66:	88 bb       	out	0x18, r24	; 24
     b68:	08 95       	ret

00000b6a <enable_led_segments_pullups>:

// Turns segment port bits to HI-Z and
// enables pull-ups
void enable_led_segments_pullups()
{
	PORTC |= ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
     b6a:	85 b3       	in	r24, 0x15	; 21
     b6c:	8f 61       	ori	r24, 0x1F	; 31
     b6e:	85 bb       	out	0x15, r24	; 21
	PORTB |= ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     b70:	88 b3       	in	r24, 0x18	; 24
     b72:	88 63       	ori	r24, 0x38	; 56
     b74:	88 bb       	out	0x18, r24	; 24
     b76:	08 95       	ret

00000b78 <enable_led_segments>:
}	

void enable_led_segments()
{
	DDRC |= ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
     b78:	84 b3       	in	r24, 0x14	; 20
     b7a:	8f 61       	ori	r24, 0x1F	; 31
     b7c:	84 bb       	out	0x14, r24	; 20
	DDRB |= ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     b7e:	87 b3       	in	r24, 0x17	; 23
     b80:	88 63       	ori	r24, 0x38	; 56
     b82:	87 bb       	out	0x17, r24	; 23
     b84:	08 95       	ret

00000b86 <disable_led_segments>:
}

void disable_led_segments()
{
	DDRC &= ~( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
     b86:	84 b3       	in	r24, 0x14	; 20
     b88:	80 7e       	andi	r24, 0xE0	; 224
     b8a:	84 bb       	out	0x14, r24	; 20
	DDRB &= ~( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     b8c:	87 b3       	in	r24, 0x17	; 23
     b8e:	87 7c       	andi	r24, 0xC7	; 199
     b90:	87 bb       	out	0x17, r24	; 23
     b92:	08 95       	ret

00000b94 <capture_button_state>:


void capture_button_state()
{
	uint8_t pdat;
	pdat = PINB  & ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     b94:	86 b3       	in	r24, 0x16	; 22
     b96:	88 73       	andi	r24, 0x38	; 56
	pdat <<= 2;
	pdat |= (PINC & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
     b98:	93 b3       	in	r25, 0x13	; 19

void capture_button_state()
{
	uint8_t pdat;
	pdat = PINB  & ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
	pdat <<= 2;
     b9a:	88 0f       	add	r24, r24
     b9c:	88 0f       	add	r24, r24
	pdat |= (PINC & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
     b9e:	9f 71       	andi	r25, 0x1F	; 31
     ba0:	89 2b       	or	r24, r25
	raw_button_state = pdat ^ RAW_BUTTONS_INVERSE_MASK;
     ba2:	80 95       	com	r24
     ba4:	80 93 54 01 	sts	0x0154, r24
     ba8:	08 95       	ret

00000baa <processItemFunction>:
//	Arguments:
//		funcAddr - address of the function to run.
//-----------------------------------------------------------------//
static inline void processItemFunction(FuncPtr funcAddr)
{
	if (funcAddr != 0)
     baa:	00 97       	sbiw	r24, 0x00	; 0
     bac:	11 f0       	breq	.+4      	; 0xbb2 <processItemFunction+0x8>
		((FuncPtr)funcAddr)();
     bae:	fc 01       	movw	r30, r24
     bb0:	09 94       	ijmp
     bb2:	08 95       	ret

00000bb4 <mf_setTempLeave>:
		clearExtraLeds(LED_TEMP);
}

void mf_setTempLeave(void)
{
	userTimer.Enabled = 0;
     bb4:	ed ee       	ldi	r30, 0xED	; 237
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
     bb8:	80 81       	ld	r24, Z
     bba:	8e 7f       	andi	r24, 0xFE	; 254
     bbc:	80 83       	st	Z, r24
     bbe:	08 95       	ret

00000bc0 <mf_leafSelectAct>:
	userTimer.FA_GE = 1;	
}

void mf_leafSelectAct(void)
{
	userTimer.Timer = 0;
     bc0:	10 92 ee 00 	sts	0x00EE, r1
	userTimer.Top = BLINK_PERIOD - 1;
     bc4:	87 e0       	ldi	r24, 0x07	; 7
     bc6:	80 93 ef 00 	sts	0x00EF, r24
	userTimer.CompA = BLINK_PERIOD / 2;
     bca:	84 e0       	ldi	r24, 0x04	; 4
     bcc:	80 93 f0 00 	sts	0x00F0, r24
	userTimer.Enabled = 1;
     bd0:	ed ee       	ldi	r30, 0xED	; 237
     bd2:	f0 e0       	ldi	r31, 0x00	; 0
     bd4:	80 81       	ld	r24, Z
     bd6:	81 60       	ori	r24, 0x01	; 1
     bd8:	80 83       	st	Z, r24
     bda:	08 95       	ret

00000bdc <mf_leafExit>:
}

void mf_leafExit(void)
{
	userTimer.Enabled = 0;	
     bdc:	ed ee       	ldi	r30, 0xED	; 237
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	80 81       	ld	r24, Z
     be2:	8e 7f       	andi	r24, 0xFE	; 254
     be4:	80 83       	st	Z, r24
     be6:	08 95       	ret

00000be8 <mf_actpoffLeave>:
	printLedBuffer(0,"   OFF");
}

void mf_actpoffLeave(void)
{
	autoPowerOffState = 0;	
     be8:	10 92 02 01 	sts	0x0102, r1
     bec:	08 95       	ret

00000bee <mf_cdoneDo>:
	calculateCoeffs();
}

void mf_cdoneDo(void)
{
	printLedBuffer(0," DONE ");
     bee:	68 ea       	ldi	r22, 0xA8	; 168
     bf0:	70 e0       	ldi	r23, 0x00	; 0
     bf2:	80 e0       	ldi	r24, 0x00	; 0
     bf4:	49 cf       	rjmp	.-366    	; 0xa88 <printLedBuffer>

00000bf6 <mf_actpoffDo>:
}

// Indication of power off mode
void mf_actpoffDo(void)
{
	printLedBuffer(0,"   OFF");
     bf6:	6f ea       	ldi	r22, 0xAF	; 175
     bf8:	70 e0       	ldi	r23, 0x00	; 0
     bfa:	80 e0       	ldi	r24, 0x00	; 0
     bfc:	45 cf       	rjmp	.-374    	; 0xa88 <printLedBuffer>

00000bfe <mf_cdone2Select>:
}

void mf_cdone2Select(void)
{
	// Save current ADC as calibrating point
	cpoint2_adc = adc_normalized;
     bfe:	80 91 1d 01 	lds	r24, 0x011D
     c02:	90 91 1e 01 	lds	r25, 0x011E
     c06:	90 93 3e 01 	sts	0x013E, r25
     c0a:	80 93 3d 01 	sts	0x013D, r24
	// Save current Celsius degree
	cpoint2 = cpoint2_copy;
     c0e:	80 91 f2 00 	lds	r24, 0x00F2
     c12:	80 93 41 01 	sts	0x0141, r24
	// Calculate new coefficient for temperature conversion
	calculateCoeffs();
     c16:	e6 ca       	rjmp	.-2612   	; 0x1e4 <calculateCoeffs>

00000c18 <mf_cdone1Select>:
//---------------------------------------------//

void mf_cdone1Select(void)
{
	// Save current ADC as calibrating point
	cpoint1_adc = adc_normalized;
     c18:	80 91 1d 01 	lds	r24, 0x011D
     c1c:	90 91 1e 01 	lds	r25, 0x011E
     c20:	90 93 3a 01 	sts	0x013A, r25
     c24:	80 93 39 01 	sts	0x0139, r24
	// Save current Celsius degree
	cpoint1 = cpoint1_copy;
     c28:	80 91 f1 00 	lds	r24, 0x00F1
     c2c:	80 93 21 01 	sts	0x0121, r24
	// Calculate new coefficient for temperature conversion
	calculateCoeffs();
     c30:	d9 ca       	rjmp	.-2638   	; 0x1e4 <calculateCoeffs>

00000c32 <mf_autopoffDo>:

//---------------------------------------------//


void mf_autopoffDo(void)
{
     c32:	cf 93       	push	r28
     c34:	df 93       	push	r29
     c36:	cd b7       	in	r28, 0x3d	; 61
     c38:	de b7       	in	r29, 0x3e	; 62
     c3a:	27 97       	sbiw	r28, 0x07	; 7
     c3c:	0f b6       	in	r0, 0x3f	; 63
     c3e:	f8 94       	cli
     c40:	de bf       	out	0x3e, r29	; 62
     c42:	0f be       	out	0x3f, r0	; 63
     c44:	cd bf       	out	0x3d, r28	; 61
	char str[] = {'O','F','F',' ',' ',' ',0};
     c46:	87 e0       	ldi	r24, 0x07	; 7
     c48:	ee e7       	ldi	r30, 0x7E	; 126
     c4a:	f0 e0       	ldi	r31, 0x00	; 0
     c4c:	de 01       	movw	r26, r28
     c4e:	11 96       	adiw	r26, 0x01	; 1
     c50:	01 90       	ld	r0, Z+
     c52:	0d 92       	st	X+, r0
     c54:	8a 95       	dec	r24
     c56:	e1 f7       	brne	.-8      	; 0xc50 <mf_autopoffDo+0x1e>
		
		
	if (button_state & (BD_UP | BR_UP))
     c58:	80 91 d2 00 	lds	r24, 0x00D2
     c5c:	90 91 d3 00 	lds	r25, 0x00D3
     c60:	9c 01       	movw	r18, r24
     c62:	22 70       	andi	r18, 0x02	; 2
     c64:	34 70       	andi	r19, 0x04	; 4
     c66:	23 2b       	or	r18, r19
     c68:	31 f0       	breq	.+12     	; 0xc76 <mf_autopoffDo+0x44>
	{
		if (power_off_timeout < MAX_POWEROFF_TIMEOUT)
     c6a:	80 91 3b 01 	lds	r24, 0x013B
     c6e:	8f 35       	cpi	r24, 0x5F	; 95
     c70:	68 f4       	brcc	.+26     	; 0xc8c <mf_autopoffDo+0x5a>
			power_off_timeout += 5;
     c72:	8b 5f       	subi	r24, 0xFB	; 251
     c74:	09 c0       	rjmp	.+18     	; 0xc88 <mf_autopoffDo+0x56>
		restartMenuTimer();
	}
	else if (button_state & (BD_DOWN | BR_DOWN))
     c76:	84 70       	andi	r24, 0x04	; 4
     c78:	98 70       	andi	r25, 0x08	; 8
     c7a:	89 2b       	or	r24, r25
     c7c:	49 f0       	breq	.+18     	; 0xc90 <mf_autopoffDo+0x5e>
	{
		if (power_off_timeout > MIN_POWEROFF_TIMEOUT)
     c7e:	80 91 3b 01 	lds	r24, 0x013B
     c82:	86 30       	cpi	r24, 0x06	; 6
     c84:	18 f0       	brcs	.+6      	; 0xc8c <mf_autopoffDo+0x5a>
			power_off_timeout -= 5;
     c86:	85 50       	subi	r24, 0x05	; 5
     c88:	80 93 3b 01 	sts	0x013B, r24
//	 Restarts menu state timeout
//	Should be used in RUN function when control buttons are pressed.
//-----------------------------------------------------------------//
static void restartMenuTimer(void)
{
	menuTimer.Timer = 0;
     c8c:	10 92 75 00 	sts	0x0075, r1
		if (power_off_timeout > MIN_POWEROFF_TIMEOUT)
			power_off_timeout -= 5;
		restartMenuTimer();
	}	
		
	if (userTimer.FA_GE)
     c90:	80 91 ed 00 	lds	r24, 0x00ED
     c94:	84 ff       	sbrs	r24, 4
     c96:	10 c0       	rjmp	.+32     	; 0xcb8 <mf_autopoffDo+0x86>
	{
		if (power_off_timeout != MAX_POWEROFF_TIMEOUT)
     c98:	80 91 3b 01 	lds	r24, 0x013B
     c9c:	8f 35       	cpi	r24, 0x5F	; 95
     c9e:	41 f0       	breq	.+16     	; 0xcb0 <mf_autopoffDo+0x7e>
			u16toa_align_right(power_off_timeout,str + 4,0x80 | 2,' ');	
     ca0:	20 e2       	ldi	r18, 0x20	; 32
     ca2:	42 e8       	ldi	r20, 0x82	; 130
     ca4:	be 01       	movw	r22, r28
     ca6:	6b 5f       	subi	r22, 0xFB	; 251
     ca8:	7f 4f       	sbci	r23, 0xFF	; 255
     caa:	90 e0       	ldi	r25, 0x00	; 0
     cac:	b6 d2       	rcall	.+1388   	; 0x121a <u16toa_align_right>
     cae:	04 c0       	rjmp	.+8      	; 0xcb8 <mf_autopoffDo+0x86>
		else 
		{
			str[4] = 'N';
     cb0:	8e e4       	ldi	r24, 0x4E	; 78
     cb2:	8d 83       	std	Y+5, r24	; 0x05
			str[5] = 'O';
     cb4:	8f e4       	ldi	r24, 0x4F	; 79
     cb6:	8e 83       	std	Y+6, r24	; 0x06
		}			
	}		
		
	printLedBuffer(0,str);
     cb8:	be 01       	movw	r22, r28
     cba:	6f 5f       	subi	r22, 0xFF	; 255
     cbc:	7f 4f       	sbci	r23, 0xFF	; 255
     cbe:	80 e0       	ldi	r24, 0x00	; 0
     cc0:	e3 de       	rcall	.-570    	; 0xa88 <printLedBuffer>
}
     cc2:	27 96       	adiw	r28, 0x07	; 7
     cc4:	0f b6       	in	r0, 0x3f	; 63
     cc6:	f8 94       	cli
     cc8:	de bf       	out	0x3e, r29	; 62
     cca:	0f be       	out	0x3f, r0	; 63
     ccc:	cd bf       	out	0x3d, r28	; 61
     cce:	df 91       	pop	r29
     cd0:	cf 91       	pop	r28
     cd2:	08 95       	ret

00000cd4 <mf_realTempDo>:
{
	setExtraLeds(LED_TEMP);
}

void mf_realTempDo(void)
{
     cd4:	cf 93       	push	r28
     cd6:	df 93       	push	r29
     cd8:	cd b7       	in	r28, 0x3d	; 61
     cda:	de b7       	in	r29, 0x3e	; 62
     cdc:	27 97       	sbiw	r28, 0x07	; 7
     cde:	0f b6       	in	r0, 0x3f	; 63
     ce0:	f8 94       	cli
     ce2:	de bf       	out	0x3e, r29	; 62
     ce4:	0f be       	out	0x3f, r0	; 63
     ce6:	cd bf       	out	0x3d, r28	; 61
	char str[] = {' ',' ',' ',' ',0xB0,'C',0};
     ce8:	87 e0       	ldi	r24, 0x07	; 7
     cea:	e5 e8       	ldi	r30, 0x85	; 133
     cec:	f0 e0       	ldi	r31, 0x00	; 0
     cee:	de 01       	movw	r26, r28
     cf0:	11 96       	adiw	r26, 0x01	; 1
     cf2:	01 90       	ld	r0, Z+
     cf4:	0d 92       	st	X+, r0
     cf6:	8a 95       	dec	r24
     cf8:	e1 f7       	brne	.-8      	; 0xcf2 <mf_realTempDo+0x1e>
	// Output ADC result to LED
	u16toa_align_right(adc_celsius,str,0x80 | 4,' ');
     cfa:	20 e2       	ldi	r18, 0x20	; 32
     cfc:	44 e8       	ldi	r20, 0x84	; 132
     cfe:	be 01       	movw	r22, r28
     d00:	6f 5f       	subi	r22, 0xFF	; 255
     d02:	7f 4f       	sbci	r23, 0xFF	; 255
     d04:	80 91 1f 01 	lds	r24, 0x011F
     d08:	90 91 20 01 	lds	r25, 0x0120
     d0c:	86 d2       	rcall	.+1292   	; 0x121a <u16toa_align_right>
	printLedBuffer(0,str);
     d0e:	be 01       	movw	r22, r28
     d10:	6f 5f       	subi	r22, 0xFF	; 255
     d12:	7f 4f       	sbci	r23, 0xFF	; 255
     d14:	80 e0       	ldi	r24, 0x00	; 0
     d16:	b8 de       	rcall	.-656    	; 0xa88 <printLedBuffer>
}
     d18:	27 96       	adiw	r28, 0x07	; 7
     d1a:	0f b6       	in	r0, 0x3f	; 63
     d1c:	f8 94       	cli
     d1e:	de bf       	out	0x3e, r29	; 62
     d20:	0f be       	out	0x3f, r0	; 63
     d22:	cd bf       	out	0x3d, r28	; 61
     d24:	df 91       	pop	r29
     d26:	cf 91       	pop	r28
     d28:	08 95       	ret

00000d2a <mf_calib2Do>:
}

//---------------------------------------------//

void mf_calib2Do(void)
{
     d2a:	cf 93       	push	r28
     d2c:	df 93       	push	r29
     d2e:	cd b7       	in	r28, 0x3d	; 61
     d30:	de b7       	in	r29, 0x3e	; 62
     d32:	27 97       	sbiw	r28, 0x07	; 7
     d34:	0f b6       	in	r0, 0x3f	; 63
     d36:	f8 94       	cli
     d38:	de bf       	out	0x3e, r29	; 62
     d3a:	0f be       	out	0x3f, r0	; 63
     d3c:	cd bf       	out	0x3d, r28	; 61
	char str[] = {'P','2',' ',' ',' ',' ',0};
     d3e:	87 e0       	ldi	r24, 0x07	; 7
     d40:	ec e8       	ldi	r30, 0x8C	; 140
     d42:	f0 e0       	ldi	r31, 0x00	; 0
     d44:	de 01       	movw	r26, r28
     d46:	11 96       	adiw	r26, 0x01	; 1
     d48:	01 90       	ld	r0, Z+
     d4a:	0d 92       	st	X+, r0
     d4c:	8a 95       	dec	r24
     d4e:	e1 f7       	brne	.-8      	; 0xd48 <mf_calib2Do+0x1e>
	
	
	if (button_state & (BD_UP | BR_UP))
     d50:	80 91 d2 00 	lds	r24, 0x00D2
     d54:	90 91 d3 00 	lds	r25, 0x00D3
     d58:	9c 01       	movw	r18, r24
     d5a:	22 70       	andi	r18, 0x02	; 2
     d5c:	34 70       	andi	r19, 0x04	; 4
     d5e:	23 2b       	or	r18, r19
     d60:	31 f0       	breq	.+12     	; 0xd6e <mf_calib2Do+0x44>
	{
		if (cpoint2_copy < MAX_CALIB_TEMP)
     d62:	80 91 f2 00 	lds	r24, 0x00F2
     d66:	8a 3f       	cpi	r24, 0xFA	; 250
     d68:	68 f4       	brcc	.+26     	; 0xd84 <mf_calib2Do+0x5a>
		cpoint2_copy += 1;
     d6a:	8f 5f       	subi	r24, 0xFF	; 255
     d6c:	09 c0       	rjmp	.+18     	; 0xd80 <mf_calib2Do+0x56>
	}
	else if (button_state & (BD_DOWN | BR_DOWN))
     d6e:	84 70       	andi	r24, 0x04	; 4
     d70:	98 70       	andi	r25, 0x08	; 8
     d72:	89 2b       	or	r24, r25
     d74:	39 f0       	breq	.+14     	; 0xd84 <mf_calib2Do+0x5a>
	{
		if (cpoint2_copy > MIN_CALIB_TEMP)
     d76:	80 91 f2 00 	lds	r24, 0x00F2
     d7a:	8b 30       	cpi	r24, 0x0B	; 11
     d7c:	18 f0       	brcs	.+6      	; 0xd84 <mf_calib2Do+0x5a>
		cpoint2_copy -= 1;
     d7e:	81 50       	subi	r24, 0x01	; 1
     d80:	80 93 f2 00 	sts	0x00F2, r24
	}
	
	if (userTimer.FA_GE)
     d84:	80 91 ed 00 	lds	r24, 0x00ED
     d88:	84 ff       	sbrs	r24, 4
     d8a:	09 c0       	rjmp	.+18     	; 0xd9e <mf_calib2Do+0x74>
	{
		u16toa_align_right(cpoint2_copy,str + 3,0x80 | 3,' ');
     d8c:	20 e2       	ldi	r18, 0x20	; 32
     d8e:	43 e8       	ldi	r20, 0x83	; 131
     d90:	be 01       	movw	r22, r28
     d92:	6c 5f       	subi	r22, 0xFC	; 252
     d94:	7f 4f       	sbci	r23, 0xFF	; 255
     d96:	80 91 f2 00 	lds	r24, 0x00F2
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	3e d2       	rcall	.+1148   	; 0x121a <u16toa_align_right>
	}
	
	printLedBuffer(0,str);
     d9e:	be 01       	movw	r22, r28
     da0:	6f 5f       	subi	r22, 0xFF	; 255
     da2:	7f 4f       	sbci	r23, 0xFF	; 255
     da4:	80 e0       	ldi	r24, 0x00	; 0
     da6:	70 de       	rcall	.-800    	; 0xa88 <printLedBuffer>
	
	resetAutoPowerOffCounter();
     da8:	9d d5       	rcall	.+2874   	; 0x18e4 <resetAutoPowerOffCounter>
}
     daa:	27 96       	adiw	r28, 0x07	; 7
     dac:	0f b6       	in	r0, 0x3f	; 63
     dae:	f8 94       	cli
     db0:	de bf       	out	0x3e, r29	; 62
     db2:	0f be       	out	0x3f, r0	; 63
     db4:	cd bf       	out	0x3d, r28	; 61
     db6:	df 91       	pop	r29
     db8:	cf 91       	pop	r28
     dba:	08 95       	ret

00000dbc <mf_calib1Do>:
	cpoint1_copy = cpoint1;
	cpoint2_copy = cpoint2;
}

void mf_calib1Do(void)
{
     dbc:	cf 93       	push	r28
     dbe:	df 93       	push	r29
     dc0:	cd b7       	in	r28, 0x3d	; 61
     dc2:	de b7       	in	r29, 0x3e	; 62
     dc4:	27 97       	sbiw	r28, 0x07	; 7
     dc6:	0f b6       	in	r0, 0x3f	; 63
     dc8:	f8 94       	cli
     dca:	de bf       	out	0x3e, r29	; 62
     dcc:	0f be       	out	0x3f, r0	; 63
     dce:	cd bf       	out	0x3d, r28	; 61
	char str[] = {'P','1',' ',' ',' ',' ',0};
     dd0:	87 e0       	ldi	r24, 0x07	; 7
     dd2:	e3 e9       	ldi	r30, 0x93	; 147
     dd4:	f0 e0       	ldi	r31, 0x00	; 0
     dd6:	de 01       	movw	r26, r28
     dd8:	11 96       	adiw	r26, 0x01	; 1
     dda:	01 90       	ld	r0, Z+
     ddc:	0d 92       	st	X+, r0
     dde:	8a 95       	dec	r24
     de0:	e1 f7       	brne	.-8      	; 0xdda <mf_calib1Do+0x1e>
	
	
	if (button_state & (BD_UP | BR_UP))
     de2:	80 91 d2 00 	lds	r24, 0x00D2
     de6:	90 91 d3 00 	lds	r25, 0x00D3
     dea:	9c 01       	movw	r18, r24
     dec:	22 70       	andi	r18, 0x02	; 2
     dee:	34 70       	andi	r19, 0x04	; 4
     df0:	23 2b       	or	r18, r19
     df2:	31 f0       	breq	.+12     	; 0xe00 <mf_calib1Do+0x44>
	{
		if (cpoint1_copy < MAX_CALIB_TEMP)
     df4:	80 91 f1 00 	lds	r24, 0x00F1
     df8:	8a 3f       	cpi	r24, 0xFA	; 250
     dfa:	68 f4       	brcc	.+26     	; 0xe16 <mf_calib1Do+0x5a>
			cpoint1_copy += 1;
     dfc:	8f 5f       	subi	r24, 0xFF	; 255
     dfe:	09 c0       	rjmp	.+18     	; 0xe12 <mf_calib1Do+0x56>
	}
	else if (button_state & (BD_DOWN | BR_DOWN))
     e00:	84 70       	andi	r24, 0x04	; 4
     e02:	98 70       	andi	r25, 0x08	; 8
     e04:	89 2b       	or	r24, r25
     e06:	39 f0       	breq	.+14     	; 0xe16 <mf_calib1Do+0x5a>
	{
		if (cpoint1_copy > MIN_CALIB_TEMP)
     e08:	80 91 f1 00 	lds	r24, 0x00F1
     e0c:	8b 30       	cpi	r24, 0x0B	; 11
     e0e:	18 f0       	brcs	.+6      	; 0xe16 <mf_calib1Do+0x5a>
			cpoint1_copy -= 1;
     e10:	81 50       	subi	r24, 0x01	; 1
     e12:	80 93 f1 00 	sts	0x00F1, r24
	}
	
	if (userTimer.FA_GE)
     e16:	80 91 ed 00 	lds	r24, 0x00ED
     e1a:	84 ff       	sbrs	r24, 4
     e1c:	09 c0       	rjmp	.+18     	; 0xe30 <mf_calib1Do+0x74>
	{
		u16toa_align_right(cpoint1_copy,str + 3,0x80 | 3,' ');
     e1e:	20 e2       	ldi	r18, 0x20	; 32
     e20:	43 e8       	ldi	r20, 0x83	; 131
     e22:	be 01       	movw	r22, r28
     e24:	6c 5f       	subi	r22, 0xFC	; 252
     e26:	7f 4f       	sbci	r23, 0xFF	; 255
     e28:	80 91 f1 00 	lds	r24, 0x00F1
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	f5 d1       	rcall	.+1002   	; 0x121a <u16toa_align_right>
	}
	
	printLedBuffer(0,str);
     e30:	be 01       	movw	r22, r28
     e32:	6f 5f       	subi	r22, 0xFF	; 255
     e34:	7f 4f       	sbci	r23, 0xFF	; 255
     e36:	80 e0       	ldi	r24, 0x00	; 0
     e38:	27 de       	rcall	.-946    	; 0xa88 <printLedBuffer>
	
	resetAutoPowerOffCounter();
     e3a:	54 d5       	rcall	.+2728   	; 0x18e4 <resetAutoPowerOffCounter>
}
     e3c:	27 96       	adiw	r28, 0x07	; 7
     e3e:	0f b6       	in	r0, 0x3f	; 63
     e40:	f8 94       	cli
     e42:	de bf       	out	0x3e, r29	; 62
     e44:	0f be       	out	0x3f, r0	; 63
     e46:	cd bf       	out	0x3d, r28	; 61
     e48:	df 91       	pop	r29
     e4a:	cf 91       	pop	r28
     e4c:	08 95       	ret

00000e4e <mf_actpoffSelect>:



void mf_actpoffSelect(void)
{
	clearExtraLeds(LED_TEMP | LED_ROLL);
     e4e:	83 e0       	ldi	r24, 0x03	; 3
     e50:	67 de       	rcall	.-818    	; 0xb20 <clearExtraLeds>
	autoPowerOffState = AUTO_POFF_ACTIVE;
     e52:	81 e0       	ldi	r24, 0x01	; 1
     e54:	80 93 02 01 	sts	0x0102, r24
     e58:	08 95       	ret

00000e5a <mf_leafSelect>:

// Select and exit functions, common for leaf menu items 

void mf_leafSelect(void)
{
	clearExtraLeds(LED_TEMP | LED_ROLL);
     e5a:	83 e0       	ldi	r24, 0x03	; 3
     e5c:	61 de       	rcall	.-830    	; 0xb20 <clearExtraLeds>
	userTimer.FA_GE = 1;	
     e5e:	ed ee       	ldi	r30, 0xED	; 237
     e60:	f0 e0       	ldi	r31, 0x00	; 0
     e62:	80 81       	ld	r24, Z
     e64:	80 61       	ori	r24, 0x10	; 16
     e66:	80 83       	st	Z, r24
     e68:	08 95       	ret

00000e6a <mf_calibSelect>:

//---------------------------------------------//

void mf_calibSelect(void)
{
	mf_leafSelect();
     e6a:	f7 df       	rcall	.-18     	; 0xe5a <mf_leafSelect>
	cpoint1_copy = cpoint1;
     e6c:	80 91 21 01 	lds	r24, 0x0121
     e70:	80 93 f1 00 	sts	0x00F1, r24
	cpoint2_copy = cpoint2;
     e74:	80 91 41 01 	lds	r24, 0x0141
     e78:	80 93 f2 00 	sts	0x00F2, r24
     e7c:	08 95       	ret

00000e7e <mf_rollLeave>:
	printLedBuffer(0,str);
}

void mf_rollLeave(void)
{
	clearExtraLeds(LED_ROLL);
     e7e:	82 e0       	ldi	r24, 0x02	; 2
     e80:	4f de       	rcall	.-866    	; 0xb20 <clearExtraLeds>
	userTimer.Enabled = 0;
     e82:	ed ee       	ldi	r30, 0xED	; 237
     e84:	f0 e0       	ldi	r31, 0x00	; 0
     e86:	80 81       	ld	r24, Z
     e88:	8e 7f       	andi	r24, 0xFE	; 254
     e8a:	80 83       	st	Z, r24
     e8c:	08 95       	ret

00000e8e <mf_setTempSelect>:
//---------------------------------------------//


void mf_setTempSelect(void)
{
	clearExtraLeds(LED_TEMP);
     e8e:	81 e0       	ldi	r24, 0x01	; 1
     e90:	47 de       	rcall	.-882    	; 0xb20 <clearExtraLeds>
	mf_leafSelectAct();		// setup and start timer
     e92:	96 ce       	rjmp	.-724    	; 0xbc0 <mf_leafSelectAct>

00000e94 <mf_realTempLeave>:
	printLedBuffer(0,str);
}

void mf_realTempLeave(void)
{
	clearExtraLeds(LED_TEMP);
     e94:	81 e0       	ldi	r24, 0x01	; 1
     e96:	44 ce       	rjmp	.-888    	; 0xb20 <clearExtraLeds>

00000e98 <mf_sndenDo>:

//---------------------------------------------//


void mf_sndenDo(void)
{
     e98:	cf 93       	push	r28
     e9a:	df 93       	push	r29
     e9c:	cd b7       	in	r28, 0x3d	; 61
     e9e:	de b7       	in	r29, 0x3e	; 62
     ea0:	27 97       	sbiw	r28, 0x07	; 7
     ea2:	0f b6       	in	r0, 0x3f	; 63
     ea4:	f8 94       	cli
     ea6:	de bf       	out	0x3e, r29	; 62
     ea8:	0f be       	out	0x3f, r0	; 63
     eaa:	cd bf       	out	0x3d, r28	; 61
	char str[] = {'S','N','D',' ',' ',' ',0};
     eac:	87 e0       	ldi	r24, 0x07	; 7
     eae:	ea e9       	ldi	r30, 0x9A	; 154
     eb0:	f0 e0       	ldi	r31, 0x00	; 0
     eb2:	de 01       	movw	r26, r28
     eb4:	11 96       	adiw	r26, 0x01	; 1
     eb6:	01 90       	ld	r0, Z+
     eb8:	0d 92       	st	X+, r0
     eba:	8a 95       	dec	r24
     ebc:	e1 f7       	brne	.-8      	; 0xeb6 <mf_sndenDo+0x1e>
		
	if (button_state & (BD_UP | BD_DOWN))
     ebe:	80 91 d2 00 	lds	r24, 0x00D2
     ec2:	90 91 d3 00 	lds	r25, 0x00D3
     ec6:	86 70       	andi	r24, 0x06	; 6
     ec8:	99 27       	eor	r25, r25
     eca:	89 2b       	or	r24, r25
     ecc:	49 f0       	breq	.+18     	; 0xee0 <mf_sndenDo+0x48>
	{
		sound_enable = !sound_enable;
     ece:	81 e0       	ldi	r24, 0x01	; 1
     ed0:	90 91 2b 01 	lds	r25, 0x012B
     ed4:	91 11       	cpse	r25, r1
     ed6:	80 e0       	ldi	r24, 0x00	; 0
     ed8:	80 93 2b 01 	sts	0x012B, r24
//	 Restarts menu state timeout
//	Should be used in RUN function when control buttons are pressed.
//-----------------------------------------------------------------//
static void restartMenuTimer(void)
{
	menuTimer.Timer = 0;
     edc:	10 92 75 00 	sts	0x0075, r1
	{
		sound_enable = !sound_enable;
		restartMenuTimer();
	}			
		
	if (userTimer.FA_GE)
     ee0:	80 91 ed 00 	lds	r24, 0x00ED
     ee4:	84 ff       	sbrs	r24, 4
     ee6:	0d c0       	rjmp	.+26     	; 0xf02 <mf_sndenDo+0x6a>
	{
		if (sound_enable)		
     ee8:	80 91 2b 01 	lds	r24, 0x012B
     eec:	88 23       	and	r24, r24
     eee:	21 f0       	breq	.+8      	; 0xef8 <mf_sndenDo+0x60>
		{
			str[4] = 'O';
     ef0:	8f e4       	ldi	r24, 0x4F	; 79
     ef2:	8d 83       	std	Y+5, r24	; 0x05
			str[5] = 'N';
     ef4:	8e e4       	ldi	r24, 0x4E	; 78
     ef6:	04 c0       	rjmp	.+8      	; 0xf00 <mf_sndenDo+0x68>
		}
		else
		{
			str[3] = 'O';
     ef8:	8f e4       	ldi	r24, 0x4F	; 79
     efa:	8c 83       	std	Y+4, r24	; 0x04
			str[4] = 'F';
     efc:	86 e4       	ldi	r24, 0x46	; 70
     efe:	8d 83       	std	Y+5, r24	; 0x05
			str[5] = 'F';
     f00:	8e 83       	std	Y+6, r24	; 0x06
		}			
	}
		
	printLedBuffer(0,str);
     f02:	be 01       	movw	r22, r28
     f04:	6f 5f       	subi	r22, 0xFF	; 255
     f06:	7f 4f       	sbci	r23, 0xFF	; 255
     f08:	80 e0       	ldi	r24, 0x00	; 0
     f0a:	be dd       	rcall	.-1156   	; 0xa88 <printLedBuffer>
	setComma(2);
     f0c:	82 e0       	ldi	r24, 0x02	; 2
     f0e:	f6 dd       	rcall	.-1044   	; 0xafc <setComma>
}
     f10:	27 96       	adiw	r28, 0x07	; 7
     f12:	0f b6       	in	r0, 0x3f	; 63
     f14:	f8 94       	cli
     f16:	de bf       	out	0x3e, r29	; 62
     f18:	0f be       	out	0x3f, r0	; 63
     f1a:	cd bf       	out	0x3d, r28	; 61
     f1c:	df 91       	pop	r29
     f1e:	cf 91       	pop	r28
     f20:	08 95       	ret

00000f22 <mf_rollDo>:
	setExtraLeds(LED_ROLL);
	mf_leafSelectAct();		// setup and start timer
}

void mf_rollDo(void)
{
     f22:	cf 93       	push	r28
     f24:	df 93       	push	r29
     f26:	cd b7       	in	r28, 0x3d	; 61
     f28:	de b7       	in	r29, 0x3e	; 62
     f2a:	27 97       	sbiw	r28, 0x07	; 7
     f2c:	0f b6       	in	r0, 0x3f	; 63
     f2e:	f8 94       	cli
     f30:	de bf       	out	0x3e, r29	; 62
     f32:	0f be       	out	0x3f, r0	; 63
     f34:	cd bf       	out	0x3d, r28	; 61
	char str[] = {' ',' ',' ',' ',' ',' ',0};
     f36:	87 e0       	ldi	r24, 0x07	; 7
     f38:	e1 ea       	ldi	r30, 0xA1	; 161
     f3a:	f0 e0       	ldi	r31, 0x00	; 0
     f3c:	de 01       	movw	r26, r28
     f3e:	11 96       	adiw	r26, 0x01	; 1
     f40:	01 90       	ld	r0, Z+
     f42:	0d 92       	st	X+, r0
     f44:	8a 95       	dec	r24
     f46:	e1 f7       	brne	.-8      	; 0xf40 <mf_rollDo+0x1e>
		
	if (button_state & (BD_UP | BR_UP))
     f48:	80 91 d2 00 	lds	r24, 0x00D2
     f4c:	90 91 d3 00 	lds	r25, 0x00D3
     f50:	9c 01       	movw	r18, r24
     f52:	22 70       	andi	r18, 0x02	; 2
     f54:	34 70       	andi	r19, 0x04	; 4
     f56:	40 91 2e 01 	lds	r20, 0x012E
     f5a:	23 2b       	or	r18, r19
     f5c:	21 f0       	breq	.+8      	; 0xf66 <mf_rollDo+0x44>
	{
		if (rollCycleSet < MAX_ROLL_CYCLES)
     f5e:	43 36       	cpi	r20, 0x63	; 99
     f60:	58 f4       	brcc	.+22     	; 0xf78 <mf_rollDo+0x56>
		rollCycleSet += 1;
     f62:	4f 5f       	subi	r20, 0xFF	; 255
     f64:	07 c0       	rjmp	.+14     	; 0xf74 <mf_rollDo+0x52>
	}
	else if (button_state & (BD_DOWN | BR_DOWN))
     f66:	84 70       	andi	r24, 0x04	; 4
     f68:	98 70       	andi	r25, 0x08	; 8
     f6a:	89 2b       	or	r24, r25
     f6c:	29 f0       	breq	.+10     	; 0xf78 <mf_rollDo+0x56>
	{
		if (rollCycleSet > MIN_ROLL_CYCLES)
     f6e:	42 30       	cpi	r20, 0x02	; 2
     f70:	18 f0       	brcs	.+6      	; 0xf78 <mf_rollDo+0x56>
		rollCycleSet -= 1;
     f72:	41 50       	subi	r20, 0x01	; 1
     f74:	40 93 2e 01 	sts	0x012E, r20
	}	
		
	u16toa_align_right(rollCycleSet,str + 4,0x80 | 2,' ');
     f78:	20 e2       	ldi	r18, 0x20	; 32
     f7a:	42 e8       	ldi	r20, 0x82	; 130
     f7c:	be 01       	movw	r22, r28
     f7e:	6b 5f       	subi	r22, 0xFB	; 251
     f80:	7f 4f       	sbci	r23, 0xFF	; 255
     f82:	80 91 2e 01 	lds	r24, 0x012E
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	48 d1       	rcall	.+656    	; 0x121a <u16toa_align_right>
	
	if ((!(rollState & ROLL_CYCLE)) || (userTimer.FA_GE))
     f8a:	80 91 f4 00 	lds	r24, 0x00F4
     f8e:	82 ff       	sbrs	r24, 2
     f90:	04 c0       	rjmp	.+8      	; 0xf9a <mf_rollDo+0x78>
     f92:	80 91 ed 00 	lds	r24, 0x00ED
     f96:	84 ff       	sbrs	r24, 4
     f98:	09 c0       	rjmp	.+18     	; 0xfac <mf_rollDo+0x8a>
	{
		u16toa_align_right(activeRollCycle,str + 1,0x80 | 2,' ');
     f9a:	20 e2       	ldi	r18, 0x20	; 32
     f9c:	42 e8       	ldi	r20, 0x82	; 130
     f9e:	be 01       	movw	r22, r28
     fa0:	6e 5f       	subi	r22, 0xFE	; 254
     fa2:	7f 4f       	sbci	r23, 0xFF	; 255
     fa4:	80 91 f3 00 	lds	r24, 0x00F3
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	37 d1       	rcall	.+622    	; 0x121a <u16toa_align_right>
	}
	
	str[0] = 0;
     fac:	19 82       	std	Y+1, r1	; 0x01
	if (isTopPointValid())
     fae:	f2 d2       	rcall	.+1508   	; 0x1594 <isTopPointValid>
     fb0:	88 23       	and	r24, r24
     fb2:	19 f0       	breq	.+6      	; 0xfba <mf_rollDo+0x98>
		str[0] |= SEGA;
     fb4:	89 81       	ldd	r24, Y+1	; 0x01
     fb6:	81 60       	ori	r24, 0x01	; 1
     fb8:	89 83       	std	Y+1, r24	; 0x01
	if (isBottomPointValid())
     fba:	fc d2       	rcall	.+1528   	; 0x15b4 <isBottomPointValid>
     fbc:	88 23       	and	r24, r24
     fbe:	19 f0       	breq	.+6      	; 0xfc6 <mf_rollDo+0xa4>
		str[0] |= SEGD;
     fc0:	89 81       	ldd	r24, Y+1	; 0x01
     fc2:	88 60       	ori	r24, 0x08	; 8
     fc4:	89 83       	std	Y+1, r24	; 0x01
	if (str[0] == 0)
     fc6:	89 81       	ldd	r24, Y+1	; 0x01
     fc8:	81 11       	cpse	r24, r1
     fca:	02 c0       	rjmp	.+4      	; 0xfd0 <mf_rollDo+0xae>
		str[0] = ' ';
     fcc:	80 e2       	ldi	r24, 0x20	; 32
     fce:	89 83       	std	Y+1, r24	; 0x01
		
	printLedBuffer(0,str);
     fd0:	be 01       	movw	r22, r28
     fd2:	6f 5f       	subi	r22, 0xFF	; 255
     fd4:	7f 4f       	sbci	r23, 0xFF	; 255
     fd6:	80 e0       	ldi	r24, 0x00	; 0
     fd8:	57 dd       	rcall	.-1362   	; 0xa88 <printLedBuffer>
}
     fda:	27 96       	adiw	r28, 0x07	; 7
     fdc:	0f b6       	in	r0, 0x3f	; 63
     fde:	f8 94       	cli
     fe0:	de bf       	out	0x3e, r29	; 62
     fe2:	0f be       	out	0x3f, r0	; 63
     fe4:	cd bf       	out	0x3d, r28	; 61
     fe6:	df 91       	pop	r29
     fe8:	cf 91       	pop	r28
     fea:	08 95       	ret

00000fec <mf_rollSelect>:
//---------------------------------------------//
//---------------------------------------------//

void mf_rollSelect(void)
{
	setExtraLeds(LED_ROLL);
     fec:	82 e0       	ldi	r24, 0x02	; 2
     fee:	92 dd       	rcall	.-1244   	; 0xb14 <setExtraLeds>
	mf_leafSelectAct();		// setup and start timer
     ff0:	e7 cd       	rjmp	.-1074   	; 0xbc0 <mf_leafSelectAct>

00000ff2 <mf_setTempDo>:
	clearExtraLeds(LED_TEMP);
	mf_leafSelectAct();		// setup and start timer
}

void mf_setTempDo(void)
{
     ff2:	cf 93       	push	r28
     ff4:	df 93       	push	r29
     ff6:	cd b7       	in	r28, 0x3d	; 61
     ff8:	de b7       	in	r29, 0x3e	; 62
     ffa:	27 97       	sbiw	r28, 0x07	; 7
     ffc:	0f b6       	in	r0, 0x3f	; 63
     ffe:	f8 94       	cli
    1000:	de bf       	out	0x3e, r29	; 62
    1002:	0f be       	out	0x3f, r0	; 63
    1004:	cd bf       	out	0x3d, r28	; 61
	char str[] = {' ',' ',' ',' ',0xB0,'C',0};
    1006:	87 e0       	ldi	r24, 0x07	; 7
    1008:	e5 e8       	ldi	r30, 0x85	; 133
    100a:	f0 e0       	ldi	r31, 0x00	; 0
    100c:	de 01       	movw	r26, r28
    100e:	11 96       	adiw	r26, 0x01	; 1
    1010:	01 90       	ld	r0, Z+
    1012:	0d 92       	st	X+, r0
    1014:	8a 95       	dec	r24
    1016:	e1 f7       	brne	.-8      	; 0x1010 <mf_setTempDo+0x1e>

	
	if (button_state & (BD_UP | BR_UP))
    1018:	20 91 d2 00 	lds	r18, 0x00D2
    101c:	30 91 d3 00 	lds	r19, 0x00D3
    1020:	a9 01       	movw	r20, r18
    1022:	42 70       	andi	r20, 0x02	; 2
    1024:	54 70       	andi	r21, 0x04	; 4
    1026:	80 91 29 01 	lds	r24, 0x0129
    102a:	90 91 2a 01 	lds	r25, 0x012A
    102e:	45 2b       	or	r20, r21
    1030:	29 f0       	breq	.+10     	; 0x103c <mf_setTempDo+0x4a>
	{
		if (setup_temp_value < MAX_SET_TEMP)
    1032:	82 3d       	cpi	r24, 0xD2	; 210
    1034:	91 05       	cpc	r25, r1
    1036:	70 f4       	brcc	.+28     	; 0x1054 <mf_setTempDo+0x62>
			setup_temp_value += 5;
    1038:	05 96       	adiw	r24, 0x05	; 5
    103a:	08 c0       	rjmp	.+16     	; 0x104c <mf_setTempDo+0x5a>
		restartMenuTimer();
	}
	else if (button_state & (BD_DOWN | BR_DOWN))
    103c:	24 70       	andi	r18, 0x04	; 4
    103e:	38 70       	andi	r19, 0x08	; 8
    1040:	23 2b       	or	r18, r19
    1042:	51 f0       	breq	.+20     	; 0x1058 <mf_setTempDo+0x66>
	{
		if (setup_temp_value > MIN_SET_TEMP)
    1044:	8f 31       	cpi	r24, 0x1F	; 31
    1046:	91 05       	cpc	r25, r1
    1048:	28 f0       	brcs	.+10     	; 0x1054 <mf_setTempDo+0x62>
			setup_temp_value -= 5;
    104a:	05 97       	sbiw	r24, 0x05	; 5
    104c:	90 93 2a 01 	sts	0x012A, r25
    1050:	80 93 29 01 	sts	0x0129, r24
//	 Restarts menu state timeout
//	Should be used in RUN function when control buttons are pressed.
//-----------------------------------------------------------------//
static void restartMenuTimer(void)
{
	menuTimer.Timer = 0;
    1054:	10 92 75 00 	sts	0x0075, r1
			setup_temp_value -= 5;
		restartMenuTimer();
	}					
		
	// Output ADC result to LED
	u16toa_align_right(setup_temp_value,str,0x80 | 4,' ');
    1058:	20 e2       	ldi	r18, 0x20	; 32
    105a:	44 e8       	ldi	r20, 0x84	; 132
    105c:	be 01       	movw	r22, r28
    105e:	6f 5f       	subi	r22, 0xFF	; 255
    1060:	7f 4f       	sbci	r23, 0xFF	; 255
    1062:	80 91 29 01 	lds	r24, 0x0129
    1066:	90 91 2a 01 	lds	r25, 0x012A
    106a:	d7 d0       	rcall	.+430    	; 0x121a <u16toa_align_right>
	printLedBuffer(0,str);
    106c:	be 01       	movw	r22, r28
    106e:	6f 5f       	subi	r22, 0xFF	; 255
    1070:	7f 4f       	sbci	r23, 0xFF	; 255
    1072:	80 e0       	ldi	r24, 0x00	; 0
    1074:	09 dd       	rcall	.-1518   	; 0xa88 <printLedBuffer>
	
	if (userTimer.FA_GE)
    1076:	80 91 ed 00 	lds	r24, 0x00ED
    107a:	84 ff       	sbrs	r24, 4
    107c:	03 c0       	rjmp	.+6      	; 0x1084 <mf_setTempDo+0x92>
		setExtraLeds(LED_TEMP);
    107e:	81 e0       	ldi	r24, 0x01	; 1
    1080:	49 dd       	rcall	.-1390   	; 0xb14 <setExtraLeds>
    1082:	02 c0       	rjmp	.+4      	; 0x1088 <mf_setTempDo+0x96>
	else
		clearExtraLeds(LED_TEMP);
    1084:	81 e0       	ldi	r24, 0x01	; 1
    1086:	4c dd       	rcall	.-1384   	; 0xb20 <clearExtraLeds>
}
    1088:	27 96       	adiw	r28, 0x07	; 7
    108a:	0f b6       	in	r0, 0x3f	; 63
    108c:	f8 94       	cli
    108e:	de bf       	out	0x3e, r29	; 62
    1090:	0f be       	out	0x3f, r0	; 63
    1092:	cd bf       	out	0x3d, r28	; 61
    1094:	df 91       	pop	r29
    1096:	cf 91       	pop	r28
    1098:	08 95       	ret

0000109a <mf_realTempSelect>:
//=================================================================//


void mf_realTempSelect(void)
{
	setExtraLeds(LED_TEMP);
    109a:	81 e0       	ldi	r24, 0x01	; 1
    109c:	3b cd       	rjmp	.-1418   	; 0xb14 <setExtraLeds>

0000109e <getMenuFunctionRecord.constprop.0>:
//	Arguments:
//		menuItemID - ID of an item
//		menuRecord - pointer to function structure to fill
//	Output:
//-----------------------------------------------------------------//
static void getMenuFunctionRecord(uint8_t menuItemID, MenuFunctionRecord* menuRecord )
    109e:	1f 93       	push	r17
    10a0:	cf 93       	push	r28
    10a2:	df 93       	push	r29
    10a4:	c0 e0       	ldi	r28, 0x00	; 0
    10a6:	d0 e0       	ldi	r29, 0x00	; 0
{
	uint8_t i;
	for (i = 0; i < sizeof(menuFunctionSet)/sizeof(MenuFunctionRecord); i++  )
	{
		readMenuRecord(&menuFunctionSet[i], menuRecord);
    10a8:	17 e0       	ldi	r17, 0x07	; 7
    10aa:	1c 9f       	mul	r17, r28
    10ac:	90 01       	movw	r18, r0
    10ae:	1d 9f       	mul	r17, r29
    10b0:	30 0d       	add	r19, r0
    10b2:	11 24       	eor	r1, r1
    10b4:	2a 5d       	subi	r18, 0xDA	; 218
    10b6:	3f 4f       	sbci	r19, 0xFF	; 255
//		fRecPtr		- address of the function record in the FLASH
//		resPtr		- address of the record to fill in the SRAM
//-----------------------------------------------------------------//
static inline void readMenuRecord(const MenuFunctionRecord* fRecPtr, MenuFunctionRecord* resPtr )
{
	resPtr->Item = pgm_read_byte(&fRecPtr->Item);
    10b8:	f9 01       	movw	r30, r18
    10ba:	94 91       	lpm	r25, Z
	resPtr->SelectFunction = (FuncPtr)pgm_read_word(&fRecPtr->SelectFunction);
    10bc:	31 96       	adiw	r30, 0x01	; 1
    10be:	a5 91       	lpm	r26, Z+
    10c0:	b4 91       	lpm	r27, Z
	resPtr->RunFunction = (FuncPtr)pgm_read_word(&fRecPtr->RunFunction);
    10c2:	f9 01       	movw	r30, r18
    10c4:	33 96       	adiw	r30, 0x03	; 3
    10c6:	65 91       	lpm	r22, Z+
    10c8:	74 91       	lpm	r23, Z
	resPtr->LeaveFunction = (FuncPtr)pgm_read_word(&fRecPtr->LeaveFunction);
    10ca:	2b 5f       	subi	r18, 0xFB	; 251
    10cc:	3f 4f       	sbci	r19, 0xFF	; 255
    10ce:	f9 01       	movw	r30, r18
    10d0:	45 91       	lpm	r20, Z+
    10d2:	54 91       	lpm	r21, Z
{
	uint8_t i;
	for (i = 0; i < sizeof(menuFunctionSet)/sizeof(MenuFunctionRecord); i++  )
	{
		readMenuRecord(&menuFunctionSet[i], menuRecord);
		if (menuRecord->Item == menuItemID)
    10d4:	98 13       	cpse	r25, r24
    10d6:	03 c0       	rjmp	.+6      	; 0x10de <getMenuFunctionRecord.constprop.0+0x40>
    10d8:	80 93 e6 00 	sts	0x00E6, r24
    10dc:	06 c0       	rjmp	.+12     	; 0x10ea <getMenuFunctionRecord.constprop.0+0x4c>
    10de:	21 96       	adiw	r28, 0x01	; 1
//	Output:
//-----------------------------------------------------------------//
static void getMenuFunctionRecord(uint8_t menuItemID, MenuFunctionRecord* menuRecord )
{
	uint8_t i;
	for (i = 0; i < sizeof(menuFunctionSet)/sizeof(MenuFunctionRecord); i++  )
    10e0:	ce 30       	cpi	r28, 0x0E	; 14
    10e2:	d1 05       	cpc	r29, r1
    10e4:	11 f7       	brne	.-60     	; 0x10aa <getMenuFunctionRecord.constprop.0+0xc>
    10e6:	90 93 e6 00 	sts	0x00E6, r25
    10ea:	a0 93 e7 00 	sts	0x00E7, r26
    10ee:	b0 93 e8 00 	sts	0x00E8, r27
    10f2:	60 93 e9 00 	sts	0x00E9, r22
    10f6:	70 93 ea 00 	sts	0x00EA, r23
    10fa:	40 93 eb 00 	sts	0x00EB, r20
    10fe:	50 93 ec 00 	sts	0x00EC, r21
	{
		readMenuRecord(&menuFunctionSet[i], menuRecord);
		if (menuRecord->Item == menuItemID)
			break;
	}
}
    1102:	df 91       	pop	r29
    1104:	cf 91       	pop	r28
    1106:	1f 91       	pop	r17
    1108:	08 95       	ret

0000110a <InitMenu>:
//	Menu initialization
//	Call this function at start of your program before processMenu()
//-----------------------------------------------------------------//
void InitMenu(void)
{
	selectedMenuItemID = mi_REALTEMP;
    110a:	81 e0       	ldi	r24, 0x01	; 1
    110c:	80 93 e5 00 	sts	0x00E5, r24
	getMenuFunctionRecord(selectedMenuItemID, &selectedMenuFunctionRecord);
    1110:	c6 df       	rcall	.-116    	; 0x109e <getMenuFunctionRecord.constprop.0>
	processItemFunction(selectedMenuFunctionRecord.SelectFunction);
    1112:	80 91 e7 00 	lds	r24, 0x00E7
    1116:	90 91 e8 00 	lds	r25, 0x00E8
    111a:	47 cd       	rjmp	.-1394   	; 0xbaa <processItemFunction>

0000111c <processMenu>:
//	Main menu control, -  state function calls, jumps 
//	between menu states and indication
//	Call this function from main() with a fixed time interval.
//-----------------------------------------------------------------//
void processMenu(void)
{
    111c:	ff 92       	push	r15
    111e:	0f 93       	push	r16
    1120:	1f 93       	push	r17
    1122:	cf 93       	push	r28
    1124:	df 93       	push	r29
	NextItem_t nextItem;
	uint16_t jumpCondition;
	
	processSoftTimer8b(&menuTimer);	
    1126:	84 e7       	ldi	r24, 0x74	; 116
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	84 d3       	rcall	.+1800   	; 0x1834 <processSoftTimer8b>
	
	// Compose jump condition
	jumpCondition = button_state;		
    112c:	40 91 d2 00 	lds	r20, 0x00D2
    1130:	50 91 d3 00 	lds	r21, 0x00D3
	if (menuTimer.FTop)
    1134:	80 91 74 00 	lds	r24, 0x0074
    1138:	85 fd       	sbrc	r24, 5
		jumpCondition |= TMR_EXP;
    113a:	50 68       	ori	r21, 0x80	; 128
	if (minute_counter >= power_off_timeout)
    113c:	90 91 01 01 	lds	r25, 0x0101
    1140:	80 91 3b 01 	lds	r24, 0x013B
    1144:	98 17       	cp	r25, r24
    1146:	08 f0       	brcs	.+2      	; 0x114a <processMenu+0x2e>
		jumpCondition |= GOTO_POFF;
    1148:	50 64       	ori	r21, 0x40	; 64
	
	// Get next menu item according to current state and jump conditions
	nextItem = getNextMenuItem(selectedMenuItemID, jumpCondition);
    114a:	80 91 e5 00 	lds	r24, 0x00E5
    114e:	60 e0       	ldi	r22, 0x00	; 0
    1150:	70 e0       	ldi	r23, 0x00	; 0
	MenuJumpRecord	jRecord;
	uint8_t i;
	
	for (i = 0; i < sizeof(menuJumpSet)/sizeof(MenuJumpRecord); i++  )
	{
		readJumpRecord(&menuJumpSet[i], &jRecord);		// read full jump record
    1152:	95 e0       	ldi	r25, 0x05	; 5
    1154:	96 9f       	mul	r25, r22
    1156:	90 01       	movw	r18, r0
    1158:	97 9f       	mul	r25, r23
    115a:	30 0d       	add	r19, r0
    115c:	11 24       	eor	r1, r1
    115e:	28 57       	subi	r18, 0x78	; 120
    1160:	3f 4f       	sbci	r19, 0xFF	; 255
//		jRecPtr		- address of the jump record in the FLASH
//		resPtr		- address of the record to fill in the SRAM
//-----------------------------------------------------------------//
static inline void readJumpRecord(const MenuJumpRecord* jRecPtr, MenuJumpRecord* resPtr )
{
	resPtr->Item = pgm_read_byte(&jRecPtr->Item);
    1162:	f9 01       	movw	r30, r18
    1164:	14 91       	lpm	r17, Z
	resPtr->JumpCondition = pgm_read_word(&jRecPtr->JumpCondition);
    1166:	31 96       	adiw	r30, 0x01	; 1
    1168:	a5 91       	lpm	r26, Z+
    116a:	b4 91       	lpm	r27, Z
	resPtr->NextItem= pgm_read_byte(&jRecPtr->NextItem);
    116c:	f9 01       	movw	r30, r18
    116e:	33 96       	adiw	r30, 0x03	; 3
    1170:	d4 91       	lpm	r29, Z
	resPtr->Flags= pgm_read_byte(&jRecPtr->Flags);
    1172:	f9 01       	movw	r30, r18
    1174:	34 96       	adiw	r30, 0x04	; 4
    1176:	24 91       	lpm	r18, Z
	uint8_t i;
	
	for (i = 0; i < sizeof(menuJumpSet)/sizeof(MenuJumpRecord); i++  )
	{
		readJumpRecord(&menuJumpSet[i], &jRecord);		// read full jump record
		if (jRecord.Item == selectedItemId)				// If ID match,
    1178:	18 13       	cpse	r17, r24
    117a:	0e c0       	rjmp	.+28     	; 0x1198 <processMenu+0x7c>
		{
			if ((jRecord.JumpCondition & jmpCond) != 0)		// if any of jump conditions match too,
    117c:	a4 23       	and	r26, r20
    117e:	b5 23       	and	r27, r21
    1180:	ab 2b       	or	r26, r27
    1182:	51 f0       	breq	.+20     	; 0x1198 <processMenu+0x7c>
			{
				nextItem.ItemID = jRecord.NextItem;			// switch to next menu item
				nextItem.ItemTimeout = jRecord.Flags & TIMEOUT_MASK;
    1184:	c2 2f       	mov	r28, r18
    1186:	cf 73       	andi	r28, 0x3F	; 63
				nextItem.ShiftRight = (jRecord.Flags & SHIFT_RIGHT) ? 1 : 0;
    1188:	26 fb       	bst	r18, 6
    118a:	00 27       	eor	r16, r16
    118c:	00 f9       	bld	r16, 0
				nextItem.ShiftLeft = (jRecord.Flags & SHIFT_LEFT) ? 1 : 0;
    118e:	f2 2e       	mov	r15, r18
    1190:	ff 1c       	adc	r15, r15
    1192:	ff 24       	eor	r15, r15
    1194:	ff 1c       	adc	r15, r15
    1196:	06 c0       	rjmp	.+12     	; 0x11a4 <processMenu+0x88>
    1198:	6f 5f       	subi	r22, 0xFF	; 255
    119a:	7f 4f       	sbci	r23, 0xFF	; 255
	NextItem_t nextItem;
	nextItem.ItemID = selectedItemId;
	MenuJumpRecord	jRecord;
	uint8_t i;
	
	for (i = 0; i < sizeof(menuJumpSet)/sizeof(MenuJumpRecord); i++  )
    119c:	60 32       	cpi	r22, 0x20	; 32
    119e:	71 05       	cpc	r23, r1
    11a0:	c9 f6       	brne	.-78     	; 0x1154 <processMenu+0x38>
		jumpCondition |= TMR_EXP;
	if (minute_counter >= power_off_timeout)
		jumpCondition |= GOTO_POFF;
	
	// Get next menu item according to current state and jump conditions
	nextItem = getNextMenuItem(selectedMenuItemID, jumpCondition);
    11a2:	d8 2f       	mov	r29, r24
    11a4:	10 e0       	ldi	r17, 0x00	; 0
    11a6:	f0 fa       	bst	r15, 0
    11a8:	10 f9       	bld	r17, 0
    11aa:	00 fb       	bst	r16, 0
    11ac:	11 f9       	bld	r17, 1
	
	// If next item differs from current
	if (nextItem.ItemID != selectedMenuItemID)
    11ae:	d8 17       	cp	r29, r24
    11b0:	09 f1       	breq	.+66     	; 0x11f4 <processMenu+0xd8>
	{		
		// Call exit function for current item
		processItemFunction(selectedMenuFunctionRecord.LeaveFunction);
    11b2:	80 91 eb 00 	lds	r24, 0x00EB
    11b6:	90 91 ec 00 	lds	r25, 0x00EC
    11ba:	f7 dc       	rcall	.-1554   	; 0xbaa <processItemFunction>
		
		// If shifting is specified, start it before calling any 
		//	new menu item functions 
		if (nextItem.ShiftRight)
    11bc:	11 ff       	sbrs	r17, 1
    11be:	02 c0       	rjmp	.+4      	; 0x11c4 <processMenu+0xa8>
			startShiftingWindowRight();
    11c0:	32 dc       	rcall	.-1948   	; 0xa26 <startShiftingWindowRight>
    11c2:	02 c0       	rjmp	.+4      	; 0x11c8 <processMenu+0xac>
		else if (nextItem.ShiftLeft)
    11c4:	10 fd       	sbrc	r17, 0
			startShiftingWindowLeft();
    11c6:	21 dc       	rcall	.-1982   	; 0xa0a <startShiftingWindowLeft>
		
		// Select new item
		selectedMenuItemID = nextItem.ItemID;
    11c8:	d0 93 e5 00 	sts	0x00E5, r29
		
		// Load from FLASH and save function pointers
		getMenuFunctionRecord(selectedMenuItemID, &selectedMenuFunctionRecord);
    11cc:	8d 2f       	mov	r24, r29
    11ce:	67 df       	rcall	.-306    	; 0x109e <getMenuFunctionRecord.constprop.0>
		// Call select function for next item
		processItemFunction(selectedMenuFunctionRecord.SelectFunction);
    11d0:	80 91 e7 00 	lds	r24, 0x00E7
    11d4:	90 91 e8 00 	lds	r25, 0x00E8
    11d8:	e8 dc       	rcall	.-1584   	; 0xbaa <processItemFunction>
		// Start timer if timeout is enabled
		if (nextItem.ItemTimeout != 0)
    11da:	cc 23       	and	r28, r28
    11dc:	c1 f0       	breq	.+48     	; 0x120e <processMenu+0xf2>
		{
			menuTimer.Top = nextItem.ItemTimeout * MENU_TIMEOUT_MULT;
    11de:	cc 0f       	add	r28, r28
    11e0:	c0 93 76 00 	sts	0x0076, r28
			menuTimer.Timer = 0;
    11e4:	10 92 75 00 	sts	0x0075, r1
			menuTimer.Enabled = 1;	
    11e8:	80 91 74 00 	lds	r24, 0x0074
    11ec:	81 60       	ori	r24, 0x01	; 1
    11ee:	80 93 74 00 	sts	0x0074, r24
    11f2:	0d c0       	rjmp	.+26     	; 0x120e <processMenu+0xf2>
		}
		
	}
	else
	{
		processSoftTimer8b(&userTimer);
    11f4:	8d ee       	ldi	r24, 0xED	; 237
    11f6:	90 e0       	ldi	r25, 0x00	; 0
    11f8:	1d d3       	rcall	.+1594   	; 0x1834 <processSoftTimer8b>
		// Stay at previous item
		processItemFunction(selectedMenuFunctionRecord.RunFunction);
    11fa:	80 91 e9 00 	lds	r24, 0x00E9
    11fe:	90 91 ea 00 	lds	r25, 0x00EA
	}	
}
    1202:	df 91       	pop	r29
    1204:	cf 91       	pop	r28
    1206:	1f 91       	pop	r17
    1208:	0f 91       	pop	r16
    120a:	ff 90       	pop	r15
	}
	else
	{
		processSoftTimer8b(&userTimer);
		// Stay at previous item
		processItemFunction(selectedMenuFunctionRecord.RunFunction);
    120c:	ce cc       	rjmp	.-1636   	; 0xbaa <processItemFunction>
	}	
}
    120e:	df 91       	pop	r29
    1210:	cf 91       	pop	r28
    1212:	1f 91       	pop	r17
    1214:	0f 91       	pop	r16
    1216:	ff 90       	pop	r15
    1218:	08 95       	ret

0000121a <u16toa_align_right>:
// Converts uint16_t value into decimal string with right alignment
// len = number of digits output (without terminating '\0')
// len[7] = 1 -> no terminating '\0' at buffer[len]
// fill_char -> char used for string padding
void u16toa_align_right(uint16_t val, char *buffer, uint8_t len,char fill_char)
{
    121a:	cf 93       	push	r28
    121c:	df 93       	push	r29
	if (len & 0x80)
    121e:	47 ff       	sbrs	r20, 7
    1220:	05 c0       	rjmp	.+10     	; 0x122c <u16toa_align_right+0x12>
	{
		len = len & 0x7F;
    1222:	4f 77       	andi	r20, 0x7F	; 127
		buffer += len;	
    1224:	fb 01       	movw	r30, r22
    1226:	e4 0f       	add	r30, r20
    1228:	f1 1d       	adc	r31, r1
    122a:	04 c0       	rjmp	.+8      	; 0x1234 <u16toa_align_right+0x1a>
	}
	else
	{
		buffer += len;	
    122c:	fb 01       	movw	r30, r22
    122e:	e4 0f       	add	r30, r20
    1230:	f1 1d       	adc	r31, r1
		*buffer = 0;
    1232:	10 82       	st	Z, r1
	}
	
	do
	{
		*--buffer = val % 10 + '0';
    1234:	ca e0       	ldi	r28, 0x0A	; 10
    1236:	d0 e0       	ldi	r29, 0x00	; 0
    1238:	be 01       	movw	r22, r28
    123a:	cc d3       	rcall	.+1944   	; 0x19d4 <__udivmodhi4>
    123c:	80 5d       	subi	r24, 0xD0	; 208
    123e:	82 93       	st	-Z, r24
		val /= 10;
    1240:	cb 01       	movw	r24, r22
		len--;
    1242:	41 50       	subi	r20, 0x01	; 1
	}
	while ((val != 0) && len);
    1244:	00 97       	sbiw	r24, 0x00	; 0
    1246:	21 f0       	breq	.+8      	; 0x1250 <u16toa_align_right+0x36>
    1248:	41 11       	cpse	r20, r1
    124a:	f6 cf       	rjmp	.-20     	; 0x1238 <u16toa_align_right+0x1e>
    124c:	01 c0       	rjmp	.+2      	; 0x1250 <u16toa_align_right+0x36>
	
	// Padding
	while(len--)
		*--buffer = fill_char;
    124e:	22 93       	st	-Z, r18
		len--;
	}
	while ((val != 0) && len);
	
	// Padding
	while(len--)
    1250:	41 50       	subi	r20, 0x01	; 1
    1252:	e8 f7       	brcc	.-6      	; 0x124e <u16toa_align_right+0x34>
		*--buffer = fill_char;
}
    1254:	df 91       	pop	r29
    1256:	cf 91       	pop	r28
    1258:	08 95       	ret

0000125a <init_system_io>:
//extern void powTest(void);

void init_system_io()
{
	// Setup Port D
	PORTD = 0; //(1<<PD_SYNCA | 1<<PD_SYNCB);
    125a:	12 ba       	out	0x12, r1	; 18
	DDRD = (1<<PD_TXD | 1<<PD_M1 | 1<<PD_M2 | 1<<PD_HEATER | 1<<PD_HEAT_INDIC );
    125c:	8e e3       	ldi	r24, 0x3E	; 62
    125e:	81 bb       	out	0x11, r24	; 17
	
	// Setup Port B
	PORTB = 0;
    1260:	18 ba       	out	0x18, r1	; 24
	DDRB = (1<<PB_BEEPER | 1<<PB_LED_DOUT | 1<<PB_LED_CLK | 1<<PB_SEGF | 1<<PB_SEGG | 1<<PB_SEGH);
    1262:	8f e3       	ldi	r24, 0x3F	; 63
    1264:	87 bb       	out	0x17, r24	; 23
	
	PORTC = 0;
    1266:	15 ba       	out	0x15, r1	; 21
	DDRC = (1<<PC_SEGA | 1<<PC_SEGB | 1<<PC_SEGC | 1<<PC_SEGD | 1<<PC_SEGE);	
    1268:	8f e1       	ldi	r24, 0x1F	; 31
    126a:	84 bb       	out	0x14, r24	; 20

	// Setup timer0
	// 1/1024 prescaler, T=64us @16MHz
	TCCR0 = (1<<CS02 | 0<<CS01 | 1<<CS00);
    126c:	85 e0       	ldi	r24, 0x05	; 5
    126e:	83 bf       	out	0x33, r24	; 51
	// Start 256 * 64us = 16384us interval
	TCNT0 = 0;
    1270:	12 be       	out	0x32, r1	; 50
	// Clear interrupt flag
	TIFR |= (1<<TOV0);
    1272:	88 b7       	in	r24, 0x38	; 56
    1274:	81 60       	ori	r24, 0x01	; 1
    1276:	88 bf       	out	0x38, r24	; 56
	// Enable interrupts from timer 0
	TIMSK |= (1<<TOIE0);
    1278:	89 b7       	in	r24, 0x39	; 57
    127a:	81 60       	ori	r24, 0x01	; 1
    127c:	89 bf       	out	0x39, r24	; 57
	
	// Setup timer2 as 1ms system frequency generator
	// 1/64 prescaler, CTC mode, OC2 disconnected
	TCCR2 = (1<<CS22 | 1<<WGM21);
    127e:	8c e0       	ldi	r24, 0x0C	; 12
    1280:	85 bd       	out	0x25, r24	; 37
	OCR2 = 249;
    1282:	89 ef       	ldi	r24, 0xF9	; 249
    1284:	83 bd       	out	0x23, r24	; 35
	TIMSK |= (1<<OCIE2);
    1286:	89 b7       	in	r24, 0x39	; 57
    1288:	80 68       	ori	r24, 0x80	; 128
    128a:	89 bf       	out	0x39, r24	; 57
	
	// Setup timer1 as beeper frequency generator
	// CTC mode, 1/64 prescaler
	TCCR1A = 0;
    128c:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = (1<<WGM12 | 1<<CS11 | 1<<CS10);
    128e:	8b e0       	ldi	r24, 0x0B	; 11
    1290:	8e bd       	out	0x2e, r24	; 46
	// 1kHz beeper frequency default
	OCR1A = 127;
    1292:	8f e7       	ldi	r24, 0x7F	; 127
    1294:	90 e0       	ldi	r25, 0x00	; 0
    1296:	9b bd       	out	0x2b, r25	; 43
    1298:	8a bd       	out	0x2a, r24	; 42

	// Setup AC sync comparator
	// Interrupt on output toggle
	ACSR |= (1<<ACI);
    129a:	44 9a       	sbi	0x08, 4	; 8
	ACSR = (1<<ACIE | 0<<ACIS1 | 0<<ACIS0);
    129c:	88 e0       	ldi	r24, 0x08	; 8
    129e:	88 b9       	out	0x08, r24	; 8
	
	// Setup ADC
	// Internal Vref + cap, input ADC5, 
	ADMUX = (1<<REFS1 | 1<<REFS0 | 0<<MUX3 | 1<<MUX2 | 0<<MUX1 | 1<<MUX0 );
    12a0:	85 ec       	ldi	r24, 0xC5	; 197
    12a2:	87 b9       	out	0x07, r24	; 7
	// Prescaler = 128
	ADCSRA = (1<<ADEN |/* 1<<ADFR |*/  1<<ADIE | 1<<ADPS2 | 1<<ADPS1 | 1<<ADPS0);
    12a4:	8f e8       	ldi	r24, 0x8F	; 143
    12a6:	86 b9       	out	0x06, r24	; 6
	
	// Setup USART
	// Double speed
	UCSRA = (1<<U2X);
    12a8:	82 e0       	ldi	r24, 0x02	; 2
    12aa:	8b b9       	out	0x0b, r24	; 11
	UCSRB = (1<<RXEN | 1<<TXEN | 0<<UCSZ2);
    12ac:	88 e1       	ldi	r24, 0x18	; 24
    12ae:	8a b9       	out	0x0a, r24	; 10
	// No parity, 1 stop bit, 8 bit
	UCSRC = (1<<URSEL | 0<<UPM1 | 0<<UPM0 | 0<<USBS | 1<<UCSZ1 | 1<<UCSZ0);
    12b0:	86 e8       	ldi	r24, 0x86	; 134
    12b2:	80 bd       	out	0x20, r24	; 32
	// 57600 @16MHz, 2x
	UBRRH=0x00;
    12b4:	10 bc       	out	0x20, r1	; 32
	UBRRL=0x22;
    12b6:	82 e2       	ldi	r24, 0x22	; 34
    12b8:	89 b9       	out	0x09, r24	; 9
    12ba:	08 95       	ret

000012bc <main>:




int main(void)
{
    12bc:	cf 93       	push	r28
    12be:	df 93       	push	r29
    12c0:	cd b7       	in	r28, 0x3d	; 61
    12c2:	de b7       	in	r29, 0x3e	; 62
    12c4:	2b 97       	sbiw	r28, 0x0b	; 11
    12c6:	0f b6       	in	r0, 0x3f	; 63
    12c8:	f8 94       	cli
    12ca:	de bf       	out	0x3e, r29	; 62
    12cc:	0f be       	out	0x3f, r0	; 63
    12ce:	cd bf       	out	0x3d, r28	; 61
	char str[10];
	volatile uint8_t temp8u = 0x00;
    12d0:	1b 86       	std	Y+11, r1	; 0x0b
	volatile uint16_t temp16u;
	
	// Initialize MCU IO
	init_system_io();
    12d2:	c3 df       	rcall	.-122    	; 0x125a <init_system_io>
	// Restore params from EEPROM
	restoreGlobalParams();
    12d4:	58 da       	rcall	.-2896   	; 0x786 <restoreGlobalParams>
	// Calibrate ADC coefficients using restored params
	calculateCoeffs();
    12d6:	86 d7       	rcall	.+3852   	; 0x21e4 <__data_load_end+0x686>
	// Initialize LED indicator
	initLedIndicator();
    12d8:	b4 db       	rcall	.-2200   	; 0xa42 <initLedIndicator>
	// Initialize menu
	InitMenu();
    12da:	17 df       	rcall	.-466    	; 0x110a <InitMenu>
	// Enable interrupts
	sei();
    12dc:	78 94       	sei
    12de:	04 c0       	rjmp	.+8      	; 0x12e8 <main+0x2c>
	_delay_ms(50);
	// Check AC line
	while(p_state == 0x0F) 	
	{
		// Power control state machine has not changed - sync has not been detected
		printLedBuffer(0,"AC ERR");
    12e0:	66 eb       	ldi	r22, 0xB6	; 182
    12e2:	70 e0       	ldi	r23, 0x00	; 0
    12e4:	80 e0       	ldi	r24, 0x00	; 0
    12e6:	d0 db       	rcall	.-2144   	; 0xa88 <printLedBuffer>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    12e8:	2f ef       	ldi	r18, 0xFF	; 255
    12ea:	80 e7       	ldi	r24, 0x70	; 112
    12ec:	92 e0       	ldi	r25, 0x02	; 2
    12ee:	21 50       	subi	r18, 0x01	; 1
    12f0:	80 40       	sbci	r24, 0x00	; 0
    12f2:	90 40       	sbci	r25, 0x00	; 0
    12f4:	e1 f7       	brne	.-8      	; 0x12ee <main+0x32>
    12f6:	00 c0       	rjmp	.+0      	; 0x12f8 <main+0x3c>
    12f8:	00 00       	nop
	// Enable interrupts
	sei();
	// Safety delay for power part
	_delay_ms(50);
	// Check AC line
	while(p_state == 0x0F) 	
    12fa:	80 91 78 00 	lds	r24, 0x0078
    12fe:	8f 30       	cpi	r24, 0x0F	; 15
    1300:	79 f3       	breq	.-34     	; 0x12e0 <main+0x24>
		printLedBuffer(0,"AC ERR");
		_delay_ms(50);
	}
	// If we get here, AC line is OK and at least one ADC count has been sampled.
	// Beep
	SetBeeperFreq(1000);
    1302:	88 ee       	ldi	r24, 0xE8	; 232
    1304:	93 e0       	ldi	r25, 0x03	; 3
    1306:	c2 d2       	rcall	.+1412   	; 0x188c <SetBeeperFreq>
	StartBeep(200);
    1308:	88 ec       	ldi	r24, 0xC8	; 200
    130a:	90 e0       	ldi	r25, 0x00	; 0
    130c:	df d2       	rcall	.+1470   	; 0x18cc <StartBeep>
	// Init heater PID control internal structures
	forceHeaterControlUpdate();
    130e:	f8 d0       	rcall	.+496    	; 0x1500 <forceHeaterControlUpdate>
    1310:	2f ef       	ldi	r18, 0xFF	; 255
    1312:	81 ee       	ldi	r24, 0xE1	; 225
    1314:	94 e0       	ldi	r25, 0x04	; 4
    1316:	21 50       	subi	r18, 0x01	; 1
    1318:	80 40       	sbci	r24, 0x00	; 0
    131a:	90 40       	sbci	r25, 0x00	; 0
    131c:	e1 f7       	brne	.-8      	; 0x1316 <main+0x5a>
    131e:	00 c0       	rjmp	.+0      	; 0x1320 <main+0x64>
    1320:	00 00       	nop
	_delay_ms(100);
	// Start rotating
	setMotorDirection(ROLL_FWD);
    1322:	81 e0       	ldi	r24, 0x01	; 1
    1324:	fa d0       	rcall	.+500    	; 0x151a <setMotorDirection>
	// Clear timer
	menuUpdateTimer.FOvfl = 0;
    1326:	80 91 7a 00 	lds	r24, 0x007A
    132a:	8f 7b       	andi	r24, 0xBF	; 191
    132c:	80 93 7a 00 	sts	0x007A, r24

    while(1)
    {
		
		if (menuUpdateTimer.FOvfl)
    1330:	80 91 7a 00 	lds	r24, 0x007A
    1334:	86 ff       	sbrs	r24, 6
    1336:	fc cf       	rjmp	.-8      	; 0x1330 <main+0x74>
		{
			// Get new temperature measurement - new value is pushed into ring buffer
			// once every AC line period
			update_normalized_adc();			// TODO: slow down temperature change (say once per 200-400ms)
    1338:	a2 d7       	rcall	.+3908   	; 0x227e <__data_load_end+0x720>
			
			// Get new button state
			process_buttons();
    133a:	44 d8       	rcall	.-3960   	; 0x3c4 <process_buttons>
			
			// Give sound feedback
			if (button_state & BL_MENU)
    133c:	80 91 d2 00 	lds	r24, 0x00D2
    1340:	90 91 d3 00 	lds	r25, 0x00D3
    1344:	91 ff       	sbrs	r25, 1
    1346:	03 c0       	rjmp	.+6      	; 0x134e <main+0x92>
			{
				SetBeeperFreq(800);
    1348:	80 e2       	ldi	r24, 0x20	; 32
    134a:	93 e0       	ldi	r25, 0x03	; 3
    134c:	06 c0       	rjmp	.+12     	; 0x135a <main+0x9e>
				StartBeep(40);
			}
			else if (button_action_down & (BD_MENU | BD_UP | BD_DOWN | BD_HEATCTRL))
    134e:	80 91 d1 00 	lds	r24, 0x00D1
    1352:	87 74       	andi	r24, 0x47	; 71
    1354:	31 f0       	breq	.+12     	; 0x1362 <main+0xa6>
			{
				SetBeeperFreq(1000);
    1356:	88 ee       	ldi	r24, 0xE8	; 232
    1358:	93 e0       	ldi	r25, 0x03	; 3
    135a:	98 d2       	rcall	.+1328   	; 0x188c <SetBeeperFreq>
				StartBeep(40);
    135c:	88 e2       	ldi	r24, 0x28	; 40
    135e:	90 e0       	ldi	r25, 0x00	; 0
    1360:	b5 d2       	rcall	.+1386   	; 0x18cc <StartBeep>
			}	
			// Direction control buttons sounds get special processing at processRollControl()
			
			// Process automatic power off - it is important to call
			// this function before menu and power controls processing
			if (button_action_down)
    1362:	80 91 d1 00 	lds	r24, 0x00D1
    1366:	81 11       	cpse	r24, r1
			{
				resetAutoPowerOffCounter();
    1368:	bd d2       	rcall	.+1402   	; 0x18e4 <resetAutoPowerOffCounter>
			}
			processAutoPowerOff();
    136a:	c3 d2       	rcall	.+1414   	; 0x18f2 <processAutoPowerOff>

			// Process user menu states, settings and indication
			processMenu();
    136c:	d7 de       	rcall	.-594    	; 0x111c <processMenu>
			
			// Process cyclic rolling, direction control
			processRollControl();	
    136e:	8b d8       	rcall	.-3818   	; 0x486 <processRollControl>
			
			// Process heater regulation
			processHeaterControl();
    1370:	86 d9       	rcall	.-3316   	; 0x67e <processHeaterControl>
		
			// Process heater events and warnings
			processHeaterAlerts();
    1372:	e0 d9       	rcall	.-3136   	; 0x734 <processHeaterAlerts>

			// Process log
			if (menuUpdateTimer.FA_TGL)
    1374:	80 91 7a 00 	lds	r24, 0x007A
    1378:	82 ff       	sbrs	r24, 2
    137a:	d5 cf       	rjmp	.-86     	; 0x1326 <main+0x6a>
				// Log to UART
				//---------------------------------//
				// Function is called every 50ms
				// UART message is sent every second call (once per 100ms)
				
				u16toa_align_right(adc_celsius,str,6,' ');				// Displayed temp, Celsius
    137c:	20 e2       	ldi	r18, 0x20	; 32
    137e:	46 e0       	ldi	r20, 0x06	; 6
    1380:	be 01       	movw	r22, r28
    1382:	6f 5f       	subi	r22, 0xFF	; 255
    1384:	7f 4f       	sbci	r23, 0xFF	; 255
    1386:	80 91 1f 01 	lds	r24, 0x011F
    138a:	90 91 20 01 	lds	r25, 0x0120
    138e:	45 df       	rcall	.-374    	; 0x121a <u16toa_align_right>
				USART_sendstr(str);
    1390:	ce 01       	movw	r24, r28
    1392:	01 96       	adiw	r24, 0x01	; 1
    1394:	01 d3       	rcall	.+1538   	; 0x1998 <USART_sendstr>
				
				u16toa_align_right(adc_normalized,str,6,' ');			// Displayed temp
    1396:	20 e2       	ldi	r18, 0x20	; 32
    1398:	46 e0       	ldi	r20, 0x06	; 6
    139a:	be 01       	movw	r22, r28
    139c:	6f 5f       	subi	r22, 0xFF	; 255
    139e:	7f 4f       	sbci	r23, 0xFF	; 255
    13a0:	80 91 1d 01 	lds	r24, 0x011D
    13a4:	90 91 1e 01 	lds	r25, 0x011E
    13a8:	38 df       	rcall	.-400    	; 0x121a <u16toa_align_right>
				USART_sendstr(str);
    13aa:	ce 01       	movw	r24, r28
    13ac:	01 96       	adiw	r24, 0x01	; 1
    13ae:	f4 d2       	rcall	.+1512   	; 0x1998 <USART_sendstr>
				
				u16toa_align_right(dbg_SetTempCelsius,str,6,' ');		// Temp setting, Celsius
    13b0:	20 e2       	ldi	r18, 0x20	; 32
    13b2:	46 e0       	ldi	r20, 0x06	; 6
    13b4:	be 01       	movw	r22, r28
    13b6:	6f 5f       	subi	r22, 0xFF	; 255
    13b8:	7f 4f       	sbci	r23, 0xFF	; 255
    13ba:	80 91 24 01 	lds	r24, 0x0124
    13be:	90 e0       	ldi	r25, 0x00	; 0
    13c0:	2c df       	rcall	.-424    	; 0x121a <u16toa_align_right>
				USART_sendstr(str);
    13c2:	ce 01       	movw	r24, r28
    13c4:	01 96       	adiw	r24, 0x01	; 1
    13c6:	e8 d2       	rcall	.+1488   	; 0x1998 <USART_sendstr>
				
				u16toa_align_right(dbg_SetTempPID,str,6,' ');			// Temp setting, as input to PID
    13c8:	20 e2       	ldi	r18, 0x20	; 32
    13ca:	46 e0       	ldi	r20, 0x06	; 6
    13cc:	be 01       	movw	r22, r28
    13ce:	6f 5f       	subi	r22, 0xFF	; 255
    13d0:	7f 4f       	sbci	r23, 0xFF	; 255
    13d2:	80 91 3f 01 	lds	r24, 0x013F
    13d6:	90 91 40 01 	lds	r25, 0x0140
    13da:	1f df       	rcall	.-450    	; 0x121a <u16toa_align_right>
				USART_sendstr(str);
    13dc:	ce 01       	movw	r24, r28
    13de:	01 96       	adiw	r24, 0x01	; 1
    13e0:	db d2       	rcall	.+1462   	; 0x1998 <USART_sendstr>
				
				u16toa_align_right(dbg_RealTempCelsius,str,8,' ');		// Real temp, sampled for PID input, Celsius
    13e2:	20 e2       	ldi	r18, 0x20	; 32
    13e4:	48 e0       	ldi	r20, 0x08	; 8
    13e6:	be 01       	movw	r22, r28
    13e8:	6f 5f       	subi	r22, 0xFF	; 255
    13ea:	7f 4f       	sbci	r23, 0xFF	; 255
    13ec:	80 91 3c 01 	lds	r24, 0x013C
    13f0:	90 e0       	ldi	r25, 0x00	; 0
    13f2:	13 df       	rcall	.-474    	; 0x121a <u16toa_align_right>
				USART_sendstr(str);
    13f4:	ce 01       	movw	r24, r28
    13f6:	01 96       	adiw	r24, 0x01	; 1
    13f8:	cf d2       	rcall	.+1438   	; 0x1998 <USART_sendstr>
				
				u16toa_align_right(dbg_RealTempPID,str,6,' ');			// Real temp, sampled for PID input
    13fa:	20 e2       	ldi	r18, 0x20	; 32
    13fc:	46 e0       	ldi	r20, 0x06	; 6
    13fe:	be 01       	movw	r22, r28
    1400:	6f 5f       	subi	r22, 0xFF	; 255
    1402:	7f 4f       	sbci	r23, 0xFF	; 255
    1404:	80 91 27 01 	lds	r24, 0x0127
    1408:	90 91 28 01 	lds	r25, 0x0128
    140c:	06 df       	rcall	.-500    	; 0x121a <u16toa_align_right>
				USART_sendstr(str);
    140e:	ce 01       	movw	r24, r28
    1410:	01 96       	adiw	r24, 0x01	; 1
    1412:	c2 d2       	rcall	.+1412   	; 0x1998 <USART_sendstr>
				
				//u16toa_align_right(dbg_RealTempPIDfiltered,str,6,' ');			// Real temp, sampled for PID input, filtered
				//USART_sendstr(str);
				
				USART_sendstr("    ");
    1414:	8d eb       	ldi	r24, 0xBD	; 189
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	bf d2       	rcall	.+1406   	; 0x1998 <USART_sendstr>
				
				if (dbg_PID_p_term >= 0)
    141a:	80 91 25 01 	lds	r24, 0x0125
    141e:	90 91 26 01 	lds	r25, 0x0126
				{
					u16toa_align_right(dbg_PID_p_term,str,6,'0');		// p term
    1422:	20 e3       	ldi	r18, 0x30	; 48
    1424:	46 e0       	ldi	r20, 0x06	; 6
    1426:	be 01       	movw	r22, r28
    1428:	6f 5f       	subi	r22, 0xFF	; 255
    142a:	7f 4f       	sbci	r23, 0xFF	; 255
				//u16toa_align_right(dbg_RealTempPIDfiltered,str,6,' ');			// Real temp, sampled for PID input, filtered
				//USART_sendstr(str);
				
				USART_sendstr("    ");
				
				if (dbg_PID_p_term >= 0)
    142c:	97 fd       	sbrc	r25, 7
    142e:	02 c0       	rjmp	.+4      	; 0x1434 <main+0x178>
				{
					u16toa_align_right(dbg_PID_p_term,str,6,'0');		// p term
    1430:	f4 de       	rcall	.-536    	; 0x121a <u16toa_align_right>
    1432:	06 c0       	rjmp	.+12     	; 0x1440 <main+0x184>
					USART_sendstr(str);	
				}
				else
				{
					u16toa_align_right(-dbg_PID_p_term,str,6,'0');		
    1434:	91 95       	neg	r25
    1436:	81 95       	neg	r24
    1438:	91 09       	sbc	r25, r1
    143a:	ef de       	rcall	.-546    	; 0x121a <u16toa_align_right>
					USART_send('-');
    143c:	8d e2       	ldi	r24, 0x2D	; 45
    143e:	a7 d2       	rcall	.+1358   	; 0x198e <USART_send>
					USART_sendstr(str);
    1440:	ce 01       	movw	r24, r28
    1442:	01 96       	adiw	r24, 0x01	; 1
    1444:	a9 d2       	rcall	.+1362   	; 0x1998 <USART_sendstr>
				}
				
				USART_sendstr("    ");
    1446:	8d eb       	ldi	r24, 0xBD	; 189
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	a6 d2       	rcall	.+1356   	; 0x1998 <USART_sendstr>
				
				if (dbg_PID_d_term >= 0)
    144c:	80 91 37 01 	lds	r24, 0x0137
    1450:	90 91 38 01 	lds	r25, 0x0138
				{
					u16toa_align_right(dbg_PID_d_term,str,6,'0');		// d term
    1454:	20 e3       	ldi	r18, 0x30	; 48
    1456:	46 e0       	ldi	r20, 0x06	; 6
    1458:	be 01       	movw	r22, r28
    145a:	6f 5f       	subi	r22, 0xFF	; 255
    145c:	7f 4f       	sbci	r23, 0xFF	; 255
					USART_sendstr(str);
				}
				
				USART_sendstr("    ");
				
				if (dbg_PID_d_term >= 0)
    145e:	97 fd       	sbrc	r25, 7
    1460:	02 c0       	rjmp	.+4      	; 0x1466 <main+0x1aa>
				{
					u16toa_align_right(dbg_PID_d_term,str,6,'0');		// d term
    1462:	db de       	rcall	.-586    	; 0x121a <u16toa_align_right>
    1464:	06 c0       	rjmp	.+12     	; 0x1472 <main+0x1b6>
					USART_sendstr(str);
				}
				else
				{
					u16toa_align_right(-dbg_PID_d_term,str,6,'0');
    1466:	91 95       	neg	r25
    1468:	81 95       	neg	r24
    146a:	91 09       	sbc	r25, r1
    146c:	d6 de       	rcall	.-596    	; 0x121a <u16toa_align_right>
					USART_send('-');
    146e:	8d e2       	ldi	r24, 0x2D	; 45
    1470:	8e d2       	rcall	.+1308   	; 0x198e <USART_send>
					USART_sendstr(str);
    1472:	ce 01       	movw	r24, r28
    1474:	01 96       	adiw	r24, 0x01	; 1
    1476:	90 d2       	rcall	.+1312   	; 0x1998 <USART_sendstr>
				}
				
				USART_sendstr("    ");
    1478:	8d eb       	ldi	r24, 0xBD	; 189
    147a:	90 e0       	ldi	r25, 0x00	; 0
    147c:	8d d2       	rcall	.+1306   	; 0x1998 <USART_sendstr>
				
				if (dbg_PID_i_term >= 0)
    147e:	80 91 2c 01 	lds	r24, 0x012C
    1482:	90 91 2d 01 	lds	r25, 0x012D
				{
					u16toa_align_right(dbg_PID_i_term,str,6,'0');		// i term
    1486:	20 e3       	ldi	r18, 0x30	; 48
    1488:	46 e0       	ldi	r20, 0x06	; 6
    148a:	be 01       	movw	r22, r28
    148c:	6f 5f       	subi	r22, 0xFF	; 255
    148e:	7f 4f       	sbci	r23, 0xFF	; 255
					USART_sendstr(str);
				}
				
				USART_sendstr("    ");
				
				if (dbg_PID_i_term >= 0)
    1490:	97 fd       	sbrc	r25, 7
    1492:	02 c0       	rjmp	.+4      	; 0x1498 <main+0x1dc>
				{
					u16toa_align_right(dbg_PID_i_term,str,6,'0');		// i term
    1494:	c2 de       	rcall	.-636    	; 0x121a <u16toa_align_right>
    1496:	06 c0       	rjmp	.+12     	; 0x14a4 <main+0x1e8>
					USART_sendstr(str);
				}
				else
				{
					u16toa_align_right(-dbg_PID_i_term,str,6,'0');
    1498:	91 95       	neg	r25
    149a:	81 95       	neg	r24
    149c:	91 09       	sbc	r25, r1
    149e:	bd de       	rcall	.-646    	; 0x121a <u16toa_align_right>
					USART_send('-');
    14a0:	8d e2       	ldi	r24, 0x2D	; 45
    14a2:	75 d2       	rcall	.+1258   	; 0x198e <USART_send>
					USART_sendstr(str);
    14a4:	ce 01       	movw	r24, r28
    14a6:	01 96       	adiw	r24, 0x01	; 1
    14a8:	77 d2       	rcall	.+1262   	; 0x1998 <USART_sendstr>
				}
				
				u16toa_align_right(dbg_PID_output,str,6,' ');			// PID output
    14aa:	20 e2       	ldi	r18, 0x20	; 32
    14ac:	46 e0       	ldi	r20, 0x06	; 6
    14ae:	be 01       	movw	r22, r28
    14b0:	6f 5f       	subi	r22, 0xFF	; 255
    14b2:	7f 4f       	sbci	r23, 0xFF	; 255
    14b4:	80 91 22 01 	lds	r24, 0x0122
    14b8:	90 91 23 01 	lds	r25, 0x0123
    14bc:	ae de       	rcall	.-676    	; 0x121a <u16toa_align_right>
				USART_sendstr(str);
    14be:	ce 01       	movw	r24, r28
    14c0:	01 96       	adiw	r24, 0x01	; 1
    14c2:	6a d2       	rcall	.+1236   	; 0x1998 <USART_sendstr>
				
				
				u16toa_align_right(ctrl_heater,str,6,' ');				// Heater control (PID output, synchronized)
    14c4:	20 e2       	ldi	r18, 0x20	; 32
    14c6:	46 e0       	ldi	r20, 0x06	; 6
    14c8:	be 01       	movw	r22, r28
    14ca:	6f 5f       	subi	r22, 0xFF	; 255
    14cc:	7f 4f       	sbci	r23, 0xFF	; 255
    14ce:	80 91 f7 00 	lds	r24, 0x00F7
    14d2:	90 e0       	ldi	r25, 0x00	; 0
    14d4:	a2 de       	rcall	.-700    	; 0x121a <u16toa_align_right>
				USART_sendstr(str);
    14d6:	ce 01       	movw	r24, r28
    14d8:	01 96       	adiw	r24, 0x01	; 1
    14da:	5e d2       	rcall	.+1212   	; 0x1998 <USART_sendstr>
				
				
				USART_sendstr("\n\r");
    14dc:	82 ec       	ldi	r24, 0xC2	; 194
    14de:	90 e0       	ldi	r25, 0x00	; 0
    14e0:	5b d2       	rcall	.+1206   	; 0x1998 <USART_sendstr>
    14e2:	21 cf       	rjmp	.-446    	; 0x1326 <main+0x6a>

000014e4 <setHeaterControl>:

// User function to control heater intensity
void setHeaterControl(uint8_t value)
{
	// Disable interrupts from timer0 
	TIMSK &= ~(1<<TOIE0);
    14e4:	99 b7       	in	r25, 0x39	; 57
    14e6:	9e 7f       	andi	r25, 0xFE	; 254
    14e8:	99 bf       	out	0x39, r25	; 57
	
	ctrl_heater = value;
    14ea:	80 93 f7 00 	sts	0x00F7, r24
	heaterState &= ~READY_TO_UPDATE_HEATER;
    14ee:	80 91 f6 00 	lds	r24, 0x00F6
    14f2:	8f 77       	andi	r24, 0x7F	; 127
    14f4:	80 93 f6 00 	sts	0x00F6, r24
	
	// Enable interrupts from timer 0
	TIMSK |= (1<<TOIE0);	
    14f8:	89 b7       	in	r24, 0x39	; 57
    14fa:	81 60       	ori	r24, 0x01	; 1
    14fc:	89 bf       	out	0x39, r24	; 57
    14fe:	08 95       	ret

00001500 <forceHeaterControlUpdate>:


void forceHeaterControlUpdate(void)
{
	// Disable interrupts from timer0 
	TIMSK &= ~(1<<TOIE0);
    1500:	89 b7       	in	r24, 0x39	; 57
    1502:	8e 7f       	andi	r24, 0xFE	; 254
    1504:	89 bf       	out	0x39, r24	; 57
	
	// Flag READY_TO_UPDATE_HEATER will be set on next on next AC line period
	heater_cnt = HEATER_REGULATION_PERIODS - 6;
    1506:	8c e2       	ldi	r24, 0x2C	; 44
    1508:	80 93 f8 00 	sts	0x00F8, r24
	heater_reg_cnt = HEATER_PID_CALL_INTERVAL - 1;
    150c:	83 e0       	ldi	r24, 0x03	; 3
    150e:	80 93 f5 00 	sts	0x00F5, r24
	
	// Enable interrupts from timer 0
	TIMSK |= (1<<TOIE0);	
    1512:	89 b7       	in	r24, 0x39	; 57
    1514:	81 60       	ori	r24, 0x01	; 1
    1516:	89 bf       	out	0x39, r24	; 57
    1518:	08 95       	ret

0000151a <setMotorDirection>:
	
// User function to control motor rotation
void setMotorDirection(uint8_t dir)
{
	// Disable interrupts from timer0 
	TIMSK &= ~(1<<TOIE0);
    151a:	99 b7       	in	r25, 0x39	; 57
    151c:	9e 7f       	andi	r25, 0xFE	; 254
    151e:	99 bf       	out	0x39, r25	; 57
		
	newDirReq = dir;	// save new direction request
    1520:	80 93 f9 00 	sts	0x00F9, r24
	dirChangedMask = ~ROLL_DIR_CHANGED;
    1524:	9f ed       	ldi	r25, 0xDF	; 223
    1526:	90 93 79 00 	sts	0x0079, r25
	
	if (dir & ROLL_FWD)
    152a:	80 ff       	sbrs	r24, 0
    152c:	09 c0       	rjmp	.+18     	; 0x1540 <setMotorDirection+0x26>
		bottomPoint = rollPoint;
    152e:	80 91 fa 00 	lds	r24, 0x00FA
    1532:	90 91 fb 00 	lds	r25, 0x00FB
    1536:	90 93 fd 00 	sts	0x00FD, r25
    153a:	80 93 fc 00 	sts	0x00FC, r24
    153e:	0a c0       	rjmp	.+20     	; 0x1554 <setMotorDirection+0x3a>
	else if (dir & ROLL_REV)
    1540:	81 ff       	sbrs	r24, 1
    1542:	08 c0       	rjmp	.+16     	; 0x1554 <setMotorDirection+0x3a>
		topPoint = rollPoint;
    1544:	80 91 fa 00 	lds	r24, 0x00FA
    1548:	90 91 fb 00 	lds	r25, 0x00FB
    154c:	90 93 ff 00 	sts	0x00FF, r25
    1550:	80 93 fe 00 	sts	0x00FE, r24

	// Enable interrupts from timer 0
	TIMSK |= (1<<TOIE0);	
    1554:	89 b7       	in	r24, 0x39	; 57
    1556:	81 60       	ori	r24, 0x01	; 1
    1558:	89 bf       	out	0x39, r24	; 57
    155a:	08 95       	ret

0000155c <stopCycleRolling>:
}

void stopCycleRolling(uint8_t doResetPoints)
{
	// Disable interrupts from timer0 
	TIMSK &= ~(1<<TOIE0);
    155c:	99 b7       	in	r25, 0x39	; 57
    155e:	9e 7f       	andi	r25, 0xFE	; 254
    1560:	99 bf       	out	0x39, r25	; 57
	
	rollState &= ~ROLL_CYCLE;
    1562:	90 91 f4 00 	lds	r25, 0x00F4
    1566:	9b 7f       	andi	r25, 0xFB	; 251
    1568:	90 93 f4 00 	sts	0x00F4, r25
	if (doResetPoints)
    156c:	88 23       	and	r24, r24
    156e:	71 f0       	breq	.+28     	; 0x158c <stopCycleRolling+0x30>
	{
		topPoint = bottomPoint = rollPoint;
    1570:	80 91 fa 00 	lds	r24, 0x00FA
    1574:	90 91 fb 00 	lds	r25, 0x00FB
    1578:	90 93 fd 00 	sts	0x00FD, r25
    157c:	80 93 fc 00 	sts	0x00FC, r24
    1580:	90 93 ff 00 	sts	0x00FF, r25
    1584:	80 93 fe 00 	sts	0x00FE, r24
		activeRollCycle = 0;	
    1588:	10 92 f3 00 	sts	0x00F3, r1
	}		
	
	// Enable interrupts from timer 0
	TIMSK |= (1<<TOIE0);
    158c:	89 b7       	in	r24, 0x39	; 57
    158e:	81 60       	ori	r24, 0x01	; 1
    1590:	89 bf       	out	0x39, r24	; 57
    1592:	08 95       	ret

00001594 <isTopPointValid>:



uint8_t isTopPointValid(void)
{
	return (	(int16_t)(topPoint - rollPoint) >= 0 );
    1594:	80 91 fe 00 	lds	r24, 0x00FE
    1598:	90 91 ff 00 	lds	r25, 0x00FF
    159c:	20 91 fa 00 	lds	r18, 0x00FA
    15a0:	30 91 fb 00 	lds	r19, 0x00FB
    15a4:	82 1b       	sub	r24, r18
    15a6:	93 0b       	sbc	r25, r19
    15a8:	89 2f       	mov	r24, r25
    15aa:	80 95       	com	r24
}
    15ac:	88 1f       	adc	r24, r24
    15ae:	88 27       	eor	r24, r24
    15b0:	88 1f       	adc	r24, r24
    15b2:	08 95       	ret

000015b4 <isBottomPointValid>:

uint8_t isBottomPointValid(void)
{
	return (	(int16_t)(rollPoint - bottomPoint) >= 0	);
    15b4:	80 91 fa 00 	lds	r24, 0x00FA
    15b8:	90 91 fb 00 	lds	r25, 0x00FB
    15bc:	20 91 fc 00 	lds	r18, 0x00FC
    15c0:	30 91 fd 00 	lds	r19, 0x00FD
    15c4:	82 1b       	sub	r24, r18
    15c6:	93 0b       	sbc	r25, r19
    15c8:	89 2f       	mov	r24, r25
    15ca:	80 95       	com	r24
}
    15cc:	88 1f       	adc	r24, r24
    15ce:	88 27       	eor	r24, r24
    15d0:	88 1f       	adc	r24, r24
    15d2:	08 95       	ret

000015d4 <startCycleRolling>:


uint8_t startCycleRolling(void)
{
	// Disable interrupts from timer0 
	TIMSK &= ~(1<<TOIE0);
    15d4:	89 b7       	in	r24, 0x39	; 57
    15d6:	8e 7f       	andi	r24, 0xFE	; 254
    15d8:	89 bf       	out	0x39, r24	; 57
	
	if ( isTopPointValid() && isBottomPointValid() )
    15da:	dc df       	rcall	.-72     	; 0x1594 <isTopPointValid>
    15dc:	88 23       	and	r24, r24
    15de:	59 f0       	breq	.+22     	; 0x15f6 <startCycleRolling+0x22>
    15e0:	e9 df       	rcall	.-46     	; 0x15b4 <isBottomPointValid>
    15e2:	88 23       	and	r24, r24
    15e4:	41 f0       	breq	.+16     	; 0x15f6 <startCycleRolling+0x22>
	{
		rollState |= ROLL_CYCLE;
    15e6:	80 91 f4 00 	lds	r24, 0x00F4
    15ea:	84 60       	ori	r24, 0x04	; 4
    15ec:	80 93 f4 00 	sts	0x00F4, r24
		activeRollCycle = 1;
    15f0:	81 e0       	ldi	r24, 0x01	; 1
    15f2:	80 93 f3 00 	sts	0x00F3, r24
	}
	
	// Enable interrupts from timer 0
	TIMSK |= (1<<TOIE0);
    15f6:	89 b7       	in	r24, 0x39	; 57
    15f8:	81 60       	ori	r24, 0x01	; 1
    15fa:	89 bf       	out	0x39, r24	; 57
	
	return (rollState & ROLL_CYCLE);
    15fc:	80 91 f4 00 	lds	r24, 0x00F4
}
    1600:	84 70       	andi	r24, 0x04	; 4
    1602:	08 95       	ret

00001604 <__vector_16>:




ISR(ANA_COMP_vect)
{
    1604:	1f 92       	push	r1
    1606:	0f 92       	push	r0
    1608:	0f b6       	in	r0, 0x3f	; 63
    160a:	0f 92       	push	r0
    160c:	11 24       	eor	r1, r1
    160e:	8f 93       	push	r24
    1610:	9f 93       	push	r25
	// Once triggered, disable further comparator interrupt
	ACSR &= ~(1<<ACIE);
    1612:	43 98       	cbi	0x08, 3	; 8
	// Turn on heater TRIAC
	if (heater_cnt < ctrl_heater_sync)
    1614:	90 91 f8 00 	lds	r25, 0x00F8
    1618:	80 91 00 01 	lds	r24, 0x0100
    161c:	98 17       	cp	r25, r24
    161e:	20 f4       	brcc	.+8      	; 0x1628 <__vector_16+0x24>
		PORTD |= (1<<PD_HEATER | 1<<PD_HEAT_INDIC);	// Direct heater indication
    1620:	82 b3       	in	r24, 0x12	; 18
    1622:	80 63       	ori	r24, 0x30	; 48
    1624:	82 bb       	out	0x12, r24	; 18
    1626:	01 c0       	rjmp	.+2      	; 0x162a <__vector_16+0x26>
	else
		PORTD &= ~(1<<PD_HEAT_INDIC);
    1628:	95 98       	cbi	0x12, 5	; 18
	// Reprogram timer0
	TCNT0 = 256 - TRIAC_IMPULSE_TIME;		// Triac gate impulse time
    162a:	86 ef       	ldi	r24, 0xF6	; 246
    162c:	82 bf       	out	0x32, r24	; 50
	// Modify state	
	p_state &= ~STATE_MASK;					// Start new state machine cycle
    162e:	80 91 78 00 	lds	r24, 0x0078
    1632:	80 7f       	andi	r24, 0xF0	; 240
	p_state ^= HALF_PERIOD_FLAG;			// Toggle flag
    1634:	80 58       	subi	r24, 0x80	; 128
    1636:	80 93 78 00 	sts	0x0078, r24
	
}
    163a:	9f 91       	pop	r25
    163c:	8f 91       	pop	r24
    163e:	0f 90       	pop	r0
    1640:	0f be       	out	0x3f, r0	; 63
    1642:	0f 90       	pop	r0
    1644:	1f 90       	pop	r1
    1646:	18 95       	reti

00001648 <__vector_9>:



ISR(TIMER0_OVF_vect)
{
    1648:	1f 92       	push	r1
    164a:	0f 92       	push	r0
    164c:	0f b6       	in	r0, 0x3f	; 63
    164e:	0f 92       	push	r0
    1650:	11 24       	eor	r1, r1
    1652:	2f 93       	push	r18
    1654:	3f 93       	push	r19
    1656:	4f 93       	push	r20
    1658:	5f 93       	push	r21
    165a:	6f 93       	push	r22
    165c:	7f 93       	push	r23
    165e:	8f 93       	push	r24
    1660:	9f 93       	push	r25
    1662:	af 93       	push	r26
    1664:	bf 93       	push	r27
    1666:	ef 93       	push	r30
    1668:	ff 93       	push	r31
	uint8_t temp;
	
	switch(p_state & STATE_MASK)
    166a:	90 91 78 00 	lds	r25, 0x0078
    166e:	89 2f       	mov	r24, r25
    1670:	8f 70       	andi	r24, 0x0F	; 15
    1672:	81 30       	cpi	r24, 0x01	; 1
    1674:	51 f0       	breq	.+20     	; 0x168a <__vector_9+0x42>
    1676:	28 f0       	brcs	.+10     	; 0x1682 <__vector_9+0x3a>
    1678:	82 30       	cpi	r24, 0x02	; 2
    167a:	69 f0       	breq	.+26     	; 0x1696 <__vector_9+0x4e>
    167c:	83 30       	cpi	r24, 0x03	; 3
    167e:	89 f4       	brne	.+34     	; 0x16a2 <__vector_9+0x5a>
    1680:	0f c0       	rjmp	.+30     	; 0x16a0 <__vector_9+0x58>
	{
		// TRIAC_IMPULSE_TIME finished
		case 0x00:
			// Turn off heater TRIAC
			PORTD &= ~(1<<PD_HEATER);
    1682:	94 98       	cbi	0x12, 4	; 18
			TCNT0 = 256 - (QUATER_PERIOD_TIME - TRIAC_IMPULSE_TIME);
    1684:	8c eb       	ldi	r24, 0xBC	; 188
    1686:	82 bf       	out	0x32, r24	; 50
			break;
    1688:	0c c0       	rjmp	.+24     	; 0x16a2 <__vector_9+0x5a>
		// QUATER_PERIOD_TIME finished	
		case 0x01:	
			TCNT0 = 256 - (SYNC_IGNORE_TIME - QUATER_PERIOD_TIME);
    168a:	82 ec       	ldi	r24, 0xC2	; 194
    168c:	82 bf       	out	0x32, r24	; 50
			// Start ADC conversion once every AC line period
			if (!(p_state & HALF_PERIOD_FLAG))
    168e:	97 fd       	sbrc	r25, 7
    1690:	08 c0       	rjmp	.+16     	; 0x16a2 <__vector_9+0x5a>
				ADCSRA |= (1<<ADSC);
    1692:	36 9a       	sbi	0x06, 6	; 6
    1694:	06 c0       	rjmp	.+12     	; 0x16a2 <__vector_9+0x5a>
			break;	
		// SYNC_IGNORE_TIME finished	
		case 0x02:
			TCNT0 = 256 - SYNC_LOST_TIMEOUT;
    1696:	80 ee       	ldi	r24, 0xE0	; 224
    1698:	82 bf       	out	0x32, r24	; 50
			// Clear flag and enable interrupt from analog comparator
			ACSR |= (1<<ACI);
    169a:	44 9a       	sbi	0x08, 4	; 8
			ACSR |= (1<<ACIE);
    169c:	43 9a       	sbi	0x08, 3	; 8
			break;
    169e:	01 c0       	rjmp	.+2      	; 0x16a2 <__vector_9+0x5a>
		// SYNC_LOST_TIMEOUT finished
		case 0x03:
			// Error - sync is lost. It means that device has been disconnected from AC line.
			// Disable all power-consuming devices like LEDs and save user settings to EEPROM.
			exitPowerOff();
    16a0:	ac d8       	rcall	.-3752   	; 0x7fa <exitPowerOff>
			// Sync is not present - do nothing
			break;
	}	

	// Full period check
	if ((p_state & (HALF_PERIOD_FLAG | STATE_MASK)) == (HALF_PERIOD_FLAG | 0x01))
    16a2:	80 91 78 00 	lds	r24, 0x0078
    16a6:	8f 78       	andi	r24, 0x8F	; 143
    16a8:	81 38       	cpi	r24, 0x81	; 129
    16aa:	09 f0       	breq	.+2      	; 0x16ae <__vector_9+0x66>
    16ac:	a9 c0       	rjmp	.+338    	; 0x1800 <__vector_9+0x1b8>
	{
		// Full AC line period is done. Update controls.
		
		temp = PORTD;
    16ae:	82 b3       	in	r24, 0x12	; 18
		temp &= ~(1<<PD_M1 | 1<<PD_M2);
    16b0:	83 7f       	andi	r24, 0xF3	; 243
		if ( rollState & SKIP_CURRENT_MOTOR_CTRL )
    16b2:	90 91 f4 00 	lds	r25, 0x00F4
    16b6:	93 ff       	sbrs	r25, 3
    16b8:	05 c0       	rjmp	.+10     	; 0x16c4 <__vector_9+0x7c>
		{
			// Direction control changed. Skip current period to allow TRIACs fully close
			rollState &= ~SKIP_CURRENT_MOTOR_CTRL;
    16ba:	97 7f       	andi	r25, 0xF7	; 247
    16bc:	90 93 f4 00 	sts	0x00F4, r25
			PORTD = temp; 	
    16c0:	82 bb       	out	0x12, r24	; 18
    16c2:	76 c0       	rjmp	.+236    	; 0x17b0 <__vector_9+0x168>
		}
		else
		{
			// Apply direction control 
			if (rollState & ROLL_FWD)
    16c4:	90 ff       	sbrs	r25, 0
    16c6:	02 c0       	rjmp	.+4      	; 0x16cc <__vector_9+0x84>
				temp |= (1<<PD_M1);
    16c8:	84 60       	ori	r24, 0x04	; 4
    16ca:	02 c0       	rjmp	.+4      	; 0x16d0 <__vector_9+0x88>
			else if (rollState & ROLL_REV)
    16cc:	91 fd       	sbrc	r25, 1
				temp |= (1<<PD_M2);
    16ce:	88 60       	ori	r24, 0x08	; 8
			PORTD = temp; 
    16d0:	82 bb       	out	0x12, r24	; 18
// Function to process rolling - sets rotation direction for next period
// Call once per each AC line period
static inline void controlRolling()
{
	// Process cycle rolling
	switch(rollState & (ROLL_FWD | ROLL_REV | ROLL_CYCLE))
    16d2:	40 91 f4 00 	lds	r20, 0x00F4
    16d6:	84 2f       	mov	r24, r20
    16d8:	87 70       	andi	r24, 0x07	; 7
    16da:	85 30       	cpi	r24, 0x05	; 5
    16dc:	19 f0       	breq	.+6      	; 0x16e4 <__vector_9+0x9c>
    16de:	86 30       	cpi	r24, 0x06	; 6
    16e0:	e9 f5       	brne	.+122    	; 0x175c <__vector_9+0x114>
    16e2:	1d c0       	rjmp	.+58     	; 0x171e <__vector_9+0xd6>
//---------------------------------------------//
//---------------------------------------------//

static inline uint8_t reachedTopPoint(void)
{
	return (	(int16_t)(topPoint - rollPoint) <= 0 );
    16e4:	80 91 fe 00 	lds	r24, 0x00FE
    16e8:	90 91 ff 00 	lds	r25, 0x00FF
    16ec:	20 91 fa 00 	lds	r18, 0x00FA
    16f0:	30 91 fb 00 	lds	r19, 0x00FB
    16f4:	82 1b       	sub	r24, r18
    16f6:	93 0b       	sbc	r25, r19
{
	// Process cycle rolling
	switch(rollState & (ROLL_FWD | ROLL_REV | ROLL_CYCLE))
	{
		case (ROLL_FWD | ROLL_CYCLE):
			if (reachedTopPoint())
    16f8:	18 16       	cp	r1, r24
    16fa:	19 06       	cpc	r1, r25
    16fc:	7c f1       	brlt	.+94     	; 0x175c <__vector_9+0x114>
			{
				if (activeRollCycle >= rollCycleSet)	
    16fe:	80 91 f3 00 	lds	r24, 0x00F3
    1702:	90 91 2e 01 	lds	r25, 0x012E
    1706:	89 17       	cp	r24, r25
    1708:	28 f0       	brcs	.+10     	; 0x1714 <__vector_9+0xcc>
				{
					// DONE!
					rollState &= ~ROLL_CYCLE;
    170a:	4b 7f       	andi	r20, 0xFB	; 251
					rollState |= CYCLE_ROLL_DONE;
    170c:	40 61       	ori	r20, 0x10	; 16
    170e:	40 93 f4 00 	sts	0x00F4, r20
    1712:	24 c0       	rjmp	.+72     	; 0x175c <__vector_9+0x114>
				}
				else
				{
					activeRollCycle++;
    1714:	8f 5f       	subi	r24, 0xFF	; 255
    1716:	80 93 f3 00 	sts	0x00F3, r24
					// Change dir	
					newDirReq = ROLL_REV;				
    171a:	82 e0       	ldi	r24, 0x02	; 2
    171c:	1d c0       	rjmp	.+58     	; 0x1758 <__vector_9+0x110>
	return (	(int16_t)(topPoint - rollPoint) <= 0 );
}

static inline uint8_t reachedBottomPoint(void)
{
	return (	(int16_t)(rollPoint - bottomPoint) <= 0 );
    171e:	80 91 fa 00 	lds	r24, 0x00FA
    1722:	90 91 fb 00 	lds	r25, 0x00FB
    1726:	20 91 fc 00 	lds	r18, 0x00FC
    172a:	30 91 fd 00 	lds	r19, 0x00FD
    172e:	82 1b       	sub	r24, r18
    1730:	93 0b       	sbc	r25, r19
				}
			}
			break;
		
		case (ROLL_REV | ROLL_CYCLE):	
			if (reachedBottomPoint())
    1732:	18 16       	cp	r1, r24
    1734:	19 06       	cpc	r1, r25
    1736:	94 f0       	brlt	.+36     	; 0x175c <__vector_9+0x114>
			{
				if (activeRollCycle >= rollCycleSet)	
    1738:	80 91 f3 00 	lds	r24, 0x00F3
    173c:	90 91 2e 01 	lds	r25, 0x012E
    1740:	89 17       	cp	r24, r25
    1742:	30 f0       	brcs	.+12     	; 0x1750 <__vector_9+0x108>
				{
					// DONE!
					rollState &= ~ROLL_CYCLE;
    1744:	84 2f       	mov	r24, r20
    1746:	8b 7f       	andi	r24, 0xFB	; 251
					rollState |= CYCLE_ROLL_DONE;
    1748:	80 61       	ori	r24, 0x10	; 16
    174a:	80 93 f4 00 	sts	0x00F4, r24
    174e:	06 c0       	rjmp	.+12     	; 0x175c <__vector_9+0x114>
				}
				else
				{
					activeRollCycle++;
    1750:	8f 5f       	subi	r24, 0xFF	; 255
    1752:	80 93 f3 00 	sts	0x00F3, r24
					// Change dir	
					newDirReq = ROLL_FWD;
    1756:	81 e0       	ldi	r24, 0x01	; 1
    1758:	80 93 f9 00 	sts	0x00F9, r24
		default:
			break;
	}
	
	// Process direction change
	if ((rollState ^ newDirReq) & (ROLL_FWD | ROLL_REV))
    175c:	20 91 f4 00 	lds	r18, 0x00F4
    1760:	90 91 f9 00 	lds	r25, 0x00F9
    1764:	89 2f       	mov	r24, r25
    1766:	82 27       	eor	r24, r18
    1768:	83 70       	andi	r24, 0x03	; 3
    176a:	19 f0       	breq	.+6      	; 0x1772 <__vector_9+0x12a>
	{
		// ROLL_DIR_CHANGED is used for sound beep
		rollState |= (SKIP_CURRENT_MOTOR_CTRL | ROLL_DIR_CHANGED);
    176c:	28 62       	ori	r18, 0x28	; 40
    176e:	20 93 f4 00 	sts	0x00F4, r18
	}
	
	rollState &= ~(ROLL_FWD | ROLL_REV);
    1772:	80 91 f4 00 	lds	r24, 0x00F4
    1776:	8c 7f       	andi	r24, 0xFC	; 252
	rollState |= newDirReq;
    1778:	89 2b       	or	r24, r25
	rollState &= dirChangedMask;
    177a:	90 91 79 00 	lds	r25, 0x0079
    177e:	89 23       	and	r24, r25
    1780:	80 93 f4 00 	sts	0x00F4, r24
	dirChangedMask = 0xFF;
    1784:	9f ef       	ldi	r25, 0xFF	; 255
    1786:	90 93 79 00 	sts	0x0079, r25
	return (	(int16_t)(rollPoint - bottomPoint) <= 0 );
}

static inline void updateRollPoint(void)
{	
	if (rollState & ROLL_FWD)
    178a:	80 ff       	sbrs	r24, 0
    178c:	06 c0       	rjmp	.+12     	; 0x179a <__vector_9+0x152>
		rollPoint++;
    178e:	80 91 fa 00 	lds	r24, 0x00FA
    1792:	90 91 fb 00 	lds	r25, 0x00FB
    1796:	01 96       	adiw	r24, 0x01	; 1
    1798:	07 c0       	rjmp	.+14     	; 0x17a8 <__vector_9+0x160>
	else if (rollState & ROLL_REV)
    179a:	81 ff       	sbrs	r24, 1
    179c:	09 c0       	rjmp	.+18     	; 0x17b0 <__vector_9+0x168>
		rollPoint--;	
    179e:	80 91 fa 00 	lds	r24, 0x00FA
    17a2:	90 91 fb 00 	lds	r25, 0x00FB
    17a6:	01 97       	sbiw	r24, 0x01	; 1
    17a8:	90 93 fb 00 	sts	0x00FB, r25
    17ac:	80 93 fa 00 	sts	0x00FA, r24
			controlRolling();
		}
			

		// Process heater control 
		if (heater_cnt == HEATER_REGULATION_PERIODS - 6)
    17b0:	80 91 f8 00 	lds	r24, 0x00F8
    17b4:	8c 32       	cpi	r24, 0x2C	; 44
    17b6:	b1 f4       	brne	.+44     	; 0x17e4 <__vector_9+0x19c>
		{
			 if (heater_reg_cnt == HEATER_PID_CALL_INTERVAL - 1)
    17b8:	80 91 f5 00 	lds	r24, 0x00F5
    17bc:	83 30       	cpi	r24, 0x03	; 3
    17be:	79 f4       	brne	.+30     	; 0x17de <__vector_9+0x196>
			 {
				 heater_reg_cnt = 0;
    17c0:	10 92 f5 00 	sts	0x00F5, r1
				 // Set flag for PID control
				 heaterState |= READY_TO_UPDATE_HEATER;
    17c4:	80 91 f6 00 	lds	r24, 0x00F6
    17c8:	80 68       	ori	r24, 0x80	; 128
    17ca:	80 93 f6 00 	sts	0x00F6, r24
				 // Save temperature measure at current time
				 PIDsampledADC = getNormalizedRingU16(&ringBufADC);
    17ce:	80 e6       	ldi	r24, 0x60	; 96
    17d0:	90 e0       	ldi	r25, 0x00	; 0
    17d2:	ec d5       	rcall	.+3032   	; 0x23ac <__data_load_end+0x84e>
    17d4:	90 93 08 01 	sts	0x0108, r25
    17d8:	80 93 07 01 	sts	0x0107, r24
    17dc:	03 c0       	rjmp	.+6      	; 0x17e4 <__vector_9+0x19c>
			 }
			 else
			 {
				 heater_reg_cnt++;
    17de:	8f 5f       	subi	r24, 0xFF	; 255
    17e0:	80 93 f5 00 	sts	0x00F5, r24
			 }
		}			 
		
		
		if (heater_cnt == HEATER_REGULATION_PERIODS - 1)
    17e4:	80 91 f8 00 	lds	r24, 0x00F8
    17e8:	81 33       	cpi	r24, 0x31	; 49
    17ea:	39 f4       	brne	.+14     	; 0x17fa <__vector_9+0x1b2>
		{
			heater_cnt = 0;
    17ec:	10 92 f8 00 	sts	0x00F8, r1
			// Copy new output value
			ctrl_heater_sync = ctrl_heater;
    17f0:	80 91 f7 00 	lds	r24, 0x00F7
    17f4:	80 93 00 01 	sts	0x0100, r24
    17f8:	03 c0       	rjmp	.+6      	; 0x1800 <__vector_9+0x1b8>
		}
		else
		{
			heater_cnt++;
    17fa:	8f 5f       	subi	r24, 0xFF	; 255
    17fc:	80 93 f8 00 	sts	0x00F8, r24
			
			
	}
	

	if ((p_state & STATE_MASK)  != 0x0F)
    1800:	80 91 78 00 	lds	r24, 0x0078
    1804:	98 2f       	mov	r25, r24
    1806:	9f 70       	andi	r25, 0x0F	; 15
    1808:	9f 30       	cpi	r25, 0x0F	; 15
    180a:	19 f0       	breq	.+6      	; 0x1812 <__vector_9+0x1ca>
		p_state++;
    180c:	8f 5f       	subi	r24, 0xFF	; 255
    180e:	80 93 78 00 	sts	0x0078, r24

}	
    1812:	ff 91       	pop	r31
    1814:	ef 91       	pop	r30
    1816:	bf 91       	pop	r27
    1818:	af 91       	pop	r26
    181a:	9f 91       	pop	r25
    181c:	8f 91       	pop	r24
    181e:	7f 91       	pop	r23
    1820:	6f 91       	pop	r22
    1822:	5f 91       	pop	r21
    1824:	4f 91       	pop	r20
    1826:	3f 91       	pop	r19
    1828:	2f 91       	pop	r18
    182a:	0f 90       	pop	r0
    182c:	0f be       	out	0x3f, r0	; 63
    182e:	0f 90       	pop	r0
    1830:	1f 90       	pop	r1
    1832:	18 95       	reti

00001834 <processSoftTimer8b>:
 
 
 
 
 void processSoftTimer8b(SoftTimer8b_t *tmr)
 {
    1834:	fc 01       	movw	r30, r24
	 uint8_t newTimerVal;

	 if (!tmr->Enabled)
    1836:	90 81       	ld	r25, Z
    1838:	90 ff       	sbrs	r25, 0
    183a:	27 c0       	rjmp	.+78     	; 0x188a <processSoftTimer8b+0x56>
		return;
	 
	 tmr->FA_EQ = 0;
	 tmr->FA_GE = 0;
	 tmr->FTop = 0;
    183c:	97 7e       	andi	r25, 0xE7	; 231
    183e:	9f 7d       	andi	r25, 0xDF	; 223
    1840:	90 83       	st	Z, r25
	 
	 if (tmr->Timer >= tmr->Top)
    1842:	81 81       	ldd	r24, Z+1	; 0x01
    1844:	22 81       	ldd	r18, Z+2	; 0x02
    1846:	82 17       	cp	r24, r18
    1848:	50 f0       	brcs	.+20     	; 0x185e <processSoftTimer8b+0x2a>
	 {
		 if (tmr->RunOnce)
    184a:	91 ff       	sbrs	r25, 1
    184c:	02 c0       	rjmp	.+4      	; 0x1852 <processSoftTimer8b+0x1e>
		 {
			 tmr->Enabled = 0;
    184e:	9e 7f       	andi	r25, 0xFE	; 254
    1850:	90 83       	st	Z, r25
		 }
		 tmr->FTop = 1;
    1852:	90 81       	ld	r25, Z
		 tmr->FOvfl = 1;
    1854:	90 62       	ori	r25, 0x20	; 32
    1856:	90 64       	ori	r25, 0x40	; 64
    1858:	90 83       	st	Z, r25
		 newTimerVal = 0;
    185a:	20 e0       	ldi	r18, 0x00	; 0
    185c:	02 c0       	rjmp	.+4      	; 0x1862 <processSoftTimer8b+0x2e>
	 }
	 else
	 {
		 newTimerVal = tmr->Timer + 1;
    185e:	28 2f       	mov	r18, r24
    1860:	2f 5f       	subi	r18, 0xFF	; 255
	 }
	 
	 if (tmr->Timer == tmr->CompA)
    1862:	93 81       	ldd	r25, Z+3	; 0x03
    1864:	89 13       	cpse	r24, r25
    1866:	0b c0       	rjmp	.+22     	; 0x187e <processSoftTimer8b+0x4a>
	 {
		 tmr->FA_EQ = 1;
    1868:	80 81       	ld	r24, Z
		 tmr->FA_GE = 1;
    186a:	88 60       	ori	r24, 0x08	; 8
    186c:	80 61       	ori	r24, 0x10	; 16
		 tmr->FA_TGL = !tmr->FA_TGL;
    186e:	82 fb       	bst	r24, 2
    1870:	99 27       	eor	r25, r25
    1872:	90 f9       	bld	r25, 0
    1874:	31 e0       	ldi	r19, 0x01	; 1
    1876:	93 27       	eor	r25, r19
    1878:	90 fb       	bst	r25, 0
    187a:	82 f9       	bld	r24, 2
    187c:	04 c0       	rjmp	.+8      	; 0x1886 <processSoftTimer8b+0x52>
	 }
	 else if (tmr->Timer >= tmr->CompA)
    187e:	89 17       	cp	r24, r25
    1880:	18 f0       	brcs	.+6      	; 0x1888 <processSoftTimer8b+0x54>
	 {
		 tmr->FA_GE = 1;
    1882:	80 81       	ld	r24, Z
    1884:	80 61       	ori	r24, 0x10	; 16
    1886:	80 83       	st	Z, r24
	 }
	 
	 tmr->Timer = newTimerVal; 
    1888:	21 83       	std	Z+1, r18	; 0x01
    188a:	08 95       	ret

0000188c <SetBeeperFreq>:
}

// Setup beeper frequency (Hz)
void SetBeeperFreq(uint16_t freq_hz)
{
	uint16_t period_us = 1000000 / freq_hz;
    188c:	9c 01       	movw	r18, r24
    188e:	40 e0       	ldi	r20, 0x00	; 0
    1890:	50 e0       	ldi	r21, 0x00	; 0
    1892:	60 e4       	ldi	r22, 0x40	; 64
    1894:	72 e4       	ldi	r23, 0x42	; 66
    1896:	8f e0       	ldi	r24, 0x0F	; 15
    1898:	90 e0       	ldi	r25, 0x00	; 0
    189a:	e5 d0       	rcall	.+458    	; 0x1a66 <__divmodsi4>
	if (period_us & 0xFFF8)
    189c:	da 01       	movw	r26, r20
    189e:	c9 01       	movw	r24, r18
    18a0:	88 7f       	andi	r24, 0xF8	; 248
    18a2:	aa 27       	eor	r26, r26
    18a4:	bb 27       	eor	r27, r27
    18a6:	89 2b       	or	r24, r25
    18a8:	51 f0       	breq	.+20     	; 0x18be <SetBeeperFreq+0x32>
		OCR1A = (period_us>>3) - 1;
    18aa:	43 e0       	ldi	r20, 0x03	; 3
    18ac:	36 95       	lsr	r19
    18ae:	27 95       	ror	r18
    18b0:	4a 95       	dec	r20
    18b2:	e1 f7       	brne	.-8      	; 0x18ac <SetBeeperFreq+0x20>
    18b4:	21 50       	subi	r18, 0x01	; 1
    18b6:	31 09       	sbc	r19, r1
    18b8:	3b bd       	out	0x2b, r19	; 43
    18ba:	2a bd       	out	0x2a, r18	; 42
    18bc:	04 c0       	rjmp	.+8      	; 0x18c6 <SetBeeperFreq+0x3a>
	else
		OCR1A = 0x1;
    18be:	81 e0       	ldi	r24, 0x01	; 1
    18c0:	90 e0       	ldi	r25, 0x00	; 0
    18c2:	9b bd       	out	0x2b, r25	; 43
    18c4:	8a bd       	out	0x2a, r24	; 42
	TCNT1 = 0;
    18c6:	1d bc       	out	0x2d, r1	; 45
    18c8:	1c bc       	out	0x2c, r1	; 44
    18ca:	08 95       	ret

000018cc <StartBeep>:
}

// Beep for some time in ms
void StartBeep(uint16_t time_ms)
{
	if (sound_enable)
    18cc:	20 91 2b 01 	lds	r18, 0x012B
    18d0:	22 23       	and	r18, r18
    18d2:	39 f0       	breq	.+14     	; 0x18e2 <StartBeep+0x16>
	{
		beep_cnt = time_ms;
    18d4:	90 93 04 01 	sts	0x0104, r25
    18d8:	80 93 03 01 	sts	0x0103, r24
// Enable / disable beeper output
inline void SetBeepOutput(uint8_t val)
{
	if (val)
		// Toggle OCR1A on compare match
		TCCR1A |= (1<<COM1A0);
    18dc:	8f b5       	in	r24, 0x2f	; 47
    18de:	80 64       	ori	r24, 0x40	; 64
    18e0:	8f bd       	out	0x2f, r24	; 47
    18e2:	08 95       	ret

000018e4 <resetAutoPowerOffCounter>:



void resetAutoPowerOffCounter(void)
{
	systick_counter = 0;
    18e4:	10 92 06 01 	sts	0x0106, r1
    18e8:	10 92 05 01 	sts	0x0105, r1
	minute_counter = 0;
    18ec:	10 92 01 01 	sts	0x0101, r1
    18f0:	08 95       	ret

000018f2 <processAutoPowerOff>:
}

void processAutoPowerOff(void)
{
	//if (systick_counter == SYSTICKS_PER_SECOND * 60 - 1)
	if (systick_counter == SYSTICKS_PER_SECOND * 5 - 1)
    18f2:	80 91 05 01 	lds	r24, 0x0105
    18f6:	90 91 06 01 	lds	r25, 0x0106
    18fa:	83 36       	cpi	r24, 0x63	; 99
    18fc:	91 05       	cpc	r25, r1
    18fe:	61 f4       	brne	.+24     	; 0x1918 <processAutoPowerOff+0x26>
	{
		systick_counter = 0;
    1900:	10 92 06 01 	sts	0x0106, r1
    1904:	10 92 05 01 	sts	0x0105, r1
		if (minute_counter != MAX_POWEROFF_TIMEOUT - 1)
    1908:	80 91 01 01 	lds	r24, 0x0101
    190c:	8e 35       	cpi	r24, 0x5E	; 94
    190e:	49 f0       	breq	.+18     	; 0x1922 <processAutoPowerOff+0x30>
		{
			minute_counter++;
    1910:	8f 5f       	subi	r24, 0xFF	; 255
    1912:	80 93 01 01 	sts	0x0101, r24
    1916:	08 95       	ret
		//	 Alert user - TODO
		//}
	}
	else
	{
		systick_counter++;
    1918:	01 96       	adiw	r24, 0x01	; 1
    191a:	90 93 06 01 	sts	0x0106, r25
    191e:	80 93 05 01 	sts	0x0105, r24
    1922:	08 95       	ret

00001924 <__vector_3>:




ISR(TIMER2_COMP_vect)
{	
    1924:	1f 92       	push	r1
    1926:	0f 92       	push	r0
    1928:	0f b6       	in	r0, 0x3f	; 63
    192a:	0f 92       	push	r0
    192c:	11 24       	eor	r1, r1
    192e:	2f 93       	push	r18
    1930:	3f 93       	push	r19
    1932:	4f 93       	push	r20
    1934:	5f 93       	push	r21
    1936:	6f 93       	push	r22
    1938:	7f 93       	push	r23
    193a:	8f 93       	push	r24
    193c:	9f 93       	push	r25
    193e:	af 93       	push	r26
    1940:	bf 93       	push	r27
    1942:	ef 93       	push	r30
    1944:	ff 93       	push	r31
	
	// Manage beeper
	if (beep_cnt)
    1946:	80 91 03 01 	lds	r24, 0x0103
    194a:	90 91 04 01 	lds	r25, 0x0104
    194e:	00 97       	sbiw	r24, 0x00	; 0
    1950:	31 f0       	breq	.+12     	; 0x195e <__vector_3+0x3a>
		beep_cnt--;
    1952:	01 97       	sbiw	r24, 0x01	; 1
    1954:	90 93 04 01 	sts	0x0104, r25
    1958:	80 93 03 01 	sts	0x0103, r24
    195c:	03 c0       	rjmp	.+6      	; 0x1964 <__vector_3+0x40>
	if (val)
		// Toggle OCR1A on compare match
		TCCR1A |= (1<<COM1A0);
	else
		// Disable OCR1A output
		TCCR1A &= ~(1<<COM1A0 | 1<<COM1A1);
    195e:	8f b5       	in	r24, 0x2f	; 47
    1960:	8f 73       	andi	r24, 0x3F	; 63
    1962:	8f bd       	out	0x2f, r24	; 47
		beep_cnt--;
	else
		SetBeepOutput(0);	// done
	
	// Manage LED indicator
	processLedIndicator();
    1964:	ce d7       	rcall	.+3996   	; 0x2902 <__data_load_end+0xda4>
	
	// Process menu update timer
	processSoftTimer8b(&menuUpdateTimer);	
    1966:	8a e7       	ldi	r24, 0x7A	; 122
    1968:	90 e0       	ldi	r25, 0x00	; 0
    196a:	64 df       	rcall	.-312    	; 0x1834 <processSoftTimer8b>
	
}
    196c:	ff 91       	pop	r31
    196e:	ef 91       	pop	r30
    1970:	bf 91       	pop	r27
    1972:	af 91       	pop	r26
    1974:	9f 91       	pop	r25
    1976:	8f 91       	pop	r24
    1978:	7f 91       	pop	r23
    197a:	6f 91       	pop	r22
    197c:	5f 91       	pop	r21
    197e:	4f 91       	pop	r20
    1980:	3f 91       	pop	r19
    1982:	2f 91       	pop	r18
    1984:	0f 90       	pop	r0
    1986:	0f be       	out	0x3f, r0	; 63
    1988:	0f 90       	pop	r0
    198a:	1f 90       	pop	r1
    198c:	18 95       	reti

0000198e <USART_send>:



void USART_send( uint8_t data )
{
	UCSRA |= (1<<TXC);                 // Clear flag
    198e:	5e 9a       	sbi	0x0b, 6	; 11
	UDR = data;
    1990:	8c b9       	out	0x0c, r24	; 12
	while ( !(UCSRA & (1<<TXC)) );  // Wait
    1992:	5e 9b       	sbis	0x0b, 6	; 11
    1994:	fe cf       	rjmp	.-4      	; 0x1992 <USART_send+0x4>
}
    1996:	08 95       	ret

00001998 <USART_sendstr>:


void USART_sendstr(char* str)
{
    1998:	1f 93       	push	r17
    199a:	cf 93       	push	r28
    199c:	df 93       	push	r29
    199e:	ec 01       	movw	r28, r24
	uint8_t i = 0;
    19a0:	10 e0       	ldi	r17, 0x00	; 0
	while (str[i])
    19a2:	02 c0       	rjmp	.+4      	; 0x19a8 <USART_sendstr+0x10>
	{
		USART_send(str[i++]);
    19a4:	1f 5f       	subi	r17, 0xFF	; 255
    19a6:	f3 df       	rcall	.-26     	; 0x198e <USART_send>


void USART_sendstr(char* str)
{
	uint8_t i = 0;
	while (str[i])
    19a8:	fe 01       	movw	r30, r28
    19aa:	e1 0f       	add	r30, r17
    19ac:	f1 1d       	adc	r31, r1
    19ae:	80 81       	ld	r24, Z
    19b0:	81 11       	cpse	r24, r1
    19b2:	f8 cf       	rjmp	.-16     	; 0x19a4 <USART_sendstr+0xc>
	{
		USART_send(str[i++]);
	}
}
    19b4:	df 91       	pop	r29
    19b6:	cf 91       	pop	r28
    19b8:	1f 91       	pop	r17
    19ba:	08 95       	ret

000019bc <__udivmodqi4>:
    19bc:	99 1b       	sub	r25, r25
    19be:	79 e0       	ldi	r23, 0x09	; 9
    19c0:	04 c0       	rjmp	.+8      	; 0x19ca <__udivmodqi4_ep>

000019c2 <__udivmodqi4_loop>:
    19c2:	99 1f       	adc	r25, r25
    19c4:	96 17       	cp	r25, r22
    19c6:	08 f0       	brcs	.+2      	; 0x19ca <__udivmodqi4_ep>
    19c8:	96 1b       	sub	r25, r22

000019ca <__udivmodqi4_ep>:
    19ca:	88 1f       	adc	r24, r24
    19cc:	7a 95       	dec	r23
    19ce:	c9 f7       	brne	.-14     	; 0x19c2 <__udivmodqi4_loop>
    19d0:	80 95       	com	r24
    19d2:	08 95       	ret

000019d4 <__udivmodhi4>:
    19d4:	aa 1b       	sub	r26, r26
    19d6:	bb 1b       	sub	r27, r27
    19d8:	51 e1       	ldi	r21, 0x11	; 17
    19da:	07 c0       	rjmp	.+14     	; 0x19ea <__udivmodhi4_ep>

000019dc <__udivmodhi4_loop>:
    19dc:	aa 1f       	adc	r26, r26
    19de:	bb 1f       	adc	r27, r27
    19e0:	a6 17       	cp	r26, r22
    19e2:	b7 07       	cpc	r27, r23
    19e4:	10 f0       	brcs	.+4      	; 0x19ea <__udivmodhi4_ep>
    19e6:	a6 1b       	sub	r26, r22
    19e8:	b7 0b       	sbc	r27, r23

000019ea <__udivmodhi4_ep>:
    19ea:	88 1f       	adc	r24, r24
    19ec:	99 1f       	adc	r25, r25
    19ee:	5a 95       	dec	r21
    19f0:	a9 f7       	brne	.-22     	; 0x19dc <__udivmodhi4_loop>
    19f2:	80 95       	com	r24
    19f4:	90 95       	com	r25
    19f6:	bc 01       	movw	r22, r24
    19f8:	cd 01       	movw	r24, r26
    19fa:	08 95       	ret

000019fc <__divmodhi4>:
    19fc:	97 fb       	bst	r25, 7
    19fe:	07 2e       	mov	r0, r23
    1a00:	16 f4       	brtc	.+4      	; 0x1a06 <__divmodhi4+0xa>
    1a02:	00 94       	com	r0
    1a04:	06 d0       	rcall	.+12     	; 0x1a12 <__divmodhi4_neg1>
    1a06:	77 fd       	sbrc	r23, 7
    1a08:	08 d0       	rcall	.+16     	; 0x1a1a <__divmodhi4_neg2>
    1a0a:	e4 df       	rcall	.-56     	; 0x19d4 <__udivmodhi4>
    1a0c:	07 fc       	sbrc	r0, 7
    1a0e:	05 d0       	rcall	.+10     	; 0x1a1a <__divmodhi4_neg2>
    1a10:	3e f4       	brtc	.+14     	; 0x1a20 <__divmodhi4_exit>

00001a12 <__divmodhi4_neg1>:
    1a12:	90 95       	com	r25
    1a14:	81 95       	neg	r24
    1a16:	9f 4f       	sbci	r25, 0xFF	; 255
    1a18:	08 95       	ret

00001a1a <__divmodhi4_neg2>:
    1a1a:	70 95       	com	r23
    1a1c:	61 95       	neg	r22
    1a1e:	7f 4f       	sbci	r23, 0xFF	; 255

00001a20 <__divmodhi4_exit>:
    1a20:	08 95       	ret

00001a22 <__udivmodsi4>:
    1a22:	a1 e2       	ldi	r26, 0x21	; 33
    1a24:	1a 2e       	mov	r1, r26
    1a26:	aa 1b       	sub	r26, r26
    1a28:	bb 1b       	sub	r27, r27
    1a2a:	fd 01       	movw	r30, r26
    1a2c:	0d c0       	rjmp	.+26     	; 0x1a48 <__udivmodsi4_ep>

00001a2e <__udivmodsi4_loop>:
    1a2e:	aa 1f       	adc	r26, r26
    1a30:	bb 1f       	adc	r27, r27
    1a32:	ee 1f       	adc	r30, r30
    1a34:	ff 1f       	adc	r31, r31
    1a36:	a2 17       	cp	r26, r18
    1a38:	b3 07       	cpc	r27, r19
    1a3a:	e4 07       	cpc	r30, r20
    1a3c:	f5 07       	cpc	r31, r21
    1a3e:	20 f0       	brcs	.+8      	; 0x1a48 <__udivmodsi4_ep>
    1a40:	a2 1b       	sub	r26, r18
    1a42:	b3 0b       	sbc	r27, r19
    1a44:	e4 0b       	sbc	r30, r20
    1a46:	f5 0b       	sbc	r31, r21

00001a48 <__udivmodsi4_ep>:
    1a48:	66 1f       	adc	r22, r22
    1a4a:	77 1f       	adc	r23, r23
    1a4c:	88 1f       	adc	r24, r24
    1a4e:	99 1f       	adc	r25, r25
    1a50:	1a 94       	dec	r1
    1a52:	69 f7       	brne	.-38     	; 0x1a2e <__udivmodsi4_loop>
    1a54:	60 95       	com	r22
    1a56:	70 95       	com	r23
    1a58:	80 95       	com	r24
    1a5a:	90 95       	com	r25
    1a5c:	9b 01       	movw	r18, r22
    1a5e:	ac 01       	movw	r20, r24
    1a60:	bd 01       	movw	r22, r26
    1a62:	cf 01       	movw	r24, r30
    1a64:	08 95       	ret

00001a66 <__divmodsi4>:
    1a66:	05 2e       	mov	r0, r21
    1a68:	97 fb       	bst	r25, 7
    1a6a:	16 f4       	brtc	.+4      	; 0x1a70 <__divmodsi4+0xa>
    1a6c:	00 94       	com	r0
    1a6e:	06 d0       	rcall	.+12     	; 0x1a7c <__divmodsi4_neg1>
    1a70:	57 fd       	sbrc	r21, 7
    1a72:	0c d0       	rcall	.+24     	; 0x1a8c <__divmodsi4_neg2>
    1a74:	d6 df       	rcall	.-84     	; 0x1a22 <__udivmodsi4>
    1a76:	07 fc       	sbrc	r0, 7
    1a78:	09 d0       	rcall	.+18     	; 0x1a8c <__divmodsi4_neg2>
    1a7a:	7e f4       	brtc	.+30     	; 0x1a9a <__divmodsi4_exit>

00001a7c <__divmodsi4_neg1>:
    1a7c:	90 95       	com	r25
    1a7e:	80 95       	com	r24
    1a80:	70 95       	com	r23
    1a82:	61 95       	neg	r22
    1a84:	7f 4f       	sbci	r23, 0xFF	; 255
    1a86:	8f 4f       	sbci	r24, 0xFF	; 255
    1a88:	9f 4f       	sbci	r25, 0xFF	; 255
    1a8a:	08 95       	ret

00001a8c <__divmodsi4_neg2>:
    1a8c:	50 95       	com	r21
    1a8e:	40 95       	com	r20
    1a90:	30 95       	com	r19
    1a92:	21 95       	neg	r18
    1a94:	3f 4f       	sbci	r19, 0xFF	; 255
    1a96:	4f 4f       	sbci	r20, 0xFF	; 255
    1a98:	5f 4f       	sbci	r21, 0xFF	; 255

00001a9a <__divmodsi4_exit>:
    1a9a:	08 95       	ret

00001a9c <__umulhisi3>:
    1a9c:	a2 9f       	mul	r26, r18
    1a9e:	b0 01       	movw	r22, r0
    1aa0:	b3 9f       	mul	r27, r19
    1aa2:	c0 01       	movw	r24, r0
    1aa4:	a3 9f       	mul	r26, r19
    1aa6:	01 d0       	rcall	.+2      	; 0x1aaa <__umulhisi3+0xe>
    1aa8:	b2 9f       	mul	r27, r18
    1aaa:	70 0d       	add	r23, r0
    1aac:	81 1d       	adc	r24, r1
    1aae:	11 24       	eor	r1, r1
    1ab0:	91 1d       	adc	r25, r1
    1ab2:	08 95       	ret

00001ab4 <__usmulhisi3>:
    1ab4:	f3 df       	rcall	.-26     	; 0x1a9c <__umulhisi3>

00001ab6 <__usmulhisi3_tail>:
    1ab6:	b7 ff       	sbrs	r27, 7
    1ab8:	08 95       	ret
    1aba:	82 1b       	sub	r24, r18
    1abc:	93 0b       	sbc	r25, r19
    1abe:	08 95       	ret

00001ac0 <__muluhisi3>:
    1ac0:	ed df       	rcall	.-38     	; 0x1a9c <__umulhisi3>
    1ac2:	a5 9f       	mul	r26, r21
    1ac4:	90 0d       	add	r25, r0
    1ac6:	b4 9f       	mul	r27, r20
    1ac8:	90 0d       	add	r25, r0
    1aca:	a4 9f       	mul	r26, r20
    1acc:	80 0d       	add	r24, r0
    1ace:	91 1d       	adc	r25, r1
    1ad0:	11 24       	eor	r1, r1
    1ad2:	08 95       	ret

00001ad4 <__eerd_block_m8>:
    1ad4:	dc 01       	movw	r26, r24
    1ad6:	cb 01       	movw	r24, r22

00001ad8 <__eerd_blraw_m8>:
    1ad8:	fc 01       	movw	r30, r24
    1ada:	e1 99       	sbic	0x1c, 1	; 28
    1adc:	fe cf       	rjmp	.-4      	; 0x1ada <__eerd_blraw_m8+0x2>
    1ade:	06 c0       	rjmp	.+12     	; 0x1aec <__eerd_blraw_m8+0x14>
    1ae0:	ff bb       	out	0x1f, r31	; 31
    1ae2:	ee bb       	out	0x1e, r30	; 30
    1ae4:	e0 9a       	sbi	0x1c, 0	; 28
    1ae6:	31 96       	adiw	r30, 0x01	; 1
    1ae8:	0d b2       	in	r0, 0x1d	; 29
    1aea:	0d 92       	st	X+, r0
    1aec:	41 50       	subi	r20, 0x01	; 1
    1aee:	50 40       	sbci	r21, 0x00	; 0
    1af0:	b8 f7       	brcc	.-18     	; 0x1ae0 <__eerd_blraw_m8+0x8>
    1af2:	08 95       	ret

00001af4 <_exit>:
    1af4:	f8 94       	cli

00001af6 <__stop_program>:
    1af6:	ff cf       	rjmp	.-2      	; 0x1af6 <__stop_program>
