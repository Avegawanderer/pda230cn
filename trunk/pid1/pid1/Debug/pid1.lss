
pid1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001be8  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000008e  00800060  00001be8  00001c9c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000cc  008000ee  008000ee  00001d2a  2**0
                  ALLOC
  3 .eeprom       0000000a  00810000  00810000  00001d2a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         000009c0  00000000  00000000  00001d34  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      000001a6  00000000  00000000  000026f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      0000002f  00000000  00000000  0000289a  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000418  00000000  00000000  000028c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00003e9e  00000000  00000000  00002ce1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00001415  00000000  00000000  00006b7f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   000018cd  00000000  00000000  00007f94  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  000009d8  00000000  00000000  00009864  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000010df  00000000  00000000  0000a23c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00001d86  00000000  00000000  0000b31b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000358  00000000  00000000  0000d0a1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	ad c0       	rjmp	.+346    	; 0x15c <__ctors_end>
       2:	c7 c0       	rjmp	.+398    	; 0x192 <__bad_interrupt>
       4:	c6 c0       	rjmp	.+396    	; 0x192 <__bad_interrupt>
       6:	e5 cc       	rjmp	.-1590   	; 0xfffff9d2 <__eeprom_end+0xff7ef9c8>
       8:	c4 c0       	rjmp	.+392    	; 0x192 <__bad_interrupt>
       a:	c3 c0       	rjmp	.+390    	; 0x192 <__bad_interrupt>
       c:	c2 c0       	rjmp	.+388    	; 0x192 <__bad_interrupt>
       e:	c1 c0       	rjmp	.+386    	; 0x192 <__bad_interrupt>
      10:	c0 c0       	rjmp	.+384    	; 0x192 <__bad_interrupt>
      12:	37 cb       	rjmp	.-2450   	; 0xfffff682 <__eeprom_end+0xff7ef678>
      14:	be c0       	rjmp	.+380    	; 0x192 <__bad_interrupt>
      16:	bd c0       	rjmp	.+378    	; 0x192 <__bad_interrupt>
      18:	bc c0       	rjmp	.+376    	; 0x192 <__bad_interrupt>
      1a:	bb c0       	rjmp	.+374    	; 0x192 <__bad_interrupt>
      1c:	d6 c1       	rjmp	.+940    	; 0x3ca <__vector_14>
      1e:	b9 c0       	rjmp	.+370    	; 0x192 <__bad_interrupt>
      20:	0b cb       	rjmp	.-2538   	; 0xfffff638 <__eeprom_end+0xff7ef62e>
      22:	b7 c0       	rjmp	.+366    	; 0x192 <__bad_interrupt>
      24:	b6 c0       	rjmp	.+364    	; 0x192 <__bad_interrupt>

00000026 <led_encode_table>:
      26:	30 3f 4f 3f 31 06 32 5b 33 4f 34 66 53 6d 35 6d     0?O?1.2[3O4fSm5m
      36:	36 7d 37 07 38 7f 39 6f 2e 80 2c 80 2d 40 5f 08     6}7.8.9o..,.-@_.
      46:	20 00 b0 63 41 77 43 39 46 71 4e 54 44 5e 50 73      ..cAwC9FqNTD^Ps
      56:	45 79 52 50                                         EyRP

0000005a <menuFunctionSet>:
      5a:	01 55 08 6b 06 55 07 03 52 07 06 08 ce 05 02 03     .U.k.U..R.......
      6a:	08 9c 07 4a 07 05 38 07 57 07 00 00 0b d4 05 57     ...J..8.W......W
      7a:	07 e2 05 04 38 07 1a 06 00 00 0c d4 05 1a 06 e2     ....8...........
      8a:	05 06 40 07 e4 06 00 00 09 d4 05 e4 06 eb 05 07     ..@.............
      9a:	40 07 96 06 00 00 0a d4 05 96 06 eb 05 08 0c 06     @...............
      aa:	f6 05 00 00 0d fe 05 f6 05 00 00 0e 32 07 fa 05     ............2...
      ba:	e8 05                                               ..

000000bc <menuJumpSet>:
      bc:	01 06 00 03 a8 01 00 01 02 40 01 00 02 05 28 02     .........@....(.
      cc:	00 01 01 80 03 00 83 01 40 05 00 82 01 00 05 04     ........@.......
      dc:	00 04 68 05 02 00 07 a8 05 00 01 0b 28 0b 00 83     ..h.........(...
      ec:	05 28 04 00 82 01 00 04 04 00 06 68 04 02 00 05     .(.........h....
      fc:	a8 04 00 01 0c 28 0c 00 83 04 28 06 00 82 01 00     .....(....(.....
     10c:	06 04 00 07 68 06 02 00 04 a8 06 00 01 09 00 07     ....h...........
     11c:	00 82 01 00 07 04 00 05 68 07 02 00 06 a8 07 00     ........h.......
     12c:	01 0a 00 09 00 02 06 28 09 00 01 08 14 08 00 83     .......(........
     13c:	01 00 0a 00 02 07 28 0a 00 01 0d 14 0d 00 83 01     ......(.........
     14c:	00 01 00 40 0e 00 02 00 40 0e 00 0e 76 01 01 00     ...@....@...v...

0000015c <__ctors_end>:
     15c:	11 24       	eor	r1, r1
     15e:	1f be       	out	0x3f, r1	; 63
     160:	cf e5       	ldi	r28, 0x5F	; 95
     162:	d4 e0       	ldi	r29, 0x04	; 4
     164:	de bf       	out	0x3e, r29	; 62
     166:	cd bf       	out	0x3d, r28	; 61

00000168 <__do_copy_data>:
     168:	10 e0       	ldi	r17, 0x00	; 0
     16a:	a0 e6       	ldi	r26, 0x60	; 96
     16c:	b0 e0       	ldi	r27, 0x00	; 0
     16e:	e8 ee       	ldi	r30, 0xE8	; 232
     170:	fb e1       	ldi	r31, 0x1B	; 27
     172:	02 c0       	rjmp	.+4      	; 0x178 <__do_copy_data+0x10>
     174:	05 90       	lpm	r0, Z+
     176:	0d 92       	st	X+, r0
     178:	ae 3e       	cpi	r26, 0xEE	; 238
     17a:	b1 07       	cpc	r27, r17
     17c:	d9 f7       	brne	.-10     	; 0x174 <__do_copy_data+0xc>

0000017e <__do_clear_bss>:
     17e:	21 e0       	ldi	r18, 0x01	; 1
     180:	ae ee       	ldi	r26, 0xEE	; 238
     182:	b0 e0       	ldi	r27, 0x00	; 0
     184:	01 c0       	rjmp	.+2      	; 0x188 <.do_clear_bss_start>

00000186 <.do_clear_bss_loop>:
     186:	1d 92       	st	X+, r1

00000188 <.do_clear_bss_start>:
     188:	aa 3b       	cpi	r26, 0xBA	; 186
     18a:	b2 07       	cpc	r27, r18
     18c:	e1 f7       	brne	.-8      	; 0x186 <.do_clear_bss_loop>
     18e:	18 d9       	rcall	.-3536   	; 0xfffff3c0 <__eeprom_end+0xff7ef3b6>
     190:	29 cd       	rjmp	.-1454   	; 0xfffffbe4 <__eeprom_end+0xff7efbda>

00000192 <__bad_interrupt>:
     192:	36 cf       	rjmp	.-404    	; 0x0 <__vectors>

00000194 <conv_ADC_to_Celsius>:
		25 Celsius	->	765
*/


uint16_t conv_ADC_to_Celsius(uint16_t adc_value)
{	
     194:	0f 93       	push	r16
     196:	1f 93       	push	r17
	return (uint16_t)(((int32_t)adc_value * k_norm + offset_norm) / (COEFF_SCALE));
     198:	20 91 ee 00 	lds	r18, 0x00EE
     19c:	30 91 ef 00 	lds	r19, 0x00EF
     1a0:	40 91 f0 00 	lds	r20, 0x00F0
     1a4:	50 91 f1 00 	lds	r21, 0x00F1
     1a8:	dc 01       	movw	r26, r24
     1aa:	e2 dc       	rcall	.-1596   	; 0xfffffb70 <__eeprom_end+0xff7efb66>
     1ac:	00 91 f2 00 	lds	r16, 0x00F2
     1b0:	10 91 f3 00 	lds	r17, 0x00F3
     1b4:	20 91 f4 00 	lds	r18, 0x00F4
     1b8:	30 91 f5 00 	lds	r19, 0x00F5
     1bc:	60 0f       	add	r22, r16
     1be:	71 1f       	adc	r23, r17
     1c0:	82 1f       	adc	r24, r18
     1c2:	93 1f       	adc	r25, r19
     1c4:	28 ee       	ldi	r18, 0xE8	; 232
     1c6:	33 e0       	ldi	r19, 0x03	; 3
     1c8:	40 e0       	ldi	r20, 0x00	; 0
     1ca:	50 e0       	ldi	r21, 0x00	; 0
     1cc:	a4 dc       	rcall	.-1720   	; 0xfffffb16 <__eeprom_end+0xff7efb0c>
}
     1ce:	c9 01       	movw	r24, r18
     1d0:	1f 91       	pop	r17
     1d2:	0f 91       	pop	r16
     1d4:	08 95       	ret

000001d6 <conv_Celsius_to_ADC>:

uint16_t conv_Celsius_to_ADC(uint16_t degree_value)
{
     1d6:	0f 93       	push	r16
     1d8:	1f 93       	push	r17
	degree_value += 1;
     1da:	9c 01       	movw	r18, r24
     1dc:	2f 5f       	subi	r18, 0xFF	; 255
     1de:	3f 4f       	sbci	r19, 0xFF	; 255
	return (uint16_t)(((int32_t)degree_value * COEFF_SCALE - offset_norm) / k_norm);
     1e0:	a8 ee       	ldi	r26, 0xE8	; 232
     1e2:	b3 e0       	ldi	r27, 0x03	; 3
     1e4:	b3 dc       	rcall	.-1690   	; 0xfffffb4c <__eeprom_end+0xff7efb42>
     1e6:	00 91 f2 00 	lds	r16, 0x00F2
     1ea:	10 91 f3 00 	lds	r17, 0x00F3
     1ee:	20 91 f4 00 	lds	r18, 0x00F4
     1f2:	30 91 f5 00 	lds	r19, 0x00F5
     1f6:	60 1b       	sub	r22, r16
     1f8:	71 0b       	sbc	r23, r17
     1fa:	82 0b       	sbc	r24, r18
     1fc:	93 0b       	sbc	r25, r19
     1fe:	20 91 ee 00 	lds	r18, 0x00EE
     202:	30 91 ef 00 	lds	r19, 0x00EF
     206:	40 91 f0 00 	lds	r20, 0x00F0
     20a:	50 91 f1 00 	lds	r21, 0x00F1
     20e:	83 dc       	rcall	.-1786   	; 0xfffffb16 <__eeprom_end+0xff7efb0c>
}
     210:	c9 01       	movw	r24, r18
     212:	1f 91       	pop	r17
     214:	0f 91       	pop	r16
     216:	08 95       	ret

00000218 <calculateCoeffs>:

void calculateCoeffs(void)
{
     218:	8f 92       	push	r8
     21a:	9f 92       	push	r9
     21c:	af 92       	push	r10
     21e:	bf 92       	push	r11
     220:	cf 92       	push	r12
     222:	df 92       	push	r13
     224:	ef 92       	push	r14
     226:	ff 92       	push	r15
     228:	cf 93       	push	r28
     22a:	df 93       	push	r29
	k_norm = ((int32_t)(cp.cpoint2 - cp.cpoint1) * COEFF_SCALE) / ((int32_t)(cp.cpoint2_adc - cp.cpoint1_adc));
     22c:	f0 90 87 01 	lds	r15, 0x0187
     230:	a0 91 88 01 	lds	r26, 0x0188
     234:	b0 e0       	ldi	r27, 0x00	; 0
     236:	af 19       	sub	r26, r15
     238:	b1 09       	sbc	r27, r1
     23a:	c0 91 89 01 	lds	r28, 0x0189
     23e:	d0 91 8a 01 	lds	r29, 0x018A
     242:	28 ee       	ldi	r18, 0xE8	; 232
     244:	33 e0       	ldi	r19, 0x03	; 3
     246:	8e dc       	rcall	.-1764   	; 0xfffffb64 <__eeprom_end+0xff7efb5a>
     248:	20 91 8b 01 	lds	r18, 0x018B
     24c:	30 91 8c 01 	lds	r19, 0x018C
     250:	2c 1b       	sub	r18, r28
     252:	3d 0b       	sbc	r19, r29
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	5e dc       	rcall	.-1860   	; 0xfffffb16 <__eeprom_end+0xff7efb0c>
     25a:	49 01       	movw	r8, r18
     25c:	5a 01       	movw	r10, r20
     25e:	20 93 ee 00 	sts	0x00EE, r18
     262:	30 93 ef 00 	sts	0x00EF, r19
     266:	40 93 f0 00 	sts	0x00F0, r20
     26a:	50 93 f1 00 	sts	0x00F1, r21
	offset_norm = (int32_t)cp.cpoint1 * COEFF_SCALE - (int32_t)cp.cpoint1_adc * k_norm;
     26e:	2f 2d       	mov	r18, r15
     270:	30 e0       	ldi	r19, 0x00	; 0
     272:	a8 ee       	ldi	r26, 0xE8	; 232
     274:	b3 e0       	ldi	r27, 0x03	; 3
     276:	6a dc       	rcall	.-1836   	; 0xfffffb4c <__eeprom_end+0xff7efb42>
     278:	6b 01       	movw	r12, r22
     27a:	7c 01       	movw	r14, r24
     27c:	de 01       	movw	r26, r28
     27e:	a5 01       	movw	r20, r10
     280:	94 01       	movw	r18, r8
     282:	76 dc       	rcall	.-1812   	; 0xfffffb70 <__eeprom_end+0xff7efb66>
     284:	c6 1a       	sub	r12, r22
     286:	d7 0a       	sbc	r13, r23
     288:	e8 0a       	sbc	r14, r24
     28a:	f9 0a       	sbc	r15, r25
     28c:	c0 92 f2 00 	sts	0x00F2, r12
     290:	d0 92 f3 00 	sts	0x00F3, r13
     294:	e0 92 f4 00 	sts	0x00F4, r14
     298:	f0 92 f5 00 	sts	0x00F5, r15
}
     29c:	df 91       	pop	r29
     29e:	cf 91       	pop	r28
     2a0:	ff 90       	pop	r15
     2a2:	ef 90       	pop	r14
     2a4:	df 90       	pop	r13
     2a6:	cf 90       	pop	r12
     2a8:	bf 90       	pop	r11
     2aa:	af 90       	pop	r10
     2ac:	9f 90       	pop	r9
     2ae:	8f 90       	pop	r8
     2b0:	08 95       	ret

000002b2 <update_Celsius>:
}

void update_Celsius(void)
{
	// Convert to Celsius degree
	adc_celsius = conv_ADC_to_Celsius(adc_normalized);
     2b2:	80 91 5b 01 	lds	r24, 0x015B
     2b6:	90 91 5c 01 	lds	r25, 0x015C
     2ba:	6c df       	rcall	.-296    	; 0x194 <conv_ADC_to_Celsius>
     2bc:	90 93 5e 01 	sts	0x015E, r25
     2c0:	80 93 5d 01 	sts	0x015D, r24
     2c4:	08 95       	ret

000002c6 <iir_u16>:



// IIR digital filter
uint16_t iir_u16(uint16_t *data, filter8bit_core_t* iir_core)
{
     2c6:	cf 92       	push	r12
     2c8:	df 92       	push	r13
     2ca:	ef 92       	push	r14
     2cc:	ff 92       	push	r15
     2ce:	1f 93       	push	r17
     2d0:	cf 93       	push	r28
     2d2:	df 93       	push	r29
     2d4:	eb 01       	movw	r28, r22
	uint32_t summ = 0;
	uint8_t i;
	
	for (i=0; i<iir_core->n; i++)
     2d6:	18 81       	ld	r17, Y
     2d8:	fc 01       	movw	r30, r24
     2da:	40 e0       	ldi	r20, 0x00	; 0
     2dc:	50 e0       	ldi	r21, 0x00	; 0


// IIR digital filter
uint16_t iir_u16(uint16_t *data, filter8bit_core_t* iir_core)
{
	uint32_t summ = 0;
     2de:	c1 2c       	mov	r12, r1
     2e0:	d1 2c       	mov	r13, r1
     2e2:	76 01       	movw	r14, r12
	uint8_t i;
	
	for (i=0; i<iir_core->n; i++)
     2e4:	0f c0       	rjmp	.+30     	; 0x304 <iir_u16+0x3e>
		summ += (uint32_t)data[i] * iir_core->coeffs[i];
     2e6:	21 91       	ld	r18, Z+
     2e8:	31 91       	ld	r19, Z+
}	



// IIR digital filter
uint16_t iir_u16(uint16_t *data, filter8bit_core_t* iir_core)
     2ea:	de 01       	movw	r26, r28
     2ec:	a4 0f       	add	r26, r20
     2ee:	b5 1f       	adc	r27, r21
{
	uint32_t summ = 0;
	uint8_t i;
	
	for (i=0; i<iir_core->n; i++)
		summ += (uint32_t)data[i] * iir_core->coeffs[i];
     2f0:	13 96       	adiw	r26, 0x03	; 3
     2f2:	ac 91       	ld	r26, X
     2f4:	b0 e0       	ldi	r27, 0x00	; 0
     2f6:	2a dc       	rcall	.-1964   	; 0xfffffb4c <__eeprom_end+0xff7efb42>
     2f8:	c6 0e       	add	r12, r22
     2fa:	d7 1e       	adc	r13, r23
     2fc:	e8 1e       	adc	r14, r24
     2fe:	f9 1e       	adc	r15, r25
     300:	4f 5f       	subi	r20, 0xFF	; 255
     302:	5f 4f       	sbci	r21, 0xFF	; 255
uint16_t iir_u16(uint16_t *data, filter8bit_core_t* iir_core)
{
	uint32_t summ = 0;
	uint8_t i;
	
	for (i=0; i<iir_core->n; i++)
     304:	41 17       	cp	r20, r17
     306:	78 f3       	brcs	.-34     	; 0x2e6 <iir_u16+0x20>
		summ += (uint32_t)data[i] * iir_core->coeffs[i];
	
	
	return (uint16_t)(summ / iir_core->dc_gain);
     308:	29 81       	ldd	r18, Y+1	; 0x01
     30a:	3a 81       	ldd	r19, Y+2	; 0x02
     30c:	40 e0       	ldi	r20, 0x00	; 0
     30e:	50 e0       	ldi	r21, 0x00	; 0
     310:	c7 01       	movw	r24, r14
     312:	b6 01       	movw	r22, r12
     314:	de db       	rcall	.-2116   	; 0xfffffad2 <__eeprom_end+0xff7efac8>
}
     316:	c9 01       	movw	r24, r18
     318:	df 91       	pop	r29
     31a:	cf 91       	pop	r28
     31c:	1f 91       	pop	r17
     31e:	ff 90       	pop	r15
     320:	ef 90       	pop	r14
     322:	df 90       	pop	r13
     324:	cf 90       	pop	r12
     326:	08 95       	ret

00000328 <addToRingU16>:
//---------------------------------------------//
//---------------------------------------------//

// Ring buffer main function - add new data and update summ
void addToRingU16(RingBufU16_t* bptr, uint16_t sample)
{
     328:	ff 92       	push	r15
     32a:	0f 93       	push	r16
     32c:	1f 93       	push	r17
     32e:	cf 93       	push	r28
     330:	df 93       	push	r29
     332:	fc 01       	movw	r30, r24
     334:	cb 01       	movw	r24, r22
	if (bptr->stat == RNORM)
     336:	20 85       	ldd	r18, Z+8	; 0x08
     338:	21 11       	cpse	r18, r1
     33a:	18 c0       	rjmp	.+48     	; 0x36c <addToRingU16+0x44>
	{
		bptr->summ -= bptr->data[bptr->curr_pos];
     33c:	27 81       	ldd	r18, Z+7	; 0x07
     33e:	41 81       	ldd	r20, Z+1	; 0x01
     340:	32 81       	ldd	r19, Z+2	; 0x02
     342:	a4 2f       	mov	r26, r20
     344:	b3 2f       	mov	r27, r19
     346:	a2 0f       	add	r26, r18
     348:	b1 1d       	adc	r27, r1
     34a:	a2 0f       	add	r26, r18
     34c:	b1 1d       	adc	r27, r1
     34e:	2d 91       	ld	r18, X+
     350:	3c 91       	ld	r19, X
     352:	43 81       	ldd	r20, Z+3	; 0x03
     354:	54 81       	ldd	r21, Z+4	; 0x04
     356:	65 81       	ldd	r22, Z+5	; 0x05
     358:	76 81       	ldd	r23, Z+6	; 0x06
     35a:	42 1b       	sub	r20, r18
     35c:	53 0b       	sbc	r21, r19
     35e:	61 09       	sbc	r22, r1
     360:	71 09       	sbc	r23, r1
     362:	43 83       	std	Z+3, r20	; 0x03
     364:	54 83       	std	Z+4, r21	; 0x04
     366:	65 83       	std	Z+5, r22	; 0x05
     368:	76 83       	std	Z+6, r23	; 0x06
     36a:	05 c0       	rjmp	.+10     	; 0x376 <addToRingU16+0x4e>
	}
	else
	{
		bptr->curr_pos = 0;
     36c:	17 82       	std	Z+7, r1	; 0x07
		bptr->summ = 0;
     36e:	13 82       	std	Z+3, r1	; 0x03
     370:	14 82       	std	Z+4, r1	; 0x04
     372:	15 82       	std	Z+5, r1	; 0x05
     374:	16 82       	std	Z+6, r1	; 0x06
	}
	do	
	{
		bptr->data[bptr->curr_pos++] = sample;
     376:	d1 81       	ldd	r29, Z+1	; 0x01
     378:	f2 80       	ldd	r15, Z+2	; 0x02
     37a:	43 81       	ldd	r20, Z+3	; 0x03
     37c:	54 81       	ldd	r21, Z+4	; 0x04
     37e:	65 81       	ldd	r22, Z+5	; 0x05
     380:	76 81       	ldd	r23, Z+6	; 0x06
		bptr->summ += sample;
     382:	8c 01       	movw	r16, r24
     384:	20 e0       	ldi	r18, 0x00	; 0
     386:	30 e0       	ldi	r19, 0x00	; 0
		bptr->curr_pos = 0;
		bptr->summ = 0;
	}
	do	
	{
		bptr->data[bptr->curr_pos++] = sample;
     388:	c7 81       	ldd	r28, Z+7	; 0x07
     38a:	ad 2f       	mov	r26, r29
     38c:	bf 2d       	mov	r27, r15
     38e:	ac 0f       	add	r26, r28
     390:	b1 1d       	adc	r27, r1
     392:	ac 0f       	add	r26, r28
     394:	b1 1d       	adc	r27, r1
     396:	8d 93       	st	X+, r24
     398:	9c 93       	st	X, r25
     39a:	cf 5f       	subi	r28, 0xFF	; 255
     39c:	c7 83       	std	Z+7, r28	; 0x07
//---------------------------------------------//
//---------------------------------------------//
//---------------------------------------------//

// Ring buffer main function - add new data and update summ
void addToRingU16(RingBufU16_t* bptr, uint16_t sample)
     39e:	40 0f       	add	r20, r16
     3a0:	51 1f       	adc	r21, r17
     3a2:	62 1f       	adc	r22, r18
     3a4:	73 1f       	adc	r23, r19
	}
	do	
	{
		bptr->data[bptr->curr_pos++] = sample;
		bptr->summ += sample;
		if (bptr->curr_pos == bptr->length)	
     3a6:	a0 81       	ld	r26, Z
     3a8:	ca 13       	cpse	r28, r26
     3aa:	02 c0       	rjmp	.+4      	; 0x3b0 <addToRingU16+0x88>
		{	
			bptr->curr_pos = 0;	
     3ac:	17 82       	std	Z+7, r1	; 0x07
			bptr->stat = RNORM;
     3ae:	10 86       	std	Z+8, r1	; 0x08
		}
	} 
	while (bptr->stat != RNORM);
     3b0:	a0 85       	ldd	r26, Z+8	; 0x08
     3b2:	a1 11       	cpse	r26, r1
     3b4:	e9 cf       	rjmp	.-46     	; 0x388 <addToRingU16+0x60>
     3b6:	43 83       	std	Z+3, r20	; 0x03
     3b8:	54 83       	std	Z+4, r21	; 0x04
     3ba:	65 83       	std	Z+5, r22	; 0x05
     3bc:	76 83       	std	Z+6, r23	; 0x06
}
     3be:	df 91       	pop	r29
     3c0:	cf 91       	pop	r28
     3c2:	1f 91       	pop	r17
     3c4:	0f 91       	pop	r16
     3c6:	ff 90       	pop	r15
     3c8:	08 95       	ret

000003ca <__vector_14>:
}
*/


ISR(ADC_vect)
{
     3ca:	1f 92       	push	r1
     3cc:	0f 92       	push	r0
     3ce:	0f b6       	in	r0, 0x3f	; 63
     3d0:	0f 92       	push	r0
     3d2:	11 24       	eor	r1, r1
     3d4:	2f 93       	push	r18
     3d6:	3f 93       	push	r19
     3d8:	4f 93       	push	r20
     3da:	5f 93       	push	r21
     3dc:	6f 93       	push	r22
     3de:	7f 93       	push	r23
     3e0:	8f 93       	push	r24
     3e2:	9f 93       	push	r25
     3e4:	af 93       	push	r26
     3e6:	bf 93       	push	r27
     3e8:	ef 93       	push	r30
     3ea:	ff 93       	push	r31
	// Get new sample
	uint16_t new_sample = 1024 - ADC;	
     3ec:	84 b1       	in	r24, 0x04	; 4
     3ee:	95 b1       	in	r25, 0x05	; 5
     3f0:	60 e0       	ldi	r22, 0x00	; 0
     3f2:	74 e0       	ldi	r23, 0x04	; 4
     3f4:	68 1b       	sub	r22, r24
     3f6:	79 0b       	sbc	r23, r25
	// Add new sample to the ring buffer
	addToRingU16(&ringBufADC, new_sample);
     3f8:	80 e8       	ldi	r24, 0x80	; 128
     3fa:	90 e0       	ldi	r25, 0x00	; 0
     3fc:	95 df       	rcall	.-214    	; 0x328 <addToRingU16>
}	
     3fe:	ff 91       	pop	r31
     400:	ef 91       	pop	r30
     402:	bf 91       	pop	r27
     404:	af 91       	pop	r26
     406:	9f 91       	pop	r25
     408:	8f 91       	pop	r24
     40a:	7f 91       	pop	r23
     40c:	6f 91       	pop	r22
     40e:	5f 91       	pop	r21
     410:	4f 91       	pop	r20
     412:	3f 91       	pop	r19
     414:	2f 91       	pop	r18
     416:	0f 90       	pop	r0
     418:	0f be       	out	0x3f, r0	; 63
     41a:	0f 90       	pop	r0
     41c:	1f 90       	pop	r1
     41e:	18 95       	reti

00000420 <update_normalized_adc>:


void update_normalized_adc()
{
	// Disable interrupts from ADC - to save data integrity
	ADCSRA &= ~(1<<ADIE);	
     420:	33 98       	cbi	0x06, 3	; 6
	// Get normalized mean window summ
//	adc_normalized = (uint16_t)getNormalizedRingU16(&ringBufADC);
	adc_oversampled = ringBufADC.summ >> 2;
     422:	60 91 83 00 	lds	r22, 0x0083
     426:	70 91 84 00 	lds	r23, 0x0084
     42a:	80 91 85 00 	lds	r24, 0x0085
     42e:	90 91 86 00 	lds	r25, 0x0086
     432:	22 e0       	ldi	r18, 0x02	; 2
     434:	96 95       	lsr	r25
     436:	87 95       	ror	r24
     438:	77 95       	ror	r23
     43a:	67 95       	ror	r22
     43c:	2a 95       	dec	r18
     43e:	d1 f7       	brne	.-12     	; 0x434 <update_normalized_adc+0x14>
     440:	70 93 32 01 	sts	0x0132, r23
     444:	60 93 31 01 	sts	0x0131, r22
	// Filter
	addToRingU16(&ringBufFilter, adc_oversampled);
     448:	87 e7       	ldi	r24, 0x77	; 119
     44a:	90 e0       	ldi	r25, 0x00	; 0
     44c:	6d df       	rcall	.-294    	; 0x328 <addToRingU16>
	adc_filtered = iir_u16(filter_buffer, &iir_filter_rect);	
     44e:	60 e6       	ldi	r22, 0x60	; 96
     450:	70 e0       	ldi	r23, 0x00	; 0
     452:	8f e5       	ldi	r24, 0x5F	; 95
     454:	91 e0       	ldi	r25, 0x01	; 1
     456:	37 df       	rcall	.-402    	; 0x2c6 <iir_u16>
     458:	90 93 30 01 	sts	0x0130, r25
     45c:	80 93 2f 01 	sts	0x012F, r24
	adc_normalized = adc_filtered;
     460:	90 93 5c 01 	sts	0x015C, r25
     464:	80 93 5b 01 	sts	0x015B, r24

	//adc_normalized = ringBufADC.summ >> 2;
	// Enable interrupts from ADC
	ADCSRA |= (1<<ADIE);
     468:	33 9a       	sbi	0x06, 3	; 6
     46a:	08 95       	ret

0000046c <getNormalizedRingU16>:
}

// Get ring buffer normalized value
uint16_t getNormalizedRingU16(RingBufU16_t* bptr)
{
	return 	bptr->summ / bptr->length;
     46c:	fc 01       	movw	r30, r24
     46e:	20 81       	ld	r18, Z
     470:	30 e0       	ldi	r19, 0x00	; 0
     472:	40 e0       	ldi	r20, 0x00	; 0
     474:	50 e0       	ldi	r21, 0x00	; 0
     476:	63 81       	ldd	r22, Z+3	; 0x03
     478:	74 81       	ldd	r23, Z+4	; 0x04
     47a:	85 81       	ldd	r24, Z+5	; 0x05
     47c:	96 81       	ldd	r25, Z+6	; 0x06
     47e:	29 db       	rcall	.-2478   	; 0xfffffad2 <__eeprom_end+0xff7efac8>
}
     480:	c9 01       	movw	r24, r18
     482:	08 95       	ret

00000484 <process_buttons>:
	uint8_t long_press_mask;
	uint8_t long_press_event_mask;
	
	uint16_t composed_state;
	
	raw_delayed = raw_current;
     484:	50 91 fc 00 	lds	r21, 0x00FC
	raw_delayed_inv = raw_current_inv;
     488:	30 91 89 00 	lds	r19, 0x0089
	raw_current = raw_button_state;
     48c:	90 91 b9 01 	lds	r25, 0x01B9
     490:	90 93 fc 00 	sts	0x00FC, r25
	raw_current_inv = ~raw_current;
     494:	69 2f       	mov	r22, r25
     496:	60 95       	com	r22
     498:	60 93 89 00 	sts	0x0089, r22
	
	// Must be before press_timer update
	long_press_mask = (press_timer >= LONG_PRESS_DELAY) ? 0xFF : 0x00;
     49c:	80 91 fd 00 	lds	r24, 0x00FD
     4a0:	8c 30       	cpi	r24, 0x0C	; 12
     4a2:	10 f0       	brcs	.+4      	; 0x4a8 <process_buttons+0x24>
     4a4:	2f ef       	ldi	r18, 0xFF	; 255
     4a6:	01 c0       	rjmp	.+2      	; 0x4aa <process_buttons+0x26>
     4a8:	20 e0       	ldi	r18, 0x00	; 0
	
	if (raw_delayed != raw_current)
     4aa:	59 17       	cp	r21, r25
     4ac:	19 f0       	breq	.+6      	; 0x4b4 <process_buttons+0x30>
	{
		press_timer = 0;
     4ae:	10 92 fd 00 	sts	0x00FD, r1
     4b2:	05 c0       	rjmp	.+10     	; 0x4be <process_buttons+0x3a>
	}
	else if (press_timer <= LONG_PRESS_DELAY)
     4b4:	8d 30       	cpi	r24, 0x0D	; 13
     4b6:	18 f4       	brcc	.+6      	; 0x4be <process_buttons+0x3a>
	{
		press_timer++;
     4b8:	8f 5f       	subi	r24, 0xFF	; 255
     4ba:	80 93 fd 00 	sts	0x00FD, r24
	}
	
	// Must after press_timer update
	long_press_event_mask = (press_timer == LONG_PRESS_DELAY) ? 0xFF : 0x00;
     4be:	70 91 fd 00 	lds	r23, 0x00FD
     4c2:	7c 30       	cpi	r23, 0x0C	; 12
     4c4:	11 f4       	brne	.+4      	; 0x4ca <process_buttons+0x46>
     4c6:	4f ef       	ldi	r20, 0xFF	; 255
     4c8:	01 c0       	rjmp	.+2      	; 0x4cc <process_buttons+0x48>
     4ca:	40 e0       	ldi	r20, 0x00	; 0
			
	button_action_down = raw_current & raw_delayed_inv;
     4cc:	89 2f       	mov	r24, r25
     4ce:	83 23       	and	r24, r19
     4d0:	80 93 f9 00 	sts	0x00F9, r24
			
	if (press_timer > REPEAT_DELAY)
     4d4:	77 30       	cpi	r23, 0x07	; 7
     4d6:	08 f0       	brcs	.+2      	; 0x4da <process_buttons+0x56>
		raw_delayed_inv |= 0xFF;
     4d8:	3f ef       	ldi	r19, 0xFF	; 255
	
	button_action_rep = raw_current & raw_delayed_inv;
     4da:	39 23       	and	r19, r25
     4dc:	30 93 f8 00 	sts	0x00F8, r19
	
	button_action_up_short = raw_current_inv & raw_delayed & ~long_press_mask;
     4e0:	20 95       	com	r18
     4e2:	56 23       	and	r21, r22
     4e4:	25 23       	and	r18, r21
     4e6:	20 93 f7 00 	sts	0x00F7, r18
	//button_action_up_long  = raw_current_inv & raw_delayed & long_press_mask;
	button_action_long  = raw_current & long_press_event_mask;
     4ea:	49 23       	and	r20, r25
     4ec:	40 93 f6 00 	sts	0x00F6, r20
	
	// Compose button state
	composed_state = (button_action_down & (BD_MENU | BD_UP | BD_DOWN | BD_ROTFWD | BD_ROTREV | BD_HEATCTRL | BD_CYCLE));
     4f0:	87 7f       	andi	r24, 0xF7	; 247
     4f2:	90 e0       	ldi	r25, 0x00	; 0
	if (button_action_up_short & BD_MENU)
     4f4:	20 fd       	sbrc	r18, 0
		composed_state |= BS_MENU;
     4f6:	91 60       	ori	r25, 0x01	; 1
	//if (button_action_up_long & BD_MENU)
	if (button_action_long & BD_MENU)
     4f8:	40 fd       	sbrc	r20, 0
		composed_state |= BL_MENU;
     4fa:	92 60       	ori	r25, 0x02	; 2
	if (button_action_rep & BD_UP)
     4fc:	31 fd       	sbrc	r19, 1
		composed_state |= BR_UP;	
     4fe:	94 60       	ori	r25, 0x04	; 4
	if (button_action_rep & BD_DOWN)
     500:	32 fd       	sbrc	r19, 2
		composed_state |= BR_DOWN;
     502:	98 60       	ori	r25, 0x08	; 8

	button_state = composed_state;
     504:	90 93 fb 00 	sts	0x00FB, r25
     508:	80 93 fa 00 	sts	0x00FA, r24
     50c:	08 95       	ret

0000050e <processRollControl>:
int16_t dbg_PID_output;


// Function to control motor rotation
void processRollControl(void)
{	
     50e:	cf 93       	push	r28
//	static uint8_t beepMask = 0x00;
//	uint8_t nextBeepMask = 0xFF;
	static uint8_t force_rotate = 0;
	
	// Process auto power off control
	if (autoPowerOffState & AUTO_POFF_ACTIVE)
     510:	80 91 fe 00 	lds	r24, 0x00FE
     514:	80 ff       	sbrs	r24, 0
     516:	0f c0       	rjmp	.+30     	; 0x536 <processRollControl+0x28>
	{
		stopCycleRolling(1);	
     518:	81 e0       	ldi	r24, 0x01	; 1
     51a:	3a d8       	rcall	.-3980   	; 0xfffff590 <__eeprom_end+0xff7ef586>
		if (adc_celsius <= POFF_MOTOR_TRESHOLD)
     51c:	80 91 5d 01 	lds	r24, 0x015D
     520:	90 91 5e 01 	lds	r25, 0x015E
     524:	c3 97       	sbiw	r24, 0x33	; 51
     526:	08 f0       	brcs	.+2      	; 0x52a <processRollControl+0x1c>
     528:	5f c0       	rjmp	.+190    	; 0x5e8 <processRollControl+0xda>
		{
			force_rotate = ROLL_FWD;		// Default direction
     52a:	81 e0       	ldi	r24, 0x01	; 1
     52c:	80 93 ff 00 	sts	0x00FF, r24
			setMotorDirection(0);			// Stop the motor
     530:	80 e0       	ldi	r24, 0x00	; 0
     532:	0d d8       	rcall	.-4070   	; 0xfffff54e <__eeprom_end+0xff7ef544>
     534:	59 c0       	rjmp	.+178    	; 0x5e8 <processRollControl+0xda>
		}
	}
	else
	{
		// Control direction by buttons
		if (button_action_down & BD_ROTFWD)
     536:	80 91 f9 00 	lds	r24, 0x00F9
     53a:	84 ff       	sbrs	r24, 4
     53c:	04 c0       	rjmp	.+8      	; 0x546 <processRollControl+0x38>
		{
			setMotorDirection(ROLL_FWD);	
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	06 d8       	rcall	.-4084   	; 0xfffff54e <__eeprom_end+0xff7ef544>
			beepState |= 0x01;			// pressed FWD button
     542:	c1 e0       	ldi	r28, 0x01	; 1
     544:	13 c0       	rjmp	.+38     	; 0x56c <processRollControl+0x5e>
		}		
		else if (button_action_down & BD_ROTREV)
     546:	85 ff       	sbrs	r24, 5
     548:	04 c0       	rjmp	.+8      	; 0x552 <processRollControl+0x44>
		{
			setMotorDirection(ROLL_REV);
     54a:	82 e0       	ldi	r24, 0x02	; 2
     54c:	00 d8       	rcall	.-4096   	; 0xfffff54e <__eeprom_end+0xff7ef544>
			beepState |= 0x02;			// pressed REV button
     54e:	c2 e0       	ldi	r28, 0x02	; 2
     550:	0d c0       	rjmp	.+26     	; 0x56c <processRollControl+0x5e>
		}		
		else if (button_action_long & BD_CYCLE)
     552:	80 91 f6 00 	lds	r24, 0x00F6
     556:	87 ff       	sbrs	r24, 7
     558:	04 c0       	rjmp	.+8      	; 0x562 <processRollControl+0x54>
		{
			stopCycleRolling(1);		// Reset points and disable CYCLE mode (if was enabled)
     55a:	81 e0       	ldi	r24, 0x01	; 1
     55c:	19 d8       	rcall	.-4046   	; 0xfffff590 <__eeprom_end+0xff7ef586>
			beepState |= 0x08;			// reset of points by long pressing of ROLL button
     55e:	c8 e0       	ldi	r28, 0x08	; 8
     560:	05 c0       	rjmp	.+10     	; 0x56c <processRollControl+0x5e>
		}
		else if (force_rotate)
     562:	80 91 ff 00 	lds	r24, 0x00FF
     566:	81 11       	cpse	r24, r1
		{
			// Auto power off mode was exited by pressing some other button, not direction buttons
			// Start roll, but do not beep in this case
			setMotorDirection(force_rotate);
     568:	f2 d7       	rcall	.+4068   	; 0x154e <setMotorDirection>


// Function to control motor rotation
void processRollControl(void)
{	
	uint8_t beepState = 0;
     56a:	c0 e0       	ldi	r28, 0x00	; 0
		{
			// Auto power off mode was exited by pressing some other button, not direction buttons
			// Start roll, but do not beep in this case
			setMotorDirection(force_rotate);
		}
		force_rotate = 0;		// First normal pass will clear 
     56c:	10 92 ff 00 	sts	0x00FF, r1
			
		if (button_action_up_short & BD_CYCLE)
     570:	80 91 f7 00 	lds	r24, 0x00F7
     574:	87 ff       	sbrs	r24, 7
     576:	0e c0       	rjmp	.+28     	; 0x594 <processRollControl+0x86>
		{
			if (rollState & ROLL_CYCLE)
     578:	80 91 1d 01 	lds	r24, 0x011D
     57c:	82 ff       	sbrs	r24, 2
     57e:	04 c0       	rjmp	.+8      	; 0x588 <processRollControl+0x7a>
			{
				stopCycleRolling(0);
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	06 d8       	rcall	.-4084   	; 0xfffff590 <__eeprom_end+0xff7ef586>
				beepState |= 0x20;		// stopped cycle
     584:	c0 62       	ori	r28, 0x20	; 32
     586:	06 c0       	rjmp	.+12     	; 0x594 <processRollControl+0x86>
			}
			else if (startCycleRolling())
     588:	3f d8       	rcall	.-3970   	; 0xfffff608 <__eeprom_end+0xff7ef5fe>
     58a:	88 23       	and	r24, r24
     58c:	11 f0       	breq	.+4      	; 0x592 <processRollControl+0x84>
			{
				beepState |= 0x10;		// started cycle
     58e:	c0 61       	ori	r28, 0x10	; 16
     590:	01 c0       	rjmp	.+2      	; 0x594 <processRollControl+0x86>
			}
			else
			{
				beepState |= 0x40;		// failed to start cycle
     592:	c0 64       	ori	r28, 0x40	; 64
			}			
		}		
			
		if (rollState & ROLL_DIR_CHANGED)
     594:	80 91 1d 01 	lds	r24, 0x011D
     598:	85 ff       	sbrs	r24, 5
     59a:	04 c0       	rjmp	.+8      	; 0x5a4 <processRollControl+0x96>
		{
			rollState &= ~ROLL_DIR_CHANGED;
     59c:	8f 7d       	andi	r24, 0xDF	; 223
     59e:	80 93 1d 01 	sts	0x011D, r24
			beepState |= 0x04;	
     5a2:	c4 60       	ori	r28, 0x04	; 4
		}
			
		if (rollState & CYCLE_ROLL_DONE)
     5a4:	80 91 1d 01 	lds	r24, 0x011D
     5a8:	84 ff       	sbrs	r24, 4
     5aa:	04 c0       	rjmp	.+8      	; 0x5b4 <processRollControl+0xa6>
		{
			rollState &= ~CYCLE_ROLL_DONE;
     5ac:	8f 7e       	andi	r24, 0xEF	; 239
     5ae:	80 93 1d 01 	sts	0x011D, r24
			beepState |= 0x80;	
     5b2:	c0 68       	ori	r28, 0x80	; 128
		}		
			
		//-----------//
			
		if (beepState & 0x80)		// Roll cycle done
     5b4:	c7 ff       	sbrs	r28, 7
     5b6:	06 c0       	rjmp	.+12     	; 0x5c4 <processRollControl+0xb6>
		{
			SetBeeperFreq(1000);
     5b8:	88 ee       	ldi	r24, 0xE8	; 232
     5ba:	93 e0       	ldi	r25, 0x03	; 3
     5bc:	d4 d9       	rcall	.-3160   	; 0xfffff966 <__eeprom_end+0xff7ef95c>
			StartBeep(200);
     5be:	88 ec       	ldi	r24, 0xC8	; 200
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	11 c0       	rjmp	.+34     	; 0x5e6 <processRollControl+0xd8>
		}		
		else if (beepState & 0x40)	// Roll cycle start fail
     5c4:	c6 ff       	sbrs	r28, 6
     5c6:	03 c0       	rjmp	.+6      	; 0x5ce <processRollControl+0xc0>
		{
			SetBeeperFreq(500);
     5c8:	84 ef       	ldi	r24, 0xF4	; 244
     5ca:	91 e0       	ldi	r25, 0x01	; 1
     5cc:	09 c0       	rjmp	.+18     	; 0x5e0 <processRollControl+0xd2>
			StartBeep(50);
		} 
		else if (beepState & 0x08)	// Reset points
     5ce:	c3 ff       	sbrs	r28, 3
     5d0:	03 c0       	rjmp	.+6      	; 0x5d8 <processRollControl+0xca>
		{
			SetBeeperFreq(800);
     5d2:	80 e2       	ldi	r24, 0x20	; 32
     5d4:	93 e0       	ldi	r25, 0x03	; 3
     5d6:	04 c0       	rjmp	.+8      	; 0x5e0 <processRollControl+0xd2>
			StartBeep(50);
		}							// Other
		else if ( beepState & (0x01 | 0x02 | 0x10 | 0x20 | 0x04) )
     5d8:	c7 73       	andi	r28, 0x37	; 55
     5da:	31 f0       	breq	.+12     	; 0x5e8 <processRollControl+0xda>
		{
			SetBeeperFreq(1000);
     5dc:	88 ee       	ldi	r24, 0xE8	; 232
     5de:	93 e0       	ldi	r25, 0x03	; 3
     5e0:	c2 d9       	rcall	.-3196   	; 0xfffff966 <__eeprom_end+0xff7ef95c>
			StartBeep(50);	
     5e2:	82 e3       	ldi	r24, 0x32	; 50
     5e4:	90 e0       	ldi	r25, 0x00	; 0
     5e6:	df d9       	rcall	.-3138   	; 0xfffff9a6 <__eeprom_end+0xff7ef99c>
		}			
			
	}

	// Indicate direction by LEDs
	clearExtraLeds(LED_ROTFWD | LED_ROTREV);
     5e8:	80 e3       	ldi	r24, 0x30	; 48
     5ea:	8e d2       	rcall	.+1308   	; 0xb08 <clearExtraLeds>
	if (rollState & ROLL_FWD)
     5ec:	80 91 1d 01 	lds	r24, 0x011D
     5f0:	80 ff       	sbrs	r24, 0
     5f2:	02 c0       	rjmp	.+4      	; 0x5f8 <processRollControl+0xea>
		setExtraLeds(LED_ROTFWD);
     5f4:	80 e1       	ldi	r24, 0x10	; 16
     5f6:	03 c0       	rjmp	.+6      	; 0x5fe <processRollControl+0xf0>
	else if (rollState & ROLL_REV)
     5f8:	81 ff       	sbrs	r24, 1
     5fa:	03 c0       	rjmp	.+6      	; 0x602 <processRollControl+0xf4>
		setExtraLeds(LED_ROTREV);
     5fc:	80 e2       	ldi	r24, 0x20	; 32
}
     5fe:	cf 91       	pop	r28
	// Indicate direction by LEDs
	clearExtraLeds(LED_ROTFWD | LED_ROTREV);
	if (rollState & ROLL_FWD)
		setExtraLeds(LED_ROTFWD);
	else if (rollState & ROLL_REV)
		setExtraLeds(LED_ROTREV);
     600:	7d c2       	rjmp	.+1274   	; 0xafc <setExtraLeds>
}
     602:	cf 91       	pop	r28
     604:	08 95       	ret

00000606 <samplePIDProcessValue>:



void samplePIDProcessValue(void)
{
	PIDsampledADC = getNormalizedRingU16(&ringBufADC);
     606:	80 e8       	ldi	r24, 0x80	; 128
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	30 df       	rcall	.-416    	; 0x46c <getNormalizedRingU16>
     60c:	90 93 2e 01 	sts	0x012E, r25
     610:	80 93 2d 01 	sts	0x012D, r24
     614:	08 95       	ret

00000616 <processPID>:




uint8_t processPID(uint16_t setPoint, uint16_t processValue)
{
     616:	0f 93       	push	r16
     618:	1f 93       	push	r17
     61a:	cf 93       	push	r28
     61c:	df 93       	push	r29
	int16_t error, p_term, i_term, d_term, temp;
	static uint16_t lastProcessValue;
	static int16_t integAcc = 0;
	
	error = setPoint - processValue;
     61e:	86 1b       	sub	r24, r22
     620:	97 0b       	sbc	r25, r23
	
	
	//------ Calculate P term --------//
	if (error > 150)
     622:	87 39       	cpi	r24, 0x97	; 151
     624:	91 05       	cpc	r25, r1
     626:	44 f4       	brge	.+16     	; 0x638 <processPID+0x22>
	{
		p_term = 2000;
	}
	else if (error < -150)
     628:	8a 36       	cpi	r24, 0x6A	; 106
     62a:	2f ef       	ldi	r18, 0xFF	; 255
     62c:	92 07       	cpc	r25, r18
     62e:	3c f0       	brlt	.+14     	; 0x63e <processPID+0x28>
	{
		p_term = -2000;
	}
	else
	{
		p_term = error * Kp;
     630:	ec 01       	movw	r28, r24
     632:	cc 0f       	add	r28, r28
     634:	dd 1f       	adc	r29, r29
     636:	05 c0       	rjmp	.+10     	; 0x642 <processPID+0x2c>
	
	
	//------ Calculate P term --------//
	if (error > 150)
	{
		p_term = 2000;
     638:	c0 ed       	ldi	r28, 0xD0	; 208
     63a:	d7 e0       	ldi	r29, 0x07	; 7
     63c:	02 c0       	rjmp	.+4      	; 0x642 <processPID+0x2c>
	}
	else if (error < -150)
	{
		p_term = -2000;
     63e:	c0 e3       	ldi	r28, 0x30	; 48
     640:	d8 ef       	ldi	r29, 0xF8	; 248
	{
		p_term = error * Kp;
	}
	
	//------ Calculate I term --------//
	integAcc += error;
     642:	20 91 04 01 	lds	r18, 0x0104
     646:	30 91 05 01 	lds	r19, 0x0105
	if (error <= 0)
     64a:	18 16       	cp	r1, r24
     64c:	19 06       	cpc	r1, r25
     64e:	0c f0       	brlt	.+2      	; 0x652 <processPID+0x3c>
     650:	0f c0       	rjmp	.+30     	; 0x670 <processPID+0x5a>
	{
		p_term = error * Kp;
	}
	
	//------ Calculate I term --------//
	integAcc += error;
     652:	82 0f       	add	r24, r18
     654:	93 1f       	adc	r25, r19
	if (error <= 0)
	{
		integAcc = 0;
	}
	else if (integAcc > 200)
     656:	89 3c       	cpi	r24, 0xC9	; 201
     658:	91 05       	cpc	r25, r1
     65a:	1c f0       	brlt	.+6      	; 0x662 <processPID+0x4c>
	{
		integAcc = 200;
     65c:	88 ec       	ldi	r24, 0xC8	; 200
     65e:	90 e0       	ldi	r25, 0x00	; 0
     660:	02 c0       	rjmp	.+4      	; 0x666 <processPID+0x50>
	}
	else if (integAcc < 0)
     662:	97 fd       	sbrc	r25, 7
     664:	05 c0       	rjmp	.+10     	; 0x670 <processPID+0x5a>
	{
		p_term = error * Kp;
	}
	
	//------ Calculate I term --------//
	integAcc += error;
     666:	90 93 05 01 	sts	0x0105, r25
     66a:	80 93 04 01 	sts	0x0104, r24
     66e:	04 c0       	rjmp	.+8      	; 0x678 <processPID+0x62>
	{
		integAcc = 200;
	}
	else if (integAcc < 0)
	{
		integAcc = 0;
     670:	10 92 05 01 	sts	0x0105, r1
     674:	10 92 04 01 	sts	0x0104, r1
	}
	i_term = integAcc * Ki;
     678:	00 91 04 01 	lds	r16, 0x0104
     67c:	10 91 05 01 	lds	r17, 0x0105

	
	//------ Calculate D term --------//	
	lastProcessValue = ringBufDterm.summ;
     680:	80 91 8d 00 	lds	r24, 0x008D
     684:	90 91 8e 00 	lds	r25, 0x008E
     688:	90 93 07 01 	sts	0x0107, r25
     68c:	80 93 06 01 	sts	0x0106, r24
	addToRingU16(&ringBufDterm, processValue);
     690:	8a e8       	ldi	r24, 0x8A	; 138
     692:	90 e0       	ldi	r25, 0x00	; 0
     694:	49 de       	rcall	.-878    	; 0x328 <addToRingU16>
	processValue = ringBufDterm.summ;
	d_term = Kd * ((int16_t)(lastProcessValue - processValue));
     696:	80 91 06 01 	lds	r24, 0x0106
     69a:	90 91 07 01 	lds	r25, 0x0107
     69e:	20 91 8d 00 	lds	r18, 0x008D
     6a2:	30 91 8e 00 	lds	r19, 0x008E
     6a6:	82 1b       	sub	r24, r18
     6a8:	93 0b       	sbc	r25, r19
     6aa:	4e e1       	ldi	r20, 0x1E	; 30
     6ac:	48 9f       	mul	r20, r24
     6ae:	90 01       	movw	r18, r0
     6b0:	49 9f       	mul	r20, r25
     6b2:	30 0d       	add	r19, r0
     6b4:	11 24       	eor	r1, r1
	//lastProcessValue = processValue;
	
	//--------- Summ terms -----------//
	temp = (p_term + i_term + d_term) / SCALING_FACTOR;
     6b6:	ce 01       	movw	r24, r28
     6b8:	80 0f       	add	r24, r16
     6ba:	91 1f       	adc	r25, r17
     6bc:	82 0f       	add	r24, r18
     6be:	93 1f       	adc	r25, r19
     6c0:	65 e0       	ldi	r22, 0x05	; 5
     6c2:	70 e0       	ldi	r23, 0x00	; 0
     6c4:	f3 d9       	rcall	.-3098   	; 0xfffffaac <__eeprom_end+0xff7efaa2>
     6c6:	cb 01       	movw	r24, r22
     6c8:	77 ff       	sbrs	r23, 7
     6ca:	02 c0       	rjmp	.+4      	; 0x6d0 <processPID+0xba>
     6cc:	80 e0       	ldi	r24, 0x00	; 0
     6ce:	90 e0       	ldi	r25, 0x00	; 0
     6d0:	83 33       	cpi	r24, 0x33	; 51
     6d2:	91 05       	cpc	r25, r1
     6d4:	14 f0       	brlt	.+4      	; 0x6da <processPID+0xc4>
     6d6:	82 e3       	ldi	r24, 0x32	; 50
     6d8:	90 e0       	ldi	r25, 0x00	; 0
		temp = 0;
	}
	
	
	//------- Debug --------//
	dbg_PID_p_term = p_term;
     6da:	d0 93 95 01 	sts	0x0195, r29
     6de:	c0 93 94 01 	sts	0x0194, r28
	dbg_PID_d_term = d_term;
     6e2:	30 93 a3 01 	sts	0x01A3, r19
     6e6:	20 93 a2 01 	sts	0x01A2, r18
	dbg_PID_i_term = i_term;
     6ea:	10 93 99 01 	sts	0x0199, r17
     6ee:	00 93 98 01 	sts	0x0198, r16
	dbg_PID_output = temp;
     6f2:	90 93 92 01 	sts	0x0192, r25
     6f6:	80 93 91 01 	sts	0x0191, r24
	
	
	return temp;
	
}
     6fa:	df 91       	pop	r29
     6fc:	cf 91       	pop	r28
     6fe:	1f 91       	pop	r17
     700:	0f 91       	pop	r16
     702:	08 95       	ret

00000704 <processHeaterControl>:
	static uint16_t set_value_adc;		// static for debug
	static uint16_t pid_output;			// static for debug
	
	
	// Process heater ON/OFF control by button
	if (button_state & BD_HEATCTRL)
     704:	80 91 fa 00 	lds	r24, 0x00FA
     708:	86 ff       	sbrs	r24, 6
     70a:	07 c0       	rjmp	.+14     	; 0x71a <processHeaterControl+0x16>
	{
		heaterState ^= HEATER_ENABLED;
     70c:	80 91 1f 01 	lds	r24, 0x011F
     710:	91 e0       	ldi	r25, 0x01	; 1
     712:	89 27       	eor	r24, r25
     714:	80 93 1f 01 	sts	0x011F, r24
		// Make heater controller set update_flag on next call
		forceHeaterControlUpdate();
     718:	0d d7       	rcall	.+3610   	; 0x1534 <forceHeaterControlUpdate>
	}
	
	// Process auto power off control
	if (autoPowerOffState & AUTO_POFF_ACTIVE)
     71a:	80 91 fe 00 	lds	r24, 0x00FE
     71e:	80 ff       	sbrs	r24, 0
     720:	05 c0       	rjmp	.+10     	; 0x72c <processHeaterControl+0x28>
	{
		heaterState &= ~HEATER_ENABLED;
     722:	80 91 1f 01 	lds	r24, 0x011F
     726:	8e 7f       	andi	r24, 0xFE	; 254
     728:	80 93 1f 01 	sts	0x011F, r24
	}		
	
	
	// Check if heater control should be updated
	// PID call interval is a multiple of AC line periods, computed as HEATER_REGULATION_PERIODS * 20ms * HEATER_PID_CALL_INTERVAL
	if (heaterState & READY_TO_UPDATE_HEATER)
     72c:	80 91 1f 01 	lds	r24, 0x011F
     730:	87 ff       	sbrs	r24, 7
     732:	1f c0       	rjmp	.+62     	; 0x772 <processHeaterControl+0x6e>
	{
		// Convert temperature setup to equal ADC value
		set_value_adc = conv_Celsius_to_ADC(p.setup_temp_value);					
     734:	80 91 8d 01 	lds	r24, 0x018D
     738:	90 e0       	ldi	r25, 0x00	; 0
     73a:	4d dd       	rcall	.-1382   	; 0x1d6 <conv_Celsius_to_ADC>
     73c:	90 93 01 01 	sts	0x0101, r25
     740:	80 93 00 01 	sts	0x0100, r24
		// Process PID 
		//pid_output = processPID(set_value_adc,PIDsampledADC);
		pid_output = processPID(set_value_adc,adc_normalized);
     744:	60 91 5b 01 	lds	r22, 0x015B
     748:	70 91 5c 01 	lds	r23, 0x015C
     74c:	64 df       	rcall	.-312    	; 0x616 <processPID>
     74e:	80 93 02 01 	sts	0x0102, r24
     752:	10 92 03 01 	sts	0x0103, r1
			
		// Heater control is updated only when flag is set, even if heater must be powered OFF
		if (heaterState & HEATER_ENABLED)
     756:	90 91 1f 01 	lds	r25, 0x011F
     75a:	90 fd       	sbrc	r25, 0
     75c:	01 c0       	rjmp	.+2      	; 0x760 <processHeaterControl+0x5c>
			setHeaterControl(pid_output);	// Flag is cleared automatically
		else
			setHeaterControl(0);
     75e:	80 e0       	ldi	r24, 0x00	; 0
     760:	db d6       	rcall	.+3510   	; 0x1518 <setHeaterControl>
			
		//------- Debug --------//		
		dbg_RealTempPID = adc_normalized;
     762:	80 91 5b 01 	lds	r24, 0x015B
     766:	90 91 5c 01 	lds	r25, 0x015C
     76a:	90 93 97 01 	sts	0x0197, r25
     76e:	80 93 96 01 	sts	0x0196, r24
	}	
		
	
	//------- Debug --------//
	if (heaterState & HEATER_ENABLED)
     772:	80 91 1f 01 	lds	r24, 0x011F
     776:	80 ff       	sbrs	r24, 0
     778:	0f c0       	rjmp	.+30     	; 0x798 <processHeaterControl+0x94>
	{
		setExtraLeds(LED_HEATER);
     77a:	80 e4       	ldi	r24, 0x40	; 64
     77c:	bf d1       	rcall	.+894    	; 0xafc <setExtraLeds>
		dbg_SetTempCelsius = p.setup_temp_value;
     77e:	80 91 8d 01 	lds	r24, 0x018D
     782:	80 93 93 01 	sts	0x0193, r24
		dbg_SetTempPID = set_value_adc;
     786:	80 91 00 01 	lds	r24, 0x0100
     78a:	90 91 01 01 	lds	r25, 0x0101
     78e:	90 93 a6 01 	sts	0x01A6, r25
     792:	80 93 a5 01 	sts	0x01A5, r24
     796:	08 95       	ret
	}
	else
	{
		dbg_SetTempCelsius = 0;
     798:	10 92 93 01 	sts	0x0193, r1
		dbg_SetTempPID = 0;
     79c:	10 92 a6 01 	sts	0x01A6, r1
     7a0:	10 92 a5 01 	sts	0x01A5, r1
		clearExtraLeds(LED_HEATER);
     7a4:	80 e4       	ldi	r24, 0x40	; 64
     7a6:	b0 c1       	rjmp	.+864    	; 0xb08 <clearExtraLeds>

000007a8 <heaterInit>:
	//PIDsampledADC = ringBufADC.summ >> 2;
}

void heaterInit(void)
{
	samplePIDProcessValue();
     7a8:	2e df       	rcall	.-420    	; 0x606 <samplePIDProcessValue>
	processPID(0,PIDsampledADC);
     7aa:	60 91 2d 01 	lds	r22, 0x012D
     7ae:	70 91 2e 01 	lds	r23, 0x012E
     7b2:	80 e0       	ldi	r24, 0x00	; 0
     7b4:	90 e0       	ldi	r25, 0x00	; 0
     7b6:	2f cf       	rjmp	.-418    	; 0x616 <processPID>

000007b8 <processHeaterAlerts>:

// Function to process all heater alerts:
//	- getting near to desired temperature
//	- continuous heating when disabled
void processHeaterAlerts(void)
{
     7b8:	cf 93       	push	r28
     7ba:	df 93       	push	r29
	static uint8_t tempAlertRange = TEMP_ALERT_RANGE;
	static uint16_t refCapturedTemp = 0xFFFF;
	uint16_t currentTemperature = adc_celsius;
     7bc:	c0 91 5d 01 	lds	r28, 0x015D
     7c0:	d0 91 5e 01 	lds	r29, 0x015E
	
	
	// Indicate reaching of desired temperature
	if ( (currentTemperature > p.setup_temp_value - tempAlertRange) && (currentTemperature < p.setup_temp_value + tempAlertRange) )
     7c4:	20 91 8d 01 	lds	r18, 0x018D
     7c8:	30 e0       	ldi	r19, 0x00	; 0
     7ca:	60 91 93 00 	lds	r22, 0x0093
     7ce:	86 2f       	mov	r24, r22
     7d0:	90 e0       	ldi	r25, 0x00	; 0
     7d2:	a9 01       	movw	r20, r18
     7d4:	48 1b       	sub	r20, r24
     7d6:	59 0b       	sbc	r21, r25
     7d8:	4c 17       	cp	r20, r28
     7da:	5d 07       	cpc	r21, r29
     7dc:	98 f4       	brcc	.+38     	; 0x804 <processHeaterAlerts+0x4c>
     7de:	82 0f       	add	r24, r18
     7e0:	93 1f       	adc	r25, r19
     7e2:	c8 17       	cp	r28, r24
     7e4:	d9 07       	cpc	r29, r25
     7e6:	70 f4       	brcc	.+28     	; 0x804 <processHeaterAlerts+0x4c>
	{
		if ((tempAlertRange == TEMP_ALERT_RANGE) && (heaterState & HEATER_ENABLED))
     7e8:	65 30       	cpi	r22, 0x05	; 5
     7ea:	51 f4       	brne	.+20     	; 0x800 <processHeaterAlerts+0x48>
     7ec:	80 91 1f 01 	lds	r24, 0x011F
     7f0:	80 ff       	sbrs	r24, 0
     7f2:	06 c0       	rjmp	.+12     	; 0x800 <processHeaterAlerts+0x48>
		{
			SetBeeperFreq(1000);
     7f4:	88 ee       	ldi	r24, 0xE8	; 232
     7f6:	93 e0       	ldi	r25, 0x03	; 3
     7f8:	b6 d8       	rcall	.-3732   	; 0xfffff966 <__eeprom_end+0xff7ef95c>
			StartBeep(400);
     7fa:	80 e9       	ldi	r24, 0x90	; 144
     7fc:	91 e0       	ldi	r25, 0x01	; 1
     7fe:	d3 d8       	rcall	.-3674   	; 0xfffff9a6 <__eeprom_end+0xff7ef99c>
		}
		// Add some hysteresis
		tempAlertRange = TEMP_ALERT_RANGE + TEMP_ALERT_HYST;
     800:	8a e0       	ldi	r24, 0x0A	; 10
     802:	01 c0       	rjmp	.+2      	; 0x806 <processHeaterAlerts+0x4e>
	}			
	else
	{
		tempAlertRange = TEMP_ALERT_RANGE;
     804:	85 e0       	ldi	r24, 0x05	; 5
     806:	80 93 93 00 	sts	0x0093, r24
	// Growing temperature with heater disabled alert 
	// This alert is done regardless of global sound enable
	// A false triggering may occur if ambient temperature grows.
	// To reset the warning in this case just turn on heater for at least one systimer tick (50ms)
	// If heater is enabled, it is implied that user controls heating process
	if (heaterState & (HEATER_ENABLED | CALIBRATION_ACTIVE))
     80a:	80 91 1f 01 	lds	r24, 0x011F
     80e:	83 70       	andi	r24, 0x03	; 3
     810:	09 f0       	breq	.+2      	; 0x814 <processHeaterAlerts+0x5c>
     812:	0b c0       	rjmp	.+22     	; 0x82a <processHeaterAlerts+0x72>
	{
		// Heater enabled, just save current temperature as reference
		// Same if calibration in progress, even if heater is disabled
		refCapturedTemp = currentTemperature;
	}
	else if (sys_timers.flags & EXPIRED_10SEC)
     814:	80 91 a1 00 	lds	r24, 0x00A1
     818:	81 ff       	sbrs	r24, 1
     81a:	19 c0       	rjmp	.+50     	; 0x84e <processHeaterAlerts+0x96>
	{
		// Heater disabled. If temperature is falling,
		if (currentTemperature < refCapturedTemp)
     81c:	80 91 94 00 	lds	r24, 0x0094
     820:	90 91 95 00 	lds	r25, 0x0095
     824:	c8 17       	cp	r28, r24
     826:	d9 07       	cpc	r29, r25
     828:	28 f4       	brcc	.+10     	; 0x834 <processHeaterAlerts+0x7c>
		{
			// save current temperature as reference
			refCapturedTemp = currentTemperature;
     82a:	d0 93 95 00 	sts	0x0095, r29
     82e:	c0 93 94 00 	sts	0x0094, r28
     832:	0d c0       	rjmp	.+26     	; 0x84e <processHeaterAlerts+0x96>
		else
		{
			// Heater is disabled. If current temperature is higher than reference + some safe interval,
			// there might be a hardware failure - short circuit, etc
			// BEEP like a devil  }:-(
			if (currentTemperature >= (refCapturedTemp + SAFE_TEMP_INTERVAL))
     834:	0a 96       	adiw	r24, 0x0a	; 10
     836:	c8 17       	cp	r28, r24
     838:	d9 07       	cpc	r29, r25
     83a:	48 f0       	brcs	.+18     	; 0x84e <processHeaterAlerts+0x96>
			{
				// Enable beeper output regardless of menu setting
				OverrideSoundDisable();
     83c:	c6 d8       	rcall	.-3700   	; 0xfffff9ca <__eeprom_end+0xff7ef9c0>
				SetBeeperFreq(1500);
     83e:	8c ed       	ldi	r24, 0xDC	; 220
     840:	95 e0       	ldi	r25, 0x05	; 5
     842:	91 d8       	rcall	.-3806   	; 0xfffff966 <__eeprom_end+0xff7ef95c>
				StartBeep(5000);	
     844:	88 e8       	ldi	r24, 0x88	; 136
     846:	93 e1       	ldi	r25, 0x13	; 19
			}
		}
	}
	

}
     848:	df 91       	pop	r29
     84a:	cf 91       	pop	r28
			if (currentTemperature >= (refCapturedTemp + SAFE_TEMP_INTERVAL))
			{
				// Enable beeper output regardless of menu setting
				OverrideSoundDisable();
				SetBeeperFreq(1500);
				StartBeep(5000);	
     84c:	ac c8       	rjmp	.-3752   	; 0xfffff9a6 <__eeprom_end+0xff7ef99c>
			}
		}
	}
	

}
     84e:	df 91       	pop	r29
     850:	cf 91       	pop	r28
     852:	08 95       	ret

00000854 <restoreGlobalParams>:


void restoreGlobalParams(void)
{
	eeprom_read_block(&p,&eeGlobalParams,sizeof(eeGlobalParams));
     854:	44 e0       	ldi	r20, 0x04	; 4
     856:	50 e0       	ldi	r21, 0x00	; 0
     858:	66 e0       	ldi	r22, 0x06	; 6
     85a:	70 e0       	ldi	r23, 0x00	; 0
     85c:	8d e8       	ldi	r24, 0x8D	; 141
     85e:	91 e0       	ldi	r25, 0x01	; 1
     860:	91 d9       	rcall	.-3294   	; 0xfffffb84 <__eeprom_end+0xff7efb7a>
	eeprom_read_block(&cp,&eeCalibrationParams,sizeof(eeCalibrationParams));
     862:	46 e0       	ldi	r20, 0x06	; 6
     864:	50 e0       	ldi	r21, 0x00	; 0
     866:	60 e0       	ldi	r22, 0x00	; 0
     868:	70 e0       	ldi	r23, 0x00	; 0
     86a:	87 e8       	ldi	r24, 0x87	; 135
     86c:	91 e0       	ldi	r25, 0x01	; 1
     86e:	8a c9       	rjmp	.-3308   	; 0xfffffb84 <__eeprom_end+0xff7efb7a>

00000870 <saveCalibrationToEEPROM>:
}


void saveCalibrationToEEPROM(void)
{
	eeprom_update_block(&cp,&eeCalibrationParams,sizeof(eeCalibrationParams));	
     870:	46 e0       	ldi	r20, 0x06	; 6
     872:	50 e0       	ldi	r21, 0x00	; 0
     874:	60 e0       	ldi	r22, 0x00	; 0
     876:	70 e0       	ldi	r23, 0x00	; 0
     878:	87 e8       	ldi	r24, 0x87	; 135
     87a:	91 e0       	ldi	r25, 0x01	; 1
     87c:	93 c9       	rjmp	.-3290   	; 0xfffffba4 <__eeprom_end+0xff7efb9a>

0000087e <exitPowerOff>:

void exitPowerOff(void)
{

	// Put all ports into HI-Z
	DDRB = 0x00;
     87e:	17 ba       	out	0x17, r1	; 23
	PORTB = 0x00;
     880:	18 ba       	out	0x18, r1	; 24
	DDRC = 0x00;
     882:	14 ba       	out	0x14, r1	; 20
	PORTC = 0x00;
     884:	15 ba       	out	0x15, r1	; 21
	DDRD = 0x00;
     886:	11 ba       	out	0x11, r1	; 17
	PORTD = 0x00;
     888:	12 ba       	out	0x12, r1	; 18
	
	// Disable all interrupts
	cli();
     88a:	f8 94       	cli
	
	// Save parameters to EEPROM
	eeprom_update_block(&p,&eeGlobalParams,sizeof(eeGlobalParams));	
     88c:	44 e0       	ldi	r20, 0x04	; 4
     88e:	50 e0       	ldi	r21, 0x00	; 0
     890:	66 e0       	ldi	r22, 0x06	; 6
     892:	70 e0       	ldi	r23, 0x00	; 0
     894:	8d e8       	ldi	r24, 0x8D	; 141
     896:	91 e0       	ldi	r25, 0x01	; 1
     898:	85 d9       	rcall	.-3318   	; 0xfffffba4 <__eeprom_end+0xff7efb9a>
     89a:	ff cf       	rjmp	.-2      	; 0x89a <exitPowerOff+0x1c>

0000089c <decode_led_char>:
//---------------------------------------------//
// Decodes normal string literal to the
//	7-segment representation
//---------------------------------------------//
static uint8_t decode_led_char(char c)
{
     89c:	20 e0       	ldi	r18, 0x00	; 0
     89e:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t i;
	encode_7seg_pair encode_pair;
	for (i = 0; i < sizeof(led_encode_table)/sizeof(encode_7seg_pair); i++  )
	{
		encode_pair.code = pgm_read_byte(&led_encode_table[i].code);
     8a0:	a9 01       	movw	r20, r18
     8a2:	44 0f       	add	r20, r20
     8a4:	55 1f       	adc	r21, r21
     8a6:	fa 01       	movw	r30, r20
     8a8:	ea 5d       	subi	r30, 0xDA	; 218
     8aa:	ff 4f       	sbci	r31, 0xFF	; 255
     8ac:	e4 91       	lpm	r30, Z
		if (encode_pair.code == c)
     8ae:	e8 13       	cpse	r30, r24
     8b0:	05 c0       	rjmp	.+10     	; 0x8bc <decode_led_char+0x20>
		{
			i = pgm_read_byte(&led_encode_table[i].segdata);
     8b2:	fa 01       	movw	r30, r20
     8b4:	e9 5d       	subi	r30, 0xD9	; 217
     8b6:	ff 4f       	sbci	r31, 0xFF	; 255
     8b8:	84 91       	lpm	r24, Z
     8ba:	08 95       	ret
     8bc:	2f 5f       	subi	r18, 0xFF	; 255
     8be:	3f 4f       	sbci	r19, 0xFF	; 255
//---------------------------------------------//
static uint8_t decode_led_char(char c)
{
	uint8_t i;
	encode_7seg_pair encode_pair;
	for (i = 0; i < sizeof(led_encode_table)/sizeof(encode_7seg_pair); i++  )
     8c0:	2a 31       	cpi	r18, 0x1A	; 26
     8c2:	31 05       	cpc	r19, r1
     8c4:	69 f7       	brne	.-38     	; 0x8a0 <decode_led_char+0x4>
			i = pgm_read_byte(&led_encode_table[i].segdata);
			return i;
		}		
	}			
	// No item was found - return default value
	return  (SEGA | SEGG );
     8c6:	81 e4       	ldi	r24, 0x41	; 65
}
     8c8:	08 95       	ret

000008ca <wrap_led_buffer_index>:
//---------------------------------------------//
// Ensures that index is inside the buffer
// -128 <= index <= 127
//---------------------------------------------//
static uint8_t wrap_led_buffer_index(int8_t buf_index)
{
     8ca:	28 2f       	mov	r18, r24
	uint8_t new_index_u;
	new_index_u = (uint8_t) ((buf_index < 0) ? -buf_index : buf_index);
     8cc:	87 fd       	sbrc	r24, 7
     8ce:	81 95       	neg	r24
	if (new_index_u >= LED_BUFFER_LENGTH)
     8d0:	8e 30       	cpi	r24, 0x0E	; 14
     8d2:	18 f0       	brcs	.+6      	; 0x8da <wrap_led_buffer_index+0x10>
		new_index_u = new_index_u % LED_BUFFER_LENGTH;
     8d4:	6e e0       	ldi	r22, 0x0E	; 14
     8d6:	ca d8       	rcall	.-3692   	; 0xfffffa6c <__eeprom_end+0xff7efa62>
     8d8:	89 2f       	mov	r24, r25
	new_index_u = ((buf_index >= 0) || (new_index_u == 0)) ? new_index_u :  LED_BUFFER_LENGTH - new_index_u ;
     8da:	27 ff       	sbrs	r18, 7
     8dc:	05 c0       	rjmp	.+10     	; 0x8e8 <wrap_led_buffer_index+0x1e>
     8de:	88 23       	and	r24, r24
     8e0:	19 f0       	breq	.+6      	; 0x8e8 <wrap_led_buffer_index+0x1e>
     8e2:	9e e0       	ldi	r25, 0x0E	; 14
     8e4:	98 1b       	sub	r25, r24
     8e6:	89 2f       	mov	r24, r25
	return new_index_u;
}
     8e8:	08 95       	ret

000008ea <processLedIndicator>:
// Call this function N times per sec to get N/NUM_DIGITS_TOTAL display update rate, where
// NUM_DIGITS_TOTAL is number_of_digits_of_LED_display if no extra LEDs are used or
// (number_of_digits_of_LED_display + 1) otherwise.
//---------------------------------------------//
void processLedIndicator()
{
     8ea:	cf 93       	push	r28
	disable_led_segments();
	#endif
	
	
	// Perform regular shift
	led_clock_pulse(!LED_DIGIT_ACT_LVL);
     8ec:	81 e0       	ldi	r24, 0x01	; 1
     8ee:	13 d1       	rcall	.+550    	; 0xb16 <led_clock_pulse>
	
	switch (wActivePos)
     8f0:	c0 91 09 01 	lds	r28, 0x0109
     8f4:	cc 23       	and	r28, r28
     8f6:	19 f0       	breq	.+6      	; 0x8fe <processLedIndicator+0x14>
     8f8:	c6 30       	cpi	r28, 0x06	; 6
     8fa:	d1 f5       	brne	.+116    	; 0x970 <processLedIndicator+0x86>
     8fc:	11 c0       	rjmp	.+34     	; 0x920 <processLedIndicator+0x36>
	{
	case 0:
		// Get buttons
		#ifndef CLEAN_OPERATION
		disable_led_segments();
     8fe:	37 d1       	rcall	.+622    	; 0xb6e <disable_led_segments>
		#endif
		enable_led_segments_pullups();
     900:	28 d1       	rcall	.+592    	; 0xb52 <enable_led_segments_pullups>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     902:	85 e3       	ldi	r24, 0x35	; 53
     904:	8a 95       	dec	r24
     906:	f1 f7       	brne	.-4      	; 0x904 <processLedIndicator+0x1a>
     908:	00 00       	nop
		_delay_us(PULLUP_DELAY_US);
		capture_button_state();
     90a:	38 d1       	rcall	.+624    	; 0xb7c <capture_button_state>
		#ifndef CLEAN_OPERATION
		enable_led_segments();
     90c:	29 d1       	rcall	.+594    	; 0xb60 <enable_led_segments>
		#endif
		// Start new cycle with active digit level
		led_clock_pulse(LED_DIGIT_ACT_LVL);
     90e:	80 e0       	ldi	r24, 0x00	; 0
     910:	02 d1       	rcall	.+516    	; 0xb16 <led_clock_pulse>
		// Always start new cycle from specified buffer start position
		bufActivePos = wStartPos;
     912:	80 91 a8 01 	lds	r24, 0x01A8
     916:	80 93 08 01 	sts	0x0108, r24
		next_wActivePos = wActivePos + 1;
     91a:	c0 91 09 01 	lds	r28, 0x0109
     91e:	28 c0       	rjmp	.+80     	; 0x970 <processLedIndicator+0x86>
//---------------------------------------------//
// Performs window shifting
//---------------------------------------------//
static void processWindowShifter(void)
{
	if (shifterState == LED_SHIFT_DONE)
     920:	80 91 a9 01 	lds	r24, 0x01A9
     924:	81 11       	cpse	r24, r1
     926:	01 c0       	rjmp	.+2      	; 0x92a <processLedIndicator+0x40>
     928:	1b c0       	rjmp	.+54     	; 0x960 <processLedIndicator+0x76>
		return;
	
	// Process shift timer
	processSoftTimer8b(&shiftTimer);	
     92a:	8a e0       	ldi	r24, 0x0A	; 10
     92c:	91 e0       	ldi	r25, 0x01	; 1
     92e:	92 d7       	rcall	.+3876   	; 0x1854 <processSoftTimer8b>
	
	if (shiftTimer.FTop)
     930:	80 91 0a 01 	lds	r24, 0x010A
     934:	85 ff       	sbrs	r24, 5
     936:	14 c0       	rjmp	.+40     	; 0x960 <processLedIndicator+0x76>
	{
		// Check if finished
		if (wStartPos == bufStartPos)	
     938:	80 91 a8 01 	lds	r24, 0x01A8
     93c:	90 91 aa 01 	lds	r25, 0x01AA
     940:	89 13       	cpse	r24, r25
     942:	03 c0       	rjmp	.+6      	; 0x94a <processLedIndicator+0x60>
		{
			// Update state
			shifterState = LED_SHIFT_DONE;
     944:	10 92 a9 01 	sts	0x01A9, r1
     948:	0b c0       	rjmp	.+22     	; 0x960 <processLedIndicator+0x76>
		}
		else if (shifterState == LED_SHIFT_RIGHT)
     94a:	90 91 a9 01 	lds	r25, 0x01A9
     94e:	92 30       	cpi	r25, 0x02	; 2
     950:	49 f4       	brne	.+18     	; 0x964 <processLedIndicator+0x7a>
// Increments index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t inc_buffer_position(uint8_t position)
{
	return (position >= LED_BUFFER_LENGTH - 1) ? 0 : position + 1;
     952:	8d 30       	cpi	r24, 0x0D	; 13
     954:	10 f4       	brcc	.+4      	; 0x95a <processLedIndicator+0x70>
     956:	8f 5f       	subi	r24, 0xFF	; 255
     958:	01 c0       	rjmp	.+2      	; 0x95c <processLedIndicator+0x72>
     95a:	80 e0       	ldi	r24, 0x00	; 0
			// Update state
			shifterState = LED_SHIFT_DONE;
		}
		else if (shifterState == LED_SHIFT_RIGHT)
		{
			wStartPos = inc_buffer_position(wStartPos);	
     95c:	80 93 a8 01 	sts	0x01A8, r24
		// Always start new cycle from specified buffer start position
		bufActivePos = wStartPos;
		next_wActivePos = wActivePos + 1;
		break;
	case NUM_DIGITS_TOTAL-1:
		next_wActivePos = 0;
     960:	c0 e0       	ldi	r28, 0x00	; 0
     962:	07 c0       	rjmp	.+14     	; 0x972 <processLedIndicator+0x88>
// Decrements index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t dec_buffer_position(uint8_t position)
{
	return (position == 0) ? LED_BUFFER_LENGTH - 1 : position - 1;
     964:	88 23       	and	r24, r24
     966:	11 f0       	breq	.+4      	; 0x96c <processLedIndicator+0x82>
     968:	81 50       	subi	r24, 0x01	; 1
     96a:	f8 cf       	rjmp	.-16     	; 0x95c <processLedIndicator+0x72>
     96c:	8d e0       	ldi	r24, 0x0D	; 13
     96e:	f6 cf       	rjmp	.-20     	; 0x95c <processLedIndicator+0x72>
		next_wActivePos = 0;
		// Shift LED window
		processWindowShifter();	
		break;
	default:
		next_wActivePos = wActivePos + 1;
     970:	cf 5f       	subi	r28, 0xFF	; 255
		break;
	}		
	
	#ifdef 	USE_EXTRA_LED_DIGIT
	if (wActivePos == EXTRA_DIGIT_NUM)
     972:	80 91 09 01 	lds	r24, 0x0109
     976:	86 30       	cpi	r24, 0x06	; 6
     978:	21 f4       	brne	.+8      	; 0x982 <processLedIndicator+0x98>
	{
		// Output separate LEDs state
		set_led_segments(extra_led_state);
     97a:	80 91 a7 01 	lds	r24, 0x01A7
     97e:	db d0       	rcall	.+438    	; 0xb36 <set_led_segments>
     980:	10 c0       	rjmp	.+32     	; 0x9a2 <processLedIndicator+0xb8>
	}
	else
	#endif
	{
		// Output new segment data
		set_led_segments(led_data_buffer[bufActivePos]);
     982:	e0 91 08 01 	lds	r30, 0x0108
     986:	f0 e0       	ldi	r31, 0x00	; 0
     988:	e5 55       	subi	r30, 0x55	; 85
     98a:	fe 4f       	sbci	r31, 0xFE	; 254
     98c:	80 81       	ld	r24, Z
     98e:	d3 d0       	rcall	.+422    	; 0xb36 <set_led_segments>
		// Wrap around buffer length
		bufActivePos = inc_buffer_position(bufActivePos );
     990:	80 91 08 01 	lds	r24, 0x0108
// Increments index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t inc_buffer_position(uint8_t position)
{
	return (position >= LED_BUFFER_LENGTH - 1) ? 0 : position + 1;
     994:	8d 30       	cpi	r24, 0x0D	; 13
     996:	10 f4       	brcc	.+4      	; 0x99c <processLedIndicator+0xb2>
     998:	8f 5f       	subi	r24, 0xFF	; 255
     99a:	01 c0       	rjmp	.+2      	; 0x99e <processLedIndicator+0xb4>
     99c:	80 e0       	ldi	r24, 0x00	; 0
	#endif
	{
		// Output new segment data
		set_led_segments(led_data_buffer[bufActivePos]);
		// Wrap around buffer length
		bufActivePos = inc_buffer_position(bufActivePos );
     99e:	80 93 08 01 	sts	0x0108, r24
	}
		
	wActivePos = next_wActivePos;
     9a2:	c0 93 09 01 	sts	0x0109, r28
	
	#ifdef CLEAN_OPERATION
	enable_led_segments();
	#endif

}
     9a6:	cf 91       	pop	r28
     9a8:	08 95       	ret

000009aa <fillLedBuffer>:
//---------------------------------------------//
// Fills buffer from (bufStartPos + offset) 
//	position with single char
//---------------------------------------------//
void fillLedBuffer(int8_t offset, uint8_t length, char c)
{
     9aa:	0f 93       	push	r16
     9ac:	1f 93       	push	r17
     9ae:	cf 93       	push	r28
     9b0:	df 93       	push	r29
     9b2:	1f 92       	push	r1
     9b4:	cd b7       	in	r28, 0x3d	; 61
     9b6:	de b7       	in	r29, 0x3e	; 62
     9b8:	18 2f       	mov	r17, r24
     9ba:	84 2f       	mov	r24, r20
	uint8_t val = decode_led_char(c);
     9bc:	69 83       	std	Y+1, r22	; 0x01
     9be:	6e df       	rcall	.-292    	; 0x89c <decode_led_char>
     9c0:	08 2f       	mov	r16, r24
	// Ensure index is inside the buffer
	uint8_t position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
     9c2:	80 91 aa 01 	lds	r24, 0x01AA
     9c6:	81 0f       	add	r24, r17
     9c8:	80 df       	rcall	.-256    	; 0x8ca <wrap_led_buffer_index>
	while(length--)
     9ca:	69 81       	ldd	r22, Y+1	; 0x01
     9cc:	0a c0       	rjmp	.+20     	; 0x9e2 <fillLedBuffer+0x38>
	{
		led_data_buffer[position] = val;
     9ce:	e8 2f       	mov	r30, r24
     9d0:	f0 e0       	ldi	r31, 0x00	; 0
     9d2:	e5 55       	subi	r30, 0x55	; 85
     9d4:	fe 4f       	sbci	r31, 0xFE	; 254
     9d6:	00 83       	st	Z, r16
// Increments index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t inc_buffer_position(uint8_t position)
{
	return (position >= LED_BUFFER_LENGTH - 1) ? 0 : position + 1;
     9d8:	8d 30       	cpi	r24, 0x0D	; 13
     9da:	10 f4       	brcc	.+4      	; 0x9e0 <fillLedBuffer+0x36>
     9dc:	8f 5f       	subi	r24, 0xFF	; 255
     9de:	01 c0       	rjmp	.+2      	; 0x9e2 <fillLedBuffer+0x38>
     9e0:	80 e0       	ldi	r24, 0x00	; 0
void fillLedBuffer(int8_t offset, uint8_t length, char c)
{
	uint8_t val = decode_led_char(c);
	// Ensure index is inside the buffer
	uint8_t position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
	while(length--)
     9e2:	61 50       	subi	r22, 0x01	; 1
     9e4:	a0 f7       	brcc	.-24     	; 0x9ce <fillLedBuffer+0x24>
	{
		led_data_buffer[position] = val;
		position = inc_buffer_position(position);
	}
}
     9e6:	0f 90       	pop	r0
     9e8:	df 91       	pop	r29
     9ea:	cf 91       	pop	r28
     9ec:	1f 91       	pop	r17
     9ee:	0f 91       	pop	r16
     9f0:	08 95       	ret

000009f2 <startShiftingWindowLeft>:
//	LED window left 
//---------------------------------------------//
void startShiftingWindowLeft(void)
{
	// Clear spaces between menu states
	fillLedBuffer(-2,2,' ');
     9f2:	40 e2       	ldi	r20, 0x20	; 32
     9f4:	62 e0       	ldi	r22, 0x02	; 2
     9f6:	8e ef       	ldi	r24, 0xFE	; 254
     9f8:	d8 df       	rcall	.-80     	; 0x9aa <fillLedBuffer>
	// Set new buffer position for writing
	bufStartPos = wrap_led_buffer_index( (int8_t)bufStartPos - (NUM_DIGITS + 2) );
     9fa:	80 91 aa 01 	lds	r24, 0x01AA
     9fe:	88 50       	subi	r24, 0x08	; 8
     a00:	64 df       	rcall	.-312    	; 0x8ca <wrap_led_buffer_index>
     a02:	80 93 aa 01 	sts	0x01AA, r24
	// Set shifter state
	shifterState = LED_SHIFT_LEFT;
     a06:	81 e0       	ldi	r24, 0x01	; 1
     a08:	80 93 a9 01 	sts	0x01A9, r24
     a0c:	08 95       	ret

00000a0e <startShiftingWindowRight>:
//	LED window right 
//---------------------------------------------//
void startShiftingWindowRight(void)
{
	// Clear spaces between menu states
	fillLedBuffer(NUM_DIGITS,2,' ');
     a0e:	40 e2       	ldi	r20, 0x20	; 32
     a10:	62 e0       	ldi	r22, 0x02	; 2
     a12:	86 e0       	ldi	r24, 0x06	; 6
     a14:	ca df       	rcall	.-108    	; 0x9aa <fillLedBuffer>
	// Set new buffer position for writing
	bufStartPos = wrap_led_buffer_index( (int8_t)bufStartPos + NUM_DIGITS + 2 );
     a16:	80 91 aa 01 	lds	r24, 0x01AA
     a1a:	88 5f       	subi	r24, 0xF8	; 248
     a1c:	56 df       	rcall	.-340    	; 0x8ca <wrap_led_buffer_index>
     a1e:	80 93 aa 01 	sts	0x01AA, r24
	// Set shifter state
	shifterState = LED_SHIFT_RIGHT;
     a22:	82 e0       	ldi	r24, 0x02	; 2
     a24:	80 93 a9 01 	sts	0x01A9, r24
     a28:	08 95       	ret

00000a2a <initLedIndicator>:
//---------------------------------------------//
//	Initialization
//	Call this function at start of your program
//---------------------------------------------//
void initLedIndicator()
{
     a2a:	cf 93       	push	r28
	uint8_t i;
	// First disable outputs
	disable_led_segments();
     a2c:	a0 d0       	rcall	.+320    	; 0xb6e <disable_led_segments>
     a2e:	c7 e0       	ldi	r28, 0x07	; 7
	// Fill shift register with non-active levels
	for (i=0;i<NUM_DIGITS_TOTAL;i++)
	{
		led_clock_pulse(!LED_DIGIT_ACT_LVL);
     a30:	81 e0       	ldi	r24, 0x01	; 1
     a32:	71 d0       	rcall	.+226    	; 0xb16 <led_clock_pulse>
     a34:	c1 50       	subi	r28, 0x01	; 1
{
	uint8_t i;
	// First disable outputs
	disable_led_segments();
	// Fill shift register with non-active levels
	for (i=0;i<NUM_DIGITS_TOTAL;i++)
     a36:	e1 f7       	brne	.-8      	; 0xa30 <initLedIndicator+0x6>
	{
		led_clock_pulse(!LED_DIGIT_ACT_LVL);
	}
	// Now enable outputs
	enable_led_segments();
     a38:	93 d0       	rcall	.+294    	; 0xb60 <enable_led_segments>
	
	// Reset pointers
	wStartPos = 0;
     a3a:	10 92 a8 01 	sts	0x01A8, r1
	bufStartPos = 0;
     a3e:	10 92 aa 01 	sts	0x01AA, r1
	bufActivePos = 0;
     a42:	10 92 08 01 	sts	0x0108, r1
	wActivePos = 0;
     a46:	10 92 09 01 	sts	0x0109, r1
	#ifdef 	USE_EXTRA_LED_DIGIT
	extra_led_state = 0;
     a4a:	10 92 a7 01 	sts	0x01A7, r1
	#endif
	
	// Clear the buffer 
	fillLedBuffer(0,LED_BUFFER_LENGTH,' ');
     a4e:	40 e2       	ldi	r20, 0x20	; 32
     a50:	6e e0       	ldi	r22, 0x0E	; 14
     a52:	80 e0       	ldi	r24, 0x00	; 0
     a54:	aa df       	rcall	.-172    	; 0x9aa <fillLedBuffer>
	
	// Initialize shift timer - always enabled, but 
	//	processed only when shifting is active
	shifterState = LED_SHIFT_DONE;
     a56:	10 92 a9 01 	sts	0x01A9, r1
	shiftTimer.Enabled = 1;
     a5a:	80 91 0a 01 	lds	r24, 0x010A
	shiftTimer.RunOnce = 0;
     a5e:	81 60       	ori	r24, 0x01	; 1
     a60:	8d 7f       	andi	r24, 0xFD	; 253
     a62:	80 93 0a 01 	sts	0x010A, r24
	shiftTimer.Top = LED_SHIFT_INTERVAL-1;
     a66:	89 e0       	ldi	r24, 0x09	; 9
     a68:	80 93 0c 01 	sts	0x010C, r24
}
     a6c:	cf 91       	pop	r28
     a6e:	08 95       	ret

00000a70 <printLedBuffer>:
//		str - null-terminated char string
// Comma and dot (".", ",") get special processing - first occurrence is added to
// a preceding char, next are displayed as a single digit
//---------------------------------------------//
void printLedBuffer(int8_t offset, char* str)
{
     a70:	ff 92       	push	r15
     a72:	0f 93       	push	r16
     a74:	1f 93       	push	r17
     a76:	cf 93       	push	r28
     a78:	df 93       	push	r29
     a7a:	eb 01       	movw	r28, r22
	char c;
	uint8_t decoded_sym;
	uint8_t state = 0x02;
	uint8_t comma_pos;
	// Ensure index is inside the buffer
	uint8_t buffer_position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
     a7c:	90 91 aa 01 	lds	r25, 0x01AA
     a80:	89 0f       	add	r24, r25
     a82:	23 df       	rcall	.-442    	; 0x8ca <wrap_led_buffer_index>
     a84:	18 2f       	mov	r17, r24
	comma_pos = buffer_position;
     a86:	f8 2e       	mov	r15, r24
//---------------------------------------------//
void printLedBuffer(int8_t offset, char* str)
{
	char c;
	uint8_t decoded_sym;
	uint8_t state = 0x02;
     a88:	02 e0       	ldi	r16, 0x02	; 2
	uint8_t comma_pos;
	// Ensure index is inside the buffer
	uint8_t buffer_position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
	comma_pos = buffer_position;
	// Output chars
	while((c = *str++))
     a8a:	23 c0       	rjmp	.+70     	; 0xad2 <printLedBuffer+0x62>
	{
		decoded_sym = decode_led_char(c);
     a8c:	07 df       	rcall	.-498    	; 0x89c <decode_led_char>
		state = (decoded_sym == SEGH) ? (state | 0x01) : (state & ~0x01);
     a8e:	80 38       	cpi	r24, 0x80	; 128
     a90:	11 f4       	brne	.+4      	; 0xa96 <printLedBuffer+0x26>
     a92:	01 60       	ori	r16, 0x01	; 1
     a94:	01 c0       	rjmp	.+2      	; 0xa98 <printLedBuffer+0x28>
     a96:	0e 7f       	andi	r16, 0xFE	; 254
		if (state == 0x01)			
     a98:	01 30       	cpi	r16, 0x01	; 1
     a9a:	49 f4       	brne	.+18     	; 0xaae <printLedBuffer+0x3e>
		{
			led_data_buffer[comma_pos] |= decoded_sym;
     a9c:	ef 2d       	mov	r30, r15
     a9e:	f0 e0       	ldi	r31, 0x00	; 0
     aa0:	e5 55       	subi	r30, 0x55	; 85
     aa2:	fe 4f       	sbci	r31, 0xFE	; 254
     aa4:	90 81       	ld	r25, Z
     aa6:	98 2b       	or	r25, r24
     aa8:	90 83       	st	Z, r25
     aaa:	81 2f       	mov	r24, r17
     aac:	0b c0       	rjmp	.+22     	; 0xac4 <printLedBuffer+0x54>
		}
		else
		{
			led_data_buffer[buffer_position] = decoded_sym;	
     aae:	e1 2f       	mov	r30, r17
     ab0:	f0 e0       	ldi	r31, 0x00	; 0
     ab2:	e5 55       	subi	r30, 0x55	; 85
     ab4:	fe 4f       	sbci	r31, 0xFE	; 254
     ab6:	80 83       	st	Z, r24
// Increments index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t inc_buffer_position(uint8_t position)
{
	return (position >= LED_BUFFER_LENGTH - 1) ? 0 : position + 1;
     ab8:	1d 30       	cpi	r17, 0x0D	; 13
     aba:	18 f4       	brcc	.+6      	; 0xac2 <printLedBuffer+0x52>
     abc:	81 2f       	mov	r24, r17
     abe:	8f 5f       	subi	r24, 0xFF	; 255
     ac0:	01 c0       	rjmp	.+2      	; 0xac4 <printLedBuffer+0x54>
     ac2:	80 e0       	ldi	r24, 0x00	; 0
		comma_pos = buffer_position;
		if (state != 0x01)
		{
			buffer_position = inc_buffer_position(buffer_position);
		}
		state = (state & 0x01) ? 0x03 : 0x00;		
     ac4:	00 ff       	sbrs	r16, 0
     ac6:	02 c0       	rjmp	.+4      	; 0xacc <printLedBuffer+0x5c>
     ac8:	03 e0       	ldi	r16, 0x03	; 3
     aca:	01 c0       	rjmp	.+2      	; 0xace <printLedBuffer+0x5e>
     acc:	00 e0       	ldi	r16, 0x00	; 0
     ace:	f1 2e       	mov	r15, r17
     ad0:	18 2f       	mov	r17, r24
	uint8_t comma_pos;
	// Ensure index is inside the buffer
	uint8_t buffer_position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
	comma_pos = buffer_position;
	// Output chars
	while((c = *str++))
     ad2:	89 91       	ld	r24, Y+
     ad4:	81 11       	cpse	r24, r1
     ad6:	da cf       	rjmp	.-76     	; 0xa8c <printLedBuffer+0x1c>
		{
			buffer_position = inc_buffer_position(buffer_position);
		}
		state = (state & 0x01) ? 0x03 : 0x00;		
	}
}
     ad8:	df 91       	pop	r29
     ada:	cf 91       	pop	r28
     adc:	1f 91       	pop	r17
     ade:	0f 91       	pop	r16
     ae0:	ff 90       	pop	r15
     ae2:	08 95       	ret

00000ae4 <setComma>:
//	buffer cell
//---------------------------------------------//
void setComma(int8_t offset)
{
	// Ensure index is inside the buffer
	uint8_t position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
     ae4:	90 91 aa 01 	lds	r25, 0x01AA
     ae8:	89 0f       	add	r24, r25
     aea:	ef de       	rcall	.-546    	; 0x8ca <wrap_led_buffer_index>
	led_data_buffer[position] |= (SEGH);
     aec:	e8 2f       	mov	r30, r24
     aee:	f0 e0       	ldi	r31, 0x00	; 0
     af0:	e5 55       	subi	r30, 0x55	; 85
     af2:	fe 4f       	sbci	r31, 0xFE	; 254
     af4:	80 81       	ld	r24, Z
     af6:	80 68       	ori	r24, 0x80	; 128
     af8:	80 83       	st	Z, r24
     afa:	08 95       	ret

00000afc <setExtraLeds>:
// Argument is ORed with current LED state
//---------------------------------------------//
inline void setExtraLeds(uint8_t leds_set_value)
{
		//asm("cli");
		extra_led_state |= leds_set_value;
     afc:	90 91 a7 01 	lds	r25, 0x01A7
     b00:	98 2b       	or	r25, r24
     b02:	90 93 a7 01 	sts	0x01A7, r25
     b06:	08 95       	ret

00000b08 <clearExtraLeds>:
// Argument is AND NOTed with current LED state
//---------------------------------------------//
inline void clearExtraLeds(uint8_t leds_clear_value)
{
		//asm("cli");
		extra_led_state &= ~leds_clear_value;
     b08:	90 91 a7 01 	lds	r25, 0x01A7
     b0c:	80 95       	com	r24
     b0e:	89 23       	and	r24, r25
     b10:	80 93 a7 01 	sts	0x01A7, r24
     b14:	08 95       	ret

00000b16 <led_clock_pulse>:


// Clocks in bit into the shift register
void led_clock_pulse(uint8_t bit)
{
	if (bit)
     b16:	88 23       	and	r24, r24
     b18:	11 f0       	breq	.+4      	; 0xb1e <led_clock_pulse+0x8>
		PORTB |= (1<<PB_LED_DOUT);
     b1a:	c0 9a       	sbi	0x18, 0	; 24
     b1c:	01 c0       	rjmp	.+2      	; 0xb20 <led_clock_pulse+0xa>
	else
		PORTB &= ~(1<<PB_LED_DOUT);
     b1e:	c0 98       	cbi	0x18, 0	; 24
     b20:	8a e1       	ldi	r24, 0x1A	; 26
     b22:	8a 95       	dec	r24
     b24:	f1 f7       	brne	.-4      	; 0xb22 <led_clock_pulse+0xc>
     b26:	00 c0       	rjmp	.+0      	; 0xb28 <led_clock_pulse+0x12>
	_delay_us(SETUP_DELAY_US);
	PORTB |= (1<<PB_LED_CLK);
     b28:	c2 9a       	sbi	0x18, 2	; 24
     b2a:	8a e1       	ldi	r24, 0x1A	; 26
     b2c:	8a 95       	dec	r24
     b2e:	f1 f7       	brne	.-4      	; 0xb2c <led_clock_pulse+0x16>
     b30:	00 c0       	rjmp	.+0      	; 0xb32 <led_clock_pulse+0x1c>
	_delay_us(SHIFT_DELAY_US);
	PORTB &= ~(1<<PB_LED_CLK);
     b32:	c2 98       	cbi	0x18, 2	; 24
     b34:	08 95       	ret

00000b36 <set_led_segments>:
// Outputs decoded segment data to port bits
void set_led_segments(uint8_t seg_ch)
{
	uint8_t pdat;
	seg_ch ^= LED_SEGMENT_MASK;
	pdat = PORTC & ~( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
     b36:	25 b3       	in	r18, 0x15	; 21
	pdat |= (seg_ch & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
     b38:	98 2f       	mov	r25, r24
     b3a:	9f 71       	andi	r25, 0x1F	; 31
// Outputs decoded segment data to port bits
void set_led_segments(uint8_t seg_ch)
{
	uint8_t pdat;
	seg_ch ^= LED_SEGMENT_MASK;
	pdat = PORTC & ~( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
     b3c:	20 7e       	andi	r18, 0xE0	; 224
	pdat |= (seg_ch & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
     b3e:	92 2b       	or	r25, r18
	PORTC = pdat;
     b40:	95 bb       	out	0x15, r25	; 21
	seg_ch >>= 2;
	pdat = PORTB & ~( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     b42:	98 b3       	in	r25, 0x18	; 24
	uint8_t pdat;
	seg_ch ^= LED_SEGMENT_MASK;
	pdat = PORTC & ~( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
	pdat |= (seg_ch & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
	PORTC = pdat;
	seg_ch >>= 2;
     b44:	86 95       	lsr	r24
     b46:	86 95       	lsr	r24
	pdat = PORTB & ~( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
	pdat |= (seg_ch & ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) ));
     b48:	88 73       	andi	r24, 0x38	; 56
	seg_ch ^= LED_SEGMENT_MASK;
	pdat = PORTC & ~( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
	pdat |= (seg_ch & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
	PORTC = pdat;
	seg_ch >>= 2;
	pdat = PORTB & ~( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     b4a:	97 7c       	andi	r25, 0xC7	; 199
	pdat |= (seg_ch & ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) ));
     b4c:	89 2b       	or	r24, r25
	PORTB = pdat;
     b4e:	88 bb       	out	0x18, r24	; 24
     b50:	08 95       	ret

00000b52 <enable_led_segments_pullups>:

// Turns segment port bits to HI-Z and
// enables pull-ups
void enable_led_segments_pullups()
{
	PORTC |= ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
     b52:	85 b3       	in	r24, 0x15	; 21
     b54:	8f 61       	ori	r24, 0x1F	; 31
     b56:	85 bb       	out	0x15, r24	; 21
	PORTB |= ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     b58:	88 b3       	in	r24, 0x18	; 24
     b5a:	88 63       	ori	r24, 0x38	; 56
     b5c:	88 bb       	out	0x18, r24	; 24
     b5e:	08 95       	ret

00000b60 <enable_led_segments>:
}	

void enable_led_segments()
{
	DDRC |= ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
     b60:	84 b3       	in	r24, 0x14	; 20
     b62:	8f 61       	ori	r24, 0x1F	; 31
     b64:	84 bb       	out	0x14, r24	; 20
	DDRB |= ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     b66:	87 b3       	in	r24, 0x17	; 23
     b68:	88 63       	ori	r24, 0x38	; 56
     b6a:	87 bb       	out	0x17, r24	; 23
     b6c:	08 95       	ret

00000b6e <disable_led_segments>:
}

void disable_led_segments()
{
	DDRC &= ~( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
     b6e:	84 b3       	in	r24, 0x14	; 20
     b70:	80 7e       	andi	r24, 0xE0	; 224
     b72:	84 bb       	out	0x14, r24	; 20
	DDRB &= ~( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     b74:	87 b3       	in	r24, 0x17	; 23
     b76:	87 7c       	andi	r24, 0xC7	; 199
     b78:	87 bb       	out	0x17, r24	; 23
     b7a:	08 95       	ret

00000b7c <capture_button_state>:


void capture_button_state()
{
	uint8_t pdat;
	pdat = PINB  & ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     b7c:	86 b3       	in	r24, 0x16	; 22
     b7e:	88 73       	andi	r24, 0x38	; 56
	pdat <<= 2;
	pdat |= (PINC & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
     b80:	93 b3       	in	r25, 0x13	; 19

void capture_button_state()
{
	uint8_t pdat;
	pdat = PINB  & ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
	pdat <<= 2;
     b82:	88 0f       	add	r24, r24
     b84:	88 0f       	add	r24, r24
	pdat |= (PINC & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
     b86:	9f 71       	andi	r25, 0x1F	; 31
     b88:	89 2b       	or	r24, r25
	raw_button_state = pdat ^ RAW_BUTTONS_INVERSE_MASK;
     b8a:	80 95       	com	r24
     b8c:	80 93 b9 01 	sts	0x01B9, r24
     b90:	08 95       	ret

00000b92 <processItemFunction>:
//	Arguments:
//		funcAddr - address of the function to run.
//-----------------------------------------------------------------//
static inline void processItemFunction(FuncPtr funcAddr)
{
	if (funcAddr != 0)
     b92:	00 97       	sbiw	r24, 0x00	; 0
     b94:	11 f0       	breq	.+4      	; 0xb9a <processItemFunction+0x8>
		((FuncPtr)funcAddr)();
     b96:	fc 01       	movw	r30, r24
     b98:	09 94       	ijmp
     b9a:	08 95       	ret

00000b9c <mf_setTempLeave>:
		clearExtraLeds(LED_TEMP);
}

void mf_setTempLeave(void)
{
	userTimer.Enabled = 0;
     b9c:	e6 e1       	ldi	r30, 0x16	; 22
     b9e:	f1 e0       	ldi	r31, 0x01	; 1
     ba0:	80 81       	ld	r24, Z
     ba2:	8e 7f       	andi	r24, 0xFE	; 254
     ba4:	80 83       	st	Z, r24
     ba6:	08 95       	ret

00000ba8 <mf_leafSelectAct>:
	userTimer.FA_GE = 1;	
}

void mf_leafSelectAct(void)
{
	userTimer.Timer = 0;
     ba8:	10 92 17 01 	sts	0x0117, r1
	userTimer.Top = BLINK_PERIOD - 1;
     bac:	87 e0       	ldi	r24, 0x07	; 7
     bae:	80 93 18 01 	sts	0x0118, r24
	userTimer.CompA = BLINK_PERIOD / 2;
     bb2:	84 e0       	ldi	r24, 0x04	; 4
     bb4:	80 93 19 01 	sts	0x0119, r24
	userTimer.Enabled = 1;
     bb8:	e6 e1       	ldi	r30, 0x16	; 22
     bba:	f1 e0       	ldi	r31, 0x01	; 1
     bbc:	80 81       	ld	r24, Z
     bbe:	81 60       	ori	r24, 0x01	; 1
     bc0:	80 83       	st	Z, r24
     bc2:	08 95       	ret

00000bc4 <mf_leafExit>:
}

void mf_leafExit(void)
{
	userTimer.Enabled = 0;	
     bc4:	e6 e1       	ldi	r30, 0x16	; 22
     bc6:	f1 e0       	ldi	r31, 0x01	; 1
     bc8:	80 81       	ld	r24, Z
     bca:	8e 7f       	andi	r24, 0xFE	; 254
     bcc:	80 83       	st	Z, r24
     bce:	08 95       	ret

00000bd0 <mf_actpoffLeave>:
	printLedBuffer(0,"   OFF");
}

void mf_actpoffLeave(void)
{
	autoPowerOffState = 0;	
     bd0:	10 92 fe 00 	sts	0x00FE, r1
     bd4:	08 95       	ret

00000bd6 <mf_calibDoExit>:
	userTimer.Enabled = 1;
}

void mf_leafExit(void)
{
	userTimer.Enabled = 0;	
     bd6:	e6 e1       	ldi	r30, 0x16	; 22
     bd8:	f1 e0       	ldi	r31, 0x01	; 1
     bda:	80 81       	ld	r24, Z
     bdc:	8e 7f       	andi	r24, 0xFE	; 254
     bde:	80 83       	st	Z, r24
}

void mf_calibDoExit(void)
{
	mf_leafExit();
	heaterState &= ~CALIBRATION_ACTIVE;
     be0:	80 91 1f 01 	lds	r24, 0x011F
     be4:	8d 7f       	andi	r24, 0xFD	; 253
     be6:	80 93 1f 01 	sts	0x011F, r24
     bea:	08 95       	ret

00000bec <mf_cdoneDo>:
	saveCalibrationToEEPROM();
}

void mf_cdoneDo(void)
{
	printLedBuffer(0," DONE ");
     bec:	60 ed       	ldi	r22, 0xD0	; 208
     bee:	70 e0       	ldi	r23, 0x00	; 0
     bf0:	80 e0       	ldi	r24, 0x00	; 0
     bf2:	3e cf       	rjmp	.-388    	; 0xa70 <printLedBuffer>

00000bf4 <mf_actpoffDo>:
}

// Indication of power off mode
void mf_actpoffDo(void)
{
	printLedBuffer(0,"   OFF");
     bf4:	67 ed       	ldi	r22, 0xD7	; 215
     bf6:	70 e0       	ldi	r23, 0x00	; 0
     bf8:	80 e0       	ldi	r24, 0x00	; 0
     bfa:	3a cf       	rjmp	.-396    	; 0xa70 <printLedBuffer>

00000bfc <mf_cdone2Select>:
}

void mf_cdone2Select(void)
{
	// Save current ADC as calibrating point
	cp.cpoint2_adc = adc_normalized;
     bfc:	80 91 5b 01 	lds	r24, 0x015B
     c00:	90 91 5c 01 	lds	r25, 0x015C
     c04:	90 93 8c 01 	sts	0x018C, r25
     c08:	80 93 8b 01 	sts	0x018B, r24
	// Save current Celsius degree
	cp.cpoint2 = cpoint2_copy;
     c0c:	80 91 1b 01 	lds	r24, 0x011B
     c10:	80 93 88 01 	sts	0x0188, r24
	// Calculate new coefficient for temperature conversion
	calculateCoeffs();
     c14:	01 db       	rcall	.-2558   	; 0x218 <calculateCoeffs>
	saveCalibrationToEEPROM();
     c16:	2c ce       	rjmp	.-936    	; 0x870 <saveCalibrationToEEPROM>

00000c18 <mf_cdone1Select>:
//---------------------------------------------//

void mf_cdone1Select(void)
{
	// Save current ADC as calibrating point
	cp.cpoint1_adc = adc_normalized;
     c18:	80 91 5b 01 	lds	r24, 0x015B
     c1c:	90 91 5c 01 	lds	r25, 0x015C
     c20:	90 93 8a 01 	sts	0x018A, r25
     c24:	80 93 89 01 	sts	0x0189, r24
	// Save current Celsius degree
	cp.cpoint1 = cpoint1_copy;
     c28:	80 91 1a 01 	lds	r24, 0x011A
     c2c:	80 93 87 01 	sts	0x0187, r24
	// Calculate new coefficient for temperature conversion
	calculateCoeffs();
     c30:	f3 da       	rcall	.-2586   	; 0x218 <calculateCoeffs>
	saveCalibrationToEEPROM();
     c32:	1e ce       	rjmp	.-964    	; 0x870 <saveCalibrationToEEPROM>

00000c34 <mf_autopoffDo>:

//---------------------------------------------//


void mf_autopoffDo(void)
{
     c34:	cf 93       	push	r28
     c36:	df 93       	push	r29
     c38:	cd b7       	in	r28, 0x3d	; 61
     c3a:	de b7       	in	r29, 0x3e	; 62
     c3c:	27 97       	sbiw	r28, 0x07	; 7
     c3e:	0f b6       	in	r0, 0x3f	; 63
     c40:	f8 94       	cli
     c42:	de bf       	out	0x3e, r29	; 62
     c44:	0f be       	out	0x3f, r0	; 63
     c46:	cd bf       	out	0x3d, r28	; 61
	char str[] = {'O','F','F',' ',' ',' ',0};
     c48:	87 e0       	ldi	r24, 0x07	; 7
     c4a:	e6 ea       	ldi	r30, 0xA6	; 166
     c4c:	f0 e0       	ldi	r31, 0x00	; 0
     c4e:	de 01       	movw	r26, r28
     c50:	11 96       	adiw	r26, 0x01	; 1
     c52:	01 90       	ld	r0, Z+
     c54:	0d 92       	st	X+, r0
     c56:	8a 95       	dec	r24
     c58:	e1 f7       	brne	.-8      	; 0xc52 <mf_autopoffDo+0x1e>
		
		
	if (button_state & (BD_UP | BR_UP))
     c5a:	80 91 fa 00 	lds	r24, 0x00FA
     c5e:	90 91 fb 00 	lds	r25, 0x00FB
     c62:	9c 01       	movw	r18, r24
     c64:	22 70       	andi	r18, 0x02	; 2
     c66:	34 70       	andi	r19, 0x04	; 4
     c68:	23 2b       	or	r18, r19
     c6a:	31 f0       	breq	.+12     	; 0xc78 <mf_autopoffDo+0x44>
	{
		if (p.power_off_timeout < MAX_POWEROFF_TIMEOUT)
     c6c:	80 91 90 01 	lds	r24, 0x0190
     c70:	8f 35       	cpi	r24, 0x5F	; 95
     c72:	68 f4       	brcc	.+26     	; 0xc8e <mf_autopoffDo+0x5a>
			p.power_off_timeout += 5;
     c74:	8b 5f       	subi	r24, 0xFB	; 251
     c76:	09 c0       	rjmp	.+18     	; 0xc8a <mf_autopoffDo+0x56>
		restartMenuTimer();
	}
	else if (button_state & (BD_DOWN | BR_DOWN))
     c78:	84 70       	andi	r24, 0x04	; 4
     c7a:	98 70       	andi	r25, 0x08	; 8
     c7c:	89 2b       	or	r24, r25
     c7e:	49 f0       	breq	.+18     	; 0xc92 <mf_autopoffDo+0x5e>
	{
		if (p.power_off_timeout > MIN_POWEROFF_TIMEOUT)
     c80:	80 91 90 01 	lds	r24, 0x0190
     c84:	86 30       	cpi	r24, 0x06	; 6
     c86:	18 f0       	brcs	.+6      	; 0xc8e <mf_autopoffDo+0x5a>
			p.power_off_timeout -= 5;
     c88:	85 50       	subi	r24, 0x05	; 5
     c8a:	80 93 90 01 	sts	0x0190, r24
//	 Restarts menu state timeout
//	Should be used in RUN function when control buttons are pressed.
//-----------------------------------------------------------------//
static void restartMenuTimer(void)
{
	menuTimer.Timer = 0;
     c8e:	10 92 97 00 	sts	0x0097, r1
		if (p.power_off_timeout > MIN_POWEROFF_TIMEOUT)
			p.power_off_timeout -= 5;
		restartMenuTimer();
	}	
		
	if (userTimer.FA_GE)
     c92:	80 91 16 01 	lds	r24, 0x0116
     c96:	84 ff       	sbrs	r24, 4
     c98:	10 c0       	rjmp	.+32     	; 0xcba <mf_autopoffDo+0x86>
	{
		if (p.power_off_timeout != MAX_POWEROFF_TIMEOUT)
     c9a:	80 91 90 01 	lds	r24, 0x0190
     c9e:	8f 35       	cpi	r24, 0x5F	; 95
     ca0:	41 f0       	breq	.+16     	; 0xcb2 <mf_autopoffDo+0x7e>
			u16toa_align_right(p.power_off_timeout,str + 4,0x80 | 2,' ');	
     ca2:	20 e2       	ldi	r18, 0x20	; 32
     ca4:	42 e8       	ldi	r20, 0x82	; 130
     ca6:	be 01       	movw	r22, r28
     ca8:	6b 5f       	subi	r22, 0xFB	; 251
     caa:	7f 4f       	sbci	r23, 0xFF	; 255
     cac:	90 e0       	ldi	r25, 0x00	; 0
     cae:	ba d2       	rcall	.+1396   	; 0x1224 <u16toa_align_right>
     cb0:	04 c0       	rjmp	.+8      	; 0xcba <mf_autopoffDo+0x86>
		else 
		{
			str[4] = 'N';
     cb2:	8e e4       	ldi	r24, 0x4E	; 78
     cb4:	8d 83       	std	Y+5, r24	; 0x05
			str[5] = 'O';
     cb6:	8f e4       	ldi	r24, 0x4F	; 79
     cb8:	8e 83       	std	Y+6, r24	; 0x06
		}			
	}		
		
	printLedBuffer(0,str);
     cba:	be 01       	movw	r22, r28
     cbc:	6f 5f       	subi	r22, 0xFF	; 255
     cbe:	7f 4f       	sbci	r23, 0xFF	; 255
     cc0:	80 e0       	ldi	r24, 0x00	; 0
     cc2:	d6 de       	rcall	.-596    	; 0xa70 <printLedBuffer>
}
     cc4:	27 96       	adiw	r28, 0x07	; 7
     cc6:	0f b6       	in	r0, 0x3f	; 63
     cc8:	f8 94       	cli
     cca:	de bf       	out	0x3e, r29	; 62
     ccc:	0f be       	out	0x3f, r0	; 63
     cce:	cd bf       	out	0x3d, r28	; 61
     cd0:	df 91       	pop	r29
     cd2:	cf 91       	pop	r28
     cd4:	08 95       	ret

00000cd6 <mf_realTempDo>:
{
	setExtraLeds(LED_TEMP);
}

void mf_realTempDo(void)
{
     cd6:	cf 93       	push	r28
     cd8:	df 93       	push	r29
     cda:	cd b7       	in	r28, 0x3d	; 61
     cdc:	de b7       	in	r29, 0x3e	; 62
     cde:	27 97       	sbiw	r28, 0x07	; 7
     ce0:	0f b6       	in	r0, 0x3f	; 63
     ce2:	f8 94       	cli
     ce4:	de bf       	out	0x3e, r29	; 62
     ce6:	0f be       	out	0x3f, r0	; 63
     ce8:	cd bf       	out	0x3d, r28	; 61
	char str[] = {' ',' ',' ',' ',0xB0,'C',0};
     cea:	87 e0       	ldi	r24, 0x07	; 7
     cec:	ed ea       	ldi	r30, 0xAD	; 173
     cee:	f0 e0       	ldi	r31, 0x00	; 0
     cf0:	de 01       	movw	r26, r28
     cf2:	11 96       	adiw	r26, 0x01	; 1
     cf4:	01 90       	ld	r0, Z+
     cf6:	0d 92       	st	X+, r0
     cf8:	8a 95       	dec	r24
     cfa:	e1 f7       	brne	.-8      	; 0xcf4 <mf_realTempDo+0x1e>
	// Output ADC result to LED
	u16toa_align_right(adc_celsius,str,0x80 | 4,' ');
     cfc:	20 e2       	ldi	r18, 0x20	; 32
     cfe:	44 e8       	ldi	r20, 0x84	; 132
     d00:	be 01       	movw	r22, r28
     d02:	6f 5f       	subi	r22, 0xFF	; 255
     d04:	7f 4f       	sbci	r23, 0xFF	; 255
     d06:	80 91 5d 01 	lds	r24, 0x015D
     d0a:	90 91 5e 01 	lds	r25, 0x015E
     d0e:	8a d2       	rcall	.+1300   	; 0x1224 <u16toa_align_right>
	printLedBuffer(0,str);
     d10:	be 01       	movw	r22, r28
     d12:	6f 5f       	subi	r22, 0xFF	; 255
     d14:	7f 4f       	sbci	r23, 0xFF	; 255
     d16:	80 e0       	ldi	r24, 0x00	; 0
     d18:	ab de       	rcall	.-682    	; 0xa70 <printLedBuffer>
}
     d1a:	27 96       	adiw	r28, 0x07	; 7
     d1c:	0f b6       	in	r0, 0x3f	; 63
     d1e:	f8 94       	cli
     d20:	de bf       	out	0x3e, r29	; 62
     d22:	0f be       	out	0x3f, r0	; 63
     d24:	cd bf       	out	0x3d, r28	; 61
     d26:	df 91       	pop	r29
     d28:	cf 91       	pop	r28
     d2a:	08 95       	ret

00000d2c <mf_calib2Do>:
}

//---------------------------------------------//

void mf_calib2Do(void)
{
     d2c:	cf 93       	push	r28
     d2e:	df 93       	push	r29
     d30:	cd b7       	in	r28, 0x3d	; 61
     d32:	de b7       	in	r29, 0x3e	; 62
     d34:	27 97       	sbiw	r28, 0x07	; 7
     d36:	0f b6       	in	r0, 0x3f	; 63
     d38:	f8 94       	cli
     d3a:	de bf       	out	0x3e, r29	; 62
     d3c:	0f be       	out	0x3f, r0	; 63
     d3e:	cd bf       	out	0x3d, r28	; 61
	char str[] = {'P','2',' ',' ',' ',' ',0};
     d40:	87 e0       	ldi	r24, 0x07	; 7
     d42:	e4 eb       	ldi	r30, 0xB4	; 180
     d44:	f0 e0       	ldi	r31, 0x00	; 0
     d46:	de 01       	movw	r26, r28
     d48:	11 96       	adiw	r26, 0x01	; 1
     d4a:	01 90       	ld	r0, Z+
     d4c:	0d 92       	st	X+, r0
     d4e:	8a 95       	dec	r24
     d50:	e1 f7       	brne	.-8      	; 0xd4a <mf_calib2Do+0x1e>
	
	
	if (button_state & (BD_UP | BR_UP))
     d52:	80 91 fa 00 	lds	r24, 0x00FA
     d56:	90 91 fb 00 	lds	r25, 0x00FB
     d5a:	9c 01       	movw	r18, r24
     d5c:	22 70       	andi	r18, 0x02	; 2
     d5e:	34 70       	andi	r19, 0x04	; 4
     d60:	23 2b       	or	r18, r19
     d62:	31 f0       	breq	.+12     	; 0xd70 <mf_calib2Do+0x44>
	{
		if (cpoint2_copy < MAX_CALIB_TEMP)
     d64:	80 91 1b 01 	lds	r24, 0x011B
     d68:	8a 3f       	cpi	r24, 0xFA	; 250
     d6a:	68 f4       	brcc	.+26     	; 0xd86 <mf_calib2Do+0x5a>
		cpoint2_copy += 1;
     d6c:	8f 5f       	subi	r24, 0xFF	; 255
     d6e:	09 c0       	rjmp	.+18     	; 0xd82 <mf_calib2Do+0x56>
	}
	else if (button_state & (BD_DOWN | BR_DOWN))
     d70:	84 70       	andi	r24, 0x04	; 4
     d72:	98 70       	andi	r25, 0x08	; 8
     d74:	89 2b       	or	r24, r25
     d76:	39 f0       	breq	.+14     	; 0xd86 <mf_calib2Do+0x5a>
	{
		if (cpoint2_copy > MIN_CALIB_TEMP)
     d78:	80 91 1b 01 	lds	r24, 0x011B
     d7c:	8b 30       	cpi	r24, 0x0B	; 11
     d7e:	18 f0       	brcs	.+6      	; 0xd86 <mf_calib2Do+0x5a>
		cpoint2_copy -= 1;
     d80:	81 50       	subi	r24, 0x01	; 1
     d82:	80 93 1b 01 	sts	0x011B, r24
	}
	
	if (userTimer.FA_GE)
     d86:	80 91 16 01 	lds	r24, 0x0116
     d8a:	84 ff       	sbrs	r24, 4
     d8c:	0f c0       	rjmp	.+30     	; 0xdac <mf_calib2Do+0x80>
	{
		u16toa_align_right(cpoint2_copy,str + 3,0x80 | 3,' ');
     d8e:	20 e2       	ldi	r18, 0x20	; 32
     d90:	43 e8       	ldi	r20, 0x83	; 131
     d92:	be 01       	movw	r22, r28
     d94:	6c 5f       	subi	r22, 0xFC	; 252
     d96:	7f 4f       	sbci	r23, 0xFF	; 255
     d98:	80 91 1b 01 	lds	r24, 0x011B
     d9c:	90 e0       	ldi	r25, 0x00	; 0
     d9e:	42 d2       	rcall	.+1156   	; 0x1224 <u16toa_align_right>
		resetAutoPowerOffCounter();
     da0:	df d5       	rcall	.+3006   	; 0x1960 <resetAutoPowerOffCounter>
		heaterState |= CALIBRATION_ACTIVE;
     da2:	80 91 1f 01 	lds	r24, 0x011F
     da6:	82 60       	ori	r24, 0x02	; 2
     da8:	80 93 1f 01 	sts	0x011F, r24
	}
	
	printLedBuffer(0,str);
     dac:	be 01       	movw	r22, r28
     dae:	6f 5f       	subi	r22, 0xFF	; 255
     db0:	7f 4f       	sbci	r23, 0xFF	; 255
     db2:	80 e0       	ldi	r24, 0x00	; 0
     db4:	5d de       	rcall	.-838    	; 0xa70 <printLedBuffer>
	
}
     db6:	27 96       	adiw	r28, 0x07	; 7
     db8:	0f b6       	in	r0, 0x3f	; 63
     dba:	f8 94       	cli
     dbc:	de bf       	out	0x3e, r29	; 62
     dbe:	0f be       	out	0x3f, r0	; 63
     dc0:	cd bf       	out	0x3d, r28	; 61
     dc2:	df 91       	pop	r29
     dc4:	cf 91       	pop	r28
     dc6:	08 95       	ret

00000dc8 <mf_calib1Do>:
	cpoint1_copy = cp.cpoint1;
	cpoint2_copy = cp.cpoint2;
}

void mf_calib1Do(void)
{
     dc8:	cf 93       	push	r28
     dca:	df 93       	push	r29
     dcc:	cd b7       	in	r28, 0x3d	; 61
     dce:	de b7       	in	r29, 0x3e	; 62
     dd0:	27 97       	sbiw	r28, 0x07	; 7
     dd2:	0f b6       	in	r0, 0x3f	; 63
     dd4:	f8 94       	cli
     dd6:	de bf       	out	0x3e, r29	; 62
     dd8:	0f be       	out	0x3f, r0	; 63
     dda:	cd bf       	out	0x3d, r28	; 61
	char str[] = {'P','1',' ',' ',' ',' ',0};
     ddc:	87 e0       	ldi	r24, 0x07	; 7
     dde:	eb eb       	ldi	r30, 0xBB	; 187
     de0:	f0 e0       	ldi	r31, 0x00	; 0
     de2:	de 01       	movw	r26, r28
     de4:	11 96       	adiw	r26, 0x01	; 1
     de6:	01 90       	ld	r0, Z+
     de8:	0d 92       	st	X+, r0
     dea:	8a 95       	dec	r24
     dec:	e1 f7       	brne	.-8      	; 0xde6 <mf_calib1Do+0x1e>
	
	
	if (button_state & (BD_UP | BR_UP))
     dee:	80 91 fa 00 	lds	r24, 0x00FA
     df2:	90 91 fb 00 	lds	r25, 0x00FB
     df6:	9c 01       	movw	r18, r24
     df8:	22 70       	andi	r18, 0x02	; 2
     dfa:	34 70       	andi	r19, 0x04	; 4
     dfc:	23 2b       	or	r18, r19
     dfe:	31 f0       	breq	.+12     	; 0xe0c <mf_calib1Do+0x44>
	{
		if (cpoint1_copy < MAX_CALIB_TEMP)
     e00:	80 91 1a 01 	lds	r24, 0x011A
     e04:	8a 3f       	cpi	r24, 0xFA	; 250
     e06:	68 f4       	brcc	.+26     	; 0xe22 <mf_calib1Do+0x5a>
			cpoint1_copy += 1;
     e08:	8f 5f       	subi	r24, 0xFF	; 255
     e0a:	09 c0       	rjmp	.+18     	; 0xe1e <mf_calib1Do+0x56>
	}
	else if (button_state & (BD_DOWN | BR_DOWN))
     e0c:	84 70       	andi	r24, 0x04	; 4
     e0e:	98 70       	andi	r25, 0x08	; 8
     e10:	89 2b       	or	r24, r25
     e12:	39 f0       	breq	.+14     	; 0xe22 <mf_calib1Do+0x5a>
	{
		if (cpoint1_copy > MIN_CALIB_TEMP)
     e14:	80 91 1a 01 	lds	r24, 0x011A
     e18:	8b 30       	cpi	r24, 0x0B	; 11
     e1a:	18 f0       	brcs	.+6      	; 0xe22 <mf_calib1Do+0x5a>
			cpoint1_copy -= 1;
     e1c:	81 50       	subi	r24, 0x01	; 1
     e1e:	80 93 1a 01 	sts	0x011A, r24
	}
	
	if (userTimer.FA_GE)
     e22:	80 91 16 01 	lds	r24, 0x0116
     e26:	84 ff       	sbrs	r24, 4
     e28:	0f c0       	rjmp	.+30     	; 0xe48 <mf_calib1Do+0x80>
	{
		u16toa_align_right(cpoint1_copy,str + 3,0x80 | 3,' ');
     e2a:	20 e2       	ldi	r18, 0x20	; 32
     e2c:	43 e8       	ldi	r20, 0x83	; 131
     e2e:	be 01       	movw	r22, r28
     e30:	6c 5f       	subi	r22, 0xFC	; 252
     e32:	7f 4f       	sbci	r23, 0xFF	; 255
     e34:	80 91 1a 01 	lds	r24, 0x011A
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	f4 d1       	rcall	.+1000   	; 0x1224 <u16toa_align_right>
		resetAutoPowerOffCounter();
     e3c:	91 d5       	rcall	.+2850   	; 0x1960 <resetAutoPowerOffCounter>
		heaterState |= CALIBRATION_ACTIVE;
     e3e:	80 91 1f 01 	lds	r24, 0x011F
     e42:	82 60       	ori	r24, 0x02	; 2
     e44:	80 93 1f 01 	sts	0x011F, r24
	}
	
	printLedBuffer(0,str);
     e48:	be 01       	movw	r22, r28
     e4a:	6f 5f       	subi	r22, 0xFF	; 255
     e4c:	7f 4f       	sbci	r23, 0xFF	; 255
     e4e:	80 e0       	ldi	r24, 0x00	; 0
     e50:	0f de       	rcall	.-994    	; 0xa70 <printLedBuffer>
	
}
     e52:	27 96       	adiw	r28, 0x07	; 7
     e54:	0f b6       	in	r0, 0x3f	; 63
     e56:	f8 94       	cli
     e58:	de bf       	out	0x3e, r29	; 62
     e5a:	0f be       	out	0x3f, r0	; 63
     e5c:	cd bf       	out	0x3d, r28	; 61
     e5e:	df 91       	pop	r29
     e60:	cf 91       	pop	r28
     e62:	08 95       	ret

00000e64 <mf_actpoffSelect>:



void mf_actpoffSelect(void)
{
	clearExtraLeds(LED_TEMP | LED_ROLL);
     e64:	83 e0       	ldi	r24, 0x03	; 3
     e66:	50 de       	rcall	.-864    	; 0xb08 <clearExtraLeds>
	autoPowerOffState = AUTO_POFF_ACTIVE;
     e68:	81 e0       	ldi	r24, 0x01	; 1
     e6a:	80 93 fe 00 	sts	0x00FE, r24
     e6e:	08 95       	ret

00000e70 <mf_leafSelect>:

// Select and exit functions, common for leaf menu items 

void mf_leafSelect(void)
{
	clearExtraLeds(LED_TEMP | LED_ROLL);
     e70:	83 e0       	ldi	r24, 0x03	; 3
     e72:	4a de       	rcall	.-876    	; 0xb08 <clearExtraLeds>
	userTimer.FA_GE = 1;	
     e74:	e6 e1       	ldi	r30, 0x16	; 22
     e76:	f1 e0       	ldi	r31, 0x01	; 1
     e78:	80 81       	ld	r24, Z
     e7a:	80 61       	ori	r24, 0x10	; 16
     e7c:	80 83       	st	Z, r24
     e7e:	08 95       	ret

00000e80 <mf_calibSelect>:

//---------------------------------------------//

void mf_calibSelect(void)
{
	mf_leafSelect();
     e80:	f7 df       	rcall	.-18     	; 0xe70 <mf_leafSelect>
	cpoint1_copy = cp.cpoint1;
     e82:	80 91 87 01 	lds	r24, 0x0187
     e86:	80 93 1a 01 	sts	0x011A, r24
	cpoint2_copy = cp.cpoint2;
     e8a:	80 91 88 01 	lds	r24, 0x0188
     e8e:	80 93 1b 01 	sts	0x011B, r24
     e92:	08 95       	ret

00000e94 <mf_rollLeave>:
	printLedBuffer(0,str);
}

void mf_rollLeave(void)
{
	clearExtraLeds(LED_ROLL);
     e94:	82 e0       	ldi	r24, 0x02	; 2
     e96:	38 de       	rcall	.-912    	; 0xb08 <clearExtraLeds>
	userTimer.Enabled = 0;
     e98:	e6 e1       	ldi	r30, 0x16	; 22
     e9a:	f1 e0       	ldi	r31, 0x01	; 1
     e9c:	80 81       	ld	r24, Z
     e9e:	8e 7f       	andi	r24, 0xFE	; 254
     ea0:	80 83       	st	Z, r24
     ea2:	08 95       	ret

00000ea4 <mf_setTempSelect>:
//---------------------------------------------//


void mf_setTempSelect(void)
{
	clearExtraLeds(LED_TEMP);
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	30 de       	rcall	.-928    	; 0xb08 <clearExtraLeds>
	mf_leafSelectAct();		// setup and start timer
     ea8:	7f ce       	rjmp	.-770    	; 0xba8 <mf_leafSelectAct>

00000eaa <mf_realTempLeave>:
	printLedBuffer(0,str);
}

void mf_realTempLeave(void)
{
	clearExtraLeds(LED_TEMP);
     eaa:	81 e0       	ldi	r24, 0x01	; 1
     eac:	2d ce       	rjmp	.-934    	; 0xb08 <clearExtraLeds>

00000eae <mf_sndenDo>:

//---------------------------------------------//


void mf_sndenDo(void)
{
     eae:	cf 93       	push	r28
     eb0:	df 93       	push	r29
     eb2:	cd b7       	in	r28, 0x3d	; 61
     eb4:	de b7       	in	r29, 0x3e	; 62
     eb6:	27 97       	sbiw	r28, 0x07	; 7
     eb8:	0f b6       	in	r0, 0x3f	; 63
     eba:	f8 94       	cli
     ebc:	de bf       	out	0x3e, r29	; 62
     ebe:	0f be       	out	0x3f, r0	; 63
     ec0:	cd bf       	out	0x3d, r28	; 61
	char str[] = {'S','N','D',' ',' ',' ',0};
     ec2:	87 e0       	ldi	r24, 0x07	; 7
     ec4:	e2 ec       	ldi	r30, 0xC2	; 194
     ec6:	f0 e0       	ldi	r31, 0x00	; 0
     ec8:	de 01       	movw	r26, r28
     eca:	11 96       	adiw	r26, 0x01	; 1
     ecc:	01 90       	ld	r0, Z+
     ece:	0d 92       	st	X+, r0
     ed0:	8a 95       	dec	r24
     ed2:	e1 f7       	brne	.-8      	; 0xecc <mf_sndenDo+0x1e>
		
	if (button_state & (BD_UP | BD_DOWN))
     ed4:	80 91 fa 00 	lds	r24, 0x00FA
     ed8:	90 91 fb 00 	lds	r25, 0x00FB
     edc:	86 70       	andi	r24, 0x06	; 6
     ede:	99 27       	eor	r25, r25
     ee0:	89 2b       	or	r24, r25
     ee2:	49 f0       	breq	.+18     	; 0xef6 <mf_sndenDo+0x48>
	{
		p.sound_enable = !p.sound_enable;
     ee4:	81 e0       	ldi	r24, 0x01	; 1
     ee6:	90 91 8f 01 	lds	r25, 0x018F
     eea:	91 11       	cpse	r25, r1
     eec:	80 e0       	ldi	r24, 0x00	; 0
     eee:	80 93 8f 01 	sts	0x018F, r24
//	 Restarts menu state timeout
//	Should be used in RUN function when control buttons are pressed.
//-----------------------------------------------------------------//
static void restartMenuTimer(void)
{
	menuTimer.Timer = 0;
     ef2:	10 92 97 00 	sts	0x0097, r1
	{
		p.sound_enable = !p.sound_enable;
		restartMenuTimer();
	}			
		
	if (userTimer.FA_GE)
     ef6:	80 91 16 01 	lds	r24, 0x0116
     efa:	84 ff       	sbrs	r24, 4
     efc:	0d c0       	rjmp	.+26     	; 0xf18 <mf_sndenDo+0x6a>
	{
		if (p.sound_enable)		
     efe:	80 91 8f 01 	lds	r24, 0x018F
     f02:	88 23       	and	r24, r24
     f04:	21 f0       	breq	.+8      	; 0xf0e <mf_sndenDo+0x60>
		{
			str[4] = 'O';
     f06:	8f e4       	ldi	r24, 0x4F	; 79
     f08:	8d 83       	std	Y+5, r24	; 0x05
			str[5] = 'N';
     f0a:	8e e4       	ldi	r24, 0x4E	; 78
     f0c:	04 c0       	rjmp	.+8      	; 0xf16 <mf_sndenDo+0x68>
		}
		else
		{
			str[3] = 'O';
     f0e:	8f e4       	ldi	r24, 0x4F	; 79
     f10:	8c 83       	std	Y+4, r24	; 0x04
			str[4] = 'F';
     f12:	86 e4       	ldi	r24, 0x46	; 70
     f14:	8d 83       	std	Y+5, r24	; 0x05
			str[5] = 'F';
     f16:	8e 83       	std	Y+6, r24	; 0x06
		}			
	}
		
	printLedBuffer(0,str);
     f18:	be 01       	movw	r22, r28
     f1a:	6f 5f       	subi	r22, 0xFF	; 255
     f1c:	7f 4f       	sbci	r23, 0xFF	; 255
     f1e:	80 e0       	ldi	r24, 0x00	; 0
     f20:	a7 dd       	rcall	.-1202   	; 0xa70 <printLedBuffer>
	setComma(2);
     f22:	82 e0       	ldi	r24, 0x02	; 2
     f24:	df dd       	rcall	.-1090   	; 0xae4 <setComma>
}
     f26:	27 96       	adiw	r28, 0x07	; 7
     f28:	0f b6       	in	r0, 0x3f	; 63
     f2a:	f8 94       	cli
     f2c:	de bf       	out	0x3e, r29	; 62
     f2e:	0f be       	out	0x3f, r0	; 63
     f30:	cd bf       	out	0x3d, r28	; 61
     f32:	df 91       	pop	r29
     f34:	cf 91       	pop	r28
     f36:	08 95       	ret

00000f38 <mf_rollDo>:
	setExtraLeds(LED_ROLL);
	mf_leafSelectAct();		// setup and start timer
}

void mf_rollDo(void)
{
     f38:	cf 93       	push	r28
     f3a:	df 93       	push	r29
     f3c:	cd b7       	in	r28, 0x3d	; 61
     f3e:	de b7       	in	r29, 0x3e	; 62
     f40:	27 97       	sbiw	r28, 0x07	; 7
     f42:	0f b6       	in	r0, 0x3f	; 63
     f44:	f8 94       	cli
     f46:	de bf       	out	0x3e, r29	; 62
     f48:	0f be       	out	0x3f, r0	; 63
     f4a:	cd bf       	out	0x3d, r28	; 61
	char str[] = {' ',' ',' ',' ',' ',' ',0};
     f4c:	87 e0       	ldi	r24, 0x07	; 7
     f4e:	e9 ec       	ldi	r30, 0xC9	; 201
     f50:	f0 e0       	ldi	r31, 0x00	; 0
     f52:	de 01       	movw	r26, r28
     f54:	11 96       	adiw	r26, 0x01	; 1
     f56:	01 90       	ld	r0, Z+
     f58:	0d 92       	st	X+, r0
     f5a:	8a 95       	dec	r24
     f5c:	e1 f7       	brne	.-8      	; 0xf56 <mf_rollDo+0x1e>
		
	if (button_state & (BD_UP | BR_UP))
     f5e:	80 91 fa 00 	lds	r24, 0x00FA
     f62:	90 91 fb 00 	lds	r25, 0x00FB
     f66:	9c 01       	movw	r18, r24
     f68:	22 70       	andi	r18, 0x02	; 2
     f6a:	34 70       	andi	r19, 0x04	; 4
     f6c:	23 2b       	or	r18, r19
     f6e:	31 f0       	breq	.+12     	; 0xf7c <mf_rollDo+0x44>
	{
		if (p.rollCycleSet < MAX_ROLL_CYCLES)
     f70:	80 91 8e 01 	lds	r24, 0x018E
     f74:	83 36       	cpi	r24, 0x63	; 99
     f76:	68 f4       	brcc	.+26     	; 0xf92 <mf_rollDo+0x5a>
			p.rollCycleSet += 1;
     f78:	8f 5f       	subi	r24, 0xFF	; 255
     f7a:	09 c0       	rjmp	.+18     	; 0xf8e <mf_rollDo+0x56>
	}
	else if (button_state & (BD_DOWN | BR_DOWN))
     f7c:	84 70       	andi	r24, 0x04	; 4
     f7e:	98 70       	andi	r25, 0x08	; 8
     f80:	89 2b       	or	r24, r25
     f82:	39 f0       	breq	.+14     	; 0xf92 <mf_rollDo+0x5a>
	{
		if (p.rollCycleSet > MIN_ROLL_CYCLES)
     f84:	80 91 8e 01 	lds	r24, 0x018E
     f88:	82 30       	cpi	r24, 0x02	; 2
     f8a:	18 f0       	brcs	.+6      	; 0xf92 <mf_rollDo+0x5a>
			p.rollCycleSet -= 1;
     f8c:	81 50       	subi	r24, 0x01	; 1
     f8e:	80 93 8e 01 	sts	0x018E, r24
	}	
		
	u16toa_align_right(p.rollCycleSet,str + 4,0x80 | 2,' ');
     f92:	20 e2       	ldi	r18, 0x20	; 32
     f94:	42 e8       	ldi	r20, 0x82	; 130
     f96:	be 01       	movw	r22, r28
     f98:	6b 5f       	subi	r22, 0xFB	; 251
     f9a:	7f 4f       	sbci	r23, 0xFF	; 255
     f9c:	80 91 8e 01 	lds	r24, 0x018E
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	40 d1       	rcall	.+640    	; 0x1224 <u16toa_align_right>
	
	if ((!(rollState & ROLL_CYCLE)) || (userTimer.FA_GE))
     fa4:	80 91 1d 01 	lds	r24, 0x011D
     fa8:	82 ff       	sbrs	r24, 2
     faa:	04 c0       	rjmp	.+8      	; 0xfb4 <mf_rollDo+0x7c>
     fac:	80 91 16 01 	lds	r24, 0x0116
     fb0:	84 ff       	sbrs	r24, 4
     fb2:	09 c0       	rjmp	.+18     	; 0xfc6 <mf_rollDo+0x8e>
	{
		u16toa_align_right(activeRollCycle,str + 1,0x80 | 2,' ');
     fb4:	20 e2       	ldi	r18, 0x20	; 32
     fb6:	42 e8       	ldi	r20, 0x82	; 130
     fb8:	be 01       	movw	r22, r28
     fba:	6e 5f       	subi	r22, 0xFE	; 254
     fbc:	7f 4f       	sbci	r23, 0xFF	; 255
     fbe:	80 91 1c 01 	lds	r24, 0x011C
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	2f d1       	rcall	.+606    	; 0x1224 <u16toa_align_right>
	}
	
	str[0] = 0;
     fc6:	19 82       	std	Y+1, r1	; 0x01
	if (isTopPointValid())
     fc8:	ff d2       	rcall	.+1534   	; 0x15c8 <isTopPointValid>
     fca:	88 23       	and	r24, r24
     fcc:	19 f0       	breq	.+6      	; 0xfd4 <mf_rollDo+0x9c>
		str[0] |= SEGA;
     fce:	89 81       	ldd	r24, Y+1	; 0x01
     fd0:	81 60       	ori	r24, 0x01	; 1
     fd2:	89 83       	std	Y+1, r24	; 0x01
	if (isBottomPointValid())
     fd4:	09 d3       	rcall	.+1554   	; 0x15e8 <isBottomPointValid>
     fd6:	88 23       	and	r24, r24
     fd8:	19 f0       	breq	.+6      	; 0xfe0 <mf_rollDo+0xa8>
		str[0] |= SEGD;
     fda:	89 81       	ldd	r24, Y+1	; 0x01
     fdc:	88 60       	ori	r24, 0x08	; 8
     fde:	89 83       	std	Y+1, r24	; 0x01
	if (str[0] == 0)
     fe0:	89 81       	ldd	r24, Y+1	; 0x01
     fe2:	81 11       	cpse	r24, r1
     fe4:	02 c0       	rjmp	.+4      	; 0xfea <mf_rollDo+0xb2>
		str[0] = ' ';
     fe6:	80 e2       	ldi	r24, 0x20	; 32
     fe8:	89 83       	std	Y+1, r24	; 0x01
		
	printLedBuffer(0,str);
     fea:	be 01       	movw	r22, r28
     fec:	6f 5f       	subi	r22, 0xFF	; 255
     fee:	7f 4f       	sbci	r23, 0xFF	; 255
     ff0:	80 e0       	ldi	r24, 0x00	; 0
     ff2:	3e dd       	rcall	.-1412   	; 0xa70 <printLedBuffer>
}
     ff4:	27 96       	adiw	r28, 0x07	; 7
     ff6:	0f b6       	in	r0, 0x3f	; 63
     ff8:	f8 94       	cli
     ffa:	de bf       	out	0x3e, r29	; 62
     ffc:	0f be       	out	0x3f, r0	; 63
     ffe:	cd bf       	out	0x3d, r28	; 61
    1000:	df 91       	pop	r29
    1002:	cf 91       	pop	r28
    1004:	08 95       	ret

00001006 <mf_rollSelect>:
//---------------------------------------------//
//---------------------------------------------//

void mf_rollSelect(void)
{
	setExtraLeds(LED_ROLL);
    1006:	82 e0       	ldi	r24, 0x02	; 2
    1008:	79 dd       	rcall	.-1294   	; 0xafc <setExtraLeds>
	mf_leafSelectAct();		// setup and start timer
    100a:	ce cd       	rjmp	.-1124   	; 0xba8 <mf_leafSelectAct>

0000100c <mf_setTempDo>:
	clearExtraLeds(LED_TEMP);
	mf_leafSelectAct();		// setup and start timer
}

void mf_setTempDo(void)
{
    100c:	cf 93       	push	r28
    100e:	df 93       	push	r29
    1010:	cd b7       	in	r28, 0x3d	; 61
    1012:	de b7       	in	r29, 0x3e	; 62
    1014:	27 97       	sbiw	r28, 0x07	; 7
    1016:	0f b6       	in	r0, 0x3f	; 63
    1018:	f8 94       	cli
    101a:	de bf       	out	0x3e, r29	; 62
    101c:	0f be       	out	0x3f, r0	; 63
    101e:	cd bf       	out	0x3d, r28	; 61
	char str[] = {' ',' ',' ',' ',0xB0,'C',0};
    1020:	87 e0       	ldi	r24, 0x07	; 7
    1022:	ed ea       	ldi	r30, 0xAD	; 173
    1024:	f0 e0       	ldi	r31, 0x00	; 0
    1026:	de 01       	movw	r26, r28
    1028:	11 96       	adiw	r26, 0x01	; 1
    102a:	01 90       	ld	r0, Z+
    102c:	0d 92       	st	X+, r0
    102e:	8a 95       	dec	r24
    1030:	e1 f7       	brne	.-8      	; 0x102a <mf_setTempDo+0x1e>

	
	if (button_state & (BD_UP | BR_UP))
    1032:	80 91 fa 00 	lds	r24, 0x00FA
    1036:	90 91 fb 00 	lds	r25, 0x00FB
    103a:	9c 01       	movw	r18, r24
    103c:	22 70       	andi	r18, 0x02	; 2
    103e:	34 70       	andi	r19, 0x04	; 4
    1040:	23 2b       	or	r18, r19
    1042:	31 f0       	breq	.+12     	; 0x1050 <mf_setTempDo+0x44>
	{
		if (p.setup_temp_value < MAX_SET_TEMP)
    1044:	80 91 8d 01 	lds	r24, 0x018D
    1048:	8a 3f       	cpi	r24, 0xFA	; 250
    104a:	68 f4       	brcc	.+26     	; 0x1066 <mf_setTempDo+0x5a>
			p.setup_temp_value += 5;
    104c:	8b 5f       	subi	r24, 0xFB	; 251
    104e:	09 c0       	rjmp	.+18     	; 0x1062 <mf_setTempDo+0x56>
		restartMenuTimer();
	}
	else if (button_state & (BD_DOWN | BR_DOWN))
    1050:	84 70       	andi	r24, 0x04	; 4
    1052:	98 70       	andi	r25, 0x08	; 8
    1054:	89 2b       	or	r24, r25
    1056:	49 f0       	breq	.+18     	; 0x106a <mf_setTempDo+0x5e>
	{
		if (p.setup_temp_value > MIN_SET_TEMP)
    1058:	80 91 8d 01 	lds	r24, 0x018D
    105c:	8f 31       	cpi	r24, 0x1F	; 31
    105e:	18 f0       	brcs	.+6      	; 0x1066 <mf_setTempDo+0x5a>
			p.setup_temp_value -= 5;
    1060:	85 50       	subi	r24, 0x05	; 5
    1062:	80 93 8d 01 	sts	0x018D, r24
//	 Restarts menu state timeout
//	Should be used in RUN function when control buttons are pressed.
//-----------------------------------------------------------------//
static void restartMenuTimer(void)
{
	menuTimer.Timer = 0;
    1066:	10 92 97 00 	sts	0x0097, r1
			p.setup_temp_value -= 5;
		restartMenuTimer();
	}					
		
	// Output ADC result to LED
	u16toa_align_right(p.setup_temp_value,str,0x80 | 4,' ');
    106a:	20 e2       	ldi	r18, 0x20	; 32
    106c:	44 e8       	ldi	r20, 0x84	; 132
    106e:	be 01       	movw	r22, r28
    1070:	6f 5f       	subi	r22, 0xFF	; 255
    1072:	7f 4f       	sbci	r23, 0xFF	; 255
    1074:	80 91 8d 01 	lds	r24, 0x018D
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	d4 d0       	rcall	.+424    	; 0x1224 <u16toa_align_right>
	printLedBuffer(0,str);
    107c:	be 01       	movw	r22, r28
    107e:	6f 5f       	subi	r22, 0xFF	; 255
    1080:	7f 4f       	sbci	r23, 0xFF	; 255
    1082:	80 e0       	ldi	r24, 0x00	; 0
    1084:	f5 dc       	rcall	.-1558   	; 0xa70 <printLedBuffer>
	
	if (userTimer.FA_GE)
    1086:	80 91 16 01 	lds	r24, 0x0116
    108a:	84 ff       	sbrs	r24, 4
    108c:	03 c0       	rjmp	.+6      	; 0x1094 <mf_setTempDo+0x88>
		setExtraLeds(LED_TEMP);
    108e:	81 e0       	ldi	r24, 0x01	; 1
    1090:	35 dd       	rcall	.-1430   	; 0xafc <setExtraLeds>
    1092:	02 c0       	rjmp	.+4      	; 0x1098 <mf_setTempDo+0x8c>
	else
		clearExtraLeds(LED_TEMP);
    1094:	81 e0       	ldi	r24, 0x01	; 1
    1096:	38 dd       	rcall	.-1424   	; 0xb08 <clearExtraLeds>
}
    1098:	27 96       	adiw	r28, 0x07	; 7
    109a:	0f b6       	in	r0, 0x3f	; 63
    109c:	f8 94       	cli
    109e:	de bf       	out	0x3e, r29	; 62
    10a0:	0f be       	out	0x3f, r0	; 63
    10a2:	cd bf       	out	0x3d, r28	; 61
    10a4:	df 91       	pop	r29
    10a6:	cf 91       	pop	r28
    10a8:	08 95       	ret

000010aa <mf_realTempSelect>:
//=================================================================//


void mf_realTempSelect(void)
{
	setExtraLeds(LED_TEMP);
    10aa:	81 e0       	ldi	r24, 0x01	; 1
    10ac:	27 cd       	rjmp	.-1458   	; 0xafc <setExtraLeds>

000010ae <getMenuFunctionRecord.constprop.0>:
//	Arguments:
//		menuItemID - ID of an item
//		menuRecord - pointer to function structure to fill
//	Output:
//-----------------------------------------------------------------//
static void getMenuFunctionRecord(uint8_t menuItemID, MenuFunctionRecord* menuRecord )
    10ae:	1f 93       	push	r17
    10b0:	cf 93       	push	r28
    10b2:	df 93       	push	r29
    10b4:	c0 e0       	ldi	r28, 0x00	; 0
    10b6:	d0 e0       	ldi	r29, 0x00	; 0
{
	uint8_t i;
	for (i = 0; i < sizeof(menuFunctionSet)/sizeof(MenuFunctionRecord); i++  )
	{
		readMenuRecord(&menuFunctionSet[i], menuRecord);
    10b8:	17 e0       	ldi	r17, 0x07	; 7
    10ba:	1c 9f       	mul	r17, r28
    10bc:	90 01       	movw	r18, r0
    10be:	1d 9f       	mul	r17, r29
    10c0:	30 0d       	add	r19, r0
    10c2:	11 24       	eor	r1, r1
    10c4:	26 5a       	subi	r18, 0xA6	; 166
    10c6:	3f 4f       	sbci	r19, 0xFF	; 255
//		fRecPtr		- address of the function record in the FLASH
//		resPtr		- address of the record to fill in the SRAM
//-----------------------------------------------------------------//
static inline void readMenuRecord(const MenuFunctionRecord* fRecPtr, MenuFunctionRecord* resPtr )
{
	resPtr->Item = pgm_read_byte(&fRecPtr->Item);
    10c8:	f9 01       	movw	r30, r18
    10ca:	94 91       	lpm	r25, Z
	resPtr->SelectFunction = (FuncPtr)pgm_read_word(&fRecPtr->SelectFunction);
    10cc:	31 96       	adiw	r30, 0x01	; 1
    10ce:	a5 91       	lpm	r26, Z+
    10d0:	b4 91       	lpm	r27, Z
	resPtr->RunFunction = (FuncPtr)pgm_read_word(&fRecPtr->RunFunction);
    10d2:	f9 01       	movw	r30, r18
    10d4:	33 96       	adiw	r30, 0x03	; 3
    10d6:	65 91       	lpm	r22, Z+
    10d8:	74 91       	lpm	r23, Z
	resPtr->LeaveFunction = (FuncPtr)pgm_read_word(&fRecPtr->LeaveFunction);
    10da:	2b 5f       	subi	r18, 0xFB	; 251
    10dc:	3f 4f       	sbci	r19, 0xFF	; 255
    10de:	f9 01       	movw	r30, r18
    10e0:	45 91       	lpm	r20, Z+
    10e2:	54 91       	lpm	r21, Z
{
	uint8_t i;
	for (i = 0; i < sizeof(menuFunctionSet)/sizeof(MenuFunctionRecord); i++  )
	{
		readMenuRecord(&menuFunctionSet[i], menuRecord);
		if (menuRecord->Item == menuItemID)
    10e4:	98 13       	cpse	r25, r24
    10e6:	03 c0       	rjmp	.+6      	; 0x10ee <getMenuFunctionRecord.constprop.0+0x40>
    10e8:	80 93 0f 01 	sts	0x010F, r24
    10ec:	06 c0       	rjmp	.+12     	; 0x10fa <getMenuFunctionRecord.constprop.0+0x4c>
    10ee:	21 96       	adiw	r28, 0x01	; 1
//	Output:
//-----------------------------------------------------------------//
static void getMenuFunctionRecord(uint8_t menuItemID, MenuFunctionRecord* menuRecord )
{
	uint8_t i;
	for (i = 0; i < sizeof(menuFunctionSet)/sizeof(MenuFunctionRecord); i++  )
    10f0:	ce 30       	cpi	r28, 0x0E	; 14
    10f2:	d1 05       	cpc	r29, r1
    10f4:	11 f7       	brne	.-60     	; 0x10ba <getMenuFunctionRecord.constprop.0+0xc>
    10f6:	90 93 0f 01 	sts	0x010F, r25
    10fa:	a0 93 10 01 	sts	0x0110, r26
    10fe:	b0 93 11 01 	sts	0x0111, r27
    1102:	60 93 12 01 	sts	0x0112, r22
    1106:	70 93 13 01 	sts	0x0113, r23
    110a:	40 93 14 01 	sts	0x0114, r20
    110e:	50 93 15 01 	sts	0x0115, r21
	{
		readMenuRecord(&menuFunctionSet[i], menuRecord);
		if (menuRecord->Item == menuItemID)
			break;
	}
}
    1112:	df 91       	pop	r29
    1114:	cf 91       	pop	r28
    1116:	1f 91       	pop	r17
    1118:	08 95       	ret

0000111a <InitMenu>:
//	Menu initialization
//	Call this function at start of your program before processMenu()
//-----------------------------------------------------------------//
void InitMenu(void)
{
	selectedMenuItemID = mi_REALTEMP;
    111a:	81 e0       	ldi	r24, 0x01	; 1
    111c:	80 93 0e 01 	sts	0x010E, r24
	getMenuFunctionRecord(selectedMenuItemID, &selectedMenuFunctionRecord);
    1120:	c6 df       	rcall	.-116    	; 0x10ae <getMenuFunctionRecord.constprop.0>
	processItemFunction(selectedMenuFunctionRecord.SelectFunction);
    1122:	80 91 10 01 	lds	r24, 0x0110
    1126:	90 91 11 01 	lds	r25, 0x0111
    112a:	33 cd       	rjmp	.-1434   	; 0xb92 <processItemFunction>

0000112c <processMenu>:
//	Main menu control, -  state function calls, jumps 
//	between menu states and indication
//	Call this function from main() with a fixed time interval.
//-----------------------------------------------------------------//
void processMenu(void)
{
    112c:	ff 92       	push	r15
    112e:	0f 93       	push	r16
    1130:	1f 93       	push	r17
    1132:	cf 93       	push	r28
    1134:	df 93       	push	r29
	NextItem_t nextItem;
	uint16_t jumpCondition;
	
	processSoftTimer8b(&menuTimer);	
    1136:	86 e9       	ldi	r24, 0x96	; 150
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	8c d3       	rcall	.+1816   	; 0x1854 <processSoftTimer8b>
	
	// Compose jump condition
	jumpCondition = button_state;		
    113c:	40 91 fa 00 	lds	r20, 0x00FA
    1140:	50 91 fb 00 	lds	r21, 0x00FB
	if (menuTimer.FTop)
    1144:	80 91 96 00 	lds	r24, 0x0096
    1148:	85 fd       	sbrc	r24, 5
		jumpCondition |= TMR_EXP;
    114a:	50 68       	ori	r21, 0x80	; 128
	if (sys_timers.flags & AUTOPOFF_EXPIRED)
    114c:	80 91 a1 00 	lds	r24, 0x00A1
    1150:	84 fd       	sbrc	r24, 4
		jumpCondition |= GOTO_POFF;
    1152:	50 64       	ori	r21, 0x40	; 64
	
	// Get next menu item according to current state and jump conditions
	nextItem = getNextMenuItem(selectedMenuItemID, jumpCondition);
    1154:	80 91 0e 01 	lds	r24, 0x010E
    1158:	60 e0       	ldi	r22, 0x00	; 0
    115a:	70 e0       	ldi	r23, 0x00	; 0
	MenuJumpRecord	jRecord;
	uint8_t i;
	
	for (i = 0; i < sizeof(menuJumpSet)/sizeof(MenuJumpRecord); i++  )
	{
		readJumpRecord(&menuJumpSet[i], &jRecord);		// read full jump record
    115c:	95 e0       	ldi	r25, 0x05	; 5
    115e:	96 9f       	mul	r25, r22
    1160:	90 01       	movw	r18, r0
    1162:	97 9f       	mul	r25, r23
    1164:	30 0d       	add	r19, r0
    1166:	11 24       	eor	r1, r1
    1168:	24 54       	subi	r18, 0x44	; 68
    116a:	3f 4f       	sbci	r19, 0xFF	; 255
//		jRecPtr		- address of the jump record in the FLASH
//		resPtr		- address of the record to fill in the SRAM
//-----------------------------------------------------------------//
static inline void readJumpRecord(const MenuJumpRecord* jRecPtr, MenuJumpRecord* resPtr )
{
	resPtr->Item = pgm_read_byte(&jRecPtr->Item);
    116c:	f9 01       	movw	r30, r18
    116e:	14 91       	lpm	r17, Z
	resPtr->JumpCondition = pgm_read_word(&jRecPtr->JumpCondition);
    1170:	31 96       	adiw	r30, 0x01	; 1
    1172:	a5 91       	lpm	r26, Z+
    1174:	b4 91       	lpm	r27, Z
	resPtr->NextItem= pgm_read_byte(&jRecPtr->NextItem);
    1176:	f9 01       	movw	r30, r18
    1178:	33 96       	adiw	r30, 0x03	; 3
    117a:	d4 91       	lpm	r29, Z
	resPtr->Flags= pgm_read_byte(&jRecPtr->Flags);
    117c:	f9 01       	movw	r30, r18
    117e:	34 96       	adiw	r30, 0x04	; 4
    1180:	24 91       	lpm	r18, Z
	uint8_t i;
	
	for (i = 0; i < sizeof(menuJumpSet)/sizeof(MenuJumpRecord); i++  )
	{
		readJumpRecord(&menuJumpSet[i], &jRecord);		// read full jump record
		if (jRecord.Item == selectedItemId)				// If ID match,
    1182:	18 13       	cpse	r17, r24
    1184:	0e c0       	rjmp	.+28     	; 0x11a2 <processMenu+0x76>
		{
			if ((jRecord.JumpCondition & jmpCond) != 0)		// if any of jump conditions match too,
    1186:	a4 23       	and	r26, r20
    1188:	b5 23       	and	r27, r21
    118a:	ab 2b       	or	r26, r27
    118c:	51 f0       	breq	.+20     	; 0x11a2 <processMenu+0x76>
			{
				nextItem.ItemID = jRecord.NextItem;			// switch to next menu item
				nextItem.ItemTimeout = jRecord.Flags & TIMEOUT_MASK;
    118e:	c2 2f       	mov	r28, r18
    1190:	cf 73       	andi	r28, 0x3F	; 63
				nextItem.ShiftRight = (jRecord.Flags & SHIFT_RIGHT) ? 1 : 0;
    1192:	26 fb       	bst	r18, 6
    1194:	00 27       	eor	r16, r16
    1196:	00 f9       	bld	r16, 0
				nextItem.ShiftLeft = (jRecord.Flags & SHIFT_LEFT) ? 1 : 0;
    1198:	f2 2e       	mov	r15, r18
    119a:	ff 1c       	adc	r15, r15
    119c:	ff 24       	eor	r15, r15
    119e:	ff 1c       	adc	r15, r15
    11a0:	06 c0       	rjmp	.+12     	; 0x11ae <processMenu+0x82>
    11a2:	6f 5f       	subi	r22, 0xFF	; 255
    11a4:	7f 4f       	sbci	r23, 0xFF	; 255
	NextItem_t nextItem;
	nextItem.ItemID = selectedItemId;
	MenuJumpRecord	jRecord;
	uint8_t i;
	
	for (i = 0; i < sizeof(menuJumpSet)/sizeof(MenuJumpRecord); i++  )
    11a6:	60 32       	cpi	r22, 0x20	; 32
    11a8:	71 05       	cpc	r23, r1
    11aa:	c9 f6       	brne	.-78     	; 0x115e <processMenu+0x32>
		jumpCondition |= TMR_EXP;
	if (sys_timers.flags & AUTOPOFF_EXPIRED)
		jumpCondition |= GOTO_POFF;
	
	// Get next menu item according to current state and jump conditions
	nextItem = getNextMenuItem(selectedMenuItemID, jumpCondition);
    11ac:	d8 2f       	mov	r29, r24
    11ae:	10 e0       	ldi	r17, 0x00	; 0
    11b0:	f0 fa       	bst	r15, 0
    11b2:	10 f9       	bld	r17, 0
    11b4:	00 fb       	bst	r16, 0
    11b6:	11 f9       	bld	r17, 1
	
	// If next item differs from current
	if (nextItem.ItemID != selectedMenuItemID)
    11b8:	d8 17       	cp	r29, r24
    11ba:	09 f1       	breq	.+66     	; 0x11fe <processMenu+0xd2>
	{		
		// Call exit function for current item
		processItemFunction(selectedMenuFunctionRecord.LeaveFunction);
    11bc:	80 91 14 01 	lds	r24, 0x0114
    11c0:	90 91 15 01 	lds	r25, 0x0115
    11c4:	e6 dc       	rcall	.-1588   	; 0xb92 <processItemFunction>
		
		// If shifting is specified, start it before calling any 
		//	new menu item functions 
		if (nextItem.ShiftRight)
    11c6:	11 ff       	sbrs	r17, 1
    11c8:	02 c0       	rjmp	.+4      	; 0x11ce <processMenu+0xa2>
			startShiftingWindowRight();
    11ca:	21 dc       	rcall	.-1982   	; 0xa0e <startShiftingWindowRight>
    11cc:	02 c0       	rjmp	.+4      	; 0x11d2 <processMenu+0xa6>
		else if (nextItem.ShiftLeft)
    11ce:	10 fd       	sbrc	r17, 0
			startShiftingWindowLeft();
    11d0:	10 dc       	rcall	.-2016   	; 0x9f2 <startShiftingWindowLeft>
		
		// Select new item
		selectedMenuItemID = nextItem.ItemID;
    11d2:	d0 93 0e 01 	sts	0x010E, r29
		
		// Load from FLASH and save function pointers
		getMenuFunctionRecord(selectedMenuItemID, &selectedMenuFunctionRecord);
    11d6:	8d 2f       	mov	r24, r29
    11d8:	6a df       	rcall	.-300    	; 0x10ae <getMenuFunctionRecord.constprop.0>
		// Call select function for next item
		processItemFunction(selectedMenuFunctionRecord.SelectFunction);
    11da:	80 91 10 01 	lds	r24, 0x0110
    11de:	90 91 11 01 	lds	r25, 0x0111
    11e2:	d7 dc       	rcall	.-1618   	; 0xb92 <processItemFunction>
		// Start timer if timeout is enabled
		if (nextItem.ItemTimeout != 0)
    11e4:	cc 23       	and	r28, r28
    11e6:	c1 f0       	breq	.+48     	; 0x1218 <processMenu+0xec>
		{
			menuTimer.Top = nextItem.ItemTimeout * MENU_TIMEOUT_MULT;
    11e8:	cc 0f       	add	r28, r28
    11ea:	c0 93 98 00 	sts	0x0098, r28
			menuTimer.Timer = 0;
    11ee:	10 92 97 00 	sts	0x0097, r1
			menuTimer.Enabled = 1;	
    11f2:	80 91 96 00 	lds	r24, 0x0096
    11f6:	81 60       	ori	r24, 0x01	; 1
    11f8:	80 93 96 00 	sts	0x0096, r24
    11fc:	0d c0       	rjmp	.+26     	; 0x1218 <processMenu+0xec>
		}
		
	}
	else
	{
		processSoftTimer8b(&userTimer);
    11fe:	86 e1       	ldi	r24, 0x16	; 22
    1200:	91 e0       	ldi	r25, 0x01	; 1
    1202:	28 d3       	rcall	.+1616   	; 0x1854 <processSoftTimer8b>
		// Stay at previous item
		processItemFunction(selectedMenuFunctionRecord.RunFunction);
    1204:	80 91 12 01 	lds	r24, 0x0112
    1208:	90 91 13 01 	lds	r25, 0x0113
	}	
}
    120c:	df 91       	pop	r29
    120e:	cf 91       	pop	r28
    1210:	1f 91       	pop	r17
    1212:	0f 91       	pop	r16
    1214:	ff 90       	pop	r15
	}
	else
	{
		processSoftTimer8b(&userTimer);
		// Stay at previous item
		processItemFunction(selectedMenuFunctionRecord.RunFunction);
    1216:	bd cc       	rjmp	.-1670   	; 0xb92 <processItemFunction>
	}	
}
    1218:	df 91       	pop	r29
    121a:	cf 91       	pop	r28
    121c:	1f 91       	pop	r17
    121e:	0f 91       	pop	r16
    1220:	ff 90       	pop	r15
    1222:	08 95       	ret

00001224 <u16toa_align_right>:
// Converts uint16_t value into decimal string with right alignment
// len = number of digits output (without terminating '\0')
// len[7] = 1 -> no terminating '\0' at buffer[len]
// fill_char -> char used for string padding
void u16toa_align_right(uint16_t val, char *buffer, uint8_t len,char fill_char)
{
    1224:	cf 93       	push	r28
    1226:	df 93       	push	r29
	if (len & 0x80)
    1228:	47 ff       	sbrs	r20, 7
    122a:	05 c0       	rjmp	.+10     	; 0x1236 <u16toa_align_right+0x12>
	{
		len = len & 0x7F;
    122c:	4f 77       	andi	r20, 0x7F	; 127
		buffer += len;	
    122e:	fb 01       	movw	r30, r22
    1230:	e4 0f       	add	r30, r20
    1232:	f1 1d       	adc	r31, r1
    1234:	04 c0       	rjmp	.+8      	; 0x123e <u16toa_align_right+0x1a>
	}
	else
	{
		buffer += len;	
    1236:	fb 01       	movw	r30, r22
    1238:	e4 0f       	add	r30, r20
    123a:	f1 1d       	adc	r31, r1
		*buffer = 0;
    123c:	10 82       	st	Z, r1
	}
	
	do
	{
		*--buffer = val % 10 + '0';
    123e:	ca e0       	ldi	r28, 0x0A	; 10
    1240:	d0 e0       	ldi	r29, 0x00	; 0
    1242:	be 01       	movw	r22, r28
    1244:	1f d4       	rcall	.+2110   	; 0x1a84 <__udivmodhi4>
    1246:	80 5d       	subi	r24, 0xD0	; 208
    1248:	82 93       	st	-Z, r24
		val /= 10;
    124a:	cb 01       	movw	r24, r22
		len--;
    124c:	41 50       	subi	r20, 0x01	; 1
	}
	while ((val != 0) && len);
    124e:	00 97       	sbiw	r24, 0x00	; 0
    1250:	21 f0       	breq	.+8      	; 0x125a <u16toa_align_right+0x36>
    1252:	41 11       	cpse	r20, r1
    1254:	f6 cf       	rjmp	.-20     	; 0x1242 <u16toa_align_right+0x1e>
    1256:	01 c0       	rjmp	.+2      	; 0x125a <u16toa_align_right+0x36>
	
	// Padding
	while(len--)
		*--buffer = fill_char;
    1258:	22 93       	st	-Z, r18
		len--;
	}
	while ((val != 0) && len);
	
	// Padding
	while(len--)
    125a:	41 50       	subi	r20, 0x01	; 1
    125c:	e8 f7       	brcc	.-6      	; 0x1258 <u16toa_align_right+0x34>
		*--buffer = fill_char;
}
    125e:	df 91       	pop	r29
    1260:	cf 91       	pop	r28
    1262:	08 95       	ret

00001264 <i32toa_align_right>:



void i32toa_align_right(int32_t val, char *buffer, uint8_t len)
{
    1264:	cf 92       	push	r12
    1266:	df 92       	push	r13
    1268:	ef 92       	push	r14
    126a:	ff 92       	push	r15
    126c:	0f 93       	push	r16
    126e:	1f 93       	push	r17
    1270:	cf 93       	push	r28
    1272:	df 93       	push	r29
    1274:	12 2f       	mov	r17, r18
	uint8_t is_negative = (val < 0) ? 1 : 0;
    1276:	6b 01       	movw	r12, r22
    1278:	7c 01       	movw	r14, r24
    127a:	cc 24       	eor	r12, r12
    127c:	f7 fc       	sbrc	r15, 7
    127e:	c3 94       	inc	r12
    1280:	dd 24       	eor	r13, r13
    1282:	ee 24       	eor	r14, r14
    1284:	ff 24       	eor	r15, r15
    1286:	0c 2d       	mov	r16, r12
	if (is_negative)
    1288:	cc 20       	and	r12, r12
    128a:	39 f0       	breq	.+14     	; 0x129a <i32toa_align_right+0x36>
		val = -val;
    128c:	90 95       	com	r25
    128e:	80 95       	com	r24
    1290:	70 95       	com	r23
    1292:	61 95       	neg	r22
    1294:	7f 4f       	sbci	r23, 0xFF	; 255
    1296:	8f 4f       	sbci	r24, 0xFF	; 255
    1298:	9f 4f       	sbci	r25, 0xFF	; 255
		
	buffer += len;	
    129a:	ea 01       	movw	r28, r20
    129c:	c1 0f       	add	r28, r17
    129e:	d1 1d       	adc	r29, r1
	*buffer = 0;
    12a0:	18 82       	st	Y, r1
	
	do
	{
		*--buffer = val % 10 + '0';
    12a2:	2a e0       	ldi	r18, 0x0A	; 10
    12a4:	c2 2e       	mov	r12, r18
    12a6:	d1 2c       	mov	r13, r1
    12a8:	e1 2c       	mov	r14, r1
    12aa:	f1 2c       	mov	r15, r1
    12ac:	a7 01       	movw	r20, r14
    12ae:	96 01       	movw	r18, r12
    12b0:	32 d4       	rcall	.+2148   	; 0x1b16 <__divmodsi4>
    12b2:	60 5d       	subi	r22, 0xD0	; 208
    12b4:	6a 93       	st	-Y, r22
		val /= 10;
    12b6:	b9 01       	movw	r22, r18
    12b8:	ca 01       	movw	r24, r20
		len--;
    12ba:	11 50       	subi	r17, 0x01	; 1
	}
	while ((val != 0) && len);
    12bc:	61 15       	cp	r22, r1
    12be:	71 05       	cpc	r23, r1
    12c0:	81 05       	cpc	r24, r1
    12c2:	91 05       	cpc	r25, r1
    12c4:	19 f0       	breq	.+6      	; 0x12cc <i32toa_align_right+0x68>
    12c6:	11 11       	cpse	r17, r1
    12c8:	f1 cf       	rjmp	.-30     	; 0x12ac <i32toa_align_right+0x48>
    12ca:	08 c0       	rjmp	.+16     	; 0x12dc <i32toa_align_right+0x78>
	
	if ( (len) && (is_negative) )
    12cc:	11 23       	and	r17, r17
    12ce:	31 f0       	breq	.+12     	; 0x12dc <i32toa_align_right+0x78>
    12d0:	00 23       	and	r16, r16
    12d2:	21 f0       	breq	.+8      	; 0x12dc <i32toa_align_right+0x78>
	{
		*--buffer = '-';
    12d4:	21 97       	sbiw	r28, 0x01	; 1
    12d6:	8d e2       	ldi	r24, 0x2D	; 45
    12d8:	88 83       	st	Y, r24
		len--;	
    12da:	11 50       	subi	r17, 0x01	; 1
	}	
	
	// Padding
	while(len--)
		*--buffer = ' ';
    12dc:	80 e2       	ldi	r24, 0x20	; 32
    12de:	01 c0       	rjmp	.+2      	; 0x12e2 <i32toa_align_right+0x7e>
    12e0:	8a 93       	st	-Y, r24
		*--buffer = '-';
		len--;	
	}	
	
	// Padding
	while(len--)
    12e2:	11 50       	subi	r17, 0x01	; 1
    12e4:	e8 f7       	brcc	.-6      	; 0x12e0 <i32toa_align_right+0x7c>
		*--buffer = ' ';
	
}
    12e6:	df 91       	pop	r29
    12e8:	cf 91       	pop	r28
    12ea:	1f 91       	pop	r17
    12ec:	0f 91       	pop	r16
    12ee:	ff 90       	pop	r15
    12f0:	ef 90       	pop	r14
    12f2:	df 90       	pop	r13
    12f4:	cf 90       	pop	r12
    12f6:	08 95       	ret

000012f8 <logI32p>:
	u16toa_align_right(val,str,6,' ');
	USART_sendstr(str);
}

static void logI32p(int32_t val)
{
    12f8:	cf 93       	push	r28
    12fa:	df 93       	push	r29
    12fc:	cd b7       	in	r28, 0x3d	; 61
    12fe:	de b7       	in	r29, 0x3e	; 62
    1300:	2c 97       	sbiw	r28, 0x0c	; 12
    1302:	0f b6       	in	r0, 0x3f	; 63
    1304:	f8 94       	cli
    1306:	de bf       	out	0x3e, r29	; 62
    1308:	0f be       	out	0x3f, r0	; 63
    130a:	cd bf       	out	0x3d, r28	; 61
	char str[12];
	i32toa_align_right(val,str,12);
    130c:	2c e0       	ldi	r18, 0x0C	; 12
    130e:	ae 01       	movw	r20, r28
    1310:	4f 5f       	subi	r20, 0xFF	; 255
    1312:	5f 4f       	sbci	r21, 0xFF	; 255
    1314:	a7 df       	rcall	.-178    	; 0x1264 <i32toa_align_right>
	USART_sendstr(str);
    1316:	ce 01       	movw	r24, r28
    1318:	01 96       	adiw	r24, 0x01	; 1
    131a:	96 d3       	rcall	.+1836   	; 0x1a48 <USART_sendstr>
}
    131c:	2c 96       	adiw	r28, 0x0c	; 12
    131e:	0f b6       	in	r0, 0x3f	; 63
    1320:	f8 94       	cli
    1322:	de bf       	out	0x3e, r29	; 62
    1324:	0f be       	out	0x3f, r0	; 63
    1326:	cd bf       	out	0x3d, r28	; 61
    1328:	df 91       	pop	r29
    132a:	cf 91       	pop	r28
    132c:	08 95       	ret

0000132e <logU16p>:
    }
}


static void logU16p(uint16_t val)
{
    132e:	cf 93       	push	r28
    1330:	df 93       	push	r29
    1332:	00 d0       	rcall	.+0      	; 0x1334 <logU16p+0x6>
    1334:	00 d0       	rcall	.+0      	; 0x1336 <logU16p+0x8>
    1336:	00 d0       	rcall	.+0      	; 0x1338 <logU16p+0xa>
    1338:	cd b7       	in	r28, 0x3d	; 61
    133a:	de b7       	in	r29, 0x3e	; 62
	char str[6];
	u16toa_align_right(val,str,6,' ');
    133c:	20 e2       	ldi	r18, 0x20	; 32
    133e:	46 e0       	ldi	r20, 0x06	; 6
    1340:	be 01       	movw	r22, r28
    1342:	6f 5f       	subi	r22, 0xFF	; 255
    1344:	7f 4f       	sbci	r23, 0xFF	; 255
    1346:	6e df       	rcall	.-292    	; 0x1224 <u16toa_align_right>
	USART_sendstr(str);
    1348:	ce 01       	movw	r24, r28
    134a:	01 96       	adiw	r24, 0x01	; 1
    134c:	7d d3       	rcall	.+1786   	; 0x1a48 <USART_sendstr>
}
    134e:	26 96       	adiw	r28, 0x06	; 6
    1350:	0f b6       	in	r0, 0x3f	; 63
    1352:	f8 94       	cli
    1354:	de bf       	out	0x3e, r29	; 62
    1356:	0f be       	out	0x3f, r0	; 63
    1358:	cd bf       	out	0x3d, r28	; 61
    135a:	df 91       	pop	r29
    135c:	cf 91       	pop	r28
    135e:	08 95       	ret

00001360 <init_system_io>:
//extern void powTest(void);

void init_system_io()
{
	// Setup Port D
	PORTD = 0;//(1<<PD_SYNCA | 1<<PD_SYNCB);
    1360:	12 ba       	out	0x12, r1	; 18
	DDRD = (1<<PD_TXD | 1<<PD_M1 | 1<<PD_M2 | 1<<PD_HEATER | 1<<PD_HEAT_INDIC );
    1362:	8e e3       	ldi	r24, 0x3E	; 62
    1364:	81 bb       	out	0x11, r24	; 17
	
	// Setup Port B
	PORTB = 0;
    1366:	18 ba       	out	0x18, r1	; 24
	DDRB = (1<<PB_BEEPER | 1<<PB_LED_DOUT | 1<<PB_LED_CLK | 1<<PB_SEGF | 1<<PB_SEGG | 1<<PB_SEGH);
    1368:	8f e3       	ldi	r24, 0x3F	; 63
    136a:	87 bb       	out	0x17, r24	; 23
	
	PORTC = 0;
    136c:	15 ba       	out	0x15, r1	; 21
	DDRC = (1<<PC_SEGA | 1<<PC_SEGB | 1<<PC_SEGC | 1<<PC_SEGD | 1<<PC_SEGE);	
    136e:	8f e1       	ldi	r24, 0x1F	; 31
    1370:	84 bb       	out	0x14, r24	; 20

	// Setup timer0
	// 1/1024 prescaler, T=64us @16MHz
	TCCR0 = (1<<CS02 | 0<<CS01 | 1<<CS00);
    1372:	85 e0       	ldi	r24, 0x05	; 5
    1374:	83 bf       	out	0x33, r24	; 51
	TCNT0 = 0;
    1376:	12 be       	out	0x32, r1	; 50
	// Clear interrupt flag
	TIFR |= (1<<TOV0);
    1378:	88 b7       	in	r24, 0x38	; 56
    137a:	81 60       	ori	r24, 0x01	; 1
    137c:	88 bf       	out	0x38, r24	; 56
	// Enable interrupts from timer 0
	TIMSK |= (1<<TOIE0);
    137e:	89 b7       	in	r24, 0x39	; 57
    1380:	81 60       	ori	r24, 0x01	; 1
    1382:	89 bf       	out	0x39, r24	; 57
	
	// Setup timer2 as 1ms system frequency generator
	// 1/64 prescaler, CTC mode, OC2 disconnected
	TCCR2 = (1<<CS22 | 1<<WGM21);
    1384:	8c e0       	ldi	r24, 0x0C	; 12
    1386:	85 bd       	out	0x25, r24	; 37
	OCR2 = 249;
    1388:	89 ef       	ldi	r24, 0xF9	; 249
    138a:	83 bd       	out	0x23, r24	; 35
	TIMSK |= (1<<OCIE2);
    138c:	89 b7       	in	r24, 0x39	; 57
    138e:	80 68       	ori	r24, 0x80	; 128
    1390:	89 bf       	out	0x39, r24	; 57
	
	// Setup timer1 as beeper frequency generator
	// CTC mode, 1/64 prescaler
	TCCR1A = 0;
    1392:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = (1<<WGM12 | 1<<CS11 | 1<<CS10);
    1394:	8b e0       	ldi	r24, 0x0B	; 11
    1396:	8e bd       	out	0x2e, r24	; 46
	// 1kHz beeper frequency default
	OCR1A = 127;
    1398:	8f e7       	ldi	r24, 0x7F	; 127
    139a:	90 e0       	ldi	r25, 0x00	; 0
    139c:	9b bd       	out	0x2b, r25	; 43
    139e:	8a bd       	out	0x2a, r24	; 42

	// Setup AC sync comparator
	// Interrupt on output toggle
	ACSR = (1<<ACIE | 0<<ACIS1 | 0<<ACIS0);
    13a0:	88 e0       	ldi	r24, 0x08	; 8
    13a2:	88 b9       	out	0x08, r24	; 8
	
	// Setup ADC
	// Internal Vref + cap, input ADC5, 
	ADMUX = (1<<REFS1 | 1<<REFS0 | 0<<MUX3 | 1<<MUX2 | 0<<MUX1 | 1<<MUX0 );
    13a4:	85 ec       	ldi	r24, 0xC5	; 197
    13a6:	87 b9       	out	0x07, r24	; 7
	// Prescaler = 128
	ADCSRA = (1<<ADEN |/* 1<<ADFR |*/  1<<ADIE | 1<<ADPS2 | 1<<ADPS1 | 1<<ADPS0);
    13a8:	8f e8       	ldi	r24, 0x8F	; 143
    13aa:	86 b9       	out	0x06, r24	; 6
	
	// Setup USART
	// Double speed
	UCSRA = (1<<U2X);
    13ac:	82 e0       	ldi	r24, 0x02	; 2
    13ae:	8b b9       	out	0x0b, r24	; 11
	UCSRB = (1<<RXEN | 1<<TXEN | 0<<UCSZ2);
    13b0:	88 e1       	ldi	r24, 0x18	; 24
    13b2:	8a b9       	out	0x0a, r24	; 10
	// No parity, 1 stop bit, 8 bit
	UCSRC = (1<<URSEL | 0<<UPM1 | 0<<UPM0 | 0<<USBS | 1<<UCSZ1 | 1<<UCSZ0);
    13b4:	86 e8       	ldi	r24, 0x86	; 134
    13b6:	80 bd       	out	0x20, r24	; 32
	// 57600 @16MHz, 2x
	UBRRH=0x00;
    13b8:	10 bc       	out	0x20, r1	; 32
	UBRRL=0x22;
    13ba:	82 e2       	ldi	r24, 0x22	; 34
    13bc:	89 b9       	out	0x09, r24	; 9
    13be:	08 95       	ret

000013c0 <main>:
}



int main(void)
{
    13c0:	cf 93       	push	r28
    13c2:	df 93       	push	r29
    13c4:	1f 92       	push	r1
    13c6:	cd b7       	in	r28, 0x3d	; 61
    13c8:	de b7       	in	r29, 0x3e	; 62
	char str[12];
	volatile uint8_t temp8u = 0x00;
    13ca:	19 82       	std	Y+1, r1	; 0x01
	//temp16u = 1200;
	//logI32p(temp16u);
	//i32toa_align_right(temp16u,str,12);
	
	// Initialize MCU IO
	init_system_io();
    13cc:	c9 df       	rcall	.-110    	; 0x1360 <init_system_io>
	// Restore params from EEPROM
	restoreGlobalParams();
    13ce:	42 da       	rcall	.-2940   	; 0x854 <restoreGlobalParams>
	// Calibrate ADC coefficients using restored params
	calculateCoeffs();
    13d0:	23 d7       	rcall	.+3654   	; 0x2218 <__data_load_end+0x5a2>
	// Initialize LED indicator
	initLedIndicator();
    13d2:	2b db       	rcall	.-2474   	; 0xa2a <initLedIndicator>
	// Clear comparator interrupt flag to prevent false triggering
	ACSR |= (1<<ACI);
    13d4:	44 9a       	sbi	0x08, 4	; 8
	sei();
    13d6:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    13d8:	2f ef       	ldi	r18, 0xFF	; 255
    13da:	80 e7       	ldi	r24, 0x70	; 112
    13dc:	92 e0       	ldi	r25, 0x02	; 2
    13de:	21 50       	subi	r18, 0x01	; 1
    13e0:	80 40       	sbci	r24, 0x00	; 0
    13e2:	90 40       	sbci	r25, 0x00	; 0
    13e4:	e1 f7       	brne	.-8      	; 0x13de <main+0x1e>
    13e6:	00 c0       	rjmp	.+0      	; 0x13e8 <main+0x28>
    13e8:	00 00       	nop
	// Safety delay for power part
	_delay_ms(50);
	// Check AC line
	if(p_state == 0x0F) 	
    13ea:	80 91 9a 00 	lds	r24, 0x009A
    13ee:	8f 30       	cpi	r24, 0x0F	; 15
    13f0:	69 f4       	brne	.+26     	; 0x140c <main+0x4c>
	{
		// Power control state machine has not changed - sync has not been detected
		printLedBuffer(0,"AC ERR");
    13f2:	6e ed       	ldi	r22, 0xDE	; 222
    13f4:	70 e0       	ldi	r23, 0x00	; 0
    13f6:	80 e0       	ldi	r24, 0x00	; 0
    13f8:	3b db       	rcall	.-2442   	; 0xa70 <printLedBuffer>
    13fa:	2f ef       	ldi	r18, 0xFF	; 255
    13fc:	83 ed       	ldi	r24, 0xD3	; 211
    13fe:	90 e3       	ldi	r25, 0x30	; 48
    1400:	21 50       	subi	r18, 0x01	; 1
    1402:	80 40       	sbci	r24, 0x00	; 0
    1404:	90 40       	sbci	r25, 0x00	; 0
    1406:	e1 f7       	brne	.-8      	; 0x1400 <main+0x40>
    1408:	00 c0       	rjmp	.+0      	; 0x140a <main+0x4a>
    140a:	00 00       	nop
		_delay_ms(1000);
	}
	// Initialize menu
	InitMenu();
    140c:	86 de       	rcall	.-756    	; 0x111a <InitMenu>
	// Beep
	SetBeeperFreq(1000);
    140e:	88 ee       	ldi	r24, 0xE8	; 232
    1410:	93 e0       	ldi	r25, 0x03	; 3
    1412:	a9 d2       	rcall	.+1362   	; 0x1966 <SetBeeperFreq>
	StartBeep(200);
    1414:	88 ec       	ldi	r24, 0xC8	; 200
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	c6 d2       	rcall	.+1420   	; 0x19a6 <StartBeep>
	// When we get here, few ADC counts have been sampled.
	// Call PID controller function in order to initialize it's internal structures
	heaterInit();
    141a:	c6 d9       	rcall	.-3188   	; 0x7a8 <heaterInit>
	// Start rotating
	setMotorDirection(ROLL_FWD);
    141c:	81 e0       	ldi	r24, 0x01	; 1
    141e:	97 d0       	rcall	.+302    	; 0x154e <setMotorDirection>
	// Clear timer
	menuUpdateTimer.FOvfl = 0;
    1420:	80 91 a2 00 	lds	r24, 0x00A2
    1424:	8f 7b       	andi	r24, 0xBF	; 191
    1426:	80 93 a2 00 	sts	0x00A2, r24

    while(1)
    {
		
		if (menuUpdateTimer.FOvfl)
    142a:	80 91 a2 00 	lds	r24, 0x00A2
    142e:	86 ff       	sbrs	r24, 6
    1430:	fc cf       	rjmp	.-8      	; 0x142a <main+0x6a>
		{
			//--------- BUTTONS ----------//
			
			// Get new button state
			process_buttons();
    1432:	28 d8       	rcall	.-4016   	; 0x484 <process_buttons>
			
			// Give sound feedback
			if (button_state & BL_MENU)
    1434:	80 91 fa 00 	lds	r24, 0x00FA
    1438:	90 91 fb 00 	lds	r25, 0x00FB
    143c:	91 ff       	sbrs	r25, 1
    143e:	03 c0       	rjmp	.+6      	; 0x1446 <main+0x86>
			{
				SetBeeperFreq(800);
    1440:	80 e2       	ldi	r24, 0x20	; 32
    1442:	93 e0       	ldi	r25, 0x03	; 3
    1444:	06 c0       	rjmp	.+12     	; 0x1452 <main+0x92>
				StartBeep(40);
			}
			else if (button_action_down & (BD_MENU | BD_UP | BD_DOWN | BD_HEATCTRL))
    1446:	80 91 f9 00 	lds	r24, 0x00F9
    144a:	87 74       	andi	r24, 0x47	; 71
    144c:	31 f0       	breq	.+12     	; 0x145a <main+0x9a>
			{
				SetBeeperFreq(1000);
    144e:	88 ee       	ldi	r24, 0xE8	; 232
    1450:	93 e0       	ldi	r25, 0x03	; 3
    1452:	89 d2       	rcall	.+1298   	; 0x1966 <SetBeeperFreq>
				StartBeep(40);
    1454:	88 e2       	ldi	r24, 0x28	; 40
    1456:	90 e0       	ldi	r25, 0x00	; 0
    1458:	a6 d2       	rcall	.+1356   	; 0x19a6 <StartBeep>
			}	
			// Direction control buttons sounds get special processing at processRollControl()
			
			// If any button is pressed, restart power off interval
			if (button_action_down)
    145a:	80 91 f9 00 	lds	r24, 0x00F9
    145e:	81 11       	cpse	r24, r1
				resetAutoPowerOffCounter();
    1460:	7f d2       	rcall	.+1278   	; 0x1960 <resetAutoPowerOffCounter>
			
			//---------- TIMERS ----------//
			
			// Process timers and time counters - it is important to call
			// this function before menu and power controls processing
			processSystemTimers();
    1462:	24 d2       	rcall	.+1096   	; 0x18ac <processSystemTimers>

			// Warn user about near auto powering off
			if (sys_timers.flags & AUTOPOFF_SOON)
    1464:	80 91 a1 00 	lds	r24, 0x00A1
    1468:	83 ff       	sbrs	r24, 3
    146a:	06 c0       	rjmp	.+12     	; 0x1478 <main+0xb8>
			{
				SetBeeperFreq(1200);
    146c:	80 eb       	ldi	r24, 0xB0	; 176
    146e:	94 e0       	ldi	r25, 0x04	; 4
    1470:	7a d2       	rcall	.+1268   	; 0x1966 <SetBeeperFreq>
				StartBeep(200);
    1472:	88 ec       	ldi	r24, 0xC8	; 200
    1474:	90 e0       	ldi	r25, 0x00	; 0
    1476:	97 d2       	rcall	.+1326   	; 0x19a6 <StartBeep>
			}		
			
			//----------- ADC ------------//
			
			// Get new temperature measurement
			update_normalized_adc();			
    1478:	d3 d7       	rcall	.+4006   	; 0x2420 <__data_load_end+0x7aa>
		
			// Update indicated Celsius degree
			if (sys_timers.flags & EXPIRED_CELSIUS)
    147a:	80 91 a1 00 	lds	r24, 0x00A1
    147e:	80 fd       	sbrc	r24, 0
				update_Celsius();		
    1480:	18 d7       	rcall	.+3632   	; 0x22b2 <__data_load_end+0x63c>
			
			//----------- MENU -----------//		
				
			// Process user menu states, settings and indication
			processMenu();
    1482:	54 de       	rcall	.-856    	; 0x112c <processMenu>
			
			//--------- CONTROLS ---------//		
			
			// Process cyclic rolling, direction control
			processRollControl();	
    1484:	44 d8       	rcall	.-3960   	; 0x50e <processRollControl>
			
			// Process heater regulation
			processHeaterControl();
    1486:	3e d9       	rcall	.-3460   	; 0x704 <processHeaterControl>
		
			// Process heater events and warnings
			processHeaterAlerts();
    1488:	97 d9       	rcall	.-3282   	; 0x7b8 <processHeaterAlerts>
			
			
			
			//------- LOG to UART --------//	
			if (sys_timers.flags & EXPIRED_LOG)
    148a:	80 91 a1 00 	lds	r24, 0x00A1
    148e:	85 ff       	sbrs	r24, 5
    1490:	c7 cf       	rjmp	.-114    	; 0x1420 <main+0x60>
			{
				
				logU16p(adc_celsius);					// Actual temp (ADC)
    1492:	80 91 5d 01 	lds	r24, 0x015D
    1496:	90 91 5e 01 	lds	r25, 0x015E
    149a:	49 df       	rcall	.-366    	; 0x132e <logU16p>
				logU16p(adc_oversampled);				// Actual temp (ADC), oversampled
    149c:	80 91 31 01 	lds	r24, 0x0131
    14a0:	90 91 32 01 	lds	r25, 0x0132
    14a4:	44 df       	rcall	.-376    	; 0x132e <logU16p>
				logU16p(adc_filtered);					// Actual temp (ADC), oversampled, filtered
    14a6:	80 91 2f 01 	lds	r24, 0x012F
    14aa:	90 91 30 01 	lds	r25, 0x0130
    14ae:	3f df       	rcall	.-386    	; 0x132e <logU16p>
				USART_sendstr("    ");
    14b0:	85 ee       	ldi	r24, 0xE5	; 229
    14b2:	90 e0       	ldi	r25, 0x00	; 0
    14b4:	c9 d2       	rcall	.+1426   	; 0x1a48 <USART_sendstr>
				logU16p(dbg_SetTempPID);				// Temp setting, as input to PID
    14b6:	80 91 a5 01 	lds	r24, 0x01A5
    14ba:	90 91 a6 01 	lds	r25, 0x01A6
    14be:	37 df       	rcall	.-402    	; 0x132e <logU16p>
				logU16p(dbg_RealTempPID);				// Real temp, sampled for PID input
    14c0:	80 91 96 01 	lds	r24, 0x0196
    14c4:	90 91 97 01 	lds	r25, 0x0197
    14c8:	32 df       	rcall	.-412    	; 0x132e <logU16p>
				
				logI32p(dbg_PID_p_term);				// p term
    14ca:	60 91 94 01 	lds	r22, 0x0194
    14ce:	70 91 95 01 	lds	r23, 0x0195
    14d2:	88 27       	eor	r24, r24
    14d4:	77 fd       	sbrc	r23, 7
    14d6:	80 95       	com	r24
    14d8:	98 2f       	mov	r25, r24
    14da:	0e df       	rcall	.-484    	; 0x12f8 <logI32p>
				logI32p(dbg_PID_d_term);				// d term
    14dc:	60 91 a2 01 	lds	r22, 0x01A2
    14e0:	70 91 a3 01 	lds	r23, 0x01A3
    14e4:	88 27       	eor	r24, r24
    14e6:	77 fd       	sbrc	r23, 7
    14e8:	80 95       	com	r24
    14ea:	98 2f       	mov	r25, r24
    14ec:	05 df       	rcall	.-502    	; 0x12f8 <logI32p>
				logI32p(dbg_PID_i_term);				// i term
    14ee:	60 91 98 01 	lds	r22, 0x0198
    14f2:	70 91 99 01 	lds	r23, 0x0199
    14f6:	88 27       	eor	r24, r24
    14f8:	77 fd       	sbrc	r23, 7
    14fa:	80 95       	com	r24
    14fc:	98 2f       	mov	r25, r24
    14fe:	fc de       	rcall	.-520    	; 0x12f8 <logI32p>
				USART_sendstr("    ");
    1500:	85 ee       	ldi	r24, 0xE5	; 229
    1502:	90 e0       	ldi	r25, 0x00	; 0
    1504:	a1 d2       	rcall	.+1346   	; 0x1a48 <USART_sendstr>
				logU16p(dbg_PID_output);				// PID output
    1506:	80 91 91 01 	lds	r24, 0x0191
    150a:	90 91 92 01 	lds	r25, 0x0192
    150e:	0f df       	rcall	.-482    	; 0x132e <logU16p>
			
				USART_sendstr("\n\r");
    1510:	8a ee       	ldi	r24, 0xEA	; 234
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	99 d2       	rcall	.+1330   	; 0x1a48 <USART_sendstr>
    1516:	84 cf       	rjmp	.-248    	; 0x1420 <main+0x60>

00001518 <setHeaterControl>:

// User function to control heater intensity
void setHeaterControl(uint8_t value)
{
	// Disable interrupts from timer0 
	TIMSK &= ~(1<<TOIE0);
    1518:	99 b7       	in	r25, 0x39	; 57
    151a:	9e 7f       	andi	r25, 0xFE	; 254
    151c:	99 bf       	out	0x39, r25	; 57
	
	ctrl_heater = value;
    151e:	80 93 20 01 	sts	0x0120, r24
	heaterState &= ~READY_TO_UPDATE_HEATER;
    1522:	80 91 1f 01 	lds	r24, 0x011F
    1526:	8f 77       	andi	r24, 0x7F	; 127
    1528:	80 93 1f 01 	sts	0x011F, r24
	
	// Enable interrupts from timer 0
	TIMSK |= (1<<TOIE0);	
    152c:	89 b7       	in	r24, 0x39	; 57
    152e:	81 60       	ori	r24, 0x01	; 1
    1530:	89 bf       	out	0x39, r24	; 57
    1532:	08 95       	ret

00001534 <forceHeaterControlUpdate>:


void forceHeaterControlUpdate(void)
{
	// Disable interrupts from timer0 
	TIMSK &= ~(1<<TOIE0);
    1534:	89 b7       	in	r24, 0x39	; 57
    1536:	8e 7f       	andi	r24, 0xFE	; 254
    1538:	89 bf       	out	0x39, r24	; 57
	
	// Flag READY_TO_UPDATE_HEATER will be set on next on next AC line period
	heater_cnt = HEATER_REGULATION_PERIODS - 6;
    153a:	8c e2       	ldi	r24, 0x2C	; 44
    153c:	80 93 21 01 	sts	0x0121, r24
	heater_reg_cnt = HEATER_PID_CALL_INTERVAL - 1;
    1540:	82 e0       	ldi	r24, 0x02	; 2
    1542:	80 93 1e 01 	sts	0x011E, r24
	
	// Enable interrupts from timer 0
	TIMSK |= (1<<TOIE0);	
    1546:	89 b7       	in	r24, 0x39	; 57
    1548:	81 60       	ori	r24, 0x01	; 1
    154a:	89 bf       	out	0x39, r24	; 57
    154c:	08 95       	ret

0000154e <setMotorDirection>:
	
// User function to control motor rotation
void setMotorDirection(uint8_t dir)
{
	// Disable interrupts from timer0 
	TIMSK &= ~(1<<TOIE0);
    154e:	99 b7       	in	r25, 0x39	; 57
    1550:	9e 7f       	andi	r25, 0xFE	; 254
    1552:	99 bf       	out	0x39, r25	; 57
		
	newDirReq = dir;	// save new direction request
    1554:	80 93 22 01 	sts	0x0122, r24
	dirChangedMask = ~ROLL_DIR_CHANGED;
    1558:	9f ed       	ldi	r25, 0xDF	; 223
    155a:	90 93 9b 00 	sts	0x009B, r25
	
	if (dir & ROLL_FWD)
    155e:	80 ff       	sbrs	r24, 0
    1560:	09 c0       	rjmp	.+18     	; 0x1574 <setMotorDirection+0x26>
		bottomPoint = rollPoint;
    1562:	80 91 23 01 	lds	r24, 0x0123
    1566:	90 91 24 01 	lds	r25, 0x0124
    156a:	90 93 26 01 	sts	0x0126, r25
    156e:	80 93 25 01 	sts	0x0125, r24
    1572:	0a c0       	rjmp	.+20     	; 0x1588 <setMotorDirection+0x3a>
	else if (dir & ROLL_REV)
    1574:	81 ff       	sbrs	r24, 1
    1576:	08 c0       	rjmp	.+16     	; 0x1588 <setMotorDirection+0x3a>
		topPoint = rollPoint;
    1578:	80 91 23 01 	lds	r24, 0x0123
    157c:	90 91 24 01 	lds	r25, 0x0124
    1580:	90 93 28 01 	sts	0x0128, r25
    1584:	80 93 27 01 	sts	0x0127, r24

	// Enable interrupts from timer 0
	TIMSK |= (1<<TOIE0);	
    1588:	89 b7       	in	r24, 0x39	; 57
    158a:	81 60       	ori	r24, 0x01	; 1
    158c:	89 bf       	out	0x39, r24	; 57
    158e:	08 95       	ret

00001590 <stopCycleRolling>:
}

void stopCycleRolling(uint8_t doResetPoints)
{
	// Disable interrupts from timer0 
	TIMSK &= ~(1<<TOIE0);
    1590:	99 b7       	in	r25, 0x39	; 57
    1592:	9e 7f       	andi	r25, 0xFE	; 254
    1594:	99 bf       	out	0x39, r25	; 57
	
	rollState &= ~ROLL_CYCLE;
    1596:	90 91 1d 01 	lds	r25, 0x011D
    159a:	9b 7f       	andi	r25, 0xFB	; 251
    159c:	90 93 1d 01 	sts	0x011D, r25
	if (doResetPoints)
    15a0:	88 23       	and	r24, r24
    15a2:	71 f0       	breq	.+28     	; 0x15c0 <stopCycleRolling+0x30>
	{
		topPoint = bottomPoint = rollPoint;
    15a4:	80 91 23 01 	lds	r24, 0x0123
    15a8:	90 91 24 01 	lds	r25, 0x0124
    15ac:	90 93 26 01 	sts	0x0126, r25
    15b0:	80 93 25 01 	sts	0x0125, r24
    15b4:	90 93 28 01 	sts	0x0128, r25
    15b8:	80 93 27 01 	sts	0x0127, r24
		activeRollCycle = 0;	
    15bc:	10 92 1c 01 	sts	0x011C, r1
	}		
	
	// Enable interrupts from timer 0
	TIMSK |= (1<<TOIE0);
    15c0:	89 b7       	in	r24, 0x39	; 57
    15c2:	81 60       	ori	r24, 0x01	; 1
    15c4:	89 bf       	out	0x39, r24	; 57
    15c6:	08 95       	ret

000015c8 <isTopPointValid>:



uint8_t isTopPointValid(void)
{
	return (	(int16_t)(topPoint - rollPoint) >= 0 );
    15c8:	80 91 27 01 	lds	r24, 0x0127
    15cc:	90 91 28 01 	lds	r25, 0x0128
    15d0:	20 91 23 01 	lds	r18, 0x0123
    15d4:	30 91 24 01 	lds	r19, 0x0124
    15d8:	82 1b       	sub	r24, r18
    15da:	93 0b       	sbc	r25, r19
    15dc:	89 2f       	mov	r24, r25
    15de:	80 95       	com	r24
}
    15e0:	88 1f       	adc	r24, r24
    15e2:	88 27       	eor	r24, r24
    15e4:	88 1f       	adc	r24, r24
    15e6:	08 95       	ret

000015e8 <isBottomPointValid>:

uint8_t isBottomPointValid(void)
{
	return (	(int16_t)(rollPoint - bottomPoint) >= 0	);
    15e8:	80 91 23 01 	lds	r24, 0x0123
    15ec:	90 91 24 01 	lds	r25, 0x0124
    15f0:	20 91 25 01 	lds	r18, 0x0125
    15f4:	30 91 26 01 	lds	r19, 0x0126
    15f8:	82 1b       	sub	r24, r18
    15fa:	93 0b       	sbc	r25, r19
    15fc:	89 2f       	mov	r24, r25
    15fe:	80 95       	com	r24
}
    1600:	88 1f       	adc	r24, r24
    1602:	88 27       	eor	r24, r24
    1604:	88 1f       	adc	r24, r24
    1606:	08 95       	ret

00001608 <startCycleRolling>:


uint8_t startCycleRolling(void)
{
	// Disable interrupts from timer0 
	TIMSK &= ~(1<<TOIE0);
    1608:	89 b7       	in	r24, 0x39	; 57
    160a:	8e 7f       	andi	r24, 0xFE	; 254
    160c:	89 bf       	out	0x39, r24	; 57
	
	if ( isTopPointValid() && isBottomPointValid() )
    160e:	dc df       	rcall	.-72     	; 0x15c8 <isTopPointValid>
    1610:	88 23       	and	r24, r24
    1612:	59 f0       	breq	.+22     	; 0x162a <startCycleRolling+0x22>
    1614:	e9 df       	rcall	.-46     	; 0x15e8 <isBottomPointValid>
    1616:	88 23       	and	r24, r24
    1618:	41 f0       	breq	.+16     	; 0x162a <startCycleRolling+0x22>
	{
		rollState |= ROLL_CYCLE;
    161a:	80 91 1d 01 	lds	r24, 0x011D
    161e:	84 60       	ori	r24, 0x04	; 4
    1620:	80 93 1d 01 	sts	0x011D, r24
		activeRollCycle = 1;
    1624:	81 e0       	ldi	r24, 0x01	; 1
    1626:	80 93 1c 01 	sts	0x011C, r24
	}
	
	// Enable interrupts from timer 0
	TIMSK |= (1<<TOIE0);
    162a:	89 b7       	in	r24, 0x39	; 57
    162c:	81 60       	ori	r24, 0x01	; 1
    162e:	89 bf       	out	0x39, r24	; 57
	
	return (rollState & ROLL_CYCLE);
    1630:	80 91 1d 01 	lds	r24, 0x011D
}
    1634:	84 70       	andi	r24, 0x04	; 4
    1636:	08 95       	ret

00001638 <__vector_16>:




ISR(ANA_COMP_vect)
{
    1638:	1f 92       	push	r1
    163a:	0f 92       	push	r0
    163c:	0f b6       	in	r0, 0x3f	; 63
    163e:	0f 92       	push	r0
    1640:	11 24       	eor	r1, r1
    1642:	8f 93       	push	r24
    1644:	9f 93       	push	r25
	// Once triggered, disable further comparator interrupt
	ACSR &= ~(1<<ACIE);
    1646:	43 98       	cbi	0x08, 3	; 8
	// Turn on heater TRIAC
	if (heater_cnt < ctrl_heater_sync)
    1648:	90 91 21 01 	lds	r25, 0x0121
    164c:	80 91 29 01 	lds	r24, 0x0129
    1650:	98 17       	cp	r25, r24
    1652:	20 f4       	brcc	.+8      	; 0x165c <__vector_16+0x24>
		PORTD |= (1<<PD_HEATER | 1<<PD_HEAT_INDIC);	// Direct heater indication
    1654:	82 b3       	in	r24, 0x12	; 18
    1656:	80 63       	ori	r24, 0x30	; 48
    1658:	82 bb       	out	0x12, r24	; 18
    165a:	01 c0       	rjmp	.+2      	; 0x165e <__vector_16+0x26>
	else
		PORTD &= ~(1<<PD_HEAT_INDIC);
    165c:	95 98       	cbi	0x12, 5	; 18
	// Reprogram timer0
	TCNT0 = 256 - TRIAC_IMPULSE_TIME;		// Triac gate impulse time
    165e:	86 ef       	ldi	r24, 0xF6	; 246
    1660:	82 bf       	out	0x32, r24	; 50
	TIFR |= (1<<TOV0);						// Clear interrupt flag
    1662:	88 b7       	in	r24, 0x38	; 56
    1664:	81 60       	ori	r24, 0x01	; 1
    1666:	88 bf       	out	0x38, r24	; 56
	// Modify state	
	p_state &= ~STATE_MASK;					// Start new state machine cycle
    1668:	80 91 9a 00 	lds	r24, 0x009A
    166c:	80 7f       	andi	r24, 0xF0	; 240
	p_state ^= HALF_PERIOD_FLAG;			// Toggle flag
    166e:	80 58       	subi	r24, 0x80	; 128
    1670:	80 93 9a 00 	sts	0x009A, r24
	
}
    1674:	9f 91       	pop	r25
    1676:	8f 91       	pop	r24
    1678:	0f 90       	pop	r0
    167a:	0f be       	out	0x3f, r0	; 63
    167c:	0f 90       	pop	r0
    167e:	1f 90       	pop	r1
    1680:	18 95       	reti

00001682 <__vector_9>:



ISR(TIMER0_OVF_vect)
{
    1682:	1f 92       	push	r1
    1684:	0f 92       	push	r0
    1686:	0f b6       	in	r0, 0x3f	; 63
    1688:	0f 92       	push	r0
    168a:	11 24       	eor	r1, r1
    168c:	2f 93       	push	r18
    168e:	3f 93       	push	r19
    1690:	4f 93       	push	r20
    1692:	5f 93       	push	r21
    1694:	6f 93       	push	r22
    1696:	7f 93       	push	r23
    1698:	8f 93       	push	r24
    169a:	9f 93       	push	r25
    169c:	af 93       	push	r26
    169e:	bf 93       	push	r27
    16a0:	ef 93       	push	r30
    16a2:	ff 93       	push	r31
	uint8_t temp;
	
	switch(p_state & STATE_MASK)
    16a4:	80 91 9a 00 	lds	r24, 0x009A
    16a8:	8f 70       	andi	r24, 0x0F	; 15
    16aa:	81 30       	cpi	r24, 0x01	; 1
    16ac:	49 f0       	breq	.+18     	; 0x16c0 <__vector_9+0x3e>
    16ae:	28 f0       	brcs	.+10     	; 0x16ba <__vector_9+0x38>
    16b0:	82 30       	cpi	r24, 0x02	; 2
    16b2:	49 f0       	breq	.+18     	; 0x16c6 <__vector_9+0x44>
    16b4:	83 30       	cpi	r24, 0x03	; 3
    16b6:	69 f4       	brne	.+26     	; 0x16d2 <__vector_9+0x50>
    16b8:	0b c0       	rjmp	.+22     	; 0x16d0 <__vector_9+0x4e>
	{
		// TRIAC_IMPULSE_TIME finished
		case 0x00:
			// Turn off heater TRIAC
			PORTD &= ~(1<<PD_HEATER);
    16ba:	94 98       	cbi	0x12, 4	; 18
			TCNT0 = 256 - (QUATER_PERIOD_TIME - TRIAC_IMPULSE_TIME);
    16bc:	8c eb       	ldi	r24, 0xBC	; 188
    16be:	01 c0       	rjmp	.+2      	; 0x16c2 <__vector_9+0x40>
			break;
		// QUATER_PERIOD_TIME finished	
		case 0x01:	
			TCNT0 = 256 - (SYNC_IGNORE_TIME - QUATER_PERIOD_TIME);
    16c0:	82 ec       	ldi	r24, 0xC2	; 194
    16c2:	82 bf       	out	0x32, r24	; 50
			break;	
    16c4:	06 c0       	rjmp	.+12     	; 0x16d2 <__vector_9+0x50>
		// SYNC_IGNORE_TIME finished	
		case 0x02:
			TCNT0 = 256 - SYNC_LOST_TIMEOUT;
    16c6:	80 ee       	ldi	r24, 0xE0	; 224
    16c8:	82 bf       	out	0x32, r24	; 50
			// Clear flag and enable interrupt from analog comparator
			ACSR |= (1<<ACI);
    16ca:	44 9a       	sbi	0x08, 4	; 8
			ACSR |= (1<<ACIE);
    16cc:	43 9a       	sbi	0x08, 3	; 8
			break;
    16ce:	01 c0       	rjmp	.+2      	; 0x16d2 <__vector_9+0x50>
		// SYNC_LOST_TIMEOUT finished
		case 0x03:
			// Error - sync is lost. It means that device has been disconnected from AC line.
			// Disable all power-consuming devices like LEDs and save user settings to EEPROM.
			exitPowerOff();
    16d0:	d6 d8       	rcall	.-3668   	; 0x87e <exitPowerOff>
			// Sync is not present - do nothing
			break;
	}	

	// Full period check
	if ((p_state & (HALF_PERIOD_FLAG | STATE_MASK)) == (HALF_PERIOD_FLAG | 0x01))
    16d2:	80 91 9a 00 	lds	r24, 0x009A
    16d6:	8f 78       	andi	r24, 0x8F	; 143
    16d8:	81 38       	cpi	r24, 0x81	; 129
    16da:	09 f0       	breq	.+2      	; 0x16de <__vector_9+0x5c>
    16dc:	a1 c0       	rjmp	.+322    	; 0x1820 <__vector_9+0x19e>
	{
		// Full AC line period is done. Update controls.
		
		temp = PORTD;
    16de:	82 b3       	in	r24, 0x12	; 18
		temp &= ~(1<<PD_M1 | 1<<PD_M2);
    16e0:	83 7f       	andi	r24, 0xF3	; 243
		if ( rollState & SKIP_CURRENT_MOTOR_CTRL )
    16e2:	90 91 1d 01 	lds	r25, 0x011D
    16e6:	93 ff       	sbrs	r25, 3
    16e8:	05 c0       	rjmp	.+10     	; 0x16f4 <__vector_9+0x72>
		{
			// Direction control changed. Skip current period to allow TRIACs fully close
			rollState &= ~SKIP_CURRENT_MOTOR_CTRL;
    16ea:	97 7f       	andi	r25, 0xF7	; 247
    16ec:	90 93 1d 01 	sts	0x011D, r25
			PORTD = temp; 	
    16f0:	82 bb       	out	0x12, r24	; 18
    16f2:	76 c0       	rjmp	.+236    	; 0x17e0 <__vector_9+0x15e>
		}
		else
		{
			// Apply direction control 
			if (rollState & ROLL_FWD)
    16f4:	90 ff       	sbrs	r25, 0
    16f6:	02 c0       	rjmp	.+4      	; 0x16fc <__vector_9+0x7a>
				temp |= (1<<PD_M1);
    16f8:	84 60       	ori	r24, 0x04	; 4
    16fa:	02 c0       	rjmp	.+4      	; 0x1700 <__vector_9+0x7e>
			else if (rollState & ROLL_REV)
    16fc:	91 fd       	sbrc	r25, 1
				temp |= (1<<PD_M2);
    16fe:	88 60       	ori	r24, 0x08	; 8
			PORTD = temp; 
    1700:	82 bb       	out	0x12, r24	; 18
// Function to process rolling - sets rotation direction for next period
// Call once per each AC line period
static inline void controlRolling()
{
	// Process cycle rolling
	switch(rollState & (ROLL_FWD | ROLL_REV | ROLL_CYCLE))
    1702:	40 91 1d 01 	lds	r20, 0x011D
    1706:	84 2f       	mov	r24, r20
    1708:	87 70       	andi	r24, 0x07	; 7
    170a:	85 30       	cpi	r24, 0x05	; 5
    170c:	19 f0       	breq	.+6      	; 0x1714 <__vector_9+0x92>
    170e:	86 30       	cpi	r24, 0x06	; 6
    1710:	e9 f5       	brne	.+122    	; 0x178c <__vector_9+0x10a>
    1712:	1d c0       	rjmp	.+58     	; 0x174e <__vector_9+0xcc>
//---------------------------------------------//
//---------------------------------------------//

static inline uint8_t reachedTopPoint(void)
{
	return (	(int16_t)(topPoint - rollPoint) <= 0 );
    1714:	80 91 27 01 	lds	r24, 0x0127
    1718:	90 91 28 01 	lds	r25, 0x0128
    171c:	20 91 23 01 	lds	r18, 0x0123
    1720:	30 91 24 01 	lds	r19, 0x0124
    1724:	82 1b       	sub	r24, r18
    1726:	93 0b       	sbc	r25, r19
{
	// Process cycle rolling
	switch(rollState & (ROLL_FWD | ROLL_REV | ROLL_CYCLE))
	{
		case (ROLL_FWD | ROLL_CYCLE):
			if (reachedTopPoint())
    1728:	18 16       	cp	r1, r24
    172a:	19 06       	cpc	r1, r25
    172c:	7c f1       	brlt	.+94     	; 0x178c <__vector_9+0x10a>
			{
				if (activeRollCycle >= p.rollCycleSet)	
    172e:	80 91 1c 01 	lds	r24, 0x011C
    1732:	90 91 8e 01 	lds	r25, 0x018E
    1736:	89 17       	cp	r24, r25
    1738:	28 f0       	brcs	.+10     	; 0x1744 <__vector_9+0xc2>
				{
					// DONE!
					rollState &= ~ROLL_CYCLE;
    173a:	4b 7f       	andi	r20, 0xFB	; 251
					rollState |= CYCLE_ROLL_DONE;
    173c:	40 61       	ori	r20, 0x10	; 16
    173e:	40 93 1d 01 	sts	0x011D, r20
    1742:	24 c0       	rjmp	.+72     	; 0x178c <__vector_9+0x10a>
				}
				else
				{
					activeRollCycle++;
    1744:	8f 5f       	subi	r24, 0xFF	; 255
    1746:	80 93 1c 01 	sts	0x011C, r24
					// Change dir	
					newDirReq = ROLL_REV;				
    174a:	82 e0       	ldi	r24, 0x02	; 2
    174c:	1d c0       	rjmp	.+58     	; 0x1788 <__vector_9+0x106>
	return (	(int16_t)(topPoint - rollPoint) <= 0 );
}

static inline uint8_t reachedBottomPoint(void)
{
	return (	(int16_t)(rollPoint - bottomPoint) <= 0 );
    174e:	80 91 23 01 	lds	r24, 0x0123
    1752:	90 91 24 01 	lds	r25, 0x0124
    1756:	20 91 25 01 	lds	r18, 0x0125
    175a:	30 91 26 01 	lds	r19, 0x0126
    175e:	82 1b       	sub	r24, r18
    1760:	93 0b       	sbc	r25, r19
				}
			}
			break;
		
		case (ROLL_REV | ROLL_CYCLE):	
			if (reachedBottomPoint())
    1762:	18 16       	cp	r1, r24
    1764:	19 06       	cpc	r1, r25
    1766:	94 f0       	brlt	.+36     	; 0x178c <__vector_9+0x10a>
			{
				if (activeRollCycle >= p.rollCycleSet)	
    1768:	80 91 1c 01 	lds	r24, 0x011C
    176c:	90 91 8e 01 	lds	r25, 0x018E
    1770:	89 17       	cp	r24, r25
    1772:	30 f0       	brcs	.+12     	; 0x1780 <__vector_9+0xfe>
				{
					// DONE!
					rollState &= ~ROLL_CYCLE;
    1774:	84 2f       	mov	r24, r20
    1776:	8b 7f       	andi	r24, 0xFB	; 251
					rollState |= CYCLE_ROLL_DONE;
    1778:	80 61       	ori	r24, 0x10	; 16
    177a:	80 93 1d 01 	sts	0x011D, r24
    177e:	06 c0       	rjmp	.+12     	; 0x178c <__vector_9+0x10a>
				}
				else
				{
					activeRollCycle++;
    1780:	8f 5f       	subi	r24, 0xFF	; 255
    1782:	80 93 1c 01 	sts	0x011C, r24
					// Change dir	
					newDirReq = ROLL_FWD;
    1786:	81 e0       	ldi	r24, 0x01	; 1
    1788:	80 93 22 01 	sts	0x0122, r24
		default:
			break;
	}
	
	// Process direction change
	if ((rollState ^ newDirReq) & (ROLL_FWD | ROLL_REV))
    178c:	20 91 1d 01 	lds	r18, 0x011D
    1790:	90 91 22 01 	lds	r25, 0x0122
    1794:	89 2f       	mov	r24, r25
    1796:	82 27       	eor	r24, r18
    1798:	83 70       	andi	r24, 0x03	; 3
    179a:	19 f0       	breq	.+6      	; 0x17a2 <__vector_9+0x120>
	{
		// ROLL_DIR_CHANGED is used for sound beep
		rollState |= (SKIP_CURRENT_MOTOR_CTRL | ROLL_DIR_CHANGED);
    179c:	28 62       	ori	r18, 0x28	; 40
    179e:	20 93 1d 01 	sts	0x011D, r18
	}
	
	rollState &= ~(ROLL_FWD | ROLL_REV);
    17a2:	80 91 1d 01 	lds	r24, 0x011D
    17a6:	8c 7f       	andi	r24, 0xFC	; 252
	rollState |= newDirReq;
    17a8:	89 2b       	or	r24, r25
	rollState &= dirChangedMask;
    17aa:	90 91 9b 00 	lds	r25, 0x009B
    17ae:	89 23       	and	r24, r25
    17b0:	80 93 1d 01 	sts	0x011D, r24
	dirChangedMask = 0xFF;
    17b4:	9f ef       	ldi	r25, 0xFF	; 255
    17b6:	90 93 9b 00 	sts	0x009B, r25
	return (	(int16_t)(rollPoint - bottomPoint) <= 0 );
}

static inline void updateRollPoint(void)
{	
	if (rollState & ROLL_FWD)
    17ba:	80 ff       	sbrs	r24, 0
    17bc:	06 c0       	rjmp	.+12     	; 0x17ca <__vector_9+0x148>
		rollPoint++;
    17be:	80 91 23 01 	lds	r24, 0x0123
    17c2:	90 91 24 01 	lds	r25, 0x0124
    17c6:	01 96       	adiw	r24, 0x01	; 1
    17c8:	07 c0       	rjmp	.+14     	; 0x17d8 <__vector_9+0x156>
	else if (rollState & ROLL_REV)
    17ca:	81 ff       	sbrs	r24, 1
    17cc:	09 c0       	rjmp	.+18     	; 0x17e0 <__vector_9+0x15e>
		rollPoint--;	
    17ce:	80 91 23 01 	lds	r24, 0x0123
    17d2:	90 91 24 01 	lds	r25, 0x0124
    17d6:	01 97       	sbiw	r24, 0x01	; 1
    17d8:	90 93 24 01 	sts	0x0124, r25
    17dc:	80 93 23 01 	sts	0x0123, r24
			controlRolling();
		}
			

		// Process heater control 
		if (heater_cnt == HEATER_REGULATION_PERIODS - 6)
    17e0:	80 91 21 01 	lds	r24, 0x0121
    17e4:	8c 32       	cpi	r24, 0x2C	; 44
    17e6:	81 f4       	brne	.+32     	; 0x1808 <__vector_9+0x186>
		{
			 if (heater_reg_cnt == HEATER_PID_CALL_INTERVAL - 1)
    17e8:	90 91 1e 01 	lds	r25, 0x011E
    17ec:	92 30       	cpi	r25, 0x02	; 2
    17ee:	41 f4       	brne	.+16     	; 0x1800 <__vector_9+0x17e>
			 {
				 heater_reg_cnt = 0;
    17f0:	10 92 1e 01 	sts	0x011E, r1
				 // Set flag for PID control
				 heaterState |= READY_TO_UPDATE_HEATER;
    17f4:	90 91 1f 01 	lds	r25, 0x011F
    17f8:	90 68       	ori	r25, 0x80	; 128
    17fa:	90 93 1f 01 	sts	0x011F, r25
    17fe:	0d c0       	rjmp	.+26     	; 0x181a <__vector_9+0x198>
				 // Save temperature measure at current time
			//	 samplePIDProcessValue();
			 }
			 else
			 {
				 heater_reg_cnt++;
    1800:	9f 5f       	subi	r25, 0xFF	; 255
    1802:	90 93 1e 01 	sts	0x011E, r25
    1806:	09 c0       	rjmp	.+18     	; 0x181a <__vector_9+0x198>
			 }
		}			 
		
		
		if (heater_cnt == HEATER_REGULATION_PERIODS - 1)
    1808:	81 33       	cpi	r24, 0x31	; 49
    180a:	39 f4       	brne	.+14     	; 0x181a <__vector_9+0x198>
		{
			heater_cnt = 0;
    180c:	10 92 21 01 	sts	0x0121, r1
			// Copy new output value
			ctrl_heater_sync = ctrl_heater;
    1810:	80 91 20 01 	lds	r24, 0x0120
    1814:	80 93 29 01 	sts	0x0129, r24
    1818:	03 c0       	rjmp	.+6      	; 0x1820 <__vector_9+0x19e>
		}
		else
		{
			heater_cnt++;
    181a:	8f 5f       	subi	r24, 0xFF	; 255
    181c:	80 93 21 01 	sts	0x0121, r24
			
			
	}
	

	if ((p_state & STATE_MASK)  != 0x0F)
    1820:	80 91 9a 00 	lds	r24, 0x009A
    1824:	98 2f       	mov	r25, r24
    1826:	9f 70       	andi	r25, 0x0F	; 15
    1828:	9f 30       	cpi	r25, 0x0F	; 15
    182a:	19 f0       	breq	.+6      	; 0x1832 <__vector_9+0x1b0>
		p_state++;
    182c:	8f 5f       	subi	r24, 0xFF	; 255
    182e:	80 93 9a 00 	sts	0x009A, r24

}	
    1832:	ff 91       	pop	r31
    1834:	ef 91       	pop	r30
    1836:	bf 91       	pop	r27
    1838:	af 91       	pop	r26
    183a:	9f 91       	pop	r25
    183c:	8f 91       	pop	r24
    183e:	7f 91       	pop	r23
    1840:	6f 91       	pop	r22
    1842:	5f 91       	pop	r21
    1844:	4f 91       	pop	r20
    1846:	3f 91       	pop	r19
    1848:	2f 91       	pop	r18
    184a:	0f 90       	pop	r0
    184c:	0f be       	out	0x3f, r0	; 63
    184e:	0f 90       	pop	r0
    1850:	1f 90       	pop	r1
    1852:	18 95       	reti

00001854 <processSoftTimer8b>:
 
 
 
 
 void processSoftTimer8b(SoftTimer8b_t *tmr)
 {
    1854:	fc 01       	movw	r30, r24
	 uint8_t newTimerVal;

	 if (!tmr->Enabled)
    1856:	90 81       	ld	r25, Z
    1858:	90 ff       	sbrs	r25, 0
    185a:	27 c0       	rjmp	.+78     	; 0x18aa <processSoftTimer8b+0x56>
		return;
	 
	 tmr->FA_EQ = 0;
	 tmr->FA_GE = 0;
	 tmr->FTop = 0;
    185c:	97 7e       	andi	r25, 0xE7	; 231
    185e:	9f 7d       	andi	r25, 0xDF	; 223
    1860:	90 83       	st	Z, r25
	 
	 if (tmr->Timer >= tmr->Top)
    1862:	81 81       	ldd	r24, Z+1	; 0x01
    1864:	22 81       	ldd	r18, Z+2	; 0x02
    1866:	82 17       	cp	r24, r18
    1868:	50 f0       	brcs	.+20     	; 0x187e <processSoftTimer8b+0x2a>
	 {
		 if (tmr->RunOnce)
    186a:	91 ff       	sbrs	r25, 1
    186c:	02 c0       	rjmp	.+4      	; 0x1872 <processSoftTimer8b+0x1e>
		 {
			 tmr->Enabled = 0;
    186e:	9e 7f       	andi	r25, 0xFE	; 254
    1870:	90 83       	st	Z, r25
		 }
		 tmr->FTop = 1;
    1872:	90 81       	ld	r25, Z
		 tmr->FOvfl = 1;
    1874:	90 62       	ori	r25, 0x20	; 32
    1876:	90 64       	ori	r25, 0x40	; 64
    1878:	90 83       	st	Z, r25
		 newTimerVal = 0;
    187a:	20 e0       	ldi	r18, 0x00	; 0
    187c:	02 c0       	rjmp	.+4      	; 0x1882 <processSoftTimer8b+0x2e>
	 }
	 else
	 {
		 newTimerVal = tmr->Timer + 1;
    187e:	28 2f       	mov	r18, r24
    1880:	2f 5f       	subi	r18, 0xFF	; 255
	 }
	 
	 if (tmr->Timer == tmr->CompA)
    1882:	93 81       	ldd	r25, Z+3	; 0x03
    1884:	89 13       	cpse	r24, r25
    1886:	0b c0       	rjmp	.+22     	; 0x189e <processSoftTimer8b+0x4a>
	 {
		 tmr->FA_EQ = 1;
    1888:	80 81       	ld	r24, Z
		 tmr->FA_GE = 1;
    188a:	88 60       	ori	r24, 0x08	; 8
    188c:	80 61       	ori	r24, 0x10	; 16
		 tmr->FA_TGL = !tmr->FA_TGL;
    188e:	82 fb       	bst	r24, 2
    1890:	99 27       	eor	r25, r25
    1892:	90 f9       	bld	r25, 0
    1894:	31 e0       	ldi	r19, 0x01	; 1
    1896:	93 27       	eor	r25, r19
    1898:	90 fb       	bst	r25, 0
    189a:	82 f9       	bld	r24, 2
    189c:	04 c0       	rjmp	.+8      	; 0x18a6 <processSoftTimer8b+0x52>
	 }
	 else if (tmr->Timer >= tmr->CompA)
    189e:	89 17       	cp	r24, r25
    18a0:	18 f0       	brcs	.+6      	; 0x18a8 <processSoftTimer8b+0x54>
	 {
		 tmr->FA_GE = 1;
    18a2:	80 81       	ld	r24, Z
    18a4:	80 61       	ori	r24, 0x10	; 16
    18a6:	80 83       	st	Z, r24
	 }
	 
	 tmr->Timer = newTimerVal; 
    18a8:	21 83       	std	Z+1, r18	; 0x01
    18aa:	08 95       	ret

000018ac <processSystemTimers>:



void processSystemTimers(void)
{
	sys_timers.flags = 0x00;
    18ac:	10 92 a1 00 	sts	0x00A1, r1
	
	// Process Celsius counter
	if (--sys_timers.celsius_upd_counter == 0)
    18b0:	80 91 9c 00 	lds	r24, 0x009C
    18b4:	81 50       	subi	r24, 0x01	; 1
    18b6:	19 f0       	breq	.+6      	; 0x18be <processSystemTimers+0x12>
    18b8:	80 93 9c 00 	sts	0x009C, r24
    18bc:	06 c0       	rjmp	.+12     	; 0x18ca <processSystemTimers+0x1e>
	{
		sys_timers.celsius_upd_counter = CELSIUS_UDPATE_INTERVAL;
    18be:	84 e0       	ldi	r24, 0x04	; 4
    18c0:	80 93 9c 00 	sts	0x009C, r24
		sys_timers.flags |= EXPIRED_CELSIUS;
    18c4:	81 e0       	ldi	r24, 0x01	; 1
    18c6:	80 93 a1 00 	sts	0x00A1, r24
	}
	
	// Process log counter
	if (--sys_timers.log_counter == 0)
    18ca:	80 91 a0 00 	lds	r24, 0x00A0
    18ce:	81 50       	subi	r24, 0x01	; 1
    18d0:	19 f0       	breq	.+6      	; 0x18d8 <processSystemTimers+0x2c>
    18d2:	80 93 a0 00 	sts	0x00A0, r24
    18d6:	08 c0       	rjmp	.+16     	; 0x18e8 <processSystemTimers+0x3c>
	{
		sys_timers.log_counter = LOG_INTERVAL;
    18d8:	82 e0       	ldi	r24, 0x02	; 2
    18da:	80 93 a0 00 	sts	0x00A0, r24
		sys_timers.flags |= EXPIRED_LOG;
    18de:	80 91 a1 00 	lds	r24, 0x00A1
    18e2:	80 62       	ori	r24, 0x20	; 32
    18e4:	80 93 a1 00 	sts	0x00A1, r24
	}
	
	// Process 10 seconds counter
	if (--sys_timers.counter_10sec == 0)
    18e8:	80 91 9d 00 	lds	r24, 0x009D
    18ec:	81 50       	subi	r24, 0x01	; 1
    18ee:	80 93 9d 00 	sts	0x009D, r24
    18f2:	81 11       	cpse	r24, r1
    18f4:	34 c0       	rjmp	.+104    	; 0x195e <processSystemTimers+0xb2>
	{
		sys_timers.counter_10sec = COUNTER_10SEC_INTERVAL;
    18f6:	88 ec       	ldi	r24, 0xC8	; 200
    18f8:	80 93 9d 00 	sts	0x009D, r24
		sys_timers.flags |= EXPIRED_10SEC;
    18fc:	40 91 a1 00 	lds	r20, 0x00A1
    1900:	84 2f       	mov	r24, r20
    1902:	82 60       	ori	r24, 0x02	; 2
    1904:	80 93 a1 00 	sts	0x00A1, r24
		
		// Process 1 minute counter
		if (--sys_timers.counter_1min == 0)
    1908:	80 91 9e 00 	lds	r24, 0x009E
    190c:	81 50       	subi	r24, 0x01	; 1
    190e:	80 93 9e 00 	sts	0x009E, r24
    1912:	81 11       	cpse	r24, r1
    1914:	24 c0       	rjmp	.+72     	; 0x195e <processSystemTimers+0xb2>
		{
			sys_timers.counter_1min = COUNTER_1MIN_INTERVAL;
    1916:	86 e0       	ldi	r24, 0x06	; 6
    1918:	80 93 9e 00 	sts	0x009E, r24
			sys_timers.flags |= EXPIRED_1MIN;
    191c:	84 2f       	mov	r24, r20
    191e:	86 60       	ori	r24, 0x06	; 6
    1920:	80 93 a1 00 	sts	0x00A1, r24
			
			// Process auto power off counter
			if (sys_timers.poff_counter != MAX_POWEROFF_TIMEOUT - 1)
    1924:	80 91 9f 00 	lds	r24, 0x009F
    1928:	8e 35       	cpi	r24, 0x5E	; 94
    192a:	19 f0       	breq	.+6      	; 0x1932 <processSystemTimers+0x86>
				sys_timers.poff_counter++;
    192c:	8f 5f       	subi	r24, 0xFF	; 255
    192e:	80 93 9f 00 	sts	0x009F, r24
			if (sys_timers.poff_counter == p.power_off_timeout - 1)
    1932:	60 91 9f 00 	lds	r22, 0x009F
    1936:	50 91 90 01 	lds	r21, 0x0190
    193a:	26 2f       	mov	r18, r22
    193c:	30 e0       	ldi	r19, 0x00	; 0
    193e:	85 2f       	mov	r24, r21
    1940:	90 e0       	ldi	r25, 0x00	; 0
    1942:	01 97       	sbiw	r24, 0x01	; 1
    1944:	28 17       	cp	r18, r24
    1946:	39 07       	cpc	r19, r25
    1948:	19 f4       	brne	.+6      	; 0x1950 <processSystemTimers+0xa4>
				sys_timers.flags |= AUTOPOFF_SOON;
    194a:	4e 60       	ori	r20, 0x0E	; 14
    194c:	40 93 a1 00 	sts	0x00A1, r20
			if (sys_timers.poff_counter == p.power_off_timeout)
    1950:	65 13       	cpse	r22, r21
    1952:	05 c0       	rjmp	.+10     	; 0x195e <processSystemTimers+0xb2>
				sys_timers.flags |= AUTOPOFF_EXPIRED;			
    1954:	80 91 a1 00 	lds	r24, 0x00A1
    1958:	80 61       	ori	r24, 0x10	; 16
    195a:	80 93 a1 00 	sts	0x00A1, r24
    195e:	08 95       	ret

00001960 <resetAutoPowerOffCounter>:
}


void resetAutoPowerOffCounter(void)
{
	sys_timers.poff_counter = 0;
    1960:	10 92 9f 00 	sts	0x009F, r1
    1964:	08 95       	ret

00001966 <SetBeeperFreq>:
}

// Setup beeper frequency (Hz)
void SetBeeperFreq(uint16_t freq_hz)
{
	uint16_t period_us = 1000000 / freq_hz;
    1966:	9c 01       	movw	r18, r24
    1968:	40 e0       	ldi	r20, 0x00	; 0
    196a:	50 e0       	ldi	r21, 0x00	; 0
    196c:	60 e4       	ldi	r22, 0x40	; 64
    196e:	72 e4       	ldi	r23, 0x42	; 66
    1970:	8f e0       	ldi	r24, 0x0F	; 15
    1972:	90 e0       	ldi	r25, 0x00	; 0
    1974:	d0 d0       	rcall	.+416    	; 0x1b16 <__divmodsi4>
	if (period_us & 0xFFF8)
    1976:	da 01       	movw	r26, r20
    1978:	c9 01       	movw	r24, r18
    197a:	88 7f       	andi	r24, 0xF8	; 248
    197c:	aa 27       	eor	r26, r26
    197e:	bb 27       	eor	r27, r27
    1980:	89 2b       	or	r24, r25
    1982:	51 f0       	breq	.+20     	; 0x1998 <SetBeeperFreq+0x32>
		OCR1A = (period_us>>3) - 1;
    1984:	43 e0       	ldi	r20, 0x03	; 3
    1986:	36 95       	lsr	r19
    1988:	27 95       	ror	r18
    198a:	4a 95       	dec	r20
    198c:	e1 f7       	brne	.-8      	; 0x1986 <SetBeeperFreq+0x20>
    198e:	21 50       	subi	r18, 0x01	; 1
    1990:	31 09       	sbc	r19, r1
    1992:	3b bd       	out	0x2b, r19	; 43
    1994:	2a bd       	out	0x2a, r18	; 42
    1996:	04 c0       	rjmp	.+8      	; 0x19a0 <SetBeeperFreq+0x3a>
	else
		OCR1A = 0x1;
    1998:	81 e0       	ldi	r24, 0x01	; 1
    199a:	90 e0       	ldi	r25, 0x00	; 0
    199c:	9b bd       	out	0x2b, r25	; 43
    199e:	8a bd       	out	0x2a, r24	; 42
	TCNT1 = 0;
    19a0:	1d bc       	out	0x2d, r1	; 45
    19a2:	1c bc       	out	0x2c, r1	; 44
    19a4:	08 95       	ret

000019a6 <StartBeep>:
}

// Beep for some time in ms
void StartBeep(uint16_t time_ms)
{
	if ( (p.sound_enable) || (enableOverride) )
    19a6:	20 91 8f 01 	lds	r18, 0x018F
    19aa:	21 11       	cpse	r18, r1
    19ac:	04 c0       	rjmp	.+8      	; 0x19b6 <StartBeep+0x10>
    19ae:	20 91 2a 01 	lds	r18, 0x012A
    19b2:	22 23       	and	r18, r18
    19b4:	39 f0       	breq	.+14     	; 0x19c4 <StartBeep+0x1e>
	{
		beep_cnt = time_ms;
    19b6:	90 93 2c 01 	sts	0x012C, r25
    19ba:	80 93 2b 01 	sts	0x012B, r24
// Enable / disable beeper output
inline void SetBeepOutput(uint8_t val)
{
	if (val)
		// Toggle OCR1A on compare match
		TCCR1A |= (1<<COM1A0);
    19be:	8f b5       	in	r24, 0x2f	; 47
    19c0:	80 64       	ori	r24, 0x40	; 64
    19c2:	8f bd       	out	0x2f, r24	; 47
	if ( (p.sound_enable) || (enableOverride) )
	{
		beep_cnt = time_ms;
		SetBeepOutput(1);		
	}
	enableOverride = 0;
    19c4:	10 92 2a 01 	sts	0x012A, r1
    19c8:	08 95       	ret

000019ca <OverrideSoundDisable>:
}

void OverrideSoundDisable(void)
{
	enableOverride = 1;
    19ca:	81 e0       	ldi	r24, 0x01	; 1
    19cc:	80 93 2a 01 	sts	0x012A, r24
    19d0:	08 95       	ret

000019d2 <__vector_3>:




ISR(TIMER2_COMP_vect)
{	
    19d2:	1f 92       	push	r1
    19d4:	0f 92       	push	r0
    19d6:	0f b6       	in	r0, 0x3f	; 63
    19d8:	0f 92       	push	r0
    19da:	11 24       	eor	r1, r1
    19dc:	2f 93       	push	r18
    19de:	3f 93       	push	r19
    19e0:	4f 93       	push	r20
    19e2:	5f 93       	push	r21
    19e4:	6f 93       	push	r22
    19e6:	7f 93       	push	r23
    19e8:	8f 93       	push	r24
    19ea:	9f 93       	push	r25
    19ec:	af 93       	push	r26
    19ee:	bf 93       	push	r27
    19f0:	ef 93       	push	r30
    19f2:	ff 93       	push	r31
	
	// Manage beeper
	if (beep_cnt)
    19f4:	80 91 2b 01 	lds	r24, 0x012B
    19f8:	90 91 2c 01 	lds	r25, 0x012C
    19fc:	00 97       	sbiw	r24, 0x00	; 0
    19fe:	31 f0       	breq	.+12     	; 0x1a0c <__vector_3+0x3a>
		beep_cnt--;
    1a00:	01 97       	sbiw	r24, 0x01	; 1
    1a02:	90 93 2c 01 	sts	0x012C, r25
    1a06:	80 93 2b 01 	sts	0x012B, r24
    1a0a:	03 c0       	rjmp	.+6      	; 0x1a12 <__vector_3+0x40>
	if (val)
		// Toggle OCR1A on compare match
		TCCR1A |= (1<<COM1A0);
	else
		// Disable OCR1A output
		TCCR1A &= ~(1<<COM1A0 | 1<<COM1A1);
    1a0c:	8f b5       	in	r24, 0x2f	; 47
    1a0e:	8f 73       	andi	r24, 0x3F	; 63
    1a10:	8f bd       	out	0x2f, r24	; 47
		beep_cnt--;
	else
		SetBeepOutput(0);	// done
	
	// Manage LED indicator
	processLedIndicator();
    1a12:	6b d7       	rcall	.+3798   	; 0x28ea <__data_load_end+0xc74>
	
	// Process menu update timer
	processSoftTimer8b(&menuUpdateTimer);	
    1a14:	82 ea       	ldi	r24, 0xA2	; 162
    1a16:	90 e0       	ldi	r25, 0x00	; 0
    1a18:	1d df       	rcall	.-454    	; 0x1854 <processSoftTimer8b>
	
	// Start ADC conversion 
	ADCSRA |= (1<<ADSC);
    1a1a:	36 9a       	sbi	0x06, 6	; 6
	
}
    1a1c:	ff 91       	pop	r31
    1a1e:	ef 91       	pop	r30
    1a20:	bf 91       	pop	r27
    1a22:	af 91       	pop	r26
    1a24:	9f 91       	pop	r25
    1a26:	8f 91       	pop	r24
    1a28:	7f 91       	pop	r23
    1a2a:	6f 91       	pop	r22
    1a2c:	5f 91       	pop	r21
    1a2e:	4f 91       	pop	r20
    1a30:	3f 91       	pop	r19
    1a32:	2f 91       	pop	r18
    1a34:	0f 90       	pop	r0
    1a36:	0f be       	out	0x3f, r0	; 63
    1a38:	0f 90       	pop	r0
    1a3a:	1f 90       	pop	r1
    1a3c:	18 95       	reti

00001a3e <USART_send>:



void USART_send( uint8_t data )
{
	UCSRA |= (1<<TXC);                 // Clear flag
    1a3e:	5e 9a       	sbi	0x0b, 6	; 11
	UDR = data;
    1a40:	8c b9       	out	0x0c, r24	; 12
	while ( !(UCSRA & (1<<TXC)) );  // Wait
    1a42:	5e 9b       	sbis	0x0b, 6	; 11
    1a44:	fe cf       	rjmp	.-4      	; 0x1a42 <USART_send+0x4>
}
    1a46:	08 95       	ret

00001a48 <USART_sendstr>:


void USART_sendstr(char* str)
{
    1a48:	1f 93       	push	r17
    1a4a:	cf 93       	push	r28
    1a4c:	df 93       	push	r29
    1a4e:	ec 01       	movw	r28, r24
	uint8_t i = 0;
    1a50:	10 e0       	ldi	r17, 0x00	; 0
	while (str[i])
    1a52:	02 c0       	rjmp	.+4      	; 0x1a58 <USART_sendstr+0x10>
	{
		USART_send(str[i++]);
    1a54:	1f 5f       	subi	r17, 0xFF	; 255
    1a56:	f3 df       	rcall	.-26     	; 0x1a3e <USART_send>


void USART_sendstr(char* str)
{
	uint8_t i = 0;
	while (str[i])
    1a58:	fe 01       	movw	r30, r28
    1a5a:	e1 0f       	add	r30, r17
    1a5c:	f1 1d       	adc	r31, r1
    1a5e:	80 81       	ld	r24, Z
    1a60:	81 11       	cpse	r24, r1
    1a62:	f8 cf       	rjmp	.-16     	; 0x1a54 <USART_sendstr+0xc>
	{
		USART_send(str[i++]);
	}
}
    1a64:	df 91       	pop	r29
    1a66:	cf 91       	pop	r28
    1a68:	1f 91       	pop	r17
    1a6a:	08 95       	ret

00001a6c <__udivmodqi4>:
    1a6c:	99 1b       	sub	r25, r25
    1a6e:	79 e0       	ldi	r23, 0x09	; 9
    1a70:	04 c0       	rjmp	.+8      	; 0x1a7a <__udivmodqi4_ep>

00001a72 <__udivmodqi4_loop>:
    1a72:	99 1f       	adc	r25, r25
    1a74:	96 17       	cp	r25, r22
    1a76:	08 f0       	brcs	.+2      	; 0x1a7a <__udivmodqi4_ep>
    1a78:	96 1b       	sub	r25, r22

00001a7a <__udivmodqi4_ep>:
    1a7a:	88 1f       	adc	r24, r24
    1a7c:	7a 95       	dec	r23
    1a7e:	c9 f7       	brne	.-14     	; 0x1a72 <__udivmodqi4_loop>
    1a80:	80 95       	com	r24
    1a82:	08 95       	ret

00001a84 <__udivmodhi4>:
    1a84:	aa 1b       	sub	r26, r26
    1a86:	bb 1b       	sub	r27, r27
    1a88:	51 e1       	ldi	r21, 0x11	; 17
    1a8a:	07 c0       	rjmp	.+14     	; 0x1a9a <__udivmodhi4_ep>

00001a8c <__udivmodhi4_loop>:
    1a8c:	aa 1f       	adc	r26, r26
    1a8e:	bb 1f       	adc	r27, r27
    1a90:	a6 17       	cp	r26, r22
    1a92:	b7 07       	cpc	r27, r23
    1a94:	10 f0       	brcs	.+4      	; 0x1a9a <__udivmodhi4_ep>
    1a96:	a6 1b       	sub	r26, r22
    1a98:	b7 0b       	sbc	r27, r23

00001a9a <__udivmodhi4_ep>:
    1a9a:	88 1f       	adc	r24, r24
    1a9c:	99 1f       	adc	r25, r25
    1a9e:	5a 95       	dec	r21
    1aa0:	a9 f7       	brne	.-22     	; 0x1a8c <__udivmodhi4_loop>
    1aa2:	80 95       	com	r24
    1aa4:	90 95       	com	r25
    1aa6:	bc 01       	movw	r22, r24
    1aa8:	cd 01       	movw	r24, r26
    1aaa:	08 95       	ret

00001aac <__divmodhi4>:
    1aac:	97 fb       	bst	r25, 7
    1aae:	07 2e       	mov	r0, r23
    1ab0:	16 f4       	brtc	.+4      	; 0x1ab6 <__divmodhi4+0xa>
    1ab2:	00 94       	com	r0
    1ab4:	06 d0       	rcall	.+12     	; 0x1ac2 <__divmodhi4_neg1>
    1ab6:	77 fd       	sbrc	r23, 7
    1ab8:	08 d0       	rcall	.+16     	; 0x1aca <__divmodhi4_neg2>
    1aba:	e4 df       	rcall	.-56     	; 0x1a84 <__udivmodhi4>
    1abc:	07 fc       	sbrc	r0, 7
    1abe:	05 d0       	rcall	.+10     	; 0x1aca <__divmodhi4_neg2>
    1ac0:	3e f4       	brtc	.+14     	; 0x1ad0 <__divmodhi4_exit>

00001ac2 <__divmodhi4_neg1>:
    1ac2:	90 95       	com	r25
    1ac4:	81 95       	neg	r24
    1ac6:	9f 4f       	sbci	r25, 0xFF	; 255
    1ac8:	08 95       	ret

00001aca <__divmodhi4_neg2>:
    1aca:	70 95       	com	r23
    1acc:	61 95       	neg	r22
    1ace:	7f 4f       	sbci	r23, 0xFF	; 255

00001ad0 <__divmodhi4_exit>:
    1ad0:	08 95       	ret

00001ad2 <__udivmodsi4>:
    1ad2:	a1 e2       	ldi	r26, 0x21	; 33
    1ad4:	1a 2e       	mov	r1, r26
    1ad6:	aa 1b       	sub	r26, r26
    1ad8:	bb 1b       	sub	r27, r27
    1ada:	fd 01       	movw	r30, r26
    1adc:	0d c0       	rjmp	.+26     	; 0x1af8 <__udivmodsi4_ep>

00001ade <__udivmodsi4_loop>:
    1ade:	aa 1f       	adc	r26, r26
    1ae0:	bb 1f       	adc	r27, r27
    1ae2:	ee 1f       	adc	r30, r30
    1ae4:	ff 1f       	adc	r31, r31
    1ae6:	a2 17       	cp	r26, r18
    1ae8:	b3 07       	cpc	r27, r19
    1aea:	e4 07       	cpc	r30, r20
    1aec:	f5 07       	cpc	r31, r21
    1aee:	20 f0       	brcs	.+8      	; 0x1af8 <__udivmodsi4_ep>
    1af0:	a2 1b       	sub	r26, r18
    1af2:	b3 0b       	sbc	r27, r19
    1af4:	e4 0b       	sbc	r30, r20
    1af6:	f5 0b       	sbc	r31, r21

00001af8 <__udivmodsi4_ep>:
    1af8:	66 1f       	adc	r22, r22
    1afa:	77 1f       	adc	r23, r23
    1afc:	88 1f       	adc	r24, r24
    1afe:	99 1f       	adc	r25, r25
    1b00:	1a 94       	dec	r1
    1b02:	69 f7       	brne	.-38     	; 0x1ade <__udivmodsi4_loop>
    1b04:	60 95       	com	r22
    1b06:	70 95       	com	r23
    1b08:	80 95       	com	r24
    1b0a:	90 95       	com	r25
    1b0c:	9b 01       	movw	r18, r22
    1b0e:	ac 01       	movw	r20, r24
    1b10:	bd 01       	movw	r22, r26
    1b12:	cf 01       	movw	r24, r30
    1b14:	08 95       	ret

00001b16 <__divmodsi4>:
    1b16:	05 2e       	mov	r0, r21
    1b18:	97 fb       	bst	r25, 7
    1b1a:	16 f4       	brtc	.+4      	; 0x1b20 <__divmodsi4+0xa>
    1b1c:	00 94       	com	r0
    1b1e:	06 d0       	rcall	.+12     	; 0x1b2c <__divmodsi4_neg1>
    1b20:	57 fd       	sbrc	r21, 7
    1b22:	0c d0       	rcall	.+24     	; 0x1b3c <__divmodsi4_neg2>
    1b24:	d6 df       	rcall	.-84     	; 0x1ad2 <__udivmodsi4>
    1b26:	07 fc       	sbrc	r0, 7
    1b28:	09 d0       	rcall	.+18     	; 0x1b3c <__divmodsi4_neg2>
    1b2a:	7e f4       	brtc	.+30     	; 0x1b4a <__divmodsi4_exit>

00001b2c <__divmodsi4_neg1>:
    1b2c:	90 95       	com	r25
    1b2e:	80 95       	com	r24
    1b30:	70 95       	com	r23
    1b32:	61 95       	neg	r22
    1b34:	7f 4f       	sbci	r23, 0xFF	; 255
    1b36:	8f 4f       	sbci	r24, 0xFF	; 255
    1b38:	9f 4f       	sbci	r25, 0xFF	; 255
    1b3a:	08 95       	ret

00001b3c <__divmodsi4_neg2>:
    1b3c:	50 95       	com	r21
    1b3e:	40 95       	com	r20
    1b40:	30 95       	com	r19
    1b42:	21 95       	neg	r18
    1b44:	3f 4f       	sbci	r19, 0xFF	; 255
    1b46:	4f 4f       	sbci	r20, 0xFF	; 255
    1b48:	5f 4f       	sbci	r21, 0xFF	; 255

00001b4a <__divmodsi4_exit>:
    1b4a:	08 95       	ret

00001b4c <__umulhisi3>:
    1b4c:	a2 9f       	mul	r26, r18
    1b4e:	b0 01       	movw	r22, r0
    1b50:	b3 9f       	mul	r27, r19
    1b52:	c0 01       	movw	r24, r0
    1b54:	a3 9f       	mul	r26, r19
    1b56:	01 d0       	rcall	.+2      	; 0x1b5a <__umulhisi3+0xe>
    1b58:	b2 9f       	mul	r27, r18
    1b5a:	70 0d       	add	r23, r0
    1b5c:	81 1d       	adc	r24, r1
    1b5e:	11 24       	eor	r1, r1
    1b60:	91 1d       	adc	r25, r1
    1b62:	08 95       	ret

00001b64 <__usmulhisi3>:
    1b64:	f3 df       	rcall	.-26     	; 0x1b4c <__umulhisi3>

00001b66 <__usmulhisi3_tail>:
    1b66:	b7 ff       	sbrs	r27, 7
    1b68:	08 95       	ret
    1b6a:	82 1b       	sub	r24, r18
    1b6c:	93 0b       	sbc	r25, r19
    1b6e:	08 95       	ret

00001b70 <__muluhisi3>:
    1b70:	ed df       	rcall	.-38     	; 0x1b4c <__umulhisi3>
    1b72:	a5 9f       	mul	r26, r21
    1b74:	90 0d       	add	r25, r0
    1b76:	b4 9f       	mul	r27, r20
    1b78:	90 0d       	add	r25, r0
    1b7a:	a4 9f       	mul	r26, r20
    1b7c:	80 0d       	add	r24, r0
    1b7e:	91 1d       	adc	r25, r1
    1b80:	11 24       	eor	r1, r1
    1b82:	08 95       	ret

00001b84 <__eerd_block_m8>:
    1b84:	dc 01       	movw	r26, r24
    1b86:	cb 01       	movw	r24, r22

00001b88 <__eerd_blraw_m8>:
    1b88:	fc 01       	movw	r30, r24
    1b8a:	e1 99       	sbic	0x1c, 1	; 28
    1b8c:	fe cf       	rjmp	.-4      	; 0x1b8a <__eerd_blraw_m8+0x2>
    1b8e:	06 c0       	rjmp	.+12     	; 0x1b9c <__eerd_blraw_m8+0x14>
    1b90:	ff bb       	out	0x1f, r31	; 31
    1b92:	ee bb       	out	0x1e, r30	; 30
    1b94:	e0 9a       	sbi	0x1c, 0	; 28
    1b96:	31 96       	adiw	r30, 0x01	; 1
    1b98:	0d b2       	in	r0, 0x1d	; 29
    1b9a:	0d 92       	st	X+, r0
    1b9c:	41 50       	subi	r20, 0x01	; 1
    1b9e:	50 40       	sbci	r21, 0x00	; 0
    1ba0:	b8 f7       	brcc	.-18     	; 0x1b90 <__eerd_blraw_m8+0x8>
    1ba2:	08 95       	ret

00001ba4 <__eeupd_block_m8>:
    1ba4:	dc 01       	movw	r26, r24
    1ba6:	a4 0f       	add	r26, r20
    1ba8:	b5 1f       	adc	r27, r21
    1baa:	41 50       	subi	r20, 0x01	; 1
    1bac:	50 40       	sbci	r21, 0x00	; 0
    1bae:	40 f0       	brcs	.+16     	; 0x1bc0 <__eeupd_block_m8+0x1c>
    1bb0:	cb 01       	movw	r24, r22
    1bb2:	84 0f       	add	r24, r20
    1bb4:	95 1f       	adc	r25, r21
    1bb6:	2e 91       	ld	r18, -X
    1bb8:	05 d0       	rcall	.+10     	; 0x1bc4 <__eeupd_r18_m8>
    1bba:	41 50       	subi	r20, 0x01	; 1
    1bbc:	50 40       	sbci	r21, 0x00	; 0
    1bbe:	d8 f7       	brcc	.-10     	; 0x1bb6 <__eeupd_block_m8+0x12>
    1bc0:	08 95       	ret

00001bc2 <__eeupd_byte_m8>:
    1bc2:	26 2f       	mov	r18, r22

00001bc4 <__eeupd_r18_m8>:
    1bc4:	e1 99       	sbic	0x1c, 1	; 28
    1bc6:	fe cf       	rjmp	.-4      	; 0x1bc4 <__eeupd_r18_m8>
    1bc8:	9f bb       	out	0x1f, r25	; 31
    1bca:	8e bb       	out	0x1e, r24	; 30
    1bcc:	e0 9a       	sbi	0x1c, 0	; 28
    1bce:	01 97       	sbiw	r24, 0x01	; 1
    1bd0:	0d b2       	in	r0, 0x1d	; 29
    1bd2:	02 16       	cp	r0, r18
    1bd4:	31 f0       	breq	.+12     	; 0x1be2 <__eeupd_r18_m8+0x1e>
    1bd6:	2d bb       	out	0x1d, r18	; 29
    1bd8:	0f b6       	in	r0, 0x3f	; 63
    1bda:	f8 94       	cli
    1bdc:	e2 9a       	sbi	0x1c, 2	; 28
    1bde:	e1 9a       	sbi	0x1c, 1	; 28
    1be0:	0f be       	out	0x3f, r0	; 63
    1be2:	08 95       	ret

00001be4 <_exit>:
    1be4:	f8 94       	cli

00001be6 <__stop_program>:
    1be6:	ff cf       	rjmp	.-2      	; 0x1be6 <__stop_program>
