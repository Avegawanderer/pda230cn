
pid1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001c4e  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000088  00800060  00001c4e  00001d02  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000102  008000e8  008000e8  00001d8a  2**0
                  ALLOC
  3 .eeprom       00000070  00810000  00810000  00001d8a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         00000ad4  00000000  00000000  00001dfc  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      00000269  00000000  00000000  000028d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      0000002f  00000000  00000000  00002b39  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000448  00000000  00000000  00002b68  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   000046ca  00000000  00000000  00002fb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00001671  00000000  00000000  0000767a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00001e0c  00000000  00000000  00008ceb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000990  00000000  00000000  0000aaf8  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000012ba  00000000  00000000  0000b488  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00001c40  00000000  00000000  0000c742  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000368  00000000  00000000  0000e382  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	ce c0       	rjmp	.+412    	; 0x19e <__ctors_end>
       2:	e8 c0       	rjmp	.+464    	; 0x1d4 <__bad_interrupt>
       4:	e7 c0       	rjmp	.+462    	; 0x1d4 <__bad_interrupt>
       6:	c0 cc       	rjmp	.-1664   	; 0xfffff988 <__eeprom_end+0xff7ef918>
       8:	e5 c0       	rjmp	.+458    	; 0x1d4 <__bad_interrupt>
       a:	e4 c0       	rjmp	.+456    	; 0x1d4 <__bad_interrupt>
       c:	e3 c0       	rjmp	.+454    	; 0x1d4 <__bad_interrupt>
       e:	e2 c0       	rjmp	.+452    	; 0x1d4 <__bad_interrupt>
      10:	e1 c0       	rjmp	.+450    	; 0x1d4 <__bad_interrupt>
      12:	71 cb       	rjmp	.-2334   	; 0xfffff6f6 <__eeprom_end+0xff7ef686>
      14:	df c0       	rjmp	.+446    	; 0x1d4 <__bad_interrupt>
      16:	de c0       	rjmp	.+444    	; 0x1d4 <__bad_interrupt>
      18:	dd c0       	rjmp	.+442    	; 0x1d4 <__bad_interrupt>
      1a:	dc c0       	rjmp	.+440    	; 0x1d4 <__bad_interrupt>
      1c:	b2 c1       	rjmp	.+868    	; 0x382 <__vector_14>
      1e:	da c0       	rjmp	.+436    	; 0x1d4 <__bad_interrupt>
      20:	2d cb       	rjmp	.-2470   	; 0xfffff67c <__eeprom_end+0xff7ef60c>
      22:	d8 c0       	rjmp	.+432    	; 0x1d4 <__bad_interrupt>
      24:	d7 c0       	rjmp	.+430    	; 0x1d4 <__bad_interrupt>

00000026 <pmCalibrationDefaults>:
      26:	16 78 c3 00 91 01                                   .x....

0000002c <pmGlobalDefaults>:
      2c:	32 0a 01 1e                                         2...

00000030 <led_encode_table>:
      30:	30 3f 4f 3f 31 06 32 5b 33 4f 34 66 53 6d 35 6d     0?O?1.2[3O4fSm5m
      40:	36 7d 37 07 38 7f 39 6f 2e 80 2c 80 2d 40 5f 08     6}7.8.9o..,.-@_.
      50:	20 00 b0 63 41 77 43 39 46 71 4e 54 44 5e 50 73      ..cAwC9FqNTD^Ps
      60:	45 79 55 3e 47 3d 52 50                             EyU>G=RP

00000068 <ms_calibDo>:
      68:	20 20 20 00                                            .

0000006c <ms_autoPoffDo>:
      6c:	4f 46 46 20 20 20 00                                OFF   .

00000073 <ms_soundEnDo>:
      73:	53 4e 44 20 20 20 00                                SND   .

0000007a <ms_rollDo>:
      7a:	20 20 20 20 20 20 00                                      .

00000081 <ms_realTempDo>:
      81:	20 20 20 20 b0 43 00                                    .C.

00000088 <menuFunctionSet>:
      88:	01 5d 07 5f 07 12 06 03 0a 06 24 07 87 05 02 21     .]._......$....!
      98:	07 cd 06 03 06 05 fd 05 9a 06 00 00 0b 95 05 9a     ................
      a8:	06 a3 05 04 f7 05 2d 06 00 00 0c 95 05 2d 06 b1     ......-......-..
      b8:	05 06 eb 05 68 06 00 00 09 95 05 68 06 c2 05 07     ....h......h....
      c8:	df 05 68 06 00 00 0a 95 05 68 06 c2 05 08 14 06     ..h......h......
      d8:	cd 05 00 00 0d 14 06 cd 05 00 00 0e d1 05 c9 05     ................
      e8:	bf 05                                               ..

000000ea <menuJumpSet>:
      ea:	01 c0 00 03 8a 01 00 01 02 40 01 00 02 05 0a 02     .........@......
      fa:	00 01 01 80 02 00 02 05 0a 03 00 81 01 40 03 00     .............@..
     10a:	02 01 60 05 00 82 01 00 05 80 00 04 4a 05 40 00     ..`.........J.@.
     11a:	07 8a 05 00 01 0b 0a 0b 00 81 05 0a 0b 00 02 05     ................
     12a:	2a 04 00 82 01 00 04 80 00 06 4a 04 40 00 05 8a     *.........J.@...
     13a:	04 00 01 0c 0a 0c 00 81 04 0a 0c 00 02 04 2a 06     ..............*.
     14a:	00 82 01 00 06 80 00 07 4a 06 40 00 04 8a 06 00     ........J.@.....
     15a:	01 09 00 07 00 82 01 00 07 80 00 05 4a 07 40 00     ............J.@.
     16a:	06 8a 07 00 01 0a 00 09 00 02 06 0a 09 00 01 08     ................
     17a:	05 08 00 83 01 00 0a 00 02 07 0a 0a 00 01 0d 05     ................
     18a:	0d 00 83 01 00 01 00 40 0e 00 02 00 40 0e 00 0e     .......@....@...
     19a:	d5 01 01 00                                         ....

0000019e <__ctors_end>:
     19e:	11 24       	eor	r1, r1
     1a0:	1f be       	out	0x3f, r1	; 63
     1a2:	cf e5       	ldi	r28, 0x5F	; 95
     1a4:	d4 e0       	ldi	r29, 0x04	; 4
     1a6:	de bf       	out	0x3e, r29	; 62
     1a8:	cd bf       	out	0x3d, r28	; 61

000001aa <__do_copy_data>:
     1aa:	10 e0       	ldi	r17, 0x00	; 0
     1ac:	a0 e6       	ldi	r26, 0x60	; 96
     1ae:	b0 e0       	ldi	r27, 0x00	; 0
     1b0:	ee e4       	ldi	r30, 0x4E	; 78
     1b2:	fc e1       	ldi	r31, 0x1C	; 28
     1b4:	02 c0       	rjmp	.+4      	; 0x1ba <__do_copy_data+0x10>
     1b6:	05 90       	lpm	r0, Z+
     1b8:	0d 92       	st	X+, r0
     1ba:	a8 3e       	cpi	r26, 0xE8	; 232
     1bc:	b1 07       	cpc	r27, r17
     1be:	d9 f7       	brne	.-10     	; 0x1b6 <__do_copy_data+0xc>

000001c0 <__do_clear_bss>:
     1c0:	21 e0       	ldi	r18, 0x01	; 1
     1c2:	a8 ee       	ldi	r26, 0xE8	; 232
     1c4:	b0 e0       	ldi	r27, 0x00	; 0
     1c6:	01 c0       	rjmp	.+2      	; 0x1ca <.do_clear_bss_start>

000001c8 <.do_clear_bss_loop>:
     1c8:	1d 92       	st	X+, r1

000001ca <.do_clear_bss_start>:
     1ca:	aa 3e       	cpi	r26, 0xEA	; 234
     1cc:	b2 07       	cpc	r27, r18
     1ce:	e1 f7       	brne	.-8      	; 0x1c8 <.do_clear_bss_loop>
     1d0:	ad d7       	rcall	.+3930   	; 0x112c <main>
     1d2:	3b cd       	rjmp	.-1418   	; 0xfffffc4a <__eeprom_end+0xff7efbda>

000001d4 <__bad_interrupt>:
     1d4:	15 cf       	rjmp	.-470    	; 0x0 <__vectors>

000001d6 <conv_ADC_to_Celsius>:
//---------------------------------------------//
//---------------------------------------------//


int16_t conv_ADC_to_Celsius(uint16_t adc_value)
{	
     1d6:	0f 93       	push	r16
     1d8:	1f 93       	push	r17
	return (int16_t)(((int32_t)adc_value * k_norm + offset_norm) / (COEFF_SCALE));
     1da:	20 91 e8 00 	lds	r18, 0x00E8
     1de:	30 91 e9 00 	lds	r19, 0x00E9
     1e2:	40 91 ea 00 	lds	r20, 0x00EA
     1e6:	50 91 eb 00 	lds	r21, 0x00EB
     1ea:	dc 01       	movw	r26, r24
     1ec:	c1 dc       	rcall	.-1662   	; 0xfffffb70 <__eeprom_end+0xff7efb00>
     1ee:	00 91 ec 00 	lds	r16, 0x00EC
     1f2:	10 91 ed 00 	lds	r17, 0x00ED
     1f6:	20 91 ee 00 	lds	r18, 0x00EE
     1fa:	30 91 ef 00 	lds	r19, 0x00EF
     1fe:	60 0f       	add	r22, r16
     200:	71 1f       	adc	r23, r17
     202:	82 1f       	adc	r24, r18
     204:	93 1f       	adc	r25, r19
     206:	28 ee       	ldi	r18, 0xE8	; 232
     208:	33 e0       	ldi	r19, 0x03	; 3
     20a:	40 e0       	ldi	r20, 0x00	; 0
     20c:	50 e0       	ldi	r21, 0x00	; 0
     20e:	7d dc       	rcall	.-1798   	; 0xfffffb0a <__eeprom_end+0xff7efa9a>
}
     210:	c9 01       	movw	r24, r18
     212:	1f 91       	pop	r17
     214:	0f 91       	pop	r16
     216:	08 95       	ret

00000218 <conv_Celsius_to_ADC>:

uint16_t conv_Celsius_to_ADC(int16_t degree_value)
{
     218:	0f 93       	push	r16
     21a:	1f 93       	push	r17
	degree_value += 1;
     21c:	dc 01       	movw	r26, r24
     21e:	11 96       	adiw	r26, 0x01	; 1
	return (uint16_t)(((int32_t)degree_value * COEFF_SCALE - offset_norm) / k_norm);
     220:	28 ee       	ldi	r18, 0xE8	; 232
     222:	33 e0       	ldi	r19, 0x03	; 3
     224:	9f dc       	rcall	.-1730   	; 0xfffffb64 <__eeprom_end+0xff7efaf4>
     226:	00 91 ec 00 	lds	r16, 0x00EC
     22a:	10 91 ed 00 	lds	r17, 0x00ED
     22e:	20 91 ee 00 	lds	r18, 0x00EE
     232:	30 91 ef 00 	lds	r19, 0x00EF
     236:	60 1b       	sub	r22, r16
     238:	71 0b       	sbc	r23, r17
     23a:	82 0b       	sbc	r24, r18
     23c:	93 0b       	sbc	r25, r19
     23e:	20 91 e8 00 	lds	r18, 0x00E8
     242:	30 91 e9 00 	lds	r19, 0x00E9
     246:	40 91 ea 00 	lds	r20, 0x00EA
     24a:	50 91 eb 00 	lds	r21, 0x00EB
     24e:	5d dc       	rcall	.-1862   	; 0xfffffb0a <__eeprom_end+0xff7efa9a>
}
     250:	c9 01       	movw	r24, r18
     252:	1f 91       	pop	r17
     254:	0f 91       	pop	r16
     256:	08 95       	ret

00000258 <calculateCoeffs>:

void calculateCoeffs(void)
{
     258:	8f 92       	push	r8
     25a:	9f 92       	push	r9
     25c:	af 92       	push	r10
     25e:	bf 92       	push	r11
     260:	cf 92       	push	r12
     262:	df 92       	push	r13
     264:	ef 92       	push	r14
     266:	ff 92       	push	r15
     268:	cf 93       	push	r28
     26a:	df 93       	push	r29
	k_norm = ((int32_t)(cp.cpoint2 - cp.cpoint1) * COEFF_SCALE) / ((int32_t)(cp.cpoint2_adc - cp.cpoint1_adc));
     26c:	f0 90 b3 01 	lds	r15, 0x01B3
     270:	a0 91 b4 01 	lds	r26, 0x01B4
     274:	b0 e0       	ldi	r27, 0x00	; 0
     276:	af 19       	sub	r26, r15
     278:	b1 09       	sbc	r27, r1
     27a:	c0 91 b5 01 	lds	r28, 0x01B5
     27e:	d0 91 b6 01 	lds	r29, 0x01B6
     282:	28 ee       	ldi	r18, 0xE8	; 232
     284:	33 e0       	ldi	r19, 0x03	; 3
     286:	6e dc       	rcall	.-1828   	; 0xfffffb64 <__eeprom_end+0xff7efaf4>
     288:	20 91 b7 01 	lds	r18, 0x01B7
     28c:	30 91 b8 01 	lds	r19, 0x01B8
     290:	2c 1b       	sub	r18, r28
     292:	3d 0b       	sbc	r19, r29
     294:	40 e0       	ldi	r20, 0x00	; 0
     296:	50 e0       	ldi	r21, 0x00	; 0
     298:	38 dc       	rcall	.-1936   	; 0xfffffb0a <__eeprom_end+0xff7efa9a>
     29a:	49 01       	movw	r8, r18
     29c:	5a 01       	movw	r10, r20
     29e:	20 93 e8 00 	sts	0x00E8, r18
     2a2:	30 93 e9 00 	sts	0x00E9, r19
     2a6:	40 93 ea 00 	sts	0x00EA, r20
     2aa:	50 93 eb 00 	sts	0x00EB, r21
	offset_norm = (int32_t)cp.cpoint1 * COEFF_SCALE - (int32_t)cp.cpoint1_adc * k_norm;
     2ae:	2f 2d       	mov	r18, r15
     2b0:	30 e0       	ldi	r19, 0x00	; 0
     2b2:	a8 ee       	ldi	r26, 0xE8	; 232
     2b4:	b3 e0       	ldi	r27, 0x03	; 3
     2b6:	4a dc       	rcall	.-1900   	; 0xfffffb4c <__eeprom_end+0xff7efadc>
     2b8:	6b 01       	movw	r12, r22
     2ba:	7c 01       	movw	r14, r24
     2bc:	de 01       	movw	r26, r28
     2be:	a5 01       	movw	r20, r10
     2c0:	94 01       	movw	r18, r8
     2c2:	56 dc       	rcall	.-1876   	; 0xfffffb70 <__eeprom_end+0xff7efb00>
     2c4:	c6 1a       	sub	r12, r22
     2c6:	d7 0a       	sbc	r13, r23
     2c8:	e8 0a       	sbc	r14, r24
     2ca:	f9 0a       	sbc	r15, r25
     2cc:	c0 92 ec 00 	sts	0x00EC, r12
     2d0:	d0 92 ed 00 	sts	0x00ED, r13
     2d4:	e0 92 ee 00 	sts	0x00EE, r14
     2d8:	f0 92 ef 00 	sts	0x00EF, r15
}
     2dc:	df 91       	pop	r29
     2de:	cf 91       	pop	r28
     2e0:	ff 90       	pop	r15
     2e2:	ef 90       	pop	r14
     2e4:	df 90       	pop	r13
     2e6:	cf 90       	pop	r12
     2e8:	bf 90       	pop	r11
     2ea:	af 90       	pop	r10
     2ec:	9f 90       	pop	r9
     2ee:	8f 90       	pop	r8
     2f0:	08 95       	ret

000002f2 <update_normalized_adc>:
{
	uint8_t i;
	uint16_t adc_raw_summ = 0;
	
	// Disable interrupts from ADC - to save data integrity
	ADCSRA = (1<<ADEN | 1<<ADPS2 | 1<<ADPS1 | 1<<ADPS0);
     2f2:	87 e8       	ldi	r24, 0x87	; 135
     2f4:	86 b9       	out	0x06, r24	; 6
     2f6:	e0 ef       	ldi	r30, 0xF0	; 240
     2f8:	f0 e0       	ldi	r31, 0x00	; 0
// 	simple ADCSRA write with ADIE bit set or cleared is used instead.

void update_normalized_adc()
{
	uint8_t i;
	uint16_t adc_raw_summ = 0;
     2fa:	80 e0       	ldi	r24, 0x00	; 0
     2fc:	90 e0       	ldi	r25, 0x00	; 0
	// Disable interrupts from ADC - to save data integrity
	ADCSRA = (1<<ADEN | 1<<ADPS2 | 1<<ADPS1 | 1<<ADPS0);
	
	// Get normalized mean window summ
	for (i=0;i<ADC_BUFFER_LENGTH;i++)
		adc_raw_summ += raw_adc_buffer[i];
     2fe:	21 91       	ld	r18, Z+
     300:	31 91       	ld	r19, Z+
     302:	82 0f       	add	r24, r18
     304:	93 1f       	adc	r25, r19
	
	// Disable interrupts from ADC - to save data integrity
	ADCSRA = (1<<ADEN | 1<<ADPS2 | 1<<ADPS1 | 1<<ADPS0);
	
	// Get normalized mean window summ
	for (i=0;i<ADC_BUFFER_LENGTH;i++)
     306:	21 e0       	ldi	r18, 0x01	; 1
     308:	e0 33       	cpi	r30, 0x30	; 48
     30a:	f2 07       	cpc	r31, r18
     30c:	c1 f7       	brne	.-16     	; 0x2fe <update_normalized_adc+0xc>
		adc_raw_summ += raw_adc_buffer[i];
	
	// Enable interrupts from ADC
	ADCSRA = (1<<ADEN | 1<<ADIE | 1<<ADPS2 | 1<<ADPS1 | 1<<ADPS0);
     30e:	2f e8       	ldi	r18, 0x8F	; 143
     310:	26 b9       	out	0x06, r18	; 6
	
	adc_normalized = adc_raw_summ >> 5;		// ADC_BUFFER_LENGTH = 32 !
     312:	9c 01       	movw	r18, r24
     314:	45 e0       	ldi	r20, 0x05	; 5
     316:	36 95       	lsr	r19
     318:	27 95       	ror	r18
     31a:	4a 95       	dec	r20
     31c:	e1 f7       	brne	.-8      	; 0x316 <update_normalized_adc+0x24>
     31e:	30 93 af 01 	sts	0x01AF, r19
     322:	20 93 ae 01 	sts	0x01AE, r18
	adc_oversampled = adc_raw_summ >> 3;	// adc_oversampled is 4 times greater than adc_normalized
     326:	53 e0       	ldi	r21, 0x03	; 3
     328:	96 95       	lsr	r25
     32a:	87 95       	ror	r24
     32c:	5a 95       	dec	r21
     32e:	e1 f7       	brne	.-8      	; 0x328 <update_normalized_adc+0x36>
     330:	90 93 ad 01 	sts	0x01AD, r25
     334:	80 93 ac 01 	sts	0x01AC, r24
	// Filter
	adc_filtered = fir_i16_i8(adc_oversampled, filter_buffer, &fir_filter_rect);	
     338:	40 e6       	ldi	r20, 0x60	; 96
     33a:	50 e0       	ldi	r21, 0x00	; 0
     33c:	60 e3       	ldi	r22, 0x30	; 48
     33e:	71 e0       	ldi	r23, 0x01	; 1
     340:	3c d2       	rcall	.+1144   	; 0x7ba <fir_i16_i8>
     342:	90 93 ab 01 	sts	0x01AB, r25
     346:	80 93 aa 01 	sts	0x01AA, r24
	// Check sensor
	adc_status = 0;
     34a:	10 92 b0 01 	sts	0x01B0, r1
	if (adc_normalized < 50)
     34e:	80 91 ae 01 	lds	r24, 0x01AE
     352:	90 91 af 01 	lds	r25, 0x01AF
     356:	82 33       	cpi	r24, 0x32	; 50
     358:	91 05       	cpc	r25, r1
     35a:	10 f4       	brcc	.+4      	; 0x360 <update_normalized_adc+0x6e>
		adc_status |= SENSOR_ERROR_NO_PRESENT;
     35c:	81 e0       	ldi	r24, 0x01	; 1
     35e:	04 c0       	rjmp	.+8      	; 0x368 <update_normalized_adc+0x76>
	else if (adc_normalized > 1000)
     360:	89 3e       	cpi	r24, 0xE9	; 233
     362:	93 40       	sbci	r25, 0x03	; 3
     364:	18 f0       	brcs	.+6      	; 0x36c <update_normalized_adc+0x7a>
		adc_status |= SENSOR_ERROR_SHORTED;
     366:	82 e0       	ldi	r24, 0x02	; 2
     368:	80 93 b0 01 	sts	0x01B0, r24
     36c:	08 95       	ret

0000036e <update_Celsius>:
}

void update_Celsius(void)
{
	// Convert to Celsius degree
	adc_celsius = conv_ADC_to_Celsius(adc_normalized);
     36e:	80 91 ae 01 	lds	r24, 0x01AE
     372:	90 91 af 01 	lds	r25, 0x01AF
     376:	2f df       	rcall	.-418    	; 0x1d6 <conv_ADC_to_Celsius>
     378:	90 93 b2 01 	sts	0x01B2, r25
     37c:	80 93 b1 01 	sts	0x01B1, r24
     380:	08 95       	ret

00000382 <__vector_14>:



// ADC conversion is started by system timer (Timer2 ISR) every 1 ms
ISR(ADC_vect)
{
     382:	1f 92       	push	r1
     384:	0f 92       	push	r0
     386:	0f b6       	in	r0, 0x3f	; 63
     388:	0f 92       	push	r0
     38a:	11 24       	eor	r1, r1
     38c:	2f 93       	push	r18
     38e:	3f 93       	push	r19
     390:	4f 93       	push	r20
     392:	8f 93       	push	r24
     394:	9f 93       	push	r25
     396:	ef 93       	push	r30
     398:	ff 93       	push	r31
	static uint8_t adc_buffer_pointer = ADC_BUFFER_LENGTH;
	// Get new sample
	uint16_t new_sample = 1024 - ADC;	
     39a:	24 b1       	in	r18, 0x04	; 4
     39c:	35 b1       	in	r19, 0x05	; 5
	// Add new sample to the buffer
	raw_adc_buffer[--adc_buffer_pointer] = new_sample;
     39e:	40 91 77 00 	lds	r20, 0x0077
     3a2:	41 50       	subi	r20, 0x01	; 1
     3a4:	40 93 77 00 	sts	0x0077, r20
     3a8:	e4 2f       	mov	r30, r20
     3aa:	f0 e0       	ldi	r31, 0x00	; 0
     3ac:	ee 0f       	add	r30, r30
     3ae:	ff 1f       	adc	r31, r31
     3b0:	e0 51       	subi	r30, 0x10	; 16
     3b2:	ff 4f       	sbci	r31, 0xFF	; 255
// ADC conversion is started by system timer (Timer2 ISR) every 1 ms
ISR(ADC_vect)
{
	static uint8_t adc_buffer_pointer = ADC_BUFFER_LENGTH;
	// Get new sample
	uint16_t new_sample = 1024 - ADC;	
     3b4:	80 e0       	ldi	r24, 0x00	; 0
     3b6:	94 e0       	ldi	r25, 0x04	; 4
     3b8:	82 1b       	sub	r24, r18
     3ba:	93 0b       	sbc	r25, r19
	// Add new sample to the buffer
	raw_adc_buffer[--adc_buffer_pointer] = new_sample;
     3bc:	91 83       	std	Z+1, r25	; 0x01
     3be:	80 83       	st	Z, r24
	if (adc_buffer_pointer == 0)
     3c0:	41 11       	cpse	r20, r1
     3c2:	03 c0       	rjmp	.+6      	; 0x3ca <__vector_14+0x48>
		adc_buffer_pointer = ADC_BUFFER_LENGTH;
     3c4:	80 e2       	ldi	r24, 0x20	; 32
     3c6:	80 93 77 00 	sts	0x0077, r24
}	
     3ca:	ff 91       	pop	r31
     3cc:	ef 91       	pop	r30
     3ce:	9f 91       	pop	r25
     3d0:	8f 91       	pop	r24
     3d2:	4f 91       	pop	r20
     3d4:	3f 91       	pop	r19
     3d6:	2f 91       	pop	r18
     3d8:	0f 90       	pop	r0
     3da:	0f be       	out	0x3f, r0	; 63
     3dc:	0f 90       	pop	r0
     3de:	1f 90       	pop	r1
     3e0:	18 95       	reti

000003e2 <process_buttons>:
	uint8_t long_press_mask;
	uint8_t long_press_event_mask;
	
	uint16_t composed_state;
	
	raw_delayed = raw_current;
     3e2:	50 91 5e 01 	lds	r21, 0x015E
	raw_delayed_inv = raw_current_inv;
     3e6:	40 91 78 00 	lds	r20, 0x0078
	raw_current = raw_button_state;
     3ea:	90 91 df 01 	lds	r25, 0x01DF
     3ee:	90 93 5e 01 	sts	0x015E, r25
	raw_current_inv = ~raw_current;
     3f2:	69 2f       	mov	r22, r25
     3f4:	60 95       	com	r22
     3f6:	60 93 78 00 	sts	0x0078, r22
	
	// Must be before press_timer update
	long_press_mask = (press_timer >= LONG_PRESS_DELAY) ? 0xFF : 0x00;
     3fa:	80 91 5f 01 	lds	r24, 0x015F
     3fe:	8c 30       	cpi	r24, 0x0C	; 12
     400:	10 f0       	brcs	.+4      	; 0x406 <process_buttons+0x24>
     402:	2f ef       	ldi	r18, 0xFF	; 255
     404:	01 c0       	rjmp	.+2      	; 0x408 <process_buttons+0x26>
     406:	20 e0       	ldi	r18, 0x00	; 0
	
	if (raw_delayed != raw_current)
     408:	59 17       	cp	r21, r25
     40a:	19 f0       	breq	.+6      	; 0x412 <process_buttons+0x30>
	{
		press_timer = 0;
     40c:	10 92 5f 01 	sts	0x015F, r1
     410:	05 c0       	rjmp	.+10     	; 0x41c <process_buttons+0x3a>
	}
	else if (press_timer <= LONG_PRESS_DELAY)
     412:	8d 30       	cpi	r24, 0x0D	; 13
     414:	18 f4       	brcc	.+6      	; 0x41c <process_buttons+0x3a>
	{
		press_timer++;
     416:	8f 5f       	subi	r24, 0xFF	; 255
     418:	80 93 5f 01 	sts	0x015F, r24
	}
	
	// Must after press_timer update
	long_press_event_mask = (press_timer == LONG_PRESS_DELAY) ? 0xFF : 0x00;
     41c:	70 91 5f 01 	lds	r23, 0x015F
     420:	7c 30       	cpi	r23, 0x0C	; 12
     422:	11 f4       	brne	.+4      	; 0x428 <process_buttons+0x46>
     424:	3f ef       	ldi	r19, 0xFF	; 255
     426:	01 c0       	rjmp	.+2      	; 0x42a <process_buttons+0x48>
     428:	30 e0       	ldi	r19, 0x00	; 0
			
	button_action_down = raw_current & raw_delayed_inv;
     42a:	89 2f       	mov	r24, r25
     42c:	84 23       	and	r24, r20
     42e:	80 93 5b 01 	sts	0x015B, r24
			
	if (press_timer > REPEAT_DELAY)
     432:	77 30       	cpi	r23, 0x07	; 7
     434:	08 f0       	brcs	.+2      	; 0x438 <process_buttons+0x56>
		raw_delayed_inv |= 0xFF;
     436:	4f ef       	ldi	r20, 0xFF	; 255
	
	button_action_rep = raw_current & raw_delayed_inv;
     438:	49 23       	and	r20, r25
     43a:	40 93 5a 01 	sts	0x015A, r20
	
	button_action_up_short = raw_current_inv & raw_delayed & ~long_press_mask;
     43e:	20 95       	com	r18
     440:	56 23       	and	r21, r22
     442:	25 23       	and	r18, r21
     444:	20 93 59 01 	sts	0x0159, r18
	//button_action_up_long  = raw_current_inv & raw_delayed & long_press_mask;
	button_action_long  = raw_current & long_press_event_mask;
     448:	39 23       	and	r19, r25
     44a:	30 93 58 01 	sts	0x0158, r19
	
	// Compose button state
	composed_state = (button_action_down & (BD_MENU | BD_UP | BD_DOWN | BD_ROTFWD | BD_ROTREV | BD_HEATCTRL | BD_CYCLE));
     44e:	8d 7f       	andi	r24, 0xFD	; 253
     450:	90 e0       	ldi	r25, 0x00	; 0
	if (button_action_up_short & BD_MENU)
     452:	25 fd       	sbrc	r18, 5
		composed_state |= BS_MENU;
     454:	91 60       	ori	r25, 0x01	; 1
	//if (button_action_up_long & BD_MENU)
	if (button_action_long & BD_MENU)
     456:	35 fd       	sbrc	r19, 5
		composed_state |= BL_MENU;
     458:	92 60       	ori	r25, 0x02	; 2
	if (button_action_rep & BD_UP)
     45a:	46 fd       	sbrc	r20, 6
		composed_state |= BR_UP;	
     45c:	94 60       	ori	r25, 0x04	; 4
	if (button_action_rep & BD_DOWN)
     45e:	47 fd       	sbrc	r20, 7
		composed_state |= BR_DOWN;
     460:	98 60       	ori	r25, 0x08	; 8
		
	if (button_action_up_short & BD_HEATCTRL)
     462:	20 fd       	sbrc	r18, 0
		composed_state |= BS_HEATCTRL;
     464:	90 61       	ori	r25, 0x10	; 16
	if (button_action_long & BD_HEATCTRL)
     466:	30 fd       	sbrc	r19, 0
		composed_state |= BL_HEATCTRL;
     468:	90 62       	ori	r25, 0x20	; 32

	button_state = composed_state;
     46a:	90 93 5d 01 	sts	0x015D, r25
     46e:	80 93 5c 01 	sts	0x015C, r24
     472:	08 95       	ret

00000474 <getDataCRC>:

}


static uint8_t getDataCRC(void *p,uint8_t byte_count)
{
     474:	fc 01       	movw	r30, r24
	uint8_t crc_byte = 0;
     476:	80 e0       	ldi	r24, 0x00	; 0
	while(byte_count--)
     478:	09 c0       	rjmp	.+18     	; 0x48c <getDataCRC+0x18>
	{
		// Using ibutton CRC function for reason of 8-bit output CRC
		crc_byte = _crc_ibutton_update (crc_byte, *(uint8_t*)p++);	
     47a:	91 91       	ld	r25, Z+

static __inline__ uint8_t
_crc_ibutton_update(uint8_t __crc, uint8_t __data)
{
	uint8_t __i, __pattern;
	__asm__ __volatile__ (
     47c:	89 27       	eor	r24, r25
     47e:	98 e0       	ldi	r25, 0x08	; 8
     480:	2c e8       	ldi	r18, 0x8C	; 140
     482:	86 95       	lsr	r24
     484:	08 f4       	brcc	.+2      	; 0x488 <getDataCRC+0x14>
     486:	82 27       	eor	r24, r18
     488:	9a 95       	dec	r25
     48a:	d9 f7       	brne	.-10     	; 0x482 <getDataCRC+0xe>


static uint8_t getDataCRC(void *p,uint8_t byte_count)
{
	uint8_t crc_byte = 0;
	while(byte_count--)
     48c:	61 50       	subi	r22, 0x01	; 1
     48e:	a8 f7       	brcc	.-22     	; 0x47a <getDataCRC+0x6>
	{
		// Using ibutton CRC function for reason of 8-bit output CRC
		crc_byte = _crc_ibutton_update (crc_byte, *(uint8_t*)p++);	
	}
	return crc_byte;
}
     490:	08 95       	ret

00000492 <processRollControl>:



// Function to control motor rotation
void processRollControl(void)
{	
     492:	cf 93       	push	r28
	uint8_t beepState = 0;
	static uint8_t force_rotate = 0;
	
	// Process auto power off control
	if (autoPowerOffState & AUTO_POFF_ACTIVE)
     494:	80 91 60 01 	lds	r24, 0x0160
     498:	80 ff       	sbrs	r24, 0
     49a:	25 c0       	rjmp	.+74     	; 0x4e6 <processRollControl+0x54>
	{
		stopCycleRolling(RESET_POINTS);	
     49c:	81 e0       	ldi	r24, 0x01	; 1
     49e:	84 d8       	rcall	.-3832   	; 0xfffff5a8 <__eeprom_end+0xff7ef538>
		if ( (adc_status & (SENSOR_ERROR_NO_PRESENT | SENSOR_ERROR_SHORTED)) ||
     4a0:	80 91 b0 01 	lds	r24, 0x01B0
     4a4:	83 70       	andi	r24, 0x03	; 3
     4a6:	39 f4       	brne	.+14     	; 0x4b6 <processRollControl+0x24>
			 (adc_celsius > (POFF_MOTOR_TRESHOLD + POFF_MOTOR_HYST)) )
     4a8:	80 91 b1 01 	lds	r24, 0x01B1
     4ac:	90 91 b2 01 	lds	r25, 0x01B2
	
	// Process auto power off control
	if (autoPowerOffState & AUTO_POFF_ACTIVE)
	{
		stopCycleRolling(RESET_POINTS);	
		if ( (adc_status & (SENSOR_ERROR_NO_PRESENT | SENSOR_ERROR_SHORTED)) ||
     4b0:	88 33       	cpi	r24, 0x38	; 56
     4b2:	91 05       	cpc	r25, r1
     4b4:	54 f0       	brlt	.+20     	; 0x4ca <processRollControl+0x38>
			 (adc_celsius > (POFF_MOTOR_TRESHOLD + POFF_MOTOR_HYST)) )
		{
			// If there is any sensor error, or
			// if temperature is greater than (threshold + some hysteresis) 
			if (!(rollState & (ROLL_FWD | ROLL_REV)))
     4b6:	80 91 94 01 	lds	r24, 0x0194
     4ba:	83 70       	andi	r24, 0x03	; 3
     4bc:	09 f0       	breq	.+2      	; 0x4c0 <processRollControl+0x2e>
     4be:	6d c0       	rjmp	.+218    	; 0x59a <processRollControl+0x108>
			{
				// If motor is stopped
				setMotorDirection(ROLL_FWD);		// Start rotating in order to prevent rollers damage
     4c0:	81 e0       	ldi	r24, 0x01	; 1
     4c2:	53 d8       	rcall	.-3930   	; 0xfffff56a <__eeprom_end+0xff7ef4fa>
				force_rotate = 0;					// Do not start motor on power off exit
     4c4:	10 92 61 01 	sts	0x0161, r1
     4c8:	68 c0       	rjmp	.+208    	; 0x59a <processRollControl+0x108>
			}
		}
		else if (adc_celsius <= POFF_MOTOR_TRESHOLD)
     4ca:	c3 97       	sbiw	r24, 0x33	; 51
     4cc:	0c f0       	brlt	.+2      	; 0x4d0 <processRollControl+0x3e>
     4ce:	65 c0       	rjmp	.+202    	; 0x59a <processRollControl+0x108>
		{
			if (rollState & (ROLL_FWD | ROLL_REV))
     4d0:	80 91 94 01 	lds	r24, 0x0194
     4d4:	83 70       	andi	r24, 0x03	; 3
     4d6:	09 f4       	brne	.+2      	; 0x4da <processRollControl+0x48>
     4d8:	60 c0       	rjmp	.+192    	; 0x59a <processRollControl+0x108>
			{	
				// If temperature is below threshold and motor is rotating
				setMotorDirection(0);			// Stop the motor
     4da:	80 e0       	ldi	r24, 0x00	; 0
     4dc:	46 d8       	rcall	.-3956   	; 0xfffff56a <__eeprom_end+0xff7ef4fa>
				force_rotate = ROLL_FWD;		// Start motor on power-off mode exit
     4de:	81 e0       	ldi	r24, 0x01	; 1
     4e0:	80 93 61 01 	sts	0x0161, r24
     4e4:	5a c0       	rjmp	.+180    	; 0x59a <processRollControl+0x108>
		}
	}
	else
	{
		// Control direction by buttons
		if ((raw_button_state & (BD_ROTFWD | BD_ROTREV)) == (BD_ROTFWD | BD_ROTREV))
     4e6:	80 91 df 01 	lds	r24, 0x01DF
     4ea:	84 71       	andi	r24, 0x14	; 20
     4ec:	84 31       	cpi	r24, 0x14	; 20
     4ee:	11 f4       	brne	.+4      	; 0x4f4 <processRollControl+0x62>
		{
			// Both Forward and Reverse buttons are pressed - stop
			// Attention - stopping motor when rollers are hot can possibly damage them
			setMotorDirection(0);
     4f0:	80 e0       	ldi	r24, 0x00	; 0
     4f2:	19 c0       	rjmp	.+50     	; 0x526 <processRollControl+0x94>
		}
		else if (button_action_down & BD_ROTFWD)
     4f4:	80 91 5b 01 	lds	r24, 0x015B
     4f8:	82 ff       	sbrs	r24, 2
     4fa:	04 c0       	rjmp	.+8      	; 0x504 <processRollControl+0x72>
		{
			setMotorDirection(ROLL_FWD);	
     4fc:	81 e0       	ldi	r24, 0x01	; 1
     4fe:	35 d8       	rcall	.-3990   	; 0xfffff56a <__eeprom_end+0xff7ef4fa>
			beepState |= 0x01;			// pressed FWD button
     500:	c1 e0       	ldi	r28, 0x01	; 1
     502:	13 c0       	rjmp	.+38     	; 0x52a <processRollControl+0x98>
		}		
		else if (button_action_down & BD_ROTREV)
     504:	84 ff       	sbrs	r24, 4
     506:	04 c0       	rjmp	.+8      	; 0x510 <processRollControl+0x7e>
		{
			setMotorDirection(ROLL_REV);
     508:	82 e0       	ldi	r24, 0x02	; 2
     50a:	2f d8       	rcall	.-4002   	; 0xfffff56a <__eeprom_end+0xff7ef4fa>
			beepState |= 0x02;			// pressed REV button
     50c:	c2 e0       	ldi	r28, 0x02	; 2
     50e:	0d c0       	rjmp	.+26     	; 0x52a <processRollControl+0x98>
		}		
		else if (button_action_long & BD_CYCLE)
     510:	80 91 58 01 	lds	r24, 0x0158
     514:	83 ff       	sbrs	r24, 3
     516:	04 c0       	rjmp	.+8      	; 0x520 <processRollControl+0x8e>
		{
			stopCycleRolling(RESET_POINTS);		// Reset points and disable CYCLE mode (if was enabled)
     518:	81 e0       	ldi	r24, 0x01	; 1
     51a:	46 d8       	rcall	.-3956   	; 0xfffff5a8 <__eeprom_end+0xff7ef538>
			beepState |= 0x08;					// reset of points by long pressing of ROLL button
     51c:	c8 e0       	ldi	r28, 0x08	; 8
     51e:	05 c0       	rjmp	.+10     	; 0x52a <processRollControl+0x98>
		}
		else if (force_rotate)
     520:	80 91 61 01 	lds	r24, 0x0161
     524:	81 11       	cpse	r24, r1
		{
			// Auto power off mode was exited by pressing some other button, not direction buttons
			// Start roll, but do not beep in this case
			setMotorDirection(force_rotate);
     526:	21 d8       	rcall	.-4030   	; 0xfffff56a <__eeprom_end+0xff7ef4fa>


// Function to control motor rotation
void processRollControl(void)
{	
	uint8_t beepState = 0;
     528:	c0 e0       	ldi	r28, 0x00	; 0
		{
			// Auto power off mode was exited by pressing some other button, not direction buttons
			// Start roll, but do not beep in this case
			setMotorDirection(force_rotate);
		}
		force_rotate = 0;		// First normal pass will clear 
     52a:	10 92 61 01 	sts	0x0161, r1
			
		if (button_action_up_short & BD_CYCLE)
     52e:	80 91 59 01 	lds	r24, 0x0159
     532:	83 ff       	sbrs	r24, 3
     534:	10 c0       	rjmp	.+32     	; 0x556 <processRollControl+0xc4>
		{
			// Disable interrupts from timer0
			//	to prevent rollState from changes - not very beautiful approach
			// Interrupts from Timer0 will be reenabled in either stopCycleRolling() or startCycleRolling()
			TIMSK = (1<<OCIE2);
     536:	80 e8       	ldi	r24, 0x80	; 128
     538:	89 bf       	out	0x39, r24	; 57
			if (rollState & ROLL_CYCLE)
     53a:	80 91 94 01 	lds	r24, 0x0194
     53e:	82 ff       	sbrs	r24, 2
     540:	04 c0       	rjmp	.+8      	; 0x54a <processRollControl+0xb8>
			{
				stopCycleRolling(DO_NOT_RESET_POINTS);
     542:	80 e0       	ldi	r24, 0x00	; 0
     544:	31 d8       	rcall	.-3998   	; 0xfffff5a8 <__eeprom_end+0xff7ef538>
				beepState |= 0x20;		// stopped cycle
     546:	c0 62       	ori	r28, 0x20	; 32
     548:	06 c0       	rjmp	.+12     	; 0x556 <processRollControl+0xc4>
			}
			else if (startCycleRolling())
     54a:	7b d8       	rcall	.-3850   	; 0xfffff642 <__eeprom_end+0xff7ef5d2>
     54c:	88 23       	and	r24, r24
     54e:	11 f0       	breq	.+4      	; 0x554 <processRollControl+0xc2>
			{
				beepState |= 0x10;		// started cycle
     550:	c0 61       	ori	r28, 0x10	; 16
     552:	01 c0       	rjmp	.+2      	; 0x556 <processRollControl+0xc4>
			}
			else
			{
				beepState |= 0x40;		// failed to start cycle
     554:	c0 64       	ori	r28, 0x40	; 64
		}		
		
		// ROLL_DIR_CHANGED is set only when direction is changed automatically,
		// not when changed by calling setMotorDirection() function
		// ROLL_DIR_CHANGED and CYCLE_ROLL_DONE flags are sticky
		if (rollState & ROLL_DIR_CHANGED)
     556:	80 91 94 01 	lds	r24, 0x0194
     55a:	85 ff       	sbrs	r24, 5
     55c:	03 c0       	rjmp	.+6      	; 0x564 <processRollControl+0xd2>
		{
			clearRollFlags(ROLL_DIR_CHANGED);
     55e:	80 e2       	ldi	r24, 0x20	; 32
     560:	3d d8       	rcall	.-3974   	; 0xfffff5dc <__eeprom_end+0xff7ef56c>
			beepState |= 0x04;	
     562:	c4 60       	ori	r28, 0x04	; 4
		}
		if (rollState & CYCLE_ROLL_DONE)
     564:	80 91 94 01 	lds	r24, 0x0194
     568:	84 ff       	sbrs	r24, 4
     56a:	03 c0       	rjmp	.+6      	; 0x572 <processRollControl+0xe0>
		{
			clearRollFlags(CYCLE_ROLL_DONE);
     56c:	80 e1       	ldi	r24, 0x10	; 16
     56e:	36 d8       	rcall	.-3988   	; 0xfffff5dc <__eeprom_end+0xff7ef56c>
			beepState |= 0x80;	
     570:	c0 68       	ori	r28, 0x80	; 128
		}		
			
		//-----------//
			
		if (beepState & 0x80)		// Roll cycle done
     572:	c7 ff       	sbrs	r28, 7
     574:	03 c0       	rjmp	.+6      	; 0x57c <processRollControl+0xea>
		{
			Sound_Play(m_siren4);	
     576:	8c e0       	ldi	r24, 0x0C	; 12
     578:	90 e0       	ldi	r25, 0x00	; 0
     57a:	0e c0       	rjmp	.+28     	; 0x598 <processRollControl+0x106>
		}		
		else if (beepState & 0x40)	// Roll cycle start fail
     57c:	c6 ff       	sbrs	r28, 6
     57e:	03 c0       	rjmp	.+6      	; 0x586 <processRollControl+0xf4>
		{
			Sound_Play(m_beep_500Hz_40ms);	
     580:	8c e5       	ldi	r24, 0x5C	; 92
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	09 c0       	rjmp	.+18     	; 0x598 <processRollControl+0x106>
		} 
		else if (beepState & 0x08)	// Reset points
     586:	c3 ff       	sbrs	r28, 3
     588:	03 c0       	rjmp	.+6      	; 0x590 <processRollControl+0xfe>
		{
			Sound_Play(m_beep_800Hz_40ms);	
     58a:	80 e6       	ldi	r24, 0x60	; 96
     58c:	90 e0       	ldi	r25, 0x00	; 0
     58e:	04 c0       	rjmp	.+8      	; 0x598 <processRollControl+0x106>
		}							// Other
		else if ( beepState & (0x01 | 0x02 | 0x10 | 0x20 | 0x04) )
     590:	c7 73       	andi	r28, 0x37	; 55
     592:	19 f0       	breq	.+6      	; 0x59a <processRollControl+0x108>
		{
			Sound_Play(m_beep_1000Hz_40ms);	
     594:	84 e6       	ldi	r24, 0x64	; 100
     596:	90 e0       	ldi	r25, 0x00	; 0
     598:	7f da       	rcall	.-2818   	; 0xfffffa98 <__eeprom_end+0xff7efa28>
		}			
			
	}

	//----- LED indication ------//
	clearExtraLeds(LED_ROTFWD | LED_ROTREV);
     59a:	88 e1       	ldi	r24, 0x18	; 24
     59c:	6e d2       	rcall	.+1244   	; 0xa7a <clearExtraLeds>
	if (rollState & ROLL_FWD)
     59e:	80 91 94 01 	lds	r24, 0x0194
     5a2:	80 ff       	sbrs	r24, 0
     5a4:	02 c0       	rjmp	.+4      	; 0x5aa <processRollControl+0x118>
		setExtraLeds(LED_ROTFWD);
     5a6:	88 e0       	ldi	r24, 0x08	; 8
     5a8:	03 c0       	rjmp	.+6      	; 0x5b0 <processRollControl+0x11e>
	else if (rollState & ROLL_REV)
     5aa:	81 ff       	sbrs	r24, 1
     5ac:	03 c0       	rjmp	.+6      	; 0x5b4 <processRollControl+0x122>
		setExtraLeds(LED_ROTREV);
     5ae:	80 e1       	ldi	r24, 0x10	; 16
}
     5b0:	cf 91       	pop	r28
	//----- LED indication ------//
	clearExtraLeds(LED_ROTFWD | LED_ROTREV);
	if (rollState & ROLL_FWD)
		setExtraLeds(LED_ROTFWD);
	else if (rollState & ROLL_REV)
		setExtraLeds(LED_ROTREV);
     5b2:	5d c2       	rjmp	.+1210   	; 0xa6e <setExtraLeds>
}
     5b4:	cf 91       	pop	r28
     5b6:	08 95       	ret

000005b8 <processHeaterControl>:
	uint16_t setPoint;
	uint16_t processValue;
	uint16_t pid_output = 0;
	
	// Process heater ON/OFF control by button
	if (button_state & BS_HEATCTRL)
     5b8:	80 91 5c 01 	lds	r24, 0x015C
     5bc:	90 91 5d 01 	lds	r25, 0x015D
     5c0:	94 ff       	sbrs	r25, 4
     5c2:	05 c0       	rjmp	.+10     	; 0x5ce <processHeaterControl+0x16>
	{
		heaterState ^= HEATER_ENABLED;
     5c4:	20 b1       	in	r18, 0x00	; 0
     5c6:	31 e0       	ldi	r19, 0x01	; 1
     5c8:	23 27       	eor	r18, r19
     5ca:	20 b9       	out	0x00, r18	; 0
		// Force update heater power
		sys_timers_flags |= UPDATE_PID;		// Not very good approach if UPDATE_PID flag is used outside this function
     5cc:	16 9a       	sbi	0x02, 6	; 2
	}
	
	// Process PID controller reset
	if (button_state & BL_HEATCTRL)
     5ce:	95 ff       	sbrs	r25, 5
     5d0:	03 c0       	rjmp	.+6      	; 0x5d8 <processHeaterControl+0x20>
	{
		heaterState |= RESET_PID;
     5d2:	02 9a       	sbi	0x00, 2	; 0
		// Force update heater power
		sys_timers_flags |= UPDATE_PID;
     5d4:	16 9a       	sbi	0x02, 6	; 2
     5d6:	01 c0       	rjmp	.+2      	; 0x5da <processHeaterControl+0x22>
	}
	else
	{
		heaterState &= ~RESET_PID;
     5d8:	02 98       	cbi	0x00, 2	; 0
	}
	
	// Process auto power off control and sensor errors
	if ((autoPowerOffState & AUTO_POFF_ACTIVE) || (adc_status & (SENSOR_ERROR_NO_PRESENT | SENSOR_ERROR_SHORTED)))
     5da:	80 91 60 01 	lds	r24, 0x0160
     5de:	80 fd       	sbrc	r24, 0
     5e0:	04 c0       	rjmp	.+8      	; 0x5ea <processHeaterControl+0x32>
     5e2:	80 91 b0 01 	lds	r24, 0x01B0
     5e6:	83 70       	andi	r24, 0x03	; 3
     5e8:	09 f0       	breq	.+2      	; 0x5ec <processHeaterControl+0x34>
	{
		heaterState &= ~HEATER_ENABLED;
     5ea:	00 98       	cbi	0x00, 0	; 0
	}	

	// Update integrator limits if set point is changed
	if (heaterState & SETPOINT_CHANGED)
     5ec:	03 9b       	sbis	0x00, 3	; 0
     5ee:	04 c0       	rjmp	.+8      	; 0x5f8 <processHeaterControl+0x40>
	{
		setPIDIntegratorLimit(p.setup_temp_value);
     5f0:	80 91 b9 01 	lds	r24, 0x01B9
     5f4:	9e d6       	rcall	.+3388   	; 0x1332 <setPIDIntegratorLimit>
		// Force update heater power
		sys_timers_flags |= UPDATE_PID;
     5f6:	16 9a       	sbi	0x02, 6	; 2
	}

	
	// Check if heater control should be updated
	// PID call interval is a multiple of Celsius update interval. 
	if (sys_timers_flags & UPDATE_PID)
     5f8:	16 9b       	sbis	0x02, 6	; 2
     5fa:	18 c0       	rjmp	.+48     	; 0x62c <processHeaterControl+0x74>
	{
		// Convert temperature setup to equal ADC value
		set_value_adc = conv_Celsius_to_ADC(p.setup_temp_value);					
     5fc:	80 91 b9 01 	lds	r24, 0x01B9
     600:	90 e0       	ldi	r25, 0x00	; 0
     602:	0a de       	rcall	.-1004   	; 0x218 <conv_Celsius_to_ADC>
		setPoint = set_value_adc * ADC_OVERSAMPLE_RATE;		
		processValue = adc_filtered;
		
		// Process PID
		// If heater is disabled, output will be 0
		pid_output = processPID(setPoint, processValue, heaterState);		
     604:	40 b1       	in	r20, 0x00	; 0
     606:	60 91 aa 01 	lds	r22, 0x01AA
     60a:	70 91 ab 01 	lds	r23, 0x01AB
     60e:	88 0f       	add	r24, r24
     610:	99 1f       	adc	r25, r25
     612:	88 0f       	add	r24, r24
     614:	99 1f       	adc	r25, r25
     616:	9a d6       	rcall	.+3380   	; 0x134c <processPID>
     618:	90 e0       	ldi	r25, 0x00	; 0
		
		// If unregulated mode is selected, override PID output 
		// This mode must be used with care for calibration only
		if ((heaterState & HEATER_ENABLED) && (p.setup_temp_value >= MAX_SET_TEMP))
     61a:	00 9b       	sbis	0x00, 0	; 0
     61c:	06 c0       	rjmp	.+12     	; 0x62a <processHeaterControl+0x72>
     61e:	20 91 b9 01 	lds	r18, 0x01B9
     622:	2f 3f       	cpi	r18, 0xFF	; 255
     624:	11 f4       	brne	.+4      	; 0x62a <processHeaterControl+0x72>
			pid_output = HEATER_MAX_POWER;		
     626:	84 e6       	ldi	r24, 0x64	; 100
     628:	90 e0       	ldi	r25, 0x00	; 0
			
		// Set new heater power value	
		setHeaterPower(pid_output);			
     62a:	92 d7       	rcall	.+3876   	; 0x1550 <setHeaterPower>
	}	
		
	
	//----- LED indication ------//
	if (heaterState & HEATER_ENABLED)
		setExtraLeds(LED_HEATER);
     62c:	84 e0       	ldi	r24, 0x04	; 4
		setHeaterPower(pid_output);			
	}	
		
	
	//----- LED indication ------//
	if (heaterState & HEATER_ENABLED)
     62e:	00 99       	sbic	0x00, 0	; 0
		setExtraLeds(LED_HEATER);
     630:	1e c2       	rjmp	.+1084   	; 0xa6e <setExtraLeds>
	else
		clearExtraLeds(LED_HEATER);
     632:	23 c2       	rjmp	.+1094   	; 0xa7a <clearExtraLeds>

00000634 <processHeaterEvents>:

// Function to monitor heater events
void processHeaterEvents(void)
{
	// Generate temperature changed event
	if (setPoint_prev != p.setup_temp_value)
     634:	90 91 79 00 	lds	r25, 0x0079
     638:	80 91 b9 01 	lds	r24, 0x01B9
     63c:	98 17       	cp	r25, r24
     63e:	21 f0       	breq	.+8      	; 0x648 <processHeaterEvents+0x14>
	{
		heaterState |= SETPOINT_CHANGED;
     640:	03 9a       	sbi	0x00, 3	; 0
		setPoint_prev = p.setup_temp_value;
     642:	80 93 79 00 	sts	0x0079, r24
     646:	08 95       	ret
	}
	else
	{
		heaterState &= ~SETPOINT_CHANGED;
     648:	03 98       	cbi	0x00, 3	; 0
     64a:	08 95       	ret

0000064c <processHeaterAlerts>:
// Function to process all heater alerts:
//	- sensor errors
//	- getting close to desired temperature
//	- continuous heating when disabled
void processHeaterAlerts(void)
{
     64c:	cf 93       	push	r28
     64e:	df 93       	push	r29
	static uint8_t tempAlertRange = TEMP_ALERT_RANGE;
	static int16_t refCapturedTemp = INT16_MAX;
	int16_t currentTemperature = adc_celsius;
     650:	c0 91 b1 01 	lds	r28, 0x01B1
     654:	d0 91 b2 01 	lds	r29, 0x01B2
	
	// ADC sensor errors alert
	if (adc_status & (SENSOR_ERROR_NO_PRESENT | SENSOR_ERROR_SHORTED))
     658:	80 91 b0 01 	lds	r24, 0x01B0
     65c:	83 70       	andi	r24, 0x03	; 3
     65e:	31 f0       	breq	.+12     	; 0x66c <processHeaterAlerts+0x20>
	{
		if (sys_timers_flags & EXPIRED_10SEC)
     660:	11 9b       	sbis	0x02, 1	; 2
     662:	3e c0       	rjmp	.+124    	; 0x6e0 <processHeaterAlerts+0x94>
		{
			// Enable beeper output regardless of menu setting
			Sound_OverrideDisable();
     664:	2b da       	rcall	.-2986   	; 0xfffffabc <__eeprom_end+0xff7efa4c>
			Sound_Play(m_siren3);
     666:	84 e1       	ldi	r24, 0x14	; 20
     668:	90 e0       	ldi	r25, 0x00	; 0
     66a:	37 c0       	rjmp	.+110    	; 0x6da <processHeaterAlerts+0x8e>
		return;
	}
	
	
	// Indicate reaching of desired temperature
	if ( (currentTemperature > p.setup_temp_value - tempAlertRange) && (currentTemperature < p.setup_temp_value + tempAlertRange) )
     66c:	20 91 b9 01 	lds	r18, 0x01B9
     670:	30 e0       	ldi	r19, 0x00	; 0
     672:	60 91 7a 00 	lds	r22, 0x007A
     676:	86 2f       	mov	r24, r22
     678:	90 e0       	ldi	r25, 0x00	; 0
     67a:	a9 01       	movw	r20, r18
     67c:	48 1b       	sub	r20, r24
     67e:	59 0b       	sbc	r21, r25
     680:	4c 17       	cp	r20, r28
     682:	5d 07       	cpc	r21, r29
     684:	74 f4       	brge	.+28     	; 0x6a2 <processHeaterAlerts+0x56>
     686:	82 0f       	add	r24, r18
     688:	93 1f       	adc	r25, r19
     68a:	c8 17       	cp	r28, r24
     68c:	d9 07       	cpc	r29, r25
     68e:	4c f4       	brge	.+18     	; 0x6a2 <processHeaterAlerts+0x56>
	{
		if ((tempAlertRange == TEMP_ALERT_RANGE) && (heaterState & HEATER_ENABLED))
     690:	65 30       	cpi	r22, 0x05	; 5
     692:	29 f4       	brne	.+10     	; 0x69e <processHeaterAlerts+0x52>
     694:	00 9b       	sbis	0x00, 0	; 0
     696:	03 c0       	rjmp	.+6      	; 0x69e <processHeaterAlerts+0x52>
		{
			Sound_Play(m_siren1);
     698:	84 e3       	ldi	r24, 0x34	; 52
     69a:	90 e0       	ldi	r25, 0x00	; 0
     69c:	fd d9       	rcall	.-3078   	; 0xfffffa98 <__eeprom_end+0xff7efa28>
		}
		// Add some hysteresis
		tempAlertRange = TEMP_ALERT_RANGE + TEMP_ALERT_HYST;
     69e:	8a e0       	ldi	r24, 0x0A	; 10
     6a0:	01 c0       	rjmp	.+2      	; 0x6a4 <processHeaterAlerts+0x58>
	}			
	else
	{
		tempAlertRange = TEMP_ALERT_RANGE;
     6a2:	85 e0       	ldi	r24, 0x05	; 5
     6a4:	80 93 7a 00 	sts	0x007A, r24
	// Growing temperature with heater disabled alert 
	// This alert is done regardless of global sound enable
	// A false triggering may occur if ambient temperature grows.
	// To reset the warning in this case just turn on heater for at least one systimer tick (50ms)
	// If heater is enabled, it is implied that user controls heating process
	if (heaterState & (HEATER_ENABLED | CALIBRATION_ACTIVE))
     6a8:	80 b1       	in	r24, 0x00	; 0
     6aa:	83 70       	andi	r24, 0x03	; 3
     6ac:	09 f0       	breq	.+2      	; 0x6b0 <processHeaterAlerts+0x64>
     6ae:	09 c0       	rjmp	.+18     	; 0x6c2 <processHeaterAlerts+0x76>
	{
		// Heater enabled, just save current temperature as reference
		// Same if calibration in progress, even if heater is disabled
		refCapturedTemp = currentTemperature;
	}
	else if (sys_timers_flags & EXPIRED_10SEC)
     6b0:	11 9b       	sbis	0x02, 1	; 2
     6b2:	16 c0       	rjmp	.+44     	; 0x6e0 <processHeaterAlerts+0x94>
	{
		// Heater disabled. If temperature is falling,
		if (currentTemperature < refCapturedTemp)
     6b4:	80 91 7b 00 	lds	r24, 0x007B
     6b8:	90 91 7c 00 	lds	r25, 0x007C
     6bc:	c8 17       	cp	r28, r24
     6be:	d9 07       	cpc	r29, r25
     6c0:	2c f4       	brge	.+10     	; 0x6cc <processHeaterAlerts+0x80>
		{
			// save current temperature as reference
			refCapturedTemp = currentTemperature;
     6c2:	d0 93 7c 00 	sts	0x007C, r29
     6c6:	c0 93 7b 00 	sts	0x007B, r28
     6ca:	0a c0       	rjmp	.+20     	; 0x6e0 <processHeaterAlerts+0x94>
		else
		{
			// Heater is disabled. If current temperature is higher than reference + some safe interval,
			// there might be a hardware failure - short circuit, etc
			// BEEP like a devil  }:-(
			if (currentTemperature >= (refCapturedTemp + SAFE_TEMP_INTERVAL))
     6cc:	43 96       	adiw	r24, 0x13	; 19
     6ce:	8c 17       	cp	r24, r28
     6d0:	9d 07       	cpc	r25, r29
     6d2:	34 f4       	brge	.+12     	; 0x6e0 <processHeaterAlerts+0x94>
			{
				// Enable beeper output regardless of menu setting
				Sound_OverrideDisable();
     6d4:	f3 d9       	rcall	.-3098   	; 0xfffffabc <__eeprom_end+0xff7efa4c>
				Sound_Play(m_siren2);
     6d6:	8a e1       	ldi	r24, 0x1A	; 26
     6d8:	90 e0       	ldi	r25, 0x00	; 0
			}
		}
	}
	

}
     6da:	df 91       	pop	r29
     6dc:	cf 91       	pop	r28
			// BEEP like a devil  }:-(
			if (currentTemperature >= (refCapturedTemp + SAFE_TEMP_INTERVAL))
			{
				// Enable beeper output regardless of menu setting
				Sound_OverrideDisable();
				Sound_Play(m_siren2);
     6de:	dc c9       	rjmp	.-3144   	; 0xfffffa98 <__eeprom_end+0xff7efa28>
			}
		}
	}
	

}
     6e0:	df 91       	pop	r29
     6e2:	cf 91       	pop	r28
     6e4:	08 95       	ret

000006e6 <saveCalibrationToEEPROM>:


void saveCalibrationToEEPROM(void)
{
	// Calibration parameters normally are only saved after calibrating 
	eeprom_update_block(&cp,&eeCalibrationParams,sizeof(cParams_t));	
     6e6:	46 e0       	ldi	r20, 0x06	; 6
     6e8:	50 e0       	ldi	r21, 0x00	; 0
     6ea:	62 e0       	ldi	r22, 0x02	; 2
     6ec:	70 e0       	ldi	r23, 0x00	; 0
     6ee:	83 eb       	ldi	r24, 0xB3	; 179
     6f0:	91 e0       	ldi	r25, 0x01	; 1
     6f2:	8b da       	rcall	.-2794   	; 0xfffffc0a <__eeprom_end+0xff7efb9a>
	#ifdef USE_EEPROM_CRC
	uint8_t new_crc_byte = getDataCRC(&cp,sizeof(cParams_t));
     6f4:	66 e0       	ldi	r22, 0x06	; 6
     6f6:	83 eb       	ldi	r24, 0xB3	; 179
     6f8:	91 e0       	ldi	r25, 0x01	; 1
     6fa:	bc de       	rcall	.-648    	; 0x474 <getDataCRC>
	eeprom_update_byte(&ee_cParamsCRC,new_crc_byte);
     6fc:	68 2f       	mov	r22, r24
     6fe:	80 e0       	ldi	r24, 0x00	; 0
     700:	90 e0       	ldi	r25, 0x00	; 0
     702:	92 ca       	rjmp	.-2780   	; 0xfffffc28 <__eeprom_end+0xff7efbb8>

00000704 <saveGlobalParamsToEEPROM>:

void saveGlobalParamsToEEPROM(void)
{
	// Save global parameters to EEPROM
	// eeprom_update_block() updates only bytes that were changed
	eeprom_update_block(&p,&eeGlobalParams,sizeof(gParams_t));
     704:	44 e0       	ldi	r20, 0x04	; 4
     706:	50 e0       	ldi	r21, 0x00	; 0
     708:	68 e0       	ldi	r22, 0x08	; 8
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	89 eb       	ldi	r24, 0xB9	; 185
     70e:	91 e0       	ldi	r25, 0x01	; 1
     710:	7c da       	rcall	.-2824   	; 0xfffffc0a <__eeprom_end+0xff7efb9a>
	#ifdef USE_EEPROM_CRC
	uint8_t new_crc_byte = getDataCRC(&p,sizeof(gParams_t));
     712:	64 e0       	ldi	r22, 0x04	; 4
     714:	89 eb       	ldi	r24, 0xB9	; 185
     716:	91 e0       	ldi	r25, 0x01	; 1
     718:	ad de       	rcall	.-678    	; 0x474 <getDataCRC>
	eeprom_update_byte(&ee_gParamsCRC,new_crc_byte);
     71a:	68 2f       	mov	r22, r24
     71c:	81 e0       	ldi	r24, 0x01	; 1
     71e:	90 e0       	ldi	r25, 0x00	; 0
     720:	83 ca       	rjmp	.-2810   	; 0xfffffc28 <__eeprom_end+0xff7efbb8>

00000722 <restoreGlobalParams>:
	return crc_byte;
}


uint8_t restoreGlobalParams(void)
{	
     722:	cf 93       	push	r28
     724:	df 93       	push	r29
	uint8_t defaults_used = 0;
	
	// Restore global parameters - temperature setting, sound enable, etc.
	eeprom_read_block(&p,&eeGlobalParams,sizeof(gParams_t));
     726:	44 e0       	ldi	r20, 0x04	; 4
     728:	50 e0       	ldi	r21, 0x00	; 0
     72a:	68 e0       	ldi	r22, 0x08	; 8
     72c:	70 e0       	ldi	r23, 0x00	; 0
     72e:	89 eb       	ldi	r24, 0xB9	; 185
     730:	91 e0       	ldi	r25, 0x01	; 1
     732:	53 da       	rcall	.-2906   	; 0xfffffbda <__eeprom_end+0xff7efb6a>
	// Restore ADC calibration parameters
	eeprom_read_block(&cp,&eeCalibrationParams,sizeof(cParams_t));
     734:	46 e0       	ldi	r20, 0x06	; 6
     736:	50 e0       	ldi	r21, 0x00	; 0
     738:	62 e0       	ldi	r22, 0x02	; 2
     73a:	70 e0       	ldi	r23, 0x00	; 0
     73c:	83 eb       	ldi	r24, 0xB3	; 179
     73e:	91 e0       	ldi	r25, 0x01	; 1
     740:	4c da       	rcall	.-2920   	; 0xfffffbda <__eeprom_end+0xff7efb6a>
	#ifdef USE_EEPROM_CRC
	uint8_t crc_byte;
	uint8_t temp8u;
	
	//------- Check global params -------//
	crc_byte = getDataCRC(&p,sizeof(gParams_t));
     742:	64 e0       	ldi	r22, 0x04	; 4
     744:	89 eb       	ldi	r24, 0xB9	; 185
     746:	91 e0       	ldi	r25, 0x01	; 1
     748:	95 de       	rcall	.-726    	; 0x474 <getDataCRC>
     74a:	c8 2f       	mov	r28, r24
	temp8u = eeprom_read_byte(&ee_gParamsCRC);
     74c:	81 e0       	ldi	r24, 0x01	; 1
     74e:	90 e0       	ldi	r25, 0x00	; 0
     750:	54 da       	rcall	.-2904   	; 0xfffffbfa <__eeprom_end+0xff7efb8a>
	// Restore global defaults if corrupted
	if (temp8u != crc_byte)
     752:	8c 17       	cp	r24, r28
     754:	51 f0       	breq	.+20     	; 0x76a <restoreGlobalParams+0x48>
	{
		//PGM_read_block(&p,&pmGlobalDefaults,sizeof(gParams_t));
		memcpy_P(&p,&pmGlobalDefaults,sizeof(gParams_t));
     756:	44 e0       	ldi	r20, 0x04	; 4
     758:	50 e0       	ldi	r21, 0x00	; 0
     75a:	6c e2       	ldi	r22, 0x2C	; 44
     75c:	70 e0       	ldi	r23, 0x00	; 0
     75e:	89 eb       	ldi	r24, 0xB9	; 185
     760:	91 e0       	ldi	r25, 0x01	; 1
     762:	32 da       	rcall	.-2972   	; 0xfffffbc8 <__eeprom_end+0xff7efb58>
		// Save restored default values with correct CRC
		saveGlobalParamsToEEPROM();
     764:	cf df       	rcall	.-98     	; 0x704 <saveGlobalParamsToEEPROM>
		defaults_used |= 0x01;
     766:	c1 e0       	ldi	r28, 0x01	; 1
     768:	01 c0       	rjmp	.+2      	; 0x76c <restoreGlobalParams+0x4a>
}


uint8_t restoreGlobalParams(void)
{	
	uint8_t defaults_used = 0;
     76a:	c0 e0       	ldi	r28, 0x00	; 0
		saveGlobalParamsToEEPROM();
		defaults_used |= 0x01;
	}
	
	//----- Check calibration params -----//
	crc_byte = getDataCRC(&cp,sizeof(cParams_t));
     76c:	66 e0       	ldi	r22, 0x06	; 6
     76e:	83 eb       	ldi	r24, 0xB3	; 179
     770:	91 e0       	ldi	r25, 0x01	; 1
     772:	80 de       	rcall	.-768    	; 0x474 <getDataCRC>
     774:	d8 2f       	mov	r29, r24
	temp8u = eeprom_read_byte(&ee_cParamsCRC);
     776:	80 e0       	ldi	r24, 0x00	; 0
     778:	90 e0       	ldi	r25, 0x00	; 0
     77a:	3f da       	rcall	.-2946   	; 0xfffffbfa <__eeprom_end+0xff7efb8a>
	// Restore calibration defaults if corrupted
	if (temp8u != crc_byte)
     77c:	8d 17       	cp	r24, r29
     77e:	49 f0       	breq	.+18     	; 0x792 <restoreGlobalParams+0x70>
	{
		//PGM_read_block(&cp,&pmCalibrationDefaults,sizeof(cParams_t));
		memcpy_P(&cp,&pmCalibrationDefaults,sizeof(cParams_t));
     780:	46 e0       	ldi	r20, 0x06	; 6
     782:	50 e0       	ldi	r21, 0x00	; 0
     784:	66 e2       	ldi	r22, 0x26	; 38
     786:	70 e0       	ldi	r23, 0x00	; 0
     788:	83 eb       	ldi	r24, 0xB3	; 179
     78a:	91 e0       	ldi	r25, 0x01	; 1
     78c:	1d da       	rcall	.-3014   	; 0xfffffbc8 <__eeprom_end+0xff7efb58>
		// Save restored default values with correct CRC
		saveCalibrationToEEPROM();
     78e:	ab df       	rcall	.-170    	; 0x6e6 <saveCalibrationToEEPROM>
		defaults_used |= 0x02;	
     790:	c2 60       	ori	r28, 0x02	; 2
	}
	#endif
	
	return defaults_used;
}
     792:	8c 2f       	mov	r24, r28
     794:	df 91       	pop	r29
     796:	cf 91       	pop	r28
     798:	08 95       	ret

0000079a <exitPowerOff>:
}

void exitPowerOff(void)
{
	// Disable all interrupts
	cli();
     79a:	f8 94       	cli
	
	// Put all ports into HI-Z
	DDRB = 0x00;
     79c:	17 ba       	out	0x17, r1	; 23
	PORTB = 0x00;
     79e:	18 ba       	out	0x18, r1	; 24
	DDRC = 0x00;
     7a0:	14 ba       	out	0x14, r1	; 20
	PORTC = 0x00;
     7a2:	15 ba       	out	0x15, r1	; 21
	
	//DDRD = 0x00;
	DDRD = (1<<PD_TXD);
     7a4:	82 e0       	ldi	r24, 0x02	; 2
     7a6:	81 bb       	out	0x11, r24	; 17
	USART_sendstr("\n\rAC sync lost");
     7a8:	8d e8       	ldi	r24, 0x8D	; 141
     7aa:	90 e0       	ldi	r25, 0x00	; 0
     7ac:	90 d9       	rcall	.-3296   	; 0xffffface <__eeprom_end+0xff7efa5e>
	
	saveGlobalParamsToEEPROM();
     7ae:	aa df       	rcall	.-172    	; 0x704 <saveGlobalParamsToEEPROM>
	
	USART_sendstr("\n\rTurn OFF");
     7b0:	8c e9       	ldi	r24, 0x9C	; 156
     7b2:	90 e0       	ldi	r25, 0x00	; 0
     7b4:	8c d9       	rcall	.-3304   	; 0xffffface <__eeprom_end+0xff7efa5e>
	PORTD = 0x00;
     7b6:	12 ba       	out	0x12, r1	; 18
     7b8:	ff cf       	rjmp	.-2      	; 0x7b8 <exitPowerOff+0x1e>

000007ba <fir_i16_i8>:
// FIR digital filter
// Samples: signed, 16-bit
// Coeffs:  signed, 8-bit
//---------------------------------------------//
int16_t fir_i16_i8(int16_t new_sample, int16_t *samples, filter8bit_core_t* iir_core)
{
     7ba:	cf 92       	push	r12
     7bc:	df 92       	push	r13
     7be:	ef 92       	push	r14
     7c0:	ff 92       	push	r15
     7c2:	0f 93       	push	r16
     7c4:	1f 93       	push	r17
     7c6:	cf 93       	push	r28
     7c8:	df 93       	push	r29
     7ca:	8c 01       	movw	r16, r24
     7cc:	eb 01       	movw	r28, r22
     7ce:	fa 01       	movw	r30, r20
	int32_t summ;
	uint8_t i;
	
	summ = new_sample * iir_core->coeffs[0];
     7d0:	23 81       	ldd	r18, Z+3	; 0x03
     7d2:	20 03       	mulsu	r18, r16
     7d4:	60 01       	movw	r12, r0
     7d6:	21 9f       	mul	r18, r17
     7d8:	d0 0c       	add	r13, r0
     7da:	11 24       	eor	r1, r1
     7dc:	ee 24       	eor	r14, r14
     7de:	d7 fc       	sbrc	r13, 7
     7e0:	e0 94       	com	r14
     7e2:	fe 2c       	mov	r15, r14
	for (i=iir_core->n-1; i>0; i--)
     7e4:	40 81       	ld	r20, Z
     7e6:	1e c0       	rjmp	.+60     	; 0x824 <fir_i16_i8+0x6a>
	{
		samples[i] = samples[i-1];
     7e8:	84 2f       	mov	r24, r20
     7ea:	90 e0       	ldi	r25, 0x00	; 0
     7ec:	dc 01       	movw	r26, r24
     7ee:	11 97       	sbiw	r26, 0x01	; 1
     7f0:	aa 0f       	add	r26, r26
     7f2:	bb 1f       	adc	r27, r27
     7f4:	ac 0f       	add	r26, r28
     7f6:	bd 1f       	adc	r27, r29
     7f8:	2d 91       	ld	r18, X+
     7fa:	3c 91       	ld	r19, X
     7fc:	dc 01       	movw	r26, r24
     7fe:	aa 0f       	add	r26, r26
     800:	bb 1f       	adc	r27, r27
     802:	ac 0f       	add	r26, r28
     804:	bd 1f       	adc	r27, r29
     806:	2d 93       	st	X+, r18
     808:	3c 93       	st	X, r19
		summ += (int32_t)samples[i] * iir_core->coeffs[i];
     80a:	df 01       	movw	r26, r30
     80c:	a8 0f       	add	r26, r24
     80e:	b9 1f       	adc	r27, r25
     810:	13 96       	adiw	r26, 0x03	; 3
     812:	ac 91       	ld	r26, X
     814:	bb 27       	eor	r27, r27
     816:	a7 fd       	sbrc	r26, 7
     818:	b0 95       	com	r27
     81a:	92 d9       	rcall	.-3292   	; 0xfffffb40 <__eeprom_end+0xff7efad0>
     81c:	c6 0e       	add	r12, r22
     81e:	d7 1e       	adc	r13, r23
     820:	e8 1e       	adc	r14, r24
     822:	f9 1e       	adc	r15, r25
{
	int32_t summ;
	uint8_t i;
	
	summ = new_sample * iir_core->coeffs[0];
	for (i=iir_core->n-1; i>0; i--)
     824:	41 50       	subi	r20, 0x01	; 1
     826:	01 f7       	brne	.-64     	; 0x7e8 <fir_i16_i8+0x2e>
	{
		samples[i] = samples[i-1];
		summ += (int32_t)samples[i] * iir_core->coeffs[i];
	}
	samples[0] = new_sample;
     828:	19 83       	std	Y+1, r17	; 0x01
     82a:	08 83       	st	Y, r16
	return (int16_t)(summ / iir_core->dc_gain);
     82c:	21 81       	ldd	r18, Z+1	; 0x01
     82e:	32 81       	ldd	r19, Z+2	; 0x02
     830:	40 e0       	ldi	r20, 0x00	; 0
     832:	50 e0       	ldi	r21, 0x00	; 0
     834:	c7 01       	movw	r24, r14
     836:	b6 01       	movw	r22, r12
     838:	68 d9       	rcall	.-3376   	; 0xfffffb0a <__eeprom_end+0xff7efa9a>
}
     83a:	c9 01       	movw	r24, r18
     83c:	df 91       	pop	r29
     83e:	cf 91       	pop	r28
     840:	1f 91       	pop	r17
     842:	0f 91       	pop	r16
     844:	ff 90       	pop	r15
     846:	ef 90       	pop	r14
     848:	df 90       	pop	r13
     84a:	cf 90       	pop	r12
     84c:	08 95       	ret

0000084e <decode_led_char>:
//---------------------------------------------//
// Decodes normal string literal to the
//	7-segment representation
//---------------------------------------------//
static uint8_t decode_led_char(char c)
{
     84e:	20 e0       	ldi	r18, 0x00	; 0
     850:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t i;
	encode_7seg_pair encode_pair;
	for (i = 0; i < sizeof(led_encode_table)/sizeof(encode_7seg_pair); i++  )
	{
		encode_pair.code = pgm_read_byte(&led_encode_table[i].code);
     852:	a9 01       	movw	r20, r18
     854:	44 0f       	add	r20, r20
     856:	55 1f       	adc	r21, r21
     858:	fa 01       	movw	r30, r20
     85a:	e0 5d       	subi	r30, 0xD0	; 208
     85c:	ff 4f       	sbci	r31, 0xFF	; 255
     85e:	e4 91       	lpm	r30, Z
		if (encode_pair.code == c)
     860:	e8 13       	cpse	r30, r24
     862:	05 c0       	rjmp	.+10     	; 0x86e <decode_led_char+0x20>
		{
			i = pgm_read_byte(&led_encode_table[i].segdata);
     864:	fa 01       	movw	r30, r20
     866:	ef 5c       	subi	r30, 0xCF	; 207
     868:	ff 4f       	sbci	r31, 0xFF	; 255
     86a:	84 91       	lpm	r24, Z
     86c:	08 95       	ret
     86e:	2f 5f       	subi	r18, 0xFF	; 255
     870:	3f 4f       	sbci	r19, 0xFF	; 255
//---------------------------------------------//
static uint8_t decode_led_char(char c)
{
	uint8_t i;
	encode_7seg_pair encode_pair;
	for (i = 0; i < sizeof(led_encode_table)/sizeof(encode_7seg_pair); i++  )
     872:	2c 31       	cpi	r18, 0x1C	; 28
     874:	31 05       	cpc	r19, r1
     876:	69 f7       	brne	.-38     	; 0x852 <decode_led_char+0x4>
			return i;
		}		
	}			
	// No item was found - return argument value
	return  c;
}
     878:	08 95       	ret

0000087a <wrap_led_buffer_index>:
//---------------------------------------------//
// Ensures that index is inside the buffer
// -128 <= index <= 127
//---------------------------------------------//
static uint8_t wrap_led_buffer_index(int8_t buf_index)
{
     87a:	28 2f       	mov	r18, r24
	uint8_t new_index_u;
	new_index_u = (uint8_t) ((buf_index < 0) ? -buf_index : buf_index);
     87c:	87 fd       	sbrc	r24, 7
     87e:	81 95       	neg	r24
	if (new_index_u >= LED_BUFFER_LENGTH)
     880:	8e 30       	cpi	r24, 0x0E	; 14
     882:	18 f0       	brcs	.+6      	; 0x88a <wrap_led_buffer_index+0x10>
		new_index_u = new_index_u % LED_BUFFER_LENGTH;
     884:	6e e0       	ldi	r22, 0x0E	; 14
     886:	35 d9       	rcall	.-3478   	; 0xfffffaf2 <__eeprom_end+0xff7efa82>
     888:	89 2f       	mov	r24, r25
	new_index_u = ((buf_index >= 0) || (new_index_u == 0)) ? new_index_u :  LED_BUFFER_LENGTH - new_index_u ;
     88a:	27 ff       	sbrs	r18, 7
     88c:	05 c0       	rjmp	.+10     	; 0x898 <wrap_led_buffer_index+0x1e>
     88e:	88 23       	and	r24, r24
     890:	19 f0       	breq	.+6      	; 0x898 <wrap_led_buffer_index+0x1e>
     892:	9e e0       	ldi	r25, 0x0E	; 14
     894:	98 1b       	sub	r25, r24
     896:	89 2f       	mov	r24, r25
	return new_index_u;
}
     898:	08 95       	ret

0000089a <processLedIndicator>:
// Call this function N times per sec to get N/NUM_DIGITS_TOTAL display update rate, where
// NUM_DIGITS_TOTAL is number_of_digits_of_LED_display if no extra LEDs are used or
// (number_of_digits_of_LED_display + 1) otherwise.
//---------------------------------------------//
void processLedIndicator()
{
     89a:	cf 93       	push	r28
	uint8_t next_wActivePos;
	
	// Turn off segments
	#ifdef CLEAN_OPERATION
	disable_led_segments();
     89c:	21 d1       	rcall	.+578    	; 0xae0 <disable_led_segments>
	#endif
	
	
	// Perform regular shift
	led_clock_pulse(!LED_DIGIT_ACT_LVL);
     89e:	81 e0       	ldi	r24, 0x01	; 1
     8a0:	f3 d0       	rcall	.+486    	; 0xa88 <led_clock_pulse>
	
	// Switch on active window item position
	switch (wActivePos)
     8a2:	c0 91 63 01 	lds	r28, 0x0163
     8a6:	cc 23       	and	r28, r28
     8a8:	19 f0       	breq	.+6      	; 0x8b0 <processLedIndicator+0x16>
     8aa:	c6 30       	cpi	r28, 0x06	; 6
     8ac:	c1 f5       	brne	.+112    	; 0x91e <processLedIndicator+0x84>
     8ae:	0f c0       	rjmp	.+30     	; 0x8ce <processLedIndicator+0x34>
	case 0:
		// Get buttons
		#ifndef CLEAN_OPERATION
		disable_led_segments();
		#endif
		enable_led_segments_pullups();
     8b0:	09 d1       	rcall	.+530    	; 0xac4 <enable_led_segments_pullups>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     8b2:	85 e3       	ldi	r24, 0x35	; 53
     8b4:	8a 95       	dec	r24
     8b6:	f1 f7       	brne	.-4      	; 0x8b4 <processLedIndicator+0x1a>
     8b8:	00 00       	nop
		_delay_us(PULLUP_DELAY_US);
		capture_button_state();
     8ba:	19 d1       	rcall	.+562    	; 0xaee <capture_button_state>
		#ifndef CLEAN_OPERATION
		enable_led_segments();
		#endif
		// Start new cycle with active digit level
		led_clock_pulse(LED_DIGIT_ACT_LVL);
     8bc:	80 e0       	ldi	r24, 0x00	; 0
     8be:	e4 d0       	rcall	.+456    	; 0xa88 <led_clock_pulse>
		// Always start new cycle from specified buffer start position
		bufActivePos = wStartPos;
     8c0:	80 91 ce 01 	lds	r24, 0x01CE
     8c4:	80 93 62 01 	sts	0x0162, r24
		next_wActivePos = wActivePos + 1;
     8c8:	c0 91 63 01 	lds	r28, 0x0163
     8cc:	28 c0       	rjmp	.+80     	; 0x91e <processLedIndicator+0x84>
//---------------------------------------------//
// Performs window shifting
//---------------------------------------------//
static void processWindowShifter(void)
{
	if (shifterState == LED_SHIFT_DONE)
     8ce:	80 91 cf 01 	lds	r24, 0x01CF
     8d2:	81 11       	cpse	r24, r1
     8d4:	01 c0       	rjmp	.+2      	; 0x8d8 <processLedIndicator+0x3e>
     8d6:	1b c0       	rjmp	.+54     	; 0x90e <processLedIndicator+0x74>
		return;
	
	// Process shift timer
	processSoftTimer8b(&shiftTimer);	
     8d8:	84 e6       	ldi	r24, 0x64	; 100
     8da:	91 e0       	ldi	r25, 0x01	; 1
     8dc:	d5 d7       	rcall	.+4010   	; 0x1888 <processSoftTimer8b>
	
	if (shiftTimer.FTop)
     8de:	80 91 64 01 	lds	r24, 0x0164
     8e2:	85 ff       	sbrs	r24, 5
     8e4:	14 c0       	rjmp	.+40     	; 0x90e <processLedIndicator+0x74>
	{
		// Check if finished
		if (wStartPos == bufStartPos)	
     8e6:	80 91 ce 01 	lds	r24, 0x01CE
     8ea:	90 91 d0 01 	lds	r25, 0x01D0
     8ee:	89 13       	cpse	r24, r25
     8f0:	03 c0       	rjmp	.+6      	; 0x8f8 <processLedIndicator+0x5e>
		{
			// Update state
			shifterState = LED_SHIFT_DONE;
     8f2:	10 92 cf 01 	sts	0x01CF, r1
     8f6:	0b c0       	rjmp	.+22     	; 0x90e <processLedIndicator+0x74>
		}
		else if (shifterState == LED_SHIFT_RIGHT)
     8f8:	90 91 cf 01 	lds	r25, 0x01CF
     8fc:	92 30       	cpi	r25, 0x02	; 2
     8fe:	49 f4       	brne	.+18     	; 0x912 <processLedIndicator+0x78>
// Increments index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t inc_buffer_position(uint8_t position)
{
	return (position >= LED_BUFFER_LENGTH - 1) ? 0 : position + 1;
     900:	8d 30       	cpi	r24, 0x0D	; 13
     902:	10 f4       	brcc	.+4      	; 0x908 <processLedIndicator+0x6e>
     904:	8f 5f       	subi	r24, 0xFF	; 255
     906:	01 c0       	rjmp	.+2      	; 0x90a <processLedIndicator+0x70>
     908:	80 e0       	ldi	r24, 0x00	; 0
			// Update state
			shifterState = LED_SHIFT_DONE;
		}
		else if (shifterState == LED_SHIFT_RIGHT)
		{
			wStartPos = inc_buffer_position(wStartPos);	
     90a:	80 93 ce 01 	sts	0x01CE, r24
		// Always start new cycle from specified buffer start position
		bufActivePos = wStartPos;
		next_wActivePos = wActivePos + 1;
		break;
	case NUM_DIGITS_TOTAL-1:
		next_wActivePos = 0;
     90e:	c0 e0       	ldi	r28, 0x00	; 0
     910:	07 c0       	rjmp	.+14     	; 0x920 <processLedIndicator+0x86>
// Decrements index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t dec_buffer_position(uint8_t position)
{
	return (position == 0) ? LED_BUFFER_LENGTH - 1 : position - 1;
     912:	88 23       	and	r24, r24
     914:	11 f0       	breq	.+4      	; 0x91a <processLedIndicator+0x80>
     916:	81 50       	subi	r24, 0x01	; 1
     918:	f8 cf       	rjmp	.-16     	; 0x90a <processLedIndicator+0x70>
     91a:	8d e0       	ldi	r24, 0x0D	; 13
     91c:	f6 cf       	rjmp	.-20     	; 0x90a <processLedIndicator+0x70>
		next_wActivePos = 0;
		// Shift LED window
		processWindowShifter();	
		break;
	default:
		next_wActivePos = wActivePos + 1;
     91e:	cf 5f       	subi	r28, 0xFF	; 255
		break;
	}		
	
	#ifdef 	USE_EXTRA_LED_DIGIT
	if (wActivePos == EXTRA_DIGIT_NUM)
     920:	80 91 63 01 	lds	r24, 0x0163
     924:	86 30       	cpi	r24, 0x06	; 6
     926:	21 f4       	brne	.+8      	; 0x930 <processLedIndicator+0x96>
	{
		// Output separate LEDs state
		set_led_segments(extra_led_state);
     928:	80 91 cd 01 	lds	r24, 0x01CD
     92c:	bd d0       	rcall	.+378    	; 0xaa8 <set_led_segments>
     92e:	10 c0       	rjmp	.+32     	; 0x950 <processLedIndicator+0xb6>
	}
	else
	#endif
	{
		// Output new segment data
		set_led_segments(led_data_buffer[bufActivePos]);
     930:	e0 91 62 01 	lds	r30, 0x0162
     934:	f0 e0       	ldi	r31, 0x00	; 0
     936:	ef 52       	subi	r30, 0x2F	; 47
     938:	fe 4f       	sbci	r31, 0xFE	; 254
     93a:	80 81       	ld	r24, Z
     93c:	b5 d0       	rcall	.+362    	; 0xaa8 <set_led_segments>
		// Wrap around buffer length
		bufActivePos = inc_buffer_position(bufActivePos );
     93e:	80 91 62 01 	lds	r24, 0x0162
// Increments index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t inc_buffer_position(uint8_t position)
{
	return (position >= LED_BUFFER_LENGTH - 1) ? 0 : position + 1;
     942:	8d 30       	cpi	r24, 0x0D	; 13
     944:	10 f4       	brcc	.+4      	; 0x94a <processLedIndicator+0xb0>
     946:	8f 5f       	subi	r24, 0xFF	; 255
     948:	01 c0       	rjmp	.+2      	; 0x94c <processLedIndicator+0xb2>
     94a:	80 e0       	ldi	r24, 0x00	; 0
	#endif
	{
		// Output new segment data
		set_led_segments(led_data_buffer[bufActivePos]);
		// Wrap around buffer length
		bufActivePos = inc_buffer_position(bufActivePos );
     94c:	80 93 62 01 	sts	0x0162, r24
	}
		
	wActivePos = next_wActivePos;
     950:	c0 93 63 01 	sts	0x0163, r28
	
	#ifdef CLEAN_OPERATION
	enable_led_segments();
	#endif

}
     954:	cf 91       	pop	r28
	}
		
	wActivePos = next_wActivePos;
	
	#ifdef CLEAN_OPERATION
	enable_led_segments();
     956:	bd c0       	rjmp	.+378    	; 0xad2 <enable_led_segments>

00000958 <fillLedBuffer>:
//---------------------------------------------//
// Fills buffer from (bufStartPos + offset) 
//	position with single char
//---------------------------------------------//
void fillLedBuffer(int8_t offset, uint8_t length, char c)
{
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	cf 93       	push	r28
     95e:	df 93       	push	r29
     960:	1f 92       	push	r1
     962:	cd b7       	in	r28, 0x3d	; 61
     964:	de b7       	in	r29, 0x3e	; 62
     966:	18 2f       	mov	r17, r24
     968:	84 2f       	mov	r24, r20
	uint8_t val = decode_led_char(c);
     96a:	69 83       	std	Y+1, r22	; 0x01
     96c:	70 df       	rcall	.-288    	; 0x84e <decode_led_char>
     96e:	08 2f       	mov	r16, r24
	// Ensure index is inside the buffer
	uint8_t position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
     970:	80 91 d0 01 	lds	r24, 0x01D0
     974:	81 0f       	add	r24, r17
     976:	81 df       	rcall	.-254    	; 0x87a <wrap_led_buffer_index>
	while(length--)
     978:	69 81       	ldd	r22, Y+1	; 0x01
     97a:	0a c0       	rjmp	.+20     	; 0x990 <fillLedBuffer+0x38>
	{
		led_data_buffer[position] = val;
     97c:	e8 2f       	mov	r30, r24
     97e:	f0 e0       	ldi	r31, 0x00	; 0
     980:	ef 52       	subi	r30, 0x2F	; 47
     982:	fe 4f       	sbci	r31, 0xFE	; 254
     984:	00 83       	st	Z, r16
// Increments index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t inc_buffer_position(uint8_t position)
{
	return (position >= LED_BUFFER_LENGTH - 1) ? 0 : position + 1;
     986:	8d 30       	cpi	r24, 0x0D	; 13
     988:	10 f4       	brcc	.+4      	; 0x98e <fillLedBuffer+0x36>
     98a:	8f 5f       	subi	r24, 0xFF	; 255
     98c:	01 c0       	rjmp	.+2      	; 0x990 <fillLedBuffer+0x38>
     98e:	80 e0       	ldi	r24, 0x00	; 0
void fillLedBuffer(int8_t offset, uint8_t length, char c)
{
	uint8_t val = decode_led_char(c);
	// Ensure index is inside the buffer
	uint8_t position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
	while(length--)
     990:	61 50       	subi	r22, 0x01	; 1
     992:	a0 f7       	brcc	.-24     	; 0x97c <fillLedBuffer+0x24>
	{
		led_data_buffer[position] = val;
		position = inc_buffer_position(position);
	}
}
     994:	0f 90       	pop	r0
     996:	df 91       	pop	r29
     998:	cf 91       	pop	r28
     99a:	1f 91       	pop	r17
     99c:	0f 91       	pop	r16
     99e:	08 95       	ret

000009a0 <startShiftingWindowLeft>:
//	LED window left 
//---------------------------------------------//
void startShiftingWindowLeft(void)
{
	// Clear spaces between menu states
	fillLedBuffer(-2,2,' ');
     9a0:	40 e2       	ldi	r20, 0x20	; 32
     9a2:	62 e0       	ldi	r22, 0x02	; 2
     9a4:	8e ef       	ldi	r24, 0xFE	; 254
     9a6:	d8 df       	rcall	.-80     	; 0x958 <fillLedBuffer>
	// Set new buffer position for writing
	bufStartPos = wrap_led_buffer_index( (int8_t)bufStartPos - (NUM_DIGITS + 2) );
     9a8:	80 91 d0 01 	lds	r24, 0x01D0
     9ac:	88 50       	subi	r24, 0x08	; 8
     9ae:	65 df       	rcall	.-310    	; 0x87a <wrap_led_buffer_index>
     9b0:	80 93 d0 01 	sts	0x01D0, r24
	// Set shifter state
	shifterState = LED_SHIFT_LEFT;
     9b4:	81 e0       	ldi	r24, 0x01	; 1
     9b6:	80 93 cf 01 	sts	0x01CF, r24
     9ba:	08 95       	ret

000009bc <startShiftingWindowRight>:
//	LED window right 
//---------------------------------------------//
void startShiftingWindowRight(void)
{
	// Clear spaces between menu states
	fillLedBuffer(NUM_DIGITS,2,' ');
     9bc:	40 e2       	ldi	r20, 0x20	; 32
     9be:	62 e0       	ldi	r22, 0x02	; 2
     9c0:	86 e0       	ldi	r24, 0x06	; 6
     9c2:	ca df       	rcall	.-108    	; 0x958 <fillLedBuffer>
	// Set new buffer position for writing
	bufStartPos = wrap_led_buffer_index( (int8_t)bufStartPos + NUM_DIGITS + 2 );
     9c4:	80 91 d0 01 	lds	r24, 0x01D0
     9c8:	88 5f       	subi	r24, 0xF8	; 248
     9ca:	57 df       	rcall	.-338    	; 0x87a <wrap_led_buffer_index>
     9cc:	80 93 d0 01 	sts	0x01D0, r24
	// Set shifter state
	shifterState = LED_SHIFT_RIGHT;
     9d0:	82 e0       	ldi	r24, 0x02	; 2
     9d2:	80 93 cf 01 	sts	0x01CF, r24
     9d6:	08 95       	ret

000009d8 <initLedIndicator>:
//---------------------------------------------//
//	Initialization
//	Call this function at start of your program
//---------------------------------------------//
void initLedIndicator()
{
     9d8:	cf 93       	push	r28
	uint8_t i;
	// First disable outputs
	disable_led_segments();
     9da:	82 d0       	rcall	.+260    	; 0xae0 <disable_led_segments>
     9dc:	c7 e0       	ldi	r28, 0x07	; 7
	// Fill shift register with non-active levels
	for (i=0;i<NUM_DIGITS_TOTAL;i++)
	{
		led_clock_pulse(!LED_DIGIT_ACT_LVL);
     9de:	81 e0       	ldi	r24, 0x01	; 1
     9e0:	53 d0       	rcall	.+166    	; 0xa88 <led_clock_pulse>
     9e2:	c1 50       	subi	r28, 0x01	; 1
{
	uint8_t i;
	// First disable outputs
	disable_led_segments();
	// Fill shift register with non-active levels
	for (i=0;i<NUM_DIGITS_TOTAL;i++)
     9e4:	e1 f7       	brne	.-8      	; 0x9de <initLedIndicator+0x6>
	{
		led_clock_pulse(!LED_DIGIT_ACT_LVL);
	}
	// Now enable outputs
	enable_led_segments();
     9e6:	75 d0       	rcall	.+234    	; 0xad2 <enable_led_segments>
	
	// Reset pointers
	wStartPos = 0;
     9e8:	10 92 ce 01 	sts	0x01CE, r1
	bufStartPos = 0;
     9ec:	10 92 d0 01 	sts	0x01D0, r1
	bufActivePos = 0;
     9f0:	10 92 62 01 	sts	0x0162, r1
	wActivePos = 0;
     9f4:	10 92 63 01 	sts	0x0163, r1
	#ifdef 	USE_EXTRA_LED_DIGIT
	extra_led_state = 0;
     9f8:	10 92 cd 01 	sts	0x01CD, r1
	#endif
	
	// Clear the buffer 
	fillLedBuffer(0,LED_BUFFER_LENGTH,' ');
     9fc:	40 e2       	ldi	r20, 0x20	; 32
     9fe:	6e e0       	ldi	r22, 0x0E	; 14
     a00:	80 e0       	ldi	r24, 0x00	; 0
     a02:	aa df       	rcall	.-172    	; 0x958 <fillLedBuffer>
	
	// Initialize shift timer - always enabled, but 
	//	processed only when shifting is active
	shifterState = LED_SHIFT_DONE;
     a04:	10 92 cf 01 	sts	0x01CF, r1
	shiftTimer.Enabled = 1;
     a08:	80 91 64 01 	lds	r24, 0x0164
	shiftTimer.RunOnce = 0;
     a0c:	81 60       	ori	r24, 0x01	; 1
     a0e:	8d 7f       	andi	r24, 0xFD	; 253
     a10:	80 93 64 01 	sts	0x0164, r24
	shiftTimer.Top = LED_SHIFT_INTERVAL-1;
     a14:	89 e0       	ldi	r24, 0x09	; 9
     a16:	80 93 66 01 	sts	0x0166, r24
}
     a1a:	cf 91       	pop	r28
     a1c:	08 95       	ret

00000a1e <printLedBuffer>:
// Arguments:
//		offset	- buffer index to start with (with respect to bufStartPos)
//		str - null-terminated char string
//---------------------------------------------//		
void printLedBuffer(int8_t offset, char* str)
{
     a1e:	1f 93       	push	r17
     a20:	cf 93       	push	r28
     a22:	df 93       	push	r29
     a24:	eb 01       	movw	r28, r22
	char c;
	uint8_t decoded_sym;
	// Ensure index is inside the buffer
	uint8_t buffer_position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
     a26:	90 91 d0 01 	lds	r25, 0x01D0
     a2a:	89 0f       	add	r24, r25
     a2c:	26 df       	rcall	.-436    	; 0x87a <wrap_led_buffer_index>
     a2e:	18 2f       	mov	r17, r24
	// Output chars
	while((c = *str++))
     a30:	0b c0       	rjmp	.+22     	; 0xa48 <printLedBuffer+0x2a>
	{
		decoded_sym = decode_led_char(c);
     a32:	0d df       	rcall	.-486    	; 0x84e <decode_led_char>
		led_data_buffer[buffer_position] = decoded_sym;
     a34:	e1 2f       	mov	r30, r17
     a36:	f0 e0       	ldi	r31, 0x00	; 0
     a38:	ef 52       	subi	r30, 0x2F	; 47
     a3a:	fe 4f       	sbci	r31, 0xFE	; 254
     a3c:	80 83       	st	Z, r24
// Increments index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t inc_buffer_position(uint8_t position)
{
	return (position >= LED_BUFFER_LENGTH - 1) ? 0 : position + 1;
     a3e:	1d 30       	cpi	r17, 0x0D	; 13
     a40:	10 f4       	brcc	.+4      	; 0xa46 <printLedBuffer+0x28>
     a42:	1f 5f       	subi	r17, 0xFF	; 255
     a44:	01 c0       	rjmp	.+2      	; 0xa48 <printLedBuffer+0x2a>
     a46:	10 e0       	ldi	r17, 0x00	; 0
	char c;
	uint8_t decoded_sym;
	// Ensure index is inside the buffer
	uint8_t buffer_position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
	// Output chars
	while((c = *str++))
     a48:	89 91       	ld	r24, Y+
     a4a:	81 11       	cpse	r24, r1
     a4c:	f2 cf       	rjmp	.-28     	; 0xa32 <printLedBuffer+0x14>
	{
		decoded_sym = decode_led_char(c);
		led_data_buffer[buffer_position] = decoded_sym;
		buffer_position = inc_buffer_position(buffer_position);
	}
}
     a4e:	df 91       	pop	r29
     a50:	cf 91       	pop	r28
     a52:	1f 91       	pop	r17
     a54:	08 95       	ret

00000a56 <setComma>:
//	buffer cell
//---------------------------------------------//
void setComma(int8_t offset)
{
	// Ensure index is inside the buffer
	uint8_t position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
     a56:	90 91 d0 01 	lds	r25, 0x01D0
     a5a:	89 0f       	add	r24, r25
     a5c:	0e df       	rcall	.-484    	; 0x87a <wrap_led_buffer_index>
	led_data_buffer[position] |= (SEGH);
     a5e:	e8 2f       	mov	r30, r24
     a60:	f0 e0       	ldi	r31, 0x00	; 0
     a62:	ef 52       	subi	r30, 0x2F	; 47
     a64:	fe 4f       	sbci	r31, 0xFE	; 254
     a66:	80 81       	ld	r24, Z
     a68:	80 68       	ori	r24, 0x80	; 128
     a6a:	80 83       	st	Z, r24
     a6c:	08 95       	ret

00000a6e <setExtraLeds>:
// Argument is ORed with current LED state
//---------------------------------------------//
inline void setExtraLeds(uint8_t leds_set_value)
{
		//asm("cli");
		extra_led_state |= leds_set_value;
     a6e:	90 91 cd 01 	lds	r25, 0x01CD
     a72:	98 2b       	or	r25, r24
     a74:	90 93 cd 01 	sts	0x01CD, r25
     a78:	08 95       	ret

00000a7a <clearExtraLeds>:
// Argument is AND NOTed with current LED state
//---------------------------------------------//
inline void clearExtraLeds(uint8_t leds_clear_value)
{
		//asm("cli");
		extra_led_state &= ~leds_clear_value;
     a7a:	90 91 cd 01 	lds	r25, 0x01CD
     a7e:	80 95       	com	r24
     a80:	89 23       	and	r24, r25
     a82:	80 93 cd 01 	sts	0x01CD, r24
     a86:	08 95       	ret

00000a88 <led_clock_pulse>:


// Clocks in bit into the shift register
void led_clock_pulse(uint8_t bit)
{
	if (bit)
     a88:	88 23       	and	r24, r24
     a8a:	11 f0       	breq	.+4      	; 0xa90 <led_clock_pulse+0x8>
		PORTB |= (1<<PB_LED_DOUT);
     a8c:	c0 9a       	sbi	0x18, 0	; 24
     a8e:	01 c0       	rjmp	.+2      	; 0xa92 <led_clock_pulse+0xa>
	else
		PORTB &= ~(1<<PB_LED_DOUT);
     a90:	c0 98       	cbi	0x18, 0	; 24
     a92:	8a e1       	ldi	r24, 0x1A	; 26
     a94:	8a 95       	dec	r24
     a96:	f1 f7       	brne	.-4      	; 0xa94 <led_clock_pulse+0xc>
     a98:	00 c0       	rjmp	.+0      	; 0xa9a <led_clock_pulse+0x12>
	_delay_us(SETUP_DELAY_US);
	PORTB |= (1<<PB_LED_CLK);
     a9a:	c2 9a       	sbi	0x18, 2	; 24
     a9c:	8a e1       	ldi	r24, 0x1A	; 26
     a9e:	8a 95       	dec	r24
     aa0:	f1 f7       	brne	.-4      	; 0xa9e <led_clock_pulse+0x16>
     aa2:	00 c0       	rjmp	.+0      	; 0xaa4 <led_clock_pulse+0x1c>
	_delay_us(SHIFT_DELAY_US);
	PORTB &= ~(1<<PB_LED_CLK);
     aa4:	c2 98       	cbi	0x18, 2	; 24
     aa6:	08 95       	ret

00000aa8 <set_led_segments>:
// Outputs decoded segment data to port bits
void set_led_segments(uint8_t seg_ch)
{
	uint8_t pdat;
	seg_ch ^= LED_SEGMENT_MASK;
	pdat = PORTC & ~( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
     aa8:	25 b3       	in	r18, 0x15	; 21
	pdat |= (seg_ch & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
     aaa:	98 2f       	mov	r25, r24
     aac:	9f 71       	andi	r25, 0x1F	; 31
// Outputs decoded segment data to port bits
void set_led_segments(uint8_t seg_ch)
{
	uint8_t pdat;
	seg_ch ^= LED_SEGMENT_MASK;
	pdat = PORTC & ~( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
     aae:	20 7e       	andi	r18, 0xE0	; 224
	pdat |= (seg_ch & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
     ab0:	92 2b       	or	r25, r18
	PORTC = pdat;
     ab2:	95 bb       	out	0x15, r25	; 21
	seg_ch >>= 2;
	pdat = PORTB & ~( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     ab4:	98 b3       	in	r25, 0x18	; 24
	uint8_t pdat;
	seg_ch ^= LED_SEGMENT_MASK;
	pdat = PORTC & ~( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
	pdat |= (seg_ch & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
	PORTC = pdat;
	seg_ch >>= 2;
     ab6:	86 95       	lsr	r24
     ab8:	86 95       	lsr	r24
	pdat = PORTB & ~( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
	pdat |= (seg_ch & ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) ));
     aba:	88 73       	andi	r24, 0x38	; 56
	seg_ch ^= LED_SEGMENT_MASK;
	pdat = PORTC & ~( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
	pdat |= (seg_ch & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
	PORTC = pdat;
	seg_ch >>= 2;
	pdat = PORTB & ~( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     abc:	97 7c       	andi	r25, 0xC7	; 199
	pdat |= (seg_ch & ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) ));
     abe:	89 2b       	or	r24, r25
	PORTB = pdat;
     ac0:	88 bb       	out	0x18, r24	; 24
     ac2:	08 95       	ret

00000ac4 <enable_led_segments_pullups>:

// Turns segment port bits to HI-Z and
// enables pull-ups
void enable_led_segments_pullups()
{
	PORTC |= ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
     ac4:	85 b3       	in	r24, 0x15	; 21
     ac6:	8f 61       	ori	r24, 0x1F	; 31
     ac8:	85 bb       	out	0x15, r24	; 21
	PORTB |= ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     aca:	88 b3       	in	r24, 0x18	; 24
     acc:	88 63       	ori	r24, 0x38	; 56
     ace:	88 bb       	out	0x18, r24	; 24
     ad0:	08 95       	ret

00000ad2 <enable_led_segments>:
}	

void enable_led_segments()
{
	DDRC |= ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
     ad2:	84 b3       	in	r24, 0x14	; 20
     ad4:	8f 61       	ori	r24, 0x1F	; 31
     ad6:	84 bb       	out	0x14, r24	; 20
	DDRB |= ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     ad8:	87 b3       	in	r24, 0x17	; 23
     ada:	88 63       	ori	r24, 0x38	; 56
     adc:	87 bb       	out	0x17, r24	; 23
     ade:	08 95       	ret

00000ae0 <disable_led_segments>:
}

void disable_led_segments()
{
	DDRC &= ~( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
     ae0:	84 b3       	in	r24, 0x14	; 20
     ae2:	80 7e       	andi	r24, 0xE0	; 224
     ae4:	84 bb       	out	0x14, r24	; 20
	DDRB &= ~( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     ae6:	87 b3       	in	r24, 0x17	; 23
     ae8:	87 7c       	andi	r24, 0xC7	; 199
     aea:	87 bb       	out	0x17, r24	; 23
     aec:	08 95       	ret

00000aee <capture_button_state>:


void capture_button_state()
{
	uint8_t pdat;
	pdat = PINB  & ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     aee:	86 b3       	in	r24, 0x16	; 22
     af0:	88 73       	andi	r24, 0x38	; 56
	pdat <<= 2;
	pdat |= (PINC & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
     af2:	93 b3       	in	r25, 0x13	; 19

void capture_button_state()
{
	uint8_t pdat;
	pdat = PINB  & ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
	pdat <<= 2;
     af4:	88 0f       	add	r24, r24
     af6:	88 0f       	add	r24, r24
	pdat |= (PINC & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
     af8:	9f 71       	andi	r25, 0x1F	; 31
     afa:	89 2b       	or	r24, r25
	raw_button_state = pdat ^ RAW_BUTTONS_INVERSE_MASK;
     afc:	80 95       	com	r24
     afe:	80 93 df 01 	sts	0x01DF, r24
     b02:	08 95       	ret

00000b04 <processItemFunction>:
//	Arguments:
//		funcAddr - address of the function to run.
//-----------------------------------------------------------------//
static inline void processItemFunction(FuncPtr funcAddr)
{
	if (funcAddr != 0)
     b04:	00 97       	sbiw	r24, 0x00	; 0
     b06:	11 f0       	breq	.+4      	; 0xb0c <processItemFunction+0x8>
		((FuncPtr)funcAddr)();
     b08:	fc 01       	movw	r30, r24
     b0a:	09 94       	ijmp
     b0c:	08 95       	ret

00000b0e <mf_setTempLeave>:
	userTimer.Enabled = 1;
}

void mf_leafExit(void)
{
	userTimer.Enabled = 0;	
     b0e:	80 91 72 01 	lds	r24, 0x0172
     b12:	8e 7f       	andi	r24, 0xFE	; 254
     b14:	80 93 72 01 	sts	0x0172, r24
}

void mf_setTempLeave(void)
{
	mf_leafExit();
	if (!(jumpFlags & DISCARD_CHANGES))
     b18:	80 91 76 01 	lds	r24, 0x0176
     b1c:	85 fd       	sbrc	r24, 5
     b1e:	04 c0       	rjmp	.+8      	; 0xb28 <mf_setTempLeave+0x1a>
	{
		p.setup_temp_value = setupValue_u8;		// Apply changes		
     b20:	80 91 70 01 	lds	r24, 0x0170
     b24:	80 93 b9 01 	sts	0x01B9, r24
     b28:	08 95       	ret

00000b2a <mf_leafSelectAct>:
	userTimer.FA_GE = 1;	
}

void mf_leafSelectAct(void)
{
	userTimer.Timer = 0;
     b2a:	10 92 73 01 	sts	0x0173, r1
	userTimer.Top = BLINK_PERIOD - 1;
     b2e:	87 e0       	ldi	r24, 0x07	; 7
     b30:	80 93 74 01 	sts	0x0174, r24
	userTimer.CompA = BLINK_PERIOD / 2;
     b34:	84 e0       	ldi	r24, 0x04	; 4
     b36:	80 93 75 01 	sts	0x0175, r24
	userTimer.Enabled = 1;
     b3a:	e2 e7       	ldi	r30, 0x72	; 114
     b3c:	f1 e0       	ldi	r31, 0x01	; 1
     b3e:	80 81       	ld	r24, Z
     b40:	81 60       	ori	r24, 0x01	; 1
     b42:	80 83       	st	Z, r24
     b44:	08 95       	ret

00000b46 <mf_sndenLeave>:
}

void mf_leafExit(void)
{
	userTimer.Enabled = 0;	
     b46:	80 91 72 01 	lds	r24, 0x0172
     b4a:	8e 7f       	andi	r24, 0xFE	; 254
     b4c:	80 93 72 01 	sts	0x0172, r24
}

void mf_sndenLeave(void)
{
	mf_leafExit();
	if (!(jumpFlags & DISCARD_CHANGES))
     b50:	80 91 76 01 	lds	r24, 0x0176
     b54:	85 fd       	sbrc	r24, 5
     b56:	04 c0       	rjmp	.+8      	; 0xb60 <mf_sndenLeave+0x1a>
	{
		p.sound_enable = setupValue_u8;		// Apply changes
     b58:	80 91 70 01 	lds	r24, 0x0170
     b5c:	80 93 bb 01 	sts	0x01BB, r24
     b60:	08 95       	ret

00000b62 <mf_autopoffLeave>:
	userTimer.Enabled = 1;
}

void mf_leafExit(void)
{
	userTimer.Enabled = 0;	
     b62:	80 91 72 01 	lds	r24, 0x0172
     b66:	8e 7f       	andi	r24, 0xFE	; 254
     b68:	80 93 72 01 	sts	0x0172, r24
}

void mf_autopoffLeave(void)
{
	mf_leafExit();
	if (!(jumpFlags & DISCARD_CHANGES))
     b6c:	80 91 76 01 	lds	r24, 0x0176
     b70:	85 fd       	sbrc	r24, 5
     b72:	04 c0       	rjmp	.+8      	; 0xb7c <mf_autopoffLeave+0x1a>
	{
		p.power_off_timeout = setupValue_u8;		// Apply changes
     b74:	80 91 70 01 	lds	r24, 0x0170
     b78:	80 93 bc 01 	sts	0x01BC, r24
     b7c:	08 95       	ret

00000b7e <mf_actpoffLeave>:
	printLedBuffer(0,"   OFF");
}

void mf_actpoffLeave(void)
{
	autoPowerOffState = 0;	
     b7e:	10 92 60 01 	sts	0x0160, r1
     b82:	08 95       	ret

00000b84 <mf_calibDoExit>:
	userTimer.Enabled = 1;
}

void mf_leafExit(void)
{
	userTimer.Enabled = 0;	
     b84:	e2 e7       	ldi	r30, 0x72	; 114
     b86:	f1 e0       	ldi	r31, 0x01	; 1
     b88:	80 81       	ld	r24, Z
     b8a:	8e 7f       	andi	r24, 0xFE	; 254
     b8c:	80 83       	st	Z, r24


void mf_calibDoExit(void)
{
	mf_leafExit();
	heaterState &= ~CALIBRATION_ACTIVE;
     b8e:	01 98       	cbi	0x00, 1	; 0
     b90:	08 95       	ret

00000b92 <mf_actpoffDo>:
}

// Indication of power off mode
void mf_actpoffDo(void)
{
	printLedBuffer(0,"   OFF");
     b92:	67 ea       	ldi	r22, 0xA7	; 167
     b94:	70 e0       	ldi	r23, 0x00	; 0
     b96:	80 e0       	ldi	r24, 0x00	; 0
     b98:	42 cf       	rjmp	.-380    	; 0xa1e <printLedBuffer>

00000b9a <mf_cdoneDo>:
	saveCalibrationToEEPROM();
}

void mf_cdoneDo(void)
{
	printLedBuffer(0," DONE ");
     b9a:	6e ea       	ldi	r22, 0xAE	; 174
     b9c:	70 e0       	ldi	r23, 0x00	; 0
     b9e:	80 e0       	ldi	r24, 0x00	; 0
     ba0:	3e cf       	rjmp	.-388    	; 0xa1e <printLedBuffer>

00000ba2 <mf_actpoffSelect>:
// Menu item "Active power off"
// Specific menu item - used as indicator of system state
//------------------------------------------------//
void mf_actpoffSelect(void)
{
	clearExtraLeds(LED_TEMP | LED_ROLL);
     ba2:	80 ec       	ldi	r24, 0xC0	; 192
     ba4:	6a df       	rcall	.-300    	; 0xa7a <clearExtraLeds>
	autoPowerOffState = AUTO_POFF_ACTIVE;	// Set global flag
     ba6:	81 e0       	ldi	r24, 0x01	; 1
     ba8:	80 93 60 01 	sts	0x0160, r24
     bac:	08 95       	ret

00000bae <mf_leafSelect>:

// Select and exit functions, common for leaf menu items 

void mf_leafSelect(void)
{
	clearExtraLeds(LED_TEMP | LED_ROLL);
     bae:	80 ec       	ldi	r24, 0xC0	; 192
     bb0:	64 df       	rcall	.-312    	; 0xa7a <clearExtraLeds>
	userTimer.FA_GE = 1;	
     bb2:	e2 e7       	ldi	r30, 0x72	; 114
     bb4:	f1 e0       	ldi	r31, 0x01	; 1
     bb6:	80 81       	ld	r24, Z
     bb8:	80 61       	ori	r24, 0x10	; 16
     bba:	80 83       	st	Z, r24
     bbc:	08 95       	ret

00000bbe <mf_calibP2Select>:
	printLedBuffer(0,"P1    ");
}

void mf_calibP2Select(void)
{
	mf_leafSelect();
     bbe:	f7 df       	rcall	.-18     	; 0xbae <mf_leafSelect>
	setupValue_u8 = cp.cpoint2;	// determine which point to use at select func
     bc0:	80 91 b4 01 	lds	r24, 0x01B4
     bc4:	80 93 70 01 	sts	0x0170, r24
	cpointNum = 2;
     bc8:	82 e0       	ldi	r24, 0x02	; 2
     bca:	80 93 71 01 	sts	0x0171, r24
	printLedBuffer(0,"P2    ");
     bce:	65 eb       	ldi	r22, 0xB5	; 181
     bd0:	70 e0       	ldi	r23, 0x00	; 0
     bd2:	80 e0       	ldi	r24, 0x00	; 0
     bd4:	24 cf       	rjmp	.-440    	; 0xa1e <printLedBuffer>

00000bd6 <mf_calibP1Select>:
// There are two calibration points - the menu item is 
// same for both.
//------------------------------------------------//
void mf_calibP1Select(void)
{
	mf_leafSelect();
     bd6:	eb df       	rcall	.-42     	; 0xbae <mf_leafSelect>
	setupValue_u8 = cp.cpoint1;	// determine which point to use at select func
     bd8:	80 91 b3 01 	lds	r24, 0x01B3
     bdc:	80 93 70 01 	sts	0x0170, r24
	cpointNum = 1;
     be0:	81 e0       	ldi	r24, 0x01	; 1
     be2:	80 93 71 01 	sts	0x0171, r24
	printLedBuffer(0,"P1    ");
     be6:	6c eb       	ldi	r22, 0xBC	; 188
     be8:	70 e0       	ldi	r23, 0x00	; 0
     bea:	80 e0       	ldi	r24, 0x00	; 0
     bec:	18 cf       	rjmp	.-464    	; 0xa1e <printLedBuffer>

00000bee <mf_autopoffSelect>:
//------------------------------------------------//
// Menu item "Auto power off setup"
//------------------------------------------------//
void mf_autopoffSelect(void)
{
	mf_leafSelect();						
     bee:	df df       	rcall	.-66     	; 0xbae <mf_leafSelect>
	setupValue_u8 = p.power_off_timeout;	// Make a copy of parameter being changed
     bf0:	80 91 bc 01 	lds	r24, 0x01BC
     bf4:	80 93 70 01 	sts	0x0170, r24
     bf8:	08 95       	ret

00000bfa <mf_sndenSelect>:
//------------------------------------------------//
// Menu item "Sound enable/disable"
//------------------------------------------------//
void mf_sndenSelect(void)
{
	mf_leafSelect();					
     bfa:	d9 df       	rcall	.-78     	; 0xbae <mf_leafSelect>
	setupValue_u8 = p.sound_enable;		// Make a copy of parameter being changed
     bfc:	80 91 bb 01 	lds	r24, 0x01BB
     c00:	80 93 70 01 	sts	0x0170, r24
     c04:	08 95       	ret

00000c06 <mf_rollLeave>:
	userTimer.Enabled = 1;
}

void mf_leafExit(void)
{
	userTimer.Enabled = 0;	
     c06:	e2 e7       	ldi	r30, 0x72	; 114
     c08:	f1 e0       	ldi	r31, 0x01	; 1
     c0a:	80 81       	ld	r24, Z
     c0c:	8e 7f       	andi	r24, 0xFE	; 254
     c0e:	80 83       	st	Z, r24
}

void mf_rollLeave(void)
{
	mf_leafExit();
	clearExtraLeds(LED_ROLL);
     c10:	80 e4       	ldi	r24, 0x40	; 64
     c12:	33 cf       	rjmp	.-410    	; 0xa7a <clearExtraLeds>

00000c14 <mf_setTempSelect>:
// Menu item "Temperature setting"
// TOP level
//------------------------------------------------//
void mf_setTempSelect(void)
{
	clearExtraLeds(LED_TEMP);
     c14:	80 e8       	ldi	r24, 0x80	; 128
     c16:	31 df       	rcall	.-414    	; 0xa7a <clearExtraLeds>
	mf_leafSelectAct();						// setup and start timer
     c18:	88 df       	rcall	.-240    	; 0xb2a <mf_leafSelectAct>
	setupValue_u8 = p.setup_temp_value;		// Make a copy of parameter being changed
     c1a:	80 91 b9 01 	lds	r24, 0x01B9
     c1e:	80 93 70 01 	sts	0x0170, r24
     c22:	08 95       	ret

00000c24 <mf_realTempLeave>:
	}
}

void mf_realTempLeave(void)
{
	clearExtraLeds(LED_TEMP);
     c24:	80 e8       	ldi	r24, 0x80	; 128
     c26:	29 cf       	rjmp	.-430    	; 0xa7a <clearExtraLeds>

00000c28 <mf_cdoneSelect>:
// There are two calibration points - the menu item is
// same for both.
//------------------------------------------------//
void mf_cdoneSelect(void)
{
	applyCalibrationPoint(cpointNum,setupValue_u8);
     c28:	20 91 70 01 	lds	r18, 0x0170
}

void applyCalibrationPoint(uint8_t cpointNum, uint8_t cpointVal)
{
	if (cpointNum == 1)
     c2c:	30 91 71 01 	lds	r19, 0x0171
     c30:	80 91 ae 01 	lds	r24, 0x01AE
     c34:	90 91 af 01 	lds	r25, 0x01AF
     c38:	31 30       	cpi	r19, 0x01	; 1
     c3a:	39 f4       	brne	.+14     	; 0xc4a <mf_cdoneSelect+0x22>
	{
		cp.cpoint1_adc = adc_normalized;
     c3c:	90 93 b6 01 	sts	0x01B6, r25
     c40:	80 93 b5 01 	sts	0x01B5, r24
		cp.cpoint1 = cpointVal;
     c44:	20 93 b3 01 	sts	0x01B3, r18
     c48:	06 c0       	rjmp	.+12     	; 0xc56 <mf_cdoneSelect+0x2e>
	}
	else
	{
		cp.cpoint2_adc = adc_normalized;
     c4a:	90 93 b8 01 	sts	0x01B8, r25
     c4e:	80 93 b7 01 	sts	0x01B7, r24
		cp.cpoint2 = cpointVal;
     c52:	20 93 b4 01 	sts	0x01B4, r18
	}
	calculateCoeffs();
     c56:	00 db       	rcall	.-2560   	; 0x258 <calculateCoeffs>
	saveCalibrationToEEPROM();
     c58:	46 cd       	rjmp	.-1396   	; 0x6e6 <saveCalibrationToEEPROM>

00000c5a <mf_autopoffDo>:
}

void mf_autopoffDo(void)
{
	char *str = (char *)&temp_str;
	memcpy_P(str,&ms_autoPoffDo,7);	
     c5a:	47 e0       	ldi	r20, 0x07	; 7
     c5c:	50 e0       	ldi	r21, 0x00	; 0
     c5e:	6c e6       	ldi	r22, 0x6C	; 108
     c60:	70 e0       	ldi	r23, 0x00	; 0
     c62:	80 ee       	ldi	r24, 0xE0	; 224
     c64:	91 e0       	ldi	r25, 0x01	; 1
     c66:	b0 d7       	rcall	.+3936   	; 0x1bc8 <memcpy_P>
		
	if (button_state & (BD_UP | BR_UP))
     c68:	80 91 5c 01 	lds	r24, 0x015C
     c6c:	90 91 5d 01 	lds	r25, 0x015D
     c70:	9c 01       	movw	r18, r24
     c72:	20 74       	andi	r18, 0x40	; 64
     c74:	34 70       	andi	r19, 0x04	; 4
     c76:	23 2b       	or	r18, r19
     c78:	31 f0       	breq	.+12     	; 0xc86 <mf_autopoffDo+0x2c>
	{
		if (setupValue_u8 < MAX_POWEROFF_TIMEOUT)
     c7a:	80 91 70 01 	lds	r24, 0x0170
     c7e:	8f 35       	cpi	r24, 0x5F	; 95
     c80:	68 f4       	brcc	.+26     	; 0xc9c <mf_autopoffDo+0x42>
			setupValue_u8 += POWEROFF_SET_STEP;
     c82:	8b 5f       	subi	r24, 0xFB	; 251
     c84:	09 c0       	rjmp	.+18     	; 0xc98 <mf_autopoffDo+0x3e>
		restartMenuTimer();
	}
	else if (button_state & (BD_DOWN | BR_DOWN))
     c86:	80 78       	andi	r24, 0x80	; 128
     c88:	98 70       	andi	r25, 0x08	; 8
     c8a:	89 2b       	or	r24, r25
     c8c:	49 f0       	breq	.+18     	; 0xca0 <mf_autopoffDo+0x46>
	{
		if (setupValue_u8 > MIN_POWEROFF_TIMEOUT)
     c8e:	80 91 70 01 	lds	r24, 0x0170
     c92:	86 30       	cpi	r24, 0x06	; 6
     c94:	18 f0       	brcs	.+6      	; 0xc9c <mf_autopoffDo+0x42>
			setupValue_u8 -= POWEROFF_SET_STEP;
     c96:	85 50       	subi	r24, 0x05	; 5
     c98:	80 93 70 01 	sts	0x0170, r24
//	 Restarts menu state timeout
//	Should be used in RUN function when control buttons are pressed.
//-----------------------------------------------------------------//
static void restartMenuTimer(void)
{
	menuTimer.Timer = 0;
     c9c:	10 92 7e 00 	sts	0x007E, r1
		if (setupValue_u8 > MIN_POWEROFF_TIMEOUT)
			setupValue_u8 -= POWEROFF_SET_STEP;
		restartMenuTimer();
	}	
		
	if (userTimer.FA_GE)
     ca0:	80 91 72 01 	lds	r24, 0x0172
     ca4:	84 ff       	sbrs	r24, 4
     ca6:	10 c0       	rjmp	.+32     	; 0xcc8 <mf_autopoffDo+0x6e>
	{
		if (setupValue_u8 < MAX_POWEROFF_TIMEOUT)
     ca8:	80 91 70 01 	lds	r24, 0x0170
     cac:	8f 35       	cpi	r24, 0x5F	; 95
     cae:	30 f4       	brcc	.+12     	; 0xcbc <mf_autopoffDo+0x62>
		{
			u16toa_align_right(setupValue_u8,str + 4,NO_TERMINATING_ZERO | 2);	
     cb0:	42 e8       	ldi	r20, 0x82	; 130
     cb2:	64 ee       	ldi	r22, 0xE4	; 228
     cb4:	71 e0       	ldi	r23, 0x01	; 1
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	24 d2       	rcall	.+1096   	; 0x1102 <u16toa_align_right>
     cba:	06 c0       	rjmp	.+12     	; 0xcc8 <mf_autopoffDo+0x6e>
		}			
		else 
		{
			str[4] = 'N';
     cbc:	8e e4       	ldi	r24, 0x4E	; 78
     cbe:	80 93 e4 01 	sts	0x01E4, r24
			str[5] = 'O';
     cc2:	8f e4       	ldi	r24, 0x4F	; 79
     cc4:	80 93 e5 01 	sts	0x01E5, r24
		}			
	}		
		
	printLedBuffer(0,str);
     cc8:	60 ee       	ldi	r22, 0xE0	; 224
     cca:	71 e0       	ldi	r23, 0x01	; 1
     ccc:	80 e0       	ldi	r24, 0x00	; 0
     cce:	a7 ce       	rjmp	.-690    	; 0xa1e <printLedBuffer>

00000cd0 <mf_calibDo>:
}

void mf_calibDo(void)
{
	char *str = (char *)&temp_str;
	memcpy_P(str,&ms_calibDo,4);
     cd0:	44 e0       	ldi	r20, 0x04	; 4
     cd2:	50 e0       	ldi	r21, 0x00	; 0
     cd4:	68 e6       	ldi	r22, 0x68	; 104
     cd6:	70 e0       	ldi	r23, 0x00	; 0
     cd8:	80 ee       	ldi	r24, 0xE0	; 224
     cda:	91 e0       	ldi	r25, 0x01	; 1
     cdc:	75 d7       	rcall	.+3818   	; 0x1bc8 <memcpy_P>
	
	if (button_state & (BD_UP | BR_UP))
     cde:	80 91 5c 01 	lds	r24, 0x015C
     ce2:	90 91 5d 01 	lds	r25, 0x015D
     ce6:	9c 01       	movw	r18, r24
     ce8:	20 74       	andi	r18, 0x40	; 64
     cea:	34 70       	andi	r19, 0x04	; 4
     cec:	23 2b       	or	r18, r19
     cee:	31 f0       	breq	.+12     	; 0xcfc <mf_calibDo+0x2c>
	{
		if (setupValue_u8 < MAX_CALIB_TEMP)
     cf0:	80 91 70 01 	lds	r24, 0x0170
     cf4:	8a 3f       	cpi	r24, 0xFA	; 250
     cf6:	68 f4       	brcc	.+26     	; 0xd12 <mf_calibDo+0x42>
		setupValue_u8 += CALIB_TEMP_STEP;
     cf8:	8f 5f       	subi	r24, 0xFF	; 255
     cfa:	09 c0       	rjmp	.+18     	; 0xd0e <mf_calibDo+0x3e>
	}
	else if (button_state & (BD_DOWN | BR_DOWN))
     cfc:	80 78       	andi	r24, 0x80	; 128
     cfe:	98 70       	andi	r25, 0x08	; 8
     d00:	89 2b       	or	r24, r25
     d02:	39 f0       	breq	.+14     	; 0xd12 <mf_calibDo+0x42>
	{
		if (setupValue_u8 > MIN_CALIB_TEMP)
     d04:	80 91 70 01 	lds	r24, 0x0170
     d08:	8b 30       	cpi	r24, 0x0B	; 11
     d0a:	18 f0       	brcs	.+6      	; 0xd12 <mf_calibDo+0x42>
		setupValue_u8 -= CALIB_TEMP_STEP;
     d0c:	81 50       	subi	r24, 0x01	; 1
     d0e:	80 93 70 01 	sts	0x0170, r24
	}
	
	if (userTimer.FA_GE)
     d12:	80 91 72 01 	lds	r24, 0x0172
     d16:	84 ff       	sbrs	r24, 4
     d18:	09 c0       	rjmp	.+18     	; 0xd2c <mf_calibDo+0x5c>
	{
		u16toa_align_right(setupValue_u8,str,3);
     d1a:	43 e0       	ldi	r20, 0x03	; 3
     d1c:	60 ee       	ldi	r22, 0xE0	; 224
     d1e:	71 e0       	ldi	r23, 0x01	; 1
     d20:	80 91 70 01 	lds	r24, 0x0170
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	ed d1       	rcall	.+986    	; 0x1102 <u16toa_align_right>
		resetAutoPowerOffCounter();
     d28:	2c d6       	rcall	.+3160   	; 0x1982 <resetAutoPowerOffCounter>
		heaterState |= CALIBRATION_ACTIVE;
     d2a:	01 9a       	sbi	0x00, 1	; 0
	}
	
	printLedBuffer(3,str);
     d2c:	60 ee       	ldi	r22, 0xE0	; 224
     d2e:	71 e0       	ldi	r23, 0x01	; 1
     d30:	83 e0       	ldi	r24, 0x03	; 3
     d32:	75 ce       	rjmp	.-790    	; 0xa1e <printLedBuffer>

00000d34 <mf_sndenDo>:
}

void mf_sndenDo(void)
{
	char *str = (char *)&temp_str;
	memcpy_P(str,&ms_soundEnDo,7);	
     d34:	47 e0       	ldi	r20, 0x07	; 7
     d36:	50 e0       	ldi	r21, 0x00	; 0
     d38:	63 e7       	ldi	r22, 0x73	; 115
     d3a:	70 e0       	ldi	r23, 0x00	; 0
     d3c:	80 ee       	ldi	r24, 0xE0	; 224
     d3e:	91 e0       	ldi	r25, 0x01	; 1
     d40:	43 d7       	rcall	.+3718   	; 0x1bc8 <memcpy_P>
		
	if (button_state & (BD_UP | BD_DOWN))
     d42:	80 91 5c 01 	lds	r24, 0x015C
     d46:	90 91 5d 01 	lds	r25, 0x015D
     d4a:	80 7c       	andi	r24, 0xC0	; 192
     d4c:	99 27       	eor	r25, r25
     d4e:	89 2b       	or	r24, r25
     d50:	49 f0       	breq	.+18     	; 0xd64 <mf_sndenDo+0x30>
	{
		setupValue_u8 = !setupValue_u8;
     d52:	81 e0       	ldi	r24, 0x01	; 1
     d54:	90 91 70 01 	lds	r25, 0x0170
     d58:	91 11       	cpse	r25, r1
     d5a:	80 e0       	ldi	r24, 0x00	; 0
     d5c:	80 93 70 01 	sts	0x0170, r24
//	 Restarts menu state timeout
//	Should be used in RUN function when control buttons are pressed.
//-----------------------------------------------------------------//
static void restartMenuTimer(void)
{
	menuTimer.Timer = 0;
     d60:	10 92 7e 00 	sts	0x007E, r1
	{
		setupValue_u8 = !setupValue_u8;
		restartMenuTimer();
	}			
		
	if (userTimer.FA_GE)
     d64:	80 91 72 01 	lds	r24, 0x0172
     d68:	84 ff       	sbrs	r24, 4
     d6a:	11 c0       	rjmp	.+34     	; 0xd8e <mf_sndenDo+0x5a>
	{
		if (setupValue_u8)		
     d6c:	80 91 70 01 	lds	r24, 0x0170
     d70:	88 23       	and	r24, r24
     d72:	29 f0       	breq	.+10     	; 0xd7e <mf_sndenDo+0x4a>
		{
			str[4] = 'O';
     d74:	8f e4       	ldi	r24, 0x4F	; 79
     d76:	80 93 e4 01 	sts	0x01E4, r24
			str[5] = 'N';
     d7a:	8e e4       	ldi	r24, 0x4E	; 78
     d7c:	06 c0       	rjmp	.+12     	; 0xd8a <mf_sndenDo+0x56>
		}
		else
		{
			str[3] = 'O';
     d7e:	8f e4       	ldi	r24, 0x4F	; 79
     d80:	80 93 e3 01 	sts	0x01E3, r24
			str[4] = 'F';
     d84:	86 e4       	ldi	r24, 0x46	; 70
     d86:	80 93 e4 01 	sts	0x01E4, r24
			str[5] = 'F';
     d8a:	80 93 e5 01 	sts	0x01E5, r24
		}			
	}
		
	printLedBuffer(0,str);
     d8e:	60 ee       	ldi	r22, 0xE0	; 224
     d90:	71 e0       	ldi	r23, 0x01	; 1
     d92:	80 e0       	ldi	r24, 0x00	; 0
     d94:	44 de       	rcall	.-888    	; 0xa1e <printLedBuffer>
	setComma(2);
     d96:	82 e0       	ldi	r24, 0x02	; 2
     d98:	5e ce       	rjmp	.-836    	; 0xa56 <setComma>

00000d9a <mf_rollDo>:
}

void mf_rollDo(void)
{
	char *str = (char *)&temp_str;
	memcpy_P(str,&ms_rollDo,7);
     d9a:	47 e0       	ldi	r20, 0x07	; 7
     d9c:	50 e0       	ldi	r21, 0x00	; 0
     d9e:	6a e7       	ldi	r22, 0x7A	; 122
     da0:	70 e0       	ldi	r23, 0x00	; 0
     da2:	80 ee       	ldi	r24, 0xE0	; 224
     da4:	91 e0       	ldi	r25, 0x01	; 1
     da6:	10 d7       	rcall	.+3616   	; 0x1bc8 <memcpy_P>
		
	if (button_state & (BD_UP | BR_UP))
     da8:	80 91 5c 01 	lds	r24, 0x015C
     dac:	90 91 5d 01 	lds	r25, 0x015D
     db0:	9c 01       	movw	r18, r24
     db2:	20 74       	andi	r18, 0x40	; 64
     db4:	34 70       	andi	r19, 0x04	; 4
     db6:	23 2b       	or	r18, r19
     db8:	31 f0       	breq	.+12     	; 0xdc6 <mf_rollDo+0x2c>
	{
		if (p.rollCycleSet < MAX_ROLL_CYCLES)
     dba:	80 91 ba 01 	lds	r24, 0x01BA
     dbe:	83 36       	cpi	r24, 0x63	; 99
     dc0:	68 f4       	brcc	.+26     	; 0xddc <mf_rollDo+0x42>
			p.rollCycleSet += ROLL_CYCLES_STEP;
     dc2:	8f 5f       	subi	r24, 0xFF	; 255
     dc4:	09 c0       	rjmp	.+18     	; 0xdd8 <mf_rollDo+0x3e>
	}
	else if (button_state & (BD_DOWN | BR_DOWN))
     dc6:	80 78       	andi	r24, 0x80	; 128
     dc8:	98 70       	andi	r25, 0x08	; 8
     dca:	89 2b       	or	r24, r25
     dcc:	39 f0       	breq	.+14     	; 0xddc <mf_rollDo+0x42>
	{
		if (p.rollCycleSet > MIN_ROLL_CYCLES)
     dce:	80 91 ba 01 	lds	r24, 0x01BA
     dd2:	82 30       	cpi	r24, 0x02	; 2
     dd4:	18 f0       	brcs	.+6      	; 0xddc <mf_rollDo+0x42>
			p.rollCycleSet -= ROLL_CYCLES_STEP;
     dd6:	81 50       	subi	r24, 0x01	; 1
     dd8:	80 93 ba 01 	sts	0x01BA, r24
	}	
		
	u16toa_align_right(p.rollCycleSet,str + 4,NO_TERMINATING_ZERO | 2);
     ddc:	42 e8       	ldi	r20, 0x82	; 130
     dde:	64 ee       	ldi	r22, 0xE4	; 228
     de0:	71 e0       	ldi	r23, 0x01	; 1
     de2:	80 91 ba 01 	lds	r24, 0x01BA
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	8c d1       	rcall	.+792    	; 0x1102 <u16toa_align_right>
	
	if ((!(rollState & ROLL_CYCLE)) || (userTimer.FA_GE))
     dea:	80 91 94 01 	lds	r24, 0x0194
     dee:	82 ff       	sbrs	r24, 2
     df0:	04 c0       	rjmp	.+8      	; 0xdfa <mf_rollDo+0x60>
     df2:	80 91 72 01 	lds	r24, 0x0172
     df6:	84 ff       	sbrs	r24, 4
     df8:	07 c0       	rjmp	.+14     	; 0xe08 <mf_rollDo+0x6e>
	{
		u16toa_align_right(activeRollCycle,str + 1,NO_TERMINATING_ZERO | 2);
     dfa:	42 e8       	ldi	r20, 0x82	; 130
     dfc:	61 ee       	ldi	r22, 0xE1	; 225
     dfe:	71 e0       	ldi	r23, 0x01	; 1
     e00:	80 91 93 01 	lds	r24, 0x0193
     e04:	90 e0       	ldi	r25, 0x00	; 0
     e06:	7d d1       	rcall	.+762    	; 0x1102 <u16toa_align_right>
	}
	
	str[0] = 0;
     e08:	10 92 e0 01 	sts	0x01E0, r1
	if (isTopPointValid())
     e0c:	f2 d3       	rcall	.+2020   	; 0x15f2 <isTopPointValid>
     e0e:	88 23       	and	r24, r24
     e10:	29 f0       	breq	.+10     	; 0xe1c <mf_rollDo+0x82>
		str[0] |= SEGA;
     e12:	80 91 e0 01 	lds	r24, 0x01E0
     e16:	81 60       	ori	r24, 0x01	; 1
     e18:	80 93 e0 01 	sts	0x01E0, r24
	if (isBottomPointValid())
     e1c:	fe d3       	rcall	.+2044   	; 0x161a <isBottomPointValid>
     e1e:	88 23       	and	r24, r24
     e20:	29 f0       	breq	.+10     	; 0xe2c <mf_rollDo+0x92>
		str[0] |= SEGD;
     e22:	80 91 e0 01 	lds	r24, 0x01E0
     e26:	88 60       	ori	r24, 0x08	; 8
     e28:	80 93 e0 01 	sts	0x01E0, r24
	if (str[0] == 0)
     e2c:	80 91 e0 01 	lds	r24, 0x01E0
     e30:	81 11       	cpse	r24, r1
     e32:	03 c0       	rjmp	.+6      	; 0xe3a <mf_rollDo+0xa0>
		str[0] = ' ';
     e34:	80 e2       	ldi	r24, 0x20	; 32
     e36:	80 93 e0 01 	sts	0x01E0, r24
		
	printLedBuffer(0,str);
     e3a:	60 ee       	ldi	r22, 0xE0	; 224
     e3c:	71 e0       	ldi	r23, 0x01	; 1
     e3e:	80 e0       	ldi	r24, 0x00	; 0
     e40:	ee cd       	rjmp	.-1060   	; 0xa1e <printLedBuffer>

00000e42 <mf_rollSelect>:
// TOP level
//------------------------------------------------//

void mf_rollSelect(void)
{
	mf_leafSelectAct();		// setup and start timer
     e42:	73 de       	rcall	.-794    	; 0xb2a <mf_leafSelectAct>
	setExtraLeds(LED_ROLL);
     e44:	80 e4       	ldi	r24, 0x40	; 64
     e46:	13 ce       	rjmp	.-986    	; 0xa6e <setExtraLeds>

00000e48 <mf_setTempDo>:
}

void mf_setTempDo(void)
{
	char *str = (char *)&temp_str;
	memcpy_P(str,&ms_realTempDo,7);
     e48:	47 e0       	ldi	r20, 0x07	; 7
     e4a:	50 e0       	ldi	r21, 0x00	; 0
     e4c:	61 e8       	ldi	r22, 0x81	; 129
     e4e:	70 e0       	ldi	r23, 0x00	; 0
     e50:	80 ee       	ldi	r24, 0xE0	; 224
     e52:	91 e0       	ldi	r25, 0x01	; 1
     e54:	b9 d6       	rcall	.+3442   	; 0x1bc8 <memcpy_P>
	
	if (button_state & (BD_UP | BR_UP))
     e56:	80 91 5c 01 	lds	r24, 0x015C
     e5a:	90 91 5d 01 	lds	r25, 0x015D
     e5e:	9c 01       	movw	r18, r24
     e60:	20 74       	andi	r18, 0x40	; 64
     e62:	34 70       	andi	r19, 0x04	; 4
     e64:	40 91 70 01 	lds	r20, 0x0170
     e68:	23 2b       	or	r18, r19
     e6a:	21 f0       	breq	.+8      	; 0xe74 <mf_setTempDo+0x2c>
	{
		if (setupValue_u8 < MAX_SET_TEMP)
     e6c:	4f 3f       	cpi	r20, 0xFF	; 255
     e6e:	59 f0       	breq	.+22     	; 0xe86 <mf_setTempDo+0x3e>
			setupValue_u8 += TEMP_SET_STEP;
     e70:	4b 5f       	subi	r20, 0xFB	; 251
     e72:	07 c0       	rjmp	.+14     	; 0xe82 <mf_setTempDo+0x3a>
		restartMenuTimer();
	}
	else if (button_state & (BD_DOWN | BR_DOWN))
     e74:	80 78       	andi	r24, 0x80	; 128
     e76:	98 70       	andi	r25, 0x08	; 8
     e78:	89 2b       	or	r24, r25
     e7a:	39 f0       	breq	.+14     	; 0xe8a <mf_setTempDo+0x42>
	{
		if (setupValue_u8 > MIN_SET_TEMP)
     e7c:	4f 31       	cpi	r20, 0x1F	; 31
     e7e:	18 f0       	brcs	.+6      	; 0xe86 <mf_setTempDo+0x3e>
			setupValue_u8 -= TEMP_SET_STEP;
     e80:	45 50       	subi	r20, 0x05	; 5
     e82:	40 93 70 01 	sts	0x0170, r20
//	 Restarts menu state timeout
//	Should be used in RUN function when control buttons are pressed.
//-----------------------------------------------------------------//
static void restartMenuTimer(void)
{
	menuTimer.Timer = 0;
     e86:	10 92 7e 00 	sts	0x007E, r1
			setupValue_u8 -= TEMP_SET_STEP;
		restartMenuTimer();
	}					
		
	// Output setting to LED
	if (setupValue_u8 < MAX_SET_TEMP)
     e8a:	80 91 70 01 	lds	r24, 0x0170
     e8e:	8f 3f       	cpi	r24, 0xFF	; 255
     e90:	41 f0       	breq	.+16     	; 0xea2 <mf_setTempDo+0x5a>
	{
		u16toa_align_right(setupValue_u8,str,NO_TERMINATING_ZERO | 4);
     e92:	44 e8       	ldi	r20, 0x84	; 132
     e94:	60 ee       	ldi	r22, 0xE0	; 224
     e96:	71 e0       	ldi	r23, 0x01	; 1
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	33 d1       	rcall	.+614    	; 0x1102 <u16toa_align_right>
		printLedBuffer(0,str);
     e9c:	60 ee       	ldi	r22, 0xE0	; 224
     e9e:	71 e0       	ldi	r23, 0x01	; 1
     ea0:	02 c0       	rjmp	.+4      	; 0xea6 <mf_setTempDo+0x5e>
	}		
	else
	{
		printLedBuffer(0," UNREG");
     ea2:	63 ec       	ldi	r22, 0xC3	; 195
     ea4:	70 e0       	ldi	r23, 0x00	; 0
     ea6:	80 e0       	ldi	r24, 0x00	; 0
     ea8:	ba dd       	rcall	.-1164   	; 0xa1e <printLedBuffer>
	}
	
	if (userTimer.FA_GE)
     eaa:	80 91 72 01 	lds	r24, 0x0172
     eae:	84 ff       	sbrs	r24, 4
     eb0:	02 c0       	rjmp	.+4      	; 0xeb6 <mf_setTempDo+0x6e>
		setExtraLeds(LED_TEMP);
     eb2:	80 e8       	ldi	r24, 0x80	; 128
     eb4:	dc cd       	rjmp	.-1096   	; 0xa6e <setExtraLeds>
	else
		clearExtraLeds(LED_TEMP);
     eb6:	80 e8       	ldi	r24, 0x80	; 128
     eb8:	e0 cd       	rjmp	.-1088   	; 0xa7a <clearExtraLeds>

00000eba <mf_realTempSelect>:
// Menu item "Real temperature indication"
// TOP level
//------------------------------------------------//
void mf_realTempSelect(void)
{
	setExtraLeds(LED_TEMP);
     eba:	80 e8       	ldi	r24, 0x80	; 128
     ebc:	d8 cd       	rjmp	.-1104   	; 0xa6e <setExtraLeds>

00000ebe <mf_realTempDo>:
}

void mf_realTempDo(void)
{
	char *str = (char *)&temp_str;
	memcpy_P(str,&ms_realTempDo,7);
     ebe:	47 e0       	ldi	r20, 0x07	; 7
     ec0:	50 e0       	ldi	r21, 0x00	; 0
     ec2:	61 e8       	ldi	r22, 0x81	; 129
     ec4:	70 e0       	ldi	r23, 0x00	; 0
     ec6:	80 ee       	ldi	r24, 0xE0	; 224
     ec8:	91 e0       	ldi	r25, 0x01	; 1
     eca:	7e d6       	rcall	.+3324   	; 0x1bc8 <memcpy_P>
	
	if (adc_status & (SENSOR_ERROR_NO_PRESENT))
     ecc:	80 91 b0 01 	lds	r24, 0x01B0
     ed0:	80 ff       	sbrs	r24, 0
     ed2:	03 c0       	rjmp	.+6      	; 0xeda <mf_realTempDo+0x1c>
	{
		printLedBuffer(0,"ERR 01");
     ed4:	6a ec       	ldi	r22, 0xCA	; 202
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	13 c0       	rjmp	.+38     	; 0xf00 <mf_realTempDo+0x42>
	}
	else if (adc_status & (SENSOR_ERROR_SHORTED))
     eda:	81 ff       	sbrs	r24, 1
     edc:	03 c0       	rjmp	.+6      	; 0xee4 <mf_realTempDo+0x26>
	{
		printLedBuffer(0,"ERR 02");
     ede:	61 ed       	ldi	r22, 0xD1	; 209
     ee0:	70 e0       	ldi	r23, 0x00	; 0
     ee2:	0e c0       	rjmp	.+28     	; 0xf00 <mf_realTempDo+0x42>
	}
	else
	{
		// Output ADC result to LED
		i32toa_align_right((int32_t)adc_celsius,str,NO_TERMINATING_ZERO | 4);
     ee4:	60 91 b1 01 	lds	r22, 0x01B1
     ee8:	70 91 b2 01 	lds	r23, 0x01B2
     eec:	88 27       	eor	r24, r24
     eee:	77 fd       	sbrc	r23, 7
     ef0:	80 95       	com	r24
     ef2:	98 2f       	mov	r25, r24
     ef4:	24 e8       	ldi	r18, 0x84	; 132
     ef6:	40 ee       	ldi	r20, 0xE0	; 224
     ef8:	51 e0       	ldi	r21, 0x01	; 1
     efa:	b6 d0       	rcall	.+364    	; 0x1068 <i32toa_align_right>
		printLedBuffer(0,str);
     efc:	60 ee       	ldi	r22, 0xE0	; 224
     efe:	71 e0       	ldi	r23, 0x01	; 1
     f00:	80 e0       	ldi	r24, 0x00	; 0
     f02:	8d cd       	rjmp	.-1254   	; 0xa1e <printLedBuffer>

00000f04 <getMenuFunctionRecord.constprop.1>:
//	Arguments:
//		menuItemID - ID of an item
//		menuRecord - pointer to function structure to fill
//	Output:
//-----------------------------------------------------------------//
static void getMenuFunctionRecord(uint8_t menuItemID, MenuFunctionRecord* menuRecord )
     f04:	0f 93       	push	r16
     f06:	1f 93       	push	r17
     f08:	cf 93       	push	r28
     f0a:	df 93       	push	r29
     f0c:	18 2f       	mov	r17, r24
     f0e:	c0 e0       	ldi	r28, 0x00	; 0
     f10:	d0 e0       	ldi	r29, 0x00	; 0
{
	uint8_t i;
	for (i = 0; i < sizeof(menuFunctionSet)/sizeof(MenuFunctionRecord); i++  )
	{
		memcpy_P(menuRecord,&menuFunctionSet[i],sizeof(MenuFunctionRecord));
     f12:	07 e0       	ldi	r16, 0x07	; 7
     f14:	0c 9f       	mul	r16, r28
     f16:	b0 01       	movw	r22, r0
     f18:	0d 9f       	mul	r16, r29
     f1a:	70 0d       	add	r23, r0
     f1c:	11 24       	eor	r1, r1
     f1e:	68 57       	subi	r22, 0x78	; 120
     f20:	7f 4f       	sbci	r23, 0xFF	; 255
     f22:	47 e0       	ldi	r20, 0x07	; 7
     f24:	50 e0       	ldi	r21, 0x00	; 0
     f26:	89 e6       	ldi	r24, 0x69	; 105
     f28:	91 e0       	ldi	r25, 0x01	; 1
     f2a:	4e d6       	rcall	.+3228   	; 0x1bc8 <memcpy_P>
		if (menuRecord->Item == menuItemID)
     f2c:	80 91 69 01 	lds	r24, 0x0169
     f30:	81 17       	cp	r24, r17
     f32:	21 f0       	breq	.+8      	; 0xf3c <getMenuFunctionRecord.constprop.1+0x38>
     f34:	21 96       	adiw	r28, 0x01	; 1
//	Output:
//-----------------------------------------------------------------//
static void getMenuFunctionRecord(uint8_t menuItemID, MenuFunctionRecord* menuRecord )
{
	uint8_t i;
	for (i = 0; i < sizeof(menuFunctionSet)/sizeof(MenuFunctionRecord); i++  )
     f36:	ce 30       	cpi	r28, 0x0E	; 14
     f38:	d1 05       	cpc	r29, r1
     f3a:	61 f7       	brne	.-40     	; 0xf14 <getMenuFunctionRecord.constprop.1+0x10>
	{
		memcpy_P(menuRecord,&menuFunctionSet[i],sizeof(MenuFunctionRecord));
		if (menuRecord->Item == menuItemID)
			break;
	}
}
     f3c:	df 91       	pop	r29
     f3e:	cf 91       	pop	r28
     f40:	1f 91       	pop	r17
     f42:	0f 91       	pop	r16
     f44:	08 95       	ret

00000f46 <InitMenu>:
//	Menu initialization
//	Call this function at start of your program before processMenu()
//-----------------------------------------------------------------//
void InitMenu(void)
{
	selectedMenuItemID = mi_REALTEMP;
     f46:	81 e0       	ldi	r24, 0x01	; 1
     f48:	80 93 68 01 	sts	0x0168, r24
	getMenuFunctionRecord(selectedMenuItemID, &selectedMenuFunctionRecord);
     f4c:	db df       	rcall	.-74     	; 0xf04 <getMenuFunctionRecord.constprop.1>
	processItemFunction(selectedMenuFunctionRecord.SelectFunction);
     f4e:	80 91 6a 01 	lds	r24, 0x016A
     f52:	90 91 6b 01 	lds	r25, 0x016B
     f56:	d6 cd       	rjmp	.-1108   	; 0xb04 <processItemFunction>

00000f58 <processMenu>:
//	Main menu control, -  state function calls, jumps 
//	between menu states and indication
//	Call this function from main() with a fixed time interval.
//-----------------------------------------------------------------//
void processMenu(void)
{
     f58:	af 92       	push	r10
     f5a:	bf 92       	push	r11
     f5c:	cf 92       	push	r12
     f5e:	df 92       	push	r13
     f60:	ef 92       	push	r14
     f62:	ff 92       	push	r15
     f64:	0f 93       	push	r16
     f66:	1f 93       	push	r17
     f68:	cf 93       	push	r28
     f6a:	df 93       	push	r29
     f6c:	00 d0       	rcall	.+0      	; 0xf6e <processMenu+0x16>
     f6e:	00 d0       	rcall	.+0      	; 0xf70 <processMenu+0x18>
     f70:	1f 92       	push	r1
     f72:	cd b7       	in	r28, 0x3d	; 61
     f74:	de b7       	in	r29, 0x3e	; 62
	NextItem_t nextItem;
	uint16_t jumpCondition;
	
	processSoftTimer8b(&menuTimer);	
     f76:	8d e7       	ldi	r24, 0x7D	; 125
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	86 d4       	rcall	.+2316   	; 0x1888 <processSoftTimer8b>
	
	// Compose jump condition
	jumpCondition = button_state;		
     f7c:	00 91 5c 01 	lds	r16, 0x015C
     f80:	10 91 5d 01 	lds	r17, 0x015D
	if (menuTimer.FTop)
     f84:	80 91 7d 00 	lds	r24, 0x007D
     f88:	85 fd       	sbrc	r24, 5
		jumpCondition |= TMR_EXP;
     f8a:	10 68       	ori	r17, 0x80	; 128
	if (sys_timers_flags & AUTOPOFF_EXPIRED)
     f8c:	14 99       	sbic	0x02, 4	; 2
		jumpCondition |= GOTO_POFF;
     f8e:	10 64       	ori	r17, 0x40	; 64
	
	// Get next menu item according to current state and jump conditions
	nextItem = getNextMenuItem(selectedMenuItemID, jumpCondition);
     f90:	d0 90 68 01 	lds	r13, 0x0168
     f94:	e1 2c       	mov	r14, r1
     f96:	f1 2c       	mov	r15, r1
	MenuJumpRecord	jRecord;
	uint8_t i;
	
	for (i = 0; i < sizeof(menuJumpSet)/sizeof(MenuJumpRecord); i++  )
	{
		memcpy_P(&jRecord,&menuJumpSet[i],sizeof(MenuJumpRecord));
     f98:	35 e0       	ldi	r19, 0x05	; 5
     f9a:	a3 2e       	mov	r10, r19
     f9c:	ae 9c       	mul	r10, r14
     f9e:	b0 01       	movw	r22, r0
     fa0:	af 9c       	mul	r10, r15
     fa2:	70 0d       	add	r23, r0
     fa4:	11 24       	eor	r1, r1
     fa6:	66 51       	subi	r22, 0x16	; 22
     fa8:	7f 4f       	sbci	r23, 0xFF	; 255
     faa:	45 e0       	ldi	r20, 0x05	; 5
     fac:	50 e0       	ldi	r21, 0x00	; 0
     fae:	ce 01       	movw	r24, r28
     fb0:	01 96       	adiw	r24, 0x01	; 1
     fb2:	0a d6       	rcall	.+3092   	; 0x1bc8 <memcpy_P>
		if (jRecord.Item == selectedItemId)				// If ID match,
     fb4:	89 81       	ldd	r24, Y+1	; 0x01
     fb6:	8d 11       	cpse	r24, r13
     fb8:	0f c0       	rjmp	.+30     	; 0xfd8 <processMenu+0x80>
		{
			if ((jRecord.JumpCondition & jmpCond) != 0)		// if any of jump conditions match too,
     fba:	2a 81       	ldd	r18, Y+2	; 0x02
     fbc:	3b 81       	ldd	r19, Y+3	; 0x03
     fbe:	20 23       	and	r18, r16
     fc0:	31 23       	and	r19, r17
     fc2:	23 2b       	or	r18, r19
     fc4:	49 f0       	breq	.+18     	; 0xfd8 <processMenu+0x80>
			{
				nextItem.ItemID = jRecord.NextItem;			// switch to next menu item
     fc6:	dc 80       	ldd	r13, Y+4	; 0x04
				nextItem.ItemTimeout = jRecord.Flags & TIMEOUT_MASK;
     fc8:	8d 81       	ldd	r24, Y+5	; 0x05
     fca:	9f e0       	ldi	r25, 0x0F	; 15
     fcc:	b9 2e       	mov	r11, r25
     fce:	b8 22       	and	r11, r24
				nextItem.Flags = jRecord.Flags & ~TIMEOUT_MASK;
     fd0:	20 ef       	ldi	r18, 0xF0	; 240
     fd2:	c2 2e       	mov	r12, r18
     fd4:	c8 22       	and	r12, r24
     fd6:	07 c0       	rjmp	.+14     	; 0xfe6 <processMenu+0x8e>
     fd8:	8f ef       	ldi	r24, 0xFF	; 255
     fda:	e8 1a       	sub	r14, r24
     fdc:	f8 0a       	sbc	r15, r24
	NextItem_t nextItem;
	nextItem.ItemID = selectedItemId;
	MenuJumpRecord	jRecord;
	uint8_t i;
	
	for (i = 0; i < sizeof(menuJumpSet)/sizeof(MenuJumpRecord); i++  )
     fde:	84 e2       	ldi	r24, 0x24	; 36
     fe0:	e8 16       	cp	r14, r24
     fe2:	f1 04       	cpc	r15, r1
     fe4:	d9 f6       	brne	.-74     	; 0xf9c <processMenu+0x44>
	
	// Get next menu item according to current state and jump conditions
	nextItem = getNextMenuItem(selectedMenuItemID, jumpCondition);
	
	// If next item differs from current
	if (nextItem.ItemID != selectedMenuItemID)
     fe6:	80 91 68 01 	lds	r24, 0x0168
     fea:	d8 16       	cp	r13, r24
     fec:	29 f1       	breq	.+74     	; 0x1038 <processMenu+0xe0>
	{		
		jumpFlags = nextItem.Flags;
     fee:	c0 92 76 01 	sts	0x0176, r12
		// Call exit function for current item
		processItemFunction(selectedMenuFunctionRecord.LeaveFunction);
     ff2:	80 91 6e 01 	lds	r24, 0x016E
     ff6:	90 91 6f 01 	lds	r25, 0x016F
     ffa:	84 dd       	rcall	.-1272   	; 0xb04 <processItemFunction>
		
		// If shifting is specified, start it before calling any 
		//	new menu item functions 
		if (nextItem.Flags & SHIFT_RIGHT)
     ffc:	c6 fe       	sbrs	r12, 6
     ffe:	02 c0       	rjmp	.+4      	; 0x1004 <processMenu+0xac>
			startShiftingWindowRight();
    1000:	dd dc       	rcall	.-1606   	; 0x9bc <startShiftingWindowRight>
    1002:	02 c0       	rjmp	.+4      	; 0x1008 <processMenu+0xb0>
		else if (nextItem.Flags & SHIFT_LEFT)
    1004:	c7 fc       	sbrc	r12, 7
			startShiftingWindowLeft();
    1006:	cc dc       	rcall	.-1640   	; 0x9a0 <startShiftingWindowLeft>
		
		// Select new item
		selectedMenuItemID = nextItem.ItemID;
    1008:	d0 92 68 01 	sts	0x0168, r13
		
		// Load from FLASH and save function pointers
		getMenuFunctionRecord(selectedMenuItemID, &selectedMenuFunctionRecord);
    100c:	8d 2d       	mov	r24, r13
    100e:	7a df       	rcall	.-268    	; 0xf04 <getMenuFunctionRecord.constprop.1>
		// Call select function for next item
		processItemFunction(selectedMenuFunctionRecord.SelectFunction);
    1010:	80 91 6a 01 	lds	r24, 0x016A
    1014:	90 91 6b 01 	lds	r25, 0x016B
    1018:	75 dd       	rcall	.-1302   	; 0xb04 <processItemFunction>
		// Start timer if timeout is enabled
		if (nextItem.ItemTimeout != 0)
    101a:	bb 20       	and	r11, r11
    101c:	a9 f0       	breq	.+42     	; 0x1048 <processMenu+0xf0>
		{
			menuTimer.Top = nextItem.ItemTimeout * MENU_TIMEOUT_MULT;
    101e:	bb 0c       	add	r11, r11
    1020:	bb 0c       	add	r11, r11
    1022:	bb 0c       	add	r11, r11
    1024:	b0 92 7f 00 	sts	0x007F, r11
			menuTimer.Timer = 0;
    1028:	10 92 7e 00 	sts	0x007E, r1
			menuTimer.Enabled = 1;	
    102c:	80 91 7d 00 	lds	r24, 0x007D
    1030:	81 60       	ori	r24, 0x01	; 1
    1032:	80 93 7d 00 	sts	0x007D, r24
    1036:	08 c0       	rjmp	.+16     	; 0x1048 <processMenu+0xf0>
		}	
	}
	else
	{
		processSoftTimer8b(&userTimer);
    1038:	82 e7       	ldi	r24, 0x72	; 114
    103a:	91 e0       	ldi	r25, 0x01	; 1
    103c:	25 d4       	rcall	.+2122   	; 0x1888 <processSoftTimer8b>
		// Stay at previous item
		processItemFunction(selectedMenuFunctionRecord.RunFunction);
    103e:	80 91 6c 01 	lds	r24, 0x016C
    1042:	90 91 6d 01 	lds	r25, 0x016D
    1046:	5e dd       	rcall	.-1348   	; 0xb04 <processItemFunction>
	}	
}
    1048:	0f 90       	pop	r0
    104a:	0f 90       	pop	r0
    104c:	0f 90       	pop	r0
    104e:	0f 90       	pop	r0
    1050:	0f 90       	pop	r0
    1052:	df 91       	pop	r29
    1054:	cf 91       	pop	r28
    1056:	1f 91       	pop	r17
    1058:	0f 91       	pop	r16
    105a:	ff 90       	pop	r15
    105c:	ef 90       	pop	r14
    105e:	df 90       	pop	r13
    1060:	cf 90       	pop	r12
    1062:	bf 90       	pop	r11
    1064:	af 90       	pop	r10
    1066:	08 95       	ret

00001068 <i32toa_align_right>:
}



void i32toa_align_right(int32_t val, char *buffer, uint8_t len)
{
    1068:	cf 92       	push	r12
    106a:	df 92       	push	r13
    106c:	ef 92       	push	r14
    106e:	ff 92       	push	r15
    1070:	0f 93       	push	r16
    1072:	1f 93       	push	r17
    1074:	cf 93       	push	r28
    1076:	df 93       	push	r29
    1078:	12 2f       	mov	r17, r18
	uint8_t is_negative = 0;
	if (!len)	return;
    107a:	22 23       	and	r18, r18
    107c:	c9 f1       	breq	.+114    	; 0x10f0 <i32toa_align_right+0x88>
	
	if (val < 0)
    107e:	97 ff       	sbrs	r25, 7
    1080:	09 c0       	rjmp	.+18     	; 0x1094 <i32toa_align_right+0x2c>
	{
		val = -val;
    1082:	90 95       	com	r25
    1084:	80 95       	com	r24
    1086:	70 95       	com	r23
    1088:	61 95       	neg	r22
    108a:	7f 4f       	sbci	r23, 0xFF	; 255
    108c:	8f 4f       	sbci	r24, 0xFF	; 255
    108e:	9f 4f       	sbci	r25, 0xFF	; 255
		is_negative = 1;
    1090:	01 e0       	ldi	r16, 0x01	; 1
    1092:	01 c0       	rjmp	.+2      	; 0x1096 <i32toa_align_right+0x2e>



void i32toa_align_right(int32_t val, char *buffer, uint8_t len)
{
	uint8_t is_negative = 0;
    1094:	00 e0       	ldi	r16, 0x00	; 0
	{
		val = -val;
		is_negative = 1;
	}
	
	if (len & NO_TERMINATING_ZERO)
    1096:	17 ff       	sbrs	r17, 7
    1098:	05 c0       	rjmp	.+10     	; 0x10a4 <i32toa_align_right+0x3c>
	{
		len = len & ~NO_TERMINATING_ZERO;
    109a:	1f 77       	andi	r17, 0x7F	; 127
		buffer += len;	
    109c:	ea 01       	movw	r28, r20
    109e:	c1 0f       	add	r28, r17
    10a0:	d1 1d       	adc	r29, r1
    10a2:	04 c0       	rjmp	.+8      	; 0x10ac <i32toa_align_right+0x44>
	}
	else
	{
		buffer += len;	
    10a4:	ea 01       	movw	r28, r20
    10a6:	c1 0f       	add	r28, r17
    10a8:	d1 1d       	adc	r29, r1
		*buffer = 0;
    10aa:	18 82       	st	Y, r1
	}
	
	do
	{
		*--buffer = val % 10 + '0';
    10ac:	2a e0       	ldi	r18, 0x0A	; 10
    10ae:	c2 2e       	mov	r12, r18
    10b0:	d1 2c       	mov	r13, r1
    10b2:	e1 2c       	mov	r14, r1
    10b4:	f1 2c       	mov	r15, r1
    10b6:	a7 01       	movw	r20, r14
    10b8:	96 01       	movw	r18, r12
    10ba:	27 d5       	rcall	.+2638   	; 0x1b0a <__divmodsi4>
    10bc:	60 5d       	subi	r22, 0xD0	; 208
    10be:	6a 93       	st	-Y, r22
		val /= 10;
    10c0:	b9 01       	movw	r22, r18
    10c2:	ca 01       	movw	r24, r20
		len--;
    10c4:	11 50       	subi	r17, 0x01	; 1
	}
	while ((val != 0) && len);
    10c6:	61 15       	cp	r22, r1
    10c8:	71 05       	cpc	r23, r1
    10ca:	81 05       	cpc	r24, r1
    10cc:	91 05       	cpc	r25, r1
    10ce:	19 f0       	breq	.+6      	; 0x10d6 <i32toa_align_right+0x6e>
    10d0:	11 11       	cpse	r17, r1
    10d2:	f1 cf       	rjmp	.-30     	; 0x10b6 <i32toa_align_right+0x4e>
    10d4:	08 c0       	rjmp	.+16     	; 0x10e6 <i32toa_align_right+0x7e>
	
	if ( (len) && (is_negative) )
    10d6:	11 23       	and	r17, r17
    10d8:	31 f0       	breq	.+12     	; 0x10e6 <i32toa_align_right+0x7e>
    10da:	00 23       	and	r16, r16
    10dc:	21 f0       	breq	.+8      	; 0x10e6 <i32toa_align_right+0x7e>
	{
		*--buffer = '-';
    10de:	21 97       	sbiw	r28, 0x01	; 1
    10e0:	8d e2       	ldi	r24, 0x2D	; 45
    10e2:	88 83       	st	Y, r24
		len--;	
    10e4:	11 50       	subi	r17, 0x01	; 1
	}	
	
	// Padding
	while(len--)
		*--buffer = ' ';
    10e6:	80 e2       	ldi	r24, 0x20	; 32
    10e8:	01 c0       	rjmp	.+2      	; 0x10ec <i32toa_align_right+0x84>
    10ea:	8a 93       	st	-Y, r24
		*--buffer = '-';
		len--;	
	}	
	
	// Padding
	while(len--)
    10ec:	11 50       	subi	r17, 0x01	; 1
    10ee:	e8 f7       	brcc	.-6      	; 0x10ea <i32toa_align_right+0x82>
		*--buffer = ' ';
}
    10f0:	df 91       	pop	r29
    10f2:	cf 91       	pop	r28
    10f4:	1f 91       	pop	r17
    10f6:	0f 91       	pop	r16
    10f8:	ff 90       	pop	r15
    10fa:	ef 90       	pop	r14
    10fc:	df 90       	pop	r13
    10fe:	cf 90       	pop	r12
    1100:	08 95       	ret

00001102 <u16toa_align_right>:




void u16toa_align_right(uint16_t val, char *buffer, uint8_t len)
{
    1102:	fb 01       	movw	r30, r22
    1104:	24 2f       	mov	r18, r20
	i32toa_align_right((int32_t)val, buffer, len);
    1106:	bc 01       	movw	r22, r24
    1108:	80 e0       	ldi	r24, 0x00	; 0
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	af 01       	movw	r20, r30
    110e:	ac cf       	rjmp	.-168    	; 0x1068 <i32toa_align_right>

00001110 <logI32p>:
	USART_sendstr(str);
}

static void logI32p(int32_t val)
{
	i32toa_align_right(val,str,12);
    1110:	2c e0       	ldi	r18, 0x0C	; 12
    1112:	47 e7       	ldi	r20, 0x77	; 119
    1114:	51 e0       	ldi	r21, 0x01	; 1
    1116:	a8 df       	rcall	.-176    	; 0x1068 <i32toa_align_right>
	USART_sendstr(str);
    1118:	87 e7       	ldi	r24, 0x77	; 119
    111a:	91 e0       	ldi	r25, 0x01	; 1
    111c:	d8 c4       	rjmp	.+2480   	; 0x1ace <USART_sendstr>

0000111e <logU16p>:
}


static void logU16p(uint16_t val)
{
	u16toa_align_right(val,str,6);
    111e:	46 e0       	ldi	r20, 0x06	; 6
    1120:	67 e7       	ldi	r22, 0x77	; 119
    1122:	71 e0       	ldi	r23, 0x01	; 1
    1124:	ee df       	rcall	.-36     	; 0x1102 <u16toa_align_right>
	USART_sendstr(str);
    1126:	87 e7       	ldi	r24, 0x77	; 119
    1128:	91 e0       	ldi	r25, 0x01	; 1
    112a:	d1 c4       	rjmp	.+2466   	; 0x1ace <USART_sendstr>

0000112c <main>:


static void init_system_io()
{
	// Setup Port D
	PORTD = 0;//(1<<PD_SYNCA | 1<<PD_SYNCB);
    112c:	12 ba       	out	0x12, r1	; 18
	DDRD = (1<<PD_TXD | 1<<PD_M1 | 1<<PD_M2 | 1<<PD_HEATER | 1<<PD_HEAT_INDIC );
    112e:	8e e3       	ldi	r24, 0x3E	; 62
    1130:	81 bb       	out	0x11, r24	; 17
	
	// Setup Port B
	PORTB = 0;
    1132:	18 ba       	out	0x18, r1	; 24
	DDRB = (1<<PB_BEEPER | 1<<PB_LED_DOUT | 1<<PB_LED_CLK | 1<<PB_SEGF | 1<<PB_SEGG | 1<<PB_SEGH);
    1134:	8f e3       	ldi	r24, 0x3F	; 63
    1136:	87 bb       	out	0x17, r24	; 23
	
	PORTC = 0;
    1138:	15 ba       	out	0x15, r1	; 21
	DDRC = (1<<PC_SEGA | 1<<PC_SEGB | 1<<PC_SEGC | 1<<PC_SEGD | 1<<PC_SEGE);	
    113a:	8f e1       	ldi	r24, 0x1F	; 31
    113c:	84 bb       	out	0x14, r24	; 20

	// Setup timer0
	// 1/1024 prescaler, T=64us @16MHz
	TCCR0 = (1<<CS02 | 0<<CS01 | 1<<CS00);
    113e:	85 e0       	ldi	r24, 0x05	; 5
    1140:	83 bf       	out	0x33, r24	; 51
	TCNT0 = 0;
    1142:	12 be       	out	0x32, r1	; 50
	// Clear interrupt flag
	TIFR = (1<<TOV0);
    1144:	81 e0       	ldi	r24, 0x01	; 1
    1146:	88 bf       	out	0x38, r24	; 56
	
	// Setup timer2 as 1ms system frequency generator
	// 1/64 prescaler, CTC mode, OC2 disconnected
	TCCR2 = (1<<CS22 | 1<<WGM21);
    1148:	8c e0       	ldi	r24, 0x0C	; 12
    114a:	85 bd       	out	0x25, r24	; 37
	OCR2 = 249;						// 1ms @ 16MHz
    114c:	89 ef       	ldi	r24, 0xF9	; 249
    114e:	83 bd       	out	0x23, r24	; 35
	
	// Enable interrupts from timers 0 and 2
	TIMSK = (1<<TOIE0 | 1<<OCIE2);
    1150:	81 e8       	ldi	r24, 0x81	; 129
    1152:	89 bf       	out	0x39, r24	; 57
	
	// Setup timer1 as beeper frequency generator
	// CTC mode, 1/64 prescaler
	TCCR1A = 0;
    1154:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = (1<<WGM12 | 1<<CS11 | 1<<CS10);
    1156:	8b e0       	ldi	r24, 0x0B	; 11
    1158:	8e bd       	out	0x2e, r24	; 46
	// 1kHz beeper frequency default
	OCR1A = 127;
    115a:	8f e7       	ldi	r24, 0x7F	; 127
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	9b bd       	out	0x2b, r25	; 43
    1160:	8a bd       	out	0x2a, r24	; 42

	// Setup AC sync comparator
	// Interrupt on output toggle
	ACSR = (1<<ACIE | 0<<ACIS1 | 0<<ACIS0);
    1162:	88 e0       	ldi	r24, 0x08	; 8
    1164:	88 b9       	out	0x08, r24	; 8
	
	// Setup ADC
	// Internal Vref + cap, input ADC5, 
	ADMUX = (1<<REFS1 | 1<<REFS0 | 0<<MUX3 | 1<<MUX2 | 0<<MUX1 | 1<<MUX0 );
    1166:	85 ec       	ldi	r24, 0xC5	; 197
    1168:	87 b9       	out	0x07, r24	; 7
	// Prescaler = 128
	ADCSRA = (1<<ADEN | 1<<ADIE | 1<<ADPS2 | 1<<ADPS1 | 1<<ADPS0);
    116a:	8f e8       	ldi	r24, 0x8F	; 143
    116c:	86 b9       	out	0x06, r24	; 6
	
	// Setup USART
	// Double speed
	UCSRA = (1<<U2X);
    116e:	82 e0       	ldi	r24, 0x02	; 2
    1170:	8b b9       	out	0x0b, r24	; 11
	UCSRB = (1<<RXEN | 1<<TXEN | 0<<UCSZ2);
    1172:	88 e1       	ldi	r24, 0x18	; 24
    1174:	8a b9       	out	0x0a, r24	; 10
	// No parity, 1 stop bit, 8 bit
	UCSRC = (1<<URSEL | 0<<UPM1 | 0<<UPM0 | 0<<USBS | 1<<UCSZ1 | 1<<UCSZ0);
    1176:	86 e8       	ldi	r24, 0x86	; 134
    1178:	80 bd       	out	0x20, r24	; 32
	// 57600 @16MHz, 2x
	UBRRH=0x00;
    117a:	10 bc       	out	0x20, r1	; 32
	UBRRL=0x22;
    117c:	82 e2       	ldi	r24, 0x22	; 34
    117e:	89 b9       	out	0x09, r24	; 9
	
	
	// Init IO locations which are used as globals
	TWBR = 0x00;	// heaterState
    1180:	10 b8       	out	0x00, r1	; 0
	TWAR = 0x00;	// sys_timers_flags
    1182:	12 b8       	out	0x02, r1	; 2
	
	// Initialize MCU IO
	init_system_io();
	// Restore params from EEPROM
	// If some values are corrupted, settings or/and calibration are loaded with default configuration.
	temp8u = restoreGlobalParams();
    1184:	ce da       	rcall	.-2660   	; 0x722 <restoreGlobalParams>
    1186:	c8 2f       	mov	r28, r24
	// Calibrate ADC coefficients using restored params
	calculateCoeffs();
    1188:	67 d8       	rcall	.-3890   	; 0x258 <calculateCoeffs>
	// Initialize LED indicator
	initLedIndicator();
    118a:	26 dc       	rcall	.-1972   	; 0x9d8 <initLedIndicator>
	// Clear comparator interrupt flag to prevent false triggering
	ACSR |= (1<<ACI);
    118c:	44 9a       	sbi	0x08, 4	; 8
	sei();
    118e:	78 94       	sei
	// If default values were loaded from EEPROM, inform user
	#ifdef USE_EEPROM_CRC
	if (temp8u)
    1190:	cc 23       	and	r28, r28
    1192:	a9 f0       	breq	.+42     	; 0x11be <main+0x92>
	{
		printLedBuffer(0,"ERR E");
    1194:	68 ed       	ldi	r22, 0xD8	; 216
    1196:	70 e0       	ldi	r23, 0x00	; 0
    1198:	80 e0       	ldi	r24, 0x00	; 0
    119a:	41 dc       	rcall	.-1918   	; 0xa1e <printLedBuffer>
		fillLedBuffer(5,1,temp8u + 0x30);	// error code: E1 - CRC error in global params, E2 - CRC error in calibration, E3 - both
    119c:	4c 2f       	mov	r20, r28
    119e:	40 5d       	subi	r20, 0xD0	; 208
    11a0:	61 e0       	ldi	r22, 0x01	; 1
    11a2:	85 e0       	ldi	r24, 0x05	; 5
    11a4:	d9 db       	rcall	.-2126   	; 0x958 <fillLedBuffer>
		Sound_Play(m_beep_err1);
    11a6:	84 e5       	ldi	r24, 0x54	; 84
    11a8:	90 e0       	ldi	r25, 0x00	; 0
    11aa:	76 d4       	rcall	.+2284   	; 0x1a98 <Sound_Play>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    11ac:	2f ef       	ldi	r18, 0xFF	; 255
    11ae:	83 ed       	ldi	r24, 0xD3	; 211
    11b0:	90 e3       	ldi	r25, 0x30	; 48
    11b2:	21 50       	subi	r18, 0x01	; 1
    11b4:	80 40       	sbci	r24, 0x00	; 0
    11b6:	90 40       	sbci	r25, 0x00	; 0
    11b8:	e1 f7       	brne	.-8      	; 0x11b2 <main+0x86>
    11ba:	00 c0       	rjmp	.+0      	; 0x11bc <main+0x90>
    11bc:	00 00       	nop
		_delay_ms(1000);
	} 
	#endif
	// Dump calibration data over UART - might be useful for debug
	USART_sendstr("\n\r");
    11be:	8e ed       	ldi	r24, 0xDE	; 222
    11c0:	90 e0       	ldi	r25, 0x00	; 0
    11c2:	85 d4       	rcall	.+2314   	; 0x1ace <USART_sendstr>
	logU16p(cp.cpoint1);
    11c4:	80 91 b3 01 	lds	r24, 0x01B3
    11c8:	90 e0       	ldi	r25, 0x00	; 0
    11ca:	a9 df       	rcall	.-174    	; 0x111e <logU16p>
	logU16p(cp.cpoint1_adc);
    11cc:	80 91 b5 01 	lds	r24, 0x01B5
    11d0:	90 91 b6 01 	lds	r25, 0x01B6
    11d4:	a4 df       	rcall	.-184    	; 0x111e <logU16p>
	logU16p(cp.cpoint2);
    11d6:	80 91 b4 01 	lds	r24, 0x01B4
    11da:	90 e0       	ldi	r25, 0x00	; 0
    11dc:	a0 df       	rcall	.-192    	; 0x111e <logU16p>
	logU16p(cp.cpoint2_adc);
    11de:	80 91 b7 01 	lds	r24, 0x01B7
    11e2:	90 91 b8 01 	lds	r25, 0x01B8
    11e6:	9b df       	rcall	.-202    	; 0x111e <logU16p>
	USART_sendstr("\n\r");
    11e8:	8e ed       	ldi	r24, 0xDE	; 222
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	70 d4       	rcall	.+2272   	; 0x1ace <USART_sendstr>
    11ee:	ef ef       	ldi	r30, 0xFF	; 255
    11f0:	f1 ee       	ldi	r31, 0xE1	; 225
    11f2:	24 e0       	ldi	r18, 0x04	; 4
    11f4:	e1 50       	subi	r30, 0x01	; 1
    11f6:	f0 40       	sbci	r31, 0x00	; 0
    11f8:	20 40       	sbci	r18, 0x00	; 0
    11fa:	e1 f7       	brne	.-8      	; 0x11f4 <main+0xc8>
    11fc:	00 c0       	rjmp	.+0      	; 0x11fe <main+0xd2>
    11fe:	00 00       	nop
	// Safety delay for power part and ADC buffer
	_delay_ms(100);
	// Check AC line
	if(isACSyncPresent()) 	
    1200:	36 d2       	rcall	.+1132   	; 0x166e <isACSyncPresent>
    1202:	88 23       	and	r24, r24
    1204:	69 f0       	breq	.+26     	; 0x1220 <main+0xf4>
	{
		// Power control state machine has not changed - sync has not been detected
		printLedBuffer(0,"ERR AC");
    1206:	61 ee       	ldi	r22, 0xE1	; 225
    1208:	70 e0       	ldi	r23, 0x00	; 0
    120a:	80 e0       	ldi	r24, 0x00	; 0
    120c:	08 dc       	rcall	.-2032   	; 0xa1e <printLedBuffer>
    120e:	8f ef       	ldi	r24, 0xFF	; 255
    1210:	93 ed       	ldi	r25, 0xD3	; 211
    1212:	e0 e3       	ldi	r30, 0x30	; 48
    1214:	81 50       	subi	r24, 0x01	; 1
    1216:	90 40       	sbci	r25, 0x00	; 0
    1218:	e0 40       	sbci	r30, 0x00	; 0
    121a:	e1 f7       	brne	.-8      	; 0x1214 <main+0xe8>
    121c:	00 c0       	rjmp	.+0      	; 0x121e <main+0xf2>
    121e:	00 00       	nop
		_delay_ms(1000);
	}
	// Initialize menu
	InitMenu();
    1220:	92 de       	rcall	.-732    	; 0xf46 <InitMenu>
	// Beep
	Sound_Play(m_beep_1000Hz_100ms);
    1222:	88 e6       	ldi	r24, 0x68	; 104
    1224:	90 e0       	ldi	r25, 0x00	; 0
    1226:	38 d4       	rcall	.+2160   	; 0x1a98 <Sound_Play>
	// When we get here, full ADC buffer have been sampled
	// Get oversampled and filtered ADC for PID controller
	// update_normalized_adc();	// not required here
	
	// Start rotating
	setMotorDirection(ROLL_FWD);
    1228:	81 e0       	ldi	r24, 0x01	; 1
    122a:	9f d1       	rcall	.+830    	; 0x156a <setMotorDirection>
	// Clear timer
	menuUpdateTimer.FOvfl = 0;
    122c:	80 91 89 00 	lds	r24, 0x0089
    1230:	8f 7b       	andi	r24, 0xBF	; 191
    1232:	80 93 89 00 	sts	0x0089, r24
	// Enable watchdog
	wdt_enable(WDTO_1S);
    1236:	2e e0       	ldi	r18, 0x0E	; 14
    1238:	88 e1       	ldi	r24, 0x18	; 24
    123a:	90 e0       	ldi	r25, 0x00	; 0
    123c:	0f b6       	in	r0, 0x3f	; 63
    123e:	f8 94       	cli
    1240:	a8 95       	wdr
    1242:	81 bd       	out	0x21, r24	; 33
    1244:	0f be       	out	0x3f, r0	; 63
    1246:	21 bd       	out	0x21, r18	; 33


int main(void)
{
	uint8_t temp8u = 0x00;
	dbg_PID_t* dbg_p = &dbg_PID_struct;
    1248:	cf eb       	ldi	r28, 0xBF	; 191
    124a:	d1 e0       	ldi	r29, 0x01	; 1
	// Enable watchdog
	wdt_enable(WDTO_1S);

    while(1)
    {
		if (menuUpdateTimer.FOvfl)
    124c:	80 91 89 00 	lds	r24, 0x0089
    1250:	86 ff       	sbrs	r24, 6
    1252:	fc cf       	rjmp	.-8      	; 0x124c <main+0x120>
		{
			// Reset watchdog timer
			wdt_reset();
    1254:	a8 95       	wdr
			
			//--------- BUTTONS ----------//
			
			// Get new button state
			process_buttons();
    1256:	c5 d8       	rcall	.-3702   	; 0x3e2 <process_buttons>
			
			// Give sound feedback
			if (button_state & (BL_MENU | BL_HEATCTRL))
    1258:	80 91 5c 01 	lds	r24, 0x015C
    125c:	90 91 5d 01 	lds	r25, 0x015D
    1260:	88 27       	eor	r24, r24
    1262:	92 72       	andi	r25, 0x22	; 34
    1264:	89 2b       	or	r24, r25
    1266:	19 f0       	breq	.+6      	; 0x126e <main+0x142>
			{
				Sound_Play(m_beep_800Hz_40ms);
    1268:	80 e6       	ldi	r24, 0x60	; 96
    126a:	90 e0       	ldi	r25, 0x00	; 0
    126c:	06 c0       	rjmp	.+12     	; 0x127a <main+0x14e>
			}
			else if (button_action_down & (BD_MENU | BD_UP | BD_DOWN | BD_HEATCTRL))
    126e:	80 91 5b 01 	lds	r24, 0x015B
    1272:	81 7e       	andi	r24, 0xE1	; 225
    1274:	19 f0       	breq	.+6      	; 0x127c <main+0x150>
			{
				Sound_Play(m_beep_1000Hz_40ms);
    1276:	84 e6       	ldi	r24, 0x64	; 100
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	0e d4       	rcall	.+2076   	; 0x1a98 <Sound_Play>
			}	
			// Direction control buttons sounds get special processing at processRollControl()
			
			// If any button is pressed, restart power off interval
			if (button_action_down)
    127c:	80 91 5b 01 	lds	r24, 0x015B
    1280:	81 11       	cpse	r24, r1
				resetAutoPowerOffCounter();
    1282:	7f d3       	rcall	.+1790   	; 0x1982 <resetAutoPowerOffCounter>
			
			//---------- TIMERS ----------//
			
			// Process timers and time counters - it is important to call
			// this function before menu and power controls processing
			processSystemTimers();
    1284:	2d d3       	rcall	.+1626   	; 0x18e0 <processSystemTimers>

			// Warn user about soon auto powering off
			if (sys_timers_flags & AUTOPOFF_SOON)
    1286:	13 9b       	sbis	0x02, 3	; 2
    1288:	03 c0       	rjmp	.+6      	; 0x1290 <main+0x164>
			{
				Sound_Play(m_beep_warn_poff);
    128a:	80 e4       	ldi	r24, 0x40	; 64
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	04 d4       	rcall	.+2056   	; 0x1a98 <Sound_Play>
			}		
			
			//----------- ADC ------------//
			
			// Get new temperature measurement
			update_normalized_adc();			
    1290:	30 d8       	rcall	.-4000   	; 0x2f2 <update_normalized_adc>
		
			// Update indicated Celsius degree
			if (sys_timers_flags & EXPIRED_CELSIUS)
    1292:	10 99       	sbic	0x02, 0	; 2
				update_Celsius();		
    1294:	6c d8       	rcall	.-3880   	; 0x36e <update_Celsius>
			
			//----------- MENU -----------//		
				
			// Process user menu states, settings and indication
			processMenu();
    1296:	60 de       	rcall	.-832    	; 0xf58 <processMenu>
			
			//--------- CONTROLS ---------//		
			
			// Process cyclic rolling, direction control
			processRollControl();	
    1298:	fc d8       	rcall	.-3592   	; 0x492 <processRollControl>
			
			// Process heater events monitoring
			// Must be called before processHeaterControl()
			processHeaterEvents();
    129a:	cc d9       	rcall	.-3176   	; 0x634 <processHeaterEvents>
			
			// Process heater regulation
			processHeaterControl();
    129c:	8d d9       	rcall	.-3302   	; 0x5b8 <processHeaterControl>
			//setHeaterPower(0);		// bug test
		
			// Process heater warnings
			processHeaterAlerts();
    129e:	d6 d9       	rcall	.-3156   	; 0x64c <processHeaterAlerts>
			
			
			
			//------- LOG to UART --------//	
			if (sys_timers_flags & EXPIRED_LOG)
    12a0:	15 9b       	sbis	0x02, 5	; 2
    12a2:	3f c0       	rjmp	.+126    	; 0x1322 <main+0x1f6>
			{
				PRELOAD("z",dbg_p);
    12a4:	fe 01       	movw	r30, r28
    12a6:	ef 01       	movw	r28, r30
				
				logU16p(adc_celsius);					// Actual temp Celsius
    12a8:	80 91 b1 01 	lds	r24, 0x01B1
    12ac:	90 91 b2 01 	lds	r25, 0x01B2
    12b0:	36 df       	rcall	.-404    	; 0x111e <logU16p>
				logU16p(adc_normalized);				// Actual temp (ADC), normalized
    12b2:	80 91 ae 01 	lds	r24, 0x01AE
    12b6:	90 91 af 01 	lds	r25, 0x01AF
    12ba:	31 df       	rcall	.-414    	; 0x111e <logU16p>
				logU16p(adc_filtered);					// Actual temp (ADC), oversampled, filtered
    12bc:	80 91 aa 01 	lds	r24, 0x01AA
    12c0:	90 91 ab 01 	lds	r25, 0x01AB
    12c4:	2c df       	rcall	.-424    	; 0x111e <logU16p>
				USART_sendstr("    ");
    12c6:	8e eb       	ldi	r24, 0xBE	; 190
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	01 d4       	rcall	.+2050   	; 0x1ace <USART_sendstr>

				logU16p(dbg_p->PID_SetPoint);
    12cc:	88 81       	ld	r24, Y
    12ce:	99 81       	ldd	r25, Y+1	; 0x01
    12d0:	26 df       	rcall	.-436    	; 0x111e <logU16p>
				logU16p(dbg_p->PID_ProcessValue);
    12d2:	8a 81       	ldd	r24, Y+2	; 0x02
    12d4:	9b 81       	ldd	r25, Y+3	; 0x03
    12d6:	23 df       	rcall	.-442    	; 0x111e <logU16p>

				logI32p(dbg_p->PID_p_term);
    12d8:	6c 81       	ldd	r22, Y+4	; 0x04
    12da:	7d 81       	ldd	r23, Y+5	; 0x05
    12dc:	88 27       	eor	r24, r24
    12de:	77 fd       	sbrc	r23, 7
    12e0:	80 95       	com	r24
    12e2:	98 2f       	mov	r25, r24
    12e4:	15 df       	rcall	.-470    	; 0x1110 <logI32p>
				logI32p(dbg_p->PID_d_term);
    12e6:	68 85       	ldd	r22, Y+8	; 0x08
    12e8:	79 85       	ldd	r23, Y+9	; 0x09
    12ea:	88 27       	eor	r24, r24
    12ec:	77 fd       	sbrc	r23, 7
    12ee:	80 95       	com	r24
    12f0:	98 2f       	mov	r25, r24
    12f2:	0e df       	rcall	.-484    	; 0x1110 <logI32p>
				logI32p(dbg_p->PID_i_term);
    12f4:	6e 81       	ldd	r22, Y+6	; 0x06
    12f6:	7f 81       	ldd	r23, Y+7	; 0x07
    12f8:	88 27       	eor	r24, r24
    12fa:	77 fd       	sbrc	r23, 7
    12fc:	80 95       	com	r24
    12fe:	98 2f       	mov	r25, r24
    1300:	07 df       	rcall	.-498    	; 0x1110 <logI32p>
				
				USART_sendstr("    ");
    1302:	8e eb       	ldi	r24, 0xBE	; 190
    1304:	90 e0       	ldi	r25, 0x00	; 0
    1306:	e3 d3       	rcall	.+1990   	; 0x1ace <USART_sendstr>
				
				logU16p(dbg_p->PID_output);
    1308:	8a 85       	ldd	r24, Y+10	; 0x0a
    130a:	9b 85       	ldd	r25, Y+11	; 0x0b
    130c:	08 df       	rcall	.-496    	; 0x111e <logU16p>
				
				USART_sendstr("    ");
    130e:	8e eb       	ldi	r24, 0xBE	; 190
    1310:	90 e0       	ldi	r25, 0x00	; 0
    1312:	dd d3       	rcall	.+1978   	; 0x1ace <USART_sendstr>
				logU16p(menuUpdateTimer.Timer);
    1314:	80 91 8a 00 	lds	r24, 0x008A
    1318:	90 e0       	ldi	r25, 0x00	; 0
    131a:	01 df       	rcall	.-510    	; 0x111e <logU16p>
			
				USART_sendstr("\n\r");
    131c:	8e ed       	ldi	r24, 0xDE	; 222
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	d6 d3       	rcall	.+1964   	; 0x1ace <USART_sendstr>

				//---------------------------------//
			}
			
			cli();
    1322:	f8 94       	cli
			menuUpdateTimer.FOvfl = 0;	
    1324:	80 91 89 00 	lds	r24, 0x0089
    1328:	8f 7b       	andi	r24, 0xBF	; 191
    132a:	80 93 89 00 	sts	0x0089, r24
			sei();
    132e:	78 94       	sei
    1330:	8d cf       	rjmp	.-230    	; 0x124c <main+0x120>

00001332 <setPIDIntegratorLimit>:
	// When error = 0, maximum is simply integ_soft_k * INTEGRATOR_SOFT_RANGE
	// integ_soft_k is chosen for desired maximum
	// For example, we want integrator maximum of about 30% at 90C. Then integ_soft_k = 300_000 / INTEGRATOR_SOFT_RANGE = 862
	// The "magic" coefficient in the integ_soft_k expression should be 862 / (90 - 15) = 11.49 => 12
	
	if (set_temp < 50)
    1332:	82 33       	cpi	r24, 0x32	; 50
    1334:	08 f4       	brcc	.+2      	; 0x1338 <setPIDIntegratorLimit+0x6>
		set_temp = 50;
    1336:	82 e3       	ldi	r24, 0x32	; 50
	set_temp -= 15;
    1338:	8f 50       	subi	r24, 0x0F	; 15
	integ_soft_k = (uint16_t)set_temp * 12;
    133a:	2c e0       	ldi	r18, 0x0C	; 12
    133c:	82 9f       	mul	r24, r18
    133e:	c0 01       	movw	r24, r0
    1340:	11 24       	eor	r1, r1
    1342:	90 93 8c 01 	sts	0x018C, r25
    1346:	80 93 8b 01 	sts	0x018B, r24
    134a:	08 95       	ret

0000134c <processPID>:
//	setPoint - desired process value
//	processValue - actual process value
//	mode - enable/disable controller - 
//	  terms are calculated anyway, but output is set to 0 when disabled
uint8_t processPID(uint16_t setPoint, uint16_t processValue, uint8_t mode)
{
    134c:	4f 92       	push	r4
    134e:	5f 92       	push	r5
    1350:	6f 92       	push	r6
    1352:	7f 92       	push	r7
    1354:	9f 92       	push	r9
    1356:	af 92       	push	r10
    1358:	bf 92       	push	r11
    135a:	cf 92       	push	r12
    135c:	df 92       	push	r13
    135e:	ef 92       	push	r14
    1360:	ff 92       	push	r15
    1362:	0f 93       	push	r16
    1364:	1f 93       	push	r17
    1366:	cf 93       	push	r28
    1368:	df 93       	push	r29
    136a:	5c 01       	movw	r10, r24
    136c:	7b 01       	movw	r14, r22
    136e:	94 2e       	mov	r9, r20
	int16_t error, p_term, i_term, d_term, temp;
	int32_t integ_max;
	dbg_PID_t* dbg_p = &dbg_PID_struct;
	
	// Get the error
	error = setPoint - processValue;
    1370:	9c 01       	movw	r18, r24
    1372:	26 1b       	sub	r18, r22
    1374:	37 0b       	sbc	r19, r23
	
	//------ Calculate P term --------//
	if (error > (PROP_MAX / Kp))			// Compare before multiplication to avoid overflow
    1376:	2d 35       	cpi	r18, 0x5D	; 93
    1378:	81 e0       	ldi	r24, 0x01	; 1
    137a:	38 07       	cpc	r19, r24
    137c:	5c f4       	brge	.+22     	; 0x1394 <processPID+0x48>
	{
		p_term = PROP_MAX;	
	}
	else if (error < (PROP_MIN / Kp))
    137e:	24 3a       	cpi	r18, 0xA4	; 164
    1380:	8e ef       	ldi	r24, 0xFE	; 254
    1382:	38 07       	cpc	r19, r24
    1384:	54 f0       	brlt	.+20     	; 0x139a <processPID+0x4e>
	{
		p_term = PROP_MIN;	
	}
	else
	{
		p_term = error * Kp;
    1386:	8b e2       	ldi	r24, 0x2B	; 43
    1388:	82 9f       	mul	r24, r18
    138a:	80 01       	movw	r16, r0
    138c:	83 9f       	mul	r24, r19
    138e:	10 0d       	add	r17, r0
    1390:	11 24       	eor	r1, r1
    1392:	05 c0       	rjmp	.+10     	; 0x139e <processPID+0x52>
	error = setPoint - processValue;
	
	//------ Calculate P term --------//
	if (error > (PROP_MAX / Kp))			// Compare before multiplication to avoid overflow
	{
		p_term = PROP_MAX;	
    1394:	08 e9       	ldi	r16, 0x98	; 152
    1396:	1a e3       	ldi	r17, 0x3A	; 58
    1398:	02 c0       	rjmp	.+4      	; 0x139e <processPID+0x52>
	}
	else if (error < (PROP_MIN / Kp))
	{
		p_term = PROP_MIN;	
    139a:	08 e6       	ldi	r16, 0x68	; 104
    139c:	15 ec       	ldi	r17, 0xC5	; 197
	{
		p_term = error * Kp;
	}
	
	//------ Calculate I term --------//
	if (!(mode & PID_RESET_INTEGRATOR))
    139e:	92 fc       	sbrc	r9, 2
    13a0:	1f c0       	rjmp	.+62     	; 0x13e0 <processPID+0x94>
		integAcc += error * Ki;
    13a2:	83 e2       	ldi	r24, 0x23	; 35
    13a4:	82 9f       	mul	r24, r18
    13a6:	a0 01       	movw	r20, r0
    13a8:	83 9f       	mul	r24, r19
    13aa:	50 0d       	add	r21, r0
    13ac:	11 24       	eor	r1, r1
    13ae:	66 27       	eor	r22, r22
    13b0:	57 fd       	sbrc	r21, 7
    13b2:	60 95       	com	r22
    13b4:	76 2f       	mov	r23, r22
    13b6:	80 91 8d 01 	lds	r24, 0x018D
    13ba:	90 91 8e 01 	lds	r25, 0x018E
    13be:	a0 91 8f 01 	lds	r26, 0x018F
    13c2:	b0 91 90 01 	lds	r27, 0x0190
    13c6:	84 0f       	add	r24, r20
    13c8:	95 1f       	adc	r25, r21
    13ca:	a6 1f       	adc	r26, r22
    13cc:	b7 1f       	adc	r27, r23
    13ce:	80 93 8d 01 	sts	0x018D, r24
    13d2:	90 93 8e 01 	sts	0x018E, r25
    13d6:	a0 93 8f 01 	sts	0x018F, r26
    13da:	b0 93 90 01 	sts	0x0190, r27
    13de:	08 c0       	rjmp	.+16     	; 0x13f0 <processPID+0xa4>
	else
		integAcc = 0;		// May be useful for debug
    13e0:	10 92 8d 01 	sts	0x018D, r1
    13e4:	10 92 8e 01 	sts	0x018E, r1
    13e8:	10 92 8f 01 	sts	0x018F, r1
    13ec:	10 92 90 01 	sts	0x0190, r1

	#ifdef INTEGRATOR_SOFT_LIMIT
	// Soft limit is a monotone linear function f(error), f(error) = 0 when error = INTEGRATOR_SOFT_RANGE
	// growing up to f(error) = INTEGRATOR_SOFT_MAX when error = 0
	if (error > INTEGRATOR_SOFT_RANGE)
    13f0:	2d 35       	cpi	r18, 0x5D	; 93
    13f2:	81 e0       	ldi	r24, 0x01	; 1
    13f4:	38 07       	cpc	r19, r24
    13f6:	64 f4       	brge	.+24     	; 0x1410 <processPID+0xc4>
		integ_max = 0;
	else if (error < 0)
    13f8:	37 fd       	sbrc	r19, 7
    13fa:	0e c0       	rjmp	.+28     	; 0x1418 <processPID+0xcc>
		integ_max = INTEGRATOR_MAX;
	else
	{
		integ_max = (int32_t)(INTEGRATOR_SOFT_RANGE - error) * integ_soft_k;	// <- optimized
    13fc:	ac e5       	ldi	r26, 0x5C	; 92
    13fe:	b1 e0       	ldi	r27, 0x01	; 1
    1400:	a2 1b       	sub	r26, r18
    1402:	b3 0b       	sbc	r27, r19
    1404:	20 91 8b 01 	lds	r18, 0x018B
    1408:	30 91 8c 01 	lds	r19, 0x018C
    140c:	ab d3       	rcall	.+1878   	; 0x1b64 <__usmulhisi3>
    140e:	08 c0       	rjmp	.+16     	; 0x1420 <processPID+0xd4>

	#ifdef INTEGRATOR_SOFT_LIMIT
	// Soft limit is a monotone linear function f(error), f(error) = 0 when error = INTEGRATOR_SOFT_RANGE
	// growing up to f(error) = INTEGRATOR_SOFT_MAX when error = 0
	if (error > INTEGRATOR_SOFT_RANGE)
		integ_max = 0;
    1410:	60 e0       	ldi	r22, 0x00	; 0
    1412:	70 e0       	ldi	r23, 0x00	; 0
    1414:	cb 01       	movw	r24, r22
    1416:	04 c0       	rjmp	.+8      	; 0x1420 <processPID+0xd4>
	else if (error < 0)
		integ_max = INTEGRATOR_MAX;
    1418:	60 e2       	ldi	r22, 0x20	; 32
    141a:	71 ea       	ldi	r23, 0xA1	; 161
    141c:	87 e0       	ldi	r24, 0x07	; 7
    141e:	90 e0       	ldi	r25, 0x00	; 0
	else
	{
		integ_max = (int32_t)(INTEGRATOR_SOFT_RANGE - error) * integ_soft_k;	// <- optimized
	}

	if (integAcc > integ_max )
    1420:	40 90 8d 01 	lds	r4, 0x018D
    1424:	50 90 8e 01 	lds	r5, 0x018E
    1428:	60 90 8f 01 	lds	r6, 0x018F
    142c:	70 90 90 01 	lds	r7, 0x0190
    1430:	64 15       	cp	r22, r4
    1432:	75 05       	cpc	r23, r5
    1434:	86 05       	cpc	r24, r6
    1436:	97 05       	cpc	r25, r7
    1438:	4c f4       	brge	.+18     	; 0x144c <processPID+0x100>
	{
		integAcc = integ_max;
    143a:	60 93 8d 01 	sts	0x018D, r22
    143e:	70 93 8e 01 	sts	0x018E, r23
    1442:	80 93 8f 01 	sts	0x018F, r24
    1446:	90 93 90 01 	sts	0x0190, r25
    144a:	0a c0       	rjmp	.+20     	; 0x1460 <processPID+0x114>
	}
	else if (integAcc < INTEGRATOR_MIN)
    144c:	77 fe       	sbrs	r7, 7
    144e:	08 c0       	rjmp	.+16     	; 0x1460 <processPID+0x114>
	{
		integAcc = INTEGRATOR_MIN;
    1450:	10 92 8d 01 	sts	0x018D, r1
    1454:	10 92 8e 01 	sts	0x018E, r1
    1458:	10 92 8f 01 	sts	0x018F, r1
    145c:	10 92 90 01 	sts	0x0190, r1
	{
		integAcc = INTEGRATOR_MIN;
	}
	#endif
	
	i_term = (int16_t)(integAcc / INTEGRATOR_SCALE);	// Should not exceed MAXINT16
    1460:	60 91 8d 01 	lds	r22, 0x018D
    1464:	70 91 8e 01 	lds	r23, 0x018E
    1468:	80 91 8f 01 	lds	r24, 0x018F
    146c:	90 91 90 01 	lds	r25, 0x0190
    1470:	24 e6       	ldi	r18, 0x64	; 100
    1472:	30 e0       	ldi	r19, 0x00	; 0
    1474:	40 e0       	ldi	r20, 0x00	; 0
    1476:	50 e0       	ldi	r21, 0x00	; 0
    1478:	48 d3       	rcall	.+1680   	; 0x1b0a <__divmodsi4>
    147a:	69 01       	movw	r12, r18

	//------ Calculate D term --------//
	d_term = lastProcessValue - processValue;	
    147c:	80 91 91 01 	lds	r24, 0x0191
    1480:	90 91 92 01 	lds	r25, 0x0192
    1484:	8e 19       	sub	r24, r14
    1486:	9f 09       	sbc	r25, r15
	if (d_term > DIFF_MAX / Kd)
    1488:	88 30       	cpi	r24, 0x08	; 8
    148a:	91 05       	cpc	r25, r1
    148c:	74 f4       	brge	.+28     	; 0x14aa <processPID+0x15e>
	{
		d_term = DIFF_MAX;
	}
	else if (d_term < DIFF_MIN / Kd)
    148e:	89 3f       	cpi	r24, 0xF9	; 249
    1490:	2f ef       	ldi	r18, 0xFF	; 255
    1492:	92 07       	cpc	r25, r18
    1494:	6c f0       	brlt	.+26     	; 0x14b0 <processPID+0x164>
	{
		d_term = DIFF_MIN;
	}
	else
	{
		d_term = Kd * d_term;
    1496:	20 e9       	ldi	r18, 0x90	; 144
    1498:	31 e0       	ldi	r19, 0x01	; 1
    149a:	82 9f       	mul	r24, r18
    149c:	e0 01       	movw	r28, r0
    149e:	83 9f       	mul	r24, r19
    14a0:	d0 0d       	add	r29, r0
    14a2:	92 9f       	mul	r25, r18
    14a4:	d0 0d       	add	r29, r0
    14a6:	11 24       	eor	r1, r1
    14a8:	05 c0       	rjmp	.+10     	; 0x14b4 <processPID+0x168>

	//------ Calculate D term --------//
	d_term = lastProcessValue - processValue;	
	if (d_term > DIFF_MAX / Kd)
	{
		d_term = DIFF_MAX;
    14aa:	c8 eb       	ldi	r28, 0xB8	; 184
    14ac:	db e0       	ldi	r29, 0x0B	; 11
    14ae:	02 c0       	rjmp	.+4      	; 0x14b4 <processPID+0x168>
	}
	else if (d_term < DIFF_MIN / Kd)
	{
		d_term = DIFF_MIN;
    14b0:	c8 e4       	ldi	r28, 0x48	; 72
    14b2:	d4 ef       	ldi	r29, 0xF4	; 244
	}
	else
	{
		d_term = Kd * d_term;
	}
	lastProcessValue = processValue;
    14b4:	f0 92 92 01 	sts	0x0192, r15
    14b8:	e0 92 91 01 	sts	0x0191, r14
	
	//--------- Summ terms -----------//
	if (mode & PID_ENABLED)
    14bc:	90 fe       	sbrs	r9, 0
    14be:	20 c0       	rjmp	.+64     	; 0x1500 <processPID+0x1b4>
		temp = (int16_t)( ((int32_t)p_term + (int32_t)i_term + (int32_t)d_term) / SCALING_FACTOR );
    14c0:	b8 01       	movw	r22, r16
    14c2:	88 27       	eor	r24, r24
    14c4:	77 fd       	sbrc	r23, 7
    14c6:	80 95       	com	r24
    14c8:	98 2f       	mov	r25, r24
    14ca:	26 01       	movw	r4, r12
    14cc:	66 24       	eor	r6, r6
    14ce:	57 fc       	sbrc	r5, 7
    14d0:	60 94       	com	r6
    14d2:	76 2c       	mov	r7, r6
    14d4:	64 0d       	add	r22, r4
    14d6:	75 1d       	adc	r23, r5
    14d8:	86 1d       	adc	r24, r6
    14da:	97 1d       	adc	r25, r7
    14dc:	2e 01       	movw	r4, r28
    14de:	66 24       	eor	r6, r6
    14e0:	57 fc       	sbrc	r5, 7
    14e2:	60 94       	com	r6
    14e4:	76 2c       	mov	r7, r6
    14e6:	64 0d       	add	r22, r4
    14e8:	75 1d       	adc	r23, r5
    14ea:	86 1d       	adc	r24, r6
    14ec:	97 1d       	adc	r25, r7
    14ee:	24 e6       	ldi	r18, 0x64	; 100
    14f0:	30 e0       	ldi	r19, 0x00	; 0
    14f2:	40 e0       	ldi	r20, 0x00	; 0
    14f4:	50 e0       	ldi	r21, 0x00	; 0
    14f6:	09 d3       	rcall	.+1554   	; 0x1b0a <__divmodsi4>
	else
		temp = 0;
	
	if (temp > PID_OUTPUT_MAX)
    14f8:	25 36       	cpi	r18, 0x65	; 101
    14fa:	31 05       	cpc	r19, r1
    14fc:	4c f4       	brge	.+18     	; 0x1510 <processPID+0x1c4>
    14fe:	02 c0       	rjmp	.+4      	; 0x1504 <processPID+0x1b8>
	
	//--------- Summ terms -----------//
	if (mode & PID_ENABLED)
		temp = (int16_t)( ((int32_t)p_term + (int32_t)i_term + (int32_t)d_term) / SCALING_FACTOR );
	else
		temp = 0;
    1500:	20 e0       	ldi	r18, 0x00	; 0
    1502:	30 e0       	ldi	r19, 0x00	; 0
    1504:	c9 01       	movw	r24, r18
    1506:	37 ff       	sbrs	r19, 7
    1508:	05 c0       	rjmp	.+10     	; 0x1514 <processPID+0x1c8>
    150a:	80 e0       	ldi	r24, 0x00	; 0
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	02 c0       	rjmp	.+4      	; 0x1514 <processPID+0x1c8>
	
	if (temp > PID_OUTPUT_MAX)
	{
		temp = PID_OUTPUT_MAX;
    1510:	84 e6       	ldi	r24, 0x64	; 100
    1512:	90 e0       	ldi	r25, 0x00	; 0
	{
		temp = PID_OUTPUT_MIN;
	}
	
	//------- Debug --------//
	PRELOAD("z",dbg_p);			// A trick used to make GCC use indirect addressing with displacement
    1514:	ef eb       	ldi	r30, 0xBF	; 191
    1516:	f1 e0       	ldi	r31, 0x01	; 1
	
	dbg_p->PID_SetPoint = setPoint;
    1518:	b1 82       	std	Z+1, r11	; 0x01
    151a:	a0 82       	st	Z, r10
	dbg_p->PID_ProcessValue = processValue;
    151c:	f3 82       	std	Z+3, r15	; 0x03
    151e:	e2 82       	std	Z+2, r14	; 0x02
	//dbg_p->PID_error = error;
	dbg_p->PID_p_term = p_term;
    1520:	15 83       	std	Z+5, r17	; 0x05
    1522:	04 83       	std	Z+4, r16	; 0x04
	dbg_p->PID_i_term = i_term;
    1524:	d7 82       	std	Z+7, r13	; 0x07
    1526:	c6 82       	std	Z+6, r12	; 0x06
	//dbg_p->PID_i_max = (int16_t)(integ_max / INTEGRATOR_SCALE);
	dbg_p->PID_d_term = d_term;
    1528:	d1 87       	std	Z+9, r29	; 0x09
    152a:	c0 87       	std	Z+8, r28	; 0x08
	dbg_p->PID_output = temp;
    152c:	93 87       	std	Z+11, r25	; 0x0b
    152e:	82 87       	std	Z+10, r24	; 0x0a

	
	return (uint8_t)temp;	
}
    1530:	df 91       	pop	r29
    1532:	cf 91       	pop	r28
    1534:	1f 91       	pop	r17
    1536:	0f 91       	pop	r16
    1538:	ff 90       	pop	r15
    153a:	ef 90       	pop	r14
    153c:	df 90       	pop	r13
    153e:	cf 90       	pop	r12
    1540:	bf 90       	pop	r11
    1542:	af 90       	pop	r10
    1544:	9f 90       	pop	r9
    1546:	7f 90       	pop	r7
    1548:	6f 90       	pop	r6
    154a:	5f 90       	pop	r5
    154c:	4f 90       	pop	r4
    154e:	08 95       	ret

00001550 <setHeaterPower>:
void setHeaterPower(uint16_t value)
{
	// Disable interrupts from analog comparator
	//ACSR = (0<<ACIS1 | 0<<ACIS0);
	uint16_t temp = (value > HEATER_MAX_POWER) ? HEATER_MAX_POWER : value;
	cli();
    1550:	f8 94       	cli
// For some reason accessing ACSR makes something wrong with the interrupt - a weird bug
void setHeaterPower(uint16_t value)
{
	// Disable interrupts from analog comparator
	//ACSR = (0<<ACIS1 | 0<<ACIS0);
	uint16_t temp = (value > HEATER_MAX_POWER) ? HEATER_MAX_POWER : value;
    1552:	9c 01       	movw	r18, r24
    1554:	85 36       	cpi	r24, 0x65	; 101
    1556:	91 05       	cpc	r25, r1
    1558:	10 f0       	brcs	.+4      	; 0x155e <setHeaterPower+0xe>
    155a:	24 e6       	ldi	r18, 0x64	; 100
    155c:	30 e0       	ldi	r19, 0x00	; 0
	cli();
	// Update value
	heaterPower = temp;		
    155e:	30 93 96 01 	sts	0x0196, r19
    1562:	20 93 95 01 	sts	0x0195, r18
	// Reenable interrupts
	//ACSR = (1<<ACIE | 0<<ACIS1 | 0<<ACIS0);
	sei();
    1566:	78 94       	sei
    1568:	08 95       	ret

0000156a <setMotorDirection>:

// User function to control motor rotation
void setMotorDirection(uint8_t dir)
{
	// Disable interrupts from timer0 
	TIMSK = (1<<OCIE2);
    156a:	90 e8       	ldi	r25, 0x80	; 128
    156c:	99 bf       	out	0x39, r25	; 57
		
	newDirReq = dir;	// save new direction request
    156e:	80 93 97 01 	sts	0x0197, r24
	dirChangedMask = ~ROLL_DIR_CHANGED;
    1572:	9f ed       	ldi	r25, 0xDF	; 223
    1574:	90 93 81 00 	sts	0x0081, r25
	
	if (dir & ROLL_FWD)
    1578:	80 ff       	sbrs	r24, 0
    157a:	09 c0       	rjmp	.+18     	; 0x158e <setMotorDirection+0x24>
		bottomPoint = rollPoint;  
    157c:	80 91 98 01 	lds	r24, 0x0198
    1580:	90 91 99 01 	lds	r25, 0x0199
    1584:	90 93 9b 01 	sts	0x019B, r25
    1588:	80 93 9a 01 	sts	0x019A, r24
    158c:	0a c0       	rjmp	.+20     	; 0x15a2 <setMotorDirection+0x38>
	else if (dir & ROLL_REV)
    158e:	81 ff       	sbrs	r24, 1
    1590:	08 c0       	rjmp	.+16     	; 0x15a2 <setMotorDirection+0x38>
		topPoint = rollPoint;
    1592:	80 91 98 01 	lds	r24, 0x0198
    1596:	90 91 99 01 	lds	r25, 0x0199
    159a:	90 93 9d 01 	sts	0x019D, r25
    159e:	80 93 9c 01 	sts	0x019C, r24

	// Enable interrupts from timer 0
	TIMSK = (1<<TOIE0 | 1<<OCIE2);
    15a2:	81 e8       	ldi	r24, 0x81	; 129
    15a4:	89 bf       	out	0x39, r24	; 57
    15a6:	08 95       	ret

000015a8 <stopCycleRolling>:
}

void stopCycleRolling(uint8_t doResetPoints)
{
	// Disable interrupts from timer0 
	TIMSK = (1<<OCIE2);
    15a8:	90 e8       	ldi	r25, 0x80	; 128
    15aa:	99 bf       	out	0x39, r25	; 57
	
	rollState &= ~ROLL_CYCLE;
    15ac:	90 91 94 01 	lds	r25, 0x0194
    15b0:	9b 7f       	andi	r25, 0xFB	; 251
    15b2:	90 93 94 01 	sts	0x0194, r25
	if (doResetPoints)
    15b6:	88 23       	and	r24, r24
    15b8:	71 f0       	breq	.+28     	; 0x15d6 <stopCycleRolling+0x2e>
	{
		topPoint = bottomPoint = rollPoint;
    15ba:	80 91 98 01 	lds	r24, 0x0198
    15be:	90 91 99 01 	lds	r25, 0x0199
    15c2:	90 93 9b 01 	sts	0x019B, r25
    15c6:	80 93 9a 01 	sts	0x019A, r24
    15ca:	90 93 9d 01 	sts	0x019D, r25
    15ce:	80 93 9c 01 	sts	0x019C, r24
		activeRollCycle = 0;	
    15d2:	10 92 93 01 	sts	0x0193, r1
	}		
	
	// Enable interrupts from timer 0
	TIMSK = (1<<TOIE0 | 1<<OCIE2);
    15d6:	81 e8       	ldi	r24, 0x81	; 129
    15d8:	89 bf       	out	0x39, r24	; 57
    15da:	08 95       	ret

000015dc <clearRollFlags>:

// Safe way to reset some bits in rollState variable
void clearRollFlags(uint8_t flags)
{
	// Disable interrupts from timer0 
	TIMSK = (1<<OCIE2);
    15dc:	90 e8       	ldi	r25, 0x80	; 128
    15de:	99 bf       	out	0x39, r25	; 57

	// Clear specified bits
	rollState &= ~flags;
    15e0:	80 95       	com	r24
    15e2:	90 91 94 01 	lds	r25, 0x0194
    15e6:	98 23       	and	r25, r24
    15e8:	90 93 94 01 	sts	0x0194, r25
	
	// Enable interrupts from timer 0
	TIMSK = (1<<TOIE0 | 1<<OCIE2);
    15ec:	81 e8       	ldi	r24, 0x81	; 129
    15ee:	89 bf       	out	0x39, r24	; 57
    15f0:	08 95       	ret

000015f2 <isTopPointValid>:
}

uint8_t isTopPointValid(void)
{
	// Disable interrupts from timer0 
	TIMSK = (1<<OCIE2);
    15f2:	80 e8       	ldi	r24, 0x80	; 128
    15f4:	89 bf       	out	0x39, r24	; 57
	uint8_t temp = ( (int16_t)(topPoint - rollPoint) >= 0 );
    15f6:	80 91 9c 01 	lds	r24, 0x019C
    15fa:	90 91 9d 01 	lds	r25, 0x019D
    15fe:	20 91 98 01 	lds	r18, 0x0198
    1602:	30 91 99 01 	lds	r19, 0x0199
    1606:	82 1b       	sub	r24, r18
    1608:	93 0b       	sbc	r25, r19
    160a:	89 2f       	mov	r24, r25
    160c:	80 95       	com	r24
	// Enable interrupts from timer 0
	TIMSK = (1<<TOIE0 | 1<<OCIE2);
    160e:	91 e8       	ldi	r25, 0x81	; 129
    1610:	99 bf       	out	0x39, r25	; 57
	return temp;
}
    1612:	88 1f       	adc	r24, r24
    1614:	88 27       	eor	r24, r24
    1616:	88 1f       	adc	r24, r24
    1618:	08 95       	ret

0000161a <isBottomPointValid>:

uint8_t isBottomPointValid(void)
{
	// Disable interrupts from timer0 
	TIMSK = (1<<OCIE2);
    161a:	80 e8       	ldi	r24, 0x80	; 128
    161c:	89 bf       	out	0x39, r24	; 57
	uint8_t temp = ( (int16_t)(rollPoint - bottomPoint) >= 0 );
    161e:	80 91 98 01 	lds	r24, 0x0198
    1622:	90 91 99 01 	lds	r25, 0x0199
    1626:	20 91 9a 01 	lds	r18, 0x019A
    162a:	30 91 9b 01 	lds	r19, 0x019B
    162e:	82 1b       	sub	r24, r18
    1630:	93 0b       	sbc	r25, r19
    1632:	89 2f       	mov	r24, r25
    1634:	80 95       	com	r24
	// Enable interrupts from timer 0
	TIMSK = (1<<TOIE0 | 1<<OCIE2);
    1636:	91 e8       	ldi	r25, 0x81	; 129
    1638:	99 bf       	out	0x39, r25	; 57
	return temp;
}
    163a:	88 1f       	adc	r24, r24
    163c:	88 27       	eor	r24, r24
    163e:	88 1f       	adc	r24, r24
    1640:	08 95       	ret

00001642 <startCycleRolling>:


uint8_t startCycleRolling(void)
{
	// Disable interrupts from timer0 
	TIMSK = (1<<OCIE2);
    1642:	80 e8       	ldi	r24, 0x80	; 128
    1644:	89 bf       	out	0x39, r24	; 57
	
	if ( isTopPointValid() && isBottomPointValid() )
    1646:	d5 df       	rcall	.-86     	; 0x15f2 <isTopPointValid>
    1648:	88 23       	and	r24, r24
    164a:	59 f0       	breq	.+22     	; 0x1662 <startCycleRolling+0x20>
    164c:	e6 df       	rcall	.-52     	; 0x161a <isBottomPointValid>
    164e:	88 23       	and	r24, r24
    1650:	41 f0       	breq	.+16     	; 0x1662 <startCycleRolling+0x20>
	{
		rollState |= ROLL_CYCLE;
    1652:	80 91 94 01 	lds	r24, 0x0194
    1656:	84 60       	ori	r24, 0x04	; 4
    1658:	80 93 94 01 	sts	0x0194, r24
		activeRollCycle = 1;
    165c:	81 e0       	ldi	r24, 0x01	; 1
    165e:	80 93 93 01 	sts	0x0193, r24
	}
	
	// Enable interrupts from timer 0
	TIMSK = (1<<TOIE0 | 1<<OCIE2);
    1662:	81 e8       	ldi	r24, 0x81	; 129
    1664:	89 bf       	out	0x39, r24	; 57
	
	return (rollState & ROLL_CYCLE);
    1666:	80 91 94 01 	lds	r24, 0x0194
}
    166a:	84 70       	andi	r24, 0x04	; 4
    166c:	08 95       	ret

0000166e <isACSyncPresent>:
}


uint8_t isACSyncPresent(void)
{
	return 	p_state == 0x0F;
    166e:	81 e0       	ldi	r24, 0x01	; 1
    1670:	90 91 82 00 	lds	r25, 0x0082
    1674:	9f 30       	cpi	r25, 0x0F	; 15
    1676:	09 f0       	breq	.+2      	; 0x167a <isACSyncPresent+0xc>
    1678:	80 e0       	ldi	r24, 0x00	; 0
}
    167a:	08 95       	ret

0000167c <__vector_16>:




ISR(ANA_COMP_vect)
{
    167c:	1f 92       	push	r1
    167e:	0f 92       	push	r0
    1680:	0f b6       	in	r0, 0x3f	; 63
    1682:	0f 92       	push	r0
    1684:	11 24       	eor	r1, r1
    1686:	2f 93       	push	r18
    1688:	3f 93       	push	r19
    168a:	4f 93       	push	r20
    168c:	5f 93       	push	r21
    168e:	8f 93       	push	r24
    1690:	9f 93       	push	r25
	static uint16_t sigma = 0;
	uint16_t delta;
	
	// Once triggered, disable further comparator interrupt
	ACSR &= ~(1<<ACIE);		// safe - ACI flag will be cleared anyway before reenabling comparator interrupt
    1692:	43 98       	cbi	0x08, 3	; 8
	
	// Process heater delta-sigma modulator
	if (sigma >= HEATER_MAX_POWER)
    1694:	40 91 9e 01 	lds	r20, 0x019E
    1698:	50 91 9f 01 	lds	r21, 0x019F
    169c:	44 36       	cpi	r20, 0x64	; 100
    169e:	51 05       	cpc	r21, r1
    16a0:	30 f0       	brcs	.+12     	; 0x16ae <__vector_16+0x32>
	{
		PORTD |= (1<<PD_HEATER | 1<<PD_HEAT_INDIC);
    16a2:	82 b3       	in	r24, 0x12	; 18
    16a4:	80 63       	ori	r24, 0x30	; 48
    16a6:	82 bb       	out	0x12, r24	; 18
		delta = -HEATER_MAX_POWER;	
    16a8:	2c e9       	ldi	r18, 0x9C	; 156
    16aa:	3f ef       	ldi	r19, 0xFF	; 255
    16ac:	03 c0       	rjmp	.+6      	; 0x16b4 <__vector_16+0x38>
	}		
	else
	{
		PORTD &= ~(1<<PD_HEAT_INDIC);
    16ae:	95 98       	cbi	0x12, 5	; 18
		delta = 0;
    16b0:	20 e0       	ldi	r18, 0x00	; 0
    16b2:	30 e0       	ldi	r19, 0x00	; 0
	}
	sigma += delta + heaterPower;	
    16b4:	80 91 95 01 	lds	r24, 0x0195
    16b8:	90 91 96 01 	lds	r25, 0x0196
    16bc:	84 0f       	add	r24, r20
    16be:	95 1f       	adc	r25, r21
    16c0:	82 0f       	add	r24, r18
    16c2:	93 1f       	adc	r25, r19
    16c4:	90 93 9f 01 	sts	0x019F, r25
    16c8:	80 93 9e 01 	sts	0x019E, r24
	
	// Reprogram timer0
	TCNT0 = 256 - TRIAC_IMPULSE_TIME;		// Triac gate impulse time
    16cc:	86 ef       	ldi	r24, 0xF6	; 246
    16ce:	82 bf       	out	0x32, r24	; 50
	TIFR = (1<<TOV0);						// Clear interrupt flag - safe, write operation is used (not r-m-w)
    16d0:	81 e0       	ldi	r24, 0x01	; 1
    16d2:	88 bf       	out	0x38, r24	; 56
	// Modify state	
	p_state &= ~STATE_MASK;					// Start new state machine cycle
    16d4:	80 91 82 00 	lds	r24, 0x0082
    16d8:	80 7f       	andi	r24, 0xF0	; 240
	p_state ^= HALF_PERIOD_FLAG;			// Toggle flag
    16da:	80 58       	subi	r24, 0x80	; 128
    16dc:	80 93 82 00 	sts	0x0082, r24
	
}
    16e0:	9f 91       	pop	r25
    16e2:	8f 91       	pop	r24
    16e4:	5f 91       	pop	r21
    16e6:	4f 91       	pop	r20
    16e8:	3f 91       	pop	r19
    16ea:	2f 91       	pop	r18
    16ec:	0f 90       	pop	r0
    16ee:	0f be       	out	0x3f, r0	; 63
    16f0:	0f 90       	pop	r0
    16f2:	1f 90       	pop	r1
    16f4:	18 95       	reti

000016f6 <__vector_9>:



ISR(TIMER0_OVF_vect)
{
    16f6:	1f 92       	push	r1
    16f8:	0f 92       	push	r0
    16fa:	0f b6       	in	r0, 0x3f	; 63
    16fc:	0f 92       	push	r0
    16fe:	11 24       	eor	r1, r1
    1700:	2f 93       	push	r18
    1702:	3f 93       	push	r19
    1704:	4f 93       	push	r20
    1706:	5f 93       	push	r21
    1708:	6f 93       	push	r22
    170a:	7f 93       	push	r23
    170c:	8f 93       	push	r24
    170e:	9f 93       	push	r25
    1710:	af 93       	push	r26
    1712:	bf 93       	push	r27
    1714:	ef 93       	push	r30
    1716:	ff 93       	push	r31
	uint8_t temp;
	
	switch(p_state & STATE_MASK)
    1718:	80 91 82 00 	lds	r24, 0x0082
    171c:	8f 70       	andi	r24, 0x0F	; 15
    171e:	81 30       	cpi	r24, 0x01	; 1
    1720:	49 f0       	breq	.+18     	; 0x1734 <__vector_9+0x3e>
    1722:	28 f0       	brcs	.+10     	; 0x172e <__vector_9+0x38>
    1724:	82 30       	cpi	r24, 0x02	; 2
    1726:	49 f0       	breq	.+18     	; 0x173a <__vector_9+0x44>
    1728:	83 30       	cpi	r24, 0x03	; 3
    172a:	69 f4       	brne	.+26     	; 0x1746 <__vector_9+0x50>
    172c:	0b c0       	rjmp	.+22     	; 0x1744 <__vector_9+0x4e>
	{
		// TRIAC_IMPULSE_TIME finished
		case 0x00:
			// Turn off heater TRIAC
			PORTD &= ~(1<<PD_HEATER);
    172e:	94 98       	cbi	0x12, 4	; 18
			TCNT0 = 256 - (QUATER_PERIOD_TIME - TRIAC_IMPULSE_TIME);
    1730:	8c eb       	ldi	r24, 0xBC	; 188
    1732:	01 c0       	rjmp	.+2      	; 0x1736 <__vector_9+0x40>
			break;
		// QUATER_PERIOD_TIME finished	
		case 0x01:	
			TCNT0 = 256 - (SYNC_IGNORE_TIME - QUATER_PERIOD_TIME);
    1734:	81 ed       	ldi	r24, 0xD1	; 209
    1736:	82 bf       	out	0x32, r24	; 50
			break;	
    1738:	06 c0       	rjmp	.+12     	; 0x1746 <__vector_9+0x50>
		// SYNC_IGNORE_TIME finished	
		case 0x02:
			TCNT0 = 256 - SYNC_LOST_TIMEOUT;
    173a:	82 ec       	ldi	r24, 0xC2	; 194
    173c:	82 bf       	out	0x32, r24	; 50
			// Clear flag and enable interrupt from analog comparator
			ACSR = (1<<ACI | 1<<ACIE | 0<<ACIS1 | 0<<ACIS0);
    173e:	88 e1       	ldi	r24, 0x18	; 24
    1740:	88 b9       	out	0x08, r24	; 8
			break;
    1742:	01 c0       	rjmp	.+2      	; 0x1746 <__vector_9+0x50>
		// SYNC_LOST_TIMEOUT finished
		case 0x03:
			// Error - sync is lost. It means that device has been disconnected from AC line.
			// Disable all power-consuming devices like LEDs and save user settings to EEPROM.
			exitPowerOff();
    1744:	2a d8       	rcall	.-4012   	; 0x79a <exitPowerOff>
			// Sync is not present - do nothing
			break;
	}	

	// Full period check
	if ((p_state & (HALF_PERIOD_FLAG | STATE_MASK)) == (HALF_PERIOD_FLAG | 0x01))
    1746:	80 91 82 00 	lds	r24, 0x0082
    174a:	8f 78       	andi	r24, 0x8F	; 143
    174c:	81 38       	cpi	r24, 0x81	; 129
    174e:	09 f0       	breq	.+2      	; 0x1752 <__vector_9+0x5c>
    1750:	81 c0       	rjmp	.+258    	; 0x1854 <__vector_9+0x15e>
	{
		// Quarter AC line period is done. Update motor controls.
		temp = PORTD;
    1752:	82 b3       	in	r24, 0x12	; 18
		temp &= ~(1<<PD_M1 | 1<<PD_M2);
    1754:	83 7f       	andi	r24, 0xF3	; 243
		if ( rollState & SKIP_CURRENT_MOTOR_CTRL )
    1756:	90 91 94 01 	lds	r25, 0x0194
    175a:	93 ff       	sbrs	r25, 3
    175c:	05 c0       	rjmp	.+10     	; 0x1768 <__vector_9+0x72>
		{
			// Direction control changed. Skip current period to allow TRIACs fully close
			rollState &= ~SKIP_CURRENT_MOTOR_CTRL;
    175e:	97 7f       	andi	r25, 0xF7	; 247
    1760:	90 93 94 01 	sts	0x0194, r25
			PORTD = temp; 	
    1764:	82 bb       	out	0x12, r24	; 18
    1766:	76 c0       	rjmp	.+236    	; 0x1854 <__vector_9+0x15e>
		}
		else
		{
			// Apply direction control 
			if (rollState & ROLL_FWD)
    1768:	90 ff       	sbrs	r25, 0
    176a:	02 c0       	rjmp	.+4      	; 0x1770 <__vector_9+0x7a>
				temp |= (1<<PD_M1);
    176c:	84 60       	ori	r24, 0x04	; 4
    176e:	02 c0       	rjmp	.+4      	; 0x1774 <__vector_9+0x7e>
			else if (rollState & ROLL_REV)
    1770:	91 fd       	sbrc	r25, 1
				temp |= (1<<PD_M2);
    1772:	88 60       	ori	r24, 0x08	; 8
			PORTD = temp; 
    1774:	82 bb       	out	0x12, r24	; 18
// Call once per each AC line period
// Function is called from Timer0 ISR only
static inline void controlRolling()
{
	// Process cycle rolling
	switch(rollState & (ROLL_FWD | ROLL_REV | ROLL_CYCLE))
    1776:	40 91 94 01 	lds	r20, 0x0194
    177a:	84 2f       	mov	r24, r20
    177c:	87 70       	andi	r24, 0x07	; 7
    177e:	85 30       	cpi	r24, 0x05	; 5
    1780:	19 f0       	breq	.+6      	; 0x1788 <__vector_9+0x92>
    1782:	86 30       	cpi	r24, 0x06	; 6
    1784:	e9 f5       	brne	.+122    	; 0x1800 <__vector_9+0x10a>
    1786:	1d c0       	rjmp	.+58     	; 0x17c2 <__vector_9+0xcc>
//---------------------------------------------//

// Function is called from Timer0 ISR only
static inline uint8_t reachedTopPoint(void)
{
	return (	(int16_t)(topPoint - rollPoint) <= 0 );
    1788:	80 91 9c 01 	lds	r24, 0x019C
    178c:	90 91 9d 01 	lds	r25, 0x019D
    1790:	20 91 98 01 	lds	r18, 0x0198
    1794:	30 91 99 01 	lds	r19, 0x0199
    1798:	82 1b       	sub	r24, r18
    179a:	93 0b       	sbc	r25, r19
{
	// Process cycle rolling
	switch(rollState & (ROLL_FWD | ROLL_REV | ROLL_CYCLE))
	{
		case (ROLL_FWD | ROLL_CYCLE):
			if (reachedTopPoint())
    179c:	18 16       	cp	r1, r24
    179e:	19 06       	cpc	r1, r25
    17a0:	7c f1       	brlt	.+94     	; 0x1800 <__vector_9+0x10a>
			{
				if (activeRollCycle >= p.rollCycleSet)	
    17a2:	80 91 93 01 	lds	r24, 0x0193
    17a6:	90 91 ba 01 	lds	r25, 0x01BA
    17aa:	89 17       	cp	r24, r25
    17ac:	28 f0       	brcs	.+10     	; 0x17b8 <__vector_9+0xc2>
				{
					// DONE!
					rollState &= ~ROLL_CYCLE;
    17ae:	4b 7f       	andi	r20, 0xFB	; 251
					rollState |= CYCLE_ROLL_DONE;
    17b0:	40 61       	ori	r20, 0x10	; 16
    17b2:	40 93 94 01 	sts	0x0194, r20
    17b6:	24 c0       	rjmp	.+72     	; 0x1800 <__vector_9+0x10a>
				}
				else
				{
					activeRollCycle++;
    17b8:	8f 5f       	subi	r24, 0xFF	; 255
    17ba:	80 93 93 01 	sts	0x0193, r24
					// Change dir	
					newDirReq = ROLL_REV;				
    17be:	82 e0       	ldi	r24, 0x02	; 2
    17c0:	1d c0       	rjmp	.+58     	; 0x17fc <__vector_9+0x106>
}

// Function is called from Timer0 ISR only
static inline uint8_t reachedBottomPoint(void)
{
	return (	(int16_t)(rollPoint - bottomPoint) <= 0 );
    17c2:	80 91 98 01 	lds	r24, 0x0198
    17c6:	90 91 99 01 	lds	r25, 0x0199
    17ca:	20 91 9a 01 	lds	r18, 0x019A
    17ce:	30 91 9b 01 	lds	r19, 0x019B
    17d2:	82 1b       	sub	r24, r18
    17d4:	93 0b       	sbc	r25, r19
				}
			}
			break;
		
		case (ROLL_REV | ROLL_CYCLE):	
			if (reachedBottomPoint())
    17d6:	18 16       	cp	r1, r24
    17d8:	19 06       	cpc	r1, r25
    17da:	94 f0       	brlt	.+36     	; 0x1800 <__vector_9+0x10a>
			{
				if (activeRollCycle >= p.rollCycleSet)	
    17dc:	80 91 93 01 	lds	r24, 0x0193
    17e0:	90 91 ba 01 	lds	r25, 0x01BA
    17e4:	89 17       	cp	r24, r25
    17e6:	30 f0       	brcs	.+12     	; 0x17f4 <__vector_9+0xfe>
				{
					// DONE!
					rollState &= ~ROLL_CYCLE;
    17e8:	84 2f       	mov	r24, r20
    17ea:	8b 7f       	andi	r24, 0xFB	; 251
					rollState |= CYCLE_ROLL_DONE;
    17ec:	80 61       	ori	r24, 0x10	; 16
    17ee:	80 93 94 01 	sts	0x0194, r24
    17f2:	06 c0       	rjmp	.+12     	; 0x1800 <__vector_9+0x10a>
				}
				else
				{
					activeRollCycle++;
    17f4:	8f 5f       	subi	r24, 0xFF	; 255
    17f6:	80 93 93 01 	sts	0x0193, r24
					// Change dir	
					newDirReq = ROLL_FWD;
    17fa:	81 e0       	ldi	r24, 0x01	; 1
    17fc:	80 93 97 01 	sts	0x0197, r24
		default:
			break;
	}
	
	// Process direction change
	if ((rollState ^ newDirReq) & (ROLL_FWD | ROLL_REV))
    1800:	20 91 94 01 	lds	r18, 0x0194
    1804:	90 91 97 01 	lds	r25, 0x0197
    1808:	89 2f       	mov	r24, r25
    180a:	82 27       	eor	r24, r18
    180c:	83 70       	andi	r24, 0x03	; 3
    180e:	19 f0       	breq	.+6      	; 0x1816 <__vector_9+0x120>
	{
		// ROLL_DIR_CHANGED is used for sound beep
		rollState |= (SKIP_CURRENT_MOTOR_CTRL | ROLL_DIR_CHANGED);
    1810:	28 62       	ori	r18, 0x28	; 40
    1812:	20 93 94 01 	sts	0x0194, r18
	}
	
	rollState &= ~(ROLL_FWD | ROLL_REV);
    1816:	80 91 94 01 	lds	r24, 0x0194
    181a:	8c 7f       	andi	r24, 0xFC	; 252
	rollState |= newDirReq;
    181c:	89 2b       	or	r24, r25
	rollState &= dirChangedMask;
    181e:	90 91 81 00 	lds	r25, 0x0081
    1822:	89 23       	and	r24, r25
    1824:	80 93 94 01 	sts	0x0194, r24
	dirChangedMask = 0xFF;
    1828:	9f ef       	ldi	r25, 0xFF	; 255
    182a:	90 93 81 00 	sts	0x0081, r25
}

// Function is called from Timer0 ISR only
static inline void updateRollPoint(void)
{	
	if (rollState & ROLL_FWD)
    182e:	80 ff       	sbrs	r24, 0
    1830:	06 c0       	rjmp	.+12     	; 0x183e <__vector_9+0x148>
		rollPoint++;
    1832:	80 91 98 01 	lds	r24, 0x0198
    1836:	90 91 99 01 	lds	r25, 0x0199
    183a:	01 96       	adiw	r24, 0x01	; 1
    183c:	07 c0       	rjmp	.+14     	; 0x184c <__vector_9+0x156>
	else if (rollState & ROLL_REV)
    183e:	81 ff       	sbrs	r24, 1
    1840:	09 c0       	rjmp	.+18     	; 0x1854 <__vector_9+0x15e>
		rollPoint--;	
    1842:	80 91 98 01 	lds	r24, 0x0198
    1846:	90 91 99 01 	lds	r25, 0x0199
    184a:	01 97       	sbiw	r24, 0x01	; 1
    184c:	90 93 99 01 	sts	0x0199, r25
    1850:	80 93 98 01 	sts	0x0198, r24
			controlRolling();
		}
	}
	
	
	if ((p_state & STATE_MASK)  != 0x0F)
    1854:	80 91 82 00 	lds	r24, 0x0082
    1858:	98 2f       	mov	r25, r24
    185a:	9f 70       	andi	r25, 0x0F	; 15
    185c:	9f 30       	cpi	r25, 0x0F	; 15
    185e:	19 f0       	breq	.+6      	; 0x1866 <__vector_9+0x170>
		p_state++;
    1860:	8f 5f       	subi	r24, 0xFF	; 255
    1862:	80 93 82 00 	sts	0x0082, r24
}	
    1866:	ff 91       	pop	r31
    1868:	ef 91       	pop	r30
    186a:	bf 91       	pop	r27
    186c:	af 91       	pop	r26
    186e:	9f 91       	pop	r25
    1870:	8f 91       	pop	r24
    1872:	7f 91       	pop	r23
    1874:	6f 91       	pop	r22
    1876:	5f 91       	pop	r21
    1878:	4f 91       	pop	r20
    187a:	3f 91       	pop	r19
    187c:	2f 91       	pop	r18
    187e:	0f 90       	pop	r0
    1880:	0f be       	out	0x3f, r0	; 63
    1882:	0f 90       	pop	r0
    1884:	1f 90       	pop	r1
    1886:	18 95       	reti

00001888 <processSoftTimer8b>:
 
 
 
 
 void processSoftTimer8b(SoftTimer8b_t *tmr)
 {
    1888:	fc 01       	movw	r30, r24
	 uint8_t newTimerVal;

	 if (!tmr->Enabled)
    188a:	90 81       	ld	r25, Z
    188c:	90 ff       	sbrs	r25, 0
    188e:	27 c0       	rjmp	.+78     	; 0x18de <processSoftTimer8b+0x56>
		return;
	 
	 tmr->FA_EQ = 0;
	 tmr->FA_GE = 0;
	 tmr->FTop = 0;
    1890:	97 7e       	andi	r25, 0xE7	; 231
    1892:	9f 7d       	andi	r25, 0xDF	; 223
    1894:	90 83       	st	Z, r25
	 
	 if (tmr->Timer >= tmr->Top)
    1896:	81 81       	ldd	r24, Z+1	; 0x01
    1898:	22 81       	ldd	r18, Z+2	; 0x02
    189a:	82 17       	cp	r24, r18
    189c:	50 f0       	brcs	.+20     	; 0x18b2 <processSoftTimer8b+0x2a>
	 {
		 if (tmr->RunOnce)
    189e:	91 ff       	sbrs	r25, 1
    18a0:	02 c0       	rjmp	.+4      	; 0x18a6 <processSoftTimer8b+0x1e>
		 {
			 tmr->Enabled = 0;
    18a2:	9e 7f       	andi	r25, 0xFE	; 254
    18a4:	90 83       	st	Z, r25
		 }
		 tmr->FTop = 1;
    18a6:	90 81       	ld	r25, Z
		 tmr->FOvfl = 1;
    18a8:	90 62       	ori	r25, 0x20	; 32
    18aa:	90 64       	ori	r25, 0x40	; 64
    18ac:	90 83       	st	Z, r25
		 newTimerVal = 0;
    18ae:	20 e0       	ldi	r18, 0x00	; 0
    18b0:	02 c0       	rjmp	.+4      	; 0x18b6 <processSoftTimer8b+0x2e>
	 }
	 else
	 {
		 newTimerVal = tmr->Timer + 1;
    18b2:	28 2f       	mov	r18, r24
    18b4:	2f 5f       	subi	r18, 0xFF	; 255
	 }
	 
	 if (tmr->Timer == tmr->CompA)
    18b6:	93 81       	ldd	r25, Z+3	; 0x03
    18b8:	89 13       	cpse	r24, r25
    18ba:	0b c0       	rjmp	.+22     	; 0x18d2 <processSoftTimer8b+0x4a>
	 {
		 tmr->FA_EQ = 1;
    18bc:	80 81       	ld	r24, Z
		 tmr->FA_GE = 1;
    18be:	88 60       	ori	r24, 0x08	; 8
    18c0:	80 61       	ori	r24, 0x10	; 16
		 tmr->FA_TGL = !tmr->FA_TGL;
    18c2:	82 fb       	bst	r24, 2
    18c4:	99 27       	eor	r25, r25
    18c6:	90 f9       	bld	r25, 0
    18c8:	31 e0       	ldi	r19, 0x01	; 1
    18ca:	93 27       	eor	r25, r19
    18cc:	90 fb       	bst	r25, 0
    18ce:	82 f9       	bld	r24, 2
    18d0:	04 c0       	rjmp	.+8      	; 0x18da <processSoftTimer8b+0x52>
	 }
	 else if (tmr->Timer >= tmr->CompA)
    18d2:	89 17       	cp	r24, r25
    18d4:	18 f0       	brcs	.+6      	; 0x18dc <processSoftTimer8b+0x54>
	 {
		 tmr->FA_GE = 1;
    18d6:	80 81       	ld	r24, Z
    18d8:	80 61       	ori	r24, 0x10	; 16
    18da:	80 83       	st	Z, r24
	 }
	 
	 tmr->Timer = newTimerVal; 
    18dc:	21 83       	std	Z+1, r18	; 0x01
    18de:	08 95       	ret

000018e0 <processSystemTimers>:
static inline void Sound_Process(void);


void processSystemTimers(void)
{
	sys_timers_flags = 0x00;
    18e0:	12 b8       	out	0x02, r1	; 2
	
	// Process Celsius counter
	if (--sys_timers.celsius_upd_counter == 0)
    18e2:	80 91 83 00 	lds	r24, 0x0083
    18e6:	81 50       	subi	r24, 0x01	; 1
    18e8:	80 93 83 00 	sts	0x0083, r24
    18ec:	81 11       	cpse	r24, r1
    18ee:	0f c0       	rjmp	.+30     	; 0x190e <processSystemTimers+0x2e>
	{
		sys_timers.celsius_upd_counter = CELSIUS_UDPATE_INTERVAL;
    18f0:	84 e0       	ldi	r24, 0x04	; 4
    18f2:	80 93 83 00 	sts	0x0083, r24
		sys_timers_flags |= EXPIRED_CELSIUS;
    18f6:	10 9a       	sbi	0x02, 0	; 2
		
		// Process PID update counter
		if (--sys_timers.pid_update_counter == 0)
    18f8:	80 91 88 00 	lds	r24, 0x0088
    18fc:	81 50       	subi	r24, 0x01	; 1
    18fe:	80 93 88 00 	sts	0x0088, r24
    1902:	81 11       	cpse	r24, r1
    1904:	04 c0       	rjmp	.+8      	; 0x190e <processSystemTimers+0x2e>
		{
			sys_timers.pid_update_counter = PID_UPDATE_INTERVAL;
    1906:	84 e1       	ldi	r24, 0x14	; 20
    1908:	80 93 88 00 	sts	0x0088, r24
			sys_timers_flags |= UPDATE_PID;
    190c:	16 9a       	sbi	0x02, 6	; 2
		}
	}
	
	// Process log counter
	if (--sys_timers.log_counter == 0)
    190e:	80 91 87 00 	lds	r24, 0x0087
    1912:	81 50       	subi	r24, 0x01	; 1
    1914:	19 f0       	breq	.+6      	; 0x191c <processSystemTimers+0x3c>
    1916:	80 93 87 00 	sts	0x0087, r24
    191a:	04 c0       	rjmp	.+8      	; 0x1924 <processSystemTimers+0x44>
	{
		sys_timers.log_counter = LOG_INTERVAL;
    191c:	82 e0       	ldi	r24, 0x02	; 2
    191e:	80 93 87 00 	sts	0x0087, r24
		sys_timers_flags |= EXPIRED_LOG;
    1922:	15 9a       	sbi	0x02, 5	; 2
	}
	
	// Process 10 seconds counter
	if (--sys_timers.counter_10sec == 0)
    1924:	80 91 84 00 	lds	r24, 0x0084
    1928:	81 50       	subi	r24, 0x01	; 1
    192a:	80 93 84 00 	sts	0x0084, r24
    192e:	81 11       	cpse	r24, r1
    1930:	27 c0       	rjmp	.+78     	; 0x1980 <processSystemTimers+0xa0>
	{
		sys_timers.counter_10sec = COUNTER_10SEC_INTERVAL;
    1932:	88 ec       	ldi	r24, 0xC8	; 200
    1934:	80 93 84 00 	sts	0x0084, r24
		sys_timers_flags |= EXPIRED_10SEC;
    1938:	11 9a       	sbi	0x02, 1	; 2
		
		// Process 1 minute counter
		if (--sys_timers.counter_1min == 0)
    193a:	80 91 85 00 	lds	r24, 0x0085
    193e:	81 50       	subi	r24, 0x01	; 1
    1940:	80 93 85 00 	sts	0x0085, r24
    1944:	81 11       	cpse	r24, r1
    1946:	1c c0       	rjmp	.+56     	; 0x1980 <processSystemTimers+0xa0>
		{
			sys_timers.counter_1min = COUNTER_1MIN_INTERVAL;
    1948:	86 e0       	ldi	r24, 0x06	; 6
    194a:	80 93 85 00 	sts	0x0085, r24
			sys_timers_flags |= EXPIRED_1MIN;
    194e:	12 9a       	sbi	0x02, 2	; 2
			
			// Process auto power off counter
			if (sys_timers.poff_counter != MAX_POWEROFF_TIMEOUT - 1)
    1950:	80 91 86 00 	lds	r24, 0x0086
    1954:	8e 35       	cpi	r24, 0x5E	; 94
    1956:	19 f0       	breq	.+6      	; 0x195e <processSystemTimers+0x7e>
				sys_timers.poff_counter++;
    1958:	8f 5f       	subi	r24, 0xFF	; 255
    195a:	80 93 86 00 	sts	0x0086, r24
			if (sys_timers.poff_counter == p.power_off_timeout - 1)
    195e:	40 91 86 00 	lds	r20, 0x0086
    1962:	24 2f       	mov	r18, r20
    1964:	30 e0       	ldi	r19, 0x00	; 0
    1966:	80 91 bc 01 	lds	r24, 0x01BC
    196a:	90 e0       	ldi	r25, 0x00	; 0
    196c:	01 97       	sbiw	r24, 0x01	; 1
    196e:	28 17       	cp	r18, r24
    1970:	39 07       	cpc	r19, r25
    1972:	09 f4       	brne	.+2      	; 0x1976 <processSystemTimers+0x96>
				sys_timers_flags |= AUTOPOFF_SOON;
    1974:	13 9a       	sbi	0x02, 3	; 2
			if (sys_timers.poff_counter == p.power_off_timeout)
    1976:	80 91 bc 01 	lds	r24, 0x01BC
    197a:	48 13       	cpse	r20, r24
    197c:	01 c0       	rjmp	.+2      	; 0x1980 <processSystemTimers+0xa0>
				sys_timers_flags |= AUTOPOFF_EXPIRED;			
    197e:	14 9a       	sbi	0x02, 4	; 2
    1980:	08 95       	ret

00001982 <resetAutoPowerOffCounter>:
}


void resetAutoPowerOffCounter(void)
{
	sys_timers.poff_counter = 0;
    1982:	10 92 86 00 	sts	0x0086, r1
    1986:	08 95       	ret

00001988 <__vector_3>:
// ----------------------- //


// Period is 1ms @ 16MHz
ISR(TIMER2_COMP_vect)
{	
    1988:	1f 92       	push	r1
    198a:	0f 92       	push	r0
    198c:	0f b6       	in	r0, 0x3f	; 63
    198e:	0f 92       	push	r0
    1990:	11 24       	eor	r1, r1
    1992:	2f 93       	push	r18
    1994:	3f 93       	push	r19
    1996:	4f 93       	push	r20
    1998:	5f 93       	push	r21
    199a:	6f 93       	push	r22
    199c:	7f 93       	push	r23
    199e:	8f 93       	push	r24
    19a0:	9f 93       	push	r25
    19a2:	af 93       	push	r26
    19a4:	bf 93       	push	r27
    19a6:	ef 93       	push	r30
    19a8:	ff 93       	push	r31
	// Manage LED indicator
	processLedIndicator();
    19aa:	77 d7       	rcall	.+3822   	; 0x289a <__data_load_end+0xbc4>
static inline void Sound_Process(void)
{
	static uint16_t note_time_counter;
	static tone_t tone;
	static const tone_t* p_melody;
	uint8_t new_state = sound_state;
    19ac:	20 91 a0 01 	lds	r18, 0x01A0
	
	switch (sound_state)
    19b0:	22 30       	cpi	r18, 0x02	; 2
    19b2:	99 f1       	breq	.+102    	; 0x1a1a <__vector_3+0x92>
    19b4:	20 f4       	brcc	.+8      	; 0x19be <__vector_3+0x36>
    19b6:	21 30       	cpi	r18, 0x01	; 1
    19b8:	09 f0       	breq	.+2      	; 0x19bc <__vector_3+0x34>
    19ba:	50 c0       	rjmp	.+160    	; 0x1a5c <__vector_3+0xd4>
    19bc:	0f c0       	rjmp	.+30     	; 0x19dc <__vector_3+0x54>
    19be:	23 30       	cpi	r18, 0x03	; 3
    19c0:	21 f0       	breq	.+8      	; 0x19ca <__vector_3+0x42>
    19c2:	25 30       	cpi	r18, 0x05	; 5
    19c4:	09 f0       	breq	.+2      	; 0x19c8 <__vector_3+0x40>
    19c6:	4a c0       	rjmp	.+148    	; 0x1a5c <__vector_3+0xd4>
    19c8:	15 c0       	rjmp	.+42     	; 0x19f4 <__vector_3+0x6c>
	{
		case SOUND_START_NEW:
			p_melody = new_melody;
    19ca:	80 91 a1 01 	lds	r24, 0x01A1
    19ce:	90 91 a2 01 	lds	r25, 0x01A2
    19d2:	90 93 a4 01 	sts	0x01A4, r25
    19d6:	80 93 a3 01 	sts	0x01A3, r24
    19da:	44 c0       	rjmp	.+136    	; 0x1a64 <__vector_3+0xdc>
			new_state = SOUND_APPLY_TONE;
			p_melody = NULL;				// Beeper mode
			break;
		#endif
		case SOUND_PLAY:
			if (--note_time_counter == 0)
    19dc:	80 91 a5 01 	lds	r24, 0x01A5
    19e0:	90 91 a6 01 	lds	r25, 0x01A6
    19e4:	01 97       	sbiw	r24, 0x01	; 1
    19e6:	90 93 a6 01 	sts	0x01A6, r25
    19ea:	80 93 a5 01 	sts	0x01A5, r24
    19ee:	89 2b       	or	r24, r25
    19f0:	c9 f1       	breq	.+114    	; 0x1a64 <__vector_3+0xdc>
    19f2:	3b c0       	rjmp	.+118    	; 0x1a6a <__vector_3+0xe2>
		case SOUND_GET_NEXT_TONE:
			#ifdef USE_BEEP_FUNCTION
			if (p_melody != NULL)			// If driver is playing melody, not beeping
			{
				#endif
				if (!eeprom_is_ready())		// If EEPROM is busy and Sound_Process() is called from an ISR, deadly block may appear
    19f4:	e1 99       	sbic	0x1c, 1	; 28
    19f6:	3b c0       	rjmp	.+118    	; 0x1a6e <__vector_3+0xe6>
					return;
				eeprom_read_block(&tone,p_melody++,sizeof(tone_t));
    19f8:	60 91 a3 01 	lds	r22, 0x01A3
    19fc:	70 91 a4 01 	lds	r23, 0x01A4
    1a00:	cb 01       	movw	r24, r22
    1a02:	02 96       	adiw	r24, 0x02	; 2
    1a04:	90 93 a4 01 	sts	0x01A4, r25
    1a08:	80 93 a3 01 	sts	0x01A3, r24
    1a0c:	42 e0       	ldi	r20, 0x02	; 2
    1a0e:	50 e0       	ldi	r21, 0x00	; 0
    1a10:	87 ea       	ldi	r24, 0xA7	; 167
    1a12:	91 e0       	ldi	r25, 0x01	; 1
    1a14:	e2 d0       	rcall	.+452    	; 0x1bda <__eerd_block_m8>
				new_state = SOUND_APPLY_TONE;
    1a16:	22 e0       	ldi	r18, 0x02	; 2
    1a18:	28 c0       	rjmp	.+80     	; 0x1a6a <__vector_3+0xe2>
				new_state = SOUND_OFF;
			}
			#endif
			break;
		case SOUND_APPLY_TONE:
			if (tone.duration == 0)
    1a1a:	80 91 a8 01 	lds	r24, 0x01A8
    1a1e:	88 23       	and	r24, r24
    1a20:	19 f1       	breq	.+70     	; 0x1a68 <__vector_3+0xe0>
				new_state = SOUND_OFF;
			}
			else
			{
				// Setup period
				if (tone.tone_period != 0)
    1a22:	80 91 a7 01 	lds	r24, 0x01A7
    1a26:	88 23       	and	r24, r24
    1a28:	49 f0       	breq	.+18     	; 0x1a3c <__vector_3+0xb4>
				{
					// Timer runs at 250kHz (T = 4us), tone_period is set in units of 8us
					// Output toggles on compare match
					OCR1A = tone.tone_period - 1;
    1a2a:	90 e0       	ldi	r25, 0x00	; 0
    1a2c:	01 97       	sbiw	r24, 0x01	; 1
    1a2e:	9b bd       	out	0x2b, r25	; 43
    1a30:	8a bd       	out	0x2a, r24	; 42
					TCNT1 = 0;
    1a32:	1d bc       	out	0x2d, r1	; 45
    1a34:	1c bc       	out	0x2c, r1	; 44
					// Toggle OCR1A on compare match
					TCCR1A |= (1<<COM1A0);
    1a36:	8f b5       	in	r24, 0x2f	; 47
    1a38:	80 64       	ori	r24, 0x40	; 64
    1a3a:	02 c0       	rjmp	.+4      	; 0x1a40 <__vector_3+0xb8>
				}
				else
				{
					// Disable OCR1A output
					TCCR1A &= ~(1<<COM1A0 | 1<<COM1A1);
    1a3c:	8f b5       	in	r24, 0x2f	; 47
    1a3e:	8f 73       	andi	r24, 0x3F	; 63
    1a40:	8f bd       	out	0x2f, r24	; 47
				}
				note_time_counter = (uint16_t)tone.duration * TONE_DURATION_SCALE - 2;
    1a42:	80 91 a8 01 	lds	r24, 0x01A8
    1a46:	2a e0       	ldi	r18, 0x0A	; 10
    1a48:	82 9f       	mul	r24, r18
    1a4a:	c0 01       	movw	r24, r0
    1a4c:	11 24       	eor	r1, r1
    1a4e:	02 97       	sbiw	r24, 0x02	; 2
    1a50:	90 93 a6 01 	sts	0x01A6, r25
    1a54:	80 93 a5 01 	sts	0x01A5, r24
				new_state = SOUND_PLAY;
    1a58:	21 e0       	ldi	r18, 0x01	; 1
    1a5a:	07 c0       	rjmp	.+14     	; 0x1a6a <__vector_3+0xe2>
			}
			break;
			default:
			// Disable OCR1A output
			TCCR1A &= ~(1<<COM1A0 | 1<<COM1A1);
    1a5c:	8f b5       	in	r24, 0x2f	; 47
    1a5e:	8f 73       	andi	r24, 0x3F	; 63
    1a60:	8f bd       	out	0x2f, r24	; 47
    1a62:	03 c0       	rjmp	.+6      	; 0x1a6a <__vector_3+0xe2>
			p_melody = NULL;				// Beeper mode
			break;
		#endif
		case SOUND_PLAY:
			if (--note_time_counter == 0)
				new_state = SOUND_GET_NEXT_TONE;
    1a64:	25 e0       	ldi	r18, 0x05	; 5
    1a66:	01 c0       	rjmp	.+2      	; 0x1a6a <__vector_3+0xe2>
			break;
		case SOUND_APPLY_TONE:
			if (tone.duration == 0)
			{
				// Finished
				new_state = SOUND_OFF;
    1a68:	20 e0       	ldi	r18, 0x00	; 0
			default:
			// Disable OCR1A output
			TCCR1A &= ~(1<<COM1A0 | 1<<COM1A1);
			break;
	}
	sound_state = new_state;
    1a6a:	20 93 a0 01 	sts	0x01A0, r18
	
	// Do sound stuff
	Sound_Process();
	
	// Process menu update timer
	processSoftTimer8b(&menuUpdateTimer);	
    1a6e:	89 e8       	ldi	r24, 0x89	; 137
    1a70:	90 e0       	ldi	r25, 0x00	; 0
    1a72:	0a df       	rcall	.-492    	; 0x1888 <processSoftTimer8b>
	
	// Start ADC conversion 
	// Safe to use read-modify-write - this ISR is the only source of ADC conversion start
	ADCSRA |= (1<<ADSC);
    1a74:	36 9a       	sbi	0x06, 6	; 6
}
    1a76:	ff 91       	pop	r31
    1a78:	ef 91       	pop	r30
    1a7a:	bf 91       	pop	r27
    1a7c:	af 91       	pop	r26
    1a7e:	9f 91       	pop	r25
    1a80:	8f 91       	pop	r24
    1a82:	7f 91       	pop	r23
    1a84:	6f 91       	pop	r22
    1a86:	5f 91       	pop	r21
    1a88:	4f 91       	pop	r20
    1a8a:	3f 91       	pop	r19
    1a8c:	2f 91       	pop	r18
    1a8e:	0f 90       	pop	r0
    1a90:	0f be       	out	0x3f, r0	; 63
    1a92:	0f 90       	pop	r0
    1a94:	1f 90       	pop	r1
    1a96:	18 95       	reti

00001a98 <Sound_Play>:
}
#endif

void Sound_Play(const tone_t* p_melody)
{
	if ((p.sound_enable) || (SoundEnable_override))
    1a98:	20 91 bb 01 	lds	r18, 0x01BB
    1a9c:	21 11       	cpse	r18, r1
    1a9e:	04 c0       	rjmp	.+8      	; 0x1aa8 <Sound_Play+0x10>
    1aa0:	20 91 a9 01 	lds	r18, 0x01A9
    1aa4:	22 23       	and	r18, r18
    1aa6:	49 f0       	breq	.+18     	; 0x1aba <Sound_Play+0x22>
	{
		new_melody =  p_melody;
    1aa8:	90 93 a2 01 	sts	0x01A2, r25
    1aac:	80 93 a1 01 	sts	0x01A1, r24
		sound_state = SOUND_START_NEW;		// No need to disable interrupts - atomic operation
    1ab0:	83 e0       	ldi	r24, 0x03	; 3
    1ab2:	80 93 a0 01 	sts	0x01A0, r24
		SoundEnable_override = 0;
    1ab6:	10 92 a9 01 	sts	0x01A9, r1
    1aba:	08 95       	ret

00001abc <Sound_OverrideDisable>:
	sound_state = SOUND_OFF;
}

void Sound_OverrideDisable(void)
{
	SoundEnable_override = 1;
    1abc:	81 e0       	ldi	r24, 0x01	; 1
    1abe:	80 93 a9 01 	sts	0x01A9, r24
    1ac2:	08 95       	ret

00001ac4 <USART_send>:



void USART_send( uint8_t data )
{
	UCSRA |= (1<<TXC);                 // Clear flag
    1ac4:	5e 9a       	sbi	0x0b, 6	; 11
	UDR = data;
    1ac6:	8c b9       	out	0x0c, r24	; 12
	while ( !(UCSRA & (1<<TXC)) );  // Wait
    1ac8:	5e 9b       	sbis	0x0b, 6	; 11
    1aca:	fe cf       	rjmp	.-4      	; 0x1ac8 <USART_send+0x4>
}
    1acc:	08 95       	ret

00001ace <USART_sendstr>:


void USART_sendstr(char* str)
{
    1ace:	1f 93       	push	r17
    1ad0:	cf 93       	push	r28
    1ad2:	df 93       	push	r29
    1ad4:	ec 01       	movw	r28, r24
	uint8_t i = 0;
    1ad6:	10 e0       	ldi	r17, 0x00	; 0
	while (str[i])
    1ad8:	02 c0       	rjmp	.+4      	; 0x1ade <USART_sendstr+0x10>
	{
		USART_send(str[i++]);
    1ada:	1f 5f       	subi	r17, 0xFF	; 255
    1adc:	f3 df       	rcall	.-26     	; 0x1ac4 <USART_send>


void USART_sendstr(char* str)
{
	uint8_t i = 0;
	while (str[i])
    1ade:	fe 01       	movw	r30, r28
    1ae0:	e1 0f       	add	r30, r17
    1ae2:	f1 1d       	adc	r31, r1
    1ae4:	80 81       	ld	r24, Z
    1ae6:	81 11       	cpse	r24, r1
    1ae8:	f8 cf       	rjmp	.-16     	; 0x1ada <USART_sendstr+0xc>
	{
		USART_send(str[i++]);
	}
}
    1aea:	df 91       	pop	r29
    1aec:	cf 91       	pop	r28
    1aee:	1f 91       	pop	r17
    1af0:	08 95       	ret

00001af2 <__udivmodqi4>:
    1af2:	99 1b       	sub	r25, r25
    1af4:	79 e0       	ldi	r23, 0x09	; 9
    1af6:	04 c0       	rjmp	.+8      	; 0x1b00 <__udivmodqi4_ep>

00001af8 <__udivmodqi4_loop>:
    1af8:	99 1f       	adc	r25, r25
    1afa:	96 17       	cp	r25, r22
    1afc:	08 f0       	brcs	.+2      	; 0x1b00 <__udivmodqi4_ep>
    1afe:	96 1b       	sub	r25, r22

00001b00 <__udivmodqi4_ep>:
    1b00:	88 1f       	adc	r24, r24
    1b02:	7a 95       	dec	r23
    1b04:	c9 f7       	brne	.-14     	; 0x1af8 <__udivmodqi4_loop>
    1b06:	80 95       	com	r24
    1b08:	08 95       	ret

00001b0a <__divmodsi4>:
    1b0a:	05 2e       	mov	r0, r21
    1b0c:	97 fb       	bst	r25, 7
    1b0e:	16 f4       	brtc	.+4      	; 0x1b14 <__divmodsi4+0xa>
    1b10:	00 94       	com	r0
    1b12:	06 d0       	rcall	.+12     	; 0x1b20 <__divmodsi4_neg1>
    1b14:	57 fd       	sbrc	r21, 7
    1b16:	0c d0       	rcall	.+24     	; 0x1b30 <__divmodsi4_neg2>
    1b18:	35 d0       	rcall	.+106    	; 0x1b84 <__udivmodsi4>
    1b1a:	07 fc       	sbrc	r0, 7
    1b1c:	09 d0       	rcall	.+18     	; 0x1b30 <__divmodsi4_neg2>
    1b1e:	7e f4       	brtc	.+30     	; 0x1b3e <__divmodsi4_exit>

00001b20 <__divmodsi4_neg1>:
    1b20:	90 95       	com	r25
    1b22:	80 95       	com	r24
    1b24:	70 95       	com	r23
    1b26:	61 95       	neg	r22
    1b28:	7f 4f       	sbci	r23, 0xFF	; 255
    1b2a:	8f 4f       	sbci	r24, 0xFF	; 255
    1b2c:	9f 4f       	sbci	r25, 0xFF	; 255
    1b2e:	08 95       	ret

00001b30 <__divmodsi4_neg2>:
    1b30:	50 95       	com	r21
    1b32:	40 95       	com	r20
    1b34:	30 95       	com	r19
    1b36:	21 95       	neg	r18
    1b38:	3f 4f       	sbci	r19, 0xFF	; 255
    1b3a:	4f 4f       	sbci	r20, 0xFF	; 255
    1b3c:	5f 4f       	sbci	r21, 0xFF	; 255

00001b3e <__divmodsi4_exit>:
    1b3e:	08 95       	ret

00001b40 <__mulhisi3>:
    1b40:	05 d0       	rcall	.+10     	; 0x1b4c <__umulhisi3>
    1b42:	33 23       	and	r19, r19
    1b44:	12 f4       	brpl	.+4      	; 0x1b4a <__mulhisi3+0xa>
    1b46:	8a 1b       	sub	r24, r26
    1b48:	9b 0b       	sbc	r25, r27
    1b4a:	0d c0       	rjmp	.+26     	; 0x1b66 <__usmulhisi3_tail>

00001b4c <__umulhisi3>:
    1b4c:	a2 9f       	mul	r26, r18
    1b4e:	b0 01       	movw	r22, r0
    1b50:	b3 9f       	mul	r27, r19
    1b52:	c0 01       	movw	r24, r0
    1b54:	a3 9f       	mul	r26, r19
    1b56:	01 d0       	rcall	.+2      	; 0x1b5a <__umulhisi3+0xe>
    1b58:	b2 9f       	mul	r27, r18
    1b5a:	70 0d       	add	r23, r0
    1b5c:	81 1d       	adc	r24, r1
    1b5e:	11 24       	eor	r1, r1
    1b60:	91 1d       	adc	r25, r1
    1b62:	08 95       	ret

00001b64 <__usmulhisi3>:
    1b64:	f3 df       	rcall	.-26     	; 0x1b4c <__umulhisi3>

00001b66 <__usmulhisi3_tail>:
    1b66:	b7 ff       	sbrs	r27, 7
    1b68:	08 95       	ret
    1b6a:	82 1b       	sub	r24, r18
    1b6c:	93 0b       	sbc	r25, r19
    1b6e:	08 95       	ret

00001b70 <__muluhisi3>:
    1b70:	ed df       	rcall	.-38     	; 0x1b4c <__umulhisi3>
    1b72:	a5 9f       	mul	r26, r21
    1b74:	90 0d       	add	r25, r0
    1b76:	b4 9f       	mul	r27, r20
    1b78:	90 0d       	add	r25, r0
    1b7a:	a4 9f       	mul	r26, r20
    1b7c:	80 0d       	add	r24, r0
    1b7e:	91 1d       	adc	r25, r1
    1b80:	11 24       	eor	r1, r1
    1b82:	08 95       	ret

00001b84 <__udivmodsi4>:
    1b84:	a1 e2       	ldi	r26, 0x21	; 33
    1b86:	1a 2e       	mov	r1, r26
    1b88:	aa 1b       	sub	r26, r26
    1b8a:	bb 1b       	sub	r27, r27
    1b8c:	fd 01       	movw	r30, r26
    1b8e:	0d c0       	rjmp	.+26     	; 0x1baa <__udivmodsi4_ep>

00001b90 <__udivmodsi4_loop>:
    1b90:	aa 1f       	adc	r26, r26
    1b92:	bb 1f       	adc	r27, r27
    1b94:	ee 1f       	adc	r30, r30
    1b96:	ff 1f       	adc	r31, r31
    1b98:	a2 17       	cp	r26, r18
    1b9a:	b3 07       	cpc	r27, r19
    1b9c:	e4 07       	cpc	r30, r20
    1b9e:	f5 07       	cpc	r31, r21
    1ba0:	20 f0       	brcs	.+8      	; 0x1baa <__udivmodsi4_ep>
    1ba2:	a2 1b       	sub	r26, r18
    1ba4:	b3 0b       	sbc	r27, r19
    1ba6:	e4 0b       	sbc	r30, r20
    1ba8:	f5 0b       	sbc	r31, r21

00001baa <__udivmodsi4_ep>:
    1baa:	66 1f       	adc	r22, r22
    1bac:	77 1f       	adc	r23, r23
    1bae:	88 1f       	adc	r24, r24
    1bb0:	99 1f       	adc	r25, r25
    1bb2:	1a 94       	dec	r1
    1bb4:	69 f7       	brne	.-38     	; 0x1b90 <__udivmodsi4_loop>
    1bb6:	60 95       	com	r22
    1bb8:	70 95       	com	r23
    1bba:	80 95       	com	r24
    1bbc:	90 95       	com	r25
    1bbe:	9b 01       	movw	r18, r22
    1bc0:	ac 01       	movw	r20, r24
    1bc2:	bd 01       	movw	r22, r26
    1bc4:	cf 01       	movw	r24, r30
    1bc6:	08 95       	ret

00001bc8 <memcpy_P>:
    1bc8:	fb 01       	movw	r30, r22
    1bca:	dc 01       	movw	r26, r24
    1bcc:	02 c0       	rjmp	.+4      	; 0x1bd2 <memcpy_P+0xa>
    1bce:	05 90       	lpm	r0, Z+
    1bd0:	0d 92       	st	X+, r0
    1bd2:	41 50       	subi	r20, 0x01	; 1
    1bd4:	50 40       	sbci	r21, 0x00	; 0
    1bd6:	d8 f7       	brcc	.-10     	; 0x1bce <memcpy_P+0x6>
    1bd8:	08 95       	ret

00001bda <__eerd_block_m8>:
    1bda:	dc 01       	movw	r26, r24
    1bdc:	cb 01       	movw	r24, r22

00001bde <__eerd_blraw_m8>:
    1bde:	fc 01       	movw	r30, r24
    1be0:	e1 99       	sbic	0x1c, 1	; 28
    1be2:	fe cf       	rjmp	.-4      	; 0x1be0 <__eerd_blraw_m8+0x2>
    1be4:	06 c0       	rjmp	.+12     	; 0x1bf2 <__eerd_blraw_m8+0x14>
    1be6:	ff bb       	out	0x1f, r31	; 31
    1be8:	ee bb       	out	0x1e, r30	; 30
    1bea:	e0 9a       	sbi	0x1c, 0	; 28
    1bec:	31 96       	adiw	r30, 0x01	; 1
    1bee:	0d b2       	in	r0, 0x1d	; 29
    1bf0:	0d 92       	st	X+, r0
    1bf2:	41 50       	subi	r20, 0x01	; 1
    1bf4:	50 40       	sbci	r21, 0x00	; 0
    1bf6:	b8 f7       	brcc	.-18     	; 0x1be6 <__eerd_blraw_m8+0x8>
    1bf8:	08 95       	ret

00001bfa <__eerd_byte_m8>:
    1bfa:	e1 99       	sbic	0x1c, 1	; 28
    1bfc:	fe cf       	rjmp	.-4      	; 0x1bfa <__eerd_byte_m8>
    1bfe:	9f bb       	out	0x1f, r25	; 31
    1c00:	8e bb       	out	0x1e, r24	; 30
    1c02:	e0 9a       	sbi	0x1c, 0	; 28
    1c04:	99 27       	eor	r25, r25
    1c06:	8d b3       	in	r24, 0x1d	; 29
    1c08:	08 95       	ret

00001c0a <__eeupd_block_m8>:
    1c0a:	dc 01       	movw	r26, r24
    1c0c:	a4 0f       	add	r26, r20
    1c0e:	b5 1f       	adc	r27, r21
    1c10:	41 50       	subi	r20, 0x01	; 1
    1c12:	50 40       	sbci	r21, 0x00	; 0
    1c14:	40 f0       	brcs	.+16     	; 0x1c26 <__eeupd_block_m8+0x1c>
    1c16:	cb 01       	movw	r24, r22
    1c18:	84 0f       	add	r24, r20
    1c1a:	95 1f       	adc	r25, r21
    1c1c:	2e 91       	ld	r18, -X
    1c1e:	05 d0       	rcall	.+10     	; 0x1c2a <__eeupd_r18_m8>
    1c20:	41 50       	subi	r20, 0x01	; 1
    1c22:	50 40       	sbci	r21, 0x00	; 0
    1c24:	d8 f7       	brcc	.-10     	; 0x1c1c <__eeupd_block_m8+0x12>
    1c26:	08 95       	ret

00001c28 <__eeupd_byte_m8>:
    1c28:	26 2f       	mov	r18, r22

00001c2a <__eeupd_r18_m8>:
    1c2a:	e1 99       	sbic	0x1c, 1	; 28
    1c2c:	fe cf       	rjmp	.-4      	; 0x1c2a <__eeupd_r18_m8>
    1c2e:	9f bb       	out	0x1f, r25	; 31
    1c30:	8e bb       	out	0x1e, r24	; 30
    1c32:	e0 9a       	sbi	0x1c, 0	; 28
    1c34:	01 97       	sbiw	r24, 0x01	; 1
    1c36:	0d b2       	in	r0, 0x1d	; 29
    1c38:	02 16       	cp	r0, r18
    1c3a:	31 f0       	breq	.+12     	; 0x1c48 <__eeupd_r18_m8+0x1e>
    1c3c:	2d bb       	out	0x1d, r18	; 29
    1c3e:	0f b6       	in	r0, 0x3f	; 63
    1c40:	f8 94       	cli
    1c42:	e2 9a       	sbi	0x1c, 2	; 28
    1c44:	e1 9a       	sbi	0x1c, 1	; 28
    1c46:	0f be       	out	0x3f, r0	; 63
    1c48:	08 95       	ret

00001c4a <_exit>:
    1c4a:	f8 94       	cli

00001c4c <__stop_program>:
    1c4c:	ff cf       	rjmp	.-2      	; 0x1c4c <__stop_program>
