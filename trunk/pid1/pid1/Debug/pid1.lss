
pid1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000018c2  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000042  00800060  000018c2  00001976  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000006b  008000a2  008000a2  000019b8  2**0
                  ALLOC
  3 .eeprom       0000000a  00810000  00810000  000019b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         000007d4  00000000  00000000  000019c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      000000e3  00000000  00000000  00002198  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      0000002f  00000000  00000000  0000227b  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000378  00000000  00000000  000022aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0000320e  00000000  00000000  00002622  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000010d2  00000000  00000000  00005830  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00001642  00000000  00000000  00006902  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  000007c8  00000000  00000000  00007f44  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000cf5  00000000  00000000  0000870c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000019f1  00000000  00000000  00009401  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000320  00000000  00000000  0000adf2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	19 c1       	rjmp	.+562    	; 0x234 <__ctors_end>
       2:	33 c1       	rjmp	.+614    	; 0x26a <__bad_interrupt>
       4:	32 c1       	rjmp	.+612    	; 0x26a <__bad_interrupt>
       6:	a3 cb       	rjmp	.-2234   	; 0xfffff74e <__eeprom_end+0xff7ef744>
       8:	30 c1       	rjmp	.+608    	; 0x26a <__bad_interrupt>
       a:	2f c1       	rjmp	.+606    	; 0x26a <__bad_interrupt>
       c:	2e c1       	rjmp	.+604    	; 0x26a <__bad_interrupt>
       e:	2d c1       	rjmp	.+602    	; 0x26a <__bad_interrupt>
      10:	2c c1       	rjmp	.+600    	; 0x26a <__bad_interrupt>
      12:	66 ca       	rjmp	.-2868   	; 0xfffff4e0 <__eeprom_end+0xff7ef4d6>
      14:	2a c1       	rjmp	.+596    	; 0x26a <__bad_interrupt>
      16:	29 c1       	rjmp	.+594    	; 0x26a <__bad_interrupt>
      18:	28 c1       	rjmp	.+592    	; 0x26a <__bad_interrupt>
      1a:	27 c1       	rjmp	.+590    	; 0x26a <__bad_interrupt>
      1c:	dd c1       	rjmp	.+954    	; 0x3d8 <__vector_14>
      1e:	25 c1       	rjmp	.+586    	; 0x26a <__bad_interrupt>
      20:	3d ca       	rjmp	.-2950   	; 0xfffff49c <__eeprom_end+0xff7ef492>
      22:	23 c1       	rjmp	.+582    	; 0x26a <__bad_interrupt>
      24:	22 c1       	rjmp	.+580    	; 0x26a <__bad_interrupt>
      26:	90 c3       	rjmp	.+1824   	; 0x748 <decode_led_char+0x48>
      28:	a0 c3       	rjmp	.+1856   	; 0x76a <decode_led_char+0x6a>
      2a:	9f c3       	rjmp	.+1854   	; 0x76a <decode_led_char+0x6a>
      2c:	9e c3       	rjmp	.+1852   	; 0x76a <decode_led_char+0x6a>
      2e:	9d c3       	rjmp	.+1850   	; 0x76a <decode_led_char+0x6a>
      30:	9c c3       	rjmp	.+1848   	; 0x76a <decode_led_char+0x6a>
      32:	9b c3       	rjmp	.+1846   	; 0x76a <decode_led_char+0x6a>
      34:	9a c3       	rjmp	.+1844   	; 0x76a <decode_led_char+0x6a>
      36:	99 c3       	rjmp	.+1842   	; 0x76a <decode_led_char+0x6a>
      38:	98 c3       	rjmp	.+1840   	; 0x76a <decode_led_char+0x6a>
      3a:	97 c3       	rjmp	.+1838   	; 0x76a <decode_led_char+0x6a>
      3c:	96 c3       	rjmp	.+1836   	; 0x76a <decode_led_char+0x6a>
      3e:	7e c3       	rjmp	.+1788   	; 0x73c <decode_led_char+0x3c>
      40:	7f c3       	rjmp	.+1790   	; 0x740 <decode_led_char+0x40>
      42:	7a c3       	rjmp	.+1780   	; 0x738 <decode_led_char+0x38>
      44:	92 c3       	rjmp	.+1828   	; 0x76a <decode_led_char+0x6a>
      46:	66 c3       	rjmp	.+1740   	; 0x714 <decode_led_char+0x14>
      48:	8f c3       	rjmp	.+1822   	; 0x768 <decode_led_char+0x68>
      4a:	66 c3       	rjmp	.+1740   	; 0x718 <decode_led_char+0x18>
      4c:	67 c3       	rjmp	.+1742   	; 0x71c <decode_led_char+0x1c>
      4e:	68 c3       	rjmp	.+1744   	; 0x720 <decode_led_char+0x20>
      50:	69 c3       	rjmp	.+1746   	; 0x724 <decode_led_char+0x24>
      52:	6a c3       	rjmp	.+1748   	; 0x728 <decode_led_char+0x28>
      54:	6b c3       	rjmp	.+1750   	; 0x72c <decode_led_char+0x2c>
      56:	6c c3       	rjmp	.+1752   	; 0x730 <decode_led_char+0x30>
      58:	6d c3       	rjmp	.+1754   	; 0x734 <decode_led_char+0x34>
      5a:	87 c3       	rjmp	.+1806   	; 0x76a <decode_led_char+0x6a>
      5c:	86 c3       	rjmp	.+1804   	; 0x76a <decode_led_char+0x6a>
      5e:	85 c3       	rjmp	.+1802   	; 0x76a <decode_led_char+0x6a>
      60:	84 c3       	rjmp	.+1800   	; 0x76a <decode_led_char+0x6a>
      62:	83 c3       	rjmp	.+1798   	; 0x76a <decode_led_char+0x6a>
      64:	82 c3       	rjmp	.+1796   	; 0x76a <decode_led_char+0x6a>
      66:	81 c3       	rjmp	.+1794   	; 0x76a <decode_led_char+0x6a>
      68:	80 c3       	rjmp	.+1792   	; 0x76a <decode_led_char+0x6a>
      6a:	7f c3       	rjmp	.+1790   	; 0x76a <decode_led_char+0x6a>
      6c:	71 c3       	rjmp	.+1762   	; 0x750 <decode_led_char+0x50>
      6e:	76 c3       	rjmp	.+1772   	; 0x75c <decode_led_char+0x5c>
      70:	79 c3       	rjmp	.+1778   	; 0x764 <decode_led_char+0x64>
      72:	70 c3       	rjmp	.+1760   	; 0x754 <decode_led_char+0x54>
      74:	7a c3       	rjmp	.+1780   	; 0x76a <decode_led_char+0x6a>
      76:	79 c3       	rjmp	.+1778   	; 0x76a <decode_led_char+0x6a>
      78:	78 c3       	rjmp	.+1776   	; 0x76a <decode_led_char+0x6a>
      7a:	77 c3       	rjmp	.+1774   	; 0x76a <decode_led_char+0x6a>
      7c:	76 c3       	rjmp	.+1772   	; 0x76a <decode_led_char+0x6a>
      7e:	75 c3       	rjmp	.+1770   	; 0x76a <decode_led_char+0x6a>
      80:	74 c3       	rjmp	.+1768   	; 0x76a <decode_led_char+0x6a>
      82:	6a c3       	rjmp	.+1748   	; 0x758 <decode_led_char+0x58>
      84:	47 c3       	rjmp	.+1678   	; 0x714 <decode_led_char+0x14>
      86:	6c c3       	rjmp	.+1752   	; 0x760 <decode_led_char+0x60>
      88:	70 c3       	rjmp	.+1760   	; 0x76a <decode_led_char+0x6a>
      8a:	6f c3       	rjmp	.+1758   	; 0x76a <decode_led_char+0x6a>
      8c:	4b c3       	rjmp	.+1686   	; 0x724 <decode_led_char+0x24>
      8e:	6d c3       	rjmp	.+1754   	; 0x76a <decode_led_char+0x6a>
      90:	6c c3       	rjmp	.+1752   	; 0x76a <decode_led_char+0x6a>
      92:	6b c3       	rjmp	.+1750   	; 0x76a <decode_led_char+0x6a>
      94:	6a c3       	rjmp	.+1748   	; 0x76a <decode_led_char+0x6a>
      96:	69 c3       	rjmp	.+1746   	; 0x76a <decode_led_char+0x6a>
      98:	68 c3       	rjmp	.+1744   	; 0x76a <decode_led_char+0x6a>
      9a:	67 c3       	rjmp	.+1742   	; 0x76a <decode_led_char+0x6a>
      9c:	66 c3       	rjmp	.+1740   	; 0x76a <decode_led_char+0x6a>
      9e:	65 c3       	rjmp	.+1738   	; 0x76a <decode_led_char+0x6a>
      a0:	64 c3       	rjmp	.+1736   	; 0x76a <decode_led_char+0x6a>
      a2:	63 c3       	rjmp	.+1734   	; 0x76a <decode_led_char+0x6a>
      a4:	4f c3       	rjmp	.+1694   	; 0x744 <decode_led_char+0x44>
      a6:	61 c3       	rjmp	.+1730   	; 0x76a <decode_led_char+0x6a>
      a8:	60 c3       	rjmp	.+1728   	; 0x76a <decode_led_char+0x6a>
      aa:	5f c3       	rjmp	.+1726   	; 0x76a <decode_led_char+0x6a>
      ac:	5e c3       	rjmp	.+1724   	; 0x76a <decode_led_char+0x6a>
      ae:	5d c3       	rjmp	.+1722   	; 0x76a <decode_led_char+0x6a>
      b0:	5c c3       	rjmp	.+1720   	; 0x76a <decode_led_char+0x6a>
      b2:	5b c3       	rjmp	.+1718   	; 0x76a <decode_led_char+0x6a>
      b4:	5a c3       	rjmp	.+1716   	; 0x76a <decode_led_char+0x6a>
      b6:	59 c3       	rjmp	.+1714   	; 0x76a <decode_led_char+0x6a>
      b8:	58 c3       	rjmp	.+1712   	; 0x76a <decode_led_char+0x6a>
      ba:	57 c3       	rjmp	.+1710   	; 0x76a <decode_led_char+0x6a>
      bc:	56 c3       	rjmp	.+1708   	; 0x76a <decode_led_char+0x6a>
      be:	55 c3       	rjmp	.+1706   	; 0x76a <decode_led_char+0x6a>
      c0:	54 c3       	rjmp	.+1704   	; 0x76a <decode_led_char+0x6a>
      c2:	53 c3       	rjmp	.+1702   	; 0x76a <decode_led_char+0x6a>
      c4:	52 c3       	rjmp	.+1700   	; 0x76a <decode_led_char+0x6a>
      c6:	51 c3       	rjmp	.+1698   	; 0x76a <decode_led_char+0x6a>
      c8:	50 c3       	rjmp	.+1696   	; 0x76a <decode_led_char+0x6a>
      ca:	4f c3       	rjmp	.+1694   	; 0x76a <decode_led_char+0x6a>
      cc:	4e c3       	rjmp	.+1692   	; 0x76a <decode_led_char+0x6a>
      ce:	4d c3       	rjmp	.+1690   	; 0x76a <decode_led_char+0x6a>
      d0:	4c c3       	rjmp	.+1688   	; 0x76a <decode_led_char+0x6a>
      d2:	4b c3       	rjmp	.+1686   	; 0x76a <decode_led_char+0x6a>
      d4:	4a c3       	rjmp	.+1684   	; 0x76a <decode_led_char+0x6a>
      d6:	49 c3       	rjmp	.+1682   	; 0x76a <decode_led_char+0x6a>
      d8:	48 c3       	rjmp	.+1680   	; 0x76a <decode_led_char+0x6a>
      da:	47 c3       	rjmp	.+1678   	; 0x76a <decode_led_char+0x6a>
      dc:	46 c3       	rjmp	.+1676   	; 0x76a <decode_led_char+0x6a>
      de:	45 c3       	rjmp	.+1674   	; 0x76a <decode_led_char+0x6a>
      e0:	44 c3       	rjmp	.+1672   	; 0x76a <decode_led_char+0x6a>
      e2:	43 c3       	rjmp	.+1670   	; 0x76a <decode_led_char+0x6a>
      e4:	42 c3       	rjmp	.+1668   	; 0x76a <decode_led_char+0x6a>
      e6:	41 c3       	rjmp	.+1666   	; 0x76a <decode_led_char+0x6a>
      e8:	40 c3       	rjmp	.+1664   	; 0x76a <decode_led_char+0x6a>
      ea:	3f c3       	rjmp	.+1662   	; 0x76a <decode_led_char+0x6a>
      ec:	3e c3       	rjmp	.+1660   	; 0x76a <decode_led_char+0x6a>
      ee:	3d c3       	rjmp	.+1658   	; 0x76a <decode_led_char+0x6a>
      f0:	3c c3       	rjmp	.+1656   	; 0x76a <decode_led_char+0x6a>
      f2:	3b c3       	rjmp	.+1654   	; 0x76a <decode_led_char+0x6a>
      f4:	3a c3       	rjmp	.+1652   	; 0x76a <decode_led_char+0x6a>
      f6:	39 c3       	rjmp	.+1650   	; 0x76a <decode_led_char+0x6a>
      f8:	38 c3       	rjmp	.+1648   	; 0x76a <decode_led_char+0x6a>
      fa:	37 c3       	rjmp	.+1646   	; 0x76a <decode_led_char+0x6a>
      fc:	36 c3       	rjmp	.+1644   	; 0x76a <decode_led_char+0x6a>
      fe:	35 c3       	rjmp	.+1642   	; 0x76a <decode_led_char+0x6a>
     100:	34 c3       	rjmp	.+1640   	; 0x76a <decode_led_char+0x6a>
     102:	33 c3       	rjmp	.+1638   	; 0x76a <decode_led_char+0x6a>
     104:	32 c3       	rjmp	.+1636   	; 0x76a <decode_led_char+0x6a>
     106:	31 c3       	rjmp	.+1634   	; 0x76a <decode_led_char+0x6a>
     108:	30 c3       	rjmp	.+1632   	; 0x76a <decode_led_char+0x6a>
     10a:	2f c3       	rjmp	.+1630   	; 0x76a <decode_led_char+0x6a>
     10c:	2e c3       	rjmp	.+1628   	; 0x76a <decode_led_char+0x6a>
     10e:	2d c3       	rjmp	.+1626   	; 0x76a <decode_led_char+0x6a>
     110:	2c c3       	rjmp	.+1624   	; 0x76a <decode_led_char+0x6a>
     112:	2b c3       	rjmp	.+1622   	; 0x76a <decode_led_char+0x6a>
     114:	2a c3       	rjmp	.+1620   	; 0x76a <decode_led_char+0x6a>
     116:	29 c3       	rjmp	.+1618   	; 0x76a <decode_led_char+0x6a>
     118:	28 c3       	rjmp	.+1616   	; 0x76a <decode_led_char+0x6a>
     11a:	27 c3       	rjmp	.+1614   	; 0x76a <decode_led_char+0x6a>
     11c:	26 c3       	rjmp	.+1612   	; 0x76a <decode_led_char+0x6a>
     11e:	25 c3       	rjmp	.+1610   	; 0x76a <decode_led_char+0x6a>
     120:	24 c3       	rjmp	.+1608   	; 0x76a <decode_led_char+0x6a>
     122:	23 c3       	rjmp	.+1606   	; 0x76a <decode_led_char+0x6a>
     124:	22 c3       	rjmp	.+1604   	; 0x76a <decode_led_char+0x6a>
     126:	21 c3       	rjmp	.+1602   	; 0x76a <decode_led_char+0x6a>
     128:	20 c3       	rjmp	.+1600   	; 0x76a <decode_led_char+0x6a>
     12a:	1f c3       	rjmp	.+1598   	; 0x76a <decode_led_char+0x6a>
     12c:	1e c3       	rjmp	.+1596   	; 0x76a <decode_led_char+0x6a>
     12e:	1d c3       	rjmp	.+1594   	; 0x76a <decode_led_char+0x6a>
     130:	1c c3       	rjmp	.+1592   	; 0x76a <decode_led_char+0x6a>
     132:	1b c3       	rjmp	.+1590   	; 0x76a <decode_led_char+0x6a>
     134:	1a c3       	rjmp	.+1588   	; 0x76a <decode_led_char+0x6a>
     136:	19 c3       	rjmp	.+1586   	; 0x76a <decode_led_char+0x6a>
     138:	18 c3       	rjmp	.+1584   	; 0x76a <decode_led_char+0x6a>
     13a:	17 c3       	rjmp	.+1582   	; 0x76a <decode_led_char+0x6a>
     13c:	16 c3       	rjmp	.+1580   	; 0x76a <decode_led_char+0x6a>
     13e:	15 c3       	rjmp	.+1578   	; 0x76a <decode_led_char+0x6a>
     140:	14 c3       	rjmp	.+1576   	; 0x76a <decode_led_char+0x6a>
     142:	13 c3       	rjmp	.+1574   	; 0x76a <decode_led_char+0x6a>
     144:	12 c3       	rjmp	.+1572   	; 0x76a <decode_led_char+0x6a>
     146:	02 c3       	rjmp	.+1540   	; 0x74c <decode_led_char+0x4c>

00000148 <menuFunctionSet>:
     148:	01 b4 07 5a 06 e8 06 03 e4 06 58 07 38 05 02 54     ...Z......X.8..T
     158:	07 eb 06 dc 06 05 ca 06 85 06 00 00 0b 3e 05 85     .............>..
     168:	06 4c 05 04 ca 06 07 06 00 00 0c 3e 05 07 06 4c     .L.........>...L
     178:	05 06 d2 06 bd 05 00 00 09 3e 05 bd 05 4c 05 07     .........>...L..
     188:	d2 06 73 05 00 00 0a 3e 05 73 05 4c 05 08 65 05     ..s....>.s.L..e.
     198:	52 05 00 00 0d 57 05 52 05 00 00                    R....W.R...

000001a3 <menuJumpSet>:
     1a3:	01 06 00 03 a8 01 00 01 02 40 01 00 02 05 28 02     .........@....(.
     1b3:	00 01 01 80 03 00 83 01 40 05 00 82 01 00 05 04     ........@.......
     1c3:	00 04 68 05 02 00 07 a8 05 00 01 0b 28 0b 00 83     ..h.........(...
     1d3:	05 28 04 00 82 01 00 04 04 00 06 68 04 02 00 05     .(.........h....
     1e3:	a8 04 00 01 0c 28 0c 00 83 04 28 06 00 82 01 00     .....(....(.....
     1f3:	06 04 00 07 68 06 02 00 04 a8 06 00 01 09 00 07     ....h...........
     203:	00 82 01 00 07 04 00 05 68 07 02 00 06 a8 07 00     ........h.......
     213:	01 0a 00 09 00 02 06 00 09 00 01 08 14 08 00 83     ................
     223:	01 00 0a 00 02 07 00 0a 00 01 0d 14 0d 00 83 01     ................
	...

00000234 <__ctors_end>:
     234:	11 24       	eor	r1, r1
     236:	1f be       	out	0x3f, r1	; 63
     238:	cf e5       	ldi	r28, 0x5F	; 95
     23a:	d4 e0       	ldi	r29, 0x04	; 4
     23c:	de bf       	out	0x3e, r29	; 62
     23e:	cd bf       	out	0x3d, r28	; 61

00000240 <__do_copy_data>:
     240:	10 e0       	ldi	r17, 0x00	; 0
     242:	a0 e6       	ldi	r26, 0x60	; 96
     244:	b0 e0       	ldi	r27, 0x00	; 0
     246:	e2 ec       	ldi	r30, 0xC2	; 194
     248:	f8 e1       	ldi	r31, 0x18	; 24
     24a:	02 c0       	rjmp	.+4      	; 0x250 <__do_copy_data+0x10>
     24c:	05 90       	lpm	r0, Z+
     24e:	0d 92       	st	X+, r0
     250:	a2 3a       	cpi	r26, 0xA2	; 162
     252:	b1 07       	cpc	r27, r17
     254:	d9 f7       	brne	.-10     	; 0x24c <__do_copy_data+0xc>

00000256 <__do_clear_bss>:
     256:	21 e0       	ldi	r18, 0x01	; 1
     258:	a2 ea       	ldi	r26, 0xA2	; 162
     25a:	b0 e0       	ldi	r27, 0x00	; 0
     25c:	01 c0       	rjmp	.+2      	; 0x260 <.do_clear_bss_start>

0000025e <.do_clear_bss_loop>:
     25e:	1d 92       	st	X+, r1

00000260 <.do_clear_bss_start>:
     260:	ad 30       	cpi	r26, 0x0D	; 13
     262:	b2 07       	cpc	r27, r18
     264:	e1 f7       	brne	.-8      	; 0x25e <.do_clear_bss_loop>
     266:	0c d8       	rcall	.-4072   	; 0xfffff280 <__eeprom_end+0xff7ef276>
     268:	2a cb       	rjmp	.-2476   	; 0xfffff8be <__eeprom_end+0xff7ef8b4>

0000026a <__bad_interrupt>:
     26a:	ca ce       	rjmp	.-620    	; 0x0 <__vectors>

0000026c <conv_ADC_to_Celsius>:
static int8_t adc_buffer_pos = -1;



uint16_t conv_ADC_to_Celsius(uint16_t adc_value)
{	
     26c:	0f 93       	push	r16
     26e:	1f 93       	push	r17
	return (uint16_t)(((int32_t)adc_value * k_norm + offset_norm) / (COEFF_SCALE));
     270:	20 91 a2 00 	lds	r18, 0x00A2
     274:	30 91 a3 00 	lds	r19, 0x00A3
     278:	40 91 a4 00 	lds	r20, 0x00A4
     27c:	50 91 a5 00 	lds	r21, 0x00A5
     280:	dc 01       	movw	r26, r24
     282:	e1 da       	rcall	.-2622   	; 0xfffff846 <__eeprom_end+0xff7ef83c>
     284:	00 91 a6 00 	lds	r16, 0x00A6
     288:	10 91 a7 00 	lds	r17, 0x00A7
     28c:	20 91 a8 00 	lds	r18, 0x00A8
     290:	30 91 a9 00 	lds	r19, 0x00A9
     294:	60 0f       	add	r22, r16
     296:	71 1f       	adc	r23, r17
     298:	82 1f       	adc	r24, r18
     29a:	93 1f       	adc	r25, r19
     29c:	28 ee       	ldi	r18, 0xE8	; 232
     29e:	33 e0       	ldi	r19, 0x03	; 3
     2a0:	40 e0       	ldi	r20, 0x00	; 0
     2a2:	50 e0       	ldi	r21, 0x00	; 0
     2a4:	a3 da       	rcall	.-2746   	; 0xfffff7ec <__eeprom_end+0xff7ef7e2>
}
     2a6:	82 2f       	mov	r24, r18
     2a8:	93 2f       	mov	r25, r19
     2aa:	1f 91       	pop	r17
     2ac:	0f 91       	pop	r16
     2ae:	08 95       	ret

000002b0 <conv_Celsius_to_ADC>:

uint16_t conv_Celsius_to_ADC(uint16_t degree_value)
{	
     2b0:	0f 93       	push	r16
     2b2:	1f 93       	push	r17
	return (uint16_t)(((int32_t)degree_value * COEFF_SCALE - offset_norm) / k_norm);
     2b4:	9c 01       	movw	r18, r24
     2b6:	a8 ee       	ldi	r26, 0xE8	; 232
     2b8:	b3 e0       	ldi	r27, 0x03	; 3
     2ba:	b3 da       	rcall	.-2714   	; 0xfffff822 <__eeprom_end+0xff7ef818>
     2bc:	00 91 a6 00 	lds	r16, 0x00A6
     2c0:	10 91 a7 00 	lds	r17, 0x00A7
     2c4:	20 91 a8 00 	lds	r18, 0x00A8
     2c8:	30 91 a9 00 	lds	r19, 0x00A9
     2cc:	60 1b       	sub	r22, r16
     2ce:	71 0b       	sbc	r23, r17
     2d0:	82 0b       	sbc	r24, r18
     2d2:	93 0b       	sbc	r25, r19
     2d4:	20 91 a2 00 	lds	r18, 0x00A2
     2d8:	30 91 a3 00 	lds	r19, 0x00A3
     2dc:	40 91 a4 00 	lds	r20, 0x00A4
     2e0:	50 91 a5 00 	lds	r21, 0x00A5
     2e4:	83 da       	rcall	.-2810   	; 0xfffff7ec <__eeprom_end+0xff7ef7e2>
}
     2e6:	82 2f       	mov	r24, r18
     2e8:	93 2f       	mov	r25, r19
     2ea:	1f 91       	pop	r17
     2ec:	0f 91       	pop	r16
     2ee:	08 95       	ret

000002f0 <calculateCoeffs>:

void calculateCoeffs(void)
{
     2f0:	8f 92       	push	r8
     2f2:	9f 92       	push	r9
     2f4:	af 92       	push	r10
     2f6:	bf 92       	push	r11
     2f8:	cf 92       	push	r12
     2fa:	df 92       	push	r13
     2fc:	ef 92       	push	r14
     2fe:	ff 92       	push	r15
     300:	cf 93       	push	r28
     302:	df 93       	push	r29
	k_norm = ((int32_t)(cpoint1 - cpoint2) * COEFF_SCALE) / ((int32_t)(cpoint1_adc - cpoint2_adc));
     304:	b0 90 dc 00 	lds	r11, 0x00DC
     308:	c0 91 e1 00 	lds	r28, 0x00E1
     30c:	d0 91 e2 00 	lds	r29, 0x00E2
     310:	ab 2d       	mov	r26, r11
     312:	b0 e0       	ldi	r27, 0x00	; 0
     314:	80 91 e6 00 	lds	r24, 0x00E6
     318:	a8 1b       	sub	r26, r24
     31a:	b1 09       	sbc	r27, r1
     31c:	28 ee       	ldi	r18, 0xE8	; 232
     31e:	33 e0       	ldi	r19, 0x03	; 3
     320:	8c da       	rcall	.-2792   	; 0xfffff83a <__eeprom_end+0xff7ef830>
     322:	20 91 e4 00 	lds	r18, 0x00E4
     326:	30 91 e5 00 	lds	r19, 0x00E5
     32a:	ae 01       	movw	r20, r28
     32c:	42 1b       	sub	r20, r18
     32e:	53 0b       	sbc	r21, r19
     330:	9a 01       	movw	r18, r20
     332:	40 e0       	ldi	r20, 0x00	; 0
     334:	50 e0       	ldi	r21, 0x00	; 0
     336:	5a da       	rcall	.-2892   	; 0xfffff7ec <__eeprom_end+0xff7ef7e2>
     338:	69 01       	movw	r12, r18
     33a:	7a 01       	movw	r14, r20
     33c:	20 93 a2 00 	sts	0x00A2, r18
     340:	30 93 a3 00 	sts	0x00A3, r19
     344:	40 93 a4 00 	sts	0x00A4, r20
     348:	50 93 a5 00 	sts	0x00A5, r21
	offset_norm = (int32_t)cpoint1 * COEFF_SCALE - (int32_t)cpoint1_adc * k_norm;
     34c:	2b 2d       	mov	r18, r11
     34e:	30 e0       	ldi	r19, 0x00	; 0
     350:	a8 ee       	ldi	r26, 0xE8	; 232
     352:	b3 e0       	ldi	r27, 0x03	; 3
     354:	66 da       	rcall	.-2868   	; 0xfffff822 <__eeprom_end+0xff7ef818>
     356:	4b 01       	movw	r8, r22
     358:	5c 01       	movw	r10, r24
     35a:	de 01       	movw	r26, r28
     35c:	a7 01       	movw	r20, r14
     35e:	96 01       	movw	r18, r12
     360:	72 da       	rcall	.-2844   	; 0xfffff846 <__eeprom_end+0xff7ef83c>
     362:	86 1a       	sub	r8, r22
     364:	97 0a       	sbc	r9, r23
     366:	a8 0a       	sbc	r10, r24
     368:	b9 0a       	sbc	r11, r25
     36a:	80 92 a6 00 	sts	0x00A6, r8
     36e:	90 92 a7 00 	sts	0x00A7, r9
     372:	a0 92 a8 00 	sts	0x00A8, r10
     376:	b0 92 a9 00 	sts	0x00A9, r11
}
     37a:	df 91       	pop	r29
     37c:	cf 91       	pop	r28
     37e:	ff 90       	pop	r15
     380:	ef 90       	pop	r14
     382:	df 90       	pop	r13
     384:	cf 90       	pop	r12
     386:	bf 90       	pop	r11
     388:	af 90       	pop	r10
     38a:	9f 90       	pop	r9
     38c:	8f 90       	pop	r8
     38e:	08 95       	ret

00000390 <update_filtered_adc>:
void update_filtered_adc()
{
	uint8_t i;
	uint32_t filtered_value = 0;
	// Disable interrupts from ADC - to save data integrity
	ACSR &= ~(1<<ACIE);	
     390:	43 98       	cbi	0x08, 3	; 8
     392:	ea ea       	ldi	r30, 0xAA	; 170
     394:	f0 e0       	ldi	r31, 0x00	; 0
	k_norm = ((int32_t)(cpoint1 - cpoint2) * COEFF_SCALE) / ((int32_t)(cpoint1_adc - cpoint2_adc));
	offset_norm = (int32_t)cpoint1 * COEFF_SCALE - (int32_t)cpoint1_adc * k_norm;
}


void update_filtered_adc()
     396:	4a eb       	ldi	r20, 0xBA	; 186
     398:	50 e0       	ldi	r21, 0x00	; 0
{
	uint8_t i;
	uint32_t filtered_value = 0;
     39a:	80 e0       	ldi	r24, 0x00	; 0
     39c:	90 e0       	ldi	r25, 0x00	; 0
     39e:	dc 01       	movw	r26, r24
	// Disable interrupts from ADC - to save data integrity
	ACSR &= ~(1<<ACIE);	
	// Count up
	for(i=0;i<ADC_BUFFER_LENGTH;i++)
	{
		filtered_value += adc_sample_buffer[i];
     3a0:	21 91       	ld	r18, Z+
     3a2:	31 91       	ld	r19, Z+
     3a4:	82 0f       	add	r24, r18
     3a6:	93 1f       	adc	r25, r19
     3a8:	a1 1d       	adc	r26, r1
     3aa:	b1 1d       	adc	r27, r1
	uint8_t i;
	uint32_t filtered_value = 0;
	// Disable interrupts from ADC - to save data integrity
	ACSR &= ~(1<<ACIE);	
	// Count up
	for(i=0;i<ADC_BUFFER_LENGTH;i++)
     3ac:	e4 17       	cp	r30, r20
     3ae:	f5 07       	cpc	r31, r21
     3b0:	b9 f7       	brne	.-18     	; 0x3a0 <update_filtered_adc+0x10>
	{
		filtered_value += adc_sample_buffer[i];
	}	
	// Enable interrupts from ADC
	ACSR |= (1<<ACIE);
     3b2:	43 9a       	sbi	0x08, 3	; 8
	// Normalize ADC filtered value
	adc_filtered_value = (uint16_t)(filtered_value / ADC_BUFFER_LENGTH);
     3b4:	68 94       	set
     3b6:	12 f8       	bld	r1, 2
     3b8:	b6 95       	lsr	r27
     3ba:	a7 95       	ror	r26
     3bc:	97 95       	ror	r25
     3be:	87 95       	ror	r24
     3c0:	16 94       	lsr	r1
     3c2:	d1 f7       	brne	.-12     	; 0x3b8 <update_filtered_adc+0x28>
     3c4:	90 93 d9 00 	sts	0x00D9, r25
     3c8:	80 93 d8 00 	sts	0x00D8, r24
	// Convert to Celsius degree
	adc_filtered_celsius = conv_ADC_to_Celsius(adc_filtered_value);
     3cc:	4f df       	rcall	.-354    	; 0x26c <conv_ADC_to_Celsius>
     3ce:	90 93 db 00 	sts	0x00DB, r25
     3d2:	80 93 da 00 	sts	0x00DA, r24
     3d6:	08 95       	ret

000003d8 <__vector_14>:




ISR(ADC_vect)
{
     3d8:	1f 92       	push	r1
     3da:	0f 92       	push	r0
     3dc:	0f b6       	in	r0, 0x3f	; 63
     3de:	0f 92       	push	r0
     3e0:	11 24       	eor	r1, r1
     3e2:	2f 93       	push	r18
     3e4:	8f 93       	push	r24
     3e6:	9f 93       	push	r25
     3e8:	ef 93       	push	r30
     3ea:	ff 93       	push	r31
	uint16_t new_sample = ADC;
     3ec:	84 b1       	in	r24, 0x04	; 4
     3ee:	95 b1       	in	r25, 0x05	; 5
	
	if (adc_buffer_pos < 0)
     3f0:	20 91 60 00 	lds	r18, 0x0060
     3f4:	22 23       	and	r18, r18
     3f6:	fc f4       	brge	.+62     	; 0x436 <__vector_14+0x5e>
	{
		// First call to the function, fill whole buffer with current sample
		for (adc_buffer_pos = ADC_BUFFER_LENGTH-1; adc_buffer_pos > 0; adc_buffer_pos--)
			adc_sample_buffer[adc_buffer_pos] = new_sample;
     3f8:	90 93 b9 00 	sts	0x00B9, r25
     3fc:	80 93 b8 00 	sts	0x00B8, r24
     400:	90 93 b7 00 	sts	0x00B7, r25
     404:	80 93 b6 00 	sts	0x00B6, r24
     408:	90 93 b5 00 	sts	0x00B5, r25
     40c:	80 93 b4 00 	sts	0x00B4, r24
     410:	90 93 b3 00 	sts	0x00B3, r25
     414:	80 93 b2 00 	sts	0x00B2, r24
     418:	90 93 b1 00 	sts	0x00B1, r25
     41c:	80 93 b0 00 	sts	0x00B0, r24
     420:	90 93 af 00 	sts	0x00AF, r25
     424:	80 93 ae 00 	sts	0x00AE, r24
     428:	90 93 ad 00 	sts	0x00AD, r25
     42c:	80 93 ac 00 	sts	0x00AC, r24
     430:	10 92 60 00 	sts	0x0060, r1
     434:	0e c0       	rjmp	.+28     	; 0x452 <__vector_14+0x7a>
	}
	else
	{
		// Normal call
		adc_sample_buffer[adc_buffer_pos] = new_sample;
     436:	e2 2f       	mov	r30, r18
     438:	ee 0f       	add	r30, r30
     43a:	ff 0b       	sbc	r31, r31
     43c:	e6 55       	subi	r30, 0x56	; 86
     43e:	ff 4f       	sbci	r31, 0xFF	; 255
     440:	91 83       	std	Z+1, r25	; 0x01
     442:	80 83       	st	Z, r24
		adc_buffer_pos = (adc_buffer_pos == ADC_BUFFER_LENGTH - 1) ? 0 : adc_buffer_pos + 1;
     444:	27 30       	cpi	r18, 0x07	; 7
     446:	11 f0       	breq	.+4      	; 0x44c <__vector_14+0x74>
     448:	2f 5f       	subi	r18, 0xFF	; 255
     44a:	01 c0       	rjmp	.+2      	; 0x44e <__vector_14+0x76>
     44c:	20 e0       	ldi	r18, 0x00	; 0
     44e:	20 93 60 00 	sts	0x0060, r18
	}		
}	
     452:	ff 91       	pop	r31
     454:	ef 91       	pop	r30
     456:	9f 91       	pop	r25
     458:	8f 91       	pop	r24
     45a:	2f 91       	pop	r18
     45c:	0f 90       	pop	r0
     45e:	0f be       	out	0x3f, r0	; 63
     460:	0f 90       	pop	r0
     462:	1f 90       	pop	r1
     464:	18 95       	reti

00000466 <process_buttons>:
	uint8_t raw_delayed_inv;
	static uint8_t press_timer = 0;
	uint8_t long_press_mask;
	uint8_t long_press_event_mask;
	
	raw_delayed = raw_current;
     466:	30 91 c0 00 	lds	r19, 0x00C0
	raw_delayed_inv = raw_current_inv;
     46a:	20 91 61 00 	lds	r18, 0x0061
	raw_current = raw_button_state;
     46e:	90 91 f9 00 	lds	r25, 0x00F9
     472:	90 93 c0 00 	sts	0x00C0, r25
	raw_current_inv = ~raw_current;
     476:	49 2f       	mov	r20, r25
     478:	40 95       	com	r20
     47a:	40 93 61 00 	sts	0x0061, r20
	
	// Must be before press_timer update
	long_press_mask = (press_timer >= LONG_PRESS_DELAY) ? 0xFF : 0x00;
     47e:	80 91 c1 00 	lds	r24, 0x00C1
     482:	8c 30       	cpi	r24, 0x0C	; 12
     484:	10 f0       	brcs	.+4      	; 0x48a <process_buttons+0x24>
     486:	6f ef       	ldi	r22, 0xFF	; 255
     488:	01 c0       	rjmp	.+2      	; 0x48c <process_buttons+0x26>
     48a:	60 e0       	ldi	r22, 0x00	; 0
	
	if (raw_delayed != raw_current)
     48c:	39 17       	cp	r19, r25
     48e:	41 f0       	breq	.+16     	; 0x4a0 <process_buttons+0x3a>
	{
		press_timer = 0;
     490:	10 92 c1 00 	sts	0x00C1, r1
	}
	
	// Must after press_timer update
	long_press_event_mask = (press_timer == LONG_PRESS_DELAY) ? 0xFF : 0x00;
			
	button_action_down = raw_current & raw_delayed_inv;
     494:	89 2f       	mov	r24, r25
     496:	82 23       	and	r24, r18
     498:	80 93 bd 00 	sts	0x00BD, r24
     49c:	50 e0       	ldi	r21, 0x00	; 0
     49e:	14 c0       	rjmp	.+40     	; 0x4c8 <process_buttons+0x62>
	
	if (raw_delayed != raw_current)
	{
		press_timer = 0;
	}
	else if (press_timer <= LONG_PRESS_DELAY)
     4a0:	8d 30       	cpi	r24, 0x0D	; 13
     4a2:	18 f4       	brcc	.+6      	; 0x4aa <process_buttons+0x44>
	{
		press_timer++;
     4a4:	8f 5f       	subi	r24, 0xFF	; 255
     4a6:	80 93 c1 00 	sts	0x00C1, r24
	}
	
	// Must after press_timer update
	long_press_event_mask = (press_timer == LONG_PRESS_DELAY) ? 0xFF : 0x00;
     4aa:	50 91 c1 00 	lds	r21, 0x00C1
     4ae:	5c 30       	cpi	r21, 0x0C	; 12
     4b0:	09 f4       	brne	.+2      	; 0x4b4 <process_buttons+0x4e>
     4b2:	45 c0       	rjmp	.+138    	; 0x53e <process_buttons+0xd8>
			
	button_action_down = raw_current & raw_delayed_inv;
     4b4:	89 2f       	mov	r24, r25
     4b6:	82 23       	and	r24, r18
     4b8:	80 93 bd 00 	sts	0x00BD, r24
			
	if (press_timer > REPEAT_DELAY)
     4bc:	57 30       	cpi	r21, 0x07	; 7
     4be:	18 f0       	brcs	.+6      	; 0x4c6 <process_buttons+0x60>
     4c0:	50 e0       	ldi	r21, 0x00	; 0
		raw_delayed_inv |= 0xFF;
     4c2:	2f ef       	ldi	r18, 0xFF	; 255
     4c4:	01 c0       	rjmp	.+2      	; 0x4c8 <process_buttons+0x62>
	// Must after press_timer update
	long_press_event_mask = (press_timer == LONG_PRESS_DELAY) ? 0xFF : 0x00;
			
	button_action_down = raw_current & raw_delayed_inv;
			
	if (press_timer > REPEAT_DELAY)
     4c6:	50 e0       	ldi	r21, 0x00	; 0
		raw_delayed_inv |= 0xFF;
	
	button_action_rep = raw_current & raw_delayed_inv;
     4c8:	29 23       	and	r18, r25
     4ca:	20 93 bc 00 	sts	0x00BC, r18
	
	button_action_up_short = raw_current_inv & raw_delayed & ~long_press_mask;
     4ce:	60 95       	com	r22
     4d0:	34 23       	and	r19, r20
     4d2:	36 23       	and	r19, r22
     4d4:	30 93 bb 00 	sts	0x00BB, r19
	//button_action_up_long  = raw_current_inv & raw_delayed & long_press_mask;
	button_action_long  = raw_current & long_press_event_mask;
     4d8:	59 23       	and	r21, r25
     4da:	50 93 ba 00 	sts	0x00BA, r21
	
	// Compose button state
	button_state = (button_action_down & (BD_MENU | BD_UP | BD_DOWN | BD_ROTFWD | BD_ROTREV | BD_HEATCTRL));
     4de:	87 77       	andi	r24, 0x77	; 119
     4e0:	90 e0       	ldi	r25, 0x00	; 0
	if (button_action_up_short & BD_MENU)
     4e2:	30 fd       	sbrc	r19, 0
     4e4:	05 c0       	rjmp	.+10     	; 0x4f0 <process_buttons+0x8a>
	button_action_up_short = raw_current_inv & raw_delayed & ~long_press_mask;
	//button_action_up_long  = raw_current_inv & raw_delayed & long_press_mask;
	button_action_long  = raw_current & long_press_event_mask;
	
	// Compose button state
	button_state = (button_action_down & (BD_MENU | BD_UP | BD_DOWN | BD_ROTFWD | BD_ROTREV | BD_HEATCTRL));
     4e6:	90 93 bf 00 	sts	0x00BF, r25
     4ea:	80 93 be 00 	sts	0x00BE, r24
     4ee:	05 c0       	rjmp	.+10     	; 0x4fa <process_buttons+0x94>
	if (button_action_up_short & BD_MENU)
		button_state |= BS_MENU;
     4f0:	91 60       	ori	r25, 0x01	; 1
     4f2:	90 93 bf 00 	sts	0x00BF, r25
     4f6:	80 93 be 00 	sts	0x00BE, r24
	//if (button_action_up_long & BD_MENU)
	if (button_action_long & BD_MENU)
     4fa:	50 ff       	sbrs	r21, 0
     4fc:	09 c0       	rjmp	.+18     	; 0x510 <process_buttons+0xaa>
		button_state |= BL_MENU;
     4fe:	80 91 be 00 	lds	r24, 0x00BE
     502:	90 91 bf 00 	lds	r25, 0x00BF
     506:	92 60       	ori	r25, 0x02	; 2
     508:	90 93 bf 00 	sts	0x00BF, r25
     50c:	80 93 be 00 	sts	0x00BE, r24
	if (button_action_rep & BD_UP)
     510:	21 ff       	sbrs	r18, 1
     512:	09 c0       	rjmp	.+18     	; 0x526 <process_buttons+0xc0>
		button_state |= BR_UP;	
     514:	80 91 be 00 	lds	r24, 0x00BE
     518:	90 91 bf 00 	lds	r25, 0x00BF
     51c:	94 60       	ori	r25, 0x04	; 4
     51e:	90 93 bf 00 	sts	0x00BF, r25
     522:	80 93 be 00 	sts	0x00BE, r24
	if (button_action_rep & BD_DOWN)
     526:	22 ff       	sbrs	r18, 2
     528:	10 c0       	rjmp	.+32     	; 0x54a <process_buttons+0xe4>
		button_state |= BR_DOWN;
     52a:	80 91 be 00 	lds	r24, 0x00BE
     52e:	90 91 bf 00 	lds	r25, 0x00BF
     532:	98 60       	ori	r25, 0x08	; 8
     534:	90 93 bf 00 	sts	0x00BF, r25
     538:	80 93 be 00 	sts	0x00BE, r24
     53c:	08 95       	ret
	}
	
	// Must after press_timer update
	long_press_event_mask = (press_timer == LONG_PRESS_DELAY) ? 0xFF : 0x00;
			
	button_action_down = raw_current & raw_delayed_inv;
     53e:	83 2f       	mov	r24, r19
     540:	82 23       	and	r24, r18
     542:	80 93 bd 00 	sts	0x00BD, r24
	{
		press_timer++;
	}
	
	// Must after press_timer update
	long_press_event_mask = (press_timer == LONG_PRESS_DELAY) ? 0xFF : 0x00;
     546:	5f ef       	ldi	r21, 0xFF	; 255
     548:	bc cf       	rjmp	.-136    	; 0x4c2 <process_buttons+0x5c>
     54a:	08 95       	ret

0000054c <processRollControl>:
uint16_t cpoint2_adc;			// Calibration point 2, ADC value


// Function to control motor rotation
void processRollControl(void)
{	
     54c:	cf 93       	push	r28
	uint8_t beepState = 0;
	static uint8_t beepMask = 0x00;
	
	// Control direction by buttons
	if (button_action_down & BD_ROTFWD)
     54e:	80 91 bd 00 	lds	r24, 0x00BD
     552:	84 ff       	sbrs	r24, 4
     554:	04 c0       	rjmp	.+8      	; 0x55e <processRollControl+0x12>
	{
		setMotorDirection(ROLL_FWD);	
     556:	81 e0       	ldi	r24, 0x01	; 1
     558:	2f d7       	rcall	.+3678   	; 0x13b8 <setMotorDirection>
		beepState |= 0x01;			// pressed FWD button
     55a:	c1 e0       	ldi	r28, 0x01	; 1
     55c:	0f c0       	rjmp	.+30     	; 0x57c <processRollControl+0x30>
	}		
	else if (button_action_down & BD_ROTREV)
     55e:	85 ff       	sbrs	r24, 5
     560:	04 c0       	rjmp	.+8      	; 0x56a <processRollControl+0x1e>
	{
		setMotorDirection(ROLL_REV);
     562:	82 e0       	ldi	r24, 0x02	; 2
     564:	29 d7       	rcall	.+3666   	; 0x13b8 <setMotorDirection>
		beepState |= 0x02;			// pressed REV button
     566:	c2 e0       	ldi	r28, 0x02	; 2
     568:	09 c0       	rjmp	.+18     	; 0x57c <processRollControl+0x30>
	}		
	else if (button_action_long & BD_CYCLE)
     56a:	80 91 ba 00 	lds	r24, 0x00BA
     56e:	88 23       	and	r24, r24
     570:	24 f4       	brge	.+8      	; 0x57a <processRollControl+0x2e>
	{
		stopCycleRolling(1);		// Reset points and disabled CYCLE mode (if was enabled)
     572:	81 e0       	ldi	r24, 0x01	; 1
     574:	3f d7       	rcall	.+3710   	; 0x13f4 <stopCycleRolling>
		beepState |= 0x08;			// reset of points by long pressing of ROLL button
     576:	c8 e0       	ldi	r28, 0x08	; 8
     578:	01 c0       	rjmp	.+2      	; 0x57c <processRollControl+0x30>


// Function to control motor rotation
void processRollControl(void)
{	
	uint8_t beepState = 0;
     57a:	c0 e0       	ldi	r28, 0x00	; 0
		stopCycleRolling(1);		// Reset points and disabled CYCLE mode (if was enabled)
		beepState |= 0x08;			// reset of points by long pressing of ROLL button
	}
	
	
	if (button_action_up_short & BD_CYCLE)
     57c:	80 91 bb 00 	lds	r24, 0x00BB
     580:	88 23       	and	r24, r24
     582:	74 f4       	brge	.+28     	; 0x5a0 <processRollControl+0x54>
	{
		if (rollState & ROLL_CYCLE)
     584:	80 91 ca 00 	lds	r24, 0x00CA
     588:	82 ff       	sbrs	r24, 2
     58a:	04 c0       	rjmp	.+8      	; 0x594 <processRollControl+0x48>
		{
			stopCycleRolling(0);
     58c:	80 e0       	ldi	r24, 0x00	; 0
     58e:	32 d7       	rcall	.+3684   	; 0x13f4 <stopCycleRolling>
			beepState |= 0x20;		// stopped cycle
     590:	c0 62       	ori	r28, 0x20	; 32
     592:	06 c0       	rjmp	.+12     	; 0x5a0 <processRollControl+0x54>
		}
		else if (startCycleRolling())
     594:	6b d7       	rcall	.+3798   	; 0x146c <startCycleRolling>
     596:	88 23       	and	r24, r24
     598:	11 f0       	breq	.+4      	; 0x59e <processRollControl+0x52>
		{
			beepState |= 0x10;		// started cycle
     59a:	c0 61       	ori	r28, 0x10	; 16
     59c:	01 c0       	rjmp	.+2      	; 0x5a0 <processRollControl+0x54>
		}
		else
		{
			beepState |= 0x40;		// failed to start cycle
     59e:	c0 64       	ori	r28, 0x40	; 64
		}			
	}		
	
	if (rollState & ROLL_DIR_CHANGED)
     5a0:	80 91 ca 00 	lds	r24, 0x00CA
     5a4:	85 ff       	sbrs	r24, 5
     5a6:	04 c0       	rjmp	.+8      	; 0x5b0 <processRollControl+0x64>
	{
		rollState &= ~ROLL_DIR_CHANGED;
     5a8:	8f 7d       	andi	r24, 0xDF	; 223
     5aa:	80 93 ca 00 	sts	0x00CA, r24
		beepState |= 0x04;	
     5ae:	c4 60       	ori	r28, 0x04	; 4
	}
	
	if (rollState & CYCLE_ROLL_DONE)
     5b0:	80 91 ca 00 	lds	r24, 0x00CA
     5b4:	84 ff       	sbrs	r24, 4
     5b6:	04 c0       	rjmp	.+8      	; 0x5c0 <processRollControl+0x74>
	{
		rollState &= ~CYCLE_ROLL_DONE;
     5b8:	8f 7e       	andi	r24, 0xEF	; 239
     5ba:	80 93 ca 00 	sts	0x00CA, r24
		beepState |= 0x80;	
     5be:	c0 68       	ori	r28, 0x80	; 128
	}		
	
	beepState &= beepMask;
     5c0:	80 91 c2 00 	lds	r24, 0x00C2
     5c4:	c8 23       	and	r28, r24
	
	if (beepState & 0x80)		// Roll cycle done
     5c6:	3c f4       	brge	.+14     	; 0x5d6 <processRollControl+0x8a>
	{
		SetBeeperFreq(1000);
     5c8:	88 ee       	ldi	r24, 0xE8	; 232
     5ca:	93 e0       	ldi	r25, 0x03	; 3
     5cc:	93 d8       	rcall	.-3802   	; 0xfffff6f4 <__eeprom_end+0xff7ef6ea>
		StartBeep(200);
     5ce:	88 ec       	ldi	r24, 0xC8	; 200
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	b1 d8       	rcall	.-3742   	; 0xfffff736 <__eeprom_end+0xff7ef72c>
     5d4:	1b c0       	rjmp	.+54     	; 0x60c <processRollControl+0xc0>
	}		
	else if (beepState & 0x40)	// Roll cycle start fail
     5d6:	c6 ff       	sbrs	r28, 6
     5d8:	07 c0       	rjmp	.+14     	; 0x5e8 <processRollControl+0x9c>
	{
		SetBeeperFreq(500);
     5da:	84 ef       	ldi	r24, 0xF4	; 244
     5dc:	91 e0       	ldi	r25, 0x01	; 1
     5de:	8a d8       	rcall	.-3820   	; 0xfffff6f4 <__eeprom_end+0xff7ef6ea>
		StartBeep(50);
     5e0:	82 e3       	ldi	r24, 0x32	; 50
     5e2:	90 e0       	ldi	r25, 0x00	; 0
     5e4:	a8 d8       	rcall	.-3760   	; 0xfffff736 <__eeprom_end+0xff7ef72c>
     5e6:	12 c0       	rjmp	.+36     	; 0x60c <processRollControl+0xc0>
	} 
	else if (beepState & 0x08)	// Reset points
     5e8:	c3 ff       	sbrs	r28, 3
     5ea:	07 c0       	rjmp	.+14     	; 0x5fa <processRollControl+0xae>
	{
		SetBeeperFreq(800);
     5ec:	80 e2       	ldi	r24, 0x20	; 32
     5ee:	93 e0       	ldi	r25, 0x03	; 3
     5f0:	81 d8       	rcall	.-3838   	; 0xfffff6f4 <__eeprom_end+0xff7ef6ea>
		StartBeep(50);
     5f2:	82 e3       	ldi	r24, 0x32	; 50
     5f4:	90 e0       	ldi	r25, 0x00	; 0
     5f6:	9f d8       	rcall	.-3778   	; 0xfffff736 <__eeprom_end+0xff7ef72c>
     5f8:	09 c0       	rjmp	.+18     	; 0x60c <processRollControl+0xc0>
	}							// Other
	else if ( beepState & (0x01 | 0x02 | 0x10 | 0x20 | 0x04) )
     5fa:	8c 2f       	mov	r24, r28
     5fc:	87 73       	andi	r24, 0x37	; 55
     5fe:	31 f0       	breq	.+12     	; 0x60c <processRollControl+0xc0>
	{
		SetBeeperFreq(1000);
     600:	88 ee       	ldi	r24, 0xE8	; 232
     602:	93 e0       	ldi	r25, 0x03	; 3
     604:	77 d8       	rcall	.-3858   	; 0xfffff6f4 <__eeprom_end+0xff7ef6ea>
		StartBeep(50);	
     606:	82 e3       	ldi	r24, 0x32	; 50
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	95 d8       	rcall	.-3798   	; 0xfffff736 <__eeprom_end+0xff7ef72c>
	}			
	
	// Apply mask to next sound events
	beepMask = 0xFF;
	// Disable beep from DIR_CHANGED on next call if direction buttons have been pressed
	if (beepState & 0x03)	
     60c:	c3 70       	andi	r28, 0x03	; 3
     60e:	21 f4       	brne	.+8      	; 0x618 <processRollControl+0xcc>
		SetBeeperFreq(1000);
		StartBeep(50);	
	}			
	
	// Apply mask to next sound events
	beepMask = 0xFF;
     610:	8f ef       	ldi	r24, 0xFF	; 255
     612:	80 93 c2 00 	sts	0x00C2, r24
     616:	03 c0       	rjmp	.+6      	; 0x61e <processRollControl+0xd2>
	// Disable beep from DIR_CHANGED on next call if direction buttons have been pressed
	if (beepState & 0x03)	
		beepMask &= ~0x04;	
     618:	8b ef       	ldi	r24, 0xFB	; 251
     61a:	80 93 c2 00 	sts	0x00C2, r24
		
	
		
	// Indicate direction by LEDs
	clearExtraLeds(LED_ROTFWD | LED_ROTREV);
     61e:	80 e3       	ldi	r24, 0x30	; 48
     620:	df d1       	rcall	.+958    	; 0x9e0 <clearExtraLeds>
	if (rollState & ROLL_FWD)
     622:	80 91 ca 00 	lds	r24, 0x00CA
     626:	80 ff       	sbrs	r24, 0
     628:	03 c0       	rjmp	.+6      	; 0x630 <processRollControl+0xe4>
		setExtraLeds(LED_ROTFWD);
     62a:	80 e1       	ldi	r24, 0x10	; 16
     62c:	d3 d1       	rcall	.+934    	; 0x9d4 <setExtraLeds>
     62e:	04 c0       	rjmp	.+8      	; 0x638 <processRollControl+0xec>
	else if (rollState & ROLL_REV)
     630:	81 ff       	sbrs	r24, 1
     632:	02 c0       	rjmp	.+4      	; 0x638 <processRollControl+0xec>
		setExtraLeds(LED_ROTREV);
     634:	80 e2       	ldi	r24, 0x20	; 32
     636:	ce d1       	rcall	.+924    	; 0x9d4 <setExtraLeds>
		
}
     638:	cf 91       	pop	r28
     63a:	08 95       	ret

0000063c <processHeaterControl>:
{
	static uint8_t heater_ctrl = 0;
	uint16_t set_value_adc;
	
	// Process heater ON/OFF control by button
	if (button_state & BD_HEATCTRL)
     63c:	80 91 be 00 	lds	r24, 0x00BE
     640:	86 ff       	sbrs	r24, 6
     642:	06 c0       	rjmp	.+12     	; 0x650 <processHeaterControl+0x14>
	{
		heater_ctrl ^= 0x01;
     644:	90 91 c3 00 	lds	r25, 0x00C3
     648:	81 e0       	ldi	r24, 0x01	; 1
     64a:	89 27       	eor	r24, r25
     64c:	80 93 c3 00 	sts	0x00C3, r24
	}
	
	
	if (heater_ctrl)
     650:	80 91 c3 00 	lds	r24, 0x00C3
     654:	88 23       	and	r24, r24
     656:	99 f0       	breq	.+38     	; 0x67e <processHeaterControl+0x42>
		// Heater enabled

		//-----------------//
		// Process PID
		
		if (heaterState & READY_TO_UPDATE_HEATER)
     658:	80 91 cb 00 	lds	r24, 0x00CB
     65c:	88 23       	and	r24, r24
     65e:	64 f4       	brge	.+24     	; 0x678 <processHeaterControl+0x3c>
		{
			
			// Convert temperature setup to equal ADC value
			set_value_adc = conv_Celsius_to_ADC(setup_temp_value);
     660:	80 91 dd 00 	lds	r24, 0x00DD
     664:	90 91 de 00 	lds	r25, 0x00DE
     668:	23 de       	rcall	.-954    	; 0x2b0 <conv_Celsius_to_ADC>
			
			// PID !!!
			setHeaterControl(10);	
     66a:	8a e0       	ldi	r24, 0x0A	; 10
     66c:	95 d6       	rcall	.+3370   	; 0x1398 <setHeaterControl>
			
			heaterState &= ~READY_TO_UPDATE_HEATER;
     66e:	80 91 cb 00 	lds	r24, 0x00CB
     672:	8f 77       	andi	r24, 0x7F	; 127
     674:	80 93 cb 00 	sts	0x00CB, r24
		}
		//-----------------//
		
		setExtraLeds(LED_HEATER);
     678:	80 e4       	ldi	r24, 0x40	; 64
     67a:	ac d1       	rcall	.+856    	; 0x9d4 <setExtraLeds>
     67c:	08 95       	ret
	}
	else
	{
		// Heater disabled
		setHeaterControl(0);
     67e:	80 e0       	ldi	r24, 0x00	; 0
     680:	8b d6       	rcall	.+3350   	; 0x1398 <setHeaterControl>
		clearExtraLeds(LED_HEATER);
     682:	80 e4       	ldi	r24, 0x40	; 64
     684:	ad d1       	rcall	.+858    	; 0x9e0 <clearExtraLeds>
     686:	08 95       	ret

00000688 <restoreGlobalParams>:




void restoreGlobalParams(void)
{
     688:	cf 93       	push	r28
     68a:	df 93       	push	r29
     68c:	cd b7       	in	r28, 0x3d	; 61
     68e:	de b7       	in	r29, 0x3e	; 62
     690:	2a 97       	sbiw	r28, 0x0a	; 10
     692:	0f b6       	in	r0, 0x3f	; 63
     694:	f8 94       	cli
     696:	de bf       	out	0x3e, r29	; 62
     698:	0f be       	out	0x3f, r0	; 63
     69a:	cd bf       	out	0x3d, r28	; 61
	 gParams_t gParams;
	 eeprom_read_block(&gParams,&nvParams,sizeof(nvParams));
     69c:	4a e0       	ldi	r20, 0x0A	; 10
     69e:	50 e0       	ldi	r21, 0x00	; 0
     6a0:	60 e0       	ldi	r22, 0x00	; 0
     6a2:	70 e0       	ldi	r23, 0x00	; 0
     6a4:	ce 01       	movw	r24, r28
     6a6:	01 96       	adiw	r24, 0x01	; 1
     6a8:	fa d8       	rcall	.-3596   	; 0xfffff89e <__eeprom_end+0xff7ef894>
	 setup_temp_value = gParams.setup_temp_value;	// reference temperature
     6aa:	89 81       	ldd	r24, Y+1	; 0x01
     6ac:	80 93 dd 00 	sts	0x00DD, r24
     6b0:	10 92 de 00 	sts	0x00DE, r1
	 rollCycleSet = gParams.rollCycleSet;			// number of rolling cycles
     6b4:	8a 81       	ldd	r24, Y+2	; 0x02
     6b6:	80 93 e0 00 	sts	0x00E0, r24
	 sound_enable = gParams.sound_enable;			// Global sound enable
     6ba:	8b 81       	ldd	r24, Y+3	; 0x03
     6bc:	80 93 df 00 	sts	0x00DF, r24
	 power_off_timeout = gParams.power_off_timeout;	// Auto power OFF timeout, minutes
     6c0:	8c 81       	ldd	r24, Y+4	; 0x04
     6c2:	80 93 e3 00 	sts	0x00E3, r24
	 cpoint1 = gParams.cpoint1;						// Calibration point 1
	 cpoint2 = gParams.cpoint2;						// Calibration point 2
	 cpoint1_adc = gParams.cpoint1_adc;
	 cpoint2_adc = gParams.cpoint2_adc;
	 
	 cpoint1 		= 25;
     6c6:	89 e1       	ldi	r24, 0x19	; 25
     6c8:	80 93 dc 00 	sts	0x00DC, r24
	 cpoint1_adc 	= 860;
     6cc:	8c e5       	ldi	r24, 0x5C	; 92
     6ce:	93 e0       	ldi	r25, 0x03	; 3
     6d0:	90 93 e2 00 	sts	0x00E2, r25
     6d4:	80 93 e1 00 	sts	0x00E1, r24
	 cpoint2 		= 145;
     6d8:	81 e9       	ldi	r24, 0x91	; 145
     6da:	80 93 e6 00 	sts	0x00E6, r24
	 cpoint2_adc 	= 591;
     6de:	8f e4       	ldi	r24, 0x4F	; 79
     6e0:	92 e0       	ldi	r25, 0x02	; 2
     6e2:	90 93 e5 00 	sts	0x00E5, r25
     6e6:	80 93 e4 00 	sts	0x00E4, r24
	 
}
     6ea:	2a 96       	adiw	r28, 0x0a	; 10
     6ec:	0f b6       	in	r0, 0x3f	; 63
     6ee:	f8 94       	cli
     6f0:	de bf       	out	0x3e, r29	; 62
     6f2:	0f be       	out	0x3f, r0	; 63
     6f4:	cd bf       	out	0x3d, r28	; 61
     6f6:	df 91       	pop	r29
     6f8:	cf 91       	pop	r28
     6fa:	08 95       	ret

000006fc <exitPowerOff>:




void exitPowerOff(void)
{
     6fc:	08 95       	ret

000006fe <processAutoPowerOff>:
*/
}


void processAutoPowerOff(void)
{
     6fe:	08 95       	ret

00000700 <decode_led_char>:
// Decodes normal string literal to the 
//	7-segment representation
//---------------------------------------------//
static uint8_t decode_led_char(char c)
{
	switch(c)
     700:	48 2f       	mov	r20, r24
     702:	50 e0       	ldi	r21, 0x00	; 0
     704:	fa 01       	movw	r30, r20
     706:	b0 97       	sbiw	r30, 0x20	; 32
     708:	e1 39       	cpi	r30, 0x91	; 145
     70a:	f1 05       	cpc	r31, r1
     70c:	70 f5       	brcc	.+92     	; 0x76a <decode_led_char+0x6a>
     70e:	ed 5e       	subi	r30, 0xED	; 237
     710:	ff 4f       	sbci	r31, 0xFF	; 255
     712:	09 94       	ijmp
	{
		case 'O':
		case '0': return (SEGA | SEGB | SEGC | SEGD | SEGE | SEGF);
     714:	8f e3       	ldi	r24, 0x3F	; 63
     716:	08 95       	ret
		case '1': return (SEGB | SEGC );
		case '2': return (SEGA | SEGB | SEGD | SEGE | SEGG);
     718:	8b e5       	ldi	r24, 0x5B	; 91
     71a:	08 95       	ret
		case '3': return (SEGA | SEGB | SEGC | SEGD | SEGG);
     71c:	8f e4       	ldi	r24, 0x4F	; 79
     71e:	08 95       	ret
		case '4': return (SEGB | SEGC | SEGF | SEGG);
     720:	86 e6       	ldi	r24, 0x66	; 102
     722:	08 95       	ret
		case 'S':
		case '5': return (SEGA | SEGC | SEGD | SEGF | SEGG);
     724:	8d e6       	ldi	r24, 0x6D	; 109
     726:	08 95       	ret
		case '6': return (SEGA | SEGC | SEGD | SEGE | SEGF | SEGG);
     728:	8d e7       	ldi	r24, 0x7D	; 125
     72a:	08 95       	ret
		case '7': return (SEGA | SEGB | SEGC );
     72c:	87 e0       	ldi	r24, 0x07	; 7
     72e:	08 95       	ret
		case '8': return (SEGA | SEGB | SEGC | SEGD | SEGE | SEGF | SEGG);
     730:	8f e7       	ldi	r24, 0x7F	; 127
     732:	08 95       	ret
		case '9': return (SEGA | SEGB | SEGC | SEGD | SEGF | SEGG);
     734:	8f e6       	ldi	r24, 0x6F	; 111
     736:	08 95       	ret
		case '.': return (SEGH);
     738:	80 e8       	ldi	r24, 0x80	; 128
     73a:	08 95       	ret
		case ',': return (SEGH);
     73c:	80 e8       	ldi	r24, 0x80	; 128
     73e:	08 95       	ret
		case '-': return (SEGG);
     740:	80 e4       	ldi	r24, 0x40	; 64
     742:	08 95       	ret
		case '_': return (SEGD);
     744:	88 e0       	ldi	r24, 0x08	; 8
     746:	08 95       	ret
		case ' ': return 0;
     748:	80 e0       	ldi	r24, 0x00	; 0
     74a:	08 95       	ret
		case 0xB0:	return (SEGA | SEGB | SEGF | SEGG);		// Degree sin
     74c:	83 e6       	ldi	r24, 0x63	; 99
     74e:	08 95       	ret
		case 'C':	return (SEGA | SEGD | SEGE | SEGF);
     750:	89 e3       	ldi	r24, 0x39	; 57
     752:	08 95       	ret
		case 'F':	return (SEGA | SEGE | SEGF | SEGG);
     754:	81 e7       	ldi	r24, 0x71	; 113
     756:	08 95       	ret
		case 'N':	return (SEGC | SEGE | SEGG);
     758:	84 e5       	ldi	r24, 0x54	; 84
     75a:	08 95       	ret
		case 'D': return (SEGB | SEGC | SEGD | SEGE | SEGG);
     75c:	8e e5       	ldi	r24, 0x5E	; 94
     75e:	08 95       	ret
		case 'P': return (SEGA | SEGB | SEGE | SEGF | SEGG);
     760:	83 e7       	ldi	r24, 0x73	; 115
     762:	08 95       	ret
		case 'E': return (SEGA | SEGD | SEGE | SEGF | SEGG);
     764:	89 e7       	ldi	r24, 0x79	; 121
     766:	08 95       	ret
{
	switch(c)
	{
		case 'O':
		case '0': return (SEGA | SEGB | SEGC | SEGD | SEGE | SEGF);
		case '1': return (SEGB | SEGC );
     768:	86 e0       	ldi	r24, 0x06	; 6
		case 'D': return (SEGB | SEGC | SEGD | SEGE | SEGG);
		case 'P': return (SEGA | SEGB | SEGE | SEGF | SEGG);
		case 'E': return (SEGA | SEGD | SEGE | SEGF | SEGG);
		default:  return c;	
	}
}
     76a:	08 95       	ret

0000076c <wrap_led_buffer_index>:
//---------------------------------------------//
// Ensures that index is inside the buffer
// -128 <= index <= 127
//---------------------------------------------//
static uint8_t wrap_led_buffer_index(int8_t buf_index)
{
     76c:	98 2f       	mov	r25, r24
	uint8_t new_index_u;
	new_index_u = (uint8_t) ((buf_index < 0) ? -buf_index : buf_index);
     76e:	87 fd       	sbrc	r24, 7
     770:	81 95       	neg	r24
	if (new_index_u >= LED_BUFFER_LENGTH)
     772:	8e 30       	cpi	r24, 0x0E	; 14
     774:	78 f0       	brcs	.+30     	; 0x794 <wrap_led_buffer_index+0x28>
		new_index_u = new_index_u % LED_BUFFER_LENGTH;
     776:	38 2f       	mov	r19, r24
     778:	36 95       	lsr	r19
     77a:	23 e9       	ldi	r18, 0x93	; 147
     77c:	32 9f       	mul	r19, r18
     77e:	21 2d       	mov	r18, r1
     780:	11 24       	eor	r1, r1
     782:	26 95       	lsr	r18
     784:	26 95       	lsr	r18
     786:	22 0f       	add	r18, r18
     788:	32 2f       	mov	r19, r18
     78a:	33 0f       	add	r19, r19
     78c:	33 0f       	add	r19, r19
     78e:	33 0f       	add	r19, r19
     790:	32 1b       	sub	r19, r18
     792:	83 1b       	sub	r24, r19
	new_index_u = ((buf_index >= 0) || (new_index_u == 0)) ? new_index_u :  LED_BUFFER_LENGTH - new_index_u ;
     794:	99 23       	and	r25, r25
     796:	2c f4       	brge	.+10     	; 0x7a2 <wrap_led_buffer_index+0x36>
     798:	88 23       	and	r24, r24
     79a:	19 f0       	breq	.+6      	; 0x7a2 <wrap_led_buffer_index+0x36>
     79c:	9e e0       	ldi	r25, 0x0E	; 14
     79e:	98 1b       	sub	r25, r24
     7a0:	89 2f       	mov	r24, r25
	return new_index_u;
}
     7a2:	08 95       	ret

000007a4 <processLedIndicator>:
// Call this function N times per sec to get N/NUM_DIGITS_TOTAL display update rate, where
// NUM_DIGITS_TOTAL is number_of_digits_of_LED_display if no extra LEDs are used or
// (number_of_digits_of_LED_display + 1) otherwise.
//---------------------------------------------//
void processLedIndicator()
{
     7a4:	cf 93       	push	r28
	disable_led_segments();
	#endif
	
	
	// Perform regular shift
	led_clock_pulse(!LED_DIGIT_ACT_LVL);
     7a6:	81 e0       	ldi	r24, 0x01	; 1
     7a8:	22 d1       	rcall	.+580    	; 0x9ee <led_clock_pulse>
	
	switch (wActivePos)
     7aa:	80 91 c5 00 	lds	r24, 0x00C5
     7ae:	88 23       	and	r24, r24
     7b0:	19 f0       	breq	.+6      	; 0x7b8 <processLedIndicator+0x14>
     7b2:	86 30       	cpi	r24, 0x06	; 6
     7b4:	f1 f5       	brne	.+124    	; 0x832 <processLedIndicator+0x8e>
     7b6:	12 c0       	rjmp	.+36     	; 0x7dc <processLedIndicator+0x38>
	{
	case 0:
		// Get buttons
		#ifndef CLEAN_OPERATION
		disable_led_segments();
     7b8:	46 d1       	rcall	.+652    	; 0xa46 <disable_led_segments>
		#endif
		enable_led_segments_pullups();
     7ba:	37 d1       	rcall	.+622    	; 0xa2a <enable_led_segments_pullups>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7bc:	85 e3       	ldi	r24, 0x35	; 53
     7be:	8a 95       	dec	r24
     7c0:	f1 f7       	brne	.-4      	; 0x7be <processLedIndicator+0x1a>
     7c2:	00 00       	nop
		_delay_us(PULLUP_DELAY_US);
		capture_button_state();
     7c4:	47 d1       	rcall	.+654    	; 0xa54 <capture_button_state>
		#ifndef CLEAN_OPERATION
		enable_led_segments();
     7c6:	38 d1       	rcall	.+624    	; 0xa38 <enable_led_segments>
		#endif
		// Start new cycle with active digit level
		led_clock_pulse(LED_DIGIT_ACT_LVL);
     7c8:	80 e0       	ldi	r24, 0x00	; 0
     7ca:	11 d1       	rcall	.+546    	; 0x9ee <led_clock_pulse>
		// Always start new cycle from specified buffer start position
		bufActivePos = wStartPos;
     7cc:	80 91 e8 00 	lds	r24, 0x00E8
     7d0:	80 93 c4 00 	sts	0x00C4, r24
		next_wActivePos = wActivePos + 1;
     7d4:	c0 91 c5 00 	lds	r28, 0x00C5
     7d8:	cf 5f       	subi	r28, 0xFF	; 255
		break;
     7da:	2f c0       	rjmp	.+94     	; 0x83a <processLedIndicator+0x96>
//---------------------------------------------//
// Performs window shifting
//---------------------------------------------//
static void processWindowShifter(void)
{
	if (shifterState == LED_SHIFT_DONE)
     7dc:	80 91 e9 00 	lds	r24, 0x00E9
     7e0:	88 23       	and	r24, r24
     7e2:	81 f1       	breq	.+96     	; 0x844 <processLedIndicator+0xa0>
		return;
	
	// Process shift timer
	processSoftTimer8b(&shiftTimer);	
     7e4:	86 ec       	ldi	r24, 0xC6	; 198
     7e6:	90 e0       	ldi	r25, 0x00	; 0
     7e8:	57 d7       	rcall	.+3758   	; 0x1698 <processSoftTimer8b>
	
	if (shiftTimer.FTop)
     7ea:	80 91 c6 00 	lds	r24, 0x00C6
     7ee:	85 ff       	sbrs	r24, 5
     7f0:	23 c0       	rjmp	.+70     	; 0x838 <processLedIndicator+0x94>
	{
		// Check if finished
		if (wStartPos == bufStartPos)	
     7f2:	80 91 e8 00 	lds	r24, 0x00E8
     7f6:	90 91 ea 00 	lds	r25, 0x00EA
     7fa:	89 13       	cpse	r24, r25
     7fc:	04 c0       	rjmp	.+8      	; 0x806 <processLedIndicator+0x62>
		{
			// Update state
			shifterState = LED_SHIFT_DONE;
     7fe:	10 92 e9 00 	sts	0x00E9, r1
		// Always start new cycle from specified buffer start position
		bufActivePos = wStartPos;
		next_wActivePos = wActivePos + 1;
		break;
	case NUM_DIGITS_TOTAL-1:
		next_wActivePos = 0;
     802:	c0 e0       	ldi	r28, 0x00	; 0
     804:	1a c0       	rjmp	.+52     	; 0x83a <processLedIndicator+0x96>
		if (wStartPos == bufStartPos)	
		{
			// Update state
			shifterState = LED_SHIFT_DONE;
		}
		else if (shifterState == LED_SHIFT_RIGHT)
     806:	90 91 e9 00 	lds	r25, 0x00E9
     80a:	92 30       	cpi	r25, 0x02	; 2
     80c:	49 f4       	brne	.+18     	; 0x820 <processLedIndicator+0x7c>
// Increments index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t inc_buffer_position(uint8_t position)
{
	return (position >= LED_BUFFER_LENGTH - 1) ? 0 : position + 1;
     80e:	8d 30       	cpi	r24, 0x0D	; 13
     810:	10 f4       	brcc	.+4      	; 0x816 <processLedIndicator+0x72>
     812:	8f 5f       	subi	r24, 0xFF	; 255
     814:	01 c0       	rjmp	.+2      	; 0x818 <processLedIndicator+0x74>
     816:	80 e0       	ldi	r24, 0x00	; 0
			// Update state
			shifterState = LED_SHIFT_DONE;
		}
		else if (shifterState == LED_SHIFT_RIGHT)
		{
			wStartPos = inc_buffer_position(wStartPos);	
     818:	80 93 e8 00 	sts	0x00E8, r24
		// Always start new cycle from specified buffer start position
		bufActivePos = wStartPos;
		next_wActivePos = wActivePos + 1;
		break;
	case NUM_DIGITS_TOTAL-1:
		next_wActivePos = 0;
     81c:	c0 e0       	ldi	r28, 0x00	; 0
     81e:	0d c0       	rjmp	.+26     	; 0x83a <processLedIndicator+0x96>
// Decrements index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t dec_buffer_position(uint8_t position)
{
	return (position == 0) ? LED_BUFFER_LENGTH - 1 : position - 1;
     820:	88 23       	and	r24, r24
     822:	11 f0       	breq	.+4      	; 0x828 <processLedIndicator+0x84>
     824:	81 50       	subi	r24, 0x01	; 1
     826:	01 c0       	rjmp	.+2      	; 0x82a <processLedIndicator+0x86>
     828:	8d e0       	ldi	r24, 0x0D	; 13
		{
			wStartPos = inc_buffer_position(wStartPos);	
		}
		else
		{
			wStartPos = dec_buffer_position(wStartPos);		
     82a:	80 93 e8 00 	sts	0x00E8, r24
		// Always start new cycle from specified buffer start position
		bufActivePos = wStartPos;
		next_wActivePos = wActivePos + 1;
		break;
	case NUM_DIGITS_TOTAL-1:
		next_wActivePos = 0;
     82e:	c0 e0       	ldi	r28, 0x00	; 0
     830:	04 c0       	rjmp	.+8      	; 0x83a <processLedIndicator+0x96>
		// Shift LED window
		processWindowShifter();	
		break;
	default:
		next_wActivePos = wActivePos + 1;
     832:	c8 2f       	mov	r28, r24
     834:	cf 5f       	subi	r28, 0xFF	; 255
		break;
     836:	01 c0       	rjmp	.+2      	; 0x83a <processLedIndicator+0x96>
		// Always start new cycle from specified buffer start position
		bufActivePos = wStartPos;
		next_wActivePos = wActivePos + 1;
		break;
	case NUM_DIGITS_TOTAL-1:
		next_wActivePos = 0;
     838:	c0 e0       	ldi	r28, 0x00	; 0
		next_wActivePos = wActivePos + 1;
		break;
	}		
	
	#ifdef 	USE_EXTRA_LED_DIGIT
	if (wActivePos == EXTRA_DIGIT_NUM)
     83a:	80 91 c5 00 	lds	r24, 0x00C5
     83e:	86 30       	cpi	r24, 0x06	; 6
     840:	31 f4       	brne	.+12     	; 0x84e <processLedIndicator+0xaa>
     842:	01 c0       	rjmp	.+2      	; 0x846 <processLedIndicator+0xa2>
		// Always start new cycle from specified buffer start position
		bufActivePos = wStartPos;
		next_wActivePos = wActivePos + 1;
		break;
	case NUM_DIGITS_TOTAL-1:
		next_wActivePos = 0;
     844:	c0 e0       	ldi	r28, 0x00	; 0
	
	#ifdef 	USE_EXTRA_LED_DIGIT
	if (wActivePos == EXTRA_DIGIT_NUM)
	{
		// Output separate LEDs state
		set_led_segments(extra_led_state);
     846:	80 91 e7 00 	lds	r24, 0x00E7
     84a:	e1 d0       	rcall	.+450    	; 0xa0e <set_led_segments>
     84c:	10 c0       	rjmp	.+32     	; 0x86e <processLedIndicator+0xca>
	}
	else
	#endif
	{
		// Output new segment data
		set_led_segments(led_data_buffer[bufActivePos]);
     84e:	e0 91 c4 00 	lds	r30, 0x00C4
     852:	f0 e0       	ldi	r31, 0x00	; 0
     854:	e5 51       	subi	r30, 0x15	; 21
     856:	ff 4f       	sbci	r31, 0xFF	; 255
     858:	80 81       	ld	r24, Z
     85a:	d9 d0       	rcall	.+434    	; 0xa0e <set_led_segments>
		// Wrap around buffer length
		bufActivePos = inc_buffer_position(bufActivePos );
     85c:	90 91 c4 00 	lds	r25, 0x00C4
// Increments index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t inc_buffer_position(uint8_t position)
{
	return (position >= LED_BUFFER_LENGTH - 1) ? 0 : position + 1;
     860:	9d 30       	cpi	r25, 0x0D	; 13
     862:	10 f4       	brcc	.+4      	; 0x868 <processLedIndicator+0xc4>
     864:	9f 5f       	subi	r25, 0xFF	; 255
     866:	01 c0       	rjmp	.+2      	; 0x86a <processLedIndicator+0xc6>
     868:	90 e0       	ldi	r25, 0x00	; 0
	#endif
	{
		// Output new segment data
		set_led_segments(led_data_buffer[bufActivePos]);
		// Wrap around buffer length
		bufActivePos = inc_buffer_position(bufActivePos );
     86a:	90 93 c4 00 	sts	0x00C4, r25
	}
		
	wActivePos = next_wActivePos;
     86e:	c0 93 c5 00 	sts	0x00C5, r28
	
	#ifdef CLEAN_OPERATION
	enable_led_segments();
	#endif

}
     872:	cf 91       	pop	r28
     874:	08 95       	ret

00000876 <fillLedBuffer>:
//---------------------------------------------//
// Fills buffer from (bufStartPos + offset) 
//	position with single char
//---------------------------------------------//
void fillLedBuffer(int8_t offset, uint8_t length, char c)
{
     876:	1f 93       	push	r17
     878:	cf 93       	push	r28
     87a:	df 93       	push	r29
     87c:	18 2f       	mov	r17, r24
     87e:	c6 2f       	mov	r28, r22
     880:	84 2f       	mov	r24, r20
	uint8_t val = decode_led_char(c);
     882:	3e df       	rcall	.-388    	; 0x700 <decode_led_char>
     884:	d8 2f       	mov	r29, r24
	// Ensure index is inside the buffer
	uint8_t position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
     886:	80 91 ea 00 	lds	r24, 0x00EA
     88a:	81 0f       	add	r24, r17
     88c:	6f df       	rcall	.-290    	; 0x76c <wrap_led_buffer_index>
// Increments index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t inc_buffer_position(uint8_t position)
{
	return (position >= LED_BUFFER_LENGTH - 1) ? 0 : position + 1;
     88e:	90 e0       	ldi	r25, 0x00	; 0
void fillLedBuffer(int8_t offset, uint8_t length, char c)
{
	uint8_t val = decode_led_char(c);
	// Ensure index is inside the buffer
	uint8_t position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
	while(length--)
     890:	0a c0       	rjmp	.+20     	; 0x8a6 <fillLedBuffer+0x30>
	{
		led_data_buffer[position] = val;
     892:	e8 2f       	mov	r30, r24
     894:	f0 e0       	ldi	r31, 0x00	; 0
     896:	e5 51       	subi	r30, 0x15	; 21
     898:	ff 4f       	sbci	r31, 0xFF	; 255
     89a:	d0 83       	st	Z, r29
// Increments index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t inc_buffer_position(uint8_t position)
{
	return (position >= LED_BUFFER_LENGTH - 1) ? 0 : position + 1;
     89c:	8d 30       	cpi	r24, 0x0D	; 13
     89e:	10 f4       	brcc	.+4      	; 0x8a4 <fillLedBuffer+0x2e>
     8a0:	8f 5f       	subi	r24, 0xFF	; 255
     8a2:	01 c0       	rjmp	.+2      	; 0x8a6 <fillLedBuffer+0x30>
     8a4:	89 2f       	mov	r24, r25
void fillLedBuffer(int8_t offset, uint8_t length, char c)
{
	uint8_t val = decode_led_char(c);
	// Ensure index is inside the buffer
	uint8_t position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
	while(length--)
     8a6:	c1 50       	subi	r28, 0x01	; 1
     8a8:	a0 f7       	brcc	.-24     	; 0x892 <fillLedBuffer+0x1c>
	{
		led_data_buffer[position] = val;
		position = inc_buffer_position(position);
	}
}
     8aa:	df 91       	pop	r29
     8ac:	cf 91       	pop	r28
     8ae:	1f 91       	pop	r17
     8b0:	08 95       	ret

000008b2 <startShiftingWindowLeft>:
//	LED window left 
//---------------------------------------------//
void startShiftingWindowLeft(void)
{
	// Clear spaces between menu states
	fillLedBuffer(-2,2,' ');
     8b2:	40 e2       	ldi	r20, 0x20	; 32
     8b4:	62 e0       	ldi	r22, 0x02	; 2
     8b6:	8e ef       	ldi	r24, 0xFE	; 254
     8b8:	de df       	rcall	.-68     	; 0x876 <fillLedBuffer>
	// Set new buffer position for writing
	bufStartPos = wrap_led_buffer_index( (int8_t)bufStartPos - (NUM_DIGITS + 2) );
     8ba:	80 91 ea 00 	lds	r24, 0x00EA
     8be:	88 50       	subi	r24, 0x08	; 8
     8c0:	55 df       	rcall	.-342    	; 0x76c <wrap_led_buffer_index>
     8c2:	80 93 ea 00 	sts	0x00EA, r24
	// Set shifter state
	shifterState = LED_SHIFT_LEFT;
     8c6:	81 e0       	ldi	r24, 0x01	; 1
     8c8:	80 93 e9 00 	sts	0x00E9, r24
     8cc:	08 95       	ret

000008ce <startShiftingWindowRight>:
//	LED window right 
//---------------------------------------------//
void startShiftingWindowRight(void)
{
	// Clear spaces between menu states
	fillLedBuffer(NUM_DIGITS,2,' ');
     8ce:	40 e2       	ldi	r20, 0x20	; 32
     8d0:	62 e0       	ldi	r22, 0x02	; 2
     8d2:	86 e0       	ldi	r24, 0x06	; 6
     8d4:	d0 df       	rcall	.-96     	; 0x876 <fillLedBuffer>
	// Set new buffer position for writing
	bufStartPos = wrap_led_buffer_index( (int8_t)bufStartPos + NUM_DIGITS + 2 );
     8d6:	80 91 ea 00 	lds	r24, 0x00EA
     8da:	88 5f       	subi	r24, 0xF8	; 248
     8dc:	47 df       	rcall	.-370    	; 0x76c <wrap_led_buffer_index>
     8de:	80 93 ea 00 	sts	0x00EA, r24
	// Set shifter state
	shifterState = LED_SHIFT_RIGHT;
     8e2:	82 e0       	ldi	r24, 0x02	; 2
     8e4:	80 93 e9 00 	sts	0x00E9, r24
     8e8:	08 95       	ret

000008ea <initLedIndicator>:
//---------------------------------------------//
//	Initialization
//	Call this function at start of your program
//---------------------------------------------//
void initLedIndicator()
{
     8ea:	cf 93       	push	r28
	uint8_t i;
	// First disable outputs
	disable_led_segments();
     8ec:	ac d0       	rcall	.+344    	; 0xa46 <disable_led_segments>
     8ee:	c7 e0       	ldi	r28, 0x07	; 7
	// Fill shift register with non-active levels
	for (i=0;i<NUM_DIGITS_TOTAL;i++)
	{
		led_clock_pulse(!LED_DIGIT_ACT_LVL);
     8f0:	81 e0       	ldi	r24, 0x01	; 1
     8f2:	7d d0       	rcall	.+250    	; 0x9ee <led_clock_pulse>
     8f4:	c1 50       	subi	r28, 0x01	; 1
{
	uint8_t i;
	// First disable outputs
	disable_led_segments();
	// Fill shift register with non-active levels
	for (i=0;i<NUM_DIGITS_TOTAL;i++)
     8f6:	e1 f7       	brne	.-8      	; 0x8f0 <initLedIndicator+0x6>
	{
		led_clock_pulse(!LED_DIGIT_ACT_LVL);
	}
	// Now enable outputs
	enable_led_segments();
     8f8:	9f d0       	rcall	.+318    	; 0xa38 <enable_led_segments>
	
	// Reset pointers
	wStartPos = 0;
     8fa:	10 92 e8 00 	sts	0x00E8, r1
	bufStartPos = 0;
     8fe:	10 92 ea 00 	sts	0x00EA, r1
	bufActivePos = 0;
     902:	10 92 c4 00 	sts	0x00C4, r1
	wActivePos = 0;
     906:	10 92 c5 00 	sts	0x00C5, r1
	#ifdef 	USE_EXTRA_LED_DIGIT
	extra_led_state = 0;
     90a:	10 92 e7 00 	sts	0x00E7, r1
	#endif
	
	// Clear the buffer 
	fillLedBuffer(0,LED_BUFFER_LENGTH,' ');
     90e:	40 e2       	ldi	r20, 0x20	; 32
     910:	6e e0       	ldi	r22, 0x0E	; 14
     912:	80 e0       	ldi	r24, 0x00	; 0
     914:	b0 df       	rcall	.-160    	; 0x876 <fillLedBuffer>
	
	// Initialize shift timer - always enabled, but 
	//	processed only when shifting is active
	shifterState = LED_SHIFT_DONE;
     916:	10 92 e9 00 	sts	0x00E9, r1
	shiftTimer.Enabled = 1;
     91a:	e6 ec       	ldi	r30, 0xC6	; 198
     91c:	f0 e0       	ldi	r31, 0x00	; 0
     91e:	80 81       	ld	r24, Z
	shiftTimer.RunOnce = 0;
     920:	81 60       	ori	r24, 0x01	; 1
     922:	8d 7f       	andi	r24, 0xFD	; 253
     924:	80 83       	st	Z, r24
	shiftTimer.Top = LED_SHIFT_INTERVAL-1;
     926:	89 e0       	ldi	r24, 0x09	; 9
     928:	80 93 c8 00 	sts	0x00C8, r24
}
     92c:	cf 91       	pop	r28
     92e:	08 95       	ret

00000930 <printLedBuffer>:
//		str - null-terminated char string
// Comma and dot (".", ",") get special processing - first occurrence is added to
// a preceding char, next are displayed as a single digit
//---------------------------------------------//
void printLedBuffer(int8_t offset, char* str)
{
     930:	df 92       	push	r13
     932:	ef 92       	push	r14
     934:	ff 92       	push	r15
     936:	0f 93       	push	r16
     938:	1f 93       	push	r17
     93a:	cf 93       	push	r28
     93c:	df 93       	push	r29
     93e:	eb 01       	movw	r28, r22
	char c;
	uint8_t decoded_sym;
	uint8_t state = 0x02;
	uint8_t comma_pos;
	// Ensure index is inside the buffer
	uint8_t buffer_position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
     940:	90 91 ea 00 	lds	r25, 0x00EA
     944:	89 0f       	add	r24, r25
     946:	12 df       	rcall	.-476    	; 0x76c <wrap_led_buffer_index>
     948:	18 2f       	mov	r17, r24
	comma_pos = buffer_position;
     94a:	d8 2e       	mov	r13, r24
//---------------------------------------------//
void printLedBuffer(int8_t offset, char* str)
{
	char c;
	uint8_t decoded_sym;
	uint8_t state = 0x02;
     94c:	02 e0       	ldi	r16, 0x02	; 2
		comma_pos = buffer_position;
		if (state != 0x01)
		{
			buffer_position = inc_buffer_position(buffer_position);
		}
		state = (state & 0x01) ? 0x03 : 0x00;		
     94e:	f1 2c       	mov	r15, r1
     950:	0f 2e       	mov	r0, r31
     952:	f3 e0       	ldi	r31, 0x03	; 3
     954:	ef 2e       	mov	r14, r31
     956:	f0 2d       	mov	r31, r0
	uint8_t comma_pos;
	// Ensure index is inside the buffer
	uint8_t buffer_position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
	comma_pos = buffer_position;
	// Output chars
	while((c = *str++))
     958:	26 c0       	rjmp	.+76     	; 0x9a6 <printLedBuffer+0x76>
	{
		decoded_sym = decode_led_char(c);
     95a:	d2 de       	rcall	.-604    	; 0x700 <decode_led_char>
		state = (decoded_sym == SEGH) ? (state | 0x01) : (state & ~0x01);
     95c:	80 38       	cpi	r24, 0x80	; 128
     95e:	19 f4       	brne	.+6      	; 0x966 <printLedBuffer+0x36>
     960:	90 2f       	mov	r25, r16
     962:	91 60       	ori	r25, 0x01	; 1
     964:	02 c0       	rjmp	.+4      	; 0x96a <printLedBuffer+0x3a>
     966:	90 2f       	mov	r25, r16
     968:	9e 7f       	andi	r25, 0xFE	; 254
		if (state == 0x01)			
     96a:	91 30       	cpi	r25, 0x01	; 1
     96c:	51 f4       	brne	.+20     	; 0x982 <printLedBuffer+0x52>
		{
			led_data_buffer[comma_pos] |= decoded_sym;
     96e:	ed 2d       	mov	r30, r13
     970:	f0 e0       	ldi	r31, 0x00	; 0
     972:	e5 51       	subi	r30, 0x15	; 21
     974:	ff 4f       	sbci	r31, 0xFF	; 255
     976:	90 81       	ld	r25, Z
     978:	89 2b       	or	r24, r25
     97a:	80 83       	st	Z, r24
     97c:	81 2f       	mov	r24, r17
		comma_pos = buffer_position;
		if (state != 0x01)
		{
			buffer_position = inc_buffer_position(buffer_position);
		}
		state = (state & 0x01) ? 0x03 : 0x00;		
     97e:	0e 2d       	mov	r16, r14
     980:	10 c0       	rjmp	.+32     	; 0x9a2 <printLedBuffer+0x72>
		{
			led_data_buffer[comma_pos] |= decoded_sym;
		}
		else
		{
			led_data_buffer[buffer_position] = decoded_sym;	
     982:	e1 2f       	mov	r30, r17
     984:	f0 e0       	ldi	r31, 0x00	; 0
     986:	e5 51       	subi	r30, 0x15	; 21
     988:	ff 4f       	sbci	r31, 0xFF	; 255
     98a:	80 83       	st	Z, r24
// Increments index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t inc_buffer_position(uint8_t position)
{
	return (position >= LED_BUFFER_LENGTH - 1) ? 0 : position + 1;
     98c:	1d 30       	cpi	r17, 0x0D	; 13
     98e:	18 f4       	brcc	.+6      	; 0x996 <printLedBuffer+0x66>
     990:	81 2f       	mov	r24, r17
     992:	8f 5f       	subi	r24, 0xFF	; 255
     994:	01 c0       	rjmp	.+2      	; 0x998 <printLedBuffer+0x68>
     996:	8f 2d       	mov	r24, r15
		comma_pos = buffer_position;
		if (state != 0x01)
		{
			buffer_position = inc_buffer_position(buffer_position);
		}
		state = (state & 0x01) ? 0x03 : 0x00;		
     998:	90 ff       	sbrs	r25, 0
     99a:	02 c0       	rjmp	.+4      	; 0x9a0 <printLedBuffer+0x70>
     99c:	0e 2d       	mov	r16, r14
     99e:	01 c0       	rjmp	.+2      	; 0x9a2 <printLedBuffer+0x72>
     9a0:	0f 2d       	mov	r16, r15
     9a2:	d1 2e       	mov	r13, r17
     9a4:	18 2f       	mov	r17, r24
	uint8_t comma_pos;
	// Ensure index is inside the buffer
	uint8_t buffer_position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
	comma_pos = buffer_position;
	// Output chars
	while((c = *str++))
     9a6:	89 91       	ld	r24, Y+
     9a8:	81 11       	cpse	r24, r1
     9aa:	d7 cf       	rjmp	.-82     	; 0x95a <printLedBuffer+0x2a>
		{
			buffer_position = inc_buffer_position(buffer_position);
		}
		state = (state & 0x01) ? 0x03 : 0x00;		
	}
}
     9ac:	df 91       	pop	r29
     9ae:	cf 91       	pop	r28
     9b0:	1f 91       	pop	r17
     9b2:	0f 91       	pop	r16
     9b4:	ff 90       	pop	r15
     9b6:	ef 90       	pop	r14
     9b8:	df 90       	pop	r13
     9ba:	08 95       	ret

000009bc <setComma>:
//	buffer cell
//---------------------------------------------//
void setComma(int8_t offset)
{
	// Ensure index is inside the buffer
	uint8_t position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
     9bc:	90 91 ea 00 	lds	r25, 0x00EA
     9c0:	89 0f       	add	r24, r25
     9c2:	d4 de       	rcall	.-600    	; 0x76c <wrap_led_buffer_index>
	led_data_buffer[position] |= (SEGH);
     9c4:	e8 2f       	mov	r30, r24
     9c6:	f0 e0       	ldi	r31, 0x00	; 0
     9c8:	e5 51       	subi	r30, 0x15	; 21
     9ca:	ff 4f       	sbci	r31, 0xFF	; 255
     9cc:	80 81       	ld	r24, Z
     9ce:	80 68       	ori	r24, 0x80	; 128
     9d0:	80 83       	st	Z, r24
     9d2:	08 95       	ret

000009d4 <setExtraLeds>:
// Argument is ORed with current LED state
//---------------------------------------------//
inline void setExtraLeds(uint8_t leds_set_value)
{
		//asm("cli");
		extra_led_state |= leds_set_value;
     9d4:	90 91 e7 00 	lds	r25, 0x00E7
     9d8:	89 2b       	or	r24, r25
     9da:	80 93 e7 00 	sts	0x00E7, r24
     9de:	08 95       	ret

000009e0 <clearExtraLeds>:
// Argument is AND NOTed with current LED state
//---------------------------------------------//
inline void clearExtraLeds(uint8_t leds_clear_value)
{
		//asm("cli");
		extra_led_state &= ~leds_clear_value;
     9e0:	90 91 e7 00 	lds	r25, 0x00E7
     9e4:	80 95       	com	r24
     9e6:	98 23       	and	r25, r24
     9e8:	90 93 e7 00 	sts	0x00E7, r25
     9ec:	08 95       	ret

000009ee <led_clock_pulse>:


// Clocks in bit into the shift register
void led_clock_pulse(uint8_t bit)
{
	if (bit)
     9ee:	88 23       	and	r24, r24
     9f0:	11 f0       	breq	.+4      	; 0x9f6 <led_clock_pulse+0x8>
		PORTB |= (1<<PB_LED_DOUT);
     9f2:	c0 9a       	sbi	0x18, 0	; 24
     9f4:	01 c0       	rjmp	.+2      	; 0x9f8 <led_clock_pulse+0xa>
	else
		PORTB &= ~(1<<PB_LED_DOUT);
     9f6:	c0 98       	cbi	0x18, 0	; 24
     9f8:	8a e1       	ldi	r24, 0x1A	; 26
     9fa:	8a 95       	dec	r24
     9fc:	f1 f7       	brne	.-4      	; 0x9fa <led_clock_pulse+0xc>
     9fe:	00 c0       	rjmp	.+0      	; 0xa00 <led_clock_pulse+0x12>
	_delay_us(SETUP_DELAY_US);
	PORTB |= (1<<PB_LED_CLK);
     a00:	c2 9a       	sbi	0x18, 2	; 24
     a02:	8a e1       	ldi	r24, 0x1A	; 26
     a04:	8a 95       	dec	r24
     a06:	f1 f7       	brne	.-4      	; 0xa04 <led_clock_pulse+0x16>
     a08:	00 c0       	rjmp	.+0      	; 0xa0a <led_clock_pulse+0x1c>
	_delay_us(SHIFT_DELAY_US);
	PORTB &= ~(1<<PB_LED_CLK);
     a0a:	c2 98       	cbi	0x18, 2	; 24
     a0c:	08 95       	ret

00000a0e <set_led_segments>:
// Outputs decoded segment data to port bits
void set_led_segments(uint8_t seg_ch)
{
	uint8_t pdat;
	seg_ch ^= LED_SEGMENT_MASK;
	pdat = PORTC & ~( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
     a0e:	95 b3       	in	r25, 0x15	; 21
	pdat |= (seg_ch & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
     a10:	28 2f       	mov	r18, r24
     a12:	2f 71       	andi	r18, 0x1F	; 31
// Outputs decoded segment data to port bits
void set_led_segments(uint8_t seg_ch)
{
	uint8_t pdat;
	seg_ch ^= LED_SEGMENT_MASK;
	pdat = PORTC & ~( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
     a14:	90 7e       	andi	r25, 0xE0	; 224
	pdat |= (seg_ch & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
     a16:	92 2b       	or	r25, r18
	PORTC = pdat;
     a18:	95 bb       	out	0x15, r25	; 21
	seg_ch >>= 2;
	pdat = PORTB & ~( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     a1a:	98 b3       	in	r25, 0x18	; 24
	uint8_t pdat;
	seg_ch ^= LED_SEGMENT_MASK;
	pdat = PORTC & ~( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
	pdat |= (seg_ch & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
	PORTC = pdat;
	seg_ch >>= 2;
     a1c:	86 95       	lsr	r24
     a1e:	86 95       	lsr	r24
	pdat = PORTB & ~( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
	pdat |= (seg_ch & ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) ));
     a20:	88 73       	andi	r24, 0x38	; 56
	seg_ch ^= LED_SEGMENT_MASK;
	pdat = PORTC & ~( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
	pdat |= (seg_ch & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
	PORTC = pdat;
	seg_ch >>= 2;
	pdat = PORTB & ~( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     a22:	97 7c       	andi	r25, 0xC7	; 199
	pdat |= (seg_ch & ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) ));
     a24:	89 2b       	or	r24, r25
	PORTB = pdat;
     a26:	88 bb       	out	0x18, r24	; 24
     a28:	08 95       	ret

00000a2a <enable_led_segments_pullups>:

// Turns segment port bits to HI-Z and
// enables pull-ups
void enable_led_segments_pullups()
{
	PORTC |= ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
     a2a:	85 b3       	in	r24, 0x15	; 21
     a2c:	8f 61       	ori	r24, 0x1F	; 31
     a2e:	85 bb       	out	0x15, r24	; 21
	PORTB |= ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     a30:	88 b3       	in	r24, 0x18	; 24
     a32:	88 63       	ori	r24, 0x38	; 56
     a34:	88 bb       	out	0x18, r24	; 24
     a36:	08 95       	ret

00000a38 <enable_led_segments>:
}	

void enable_led_segments()
{
	DDRC |= ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
     a38:	84 b3       	in	r24, 0x14	; 20
     a3a:	8f 61       	ori	r24, 0x1F	; 31
     a3c:	84 bb       	out	0x14, r24	; 20
	DDRB |= ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     a3e:	87 b3       	in	r24, 0x17	; 23
     a40:	88 63       	ori	r24, 0x38	; 56
     a42:	87 bb       	out	0x17, r24	; 23
     a44:	08 95       	ret

00000a46 <disable_led_segments>:
}

void disable_led_segments()
{
	DDRC &= ~( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
     a46:	84 b3       	in	r24, 0x14	; 20
     a48:	80 7e       	andi	r24, 0xE0	; 224
     a4a:	84 bb       	out	0x14, r24	; 20
	DDRB &= ~( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     a4c:	87 b3       	in	r24, 0x17	; 23
     a4e:	87 7c       	andi	r24, 0xC7	; 199
     a50:	87 bb       	out	0x17, r24	; 23
     a52:	08 95       	ret

00000a54 <capture_button_state>:


void capture_button_state()
{
	uint8_t pdat;
	pdat = PINB  & ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     a54:	86 b3       	in	r24, 0x16	; 22
     a56:	88 73       	andi	r24, 0x38	; 56
	pdat <<= 2;
	pdat |= (PINC & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
     a58:	93 b3       	in	r25, 0x13	; 19

void capture_button_state()
{
	uint8_t pdat;
	pdat = PINB  & ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
	pdat <<= 2;
     a5a:	88 0f       	add	r24, r24
     a5c:	88 0f       	add	r24, r24
	pdat |= (PINC & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
     a5e:	9f 71       	andi	r25, 0x1F	; 31
     a60:	89 2b       	or	r24, r25
	raw_button_state = pdat ^ RAW_BUTTONS_INVERSE_MASK;
     a62:	80 95       	com	r24
     a64:	80 93 f9 00 	sts	0x00F9, r24
     a68:	08 95       	ret

00000a6a <restartMenuTimer>:
//	 Restarts menu state timeout
//	Should be used in RUN function when control buttons are pressed.
//-----------------------------------------------------------------//
static void restartMenuTimer(void)
{
	menuTimer.Timer = 0;
     a6a:	10 92 fc 00 	sts	0x00FC, r1
     a6e:	08 95       	ret

00000a70 <mf_setTempLeave>:
		clearExtraLeds(LED_TEMP);
}

void mf_setTempLeave(void)
{
	userTimer.Enabled = 0;
     a70:	e1 e0       	ldi	r30, 0x01	; 1
     a72:	f1 e0       	ldi	r31, 0x01	; 1
     a74:	80 81       	ld	r24, Z
     a76:	8e 7f       	andi	r24, 0xFE	; 254
     a78:	80 83       	st	Z, r24
     a7a:	08 95       	ret

00000a7c <mf_leafSelectAct>:
	userTimer.FA_GE = 1;	
}

void mf_leafSelectAct(void)
{
	userTimer.Timer = 0;
     a7c:	10 92 02 01 	sts	0x0102, r1
	userTimer.Top = BLINK_PERIOD - 1;
     a80:	87 e0       	ldi	r24, 0x07	; 7
     a82:	80 93 03 01 	sts	0x0103, r24
	userTimer.CompA = BLINK_PERIOD / 2;
     a86:	84 e0       	ldi	r24, 0x04	; 4
     a88:	80 93 04 01 	sts	0x0104, r24
	userTimer.Enabled = 1;
     a8c:	e1 e0       	ldi	r30, 0x01	; 1
     a8e:	f1 e0       	ldi	r31, 0x01	; 1
     a90:	80 81       	ld	r24, Z
     a92:	81 60       	ori	r24, 0x01	; 1
     a94:	80 83       	st	Z, r24
     a96:	08 95       	ret

00000a98 <mf_leafExit>:
}

void mf_leafExit(void)
{
	userTimer.Enabled = 0;	
     a98:	e1 e0       	ldi	r30, 0x01	; 1
     a9a:	f1 e0       	ldi	r31, 0x01	; 1
     a9c:	80 81       	ld	r24, Z
     a9e:	8e 7f       	andi	r24, 0xFE	; 254
     aa0:	80 83       	st	Z, r24
     aa2:	08 95       	ret

00000aa4 <mf_cdoneDo>:
	calculateCoeffs();
}

void mf_cdoneDo(void)
{
	printLedBuffer(0," DONE ");
     aa4:	61 e9       	ldi	r22, 0x91	; 145
     aa6:	70 e0       	ldi	r23, 0x00	; 0
     aa8:	80 e0       	ldi	r24, 0x00	; 0
     aaa:	42 df       	rcall	.-380    	; 0x930 <printLedBuffer>
     aac:	08 95       	ret

00000aae <mf_cdone2Select>:
}

void mf_cdone2Select(void)
{
	// Save current ADC as calibrating point
	cpoint2_adc = adc_filtered_value;
     aae:	80 91 d8 00 	lds	r24, 0x00D8
     ab2:	90 91 d9 00 	lds	r25, 0x00D9
     ab6:	90 93 e5 00 	sts	0x00E5, r25
     aba:	80 93 e4 00 	sts	0x00E4, r24
	// Save current Celsius degree
	cpoint2 = cpoint2_copy;
     abe:	80 91 00 01 	lds	r24, 0x0100
     ac2:	80 93 e6 00 	sts	0x00E6, r24
	// Calculate new coefficient for temperature conversion
	calculateCoeffs();
     ac6:	14 dc       	rcall	.-2008   	; 0x2f0 <calculateCoeffs>
     ac8:	08 95       	ret

00000aca <mf_cdone1Select>:
//---------------------------------------------//

void mf_cdone1Select(void)
{
	// Save current ADC as calibrating point
	cpoint1_adc = adc_filtered_value;
     aca:	80 91 d8 00 	lds	r24, 0x00D8
     ace:	90 91 d9 00 	lds	r25, 0x00D9
     ad2:	90 93 e2 00 	sts	0x00E2, r25
     ad6:	80 93 e1 00 	sts	0x00E1, r24
	// Save current Celsius degree
	cpoint1 = cpoint1_copy;
     ada:	80 91 ff 00 	lds	r24, 0x00FF
     ade:	80 93 dc 00 	sts	0x00DC, r24
	// Calculate new coefficient for temperature conversion
	calculateCoeffs();
     ae2:	06 dc       	rcall	.-2036   	; 0x2f0 <calculateCoeffs>
     ae4:	08 95       	ret

00000ae6 <mf_calib2Do>:
}

//---------------------------------------------//

void mf_calib2Do(void)
{
     ae6:	cf 93       	push	r28
     ae8:	df 93       	push	r29
     aea:	cd b7       	in	r28, 0x3d	; 61
     aec:	de b7       	in	r29, 0x3e	; 62
     aee:	27 97       	sbiw	r28, 0x07	; 7
     af0:	0f b6       	in	r0, 0x3f	; 63
     af2:	f8 94       	cli
     af4:	de bf       	out	0x3e, r29	; 62
     af6:	0f be       	out	0x3f, r0	; 63
     af8:	cd bf       	out	0x3d, r28	; 61
	char str[] = {'P','2',' ',' ',' ',' ',0};
     afa:	87 e0       	ldi	r24, 0x07	; 7
     afc:	e7 e6       	ldi	r30, 0x67	; 103
     afe:	f0 e0       	ldi	r31, 0x00	; 0
     b00:	de 01       	movw	r26, r28
     b02:	11 96       	adiw	r26, 0x01	; 1
     b04:	01 90       	ld	r0, Z+
     b06:	0d 92       	st	X+, r0
     b08:	8a 95       	dec	r24
     b0a:	e1 f7       	brne	.-8      	; 0xb04 <mf_calib2Do+0x1e>
	
	
	if (button_state & (BD_UP | BR_UP))
     b0c:	80 91 be 00 	lds	r24, 0x00BE
     b10:	90 91 bf 00 	lds	r25, 0x00BF
     b14:	9c 01       	movw	r18, r24
     b16:	22 70       	andi	r18, 0x02	; 2
     b18:	34 70       	andi	r19, 0x04	; 4
     b1a:	23 2b       	or	r18, r19
     b1c:	41 f0       	breq	.+16     	; 0xb2e <mf_calib2Do+0x48>
	{
		if (cpoint2_copy < MAX_CALIB_TEMP)
     b1e:	80 91 00 01 	lds	r24, 0x0100
     b22:	8a 3f       	cpi	r24, 0xFA	; 250
     b24:	78 f4       	brcc	.+30     	; 0xb44 <mf_calib2Do+0x5e>
		cpoint2_copy += 1;
     b26:	8f 5f       	subi	r24, 0xFF	; 255
     b28:	80 93 00 01 	sts	0x0100, r24
     b2c:	0b c0       	rjmp	.+22     	; 0xb44 <mf_calib2Do+0x5e>
	}
	else if (button_state & (BD_DOWN | BR_DOWN))
     b2e:	84 70       	andi	r24, 0x04	; 4
     b30:	98 70       	andi	r25, 0x08	; 8
     b32:	89 2b       	or	r24, r25
     b34:	39 f0       	breq	.+14     	; 0xb44 <mf_calib2Do+0x5e>
	{
		if (cpoint2_copy > MIN_CALIB_TEMP)
     b36:	80 91 00 01 	lds	r24, 0x0100
     b3a:	8b 30       	cpi	r24, 0x0B	; 11
     b3c:	18 f0       	brcs	.+6      	; 0xb44 <mf_calib2Do+0x5e>
		cpoint2_copy -= 1;
     b3e:	81 50       	subi	r24, 0x01	; 1
     b40:	80 93 00 01 	sts	0x0100, r24
	}
	
	if (userTimer.FA_GE)
     b44:	80 91 01 01 	lds	r24, 0x0101
     b48:	84 ff       	sbrs	r24, 4
     b4a:	09 c0       	rjmp	.+18     	; 0xb5e <mf_calib2Do+0x78>
	{
		u16toa_align_right(cpoint2_copy,str + 3,0x80 | 3,' ');
     b4c:	20 e2       	ldi	r18, 0x20	; 32
     b4e:	43 e8       	ldi	r20, 0x83	; 131
     b50:	be 01       	movw	r22, r28
     b52:	6c 5f       	subi	r22, 0xFC	; 252
     b54:	7f 4f       	sbci	r23, 0xFF	; 255
     b56:	80 91 00 01 	lds	r24, 0x0100
     b5a:	90 e0       	ldi	r25, 0x00	; 0
     b5c:	24 d3       	rcall	.+1608   	; 0x11a6 <u16toa_align_right>
	}
	
	printLedBuffer(0,str);
     b5e:	be 01       	movw	r22, r28
     b60:	6f 5f       	subi	r22, 0xFF	; 255
     b62:	7f 4f       	sbci	r23, 0xFF	; 255
     b64:	80 e0       	ldi	r24, 0x00	; 0
     b66:	e4 de       	rcall	.-568    	; 0x930 <printLedBuffer>
	
}
     b68:	27 96       	adiw	r28, 0x07	; 7
     b6a:	0f b6       	in	r0, 0x3f	; 63
     b6c:	f8 94       	cli
     b6e:	de bf       	out	0x3e, r29	; 62
     b70:	0f be       	out	0x3f, r0	; 63
     b72:	cd bf       	out	0x3d, r28	; 61
     b74:	df 91       	pop	r29
     b76:	cf 91       	pop	r28
     b78:	08 95       	ret

00000b7a <mf_calib1Do>:
	cpoint1_copy = cpoint1;
	cpoint2_copy = cpoint2;
}

void mf_calib1Do(void)
{
     b7a:	cf 93       	push	r28
     b7c:	df 93       	push	r29
     b7e:	cd b7       	in	r28, 0x3d	; 61
     b80:	de b7       	in	r29, 0x3e	; 62
     b82:	27 97       	sbiw	r28, 0x07	; 7
     b84:	0f b6       	in	r0, 0x3f	; 63
     b86:	f8 94       	cli
     b88:	de bf       	out	0x3e, r29	; 62
     b8a:	0f be       	out	0x3f, r0	; 63
     b8c:	cd bf       	out	0x3d, r28	; 61
	char str[] = {'P','1',' ',' ',' ',' ',0};
     b8e:	87 e0       	ldi	r24, 0x07	; 7
     b90:	ee e6       	ldi	r30, 0x6E	; 110
     b92:	f0 e0       	ldi	r31, 0x00	; 0
     b94:	de 01       	movw	r26, r28
     b96:	11 96       	adiw	r26, 0x01	; 1
     b98:	01 90       	ld	r0, Z+
     b9a:	0d 92       	st	X+, r0
     b9c:	8a 95       	dec	r24
     b9e:	e1 f7       	brne	.-8      	; 0xb98 <mf_calib1Do+0x1e>
	
	
	if (button_state & (BD_UP | BR_UP))
     ba0:	80 91 be 00 	lds	r24, 0x00BE
     ba4:	90 91 bf 00 	lds	r25, 0x00BF
     ba8:	9c 01       	movw	r18, r24
     baa:	22 70       	andi	r18, 0x02	; 2
     bac:	34 70       	andi	r19, 0x04	; 4
     bae:	23 2b       	or	r18, r19
     bb0:	41 f0       	breq	.+16     	; 0xbc2 <mf_calib1Do+0x48>
	{
		if (cpoint1_copy < MAX_CALIB_TEMP)
     bb2:	80 91 ff 00 	lds	r24, 0x00FF
     bb6:	8a 3f       	cpi	r24, 0xFA	; 250
     bb8:	78 f4       	brcc	.+30     	; 0xbd8 <mf_calib1Do+0x5e>
			cpoint1_copy += 1;
     bba:	8f 5f       	subi	r24, 0xFF	; 255
     bbc:	80 93 ff 00 	sts	0x00FF, r24
     bc0:	0b c0       	rjmp	.+22     	; 0xbd8 <mf_calib1Do+0x5e>
	}
	else if (button_state & (BD_DOWN | BR_DOWN))
     bc2:	84 70       	andi	r24, 0x04	; 4
     bc4:	98 70       	andi	r25, 0x08	; 8
     bc6:	89 2b       	or	r24, r25
     bc8:	39 f0       	breq	.+14     	; 0xbd8 <mf_calib1Do+0x5e>
	{
		if (cpoint1_copy > MIN_CALIB_TEMP)
     bca:	80 91 ff 00 	lds	r24, 0x00FF
     bce:	8b 30       	cpi	r24, 0x0B	; 11
     bd0:	18 f0       	brcs	.+6      	; 0xbd8 <mf_calib1Do+0x5e>
			cpoint1_copy -= 1;
     bd2:	81 50       	subi	r24, 0x01	; 1
     bd4:	80 93 ff 00 	sts	0x00FF, r24
	}
	
	if (userTimer.FA_GE)
     bd8:	80 91 01 01 	lds	r24, 0x0101
     bdc:	84 ff       	sbrs	r24, 4
     bde:	09 c0       	rjmp	.+18     	; 0xbf2 <mf_calib1Do+0x78>
	{
		u16toa_align_right(cpoint1_copy,str + 3,0x80 | 3,' ');
     be0:	20 e2       	ldi	r18, 0x20	; 32
     be2:	43 e8       	ldi	r20, 0x83	; 131
     be4:	be 01       	movw	r22, r28
     be6:	6c 5f       	subi	r22, 0xFC	; 252
     be8:	7f 4f       	sbci	r23, 0xFF	; 255
     bea:	80 91 ff 00 	lds	r24, 0x00FF
     bee:	90 e0       	ldi	r25, 0x00	; 0
     bf0:	da d2       	rcall	.+1460   	; 0x11a6 <u16toa_align_right>
	}
	
	printLedBuffer(0,str);
     bf2:	be 01       	movw	r22, r28
     bf4:	6f 5f       	subi	r22, 0xFF	; 255
     bf6:	7f 4f       	sbci	r23, 0xFF	; 255
     bf8:	80 e0       	ldi	r24, 0x00	; 0
     bfa:	9a de       	rcall	.-716    	; 0x930 <printLedBuffer>
}
     bfc:	27 96       	adiw	r28, 0x07	; 7
     bfe:	0f b6       	in	r0, 0x3f	; 63
     c00:	f8 94       	cli
     c02:	de bf       	out	0x3e, r29	; 62
     c04:	0f be       	out	0x3f, r0	; 63
     c06:	cd bf       	out	0x3d, r28	; 61
     c08:	df 91       	pop	r29
     c0a:	cf 91       	pop	r28
     c0c:	08 95       	ret

00000c0e <mf_autopoffDo>:

//---------------------------------------------//


void mf_autopoffDo(void)
{
     c0e:	cf 93       	push	r28
     c10:	df 93       	push	r29
     c12:	cd b7       	in	r28, 0x3d	; 61
     c14:	de b7       	in	r29, 0x3e	; 62
     c16:	27 97       	sbiw	r28, 0x07	; 7
     c18:	0f b6       	in	r0, 0x3f	; 63
     c1a:	f8 94       	cli
     c1c:	de bf       	out	0x3e, r29	; 62
     c1e:	0f be       	out	0x3f, r0	; 63
     c20:	cd bf       	out	0x3d, r28	; 61
	char str[] = {'O','F','F',' ',' ',' ',0};
     c22:	87 e0       	ldi	r24, 0x07	; 7
     c24:	e5 e7       	ldi	r30, 0x75	; 117
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	de 01       	movw	r26, r28
     c2a:	11 96       	adiw	r26, 0x01	; 1
     c2c:	01 90       	ld	r0, Z+
     c2e:	0d 92       	st	X+, r0
     c30:	8a 95       	dec	r24
     c32:	e1 f7       	brne	.-8      	; 0xc2c <mf_autopoffDo+0x1e>
		
		
	if (button_state & (BD_UP | BR_UP))
     c34:	80 91 be 00 	lds	r24, 0x00BE
     c38:	90 91 bf 00 	lds	r25, 0x00BF
     c3c:	9c 01       	movw	r18, r24
     c3e:	22 70       	andi	r18, 0x02	; 2
     c40:	34 70       	andi	r19, 0x04	; 4
     c42:	23 2b       	or	r18, r19
     c44:	49 f0       	breq	.+18     	; 0xc58 <mf_autopoffDo+0x4a>
	{
		if (power_off_timeout < MAX_POWEROFF_TIMEOUT)
     c46:	80 91 e3 00 	lds	r24, 0x00E3
     c4a:	8f 35       	cpi	r24, 0x5F	; 95
     c4c:	18 f4       	brcc	.+6      	; 0xc54 <mf_autopoffDo+0x46>
			power_off_timeout += 5;
     c4e:	8b 5f       	subi	r24, 0xFB	; 251
     c50:	80 93 e3 00 	sts	0x00E3, r24
		restartMenuTimer();
     c54:	0a df       	rcall	.-492    	; 0xa6a <restartMenuTimer>
     c56:	0c c0       	rjmp	.+24     	; 0xc70 <mf_autopoffDo+0x62>
	}
	else if (button_state & (BD_DOWN | BR_DOWN))
     c58:	84 70       	andi	r24, 0x04	; 4
     c5a:	98 70       	andi	r25, 0x08	; 8
     c5c:	89 2b       	or	r24, r25
     c5e:	41 f0       	breq	.+16     	; 0xc70 <mf_autopoffDo+0x62>
	{
		if (power_off_timeout > MIN_POWEROFF_TIMEOUT)
     c60:	80 91 e3 00 	lds	r24, 0x00E3
     c64:	86 30       	cpi	r24, 0x06	; 6
     c66:	18 f0       	brcs	.+6      	; 0xc6e <mf_autopoffDo+0x60>
			power_off_timeout -= 5;
     c68:	85 50       	subi	r24, 0x05	; 5
     c6a:	80 93 e3 00 	sts	0x00E3, r24
		restartMenuTimer();
     c6e:	fd de       	rcall	.-518    	; 0xa6a <restartMenuTimer>
	}	
		
	if (userTimer.FA_GE)
     c70:	80 91 01 01 	lds	r24, 0x0101
     c74:	84 ff       	sbrs	r24, 4
     c76:	10 c0       	rjmp	.+32     	; 0xc98 <mf_autopoffDo+0x8a>
	{
		if (power_off_timeout != MAX_POWEROFF_TIMEOUT)
     c78:	80 91 e3 00 	lds	r24, 0x00E3
     c7c:	8f 35       	cpi	r24, 0x5F	; 95
     c7e:	41 f0       	breq	.+16     	; 0xc90 <mf_autopoffDo+0x82>
			u16toa_align_right(power_off_timeout,str + 4,0x80 | 2,' ');	
     c80:	20 e2       	ldi	r18, 0x20	; 32
     c82:	42 e8       	ldi	r20, 0x82	; 130
     c84:	be 01       	movw	r22, r28
     c86:	6b 5f       	subi	r22, 0xFB	; 251
     c88:	7f 4f       	sbci	r23, 0xFF	; 255
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	8c d2       	rcall	.+1304   	; 0x11a6 <u16toa_align_right>
     c8e:	04 c0       	rjmp	.+8      	; 0xc98 <mf_autopoffDo+0x8a>
		else 
		{
			str[4] = 'N';
     c90:	8e e4       	ldi	r24, 0x4E	; 78
     c92:	8d 83       	std	Y+5, r24	; 0x05
			str[5] = 'O';
     c94:	8f e4       	ldi	r24, 0x4F	; 79
     c96:	8e 83       	std	Y+6, r24	; 0x06
		}			
	}		
		
	printLedBuffer(0,str);
     c98:	be 01       	movw	r22, r28
     c9a:	6f 5f       	subi	r22, 0xFF	; 255
     c9c:	7f 4f       	sbci	r23, 0xFF	; 255
     c9e:	80 e0       	ldi	r24, 0x00	; 0
     ca0:	47 de       	rcall	.-882    	; 0x930 <printLedBuffer>
}
     ca2:	27 96       	adiw	r28, 0x07	; 7
     ca4:	0f b6       	in	r0, 0x3f	; 63
     ca6:	f8 94       	cli
     ca8:	de bf       	out	0x3e, r29	; 62
     caa:	0f be       	out	0x3f, r0	; 63
     cac:	cd bf       	out	0x3d, r28	; 61
     cae:	df 91       	pop	r29
     cb0:	cf 91       	pop	r28
     cb2:	08 95       	ret

00000cb4 <mf_realTempDo>:
{
	setExtraLeds(LED_TEMP);
}

void mf_realTempDo(void)
{
     cb4:	cf 93       	push	r28
     cb6:	df 93       	push	r29
     cb8:	cd b7       	in	r28, 0x3d	; 61
     cba:	de b7       	in	r29, 0x3e	; 62
     cbc:	27 97       	sbiw	r28, 0x07	; 7
     cbe:	0f b6       	in	r0, 0x3f	; 63
     cc0:	f8 94       	cli
     cc2:	de bf       	out	0x3e, r29	; 62
     cc4:	0f be       	out	0x3f, r0	; 63
     cc6:	cd bf       	out	0x3d, r28	; 61
	char str[] = {' ',' ',' ',' ',0xB0,'C',0};
     cc8:	87 e0       	ldi	r24, 0x07	; 7
     cca:	ec e7       	ldi	r30, 0x7C	; 124
     ccc:	f0 e0       	ldi	r31, 0x00	; 0
     cce:	de 01       	movw	r26, r28
     cd0:	11 96       	adiw	r26, 0x01	; 1
     cd2:	01 90       	ld	r0, Z+
     cd4:	0d 92       	st	X+, r0
     cd6:	8a 95       	dec	r24
     cd8:	e1 f7       	brne	.-8      	; 0xcd2 <mf_realTempDo+0x1e>
	// Output ADC result to LED
	u16toa_align_right(adc_filtered_celsius,str,0x80 | 4,' ');
     cda:	20 e2       	ldi	r18, 0x20	; 32
     cdc:	44 e8       	ldi	r20, 0x84	; 132
     cde:	be 01       	movw	r22, r28
     ce0:	6f 5f       	subi	r22, 0xFF	; 255
     ce2:	7f 4f       	sbci	r23, 0xFF	; 255
     ce4:	80 91 da 00 	lds	r24, 0x00DA
     ce8:	90 91 db 00 	lds	r25, 0x00DB
     cec:	5c d2       	rcall	.+1208   	; 0x11a6 <u16toa_align_right>
	printLedBuffer(0,str);
     cee:	be 01       	movw	r22, r28
     cf0:	6f 5f       	subi	r22, 0xFF	; 255
     cf2:	7f 4f       	sbci	r23, 0xFF	; 255
     cf4:	80 e0       	ldi	r24, 0x00	; 0
     cf6:	1c de       	rcall	.-968    	; 0x930 <printLedBuffer>
}
     cf8:	27 96       	adiw	r28, 0x07	; 7
     cfa:	0f b6       	in	r0, 0x3f	; 63
     cfc:	f8 94       	cli
     cfe:	de bf       	out	0x3e, r29	; 62
     d00:	0f be       	out	0x3f, r0	; 63
     d02:	cd bf       	out	0x3d, r28	; 61
     d04:	df 91       	pop	r29
     d06:	cf 91       	pop	r28
     d08:	08 95       	ret

00000d0a <mf_sndenDo>:

//---------------------------------------------//


void mf_sndenDo(void)
{
     d0a:	cf 93       	push	r28
     d0c:	df 93       	push	r29
     d0e:	cd b7       	in	r28, 0x3d	; 61
     d10:	de b7       	in	r29, 0x3e	; 62
     d12:	27 97       	sbiw	r28, 0x07	; 7
     d14:	0f b6       	in	r0, 0x3f	; 63
     d16:	f8 94       	cli
     d18:	de bf       	out	0x3e, r29	; 62
     d1a:	0f be       	out	0x3f, r0	; 63
     d1c:	cd bf       	out	0x3d, r28	; 61
	char str[] = {'S','N','D',' ',' ',' ',0};
     d1e:	87 e0       	ldi	r24, 0x07	; 7
     d20:	e3 e8       	ldi	r30, 0x83	; 131
     d22:	f0 e0       	ldi	r31, 0x00	; 0
     d24:	de 01       	movw	r26, r28
     d26:	11 96       	adiw	r26, 0x01	; 1
     d28:	01 90       	ld	r0, Z+
     d2a:	0d 92       	st	X+, r0
     d2c:	8a 95       	dec	r24
     d2e:	e1 f7       	brne	.-8      	; 0xd28 <mf_sndenDo+0x1e>
		
	if (button_state & (BD_UP | BD_DOWN))
     d30:	80 91 be 00 	lds	r24, 0x00BE
     d34:	90 91 bf 00 	lds	r25, 0x00BF
     d38:	86 70       	andi	r24, 0x06	; 6
     d3a:	99 27       	eor	r25, r25
     d3c:	89 2b       	or	r24, r25
     d3e:	41 f0       	breq	.+16     	; 0xd50 <mf_sndenDo+0x46>
	{
		sound_enable = !sound_enable;
     d40:	81 e0       	ldi	r24, 0x01	; 1
     d42:	90 91 df 00 	lds	r25, 0x00DF
     d46:	91 11       	cpse	r25, r1
     d48:	80 e0       	ldi	r24, 0x00	; 0
     d4a:	80 93 df 00 	sts	0x00DF, r24
		restartMenuTimer();
     d4e:	8d de       	rcall	.-742    	; 0xa6a <restartMenuTimer>
	}			
		
	if (userTimer.FA_GE)
     d50:	80 91 01 01 	lds	r24, 0x0101
     d54:	84 ff       	sbrs	r24, 4
     d56:	0e c0       	rjmp	.+28     	; 0xd74 <mf_sndenDo+0x6a>
	{
		if (sound_enable)		
     d58:	80 91 df 00 	lds	r24, 0x00DF
     d5c:	88 23       	and	r24, r24
     d5e:	29 f0       	breq	.+10     	; 0xd6a <mf_sndenDo+0x60>
		{
			str[4] = 'O';
     d60:	8f e4       	ldi	r24, 0x4F	; 79
     d62:	8d 83       	std	Y+5, r24	; 0x05
			str[5] = 'N';
     d64:	8e e4       	ldi	r24, 0x4E	; 78
     d66:	8e 83       	std	Y+6, r24	; 0x06
     d68:	05 c0       	rjmp	.+10     	; 0xd74 <mf_sndenDo+0x6a>
		}
		else
		{
			str[3] = 'O';
     d6a:	8f e4       	ldi	r24, 0x4F	; 79
     d6c:	8c 83       	std	Y+4, r24	; 0x04
			str[4] = 'F';
     d6e:	86 e4       	ldi	r24, 0x46	; 70
     d70:	8d 83       	std	Y+5, r24	; 0x05
			str[5] = 'F';
     d72:	8e 83       	std	Y+6, r24	; 0x06
		}			
	}
		
	printLedBuffer(0,str);
     d74:	be 01       	movw	r22, r28
     d76:	6f 5f       	subi	r22, 0xFF	; 255
     d78:	7f 4f       	sbci	r23, 0xFF	; 255
     d7a:	80 e0       	ldi	r24, 0x00	; 0
     d7c:	d9 dd       	rcall	.-1102   	; 0x930 <printLedBuffer>
	setComma(2);
     d7e:	82 e0       	ldi	r24, 0x02	; 2
     d80:	1d de       	rcall	.-966    	; 0x9bc <setComma>
}
     d82:	27 96       	adiw	r28, 0x07	; 7
     d84:	0f b6       	in	r0, 0x3f	; 63
     d86:	f8 94       	cli
     d88:	de bf       	out	0x3e, r29	; 62
     d8a:	0f be       	out	0x3f, r0	; 63
     d8c:	cd bf       	out	0x3d, r28	; 61
     d8e:	df 91       	pop	r29
     d90:	cf 91       	pop	r28
     d92:	08 95       	ret

00000d94 <mf_leafSelect>:

// Select and exit functions, common for leaf menu items 

void mf_leafSelect(void)
{
	clearExtraLeds(LED_TEMP | LED_ROLL);
     d94:	83 e0       	ldi	r24, 0x03	; 3
     d96:	24 de       	rcall	.-952    	; 0x9e0 <clearExtraLeds>
	userTimer.FA_GE = 1;	
     d98:	e1 e0       	ldi	r30, 0x01	; 1
     d9a:	f1 e0       	ldi	r31, 0x01	; 1
     d9c:	80 81       	ld	r24, Z
     d9e:	80 61       	ori	r24, 0x10	; 16
     da0:	80 83       	st	Z, r24
     da2:	08 95       	ret

00000da4 <mf_calibSelect>:

//---------------------------------------------//

void mf_calibSelect(void)
{
	mf_leafSelect();
     da4:	f7 df       	rcall	.-18     	; 0xd94 <mf_leafSelect>
	cpoint1_copy = cpoint1;
     da6:	80 91 dc 00 	lds	r24, 0x00DC
     daa:	80 93 ff 00 	sts	0x00FF, r24
	cpoint2_copy = cpoint2;
     dae:	80 91 e6 00 	lds	r24, 0x00E6
     db2:	80 93 00 01 	sts	0x0100, r24
     db6:	08 95       	ret

00000db8 <mf_rollLeave>:
	printLedBuffer(0,str);
}

void mf_rollLeave(void)
{
	clearExtraLeds(LED_ROLL);
     db8:	82 e0       	ldi	r24, 0x02	; 2
     dba:	12 de       	rcall	.-988    	; 0x9e0 <clearExtraLeds>
	userTimer.Enabled = 0;
     dbc:	e1 e0       	ldi	r30, 0x01	; 1
     dbe:	f1 e0       	ldi	r31, 0x01	; 1
     dc0:	80 81       	ld	r24, Z
     dc2:	8e 7f       	andi	r24, 0xFE	; 254
     dc4:	80 83       	st	Z, r24
     dc6:	08 95       	ret

00000dc8 <mf_setTempSelect>:
//---------------------------------------------//


void mf_setTempSelect(void)
{
	clearExtraLeds(LED_TEMP);
     dc8:	81 e0       	ldi	r24, 0x01	; 1
     dca:	0a de       	rcall	.-1004   	; 0x9e0 <clearExtraLeds>
	mf_leafSelectAct();		// setup and start timer
     dcc:	57 de       	rcall	.-850    	; 0xa7c <mf_leafSelectAct>
     dce:	08 95       	ret

00000dd0 <mf_realTempLeave>:
	printLedBuffer(0,str);
}

void mf_realTempLeave(void)
{
	clearExtraLeds(LED_TEMP);
     dd0:	81 e0       	ldi	r24, 0x01	; 1
     dd2:	06 de       	rcall	.-1012   	; 0x9e0 <clearExtraLeds>
     dd4:	08 95       	ret

00000dd6 <mf_rollDo>:
	setExtraLeds(LED_ROLL);
	mf_leafSelectAct();		// setup and start timer
}

void mf_rollDo(void)
{
     dd6:	cf 93       	push	r28
     dd8:	df 93       	push	r29
     dda:	cd b7       	in	r28, 0x3d	; 61
     ddc:	de b7       	in	r29, 0x3e	; 62
     dde:	27 97       	sbiw	r28, 0x07	; 7
     de0:	0f b6       	in	r0, 0x3f	; 63
     de2:	f8 94       	cli
     de4:	de bf       	out	0x3e, r29	; 62
     de6:	0f be       	out	0x3f, r0	; 63
     de8:	cd bf       	out	0x3d, r28	; 61
	char str[] = {' ',' ',' ',' ',' ',' ',0};
     dea:	87 e0       	ldi	r24, 0x07	; 7
     dec:	ea e8       	ldi	r30, 0x8A	; 138
     dee:	f0 e0       	ldi	r31, 0x00	; 0
     df0:	de 01       	movw	r26, r28
     df2:	11 96       	adiw	r26, 0x01	; 1
     df4:	01 90       	ld	r0, Z+
     df6:	0d 92       	st	X+, r0
     df8:	8a 95       	dec	r24
     dfa:	e1 f7       	brne	.-8      	; 0xdf4 <mf_rollDo+0x1e>
		
	if (button_state & (BD_UP | BR_UP))
     dfc:	80 91 be 00 	lds	r24, 0x00BE
     e00:	90 91 bf 00 	lds	r25, 0x00BF
     e04:	9c 01       	movw	r18, r24
     e06:	22 70       	andi	r18, 0x02	; 2
     e08:	34 70       	andi	r19, 0x04	; 4
     e0a:	23 2b       	or	r18, r19
     e0c:	41 f0       	breq	.+16     	; 0xe1e <mf_rollDo+0x48>
	{
		if (rollCycleSet < MAX_ROLL_CYCLES)
     e0e:	80 91 e0 00 	lds	r24, 0x00E0
     e12:	83 36       	cpi	r24, 0x63	; 99
     e14:	78 f4       	brcc	.+30     	; 0xe34 <mf_rollDo+0x5e>
		rollCycleSet += 1;
     e16:	8f 5f       	subi	r24, 0xFF	; 255
     e18:	80 93 e0 00 	sts	0x00E0, r24
     e1c:	0b c0       	rjmp	.+22     	; 0xe34 <mf_rollDo+0x5e>
	}
	else if (button_state & (BD_DOWN | BR_DOWN))
     e1e:	84 70       	andi	r24, 0x04	; 4
     e20:	98 70       	andi	r25, 0x08	; 8
     e22:	89 2b       	or	r24, r25
     e24:	39 f0       	breq	.+14     	; 0xe34 <mf_rollDo+0x5e>
	{
		if (rollCycleSet > MIN_ROLL_CYCLES)
     e26:	80 91 e0 00 	lds	r24, 0x00E0
     e2a:	82 30       	cpi	r24, 0x02	; 2
     e2c:	18 f0       	brcs	.+6      	; 0xe34 <mf_rollDo+0x5e>
		rollCycleSet -= 1;
     e2e:	81 50       	subi	r24, 0x01	; 1
     e30:	80 93 e0 00 	sts	0x00E0, r24
	}	
		
	u16toa_align_right(rollCycleSet,str + 4,0x80 | 2,' ');
     e34:	20 e2       	ldi	r18, 0x20	; 32
     e36:	42 e8       	ldi	r20, 0x82	; 130
     e38:	be 01       	movw	r22, r28
     e3a:	6b 5f       	subi	r22, 0xFB	; 251
     e3c:	7f 4f       	sbci	r23, 0xFF	; 255
     e3e:	80 91 e0 00 	lds	r24, 0x00E0
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	b0 d1       	rcall	.+864    	; 0x11a6 <u16toa_align_right>
	
	if ((!(rollState & ROLL_CYCLE)) || (userTimer.FA_GE))
     e46:	80 91 ca 00 	lds	r24, 0x00CA
     e4a:	82 ff       	sbrs	r24, 2
     e4c:	04 c0       	rjmp	.+8      	; 0xe56 <mf_rollDo+0x80>
     e4e:	80 91 01 01 	lds	r24, 0x0101
     e52:	84 ff       	sbrs	r24, 4
     e54:	09 c0       	rjmp	.+18     	; 0xe68 <mf_rollDo+0x92>
	{
		u16toa_align_right(activeRollCycle,str + 1,0x80 | 2,' ');
     e56:	20 e2       	ldi	r18, 0x20	; 32
     e58:	42 e8       	ldi	r20, 0x82	; 130
     e5a:	be 01       	movw	r22, r28
     e5c:	6e 5f       	subi	r22, 0xFE	; 254
     e5e:	7f 4f       	sbci	r23, 0xFF	; 255
     e60:	80 91 0c 01 	lds	r24, 0x010C
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	9f d1       	rcall	.+830    	; 0x11a6 <u16toa_align_right>
	}
	
	str[0] = 0;
     e68:	19 82       	std	Y+1, r1	; 0x01
	if (isTopPointValid())
     e6a:	e0 d2       	rcall	.+1472   	; 0x142c <isTopPointValid>
     e6c:	88 23       	and	r24, r24
     e6e:	19 f0       	breq	.+6      	; 0xe76 <mf_rollDo+0xa0>
		str[0] |= SEGA;
     e70:	89 81       	ldd	r24, Y+1	; 0x01
     e72:	81 60       	ori	r24, 0x01	; 1
     e74:	89 83       	std	Y+1, r24	; 0x01
	if (isBottomPointValid())
     e76:	ea d2       	rcall	.+1492   	; 0x144c <isBottomPointValid>
     e78:	88 23       	and	r24, r24
     e7a:	19 f0       	breq	.+6      	; 0xe82 <mf_rollDo+0xac>
		str[0] |= SEGD;
     e7c:	89 81       	ldd	r24, Y+1	; 0x01
     e7e:	88 60       	ori	r24, 0x08	; 8
     e80:	89 83       	std	Y+1, r24	; 0x01
	if (str[0] == 0)
     e82:	89 81       	ldd	r24, Y+1	; 0x01
     e84:	81 11       	cpse	r24, r1
     e86:	02 c0       	rjmp	.+4      	; 0xe8c <mf_rollDo+0xb6>
		str[0] = ' ';
     e88:	80 e2       	ldi	r24, 0x20	; 32
     e8a:	89 83       	std	Y+1, r24	; 0x01
		
	printLedBuffer(0,str);
     e8c:	be 01       	movw	r22, r28
     e8e:	6f 5f       	subi	r22, 0xFF	; 255
     e90:	7f 4f       	sbci	r23, 0xFF	; 255
     e92:	80 e0       	ldi	r24, 0x00	; 0
     e94:	4d dd       	rcall	.-1382   	; 0x930 <printLedBuffer>
}
     e96:	27 96       	adiw	r28, 0x07	; 7
     e98:	0f b6       	in	r0, 0x3f	; 63
     e9a:	f8 94       	cli
     e9c:	de bf       	out	0x3e, r29	; 62
     e9e:	0f be       	out	0x3f, r0	; 63
     ea0:	cd bf       	out	0x3d, r28	; 61
     ea2:	df 91       	pop	r29
     ea4:	cf 91       	pop	r28
     ea6:	08 95       	ret

00000ea8 <mf_rollSelect>:
//---------------------------------------------//
//---------------------------------------------//

void mf_rollSelect(void)
{
	setExtraLeds(LED_ROLL);
     ea8:	82 e0       	ldi	r24, 0x02	; 2
     eaa:	94 dd       	rcall	.-1240   	; 0x9d4 <setExtraLeds>
	mf_leafSelectAct();		// setup and start timer
     eac:	e7 dd       	rcall	.-1074   	; 0xa7c <mf_leafSelectAct>
     eae:	08 95       	ret

00000eb0 <mf_setTempDo>:
	clearExtraLeds(LED_TEMP);
	mf_leafSelectAct();		// setup and start timer
}

void mf_setTempDo(void)
{
     eb0:	cf 93       	push	r28
     eb2:	df 93       	push	r29
     eb4:	cd b7       	in	r28, 0x3d	; 61
     eb6:	de b7       	in	r29, 0x3e	; 62
     eb8:	27 97       	sbiw	r28, 0x07	; 7
     eba:	0f b6       	in	r0, 0x3f	; 63
     ebc:	f8 94       	cli
     ebe:	de bf       	out	0x3e, r29	; 62
     ec0:	0f be       	out	0x3f, r0	; 63
     ec2:	cd bf       	out	0x3d, r28	; 61
	char str[] = {' ',' ',' ',' ',0xB0,'C',0};
     ec4:	87 e0       	ldi	r24, 0x07	; 7
     ec6:	ec e7       	ldi	r30, 0x7C	; 124
     ec8:	f0 e0       	ldi	r31, 0x00	; 0
     eca:	de 01       	movw	r26, r28
     ecc:	11 96       	adiw	r26, 0x01	; 1
     ece:	01 90       	ld	r0, Z+
     ed0:	0d 92       	st	X+, r0
     ed2:	8a 95       	dec	r24
     ed4:	e1 f7       	brne	.-8      	; 0xece <mf_setTempDo+0x1e>

	
	if (button_state & (BD_UP | BR_UP))
     ed6:	80 91 be 00 	lds	r24, 0x00BE
     eda:	90 91 bf 00 	lds	r25, 0x00BF
     ede:	9c 01       	movw	r18, r24
     ee0:	22 70       	andi	r18, 0x02	; 2
     ee2:	34 70       	andi	r19, 0x04	; 4
     ee4:	23 2b       	or	r18, r19
     ee6:	71 f0       	breq	.+28     	; 0xf04 <mf_setTempDo+0x54>
	{
		if (setup_temp_value < MAX_SET_TEMP)
     ee8:	80 91 dd 00 	lds	r24, 0x00DD
     eec:	90 91 de 00 	lds	r25, 0x00DE
     ef0:	82 3d       	cpi	r24, 0xD2	; 210
     ef2:	91 05       	cpc	r25, r1
     ef4:	28 f4       	brcc	.+10     	; 0xf00 <mf_setTempDo+0x50>
			setup_temp_value += 5;
     ef6:	05 96       	adiw	r24, 0x05	; 5
     ef8:	90 93 de 00 	sts	0x00DE, r25
     efc:	80 93 dd 00 	sts	0x00DD, r24
		restartMenuTimer();
     f00:	b4 dd       	rcall	.-1176   	; 0xa6a <restartMenuTimer>
     f02:	11 c0       	rjmp	.+34     	; 0xf26 <mf_setTempDo+0x76>
	}
	else if (button_state & (BD_DOWN | BR_DOWN))
     f04:	84 70       	andi	r24, 0x04	; 4
     f06:	98 70       	andi	r25, 0x08	; 8
     f08:	89 2b       	or	r24, r25
     f0a:	69 f0       	breq	.+26     	; 0xf26 <mf_setTempDo+0x76>
	{
		if (setup_temp_value > MIN_SET_TEMP)
     f0c:	80 91 dd 00 	lds	r24, 0x00DD
     f10:	90 91 de 00 	lds	r25, 0x00DE
     f14:	8f 31       	cpi	r24, 0x1F	; 31
     f16:	91 05       	cpc	r25, r1
     f18:	28 f0       	brcs	.+10     	; 0xf24 <mf_setTempDo+0x74>
			setup_temp_value -= 5;
     f1a:	05 97       	sbiw	r24, 0x05	; 5
     f1c:	90 93 de 00 	sts	0x00DE, r25
     f20:	80 93 dd 00 	sts	0x00DD, r24
		restartMenuTimer();
     f24:	a2 dd       	rcall	.-1212   	; 0xa6a <restartMenuTimer>
	}					
		
	// Output ADC result to LED
	u16toa_align_right(setup_temp_value,str,0x80 | 4,' ');
     f26:	20 e2       	ldi	r18, 0x20	; 32
     f28:	44 e8       	ldi	r20, 0x84	; 132
     f2a:	be 01       	movw	r22, r28
     f2c:	6f 5f       	subi	r22, 0xFF	; 255
     f2e:	7f 4f       	sbci	r23, 0xFF	; 255
     f30:	80 91 dd 00 	lds	r24, 0x00DD
     f34:	90 91 de 00 	lds	r25, 0x00DE
     f38:	36 d1       	rcall	.+620    	; 0x11a6 <u16toa_align_right>
	printLedBuffer(0,str);
     f3a:	be 01       	movw	r22, r28
     f3c:	6f 5f       	subi	r22, 0xFF	; 255
     f3e:	7f 4f       	sbci	r23, 0xFF	; 255
     f40:	80 e0       	ldi	r24, 0x00	; 0
     f42:	f6 dc       	rcall	.-1556   	; 0x930 <printLedBuffer>
	
	if (userTimer.FA_GE)
     f44:	80 91 01 01 	lds	r24, 0x0101
     f48:	84 ff       	sbrs	r24, 4
     f4a:	03 c0       	rjmp	.+6      	; 0xf52 <mf_setTempDo+0xa2>
		setExtraLeds(LED_TEMP);
     f4c:	81 e0       	ldi	r24, 0x01	; 1
     f4e:	42 dd       	rcall	.-1404   	; 0x9d4 <setExtraLeds>
     f50:	02 c0       	rjmp	.+4      	; 0xf56 <mf_setTempDo+0xa6>
	else
		clearExtraLeds(LED_TEMP);
     f52:	81 e0       	ldi	r24, 0x01	; 1
     f54:	45 dd       	rcall	.-1398   	; 0x9e0 <clearExtraLeds>
}
     f56:	27 96       	adiw	r28, 0x07	; 7
     f58:	0f b6       	in	r0, 0x3f	; 63
     f5a:	f8 94       	cli
     f5c:	de bf       	out	0x3e, r29	; 62
     f5e:	0f be       	out	0x3f, r0	; 63
     f60:	cd bf       	out	0x3d, r28	; 61
     f62:	df 91       	pop	r29
     f64:	cf 91       	pop	r28
     f66:	08 95       	ret

00000f68 <mf_realTempSelect>:
//=================================================================//


void mf_realTempSelect(void)
{
	setExtraLeds(LED_TEMP);
     f68:	81 e0       	ldi	r24, 0x01	; 1
     f6a:	34 dd       	rcall	.-1432   	; 0x9d4 <setExtraLeds>
     f6c:	08 95       	ret

00000f6e <InitMenu>:
//	Menu initialization
//	Call this function at start of your program before processMenu()
//-----------------------------------------------------------------//
void InitMenu(void)
{
	selectedMenuItemID = mi_REALTEMP;
     f6e:	81 e0       	ldi	r24, 0x01	; 1
     f70:	80 93 fa 00 	sts	0x00FA, r24
     f74:	20 e0       	ldi	r18, 0x00	; 0
     f76:	30 e0       	ldi	r19, 0x00	; 0
static void getMenuFunctionRecord(uint8_t menuItemID, MenuFunctionRecord* menuRecord )
{
	uint8_t i;
	for (i = 0; i < sizeof(menuFunctionSet)/sizeof(MenuFunctionRecord); i++  )
	{
		readMenuRecord(&menuFunctionSet[i], menuRecord);
     f78:	c9 01       	movw	r24, r18
     f7a:	88 0f       	add	r24, r24
     f7c:	99 1f       	adc	r25, r25
     f7e:	88 0f       	add	r24, r24
     f80:	99 1f       	adc	r25, r25
     f82:	88 0f       	add	r24, r24
     f84:	99 1f       	adc	r25, r25
     f86:	82 1b       	sub	r24, r18
     f88:	93 0b       	sbc	r25, r19
     f8a:	88 5b       	subi	r24, 0xB8	; 184
     f8c:	9e 4f       	sbci	r25, 0xFE	; 254
//		fRecPtr		- address of the function record in the FLASH
//		resPtr		- address of the record to fill in the SRAM
//-----------------------------------------------------------------//
static inline void readMenuRecord(const MenuFunctionRecord* fRecPtr, MenuFunctionRecord* resPtr )
{
	resPtr->Item = pgm_read_byte(&fRecPtr->Item);
     f8e:	fc 01       	movw	r30, r24
     f90:	64 91       	lpm	r22, Z
	resPtr->SelectFunction = (FuncPtr)pgm_read_word(&fRecPtr->SelectFunction);
     f92:	31 96       	adiw	r30, 0x01	; 1
     f94:	45 91       	lpm	r20, Z+
     f96:	54 91       	lpm	r21, Z
     f98:	b4 2f       	mov	r27, r20
     f9a:	a5 2f       	mov	r26, r21
	resPtr->RunFunction = (FuncPtr)pgm_read_word(&fRecPtr->RunFunction);
     f9c:	fc 01       	movw	r30, r24
     f9e:	33 96       	adiw	r30, 0x03	; 3
     fa0:	45 91       	lpm	r20, Z+
     fa2:	54 91       	lpm	r21, Z
     fa4:	74 2f       	mov	r23, r20
     fa6:	45 2f       	mov	r20, r21
	resPtr->LeaveFunction = (FuncPtr)pgm_read_word(&fRecPtr->LeaveFunction);
     fa8:	05 96       	adiw	r24, 0x05	; 5
     faa:	fc 01       	movw	r30, r24
     fac:	85 91       	lpm	r24, Z+
     fae:	94 91       	lpm	r25, Z
     fb0:	58 2f       	mov	r21, r24
{
	uint8_t i;
	for (i = 0; i < sizeof(menuFunctionSet)/sizeof(MenuFunctionRecord); i++  )
	{
		readMenuRecord(&menuFunctionSet[i], menuRecord);
		if (menuRecord->Item == menuItemID)
     fb2:	61 30       	cpi	r22, 0x01	; 1
     fb4:	79 f4       	brne	.+30     	; 0xfd4 <InitMenu+0x66>
     fb6:	60 93 05 01 	sts	0x0105, r22
     fba:	e6 e0       	ldi	r30, 0x06	; 6
     fbc:	f1 e0       	ldi	r31, 0x01	; 1
     fbe:	b0 83       	st	Z, r27
     fc0:	a1 83       	std	Z+1, r26	; 0x01
     fc2:	e8 e0       	ldi	r30, 0x08	; 8
     fc4:	f1 e0       	ldi	r31, 0x01	; 1
     fc6:	70 83       	st	Z, r23
     fc8:	41 83       	std	Z+1, r20	; 0x01
     fca:	ea e0       	ldi	r30, 0x0A	; 10
     fcc:	f1 e0       	ldi	r31, 0x01	; 1
     fce:	50 83       	st	Z, r21
     fd0:	91 83       	std	Z+1, r25	; 0x01
     fd2:	14 c0       	rjmp	.+40     	; 0xffc <InitMenu+0x8e>
     fd4:	2f 5f       	subi	r18, 0xFF	; 255
     fd6:	3f 4f       	sbci	r19, 0xFF	; 255
//	Output:
//-----------------------------------------------------------------//
static void getMenuFunctionRecord(uint8_t menuItemID, MenuFunctionRecord* menuRecord )
{
	uint8_t i;
	for (i = 0; i < sizeof(menuFunctionSet)/sizeof(MenuFunctionRecord); i++  )
     fd8:	2d 30       	cpi	r18, 0x0D	; 13
     fda:	31 05       	cpc	r19, r1
     fdc:	09 f0       	breq	.+2      	; 0xfe0 <InitMenu+0x72>
     fde:	cc cf       	rjmp	.-104    	; 0xf78 <InitMenu+0xa>
     fe0:	60 93 05 01 	sts	0x0105, r22
     fe4:	e6 e0       	ldi	r30, 0x06	; 6
     fe6:	f1 e0       	ldi	r31, 0x01	; 1
     fe8:	b0 83       	st	Z, r27
     fea:	a1 83       	std	Z+1, r26	; 0x01
     fec:	e8 e0       	ldi	r30, 0x08	; 8
     fee:	f1 e0       	ldi	r31, 0x01	; 1
     ff0:	70 83       	st	Z, r23
     ff2:	41 83       	std	Z+1, r20	; 0x01
     ff4:	ea e0       	ldi	r30, 0x0A	; 10
     ff6:	f1 e0       	ldi	r31, 0x01	; 1
     ff8:	50 83       	st	Z, r21
     ffa:	91 83       	std	Z+1, r25	; 0x01
//-----------------------------------------------------------------//
void InitMenu(void)
{
	selectedMenuItemID = mi_REALTEMP;
	getMenuFunctionRecord(selectedMenuItemID, &selectedMenuFunctionRecord);
	processItemFunction(selectedMenuFunctionRecord.SelectFunction);
     ffc:	e0 91 06 01 	lds	r30, 0x0106
    1000:	f0 91 07 01 	lds	r31, 0x0107
//	Arguments:
//		funcAddr - address of the function to run.
//-----------------------------------------------------------------//
static inline void processItemFunction(FuncPtr funcAddr)
{
	if (funcAddr != 0)
    1004:	30 97       	sbiw	r30, 0x00	; 0
    1006:	09 f0       	breq	.+2      	; 0x100a <InitMenu+0x9c>
		((FuncPtr)funcAddr)();
    1008:	09 95       	icall
	selectedMenuItemID = mi_REALTEMP;
	getMenuFunctionRecord(selectedMenuItemID, &selectedMenuFunctionRecord);
	processItemFunction(selectedMenuFunctionRecord.SelectFunction);
	
	// Initialize menu state timer
	menuTimer.Timer = 0;
    100a:	10 92 fc 00 	sts	0x00FC, r1
	menuTimer.Enabled = 0;
    100e:	eb ef       	ldi	r30, 0xFB	; 251
    1010:	f0 e0       	ldi	r31, 0x00	; 0
    1012:	80 81       	ld	r24, Z
	menuTimer.RunOnce = 1;
    1014:	8e 7f       	andi	r24, 0xFE	; 254
    1016:	82 60       	ori	r24, 0x02	; 2
    1018:	80 83       	st	Z, r24
	
	// Initialize user timer
	userTimer.Enabled = 0;
    101a:	e1 e0       	ldi	r30, 0x01	; 1
    101c:	f1 e0       	ldi	r31, 0x01	; 1
    101e:	80 81       	ld	r24, Z
	userTimer.RunOnce = 0;
    1020:	8e 7f       	andi	r24, 0xFE	; 254
    1022:	8d 7f       	andi	r24, 0xFD	; 253
    1024:	80 83       	st	Z, r24
    1026:	08 95       	ret

00001028 <processMenu>:
//	Main menu control, -  state function calls, jumps 
//	between menu states and indication
//	Call this function from main() with a fixed time interval.
//-----------------------------------------------------------------//
void processMenu(void)
{
    1028:	ff 92       	push	r15
    102a:	0f 93       	push	r16
    102c:	1f 93       	push	r17
    102e:	cf 93       	push	r28
    1030:	df 93       	push	r29
	NextItem_t nextItem;
	uint16_t jumpCondition;
	
	processSoftTimer8b(&menuTimer);	
    1032:	8b ef       	ldi	r24, 0xFB	; 251
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	30 d3       	rcall	.+1632   	; 0x1698 <processSoftTimer8b>
	
	// Compose jump condition
	jumpCondition = button_state;		
    1038:	40 91 be 00 	lds	r20, 0x00BE
    103c:	50 91 bf 00 	lds	r21, 0x00BF
	if (menuTimer.FTop)
    1040:	80 91 fb 00 	lds	r24, 0x00FB
    1044:	85 fd       	sbrc	r24, 5
		jumpCondition |= TMR_EXP;
    1046:	50 68       	ori	r21, 0x80	; 128
	
	// Get next menu item according to current state and jump conditions
	nextItem = getNextMenuItem(selectedMenuItemID, jumpCondition);
    1048:	b0 91 fa 00 	lds	r27, 0x00FA
    104c:	80 e0       	ldi	r24, 0x00	; 0
    104e:	90 e0       	ldi	r25, 0x00	; 0
	MenuJumpRecord	jRecord;
	uint8_t i;
	
	for (i = 0; i < sizeof(menuJumpSet)/sizeof(MenuJumpRecord); i++  )
	{
		readJumpRecord(&menuJumpSet[i], &jRecord);		// read full jump record
    1050:	9c 01       	movw	r18, r24
    1052:	22 0f       	add	r18, r18
    1054:	33 1f       	adc	r19, r19
    1056:	22 0f       	add	r18, r18
    1058:	33 1f       	adc	r19, r19
    105a:	28 0f       	add	r18, r24
    105c:	39 1f       	adc	r19, r25
    105e:	2d 55       	subi	r18, 0x5D	; 93
    1060:	3e 4f       	sbci	r19, 0xFE	; 254
//		jRecPtr		- address of the jump record in the FLASH
//		resPtr		- address of the record to fill in the SRAM
//-----------------------------------------------------------------//
static inline void readJumpRecord(const MenuJumpRecord* jRecPtr, MenuJumpRecord* resPtr )
{
	resPtr->Item = pgm_read_byte(&jRecPtr->Item);
    1062:	f9 01       	movw	r30, r18
    1064:	a4 91       	lpm	r26, Z
	resPtr->JumpCondition = pgm_read_word(&jRecPtr->JumpCondition);
    1066:	31 96       	adiw	r30, 0x01	; 1
    1068:	65 91       	lpm	r22, Z+
    106a:	74 91       	lpm	r23, Z
	resPtr->NextItem= pgm_read_byte(&jRecPtr->NextItem);
    106c:	f9 01       	movw	r30, r18
    106e:	33 96       	adiw	r30, 0x03	; 3
    1070:	c4 91       	lpm	r28, Z
	resPtr->Flags= pgm_read_byte(&jRecPtr->Flags);
    1072:	f9 01       	movw	r30, r18
    1074:	34 96       	adiw	r30, 0x04	; 4
    1076:	24 91       	lpm	r18, Z
	uint8_t i;
	
	for (i = 0; i < sizeof(menuJumpSet)/sizeof(MenuJumpRecord); i++  )
	{
		readJumpRecord(&menuJumpSet[i], &jRecord);		// read full jump record
		if (jRecord.Item == selectedItemId)				// If ID match,
    1078:	ba 13       	cpse	r27, r26
    107a:	15 c0       	rjmp	.+42     	; 0x10a6 <processMenu+0x7e>
		{
			if ((jRecord.JumpCondition & jmpCond) != 0)		// if any of jump conditions match too,
    107c:	64 23       	and	r22, r20
    107e:	75 23       	and	r23, r21
    1080:	67 2b       	or	r22, r23
    1082:	89 f0       	breq	.+34     	; 0x10a6 <processMenu+0x7e>
			{
				nextItem.ItemID = jRecord.NextItem;			// switch to next menu item
				nextItem.ItemTimeout = jRecord.Flags & TIMEOUT_MASK;
    1084:	d2 2f       	mov	r29, r18
    1086:	df 73       	andi	r29, 0x3F	; 63
				nextItem.ShiftRight = (jRecord.Flags & SHIFT_RIGHT) ? 1 : 0;
    1088:	26 fb       	bst	r18, 6
    108a:	00 27       	eor	r16, r16
    108c:	00 f9       	bld	r16, 0
				nextItem.ShiftLeft = (jRecord.Flags & SHIFT_LEFT) ? 1 : 0;
    108e:	f2 2e       	mov	r15, r18
    1090:	ff 1c       	adc	r15, r15
    1092:	ff 24       	eor	r15, r15
    1094:	ff 1c       	adc	r15, r15
    1096:	10 e0       	ldi	r17, 0x00	; 0
    1098:	f0 fa       	bst	r15, 0
    109a:	10 f9       	bld	r17, 0
    109c:	00 fb       	bst	r16, 0
    109e:	11 f9       	bld	r17, 1
	
	// Get next menu item according to current state and jump conditions
	nextItem = getNextMenuItem(selectedMenuItemID, jumpCondition);
	
	// If next item differs from current
	if (nextItem.ItemID != selectedMenuItemID)
    10a0:	bc 13       	cpse	r27, r28
    10a2:	06 c0       	rjmp	.+12     	; 0x10b0 <processMenu+0x88>
    10a4:	70 c0       	rjmp	.+224    	; 0x1186 <processMenu+0x15e>
    10a6:	01 96       	adiw	r24, 0x01	; 1
	NextItem_t nextItem;
	nextItem.ItemID = selectedItemId;
	MenuJumpRecord	jRecord;
	uint8_t i;
	
	for (i = 0; i < sizeof(menuJumpSet)/sizeof(MenuJumpRecord); i++  )
    10a8:	8d 31       	cpi	r24, 0x1D	; 29
    10aa:	91 05       	cpc	r25, r1
    10ac:	89 f6       	brne	.-94     	; 0x1050 <processMenu+0x28>
    10ae:	6b c0       	rjmp	.+214    	; 0x1186 <processMenu+0x15e>
	
	// If next item differs from current
	if (nextItem.ItemID != selectedMenuItemID)
	{		
		// Call exit function for current item
		processItemFunction(selectedMenuFunctionRecord.LeaveFunction);
    10b0:	e0 91 0a 01 	lds	r30, 0x010A
    10b4:	f0 91 0b 01 	lds	r31, 0x010B
//	Arguments:
//		funcAddr - address of the function to run.
//-----------------------------------------------------------------//
static inline void processItemFunction(FuncPtr funcAddr)
{
	if (funcAddr != 0)
    10b8:	30 97       	sbiw	r30, 0x00	; 0
    10ba:	09 f0       	breq	.+2      	; 0x10be <processMenu+0x96>
		((FuncPtr)funcAddr)();
    10bc:	09 95       	icall
		// Call exit function for current item
		processItemFunction(selectedMenuFunctionRecord.LeaveFunction);
		
		// If shifting is specified, start it before calling any 
		//	new menu item functions 
		if (nextItem.ShiftRight)
    10be:	f0 fa       	bst	r15, 0
    10c0:	10 f9       	bld	r17, 0
    10c2:	00 fb       	bst	r16, 0
    10c4:	11 f9       	bld	r17, 1
    10c6:	11 ff       	sbrs	r17, 1
    10c8:	02 c0       	rjmp	.+4      	; 0x10ce <processMenu+0xa6>
			startShiftingWindowRight();
    10ca:	01 dc       	rcall	.-2046   	; 0x8ce <startShiftingWindowRight>
    10cc:	02 c0       	rjmp	.+4      	; 0x10d2 <processMenu+0xaa>
		else if (nextItem.ShiftLeft)
    10ce:	10 fd       	sbrc	r17, 0
			startShiftingWindowLeft();
    10d0:	f0 db       	rcall	.-2080   	; 0x8b2 <startShiftingWindowLeft>
		
		// Select new item
		selectedMenuItemID = nextItem.ItemID;
    10d2:	c0 93 fa 00 	sts	0x00FA, r28
    10d6:	20 e0       	ldi	r18, 0x00	; 0
    10d8:	30 e0       	ldi	r19, 0x00	; 0
static void getMenuFunctionRecord(uint8_t menuItemID, MenuFunctionRecord* menuRecord )
{
	uint8_t i;
	for (i = 0; i < sizeof(menuFunctionSet)/sizeof(MenuFunctionRecord); i++  )
	{
		readMenuRecord(&menuFunctionSet[i], menuRecord);
    10da:	c9 01       	movw	r24, r18
    10dc:	88 0f       	add	r24, r24
    10de:	99 1f       	adc	r25, r25
    10e0:	88 0f       	add	r24, r24
    10e2:	99 1f       	adc	r25, r25
    10e4:	88 0f       	add	r24, r24
    10e6:	99 1f       	adc	r25, r25
    10e8:	82 1b       	sub	r24, r18
    10ea:	93 0b       	sbc	r25, r19
    10ec:	88 5b       	subi	r24, 0xB8	; 184
    10ee:	9e 4f       	sbci	r25, 0xFE	; 254
//		fRecPtr		- address of the function record in the FLASH
//		resPtr		- address of the record to fill in the SRAM
//-----------------------------------------------------------------//
static inline void readMenuRecord(const MenuFunctionRecord* fRecPtr, MenuFunctionRecord* resPtr )
{
	resPtr->Item = pgm_read_byte(&fRecPtr->Item);
    10f0:	fc 01       	movw	r30, r24
    10f2:	64 91       	lpm	r22, Z
	resPtr->SelectFunction = (FuncPtr)pgm_read_word(&fRecPtr->SelectFunction);
    10f4:	31 96       	adiw	r30, 0x01	; 1
    10f6:	45 91       	lpm	r20, Z+
    10f8:	54 91       	lpm	r21, Z
    10fa:	b4 2f       	mov	r27, r20
    10fc:	a5 2f       	mov	r26, r21
	resPtr->RunFunction = (FuncPtr)pgm_read_word(&fRecPtr->RunFunction);
    10fe:	fc 01       	movw	r30, r24
    1100:	33 96       	adiw	r30, 0x03	; 3
    1102:	45 91       	lpm	r20, Z+
    1104:	54 91       	lpm	r21, Z
    1106:	74 2f       	mov	r23, r20
    1108:	45 2f       	mov	r20, r21
	resPtr->LeaveFunction = (FuncPtr)pgm_read_word(&fRecPtr->LeaveFunction);
    110a:	05 96       	adiw	r24, 0x05	; 5
    110c:	fc 01       	movw	r30, r24
    110e:	85 91       	lpm	r24, Z+
    1110:	94 91       	lpm	r25, Z
    1112:	58 2f       	mov	r21, r24
{
	uint8_t i;
	for (i = 0; i < sizeof(menuFunctionSet)/sizeof(MenuFunctionRecord); i++  )
	{
		readMenuRecord(&menuFunctionSet[i], menuRecord);
		if (menuRecord->Item == menuItemID)
    1114:	c6 13       	cpse	r28, r22
    1116:	0f c0       	rjmp	.+30     	; 0x1136 <processMenu+0x10e>
    1118:	60 93 05 01 	sts	0x0105, r22
    111c:	e6 e0       	ldi	r30, 0x06	; 6
    111e:	f1 e0       	ldi	r31, 0x01	; 1
    1120:	b0 83       	st	Z, r27
    1122:	a1 83       	std	Z+1, r26	; 0x01
    1124:	e8 e0       	ldi	r30, 0x08	; 8
    1126:	f1 e0       	ldi	r31, 0x01	; 1
    1128:	70 83       	st	Z, r23
    112a:	41 83       	std	Z+1, r20	; 0x01
    112c:	ea e0       	ldi	r30, 0x0A	; 10
    112e:	f1 e0       	ldi	r31, 0x01	; 1
    1130:	50 83       	st	Z, r21
    1132:	91 83       	std	Z+1, r25	; 0x01
    1134:	14 c0       	rjmp	.+40     	; 0x115e <processMenu+0x136>
    1136:	2f 5f       	subi	r18, 0xFF	; 255
    1138:	3f 4f       	sbci	r19, 0xFF	; 255
//	Output:
//-----------------------------------------------------------------//
static void getMenuFunctionRecord(uint8_t menuItemID, MenuFunctionRecord* menuRecord )
{
	uint8_t i;
	for (i = 0; i < sizeof(menuFunctionSet)/sizeof(MenuFunctionRecord); i++  )
    113a:	2d 30       	cpi	r18, 0x0D	; 13
    113c:	31 05       	cpc	r19, r1
    113e:	09 f0       	breq	.+2      	; 0x1142 <processMenu+0x11a>
    1140:	cc cf       	rjmp	.-104    	; 0x10da <processMenu+0xb2>
    1142:	60 93 05 01 	sts	0x0105, r22
    1146:	e6 e0       	ldi	r30, 0x06	; 6
    1148:	f1 e0       	ldi	r31, 0x01	; 1
    114a:	b0 83       	st	Z, r27
    114c:	a1 83       	std	Z+1, r26	; 0x01
    114e:	e8 e0       	ldi	r30, 0x08	; 8
    1150:	f1 e0       	ldi	r31, 0x01	; 1
    1152:	70 83       	st	Z, r23
    1154:	41 83       	std	Z+1, r20	; 0x01
    1156:	ea e0       	ldi	r30, 0x0A	; 10
    1158:	f1 e0       	ldi	r31, 0x01	; 1
    115a:	50 83       	st	Z, r21
    115c:	91 83       	std	Z+1, r25	; 0x01
		selectedMenuItemID = nextItem.ItemID;
		
		// Load from FLASH and save function pointers
		getMenuFunctionRecord(selectedMenuItemID, &selectedMenuFunctionRecord);
		// Call select function for next item
		processItemFunction(selectedMenuFunctionRecord.SelectFunction);
    115e:	e0 91 06 01 	lds	r30, 0x0106
    1162:	f0 91 07 01 	lds	r31, 0x0107
//	Arguments:
//		funcAddr - address of the function to run.
//-----------------------------------------------------------------//
static inline void processItemFunction(FuncPtr funcAddr)
{
	if (funcAddr != 0)
    1166:	30 97       	sbiw	r30, 0x00	; 0
    1168:	09 f0       	breq	.+2      	; 0x116c <processMenu+0x144>
		((FuncPtr)funcAddr)();
    116a:	09 95       	icall
		// Load from FLASH and save function pointers
		getMenuFunctionRecord(selectedMenuItemID, &selectedMenuFunctionRecord);
		// Call select function for next item
		processItemFunction(selectedMenuFunctionRecord.SelectFunction);
		// Start timer if timeout is enabled
		if (nextItem.ItemTimeout != 0)
    116c:	dd 23       	and	r29, r29
    116e:	a9 f0       	breq	.+42     	; 0x119a <processMenu+0x172>
		{
			menuTimer.Top = nextItem.ItemTimeout * MENU_TIMEOUT_MULT;
    1170:	dd 0f       	add	r29, r29
    1172:	d0 93 fd 00 	sts	0x00FD, r29
			menuTimer.Timer = 0;
    1176:	10 92 fc 00 	sts	0x00FC, r1
			menuTimer.Enabled = 1;	
    117a:	eb ef       	ldi	r30, 0xFB	; 251
    117c:	f0 e0       	ldi	r31, 0x00	; 0
    117e:	80 81       	ld	r24, Z
    1180:	81 60       	ori	r24, 0x01	; 1
    1182:	80 83       	st	Z, r24
    1184:	0a c0       	rjmp	.+20     	; 0x119a <processMenu+0x172>
		}
		
	}
	else
	{
		processSoftTimer8b(&userTimer);
    1186:	81 e0       	ldi	r24, 0x01	; 1
    1188:	91 e0       	ldi	r25, 0x01	; 1
    118a:	86 d2       	rcall	.+1292   	; 0x1698 <processSoftTimer8b>
		// Stay at previous item
		processItemFunction(selectedMenuFunctionRecord.RunFunction);
    118c:	e0 91 08 01 	lds	r30, 0x0108
    1190:	f0 91 09 01 	lds	r31, 0x0109
//	Arguments:
//		funcAddr - address of the function to run.
//-----------------------------------------------------------------//
static inline void processItemFunction(FuncPtr funcAddr)
{
	if (funcAddr != 0)
    1194:	30 97       	sbiw	r30, 0x00	; 0
    1196:	09 f0       	breq	.+2      	; 0x119a <processMenu+0x172>
		((FuncPtr)funcAddr)();
    1198:	09 95       	icall
	{
		processSoftTimer8b(&userTimer);
		// Stay at previous item
		processItemFunction(selectedMenuFunctionRecord.RunFunction);
	}	
}
    119a:	df 91       	pop	r29
    119c:	cf 91       	pop	r28
    119e:	1f 91       	pop	r17
    11a0:	0f 91       	pop	r16
    11a2:	ff 90       	pop	r15
    11a4:	08 95       	ret

000011a6 <u16toa_align_right>:
// Converts uint16_t value into decimal string with right alignment
// len = number of digits output (without terminating '\0')
// len[7] = 1 -> no terminating '\0' at buffer[len]
// fill_char -> char used for string padding
void u16toa_align_right(uint16_t val, char *buffer, uint8_t len,char fill_char)
{
    11a6:	cf 93       	push	r28
    11a8:	df 93       	push	r29
    11aa:	fc 01       	movw	r30, r24
    11ac:	52 2f       	mov	r21, r18
	if (len & 0x80)
    11ae:	44 23       	and	r20, r20
    11b0:	2c f4       	brge	.+10     	; 0x11bc <u16toa_align_right+0x16>
	{
		len = len & 0x7F;
    11b2:	4f 77       	andi	r20, 0x7F	; 127
		buffer += len;	
    11b4:	eb 01       	movw	r28, r22
    11b6:	c4 0f       	add	r28, r20
    11b8:	d1 1d       	adc	r29, r1
    11ba:	04 c0       	rjmp	.+8      	; 0x11c4 <u16toa_align_right+0x1e>
	}
	else
	{
		buffer += len;	
    11bc:	eb 01       	movw	r28, r22
    11be:	c4 0f       	add	r28, r20
    11c0:	d1 1d       	adc	r29, r1
		*buffer = 0;
    11c2:	18 82       	st	Y, r1
	}
	
	do
	{
		*--buffer = val % 10 + '0';
    11c4:	9f 01       	movw	r18, r30
    11c6:	ad ec       	ldi	r26, 0xCD	; 205
    11c8:	bc ec       	ldi	r27, 0xCC	; 204
    11ca:	2b d3       	rcall	.+1622   	; 0x1822 <__umulhisi3>
    11cc:	96 95       	lsr	r25
    11ce:	87 95       	ror	r24
    11d0:	96 95       	lsr	r25
    11d2:	87 95       	ror	r24
    11d4:	96 95       	lsr	r25
    11d6:	87 95       	ror	r24
    11d8:	dc 01       	movw	r26, r24
    11da:	aa 0f       	add	r26, r26
    11dc:	bb 1f       	adc	r27, r27
    11de:	bc 01       	movw	r22, r24
    11e0:	66 0f       	add	r22, r22
    11e2:	77 1f       	adc	r23, r23
    11e4:	66 0f       	add	r22, r22
    11e6:	77 1f       	adc	r23, r23
    11e8:	66 0f       	add	r22, r22
    11ea:	77 1f       	adc	r23, r23
    11ec:	6a 0f       	add	r22, r26
    11ee:	7b 1f       	adc	r23, r27
    11f0:	e6 1b       	sub	r30, r22
    11f2:	f7 0b       	sbc	r31, r23
    11f4:	e0 5d       	subi	r30, 0xD0	; 208
    11f6:	ea 93       	st	-Y, r30
		val /= 10;
    11f8:	fc 01       	movw	r30, r24
		len--;
    11fa:	41 50       	subi	r20, 0x01	; 1
	}
	while ((val != 0) && len);
    11fc:	00 97       	sbiw	r24, 0x00	; 0
    11fe:	29 f4       	brne	.+10     	; 0x120a <u16toa_align_right+0x64>
	
	// Padding
	while(len--)
    1200:	84 2f       	mov	r24, r20
    1202:	81 50       	subi	r24, 0x01	; 1
    1204:	41 11       	cpse	r20, r1
    1206:	04 c0       	rjmp	.+8      	; 0x1210 <u16toa_align_right+0x6a>
    1208:	07 c0       	rjmp	.+14     	; 0x1218 <u16toa_align_right+0x72>
	{
		*--buffer = val % 10 + '0';
		val /= 10;
		len--;
	}
	while ((val != 0) && len);
    120a:	41 11       	cpse	r20, r1
    120c:	db cf       	rjmp	.-74     	; 0x11c4 <u16toa_align_right+0x1e>
    120e:	04 c0       	rjmp	.+8      	; 0x1218 <u16toa_align_right+0x72>
    1210:	fe 01       	movw	r30, r28
	
	// Padding
	while(len--)
		*--buffer = fill_char;
    1212:	52 93       	st	-Z, r21
		len--;
	}
	while ((val != 0) && len);
	
	// Padding
	while(len--)
    1214:	81 50       	subi	r24, 0x01	; 1
    1216:	e8 f7       	brcc	.-6      	; 0x1212 <u16toa_align_right+0x6c>
		*--buffer = fill_char;
}
    1218:	df 91       	pop	r29
    121a:	cf 91       	pop	r28
    121c:	08 95       	ret

0000121e <init_system>:
//extern void powTest(void);

void init_system()
{
	// Setup Port D
	PORTD = 0; //(1<<PD_SYNCA | 1<<PD_SYNCB);
    121e:	12 ba       	out	0x12, r1	; 18
	DDRD = (1<<PD_TXD | 1<<PD_M1 | 1<<PD_M2 | 1<<PD_HEATER | 1<<PD_HEAT_INDIC );
    1220:	8e e3       	ldi	r24, 0x3E	; 62
    1222:	81 bb       	out	0x11, r24	; 17
	
	// Setup Port B
	PORTB = 0;
    1224:	18 ba       	out	0x18, r1	; 24
	DDRB = (1<<PB_BEEPER | 1<<PB_LED_DOUT | 1<<PB_LED_CLK | 1<<PB_SEGF | 1<<PB_SEGG | 1<<PB_SEGH);
    1226:	8f e3       	ldi	r24, 0x3F	; 63
    1228:	87 bb       	out	0x17, r24	; 23
	
	PORTC = 0;
    122a:	15 ba       	out	0x15, r1	; 21
	DDRC = (1<<PC_SEGA | 1<<PC_SEGB | 1<<PC_SEGC | 1<<PC_SEGD | 1<<PC_SEGE);	
    122c:	8f e1       	ldi	r24, 0x1F	; 31
    122e:	84 bb       	out	0x14, r24	; 20

	// Setup timer0
	// 1/1024 prescaler, T=64us @16MHz
	TCCR0 = (1<<CS02 | 0<<CS01 | 1<<CS00);
    1230:	85 e0       	ldi	r24, 0x05	; 5
    1232:	83 bf       	out	0x33, r24	; 51
	// Start 256 * 64us = 16384us interval
	TCNT0 = 0;
    1234:	12 be       	out	0x32, r1	; 50
	// Clear interrupt flag
	TIFR |= (1<<TOV0);
    1236:	88 b7       	in	r24, 0x38	; 56
    1238:	81 60       	ori	r24, 0x01	; 1
    123a:	88 bf       	out	0x38, r24	; 56
	// Enable interrupts from timer 0
	TIMSK |= (1<<TOIE0);
    123c:	89 b7       	in	r24, 0x39	; 57
    123e:	81 60       	ori	r24, 0x01	; 1
    1240:	89 bf       	out	0x39, r24	; 57
	
	// Setup timer2 as 1ms system frequency generator
	// 1/64 prescaler, CTC mode, OC2 disconnected
	TCCR2 = (1<<CS22 | 1<<WGM21);
    1242:	8c e0       	ldi	r24, 0x0C	; 12
    1244:	85 bd       	out	0x25, r24	; 37
	OCR2 = 249;
    1246:	89 ef       	ldi	r24, 0xF9	; 249
    1248:	83 bd       	out	0x23, r24	; 35
	TIMSK |= (1<<OCIE2);
    124a:	89 b7       	in	r24, 0x39	; 57
    124c:	80 68       	ori	r24, 0x80	; 128
    124e:	89 bf       	out	0x39, r24	; 57
	
	// Setup timer1 as beeper frequency generator
	// CTC mode, 1/64 prescaler
	TCCR1A = 0;
    1250:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = (1<<WGM12 | 1<<CS11 | 1<<CS10);
    1252:	8b e0       	ldi	r24, 0x0B	; 11
    1254:	8e bd       	out	0x2e, r24	; 46
	// 1kHz beeper frequency default
	OCR1A = 127;
    1256:	8f e7       	ldi	r24, 0x7F	; 127
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	9b bd       	out	0x2b, r25	; 43
    125c:	8a bd       	out	0x2a, r24	; 42

	// Setup AC sync comparator
	// Interrupt on output toggle
	ACSR |= (1<<ACI);
    125e:	44 9a       	sbi	0x08, 4	; 8
	ACSR = (1<<ACIE | 0<<ACIS1 | 0<<ACIS0);
    1260:	88 e0       	ldi	r24, 0x08	; 8
    1262:	88 b9       	out	0x08, r24	; 8
	
	// Setup ADC
	// Internal Vref + cap, input ADC5, 
	ADMUX = (1<<REFS1 | 1<<REFS0 | 0<<MUX3 | 1<<MUX2 | 0<<MUX1 | 1<<MUX0 );
    1264:	85 ec       	ldi	r24, 0xC5	; 197
    1266:	87 b9       	out	0x07, r24	; 7
	// Prescaler = 128
	ADCSRA = (1<<ADEN |/* 1<<ADFR |*/  1<<ADIE | 1<<ADPS2 | 1<<ADPS1 | 1<<ADPS0);
    1268:	8f e8       	ldi	r24, 0x8F	; 143
    126a:	86 b9       	out	0x06, r24	; 6
	
	// Setup USART
	// Double speed
	UCSRA = (1<<U2X);
    126c:	82 e0       	ldi	r24, 0x02	; 2
    126e:	8b b9       	out	0x0b, r24	; 11
	UCSRB = (1<<RXEN | 1<<TXEN | 0<<UCSZ2);
    1270:	88 e1       	ldi	r24, 0x18	; 24
    1272:	8a b9       	out	0x0a, r24	; 10
	// No parity, 1 stop bit, 8 bit
	UCSRC = (1<<URSEL | 0<<UPM1 | 0<<UPM0 | 0<<USBS | 1<<UCSZ1 | 1<<UCSZ0);
    1274:	86 e8       	ldi	r24, 0x86	; 134
    1276:	80 bd       	out	0x20, r24	; 32
	// 57600 @16MHz, 2x
	UBRRH=0x00;
    1278:	10 bc       	out	0x20, r1	; 32
	UBRRL=0x22;
    127a:	82 e2       	ldi	r24, 0x22	; 34
    127c:	89 b9       	out	0x09, r24	; 9
    127e:	08 95       	ret

00001280 <main>:




int main(void)
{
    1280:	cf 93       	push	r28
    1282:	df 93       	push	r29
    1284:	cd b7       	in	r28, 0x3d	; 61
    1286:	de b7       	in	r29, 0x3e	; 62
    1288:	2a 97       	sbiw	r28, 0x0a	; 10
    128a:	0f b6       	in	r0, 0x3f	; 63
    128c:	f8 94       	cli
    128e:	de bf       	out	0x3e, r29	; 62
    1290:	0f be       	out	0x3f, r0	; 63
    1292:	cd bf       	out	0x3d, r28	; 61
	uint16_t uart_log_counter = 0;
	
	//powTest();
	
	// Initialize IO
	init_system();
    1294:	c4 df       	rcall	.-120    	; 0x121e <init_system>
	
	// Restore params
	restoreGlobalParams();
    1296:	f8 d9       	rcall	.-3088   	; 0x688 <restoreGlobalParams>
	
	// Calibrate ADC coefficients using restored params
	calculateCoeffs();
    1298:	2b d8       	rcall	.-4010   	; 0x2f0 <calculateCoeffs>
	
	// Initialize LED indicator
	initLedIndicator();
    129a:	27 db       	rcall	.-2482   	; 0x8ea <initLedIndicator>
	
	// Enable interrupts
	sei();
    129c:	78 94       	sei
	
	// Beep
	SetBeeperFreq(1000);
    129e:	88 ee       	ldi	r24, 0xE8	; 232
    12a0:	93 e0       	ldi	r25, 0x03	; 3
    12a2:	28 d2       	rcall	.+1104   	; 0x16f4 <SetBeeperFreq>
	StartBeep(200);
    12a4:	88 ec       	ldi	r24, 0xC8	; 200
    12a6:	90 e0       	ldi	r25, 0x00	; 0
    12a8:	46 d2       	rcall	.+1164   	; 0x1736 <StartBeep>
	
	InitMenu();
    12aa:	61 de       	rcall	.-830    	; 0xf6e <InitMenu>

	setMotorDirection(ROLL_FWD);
    12ac:	81 e0       	ldi	r24, 0x01	; 1
    12ae:	84 d0       	rcall	.+264    	; 0x13b8 <setMotorDirection>
	
	//button_state = BD_UP;
	//processMenu();
	
	printLedBuffer(0,"      ");
    12b0:	68 e9       	ldi	r22, 0x98	; 152
    12b2:	70 e0       	ldi	r23, 0x00	; 0
    12b4:	80 e0       	ldi	r24, 0x00	; 0
    12b6:	3c db       	rcall	.-2440   	; 0x930 <printLedBuffer>
int main(void)
{
	char str[10];
	uint8_t temp8u = 0x00;
	uint8_t uart_log_timeout_counter = 0;
	uint16_t uart_log_counter = 0;
    12b8:	e1 2c       	mov	r14, r1
    12ba:	f1 2c       	mov	r15, r1
	printLedBuffer(0,"      ");
	
    while(1)
    {
		
		if (menuUpdateTimer.FOvfl)
    12bc:	03 e6       	ldi	r16, 0x63	; 99
    12be:	10 e0       	ldi	r17, 0x00	; 0
    12c0:	f8 01       	movw	r30, r16
    12c2:	80 81       	ld	r24, Z
    12c4:	86 ff       	sbrs	r24, 6
    12c6:	fc cf       	rjmp	.-8      	; 0x12c0 <main+0x40>
		{
			// Get new temperature measurement - new value is pushed into ring buffer
			// once every AC line period
			update_filtered_adc();
    12c8:	63 d8       	rcall	.-3898   	; 0x390 <update_filtered_adc>
			
			// Get new button state
			process_buttons();
    12ca:	cd d8       	rcall	.-3686   	; 0x466 <process_buttons>
			
			// Give audio feedback
			if (button_state & BL_MENU)
    12cc:	20 91 be 00 	lds	r18, 0x00BE
    12d0:	30 91 bf 00 	lds	r19, 0x00BF
    12d4:	31 ff       	sbrs	r19, 1
    12d6:	07 c0       	rjmp	.+14     	; 0x12e6 <main+0x66>
			{
				SetBeeperFreq(800);
    12d8:	80 e2       	ldi	r24, 0x20	; 32
    12da:	93 e0       	ldi	r25, 0x03	; 3
    12dc:	0b d2       	rcall	.+1046   	; 0x16f4 <SetBeeperFreq>
				StartBeep(40);
    12de:	88 e2       	ldi	r24, 0x28	; 40
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	29 d2       	rcall	.+1106   	; 0x1736 <StartBeep>
    12e4:	0a c0       	rjmp	.+20     	; 0x12fa <main+0x7a>
			}
			else if (button_action_down & (BD_MENU | BD_UP | BD_DOWN | BD_HEATCTRL))
    12e6:	80 91 bd 00 	lds	r24, 0x00BD
    12ea:	87 74       	andi	r24, 0x47	; 71
    12ec:	31 f0       	breq	.+12     	; 0x12fa <main+0x7a>
			{
				SetBeeperFreq(1000);
    12ee:	88 ee       	ldi	r24, 0xE8	; 232
    12f0:	93 e0       	ldi	r25, 0x03	; 3
    12f2:	00 d2       	rcall	.+1024   	; 0x16f4 <SetBeeperFreq>
				StartBeep(40);
    12f4:	88 e2       	ldi	r24, 0x28	; 40
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	1e d2       	rcall	.+1084   	; 0x1736 <StartBeep>
			}	
			

			// Process user menu states, settings and indication
			processMenu();
    12fa:	96 de       	rcall	.-724    	; 0x1028 <processMenu>
			
			// Process cyclic rolling, direction control
			processRollControl();	
    12fc:	27 d9       	rcall	.-3506   	; 0x54c <processRollControl>
			
			// Process heater regulation
			processHeaterControl();
    12fe:	9e d9       	rcall	.-3268   	; 0x63c <processHeaterControl>
		


			if (menuUpdateTimer.FA_TGL)
    1300:	f8 01       	movw	r30, r16
    1302:	80 81       	ld	r24, Z
    1304:	82 ff       	sbrs	r24, 2
    1306:	42 c0       	rjmp	.+132    	; 0x138c <main+0x10c>
				//---------------------------------//
				// Function is called every 50ms
				// UART message is sent every second call
				
										
				u16toa_align_right(uart_log_counter,str,5,' ');			// log message counter
    1308:	20 e2       	ldi	r18, 0x20	; 32
    130a:	45 e0       	ldi	r20, 0x05	; 5
    130c:	be 01       	movw	r22, r28
    130e:	6f 5f       	subi	r22, 0xFF	; 255
    1310:	7f 4f       	sbci	r23, 0xFF	; 255
    1312:	c7 01       	movw	r24, r14
    1314:	48 df       	rcall	.-368    	; 0x11a6 <u16toa_align_right>
				USART_sendstr(str);
    1316:	ce 01       	movw	r24, r28
    1318:	01 96       	adiw	r24, 0x01	; 1
    131a:	54 d2       	rcall	.+1192   	; 0x17c4 <USART_sendstr>
				USART_sendstr("     ");
    131c:	89 e9       	ldi	r24, 0x99	; 153
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	51 d2       	rcall	.+1186   	; 0x17c4 <USART_sendstr>
				
				u16toa_align_right(adc_filtered_value,str,5,' ');		// ADC filtered value
    1322:	20 e2       	ldi	r18, 0x20	; 32
    1324:	45 e0       	ldi	r20, 0x05	; 5
    1326:	be 01       	movw	r22, r28
    1328:	6f 5f       	subi	r22, 0xFF	; 255
    132a:	7f 4f       	sbci	r23, 0xFF	; 255
    132c:	80 91 d8 00 	lds	r24, 0x00D8
    1330:	90 91 d9 00 	lds	r25, 0x00D9
    1334:	38 df       	rcall	.-400    	; 0x11a6 <u16toa_align_right>
				USART_sendstr(str);
    1336:	ce 01       	movw	r24, r28
    1338:	01 96       	adiw	r24, 0x01	; 1
    133a:	44 d2       	rcall	.+1160   	; 0x17c4 <USART_sendstr>
				USART_sendstr("     ");
    133c:	89 e9       	ldi	r24, 0x99	; 153
    133e:	90 e0       	ldi	r25, 0x00	; 0
    1340:	41 d2       	rcall	.+1154   	; 0x17c4 <USART_sendstr>
				
				u16toa_align_right(adc_filtered_celsius,str,5,' ');		// Celsius degree
    1342:	20 e2       	ldi	r18, 0x20	; 32
    1344:	45 e0       	ldi	r20, 0x05	; 5
    1346:	be 01       	movw	r22, r28
    1348:	6f 5f       	subi	r22, 0xFF	; 255
    134a:	7f 4f       	sbci	r23, 0xFF	; 255
    134c:	80 91 da 00 	lds	r24, 0x00DA
    1350:	90 91 db 00 	lds	r25, 0x00DB
    1354:	28 df       	rcall	.-432    	; 0x11a6 <u16toa_align_right>
				USART_sendstr(str);
    1356:	ce 01       	movw	r24, r28
    1358:	01 96       	adiw	r24, 0x01	; 1
    135a:	34 d2       	rcall	.+1128   	; 0x17c4 <USART_sendstr>
				USART_sendstr("     ");
    135c:	89 e9       	ldi	r24, 0x99	; 153
    135e:	90 e0       	ldi	r25, 0x00	; 0
    1360:	31 d2       	rcall	.+1122   	; 0x17c4 <USART_sendstr>
				
				u16toa_align_right(ctrl_heater,str,2,' ');				// Heater control (0 to 10)
    1362:	20 e2       	ldi	r18, 0x20	; 32
    1364:	42 e0       	ldi	r20, 0x02	; 2
    1366:	be 01       	movw	r22, r28
    1368:	6f 5f       	subi	r22, 0xFF	; 255
    136a:	7f 4f       	sbci	r23, 0xFF	; 255
    136c:	80 91 cc 00 	lds	r24, 0x00CC
    1370:	90 e0       	ldi	r25, 0x00	; 0
    1372:	19 df       	rcall	.-462    	; 0x11a6 <u16toa_align_right>
				USART_sendstr(str);
    1374:	ce 01       	movw	r24, r28
    1376:	01 96       	adiw	r24, 0x01	; 1
    1378:	25 d2       	rcall	.+1098   	; 0x17c4 <USART_sendstr>
				USART_sendstr("     ");
    137a:	89 e9       	ldi	r24, 0x99	; 153
    137c:	90 e0       	ldi	r25, 0x00	; 0
    137e:	22 d2       	rcall	.+1092   	; 0x17c4 <USART_sendstr>
				
				
				USART_sendstr("\n\r");
    1380:	8f e9       	ldi	r24, 0x9F	; 159
    1382:	90 e0       	ldi	r25, 0x00	; 0
    1384:	1f d2       	rcall	.+1086   	; 0x17c4 <USART_sendstr>
				
				uart_log_counter++;
    1386:	ff ef       	ldi	r31, 0xFF	; 255
    1388:	ef 1a       	sub	r14, r31
    138a:	ff 0a       	sbc	r15, r31
				//---------------------------------//
				
			}
			
			
			processAutoPowerOff();	// TODO
    138c:	b8 d9       	rcall	.-3216   	; 0x6fe <processAutoPowerOff>
			
			
			
			menuUpdateTimer.FOvfl = 0;	
    138e:	f8 01       	movw	r30, r16
    1390:	80 81       	ld	r24, Z
    1392:	8f 7b       	andi	r24, 0xBF	; 191
    1394:	80 83       	st	Z, r24
    1396:	94 cf       	rjmp	.-216    	; 0x12c0 <main+0x40>

00001398 <setHeaterControl>:


// User function to control heater intensity
void setHeaterControl(uint8_t value)
{
	ctrl_heater = value;
    1398:	80 93 cc 00 	sts	0x00CC, r24
	heaterState &= ~READY_TO_UPDATE_HEATER;
    139c:	90 91 cb 00 	lds	r25, 0x00CB
    13a0:	29 2f       	mov	r18, r25
    13a2:	2f 77       	andi	r18, 0x7F	; 127
	
	if (ctrl_heater)
    13a4:	88 23       	and	r24, r24
    13a6:	21 f0       	breq	.+8      	; 0x13b0 <setHeaterControl+0x18>
		heaterState |= HEATER_ENABLED;
    13a8:	20 64       	ori	r18, 0x40	; 64
    13aa:	20 93 cb 00 	sts	0x00CB, r18
    13ae:	08 95       	ret
	else
		heaterState &= ~HEATER_ENABLED;	
    13b0:	9f 73       	andi	r25, 0x3F	; 63
    13b2:	90 93 cb 00 	sts	0x00CB, r25
    13b6:	08 95       	ret

000013b8 <setMotorDirection>:
	
// User function to control motor rotation
void setMotorDirection(uint8_t dir)
{
	// Disable interrupts from timer0 
	TIMSK &= ~(1<<TOIE0);
    13b8:	99 b7       	in	r25, 0x39	; 57
    13ba:	9e 7f       	andi	r25, 0xFE	; 254
    13bc:	99 bf       	out	0x39, r25	; 57
		
	newDirReq = dir;	// save new direction request
    13be:	80 93 cd 00 	sts	0x00CD, r24
	
	if (dir & ROLL_FWD)
    13c2:	80 ff       	sbrs	r24, 0
    13c4:	09 c0       	rjmp	.+18     	; 0x13d8 <setMotorDirection+0x20>
		bottomPoint = rollPoint;
    13c6:	80 91 ce 00 	lds	r24, 0x00CE
    13ca:	90 91 cf 00 	lds	r25, 0x00CF
    13ce:	90 93 d1 00 	sts	0x00D1, r25
    13d2:	80 93 d0 00 	sts	0x00D0, r24
    13d6:	0a c0       	rjmp	.+20     	; 0x13ec <setMotorDirection+0x34>
	else if (dir & ROLL_REV)
    13d8:	81 ff       	sbrs	r24, 1
    13da:	08 c0       	rjmp	.+16     	; 0x13ec <setMotorDirection+0x34>
		topPoint = rollPoint;
    13dc:	80 91 ce 00 	lds	r24, 0x00CE
    13e0:	90 91 cf 00 	lds	r25, 0x00CF
    13e4:	90 93 d3 00 	sts	0x00D3, r25
    13e8:	80 93 d2 00 	sts	0x00D2, r24
		

	// Enable interrupts from timer 0
	TIMSK |= (1<<TOIE0);	
    13ec:	89 b7       	in	r24, 0x39	; 57
    13ee:	81 60       	ori	r24, 0x01	; 1
    13f0:	89 bf       	out	0x39, r24	; 57
    13f2:	08 95       	ret

000013f4 <stopCycleRolling>:
}

void stopCycleRolling(uint8_t doResetPoints)
{
	// Disable interrupts from timer0 
	TIMSK &= ~(1<<TOIE0);
    13f4:	99 b7       	in	r25, 0x39	; 57
    13f6:	9e 7f       	andi	r25, 0xFE	; 254
    13f8:	99 bf       	out	0x39, r25	; 57
	
	rollState &= ~ROLL_CYCLE;
    13fa:	90 91 ca 00 	lds	r25, 0x00CA
    13fe:	9b 7f       	andi	r25, 0xFB	; 251
    1400:	90 93 ca 00 	sts	0x00CA, r25
	if (doResetPoints)
    1404:	88 23       	and	r24, r24
    1406:	71 f0       	breq	.+28     	; 0x1424 <stopCycleRolling+0x30>
	{
		topPoint = bottomPoint = rollPoint;
    1408:	80 91 ce 00 	lds	r24, 0x00CE
    140c:	90 91 cf 00 	lds	r25, 0x00CF
    1410:	90 93 d1 00 	sts	0x00D1, r25
    1414:	80 93 d0 00 	sts	0x00D0, r24
    1418:	90 93 d3 00 	sts	0x00D3, r25
    141c:	80 93 d2 00 	sts	0x00D2, r24
		activeRollCycle = 0;	
    1420:	10 92 0c 01 	sts	0x010C, r1
	}		
	
	// Enable interrupts from timer 0
	TIMSK |= (1<<TOIE0);
    1424:	89 b7       	in	r24, 0x39	; 57
    1426:	81 60       	ori	r24, 0x01	; 1
    1428:	89 bf       	out	0x39, r24	; 57
    142a:	08 95       	ret

0000142c <isTopPointValid>:
}
*/

uint8_t isTopPointValid(void)
{
	return (	(int16_t)(topPoint - rollPoint) >= 0 );
    142c:	80 91 d2 00 	lds	r24, 0x00D2
    1430:	90 91 d3 00 	lds	r25, 0x00D3
    1434:	20 91 ce 00 	lds	r18, 0x00CE
    1438:	30 91 cf 00 	lds	r19, 0x00CF
    143c:	82 1b       	sub	r24, r18
    143e:	93 0b       	sbc	r25, r19
    1440:	89 2f       	mov	r24, r25
    1442:	80 95       	com	r24
}
    1444:	88 1f       	adc	r24, r24
    1446:	88 27       	eor	r24, r24
    1448:	88 1f       	adc	r24, r24
    144a:	08 95       	ret

0000144c <isBottomPointValid>:

uint8_t isBottomPointValid(void)
{
	return (	(int16_t)(rollPoint - bottomPoint) >= 0	);
    144c:	80 91 ce 00 	lds	r24, 0x00CE
    1450:	90 91 cf 00 	lds	r25, 0x00CF
    1454:	20 91 d0 00 	lds	r18, 0x00D0
    1458:	30 91 d1 00 	lds	r19, 0x00D1
    145c:	82 1b       	sub	r24, r18
    145e:	93 0b       	sbc	r25, r19
    1460:	89 2f       	mov	r24, r25
    1462:	80 95       	com	r24
}
    1464:	88 1f       	adc	r24, r24
    1466:	88 27       	eor	r24, r24
    1468:	88 1f       	adc	r24, r24
    146a:	08 95       	ret

0000146c <startCycleRolling>:


uint8_t startCycleRolling(void)
{
	// Disable interrupts from timer0 
	TIMSK &= ~(1<<TOIE0);
    146c:	89 b7       	in	r24, 0x39	; 57
    146e:	8e 7f       	andi	r24, 0xFE	; 254
    1470:	89 bf       	out	0x39, r24	; 57
	
	if ( isTopPointValid() && isBottomPointValid() )
    1472:	dc df       	rcall	.-72     	; 0x142c <isTopPointValid>
    1474:	88 23       	and	r24, r24
    1476:	59 f0       	breq	.+22     	; 0x148e <startCycleRolling+0x22>
    1478:	e9 df       	rcall	.-46     	; 0x144c <isBottomPointValid>
    147a:	88 23       	and	r24, r24
    147c:	41 f0       	breq	.+16     	; 0x148e <startCycleRolling+0x22>
	{
		rollState |= ROLL_CYCLE;
    147e:	80 91 ca 00 	lds	r24, 0x00CA
    1482:	84 60       	ori	r24, 0x04	; 4
    1484:	80 93 ca 00 	sts	0x00CA, r24
		activeRollCycle = 1;
    1488:	81 e0       	ldi	r24, 0x01	; 1
    148a:	80 93 0c 01 	sts	0x010C, r24
	}
	
	// Enable interrupts from timer 0
	TIMSK |= (1<<TOIE0);
    148e:	89 b7       	in	r24, 0x39	; 57
    1490:	81 60       	ori	r24, 0x01	; 1
    1492:	89 bf       	out	0x39, r24	; 57
	
	return (rollState & ROLL_CYCLE);
    1494:	80 91 ca 00 	lds	r24, 0x00CA
}
    1498:	84 70       	andi	r24, 0x04	; 4
    149a:	08 95       	ret

0000149c <__vector_16>:




ISR(ANA_COMP_vect)
{
    149c:	1f 92       	push	r1
    149e:	0f 92       	push	r0
    14a0:	0f b6       	in	r0, 0x3f	; 63
    14a2:	0f 92       	push	r0
    14a4:	11 24       	eor	r1, r1
    14a6:	8f 93       	push	r24
    14a8:	9f 93       	push	r25
	// Once triggered, disable further comparator interrupt
	ACSR &= ~(1<<ACIE);
    14aa:	43 98       	cbi	0x08, 3	; 8
	// Turn on heater TRIAC
	if (heater_cnt < ctrl_heater_sync)
    14ac:	90 91 d4 00 	lds	r25, 0x00D4
    14b0:	80 91 d5 00 	lds	r24, 0x00D5
    14b4:	98 17       	cp	r25, r24
    14b6:	20 f4       	brcc	.+8      	; 0x14c0 <__vector_16+0x24>
		PORTD |= (1<<PD_HEATER | 1<<PD_HEAT_INDIC);	// Direct heater indication
    14b8:	82 b3       	in	r24, 0x12	; 18
    14ba:	80 63       	ori	r24, 0x30	; 48
    14bc:	82 bb       	out	0x12, r24	; 18
    14be:	01 c0       	rjmp	.+2      	; 0x14c2 <__vector_16+0x26>
	else
		PORTD &= ~(1<<PD_HEAT_INDIC);
    14c0:	95 98       	cbi	0x12, 5	; 18
	// Reprogram timer0
	TCNT0 = 256 - TRIAC_IMPULSE_TIME;		// Triac gate impulse time
    14c2:	86 ef       	ldi	r24, 0xF6	; 246
    14c4:	82 bf       	out	0x32, r24	; 50
	// Modify state	
	p_state &= ~STATE_MASK;					// Start new state machine cycle
    14c6:	80 91 62 00 	lds	r24, 0x0062
    14ca:	80 7f       	andi	r24, 0xF0	; 240
	p_state ^= HALF_PERIOD_FLAG;			// Toggle flag
    14cc:	80 58       	subi	r24, 0x80	; 128
    14ce:	80 93 62 00 	sts	0x0062, r24
	
}
    14d2:	9f 91       	pop	r25
    14d4:	8f 91       	pop	r24
    14d6:	0f 90       	pop	r0
    14d8:	0f be       	out	0x3f, r0	; 63
    14da:	0f 90       	pop	r0
    14dc:	1f 90       	pop	r1
    14de:	18 95       	reti

000014e0 <__vector_9>:



ISR(TIMER0_OVF_vect)
{
    14e0:	1f 92       	push	r1
    14e2:	0f 92       	push	r0
    14e4:	0f b6       	in	r0, 0x3f	; 63
    14e6:	0f 92       	push	r0
    14e8:	11 24       	eor	r1, r1
    14ea:	2f 93       	push	r18
    14ec:	3f 93       	push	r19
    14ee:	4f 93       	push	r20
    14f0:	5f 93       	push	r21
    14f2:	6f 93       	push	r22
    14f4:	7f 93       	push	r23
    14f6:	8f 93       	push	r24
    14f8:	9f 93       	push	r25
    14fa:	af 93       	push	r26
    14fc:	bf 93       	push	r27
    14fe:	ef 93       	push	r30
    1500:	ff 93       	push	r31
	uint8_t temp;
	
	switch(p_state & STATE_MASK)
    1502:	80 91 62 00 	lds	r24, 0x0062
    1506:	8f 70       	andi	r24, 0x0F	; 15
    1508:	81 30       	cpi	r24, 0x01	; 1
    150a:	51 f0       	breq	.+20     	; 0x1520 <__vector_9+0x40>
    150c:	28 f0       	brcs	.+10     	; 0x1518 <__vector_9+0x38>
    150e:	82 30       	cpi	r24, 0x02	; 2
    1510:	51 f0       	breq	.+20     	; 0x1526 <__vector_9+0x46>
    1512:	83 30       	cpi	r24, 0x03	; 3
    1514:	71 f4       	brne	.+28     	; 0x1532 <__vector_9+0x52>
    1516:	0c c0       	rjmp	.+24     	; 0x1530 <__vector_9+0x50>
	{
		// TRIAC_IMPULSE_TIME finished
		case 0x00:
			// Turn off heater TRIAC
			PORTD &= ~(1<<PD_HEATER);
    1518:	94 98       	cbi	0x12, 4	; 18
			TCNT0 = 256 - (QUATER_PERIOD_TIME - TRIAC_IMPULSE_TIME);
    151a:	8c eb       	ldi	r24, 0xBC	; 188
    151c:	82 bf       	out	0x32, r24	; 50
			break;
    151e:	09 c0       	rjmp	.+18     	; 0x1532 <__vector_9+0x52>
		// QUATER_PERIOD_TIME finished	
		case 0x01:	
			TCNT0 = 256 - (SYNC_IGNORE_TIME - QUATER_PERIOD_TIME);
    1520:	82 ec       	ldi	r24, 0xC2	; 194
    1522:	82 bf       	out	0x32, r24	; 50
			// Start ADC conversion once every AC line period
	////		if (!(p_state & HALF_PERIOD_FLAG))
	////			ADCSRA |= (1<<ADSC);
			break;	
    1524:	06 c0       	rjmp	.+12     	; 0x1532 <__vector_9+0x52>
		// SYNC_IGNORE_TIME finished	
		case 0x02:
			TCNT0 = 256 - SYNC_LOST_TIMEOUT;
    1526:	80 ee       	ldi	r24, 0xE0	; 224
    1528:	82 bf       	out	0x32, r24	; 50
			// Clear flag and enable interrupt from analog comparator
			ACSR |= (1<<ACI);
    152a:	44 9a       	sbi	0x08, 4	; 8
			ACSR |= (1<<ACIE);
    152c:	43 9a       	sbi	0x08, 3	; 8
			break;
    152e:	01 c0       	rjmp	.+2      	; 0x1532 <__vector_9+0x52>
		// SYNC_LOST_TIMEOUT finished
		case 0x03:
			// Error - sync is lost. It means that device has been disconnected from AC line.
			// Disable all power-consuming devices like LEDs and save user settings to EEPROM.
			exitPowerOff();
    1530:	e5 d8       	rcall	.-3638   	; 0x6fc <exitPowerOff>
			// Sync is not present - TODO
			break;
	}	

	// Full period check
	if ((p_state & (HALF_PERIOD_FLAG | STATE_MASK)) == (HALF_PERIOD_FLAG | 0x01))
    1532:	80 91 62 00 	lds	r24, 0x0062
    1536:	8f 78       	andi	r24, 0x8F	; 143
    1538:	81 38       	cpi	r24, 0x81	; 129
    153a:	09 f0       	breq	.+2      	; 0x153e <__vector_9+0x5e>
    153c:	93 c0       	rjmp	.+294    	; 0x1664 <__vector_9+0x184>
	{
		// Full AC line period is done. Update controls.
		
		temp = PORTD;
    153e:	92 b3       	in	r25, 0x12	; 18
		temp &= ~(1<<PD_M1 | 1<<PD_M2);
    1540:	93 7f       	andi	r25, 0xF3	; 243
		if ( rollState & SKIP_CURRENT_MOTOR_CTRL )
    1542:	80 91 ca 00 	lds	r24, 0x00CA
    1546:	83 ff       	sbrs	r24, 3
    1548:	05 c0       	rjmp	.+10     	; 0x1554 <__vector_9+0x74>
		{
			// Direction control changed. Skip current period to allow TRIACs fully close
			rollState &= ~SKIP_CURRENT_MOTOR_CTRL;
    154a:	87 7f       	andi	r24, 0xF7	; 247
    154c:	80 93 ca 00 	sts	0x00CA, r24
			PORTD = temp; 	
    1550:	92 bb       	out	0x12, r25	; 18
    1552:	75 c0       	rjmp	.+234    	; 0x163e <__vector_9+0x15e>
		}
		else
		{
			// Apply direction control 
			if (rollState & ROLL_FWD)
    1554:	80 ff       	sbrs	r24, 0
    1556:	02 c0       	rjmp	.+4      	; 0x155c <__vector_9+0x7c>
				temp |= (1<<PD_M1);
    1558:	94 60       	ori	r25, 0x04	; 4
    155a:	02 c0       	rjmp	.+4      	; 0x1560 <__vector_9+0x80>
			else if (rollState & ROLL_REV)
    155c:	81 fd       	sbrc	r24, 1
				temp |= (1<<PD_M2);
    155e:	98 60       	ori	r25, 0x08	; 8
			PORTD = temp; 
    1560:	92 bb       	out	0x12, r25	; 18
// Function to process rolling - sets rotation direction for next period
// Call once per each AC line period
static inline void controlRolling()
{
	// Process cycle rolling
	switch(rollState & (ROLL_FWD | ROLL_REV | ROLL_CYCLE))
    1562:	40 91 ca 00 	lds	r20, 0x00CA
    1566:	84 2f       	mov	r24, r20
    1568:	87 70       	andi	r24, 0x07	; 7
    156a:	85 30       	cpi	r24, 0x05	; 5
    156c:	19 f0       	breq	.+6      	; 0x1574 <__vector_9+0x94>
    156e:	86 30       	cpi	r24, 0x06	; 6
    1570:	f1 f5       	brne	.+124    	; 0x15ee <__vector_9+0x10e>
    1572:	1f c0       	rjmp	.+62     	; 0x15b2 <__vector_9+0xd2>
//---------------------------------------------//
//---------------------------------------------//

static inline uint8_t reachedTopPoint(void)
{
	return (	(int16_t)(topPoint - rollPoint) <= 0 );
    1574:	80 91 d2 00 	lds	r24, 0x00D2
    1578:	90 91 d3 00 	lds	r25, 0x00D3
    157c:	20 91 ce 00 	lds	r18, 0x00CE
    1580:	30 91 cf 00 	lds	r19, 0x00CF
    1584:	82 1b       	sub	r24, r18
    1586:	93 0b       	sbc	r25, r19
{
	// Process cycle rolling
	switch(rollState & (ROLL_FWD | ROLL_REV | ROLL_CYCLE))
	{
		case (ROLL_FWD | ROLL_CYCLE):
			if (reachedTopPoint())
    1588:	18 16       	cp	r1, r24
    158a:	19 06       	cpc	r1, r25
    158c:	84 f1       	brlt	.+96     	; 0x15ee <__vector_9+0x10e>
			{
				if (activeRollCycle >= rollCycleSet)	
    158e:	80 91 0c 01 	lds	r24, 0x010C
    1592:	90 91 e0 00 	lds	r25, 0x00E0
    1596:	89 17       	cp	r24, r25
    1598:	28 f0       	brcs	.+10     	; 0x15a4 <__vector_9+0xc4>
				{
					// DONE!
					rollState &= ~ROLL_CYCLE;
    159a:	4b 7f       	andi	r20, 0xFB	; 251
					rollState |= CYCLE_ROLL_DONE;
    159c:	40 61       	ori	r20, 0x10	; 16
    159e:	40 93 ca 00 	sts	0x00CA, r20
    15a2:	25 c0       	rjmp	.+74     	; 0x15ee <__vector_9+0x10e>
				}
				else
				{
					activeRollCycle++;
    15a4:	8f 5f       	subi	r24, 0xFF	; 255
    15a6:	80 93 0c 01 	sts	0x010C, r24
					// Change dir	
					newDirReq = ROLL_REV;				
    15aa:	82 e0       	ldi	r24, 0x02	; 2
    15ac:	80 93 cd 00 	sts	0x00CD, r24
    15b0:	1e c0       	rjmp	.+60     	; 0x15ee <__vector_9+0x10e>
	return (	(int16_t)(topPoint - rollPoint) <= 0 );
}

static inline uint8_t reachedBottomPoint(void)
{
	return (	(int16_t)(rollPoint - bottomPoint) <= 0 );
    15b2:	80 91 ce 00 	lds	r24, 0x00CE
    15b6:	90 91 cf 00 	lds	r25, 0x00CF
    15ba:	20 91 d0 00 	lds	r18, 0x00D0
    15be:	30 91 d1 00 	lds	r19, 0x00D1
    15c2:	82 1b       	sub	r24, r18
    15c4:	93 0b       	sbc	r25, r19
				}
			}
			break;
		
		case (ROLL_REV | ROLL_CYCLE):	
			if (reachedBottomPoint())
    15c6:	18 16       	cp	r1, r24
    15c8:	19 06       	cpc	r1, r25
    15ca:	8c f0       	brlt	.+34     	; 0x15ee <__vector_9+0x10e>
			{
				if (activeRollCycle >= rollCycleSet)	
    15cc:	80 91 0c 01 	lds	r24, 0x010C
    15d0:	90 91 e0 00 	lds	r25, 0x00E0
    15d4:	89 17       	cp	r24, r25
    15d6:	28 f0       	brcs	.+10     	; 0x15e2 <__vector_9+0x102>
				{
					// DONE!
					rollState &= ~ROLL_CYCLE;
    15d8:	4b 7f       	andi	r20, 0xFB	; 251
					rollState |= CYCLE_ROLL_DONE;
    15da:	40 61       	ori	r20, 0x10	; 16
    15dc:	40 93 ca 00 	sts	0x00CA, r20
    15e0:	06 c0       	rjmp	.+12     	; 0x15ee <__vector_9+0x10e>
				}
				else
				{
					activeRollCycle++;
    15e2:	8f 5f       	subi	r24, 0xFF	; 255
    15e4:	80 93 0c 01 	sts	0x010C, r24
					// Change dir	
					newDirReq = ROLL_FWD;
    15e8:	81 e0       	ldi	r24, 0x01	; 1
    15ea:	80 93 cd 00 	sts	0x00CD, r24
		default:
			break;
	}
	
	// Process direction change
	if ((rollState ^ newDirReq) & (ROLL_FWD | ROLL_REV))
    15ee:	80 91 ca 00 	lds	r24, 0x00CA
    15f2:	90 91 cd 00 	lds	r25, 0x00CD
    15f6:	29 2f       	mov	r18, r25
    15f8:	28 27       	eor	r18, r24
    15fa:	23 70       	andi	r18, 0x03	; 3
    15fc:	19 f0       	breq	.+6      	; 0x1604 <__vector_9+0x124>
	{
		rollState |= (SKIP_CURRENT_MOTOR_CTRL | ROLL_DIR_CHANGED);
    15fe:	88 62       	ori	r24, 0x28	; 40
    1600:	80 93 ca 00 	sts	0x00CA, r24
	}
	rollState &= ~(ROLL_FWD | ROLL_REV);
    1604:	80 91 ca 00 	lds	r24, 0x00CA
    1608:	8c 7f       	andi	r24, 0xFC	; 252
	rollState |= newDirReq;
    160a:	89 2b       	or	r24, r25
    160c:	80 93 ca 00 	sts	0x00CA, r24
	return (	(int16_t)(rollPoint - bottomPoint) <= 0 );
}

static inline void updateRollPoint(void)
{	
	if (rollState & ROLL_FWD)
    1610:	80 ff       	sbrs	r24, 0
    1612:	0a c0       	rjmp	.+20     	; 0x1628 <__vector_9+0x148>
		rollPoint++;
    1614:	80 91 ce 00 	lds	r24, 0x00CE
    1618:	90 91 cf 00 	lds	r25, 0x00CF
    161c:	01 96       	adiw	r24, 0x01	; 1
    161e:	90 93 cf 00 	sts	0x00CF, r25
    1622:	80 93 ce 00 	sts	0x00CE, r24
    1626:	0b c0       	rjmp	.+22     	; 0x163e <__vector_9+0x15e>
	else if (rollState & ROLL_REV)
    1628:	81 ff       	sbrs	r24, 1
    162a:	09 c0       	rjmp	.+18     	; 0x163e <__vector_9+0x15e>
		rollPoint--;	
    162c:	80 91 ce 00 	lds	r24, 0x00CE
    1630:	90 91 cf 00 	lds	r25, 0x00CF
    1634:	01 97       	sbiw	r24, 0x01	; 1
    1636:	90 93 cf 00 	sts	0x00CF, r25
    163a:	80 93 ce 00 	sts	0x00CE, r24
			controlRolling();
		}
			

		// Process heater control counter
		if (heater_cnt == HEATER_REGULATION_PERIODS - 1)
    163e:	80 91 d4 00 	lds	r24, 0x00D4
    1642:	89 30       	cpi	r24, 0x09	; 9
    1644:	61 f4       	brne	.+24     	; 0x165e <__vector_9+0x17e>
		{
			heater_cnt = 0;
    1646:	10 92 d4 00 	sts	0x00D4, r1
			ctrl_heater_sync = ctrl_heater;
    164a:	80 91 cc 00 	lds	r24, 0x00CC
    164e:	80 93 d5 00 	sts	0x00D5, r24
			heaterState |= READY_TO_UPDATE_HEATER;
    1652:	80 91 cb 00 	lds	r24, 0x00CB
    1656:	80 68       	ori	r24, 0x80	; 128
    1658:	80 93 cb 00 	sts	0x00CB, r24
    165c:	03 c0       	rjmp	.+6      	; 0x1664 <__vector_9+0x184>
		}
		else
		{
			heater_cnt++;
    165e:	8f 5f       	subi	r24, 0xFF	; 255
    1660:	80 93 d4 00 	sts	0x00D4, r24
			
			
	}
	

	if ((p_state & STATE_MASK)  != 0x0F)
    1664:	80 91 62 00 	lds	r24, 0x0062
    1668:	98 2f       	mov	r25, r24
    166a:	9f 70       	andi	r25, 0x0F	; 15
    166c:	9f 30       	cpi	r25, 0x0F	; 15
    166e:	19 f0       	breq	.+6      	; 0x1676 <__vector_9+0x196>
		p_state++;
    1670:	8f 5f       	subi	r24, 0xFF	; 255
    1672:	80 93 62 00 	sts	0x0062, r24

}	
    1676:	ff 91       	pop	r31
    1678:	ef 91       	pop	r30
    167a:	bf 91       	pop	r27
    167c:	af 91       	pop	r26
    167e:	9f 91       	pop	r25
    1680:	8f 91       	pop	r24
    1682:	7f 91       	pop	r23
    1684:	6f 91       	pop	r22
    1686:	5f 91       	pop	r21
    1688:	4f 91       	pop	r20
    168a:	3f 91       	pop	r19
    168c:	2f 91       	pop	r18
    168e:	0f 90       	pop	r0
    1690:	0f be       	out	0x3f, r0	; 63
    1692:	0f 90       	pop	r0
    1694:	1f 90       	pop	r1
    1696:	18 95       	reti

00001698 <processSoftTimer8b>:
 
 
 
 
 void processSoftTimer8b(SoftTimer8b_t *tmr)
 {
    1698:	fc 01       	movw	r30, r24
	 uint8_t newTimerVal;

	 if (!tmr->Enabled)
    169a:	80 81       	ld	r24, Z
    169c:	80 ff       	sbrs	r24, 0
    169e:	29 c0       	rjmp	.+82     	; 0x16f2 <processSoftTimer8b+0x5a>
		return;
	 
	 tmr->FA_EQ = 0;
	 tmr->FA_GE = 0;
	 tmr->FTop = 0;
    16a0:	87 7e       	andi	r24, 0xE7	; 231
    16a2:	8f 7d       	andi	r24, 0xDF	; 223
    16a4:	80 83       	st	Z, r24
	 
	 if (tmr->Timer >= tmr->Top)
    16a6:	81 81       	ldd	r24, Z+1	; 0x01
    16a8:	92 81       	ldd	r25, Z+2	; 0x02
    16aa:	89 17       	cp	r24, r25
    16ac:	58 f0       	brcs	.+22     	; 0x16c4 <processSoftTimer8b+0x2c>
	 {
		 if (tmr->RunOnce)
    16ae:	90 81       	ld	r25, Z
    16b0:	91 ff       	sbrs	r25, 1
    16b2:	02 c0       	rjmp	.+4      	; 0x16b8 <processSoftTimer8b+0x20>
		 {
			 tmr->Enabled = 0;
    16b4:	9e 7f       	andi	r25, 0xFE	; 254
    16b6:	90 83       	st	Z, r25
		 }
		 tmr->FTop = 1;
    16b8:	90 81       	ld	r25, Z
		 tmr->FOvfl = 1;
    16ba:	90 62       	ori	r25, 0x20	; 32
    16bc:	90 64       	ori	r25, 0x40	; 64
    16be:	90 83       	st	Z, r25
		 newTimerVal = 0;
    16c0:	20 e0       	ldi	r18, 0x00	; 0
    16c2:	02 c0       	rjmp	.+4      	; 0x16c8 <processSoftTimer8b+0x30>
	 }
	 else
	 {
		 newTimerVal = tmr->Timer + 1;
    16c4:	28 2f       	mov	r18, r24
    16c6:	2f 5f       	subi	r18, 0xFF	; 255
	 }
	 
	 if (tmr->Timer == tmr->CompA)
    16c8:	93 81       	ldd	r25, Z+3	; 0x03
    16ca:	89 13       	cpse	r24, r25
    16cc:	0c c0       	rjmp	.+24     	; 0x16e6 <processSoftTimer8b+0x4e>
	 {
		 tmr->FA_EQ = 1;
    16ce:	80 81       	ld	r24, Z
		 tmr->FA_GE = 1;
    16d0:	88 60       	ori	r24, 0x08	; 8
    16d2:	80 61       	ori	r24, 0x10	; 16
		 tmr->FA_TGL = !tmr->FA_TGL;
    16d4:	82 fb       	bst	r24, 2
    16d6:	33 27       	eor	r19, r19
    16d8:	30 f9       	bld	r19, 0
    16da:	91 e0       	ldi	r25, 0x01	; 1
    16dc:	93 27       	eor	r25, r19
    16de:	90 fb       	bst	r25, 0
    16e0:	82 f9       	bld	r24, 2
    16e2:	80 83       	st	Z, r24
    16e4:	05 c0       	rjmp	.+10     	; 0x16f0 <processSoftTimer8b+0x58>
	 }
	 else if (tmr->Timer >= tmr->CompA)
    16e6:	89 17       	cp	r24, r25
    16e8:	18 f0       	brcs	.+6      	; 0x16f0 <processSoftTimer8b+0x58>
	 {
		 tmr->FA_GE = 1;
    16ea:	80 81       	ld	r24, Z
    16ec:	80 61       	ori	r24, 0x10	; 16
    16ee:	80 83       	st	Z, r24
	 }
	 
	 tmr->Timer = newTimerVal; 
    16f0:	21 83       	std	Z+1, r18	; 0x01
    16f2:	08 95       	ret

000016f4 <SetBeeperFreq>:
}

// Setup beeper frequency (Hz)
void SetBeeperFreq(uint16_t freq_hz)
{
	uint16_t period_us = 1000000 / freq_hz;
    16f4:	9c 01       	movw	r18, r24
    16f6:	40 e0       	ldi	r20, 0x00	; 0
    16f8:	50 e0       	ldi	r21, 0x00	; 0
    16fa:	60 e4       	ldi	r22, 0x40	; 64
    16fc:	72 e4       	ldi	r23, 0x42	; 66
    16fe:	8f e0       	ldi	r24, 0x0F	; 15
    1700:	90 e0       	ldi	r25, 0x00	; 0
    1702:	74 d0       	rcall	.+232    	; 0x17ec <__divmodsi4>
	if (period_us & 0xFFF8)
    1704:	da 01       	movw	r26, r20
    1706:	c9 01       	movw	r24, r18
    1708:	88 7f       	andi	r24, 0xF8	; 248
    170a:	aa 27       	eor	r26, r26
    170c:	bb 27       	eor	r27, r27
    170e:	89 2b       	or	r24, r25
    1710:	59 f0       	breq	.+22     	; 0x1728 <SetBeeperFreq+0x34>
		OCR1A = (period_us>>3) - 1;
    1712:	36 95       	lsr	r19
    1714:	27 95       	ror	r18
    1716:	36 95       	lsr	r19
    1718:	27 95       	ror	r18
    171a:	36 95       	lsr	r19
    171c:	27 95       	ror	r18
    171e:	21 50       	subi	r18, 0x01	; 1
    1720:	31 09       	sbc	r19, r1
    1722:	3b bd       	out	0x2b, r19	; 43
    1724:	2a bd       	out	0x2a, r18	; 42
    1726:	04 c0       	rjmp	.+8      	; 0x1730 <SetBeeperFreq+0x3c>
	else
		OCR1A = 0x1;
    1728:	81 e0       	ldi	r24, 0x01	; 1
    172a:	90 e0       	ldi	r25, 0x00	; 0
    172c:	9b bd       	out	0x2b, r25	; 43
    172e:	8a bd       	out	0x2a, r24	; 42
	TCNT1 = 0;
    1730:	1d bc       	out	0x2d, r1	; 45
    1732:	1c bc       	out	0x2c, r1	; 44
    1734:	08 95       	ret

00001736 <StartBeep>:
}

// Beep for some time in ms
void StartBeep(uint16_t time_ms)
{
	if (sound_enable)
    1736:	20 91 df 00 	lds	r18, 0x00DF
    173a:	22 23       	and	r18, r18
    173c:	39 f0       	breq	.+14     	; 0x174c <StartBeep+0x16>
	{
		beep_cnt = time_ms;
    173e:	90 93 d7 00 	sts	0x00D7, r25
    1742:	80 93 d6 00 	sts	0x00D6, r24
// Enable / disable beeper output
inline void SetBeepOutput(uint8_t val)
{
	if (val)
		// Toggle OCR1A on compare match
		TCCR1A |= (1<<COM1A0);
    1746:	8f b5       	in	r24, 0x2f	; 47
    1748:	80 64       	ori	r24, 0x40	; 64
    174a:	8f bd       	out	0x2f, r24	; 47
    174c:	08 95       	ret

0000174e <__vector_3>:
}



ISR(TIMER2_COMP_vect)
{	
    174e:	1f 92       	push	r1
    1750:	0f 92       	push	r0
    1752:	0f b6       	in	r0, 0x3f	; 63
    1754:	0f 92       	push	r0
    1756:	11 24       	eor	r1, r1
    1758:	2f 93       	push	r18
    175a:	3f 93       	push	r19
    175c:	4f 93       	push	r20
    175e:	5f 93       	push	r21
    1760:	6f 93       	push	r22
    1762:	7f 93       	push	r23
    1764:	8f 93       	push	r24
    1766:	9f 93       	push	r25
    1768:	af 93       	push	r26
    176a:	bf 93       	push	r27
    176c:	ef 93       	push	r30
    176e:	ff 93       	push	r31
	// Manage beeper
	if (beep_cnt)
    1770:	80 91 d6 00 	lds	r24, 0x00D6
    1774:	90 91 d7 00 	lds	r25, 0x00D7
    1778:	00 97       	sbiw	r24, 0x00	; 0
    177a:	31 f0       	breq	.+12     	; 0x1788 <__vector_3+0x3a>
		beep_cnt--;
    177c:	01 97       	sbiw	r24, 0x01	; 1
    177e:	90 93 d7 00 	sts	0x00D7, r25
    1782:	80 93 d6 00 	sts	0x00D6, r24
    1786:	03 c0       	rjmp	.+6      	; 0x178e <__vector_3+0x40>
	if (val)
		// Toggle OCR1A on compare match
		TCCR1A |= (1<<COM1A0);
	else
		// Disable OCR1A output
		TCCR1A &= ~(1<<COM1A0 | 1<<COM1A1);
    1788:	8f b5       	in	r24, 0x2f	; 47
    178a:	8f 73       	andi	r24, 0x3F	; 63
    178c:	8f bd       	out	0x2f, r24	; 47
		beep_cnt--;
	else
		SetBeepOutput(0);	// done
	
	// Manage LED indicator
	processLedIndicator();
    178e:	0a d8       	rcall	.-4076   	; 0x7a4 <processLedIndicator>
	
	// Process menu update timer
	processSoftTimer8b(&menuUpdateTimer);	
    1790:	83 e6       	ldi	r24, 0x63	; 99
    1792:	90 e0       	ldi	r25, 0x00	; 0
    1794:	81 df       	rcall	.-254    	; 0x1698 <processSoftTimer8b>
	
		ADCSRA |= (1<<ADSC);
    1796:	36 9a       	sbi	0x06, 6	; 6
}
    1798:	ff 91       	pop	r31
    179a:	ef 91       	pop	r30
    179c:	bf 91       	pop	r27
    179e:	af 91       	pop	r26
    17a0:	9f 91       	pop	r25
    17a2:	8f 91       	pop	r24
    17a4:	7f 91       	pop	r23
    17a6:	6f 91       	pop	r22
    17a8:	5f 91       	pop	r21
    17aa:	4f 91       	pop	r20
    17ac:	3f 91       	pop	r19
    17ae:	2f 91       	pop	r18
    17b0:	0f 90       	pop	r0
    17b2:	0f be       	out	0x3f, r0	; 63
    17b4:	0f 90       	pop	r0
    17b6:	1f 90       	pop	r1
    17b8:	18 95       	reti

000017ba <USART_send>:



void USART_send( uint8_t data )
{
	UCSRA |= (1<<TXC);                 // Clear flag
    17ba:	5e 9a       	sbi	0x0b, 6	; 11
	UDR = data;
    17bc:	8c b9       	out	0x0c, r24	; 12
	while ( !(UCSRA & (1<<TXC)) );  // Wait
    17be:	5e 9b       	sbis	0x0b, 6	; 11
    17c0:	fe cf       	rjmp	.-4      	; 0x17be <USART_send+0x4>
}
    17c2:	08 95       	ret

000017c4 <USART_sendstr>:


void USART_sendstr(char* str)
{
    17c4:	1f 93       	push	r17
    17c6:	cf 93       	push	r28
    17c8:	df 93       	push	r29
    17ca:	ec 01       	movw	r28, r24
	uint8_t i = 0;
	while (str[i])
    17cc:	88 81       	ld	r24, Y
    17ce:	88 23       	and	r24, r24
    17d0:	49 f0       	breq	.+18     	; 0x17e4 <USART_sendstr+0x20>
}


void USART_sendstr(char* str)
{
	uint8_t i = 0;
    17d2:	10 e0       	ldi	r17, 0x00	; 0
	while (str[i])
	{
		USART_send(str[i++]);
    17d4:	1f 5f       	subi	r17, 0xFF	; 255
    17d6:	f1 df       	rcall	.-30     	; 0x17ba <USART_send>


void USART_sendstr(char* str)
{
	uint8_t i = 0;
	while (str[i])
    17d8:	fe 01       	movw	r30, r28
    17da:	e1 0f       	add	r30, r17
    17dc:	f1 1d       	adc	r31, r1
    17de:	80 81       	ld	r24, Z
    17e0:	81 11       	cpse	r24, r1
    17e2:	f8 cf       	rjmp	.-16     	; 0x17d4 <USART_sendstr+0x10>
	{
		USART_send(str[i++]);
	}
}
    17e4:	df 91       	pop	r29
    17e6:	cf 91       	pop	r28
    17e8:	1f 91       	pop	r17
    17ea:	08 95       	ret

000017ec <__divmodsi4>:
    17ec:	05 2e       	mov	r0, r21
    17ee:	97 fb       	bst	r25, 7
    17f0:	16 f4       	brtc	.+4      	; 0x17f6 <__divmodsi4+0xa>
    17f2:	00 94       	com	r0
    17f4:	06 d0       	rcall	.+12     	; 0x1802 <__divmodsi4_neg1>
    17f6:	57 fd       	sbrc	r21, 7
    17f8:	0c d0       	rcall	.+24     	; 0x1812 <__divmodsi4_neg2>
    17fa:	2f d0       	rcall	.+94     	; 0x185a <__udivmodsi4>
    17fc:	07 fc       	sbrc	r0, 7
    17fe:	09 d0       	rcall	.+18     	; 0x1812 <__divmodsi4_neg2>
    1800:	7e f4       	brtc	.+30     	; 0x1820 <__divmodsi4_exit>

00001802 <__divmodsi4_neg1>:
    1802:	90 95       	com	r25
    1804:	80 95       	com	r24
    1806:	70 95       	com	r23
    1808:	61 95       	neg	r22
    180a:	7f 4f       	sbci	r23, 0xFF	; 255
    180c:	8f 4f       	sbci	r24, 0xFF	; 255
    180e:	9f 4f       	sbci	r25, 0xFF	; 255
    1810:	08 95       	ret

00001812 <__divmodsi4_neg2>:
    1812:	50 95       	com	r21
    1814:	40 95       	com	r20
    1816:	30 95       	com	r19
    1818:	21 95       	neg	r18
    181a:	3f 4f       	sbci	r19, 0xFF	; 255
    181c:	4f 4f       	sbci	r20, 0xFF	; 255
    181e:	5f 4f       	sbci	r21, 0xFF	; 255

00001820 <__divmodsi4_exit>:
    1820:	08 95       	ret

00001822 <__umulhisi3>:
    1822:	a2 9f       	mul	r26, r18
    1824:	b0 01       	movw	r22, r0
    1826:	b3 9f       	mul	r27, r19
    1828:	c0 01       	movw	r24, r0
    182a:	a3 9f       	mul	r26, r19
    182c:	01 d0       	rcall	.+2      	; 0x1830 <__umulhisi3+0xe>
    182e:	b2 9f       	mul	r27, r18
    1830:	70 0d       	add	r23, r0
    1832:	81 1d       	adc	r24, r1
    1834:	11 24       	eor	r1, r1
    1836:	91 1d       	adc	r25, r1
    1838:	08 95       	ret

0000183a <__usmulhisi3>:
    183a:	f3 df       	rcall	.-26     	; 0x1822 <__umulhisi3>

0000183c <__usmulhisi3_tail>:
    183c:	b7 ff       	sbrs	r27, 7
    183e:	08 95       	ret
    1840:	82 1b       	sub	r24, r18
    1842:	93 0b       	sbc	r25, r19
    1844:	08 95       	ret

00001846 <__muluhisi3>:
    1846:	ed df       	rcall	.-38     	; 0x1822 <__umulhisi3>
    1848:	a5 9f       	mul	r26, r21
    184a:	90 0d       	add	r25, r0
    184c:	b4 9f       	mul	r27, r20
    184e:	90 0d       	add	r25, r0
    1850:	a4 9f       	mul	r26, r20
    1852:	80 0d       	add	r24, r0
    1854:	91 1d       	adc	r25, r1
    1856:	11 24       	eor	r1, r1
    1858:	08 95       	ret

0000185a <__udivmodsi4>:
    185a:	a1 e2       	ldi	r26, 0x21	; 33
    185c:	1a 2e       	mov	r1, r26
    185e:	aa 1b       	sub	r26, r26
    1860:	bb 1b       	sub	r27, r27
    1862:	fd 01       	movw	r30, r26
    1864:	0d c0       	rjmp	.+26     	; 0x1880 <__udivmodsi4_ep>

00001866 <__udivmodsi4_loop>:
    1866:	aa 1f       	adc	r26, r26
    1868:	bb 1f       	adc	r27, r27
    186a:	ee 1f       	adc	r30, r30
    186c:	ff 1f       	adc	r31, r31
    186e:	a2 17       	cp	r26, r18
    1870:	b3 07       	cpc	r27, r19
    1872:	e4 07       	cpc	r30, r20
    1874:	f5 07       	cpc	r31, r21
    1876:	20 f0       	brcs	.+8      	; 0x1880 <__udivmodsi4_ep>
    1878:	a2 1b       	sub	r26, r18
    187a:	b3 0b       	sbc	r27, r19
    187c:	e4 0b       	sbc	r30, r20
    187e:	f5 0b       	sbc	r31, r21

00001880 <__udivmodsi4_ep>:
    1880:	66 1f       	adc	r22, r22
    1882:	77 1f       	adc	r23, r23
    1884:	88 1f       	adc	r24, r24
    1886:	99 1f       	adc	r25, r25
    1888:	1a 94       	dec	r1
    188a:	69 f7       	brne	.-38     	; 0x1866 <__udivmodsi4_loop>
    188c:	60 95       	com	r22
    188e:	70 95       	com	r23
    1890:	80 95       	com	r24
    1892:	90 95       	com	r25
    1894:	9b 01       	movw	r18, r22
    1896:	ac 01       	movw	r20, r24
    1898:	bd 01       	movw	r22, r26
    189a:	cf 01       	movw	r24, r30
    189c:	08 95       	ret

0000189e <__eerd_block_m8>:
    189e:	dc 01       	movw	r26, r24
    18a0:	cb 01       	movw	r24, r22

000018a2 <__eerd_blraw_m8>:
    18a2:	fc 01       	movw	r30, r24
    18a4:	e1 99       	sbic	0x1c, 1	; 28
    18a6:	fe cf       	rjmp	.-4      	; 0x18a4 <__eerd_blraw_m8+0x2>
    18a8:	06 c0       	rjmp	.+12     	; 0x18b6 <__eerd_blraw_m8+0x14>
    18aa:	ff bb       	out	0x1f, r31	; 31
    18ac:	ee bb       	out	0x1e, r30	; 30
    18ae:	e0 9a       	sbi	0x1c, 0	; 28
    18b0:	31 96       	adiw	r30, 0x01	; 1
    18b2:	0d b2       	in	r0, 0x1d	; 29
    18b4:	0d 92       	st	X+, r0
    18b6:	41 50       	subi	r20, 0x01	; 1
    18b8:	50 40       	sbci	r21, 0x00	; 0
    18ba:	b8 f7       	brcc	.-18     	; 0x18aa <__eerd_blraw_m8+0x8>
    18bc:	08 95       	ret

000018be <_exit>:
    18be:	f8 94       	cli

000018c0 <__stop_program>:
    18c0:	ff cf       	rjmp	.-2      	; 0x18c0 <__stop_program>
