
pid1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001b30  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000042  00800060  00001b30  00001be4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000063  008000a2  008000a2  00001c26  2**0
                  ALLOC
  3 .eeprom       0000000e  00810000  00810000  00001c26  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         00001cb0  00000000  00000000  00001c34  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      000005ba  00000000  00000000  000038e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      0000002f  00000000  00000000  00003e9e  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000370  00000000  00000000  00003ecd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   000030fd  00000000  00000000  0000423d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000010f4  00000000  00000000  0000733a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00001625  00000000  00000000  0000842e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  000007a0  00000000  00000000  00009a54  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000caa  00000000  00000000  0000a1f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00001acd  00000000  00000000  0000ae9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000318  00000000  00000000  0000c96b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	19 c1       	rjmp	.+562    	; 0x234 <__ctors_end>
       2:	33 c1       	rjmp	.+614    	; 0x26a <__bad_interrupt>
       4:	32 c1       	rjmp	.+612    	; 0x26a <__bad_interrupt>
       6:	41 cb       	rjmp	.-2430   	; 0xfffff68a <__eeprom_end+0xff7ef67c>
       8:	30 c1       	rjmp	.+608    	; 0x26a <__bad_interrupt>
       a:	2f c1       	rjmp	.+606    	; 0x26a <__bad_interrupt>
       c:	2e c1       	rjmp	.+604    	; 0x26a <__bad_interrupt>
       e:	2d c1       	rjmp	.+602    	; 0x26a <__bad_interrupt>
      10:	2c c1       	rjmp	.+600    	; 0x26a <__bad_interrupt>
      12:	04 ca       	rjmp	.-3064   	; 0xfffff41c <__eeprom_end+0xff7ef40e>
      14:	2a c1       	rjmp	.+596    	; 0x26a <__bad_interrupt>
      16:	29 c1       	rjmp	.+594    	; 0x26a <__bad_interrupt>
      18:	28 c1       	rjmp	.+592    	; 0x26a <__bad_interrupt>
      1a:	27 c1       	rjmp	.+590    	; 0x26a <__bad_interrupt>
      1c:	a2 c1       	rjmp	.+836    	; 0x362 <__vector_14>
      1e:	25 c1       	rjmp	.+586    	; 0x26a <__bad_interrupt>
      20:	db c9       	rjmp	.-3146   	; 0xfffff3d8 <__eeprom_end+0xff7ef3ca>
      22:	23 c1       	rjmp	.+582    	; 0x26a <__bad_interrupt>
      24:	22 c1       	rjmp	.+580    	; 0x26a <__bad_interrupt>
      26:	52 c3       	rjmp	.+1700   	; 0x6cc <decode_led_char+0x48>
      28:	62 c3       	rjmp	.+1732   	; 0x6ee <decode_led_char+0x6a>
      2a:	61 c3       	rjmp	.+1730   	; 0x6ee <decode_led_char+0x6a>
      2c:	60 c3       	rjmp	.+1728   	; 0x6ee <decode_led_char+0x6a>
      2e:	5f c3       	rjmp	.+1726   	; 0x6ee <decode_led_char+0x6a>
      30:	5e c3       	rjmp	.+1724   	; 0x6ee <decode_led_char+0x6a>
      32:	5d c3       	rjmp	.+1722   	; 0x6ee <decode_led_char+0x6a>
      34:	5c c3       	rjmp	.+1720   	; 0x6ee <decode_led_char+0x6a>
      36:	5b c3       	rjmp	.+1718   	; 0x6ee <decode_led_char+0x6a>
      38:	5a c3       	rjmp	.+1716   	; 0x6ee <decode_led_char+0x6a>
      3a:	59 c3       	rjmp	.+1714   	; 0x6ee <decode_led_char+0x6a>
      3c:	58 c3       	rjmp	.+1712   	; 0x6ee <decode_led_char+0x6a>
      3e:	40 c3       	rjmp	.+1664   	; 0x6c0 <decode_led_char+0x3c>
      40:	41 c3       	rjmp	.+1666   	; 0x6c4 <decode_led_char+0x40>
      42:	3c c3       	rjmp	.+1656   	; 0x6bc <decode_led_char+0x38>
      44:	54 c3       	rjmp	.+1704   	; 0x6ee <decode_led_char+0x6a>
      46:	28 c3       	rjmp	.+1616   	; 0x698 <decode_led_char+0x14>
      48:	51 c3       	rjmp	.+1698   	; 0x6ec <decode_led_char+0x68>
      4a:	28 c3       	rjmp	.+1616   	; 0x69c <decode_led_char+0x18>
      4c:	29 c3       	rjmp	.+1618   	; 0x6a0 <decode_led_char+0x1c>
      4e:	2a c3       	rjmp	.+1620   	; 0x6a4 <decode_led_char+0x20>
      50:	2b c3       	rjmp	.+1622   	; 0x6a8 <decode_led_char+0x24>
      52:	2c c3       	rjmp	.+1624   	; 0x6ac <decode_led_char+0x28>
      54:	2d c3       	rjmp	.+1626   	; 0x6b0 <decode_led_char+0x2c>
      56:	2e c3       	rjmp	.+1628   	; 0x6b4 <decode_led_char+0x30>
      58:	2f c3       	rjmp	.+1630   	; 0x6b8 <decode_led_char+0x34>
      5a:	49 c3       	rjmp	.+1682   	; 0x6ee <decode_led_char+0x6a>
      5c:	48 c3       	rjmp	.+1680   	; 0x6ee <decode_led_char+0x6a>
      5e:	47 c3       	rjmp	.+1678   	; 0x6ee <decode_led_char+0x6a>
      60:	46 c3       	rjmp	.+1676   	; 0x6ee <decode_led_char+0x6a>
      62:	45 c3       	rjmp	.+1674   	; 0x6ee <decode_led_char+0x6a>
      64:	44 c3       	rjmp	.+1672   	; 0x6ee <decode_led_char+0x6a>
      66:	43 c3       	rjmp	.+1670   	; 0x6ee <decode_led_char+0x6a>
      68:	42 c3       	rjmp	.+1668   	; 0x6ee <decode_led_char+0x6a>
      6a:	41 c3       	rjmp	.+1666   	; 0x6ee <decode_led_char+0x6a>
      6c:	33 c3       	rjmp	.+1638   	; 0x6d4 <decode_led_char+0x50>
      6e:	38 c3       	rjmp	.+1648   	; 0x6e0 <decode_led_char+0x5c>
      70:	3b c3       	rjmp	.+1654   	; 0x6e8 <decode_led_char+0x64>
      72:	32 c3       	rjmp	.+1636   	; 0x6d8 <decode_led_char+0x54>
      74:	3c c3       	rjmp	.+1656   	; 0x6ee <decode_led_char+0x6a>
      76:	3b c3       	rjmp	.+1654   	; 0x6ee <decode_led_char+0x6a>
      78:	3a c3       	rjmp	.+1652   	; 0x6ee <decode_led_char+0x6a>
      7a:	39 c3       	rjmp	.+1650   	; 0x6ee <decode_led_char+0x6a>
      7c:	38 c3       	rjmp	.+1648   	; 0x6ee <decode_led_char+0x6a>
      7e:	37 c3       	rjmp	.+1646   	; 0x6ee <decode_led_char+0x6a>
      80:	36 c3       	rjmp	.+1644   	; 0x6ee <decode_led_char+0x6a>
      82:	2c c3       	rjmp	.+1624   	; 0x6dc <decode_led_char+0x58>
      84:	09 c3       	rjmp	.+1554   	; 0x698 <decode_led_char+0x14>
      86:	2e c3       	rjmp	.+1628   	; 0x6e4 <decode_led_char+0x60>
      88:	32 c3       	rjmp	.+1636   	; 0x6ee <decode_led_char+0x6a>
      8a:	31 c3       	rjmp	.+1634   	; 0x6ee <decode_led_char+0x6a>
      8c:	0d c3       	rjmp	.+1562   	; 0x6a8 <decode_led_char+0x24>
      8e:	2f c3       	rjmp	.+1630   	; 0x6ee <decode_led_char+0x6a>
      90:	2e c3       	rjmp	.+1628   	; 0x6ee <decode_led_char+0x6a>
      92:	2d c3       	rjmp	.+1626   	; 0x6ee <decode_led_char+0x6a>
      94:	2c c3       	rjmp	.+1624   	; 0x6ee <decode_led_char+0x6a>
      96:	2b c3       	rjmp	.+1622   	; 0x6ee <decode_led_char+0x6a>
      98:	2a c3       	rjmp	.+1620   	; 0x6ee <decode_led_char+0x6a>
      9a:	29 c3       	rjmp	.+1618   	; 0x6ee <decode_led_char+0x6a>
      9c:	28 c3       	rjmp	.+1616   	; 0x6ee <decode_led_char+0x6a>
      9e:	27 c3       	rjmp	.+1614   	; 0x6ee <decode_led_char+0x6a>
      a0:	26 c3       	rjmp	.+1612   	; 0x6ee <decode_led_char+0x6a>
      a2:	25 c3       	rjmp	.+1610   	; 0x6ee <decode_led_char+0x6a>
      a4:	11 c3       	rjmp	.+1570   	; 0x6c8 <decode_led_char+0x44>
      a6:	23 c3       	rjmp	.+1606   	; 0x6ee <decode_led_char+0x6a>
      a8:	22 c3       	rjmp	.+1604   	; 0x6ee <decode_led_char+0x6a>
      aa:	21 c3       	rjmp	.+1602   	; 0x6ee <decode_led_char+0x6a>
      ac:	20 c3       	rjmp	.+1600   	; 0x6ee <decode_led_char+0x6a>
      ae:	1f c3       	rjmp	.+1598   	; 0x6ee <decode_led_char+0x6a>
      b0:	1e c3       	rjmp	.+1596   	; 0x6ee <decode_led_char+0x6a>
      b2:	1d c3       	rjmp	.+1594   	; 0x6ee <decode_led_char+0x6a>
      b4:	1c c3       	rjmp	.+1592   	; 0x6ee <decode_led_char+0x6a>
      b6:	1b c3       	rjmp	.+1590   	; 0x6ee <decode_led_char+0x6a>
      b8:	1a c3       	rjmp	.+1588   	; 0x6ee <decode_led_char+0x6a>
      ba:	19 c3       	rjmp	.+1586   	; 0x6ee <decode_led_char+0x6a>
      bc:	18 c3       	rjmp	.+1584   	; 0x6ee <decode_led_char+0x6a>
      be:	17 c3       	rjmp	.+1582   	; 0x6ee <decode_led_char+0x6a>
      c0:	16 c3       	rjmp	.+1580   	; 0x6ee <decode_led_char+0x6a>
      c2:	15 c3       	rjmp	.+1578   	; 0x6ee <decode_led_char+0x6a>
      c4:	14 c3       	rjmp	.+1576   	; 0x6ee <decode_led_char+0x6a>
      c6:	13 c3       	rjmp	.+1574   	; 0x6ee <decode_led_char+0x6a>
      c8:	12 c3       	rjmp	.+1572   	; 0x6ee <decode_led_char+0x6a>
      ca:	11 c3       	rjmp	.+1570   	; 0x6ee <decode_led_char+0x6a>
      cc:	10 c3       	rjmp	.+1568   	; 0x6ee <decode_led_char+0x6a>
      ce:	0f c3       	rjmp	.+1566   	; 0x6ee <decode_led_char+0x6a>
      d0:	0e c3       	rjmp	.+1564   	; 0x6ee <decode_led_char+0x6a>
      d2:	0d c3       	rjmp	.+1562   	; 0x6ee <decode_led_char+0x6a>
      d4:	0c c3       	rjmp	.+1560   	; 0x6ee <decode_led_char+0x6a>
      d6:	0b c3       	rjmp	.+1558   	; 0x6ee <decode_led_char+0x6a>
      d8:	0a c3       	rjmp	.+1556   	; 0x6ee <decode_led_char+0x6a>
      da:	09 c3       	rjmp	.+1554   	; 0x6ee <decode_led_char+0x6a>
      dc:	08 c3       	rjmp	.+1552   	; 0x6ee <decode_led_char+0x6a>
      de:	07 c3       	rjmp	.+1550   	; 0x6ee <decode_led_char+0x6a>
      e0:	06 c3       	rjmp	.+1548   	; 0x6ee <decode_led_char+0x6a>
      e2:	05 c3       	rjmp	.+1546   	; 0x6ee <decode_led_char+0x6a>
      e4:	04 c3       	rjmp	.+1544   	; 0x6ee <decode_led_char+0x6a>
      e6:	03 c3       	rjmp	.+1542   	; 0x6ee <decode_led_char+0x6a>
      e8:	02 c3       	rjmp	.+1540   	; 0x6ee <decode_led_char+0x6a>
      ea:	01 c3       	rjmp	.+1538   	; 0x6ee <decode_led_char+0x6a>
      ec:	00 c3       	rjmp	.+1536   	; 0x6ee <decode_led_char+0x6a>
      ee:	ff c2       	rjmp	.+1534   	; 0x6ee <decode_led_char+0x6a>
      f0:	fe c2       	rjmp	.+1532   	; 0x6ee <decode_led_char+0x6a>
      f2:	fd c2       	rjmp	.+1530   	; 0x6ee <decode_led_char+0x6a>
      f4:	fc c2       	rjmp	.+1528   	; 0x6ee <decode_led_char+0x6a>
      f6:	fb c2       	rjmp	.+1526   	; 0x6ee <decode_led_char+0x6a>
      f8:	fa c2       	rjmp	.+1524   	; 0x6ee <decode_led_char+0x6a>
      fa:	f9 c2       	rjmp	.+1522   	; 0x6ee <decode_led_char+0x6a>
      fc:	f8 c2       	rjmp	.+1520   	; 0x6ee <decode_led_char+0x6a>
      fe:	f7 c2       	rjmp	.+1518   	; 0x6ee <decode_led_char+0x6a>
     100:	f6 c2       	rjmp	.+1516   	; 0x6ee <decode_led_char+0x6a>
     102:	f5 c2       	rjmp	.+1514   	; 0x6ee <decode_led_char+0x6a>
     104:	f4 c2       	rjmp	.+1512   	; 0x6ee <decode_led_char+0x6a>
     106:	f3 c2       	rjmp	.+1510   	; 0x6ee <decode_led_char+0x6a>
     108:	f2 c2       	rjmp	.+1508   	; 0x6ee <decode_led_char+0x6a>
     10a:	f1 c2       	rjmp	.+1506   	; 0x6ee <decode_led_char+0x6a>
     10c:	f0 c2       	rjmp	.+1504   	; 0x6ee <decode_led_char+0x6a>
     10e:	ef c2       	rjmp	.+1502   	; 0x6ee <decode_led_char+0x6a>
     110:	ee c2       	rjmp	.+1500   	; 0x6ee <decode_led_char+0x6a>
     112:	ed c2       	rjmp	.+1498   	; 0x6ee <decode_led_char+0x6a>
     114:	ec c2       	rjmp	.+1496   	; 0x6ee <decode_led_char+0x6a>
     116:	eb c2       	rjmp	.+1494   	; 0x6ee <decode_led_char+0x6a>
     118:	ea c2       	rjmp	.+1492   	; 0x6ee <decode_led_char+0x6a>
     11a:	e9 c2       	rjmp	.+1490   	; 0x6ee <decode_led_char+0x6a>
     11c:	e8 c2       	rjmp	.+1488   	; 0x6ee <decode_led_char+0x6a>
     11e:	e7 c2       	rjmp	.+1486   	; 0x6ee <decode_led_char+0x6a>
     120:	e6 c2       	rjmp	.+1484   	; 0x6ee <decode_led_char+0x6a>
     122:	e5 c2       	rjmp	.+1482   	; 0x6ee <decode_led_char+0x6a>
     124:	e4 c2       	rjmp	.+1480   	; 0x6ee <decode_led_char+0x6a>
     126:	e3 c2       	rjmp	.+1478   	; 0x6ee <decode_led_char+0x6a>
     128:	e2 c2       	rjmp	.+1476   	; 0x6ee <decode_led_char+0x6a>
     12a:	e1 c2       	rjmp	.+1474   	; 0x6ee <decode_led_char+0x6a>
     12c:	e0 c2       	rjmp	.+1472   	; 0x6ee <decode_led_char+0x6a>
     12e:	df c2       	rjmp	.+1470   	; 0x6ee <decode_led_char+0x6a>
     130:	de c2       	rjmp	.+1468   	; 0x6ee <decode_led_char+0x6a>
     132:	dd c2       	rjmp	.+1466   	; 0x6ee <decode_led_char+0x6a>
     134:	dc c2       	rjmp	.+1464   	; 0x6ee <decode_led_char+0x6a>
     136:	db c2       	rjmp	.+1462   	; 0x6ee <decode_led_char+0x6a>
     138:	da c2       	rjmp	.+1460   	; 0x6ee <decode_led_char+0x6a>
     13a:	d9 c2       	rjmp	.+1458   	; 0x6ee <decode_led_char+0x6a>
     13c:	d8 c2       	rjmp	.+1456   	; 0x6ee <decode_led_char+0x6a>
     13e:	d7 c2       	rjmp	.+1454   	; 0x6ee <decode_led_char+0x6a>
     140:	d6 c2       	rjmp	.+1452   	; 0x6ee <decode_led_char+0x6a>
     142:	d5 c2       	rjmp	.+1450   	; 0x6ee <decode_led_char+0x6a>
     144:	d4 c2       	rjmp	.+1448   	; 0x6ee <decode_led_char+0x6a>
     146:	c4 c2       	rjmp	.+1416   	; 0x6d0 <decode_led_char+0x4c>

00000148 <menuFunctionSet>:
     148:	01 36 07 39 07 6a 06 03 66 06 da 06 fa 04 02 d6     .6.9.j..f.......
     158:	06 6d 06 5e 06 05 54 06 0f 06 00 00 0b 00 05 0f     .m.^..T.........
     168:	06 0e 05 04 54 06 bc 05 00 00 0c 00 05 bc 05 0e     ....T...........
     178:	05 06 5c 06 72 05 00 00 09 00 05 72 05 0e 05 07     ..\.r......r....
     188:	5c 06 28 05 00 00 0a 00 05 28 05 0e 05 08 1a 05     \.(......(......
     198:	15 05 00 00 0d 14 05 15 05 00 00                    ...........

000001a3 <menuJumpSet>:
     1a3:	01 06 00 03 a8 01 00 01 02 40 01 00 02 05 28 02     .........@....(.
     1b3:	00 01 01 80 03 00 83 01 40 05 00 82 01 00 05 04     ........@.......
     1c3:	00 04 68 05 02 00 07 a8 05 00 01 0b 28 0b 00 83     ..h.........(...
     1d3:	05 28 04 00 82 01 00 04 04 00 06 68 04 02 00 05     .(.........h....
     1e3:	a8 04 00 01 0c 28 0c 00 83 04 28 06 00 82 01 00     .....(....(.....
     1f3:	06 04 00 07 68 06 02 00 04 a8 06 00 01 09 00 07     ....h...........
     203:	00 82 01 00 07 04 00 05 68 07 02 00 06 a8 07 00     ........h.......
     213:	01 0a 00 09 00 02 06 00 09 00 01 08 14 08 00 83     ................
     223:	01 00 0a 00 02 07 00 0a 00 01 0d 14 0d 00 83 01     ................
	...

00000234 <__ctors_end>:
     234:	11 24       	eor	r1, r1
     236:	1f be       	out	0x3f, r1	; 63
     238:	cf e5       	ldi	r28, 0x5F	; 95
     23a:	d4 e0       	ldi	r29, 0x04	; 4
     23c:	de bf       	out	0x3e, r29	; 62
     23e:	cd bf       	out	0x3d, r28	; 61

00000240 <__do_copy_data>:
     240:	10 e0       	ldi	r17, 0x00	; 0
     242:	a0 e6       	ldi	r26, 0x60	; 96
     244:	b0 e0       	ldi	r27, 0x00	; 0
     246:	e0 e3       	ldi	r30, 0x30	; 48
     248:	fb e1       	ldi	r31, 0x1B	; 27
     24a:	02 c0       	rjmp	.+4      	; 0x250 <__do_copy_data+0x10>
     24c:	05 90       	lpm	r0, Z+
     24e:	0d 92       	st	X+, r0
     250:	a2 3a       	cpi	r26, 0xA2	; 162
     252:	b1 07       	cpc	r27, r17
     254:	d9 f7       	brne	.-10     	; 0x24c <__do_copy_data+0xc>

00000256 <__do_clear_bss>:
     256:	21 e0       	ldi	r18, 0x01	; 1
     258:	a2 ea       	ldi	r26, 0xA2	; 162
     25a:	b0 e0       	ldi	r27, 0x00	; 0
     25c:	01 c0       	rjmp	.+2      	; 0x260 <.do_clear_bss_start>

0000025e <.do_clear_bss_loop>:
     25e:	1d 92       	st	X+, r1

00000260 <.do_clear_bss_start>:
     260:	a5 30       	cpi	r26, 0x05	; 5
     262:	b2 07       	cpc	r27, r18
     264:	e1 f7       	brne	.-8      	; 0x25e <.do_clear_bss_loop>
     266:	ba d7       	rcall	.+3956   	; 0x11dc <main>
     268:	61 cc       	rjmp	.-1854   	; 0xfffffb2c <__eeprom_end+0xff7efb1e>

0000026a <__bad_interrupt>:
     26a:	ca ce       	rjmp	.-620    	; 0x0 <__vectors>

0000026c <conv_ADC_to_Celsius>:
static int8_t adc_buffer_pos = -1;


uint16_t conv_ADC_to_Celsius(uint16_t adc_value)
{	
	return (uint16_t)((float)adc_value * k_norm + offset_norm);
     26c:	bc 01       	movw	r22, r24
     26e:	80 e0       	ldi	r24, 0x00	; 0
     270:	90 e0       	ldi	r25, 0x00	; 0
     272:	eb da       	rcall	.-2602   	; 0xfffff84a <__eeprom_end+0xff7ef83c>
     274:	20 91 d7 00 	lds	r18, 0x00D7
     278:	30 91 d8 00 	lds	r19, 0x00D8
     27c:	40 91 d9 00 	lds	r20, 0x00D9
     280:	50 91 da 00 	lds	r21, 0x00DA
     284:	70 db       	rcall	.-2336   	; 0xfffff966 <__eeprom_end+0xff7ef958>
     286:	20 91 dd 00 	lds	r18, 0x00DD
     28a:	30 91 de 00 	lds	r19, 0x00DE
     28e:	40 91 df 00 	lds	r20, 0x00DF
     292:	50 91 e0 00 	lds	r21, 0x00E0
     296:	49 da       	rcall	.-2926   	; 0xfffff72a <__eeprom_end+0xff7ef71c>
     298:	ac da       	rcall	.-2728   	; 0xfffff7f2 <__eeprom_end+0xff7ef7e4>
}
     29a:	86 2f       	mov	r24, r22
     29c:	97 2f       	mov	r25, r23
     29e:	08 95       	ret

000002a0 <calculateCoeffs>:


void calculateCoeffs(uint16_t deg_a, uint16_t adc_a, uint16_t deg_b, uint16_t adc_b)
{
     2a0:	8f 92       	push	r8
     2a2:	9f 92       	push	r9
     2a4:	af 92       	push	r10
     2a6:	bf 92       	push	r11
     2a8:	cf 92       	push	r12
     2aa:	df 92       	push	r13
     2ac:	ef 92       	push	r14
     2ae:	ff 92       	push	r15
     2b0:	cf 93       	push	r28
     2b2:	df 93       	push	r29
     2b4:	5c 01       	movw	r10, r24
     2b6:	eb 01       	movw	r28, r22
	k_norm = ((int16_t)(deg_a - deg_b)) / ((int16_t)(adc_a - adc_b));
     2b8:	84 1b       	sub	r24, r20
     2ba:	95 0b       	sbc	r25, r21
     2bc:	62 1b       	sub	r22, r18
     2be:	73 0b       	sbc	r23, r19
     2c0:	b5 db       	rcall	.-2198   	; 0xfffffa2c <__eeprom_end+0xff7efa1e>
     2c2:	88 27       	eor	r24, r24
     2c4:	77 fd       	sbrc	r23, 7
     2c6:	80 95       	com	r24
     2c8:	98 2f       	mov	r25, r24
     2ca:	c1 da       	rcall	.-2686   	; 0xfffff84e <__eeprom_end+0xff7ef840>
     2cc:	6b 01       	movw	r12, r22
     2ce:	7c 01       	movw	r14, r24
     2d0:	60 93 d7 00 	sts	0x00D7, r22
     2d4:	70 93 d8 00 	sts	0x00D8, r23
     2d8:	80 93 d9 00 	sts	0x00D9, r24
     2dc:	90 93 da 00 	sts	0x00DA, r25
	offset_norm = (float)deg_a - (float)adc_a * k_norm;
     2e0:	b5 01       	movw	r22, r10
     2e2:	80 e0       	ldi	r24, 0x00	; 0
     2e4:	90 e0       	ldi	r25, 0x00	; 0
     2e6:	b1 da       	rcall	.-2718   	; 0xfffff84a <__eeprom_end+0xff7ef83c>
     2e8:	4b 01       	movw	r8, r22
     2ea:	5c 01       	movw	r10, r24
     2ec:	be 01       	movw	r22, r28
     2ee:	80 e0       	ldi	r24, 0x00	; 0
     2f0:	90 e0       	ldi	r25, 0x00	; 0
     2f2:	ab da       	rcall	.-2730   	; 0xfffff84a <__eeprom_end+0xff7ef83c>
     2f4:	9b 01       	movw	r18, r22
     2f6:	ac 01       	movw	r20, r24
     2f8:	c7 01       	movw	r24, r14
     2fa:	b6 01       	movw	r22, r12
     2fc:	34 db       	rcall	.-2456   	; 0xfffff966 <__eeprom_end+0xff7ef958>
     2fe:	9b 01       	movw	r18, r22
     300:	ac 01       	movw	r20, r24
     302:	c5 01       	movw	r24, r10
     304:	b4 01       	movw	r22, r8
     306:	10 da       	rcall	.-3040   	; 0xfffff728 <__eeprom_end+0xff7ef71a>
     308:	60 93 dd 00 	sts	0x00DD, r22
     30c:	70 93 de 00 	sts	0x00DE, r23
     310:	80 93 df 00 	sts	0x00DF, r24
     314:	90 93 e0 00 	sts	0x00E0, r25
}
     318:	df 91       	pop	r29
     31a:	cf 91       	pop	r28
     31c:	ff 90       	pop	r15
     31e:	ef 90       	pop	r14
     320:	df 90       	pop	r13
     322:	cf 90       	pop	r12
     324:	bf 90       	pop	r11
     326:	af 90       	pop	r10
     328:	9f 90       	pop	r9
     32a:	8f 90       	pop	r8
     32c:	08 95       	ret

0000032e <update_filtered_adc>:
void update_filtered_adc()
{
	uint8_t i;
	uint16_t filtered_value = 0;
	// Disable interrupts from ADC - to save data integrity
	ACSR &= ~(1<<ACIE);	
     32e:	43 98       	cbi	0x08, 3	; 8
     330:	e2 ea       	ldi	r30, 0xA2	; 162
     332:	f0 e0       	ldi	r31, 0x00	; 0
	k_norm = ((int16_t)(deg_a - deg_b)) / ((int16_t)(adc_a - adc_b));
	offset_norm = (float)deg_a - (float)adc_a * k_norm;
}


void update_filtered_adc()
     334:	42 eb       	ldi	r20, 0xB2	; 178
     336:	50 e0       	ldi	r21, 0x00	; 0
{
	uint8_t i;
	uint16_t filtered_value = 0;
     338:	80 e0       	ldi	r24, 0x00	; 0
     33a:	90 e0       	ldi	r25, 0x00	; 0
	// Disable interrupts from ADC - to save data integrity
	ACSR &= ~(1<<ACIE);	
	// Count up
	for(i=0;i<ADC_BUFFER_LENGTH;i++)
	{
		filtered_value += adc_sample_buffer[i];
     33c:	21 91       	ld	r18, Z+
     33e:	31 91       	ld	r19, Z+
     340:	82 0f       	add	r24, r18
     342:	93 1f       	adc	r25, r19
	uint8_t i;
	uint16_t filtered_value = 0;
	// Disable interrupts from ADC - to save data integrity
	ACSR &= ~(1<<ACIE);	
	// Count up
	for(i=0;i<ADC_BUFFER_LENGTH;i++)
     344:	e4 17       	cp	r30, r20
     346:	f5 07       	cpc	r31, r21
     348:	c9 f7       	brne	.-14     	; 0x33c <update_filtered_adc+0xe>
	{
		filtered_value += adc_sample_buffer[i];
	}	
	// Enable interrupts from ADC
	ACSR |= (1<<ACIE);
     34a:	43 9a       	sbi	0x08, 3	; 8
	filtered_value /= ADC_BUFFER_LENGTH;
     34c:	96 95       	lsr	r25
     34e:	87 95       	ror	r24
     350:	96 95       	lsr	r25
     352:	87 95       	ror	r24
     354:	96 95       	lsr	r25
     356:	87 95       	ror	r24
	adc_filtered_value = filtered_value;
     358:	90 93 d1 00 	sts	0x00D1, r25
     35c:	80 93 d0 00 	sts	0x00D0, r24
     360:	08 95       	ret

00000362 <__vector_14>:




ISR(ADC_vect)
{
     362:	1f 92       	push	r1
     364:	0f 92       	push	r0
     366:	0f b6       	in	r0, 0x3f	; 63
     368:	0f 92       	push	r0
     36a:	11 24       	eor	r1, r1
     36c:	2f 93       	push	r18
     36e:	8f 93       	push	r24
     370:	9f 93       	push	r25
     372:	ef 93       	push	r30
     374:	ff 93       	push	r31
	uint16_t new_sample = ADC;
     376:	84 b1       	in	r24, 0x04	; 4
     378:	95 b1       	in	r25, 0x05	; 5
	
	if (adc_buffer_pos < 0)
     37a:	20 91 60 00 	lds	r18, 0x0060
     37e:	22 23       	and	r18, r18
     380:	fc f4       	brge	.+62     	; 0x3c0 <__vector_14+0x5e>
	{
		// First call to the function, fill whole buffer with current sample
		for (adc_buffer_pos = ADC_BUFFER_LENGTH-1; adc_buffer_pos > 0; adc_buffer_pos--)
		adc_sample_buffer[adc_buffer_pos] = new_sample;
     382:	90 93 b1 00 	sts	0x00B1, r25
     386:	80 93 b0 00 	sts	0x00B0, r24
     38a:	90 93 af 00 	sts	0x00AF, r25
     38e:	80 93 ae 00 	sts	0x00AE, r24
     392:	90 93 ad 00 	sts	0x00AD, r25
     396:	80 93 ac 00 	sts	0x00AC, r24
     39a:	90 93 ab 00 	sts	0x00AB, r25
     39e:	80 93 aa 00 	sts	0x00AA, r24
     3a2:	90 93 a9 00 	sts	0x00A9, r25
     3a6:	80 93 a8 00 	sts	0x00A8, r24
     3aa:	90 93 a7 00 	sts	0x00A7, r25
     3ae:	80 93 a6 00 	sts	0x00A6, r24
     3b2:	90 93 a5 00 	sts	0x00A5, r25
     3b6:	80 93 a4 00 	sts	0x00A4, r24
     3ba:	10 92 60 00 	sts	0x0060, r1
     3be:	0e c0       	rjmp	.+28     	; 0x3dc <__vector_14+0x7a>
	}
	else
	{
		// Normal call
		adc_sample_buffer[adc_buffer_pos] = new_sample;
     3c0:	e2 2f       	mov	r30, r18
     3c2:	ee 0f       	add	r30, r30
     3c4:	ff 0b       	sbc	r31, r31
     3c6:	ee 55       	subi	r30, 0x5E	; 94
     3c8:	ff 4f       	sbci	r31, 0xFF	; 255
     3ca:	91 83       	std	Z+1, r25	; 0x01
     3cc:	80 83       	st	Z, r24
		adc_buffer_pos = (adc_buffer_pos == ADC_BUFFER_LENGTH - 1) ? 0 : adc_buffer_pos + 1;
     3ce:	27 30       	cpi	r18, 0x07	; 7
     3d0:	11 f0       	breq	.+4      	; 0x3d6 <__vector_14+0x74>
     3d2:	2f 5f       	subi	r18, 0xFF	; 255
     3d4:	01 c0       	rjmp	.+2      	; 0x3d8 <__vector_14+0x76>
     3d6:	20 e0       	ldi	r18, 0x00	; 0
     3d8:	20 93 60 00 	sts	0x0060, r18
	}		
}	
     3dc:	ff 91       	pop	r31
     3de:	ef 91       	pop	r30
     3e0:	9f 91       	pop	r25
     3e2:	8f 91       	pop	r24
     3e4:	2f 91       	pop	r18
     3e6:	0f 90       	pop	r0
     3e8:	0f be       	out	0x3f, r0	; 63
     3ea:	0f 90       	pop	r0
     3ec:	1f 90       	pop	r1
     3ee:	18 95       	reti

000003f0 <process_buttons>:
	uint8_t raw_delayed_inv;
	static uint8_t press_timer = 0;
	uint8_t long_press_mask;
	uint8_t long_press_event_mask;
	
	raw_delayed = raw_current;
     3f0:	30 91 b8 00 	lds	r19, 0x00B8
	raw_delayed_inv = raw_current_inv;
     3f4:	20 91 61 00 	lds	r18, 0x0061
	raw_current = raw_button_state;
     3f8:	90 91 f3 00 	lds	r25, 0x00F3
     3fc:	90 93 b8 00 	sts	0x00B8, r25
	raw_current_inv = ~raw_current;
     400:	49 2f       	mov	r20, r25
     402:	40 95       	com	r20
     404:	40 93 61 00 	sts	0x0061, r20
	
	// Must be before press_timer update
	long_press_mask = (press_timer >= LONG_PRESS_DELAY) ? 0xFF : 0x00;
     408:	80 91 b9 00 	lds	r24, 0x00B9
     40c:	8c 30       	cpi	r24, 0x0C	; 12
     40e:	10 f0       	brcs	.+4      	; 0x414 <process_buttons+0x24>
     410:	6f ef       	ldi	r22, 0xFF	; 255
     412:	01 c0       	rjmp	.+2      	; 0x416 <process_buttons+0x26>
     414:	60 e0       	ldi	r22, 0x00	; 0
	
	if (raw_delayed != raw_current)
     416:	39 17       	cp	r19, r25
     418:	41 f0       	breq	.+16     	; 0x42a <process_buttons+0x3a>
	{
		press_timer = 0;
     41a:	10 92 b9 00 	sts	0x00B9, r1
	}
	
	// Must after press_timer update
	long_press_event_mask = (press_timer == LONG_PRESS_DELAY) ? 0xFF : 0x00;
			
	button_action_down = raw_current & raw_delayed_inv;
     41e:	89 2f       	mov	r24, r25
     420:	82 23       	and	r24, r18
     422:	80 93 b5 00 	sts	0x00B5, r24
     426:	50 e0       	ldi	r21, 0x00	; 0
     428:	14 c0       	rjmp	.+40     	; 0x452 <process_buttons+0x62>
	
	if (raw_delayed != raw_current)
	{
		press_timer = 0;
	}
	else if (press_timer <= LONG_PRESS_DELAY)
     42a:	8d 30       	cpi	r24, 0x0D	; 13
     42c:	18 f4       	brcc	.+6      	; 0x434 <process_buttons+0x44>
	{
		press_timer++;
     42e:	8f 5f       	subi	r24, 0xFF	; 255
     430:	80 93 b9 00 	sts	0x00B9, r24
	}
	
	// Must after press_timer update
	long_press_event_mask = (press_timer == LONG_PRESS_DELAY) ? 0xFF : 0x00;
     434:	50 91 b9 00 	lds	r21, 0x00B9
     438:	5c 30       	cpi	r21, 0x0C	; 12
     43a:	09 f4       	brne	.+2      	; 0x43e <process_buttons+0x4e>
     43c:	45 c0       	rjmp	.+138    	; 0x4c8 <__stack+0x69>
			
	button_action_down = raw_current & raw_delayed_inv;
     43e:	89 2f       	mov	r24, r25
     440:	82 23       	and	r24, r18
     442:	80 93 b5 00 	sts	0x00B5, r24
			
	if (press_timer > REPEAT_DELAY)
     446:	57 30       	cpi	r21, 0x07	; 7
     448:	18 f0       	brcs	.+6      	; 0x450 <process_buttons+0x60>
     44a:	50 e0       	ldi	r21, 0x00	; 0
		raw_delayed_inv |= 0xFF;
     44c:	2f ef       	ldi	r18, 0xFF	; 255
     44e:	01 c0       	rjmp	.+2      	; 0x452 <process_buttons+0x62>
	// Must after press_timer update
	long_press_event_mask = (press_timer == LONG_PRESS_DELAY) ? 0xFF : 0x00;
			
	button_action_down = raw_current & raw_delayed_inv;
			
	if (press_timer > REPEAT_DELAY)
     450:	50 e0       	ldi	r21, 0x00	; 0
		raw_delayed_inv |= 0xFF;
	
	button_action_rep = raw_current & raw_delayed_inv;
     452:	29 23       	and	r18, r25
     454:	20 93 b4 00 	sts	0x00B4, r18
	
	button_action_up_short = raw_current_inv & raw_delayed & ~long_press_mask;
     458:	60 95       	com	r22
     45a:	34 23       	and	r19, r20
     45c:	36 23       	and	r19, r22
     45e:	30 93 b3 00 	sts	0x00B3, r19
	//button_action_up_long  = raw_current_inv & raw_delayed & long_press_mask;
	button_action_long  = raw_current & long_press_event_mask;
     462:	59 23       	and	r21, r25
     464:	50 93 b2 00 	sts	0x00B2, r21
	
	// Compose button state
	button_state = (button_action_down & (BD_MENU | BD_UP | BD_DOWN | BD_ROTFWD | BD_ROTREV | BD_HEATCTRL));
     468:	87 77       	andi	r24, 0x77	; 119
     46a:	90 e0       	ldi	r25, 0x00	; 0
	if (button_action_up_short & BD_MENU)
     46c:	30 fd       	sbrc	r19, 0
     46e:	05 c0       	rjmp	.+10     	; 0x47a <__stack+0x1b>
	button_action_up_short = raw_current_inv & raw_delayed & ~long_press_mask;
	//button_action_up_long  = raw_current_inv & raw_delayed & long_press_mask;
	button_action_long  = raw_current & long_press_event_mask;
	
	// Compose button state
	button_state = (button_action_down & (BD_MENU | BD_UP | BD_DOWN | BD_ROTFWD | BD_ROTREV | BD_HEATCTRL));
     470:	90 93 b7 00 	sts	0x00B7, r25
     474:	80 93 b6 00 	sts	0x00B6, r24
     478:	05 c0       	rjmp	.+10     	; 0x484 <__stack+0x25>
	if (button_action_up_short & BD_MENU)
		button_state |= BS_MENU;
     47a:	91 60       	ori	r25, 0x01	; 1
     47c:	90 93 b7 00 	sts	0x00B7, r25
     480:	80 93 b6 00 	sts	0x00B6, r24
	//if (button_action_up_long & BD_MENU)
	if (button_action_long & BD_MENU)
     484:	50 ff       	sbrs	r21, 0
     486:	09 c0       	rjmp	.+18     	; 0x49a <__stack+0x3b>
		button_state |= BL_MENU;
     488:	80 91 b6 00 	lds	r24, 0x00B6
     48c:	90 91 b7 00 	lds	r25, 0x00B7
     490:	92 60       	ori	r25, 0x02	; 2
     492:	90 93 b7 00 	sts	0x00B7, r25
     496:	80 93 b6 00 	sts	0x00B6, r24
	if (button_action_rep & BD_UP)
     49a:	21 ff       	sbrs	r18, 1
     49c:	09 c0       	rjmp	.+18     	; 0x4b0 <__stack+0x51>
		button_state |= BR_UP;	
     49e:	80 91 b6 00 	lds	r24, 0x00B6
     4a2:	90 91 b7 00 	lds	r25, 0x00B7
     4a6:	94 60       	ori	r25, 0x04	; 4
     4a8:	90 93 b7 00 	sts	0x00B7, r25
     4ac:	80 93 b6 00 	sts	0x00B6, r24
	if (button_action_rep & BD_DOWN)
     4b0:	22 ff       	sbrs	r18, 2
     4b2:	10 c0       	rjmp	.+32     	; 0x4d4 <__stack+0x75>
		button_state |= BR_DOWN;
     4b4:	80 91 b6 00 	lds	r24, 0x00B6
     4b8:	90 91 b7 00 	lds	r25, 0x00B7
     4bc:	98 60       	ori	r25, 0x08	; 8
     4be:	90 93 b7 00 	sts	0x00B7, r25
     4c2:	80 93 b6 00 	sts	0x00B6, r24
     4c6:	08 95       	ret
	}
	
	// Must after press_timer update
	long_press_event_mask = (press_timer == LONG_PRESS_DELAY) ? 0xFF : 0x00;
			
	button_action_down = raw_current & raw_delayed_inv;
     4c8:	83 2f       	mov	r24, r19
     4ca:	82 23       	and	r24, r18
     4cc:	80 93 b5 00 	sts	0x00B5, r24
	{
		press_timer++;
	}
	
	// Must after press_timer update
	long_press_event_mask = (press_timer == LONG_PRESS_DELAY) ? 0xFF : 0x00;
     4d0:	5f ef       	ldi	r21, 0xFF	; 255
     4d2:	bc cf       	rjmp	.-136    	; 0x44c <process_buttons+0x5c>
     4d4:	08 95       	ret

000004d6 <processRollControl>:
float offset_norm;


// Function to control motor rotation
void processRollControl(void)
{	
     4d6:	cf 93       	push	r28
	uint8_t beepState = 0;
	static uint8_t beepMask = 0x00;
	
	// Control direction by buttons
	if (button_action_down & BD_ROTFWD)
     4d8:	80 91 b5 00 	lds	r24, 0x00B5
     4dc:	84 ff       	sbrs	r24, 4
     4de:	04 c0       	rjmp	.+8      	; 0x4e8 <processRollControl+0x12>
	{
		setMotorDirection(ROLL_FWD);	
     4e0:	81 e0       	ldi	r24, 0x01	; 1
     4e2:	08 d7       	rcall	.+3600   	; 0x12f4 <setMotorDirection>
		beepState |= 0x01;			// pressed FWD button
     4e4:	c1 e0       	ldi	r28, 0x01	; 1
     4e6:	0f c0       	rjmp	.+30     	; 0x506 <processRollControl+0x30>
	}		
	else if (button_action_down & BD_ROTREV)
     4e8:	85 ff       	sbrs	r24, 5
     4ea:	04 c0       	rjmp	.+8      	; 0x4f4 <processRollControl+0x1e>
	{
		setMotorDirection(ROLL_REV);
     4ec:	82 e0       	ldi	r24, 0x02	; 2
     4ee:	02 d7       	rcall	.+3588   	; 0x12f4 <setMotorDirection>
		beepState |= 0x02;			// pressed REV button
     4f0:	c2 e0       	ldi	r28, 0x02	; 2
     4f2:	09 c0       	rjmp	.+18     	; 0x506 <processRollControl+0x30>
	}		
	else if (button_action_long & BD_CYCLE)
     4f4:	80 91 b2 00 	lds	r24, 0x00B2
     4f8:	88 23       	and	r24, r24
     4fa:	24 f4       	brge	.+8      	; 0x504 <processRollControl+0x2e>
	{
		stopCycleRolling(1);		// Reset points and disabled CYCLE mode (if was enabled)
     4fc:	81 e0       	ldi	r24, 0x01	; 1
     4fe:	18 d7       	rcall	.+3632   	; 0x1330 <stopCycleRolling>
		beepState |= 0x08;			// reset of points by long pressing of ROLL button
     500:	c8 e0       	ldi	r28, 0x08	; 8
     502:	01 c0       	rjmp	.+2      	; 0x506 <processRollControl+0x30>


// Function to control motor rotation
void processRollControl(void)
{	
	uint8_t beepState = 0;
     504:	c0 e0       	ldi	r28, 0x00	; 0
		stopCycleRolling(1);		// Reset points and disabled CYCLE mode (if was enabled)
		beepState |= 0x08;			// reset of points by long pressing of ROLL button
	}
	
	
	if (button_action_up_short & BD_CYCLE)
     506:	80 91 b3 00 	lds	r24, 0x00B3
     50a:	88 23       	and	r24, r24
     50c:	74 f4       	brge	.+28     	; 0x52a <processRollControl+0x54>
	{
		if (rollState & ROLL_CYCLE)
     50e:	80 91 c2 00 	lds	r24, 0x00C2
     512:	82 ff       	sbrs	r24, 2
     514:	04 c0       	rjmp	.+8      	; 0x51e <processRollControl+0x48>
		{
			stopCycleRolling(0);
     516:	80 e0       	ldi	r24, 0x00	; 0
     518:	0b d7       	rcall	.+3606   	; 0x1330 <stopCycleRolling>
			beepState |= 0x20;		// stopped cycle
     51a:	c0 62       	ori	r28, 0x20	; 32
     51c:	06 c0       	rjmp	.+12     	; 0x52a <processRollControl+0x54>
		}
		else if (startCycleRolling())
     51e:	44 d7       	rcall	.+3720   	; 0x13a8 <startCycleRolling>
     520:	88 23       	and	r24, r24
     522:	11 f0       	breq	.+4      	; 0x528 <processRollControl+0x52>
		{
			beepState |= 0x10;		// started cycle
     524:	c0 61       	ori	r28, 0x10	; 16
     526:	01 c0       	rjmp	.+2      	; 0x52a <processRollControl+0x54>
		}
		else
		{
			beepState |= 0x40;		// failed to start cycle
     528:	c0 64       	ori	r28, 0x40	; 64
		}			
	}		
	
	if (rollState & ROLL_DIR_CHANGED)
     52a:	80 91 c2 00 	lds	r24, 0x00C2
     52e:	85 ff       	sbrs	r24, 5
     530:	04 c0       	rjmp	.+8      	; 0x53a <processRollControl+0x64>
	{
		rollState &= ~ROLL_DIR_CHANGED;
     532:	8f 7d       	andi	r24, 0xDF	; 223
     534:	80 93 c2 00 	sts	0x00C2, r24
		beepState |= 0x04;	
     538:	c4 60       	ori	r28, 0x04	; 4
	}
	
	if (rollState & CYCLE_ROLL_DONE)
     53a:	80 91 c2 00 	lds	r24, 0x00C2
     53e:	84 ff       	sbrs	r24, 4
     540:	04 c0       	rjmp	.+8      	; 0x54a <processRollControl+0x74>
	{
		rollState &= ~CYCLE_ROLL_DONE;
     542:	8f 7e       	andi	r24, 0xEF	; 239
     544:	80 93 c2 00 	sts	0x00C2, r24
		beepState |= 0x80;	
     548:	c0 68       	ori	r28, 0x80	; 128
	}		
	
	beepState &= beepMask;
     54a:	80 91 ba 00 	lds	r24, 0x00BA
     54e:	c8 23       	and	r28, r24
	
	if (beepState & 0x80)		// Roll cycle done
     550:	3c f4       	brge	.+14     	; 0x560 <processRollControl+0x8a>
	{
		SetBeeperFreq(1000);
     552:	88 ee       	ldi	r24, 0xE8	; 232
     554:	93 e0       	ldi	r25, 0x03	; 3
     556:	6c d8       	rcall	.-3880   	; 0xfffff630 <__eeprom_end+0xff7ef622>
		StartBeep(200);
     558:	88 ec       	ldi	r24, 0xC8	; 200
     55a:	90 e0       	ldi	r25, 0x00	; 0
     55c:	8a d8       	rcall	.-3820   	; 0xfffff672 <__eeprom_end+0xff7ef664>
     55e:	1b c0       	rjmp	.+54     	; 0x596 <processRollControl+0xc0>
	}		
	else if (beepState & 0x40)	// Roll cycle start fail
     560:	c6 ff       	sbrs	r28, 6
     562:	07 c0       	rjmp	.+14     	; 0x572 <processRollControl+0x9c>
	{
		SetBeeperFreq(500);
     564:	84 ef       	ldi	r24, 0xF4	; 244
     566:	91 e0       	ldi	r25, 0x01	; 1
     568:	63 d8       	rcall	.-3898   	; 0xfffff630 <__eeprom_end+0xff7ef622>
		StartBeep(50);
     56a:	82 e3       	ldi	r24, 0x32	; 50
     56c:	90 e0       	ldi	r25, 0x00	; 0
     56e:	81 d8       	rcall	.-3838   	; 0xfffff672 <__eeprom_end+0xff7ef664>
     570:	12 c0       	rjmp	.+36     	; 0x596 <processRollControl+0xc0>
	} 
	else if (beepState & 0x08)	// Reset points
     572:	c3 ff       	sbrs	r28, 3
     574:	07 c0       	rjmp	.+14     	; 0x584 <processRollControl+0xae>
	{
		SetBeeperFreq(800);
     576:	80 e2       	ldi	r24, 0x20	; 32
     578:	93 e0       	ldi	r25, 0x03	; 3
     57a:	5a d8       	rcall	.-3916   	; 0xfffff630 <__eeprom_end+0xff7ef622>
		StartBeep(50);
     57c:	82 e3       	ldi	r24, 0x32	; 50
     57e:	90 e0       	ldi	r25, 0x00	; 0
     580:	78 d8       	rcall	.-3856   	; 0xfffff672 <__eeprom_end+0xff7ef664>
     582:	09 c0       	rjmp	.+18     	; 0x596 <processRollControl+0xc0>
	}							// Other
	else if ( beepState & (0x01 | 0x02 | 0x10 | 0x20 | 0x04) )
     584:	8c 2f       	mov	r24, r28
     586:	87 73       	andi	r24, 0x37	; 55
     588:	31 f0       	breq	.+12     	; 0x596 <processRollControl+0xc0>
	{
		SetBeeperFreq(1000);
     58a:	88 ee       	ldi	r24, 0xE8	; 232
     58c:	93 e0       	ldi	r25, 0x03	; 3
     58e:	50 d8       	rcall	.-3936   	; 0xfffff630 <__eeprom_end+0xff7ef622>
		StartBeep(50);	
     590:	82 e3       	ldi	r24, 0x32	; 50
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	6e d8       	rcall	.-3876   	; 0xfffff672 <__eeprom_end+0xff7ef664>
	}			
	
	// Apply mask to next sound events
	beepMask = 0xFF;
	// Disable beep from DIR_CHANGED on next call if direction buttons have been pressed
	if (beepState & 0x03)	
     596:	c3 70       	andi	r28, 0x03	; 3
     598:	21 f4       	brne	.+8      	; 0x5a2 <processRollControl+0xcc>
		SetBeeperFreq(1000);
		StartBeep(50);	
	}			
	
	// Apply mask to next sound events
	beepMask = 0xFF;
     59a:	8f ef       	ldi	r24, 0xFF	; 255
     59c:	80 93 ba 00 	sts	0x00BA, r24
     5a0:	03 c0       	rjmp	.+6      	; 0x5a8 <processRollControl+0xd2>
	// Disable beep from DIR_CHANGED on next call if direction buttons have been pressed
	if (beepState & 0x03)	
		beepMask &= ~0x04;	
     5a2:	8b ef       	ldi	r24, 0xFB	; 251
     5a4:	80 93 ba 00 	sts	0x00BA, r24
		
	
		
	// Indicate direction by LEDs
	clearExtraLeds(LED_ROTFWD | LED_ROTREV);
     5a8:	80 e3       	ldi	r24, 0x30	; 48
     5aa:	dc d1       	rcall	.+952    	; 0x964 <clearExtraLeds>
	if (rollState & ROLL_FWD)
     5ac:	80 91 c2 00 	lds	r24, 0x00C2
     5b0:	80 ff       	sbrs	r24, 0
     5b2:	03 c0       	rjmp	.+6      	; 0x5ba <processRollControl+0xe4>
		setExtraLeds(LED_ROTFWD);
     5b4:	80 e1       	ldi	r24, 0x10	; 16
     5b6:	d0 d1       	rcall	.+928    	; 0x958 <setExtraLeds>
     5b8:	04 c0       	rjmp	.+8      	; 0x5c2 <processRollControl+0xec>
	else if (rollState & ROLL_REV)
     5ba:	81 ff       	sbrs	r24, 1
     5bc:	02 c0       	rjmp	.+4      	; 0x5c2 <processRollControl+0xec>
		setExtraLeds(LED_ROTREV);
     5be:	80 e2       	ldi	r24, 0x20	; 32
     5c0:	cb d1       	rcall	.+918    	; 0x958 <setExtraLeds>
		
}
     5c2:	cf 91       	pop	r28
     5c4:	08 95       	ret

000005c6 <processHeaterControl>:
{
	// p_flags & HEATER_ENABLED
	static uint8_t heater_ctrl = 0;
	
	// Process heater ON/OFF control by button
	if (button_state & BD_HEATCTRL)
     5c6:	80 91 b6 00 	lds	r24, 0x00B6
     5ca:	86 ff       	sbrs	r24, 6
     5cc:	06 c0       	rjmp	.+12     	; 0x5da <processHeaterControl+0x14>
	{
		heater_ctrl ^= 0x01;
     5ce:	90 91 bb 00 	lds	r25, 0x00BB
     5d2:	81 e0       	ldi	r24, 0x01	; 1
     5d4:	89 27       	eor	r24, r25
     5d6:	80 93 bb 00 	sts	0x00BB, r24
	}
	
	
	if (heater_ctrl)
     5da:	80 91 bb 00 	lds	r24, 0x00BB
     5de:	88 23       	and	r24, r24
     5e0:	29 f0       	breq	.+10     	; 0x5ec <processHeaterControl+0x26>
		// Heater enabled

		//-----------------//
		// Process PID
		//// TODO!!!!
		setHeaterControl(10);
     5e2:	8a e0       	ldi	r24, 0x0A	; 10
     5e4:	77 d6       	rcall	.+3310   	; 0x12d4 <setHeaterControl>
		//-----------------//
		
		setExtraLeds(LED_HEATER);
     5e6:	80 e4       	ldi	r24, 0x40	; 64
     5e8:	b7 d1       	rcall	.+878    	; 0x958 <setExtraLeds>
     5ea:	08 95       	ret
	}
	else
	{
		// Heater disabled
		setHeaterControl(0);
     5ec:	80 e0       	ldi	r24, 0x00	; 0
     5ee:	72 d6       	rcall	.+3300   	; 0x12d4 <setHeaterControl>
		clearExtraLeds(LED_HEATER);
     5f0:	80 e4       	ldi	r24, 0x40	; 64
     5f2:	b8 d1       	rcall	.+880    	; 0x964 <clearExtraLeds>
     5f4:	08 95       	ret

000005f6 <restoreGlobalParams>:
	}
}


void restoreGlobalParams(void)
{
     5f6:	cf 93       	push	r28
     5f8:	df 93       	push	r29
     5fa:	cd b7       	in	r28, 0x3d	; 61
     5fc:	de b7       	in	r29, 0x3e	; 62
     5fe:	2e 97       	sbiw	r28, 0x0e	; 14
     600:	0f b6       	in	r0, 0x3f	; 63
     602:	f8 94       	cli
     604:	de bf       	out	0x3e, r29	; 62
     606:	0f be       	out	0x3f, r0	; 63
     608:	cd bf       	out	0x3d, r28	; 61
	 gParams_t gParams;
	 eeprom_read_block(&gParams,&nvParams,sizeof(nvParams));
     60a:	4e e0       	ldi	r20, 0x0E	; 14
     60c:	50 e0       	ldi	r21, 0x00	; 0
     60e:	60 e0       	ldi	r22, 0x00	; 0
     610:	70 e0       	ldi	r23, 0x00	; 0
     612:	ce 01       	movw	r24, r28
     614:	01 96       	adiw	r24, 0x01	; 1
     616:	7a da       	rcall	.-2828   	; 0xfffffb0c <__eeprom_end+0xff7efafe>
	 setup_temp_value = gParams.setup_temp_value;	// reference temperature
     618:	89 81       	ldd	r24, Y+1	; 0x01
     61a:	80 93 d3 00 	sts	0x00D3, r24
     61e:	10 92 d4 00 	sts	0x00D4, r1
	 rollCycleSet = gParams.rollCycleSet;			// number of rolling cycles
     622:	8a 81       	ldd	r24, Y+2	; 0x02
     624:	80 93 d6 00 	sts	0x00D6, r24
	 sound_enable = gParams.sound_enable;			// Global sound enable
     628:	8b 81       	ldd	r24, Y+3	; 0x03
     62a:	80 93 d5 00 	sts	0x00D5, r24
	 power_off_timeout = gParams.power_off_timeout;	// Auto power OFF timeout, minutes
     62e:	8c 81       	ldd	r24, Y+4	; 0x04
     630:	80 93 db 00 	sts	0x00DB, r24
	 cpoint1 = gParams.cpoint1;						// Calibration point 1
     634:	8d 81       	ldd	r24, Y+5	; 0x05
     636:	80 93 d2 00 	sts	0x00D2, r24
	 cpoint2 = gParams.cpoint2;						// Calibration point 2
     63a:	8e 81       	ldd	r24, Y+6	; 0x06
     63c:	80 93 dc 00 	sts	0x00DC, r24
	 k_norm = gParams.k_norm;
     640:	8f 81       	ldd	r24, Y+7	; 0x07
     642:	98 85       	ldd	r25, Y+8	; 0x08
     644:	a9 85       	ldd	r26, Y+9	; 0x09
     646:	ba 85       	ldd	r27, Y+10	; 0x0a
     648:	80 93 d7 00 	sts	0x00D7, r24
     64c:	90 93 d8 00 	sts	0x00D8, r25
     650:	a0 93 d9 00 	sts	0x00D9, r26
     654:	b0 93 da 00 	sts	0x00DA, r27
	 offset_norm = gParams.offset_norm;
     658:	8b 85       	ldd	r24, Y+11	; 0x0b
     65a:	9c 85       	ldd	r25, Y+12	; 0x0c
     65c:	ad 85       	ldd	r26, Y+13	; 0x0d
     65e:	be 85       	ldd	r27, Y+14	; 0x0e
     660:	80 93 dd 00 	sts	0x00DD, r24
     664:	90 93 de 00 	sts	0x00DE, r25
     668:	a0 93 df 00 	sts	0x00DF, r26
     66c:	b0 93 e0 00 	sts	0x00E0, r27
}
     670:	2e 96       	adiw	r28, 0x0e	; 14
     672:	0f b6       	in	r0, 0x3f	; 63
     674:	f8 94       	cli
     676:	de bf       	out	0x3e, r29	; 62
     678:	0f be       	out	0x3f, r0	; 63
     67a:	cd bf       	out	0x3d, r28	; 61
     67c:	df 91       	pop	r29
     67e:	cf 91       	pop	r28
     680:	08 95       	ret

00000682 <exitPowerOff>:

void exitPowerOff(void)
{
     682:	08 95       	ret

00000684 <decode_led_char>:
// Decodes normal string literal to the 
//	7-segment representation
//---------------------------------------------//
static uint8_t decode_led_char(char c)
{
	switch(c)
     684:	48 2f       	mov	r20, r24
     686:	50 e0       	ldi	r21, 0x00	; 0
     688:	fa 01       	movw	r30, r20
     68a:	b0 97       	sbiw	r30, 0x20	; 32
     68c:	e1 39       	cpi	r30, 0x91	; 145
     68e:	f1 05       	cpc	r31, r1
     690:	70 f5       	brcc	.+92     	; 0x6ee <decode_led_char+0x6a>
     692:	ed 5e       	subi	r30, 0xED	; 237
     694:	ff 4f       	sbci	r31, 0xFF	; 255
     696:	09 94       	ijmp
	{
		case 'O':
		case '0': return (SEGA | SEGB | SEGC | SEGD | SEGE | SEGF);
     698:	8f e3       	ldi	r24, 0x3F	; 63
     69a:	08 95       	ret
		case '1': return (SEGB | SEGC );
		case '2': return (SEGA | SEGB | SEGD | SEGE | SEGG);
     69c:	8b e5       	ldi	r24, 0x5B	; 91
     69e:	08 95       	ret
		case '3': return (SEGA | SEGB | SEGC | SEGD | SEGG);
     6a0:	8f e4       	ldi	r24, 0x4F	; 79
     6a2:	08 95       	ret
		case '4': return (SEGB | SEGC | SEGF | SEGG);
     6a4:	86 e6       	ldi	r24, 0x66	; 102
     6a6:	08 95       	ret
		case 'S':
		case '5': return (SEGA | SEGC | SEGD | SEGF | SEGG);
     6a8:	8d e6       	ldi	r24, 0x6D	; 109
     6aa:	08 95       	ret
		case '6': return (SEGA | SEGC | SEGD | SEGE | SEGF | SEGG);
     6ac:	8d e7       	ldi	r24, 0x7D	; 125
     6ae:	08 95       	ret
		case '7': return (SEGA | SEGB | SEGC );
     6b0:	87 e0       	ldi	r24, 0x07	; 7
     6b2:	08 95       	ret
		case '8': return (SEGA | SEGB | SEGC | SEGD | SEGE | SEGF | SEGG);
     6b4:	8f e7       	ldi	r24, 0x7F	; 127
     6b6:	08 95       	ret
		case '9': return (SEGA | SEGB | SEGC | SEGD | SEGF | SEGG);
     6b8:	8f e6       	ldi	r24, 0x6F	; 111
     6ba:	08 95       	ret
		case '.': return (SEGH);
     6bc:	80 e8       	ldi	r24, 0x80	; 128
     6be:	08 95       	ret
		case ',': return (SEGH);
     6c0:	80 e8       	ldi	r24, 0x80	; 128
     6c2:	08 95       	ret
		case '-': return (SEGG);
     6c4:	80 e4       	ldi	r24, 0x40	; 64
     6c6:	08 95       	ret
		case '_': return (SEGD);
     6c8:	88 e0       	ldi	r24, 0x08	; 8
     6ca:	08 95       	ret
		case ' ': return 0;
     6cc:	80 e0       	ldi	r24, 0x00	; 0
     6ce:	08 95       	ret
		case 0xB0:	return (SEGA | SEGB | SEGF | SEGG);		// Degree sin
     6d0:	83 e6       	ldi	r24, 0x63	; 99
     6d2:	08 95       	ret
		case 'C':	return (SEGA | SEGD | SEGE | SEGF);
     6d4:	89 e3       	ldi	r24, 0x39	; 57
     6d6:	08 95       	ret
		case 'F':	return (SEGA | SEGE | SEGF | SEGG);
     6d8:	81 e7       	ldi	r24, 0x71	; 113
     6da:	08 95       	ret
		case 'N':	return (SEGC | SEGE | SEGG);
     6dc:	84 e5       	ldi	r24, 0x54	; 84
     6de:	08 95       	ret
		case 'D': return (SEGB | SEGC | SEGD | SEGE | SEGG);
     6e0:	8e e5       	ldi	r24, 0x5E	; 94
     6e2:	08 95       	ret
		case 'P': return (SEGA | SEGB | SEGE | SEGF | SEGG);
     6e4:	83 e7       	ldi	r24, 0x73	; 115
     6e6:	08 95       	ret
		case 'E': return (SEGA | SEGD | SEGE | SEGF | SEGG);
     6e8:	89 e7       	ldi	r24, 0x79	; 121
     6ea:	08 95       	ret
{
	switch(c)
	{
		case 'O':
		case '0': return (SEGA | SEGB | SEGC | SEGD | SEGE | SEGF);
		case '1': return (SEGB | SEGC );
     6ec:	86 e0       	ldi	r24, 0x06	; 6
		case 'D': return (SEGB | SEGC | SEGD | SEGE | SEGG);
		case 'P': return (SEGA | SEGB | SEGE | SEGF | SEGG);
		case 'E': return (SEGA | SEGD | SEGE | SEGF | SEGG);
		default:  return c;	
	}
}
     6ee:	08 95       	ret

000006f0 <wrap_led_buffer_index>:
//---------------------------------------------//
// Ensures that index is inside the buffer
// -128 <= index <= 127
//---------------------------------------------//
static uint8_t wrap_led_buffer_index(int8_t buf_index)
{
     6f0:	98 2f       	mov	r25, r24
	uint8_t new_index_u;
	new_index_u = (uint8_t) ((buf_index < 0) ? -buf_index : buf_index);
     6f2:	87 fd       	sbrc	r24, 7
     6f4:	81 95       	neg	r24
	if (new_index_u >= LED_BUFFER_LENGTH)
     6f6:	8e 30       	cpi	r24, 0x0E	; 14
     6f8:	78 f0       	brcs	.+30     	; 0x718 <wrap_led_buffer_index+0x28>
		new_index_u = new_index_u % LED_BUFFER_LENGTH;
     6fa:	38 2f       	mov	r19, r24
     6fc:	36 95       	lsr	r19
     6fe:	23 e9       	ldi	r18, 0x93	; 147
     700:	32 9f       	mul	r19, r18
     702:	21 2d       	mov	r18, r1
     704:	11 24       	eor	r1, r1
     706:	26 95       	lsr	r18
     708:	26 95       	lsr	r18
     70a:	22 0f       	add	r18, r18
     70c:	32 2f       	mov	r19, r18
     70e:	33 0f       	add	r19, r19
     710:	33 0f       	add	r19, r19
     712:	33 0f       	add	r19, r19
     714:	32 1b       	sub	r19, r18
     716:	83 1b       	sub	r24, r19
	new_index_u = ((buf_index >= 0) || (new_index_u == 0)) ? new_index_u :  LED_BUFFER_LENGTH - new_index_u ;
     718:	99 23       	and	r25, r25
     71a:	2c f4       	brge	.+10     	; 0x726 <wrap_led_buffer_index+0x36>
     71c:	88 23       	and	r24, r24
     71e:	19 f0       	breq	.+6      	; 0x726 <wrap_led_buffer_index+0x36>
     720:	9e e0       	ldi	r25, 0x0E	; 14
     722:	98 1b       	sub	r25, r24
     724:	89 2f       	mov	r24, r25
	return new_index_u;
}
     726:	08 95       	ret

00000728 <processLedIndicator>:
// Call this function N times per sec to get N/NUM_DIGITS_TOTAL display update rate, where
// NUM_DIGITS_TOTAL is number_of_digits_of_LED_display if no extra LEDs are used or
// (number_of_digits_of_LED_display + 1) otherwise.
//---------------------------------------------//
void processLedIndicator()
{
     728:	cf 93       	push	r28
	disable_led_segments();
	#endif
	
	
	// Perform regular shift
	led_clock_pulse(!LED_DIGIT_ACT_LVL);
     72a:	81 e0       	ldi	r24, 0x01	; 1
     72c:	22 d1       	rcall	.+580    	; 0x972 <led_clock_pulse>
	
	switch (wActivePos)
     72e:	80 91 bd 00 	lds	r24, 0x00BD
     732:	88 23       	and	r24, r24
     734:	19 f0       	breq	.+6      	; 0x73c <processLedIndicator+0x14>
     736:	86 30       	cpi	r24, 0x06	; 6
     738:	f1 f5       	brne	.+124    	; 0x7b6 <processLedIndicator+0x8e>
     73a:	12 c0       	rjmp	.+36     	; 0x760 <processLedIndicator+0x38>
	{
	case 0:
		// Get buttons
		#ifndef CLEAN_OPERATION
		disable_led_segments();
     73c:	46 d1       	rcall	.+652    	; 0x9ca <disable_led_segments>
		#endif
		enable_led_segments_pullups();
     73e:	37 d1       	rcall	.+622    	; 0x9ae <enable_led_segments_pullups>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     740:	85 e3       	ldi	r24, 0x35	; 53
     742:	8a 95       	dec	r24
     744:	f1 f7       	brne	.-4      	; 0x742 <processLedIndicator+0x1a>
     746:	00 00       	nop
		_delay_us(PULLUP_DELAY_US);
		capture_button_state();
     748:	47 d1       	rcall	.+654    	; 0x9d8 <capture_button_state>
		#ifndef CLEAN_OPERATION
		enable_led_segments();
     74a:	38 d1       	rcall	.+624    	; 0x9bc <enable_led_segments>
		#endif
		// Start new cycle with active digit level
		led_clock_pulse(LED_DIGIT_ACT_LVL);
     74c:	80 e0       	ldi	r24, 0x00	; 0
     74e:	11 d1       	rcall	.+546    	; 0x972 <led_clock_pulse>
		// Always start new cycle from specified buffer start position
		bufActivePos = wStartPos;
     750:	80 91 e2 00 	lds	r24, 0x00E2
     754:	80 93 bc 00 	sts	0x00BC, r24
		next_wActivePos = wActivePos + 1;
     758:	c0 91 bd 00 	lds	r28, 0x00BD
     75c:	cf 5f       	subi	r28, 0xFF	; 255
		break;
     75e:	2f c0       	rjmp	.+94     	; 0x7be <processLedIndicator+0x96>
//---------------------------------------------//
// Performs window shifting
//---------------------------------------------//
static void processWindowShifter(void)
{
	if (shifterState == LED_SHIFT_DONE)
     760:	80 91 e3 00 	lds	r24, 0x00E3
     764:	88 23       	and	r24, r24
     766:	81 f1       	breq	.+96     	; 0x7c8 <processLedIndicator+0xa0>
		return;
	
	// Process shift timer
	processSoftTimer8b(&shiftTimer);	
     768:	8e eb       	ldi	r24, 0xBE	; 190
     76a:	90 e0       	ldi	r25, 0x00	; 0
     76c:	33 d7       	rcall	.+3686   	; 0x15d4 <processSoftTimer8b>
	
	if (shiftTimer.FTop)
     76e:	80 91 be 00 	lds	r24, 0x00BE
     772:	85 ff       	sbrs	r24, 5
     774:	23 c0       	rjmp	.+70     	; 0x7bc <processLedIndicator+0x94>
	{
		// Check if finished
		if (wStartPos == bufStartPos)	
     776:	80 91 e2 00 	lds	r24, 0x00E2
     77a:	90 91 e4 00 	lds	r25, 0x00E4
     77e:	89 13       	cpse	r24, r25
     780:	04 c0       	rjmp	.+8      	; 0x78a <processLedIndicator+0x62>
		{
			// Update state
			shifterState = LED_SHIFT_DONE;
     782:	10 92 e3 00 	sts	0x00E3, r1
		// Always start new cycle from specified buffer start position
		bufActivePos = wStartPos;
		next_wActivePos = wActivePos + 1;
		break;
	case NUM_DIGITS_TOTAL-1:
		next_wActivePos = 0;
     786:	c0 e0       	ldi	r28, 0x00	; 0
     788:	1a c0       	rjmp	.+52     	; 0x7be <processLedIndicator+0x96>
		if (wStartPos == bufStartPos)	
		{
			// Update state
			shifterState = LED_SHIFT_DONE;
		}
		else if (shifterState == LED_SHIFT_RIGHT)
     78a:	90 91 e3 00 	lds	r25, 0x00E3
     78e:	92 30       	cpi	r25, 0x02	; 2
     790:	49 f4       	brne	.+18     	; 0x7a4 <processLedIndicator+0x7c>
// Increments index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t inc_buffer_position(uint8_t position)
{
	return (position >= LED_BUFFER_LENGTH - 1) ? 0 : position + 1;
     792:	8d 30       	cpi	r24, 0x0D	; 13
     794:	10 f4       	brcc	.+4      	; 0x79a <processLedIndicator+0x72>
     796:	8f 5f       	subi	r24, 0xFF	; 255
     798:	01 c0       	rjmp	.+2      	; 0x79c <processLedIndicator+0x74>
     79a:	80 e0       	ldi	r24, 0x00	; 0
			// Update state
			shifterState = LED_SHIFT_DONE;
		}
		else if (shifterState == LED_SHIFT_RIGHT)
		{
			wStartPos = inc_buffer_position(wStartPos);	
     79c:	80 93 e2 00 	sts	0x00E2, r24
		// Always start new cycle from specified buffer start position
		bufActivePos = wStartPos;
		next_wActivePos = wActivePos + 1;
		break;
	case NUM_DIGITS_TOTAL-1:
		next_wActivePos = 0;
     7a0:	c0 e0       	ldi	r28, 0x00	; 0
     7a2:	0d c0       	rjmp	.+26     	; 0x7be <processLedIndicator+0x96>
// Decrements index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t dec_buffer_position(uint8_t position)
{
	return (position == 0) ? LED_BUFFER_LENGTH - 1 : position - 1;
     7a4:	88 23       	and	r24, r24
     7a6:	11 f0       	breq	.+4      	; 0x7ac <processLedIndicator+0x84>
     7a8:	81 50       	subi	r24, 0x01	; 1
     7aa:	01 c0       	rjmp	.+2      	; 0x7ae <processLedIndicator+0x86>
     7ac:	8d e0       	ldi	r24, 0x0D	; 13
		{
			wStartPos = inc_buffer_position(wStartPos);	
		}
		else
		{
			wStartPos = dec_buffer_position(wStartPos);		
     7ae:	80 93 e2 00 	sts	0x00E2, r24
		// Always start new cycle from specified buffer start position
		bufActivePos = wStartPos;
		next_wActivePos = wActivePos + 1;
		break;
	case NUM_DIGITS_TOTAL-1:
		next_wActivePos = 0;
     7b2:	c0 e0       	ldi	r28, 0x00	; 0
     7b4:	04 c0       	rjmp	.+8      	; 0x7be <processLedIndicator+0x96>
		// Shift LED window
		processWindowShifter();	
		break;
	default:
		next_wActivePos = wActivePos + 1;
     7b6:	c8 2f       	mov	r28, r24
     7b8:	cf 5f       	subi	r28, 0xFF	; 255
		break;
     7ba:	01 c0       	rjmp	.+2      	; 0x7be <processLedIndicator+0x96>
		// Always start new cycle from specified buffer start position
		bufActivePos = wStartPos;
		next_wActivePos = wActivePos + 1;
		break;
	case NUM_DIGITS_TOTAL-1:
		next_wActivePos = 0;
     7bc:	c0 e0       	ldi	r28, 0x00	; 0
		next_wActivePos = wActivePos + 1;
		break;
	}		
	
	#ifdef 	USE_EXTRA_LED_DIGIT
	if (wActivePos == EXTRA_DIGIT_NUM)
     7be:	80 91 bd 00 	lds	r24, 0x00BD
     7c2:	86 30       	cpi	r24, 0x06	; 6
     7c4:	31 f4       	brne	.+12     	; 0x7d2 <processLedIndicator+0xaa>
     7c6:	01 c0       	rjmp	.+2      	; 0x7ca <processLedIndicator+0xa2>
		// Always start new cycle from specified buffer start position
		bufActivePos = wStartPos;
		next_wActivePos = wActivePos + 1;
		break;
	case NUM_DIGITS_TOTAL-1:
		next_wActivePos = 0;
     7c8:	c0 e0       	ldi	r28, 0x00	; 0
	
	#ifdef 	USE_EXTRA_LED_DIGIT
	if (wActivePos == EXTRA_DIGIT_NUM)
	{
		// Output separate LEDs state
		set_led_segments(extra_led_state);
     7ca:	80 91 e1 00 	lds	r24, 0x00E1
     7ce:	e1 d0       	rcall	.+450    	; 0x992 <set_led_segments>
     7d0:	10 c0       	rjmp	.+32     	; 0x7f2 <processLedIndicator+0xca>
	}
	else
	#endif
	{
		// Output new segment data
		set_led_segments(led_data_buffer[bufActivePos]);
     7d2:	e0 91 bc 00 	lds	r30, 0x00BC
     7d6:	f0 e0       	ldi	r31, 0x00	; 0
     7d8:	eb 51       	subi	r30, 0x1B	; 27
     7da:	ff 4f       	sbci	r31, 0xFF	; 255
     7dc:	80 81       	ld	r24, Z
     7de:	d9 d0       	rcall	.+434    	; 0x992 <set_led_segments>
		// Wrap around buffer length
		bufActivePos = inc_buffer_position(bufActivePos );
     7e0:	90 91 bc 00 	lds	r25, 0x00BC
// Increments index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t inc_buffer_position(uint8_t position)
{
	return (position >= LED_BUFFER_LENGTH - 1) ? 0 : position + 1;
     7e4:	9d 30       	cpi	r25, 0x0D	; 13
     7e6:	10 f4       	brcc	.+4      	; 0x7ec <processLedIndicator+0xc4>
     7e8:	9f 5f       	subi	r25, 0xFF	; 255
     7ea:	01 c0       	rjmp	.+2      	; 0x7ee <processLedIndicator+0xc6>
     7ec:	90 e0       	ldi	r25, 0x00	; 0
	#endif
	{
		// Output new segment data
		set_led_segments(led_data_buffer[bufActivePos]);
		// Wrap around buffer length
		bufActivePos = inc_buffer_position(bufActivePos );
     7ee:	90 93 bc 00 	sts	0x00BC, r25
	}
		
	wActivePos = next_wActivePos;
     7f2:	c0 93 bd 00 	sts	0x00BD, r28
	
	#ifdef CLEAN_OPERATION
	enable_led_segments();
	#endif

}
     7f6:	cf 91       	pop	r28
     7f8:	08 95       	ret

000007fa <fillLedBuffer>:
//---------------------------------------------//
// Fills buffer from (bufStartPos + offset) 
//	position with single char
//---------------------------------------------//
void fillLedBuffer(int8_t offset, uint8_t length, char c)
{
     7fa:	1f 93       	push	r17
     7fc:	cf 93       	push	r28
     7fe:	df 93       	push	r29
     800:	18 2f       	mov	r17, r24
     802:	c6 2f       	mov	r28, r22
     804:	84 2f       	mov	r24, r20
	uint8_t val = decode_led_char(c);
     806:	3e df       	rcall	.-388    	; 0x684 <decode_led_char>
     808:	d8 2f       	mov	r29, r24
	// Ensure index is inside the buffer
	uint8_t position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
     80a:	80 91 e4 00 	lds	r24, 0x00E4
     80e:	81 0f       	add	r24, r17
     810:	6f df       	rcall	.-290    	; 0x6f0 <wrap_led_buffer_index>
// Increments index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t inc_buffer_position(uint8_t position)
{
	return (position >= LED_BUFFER_LENGTH - 1) ? 0 : position + 1;
     812:	90 e0       	ldi	r25, 0x00	; 0
void fillLedBuffer(int8_t offset, uint8_t length, char c)
{
	uint8_t val = decode_led_char(c);
	// Ensure index is inside the buffer
	uint8_t position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
	while(length--)
     814:	0a c0       	rjmp	.+20     	; 0x82a <fillLedBuffer+0x30>
	{
		led_data_buffer[position] = val;
     816:	e8 2f       	mov	r30, r24
     818:	f0 e0       	ldi	r31, 0x00	; 0
     81a:	eb 51       	subi	r30, 0x1B	; 27
     81c:	ff 4f       	sbci	r31, 0xFF	; 255
     81e:	d0 83       	st	Z, r29
// Increments index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t inc_buffer_position(uint8_t position)
{
	return (position >= LED_BUFFER_LENGTH - 1) ? 0 : position + 1;
     820:	8d 30       	cpi	r24, 0x0D	; 13
     822:	10 f4       	brcc	.+4      	; 0x828 <fillLedBuffer+0x2e>
     824:	8f 5f       	subi	r24, 0xFF	; 255
     826:	01 c0       	rjmp	.+2      	; 0x82a <fillLedBuffer+0x30>
     828:	89 2f       	mov	r24, r25
void fillLedBuffer(int8_t offset, uint8_t length, char c)
{
	uint8_t val = decode_led_char(c);
	// Ensure index is inside the buffer
	uint8_t position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
	while(length--)
     82a:	c1 50       	subi	r28, 0x01	; 1
     82c:	a0 f7       	brcc	.-24     	; 0x816 <fillLedBuffer+0x1c>
	{
		led_data_buffer[position] = val;
		position = inc_buffer_position(position);
	}
}
     82e:	df 91       	pop	r29
     830:	cf 91       	pop	r28
     832:	1f 91       	pop	r17
     834:	08 95       	ret

00000836 <startShiftingWindowLeft>:
//	LED window left 
//---------------------------------------------//
void startShiftingWindowLeft(void)
{
	// Clear spaces between menu states
	fillLedBuffer(-2,2,' ');
     836:	40 e2       	ldi	r20, 0x20	; 32
     838:	62 e0       	ldi	r22, 0x02	; 2
     83a:	8e ef       	ldi	r24, 0xFE	; 254
     83c:	de df       	rcall	.-68     	; 0x7fa <fillLedBuffer>
	// Set new buffer position for writing
	bufStartPos = wrap_led_buffer_index( (int8_t)bufStartPos - (NUM_DIGITS + 2) );
     83e:	80 91 e4 00 	lds	r24, 0x00E4
     842:	88 50       	subi	r24, 0x08	; 8
     844:	55 df       	rcall	.-342    	; 0x6f0 <wrap_led_buffer_index>
     846:	80 93 e4 00 	sts	0x00E4, r24
	// Set shifter state
	shifterState = LED_SHIFT_LEFT;
     84a:	81 e0       	ldi	r24, 0x01	; 1
     84c:	80 93 e3 00 	sts	0x00E3, r24
     850:	08 95       	ret

00000852 <startShiftingWindowRight>:
//	LED window right 
//---------------------------------------------//
void startShiftingWindowRight(void)
{
	// Clear spaces between menu states
	fillLedBuffer(NUM_DIGITS,2,' ');
     852:	40 e2       	ldi	r20, 0x20	; 32
     854:	62 e0       	ldi	r22, 0x02	; 2
     856:	86 e0       	ldi	r24, 0x06	; 6
     858:	d0 df       	rcall	.-96     	; 0x7fa <fillLedBuffer>
	// Set new buffer position for writing
	bufStartPos = wrap_led_buffer_index( (int8_t)bufStartPos + NUM_DIGITS + 2 );
     85a:	80 91 e4 00 	lds	r24, 0x00E4
     85e:	88 5f       	subi	r24, 0xF8	; 248
     860:	47 df       	rcall	.-370    	; 0x6f0 <wrap_led_buffer_index>
     862:	80 93 e4 00 	sts	0x00E4, r24
	// Set shifter state
	shifterState = LED_SHIFT_RIGHT;
     866:	82 e0       	ldi	r24, 0x02	; 2
     868:	80 93 e3 00 	sts	0x00E3, r24
     86c:	08 95       	ret

0000086e <initLedIndicator>:
//---------------------------------------------//
//	Initialization
//	Call this function at start of your program
//---------------------------------------------//
void initLedIndicator()
{
     86e:	cf 93       	push	r28
	uint8_t i;
	// First disable outputs
	disable_led_segments();
     870:	ac d0       	rcall	.+344    	; 0x9ca <disable_led_segments>
     872:	c7 e0       	ldi	r28, 0x07	; 7
	// Fill shift register with non-active levels
	for (i=0;i<NUM_DIGITS_TOTAL;i++)
	{
		led_clock_pulse(!LED_DIGIT_ACT_LVL);
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	7d d0       	rcall	.+250    	; 0x972 <led_clock_pulse>
     878:	c1 50       	subi	r28, 0x01	; 1
{
	uint8_t i;
	// First disable outputs
	disable_led_segments();
	// Fill shift register with non-active levels
	for (i=0;i<NUM_DIGITS_TOTAL;i++)
     87a:	e1 f7       	brne	.-8      	; 0x874 <initLedIndicator+0x6>
	{
		led_clock_pulse(!LED_DIGIT_ACT_LVL);
	}
	// Now enable outputs
	enable_led_segments();
     87c:	9f d0       	rcall	.+318    	; 0x9bc <enable_led_segments>
	
	// Reset pointers
	wStartPos = 0;
     87e:	10 92 e2 00 	sts	0x00E2, r1
	bufStartPos = 0;
     882:	10 92 e4 00 	sts	0x00E4, r1
	bufActivePos = 0;
     886:	10 92 bc 00 	sts	0x00BC, r1
	wActivePos = 0;
     88a:	10 92 bd 00 	sts	0x00BD, r1
	#ifdef 	USE_EXTRA_LED_DIGIT
	extra_led_state = 0;
     88e:	10 92 e1 00 	sts	0x00E1, r1
	#endif
	
	// Clear the buffer 
	fillLedBuffer(0,LED_BUFFER_LENGTH,' ');
     892:	40 e2       	ldi	r20, 0x20	; 32
     894:	6e e0       	ldi	r22, 0x0E	; 14
     896:	80 e0       	ldi	r24, 0x00	; 0
     898:	b0 df       	rcall	.-160    	; 0x7fa <fillLedBuffer>
	
	// Initialize shift timer - always enabled, but 
	//	processed only when shifting is active
	shifterState = LED_SHIFT_DONE;
     89a:	10 92 e3 00 	sts	0x00E3, r1
	shiftTimer.Enabled = 1;
     89e:	ee eb       	ldi	r30, 0xBE	; 190
     8a0:	f0 e0       	ldi	r31, 0x00	; 0
     8a2:	80 81       	ld	r24, Z
	shiftTimer.RunOnce = 0;
     8a4:	81 60       	ori	r24, 0x01	; 1
     8a6:	8d 7f       	andi	r24, 0xFD	; 253
     8a8:	80 83       	st	Z, r24
	shiftTimer.Top = LED_SHIFT_INTERVAL-1;
     8aa:	89 e0       	ldi	r24, 0x09	; 9
     8ac:	80 93 c0 00 	sts	0x00C0, r24
}
     8b0:	cf 91       	pop	r28
     8b2:	08 95       	ret

000008b4 <printLedBuffer>:
//		str - null-terminated char string
// Comma and dot (".", ",") get special processing - first occurrence is added to
// a preceding char, next are displayed as a single digit
//---------------------------------------------//
void printLedBuffer(int8_t offset, char* str)
{
     8b4:	df 92       	push	r13
     8b6:	ef 92       	push	r14
     8b8:	ff 92       	push	r15
     8ba:	0f 93       	push	r16
     8bc:	1f 93       	push	r17
     8be:	cf 93       	push	r28
     8c0:	df 93       	push	r29
     8c2:	eb 01       	movw	r28, r22
	char c;
	uint8_t decoded_sym;
	uint8_t state = 0x02;
	uint8_t comma_pos;
	// Ensure index is inside the buffer
	uint8_t buffer_position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
     8c4:	90 91 e4 00 	lds	r25, 0x00E4
     8c8:	89 0f       	add	r24, r25
     8ca:	12 df       	rcall	.-476    	; 0x6f0 <wrap_led_buffer_index>
     8cc:	18 2f       	mov	r17, r24
	comma_pos = buffer_position;
     8ce:	d8 2e       	mov	r13, r24
//---------------------------------------------//
void printLedBuffer(int8_t offset, char* str)
{
	char c;
	uint8_t decoded_sym;
	uint8_t state = 0x02;
     8d0:	02 e0       	ldi	r16, 0x02	; 2
		comma_pos = buffer_position;
		if (state != 0x01)
		{
			buffer_position = inc_buffer_position(buffer_position);
		}
		state = (state & 0x01) ? 0x03 : 0x00;		
     8d2:	f1 2c       	mov	r15, r1
     8d4:	0f 2e       	mov	r0, r31
     8d6:	f3 e0       	ldi	r31, 0x03	; 3
     8d8:	ef 2e       	mov	r14, r31
     8da:	f0 2d       	mov	r31, r0
	uint8_t comma_pos;
	// Ensure index is inside the buffer
	uint8_t buffer_position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
	comma_pos = buffer_position;
	// Output chars
	while((c = *str++))
     8dc:	26 c0       	rjmp	.+76     	; 0x92a <printLedBuffer+0x76>
	{
		decoded_sym = decode_led_char(c);
     8de:	d2 de       	rcall	.-604    	; 0x684 <decode_led_char>
		state = (decoded_sym == SEGH) ? (state | 0x01) : (state & ~0x01);
     8e0:	80 38       	cpi	r24, 0x80	; 128
     8e2:	19 f4       	brne	.+6      	; 0x8ea <printLedBuffer+0x36>
     8e4:	90 2f       	mov	r25, r16
     8e6:	91 60       	ori	r25, 0x01	; 1
     8e8:	02 c0       	rjmp	.+4      	; 0x8ee <printLedBuffer+0x3a>
     8ea:	90 2f       	mov	r25, r16
     8ec:	9e 7f       	andi	r25, 0xFE	; 254
		if (state == 0x01)			
     8ee:	91 30       	cpi	r25, 0x01	; 1
     8f0:	51 f4       	brne	.+20     	; 0x906 <printLedBuffer+0x52>
		{
			led_data_buffer[comma_pos] |= decoded_sym;
     8f2:	ed 2d       	mov	r30, r13
     8f4:	f0 e0       	ldi	r31, 0x00	; 0
     8f6:	eb 51       	subi	r30, 0x1B	; 27
     8f8:	ff 4f       	sbci	r31, 0xFF	; 255
     8fa:	90 81       	ld	r25, Z
     8fc:	89 2b       	or	r24, r25
     8fe:	80 83       	st	Z, r24
     900:	81 2f       	mov	r24, r17
		comma_pos = buffer_position;
		if (state != 0x01)
		{
			buffer_position = inc_buffer_position(buffer_position);
		}
		state = (state & 0x01) ? 0x03 : 0x00;		
     902:	0e 2d       	mov	r16, r14
     904:	10 c0       	rjmp	.+32     	; 0x926 <printLedBuffer+0x72>
		{
			led_data_buffer[comma_pos] |= decoded_sym;
		}
		else
		{
			led_data_buffer[buffer_position] = decoded_sym;	
     906:	e1 2f       	mov	r30, r17
     908:	f0 e0       	ldi	r31, 0x00	; 0
     90a:	eb 51       	subi	r30, 0x1B	; 27
     90c:	ff 4f       	sbci	r31, 0xFF	; 255
     90e:	80 83       	st	Z, r24
// Increments index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t inc_buffer_position(uint8_t position)
{
	return (position >= LED_BUFFER_LENGTH - 1) ? 0 : position + 1;
     910:	1d 30       	cpi	r17, 0x0D	; 13
     912:	18 f4       	brcc	.+6      	; 0x91a <printLedBuffer+0x66>
     914:	81 2f       	mov	r24, r17
     916:	8f 5f       	subi	r24, 0xFF	; 255
     918:	01 c0       	rjmp	.+2      	; 0x91c <printLedBuffer+0x68>
     91a:	8f 2d       	mov	r24, r15
		comma_pos = buffer_position;
		if (state != 0x01)
		{
			buffer_position = inc_buffer_position(buffer_position);
		}
		state = (state & 0x01) ? 0x03 : 0x00;		
     91c:	90 ff       	sbrs	r25, 0
     91e:	02 c0       	rjmp	.+4      	; 0x924 <printLedBuffer+0x70>
     920:	0e 2d       	mov	r16, r14
     922:	01 c0       	rjmp	.+2      	; 0x926 <printLedBuffer+0x72>
     924:	0f 2d       	mov	r16, r15
     926:	d1 2e       	mov	r13, r17
     928:	18 2f       	mov	r17, r24
	uint8_t comma_pos;
	// Ensure index is inside the buffer
	uint8_t buffer_position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
	comma_pos = buffer_position;
	// Output chars
	while((c = *str++))
     92a:	89 91       	ld	r24, Y+
     92c:	81 11       	cpse	r24, r1
     92e:	d7 cf       	rjmp	.-82     	; 0x8de <printLedBuffer+0x2a>
		{
			buffer_position = inc_buffer_position(buffer_position);
		}
		state = (state & 0x01) ? 0x03 : 0x00;		
	}
}
     930:	df 91       	pop	r29
     932:	cf 91       	pop	r28
     934:	1f 91       	pop	r17
     936:	0f 91       	pop	r16
     938:	ff 90       	pop	r15
     93a:	ef 90       	pop	r14
     93c:	df 90       	pop	r13
     93e:	08 95       	ret

00000940 <setComma>:
//	buffer cell
//---------------------------------------------//
void setComma(int8_t offset)
{
	// Ensure index is inside the buffer
	uint8_t position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
     940:	90 91 e4 00 	lds	r25, 0x00E4
     944:	89 0f       	add	r24, r25
     946:	d4 de       	rcall	.-600    	; 0x6f0 <wrap_led_buffer_index>
	led_data_buffer[position] |= (SEGH);
     948:	e8 2f       	mov	r30, r24
     94a:	f0 e0       	ldi	r31, 0x00	; 0
     94c:	eb 51       	subi	r30, 0x1B	; 27
     94e:	ff 4f       	sbci	r31, 0xFF	; 255
     950:	80 81       	ld	r24, Z
     952:	80 68       	ori	r24, 0x80	; 128
     954:	80 83       	st	Z, r24
     956:	08 95       	ret

00000958 <setExtraLeds>:
// Argument is ORed with current LED state
//---------------------------------------------//
inline void setExtraLeds(uint8_t leds_set_value)
{
		//asm("cli");
		extra_led_state |= leds_set_value;
     958:	90 91 e1 00 	lds	r25, 0x00E1
     95c:	89 2b       	or	r24, r25
     95e:	80 93 e1 00 	sts	0x00E1, r24
     962:	08 95       	ret

00000964 <clearExtraLeds>:
// Argument is AND NOTed with current LED state
//---------------------------------------------//
inline void clearExtraLeds(uint8_t leds_clear_value)
{
		//asm("cli");
		extra_led_state &= ~leds_clear_value;
     964:	90 91 e1 00 	lds	r25, 0x00E1
     968:	80 95       	com	r24
     96a:	98 23       	and	r25, r24
     96c:	90 93 e1 00 	sts	0x00E1, r25
     970:	08 95       	ret

00000972 <led_clock_pulse>:


// Clocks in bit into the shift register
void led_clock_pulse(uint8_t bit)
{
	if (bit)
     972:	88 23       	and	r24, r24
     974:	11 f0       	breq	.+4      	; 0x97a <led_clock_pulse+0x8>
		PORTB |= (1<<PB_LED_DOUT);
     976:	c0 9a       	sbi	0x18, 0	; 24
     978:	01 c0       	rjmp	.+2      	; 0x97c <led_clock_pulse+0xa>
	else
		PORTB &= ~(1<<PB_LED_DOUT);
     97a:	c0 98       	cbi	0x18, 0	; 24
     97c:	8a e1       	ldi	r24, 0x1A	; 26
     97e:	8a 95       	dec	r24
     980:	f1 f7       	brne	.-4      	; 0x97e <led_clock_pulse+0xc>
     982:	00 c0       	rjmp	.+0      	; 0x984 <led_clock_pulse+0x12>
	_delay_us(SETUP_DELAY_US);
	PORTB |= (1<<PB_LED_CLK);
     984:	c2 9a       	sbi	0x18, 2	; 24
     986:	8a e1       	ldi	r24, 0x1A	; 26
     988:	8a 95       	dec	r24
     98a:	f1 f7       	brne	.-4      	; 0x988 <led_clock_pulse+0x16>
     98c:	00 c0       	rjmp	.+0      	; 0x98e <led_clock_pulse+0x1c>
	_delay_us(SHIFT_DELAY_US);
	PORTB &= ~(1<<PB_LED_CLK);
     98e:	c2 98       	cbi	0x18, 2	; 24
     990:	08 95       	ret

00000992 <set_led_segments>:
// Outputs decoded segment data to port bits
void set_led_segments(uint8_t seg_ch)
{
	uint8_t pdat;
	seg_ch ^= LED_SEGMENT_MASK;
	pdat = PORTC & ~( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
     992:	95 b3       	in	r25, 0x15	; 21
	pdat |= (seg_ch & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
     994:	28 2f       	mov	r18, r24
     996:	2f 71       	andi	r18, 0x1F	; 31
// Outputs decoded segment data to port bits
void set_led_segments(uint8_t seg_ch)
{
	uint8_t pdat;
	seg_ch ^= LED_SEGMENT_MASK;
	pdat = PORTC & ~( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
     998:	90 7e       	andi	r25, 0xE0	; 224
	pdat |= (seg_ch & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
     99a:	92 2b       	or	r25, r18
	PORTC = pdat;
     99c:	95 bb       	out	0x15, r25	; 21
	seg_ch >>= 2;
	pdat = PORTB & ~( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     99e:	98 b3       	in	r25, 0x18	; 24
	uint8_t pdat;
	seg_ch ^= LED_SEGMENT_MASK;
	pdat = PORTC & ~( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
	pdat |= (seg_ch & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
	PORTC = pdat;
	seg_ch >>= 2;
     9a0:	86 95       	lsr	r24
     9a2:	86 95       	lsr	r24
	pdat = PORTB & ~( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
	pdat |= (seg_ch & ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) ));
     9a4:	88 73       	andi	r24, 0x38	; 56
	seg_ch ^= LED_SEGMENT_MASK;
	pdat = PORTC & ~( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
	pdat |= (seg_ch & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
	PORTC = pdat;
	seg_ch >>= 2;
	pdat = PORTB & ~( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     9a6:	97 7c       	andi	r25, 0xC7	; 199
	pdat |= (seg_ch & ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) ));
     9a8:	89 2b       	or	r24, r25
	PORTB = pdat;
     9aa:	88 bb       	out	0x18, r24	; 24
     9ac:	08 95       	ret

000009ae <enable_led_segments_pullups>:

// Turns segment port bits to HI-Z and
// enables pull-ups
void enable_led_segments_pullups()
{
	PORTC |= ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
     9ae:	85 b3       	in	r24, 0x15	; 21
     9b0:	8f 61       	ori	r24, 0x1F	; 31
     9b2:	85 bb       	out	0x15, r24	; 21
	PORTB |= ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     9b4:	88 b3       	in	r24, 0x18	; 24
     9b6:	88 63       	ori	r24, 0x38	; 56
     9b8:	88 bb       	out	0x18, r24	; 24
     9ba:	08 95       	ret

000009bc <enable_led_segments>:
}	

void enable_led_segments()
{
	DDRC |= ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
     9bc:	84 b3       	in	r24, 0x14	; 20
     9be:	8f 61       	ori	r24, 0x1F	; 31
     9c0:	84 bb       	out	0x14, r24	; 20
	DDRB |= ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     9c2:	87 b3       	in	r24, 0x17	; 23
     9c4:	88 63       	ori	r24, 0x38	; 56
     9c6:	87 bb       	out	0x17, r24	; 23
     9c8:	08 95       	ret

000009ca <disable_led_segments>:
}

void disable_led_segments()
{
	DDRC &= ~( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
     9ca:	84 b3       	in	r24, 0x14	; 20
     9cc:	80 7e       	andi	r24, 0xE0	; 224
     9ce:	84 bb       	out	0x14, r24	; 20
	DDRB &= ~( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     9d0:	87 b3       	in	r24, 0x17	; 23
     9d2:	87 7c       	andi	r24, 0xC7	; 199
     9d4:	87 bb       	out	0x17, r24	; 23
     9d6:	08 95       	ret

000009d8 <capture_button_state>:


void capture_button_state()
{
	uint8_t pdat;
	pdat = PINB  & ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     9d8:	86 b3       	in	r24, 0x16	; 22
     9da:	88 73       	andi	r24, 0x38	; 56
	pdat <<= 2;
	pdat |= (PINC & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
     9dc:	93 b3       	in	r25, 0x13	; 19

void capture_button_state()
{
	uint8_t pdat;
	pdat = PINB  & ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
	pdat <<= 2;
     9de:	88 0f       	add	r24, r24
     9e0:	88 0f       	add	r24, r24
	pdat |= (PINC & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
     9e2:	9f 71       	andi	r25, 0x1F	; 31
     9e4:	89 2b       	or	r24, r25
	raw_button_state = pdat ^ RAW_BUTTONS_INVERSE_MASK;
     9e6:	80 95       	com	r24
     9e8:	80 93 f3 00 	sts	0x00F3, r24
     9ec:	08 95       	ret

000009ee <restartMenuTimer>:
//	 Restarts menu state timeout
//	Should be used in RUN function when control buttons are pressed.
//-----------------------------------------------------------------//
static void restartMenuTimer(void)
{
	menuTimer.Timer = 0;
     9ee:	10 92 f6 00 	sts	0x00F6, r1
     9f2:	08 95       	ret

000009f4 <mf_setTempLeave>:
		clearExtraLeds(LED_TEMP);
}

void mf_setTempLeave(void)
{
	userTimer.Enabled = 0;
     9f4:	e9 ef       	ldi	r30, 0xF9	; 249
     9f6:	f0 e0       	ldi	r31, 0x00	; 0
     9f8:	80 81       	ld	r24, Z
     9fa:	8e 7f       	andi	r24, 0xFE	; 254
     9fc:	80 83       	st	Z, r24
     9fe:	08 95       	ret

00000a00 <mf_leafSelectAct>:
	userTimer.FA_GE = 1;	
}

void mf_leafSelectAct(void)
{
	userTimer.Timer = 0;
     a00:	10 92 fa 00 	sts	0x00FA, r1
	userTimer.Top = BLINK_PERIOD - 1;
     a04:	87 e0       	ldi	r24, 0x07	; 7
     a06:	80 93 fb 00 	sts	0x00FB, r24
	userTimer.CompA = BLINK_PERIOD / 2;
     a0a:	84 e0       	ldi	r24, 0x04	; 4
     a0c:	80 93 fc 00 	sts	0x00FC, r24
	userTimer.Enabled = 1;
     a10:	e9 ef       	ldi	r30, 0xF9	; 249
     a12:	f0 e0       	ldi	r31, 0x00	; 0
     a14:	80 81       	ld	r24, Z
     a16:	81 60       	ori	r24, 0x01	; 1
     a18:	80 83       	st	Z, r24
     a1a:	08 95       	ret

00000a1c <mf_leafExit>:
}

void mf_leafExit(void)
{
	userTimer.Enabled = 0;	
     a1c:	e9 ef       	ldi	r30, 0xF9	; 249
     a1e:	f0 e0       	ldi	r31, 0x00	; 0
     a20:	80 81       	ld	r24, Z
     a22:	8e 7f       	andi	r24, 0xFE	; 254
     a24:	80 83       	st	Z, r24
     a26:	08 95       	ret

00000a28 <mf_cdone2Select>:
	// Calculate new coefficient for temperature conversion
	calculateCoeffs(cpoint1,adc_filtered_value,cpoint2,0);
}

void mf_cdone2Select(void)
{
     a28:	08 95       	ret

00000a2a <mf_cdoneDo>:
	// Calculate new coefficient for temperature conversion
}

void mf_cdoneDo(void)
{
	printLedBuffer(0," DONE ");
     a2a:	61 e9       	ldi	r22, 0x91	; 145
     a2c:	70 e0       	ldi	r23, 0x00	; 0
     a2e:	80 e0       	ldi	r24, 0x00	; 0
     a30:	41 df       	rcall	.-382    	; 0x8b4 <printLedBuffer>
     a32:	08 95       	ret

00000a34 <mf_cdone1Select>:
//---------------------------------------------//

void mf_cdone1Select(void)
{
	// Calculate new coefficient for temperature conversion
	calculateCoeffs(cpoint1,adc_filtered_value,cpoint2,0);
     a34:	40 91 dc 00 	lds	r20, 0x00DC
     a38:	60 91 d0 00 	lds	r22, 0x00D0
     a3c:	70 91 d1 00 	lds	r23, 0x00D1
     a40:	20 e0       	ldi	r18, 0x00	; 0
     a42:	30 e0       	ldi	r19, 0x00	; 0
     a44:	50 e0       	ldi	r21, 0x00	; 0
     a46:	80 91 d2 00 	lds	r24, 0x00D2
     a4a:	90 e0       	ldi	r25, 0x00	; 0
     a4c:	29 dc       	rcall	.-1966   	; 0x2a0 <calculateCoeffs>
     a4e:	08 95       	ret

00000a50 <mf_calib2Do>:
}

//---------------------------------------------//

void mf_calib2Do(void)
{
     a50:	cf 93       	push	r28
     a52:	df 93       	push	r29
     a54:	cd b7       	in	r28, 0x3d	; 61
     a56:	de b7       	in	r29, 0x3e	; 62
     a58:	27 97       	sbiw	r28, 0x07	; 7
     a5a:	0f b6       	in	r0, 0x3f	; 63
     a5c:	f8 94       	cli
     a5e:	de bf       	out	0x3e, r29	; 62
     a60:	0f be       	out	0x3f, r0	; 63
     a62:	cd bf       	out	0x3d, r28	; 61
	char str[] = {'P','2',' ',' ',' ',' ',0};
     a64:	87 e0       	ldi	r24, 0x07	; 7
     a66:	e7 e6       	ldi	r30, 0x67	; 103
     a68:	f0 e0       	ldi	r31, 0x00	; 0
     a6a:	de 01       	movw	r26, r28
     a6c:	11 96       	adiw	r26, 0x01	; 1
     a6e:	01 90       	ld	r0, Z+
     a70:	0d 92       	st	X+, r0
     a72:	8a 95       	dec	r24
     a74:	e1 f7       	brne	.-8      	; 0xa6e <mf_calib2Do+0x1e>
	
	
	if (button_state & (BD_UP | BR_UP))
     a76:	80 91 b6 00 	lds	r24, 0x00B6
     a7a:	90 91 b7 00 	lds	r25, 0x00B7
     a7e:	9c 01       	movw	r18, r24
     a80:	22 70       	andi	r18, 0x02	; 2
     a82:	34 70       	andi	r19, 0x04	; 4
     a84:	23 2b       	or	r18, r19
     a86:	41 f0       	breq	.+16     	; 0xa98 <mf_calib2Do+0x48>
	{
		if (cpoint2 < MAX_CALIB_TEMP)
     a88:	80 91 dc 00 	lds	r24, 0x00DC
     a8c:	8a 3f       	cpi	r24, 0xFA	; 250
     a8e:	78 f4       	brcc	.+30     	; 0xaae <mf_calib2Do+0x5e>
		cpoint2 += 1;
     a90:	8f 5f       	subi	r24, 0xFF	; 255
     a92:	80 93 dc 00 	sts	0x00DC, r24
     a96:	0b c0       	rjmp	.+22     	; 0xaae <mf_calib2Do+0x5e>
	}
	else if (button_state & (BD_DOWN | BR_DOWN))
     a98:	84 70       	andi	r24, 0x04	; 4
     a9a:	98 70       	andi	r25, 0x08	; 8
     a9c:	89 2b       	or	r24, r25
     a9e:	39 f0       	breq	.+14     	; 0xaae <mf_calib2Do+0x5e>
	{
		if (cpoint2 > MIN_CALIB_TEMP)
     aa0:	80 91 dc 00 	lds	r24, 0x00DC
     aa4:	8b 30       	cpi	r24, 0x0B	; 11
     aa6:	18 f0       	brcs	.+6      	; 0xaae <mf_calib2Do+0x5e>
		cpoint2 -= 1;
     aa8:	81 50       	subi	r24, 0x01	; 1
     aaa:	80 93 dc 00 	sts	0x00DC, r24
	}
	
	if (userTimer.FA_GE)
     aae:	80 91 f9 00 	lds	r24, 0x00F9
     ab2:	84 ff       	sbrs	r24, 4
     ab4:	09 c0       	rjmp	.+18     	; 0xac8 <mf_calib2Do+0x78>
	{
		u16toa_align_right(cpoint2,str + 3,0x80 | 3,' ');
     ab6:	20 e2       	ldi	r18, 0x20	; 32
     ab8:	43 e8       	ldi	r20, 0x83	; 131
     aba:	be 01       	movw	r22, r28
     abc:	6c 5f       	subi	r22, 0xFC	; 252
     abe:	7f 4f       	sbci	r23, 0xFF	; 255
     ac0:	80 91 dc 00 	lds	r24, 0x00DC
     ac4:	90 e0       	ldi	r25, 0x00	; 0
     ac6:	1d d3       	rcall	.+1594   	; 0x1102 <u16toa_align_right>
	}
	
	printLedBuffer(0,str);
     ac8:	be 01       	movw	r22, r28
     aca:	6f 5f       	subi	r22, 0xFF	; 255
     acc:	7f 4f       	sbci	r23, 0xFF	; 255
     ace:	80 e0       	ldi	r24, 0x00	; 0
     ad0:	f1 de       	rcall	.-542    	; 0x8b4 <printLedBuffer>
	
}
     ad2:	27 96       	adiw	r28, 0x07	; 7
     ad4:	0f b6       	in	r0, 0x3f	; 63
     ad6:	f8 94       	cli
     ad8:	de bf       	out	0x3e, r29	; 62
     ada:	0f be       	out	0x3f, r0	; 63
     adc:	cd bf       	out	0x3d, r28	; 61
     ade:	df 91       	pop	r29
     ae0:	cf 91       	pop	r28
     ae2:	08 95       	ret

00000ae4 <mf_calib1Do>:
	// restore cpoint1, cpoint2
	mf_leafSelect();
}

void mf_calib1Do(void)
{
     ae4:	cf 93       	push	r28
     ae6:	df 93       	push	r29
     ae8:	cd b7       	in	r28, 0x3d	; 61
     aea:	de b7       	in	r29, 0x3e	; 62
     aec:	27 97       	sbiw	r28, 0x07	; 7
     aee:	0f b6       	in	r0, 0x3f	; 63
     af0:	f8 94       	cli
     af2:	de bf       	out	0x3e, r29	; 62
     af4:	0f be       	out	0x3f, r0	; 63
     af6:	cd bf       	out	0x3d, r28	; 61
	char str[] = {'P','1',' ',' ',' ',' ',0};
     af8:	87 e0       	ldi	r24, 0x07	; 7
     afa:	ee e6       	ldi	r30, 0x6E	; 110
     afc:	f0 e0       	ldi	r31, 0x00	; 0
     afe:	de 01       	movw	r26, r28
     b00:	11 96       	adiw	r26, 0x01	; 1
     b02:	01 90       	ld	r0, Z+
     b04:	0d 92       	st	X+, r0
     b06:	8a 95       	dec	r24
     b08:	e1 f7       	brne	.-8      	; 0xb02 <mf_calib1Do+0x1e>
	
	
	if (button_state & (BD_UP | BR_UP))
     b0a:	80 91 b6 00 	lds	r24, 0x00B6
     b0e:	90 91 b7 00 	lds	r25, 0x00B7
     b12:	9c 01       	movw	r18, r24
     b14:	22 70       	andi	r18, 0x02	; 2
     b16:	34 70       	andi	r19, 0x04	; 4
     b18:	23 2b       	or	r18, r19
     b1a:	41 f0       	breq	.+16     	; 0xb2c <mf_calib1Do+0x48>
	{
		if (cpoint1 < MAX_CALIB_TEMP)
     b1c:	80 91 d2 00 	lds	r24, 0x00D2
     b20:	8a 3f       	cpi	r24, 0xFA	; 250
     b22:	78 f4       	brcc	.+30     	; 0xb42 <mf_calib1Do+0x5e>
			cpoint1 += 1;
     b24:	8f 5f       	subi	r24, 0xFF	; 255
     b26:	80 93 d2 00 	sts	0x00D2, r24
     b2a:	0b c0       	rjmp	.+22     	; 0xb42 <mf_calib1Do+0x5e>
	}
	else if (button_state & (BD_DOWN | BR_DOWN))
     b2c:	84 70       	andi	r24, 0x04	; 4
     b2e:	98 70       	andi	r25, 0x08	; 8
     b30:	89 2b       	or	r24, r25
     b32:	39 f0       	breq	.+14     	; 0xb42 <mf_calib1Do+0x5e>
	{
		if (cpoint1 > MIN_CALIB_TEMP)
     b34:	80 91 d2 00 	lds	r24, 0x00D2
     b38:	8b 30       	cpi	r24, 0x0B	; 11
     b3a:	18 f0       	brcs	.+6      	; 0xb42 <mf_calib1Do+0x5e>
			cpoint1 -= 1;
     b3c:	81 50       	subi	r24, 0x01	; 1
     b3e:	80 93 d2 00 	sts	0x00D2, r24
	}
	
	if (userTimer.FA_GE)
     b42:	80 91 f9 00 	lds	r24, 0x00F9
     b46:	84 ff       	sbrs	r24, 4
     b48:	09 c0       	rjmp	.+18     	; 0xb5c <mf_calib1Do+0x78>
	{
		u16toa_align_right(cpoint1,str + 3,0x80 | 3,' ');
     b4a:	20 e2       	ldi	r18, 0x20	; 32
     b4c:	43 e8       	ldi	r20, 0x83	; 131
     b4e:	be 01       	movw	r22, r28
     b50:	6c 5f       	subi	r22, 0xFC	; 252
     b52:	7f 4f       	sbci	r23, 0xFF	; 255
     b54:	80 91 d2 00 	lds	r24, 0x00D2
     b58:	90 e0       	ldi	r25, 0x00	; 0
     b5a:	d3 d2       	rcall	.+1446   	; 0x1102 <u16toa_align_right>
	}
	
	printLedBuffer(0,str);
     b5c:	be 01       	movw	r22, r28
     b5e:	6f 5f       	subi	r22, 0xFF	; 255
     b60:	7f 4f       	sbci	r23, 0xFF	; 255
     b62:	80 e0       	ldi	r24, 0x00	; 0
     b64:	a7 de       	rcall	.-690    	; 0x8b4 <printLedBuffer>
}
     b66:	27 96       	adiw	r28, 0x07	; 7
     b68:	0f b6       	in	r0, 0x3f	; 63
     b6a:	f8 94       	cli
     b6c:	de bf       	out	0x3e, r29	; 62
     b6e:	0f be       	out	0x3f, r0	; 63
     b70:	cd bf       	out	0x3d, r28	; 61
     b72:	df 91       	pop	r29
     b74:	cf 91       	pop	r28
     b76:	08 95       	ret

00000b78 <mf_autopoffDo>:

//---------------------------------------------//


void mf_autopoffDo(void)
{
     b78:	cf 93       	push	r28
     b7a:	df 93       	push	r29
     b7c:	cd b7       	in	r28, 0x3d	; 61
     b7e:	de b7       	in	r29, 0x3e	; 62
     b80:	27 97       	sbiw	r28, 0x07	; 7
     b82:	0f b6       	in	r0, 0x3f	; 63
     b84:	f8 94       	cli
     b86:	de bf       	out	0x3e, r29	; 62
     b88:	0f be       	out	0x3f, r0	; 63
     b8a:	cd bf       	out	0x3d, r28	; 61
	char str[] = {'O','F','F',' ',' ',' ',0};
     b8c:	87 e0       	ldi	r24, 0x07	; 7
     b8e:	e5 e7       	ldi	r30, 0x75	; 117
     b90:	f0 e0       	ldi	r31, 0x00	; 0
     b92:	de 01       	movw	r26, r28
     b94:	11 96       	adiw	r26, 0x01	; 1
     b96:	01 90       	ld	r0, Z+
     b98:	0d 92       	st	X+, r0
     b9a:	8a 95       	dec	r24
     b9c:	e1 f7       	brne	.-8      	; 0xb96 <mf_autopoffDo+0x1e>
		
		
	if (button_state & (BD_UP | BR_UP))
     b9e:	80 91 b6 00 	lds	r24, 0x00B6
     ba2:	90 91 b7 00 	lds	r25, 0x00B7
     ba6:	9c 01       	movw	r18, r24
     ba8:	22 70       	andi	r18, 0x02	; 2
     baa:	34 70       	andi	r19, 0x04	; 4
     bac:	23 2b       	or	r18, r19
     bae:	49 f0       	breq	.+18     	; 0xbc2 <mf_autopoffDo+0x4a>
	{
		if (power_off_timeout < MAX_POWEROFF_TIMEOUT)
     bb0:	80 91 db 00 	lds	r24, 0x00DB
     bb4:	8f 35       	cpi	r24, 0x5F	; 95
     bb6:	18 f4       	brcc	.+6      	; 0xbbe <mf_autopoffDo+0x46>
			power_off_timeout += 5;
     bb8:	8b 5f       	subi	r24, 0xFB	; 251
     bba:	80 93 db 00 	sts	0x00DB, r24
		restartMenuTimer();
     bbe:	17 df       	rcall	.-466    	; 0x9ee <restartMenuTimer>
     bc0:	0c c0       	rjmp	.+24     	; 0xbda <mf_autopoffDo+0x62>
	}
	else if (button_state & (BD_DOWN | BR_DOWN))
     bc2:	84 70       	andi	r24, 0x04	; 4
     bc4:	98 70       	andi	r25, 0x08	; 8
     bc6:	89 2b       	or	r24, r25
     bc8:	41 f0       	breq	.+16     	; 0xbda <mf_autopoffDo+0x62>
	{
		if (power_off_timeout > MIN_POWEROFF_TIMEOUT)
     bca:	80 91 db 00 	lds	r24, 0x00DB
     bce:	86 30       	cpi	r24, 0x06	; 6
     bd0:	18 f0       	brcs	.+6      	; 0xbd8 <mf_autopoffDo+0x60>
			power_off_timeout -= 5;
     bd2:	85 50       	subi	r24, 0x05	; 5
     bd4:	80 93 db 00 	sts	0x00DB, r24
		restartMenuTimer();
     bd8:	0a df       	rcall	.-492    	; 0x9ee <restartMenuTimer>
	}	
		
	if (userTimer.FA_GE)
     bda:	80 91 f9 00 	lds	r24, 0x00F9
     bde:	84 ff       	sbrs	r24, 4
     be0:	10 c0       	rjmp	.+32     	; 0xc02 <mf_autopoffDo+0x8a>
	{
		if (power_off_timeout != MAX_POWEROFF_TIMEOUT)
     be2:	80 91 db 00 	lds	r24, 0x00DB
     be6:	8f 35       	cpi	r24, 0x5F	; 95
     be8:	41 f0       	breq	.+16     	; 0xbfa <mf_autopoffDo+0x82>
			u16toa_align_right(power_off_timeout,str + 4,0x80 | 2,' ');	
     bea:	20 e2       	ldi	r18, 0x20	; 32
     bec:	42 e8       	ldi	r20, 0x82	; 130
     bee:	be 01       	movw	r22, r28
     bf0:	6b 5f       	subi	r22, 0xFB	; 251
     bf2:	7f 4f       	sbci	r23, 0xFF	; 255
     bf4:	90 e0       	ldi	r25, 0x00	; 0
     bf6:	85 d2       	rcall	.+1290   	; 0x1102 <u16toa_align_right>
     bf8:	04 c0       	rjmp	.+8      	; 0xc02 <mf_autopoffDo+0x8a>
		else 
		{
			str[4] = 'N';
     bfa:	8e e4       	ldi	r24, 0x4E	; 78
     bfc:	8d 83       	std	Y+5, r24	; 0x05
			str[5] = 'O';
     bfe:	8f e4       	ldi	r24, 0x4F	; 79
     c00:	8e 83       	std	Y+6, r24	; 0x06
		}			
	}		
		
	printLedBuffer(0,str);
     c02:	be 01       	movw	r22, r28
     c04:	6f 5f       	subi	r22, 0xFF	; 255
     c06:	7f 4f       	sbci	r23, 0xFF	; 255
     c08:	80 e0       	ldi	r24, 0x00	; 0
     c0a:	54 de       	rcall	.-856    	; 0x8b4 <printLedBuffer>
}
     c0c:	27 96       	adiw	r28, 0x07	; 7
     c0e:	0f b6       	in	r0, 0x3f	; 63
     c10:	f8 94       	cli
     c12:	de bf       	out	0x3e, r29	; 62
     c14:	0f be       	out	0x3f, r0	; 63
     c16:	cd bf       	out	0x3d, r28	; 61
     c18:	df 91       	pop	r29
     c1a:	cf 91       	pop	r28
     c1c:	08 95       	ret

00000c1e <mf_sndenDo>:

//---------------------------------------------//


void mf_sndenDo(void)
{
     c1e:	cf 93       	push	r28
     c20:	df 93       	push	r29
     c22:	cd b7       	in	r28, 0x3d	; 61
     c24:	de b7       	in	r29, 0x3e	; 62
     c26:	27 97       	sbiw	r28, 0x07	; 7
     c28:	0f b6       	in	r0, 0x3f	; 63
     c2a:	f8 94       	cli
     c2c:	de bf       	out	0x3e, r29	; 62
     c2e:	0f be       	out	0x3f, r0	; 63
     c30:	cd bf       	out	0x3d, r28	; 61
	char str[] = {'S','N','D',' ',' ',' ',0};
     c32:	87 e0       	ldi	r24, 0x07	; 7
     c34:	ec e7       	ldi	r30, 0x7C	; 124
     c36:	f0 e0       	ldi	r31, 0x00	; 0
     c38:	de 01       	movw	r26, r28
     c3a:	11 96       	adiw	r26, 0x01	; 1
     c3c:	01 90       	ld	r0, Z+
     c3e:	0d 92       	st	X+, r0
     c40:	8a 95       	dec	r24
     c42:	e1 f7       	brne	.-8      	; 0xc3c <mf_sndenDo+0x1e>
		
	if (button_state & (BD_UP | BD_DOWN))
     c44:	80 91 b6 00 	lds	r24, 0x00B6
     c48:	90 91 b7 00 	lds	r25, 0x00B7
     c4c:	86 70       	andi	r24, 0x06	; 6
     c4e:	99 27       	eor	r25, r25
     c50:	89 2b       	or	r24, r25
     c52:	41 f0       	breq	.+16     	; 0xc64 <mf_sndenDo+0x46>
	{
		sound_enable = !sound_enable;
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 91 d5 00 	lds	r25, 0x00D5
     c5a:	91 11       	cpse	r25, r1
     c5c:	80 e0       	ldi	r24, 0x00	; 0
     c5e:	80 93 d5 00 	sts	0x00D5, r24
		restartMenuTimer();
     c62:	c5 de       	rcall	.-630    	; 0x9ee <restartMenuTimer>
	}			
		
	if (userTimer.FA_GE)
     c64:	80 91 f9 00 	lds	r24, 0x00F9
     c68:	84 ff       	sbrs	r24, 4
     c6a:	0e c0       	rjmp	.+28     	; 0xc88 <mf_sndenDo+0x6a>
	{
		if (sound_enable)		
     c6c:	80 91 d5 00 	lds	r24, 0x00D5
     c70:	88 23       	and	r24, r24
     c72:	29 f0       	breq	.+10     	; 0xc7e <mf_sndenDo+0x60>
		{
			str[4] = 'O';
     c74:	8f e4       	ldi	r24, 0x4F	; 79
     c76:	8d 83       	std	Y+5, r24	; 0x05
			str[5] = 'N';
     c78:	8e e4       	ldi	r24, 0x4E	; 78
     c7a:	8e 83       	std	Y+6, r24	; 0x06
     c7c:	05 c0       	rjmp	.+10     	; 0xc88 <mf_sndenDo+0x6a>
		}
		else
		{
			str[3] = 'O';
     c7e:	8f e4       	ldi	r24, 0x4F	; 79
     c80:	8c 83       	std	Y+4, r24	; 0x04
			str[4] = 'F';
     c82:	86 e4       	ldi	r24, 0x46	; 70
     c84:	8d 83       	std	Y+5, r24	; 0x05
			str[5] = 'F';
     c86:	8e 83       	std	Y+6, r24	; 0x06
		}			
	}
		
	printLedBuffer(0,str);
     c88:	be 01       	movw	r22, r28
     c8a:	6f 5f       	subi	r22, 0xFF	; 255
     c8c:	7f 4f       	sbci	r23, 0xFF	; 255
     c8e:	80 e0       	ldi	r24, 0x00	; 0
     c90:	11 de       	rcall	.-990    	; 0x8b4 <printLedBuffer>
	setComma(2);
     c92:	82 e0       	ldi	r24, 0x02	; 2
     c94:	55 de       	rcall	.-854    	; 0x940 <setComma>
}
     c96:	27 96       	adiw	r28, 0x07	; 7
     c98:	0f b6       	in	r0, 0x3f	; 63
     c9a:	f8 94       	cli
     c9c:	de bf       	out	0x3e, r29	; 62
     c9e:	0f be       	out	0x3f, r0	; 63
     ca0:	cd bf       	out	0x3d, r28	; 61
     ca2:	df 91       	pop	r29
     ca4:	cf 91       	pop	r28
     ca6:	08 95       	ret

00000ca8 <mf_leafSelect>:

// Select and exit functions, common for leaf menu items 

void mf_leafSelect(void)
{
	clearExtraLeds(LED_TEMP | LED_ROLL);
     ca8:	83 e0       	ldi	r24, 0x03	; 3
     caa:	5c de       	rcall	.-840    	; 0x964 <clearExtraLeds>
	userTimer.FA_GE = 1;	
     cac:	e9 ef       	ldi	r30, 0xF9	; 249
     cae:	f0 e0       	ldi	r31, 0x00	; 0
     cb0:	80 81       	ld	r24, Z
     cb2:	80 61       	ori	r24, 0x10	; 16
     cb4:	80 83       	st	Z, r24
     cb6:	08 95       	ret

00000cb8 <mf_calibSelect>:
//---------------------------------------------//

void mf_calibSelect(void)
{
	// restore cpoint1, cpoint2
	mf_leafSelect();
     cb8:	f7 df       	rcall	.-18     	; 0xca8 <mf_leafSelect>
     cba:	08 95       	ret

00000cbc <mf_rollLeave>:
	printLedBuffer(0,str);
}

void mf_rollLeave(void)
{
	clearExtraLeds(LED_ROLL);
     cbc:	82 e0       	ldi	r24, 0x02	; 2
     cbe:	52 de       	rcall	.-860    	; 0x964 <clearExtraLeds>
	userTimer.Enabled = 0;
     cc0:	e9 ef       	ldi	r30, 0xF9	; 249
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
     cc4:	80 81       	ld	r24, Z
     cc6:	8e 7f       	andi	r24, 0xFE	; 254
     cc8:	80 83       	st	Z, r24
     cca:	08 95       	ret

00000ccc <mf_setTempSelect>:
//---------------------------------------------//


void mf_setTempSelect(void)
{
	clearExtraLeds(LED_TEMP);
     ccc:	81 e0       	ldi	r24, 0x01	; 1
     cce:	4a de       	rcall	.-876    	; 0x964 <clearExtraLeds>
	mf_leafSelectAct();		// setup and start timer
     cd0:	97 de       	rcall	.-722    	; 0xa00 <mf_leafSelectAct>
     cd2:	08 95       	ret

00000cd4 <mf_realTempLeave>:
	printLedBuffer(0,str);
}

void mf_realTempLeave(void)
{
	clearExtraLeds(LED_TEMP);
     cd4:	81 e0       	ldi	r24, 0x01	; 1
     cd6:	46 de       	rcall	.-884    	; 0x964 <clearExtraLeds>
     cd8:	08 95       	ret

00000cda <mf_rollDo>:
	setExtraLeds(LED_ROLL);
	mf_leafSelectAct();		// setup and start timer
}

void mf_rollDo(void)
{
     cda:	cf 93       	push	r28
     cdc:	df 93       	push	r29
     cde:	cd b7       	in	r28, 0x3d	; 61
     ce0:	de b7       	in	r29, 0x3e	; 62
     ce2:	27 97       	sbiw	r28, 0x07	; 7
     ce4:	0f b6       	in	r0, 0x3f	; 63
     ce6:	f8 94       	cli
     ce8:	de bf       	out	0x3e, r29	; 62
     cea:	0f be       	out	0x3f, r0	; 63
     cec:	cd bf       	out	0x3d, r28	; 61
	char str[] = {' ',' ',' ',' ',' ',' ',0};
     cee:	87 e0       	ldi	r24, 0x07	; 7
     cf0:	e3 e8       	ldi	r30, 0x83	; 131
     cf2:	f0 e0       	ldi	r31, 0x00	; 0
     cf4:	de 01       	movw	r26, r28
     cf6:	11 96       	adiw	r26, 0x01	; 1
     cf8:	01 90       	ld	r0, Z+
     cfa:	0d 92       	st	X+, r0
     cfc:	8a 95       	dec	r24
     cfe:	e1 f7       	brne	.-8      	; 0xcf8 <mf_rollDo+0x1e>
		
	if (button_state & (BD_UP | BR_UP))
     d00:	80 91 b6 00 	lds	r24, 0x00B6
     d04:	90 91 b7 00 	lds	r25, 0x00B7
     d08:	9c 01       	movw	r18, r24
     d0a:	22 70       	andi	r18, 0x02	; 2
     d0c:	34 70       	andi	r19, 0x04	; 4
     d0e:	23 2b       	or	r18, r19
     d10:	41 f0       	breq	.+16     	; 0xd22 <mf_rollDo+0x48>
	{
		if (rollCycleSet < MAX_ROLL_CYCLES)
     d12:	80 91 d6 00 	lds	r24, 0x00D6
     d16:	83 36       	cpi	r24, 0x63	; 99
     d18:	78 f4       	brcc	.+30     	; 0xd38 <mf_rollDo+0x5e>
		rollCycleSet += 1;
     d1a:	8f 5f       	subi	r24, 0xFF	; 255
     d1c:	80 93 d6 00 	sts	0x00D6, r24
     d20:	0b c0       	rjmp	.+22     	; 0xd38 <mf_rollDo+0x5e>
	}
	else if (button_state & (BD_DOWN | BR_DOWN))
     d22:	84 70       	andi	r24, 0x04	; 4
     d24:	98 70       	andi	r25, 0x08	; 8
     d26:	89 2b       	or	r24, r25
     d28:	39 f0       	breq	.+14     	; 0xd38 <mf_rollDo+0x5e>
	{
		if (rollCycleSet > MIN_ROLL_CYCLES)
     d2a:	80 91 d6 00 	lds	r24, 0x00D6
     d2e:	82 30       	cpi	r24, 0x02	; 2
     d30:	18 f0       	brcs	.+6      	; 0xd38 <mf_rollDo+0x5e>
		rollCycleSet -= 1;
     d32:	81 50       	subi	r24, 0x01	; 1
     d34:	80 93 d6 00 	sts	0x00D6, r24
	}	
		
	u16toa_align_right(rollCycleSet,str + 4,0x80 | 2,' ');
     d38:	20 e2       	ldi	r18, 0x20	; 32
     d3a:	42 e8       	ldi	r20, 0x82	; 130
     d3c:	be 01       	movw	r22, r28
     d3e:	6b 5f       	subi	r22, 0xFB	; 251
     d40:	7f 4f       	sbci	r23, 0xFF	; 255
     d42:	80 91 d6 00 	lds	r24, 0x00D6
     d46:	90 e0       	ldi	r25, 0x00	; 0
     d48:	dc d1       	rcall	.+952    	; 0x1102 <u16toa_align_right>
	
	if ((!(rollState & ROLL_CYCLE)) || (userTimer.FA_GE))
     d4a:	80 91 c2 00 	lds	r24, 0x00C2
     d4e:	82 ff       	sbrs	r24, 2
     d50:	04 c0       	rjmp	.+8      	; 0xd5a <mf_rollDo+0x80>
     d52:	80 91 f9 00 	lds	r24, 0x00F9
     d56:	84 ff       	sbrs	r24, 4
     d58:	09 c0       	rjmp	.+18     	; 0xd6c <mf_rollDo+0x92>
	{
		u16toa_align_right(activeRollCycle,str + 1,0x80 | 2,' ');
     d5a:	20 e2       	ldi	r18, 0x20	; 32
     d5c:	42 e8       	ldi	r20, 0x82	; 130
     d5e:	be 01       	movw	r22, r28
     d60:	6e 5f       	subi	r22, 0xFE	; 254
     d62:	7f 4f       	sbci	r23, 0xFF	; 255
     d64:	80 91 04 01 	lds	r24, 0x0104
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	cb d1       	rcall	.+918    	; 0x1102 <u16toa_align_right>
	}
	
	str[0] = 0;
     d6c:	19 82       	std	Y+1, r1	; 0x01
	if (isTopPointValid())
     d6e:	fc d2       	rcall	.+1528   	; 0x1368 <isTopPointValid>
     d70:	88 23       	and	r24, r24
     d72:	19 f0       	breq	.+6      	; 0xd7a <mf_rollDo+0xa0>
		str[0] |= SEGA;
     d74:	89 81       	ldd	r24, Y+1	; 0x01
     d76:	81 60       	ori	r24, 0x01	; 1
     d78:	89 83       	std	Y+1, r24	; 0x01
	if (isBottomPointValid())
     d7a:	06 d3       	rcall	.+1548   	; 0x1388 <isBottomPointValid>
     d7c:	88 23       	and	r24, r24
     d7e:	19 f0       	breq	.+6      	; 0xd86 <mf_rollDo+0xac>
		str[0] |= SEGD;
     d80:	89 81       	ldd	r24, Y+1	; 0x01
     d82:	88 60       	ori	r24, 0x08	; 8
     d84:	89 83       	std	Y+1, r24	; 0x01
	if (str[0] == 0)
     d86:	89 81       	ldd	r24, Y+1	; 0x01
     d88:	81 11       	cpse	r24, r1
     d8a:	02 c0       	rjmp	.+4      	; 0xd90 <mf_rollDo+0xb6>
		str[0] = ' ';
     d8c:	80 e2       	ldi	r24, 0x20	; 32
     d8e:	89 83       	std	Y+1, r24	; 0x01
		
	printLedBuffer(0,str);
     d90:	be 01       	movw	r22, r28
     d92:	6f 5f       	subi	r22, 0xFF	; 255
     d94:	7f 4f       	sbci	r23, 0xFF	; 255
     d96:	80 e0       	ldi	r24, 0x00	; 0
     d98:	8d dd       	rcall	.-1254   	; 0x8b4 <printLedBuffer>
}
     d9a:	27 96       	adiw	r28, 0x07	; 7
     d9c:	0f b6       	in	r0, 0x3f	; 63
     d9e:	f8 94       	cli
     da0:	de bf       	out	0x3e, r29	; 62
     da2:	0f be       	out	0x3f, r0	; 63
     da4:	cd bf       	out	0x3d, r28	; 61
     da6:	df 91       	pop	r29
     da8:	cf 91       	pop	r28
     daa:	08 95       	ret

00000dac <mf_rollSelect>:
//---------------------------------------------//
//---------------------------------------------//

void mf_rollSelect(void)
{
	setExtraLeds(LED_ROLL);
     dac:	82 e0       	ldi	r24, 0x02	; 2
     dae:	d4 dd       	rcall	.-1112   	; 0x958 <setExtraLeds>
	mf_leafSelectAct();		// setup and start timer
     db0:	27 de       	rcall	.-946    	; 0xa00 <mf_leafSelectAct>
     db2:	08 95       	ret

00000db4 <mf_setTempDo>:
	clearExtraLeds(LED_TEMP);
	mf_leafSelectAct();		// setup and start timer
}

void mf_setTempDo(void)
{
     db4:	cf 93       	push	r28
     db6:	df 93       	push	r29
     db8:	cd b7       	in	r28, 0x3d	; 61
     dba:	de b7       	in	r29, 0x3e	; 62
     dbc:	27 97       	sbiw	r28, 0x07	; 7
     dbe:	0f b6       	in	r0, 0x3f	; 63
     dc0:	f8 94       	cli
     dc2:	de bf       	out	0x3e, r29	; 62
     dc4:	0f be       	out	0x3f, r0	; 63
     dc6:	cd bf       	out	0x3d, r28	; 61
	char str[] = {' ',' ',' ',' ',0xB0,'C',0};
     dc8:	87 e0       	ldi	r24, 0x07	; 7
     dca:	ea e8       	ldi	r30, 0x8A	; 138
     dcc:	f0 e0       	ldi	r31, 0x00	; 0
     dce:	de 01       	movw	r26, r28
     dd0:	11 96       	adiw	r26, 0x01	; 1
     dd2:	01 90       	ld	r0, Z+
     dd4:	0d 92       	st	X+, r0
     dd6:	8a 95       	dec	r24
     dd8:	e1 f7       	brne	.-8      	; 0xdd2 <mf_setTempDo+0x1e>

	
	if (button_state & (BD_UP | BR_UP))
     dda:	80 91 b6 00 	lds	r24, 0x00B6
     dde:	90 91 b7 00 	lds	r25, 0x00B7
     de2:	9c 01       	movw	r18, r24
     de4:	22 70       	andi	r18, 0x02	; 2
     de6:	34 70       	andi	r19, 0x04	; 4
     de8:	23 2b       	or	r18, r19
     dea:	71 f0       	breq	.+28     	; 0xe08 <mf_setTempDo+0x54>
	{
		if (setup_temp_value < MAX_SET_TEMP)
     dec:	80 91 d3 00 	lds	r24, 0x00D3
     df0:	90 91 d4 00 	lds	r25, 0x00D4
     df4:	82 3d       	cpi	r24, 0xD2	; 210
     df6:	91 05       	cpc	r25, r1
     df8:	28 f4       	brcc	.+10     	; 0xe04 <mf_setTempDo+0x50>
			setup_temp_value += 5;
     dfa:	05 96       	adiw	r24, 0x05	; 5
     dfc:	90 93 d4 00 	sts	0x00D4, r25
     e00:	80 93 d3 00 	sts	0x00D3, r24
		restartMenuTimer();
     e04:	f4 dd       	rcall	.-1048   	; 0x9ee <restartMenuTimer>
     e06:	11 c0       	rjmp	.+34     	; 0xe2a <mf_setTempDo+0x76>
	}
	else if (button_state & (BD_DOWN | BR_DOWN))
     e08:	84 70       	andi	r24, 0x04	; 4
     e0a:	98 70       	andi	r25, 0x08	; 8
     e0c:	89 2b       	or	r24, r25
     e0e:	69 f0       	breq	.+26     	; 0xe2a <mf_setTempDo+0x76>
	{
		if (setup_temp_value > MIN_SET_TEMP)
     e10:	80 91 d3 00 	lds	r24, 0x00D3
     e14:	90 91 d4 00 	lds	r25, 0x00D4
     e18:	8f 31       	cpi	r24, 0x1F	; 31
     e1a:	91 05       	cpc	r25, r1
     e1c:	28 f0       	brcs	.+10     	; 0xe28 <mf_setTempDo+0x74>
			setup_temp_value -= 5;
     e1e:	05 97       	sbiw	r24, 0x05	; 5
     e20:	90 93 d4 00 	sts	0x00D4, r25
     e24:	80 93 d3 00 	sts	0x00D3, r24
		restartMenuTimer();
     e28:	e2 dd       	rcall	.-1084   	; 0x9ee <restartMenuTimer>
	}					
		
	// Output ADC result to LED
	u16toa_align_right(setup_temp_value,str,0x80 | 4,' ');
     e2a:	20 e2       	ldi	r18, 0x20	; 32
     e2c:	44 e8       	ldi	r20, 0x84	; 132
     e2e:	be 01       	movw	r22, r28
     e30:	6f 5f       	subi	r22, 0xFF	; 255
     e32:	7f 4f       	sbci	r23, 0xFF	; 255
     e34:	80 91 d3 00 	lds	r24, 0x00D3
     e38:	90 91 d4 00 	lds	r25, 0x00D4
     e3c:	62 d1       	rcall	.+708    	; 0x1102 <u16toa_align_right>
	printLedBuffer(0,str);
     e3e:	be 01       	movw	r22, r28
     e40:	6f 5f       	subi	r22, 0xFF	; 255
     e42:	7f 4f       	sbci	r23, 0xFF	; 255
     e44:	80 e0       	ldi	r24, 0x00	; 0
     e46:	36 dd       	rcall	.-1428   	; 0x8b4 <printLedBuffer>
	
	if (userTimer.FA_GE)
     e48:	80 91 f9 00 	lds	r24, 0x00F9
     e4c:	84 ff       	sbrs	r24, 4
     e4e:	03 c0       	rjmp	.+6      	; 0xe56 <mf_setTempDo+0xa2>
		setExtraLeds(LED_TEMP);
     e50:	81 e0       	ldi	r24, 0x01	; 1
     e52:	82 dd       	rcall	.-1276   	; 0x958 <setExtraLeds>
     e54:	02 c0       	rjmp	.+4      	; 0xe5a <mf_setTempDo+0xa6>
	else
		clearExtraLeds(LED_TEMP);
     e56:	81 e0       	ldi	r24, 0x01	; 1
     e58:	85 dd       	rcall	.-1270   	; 0x964 <clearExtraLeds>
}
     e5a:	27 96       	adiw	r28, 0x07	; 7
     e5c:	0f b6       	in	r0, 0x3f	; 63
     e5e:	f8 94       	cli
     e60:	de bf       	out	0x3e, r29	; 62
     e62:	0f be       	out	0x3f, r0	; 63
     e64:	cd bf       	out	0x3d, r28	; 61
     e66:	df 91       	pop	r29
     e68:	cf 91       	pop	r28
     e6a:	08 95       	ret

00000e6c <mf_realTempSelect>:
//=================================================================//


void mf_realTempSelect(void)
{
	setExtraLeds(LED_TEMP);
     e6c:	81 e0       	ldi	r24, 0x01	; 1
     e6e:	74 dd       	rcall	.-1304   	; 0x958 <setExtraLeds>
     e70:	08 95       	ret

00000e72 <mf_realTempDo>:
}

void mf_realTempDo(void)
{
     e72:	cf 93       	push	r28
     e74:	df 93       	push	r29
     e76:	cd b7       	in	r28, 0x3d	; 61
     e78:	de b7       	in	r29, 0x3e	; 62
     e7a:	27 97       	sbiw	r28, 0x07	; 7
     e7c:	0f b6       	in	r0, 0x3f	; 63
     e7e:	f8 94       	cli
     e80:	de bf       	out	0x3e, r29	; 62
     e82:	0f be       	out	0x3f, r0	; 63
     e84:	cd bf       	out	0x3d, r28	; 61
	char str[] = {' ',' ',' ',' ',0xB0,'C',0};
     e86:	87 e0       	ldi	r24, 0x07	; 7
     e88:	ea e8       	ldi	r30, 0x8A	; 138
     e8a:	f0 e0       	ldi	r31, 0x00	; 0
     e8c:	de 01       	movw	r26, r28
     e8e:	11 96       	adiw	r26, 0x01	; 1
     e90:	01 90       	ld	r0, Z+
     e92:	0d 92       	st	X+, r0
     e94:	8a 95       	dec	r24
     e96:	e1 f7       	brne	.-8      	; 0xe90 <mf_realTempDo+0x1e>
	// Output ADC result to LED
	uint16_t temp_celsius = conv_ADC_to_Celsius(adc_filtered_value);
     e98:	80 91 d0 00 	lds	r24, 0x00D0
     e9c:	90 91 d1 00 	lds	r25, 0x00D1
     ea0:	e5 d9       	rcall	.-3126   	; 0x26c <conv_ADC_to_Celsius>
	u16toa_align_right(temp_celsius,str,0x80 | 4,' ');
     ea2:	20 e2       	ldi	r18, 0x20	; 32
     ea4:	44 e8       	ldi	r20, 0x84	; 132
     ea6:	be 01       	movw	r22, r28
     ea8:	6f 5f       	subi	r22, 0xFF	; 255
     eaa:	7f 4f       	sbci	r23, 0xFF	; 255
     eac:	2a d1       	rcall	.+596    	; 0x1102 <u16toa_align_right>
	printLedBuffer(0,str);
     eae:	be 01       	movw	r22, r28
     eb0:	6f 5f       	subi	r22, 0xFF	; 255
     eb2:	7f 4f       	sbci	r23, 0xFF	; 255
     eb4:	80 e0       	ldi	r24, 0x00	; 0
     eb6:	fe dc       	rcall	.-1540   	; 0x8b4 <printLedBuffer>
}
     eb8:	27 96       	adiw	r28, 0x07	; 7
     eba:	0f b6       	in	r0, 0x3f	; 63
     ebc:	f8 94       	cli
     ebe:	de bf       	out	0x3e, r29	; 62
     ec0:	0f be       	out	0x3f, r0	; 63
     ec2:	cd bf       	out	0x3d, r28	; 61
     ec4:	df 91       	pop	r29
     ec6:	cf 91       	pop	r28
     ec8:	08 95       	ret

00000eca <InitMenu>:
//	Menu initialization
//	Call this function at start of your program before processMenu()
//-----------------------------------------------------------------//
void InitMenu(void)
{
	selectedMenuItemID = mi_REALTEMP;
     eca:	81 e0       	ldi	r24, 0x01	; 1
     ecc:	80 93 f4 00 	sts	0x00F4, r24
     ed0:	20 e0       	ldi	r18, 0x00	; 0
     ed2:	30 e0       	ldi	r19, 0x00	; 0
static void getMenuFunctionRecord(uint8_t menuItemID, MenuFunctionRecord* menuRecord )
{
	uint8_t i;
	for (i = 0; i < sizeof(menuFunctionSet)/sizeof(MenuFunctionRecord); i++  )
	{
		readMenuRecord(&menuFunctionSet[i], menuRecord);
     ed4:	c9 01       	movw	r24, r18
     ed6:	88 0f       	add	r24, r24
     ed8:	99 1f       	adc	r25, r25
     eda:	88 0f       	add	r24, r24
     edc:	99 1f       	adc	r25, r25
     ede:	88 0f       	add	r24, r24
     ee0:	99 1f       	adc	r25, r25
     ee2:	82 1b       	sub	r24, r18
     ee4:	93 0b       	sbc	r25, r19
     ee6:	88 5b       	subi	r24, 0xB8	; 184
     ee8:	9e 4f       	sbci	r25, 0xFE	; 254
//		fRecPtr		- address of the function record in the FLASH
//		resPtr		- address of the record to fill in the SRAM
//-----------------------------------------------------------------//
static inline void readMenuRecord(const MenuFunctionRecord* fRecPtr, MenuFunctionRecord* resPtr )
{
	resPtr->Item = pgm_read_byte(&fRecPtr->Item);
     eea:	fc 01       	movw	r30, r24
     eec:	64 91       	lpm	r22, Z
	resPtr->SelectFunction = (FuncPtr)pgm_read_word(&fRecPtr->SelectFunction);
     eee:	31 96       	adiw	r30, 0x01	; 1
     ef0:	45 91       	lpm	r20, Z+
     ef2:	54 91       	lpm	r21, Z
     ef4:	b4 2f       	mov	r27, r20
     ef6:	a5 2f       	mov	r26, r21
	resPtr->RunFunction = (FuncPtr)pgm_read_word(&fRecPtr->RunFunction);
     ef8:	fc 01       	movw	r30, r24
     efa:	33 96       	adiw	r30, 0x03	; 3
     efc:	45 91       	lpm	r20, Z+
     efe:	54 91       	lpm	r21, Z
     f00:	74 2f       	mov	r23, r20
     f02:	45 2f       	mov	r20, r21
	resPtr->LeaveFunction = (FuncPtr)pgm_read_word(&fRecPtr->LeaveFunction);
     f04:	05 96       	adiw	r24, 0x05	; 5
     f06:	fc 01       	movw	r30, r24
     f08:	85 91       	lpm	r24, Z+
     f0a:	94 91       	lpm	r25, Z
     f0c:	58 2f       	mov	r21, r24
{
	uint8_t i;
	for (i = 0; i < sizeof(menuFunctionSet)/sizeof(MenuFunctionRecord); i++  )
	{
		readMenuRecord(&menuFunctionSet[i], menuRecord);
		if (menuRecord->Item == menuItemID)
     f0e:	61 30       	cpi	r22, 0x01	; 1
     f10:	79 f4       	brne	.+30     	; 0xf30 <InitMenu+0x66>
     f12:	60 93 fd 00 	sts	0x00FD, r22
     f16:	ee ef       	ldi	r30, 0xFE	; 254
     f18:	f0 e0       	ldi	r31, 0x00	; 0
     f1a:	b0 83       	st	Z, r27
     f1c:	a1 83       	std	Z+1, r26	; 0x01
     f1e:	e0 e0       	ldi	r30, 0x00	; 0
     f20:	f1 e0       	ldi	r31, 0x01	; 1
     f22:	70 83       	st	Z, r23
     f24:	41 83       	std	Z+1, r20	; 0x01
     f26:	e2 e0       	ldi	r30, 0x02	; 2
     f28:	f1 e0       	ldi	r31, 0x01	; 1
     f2a:	50 83       	st	Z, r21
     f2c:	91 83       	std	Z+1, r25	; 0x01
     f2e:	14 c0       	rjmp	.+40     	; 0xf58 <InitMenu+0x8e>
     f30:	2f 5f       	subi	r18, 0xFF	; 255
     f32:	3f 4f       	sbci	r19, 0xFF	; 255
//	Output:
//-----------------------------------------------------------------//
static void getMenuFunctionRecord(uint8_t menuItemID, MenuFunctionRecord* menuRecord )
{
	uint8_t i;
	for (i = 0; i < sizeof(menuFunctionSet)/sizeof(MenuFunctionRecord); i++  )
     f34:	2d 30       	cpi	r18, 0x0D	; 13
     f36:	31 05       	cpc	r19, r1
     f38:	09 f0       	breq	.+2      	; 0xf3c <InitMenu+0x72>
     f3a:	cc cf       	rjmp	.-104    	; 0xed4 <InitMenu+0xa>
     f3c:	60 93 fd 00 	sts	0x00FD, r22
     f40:	ee ef       	ldi	r30, 0xFE	; 254
     f42:	f0 e0       	ldi	r31, 0x00	; 0
     f44:	b0 83       	st	Z, r27
     f46:	a1 83       	std	Z+1, r26	; 0x01
     f48:	e0 e0       	ldi	r30, 0x00	; 0
     f4a:	f1 e0       	ldi	r31, 0x01	; 1
     f4c:	70 83       	st	Z, r23
     f4e:	41 83       	std	Z+1, r20	; 0x01
     f50:	e2 e0       	ldi	r30, 0x02	; 2
     f52:	f1 e0       	ldi	r31, 0x01	; 1
     f54:	50 83       	st	Z, r21
     f56:	91 83       	std	Z+1, r25	; 0x01
//-----------------------------------------------------------------//
void InitMenu(void)
{
	selectedMenuItemID = mi_REALTEMP;
	getMenuFunctionRecord(selectedMenuItemID, &selectedMenuFunctionRecord);
	processItemFunction(selectedMenuFunctionRecord.SelectFunction);
     f58:	e0 91 fe 00 	lds	r30, 0x00FE
     f5c:	f0 91 ff 00 	lds	r31, 0x00FF
//	Arguments:
//		funcAddr - address of the function to run.
//-----------------------------------------------------------------//
static inline void processItemFunction(FuncPtr funcAddr)
{
	if (funcAddr != 0)
     f60:	30 97       	sbiw	r30, 0x00	; 0
     f62:	09 f0       	breq	.+2      	; 0xf66 <InitMenu+0x9c>
		((FuncPtr)funcAddr)();
     f64:	09 95       	icall
	selectedMenuItemID = mi_REALTEMP;
	getMenuFunctionRecord(selectedMenuItemID, &selectedMenuFunctionRecord);
	processItemFunction(selectedMenuFunctionRecord.SelectFunction);
	
	// Initialize menu state timer
	menuTimer.Timer = 0;
     f66:	10 92 f6 00 	sts	0x00F6, r1
	menuTimer.Enabled = 0;
     f6a:	e5 ef       	ldi	r30, 0xF5	; 245
     f6c:	f0 e0       	ldi	r31, 0x00	; 0
     f6e:	80 81       	ld	r24, Z
	menuTimer.RunOnce = 1;
     f70:	8e 7f       	andi	r24, 0xFE	; 254
     f72:	82 60       	ori	r24, 0x02	; 2
     f74:	80 83       	st	Z, r24
	
	// Initialize user timer
	userTimer.Enabled = 0;
     f76:	e9 ef       	ldi	r30, 0xF9	; 249
     f78:	f0 e0       	ldi	r31, 0x00	; 0
     f7a:	80 81       	ld	r24, Z
	userTimer.RunOnce = 0;
     f7c:	8e 7f       	andi	r24, 0xFE	; 254
     f7e:	8d 7f       	andi	r24, 0xFD	; 253
     f80:	80 83       	st	Z, r24
     f82:	08 95       	ret

00000f84 <processMenu>:
//	Main menu control, -  state function calls, jumps 
//	between menu states and indication
//	Call this function from main() with a fixed time interval.
//-----------------------------------------------------------------//
void processMenu(void)
{
     f84:	ff 92       	push	r15
     f86:	0f 93       	push	r16
     f88:	1f 93       	push	r17
     f8a:	cf 93       	push	r28
     f8c:	df 93       	push	r29
	NextItem_t nextItem;
	uint16_t jumpCondition;
	
	processSoftTimer8b(&menuTimer);	
     f8e:	85 ef       	ldi	r24, 0xF5	; 245
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	20 d3       	rcall	.+1600   	; 0x15d4 <processSoftTimer8b>
	
	// Compose jump condition
	jumpCondition = button_state;		
     f94:	40 91 b6 00 	lds	r20, 0x00B6
     f98:	50 91 b7 00 	lds	r21, 0x00B7
	if (menuTimer.FTop)
     f9c:	80 91 f5 00 	lds	r24, 0x00F5
     fa0:	85 fd       	sbrc	r24, 5
		jumpCondition |= TMR_EXP;
     fa2:	50 68       	ori	r21, 0x80	; 128
	
	// Get next menu item according to current state and jump conditions
	nextItem = getNextMenuItem(selectedMenuItemID, jumpCondition);
     fa4:	b0 91 f4 00 	lds	r27, 0x00F4
     fa8:	80 e0       	ldi	r24, 0x00	; 0
     faa:	90 e0       	ldi	r25, 0x00	; 0
	MenuJumpRecord	jRecord;
	uint8_t i;
	
	for (i = 0; i < sizeof(menuJumpSet)/sizeof(MenuJumpRecord); i++  )
	{
		readJumpRecord(&menuJumpSet[i], &jRecord);		// read full jump record
     fac:	9c 01       	movw	r18, r24
     fae:	22 0f       	add	r18, r18
     fb0:	33 1f       	adc	r19, r19
     fb2:	22 0f       	add	r18, r18
     fb4:	33 1f       	adc	r19, r19
     fb6:	28 0f       	add	r18, r24
     fb8:	39 1f       	adc	r19, r25
     fba:	2d 55       	subi	r18, 0x5D	; 93
     fbc:	3e 4f       	sbci	r19, 0xFE	; 254
//		jRecPtr		- address of the jump record in the FLASH
//		resPtr		- address of the record to fill in the SRAM
//-----------------------------------------------------------------//
static inline void readJumpRecord(const MenuJumpRecord* jRecPtr, MenuJumpRecord* resPtr )
{
	resPtr->Item = pgm_read_byte(&jRecPtr->Item);
     fbe:	f9 01       	movw	r30, r18
     fc0:	a4 91       	lpm	r26, Z
	resPtr->JumpCondition = pgm_read_word(&jRecPtr->JumpCondition);
     fc2:	31 96       	adiw	r30, 0x01	; 1
     fc4:	65 91       	lpm	r22, Z+
     fc6:	74 91       	lpm	r23, Z
	resPtr->NextItem= pgm_read_byte(&jRecPtr->NextItem);
     fc8:	f9 01       	movw	r30, r18
     fca:	33 96       	adiw	r30, 0x03	; 3
     fcc:	c4 91       	lpm	r28, Z
	resPtr->Flags= pgm_read_byte(&jRecPtr->Flags);
     fce:	f9 01       	movw	r30, r18
     fd0:	34 96       	adiw	r30, 0x04	; 4
     fd2:	24 91       	lpm	r18, Z
	uint8_t i;
	
	for (i = 0; i < sizeof(menuJumpSet)/sizeof(MenuJumpRecord); i++  )
	{
		readJumpRecord(&menuJumpSet[i], &jRecord);		// read full jump record
		if (jRecord.Item == selectedItemId)				// If ID match,
     fd4:	ba 13       	cpse	r27, r26
     fd6:	15 c0       	rjmp	.+42     	; 0x1002 <processMenu+0x7e>
		{
			if ((jRecord.JumpCondition & jmpCond) != 0)		// if any of jump conditions match too,
     fd8:	64 23       	and	r22, r20
     fda:	75 23       	and	r23, r21
     fdc:	67 2b       	or	r22, r23
     fde:	89 f0       	breq	.+34     	; 0x1002 <processMenu+0x7e>
			{
				nextItem.ItemID = jRecord.NextItem;			// switch to next menu item
				nextItem.ItemTimeout = jRecord.Flags & TIMEOUT_MASK;
     fe0:	d2 2f       	mov	r29, r18
     fe2:	df 73       	andi	r29, 0x3F	; 63
				nextItem.ShiftRight = (jRecord.Flags & SHIFT_RIGHT) ? 1 : 0;
     fe4:	26 fb       	bst	r18, 6
     fe6:	00 27       	eor	r16, r16
     fe8:	00 f9       	bld	r16, 0
				nextItem.ShiftLeft = (jRecord.Flags & SHIFT_LEFT) ? 1 : 0;
     fea:	f2 2e       	mov	r15, r18
     fec:	ff 1c       	adc	r15, r15
     fee:	ff 24       	eor	r15, r15
     ff0:	ff 1c       	adc	r15, r15
     ff2:	10 e0       	ldi	r17, 0x00	; 0
     ff4:	f0 fa       	bst	r15, 0
     ff6:	10 f9       	bld	r17, 0
     ff8:	00 fb       	bst	r16, 0
     ffa:	11 f9       	bld	r17, 1
	
	// Get next menu item according to current state and jump conditions
	nextItem = getNextMenuItem(selectedMenuItemID, jumpCondition);
	
	// If next item differs from current
	if (nextItem.ItemID != selectedMenuItemID)
     ffc:	bc 13       	cpse	r27, r28
     ffe:	06 c0       	rjmp	.+12     	; 0x100c <processMenu+0x88>
    1000:	70 c0       	rjmp	.+224    	; 0x10e2 <processMenu+0x15e>
    1002:	01 96       	adiw	r24, 0x01	; 1
	NextItem_t nextItem;
	nextItem.ItemID = selectedItemId;
	MenuJumpRecord	jRecord;
	uint8_t i;
	
	for (i = 0; i < sizeof(menuJumpSet)/sizeof(MenuJumpRecord); i++  )
    1004:	8d 31       	cpi	r24, 0x1D	; 29
    1006:	91 05       	cpc	r25, r1
    1008:	89 f6       	brne	.-94     	; 0xfac <processMenu+0x28>
    100a:	6b c0       	rjmp	.+214    	; 0x10e2 <processMenu+0x15e>
	
	// If next item differs from current
	if (nextItem.ItemID != selectedMenuItemID)
	{		
		// Call exit function for current item
		processItemFunction(selectedMenuFunctionRecord.LeaveFunction);
    100c:	e0 91 02 01 	lds	r30, 0x0102
    1010:	f0 91 03 01 	lds	r31, 0x0103
//	Arguments:
//		funcAddr - address of the function to run.
//-----------------------------------------------------------------//
static inline void processItemFunction(FuncPtr funcAddr)
{
	if (funcAddr != 0)
    1014:	30 97       	sbiw	r30, 0x00	; 0
    1016:	09 f0       	breq	.+2      	; 0x101a <processMenu+0x96>
		((FuncPtr)funcAddr)();
    1018:	09 95       	icall
		// Call exit function for current item
		processItemFunction(selectedMenuFunctionRecord.LeaveFunction);
		
		// If shifting is specified, start it before calling any 
		//	new menu item functions 
		if (nextItem.ShiftRight)
    101a:	f0 fa       	bst	r15, 0
    101c:	10 f9       	bld	r17, 0
    101e:	00 fb       	bst	r16, 0
    1020:	11 f9       	bld	r17, 1
    1022:	11 ff       	sbrs	r17, 1
    1024:	02 c0       	rjmp	.+4      	; 0x102a <processMenu+0xa6>
			startShiftingWindowRight();
    1026:	15 dc       	rcall	.-2006   	; 0x852 <startShiftingWindowRight>
    1028:	02 c0       	rjmp	.+4      	; 0x102e <processMenu+0xaa>
		else if (nextItem.ShiftLeft)
    102a:	10 fd       	sbrc	r17, 0
			startShiftingWindowLeft();
    102c:	04 dc       	rcall	.-2040   	; 0x836 <startShiftingWindowLeft>
		
		// Select new item
		selectedMenuItemID = nextItem.ItemID;
    102e:	c0 93 f4 00 	sts	0x00F4, r28
    1032:	20 e0       	ldi	r18, 0x00	; 0
    1034:	30 e0       	ldi	r19, 0x00	; 0
static void getMenuFunctionRecord(uint8_t menuItemID, MenuFunctionRecord* menuRecord )
{
	uint8_t i;
	for (i = 0; i < sizeof(menuFunctionSet)/sizeof(MenuFunctionRecord); i++  )
	{
		readMenuRecord(&menuFunctionSet[i], menuRecord);
    1036:	c9 01       	movw	r24, r18
    1038:	88 0f       	add	r24, r24
    103a:	99 1f       	adc	r25, r25
    103c:	88 0f       	add	r24, r24
    103e:	99 1f       	adc	r25, r25
    1040:	88 0f       	add	r24, r24
    1042:	99 1f       	adc	r25, r25
    1044:	82 1b       	sub	r24, r18
    1046:	93 0b       	sbc	r25, r19
    1048:	88 5b       	subi	r24, 0xB8	; 184
    104a:	9e 4f       	sbci	r25, 0xFE	; 254
//		fRecPtr		- address of the function record in the FLASH
//		resPtr		- address of the record to fill in the SRAM
//-----------------------------------------------------------------//
static inline void readMenuRecord(const MenuFunctionRecord* fRecPtr, MenuFunctionRecord* resPtr )
{
	resPtr->Item = pgm_read_byte(&fRecPtr->Item);
    104c:	fc 01       	movw	r30, r24
    104e:	64 91       	lpm	r22, Z
	resPtr->SelectFunction = (FuncPtr)pgm_read_word(&fRecPtr->SelectFunction);
    1050:	31 96       	adiw	r30, 0x01	; 1
    1052:	45 91       	lpm	r20, Z+
    1054:	54 91       	lpm	r21, Z
    1056:	b4 2f       	mov	r27, r20
    1058:	a5 2f       	mov	r26, r21
	resPtr->RunFunction = (FuncPtr)pgm_read_word(&fRecPtr->RunFunction);
    105a:	fc 01       	movw	r30, r24
    105c:	33 96       	adiw	r30, 0x03	; 3
    105e:	45 91       	lpm	r20, Z+
    1060:	54 91       	lpm	r21, Z
    1062:	74 2f       	mov	r23, r20
    1064:	45 2f       	mov	r20, r21
	resPtr->LeaveFunction = (FuncPtr)pgm_read_word(&fRecPtr->LeaveFunction);
    1066:	05 96       	adiw	r24, 0x05	; 5
    1068:	fc 01       	movw	r30, r24
    106a:	85 91       	lpm	r24, Z+
    106c:	94 91       	lpm	r25, Z
    106e:	58 2f       	mov	r21, r24
{
	uint8_t i;
	for (i = 0; i < sizeof(menuFunctionSet)/sizeof(MenuFunctionRecord); i++  )
	{
		readMenuRecord(&menuFunctionSet[i], menuRecord);
		if (menuRecord->Item == menuItemID)
    1070:	c6 13       	cpse	r28, r22
    1072:	0f c0       	rjmp	.+30     	; 0x1092 <processMenu+0x10e>
    1074:	60 93 fd 00 	sts	0x00FD, r22
    1078:	ee ef       	ldi	r30, 0xFE	; 254
    107a:	f0 e0       	ldi	r31, 0x00	; 0
    107c:	b0 83       	st	Z, r27
    107e:	a1 83       	std	Z+1, r26	; 0x01
    1080:	e0 e0       	ldi	r30, 0x00	; 0
    1082:	f1 e0       	ldi	r31, 0x01	; 1
    1084:	70 83       	st	Z, r23
    1086:	41 83       	std	Z+1, r20	; 0x01
    1088:	e2 e0       	ldi	r30, 0x02	; 2
    108a:	f1 e0       	ldi	r31, 0x01	; 1
    108c:	50 83       	st	Z, r21
    108e:	91 83       	std	Z+1, r25	; 0x01
    1090:	14 c0       	rjmp	.+40     	; 0x10ba <processMenu+0x136>
    1092:	2f 5f       	subi	r18, 0xFF	; 255
    1094:	3f 4f       	sbci	r19, 0xFF	; 255
//	Output:
//-----------------------------------------------------------------//
static void getMenuFunctionRecord(uint8_t menuItemID, MenuFunctionRecord* menuRecord )
{
	uint8_t i;
	for (i = 0; i < sizeof(menuFunctionSet)/sizeof(MenuFunctionRecord); i++  )
    1096:	2d 30       	cpi	r18, 0x0D	; 13
    1098:	31 05       	cpc	r19, r1
    109a:	09 f0       	breq	.+2      	; 0x109e <processMenu+0x11a>
    109c:	cc cf       	rjmp	.-104    	; 0x1036 <processMenu+0xb2>
    109e:	60 93 fd 00 	sts	0x00FD, r22
    10a2:	ee ef       	ldi	r30, 0xFE	; 254
    10a4:	f0 e0       	ldi	r31, 0x00	; 0
    10a6:	b0 83       	st	Z, r27
    10a8:	a1 83       	std	Z+1, r26	; 0x01
    10aa:	e0 e0       	ldi	r30, 0x00	; 0
    10ac:	f1 e0       	ldi	r31, 0x01	; 1
    10ae:	70 83       	st	Z, r23
    10b0:	41 83       	std	Z+1, r20	; 0x01
    10b2:	e2 e0       	ldi	r30, 0x02	; 2
    10b4:	f1 e0       	ldi	r31, 0x01	; 1
    10b6:	50 83       	st	Z, r21
    10b8:	91 83       	std	Z+1, r25	; 0x01
		selectedMenuItemID = nextItem.ItemID;
		
		// Load from FLASH and save function pointers
		getMenuFunctionRecord(selectedMenuItemID, &selectedMenuFunctionRecord);
		// Call select function for next item
		processItemFunction(selectedMenuFunctionRecord.SelectFunction);
    10ba:	e0 91 fe 00 	lds	r30, 0x00FE
    10be:	f0 91 ff 00 	lds	r31, 0x00FF
//	Arguments:
//		funcAddr - address of the function to run.
//-----------------------------------------------------------------//
static inline void processItemFunction(FuncPtr funcAddr)
{
	if (funcAddr != 0)
    10c2:	30 97       	sbiw	r30, 0x00	; 0
    10c4:	09 f0       	breq	.+2      	; 0x10c8 <processMenu+0x144>
		((FuncPtr)funcAddr)();
    10c6:	09 95       	icall
		// Load from FLASH and save function pointers
		getMenuFunctionRecord(selectedMenuItemID, &selectedMenuFunctionRecord);
		// Call select function for next item
		processItemFunction(selectedMenuFunctionRecord.SelectFunction);
		// Start timer if timeout is enabled
		if (nextItem.ItemTimeout != 0)
    10c8:	dd 23       	and	r29, r29
    10ca:	a9 f0       	breq	.+42     	; 0x10f6 <processMenu+0x172>
		{
			menuTimer.Top = nextItem.ItemTimeout * MENU_TIMEOUT_MULT;
    10cc:	dd 0f       	add	r29, r29
    10ce:	d0 93 f7 00 	sts	0x00F7, r29
			menuTimer.Timer = 0;
    10d2:	10 92 f6 00 	sts	0x00F6, r1
			menuTimer.Enabled = 1;	
    10d6:	e5 ef       	ldi	r30, 0xF5	; 245
    10d8:	f0 e0       	ldi	r31, 0x00	; 0
    10da:	80 81       	ld	r24, Z
    10dc:	81 60       	ori	r24, 0x01	; 1
    10de:	80 83       	st	Z, r24
    10e0:	0a c0       	rjmp	.+20     	; 0x10f6 <processMenu+0x172>
		}
		
	}
	else
	{
		processSoftTimer8b(&userTimer);
    10e2:	89 ef       	ldi	r24, 0xF9	; 249
    10e4:	90 e0       	ldi	r25, 0x00	; 0
    10e6:	76 d2       	rcall	.+1260   	; 0x15d4 <processSoftTimer8b>
		// Stay at previous item
		processItemFunction(selectedMenuFunctionRecord.RunFunction);
    10e8:	e0 91 00 01 	lds	r30, 0x0100
    10ec:	f0 91 01 01 	lds	r31, 0x0101
//	Arguments:
//		funcAddr - address of the function to run.
//-----------------------------------------------------------------//
static inline void processItemFunction(FuncPtr funcAddr)
{
	if (funcAddr != 0)
    10f0:	30 97       	sbiw	r30, 0x00	; 0
    10f2:	09 f0       	breq	.+2      	; 0x10f6 <processMenu+0x172>
		((FuncPtr)funcAddr)();
    10f4:	09 95       	icall
	{
		processSoftTimer8b(&userTimer);
		// Stay at previous item
		processItemFunction(selectedMenuFunctionRecord.RunFunction);
	}	
}
    10f6:	df 91       	pop	r29
    10f8:	cf 91       	pop	r28
    10fa:	1f 91       	pop	r17
    10fc:	0f 91       	pop	r16
    10fe:	ff 90       	pop	r15
    1100:	08 95       	ret

00001102 <u16toa_align_right>:
// Converts uint16_t value into decimal string with right alignment
// len = number of digits output (without terminating '\0')
// len[7] = 1 -> no terminating '\0' at buffer[len]
// fill_char -> char used for string padding
void u16toa_align_right(uint16_t val, char *buffer, uint8_t len,char fill_char)
{
    1102:	cf 93       	push	r28
    1104:	df 93       	push	r29
    1106:	fc 01       	movw	r30, r24
    1108:	52 2f       	mov	r21, r18
	if (len & 0x80)
    110a:	44 23       	and	r20, r20
    110c:	2c f4       	brge	.+10     	; 0x1118 <u16toa_align_right+0x16>
	{
		len = len & 0x7F;
    110e:	4f 77       	andi	r20, 0x7F	; 127
		buffer += len;	
    1110:	eb 01       	movw	r28, r22
    1112:	c4 0f       	add	r28, r20
    1114:	d1 1d       	adc	r29, r1
    1116:	04 c0       	rjmp	.+8      	; 0x1120 <u16toa_align_right+0x1e>
	}
	else
	{
		buffer += len;	
    1118:	eb 01       	movw	r28, r22
    111a:	c4 0f       	add	r28, r20
    111c:	d1 1d       	adc	r29, r1
		*buffer = 0;
    111e:	18 82       	st	Y, r1
	}
	
	do
	{
		*--buffer = val % 10 + '0';
    1120:	9f 01       	movw	r18, r30
    1122:	ad ec       	ldi	r26, 0xCD	; 205
    1124:	bc ec       	ldi	r27, 0xCC	; 204
    1126:	b0 d4       	rcall	.+2400   	; 0x1a88 <__umulhisi3>
    1128:	96 95       	lsr	r25
    112a:	87 95       	ror	r24
    112c:	96 95       	lsr	r25
    112e:	87 95       	ror	r24
    1130:	96 95       	lsr	r25
    1132:	87 95       	ror	r24
    1134:	dc 01       	movw	r26, r24
    1136:	aa 0f       	add	r26, r26
    1138:	bb 1f       	adc	r27, r27
    113a:	bc 01       	movw	r22, r24
    113c:	66 0f       	add	r22, r22
    113e:	77 1f       	adc	r23, r23
    1140:	66 0f       	add	r22, r22
    1142:	77 1f       	adc	r23, r23
    1144:	66 0f       	add	r22, r22
    1146:	77 1f       	adc	r23, r23
    1148:	6a 0f       	add	r22, r26
    114a:	7b 1f       	adc	r23, r27
    114c:	e6 1b       	sub	r30, r22
    114e:	f7 0b       	sbc	r31, r23
    1150:	e0 5d       	subi	r30, 0xD0	; 208
    1152:	ea 93       	st	-Y, r30
		val /= 10;
    1154:	fc 01       	movw	r30, r24
		len--;
    1156:	41 50       	subi	r20, 0x01	; 1
	}
	while ((val != 0) && len);
    1158:	00 97       	sbiw	r24, 0x00	; 0
    115a:	29 f4       	brne	.+10     	; 0x1166 <u16toa_align_right+0x64>
	
	// Padding
	while(len--)
    115c:	84 2f       	mov	r24, r20
    115e:	81 50       	subi	r24, 0x01	; 1
    1160:	41 11       	cpse	r20, r1
    1162:	04 c0       	rjmp	.+8      	; 0x116c <u16toa_align_right+0x6a>
    1164:	07 c0       	rjmp	.+14     	; 0x1174 <u16toa_align_right+0x72>
	{
		*--buffer = val % 10 + '0';
		val /= 10;
		len--;
	}
	while ((val != 0) && len);
    1166:	41 11       	cpse	r20, r1
    1168:	db cf       	rjmp	.-74     	; 0x1120 <u16toa_align_right+0x1e>
    116a:	04 c0       	rjmp	.+8      	; 0x1174 <u16toa_align_right+0x72>
    116c:	fe 01       	movw	r30, r28
	
	// Padding
	while(len--)
		*--buffer = fill_char;
    116e:	52 93       	st	-Z, r21
		len--;
	}
	while ((val != 0) && len);
	
	// Padding
	while(len--)
    1170:	81 50       	subi	r24, 0x01	; 1
    1172:	e8 f7       	brcc	.-6      	; 0x116e <u16toa_align_right+0x6c>
		*--buffer = fill_char;
}
    1174:	df 91       	pop	r29
    1176:	cf 91       	pop	r28
    1178:	08 95       	ret

0000117a <init_system>:
//extern void powTest(void);

void init_system()
{
	// Setup Port D
	PORTD = 0; //(1<<PD_SYNCA | 1<<PD_SYNCB);
    117a:	12 ba       	out	0x12, r1	; 18
	DDRD = (1<<PD_TXD | 1<<PD_M1 | 1<<PD_M2 | 1<<PD_HEATER | 1<<PD_HEAT_INDIC );
    117c:	8e e3       	ldi	r24, 0x3E	; 62
    117e:	81 bb       	out	0x11, r24	; 17
	
	// Setup Port B
	PORTB = 0;
    1180:	18 ba       	out	0x18, r1	; 24
	DDRB = (1<<PB_BEEPER | 1<<PB_LED_DOUT | 1<<PB_LED_CLK | 1<<PB_SEGF | 1<<PB_SEGG | 1<<PB_SEGH);
    1182:	8f e3       	ldi	r24, 0x3F	; 63
    1184:	87 bb       	out	0x17, r24	; 23
	
	PORTC = 0;
    1186:	15 ba       	out	0x15, r1	; 21
	DDRC = (1<<PC_SEGA | 1<<PC_SEGB | 1<<PC_SEGC | 1<<PC_SEGD | 1<<PC_SEGE);	
    1188:	8f e1       	ldi	r24, 0x1F	; 31
    118a:	84 bb       	out	0x14, r24	; 20

	// Setup timer0
	// 1/1024 prescaler, T=64us @16MHz
	TCCR0 = (1<<CS02 | 0<<CS01 | 1<<CS00);
    118c:	85 e0       	ldi	r24, 0x05	; 5
    118e:	83 bf       	out	0x33, r24	; 51
	// Start 256 * 64us = 16384us interval
	TCNT0 = 0;
    1190:	12 be       	out	0x32, r1	; 50
	// Clear interrupt flag
	TIFR |= (1<<TOV0);
    1192:	88 b7       	in	r24, 0x38	; 56
    1194:	81 60       	ori	r24, 0x01	; 1
    1196:	88 bf       	out	0x38, r24	; 56
	// Enable interrupts from timer 0
	TIMSK |= (1<<TOIE0);
    1198:	89 b7       	in	r24, 0x39	; 57
    119a:	81 60       	ori	r24, 0x01	; 1
    119c:	89 bf       	out	0x39, r24	; 57
	
	// Setup timer2 as 1ms system frequency generator
	// 1/64 prescaler, CTC mode, OC2 disconnected
	TCCR2 = (1<<CS22 | 1<<WGM21);
    119e:	8c e0       	ldi	r24, 0x0C	; 12
    11a0:	85 bd       	out	0x25, r24	; 37
	OCR2 = 249;
    11a2:	89 ef       	ldi	r24, 0xF9	; 249
    11a4:	83 bd       	out	0x23, r24	; 35
	TIMSK |= (1<<OCIE2);
    11a6:	89 b7       	in	r24, 0x39	; 57
    11a8:	80 68       	ori	r24, 0x80	; 128
    11aa:	89 bf       	out	0x39, r24	; 57
	
	// Setup timer1 as beeper frequency generator
	// CTC mode, 1/64 prescaler
	TCCR1A = 0;
    11ac:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = (1<<WGM12 | 1<<CS11 | 1<<CS10);
    11ae:	8b e0       	ldi	r24, 0x0B	; 11
    11b0:	8e bd       	out	0x2e, r24	; 46
	// 1kHz beeper frequency default
	OCR1A = 127;
    11b2:	8f e7       	ldi	r24, 0x7F	; 127
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	9b bd       	out	0x2b, r25	; 43
    11b8:	8a bd       	out	0x2a, r24	; 42

	// Setup AC sync comparator
	// Interrupt on output toggle
	ACSR |= (1<<ACI);
    11ba:	44 9a       	sbi	0x08, 4	; 8
	ACSR = (1<<ACIE | 0<<ACIS1 | 0<<ACIS0);
    11bc:	88 e0       	ldi	r24, 0x08	; 8
    11be:	88 b9       	out	0x08, r24	; 8
	
	// Setup ADC
	// Internal Vref + cap, input ADC5, 
	ADMUX = (1<<REFS1 | 1<<REFS0 | 0<<MUX3 | 1<<MUX2 | 0<<MUX1 | 1<<MUX0 );
    11c0:	85 ec       	ldi	r24, 0xC5	; 197
    11c2:	87 b9       	out	0x07, r24	; 7
	// Prescaler = 128
	ADCSRA = (1<<ADEN |/* 1<<ADFR |*/  1<<ADIE | 1<<ADPS2 | 1<<ADPS1 | 1<<ADPS0);
    11c4:	8f e8       	ldi	r24, 0x8F	; 143
    11c6:	86 b9       	out	0x06, r24	; 6
	
	// Setup USART
	// Double speed
	UCSRA = (1<<U2X);
    11c8:	82 e0       	ldi	r24, 0x02	; 2
    11ca:	8b b9       	out	0x0b, r24	; 11
	UCSRB = (1<<RXEN | 1<<TXEN | 0<<UCSZ2);
    11cc:	88 e1       	ldi	r24, 0x18	; 24
    11ce:	8a b9       	out	0x0a, r24	; 10
	// No parity, 1 stop bit, 8 bit
	UCSRC = (1<<URSEL | 0<<UPM1 | 0<<UPM0 | 0<<USBS | 1<<UCSZ1 | 1<<UCSZ0);
    11d0:	86 e8       	ldi	r24, 0x86	; 134
    11d2:	80 bd       	out	0x20, r24	; 32
	// 57600 @16MHz, 2x
	UBRRH=0x00;
    11d4:	10 bc       	out	0x20, r1	; 32
	UBRRL=0x22;
    11d6:	82 e2       	ldi	r24, 0x22	; 34
    11d8:	89 b9       	out	0x09, r24	; 9
    11da:	08 95       	ret

000011dc <main>:




int main(void)
{
    11dc:	cf 93       	push	r28
    11de:	df 93       	push	r29
    11e0:	cd b7       	in	r28, 0x3d	; 61
    11e2:	de b7       	in	r29, 0x3e	; 62
    11e4:	2a 97       	sbiw	r28, 0x0a	; 10
    11e6:	0f b6       	in	r0, 0x3f	; 63
    11e8:	f8 94       	cli
    11ea:	de bf       	out	0x3e, r29	; 62
    11ec:	0f be       	out	0x3f, r0	; 63
    11ee:	cd bf       	out	0x3d, r28	; 61
	uint16_t uart_log_counter = 0;
	
	//powTest();
	
	// Initialize IO
	init_system();
    11f0:	c4 df       	rcall	.-120    	; 0x117a <init_system>
	
	// Restore params
	restoreGlobalParams();
    11f2:	01 da       	rcall	.-3070   	; 0x5f6 <restoreGlobalParams>
	
	// Initialize LED indicator
	initLedIndicator();
    11f4:	3c db       	rcall	.-2440   	; 0x86e <initLedIndicator>
	// Enable interrupts
	sei();
    11f6:	78 94       	sei
	
	// Beep
	SetBeeperFreq(1000);
    11f8:	88 ee       	ldi	r24, 0xE8	; 232
    11fa:	93 e0       	ldi	r25, 0x03	; 3
    11fc:	19 d2       	rcall	.+1074   	; 0x1630 <SetBeeperFreq>
	StartBeep(200);
    11fe:	88 ec       	ldi	r24, 0xC8	; 200
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	37 d2       	rcall	.+1134   	; 0x1672 <StartBeep>
	
	InitMenu();
    1204:	62 de       	rcall	.-828    	; 0xeca <InitMenu>

	setMotorDirection(ROLL_FWD);
    1206:	81 e0       	ldi	r24, 0x01	; 1
    1208:	75 d0       	rcall	.+234    	; 0x12f4 <setMotorDirection>
	
	//button_state = BD_UP;
	//processMenu();
	
	printLedBuffer(0,"      ");
    120a:	68 e9       	ldi	r22, 0x98	; 152
    120c:	70 e0       	ldi	r23, 0x00	; 0
    120e:	80 e0       	ldi	r24, 0x00	; 0
    1210:	51 db       	rcall	.-2398   	; 0x8b4 <printLedBuffer>
int main(void)
{
	char str[10];
	uint8_t temp8u = 0x00;
	uint8_t uart_log_timeout_counter = 0;
	uint16_t uart_log_counter = 0;
    1212:	e1 2c       	mov	r14, r1
    1214:	f1 2c       	mov	r15, r1

int main(void)
{
	char str[10];
	uint8_t temp8u = 0x00;
	uint8_t uart_log_timeout_counter = 0;
    1216:	d1 2c       	mov	r13, r1
	printLedBuffer(0,"      ");
	
    while(1)
    {
		
		if (menuUpdateTimer.FOvfl)
    1218:	03 e6       	ldi	r16, 0x63	; 99
    121a:	10 e0       	ldi	r17, 0x00	; 0
				//---------------------------------//
				// Function is called every 100ms
				// UART message is sent every second
				if (uart_log_timeout_counter == 9)
				{
					uart_log_timeout_counter = 0;
    121c:	c1 2c       	mov	r12, r1
	printLedBuffer(0,"      ");
	
    while(1)
    {
		
		if (menuUpdateTimer.FOvfl)
    121e:	f8 01       	movw	r30, r16
    1220:	80 81       	ld	r24, Z
    1222:	86 ff       	sbrs	r24, 6
    1224:	fc cf       	rjmp	.-8      	; 0x121e <main+0x42>
		{
			// Get new temperature measurement
			update_filtered_adc();
    1226:	83 d8       	rcall	.-3834   	; 0x32e <update_filtered_adc>
			
			// Get new button state
			process_buttons();
    1228:	e3 d8       	rcall	.-3642   	; 0x3f0 <process_buttons>
			
			// Give audio feedback
			if (button_state & BL_MENU)
    122a:	20 91 b6 00 	lds	r18, 0x00B6
    122e:	30 91 b7 00 	lds	r19, 0x00B7
    1232:	31 ff       	sbrs	r19, 1
    1234:	07 c0       	rjmp	.+14     	; 0x1244 <main+0x68>
			{
				SetBeeperFreq(800);
    1236:	80 e2       	ldi	r24, 0x20	; 32
    1238:	93 e0       	ldi	r25, 0x03	; 3
    123a:	fa d1       	rcall	.+1012   	; 0x1630 <SetBeeperFreq>
				StartBeep(40);
    123c:	88 e2       	ldi	r24, 0x28	; 40
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	18 d2       	rcall	.+1072   	; 0x1672 <StartBeep>
    1242:	0a c0       	rjmp	.+20     	; 0x1258 <main+0x7c>
			}
			else if (button_action_down & (BD_MENU | BD_UP | BD_DOWN | BD_HEATCTRL))
    1244:	80 91 b5 00 	lds	r24, 0x00B5
    1248:	87 74       	andi	r24, 0x47	; 71
    124a:	31 f0       	breq	.+12     	; 0x1258 <main+0x7c>
			{
				SetBeeperFreq(1000);
    124c:	88 ee       	ldi	r24, 0xE8	; 232
    124e:	93 e0       	ldi	r25, 0x03	; 3
    1250:	ef d1       	rcall	.+990    	; 0x1630 <SetBeeperFreq>
				StartBeep(40);
    1252:	88 e2       	ldi	r24, 0x28	; 40
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	0d d2       	rcall	.+1050   	; 0x1672 <StartBeep>
			}	
			

			// Process user menu states, settings and indication
			processMenu();
    1258:	95 de       	rcall	.-726    	; 0xf84 <processMenu>
			
			// Process cyclic rolling, direction control
			processRollControl();	
    125a:	3d d9       	rcall	.-3462   	; 0x4d6 <processRollControl>
			
			// Process heater regulation
			processHeaterControl();
    125c:	b4 d9       	rcall	.-3224   	; 0x5c6 <processHeaterControl>
		


			if (menuUpdateTimer.FA_TGL)
    125e:	f8 01       	movw	r30, r16
    1260:	80 81       	ld	r24, Z
    1262:	82 ff       	sbrs	r24, 2
    1264:	32 c0       	rjmp	.+100    	; 0x12ca <main+0xee>
				//---------------------------------//
				// Log to UART
				//---------------------------------//
				// Function is called every 100ms
				// UART message is sent every second
				if (uart_log_timeout_counter == 9)
    1266:	f9 e0       	ldi	r31, 0x09	; 9
    1268:	df 12       	cpse	r13, r31
    126a:	2e c0       	rjmp	.+92     	; 0x12c8 <main+0xec>
				{
					uart_log_timeout_counter = 0;
					
					
					u16toa_align_right(uart_log_counter,str,5,' ');
    126c:	20 e2       	ldi	r18, 0x20	; 32
    126e:	45 e0       	ldi	r20, 0x05	; 5
    1270:	be 01       	movw	r22, r28
    1272:	6f 5f       	subi	r22, 0xFF	; 255
    1274:	7f 4f       	sbci	r23, 0xFF	; 255
    1276:	c7 01       	movw	r24, r14
    1278:	44 df       	rcall	.-376    	; 0x1102 <u16toa_align_right>
					USART_sendstr(str);
    127a:	ce 01       	movw	r24, r28
    127c:	01 96       	adiw	r24, 0x01	; 1
    127e:	40 d2       	rcall	.+1152   	; 0x1700 <USART_sendstr>
					USART_sendstr("     ");
    1280:	89 e9       	ldi	r24, 0x99	; 153
    1282:	90 e0       	ldi	r25, 0x00	; 0
    1284:	3d d2       	rcall	.+1146   	; 0x1700 <USART_sendstr>
					
					u16toa_align_right(adc_filtered_value,str,5,' ');
    1286:	20 e2       	ldi	r18, 0x20	; 32
    1288:	45 e0       	ldi	r20, 0x05	; 5
    128a:	be 01       	movw	r22, r28
    128c:	6f 5f       	subi	r22, 0xFF	; 255
    128e:	7f 4f       	sbci	r23, 0xFF	; 255
    1290:	80 91 d0 00 	lds	r24, 0x00D0
    1294:	90 91 d1 00 	lds	r25, 0x00D1
    1298:	34 df       	rcall	.-408    	; 0x1102 <u16toa_align_right>
					USART_sendstr(str);
    129a:	ce 01       	movw	r24, r28
    129c:	01 96       	adiw	r24, 0x01	; 1
    129e:	30 d2       	rcall	.+1120   	; 0x1700 <USART_sendstr>
					USART_sendstr("     ");
    12a0:	89 e9       	ldi	r24, 0x99	; 153
    12a2:	90 e0       	ldi	r25, 0x00	; 0
    12a4:	2d d2       	rcall	.+1114   	; 0x1700 <USART_sendstr>
					
					if (heaterState & HEATER_ENABLED)
    12a6:	80 91 c3 00 	lds	r24, 0x00C3
    12aa:	86 ff       	sbrs	r24, 6
    12ac:	03 c0       	rjmp	.+6      	; 0x12b4 <main+0xd8>
					USART_send('1');
    12ae:	81 e3       	ldi	r24, 0x31	; 49
    12b0:	22 d2       	rcall	.+1092   	; 0x16f6 <USART_send>
    12b2:	02 c0       	rjmp	.+4      	; 0x12b8 <main+0xdc>
					else
					USART_send('0');
    12b4:	80 e3       	ldi	r24, 0x30	; 48
    12b6:	1f d2       	rcall	.+1086   	; 0x16f6 <USART_send>
					
					USART_sendstr("\n\r");
    12b8:	8f e9       	ldi	r24, 0x9F	; 159
    12ba:	90 e0       	ldi	r25, 0x00	; 0
    12bc:	21 d2       	rcall	.+1090   	; 0x1700 <USART_sendstr>
					
					uart_log_counter++;
    12be:	8f ef       	ldi	r24, 0xFF	; 255
    12c0:	e8 1a       	sub	r14, r24
    12c2:	f8 0a       	sbc	r15, r24
				//---------------------------------//
				// Function is called every 100ms
				// UART message is sent every second
				if (uart_log_timeout_counter == 9)
				{
					uart_log_timeout_counter = 0;
    12c4:	dc 2c       	mov	r13, r12
    12c6:	01 c0       	rjmp	.+2      	; 0x12ca <main+0xee>
					uart_log_counter++;
					
				}
				else
				{
					uart_log_timeout_counter++;
    12c8:	d3 94       	inc	r13
			}
			
			
			
			
			menuUpdateTimer.FOvfl = 0;	
    12ca:	f8 01       	movw	r30, r16
    12cc:	80 81       	ld	r24, Z
    12ce:	8f 7b       	andi	r24, 0xBF	; 191
    12d0:	80 83       	st	Z, r24
    12d2:	a5 cf       	rjmp	.-182    	; 0x121e <main+0x42>

000012d4 <setHeaterControl>:


// User function to control heater intensity
void setHeaterControl(uint8_t value)
{
	ctrl_heater = value;
    12d4:	80 93 c4 00 	sts	0x00C4, r24
	heaterState &= ~READY_TO_UPDATE_HEATER;
    12d8:	90 91 c3 00 	lds	r25, 0x00C3
    12dc:	29 2f       	mov	r18, r25
    12de:	2f 77       	andi	r18, 0x7F	; 127
	
	if (ctrl_heater)
    12e0:	88 23       	and	r24, r24
    12e2:	21 f0       	breq	.+8      	; 0x12ec <setHeaterControl+0x18>
		heaterState |= HEATER_ENABLED;
    12e4:	20 64       	ori	r18, 0x40	; 64
    12e6:	20 93 c3 00 	sts	0x00C3, r18
    12ea:	08 95       	ret
	else
		heaterState &= ~HEATER_ENABLED;	
    12ec:	9f 73       	andi	r25, 0x3F	; 63
    12ee:	90 93 c3 00 	sts	0x00C3, r25
    12f2:	08 95       	ret

000012f4 <setMotorDirection>:
	
// User function to control motor rotation
void setMotorDirection(uint8_t dir)
{
	// Disable interrupts from timer0 
	TIMSK &= ~(1<<TOIE0);
    12f4:	99 b7       	in	r25, 0x39	; 57
    12f6:	9e 7f       	andi	r25, 0xFE	; 254
    12f8:	99 bf       	out	0x39, r25	; 57
		
	newDirReq = dir;	// save new direction request
    12fa:	80 93 c5 00 	sts	0x00C5, r24
	
	if (dir & ROLL_FWD)
    12fe:	80 ff       	sbrs	r24, 0
    1300:	09 c0       	rjmp	.+18     	; 0x1314 <setMotorDirection+0x20>
		bottomPoint = rollPoint;
    1302:	80 91 c6 00 	lds	r24, 0x00C6
    1306:	90 91 c7 00 	lds	r25, 0x00C7
    130a:	90 93 c9 00 	sts	0x00C9, r25
    130e:	80 93 c8 00 	sts	0x00C8, r24
    1312:	0a c0       	rjmp	.+20     	; 0x1328 <setMotorDirection+0x34>
	else if (dir & ROLL_REV)
    1314:	81 ff       	sbrs	r24, 1
    1316:	08 c0       	rjmp	.+16     	; 0x1328 <setMotorDirection+0x34>
		topPoint = rollPoint;
    1318:	80 91 c6 00 	lds	r24, 0x00C6
    131c:	90 91 c7 00 	lds	r25, 0x00C7
    1320:	90 93 cb 00 	sts	0x00CB, r25
    1324:	80 93 ca 00 	sts	0x00CA, r24
		

	// Enable interrupts from timer 0
	TIMSK |= (1<<TOIE0);	
    1328:	89 b7       	in	r24, 0x39	; 57
    132a:	81 60       	ori	r24, 0x01	; 1
    132c:	89 bf       	out	0x39, r24	; 57
    132e:	08 95       	ret

00001330 <stopCycleRolling>:
}

void stopCycleRolling(uint8_t doResetPoints)
{
	// Disable interrupts from timer0 
	TIMSK &= ~(1<<TOIE0);
    1330:	99 b7       	in	r25, 0x39	; 57
    1332:	9e 7f       	andi	r25, 0xFE	; 254
    1334:	99 bf       	out	0x39, r25	; 57
	
	rollState &= ~ROLL_CYCLE;
    1336:	90 91 c2 00 	lds	r25, 0x00C2
    133a:	9b 7f       	andi	r25, 0xFB	; 251
    133c:	90 93 c2 00 	sts	0x00C2, r25
	if (doResetPoints)
    1340:	88 23       	and	r24, r24
    1342:	71 f0       	breq	.+28     	; 0x1360 <stopCycleRolling+0x30>
	{
		topPoint = bottomPoint = rollPoint;
    1344:	80 91 c6 00 	lds	r24, 0x00C6
    1348:	90 91 c7 00 	lds	r25, 0x00C7
    134c:	90 93 c9 00 	sts	0x00C9, r25
    1350:	80 93 c8 00 	sts	0x00C8, r24
    1354:	90 93 cb 00 	sts	0x00CB, r25
    1358:	80 93 ca 00 	sts	0x00CA, r24
		activeRollCycle = 0;	
    135c:	10 92 04 01 	sts	0x0104, r1
	}		
	
	// Enable interrupts from timer 0
	TIMSK |= (1<<TOIE0);
    1360:	89 b7       	in	r24, 0x39	; 57
    1362:	81 60       	ori	r24, 0x01	; 1
    1364:	89 bf       	out	0x39, r24	; 57
    1366:	08 95       	ret

00001368 <isTopPointValid>:
}
*/

uint8_t isTopPointValid(void)
{
	return (	(int16_t)(topPoint - rollPoint) >= 0 );
    1368:	80 91 ca 00 	lds	r24, 0x00CA
    136c:	90 91 cb 00 	lds	r25, 0x00CB
    1370:	20 91 c6 00 	lds	r18, 0x00C6
    1374:	30 91 c7 00 	lds	r19, 0x00C7
    1378:	82 1b       	sub	r24, r18
    137a:	93 0b       	sbc	r25, r19
    137c:	89 2f       	mov	r24, r25
    137e:	80 95       	com	r24
}
    1380:	88 1f       	adc	r24, r24
    1382:	88 27       	eor	r24, r24
    1384:	88 1f       	adc	r24, r24
    1386:	08 95       	ret

00001388 <isBottomPointValid>:

uint8_t isBottomPointValid(void)
{
	return (	(int16_t)(rollPoint - bottomPoint) >= 0	);
    1388:	80 91 c6 00 	lds	r24, 0x00C6
    138c:	90 91 c7 00 	lds	r25, 0x00C7
    1390:	20 91 c8 00 	lds	r18, 0x00C8
    1394:	30 91 c9 00 	lds	r19, 0x00C9
    1398:	82 1b       	sub	r24, r18
    139a:	93 0b       	sbc	r25, r19
    139c:	89 2f       	mov	r24, r25
    139e:	80 95       	com	r24
}
    13a0:	88 1f       	adc	r24, r24
    13a2:	88 27       	eor	r24, r24
    13a4:	88 1f       	adc	r24, r24
    13a6:	08 95       	ret

000013a8 <startCycleRolling>:


uint8_t startCycleRolling(void)
{
	// Disable interrupts from timer0 
	TIMSK &= ~(1<<TOIE0);
    13a8:	89 b7       	in	r24, 0x39	; 57
    13aa:	8e 7f       	andi	r24, 0xFE	; 254
    13ac:	89 bf       	out	0x39, r24	; 57
	
	if ( isTopPointValid() && isBottomPointValid() )
    13ae:	dc df       	rcall	.-72     	; 0x1368 <isTopPointValid>
    13b0:	88 23       	and	r24, r24
    13b2:	59 f0       	breq	.+22     	; 0x13ca <startCycleRolling+0x22>
    13b4:	e9 df       	rcall	.-46     	; 0x1388 <isBottomPointValid>
    13b6:	88 23       	and	r24, r24
    13b8:	41 f0       	breq	.+16     	; 0x13ca <startCycleRolling+0x22>
	{
		rollState |= ROLL_CYCLE;
    13ba:	80 91 c2 00 	lds	r24, 0x00C2
    13be:	84 60       	ori	r24, 0x04	; 4
    13c0:	80 93 c2 00 	sts	0x00C2, r24
		activeRollCycle = 1;
    13c4:	81 e0       	ldi	r24, 0x01	; 1
    13c6:	80 93 04 01 	sts	0x0104, r24
	}
	
	// Enable interrupts from timer 0
	TIMSK |= (1<<TOIE0);
    13ca:	89 b7       	in	r24, 0x39	; 57
    13cc:	81 60       	ori	r24, 0x01	; 1
    13ce:	89 bf       	out	0x39, r24	; 57
	
	return (rollState & ROLL_CYCLE);
    13d0:	80 91 c2 00 	lds	r24, 0x00C2
}
    13d4:	84 70       	andi	r24, 0x04	; 4
    13d6:	08 95       	ret

000013d8 <__vector_16>:




ISR(ANA_COMP_vect)
{
    13d8:	1f 92       	push	r1
    13da:	0f 92       	push	r0
    13dc:	0f b6       	in	r0, 0x3f	; 63
    13de:	0f 92       	push	r0
    13e0:	11 24       	eor	r1, r1
    13e2:	8f 93       	push	r24
    13e4:	9f 93       	push	r25
	// Once triggered, disable further comparator interrupt
	ACSR &= ~(1<<ACIE);
    13e6:	43 98       	cbi	0x08, 3	; 8
	// Turn on heater TRIAC
	if (heater_cnt < ctrl_heater_sync)
    13e8:	90 91 cc 00 	lds	r25, 0x00CC
    13ec:	80 91 cd 00 	lds	r24, 0x00CD
    13f0:	98 17       	cp	r25, r24
    13f2:	20 f4       	brcc	.+8      	; 0x13fc <__vector_16+0x24>
		PORTD |= (1<<PD_HEATER | 1<<PD_HEAT_INDIC);	// Direct heater indication
    13f4:	82 b3       	in	r24, 0x12	; 18
    13f6:	80 63       	ori	r24, 0x30	; 48
    13f8:	82 bb       	out	0x12, r24	; 18
    13fa:	01 c0       	rjmp	.+2      	; 0x13fe <__vector_16+0x26>
	else
		PORTD &= ~(1<<PD_HEAT_INDIC);
    13fc:	95 98       	cbi	0x12, 5	; 18
	// Reprogram timer0
	TCNT0 = 256 - TRIAC_IMPULSE_TIME;		// Triac gate impulse time
    13fe:	86 ef       	ldi	r24, 0xF6	; 246
    1400:	82 bf       	out	0x32, r24	; 50
	// Modify state	
	p_state &= ~STATE_MASK;					// Start new state machine cycle
    1402:	80 91 62 00 	lds	r24, 0x0062
    1406:	80 7f       	andi	r24, 0xF0	; 240
	p_state ^= HALF_PERIOD_FLAG;			// Toggle flag
    1408:	80 58       	subi	r24, 0x80	; 128
    140a:	80 93 62 00 	sts	0x0062, r24
	
}
    140e:	9f 91       	pop	r25
    1410:	8f 91       	pop	r24
    1412:	0f 90       	pop	r0
    1414:	0f be       	out	0x3f, r0	; 63
    1416:	0f 90       	pop	r0
    1418:	1f 90       	pop	r1
    141a:	18 95       	reti

0000141c <__vector_9>:



ISR(TIMER0_OVF_vect)
{
    141c:	1f 92       	push	r1
    141e:	0f 92       	push	r0
    1420:	0f b6       	in	r0, 0x3f	; 63
    1422:	0f 92       	push	r0
    1424:	11 24       	eor	r1, r1
    1426:	2f 93       	push	r18
    1428:	3f 93       	push	r19
    142a:	4f 93       	push	r20
    142c:	5f 93       	push	r21
    142e:	6f 93       	push	r22
    1430:	7f 93       	push	r23
    1432:	8f 93       	push	r24
    1434:	9f 93       	push	r25
    1436:	af 93       	push	r26
    1438:	bf 93       	push	r27
    143a:	ef 93       	push	r30
    143c:	ff 93       	push	r31
	uint8_t temp;
	
	switch(p_state & STATE_MASK)
    143e:	80 91 62 00 	lds	r24, 0x0062
    1442:	8f 70       	andi	r24, 0x0F	; 15
    1444:	81 30       	cpi	r24, 0x01	; 1
    1446:	51 f0       	breq	.+20     	; 0x145c <__vector_9+0x40>
    1448:	28 f0       	brcs	.+10     	; 0x1454 <__vector_9+0x38>
    144a:	82 30       	cpi	r24, 0x02	; 2
    144c:	51 f0       	breq	.+20     	; 0x1462 <__vector_9+0x46>
    144e:	83 30       	cpi	r24, 0x03	; 3
    1450:	71 f4       	brne	.+28     	; 0x146e <__vector_9+0x52>
    1452:	0c c0       	rjmp	.+24     	; 0x146c <__vector_9+0x50>
	{
		// TRIAC_IMPULSE_TIME finished
		case 0x00:
			// Turn off heater TRIAC
			PORTD &= ~(1<<PD_HEATER);
    1454:	94 98       	cbi	0x12, 4	; 18
			TCNT0 = 256 - (QUATER_PERIOD_TIME - TRIAC_IMPULSE_TIME);
    1456:	8c eb       	ldi	r24, 0xBC	; 188
    1458:	82 bf       	out	0x32, r24	; 50
			break;
    145a:	09 c0       	rjmp	.+18     	; 0x146e <__vector_9+0x52>
		// QUATER_PERIOD_TIME finished	
		case 0x01:	
			TCNT0 = 256 - (SYNC_IGNORE_TIME - QUATER_PERIOD_TIME);
    145c:	82 ec       	ldi	r24, 0xC2	; 194
    145e:	82 bf       	out	0x32, r24	; 50
			break;	
    1460:	06 c0       	rjmp	.+12     	; 0x146e <__vector_9+0x52>
		// SYNC_IGNORE_TIME finished	
		case 0x02:
			TCNT0 = 256 - SYNC_LOST_TIMEOUT;
    1462:	80 ee       	ldi	r24, 0xE0	; 224
    1464:	82 bf       	out	0x32, r24	; 50
			// Clear flag and enable interrupt from analog comparator
			ACSR |= (1<<ACI);
    1466:	44 9a       	sbi	0x08, 4	; 8
			ACSR |= (1<<ACIE);
    1468:	43 9a       	sbi	0x08, 3	; 8
			break;
    146a:	01 c0       	rjmp	.+2      	; 0x146e <__vector_9+0x52>
		// SYNC_LOST_TIMEOUT finished
		case 0x03:
			// Error - sync is lost. It means that device has been disconnected from AC line.
			// Disable all power-consuming devices like LEDs and save user settings to EEPROM.
			exitPowerOff();
    146c:	0a d9       	rcall	.-3564   	; 0x682 <exitPowerOff>
			// Sync is not present - TODO
			break;
	}	

	// Full period check
	if ((p_state & (HALF_PERIOD_FLAG | STATE_MASK)) == (HALF_PERIOD_FLAG | 0x01))
    146e:	80 91 62 00 	lds	r24, 0x0062
    1472:	8f 78       	andi	r24, 0x8F	; 143
    1474:	81 38       	cpi	r24, 0x81	; 129
    1476:	09 f0       	breq	.+2      	; 0x147a <__vector_9+0x5e>
    1478:	93 c0       	rjmp	.+294    	; 0x15a0 <__vector_9+0x184>
	{
		// Full AC line period is done. Update controls.
		
		temp = PORTD;
    147a:	92 b3       	in	r25, 0x12	; 18
		temp &= ~(1<<PD_M1 | 1<<PD_M2);
    147c:	93 7f       	andi	r25, 0xF3	; 243
		if ( rollState & SKIP_CURRENT_MOTOR_CTRL )
    147e:	80 91 c2 00 	lds	r24, 0x00C2
    1482:	83 ff       	sbrs	r24, 3
    1484:	05 c0       	rjmp	.+10     	; 0x1490 <__vector_9+0x74>
		{
			// Direction control changed. Skip current period to allow TRIACs fully close
			rollState &= ~SKIP_CURRENT_MOTOR_CTRL;
    1486:	87 7f       	andi	r24, 0xF7	; 247
    1488:	80 93 c2 00 	sts	0x00C2, r24
			PORTD = temp; 	
    148c:	92 bb       	out	0x12, r25	; 18
    148e:	75 c0       	rjmp	.+234    	; 0x157a <__vector_9+0x15e>
		}
		else
		{
			// Apply direction control 
			if (rollState & ROLL_FWD)
    1490:	80 ff       	sbrs	r24, 0
    1492:	02 c0       	rjmp	.+4      	; 0x1498 <__vector_9+0x7c>
				temp |= (1<<PD_M1);
    1494:	94 60       	ori	r25, 0x04	; 4
    1496:	02 c0       	rjmp	.+4      	; 0x149c <__vector_9+0x80>
			else if (rollState & ROLL_REV)
    1498:	81 fd       	sbrc	r24, 1
				temp |= (1<<PD_M2);
    149a:	98 60       	ori	r25, 0x08	; 8
			PORTD = temp; 
    149c:	92 bb       	out	0x12, r25	; 18
// Function to process rolling - sets rotation direction for next period
// Call once per each AC line period
static inline void controlRolling()
{
	// Process cycle rolling
	switch(rollState & (ROLL_FWD | ROLL_REV | ROLL_CYCLE))
    149e:	40 91 c2 00 	lds	r20, 0x00C2
    14a2:	84 2f       	mov	r24, r20
    14a4:	87 70       	andi	r24, 0x07	; 7
    14a6:	85 30       	cpi	r24, 0x05	; 5
    14a8:	19 f0       	breq	.+6      	; 0x14b0 <__vector_9+0x94>
    14aa:	86 30       	cpi	r24, 0x06	; 6
    14ac:	f1 f5       	brne	.+124    	; 0x152a <__vector_9+0x10e>
    14ae:	1f c0       	rjmp	.+62     	; 0x14ee <__vector_9+0xd2>
//---------------------------------------------//
//---------------------------------------------//

static inline uint8_t reachedTopPoint(void)
{
	return (	(int16_t)(topPoint - rollPoint) <= 0 );
    14b0:	80 91 ca 00 	lds	r24, 0x00CA
    14b4:	90 91 cb 00 	lds	r25, 0x00CB
    14b8:	20 91 c6 00 	lds	r18, 0x00C6
    14bc:	30 91 c7 00 	lds	r19, 0x00C7
    14c0:	82 1b       	sub	r24, r18
    14c2:	93 0b       	sbc	r25, r19
{
	// Process cycle rolling
	switch(rollState & (ROLL_FWD | ROLL_REV | ROLL_CYCLE))
	{
		case (ROLL_FWD | ROLL_CYCLE):
			if (reachedTopPoint())
    14c4:	18 16       	cp	r1, r24
    14c6:	19 06       	cpc	r1, r25
    14c8:	84 f1       	brlt	.+96     	; 0x152a <__vector_9+0x10e>
			{
				if (activeRollCycle >= rollCycleSet)	
    14ca:	80 91 04 01 	lds	r24, 0x0104
    14ce:	90 91 d6 00 	lds	r25, 0x00D6
    14d2:	89 17       	cp	r24, r25
    14d4:	28 f0       	brcs	.+10     	; 0x14e0 <__vector_9+0xc4>
				{
					// DONE!
					rollState &= ~ROLL_CYCLE;
    14d6:	4b 7f       	andi	r20, 0xFB	; 251
					rollState |= CYCLE_ROLL_DONE;
    14d8:	40 61       	ori	r20, 0x10	; 16
    14da:	40 93 c2 00 	sts	0x00C2, r20
    14de:	25 c0       	rjmp	.+74     	; 0x152a <__vector_9+0x10e>
				}
				else
				{
					activeRollCycle++;
    14e0:	8f 5f       	subi	r24, 0xFF	; 255
    14e2:	80 93 04 01 	sts	0x0104, r24
					// Change dir	
					newDirReq = ROLL_REV;				
    14e6:	82 e0       	ldi	r24, 0x02	; 2
    14e8:	80 93 c5 00 	sts	0x00C5, r24
    14ec:	1e c0       	rjmp	.+60     	; 0x152a <__vector_9+0x10e>
	return (	(int16_t)(topPoint - rollPoint) <= 0 );
}

static inline uint8_t reachedBottomPoint(void)
{
	return (	(int16_t)(rollPoint - bottomPoint) <= 0 );
    14ee:	80 91 c6 00 	lds	r24, 0x00C6
    14f2:	90 91 c7 00 	lds	r25, 0x00C7
    14f6:	20 91 c8 00 	lds	r18, 0x00C8
    14fa:	30 91 c9 00 	lds	r19, 0x00C9
    14fe:	82 1b       	sub	r24, r18
    1500:	93 0b       	sbc	r25, r19
				}
			}
			break;
		
		case (ROLL_REV | ROLL_CYCLE):	
			if (reachedBottomPoint())
    1502:	18 16       	cp	r1, r24
    1504:	19 06       	cpc	r1, r25
    1506:	8c f0       	brlt	.+34     	; 0x152a <__vector_9+0x10e>
			{
				if (activeRollCycle >= rollCycleSet)	
    1508:	80 91 04 01 	lds	r24, 0x0104
    150c:	90 91 d6 00 	lds	r25, 0x00D6
    1510:	89 17       	cp	r24, r25
    1512:	28 f0       	brcs	.+10     	; 0x151e <__vector_9+0x102>
				{
					// DONE!
					rollState &= ~ROLL_CYCLE;
    1514:	4b 7f       	andi	r20, 0xFB	; 251
					rollState |= CYCLE_ROLL_DONE;
    1516:	40 61       	ori	r20, 0x10	; 16
    1518:	40 93 c2 00 	sts	0x00C2, r20
    151c:	06 c0       	rjmp	.+12     	; 0x152a <__vector_9+0x10e>
				}
				else
				{
					activeRollCycle++;
    151e:	8f 5f       	subi	r24, 0xFF	; 255
    1520:	80 93 04 01 	sts	0x0104, r24
					// Change dir	
					newDirReq = ROLL_FWD;
    1524:	81 e0       	ldi	r24, 0x01	; 1
    1526:	80 93 c5 00 	sts	0x00C5, r24
		default:
			break;
	}
	
	// Process direction change
	if ((rollState ^ newDirReq) & (ROLL_FWD | ROLL_REV))
    152a:	80 91 c2 00 	lds	r24, 0x00C2
    152e:	90 91 c5 00 	lds	r25, 0x00C5
    1532:	29 2f       	mov	r18, r25
    1534:	28 27       	eor	r18, r24
    1536:	23 70       	andi	r18, 0x03	; 3
    1538:	19 f0       	breq	.+6      	; 0x1540 <__vector_9+0x124>
	{
		rollState |= (SKIP_CURRENT_MOTOR_CTRL | ROLL_DIR_CHANGED);
    153a:	88 62       	ori	r24, 0x28	; 40
    153c:	80 93 c2 00 	sts	0x00C2, r24
	}
	rollState &= ~(ROLL_FWD | ROLL_REV);
    1540:	80 91 c2 00 	lds	r24, 0x00C2
    1544:	8c 7f       	andi	r24, 0xFC	; 252
	rollState |= newDirReq;
    1546:	89 2b       	or	r24, r25
    1548:	80 93 c2 00 	sts	0x00C2, r24
	return (	(int16_t)(rollPoint - bottomPoint) <= 0 );
}

static inline void updateRollPoint(void)
{	
	if (rollState & ROLL_FWD)
    154c:	80 ff       	sbrs	r24, 0
    154e:	0a c0       	rjmp	.+20     	; 0x1564 <__vector_9+0x148>
		rollPoint++;
    1550:	80 91 c6 00 	lds	r24, 0x00C6
    1554:	90 91 c7 00 	lds	r25, 0x00C7
    1558:	01 96       	adiw	r24, 0x01	; 1
    155a:	90 93 c7 00 	sts	0x00C7, r25
    155e:	80 93 c6 00 	sts	0x00C6, r24
    1562:	0b c0       	rjmp	.+22     	; 0x157a <__vector_9+0x15e>
	else if (rollState & ROLL_REV)
    1564:	81 ff       	sbrs	r24, 1
    1566:	09 c0       	rjmp	.+18     	; 0x157a <__vector_9+0x15e>
		rollPoint--;	
    1568:	80 91 c6 00 	lds	r24, 0x00C6
    156c:	90 91 c7 00 	lds	r25, 0x00C7
    1570:	01 97       	sbiw	r24, 0x01	; 1
    1572:	90 93 c7 00 	sts	0x00C7, r25
    1576:	80 93 c6 00 	sts	0x00C6, r24
			controlRolling();
		}
			

		// Process heater control counter
		if (heater_cnt == HEATER_REGULATION_PERIODS - 1)
    157a:	80 91 cc 00 	lds	r24, 0x00CC
    157e:	89 30       	cpi	r24, 0x09	; 9
    1580:	61 f4       	brne	.+24     	; 0x159a <__vector_9+0x17e>
		{
			heater_cnt = 0;
    1582:	10 92 cc 00 	sts	0x00CC, r1
			ctrl_heater_sync = ctrl_heater;
    1586:	80 91 c4 00 	lds	r24, 0x00C4
    158a:	80 93 cd 00 	sts	0x00CD, r24
			heaterState |= READY_TO_UPDATE_HEATER;
    158e:	80 91 c3 00 	lds	r24, 0x00C3
    1592:	80 68       	ori	r24, 0x80	; 128
    1594:	80 93 c3 00 	sts	0x00C3, r24
    1598:	03 c0       	rjmp	.+6      	; 0x15a0 <__vector_9+0x184>
		}
		else
		{
			heater_cnt++;
    159a:	8f 5f       	subi	r24, 0xFF	; 255
    159c:	80 93 cc 00 	sts	0x00CC, r24
			
			
	}
	

	if ((p_state & STATE_MASK)  != 0x0F)
    15a0:	80 91 62 00 	lds	r24, 0x0062
    15a4:	98 2f       	mov	r25, r24
    15a6:	9f 70       	andi	r25, 0x0F	; 15
    15a8:	9f 30       	cpi	r25, 0x0F	; 15
    15aa:	19 f0       	breq	.+6      	; 0x15b2 <__vector_9+0x196>
		p_state++;
    15ac:	8f 5f       	subi	r24, 0xFF	; 255
    15ae:	80 93 62 00 	sts	0x0062, r24

}	
    15b2:	ff 91       	pop	r31
    15b4:	ef 91       	pop	r30
    15b6:	bf 91       	pop	r27
    15b8:	af 91       	pop	r26
    15ba:	9f 91       	pop	r25
    15bc:	8f 91       	pop	r24
    15be:	7f 91       	pop	r23
    15c0:	6f 91       	pop	r22
    15c2:	5f 91       	pop	r21
    15c4:	4f 91       	pop	r20
    15c6:	3f 91       	pop	r19
    15c8:	2f 91       	pop	r18
    15ca:	0f 90       	pop	r0
    15cc:	0f be       	out	0x3f, r0	; 63
    15ce:	0f 90       	pop	r0
    15d0:	1f 90       	pop	r1
    15d2:	18 95       	reti

000015d4 <processSoftTimer8b>:
 
 
 
 
 void processSoftTimer8b(SoftTimer8b_t *tmr)
 {
    15d4:	fc 01       	movw	r30, r24
	 uint8_t newTimerVal;

	 if (!tmr->Enabled)
    15d6:	80 81       	ld	r24, Z
    15d8:	80 ff       	sbrs	r24, 0
    15da:	29 c0       	rjmp	.+82     	; 0x162e <processSoftTimer8b+0x5a>
		return;
	 
	 tmr->FA_EQ = 0;
	 tmr->FA_GE = 0;
	 tmr->FTop = 0;
    15dc:	87 7e       	andi	r24, 0xE7	; 231
    15de:	8f 7d       	andi	r24, 0xDF	; 223
    15e0:	80 83       	st	Z, r24
	 
	 if (tmr->Timer >= tmr->Top)
    15e2:	81 81       	ldd	r24, Z+1	; 0x01
    15e4:	92 81       	ldd	r25, Z+2	; 0x02
    15e6:	89 17       	cp	r24, r25
    15e8:	58 f0       	brcs	.+22     	; 0x1600 <processSoftTimer8b+0x2c>
	 {
		 if (tmr->RunOnce)
    15ea:	90 81       	ld	r25, Z
    15ec:	91 ff       	sbrs	r25, 1
    15ee:	02 c0       	rjmp	.+4      	; 0x15f4 <processSoftTimer8b+0x20>
		 {
			 tmr->Enabled = 0;
    15f0:	9e 7f       	andi	r25, 0xFE	; 254
    15f2:	90 83       	st	Z, r25
		 }
		 tmr->FTop = 1;
    15f4:	90 81       	ld	r25, Z
		 tmr->FOvfl = 1;
    15f6:	90 62       	ori	r25, 0x20	; 32
    15f8:	90 64       	ori	r25, 0x40	; 64
    15fa:	90 83       	st	Z, r25
		 newTimerVal = 0;
    15fc:	20 e0       	ldi	r18, 0x00	; 0
    15fe:	02 c0       	rjmp	.+4      	; 0x1604 <processSoftTimer8b+0x30>
	 }
	 else
	 {
		 newTimerVal = tmr->Timer + 1;
    1600:	28 2f       	mov	r18, r24
    1602:	2f 5f       	subi	r18, 0xFF	; 255
	 }
	 
	 if (tmr->Timer == tmr->CompA)
    1604:	93 81       	ldd	r25, Z+3	; 0x03
    1606:	89 13       	cpse	r24, r25
    1608:	0c c0       	rjmp	.+24     	; 0x1622 <processSoftTimer8b+0x4e>
	 {
		 tmr->FA_EQ = 1;
    160a:	80 81       	ld	r24, Z
		 tmr->FA_GE = 1;
    160c:	88 60       	ori	r24, 0x08	; 8
    160e:	80 61       	ori	r24, 0x10	; 16
		 tmr->FA_TGL = !tmr->FA_TGL;
    1610:	82 fb       	bst	r24, 2
    1612:	33 27       	eor	r19, r19
    1614:	30 f9       	bld	r19, 0
    1616:	91 e0       	ldi	r25, 0x01	; 1
    1618:	93 27       	eor	r25, r19
    161a:	90 fb       	bst	r25, 0
    161c:	82 f9       	bld	r24, 2
    161e:	80 83       	st	Z, r24
    1620:	05 c0       	rjmp	.+10     	; 0x162c <processSoftTimer8b+0x58>
	 }
	 else if (tmr->Timer >= tmr->CompA)
    1622:	89 17       	cp	r24, r25
    1624:	18 f0       	brcs	.+6      	; 0x162c <processSoftTimer8b+0x58>
	 {
		 tmr->FA_GE = 1;
    1626:	80 81       	ld	r24, Z
    1628:	80 61       	ori	r24, 0x10	; 16
    162a:	80 83       	st	Z, r24
	 }
	 
	 tmr->Timer = newTimerVal; 
    162c:	21 83       	std	Z+1, r18	; 0x01
    162e:	08 95       	ret

00001630 <SetBeeperFreq>:
}

// Setup beeper frequency (Hz)
void SetBeeperFreq(uint16_t freq_hz)
{
	uint16_t period_us = 1000000 / freq_hz;
    1630:	9c 01       	movw	r18, r24
    1632:	40 e0       	ldi	r20, 0x00	; 0
    1634:	50 e0       	ldi	r21, 0x00	; 0
    1636:	60 e4       	ldi	r22, 0x40	; 64
    1638:	72 e4       	ldi	r23, 0x42	; 66
    163a:	8f e0       	ldi	r24, 0x0F	; 15
    163c:	90 e0       	ldi	r25, 0x00	; 0
    163e:	09 d2       	rcall	.+1042   	; 0x1a52 <__divmodsi4>
	if (period_us & 0xFFF8)
    1640:	da 01       	movw	r26, r20
    1642:	c9 01       	movw	r24, r18
    1644:	88 7f       	andi	r24, 0xF8	; 248
    1646:	aa 27       	eor	r26, r26
    1648:	bb 27       	eor	r27, r27
    164a:	89 2b       	or	r24, r25
    164c:	59 f0       	breq	.+22     	; 0x1664 <SetBeeperFreq+0x34>
		OCR1A = (period_us>>3) - 1;
    164e:	36 95       	lsr	r19
    1650:	27 95       	ror	r18
    1652:	36 95       	lsr	r19
    1654:	27 95       	ror	r18
    1656:	36 95       	lsr	r19
    1658:	27 95       	ror	r18
    165a:	21 50       	subi	r18, 0x01	; 1
    165c:	31 09       	sbc	r19, r1
    165e:	3b bd       	out	0x2b, r19	; 43
    1660:	2a bd       	out	0x2a, r18	; 42
    1662:	04 c0       	rjmp	.+8      	; 0x166c <SetBeeperFreq+0x3c>
	else
		OCR1A = 0x1;
    1664:	81 e0       	ldi	r24, 0x01	; 1
    1666:	90 e0       	ldi	r25, 0x00	; 0
    1668:	9b bd       	out	0x2b, r25	; 43
    166a:	8a bd       	out	0x2a, r24	; 42
	TCNT1 = 0;
    166c:	1d bc       	out	0x2d, r1	; 45
    166e:	1c bc       	out	0x2c, r1	; 44
    1670:	08 95       	ret

00001672 <StartBeep>:
}

// Beep for some time in ms
void StartBeep(uint16_t time_ms)
{
	if (sound_enable)
    1672:	20 91 d5 00 	lds	r18, 0x00D5
    1676:	22 23       	and	r18, r18
    1678:	39 f0       	breq	.+14     	; 0x1688 <StartBeep+0x16>
	{
		beep_cnt = time_ms;
    167a:	90 93 cf 00 	sts	0x00CF, r25
    167e:	80 93 ce 00 	sts	0x00CE, r24
// Enable / disable beeper output
inline void SetBeepOutput(uint8_t val)
{
	if (val)
		// Toggle OCR1A on compare match
		TCCR1A |= (1<<COM1A0);
    1682:	8f b5       	in	r24, 0x2f	; 47
    1684:	80 64       	ori	r24, 0x40	; 64
    1686:	8f bd       	out	0x2f, r24	; 47
    1688:	08 95       	ret

0000168a <__vector_3>:
}



ISR(TIMER2_COMP_vect)
{	
    168a:	1f 92       	push	r1
    168c:	0f 92       	push	r0
    168e:	0f b6       	in	r0, 0x3f	; 63
    1690:	0f 92       	push	r0
    1692:	11 24       	eor	r1, r1
    1694:	2f 93       	push	r18
    1696:	3f 93       	push	r19
    1698:	4f 93       	push	r20
    169a:	5f 93       	push	r21
    169c:	6f 93       	push	r22
    169e:	7f 93       	push	r23
    16a0:	8f 93       	push	r24
    16a2:	9f 93       	push	r25
    16a4:	af 93       	push	r26
    16a6:	bf 93       	push	r27
    16a8:	ef 93       	push	r30
    16aa:	ff 93       	push	r31
	// Manage beeper
	if (beep_cnt)
    16ac:	80 91 ce 00 	lds	r24, 0x00CE
    16b0:	90 91 cf 00 	lds	r25, 0x00CF
    16b4:	00 97       	sbiw	r24, 0x00	; 0
    16b6:	31 f0       	breq	.+12     	; 0x16c4 <__vector_3+0x3a>
		beep_cnt--;
    16b8:	01 97       	sbiw	r24, 0x01	; 1
    16ba:	90 93 cf 00 	sts	0x00CF, r25
    16be:	80 93 ce 00 	sts	0x00CE, r24
    16c2:	03 c0       	rjmp	.+6      	; 0x16ca <__vector_3+0x40>
	if (val)
		// Toggle OCR1A on compare match
		TCCR1A |= (1<<COM1A0);
	else
		// Disable OCR1A output
		TCCR1A &= ~(1<<COM1A0 | 1<<COM1A1);
    16c4:	8f b5       	in	r24, 0x2f	; 47
    16c6:	8f 73       	andi	r24, 0x3F	; 63
    16c8:	8f bd       	out	0x2f, r24	; 47
		beep_cnt--;
	else
		SetBeepOutput(0);	// done
	
	// Manage LED indicator
	processLedIndicator();
    16ca:	2e d8       	rcall	.-4004   	; 0x728 <processLedIndicator>
	
	// Process menu update timer
	processSoftTimer8b(&menuUpdateTimer);	
    16cc:	83 e6       	ldi	r24, 0x63	; 99
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	81 df       	rcall	.-254    	; 0x15d4 <processSoftTimer8b>
	
	
	// Start ADC conversion
	ADCSRA |= (1<<ADSC);
    16d2:	36 9a       	sbi	0x06, 6	; 6
	
		
}
    16d4:	ff 91       	pop	r31
    16d6:	ef 91       	pop	r30
    16d8:	bf 91       	pop	r27
    16da:	af 91       	pop	r26
    16dc:	9f 91       	pop	r25
    16de:	8f 91       	pop	r24
    16e0:	7f 91       	pop	r23
    16e2:	6f 91       	pop	r22
    16e4:	5f 91       	pop	r21
    16e6:	4f 91       	pop	r20
    16e8:	3f 91       	pop	r19
    16ea:	2f 91       	pop	r18
    16ec:	0f 90       	pop	r0
    16ee:	0f be       	out	0x3f, r0	; 63
    16f0:	0f 90       	pop	r0
    16f2:	1f 90       	pop	r1
    16f4:	18 95       	reti

000016f6 <USART_send>:



void USART_send( uint8_t data )
{
	UCSRA |= (1<<TXC);                 // Clear flag
    16f6:	5e 9a       	sbi	0x0b, 6	; 11
	UDR = data;
    16f8:	8c b9       	out	0x0c, r24	; 12
	while ( !(UCSRA & (1<<TXC)) );  // Wait
    16fa:	5e 9b       	sbis	0x0b, 6	; 11
    16fc:	fe cf       	rjmp	.-4      	; 0x16fa <USART_send+0x4>
}
    16fe:	08 95       	ret

00001700 <USART_sendstr>:


void USART_sendstr(char* str)
{
    1700:	1f 93       	push	r17
    1702:	cf 93       	push	r28
    1704:	df 93       	push	r29
    1706:	ec 01       	movw	r28, r24
	uint8_t i = 0;
	while (str[i])
    1708:	88 81       	ld	r24, Y
    170a:	88 23       	and	r24, r24
    170c:	49 f0       	breq	.+18     	; 0x1720 <USART_sendstr+0x20>
}


void USART_sendstr(char* str)
{
	uint8_t i = 0;
    170e:	10 e0       	ldi	r17, 0x00	; 0
	while (str[i])
	{
		USART_send(str[i++]);
    1710:	1f 5f       	subi	r17, 0xFF	; 255
    1712:	f1 df       	rcall	.-30     	; 0x16f6 <USART_send>


void USART_sendstr(char* str)
{
	uint8_t i = 0;
	while (str[i])
    1714:	fe 01       	movw	r30, r28
    1716:	e1 0f       	add	r30, r17
    1718:	f1 1d       	adc	r31, r1
    171a:	80 81       	ld	r24, Z
    171c:	81 11       	cpse	r24, r1
    171e:	f8 cf       	rjmp	.-16     	; 0x1710 <USART_sendstr+0x10>
	{
		USART_send(str[i++]);
	}
}
    1720:	df 91       	pop	r29
    1722:	cf 91       	pop	r28
    1724:	1f 91       	pop	r17
    1726:	08 95       	ret

00001728 <__subsf3>:
    1728:	50 58       	subi	r21, 0x80	; 128

0000172a <__addsf3>:
    172a:	bb 27       	eor	r27, r27
    172c:	aa 27       	eor	r26, r26
    172e:	0e d0       	rcall	.+28     	; 0x174c <__addsf3x>
    1730:	e0 c0       	rjmp	.+448    	; 0x18f2 <__fp_round>
    1732:	d1 d0       	rcall	.+418    	; 0x18d6 <__fp_pscA>
    1734:	30 f0       	brcs	.+12     	; 0x1742 <__addsf3+0x18>
    1736:	d6 d0       	rcall	.+428    	; 0x18e4 <__fp_pscB>
    1738:	20 f0       	brcs	.+8      	; 0x1742 <__addsf3+0x18>
    173a:	31 f4       	brne	.+12     	; 0x1748 <__addsf3+0x1e>
    173c:	9f 3f       	cpi	r25, 0xFF	; 255
    173e:	11 f4       	brne	.+4      	; 0x1744 <__addsf3+0x1a>
    1740:	1e f4       	brtc	.+6      	; 0x1748 <__addsf3+0x1e>
    1742:	c6 c0       	rjmp	.+396    	; 0x18d0 <__fp_nan>
    1744:	0e f4       	brtc	.+2      	; 0x1748 <__addsf3+0x1e>
    1746:	e0 95       	com	r30
    1748:	e7 fb       	bst	r30, 7
    174a:	bc c0       	rjmp	.+376    	; 0x18c4 <__fp_inf>

0000174c <__addsf3x>:
    174c:	e9 2f       	mov	r30, r25
    174e:	e2 d0       	rcall	.+452    	; 0x1914 <__fp_split3>
    1750:	80 f3       	brcs	.-32     	; 0x1732 <__addsf3+0x8>
    1752:	ba 17       	cp	r27, r26
    1754:	62 07       	cpc	r22, r18
    1756:	73 07       	cpc	r23, r19
    1758:	84 07       	cpc	r24, r20
    175a:	95 07       	cpc	r25, r21
    175c:	18 f0       	brcs	.+6      	; 0x1764 <__addsf3x+0x18>
    175e:	71 f4       	brne	.+28     	; 0x177c <__addsf3x+0x30>
    1760:	9e f5       	brtc	.+102    	; 0x17c8 <__addsf3x+0x7c>
    1762:	fa c0       	rjmp	.+500    	; 0x1958 <__fp_zero>
    1764:	0e f4       	brtc	.+2      	; 0x1768 <__addsf3x+0x1c>
    1766:	e0 95       	com	r30
    1768:	0b 2e       	mov	r0, r27
    176a:	ba 2f       	mov	r27, r26
    176c:	a0 2d       	mov	r26, r0
    176e:	0b 01       	movw	r0, r22
    1770:	b9 01       	movw	r22, r18
    1772:	90 01       	movw	r18, r0
    1774:	0c 01       	movw	r0, r24
    1776:	ca 01       	movw	r24, r20
    1778:	a0 01       	movw	r20, r0
    177a:	11 24       	eor	r1, r1
    177c:	ff 27       	eor	r31, r31
    177e:	59 1b       	sub	r21, r25
    1780:	99 f0       	breq	.+38     	; 0x17a8 <__addsf3x+0x5c>
    1782:	59 3f       	cpi	r21, 0xF9	; 249
    1784:	50 f4       	brcc	.+20     	; 0x179a <__addsf3x+0x4e>
    1786:	50 3e       	cpi	r21, 0xE0	; 224
    1788:	68 f1       	brcs	.+90     	; 0x17e4 <__addsf3x+0x98>
    178a:	1a 16       	cp	r1, r26
    178c:	f0 40       	sbci	r31, 0x00	; 0
    178e:	a2 2f       	mov	r26, r18
    1790:	23 2f       	mov	r18, r19
    1792:	34 2f       	mov	r19, r20
    1794:	44 27       	eor	r20, r20
    1796:	58 5f       	subi	r21, 0xF8	; 248
    1798:	f3 cf       	rjmp	.-26     	; 0x1780 <__addsf3x+0x34>
    179a:	46 95       	lsr	r20
    179c:	37 95       	ror	r19
    179e:	27 95       	ror	r18
    17a0:	a7 95       	ror	r26
    17a2:	f0 40       	sbci	r31, 0x00	; 0
    17a4:	53 95       	inc	r21
    17a6:	c9 f7       	brne	.-14     	; 0x179a <__addsf3x+0x4e>
    17a8:	7e f4       	brtc	.+30     	; 0x17c8 <__addsf3x+0x7c>
    17aa:	1f 16       	cp	r1, r31
    17ac:	ba 0b       	sbc	r27, r26
    17ae:	62 0b       	sbc	r22, r18
    17b0:	73 0b       	sbc	r23, r19
    17b2:	84 0b       	sbc	r24, r20
    17b4:	ba f0       	brmi	.+46     	; 0x17e4 <__addsf3x+0x98>
    17b6:	91 50       	subi	r25, 0x01	; 1
    17b8:	a1 f0       	breq	.+40     	; 0x17e2 <__addsf3x+0x96>
    17ba:	ff 0f       	add	r31, r31
    17bc:	bb 1f       	adc	r27, r27
    17be:	66 1f       	adc	r22, r22
    17c0:	77 1f       	adc	r23, r23
    17c2:	88 1f       	adc	r24, r24
    17c4:	c2 f7       	brpl	.-16     	; 0x17b6 <__addsf3x+0x6a>
    17c6:	0e c0       	rjmp	.+28     	; 0x17e4 <__addsf3x+0x98>
    17c8:	ba 0f       	add	r27, r26
    17ca:	62 1f       	adc	r22, r18
    17cc:	73 1f       	adc	r23, r19
    17ce:	84 1f       	adc	r24, r20
    17d0:	48 f4       	brcc	.+18     	; 0x17e4 <__addsf3x+0x98>
    17d2:	87 95       	ror	r24
    17d4:	77 95       	ror	r23
    17d6:	67 95       	ror	r22
    17d8:	b7 95       	ror	r27
    17da:	f7 95       	ror	r31
    17dc:	9e 3f       	cpi	r25, 0xFE	; 254
    17de:	08 f0       	brcs	.+2      	; 0x17e2 <__addsf3x+0x96>
    17e0:	b3 cf       	rjmp	.-154    	; 0x1748 <__addsf3+0x1e>
    17e2:	93 95       	inc	r25
    17e4:	88 0f       	add	r24, r24
    17e6:	08 f0       	brcs	.+2      	; 0x17ea <__addsf3x+0x9e>
    17e8:	99 27       	eor	r25, r25
    17ea:	ee 0f       	add	r30, r30
    17ec:	97 95       	ror	r25
    17ee:	87 95       	ror	r24
    17f0:	08 95       	ret

000017f2 <__fixunssfsi>:
    17f2:	98 d0       	rcall	.+304    	; 0x1924 <__fp_splitA>
    17f4:	88 f0       	brcs	.+34     	; 0x1818 <__fixunssfsi+0x26>
    17f6:	9f 57       	subi	r25, 0x7F	; 127
    17f8:	90 f0       	brcs	.+36     	; 0x181e <__fixunssfsi+0x2c>
    17fa:	b9 2f       	mov	r27, r25
    17fc:	99 27       	eor	r25, r25
    17fe:	b7 51       	subi	r27, 0x17	; 23
    1800:	a0 f0       	brcs	.+40     	; 0x182a <__fixunssfsi+0x38>
    1802:	d1 f0       	breq	.+52     	; 0x1838 <__fixunssfsi+0x46>
    1804:	66 0f       	add	r22, r22
    1806:	77 1f       	adc	r23, r23
    1808:	88 1f       	adc	r24, r24
    180a:	99 1f       	adc	r25, r25
    180c:	1a f0       	brmi	.+6      	; 0x1814 <__fixunssfsi+0x22>
    180e:	ba 95       	dec	r27
    1810:	c9 f7       	brne	.-14     	; 0x1804 <__fixunssfsi+0x12>
    1812:	12 c0       	rjmp	.+36     	; 0x1838 <__fixunssfsi+0x46>
    1814:	b1 30       	cpi	r27, 0x01	; 1
    1816:	81 f0       	breq	.+32     	; 0x1838 <__fixunssfsi+0x46>
    1818:	9f d0       	rcall	.+318    	; 0x1958 <__fp_zero>
    181a:	b1 e0       	ldi	r27, 0x01	; 1
    181c:	08 95       	ret
    181e:	9c c0       	rjmp	.+312    	; 0x1958 <__fp_zero>
    1820:	67 2f       	mov	r22, r23
    1822:	78 2f       	mov	r23, r24
    1824:	88 27       	eor	r24, r24
    1826:	b8 5f       	subi	r27, 0xF8	; 248
    1828:	39 f0       	breq	.+14     	; 0x1838 <__fixunssfsi+0x46>
    182a:	b9 3f       	cpi	r27, 0xF9	; 249
    182c:	cc f3       	brlt	.-14     	; 0x1820 <__fixunssfsi+0x2e>
    182e:	86 95       	lsr	r24
    1830:	77 95       	ror	r23
    1832:	67 95       	ror	r22
    1834:	b3 95       	inc	r27
    1836:	d9 f7       	brne	.-10     	; 0x182e <__fixunssfsi+0x3c>
    1838:	3e f4       	brtc	.+14     	; 0x1848 <__fixunssfsi+0x56>
    183a:	90 95       	com	r25
    183c:	80 95       	com	r24
    183e:	70 95       	com	r23
    1840:	61 95       	neg	r22
    1842:	7f 4f       	sbci	r23, 0xFF	; 255
    1844:	8f 4f       	sbci	r24, 0xFF	; 255
    1846:	9f 4f       	sbci	r25, 0xFF	; 255
    1848:	08 95       	ret

0000184a <__floatunsisf>:
    184a:	e8 94       	clt
    184c:	09 c0       	rjmp	.+18     	; 0x1860 <__floatsisf+0x12>

0000184e <__floatsisf>:
    184e:	97 fb       	bst	r25, 7
    1850:	3e f4       	brtc	.+14     	; 0x1860 <__floatsisf+0x12>
    1852:	90 95       	com	r25
    1854:	80 95       	com	r24
    1856:	70 95       	com	r23
    1858:	61 95       	neg	r22
    185a:	7f 4f       	sbci	r23, 0xFF	; 255
    185c:	8f 4f       	sbci	r24, 0xFF	; 255
    185e:	9f 4f       	sbci	r25, 0xFF	; 255
    1860:	99 23       	and	r25, r25
    1862:	a9 f0       	breq	.+42     	; 0x188e <__floatsisf+0x40>
    1864:	f9 2f       	mov	r31, r25
    1866:	96 e9       	ldi	r25, 0x96	; 150
    1868:	bb 27       	eor	r27, r27
    186a:	93 95       	inc	r25
    186c:	f6 95       	lsr	r31
    186e:	87 95       	ror	r24
    1870:	77 95       	ror	r23
    1872:	67 95       	ror	r22
    1874:	b7 95       	ror	r27
    1876:	f1 11       	cpse	r31, r1
    1878:	f8 cf       	rjmp	.-16     	; 0x186a <__floatsisf+0x1c>
    187a:	fa f4       	brpl	.+62     	; 0x18ba <__floatsisf+0x6c>
    187c:	bb 0f       	add	r27, r27
    187e:	11 f4       	brne	.+4      	; 0x1884 <__floatsisf+0x36>
    1880:	60 ff       	sbrs	r22, 0
    1882:	1b c0       	rjmp	.+54     	; 0x18ba <__floatsisf+0x6c>
    1884:	6f 5f       	subi	r22, 0xFF	; 255
    1886:	7f 4f       	sbci	r23, 0xFF	; 255
    1888:	8f 4f       	sbci	r24, 0xFF	; 255
    188a:	9f 4f       	sbci	r25, 0xFF	; 255
    188c:	16 c0       	rjmp	.+44     	; 0x18ba <__floatsisf+0x6c>
    188e:	88 23       	and	r24, r24
    1890:	11 f0       	breq	.+4      	; 0x1896 <__floatsisf+0x48>
    1892:	96 e9       	ldi	r25, 0x96	; 150
    1894:	11 c0       	rjmp	.+34     	; 0x18b8 <__floatsisf+0x6a>
    1896:	77 23       	and	r23, r23
    1898:	21 f0       	breq	.+8      	; 0x18a2 <__floatsisf+0x54>
    189a:	9e e8       	ldi	r25, 0x8E	; 142
    189c:	87 2f       	mov	r24, r23
    189e:	76 2f       	mov	r23, r22
    18a0:	05 c0       	rjmp	.+10     	; 0x18ac <__floatsisf+0x5e>
    18a2:	66 23       	and	r22, r22
    18a4:	71 f0       	breq	.+28     	; 0x18c2 <__floatsisf+0x74>
    18a6:	96 e8       	ldi	r25, 0x86	; 134
    18a8:	86 2f       	mov	r24, r22
    18aa:	70 e0       	ldi	r23, 0x00	; 0
    18ac:	60 e0       	ldi	r22, 0x00	; 0
    18ae:	2a f0       	brmi	.+10     	; 0x18ba <__floatsisf+0x6c>
    18b0:	9a 95       	dec	r25
    18b2:	66 0f       	add	r22, r22
    18b4:	77 1f       	adc	r23, r23
    18b6:	88 1f       	adc	r24, r24
    18b8:	da f7       	brpl	.-10     	; 0x18b0 <__floatsisf+0x62>
    18ba:	88 0f       	add	r24, r24
    18bc:	96 95       	lsr	r25
    18be:	87 95       	ror	r24
    18c0:	97 f9       	bld	r25, 7
    18c2:	08 95       	ret

000018c4 <__fp_inf>:
    18c4:	97 f9       	bld	r25, 7
    18c6:	9f 67       	ori	r25, 0x7F	; 127
    18c8:	80 e8       	ldi	r24, 0x80	; 128
    18ca:	70 e0       	ldi	r23, 0x00	; 0
    18cc:	60 e0       	ldi	r22, 0x00	; 0
    18ce:	08 95       	ret

000018d0 <__fp_nan>:
    18d0:	9f ef       	ldi	r25, 0xFF	; 255
    18d2:	80 ec       	ldi	r24, 0xC0	; 192
    18d4:	08 95       	ret

000018d6 <__fp_pscA>:
    18d6:	00 24       	eor	r0, r0
    18d8:	0a 94       	dec	r0
    18da:	16 16       	cp	r1, r22
    18dc:	17 06       	cpc	r1, r23
    18de:	18 06       	cpc	r1, r24
    18e0:	09 06       	cpc	r0, r25
    18e2:	08 95       	ret

000018e4 <__fp_pscB>:
    18e4:	00 24       	eor	r0, r0
    18e6:	0a 94       	dec	r0
    18e8:	12 16       	cp	r1, r18
    18ea:	13 06       	cpc	r1, r19
    18ec:	14 06       	cpc	r1, r20
    18ee:	05 06       	cpc	r0, r21
    18f0:	08 95       	ret

000018f2 <__fp_round>:
    18f2:	09 2e       	mov	r0, r25
    18f4:	03 94       	inc	r0
    18f6:	00 0c       	add	r0, r0
    18f8:	11 f4       	brne	.+4      	; 0x18fe <__fp_round+0xc>
    18fa:	88 23       	and	r24, r24
    18fc:	52 f0       	brmi	.+20     	; 0x1912 <__fp_round+0x20>
    18fe:	bb 0f       	add	r27, r27
    1900:	40 f4       	brcc	.+16     	; 0x1912 <__fp_round+0x20>
    1902:	bf 2b       	or	r27, r31
    1904:	11 f4       	brne	.+4      	; 0x190a <__fp_round+0x18>
    1906:	60 ff       	sbrs	r22, 0
    1908:	04 c0       	rjmp	.+8      	; 0x1912 <__fp_round+0x20>
    190a:	6f 5f       	subi	r22, 0xFF	; 255
    190c:	7f 4f       	sbci	r23, 0xFF	; 255
    190e:	8f 4f       	sbci	r24, 0xFF	; 255
    1910:	9f 4f       	sbci	r25, 0xFF	; 255
    1912:	08 95       	ret

00001914 <__fp_split3>:
    1914:	57 fd       	sbrc	r21, 7
    1916:	90 58       	subi	r25, 0x80	; 128
    1918:	44 0f       	add	r20, r20
    191a:	55 1f       	adc	r21, r21
    191c:	59 f0       	breq	.+22     	; 0x1934 <__fp_splitA+0x10>
    191e:	5f 3f       	cpi	r21, 0xFF	; 255
    1920:	71 f0       	breq	.+28     	; 0x193e <__fp_splitA+0x1a>
    1922:	47 95       	ror	r20

00001924 <__fp_splitA>:
    1924:	88 0f       	add	r24, r24
    1926:	97 fb       	bst	r25, 7
    1928:	99 1f       	adc	r25, r25
    192a:	61 f0       	breq	.+24     	; 0x1944 <__fp_splitA+0x20>
    192c:	9f 3f       	cpi	r25, 0xFF	; 255
    192e:	79 f0       	breq	.+30     	; 0x194e <__fp_splitA+0x2a>
    1930:	87 95       	ror	r24
    1932:	08 95       	ret
    1934:	12 16       	cp	r1, r18
    1936:	13 06       	cpc	r1, r19
    1938:	14 06       	cpc	r1, r20
    193a:	55 1f       	adc	r21, r21
    193c:	f2 cf       	rjmp	.-28     	; 0x1922 <__fp_split3+0xe>
    193e:	46 95       	lsr	r20
    1940:	f1 df       	rcall	.-30     	; 0x1924 <__fp_splitA>
    1942:	08 c0       	rjmp	.+16     	; 0x1954 <__fp_splitA+0x30>
    1944:	16 16       	cp	r1, r22
    1946:	17 06       	cpc	r1, r23
    1948:	18 06       	cpc	r1, r24
    194a:	99 1f       	adc	r25, r25
    194c:	f1 cf       	rjmp	.-30     	; 0x1930 <__fp_splitA+0xc>
    194e:	86 95       	lsr	r24
    1950:	71 05       	cpc	r23, r1
    1952:	61 05       	cpc	r22, r1
    1954:	08 94       	sec
    1956:	08 95       	ret

00001958 <__fp_zero>:
    1958:	e8 94       	clt

0000195a <__fp_szero>:
    195a:	bb 27       	eor	r27, r27
    195c:	66 27       	eor	r22, r22
    195e:	77 27       	eor	r23, r23
    1960:	cb 01       	movw	r24, r22
    1962:	97 f9       	bld	r25, 7
    1964:	08 95       	ret

00001966 <__mulsf3>:
    1966:	0b d0       	rcall	.+22     	; 0x197e <__mulsf3x>
    1968:	c4 cf       	rjmp	.-120    	; 0x18f2 <__fp_round>
    196a:	b5 df       	rcall	.-150    	; 0x18d6 <__fp_pscA>
    196c:	28 f0       	brcs	.+10     	; 0x1978 <__mulsf3+0x12>
    196e:	ba df       	rcall	.-140    	; 0x18e4 <__fp_pscB>
    1970:	18 f0       	brcs	.+6      	; 0x1978 <__mulsf3+0x12>
    1972:	95 23       	and	r25, r21
    1974:	09 f0       	breq	.+2      	; 0x1978 <__mulsf3+0x12>
    1976:	a6 cf       	rjmp	.-180    	; 0x18c4 <__fp_inf>
    1978:	ab cf       	rjmp	.-170    	; 0x18d0 <__fp_nan>
    197a:	11 24       	eor	r1, r1
    197c:	ee cf       	rjmp	.-36     	; 0x195a <__fp_szero>

0000197e <__mulsf3x>:
    197e:	ca df       	rcall	.-108    	; 0x1914 <__fp_split3>
    1980:	a0 f3       	brcs	.-24     	; 0x196a <__mulsf3+0x4>

00001982 <__mulsf3_pse>:
    1982:	95 9f       	mul	r25, r21
    1984:	d1 f3       	breq	.-12     	; 0x197a <__mulsf3+0x14>
    1986:	95 0f       	add	r25, r21
    1988:	50 e0       	ldi	r21, 0x00	; 0
    198a:	55 1f       	adc	r21, r21
    198c:	62 9f       	mul	r22, r18
    198e:	f0 01       	movw	r30, r0
    1990:	72 9f       	mul	r23, r18
    1992:	bb 27       	eor	r27, r27
    1994:	f0 0d       	add	r31, r0
    1996:	b1 1d       	adc	r27, r1
    1998:	63 9f       	mul	r22, r19
    199a:	aa 27       	eor	r26, r26
    199c:	f0 0d       	add	r31, r0
    199e:	b1 1d       	adc	r27, r1
    19a0:	aa 1f       	adc	r26, r26
    19a2:	64 9f       	mul	r22, r20
    19a4:	66 27       	eor	r22, r22
    19a6:	b0 0d       	add	r27, r0
    19a8:	a1 1d       	adc	r26, r1
    19aa:	66 1f       	adc	r22, r22
    19ac:	82 9f       	mul	r24, r18
    19ae:	22 27       	eor	r18, r18
    19b0:	b0 0d       	add	r27, r0
    19b2:	a1 1d       	adc	r26, r1
    19b4:	62 1f       	adc	r22, r18
    19b6:	73 9f       	mul	r23, r19
    19b8:	b0 0d       	add	r27, r0
    19ba:	a1 1d       	adc	r26, r1
    19bc:	62 1f       	adc	r22, r18
    19be:	83 9f       	mul	r24, r19
    19c0:	a0 0d       	add	r26, r0
    19c2:	61 1d       	adc	r22, r1
    19c4:	22 1f       	adc	r18, r18
    19c6:	74 9f       	mul	r23, r20
    19c8:	33 27       	eor	r19, r19
    19ca:	a0 0d       	add	r26, r0
    19cc:	61 1d       	adc	r22, r1
    19ce:	23 1f       	adc	r18, r19
    19d0:	84 9f       	mul	r24, r20
    19d2:	60 0d       	add	r22, r0
    19d4:	21 1d       	adc	r18, r1
    19d6:	82 2f       	mov	r24, r18
    19d8:	76 2f       	mov	r23, r22
    19da:	6a 2f       	mov	r22, r26
    19dc:	11 24       	eor	r1, r1
    19de:	9f 57       	subi	r25, 0x7F	; 127
    19e0:	50 40       	sbci	r21, 0x00	; 0
    19e2:	8a f0       	brmi	.+34     	; 0x1a06 <__mulsf3_pse+0x84>
    19e4:	e1 f0       	breq	.+56     	; 0x1a1e <__mulsf3_pse+0x9c>
    19e6:	88 23       	and	r24, r24
    19e8:	4a f0       	brmi	.+18     	; 0x19fc <__mulsf3_pse+0x7a>
    19ea:	ee 0f       	add	r30, r30
    19ec:	ff 1f       	adc	r31, r31
    19ee:	bb 1f       	adc	r27, r27
    19f0:	66 1f       	adc	r22, r22
    19f2:	77 1f       	adc	r23, r23
    19f4:	88 1f       	adc	r24, r24
    19f6:	91 50       	subi	r25, 0x01	; 1
    19f8:	50 40       	sbci	r21, 0x00	; 0
    19fa:	a9 f7       	brne	.-22     	; 0x19e6 <__mulsf3_pse+0x64>
    19fc:	9e 3f       	cpi	r25, 0xFE	; 254
    19fe:	51 05       	cpc	r21, r1
    1a00:	70 f0       	brcs	.+28     	; 0x1a1e <__mulsf3_pse+0x9c>
    1a02:	60 cf       	rjmp	.-320    	; 0x18c4 <__fp_inf>
    1a04:	aa cf       	rjmp	.-172    	; 0x195a <__fp_szero>
    1a06:	5f 3f       	cpi	r21, 0xFF	; 255
    1a08:	ec f3       	brlt	.-6      	; 0x1a04 <__mulsf3_pse+0x82>
    1a0a:	98 3e       	cpi	r25, 0xE8	; 232
    1a0c:	dc f3       	brlt	.-10     	; 0x1a04 <__mulsf3_pse+0x82>
    1a0e:	86 95       	lsr	r24
    1a10:	77 95       	ror	r23
    1a12:	67 95       	ror	r22
    1a14:	b7 95       	ror	r27
    1a16:	f7 95       	ror	r31
    1a18:	e7 95       	ror	r30
    1a1a:	9f 5f       	subi	r25, 0xFF	; 255
    1a1c:	c1 f7       	brne	.-16     	; 0x1a0e <__mulsf3_pse+0x8c>
    1a1e:	fe 2b       	or	r31, r30
    1a20:	88 0f       	add	r24, r24
    1a22:	91 1d       	adc	r25, r1
    1a24:	96 95       	lsr	r25
    1a26:	87 95       	ror	r24
    1a28:	97 f9       	bld	r25, 7
    1a2a:	08 95       	ret

00001a2c <__divmodhi4>:
    1a2c:	97 fb       	bst	r25, 7
    1a2e:	07 2e       	mov	r0, r23
    1a30:	16 f4       	brtc	.+4      	; 0x1a36 <__divmodhi4+0xa>
    1a32:	00 94       	com	r0
    1a34:	06 d0       	rcall	.+12     	; 0x1a42 <__divmodhi4_neg1>
    1a36:	77 fd       	sbrc	r23, 7
    1a38:	08 d0       	rcall	.+16     	; 0x1a4a <__divmodhi4_neg2>
    1a3a:	32 d0       	rcall	.+100    	; 0x1aa0 <__udivmodhi4>
    1a3c:	07 fc       	sbrc	r0, 7
    1a3e:	05 d0       	rcall	.+10     	; 0x1a4a <__divmodhi4_neg2>
    1a40:	3e f4       	brtc	.+14     	; 0x1a50 <__divmodhi4_exit>

00001a42 <__divmodhi4_neg1>:
    1a42:	90 95       	com	r25
    1a44:	81 95       	neg	r24
    1a46:	9f 4f       	sbci	r25, 0xFF	; 255
    1a48:	08 95       	ret

00001a4a <__divmodhi4_neg2>:
    1a4a:	70 95       	com	r23
    1a4c:	61 95       	neg	r22
    1a4e:	7f 4f       	sbci	r23, 0xFF	; 255

00001a50 <__divmodhi4_exit>:
    1a50:	08 95       	ret

00001a52 <__divmodsi4>:
    1a52:	05 2e       	mov	r0, r21
    1a54:	97 fb       	bst	r25, 7
    1a56:	16 f4       	brtc	.+4      	; 0x1a5c <__divmodsi4+0xa>
    1a58:	00 94       	com	r0
    1a5a:	06 d0       	rcall	.+12     	; 0x1a68 <__divmodsi4_neg1>
    1a5c:	57 fd       	sbrc	r21, 7
    1a5e:	0c d0       	rcall	.+24     	; 0x1a78 <__divmodsi4_neg2>
    1a60:	33 d0       	rcall	.+102    	; 0x1ac8 <__udivmodsi4>
    1a62:	07 fc       	sbrc	r0, 7
    1a64:	09 d0       	rcall	.+18     	; 0x1a78 <__divmodsi4_neg2>
    1a66:	7e f4       	brtc	.+30     	; 0x1a86 <__divmodsi4_exit>

00001a68 <__divmodsi4_neg1>:
    1a68:	90 95       	com	r25
    1a6a:	80 95       	com	r24
    1a6c:	70 95       	com	r23
    1a6e:	61 95       	neg	r22
    1a70:	7f 4f       	sbci	r23, 0xFF	; 255
    1a72:	8f 4f       	sbci	r24, 0xFF	; 255
    1a74:	9f 4f       	sbci	r25, 0xFF	; 255
    1a76:	08 95       	ret

00001a78 <__divmodsi4_neg2>:
    1a78:	50 95       	com	r21
    1a7a:	40 95       	com	r20
    1a7c:	30 95       	com	r19
    1a7e:	21 95       	neg	r18
    1a80:	3f 4f       	sbci	r19, 0xFF	; 255
    1a82:	4f 4f       	sbci	r20, 0xFF	; 255
    1a84:	5f 4f       	sbci	r21, 0xFF	; 255

00001a86 <__divmodsi4_exit>:
    1a86:	08 95       	ret

00001a88 <__umulhisi3>:
    1a88:	a2 9f       	mul	r26, r18
    1a8a:	b0 01       	movw	r22, r0
    1a8c:	b3 9f       	mul	r27, r19
    1a8e:	c0 01       	movw	r24, r0
    1a90:	a3 9f       	mul	r26, r19
    1a92:	01 d0       	rcall	.+2      	; 0x1a96 <__umulhisi3+0xe>
    1a94:	b2 9f       	mul	r27, r18
    1a96:	70 0d       	add	r23, r0
    1a98:	81 1d       	adc	r24, r1
    1a9a:	11 24       	eor	r1, r1
    1a9c:	91 1d       	adc	r25, r1
    1a9e:	08 95       	ret

00001aa0 <__udivmodhi4>:
    1aa0:	aa 1b       	sub	r26, r26
    1aa2:	bb 1b       	sub	r27, r27
    1aa4:	51 e1       	ldi	r21, 0x11	; 17
    1aa6:	07 c0       	rjmp	.+14     	; 0x1ab6 <__udivmodhi4_ep>

00001aa8 <__udivmodhi4_loop>:
    1aa8:	aa 1f       	adc	r26, r26
    1aaa:	bb 1f       	adc	r27, r27
    1aac:	a6 17       	cp	r26, r22
    1aae:	b7 07       	cpc	r27, r23
    1ab0:	10 f0       	brcs	.+4      	; 0x1ab6 <__udivmodhi4_ep>
    1ab2:	a6 1b       	sub	r26, r22
    1ab4:	b7 0b       	sbc	r27, r23

00001ab6 <__udivmodhi4_ep>:
    1ab6:	88 1f       	adc	r24, r24
    1ab8:	99 1f       	adc	r25, r25
    1aba:	5a 95       	dec	r21
    1abc:	a9 f7       	brne	.-22     	; 0x1aa8 <__udivmodhi4_loop>
    1abe:	80 95       	com	r24
    1ac0:	90 95       	com	r25
    1ac2:	bc 01       	movw	r22, r24
    1ac4:	cd 01       	movw	r24, r26
    1ac6:	08 95       	ret

00001ac8 <__udivmodsi4>:
    1ac8:	a1 e2       	ldi	r26, 0x21	; 33
    1aca:	1a 2e       	mov	r1, r26
    1acc:	aa 1b       	sub	r26, r26
    1ace:	bb 1b       	sub	r27, r27
    1ad0:	fd 01       	movw	r30, r26
    1ad2:	0d c0       	rjmp	.+26     	; 0x1aee <__udivmodsi4_ep>

00001ad4 <__udivmodsi4_loop>:
    1ad4:	aa 1f       	adc	r26, r26
    1ad6:	bb 1f       	adc	r27, r27
    1ad8:	ee 1f       	adc	r30, r30
    1ada:	ff 1f       	adc	r31, r31
    1adc:	a2 17       	cp	r26, r18
    1ade:	b3 07       	cpc	r27, r19
    1ae0:	e4 07       	cpc	r30, r20
    1ae2:	f5 07       	cpc	r31, r21
    1ae4:	20 f0       	brcs	.+8      	; 0x1aee <__udivmodsi4_ep>
    1ae6:	a2 1b       	sub	r26, r18
    1ae8:	b3 0b       	sbc	r27, r19
    1aea:	e4 0b       	sbc	r30, r20
    1aec:	f5 0b       	sbc	r31, r21

00001aee <__udivmodsi4_ep>:
    1aee:	66 1f       	adc	r22, r22
    1af0:	77 1f       	adc	r23, r23
    1af2:	88 1f       	adc	r24, r24
    1af4:	99 1f       	adc	r25, r25
    1af6:	1a 94       	dec	r1
    1af8:	69 f7       	brne	.-38     	; 0x1ad4 <__udivmodsi4_loop>
    1afa:	60 95       	com	r22
    1afc:	70 95       	com	r23
    1afe:	80 95       	com	r24
    1b00:	90 95       	com	r25
    1b02:	9b 01       	movw	r18, r22
    1b04:	ac 01       	movw	r20, r24
    1b06:	bd 01       	movw	r22, r26
    1b08:	cf 01       	movw	r24, r30
    1b0a:	08 95       	ret

00001b0c <__eerd_block_m8>:
    1b0c:	dc 01       	movw	r26, r24
    1b0e:	cb 01       	movw	r24, r22

00001b10 <__eerd_blraw_m8>:
    1b10:	fc 01       	movw	r30, r24
    1b12:	e1 99       	sbic	0x1c, 1	; 28
    1b14:	fe cf       	rjmp	.-4      	; 0x1b12 <__eerd_blraw_m8+0x2>
    1b16:	06 c0       	rjmp	.+12     	; 0x1b24 <__eerd_blraw_m8+0x14>
    1b18:	ff bb       	out	0x1f, r31	; 31
    1b1a:	ee bb       	out	0x1e, r30	; 30
    1b1c:	e0 9a       	sbi	0x1c, 0	; 28
    1b1e:	31 96       	adiw	r30, 0x01	; 1
    1b20:	0d b2       	in	r0, 0x1d	; 29
    1b22:	0d 92       	st	X+, r0
    1b24:	41 50       	subi	r20, 0x01	; 1
    1b26:	50 40       	sbci	r21, 0x00	; 0
    1b28:	b8 f7       	brcc	.-18     	; 0x1b18 <__eerd_blraw_m8+0x8>
    1b2a:	08 95       	ret

00001b2c <_exit>:
    1b2c:	f8 94       	cli

00001b2e <__stop_program>:
    1b2e:	ff cf       	rjmp	.-2      	; 0x1b2e <__stop_program>
