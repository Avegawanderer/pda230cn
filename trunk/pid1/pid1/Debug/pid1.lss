
pid1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000190c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000004a  00800060  0000190c  000019a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000052  008000aa  008000aa  000019ea  2**0
                  ALLOC
  3 .stab         00001ba8  00000000  00000000  000019ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000559  00000000  00000000  00003594  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00003aed  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000348  00000000  00000000  00003b1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002dfc  00000000  00000000  00003e64  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001050  00000000  00000000  00006c60  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001472  00000000  00000000  00007cb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000704  00000000  00000000  00009124  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000bdd  00000000  00000000  00009828  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001b34  00000000  00000000  0000a405  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000360  00000000  00000000  0000bf39  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	19 c1       	rjmp	.+562    	; 0x234 <__ctors_end>
       2:	33 c1       	rjmp	.+614    	; 0x26a <__bad_interrupt>
       4:	32 c1       	rjmp	.+612    	; 0x26a <__bad_interrupt>
       6:	66 ca       	rjmp	.-2868   	; 0xfffff4d4 <__eeprom_end+0xff7ef4d4>
       8:	30 c1       	rjmp	.+608    	; 0x26a <__bad_interrupt>
       a:	2f c1       	rjmp	.+606    	; 0x26a <__bad_interrupt>
       c:	2e c1       	rjmp	.+604    	; 0x26a <__bad_interrupt>
       e:	2d c1       	rjmp	.+602    	; 0x26a <__bad_interrupt>
      10:	2c c1       	rjmp	.+600    	; 0x26a <__bad_interrupt>
      12:	f0 c8       	rjmp	.-3616   	; 0xfffff1f4 <__eeprom_end+0xff7ef1f4>
      14:	2a c1       	rjmp	.+596    	; 0x26a <__bad_interrupt>
      16:	29 c1       	rjmp	.+594    	; 0x26a <__bad_interrupt>
      18:	28 c1       	rjmp	.+592    	; 0x26a <__bad_interrupt>
      1a:	27 c1       	rjmp	.+590    	; 0x26a <__bad_interrupt>
      1c:	53 c1       	rjmp	.+678    	; 0x2c4 <__vector_14>
      1e:	25 c1       	rjmp	.+586    	; 0x26a <__bad_interrupt>
      20:	cb c8       	rjmp	.-3690   	; 0xfffff1b8 <__eeprom_end+0xff7ef1b8>
      22:	23 c1       	rjmp	.+582    	; 0x26a <__bad_interrupt>
      24:	22 c1       	rjmp	.+580    	; 0x26a <__bad_interrupt>
      26:	7a c2       	rjmp	.+1268   	; 0x51c <decode_led_char+0x42>
      28:	89 c2       	rjmp	.+1298   	; 0x53c <decode_led_char+0x62>
      2a:	88 c2       	rjmp	.+1296   	; 0x53c <decode_led_char+0x62>
      2c:	87 c2       	rjmp	.+1294   	; 0x53c <decode_led_char+0x62>
      2e:	86 c2       	rjmp	.+1292   	; 0x53c <decode_led_char+0x62>
      30:	85 c2       	rjmp	.+1290   	; 0x53c <decode_led_char+0x62>
      32:	84 c2       	rjmp	.+1288   	; 0x53c <decode_led_char+0x62>
      34:	83 c2       	rjmp	.+1286   	; 0x53c <decode_led_char+0x62>
      36:	82 c2       	rjmp	.+1284   	; 0x53c <decode_led_char+0x62>
      38:	81 c2       	rjmp	.+1282   	; 0x53c <decode_led_char+0x62>
      3a:	80 c2       	rjmp	.+1280   	; 0x53c <decode_led_char+0x62>
      3c:	7f c2       	rjmp	.+1278   	; 0x53c <decode_led_char+0x62>
      3e:	6a c2       	rjmp	.+1236   	; 0x514 <decode_led_char+0x3a>
      40:	6b c2       	rjmp	.+1238   	; 0x518 <decode_led_char+0x3e>
      42:	66 c2       	rjmp	.+1228   	; 0x510 <decode_led_char+0x36>
      44:	7b c2       	rjmp	.+1270   	; 0x53c <decode_led_char+0x62>
      46:	52 c2       	rjmp	.+1188   	; 0x4ec <decode_led_char+0x12>
      48:	7b c2       	rjmp	.+1270   	; 0x540 <decode_led_char+0x66>
      4a:	52 c2       	rjmp	.+1188   	; 0x4f0 <decode_led_char+0x16>
      4c:	53 c2       	rjmp	.+1190   	; 0x4f4 <decode_led_char+0x1a>
      4e:	54 c2       	rjmp	.+1192   	; 0x4f8 <decode_led_char+0x1e>
      50:	55 c2       	rjmp	.+1194   	; 0x4fc <decode_led_char+0x22>
      52:	56 c2       	rjmp	.+1196   	; 0x500 <decode_led_char+0x26>
      54:	57 c2       	rjmp	.+1198   	; 0x504 <decode_led_char+0x2a>
      56:	58 c2       	rjmp	.+1200   	; 0x508 <decode_led_char+0x2e>
      58:	59 c2       	rjmp	.+1202   	; 0x50c <decode_led_char+0x32>
      5a:	70 c2       	rjmp	.+1248   	; 0x53c <decode_led_char+0x62>
      5c:	6f c2       	rjmp	.+1246   	; 0x53c <decode_led_char+0x62>
      5e:	6e c2       	rjmp	.+1244   	; 0x53c <decode_led_char+0x62>
      60:	6d c2       	rjmp	.+1242   	; 0x53c <decode_led_char+0x62>
      62:	6c c2       	rjmp	.+1240   	; 0x53c <decode_led_char+0x62>
      64:	6b c2       	rjmp	.+1238   	; 0x53c <decode_led_char+0x62>
      66:	6a c2       	rjmp	.+1236   	; 0x53c <decode_led_char+0x62>
      68:	69 c2       	rjmp	.+1234   	; 0x53c <decode_led_char+0x62>
      6a:	68 c2       	rjmp	.+1232   	; 0x53c <decode_led_char+0x62>
      6c:	5b c2       	rjmp	.+1206   	; 0x524 <decode_led_char+0x4a>
      6e:	60 c2       	rjmp	.+1216   	; 0x530 <decode_led_char+0x56>
      70:	63 c2       	rjmp	.+1222   	; 0x538 <decode_led_char+0x5e>
      72:	5a c2       	rjmp	.+1204   	; 0x528 <decode_led_char+0x4e>
      74:	63 c2       	rjmp	.+1222   	; 0x53c <decode_led_char+0x62>
      76:	62 c2       	rjmp	.+1220   	; 0x53c <decode_led_char+0x62>
      78:	61 c2       	rjmp	.+1218   	; 0x53c <decode_led_char+0x62>
      7a:	60 c2       	rjmp	.+1216   	; 0x53c <decode_led_char+0x62>
      7c:	5f c2       	rjmp	.+1214   	; 0x53c <decode_led_char+0x62>
      7e:	5e c2       	rjmp	.+1212   	; 0x53c <decode_led_char+0x62>
      80:	5d c2       	rjmp	.+1210   	; 0x53c <decode_led_char+0x62>
      82:	54 c2       	rjmp	.+1192   	; 0x52c <decode_led_char+0x52>
      84:	33 c2       	rjmp	.+1126   	; 0x4ec <decode_led_char+0x12>
      86:	56 c2       	rjmp	.+1196   	; 0x534 <decode_led_char+0x5a>
      88:	59 c2       	rjmp	.+1202   	; 0x53c <decode_led_char+0x62>
      8a:	58 c2       	rjmp	.+1200   	; 0x53c <decode_led_char+0x62>
      8c:	37 c2       	rjmp	.+1134   	; 0x4fc <decode_led_char+0x22>
      8e:	56 c2       	rjmp	.+1196   	; 0x53c <decode_led_char+0x62>
      90:	55 c2       	rjmp	.+1194   	; 0x53c <decode_led_char+0x62>
      92:	54 c2       	rjmp	.+1192   	; 0x53c <decode_led_char+0x62>
      94:	53 c2       	rjmp	.+1190   	; 0x53c <decode_led_char+0x62>
      96:	52 c2       	rjmp	.+1188   	; 0x53c <decode_led_char+0x62>
      98:	51 c2       	rjmp	.+1186   	; 0x53c <decode_led_char+0x62>
      9a:	50 c2       	rjmp	.+1184   	; 0x53c <decode_led_char+0x62>
      9c:	4f c2       	rjmp	.+1182   	; 0x53c <decode_led_char+0x62>
      9e:	4e c2       	rjmp	.+1180   	; 0x53c <decode_led_char+0x62>
      a0:	4d c2       	rjmp	.+1178   	; 0x53c <decode_led_char+0x62>
      a2:	4c c2       	rjmp	.+1176   	; 0x53c <decode_led_char+0x62>
      a4:	4b c2       	rjmp	.+1174   	; 0x53c <decode_led_char+0x62>
      a6:	4a c2       	rjmp	.+1172   	; 0x53c <decode_led_char+0x62>
      a8:	49 c2       	rjmp	.+1170   	; 0x53c <decode_led_char+0x62>
      aa:	48 c2       	rjmp	.+1168   	; 0x53c <decode_led_char+0x62>
      ac:	47 c2       	rjmp	.+1166   	; 0x53c <decode_led_char+0x62>
      ae:	46 c2       	rjmp	.+1164   	; 0x53c <decode_led_char+0x62>
      b0:	45 c2       	rjmp	.+1162   	; 0x53c <decode_led_char+0x62>
      b2:	44 c2       	rjmp	.+1160   	; 0x53c <decode_led_char+0x62>
      b4:	43 c2       	rjmp	.+1158   	; 0x53c <decode_led_char+0x62>
      b6:	42 c2       	rjmp	.+1156   	; 0x53c <decode_led_char+0x62>
      b8:	41 c2       	rjmp	.+1154   	; 0x53c <decode_led_char+0x62>
      ba:	40 c2       	rjmp	.+1152   	; 0x53c <decode_led_char+0x62>
      bc:	3f c2       	rjmp	.+1150   	; 0x53c <decode_led_char+0x62>
      be:	3e c2       	rjmp	.+1148   	; 0x53c <decode_led_char+0x62>
      c0:	3d c2       	rjmp	.+1146   	; 0x53c <decode_led_char+0x62>
      c2:	3c c2       	rjmp	.+1144   	; 0x53c <decode_led_char+0x62>
      c4:	3b c2       	rjmp	.+1142   	; 0x53c <decode_led_char+0x62>
      c6:	3a c2       	rjmp	.+1140   	; 0x53c <decode_led_char+0x62>
      c8:	39 c2       	rjmp	.+1138   	; 0x53c <decode_led_char+0x62>
      ca:	38 c2       	rjmp	.+1136   	; 0x53c <decode_led_char+0x62>
      cc:	37 c2       	rjmp	.+1134   	; 0x53c <decode_led_char+0x62>
      ce:	36 c2       	rjmp	.+1132   	; 0x53c <decode_led_char+0x62>
      d0:	35 c2       	rjmp	.+1130   	; 0x53c <decode_led_char+0x62>
      d2:	34 c2       	rjmp	.+1128   	; 0x53c <decode_led_char+0x62>
      d4:	33 c2       	rjmp	.+1126   	; 0x53c <decode_led_char+0x62>
      d6:	32 c2       	rjmp	.+1124   	; 0x53c <decode_led_char+0x62>
      d8:	31 c2       	rjmp	.+1122   	; 0x53c <decode_led_char+0x62>
      da:	30 c2       	rjmp	.+1120   	; 0x53c <decode_led_char+0x62>
      dc:	2f c2       	rjmp	.+1118   	; 0x53c <decode_led_char+0x62>
      de:	2e c2       	rjmp	.+1116   	; 0x53c <decode_led_char+0x62>
      e0:	2d c2       	rjmp	.+1114   	; 0x53c <decode_led_char+0x62>
      e2:	2c c2       	rjmp	.+1112   	; 0x53c <decode_led_char+0x62>
      e4:	2b c2       	rjmp	.+1110   	; 0x53c <decode_led_char+0x62>
      e6:	2a c2       	rjmp	.+1108   	; 0x53c <decode_led_char+0x62>
      e8:	29 c2       	rjmp	.+1106   	; 0x53c <decode_led_char+0x62>
      ea:	28 c2       	rjmp	.+1104   	; 0x53c <decode_led_char+0x62>
      ec:	27 c2       	rjmp	.+1102   	; 0x53c <decode_led_char+0x62>
      ee:	26 c2       	rjmp	.+1100   	; 0x53c <decode_led_char+0x62>
      f0:	25 c2       	rjmp	.+1098   	; 0x53c <decode_led_char+0x62>
      f2:	24 c2       	rjmp	.+1096   	; 0x53c <decode_led_char+0x62>
      f4:	23 c2       	rjmp	.+1094   	; 0x53c <decode_led_char+0x62>
      f6:	22 c2       	rjmp	.+1092   	; 0x53c <decode_led_char+0x62>
      f8:	21 c2       	rjmp	.+1090   	; 0x53c <decode_led_char+0x62>
      fa:	20 c2       	rjmp	.+1088   	; 0x53c <decode_led_char+0x62>
      fc:	1f c2       	rjmp	.+1086   	; 0x53c <decode_led_char+0x62>
      fe:	1e c2       	rjmp	.+1084   	; 0x53c <decode_led_char+0x62>
     100:	1d c2       	rjmp	.+1082   	; 0x53c <decode_led_char+0x62>
     102:	1c c2       	rjmp	.+1080   	; 0x53c <decode_led_char+0x62>
     104:	1b c2       	rjmp	.+1078   	; 0x53c <decode_led_char+0x62>
     106:	1a c2       	rjmp	.+1076   	; 0x53c <decode_led_char+0x62>
     108:	19 c2       	rjmp	.+1074   	; 0x53c <decode_led_char+0x62>
     10a:	18 c2       	rjmp	.+1072   	; 0x53c <decode_led_char+0x62>
     10c:	17 c2       	rjmp	.+1070   	; 0x53c <decode_led_char+0x62>
     10e:	16 c2       	rjmp	.+1068   	; 0x53c <decode_led_char+0x62>
     110:	15 c2       	rjmp	.+1066   	; 0x53c <decode_led_char+0x62>
     112:	14 c2       	rjmp	.+1064   	; 0x53c <decode_led_char+0x62>
     114:	13 c2       	rjmp	.+1062   	; 0x53c <decode_led_char+0x62>
     116:	12 c2       	rjmp	.+1060   	; 0x53c <decode_led_char+0x62>
     118:	11 c2       	rjmp	.+1058   	; 0x53c <decode_led_char+0x62>
     11a:	10 c2       	rjmp	.+1056   	; 0x53c <decode_led_char+0x62>
     11c:	0f c2       	rjmp	.+1054   	; 0x53c <decode_led_char+0x62>
     11e:	0e c2       	rjmp	.+1052   	; 0x53c <decode_led_char+0x62>
     120:	0d c2       	rjmp	.+1050   	; 0x53c <decode_led_char+0x62>
     122:	0c c2       	rjmp	.+1048   	; 0x53c <decode_led_char+0x62>
     124:	0b c2       	rjmp	.+1046   	; 0x53c <decode_led_char+0x62>
     126:	0a c2       	rjmp	.+1044   	; 0x53c <decode_led_char+0x62>
     128:	09 c2       	rjmp	.+1042   	; 0x53c <decode_led_char+0x62>
     12a:	08 c2       	rjmp	.+1040   	; 0x53c <decode_led_char+0x62>
     12c:	07 c2       	rjmp	.+1038   	; 0x53c <decode_led_char+0x62>
     12e:	06 c2       	rjmp	.+1036   	; 0x53c <decode_led_char+0x62>
     130:	05 c2       	rjmp	.+1034   	; 0x53c <decode_led_char+0x62>
     132:	04 c2       	rjmp	.+1032   	; 0x53c <decode_led_char+0x62>
     134:	03 c2       	rjmp	.+1030   	; 0x53c <decode_led_char+0x62>
     136:	02 c2       	rjmp	.+1028   	; 0x53c <decode_led_char+0x62>
     138:	01 c2       	rjmp	.+1026   	; 0x53c <decode_led_char+0x62>
     13a:	00 c2       	rjmp	.+1024   	; 0x53c <decode_led_char+0x62>
     13c:	ff c1       	rjmp	.+1022   	; 0x53c <decode_led_char+0x62>
     13e:	fe c1       	rjmp	.+1020   	; 0x53c <decode_led_char+0x62>
     140:	fd c1       	rjmp	.+1018   	; 0x53c <decode_led_char+0x62>
     142:	fc c1       	rjmp	.+1016   	; 0x53c <decode_led_char+0x62>
     144:	fb c1       	rjmp	.+1014   	; 0x53c <decode_led_char+0x62>
     146:	ec c1       	rjmp	.+984    	; 0x520 <decode_led_char+0x46>

00000148 <menuFunctionSet>:
     148:	01 37 06 3a 06 d5 05 03 d1 05 db 05 24 04 02 d8     .7.:........$...
     158:	05 2c 05 ce 05 05 c4 05 7f 05 00 00 0b 2a 04 7f     .,...........*..
     168:	05 38 04 04 c4 05 d9 04 00 00 0c 2a 04 d9 04 38     .8.........*...8
     178:	04 06 cc 05 8f 04 00 00 09 2a 04 8f 04 38 04 07     .........*...8..
     188:	cc 05 45 04 00 00 0a 2a 04 45 04 38 04 08 3e 04     ..E....*.E.8..>.
     198:	40 04 00 00 0d 3f 04 40 04 00 00                    @....?.@...

000001a3 <menuJumpSet>:
     1a3:	01 06 00 03 a8 01 00 01 02 40 01 00 02 05 28 02     .........@....(.
     1b3:	00 01 01 80 03 00 83 01 40 05 00 82 01 00 05 04     ........@.......
     1c3:	00 04 68 05 02 00 07 a8 05 00 01 0b 28 0b 00 83     ..h.........(...
     1d3:	05 28 04 00 82 01 00 04 04 00 06 68 04 02 00 05     .(.........h....
     1e3:	a8 04 00 01 0c 28 0c 00 83 04 28 06 00 82 01 00     .....(....(.....
     1f3:	06 04 00 07 68 06 02 00 04 a8 06 00 01 09 00 07     ....h...........
     203:	00 82 01 00 07 04 00 05 68 07 02 00 06 a8 07 00     ........h.......
     213:	01 0a 00 09 00 02 06 00 09 00 01 08 14 08 00 83     ................
     223:	01 00 0a 00 02 07 00 0a 00 01 0d 14 0d 00 83 01     ................
	...

00000234 <__ctors_end>:
     234:	11 24       	eor	r1, r1
     236:	1f be       	out	0x3f, r1	; 63
     238:	cf e5       	ldi	r28, 0x5F	; 95
     23a:	d4 e0       	ldi	r29, 0x04	; 4
     23c:	de bf       	out	0x3e, r29	; 62
     23e:	cd bf       	out	0x3d, r28	; 61

00000240 <__do_copy_data>:
     240:	10 e0       	ldi	r17, 0x00	; 0
     242:	a0 e6       	ldi	r26, 0x60	; 96
     244:	b0 e0       	ldi	r27, 0x00	; 0
     246:	ec e0       	ldi	r30, 0x0C	; 12
     248:	f9 e1       	ldi	r31, 0x19	; 25
     24a:	02 c0       	rjmp	.+4      	; 0x250 <__do_copy_data+0x10>
     24c:	05 90       	lpm	r0, Z+
     24e:	0d 92       	st	X+, r0
     250:	aa 3a       	cpi	r26, 0xAA	; 170
     252:	b1 07       	cpc	r27, r17
     254:	d9 f7       	brne	.-10     	; 0x24c <__do_copy_data+0xc>

00000256 <__do_clear_bss>:
     256:	20 e0       	ldi	r18, 0x00	; 0
     258:	aa ea       	ldi	r26, 0xAA	; 170
     25a:	b0 e0       	ldi	r27, 0x00	; 0
     25c:	01 c0       	rjmp	.+2      	; 0x260 <.do_clear_bss_start>

0000025e <.do_clear_bss_loop>:
     25e:	1d 92       	st	X+, r1

00000260 <.do_clear_bss_start>:
     260:	ac 3f       	cpi	r26, 0xFC	; 252
     262:	b2 07       	cpc	r27, r18
     264:	e1 f7       	brne	.-8      	; 0x25e <.do_clear_bss_loop>
     266:	bb d6       	rcall	.+3446   	; 0xfde <main>
     268:	4f cb       	rjmp	.-2402   	; 0xfffff908 <__eeprom_end+0xff7ef908>

0000026a <__bad_interrupt>:
     26a:	ca ce       	rjmp	.-620    	; 0x0 <__vectors>

0000026c <conv_ADC_to_Celsius>:
{
	float k_norm = -0.4454;
	float offset_norm = 408.2037;
	
	
	return (uint16_t)((float)adc_value * k_norm + offset_norm);
     26c:	bc 01       	movw	r22, r24
     26e:	80 e0       	ldi	r24, 0x00	; 0
     270:	90 e0       	ldi	r25, 0x00	; 0
     272:	10 da       	rcall	.-3040   	; 0xfffff694 <__eeprom_end+0xff7ef694>
     274:	28 e7       	ldi	r18, 0x78	; 120
     276:	3b e0       	ldi	r19, 0x0B	; 11
     278:	44 ee       	ldi	r20, 0xE4	; 228
     27a:	5e eb       	ldi	r21, 0xBE	; 190
     27c:	99 da       	rcall	.-2766   	; 0xfffff7b0 <__eeprom_end+0xff7ef7b0>
     27e:	23 e1       	ldi	r18, 0x13	; 19
     280:	3a e1       	ldi	r19, 0x1A	; 26
     282:	4c ec       	ldi	r20, 0xCC	; 204
     284:	53 e4       	ldi	r21, 0x43	; 67
     286:	76 d9       	rcall	.-3348   	; 0xfffff574 <__eeprom_end+0xff7ef574>
     288:	d9 d9       	rcall	.-3150   	; 0xfffff63c <__eeprom_end+0xff7ef63c>
}
     28a:	86 2f       	mov	r24, r22
     28c:	97 2f       	mov	r25, r23
     28e:	08 95       	ret

00000290 <update_filtered_adc>:
void update_filtered_adc()
{
	uint8_t i;
	uint16_t filtered_value = 0;
	// Disable interrupts from ADC - to save data integrity
	ACSR &= ~(1<<ACIE);	
     290:	43 98       	cbi	0x08, 3	; 8
     292:	ea ea       	ldi	r30, 0xAA	; 170
     294:	f0 e0       	ldi	r31, 0x00	; 0
	
	return (uint16_t)((float)adc_value * k_norm + offset_norm);
}


void update_filtered_adc()
     296:	4a eb       	ldi	r20, 0xBA	; 186
     298:	50 e0       	ldi	r21, 0x00	; 0
{
	uint8_t i;
	uint16_t filtered_value = 0;
     29a:	80 e0       	ldi	r24, 0x00	; 0
     29c:	90 e0       	ldi	r25, 0x00	; 0
	// Disable interrupts from ADC - to save data integrity
	ACSR &= ~(1<<ACIE);	
	// Count up
	for(i=0;i<ADC_BUFFER_LENGTH;i++)
	{
		filtered_value += adc_sample_buffer[i];
     29e:	21 91       	ld	r18, Z+
     2a0:	31 91       	ld	r19, Z+
     2a2:	82 0f       	add	r24, r18
     2a4:	93 1f       	adc	r25, r19
	uint8_t i;
	uint16_t filtered_value = 0;
	// Disable interrupts from ADC - to save data integrity
	ACSR &= ~(1<<ACIE);	
	// Count up
	for(i=0;i<ADC_BUFFER_LENGTH;i++)
     2a6:	e4 17       	cp	r30, r20
     2a8:	f5 07       	cpc	r31, r21
     2aa:	c9 f7       	brne	.-14     	; 0x29e <update_filtered_adc+0xe>
	{
		filtered_value += adc_sample_buffer[i];
	}	
	// Enable interrupts from ADC
	ACSR |= (1<<ACIE);
     2ac:	43 9a       	sbi	0x08, 3	; 8
	filtered_value /= ADC_BUFFER_LENGTH;
     2ae:	96 95       	lsr	r25
     2b0:	87 95       	ror	r24
     2b2:	96 95       	lsr	r25
     2b4:	87 95       	ror	r24
     2b6:	96 95       	lsr	r25
     2b8:	87 95       	ror	r24
	adc_filtered_value = filtered_value;
     2ba:	90 93 d7 00 	sts	0x00D7, r25
     2be:	80 93 d6 00 	sts	0x00D6, r24
     2c2:	08 95       	ret

000002c4 <__vector_14>:




ISR(ADC_vect)
{
     2c4:	1f 92       	push	r1
     2c6:	0f 92       	push	r0
     2c8:	0f b6       	in	r0, 0x3f	; 63
     2ca:	0f 92       	push	r0
     2cc:	11 24       	eor	r1, r1
     2ce:	2f 93       	push	r18
     2d0:	8f 93       	push	r24
     2d2:	9f 93       	push	r25
     2d4:	ef 93       	push	r30
     2d6:	ff 93       	push	r31
	uint16_t new_sample = ADC;
     2d8:	84 b1       	in	r24, 0x04	; 4
     2da:	95 b1       	in	r25, 0x05	; 5
	
	if (adc_buffer_pos < 0)
     2dc:	20 91 60 00 	lds	r18, 0x0060
     2e0:	22 23       	and	r18, r18
     2e2:	fc f4       	brge	.+62     	; 0x322 <__vector_14+0x5e>
	{
		// First call to the function, fill whole buffer with current sample
		for (adc_buffer_pos = ADC_BUFFER_LENGTH-1; adc_buffer_pos > 0; adc_buffer_pos--)
		adc_sample_buffer[adc_buffer_pos] = new_sample;
     2e4:	90 93 b9 00 	sts	0x00B9, r25
     2e8:	80 93 b8 00 	sts	0x00B8, r24
     2ec:	90 93 b7 00 	sts	0x00B7, r25
     2f0:	80 93 b6 00 	sts	0x00B6, r24
     2f4:	90 93 b5 00 	sts	0x00B5, r25
     2f8:	80 93 b4 00 	sts	0x00B4, r24
     2fc:	90 93 b3 00 	sts	0x00B3, r25
     300:	80 93 b2 00 	sts	0x00B2, r24
     304:	90 93 b1 00 	sts	0x00B1, r25
     308:	80 93 b0 00 	sts	0x00B0, r24
     30c:	90 93 af 00 	sts	0x00AF, r25
     310:	80 93 ae 00 	sts	0x00AE, r24
     314:	90 93 ad 00 	sts	0x00AD, r25
     318:	80 93 ac 00 	sts	0x00AC, r24
     31c:	10 92 60 00 	sts	0x0060, r1
     320:	0e c0       	rjmp	.+28     	; 0x33e <__vector_14+0x7a>
	}
	else
	{
		// Normal call
		adc_sample_buffer[adc_buffer_pos] = new_sample;
     322:	e2 2f       	mov	r30, r18
     324:	ee 0f       	add	r30, r30
     326:	ff 0b       	sbc	r31, r31
     328:	e6 55       	subi	r30, 0x56	; 86
     32a:	ff 4f       	sbci	r31, 0xFF	; 255
     32c:	91 83       	std	Z+1, r25	; 0x01
     32e:	80 83       	st	Z, r24
		adc_buffer_pos = (adc_buffer_pos == ADC_BUFFER_LENGTH - 1) ? 0 : adc_buffer_pos + 1;
     330:	27 30       	cpi	r18, 0x07	; 7
     332:	11 f0       	breq	.+4      	; 0x338 <__vector_14+0x74>
     334:	2f 5f       	subi	r18, 0xFF	; 255
     336:	01 c0       	rjmp	.+2      	; 0x33a <__vector_14+0x76>
     338:	20 e0       	ldi	r18, 0x00	; 0
     33a:	20 93 60 00 	sts	0x0060, r18
	}		
}	
     33e:	ff 91       	pop	r31
     340:	ef 91       	pop	r30
     342:	9f 91       	pop	r25
     344:	8f 91       	pop	r24
     346:	2f 91       	pop	r18
     348:	0f 90       	pop	r0
     34a:	0f be       	out	0x3f, r0	; 63
     34c:	0f 90       	pop	r0
     34e:	1f 90       	pop	r1
     350:	18 95       	reti

00000352 <process_buttons>:
	uint8_t raw_delayed_inv;
	static uint8_t press_timer = 0;
	uint8_t long_press_mask;
	uint8_t long_press_event_mask;
	
	raw_delayed = raw_current;
     352:	30 91 c0 00 	lds	r19, 0x00C0
	raw_delayed_inv = raw_current_inv;
     356:	20 91 61 00 	lds	r18, 0x0061
	raw_current = raw_button_state;
     35a:	90 91 ea 00 	lds	r25, 0x00EA
     35e:	90 93 c0 00 	sts	0x00C0, r25
	raw_current_inv = ~raw_current;
     362:	49 2f       	mov	r20, r25
     364:	40 95       	com	r20
     366:	40 93 61 00 	sts	0x0061, r20
	
	// Must be before press_timer update
	long_press_mask = (press_timer >= LONG_PRESS_DELAY) ? 0xFF : 0x00;
     36a:	80 91 c1 00 	lds	r24, 0x00C1
     36e:	8c 30       	cpi	r24, 0x0C	; 12
     370:	10 f0       	brcs	.+4      	; 0x376 <process_buttons+0x24>
     372:	6f ef       	ldi	r22, 0xFF	; 255
     374:	01 c0       	rjmp	.+2      	; 0x378 <process_buttons+0x26>
     376:	60 e0       	ldi	r22, 0x00	; 0
	
	if (raw_delayed != raw_current)
     378:	39 17       	cp	r19, r25
     37a:	41 f0       	breq	.+16     	; 0x38c <process_buttons+0x3a>
	{
		press_timer = 0;
     37c:	10 92 c1 00 	sts	0x00C1, r1
	}
	
	// Must after press_timer update
	long_press_event_mask = (press_timer == LONG_PRESS_DELAY) ? 0xFF : 0x00;
			
	button_action_down = raw_current & raw_delayed_inv;
     380:	89 2f       	mov	r24, r25
     382:	82 23       	and	r24, r18
     384:	80 93 bd 00 	sts	0x00BD, r24
     388:	50 e0       	ldi	r21, 0x00	; 0
     38a:	14 c0       	rjmp	.+40     	; 0x3b4 <process_buttons+0x62>
	
	if (raw_delayed != raw_current)
	{
		press_timer = 0;
	}
	else if (press_timer <= LONG_PRESS_DELAY)
     38c:	8d 30       	cpi	r24, 0x0D	; 13
     38e:	18 f4       	brcc	.+6      	; 0x396 <process_buttons+0x44>
	{
		press_timer++;
     390:	8f 5f       	subi	r24, 0xFF	; 255
     392:	80 93 c1 00 	sts	0x00C1, r24
	}
	
	// Must after press_timer update
	long_press_event_mask = (press_timer == LONG_PRESS_DELAY) ? 0xFF : 0x00;
     396:	50 91 c1 00 	lds	r21, 0x00C1
     39a:	5c 30       	cpi	r21, 0x0C	; 12
     39c:	09 f4       	brne	.+2      	; 0x3a0 <process_buttons+0x4e>
     39e:	45 c0       	rjmp	.+138    	; 0x42a <process_buttons+0xd8>
			
	button_action_down = raw_current & raw_delayed_inv;
     3a0:	89 2f       	mov	r24, r25
     3a2:	82 23       	and	r24, r18
     3a4:	80 93 bd 00 	sts	0x00BD, r24
			
	if (press_timer > REPEAT_DELAY)
     3a8:	57 30       	cpi	r21, 0x07	; 7
     3aa:	18 f0       	brcs	.+6      	; 0x3b2 <process_buttons+0x60>
     3ac:	50 e0       	ldi	r21, 0x00	; 0
		raw_delayed_inv |= 0xFF;
     3ae:	2f ef       	ldi	r18, 0xFF	; 255
     3b0:	01 c0       	rjmp	.+2      	; 0x3b4 <process_buttons+0x62>
	// Must after press_timer update
	long_press_event_mask = (press_timer == LONG_PRESS_DELAY) ? 0xFF : 0x00;
			
	button_action_down = raw_current & raw_delayed_inv;
			
	if (press_timer > REPEAT_DELAY)
     3b2:	50 e0       	ldi	r21, 0x00	; 0
		raw_delayed_inv |= 0xFF;
	
	button_action_rep = raw_current & raw_delayed_inv;
     3b4:	29 23       	and	r18, r25
     3b6:	20 93 bc 00 	sts	0x00BC, r18
	
	button_action_up_short = raw_current_inv & raw_delayed & ~long_press_mask;
     3ba:	60 95       	com	r22
     3bc:	34 23       	and	r19, r20
     3be:	36 23       	and	r19, r22
     3c0:	30 93 bb 00 	sts	0x00BB, r19
	//button_action_up_long  = raw_current_inv & raw_delayed & long_press_mask;
	button_action_long  = raw_current & long_press_event_mask;
     3c4:	59 23       	and	r21, r25
     3c6:	50 93 ba 00 	sts	0x00BA, r21
	
	// Compose button state
	button_state = (button_action_down & (BD_MENU | BD_UP | BD_DOWN | BD_ROTFWD | BD_ROTREV | BD_HEATCTRL));
     3ca:	87 77       	andi	r24, 0x77	; 119
     3cc:	90 e0       	ldi	r25, 0x00	; 0
	if (button_action_up_short & BD_MENU)
     3ce:	30 fd       	sbrc	r19, 0
     3d0:	05 c0       	rjmp	.+10     	; 0x3dc <process_buttons+0x8a>
	button_action_up_short = raw_current_inv & raw_delayed & ~long_press_mask;
	//button_action_up_long  = raw_current_inv & raw_delayed & long_press_mask;
	button_action_long  = raw_current & long_press_event_mask;
	
	// Compose button state
	button_state = (button_action_down & (BD_MENU | BD_UP | BD_DOWN | BD_ROTFWD | BD_ROTREV | BD_HEATCTRL));
     3d2:	90 93 bf 00 	sts	0x00BF, r25
     3d6:	80 93 be 00 	sts	0x00BE, r24
     3da:	05 c0       	rjmp	.+10     	; 0x3e6 <process_buttons+0x94>
	if (button_action_up_short & BD_MENU)
		button_state |= BS_MENU;
     3dc:	91 60       	ori	r25, 0x01	; 1
     3de:	90 93 bf 00 	sts	0x00BF, r25
     3e2:	80 93 be 00 	sts	0x00BE, r24
	//if (button_action_up_long & BD_MENU)
	if (button_action_long & BD_MENU)
     3e6:	50 ff       	sbrs	r21, 0
     3e8:	09 c0       	rjmp	.+18     	; 0x3fc <process_buttons+0xaa>
		button_state |= BL_MENU;
     3ea:	80 91 be 00 	lds	r24, 0x00BE
     3ee:	90 91 bf 00 	lds	r25, 0x00BF
     3f2:	92 60       	ori	r25, 0x02	; 2
     3f4:	90 93 bf 00 	sts	0x00BF, r25
     3f8:	80 93 be 00 	sts	0x00BE, r24
	if (button_action_rep & BD_UP)
     3fc:	21 ff       	sbrs	r18, 1
     3fe:	09 c0       	rjmp	.+18     	; 0x412 <process_buttons+0xc0>
		button_state |= BR_UP;	
     400:	80 91 be 00 	lds	r24, 0x00BE
     404:	90 91 bf 00 	lds	r25, 0x00BF
     408:	94 60       	ori	r25, 0x04	; 4
     40a:	90 93 bf 00 	sts	0x00BF, r25
     40e:	80 93 be 00 	sts	0x00BE, r24
	if (button_action_rep & BD_DOWN)
     412:	22 ff       	sbrs	r18, 2
     414:	10 c0       	rjmp	.+32     	; 0x436 <process_buttons+0xe4>
		button_state |= BR_DOWN;
     416:	80 91 be 00 	lds	r24, 0x00BE
     41a:	90 91 bf 00 	lds	r25, 0x00BF
     41e:	98 60       	ori	r25, 0x08	; 8
     420:	90 93 bf 00 	sts	0x00BF, r25
     424:	80 93 be 00 	sts	0x00BE, r24
     428:	08 95       	ret
	}
	
	// Must after press_timer update
	long_press_event_mask = (press_timer == LONG_PRESS_DELAY) ? 0xFF : 0x00;
			
	button_action_down = raw_current & raw_delayed_inv;
     42a:	83 2f       	mov	r24, r19
     42c:	82 23       	and	r24, r18
     42e:	80 93 bd 00 	sts	0x00BD, r24
	{
		press_timer++;
	}
	
	// Must after press_timer update
	long_press_event_mask = (press_timer == LONG_PRESS_DELAY) ? 0xFF : 0x00;
     432:	5f ef       	ldi	r21, 0xFF	; 255
     434:	bc cf       	rjmp	.-136    	; 0x3ae <process_buttons+0x5c>
     436:	08 95       	ret

00000438 <processRollControl>:
void processRollControl(void)
{
	// p_flags & ROLL_CYCLIC
	
	// Control direction by buttons
	if (button_state & BD_ROTFWD)
     438:	80 91 be 00 	lds	r24, 0x00BE
     43c:	84 ff       	sbrs	r24, 4
     43e:	03 c0       	rjmp	.+6      	; 0x446 <processRollControl+0xe>
		setMotorDirection(ROTATE_FORWARD);
     440:	81 e0       	ldi	r24, 0x01	; 1
     442:	6c d6       	rcall	.+3288   	; 0x111c <setMotorDirection>
     444:	04 c0       	rjmp	.+8      	; 0x44e <processRollControl+0x16>
	else if (button_state & BD_ROTREV)
     446:	85 ff       	sbrs	r24, 5
     448:	02 c0       	rjmp	.+4      	; 0x44e <processRollControl+0x16>
		setMotorDirection(ROTATE_REVERSE);
     44a:	82 e0       	ldi	r24, 0x02	; 2
     44c:	67 d6       	rcall	.+3278   	; 0x111c <setMotorDirection>
		
	if (button_action_down & 0x80)
     44e:	80 91 bd 00 	lds	r24, 0x00BD
     452:	88 23       	and	r24, r24
     454:	e4 f4       	brge	.+56     	; 0x48e <__stack+0x2f>
	{
		if (rollState & ROLL_CYCLE)
     456:	80 91 ce 00 	lds	r24, 0x00CE
     45a:	82 ff       	sbrs	r24, 2
     45c:	08 c0       	rjmp	.+16     	; 0x46e <__stack+0xf>
		{
			stopCycleRolling();
     45e:	a6 d6       	rcall	.+3404   	; 0x11ac <stopCycleRolling>
			SetBeeperFreq(1000);
     460:	88 ee       	ldi	r24, 0xE8	; 232
     462:	93 e0       	ldi	r25, 0x03	; 3
     464:	0e d8       	rcall	.-4068   	; 0xfffff482 <__eeprom_end+0xff7ef482>
			StartBeep(50);
     466:	82 e3       	ldi	r24, 0x32	; 50
     468:	90 e0       	ldi	r25, 0x00	; 0
     46a:	2c d8       	rcall	.-4008   	; 0xfffff4c4 <__eeprom_end+0xff7ef4c4>
     46c:	10 c0       	rjmp	.+32     	; 0x48e <__stack+0x2f>
		}
		else if (startCycleRolling())
     46e:	7b d6       	rcall	.+3318   	; 0x1166 <startCycleRolling>
     470:	88 23       	and	r24, r24
     472:	39 f0       	breq	.+14     	; 0x482 <__stack+0x23>
		{
			SetBeeperFreq(1000);
     474:	88 ee       	ldi	r24, 0xE8	; 232
     476:	93 e0       	ldi	r25, 0x03	; 3
     478:	04 d8       	rcall	.-4088   	; 0xfffff482 <__eeprom_end+0xff7ef482>
			StartBeep(100);
     47a:	84 e6       	ldi	r24, 0x64	; 100
     47c:	90 e0       	ldi	r25, 0x00	; 0
     47e:	22 d8       	rcall	.-4028   	; 0xfffff4c4 <__eeprom_end+0xff7ef4c4>
     480:	06 c0       	rjmp	.+12     	; 0x48e <__stack+0x2f>
		}
		else
		{
			SetBeeperFreq(500);
     482:	84 ef       	ldi	r24, 0xF4	; 244
     484:	91 e0       	ldi	r25, 0x01	; 1
     486:	fd d7       	rcall	.+4090   	; 0x1482 <SetBeeperFreq>
			StartBeep(50);
     488:	82 e3       	ldi	r24, 0x32	; 50
     48a:	90 e0       	ldi	r25, 0x00	; 0
     48c:	1b d8       	rcall	.-4042   	; 0xfffff4c4 <__eeprom_end+0xff7ef4c4>
		}
	}
		
		
	// Indicate direction by LEDs
	clearExtraLeds(LED_ROTFWD | LED_ROTREV);
     48e:	80 e3       	ldi	r24, 0x30	; 48
     490:	93 d1       	rcall	.+806    	; 0x7b8 <clearExtraLeds>
	if (p_flags & ROTATING_FORWARD)
     492:	80 91 cf 00 	lds	r24, 0x00CF
     496:	80 ff       	sbrs	r24, 0
     498:	03 c0       	rjmp	.+6      	; 0x4a0 <__stack+0x41>
		setExtraLeds(LED_ROTFWD);
     49a:	80 e1       	ldi	r24, 0x10	; 16
     49c:	87 d1       	rcall	.+782    	; 0x7ac <setExtraLeds>
     49e:	08 95       	ret
	else if (p_flags & ROTATING_REVERSE)
     4a0:	81 ff       	sbrs	r24, 1
     4a2:	02 c0       	rjmp	.+4      	; 0x4a8 <__stack+0x49>
		setExtraLeds(LED_ROTREV);
     4a4:	80 e2       	ldi	r24, 0x20	; 32
     4a6:	82 d1       	rcall	.+772    	; 0x7ac <setExtraLeds>
     4a8:	08 95       	ret

000004aa <processHeaterControl>:
{
	// p_flags & HEATER_ENABLED
	static uint8_t heater_ctrl = 0;
	
	// Process heater ON/OFF control by button
	if (button_state & BD_HEATCTRL)
     4aa:	80 91 be 00 	lds	r24, 0x00BE
     4ae:	86 ff       	sbrs	r24, 6
     4b0:	06 c0       	rjmp	.+12     	; 0x4be <processHeaterControl+0x14>
	{
		heater_ctrl ^= 0x01;
     4b2:	90 91 c2 00 	lds	r25, 0x00C2
     4b6:	81 e0       	ldi	r24, 0x01	; 1
     4b8:	89 27       	eor	r24, r25
     4ba:	80 93 c2 00 	sts	0x00C2, r24
	}
	
	
	if (heater_ctrl)
     4be:	80 91 c2 00 	lds	r24, 0x00C2
     4c2:	88 23       	and	r24, r24
     4c4:	29 f0       	breq	.+10     	; 0x4d0 <processHeaterControl+0x26>
		// Heater enabled

		//-----------------//
		// Process PID
		//// TODO!!!!
		setHeaterControl(10);
     4c6:	8a e0       	ldi	r24, 0x0A	; 10
     4c8:	19 d6       	rcall	.+3122   	; 0x10fc <setHeaterControl>
		//-----------------//
		
		setExtraLeds(LED_HEATER);
     4ca:	80 e4       	ldi	r24, 0x40	; 64
     4cc:	6f d1       	rcall	.+734    	; 0x7ac <setExtraLeds>
     4ce:	08 95       	ret
	}
	else
	{
		// Heater disabled
		setHeaterControl(0);
     4d0:	80 e0       	ldi	r24, 0x00	; 0
     4d2:	14 d6       	rcall	.+3112   	; 0x10fc <setHeaterControl>
		clearExtraLeds(LED_HEATER);
     4d4:	80 e4       	ldi	r24, 0x40	; 64
     4d6:	70 d1       	rcall	.+736    	; 0x7b8 <clearExtraLeds>
     4d8:	08 95       	ret

000004da <decode_led_char>:
// Decodes normal string literal to the 
//	7-segment representation
//---------------------------------------------//
static uint8_t decode_led_char(char c)
{
	switch(c)
     4da:	90 e0       	ldi	r25, 0x00	; 0
     4dc:	fc 01       	movw	r30, r24
     4de:	b0 97       	sbiw	r30, 0x20	; 32
     4e0:	e1 39       	cpi	r30, 0x91	; 145
     4e2:	f1 05       	cpc	r31, r1
     4e4:	58 f5       	brcc	.+86     	; 0x53c <decode_led_char+0x62>
     4e6:	ed 5e       	subi	r30, 0xED	; 237
     4e8:	ff 4f       	sbci	r31, 0xFF	; 255
     4ea:	09 94       	ijmp
	{
		case 'O':
		case '0': return (SEGA | SEGB | SEGC | SEGD | SEGE | SEGF);
     4ec:	8f e3       	ldi	r24, 0x3F	; 63
     4ee:	08 95       	ret
		case '1': return (SEGB | SEGC );
		case '2': return (SEGA | SEGB | SEGD | SEGE | SEGG);
     4f0:	8b e5       	ldi	r24, 0x5B	; 91
     4f2:	08 95       	ret
		case '3': return (SEGA | SEGB | SEGC | SEGD | SEGG);
     4f4:	8f e4       	ldi	r24, 0x4F	; 79
     4f6:	08 95       	ret
		case '4': return (SEGB | SEGC | SEGF | SEGG);
     4f8:	86 e6       	ldi	r24, 0x66	; 102
     4fa:	08 95       	ret
		case 'S':
		case '5': return (SEGA | SEGC | SEGD | SEGF | SEGG);
     4fc:	8d e6       	ldi	r24, 0x6D	; 109
     4fe:	08 95       	ret
		case '6': return (SEGA | SEGC | SEGD | SEGE | SEGF | SEGG);
     500:	8d e7       	ldi	r24, 0x7D	; 125
     502:	08 95       	ret
		case '7': return (SEGA | SEGB | SEGC );
     504:	87 e0       	ldi	r24, 0x07	; 7
     506:	08 95       	ret
		case '8': return (SEGA | SEGB | SEGC | SEGD | SEGE | SEGF | SEGG);
     508:	8f e7       	ldi	r24, 0x7F	; 127
     50a:	08 95       	ret
		case '9': return (SEGA | SEGB | SEGC | SEGD | SEGF | SEGG);
     50c:	8f e6       	ldi	r24, 0x6F	; 111
     50e:	08 95       	ret
		case '.': return (SEGH);
     510:	80 e8       	ldi	r24, 0x80	; 128
     512:	08 95       	ret
		case ',': return (SEGH);
     514:	80 e8       	ldi	r24, 0x80	; 128
     516:	08 95       	ret
		case '-': return (SEGG);
     518:	80 e4       	ldi	r24, 0x40	; 64
     51a:	08 95       	ret
		case ' ': return 0;
     51c:	80 e0       	ldi	r24, 0x00	; 0
     51e:	08 95       	ret
		case 0xB0:	return (SEGA | SEGB | SEGF | SEGG);
     520:	83 e6       	ldi	r24, 0x63	; 99
     522:	08 95       	ret
		case 'C':	return (SEGA | SEGD | SEGE | SEGF);
     524:	89 e3       	ldi	r24, 0x39	; 57
     526:	08 95       	ret
		case 'F':	return (SEGA | SEGE | SEGF | SEGG);
     528:	81 e7       	ldi	r24, 0x71	; 113
     52a:	08 95       	ret
		case 'N':	return (SEGC | SEGE | SEGG);
     52c:	84 e5       	ldi	r24, 0x54	; 84
     52e:	08 95       	ret
		case 'D': return (SEGB | SEGC | SEGD | SEGE | SEGG);
     530:	8e e5       	ldi	r24, 0x5E	; 94
     532:	08 95       	ret
		case 'P': return (SEGA | SEGB | SEGE | SEGF | SEGG);
     534:	83 e7       	ldi	r24, 0x73	; 115
     536:	08 95       	ret
		case 'E': return (SEGA | SEGD | SEGE | SEGF | SEGG);
     538:	89 e7       	ldi	r24, 0x79	; 121
     53a:	08 95       	ret
		default:  return (SEGD);	// return '_' if char code is not found
     53c:	88 e0       	ldi	r24, 0x08	; 8
     53e:	08 95       	ret
{
	switch(c)
	{
		case 'O':
		case '0': return (SEGA | SEGB | SEGC | SEGD | SEGE | SEGF);
		case '1': return (SEGB | SEGC );
     540:	86 e0       	ldi	r24, 0x06	; 6
		case 'D': return (SEGB | SEGC | SEGD | SEGE | SEGG);
		case 'P': return (SEGA | SEGB | SEGE | SEGF | SEGG);
		case 'E': return (SEGA | SEGD | SEGE | SEGF | SEGG);
		default:  return (SEGD);	// return '_' if char code is not found
	}
}
     542:	08 95       	ret

00000544 <wrap_led_buffer_index>:
//---------------------------------------------//
// Ensures that index is inside the buffer
// -128 <= index <= 127
//---------------------------------------------//
static uint8_t wrap_led_buffer_index(int8_t buf_index)
{
     544:	98 2f       	mov	r25, r24
	uint8_t new_index_u;
	new_index_u = (uint8_t) ((buf_index < 0) ? -buf_index : buf_index);
     546:	87 fd       	sbrc	r24, 7
     548:	81 95       	neg	r24
	if (new_index_u >= LED_BUFFER_LENGTH)
     54a:	8e 30       	cpi	r24, 0x0E	; 14
     54c:	78 f0       	brcs	.+30     	; 0x56c <wrap_led_buffer_index+0x28>
		new_index_u = new_index_u % LED_BUFFER_LENGTH;
     54e:	38 2f       	mov	r19, r24
     550:	36 95       	lsr	r19
     552:	23 e9       	ldi	r18, 0x93	; 147
     554:	32 9f       	mul	r19, r18
     556:	21 2d       	mov	r18, r1
     558:	11 24       	eor	r1, r1
     55a:	26 95       	lsr	r18
     55c:	26 95       	lsr	r18
     55e:	22 0f       	add	r18, r18
     560:	32 2f       	mov	r19, r18
     562:	33 0f       	add	r19, r19
     564:	33 0f       	add	r19, r19
     566:	33 0f       	add	r19, r19
     568:	32 1b       	sub	r19, r18
     56a:	83 1b       	sub	r24, r19
	new_index_u = ((buf_index >= 0) || (new_index_u == 0)) ? new_index_u :  LED_BUFFER_LENGTH - new_index_u ;
     56c:	99 23       	and	r25, r25
     56e:	2c f4       	brge	.+10     	; 0x57a <wrap_led_buffer_index+0x36>
     570:	88 23       	and	r24, r24
     572:	19 f0       	breq	.+6      	; 0x57a <wrap_led_buffer_index+0x36>
     574:	9e e0       	ldi	r25, 0x0E	; 14
     576:	98 1b       	sub	r25, r24
     578:	89 2f       	mov	r24, r25
	return new_index_u;
}
     57a:	08 95       	ret

0000057c <processLedIndicator>:
// Call this function N times per sec to get N/NUM_DIGITS_TOTAL display update rate, where
// NUM_DIGITS_TOTAL is number_of_digits_of_LED_display if no extra LEDs are used or
// (number_of_digits_of_LED_display + 1) otherwise.
//---------------------------------------------//
void processLedIndicator()
{
     57c:	cf 93       	push	r28
	disable_led_segments();
	#endif
	
	
	// Perform regular shift
	led_clock_pulse(!LED_DIGIT_ACT_LVL);
     57e:	81 e0       	ldi	r24, 0x01	; 1
     580:	22 d1       	rcall	.+580    	; 0x7c6 <led_clock_pulse>
	
	switch (wActivePos)
     582:	80 91 c4 00 	lds	r24, 0x00C4
     586:	88 23       	and	r24, r24
     588:	19 f0       	breq	.+6      	; 0x590 <processLedIndicator+0x14>
     58a:	86 30       	cpi	r24, 0x06	; 6
     58c:	f1 f5       	brne	.+124    	; 0x60a <processLedIndicator+0x8e>
     58e:	12 c0       	rjmp	.+36     	; 0x5b4 <processLedIndicator+0x38>
	{
	case 0:
		// Get buttons
		#ifndef CLEAN_OPERATION
		disable_led_segments();
     590:	46 d1       	rcall	.+652    	; 0x81e <disable_led_segments>
		#endif
		enable_led_segments_pullups();
     592:	37 d1       	rcall	.+622    	; 0x802 <enable_led_segments_pullups>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     594:	85 e3       	ldi	r24, 0x35	; 53
     596:	8a 95       	dec	r24
     598:	f1 f7       	brne	.-4      	; 0x596 <processLedIndicator+0x1a>
     59a:	00 00       	nop
		_delay_us(PULLUP_DELAY_US);
		capture_button_state();
     59c:	47 d1       	rcall	.+654    	; 0x82c <capture_button_state>
		#ifndef CLEAN_OPERATION
		enable_led_segments();
     59e:	38 d1       	rcall	.+624    	; 0x810 <enable_led_segments>
		#endif
		// Start new cycle with active digit level
		led_clock_pulse(LED_DIGIT_ACT_LVL);
     5a0:	80 e0       	ldi	r24, 0x00	; 0
     5a2:	11 d1       	rcall	.+546    	; 0x7c6 <led_clock_pulse>
		// Always start new cycle from specified buffer start position
		bufActivePos = wStartPos;
     5a4:	80 91 d9 00 	lds	r24, 0x00D9
     5a8:	80 93 c3 00 	sts	0x00C3, r24
		next_wActivePos = wActivePos + 1;
     5ac:	c0 91 c4 00 	lds	r28, 0x00C4
     5b0:	cf 5f       	subi	r28, 0xFF	; 255
		break;
     5b2:	2f c0       	rjmp	.+94     	; 0x612 <processLedIndicator+0x96>
//---------------------------------------------//
// Performs window shifting
//---------------------------------------------//
static void processWindowShifter(void)
{
	if (shifterState == LED_SHIFT_DONE)
     5b4:	80 91 da 00 	lds	r24, 0x00DA
     5b8:	88 23       	and	r24, r24
     5ba:	81 f1       	breq	.+96     	; 0x61c <processLedIndicator+0xa0>
		return;
	
	// Process shift timer
	processSoftTimer8b(&shiftTimer);	
     5bc:	85 ec       	ldi	r24, 0xC5	; 197
     5be:	90 e0       	ldi	r25, 0x00	; 0
     5c0:	32 d7       	rcall	.+3684   	; 0x1426 <processSoftTimer8b>
	
	if (shiftTimer.FTop)
     5c2:	80 91 c5 00 	lds	r24, 0x00C5
     5c6:	85 ff       	sbrs	r24, 5
     5c8:	23 c0       	rjmp	.+70     	; 0x610 <processLedIndicator+0x94>
	{
		// Check if finished
		if (wStartPos == bufStartPos)	
     5ca:	80 91 d9 00 	lds	r24, 0x00D9
     5ce:	90 91 db 00 	lds	r25, 0x00DB
     5d2:	89 13       	cpse	r24, r25
     5d4:	04 c0       	rjmp	.+8      	; 0x5de <processLedIndicator+0x62>
		{
			// Update state
			shifterState = LED_SHIFT_DONE;
     5d6:	10 92 da 00 	sts	0x00DA, r1
		// Always start new cycle from specified buffer start position
		bufActivePos = wStartPos;
		next_wActivePos = wActivePos + 1;
		break;
	case NUM_DIGITS_TOTAL-1:
		next_wActivePos = 0;
     5da:	c0 e0       	ldi	r28, 0x00	; 0
     5dc:	1a c0       	rjmp	.+52     	; 0x612 <processLedIndicator+0x96>
		if (wStartPos == bufStartPos)	
		{
			// Update state
			shifterState = LED_SHIFT_DONE;
		}
		else if (shifterState == LED_SHIFT_RIGHT)
     5de:	90 91 da 00 	lds	r25, 0x00DA
     5e2:	92 30       	cpi	r25, 0x02	; 2
     5e4:	49 f4       	brne	.+18     	; 0x5f8 <processLedIndicator+0x7c>
// Increments index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t inc_buffer_position(uint8_t position)
{
	return (position >= LED_BUFFER_LENGTH - 1) ? 0 : position + 1;
     5e6:	8d 30       	cpi	r24, 0x0D	; 13
     5e8:	10 f4       	brcc	.+4      	; 0x5ee <processLedIndicator+0x72>
     5ea:	8f 5f       	subi	r24, 0xFF	; 255
     5ec:	01 c0       	rjmp	.+2      	; 0x5f0 <processLedIndicator+0x74>
     5ee:	80 e0       	ldi	r24, 0x00	; 0
			// Update state
			shifterState = LED_SHIFT_DONE;
		}
		else if (shifterState == LED_SHIFT_RIGHT)
		{
			wStartPos = inc_buffer_position(wStartPos);	
     5f0:	80 93 d9 00 	sts	0x00D9, r24
		// Always start new cycle from specified buffer start position
		bufActivePos = wStartPos;
		next_wActivePos = wActivePos + 1;
		break;
	case NUM_DIGITS_TOTAL-1:
		next_wActivePos = 0;
     5f4:	c0 e0       	ldi	r28, 0x00	; 0
     5f6:	0d c0       	rjmp	.+26     	; 0x612 <processLedIndicator+0x96>
// Decrements index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t dec_buffer_position(uint8_t position)
{
	return (position == 0) ? LED_BUFFER_LENGTH - 1 : position - 1;
     5f8:	88 23       	and	r24, r24
     5fa:	11 f0       	breq	.+4      	; 0x600 <processLedIndicator+0x84>
     5fc:	81 50       	subi	r24, 0x01	; 1
     5fe:	01 c0       	rjmp	.+2      	; 0x602 <processLedIndicator+0x86>
     600:	8d e0       	ldi	r24, 0x0D	; 13
		{
			wStartPos = inc_buffer_position(wStartPos);	
		}
		else
		{
			wStartPos = dec_buffer_position(wStartPos);		
     602:	80 93 d9 00 	sts	0x00D9, r24
		// Always start new cycle from specified buffer start position
		bufActivePos = wStartPos;
		next_wActivePos = wActivePos + 1;
		break;
	case NUM_DIGITS_TOTAL-1:
		next_wActivePos = 0;
     606:	c0 e0       	ldi	r28, 0x00	; 0
     608:	04 c0       	rjmp	.+8      	; 0x612 <processLedIndicator+0x96>
		// Shift LED window
		processWindowShifter();	
		break;
	default:
		next_wActivePos = wActivePos + 1;
     60a:	c8 2f       	mov	r28, r24
     60c:	cf 5f       	subi	r28, 0xFF	; 255
		break;
     60e:	01 c0       	rjmp	.+2      	; 0x612 <processLedIndicator+0x96>
		// Always start new cycle from specified buffer start position
		bufActivePos = wStartPos;
		next_wActivePos = wActivePos + 1;
		break;
	case NUM_DIGITS_TOTAL-1:
		next_wActivePos = 0;
     610:	c0 e0       	ldi	r28, 0x00	; 0
		next_wActivePos = wActivePos + 1;
		break;
	}		
	
	#ifdef 	USE_EXTRA_LED_DIGIT
	if (wActivePos == EXTRA_DIGIT_NUM)
     612:	80 91 c4 00 	lds	r24, 0x00C4
     616:	86 30       	cpi	r24, 0x06	; 6
     618:	31 f4       	brne	.+12     	; 0x626 <processLedIndicator+0xaa>
     61a:	01 c0       	rjmp	.+2      	; 0x61e <processLedIndicator+0xa2>
		// Always start new cycle from specified buffer start position
		bufActivePos = wStartPos;
		next_wActivePos = wActivePos + 1;
		break;
	case NUM_DIGITS_TOTAL-1:
		next_wActivePos = 0;
     61c:	c0 e0       	ldi	r28, 0x00	; 0
	
	#ifdef 	USE_EXTRA_LED_DIGIT
	if (wActivePos == EXTRA_DIGIT_NUM)
	{
		// Output separate LEDs state
		set_led_segments(extra_led_state);
     61e:	80 91 d8 00 	lds	r24, 0x00D8
     622:	e1 d0       	rcall	.+450    	; 0x7e6 <set_led_segments>
     624:	10 c0       	rjmp	.+32     	; 0x646 <processLedIndicator+0xca>
	}
	else
	#endif
	{
		// Output new segment data
		set_led_segments(led_data_buffer[bufActivePos]);
     626:	e0 91 c3 00 	lds	r30, 0x00C3
     62a:	f0 e0       	ldi	r31, 0x00	; 0
     62c:	e4 52       	subi	r30, 0x24	; 36
     62e:	ff 4f       	sbci	r31, 0xFF	; 255
     630:	80 81       	ld	r24, Z
     632:	d9 d0       	rcall	.+434    	; 0x7e6 <set_led_segments>
		// Wrap around buffer length
		bufActivePos = inc_buffer_position(bufActivePos );
     634:	90 91 c3 00 	lds	r25, 0x00C3
// Increments index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t inc_buffer_position(uint8_t position)
{
	return (position >= LED_BUFFER_LENGTH - 1) ? 0 : position + 1;
     638:	9d 30       	cpi	r25, 0x0D	; 13
     63a:	10 f4       	brcc	.+4      	; 0x640 <processLedIndicator+0xc4>
     63c:	9f 5f       	subi	r25, 0xFF	; 255
     63e:	01 c0       	rjmp	.+2      	; 0x642 <processLedIndicator+0xc6>
     640:	90 e0       	ldi	r25, 0x00	; 0
	#endif
	{
		// Output new segment data
		set_led_segments(led_data_buffer[bufActivePos]);
		// Wrap around buffer length
		bufActivePos = inc_buffer_position(bufActivePos );
     642:	90 93 c3 00 	sts	0x00C3, r25
	}
		
	wActivePos = next_wActivePos;
     646:	c0 93 c4 00 	sts	0x00C4, r28
	
	#ifdef CLEAN_OPERATION
	enable_led_segments();
	#endif

}
     64a:	cf 91       	pop	r28
     64c:	08 95       	ret

0000064e <fillLedBuffer>:
//---------------------------------------------//
// Fills buffer from (bufStartPos + offset) 
//	position with single char
//---------------------------------------------//
void fillLedBuffer(int8_t offset, uint8_t length, char c)
{
     64e:	1f 93       	push	r17
     650:	cf 93       	push	r28
     652:	df 93       	push	r29
     654:	18 2f       	mov	r17, r24
     656:	c6 2f       	mov	r28, r22
     658:	84 2f       	mov	r24, r20
	uint8_t val = decode_led_char(c);
     65a:	3f df       	rcall	.-386    	; 0x4da <decode_led_char>
     65c:	d8 2f       	mov	r29, r24
	// Ensure index is inside the buffer
	uint8_t position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
     65e:	80 91 db 00 	lds	r24, 0x00DB
     662:	81 0f       	add	r24, r17
     664:	6f df       	rcall	.-290    	; 0x544 <wrap_led_buffer_index>
// Increments index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t inc_buffer_position(uint8_t position)
{
	return (position >= LED_BUFFER_LENGTH - 1) ? 0 : position + 1;
     666:	90 e0       	ldi	r25, 0x00	; 0
void fillLedBuffer(int8_t offset, uint8_t length, char c)
{
	uint8_t val = decode_led_char(c);
	// Ensure index is inside the buffer
	uint8_t position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
	while(length--)
     668:	0a c0       	rjmp	.+20     	; 0x67e <fillLedBuffer+0x30>
	{
		led_data_buffer[position] = val;
     66a:	e8 2f       	mov	r30, r24
     66c:	f0 e0       	ldi	r31, 0x00	; 0
     66e:	e4 52       	subi	r30, 0x24	; 36
     670:	ff 4f       	sbci	r31, 0xFF	; 255
     672:	d0 83       	st	Z, r29
// Increments index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t inc_buffer_position(uint8_t position)
{
	return (position >= LED_BUFFER_LENGTH - 1) ? 0 : position + 1;
     674:	8d 30       	cpi	r24, 0x0D	; 13
     676:	10 f4       	brcc	.+4      	; 0x67c <fillLedBuffer+0x2e>
     678:	8f 5f       	subi	r24, 0xFF	; 255
     67a:	01 c0       	rjmp	.+2      	; 0x67e <fillLedBuffer+0x30>
     67c:	89 2f       	mov	r24, r25
void fillLedBuffer(int8_t offset, uint8_t length, char c)
{
	uint8_t val = decode_led_char(c);
	// Ensure index is inside the buffer
	uint8_t position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
	while(length--)
     67e:	c1 50       	subi	r28, 0x01	; 1
     680:	a0 f7       	brcc	.-24     	; 0x66a <fillLedBuffer+0x1c>
	{
		led_data_buffer[position] = val;
		position = inc_buffer_position(position);
	}
}
     682:	df 91       	pop	r29
     684:	cf 91       	pop	r28
     686:	1f 91       	pop	r17
     688:	08 95       	ret

0000068a <startShiftingWindowLeft>:
//	LED window left 
//---------------------------------------------//
void startShiftingWindowLeft(void)
{
	// Clear spaces between menu states
	fillLedBuffer(-2,2,' ');
     68a:	40 e2       	ldi	r20, 0x20	; 32
     68c:	62 e0       	ldi	r22, 0x02	; 2
     68e:	8e ef       	ldi	r24, 0xFE	; 254
     690:	de df       	rcall	.-68     	; 0x64e <fillLedBuffer>
	// Set new buffer position for writing
	bufStartPos = wrap_led_buffer_index( (int8_t)bufStartPos - (NUM_DIGITS + 2) );
     692:	80 91 db 00 	lds	r24, 0x00DB
     696:	88 50       	subi	r24, 0x08	; 8
     698:	55 df       	rcall	.-342    	; 0x544 <wrap_led_buffer_index>
     69a:	80 93 db 00 	sts	0x00DB, r24
	// Set shifter state
	shifterState = LED_SHIFT_LEFT;
     69e:	81 e0       	ldi	r24, 0x01	; 1
     6a0:	80 93 da 00 	sts	0x00DA, r24
     6a4:	08 95       	ret

000006a6 <startShiftingWindowRight>:
//	LED window right 
//---------------------------------------------//
void startShiftingWindowRight(void)
{
	// Clear spaces between menu states
	fillLedBuffer(NUM_DIGITS,2,' ');
     6a6:	40 e2       	ldi	r20, 0x20	; 32
     6a8:	62 e0       	ldi	r22, 0x02	; 2
     6aa:	86 e0       	ldi	r24, 0x06	; 6
     6ac:	d0 df       	rcall	.-96     	; 0x64e <fillLedBuffer>
	// Set new buffer position for writing
	bufStartPos = wrap_led_buffer_index( (int8_t)bufStartPos + NUM_DIGITS + 2 );
     6ae:	80 91 db 00 	lds	r24, 0x00DB
     6b2:	88 5f       	subi	r24, 0xF8	; 248
     6b4:	47 df       	rcall	.-370    	; 0x544 <wrap_led_buffer_index>
     6b6:	80 93 db 00 	sts	0x00DB, r24
	// Set shifter state
	shifterState = LED_SHIFT_RIGHT;
     6ba:	82 e0       	ldi	r24, 0x02	; 2
     6bc:	80 93 da 00 	sts	0x00DA, r24
     6c0:	08 95       	ret

000006c2 <initLedIndicator>:
//---------------------------------------------//
//	Initialization
//	Call this function at start of your program
//---------------------------------------------//
void initLedIndicator()
{
     6c2:	cf 93       	push	r28
	uint8_t i;
	// First disable outputs
	disable_led_segments();
     6c4:	ac d0       	rcall	.+344    	; 0x81e <disable_led_segments>
     6c6:	c7 e0       	ldi	r28, 0x07	; 7
	// Fill shift register with non-active levels
	for (i=0;i<NUM_DIGITS_TOTAL;i++)
	{
		led_clock_pulse(!LED_DIGIT_ACT_LVL);
     6c8:	81 e0       	ldi	r24, 0x01	; 1
     6ca:	7d d0       	rcall	.+250    	; 0x7c6 <led_clock_pulse>
     6cc:	c1 50       	subi	r28, 0x01	; 1
{
	uint8_t i;
	// First disable outputs
	disable_led_segments();
	// Fill shift register with non-active levels
	for (i=0;i<NUM_DIGITS_TOTAL;i++)
     6ce:	e1 f7       	brne	.-8      	; 0x6c8 <initLedIndicator+0x6>
	{
		led_clock_pulse(!LED_DIGIT_ACT_LVL);
	}
	// Now enable outputs
	enable_led_segments();
     6d0:	9f d0       	rcall	.+318    	; 0x810 <enable_led_segments>
	
	// Reset pointers
	wStartPos = 0;
     6d2:	10 92 d9 00 	sts	0x00D9, r1
	bufStartPos = 0;
     6d6:	10 92 db 00 	sts	0x00DB, r1
	bufActivePos = 0;
     6da:	10 92 c3 00 	sts	0x00C3, r1
	wActivePos = 0;
     6de:	10 92 c4 00 	sts	0x00C4, r1
	#ifdef 	USE_EXTRA_LED_DIGIT
	extra_led_state = 0;
     6e2:	10 92 d8 00 	sts	0x00D8, r1
	#endif
	
	// Clear the buffer 
	fillLedBuffer(0,LED_BUFFER_LENGTH,' ');
     6e6:	40 e2       	ldi	r20, 0x20	; 32
     6e8:	6e e0       	ldi	r22, 0x0E	; 14
     6ea:	80 e0       	ldi	r24, 0x00	; 0
     6ec:	b0 df       	rcall	.-160    	; 0x64e <fillLedBuffer>
	
	// Initialize shift timer - always enabled, but 
	//	processed only when shifting is active
	shifterState = LED_SHIFT_DONE;
     6ee:	10 92 da 00 	sts	0x00DA, r1
	shiftTimer.Enabled = 1;
     6f2:	e5 ec       	ldi	r30, 0xC5	; 197
     6f4:	f0 e0       	ldi	r31, 0x00	; 0
     6f6:	80 81       	ld	r24, Z
	shiftTimer.RunOnce = 0;
     6f8:	81 60       	ori	r24, 0x01	; 1
     6fa:	8d 7f       	andi	r24, 0xFD	; 253
     6fc:	80 83       	st	Z, r24
	shiftTimer.Top = LED_SHIFT_INTERVAL-1;
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	80 93 c7 00 	sts	0x00C7, r24
}
     704:	cf 91       	pop	r28
     706:	08 95       	ret

00000708 <printLedBuffer>:
//		str - null-terminated char string
// Comma and dot (".", ",") get special processing - first occurrence is added to
// a preceding char, next are displayed as a single digit
//---------------------------------------------//
void printLedBuffer(int8_t offset, char* str)
{
     708:	df 92       	push	r13
     70a:	ef 92       	push	r14
     70c:	ff 92       	push	r15
     70e:	0f 93       	push	r16
     710:	1f 93       	push	r17
     712:	cf 93       	push	r28
     714:	df 93       	push	r29
     716:	eb 01       	movw	r28, r22
	char c;
	uint8_t decoded_sym;
	uint8_t state = 0x02;
	uint8_t comma_pos;
	// Ensure index is inside the buffer
	uint8_t buffer_position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
     718:	90 91 db 00 	lds	r25, 0x00DB
     71c:	89 0f       	add	r24, r25
     71e:	12 df       	rcall	.-476    	; 0x544 <wrap_led_buffer_index>
     720:	18 2f       	mov	r17, r24
	comma_pos = buffer_position;
     722:	d8 2e       	mov	r13, r24
//---------------------------------------------//
void printLedBuffer(int8_t offset, char* str)
{
	char c;
	uint8_t decoded_sym;
	uint8_t state = 0x02;
     724:	02 e0       	ldi	r16, 0x02	; 2
		comma_pos = buffer_position;
		if (state != 0x01)
		{
			buffer_position = inc_buffer_position(buffer_position);
		}
		state = (state & 0x01) ? 0x03 : 0x00;		
     726:	f1 2c       	mov	r15, r1
     728:	0f 2e       	mov	r0, r31
     72a:	f3 e0       	ldi	r31, 0x03	; 3
     72c:	ef 2e       	mov	r14, r31
     72e:	f0 2d       	mov	r31, r0
	uint8_t comma_pos;
	// Ensure index is inside the buffer
	uint8_t buffer_position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
	comma_pos = buffer_position;
	// Output chars
	while((c = *str++))
     730:	26 c0       	rjmp	.+76     	; 0x77e <printLedBuffer+0x76>
	{
		decoded_sym = decode_led_char(c);
     732:	d3 de       	rcall	.-602    	; 0x4da <decode_led_char>
		state = (decoded_sym == SEGH) ? (state | 0x01) : (state & ~0x01);
     734:	80 38       	cpi	r24, 0x80	; 128
     736:	19 f4       	brne	.+6      	; 0x73e <printLedBuffer+0x36>
     738:	90 2f       	mov	r25, r16
     73a:	91 60       	ori	r25, 0x01	; 1
     73c:	02 c0       	rjmp	.+4      	; 0x742 <printLedBuffer+0x3a>
     73e:	90 2f       	mov	r25, r16
     740:	9e 7f       	andi	r25, 0xFE	; 254
		if (state == 0x01)			
     742:	91 30       	cpi	r25, 0x01	; 1
     744:	51 f4       	brne	.+20     	; 0x75a <printLedBuffer+0x52>
		{
			led_data_buffer[comma_pos] |= decoded_sym;
     746:	ed 2d       	mov	r30, r13
     748:	f0 e0       	ldi	r31, 0x00	; 0
     74a:	e4 52       	subi	r30, 0x24	; 36
     74c:	ff 4f       	sbci	r31, 0xFF	; 255
     74e:	90 81       	ld	r25, Z
     750:	89 2b       	or	r24, r25
     752:	80 83       	st	Z, r24
     754:	81 2f       	mov	r24, r17
		comma_pos = buffer_position;
		if (state != 0x01)
		{
			buffer_position = inc_buffer_position(buffer_position);
		}
		state = (state & 0x01) ? 0x03 : 0x00;		
     756:	0e 2d       	mov	r16, r14
     758:	10 c0       	rjmp	.+32     	; 0x77a <printLedBuffer+0x72>
		{
			led_data_buffer[comma_pos] |= decoded_sym;
		}
		else
		{
			led_data_buffer[buffer_position] = decoded_sym;	
     75a:	e1 2f       	mov	r30, r17
     75c:	f0 e0       	ldi	r31, 0x00	; 0
     75e:	e4 52       	subi	r30, 0x24	; 36
     760:	ff 4f       	sbci	r31, 0xFF	; 255
     762:	80 83       	st	Z, r24
// Increments index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t inc_buffer_position(uint8_t position)
{
	return (position >= LED_BUFFER_LENGTH - 1) ? 0 : position + 1;
     764:	1d 30       	cpi	r17, 0x0D	; 13
     766:	18 f4       	brcc	.+6      	; 0x76e <printLedBuffer+0x66>
     768:	81 2f       	mov	r24, r17
     76a:	8f 5f       	subi	r24, 0xFF	; 255
     76c:	01 c0       	rjmp	.+2      	; 0x770 <printLedBuffer+0x68>
     76e:	8f 2d       	mov	r24, r15
		comma_pos = buffer_position;
		if (state != 0x01)
		{
			buffer_position = inc_buffer_position(buffer_position);
		}
		state = (state & 0x01) ? 0x03 : 0x00;		
     770:	90 ff       	sbrs	r25, 0
     772:	02 c0       	rjmp	.+4      	; 0x778 <printLedBuffer+0x70>
     774:	0e 2d       	mov	r16, r14
     776:	01 c0       	rjmp	.+2      	; 0x77a <printLedBuffer+0x72>
     778:	0f 2d       	mov	r16, r15
     77a:	d1 2e       	mov	r13, r17
     77c:	18 2f       	mov	r17, r24
	uint8_t comma_pos;
	// Ensure index is inside the buffer
	uint8_t buffer_position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
	comma_pos = buffer_position;
	// Output chars
	while((c = *str++))
     77e:	89 91       	ld	r24, Y+
     780:	81 11       	cpse	r24, r1
     782:	d7 cf       	rjmp	.-82     	; 0x732 <printLedBuffer+0x2a>
		{
			buffer_position = inc_buffer_position(buffer_position);
		}
		state = (state & 0x01) ? 0x03 : 0x00;		
	}
}
     784:	df 91       	pop	r29
     786:	cf 91       	pop	r28
     788:	1f 91       	pop	r17
     78a:	0f 91       	pop	r16
     78c:	ff 90       	pop	r15
     78e:	ef 90       	pop	r14
     790:	df 90       	pop	r13
     792:	08 95       	ret

00000794 <setComma>:
//	buffer cell
//---------------------------------------------//
void setComma(int8_t offset)
{
	// Ensure index is inside the buffer
	uint8_t position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
     794:	90 91 db 00 	lds	r25, 0x00DB
     798:	89 0f       	add	r24, r25
     79a:	d4 de       	rcall	.-600    	; 0x544 <wrap_led_buffer_index>
	led_data_buffer[position] |= (SEGH);
     79c:	e8 2f       	mov	r30, r24
     79e:	f0 e0       	ldi	r31, 0x00	; 0
     7a0:	e4 52       	subi	r30, 0x24	; 36
     7a2:	ff 4f       	sbci	r31, 0xFF	; 255
     7a4:	80 81       	ld	r24, Z
     7a6:	80 68       	ori	r24, 0x80	; 128
     7a8:	80 83       	st	Z, r24
     7aa:	08 95       	ret

000007ac <setExtraLeds>:
// Argument is ORed with current LED state
//---------------------------------------------//
inline void setExtraLeds(uint8_t leds_set_value)
{
		//asm("cli");
		extra_led_state |= leds_set_value;
     7ac:	90 91 d8 00 	lds	r25, 0x00D8
     7b0:	89 2b       	or	r24, r25
     7b2:	80 93 d8 00 	sts	0x00D8, r24
     7b6:	08 95       	ret

000007b8 <clearExtraLeds>:
// Argument is AND NOTed with current LED state
//---------------------------------------------//
inline void clearExtraLeds(uint8_t leds_clear_value)
{
		//asm("cli");
		extra_led_state &= ~leds_clear_value;
     7b8:	90 91 d8 00 	lds	r25, 0x00D8
     7bc:	80 95       	com	r24
     7be:	98 23       	and	r25, r24
     7c0:	90 93 d8 00 	sts	0x00D8, r25
     7c4:	08 95       	ret

000007c6 <led_clock_pulse>:


// Clocks in bit into the shift register
void led_clock_pulse(uint8_t bit)
{
	if (bit)
     7c6:	88 23       	and	r24, r24
     7c8:	11 f0       	breq	.+4      	; 0x7ce <led_clock_pulse+0x8>
		PORTB |= (1<<PB_LED_DOUT);
     7ca:	c0 9a       	sbi	0x18, 0	; 24
     7cc:	01 c0       	rjmp	.+2      	; 0x7d0 <led_clock_pulse+0xa>
	else
		PORTB &= ~(1<<PB_LED_DOUT);
     7ce:	c0 98       	cbi	0x18, 0	; 24
     7d0:	8a e1       	ldi	r24, 0x1A	; 26
     7d2:	8a 95       	dec	r24
     7d4:	f1 f7       	brne	.-4      	; 0x7d2 <led_clock_pulse+0xc>
     7d6:	00 c0       	rjmp	.+0      	; 0x7d8 <led_clock_pulse+0x12>
	_delay_us(SETUP_DELAY_US);
	PORTB |= (1<<PB_LED_CLK);
     7d8:	c2 9a       	sbi	0x18, 2	; 24
     7da:	8a e1       	ldi	r24, 0x1A	; 26
     7dc:	8a 95       	dec	r24
     7de:	f1 f7       	brne	.-4      	; 0x7dc <led_clock_pulse+0x16>
     7e0:	00 c0       	rjmp	.+0      	; 0x7e2 <led_clock_pulse+0x1c>
	_delay_us(SHIFT_DELAY_US);
	PORTB &= ~(1<<PB_LED_CLK);
     7e2:	c2 98       	cbi	0x18, 2	; 24
     7e4:	08 95       	ret

000007e6 <set_led_segments>:
// Outputs decoded segment data to port bits
void set_led_segments(uint8_t seg_ch)
{
	uint8_t pdat;
	seg_ch ^= LED_SEGMENT_MASK;
	pdat = PORTC & ~( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
     7e6:	95 b3       	in	r25, 0x15	; 21
	pdat |= (seg_ch & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
     7e8:	28 2f       	mov	r18, r24
     7ea:	2f 71       	andi	r18, 0x1F	; 31
// Outputs decoded segment data to port bits
void set_led_segments(uint8_t seg_ch)
{
	uint8_t pdat;
	seg_ch ^= LED_SEGMENT_MASK;
	pdat = PORTC & ~( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
     7ec:	90 7e       	andi	r25, 0xE0	; 224
	pdat |= (seg_ch & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
     7ee:	92 2b       	or	r25, r18
	PORTC = pdat;
     7f0:	95 bb       	out	0x15, r25	; 21
	seg_ch >>= 2;
	pdat = PORTB & ~( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     7f2:	98 b3       	in	r25, 0x18	; 24
	uint8_t pdat;
	seg_ch ^= LED_SEGMENT_MASK;
	pdat = PORTC & ~( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
	pdat |= (seg_ch & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
	PORTC = pdat;
	seg_ch >>= 2;
     7f4:	86 95       	lsr	r24
     7f6:	86 95       	lsr	r24
	pdat = PORTB & ~( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
	pdat |= (seg_ch & ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) ));
     7f8:	88 73       	andi	r24, 0x38	; 56
	seg_ch ^= LED_SEGMENT_MASK;
	pdat = PORTC & ~( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
	pdat |= (seg_ch & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
	PORTC = pdat;
	seg_ch >>= 2;
	pdat = PORTB & ~( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     7fa:	97 7c       	andi	r25, 0xC7	; 199
	pdat |= (seg_ch & ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) ));
     7fc:	89 2b       	or	r24, r25
	PORTB = pdat;
     7fe:	88 bb       	out	0x18, r24	; 24
     800:	08 95       	ret

00000802 <enable_led_segments_pullups>:

// Turns segment port bits to HI-Z and
// enables pull-ups
void enable_led_segments_pullups()
{
	PORTC |= ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
     802:	85 b3       	in	r24, 0x15	; 21
     804:	8f 61       	ori	r24, 0x1F	; 31
     806:	85 bb       	out	0x15, r24	; 21
	PORTB |= ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     808:	88 b3       	in	r24, 0x18	; 24
     80a:	88 63       	ori	r24, 0x38	; 56
     80c:	88 bb       	out	0x18, r24	; 24
     80e:	08 95       	ret

00000810 <enable_led_segments>:
}	

void enable_led_segments()
{
	DDRC |= ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
     810:	84 b3       	in	r24, 0x14	; 20
     812:	8f 61       	ori	r24, 0x1F	; 31
     814:	84 bb       	out	0x14, r24	; 20
	DDRB |= ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     816:	87 b3       	in	r24, 0x17	; 23
     818:	88 63       	ori	r24, 0x38	; 56
     81a:	87 bb       	out	0x17, r24	; 23
     81c:	08 95       	ret

0000081e <disable_led_segments>:
}

void disable_led_segments()
{
	DDRC &= ~( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
     81e:	84 b3       	in	r24, 0x14	; 20
     820:	80 7e       	andi	r24, 0xE0	; 224
     822:	84 bb       	out	0x14, r24	; 20
	DDRB &= ~( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     824:	87 b3       	in	r24, 0x17	; 23
     826:	87 7c       	andi	r24, 0xC7	; 199
     828:	87 bb       	out	0x17, r24	; 23
     82a:	08 95       	ret

0000082c <capture_button_state>:


void capture_button_state()
{
	uint8_t pdat;
	pdat = PINB  & ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     82c:	86 b3       	in	r24, 0x16	; 22
     82e:	88 73       	andi	r24, 0x38	; 56
	pdat <<= 2;
	pdat |= (PINC & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
     830:	93 b3       	in	r25, 0x13	; 19

void capture_button_state()
{
	uint8_t pdat;
	pdat = PINB  & ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
	pdat <<= 2;
     832:	88 0f       	add	r24, r24
     834:	88 0f       	add	r24, r24
	pdat |= (PINC & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
     836:	9f 71       	andi	r25, 0x1F	; 31
     838:	89 2b       	or	r24, r25
	raw_button_state = pdat ^ RAW_BUTTONS_INVERSE_MASK;
     83a:	80 95       	com	r24
     83c:	80 93 ea 00 	sts	0x00EA, r24
     840:	08 95       	ret

00000842 <restartMenuTimer>:
//	 Restarts menu state timeout
//	Should be used in RUN function when control buttons are pressed.
//-----------------------------------------------------------------//
static void restartMenuTimer(void)
{
	menuTimer.Timer = 0;
     842:	10 92 ed 00 	sts	0x00ED, r1
     846:	08 95       	ret

00000848 <mf_setTempLeave>:
		clearExtraLeds(LED_TEMP);
}

void mf_setTempLeave(void)
{
	userTimer.Enabled = 0;
     848:	e0 ef       	ldi	r30, 0xF0	; 240
     84a:	f0 e0       	ldi	r31, 0x00	; 0
     84c:	80 81       	ld	r24, Z
     84e:	8e 7f       	andi	r24, 0xFE	; 254
     850:	80 83       	st	Z, r24
     852:	08 95       	ret

00000854 <mf_leafSelectAct>:
	userTimer.FA_GE = 1;	
}

void mf_leafSelectAct(void)
{
	userTimer.Timer = 0;
     854:	10 92 f1 00 	sts	0x00F1, r1
	userTimer.Top = BLINK_PERIOD - 1;
     858:	87 e0       	ldi	r24, 0x07	; 7
     85a:	80 93 f2 00 	sts	0x00F2, r24
	userTimer.CompA = BLINK_PERIOD / 2;
     85e:	84 e0       	ldi	r24, 0x04	; 4
     860:	80 93 f3 00 	sts	0x00F3, r24
	userTimer.Enabled = 1;
     864:	e0 ef       	ldi	r30, 0xF0	; 240
     866:	f0 e0       	ldi	r31, 0x00	; 0
     868:	80 81       	ld	r24, Z
     86a:	81 60       	ori	r24, 0x01	; 1
     86c:	80 83       	st	Z, r24
     86e:	08 95       	ret

00000870 <mf_leafExit>:
}

void mf_leafExit(void)
{
	userTimer.Enabled = 0;	
     870:	e0 ef       	ldi	r30, 0xF0	; 240
     872:	f0 e0       	ldi	r31, 0x00	; 0
     874:	80 81       	ld	r24, Z
     876:	8e 7f       	andi	r24, 0xFE	; 254
     878:	80 83       	st	Z, r24
     87a:	08 95       	ret

0000087c <mf_cdone1Select>:
}

//---------------------------------------------//

void mf_cdone1Select(void)
{
     87c:	08 95       	ret

0000087e <mf_cdone2Select>:
	// Calculate new coefficient for temperature conversion
}

void mf_cdone2Select(void)
{
     87e:	08 95       	ret

00000880 <mf_cdoneDo>:
	// Calculate new coefficient for temperature conversion
}

void mf_cdoneDo(void)
{
	printLedBuffer(0," DONE ");
     880:	68 e9       	ldi	r22, 0x98	; 152
     882:	70 e0       	ldi	r23, 0x00	; 0
     884:	80 e0       	ldi	r24, 0x00	; 0
     886:	40 df       	rcall	.-384    	; 0x708 <printLedBuffer>
     888:	08 95       	ret

0000088a <mf_calib2Do>:
}

//---------------------------------------------//

void mf_calib2Do(void)
{
     88a:	cf 93       	push	r28
     88c:	df 93       	push	r29
     88e:	cd b7       	in	r28, 0x3d	; 61
     890:	de b7       	in	r29, 0x3e	; 62
     892:	27 97       	sbiw	r28, 0x07	; 7
     894:	0f b6       	in	r0, 0x3f	; 63
     896:	f8 94       	cli
     898:	de bf       	out	0x3e, r29	; 62
     89a:	0f be       	out	0x3f, r0	; 63
     89c:	cd bf       	out	0x3d, r28	; 61
	char str[] = {'P','2',' ',' ',' ',' ',0};
     89e:	87 e0       	ldi	r24, 0x07	; 7
     8a0:	ee e6       	ldi	r30, 0x6E	; 110
     8a2:	f0 e0       	ldi	r31, 0x00	; 0
     8a4:	de 01       	movw	r26, r28
     8a6:	11 96       	adiw	r26, 0x01	; 1
     8a8:	01 90       	ld	r0, Z+
     8aa:	0d 92       	st	X+, r0
     8ac:	8a 95       	dec	r24
     8ae:	e1 f7       	brne	.-8      	; 0x8a8 <mf_calib2Do+0x1e>
	
	
	if (button_state & (BD_UP | BR_UP))
     8b0:	80 91 be 00 	lds	r24, 0x00BE
     8b4:	90 91 bf 00 	lds	r25, 0x00BF
     8b8:	9c 01       	movw	r18, r24
     8ba:	22 70       	andi	r18, 0x02	; 2
     8bc:	34 70       	andi	r19, 0x04	; 4
     8be:	23 2b       	or	r18, r19
     8c0:	41 f0       	breq	.+16     	; 0x8d2 <mf_calib2Do+0x48>
	{
		if (cpoint2 < MAX_CALIB_TEMP)
     8c2:	80 91 62 00 	lds	r24, 0x0062
     8c6:	8a 3f       	cpi	r24, 0xFA	; 250
     8c8:	78 f4       	brcc	.+30     	; 0x8e8 <mf_calib2Do+0x5e>
		cpoint2 += 1;
     8ca:	8f 5f       	subi	r24, 0xFF	; 255
     8cc:	80 93 62 00 	sts	0x0062, r24
     8d0:	0b c0       	rjmp	.+22     	; 0x8e8 <mf_calib2Do+0x5e>
	}
	else if (button_state & (BD_DOWN | BR_DOWN))
     8d2:	84 70       	andi	r24, 0x04	; 4
     8d4:	98 70       	andi	r25, 0x08	; 8
     8d6:	89 2b       	or	r24, r25
     8d8:	39 f0       	breq	.+14     	; 0x8e8 <mf_calib2Do+0x5e>
	{
		if (cpoint2 > MIN_CALIB_TEMP)
     8da:	80 91 62 00 	lds	r24, 0x0062
     8de:	8b 30       	cpi	r24, 0x0B	; 11
     8e0:	18 f0       	brcs	.+6      	; 0x8e8 <mf_calib2Do+0x5e>
		cpoint2 -= 1;
     8e2:	81 50       	subi	r24, 0x01	; 1
     8e4:	80 93 62 00 	sts	0x0062, r24
	}
	
	if (userTimer.FA_GE)
     8e8:	80 91 f0 00 	lds	r24, 0x00F0
     8ec:	84 ff       	sbrs	r24, 4
     8ee:	09 c0       	rjmp	.+18     	; 0x902 <mf_calib2Do+0x78>
	{
		u16toa_align_right(cpoint2,str + 3,0x80 | 3,' ');
     8f0:	20 e2       	ldi	r18, 0x20	; 32
     8f2:	43 e8       	ldi	r20, 0x83	; 131
     8f4:	be 01       	movw	r22, r28
     8f6:	6c 5f       	subi	r22, 0xFC	; 252
     8f8:	7f 4f       	sbci	r23, 0xFF	; 255
     8fa:	80 91 62 00 	lds	r24, 0x0062
     8fe:	90 e0       	ldi	r25, 0x00	; 0
     900:	01 d3       	rcall	.+1538   	; 0xf04 <u16toa_align_right>
	}
	
	printLedBuffer(0,str);
     902:	be 01       	movw	r22, r28
     904:	6f 5f       	subi	r22, 0xFF	; 255
     906:	7f 4f       	sbci	r23, 0xFF	; 255
     908:	80 e0       	ldi	r24, 0x00	; 0
     90a:	fe de       	rcall	.-516    	; 0x708 <printLedBuffer>
	
}
     90c:	27 96       	adiw	r28, 0x07	; 7
     90e:	0f b6       	in	r0, 0x3f	; 63
     910:	f8 94       	cli
     912:	de bf       	out	0x3e, r29	; 62
     914:	0f be       	out	0x3f, r0	; 63
     916:	cd bf       	out	0x3d, r28	; 61
     918:	df 91       	pop	r29
     91a:	cf 91       	pop	r28
     91c:	08 95       	ret

0000091e <mf_calib1Do>:
	// restore cpoint1, cpoint2
	mf_leafSelect();
}

void mf_calib1Do(void)
{
     91e:	cf 93       	push	r28
     920:	df 93       	push	r29
     922:	cd b7       	in	r28, 0x3d	; 61
     924:	de b7       	in	r29, 0x3e	; 62
     926:	27 97       	sbiw	r28, 0x07	; 7
     928:	0f b6       	in	r0, 0x3f	; 63
     92a:	f8 94       	cli
     92c:	de bf       	out	0x3e, r29	; 62
     92e:	0f be       	out	0x3f, r0	; 63
     930:	cd bf       	out	0x3d, r28	; 61
	char str[] = {'P','1',' ',' ',' ',' ',0};
     932:	87 e0       	ldi	r24, 0x07	; 7
     934:	e5 e7       	ldi	r30, 0x75	; 117
     936:	f0 e0       	ldi	r31, 0x00	; 0
     938:	de 01       	movw	r26, r28
     93a:	11 96       	adiw	r26, 0x01	; 1
     93c:	01 90       	ld	r0, Z+
     93e:	0d 92       	st	X+, r0
     940:	8a 95       	dec	r24
     942:	e1 f7       	brne	.-8      	; 0x93c <mf_calib1Do+0x1e>
	
	
	if (button_state & (BD_UP | BR_UP))
     944:	80 91 be 00 	lds	r24, 0x00BE
     948:	90 91 bf 00 	lds	r25, 0x00BF
     94c:	9c 01       	movw	r18, r24
     94e:	22 70       	andi	r18, 0x02	; 2
     950:	34 70       	andi	r19, 0x04	; 4
     952:	23 2b       	or	r18, r19
     954:	41 f0       	breq	.+16     	; 0x966 <mf_calib1Do+0x48>
	{
		if (cpoint1 < MAX_CALIB_TEMP)
     956:	80 91 63 00 	lds	r24, 0x0063
     95a:	8a 3f       	cpi	r24, 0xFA	; 250
     95c:	78 f4       	brcc	.+30     	; 0x97c <mf_calib1Do+0x5e>
			cpoint1 += 1;
     95e:	8f 5f       	subi	r24, 0xFF	; 255
     960:	80 93 63 00 	sts	0x0063, r24
     964:	0b c0       	rjmp	.+22     	; 0x97c <mf_calib1Do+0x5e>
	}
	else if (button_state & (BD_DOWN | BR_DOWN))
     966:	84 70       	andi	r24, 0x04	; 4
     968:	98 70       	andi	r25, 0x08	; 8
     96a:	89 2b       	or	r24, r25
     96c:	39 f0       	breq	.+14     	; 0x97c <mf_calib1Do+0x5e>
	{
		if (cpoint1 > MIN_CALIB_TEMP)
     96e:	80 91 63 00 	lds	r24, 0x0063
     972:	8b 30       	cpi	r24, 0x0B	; 11
     974:	18 f0       	brcs	.+6      	; 0x97c <mf_calib1Do+0x5e>
			cpoint1 -= 1;
     976:	81 50       	subi	r24, 0x01	; 1
     978:	80 93 63 00 	sts	0x0063, r24
	}
	
	if (userTimer.FA_GE)
     97c:	80 91 f0 00 	lds	r24, 0x00F0
     980:	84 ff       	sbrs	r24, 4
     982:	09 c0       	rjmp	.+18     	; 0x996 <mf_calib1Do+0x78>
	{
		u16toa_align_right(cpoint1,str + 3,0x80 | 3,' ');
     984:	20 e2       	ldi	r18, 0x20	; 32
     986:	43 e8       	ldi	r20, 0x83	; 131
     988:	be 01       	movw	r22, r28
     98a:	6c 5f       	subi	r22, 0xFC	; 252
     98c:	7f 4f       	sbci	r23, 0xFF	; 255
     98e:	80 91 63 00 	lds	r24, 0x0063
     992:	90 e0       	ldi	r25, 0x00	; 0
     994:	b7 d2       	rcall	.+1390   	; 0xf04 <u16toa_align_right>
	}
	
	printLedBuffer(0,str);
     996:	be 01       	movw	r22, r28
     998:	6f 5f       	subi	r22, 0xFF	; 255
     99a:	7f 4f       	sbci	r23, 0xFF	; 255
     99c:	80 e0       	ldi	r24, 0x00	; 0
     99e:	b4 de       	rcall	.-664    	; 0x708 <printLedBuffer>
}
     9a0:	27 96       	adiw	r28, 0x07	; 7
     9a2:	0f b6       	in	r0, 0x3f	; 63
     9a4:	f8 94       	cli
     9a6:	de bf       	out	0x3e, r29	; 62
     9a8:	0f be       	out	0x3f, r0	; 63
     9aa:	cd bf       	out	0x3d, r28	; 61
     9ac:	df 91       	pop	r29
     9ae:	cf 91       	pop	r28
     9b0:	08 95       	ret

000009b2 <mf_autopoffDo>:

//---------------------------------------------//


void mf_autopoffDo(void)
{
     9b2:	cf 93       	push	r28
     9b4:	df 93       	push	r29
     9b6:	cd b7       	in	r28, 0x3d	; 61
     9b8:	de b7       	in	r29, 0x3e	; 62
     9ba:	27 97       	sbiw	r28, 0x07	; 7
     9bc:	0f b6       	in	r0, 0x3f	; 63
     9be:	f8 94       	cli
     9c0:	de bf       	out	0x3e, r29	; 62
     9c2:	0f be       	out	0x3f, r0	; 63
     9c4:	cd bf       	out	0x3d, r28	; 61
	char str[] = {'O','F','F',' ',' ',' ',0};
     9c6:	87 e0       	ldi	r24, 0x07	; 7
     9c8:	ec e7       	ldi	r30, 0x7C	; 124
     9ca:	f0 e0       	ldi	r31, 0x00	; 0
     9cc:	de 01       	movw	r26, r28
     9ce:	11 96       	adiw	r26, 0x01	; 1
     9d0:	01 90       	ld	r0, Z+
     9d2:	0d 92       	st	X+, r0
     9d4:	8a 95       	dec	r24
     9d6:	e1 f7       	brne	.-8      	; 0x9d0 <mf_autopoffDo+0x1e>
		
		
	if (button_state & (BD_UP | BR_UP))
     9d8:	80 91 be 00 	lds	r24, 0x00BE
     9dc:	90 91 bf 00 	lds	r25, 0x00BF
     9e0:	9c 01       	movw	r18, r24
     9e2:	22 70       	andi	r18, 0x02	; 2
     9e4:	34 70       	andi	r19, 0x04	; 4
     9e6:	23 2b       	or	r18, r19
     9e8:	49 f0       	breq	.+18     	; 0x9fc <mf_autopoffDo+0x4a>
	{
		if (power_off_timeout < MAX_POWEROFF_TIMEOUT)
     9ea:	80 91 64 00 	lds	r24, 0x0064
     9ee:	8f 35       	cpi	r24, 0x5F	; 95
     9f0:	18 f4       	brcc	.+6      	; 0x9f8 <mf_autopoffDo+0x46>
			power_off_timeout += 5;
     9f2:	8b 5f       	subi	r24, 0xFB	; 251
     9f4:	80 93 64 00 	sts	0x0064, r24
		restartMenuTimer();
     9f8:	24 df       	rcall	.-440    	; 0x842 <restartMenuTimer>
     9fa:	0c c0       	rjmp	.+24     	; 0xa14 <mf_autopoffDo+0x62>
	}
	else if (button_state & (BD_DOWN | BR_DOWN))
     9fc:	84 70       	andi	r24, 0x04	; 4
     9fe:	98 70       	andi	r25, 0x08	; 8
     a00:	89 2b       	or	r24, r25
     a02:	41 f0       	breq	.+16     	; 0xa14 <mf_autopoffDo+0x62>
	{
		if (power_off_timeout > MIN_POWEROFF_TIMEOUT)
     a04:	80 91 64 00 	lds	r24, 0x0064
     a08:	86 30       	cpi	r24, 0x06	; 6
     a0a:	18 f0       	brcs	.+6      	; 0xa12 <mf_autopoffDo+0x60>
			power_off_timeout -= 5;
     a0c:	85 50       	subi	r24, 0x05	; 5
     a0e:	80 93 64 00 	sts	0x0064, r24
		restartMenuTimer();
     a12:	17 df       	rcall	.-466    	; 0x842 <restartMenuTimer>
	}	
		
	if (userTimer.FA_GE)
     a14:	80 91 f0 00 	lds	r24, 0x00F0
     a18:	84 ff       	sbrs	r24, 4
     a1a:	10 c0       	rjmp	.+32     	; 0xa3c <mf_autopoffDo+0x8a>
	{
		if (power_off_timeout != MAX_POWEROFF_TIMEOUT)
     a1c:	80 91 64 00 	lds	r24, 0x0064
     a20:	8f 35       	cpi	r24, 0x5F	; 95
     a22:	41 f0       	breq	.+16     	; 0xa34 <mf_autopoffDo+0x82>
			u16toa_align_right(power_off_timeout,str + 4,0x80 | 2,' ');	
     a24:	20 e2       	ldi	r18, 0x20	; 32
     a26:	42 e8       	ldi	r20, 0x82	; 130
     a28:	be 01       	movw	r22, r28
     a2a:	6b 5f       	subi	r22, 0xFB	; 251
     a2c:	7f 4f       	sbci	r23, 0xFF	; 255
     a2e:	90 e0       	ldi	r25, 0x00	; 0
     a30:	69 d2       	rcall	.+1234   	; 0xf04 <u16toa_align_right>
     a32:	04 c0       	rjmp	.+8      	; 0xa3c <mf_autopoffDo+0x8a>
		else 
		{
			str[4] = 'N';
     a34:	8e e4       	ldi	r24, 0x4E	; 78
     a36:	8d 83       	std	Y+5, r24	; 0x05
			str[5] = 'O';
     a38:	8f e4       	ldi	r24, 0x4F	; 79
     a3a:	8e 83       	std	Y+6, r24	; 0x06
		}			
	}		
		
	printLedBuffer(0,str);
     a3c:	be 01       	movw	r22, r28
     a3e:	6f 5f       	subi	r22, 0xFF	; 255
     a40:	7f 4f       	sbci	r23, 0xFF	; 255
     a42:	80 e0       	ldi	r24, 0x00	; 0
     a44:	61 de       	rcall	.-830    	; 0x708 <printLedBuffer>
}
     a46:	27 96       	adiw	r28, 0x07	; 7
     a48:	0f b6       	in	r0, 0x3f	; 63
     a4a:	f8 94       	cli
     a4c:	de bf       	out	0x3e, r29	; 62
     a4e:	0f be       	out	0x3f, r0	; 63
     a50:	cd bf       	out	0x3d, r28	; 61
     a52:	df 91       	pop	r29
     a54:	cf 91       	pop	r28
     a56:	08 95       	ret

00000a58 <mf_rollDo>:
{
	setExtraLeds(LED_ROLL);
}

void mf_rollDo(void)
{
     a58:	cf 93       	push	r28
     a5a:	df 93       	push	r29
     a5c:	cd b7       	in	r28, 0x3d	; 61
     a5e:	de b7       	in	r29, 0x3e	; 62
     a60:	27 97       	sbiw	r28, 0x07	; 7
     a62:	0f b6       	in	r0, 0x3f	; 63
     a64:	f8 94       	cli
     a66:	de bf       	out	0x3e, r29	; 62
     a68:	0f be       	out	0x3f, r0	; 63
     a6a:	cd bf       	out	0x3d, r28	; 61
	char str[] = {' ',' ',' ',' ',' ',' ',0};
     a6c:	87 e0       	ldi	r24, 0x07	; 7
     a6e:	e3 e8       	ldi	r30, 0x83	; 131
     a70:	f0 e0       	ldi	r31, 0x00	; 0
     a72:	de 01       	movw	r26, r28
     a74:	11 96       	adiw	r26, 0x01	; 1
     a76:	01 90       	ld	r0, Z+
     a78:	0d 92       	st	X+, r0
     a7a:	8a 95       	dec	r24
     a7c:	e1 f7       	brne	.-8      	; 0xa76 <mf_rollDo+0x1e>
		
	if (button_state & (BD_UP | BR_UP))
     a7e:	80 91 be 00 	lds	r24, 0x00BE
     a82:	90 91 bf 00 	lds	r25, 0x00BF
     a86:	9c 01       	movw	r18, r24
     a88:	22 70       	andi	r18, 0x02	; 2
     a8a:	34 70       	andi	r19, 0x04	; 4
     a8c:	23 2b       	or	r18, r19
     a8e:	41 f0       	breq	.+16     	; 0xaa0 <mf_rollDo+0x48>
	{
		if (rollCycleSet < MAX_ROLL_CYCLES)
     a90:	80 91 66 00 	lds	r24, 0x0066
     a94:	83 36       	cpi	r24, 0x63	; 99
     a96:	78 f4       	brcc	.+30     	; 0xab6 <mf_rollDo+0x5e>
		rollCycleSet += 1;
     a98:	8f 5f       	subi	r24, 0xFF	; 255
     a9a:	80 93 66 00 	sts	0x0066, r24
     a9e:	0b c0       	rjmp	.+22     	; 0xab6 <mf_rollDo+0x5e>
	}
	else if (button_state & (BD_DOWN | BR_DOWN))
     aa0:	84 70       	andi	r24, 0x04	; 4
     aa2:	98 70       	andi	r25, 0x08	; 8
     aa4:	89 2b       	or	r24, r25
     aa6:	39 f0       	breq	.+14     	; 0xab6 <mf_rollDo+0x5e>
	{
		if (rollCycleSet > MIN_ROLL_CYCLES)
     aa8:	80 91 66 00 	lds	r24, 0x0066
     aac:	82 30       	cpi	r24, 0x02	; 2
     aae:	18 f0       	brcs	.+6      	; 0xab6 <mf_rollDo+0x5e>
		rollCycleSet -= 1;
     ab0:	81 50       	subi	r24, 0x01	; 1
     ab2:	80 93 66 00 	sts	0x0066, r24
	}	
		
	u16toa_align_right(rollCycleSet,str + 4,0x80 | 2,' ');
     ab6:	20 e2       	ldi	r18, 0x20	; 32
     ab8:	42 e8       	ldi	r20, 0x82	; 130
     aba:	be 01       	movw	r22, r28
     abc:	6b 5f       	subi	r22, 0xFB	; 251
     abe:	7f 4f       	sbci	r23, 0xFF	; 255
     ac0:	80 91 66 00 	lds	r24, 0x0066
     ac4:	90 e0       	ldi	r25, 0x00	; 0
     ac6:	1e d2       	rcall	.+1084   	; 0xf04 <u16toa_align_right>
	
	if (rollState & ROLL_CYCLE)
     ac8:	80 91 ce 00 	lds	r24, 0x00CE
     acc:	82 ff       	sbrs	r24, 2
     ace:	09 c0       	rjmp	.+18     	; 0xae2 <mf_rollDo+0x8a>
	{
		u16toa_align_right(activeRollCycle,str + 1,0x80 | 2,' ');
     ad0:	20 e2       	ldi	r18, 0x20	; 32
     ad2:	42 e8       	ldi	r20, 0x82	; 130
     ad4:	be 01       	movw	r22, r28
     ad6:	6e 5f       	subi	r22, 0xFE	; 254
     ad8:	7f 4f       	sbci	r23, 0xFF	; 255
     ada:	80 91 fb 00 	lds	r24, 0x00FB
     ade:	90 e0       	ldi	r25, 0x00	; 0
     ae0:	11 d2       	rcall	.+1058   	; 0xf04 <u16toa_align_right>
	}
	
	printLedBuffer(0,str);
     ae2:	be 01       	movw	r22, r28
     ae4:	6f 5f       	subi	r22, 0xFF	; 255
     ae6:	7f 4f       	sbci	r23, 0xFF	; 255
     ae8:	80 e0       	ldi	r24, 0x00	; 0
     aea:	0e de       	rcall	.-996    	; 0x708 <printLedBuffer>
}
     aec:	27 96       	adiw	r28, 0x07	; 7
     aee:	0f b6       	in	r0, 0x3f	; 63
     af0:	f8 94       	cli
     af2:	de bf       	out	0x3e, r29	; 62
     af4:	0f be       	out	0x3f, r0	; 63
     af6:	cd bf       	out	0x3d, r28	; 61
     af8:	df 91       	pop	r29
     afa:	cf 91       	pop	r28
     afc:	08 95       	ret

00000afe <mf_sndenDo>:

//---------------------------------------------//


void mf_sndenDo(void)
{
     afe:	cf 93       	push	r28
     b00:	df 93       	push	r29
     b02:	cd b7       	in	r28, 0x3d	; 61
     b04:	de b7       	in	r29, 0x3e	; 62
     b06:	27 97       	sbiw	r28, 0x07	; 7
     b08:	0f b6       	in	r0, 0x3f	; 63
     b0a:	f8 94       	cli
     b0c:	de bf       	out	0x3e, r29	; 62
     b0e:	0f be       	out	0x3f, r0	; 63
     b10:	cd bf       	out	0x3d, r28	; 61
	char str[] = {'S','N','D',' ',' ',' ',0};
     b12:	87 e0       	ldi	r24, 0x07	; 7
     b14:	ea e8       	ldi	r30, 0x8A	; 138
     b16:	f0 e0       	ldi	r31, 0x00	; 0
     b18:	de 01       	movw	r26, r28
     b1a:	11 96       	adiw	r26, 0x01	; 1
     b1c:	01 90       	ld	r0, Z+
     b1e:	0d 92       	st	X+, r0
     b20:	8a 95       	dec	r24
     b22:	e1 f7       	brne	.-8      	; 0xb1c <mf_sndenDo+0x1e>
		
	if (button_state & (BD_UP | BD_DOWN))
     b24:	80 91 be 00 	lds	r24, 0x00BE
     b28:	90 91 bf 00 	lds	r25, 0x00BF
     b2c:	86 70       	andi	r24, 0x06	; 6
     b2e:	99 27       	eor	r25, r25
     b30:	89 2b       	or	r24, r25
     b32:	41 f0       	breq	.+16     	; 0xb44 <mf_sndenDo+0x46>
	{
		sound_enable = !sound_enable;
     b34:	81 e0       	ldi	r24, 0x01	; 1
     b36:	90 91 65 00 	lds	r25, 0x0065
     b3a:	91 11       	cpse	r25, r1
     b3c:	80 e0       	ldi	r24, 0x00	; 0
     b3e:	80 93 65 00 	sts	0x0065, r24
		restartMenuTimer();
     b42:	7f de       	rcall	.-770    	; 0x842 <restartMenuTimer>
	}			
		
	if (userTimer.FA_GE)
     b44:	80 91 f0 00 	lds	r24, 0x00F0
     b48:	84 ff       	sbrs	r24, 4
     b4a:	0e c0       	rjmp	.+28     	; 0xb68 <mf_sndenDo+0x6a>
	{
		if (sound_enable)		
     b4c:	80 91 65 00 	lds	r24, 0x0065
     b50:	88 23       	and	r24, r24
     b52:	29 f0       	breq	.+10     	; 0xb5e <mf_sndenDo+0x60>
		{
			str[4] = 'O';
     b54:	8f e4       	ldi	r24, 0x4F	; 79
     b56:	8d 83       	std	Y+5, r24	; 0x05
			str[5] = 'N';
     b58:	8e e4       	ldi	r24, 0x4E	; 78
     b5a:	8e 83       	std	Y+6, r24	; 0x06
     b5c:	05 c0       	rjmp	.+10     	; 0xb68 <mf_sndenDo+0x6a>
		}
		else
		{
			str[3] = 'O';
     b5e:	8f e4       	ldi	r24, 0x4F	; 79
     b60:	8c 83       	std	Y+4, r24	; 0x04
			str[4] = 'F';
     b62:	86 e4       	ldi	r24, 0x46	; 70
     b64:	8d 83       	std	Y+5, r24	; 0x05
			str[5] = 'F';
     b66:	8e 83       	std	Y+6, r24	; 0x06
		}			
	}
		
	printLedBuffer(0,str);
     b68:	be 01       	movw	r22, r28
     b6a:	6f 5f       	subi	r22, 0xFF	; 255
     b6c:	7f 4f       	sbci	r23, 0xFF	; 255
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	cb dd       	rcall	.-1130   	; 0x708 <printLedBuffer>
	setComma(2);
     b72:	82 e0       	ldi	r24, 0x02	; 2
     b74:	0f de       	rcall	.-994    	; 0x794 <setComma>
}
     b76:	27 96       	adiw	r28, 0x07	; 7
     b78:	0f b6       	in	r0, 0x3f	; 63
     b7a:	f8 94       	cli
     b7c:	de bf       	out	0x3e, r29	; 62
     b7e:	0f be       	out	0x3f, r0	; 63
     b80:	cd bf       	out	0x3d, r28	; 61
     b82:	df 91       	pop	r29
     b84:	cf 91       	pop	r28
     b86:	08 95       	ret

00000b88 <mf_leafSelect>:

// Select and exit functions, common for leaf menu items 

void mf_leafSelect(void)
{
	clearExtraLeds(LED_TEMP | LED_ROLL);
     b88:	83 e0       	ldi	r24, 0x03	; 3
     b8a:	16 de       	rcall	.-980    	; 0x7b8 <clearExtraLeds>
	userTimer.FA_GE = 1;	
     b8c:	e0 ef       	ldi	r30, 0xF0	; 240
     b8e:	f0 e0       	ldi	r31, 0x00	; 0
     b90:	80 81       	ld	r24, Z
     b92:	80 61       	ori	r24, 0x10	; 16
     b94:	80 83       	st	Z, r24
     b96:	08 95       	ret

00000b98 <mf_calibSelect>:
//---------------------------------------------//

void mf_calibSelect(void)
{
	// restore cpoint1, cpoint2
	mf_leafSelect();
     b98:	f7 df       	rcall	.-18     	; 0xb88 <mf_leafSelect>
     b9a:	08 95       	ret

00000b9c <mf_rollLeave>:
	printLedBuffer(0,str);
}

void mf_rollLeave(void)
{
	clearExtraLeds(LED_ROLL);
     b9c:	82 e0       	ldi	r24, 0x02	; 2
     b9e:	0c de       	rcall	.-1000   	; 0x7b8 <clearExtraLeds>
     ba0:	08 95       	ret

00000ba2 <mf_setTempSelect>:
//---------------------------------------------//


void mf_setTempSelect(void)
{
	clearExtraLeds(LED_TEMP);
     ba2:	81 e0       	ldi	r24, 0x01	; 1
     ba4:	09 de       	rcall	.-1006   	; 0x7b8 <clearExtraLeds>
	mf_leafSelectAct();		// setup and start timer
     ba6:	56 de       	rcall	.-852    	; 0x854 <mf_leafSelectAct>
     ba8:	08 95       	ret

00000baa <mf_realTempLeave>:
	printLedBuffer(0,str);
}

void mf_realTempLeave(void)
{
	clearExtraLeds(LED_TEMP);
     baa:	81 e0       	ldi	r24, 0x01	; 1
     bac:	05 de       	rcall	.-1014   	; 0x7b8 <clearExtraLeds>
     bae:	08 95       	ret

00000bb0 <mf_rollSelect>:
//---------------------------------------------//
//---------------------------------------------//

void mf_rollSelect(void)
{
	setExtraLeds(LED_ROLL);
     bb0:	82 e0       	ldi	r24, 0x02	; 2
     bb2:	fc dd       	rcall	.-1032   	; 0x7ac <setExtraLeds>
     bb4:	08 95       	ret

00000bb6 <mf_setTempDo>:
	clearExtraLeds(LED_TEMP);
	mf_leafSelectAct();		// setup and start timer
}

void mf_setTempDo(void)
{
     bb6:	cf 93       	push	r28
     bb8:	df 93       	push	r29
     bba:	cd b7       	in	r28, 0x3d	; 61
     bbc:	de b7       	in	r29, 0x3e	; 62
     bbe:	27 97       	sbiw	r28, 0x07	; 7
     bc0:	0f b6       	in	r0, 0x3f	; 63
     bc2:	f8 94       	cli
     bc4:	de bf       	out	0x3e, r29	; 62
     bc6:	0f be       	out	0x3f, r0	; 63
     bc8:	cd bf       	out	0x3d, r28	; 61
	char str[] = {' ',' ',' ',' ',0xB0,'C',0};
     bca:	87 e0       	ldi	r24, 0x07	; 7
     bcc:	e1 e9       	ldi	r30, 0x91	; 145
     bce:	f0 e0       	ldi	r31, 0x00	; 0
     bd0:	de 01       	movw	r26, r28
     bd2:	11 96       	adiw	r26, 0x01	; 1
     bd4:	01 90       	ld	r0, Z+
     bd6:	0d 92       	st	X+, r0
     bd8:	8a 95       	dec	r24
     bda:	e1 f7       	brne	.-8      	; 0xbd4 <mf_setTempDo+0x1e>

	
	if (button_state & (BD_UP | BR_UP))
     bdc:	80 91 be 00 	lds	r24, 0x00BE
     be0:	90 91 bf 00 	lds	r25, 0x00BF
     be4:	9c 01       	movw	r18, r24
     be6:	22 70       	andi	r18, 0x02	; 2
     be8:	34 70       	andi	r19, 0x04	; 4
     bea:	23 2b       	or	r18, r19
     bec:	71 f0       	breq	.+28     	; 0xc0a <mf_setTempDo+0x54>
	{
		if (setup_temp_value < MAX_SET_TEMP)
     bee:	80 91 67 00 	lds	r24, 0x0067
     bf2:	90 91 68 00 	lds	r25, 0x0068
     bf6:	82 3d       	cpi	r24, 0xD2	; 210
     bf8:	91 05       	cpc	r25, r1
     bfa:	28 f4       	brcc	.+10     	; 0xc06 <mf_setTempDo+0x50>
			setup_temp_value += 5;
     bfc:	05 96       	adiw	r24, 0x05	; 5
     bfe:	90 93 68 00 	sts	0x0068, r25
     c02:	80 93 67 00 	sts	0x0067, r24
		restartMenuTimer();
     c06:	1d de       	rcall	.-966    	; 0x842 <restartMenuTimer>
     c08:	11 c0       	rjmp	.+34     	; 0xc2c <mf_setTempDo+0x76>
	}
	else if (button_state & (BD_DOWN | BR_DOWN))
     c0a:	84 70       	andi	r24, 0x04	; 4
     c0c:	98 70       	andi	r25, 0x08	; 8
     c0e:	89 2b       	or	r24, r25
     c10:	69 f0       	breq	.+26     	; 0xc2c <mf_setTempDo+0x76>
	{
		if (setup_temp_value > MIN_SET_TEMP)
     c12:	80 91 67 00 	lds	r24, 0x0067
     c16:	90 91 68 00 	lds	r25, 0x0068
     c1a:	8f 31       	cpi	r24, 0x1F	; 31
     c1c:	91 05       	cpc	r25, r1
     c1e:	28 f0       	brcs	.+10     	; 0xc2a <mf_setTempDo+0x74>
			setup_temp_value -= 5;
     c20:	05 97       	sbiw	r24, 0x05	; 5
     c22:	90 93 68 00 	sts	0x0068, r25
     c26:	80 93 67 00 	sts	0x0067, r24
		restartMenuTimer();
     c2a:	0b de       	rcall	.-1002   	; 0x842 <restartMenuTimer>
	}					
		
	// Output ADC result to LED
	u16toa_align_right(setup_temp_value,str,0x80 | 4,' ');
     c2c:	20 e2       	ldi	r18, 0x20	; 32
     c2e:	44 e8       	ldi	r20, 0x84	; 132
     c30:	be 01       	movw	r22, r28
     c32:	6f 5f       	subi	r22, 0xFF	; 255
     c34:	7f 4f       	sbci	r23, 0xFF	; 255
     c36:	80 91 67 00 	lds	r24, 0x0067
     c3a:	90 91 68 00 	lds	r25, 0x0068
     c3e:	62 d1       	rcall	.+708    	; 0xf04 <u16toa_align_right>
	printLedBuffer(0,str);
     c40:	be 01       	movw	r22, r28
     c42:	6f 5f       	subi	r22, 0xFF	; 255
     c44:	7f 4f       	sbci	r23, 0xFF	; 255
     c46:	80 e0       	ldi	r24, 0x00	; 0
     c48:	5f dd       	rcall	.-1346   	; 0x708 <printLedBuffer>
	
	if (userTimer.FA_GE)
     c4a:	80 91 f0 00 	lds	r24, 0x00F0
     c4e:	84 ff       	sbrs	r24, 4
     c50:	03 c0       	rjmp	.+6      	; 0xc58 <mf_setTempDo+0xa2>
		setExtraLeds(LED_TEMP);
     c52:	81 e0       	ldi	r24, 0x01	; 1
     c54:	ab dd       	rcall	.-1194   	; 0x7ac <setExtraLeds>
     c56:	02 c0       	rjmp	.+4      	; 0xc5c <mf_setTempDo+0xa6>
	else
		clearExtraLeds(LED_TEMP);
     c58:	81 e0       	ldi	r24, 0x01	; 1
     c5a:	ae dd       	rcall	.-1188   	; 0x7b8 <clearExtraLeds>
}
     c5c:	27 96       	adiw	r28, 0x07	; 7
     c5e:	0f b6       	in	r0, 0x3f	; 63
     c60:	f8 94       	cli
     c62:	de bf       	out	0x3e, r29	; 62
     c64:	0f be       	out	0x3f, r0	; 63
     c66:	cd bf       	out	0x3d, r28	; 61
     c68:	df 91       	pop	r29
     c6a:	cf 91       	pop	r28
     c6c:	08 95       	ret

00000c6e <mf_realTempSelect>:
//=================================================================//


void mf_realTempSelect(void)
{
	setExtraLeds(LED_TEMP);
     c6e:	81 e0       	ldi	r24, 0x01	; 1
     c70:	9d dd       	rcall	.-1222   	; 0x7ac <setExtraLeds>
     c72:	08 95       	ret

00000c74 <mf_realTempDo>:
}

void mf_realTempDo(void)
{
     c74:	cf 93       	push	r28
     c76:	df 93       	push	r29
     c78:	cd b7       	in	r28, 0x3d	; 61
     c7a:	de b7       	in	r29, 0x3e	; 62
     c7c:	27 97       	sbiw	r28, 0x07	; 7
     c7e:	0f b6       	in	r0, 0x3f	; 63
     c80:	f8 94       	cli
     c82:	de bf       	out	0x3e, r29	; 62
     c84:	0f be       	out	0x3f, r0	; 63
     c86:	cd bf       	out	0x3d, r28	; 61
	char str[] = {' ',' ',' ',' ',0xB0,'C',0};
     c88:	87 e0       	ldi	r24, 0x07	; 7
     c8a:	e1 e9       	ldi	r30, 0x91	; 145
     c8c:	f0 e0       	ldi	r31, 0x00	; 0
     c8e:	de 01       	movw	r26, r28
     c90:	11 96       	adiw	r26, 0x01	; 1
     c92:	01 90       	ld	r0, Z+
     c94:	0d 92       	st	X+, r0
     c96:	8a 95       	dec	r24
     c98:	e1 f7       	brne	.-8      	; 0xc92 <mf_realTempDo+0x1e>
	// Output ADC result to LED
	uint16_t temp_celsius = conv_ADC_to_Celsius(adc_filtered_value);
     c9a:	80 91 d6 00 	lds	r24, 0x00D6
     c9e:	90 91 d7 00 	lds	r25, 0x00D7
     ca2:	e4 da       	rcall	.-2616   	; 0x26c <conv_ADC_to_Celsius>
	u16toa_align_right(temp_celsius,str,0x80 | 4,' ');
     ca4:	20 e2       	ldi	r18, 0x20	; 32
     ca6:	44 e8       	ldi	r20, 0x84	; 132
     ca8:	be 01       	movw	r22, r28
     caa:	6f 5f       	subi	r22, 0xFF	; 255
     cac:	7f 4f       	sbci	r23, 0xFF	; 255
     cae:	2a d1       	rcall	.+596    	; 0xf04 <u16toa_align_right>
	printLedBuffer(0,str);
     cb0:	be 01       	movw	r22, r28
     cb2:	6f 5f       	subi	r22, 0xFF	; 255
     cb4:	7f 4f       	sbci	r23, 0xFF	; 255
     cb6:	80 e0       	ldi	r24, 0x00	; 0
     cb8:	27 dd       	rcall	.-1458   	; 0x708 <printLedBuffer>
}
     cba:	27 96       	adiw	r28, 0x07	; 7
     cbc:	0f b6       	in	r0, 0x3f	; 63
     cbe:	f8 94       	cli
     cc0:	de bf       	out	0x3e, r29	; 62
     cc2:	0f be       	out	0x3f, r0	; 63
     cc4:	cd bf       	out	0x3d, r28	; 61
     cc6:	df 91       	pop	r29
     cc8:	cf 91       	pop	r28
     cca:	08 95       	ret

00000ccc <InitMenu>:
//	Menu initialization
//	Call this function at start of your program before processMenu()
//-----------------------------------------------------------------//
void InitMenu(void)
{
	selectedMenuItemID = mi_REALTEMP;
     ccc:	81 e0       	ldi	r24, 0x01	; 1
     cce:	80 93 eb 00 	sts	0x00EB, r24
     cd2:	20 e0       	ldi	r18, 0x00	; 0
     cd4:	30 e0       	ldi	r19, 0x00	; 0
static void getMenuFunctionRecord(uint8_t menuItemID, MenuFunctionRecord* menuRecord )
{
	uint8_t i;
	for (i = 0; i < sizeof(menuFunctionSet)/sizeof(MenuFunctionRecord); i++  )
	{
		readMenuRecord(&menuFunctionSet[i], menuRecord);
     cd6:	c9 01       	movw	r24, r18
     cd8:	88 0f       	add	r24, r24
     cda:	99 1f       	adc	r25, r25
     cdc:	88 0f       	add	r24, r24
     cde:	99 1f       	adc	r25, r25
     ce0:	88 0f       	add	r24, r24
     ce2:	99 1f       	adc	r25, r25
     ce4:	82 1b       	sub	r24, r18
     ce6:	93 0b       	sbc	r25, r19
     ce8:	88 5b       	subi	r24, 0xB8	; 184
     cea:	9e 4f       	sbci	r25, 0xFE	; 254
//		fRecPtr		- address of the function record in the FLASH
//		resPtr		- address of the record to fill in the SRAM
//-----------------------------------------------------------------//
static inline void readMenuRecord(const MenuFunctionRecord* fRecPtr, MenuFunctionRecord* resPtr )
{
	resPtr->Item = pgm_read_byte(&fRecPtr->Item);
     cec:	fc 01       	movw	r30, r24
     cee:	64 91       	lpm	r22, Z
	resPtr->SelectFunction = (FuncPtr)pgm_read_word(&fRecPtr->SelectFunction);
     cf0:	31 96       	adiw	r30, 0x01	; 1
     cf2:	45 91       	lpm	r20, Z+
     cf4:	54 91       	lpm	r21, Z
     cf6:	b4 2f       	mov	r27, r20
     cf8:	a5 2f       	mov	r26, r21
	resPtr->RunFunction = (FuncPtr)pgm_read_word(&fRecPtr->RunFunction);
     cfa:	fc 01       	movw	r30, r24
     cfc:	33 96       	adiw	r30, 0x03	; 3
     cfe:	45 91       	lpm	r20, Z+
     d00:	54 91       	lpm	r21, Z
     d02:	74 2f       	mov	r23, r20
     d04:	45 2f       	mov	r20, r21
	resPtr->LeaveFunction = (FuncPtr)pgm_read_word(&fRecPtr->LeaveFunction);
     d06:	05 96       	adiw	r24, 0x05	; 5
     d08:	fc 01       	movw	r30, r24
     d0a:	85 91       	lpm	r24, Z+
     d0c:	94 91       	lpm	r25, Z
     d0e:	58 2f       	mov	r21, r24
{
	uint8_t i;
	for (i = 0; i < sizeof(menuFunctionSet)/sizeof(MenuFunctionRecord); i++  )
	{
		readMenuRecord(&menuFunctionSet[i], menuRecord);
		if (menuRecord->Item == menuItemID)
     d10:	61 30       	cpi	r22, 0x01	; 1
     d12:	79 f4       	brne	.+30     	; 0xd32 <InitMenu+0x66>
     d14:	60 93 f4 00 	sts	0x00F4, r22
     d18:	e5 ef       	ldi	r30, 0xF5	; 245
     d1a:	f0 e0       	ldi	r31, 0x00	; 0
     d1c:	b0 83       	st	Z, r27
     d1e:	a1 83       	std	Z+1, r26	; 0x01
     d20:	e7 ef       	ldi	r30, 0xF7	; 247
     d22:	f0 e0       	ldi	r31, 0x00	; 0
     d24:	70 83       	st	Z, r23
     d26:	41 83       	std	Z+1, r20	; 0x01
     d28:	e9 ef       	ldi	r30, 0xF9	; 249
     d2a:	f0 e0       	ldi	r31, 0x00	; 0
     d2c:	50 83       	st	Z, r21
     d2e:	91 83       	std	Z+1, r25	; 0x01
     d30:	14 c0       	rjmp	.+40     	; 0xd5a <InitMenu+0x8e>
     d32:	2f 5f       	subi	r18, 0xFF	; 255
     d34:	3f 4f       	sbci	r19, 0xFF	; 255
//	Output:
//-----------------------------------------------------------------//
static void getMenuFunctionRecord(uint8_t menuItemID, MenuFunctionRecord* menuRecord )
{
	uint8_t i;
	for (i = 0; i < sizeof(menuFunctionSet)/sizeof(MenuFunctionRecord); i++  )
     d36:	2d 30       	cpi	r18, 0x0D	; 13
     d38:	31 05       	cpc	r19, r1
     d3a:	09 f0       	breq	.+2      	; 0xd3e <InitMenu+0x72>
     d3c:	cc cf       	rjmp	.-104    	; 0xcd6 <InitMenu+0xa>
     d3e:	60 93 f4 00 	sts	0x00F4, r22
     d42:	e5 ef       	ldi	r30, 0xF5	; 245
     d44:	f0 e0       	ldi	r31, 0x00	; 0
     d46:	b0 83       	st	Z, r27
     d48:	a1 83       	std	Z+1, r26	; 0x01
     d4a:	e7 ef       	ldi	r30, 0xF7	; 247
     d4c:	f0 e0       	ldi	r31, 0x00	; 0
     d4e:	70 83       	st	Z, r23
     d50:	41 83       	std	Z+1, r20	; 0x01
     d52:	e9 ef       	ldi	r30, 0xF9	; 249
     d54:	f0 e0       	ldi	r31, 0x00	; 0
     d56:	50 83       	st	Z, r21
     d58:	91 83       	std	Z+1, r25	; 0x01
//-----------------------------------------------------------------//
void InitMenu(void)
{
	selectedMenuItemID = mi_REALTEMP;
	getMenuFunctionRecord(selectedMenuItemID, &selectedMenuFunctionRecord);
	processItemFunction(selectedMenuFunctionRecord.SelectFunction);
     d5a:	e0 91 f5 00 	lds	r30, 0x00F5
     d5e:	f0 91 f6 00 	lds	r31, 0x00F6
//	Arguments:
//		funcAddr - address of the function to run.
//-----------------------------------------------------------------//
static inline void processItemFunction(FuncPtr funcAddr)
{
	if (funcAddr != 0)
     d62:	30 97       	sbiw	r30, 0x00	; 0
     d64:	09 f0       	breq	.+2      	; 0xd68 <InitMenu+0x9c>
		((FuncPtr)funcAddr)();
     d66:	09 95       	icall
	selectedMenuItemID = mi_REALTEMP;
	getMenuFunctionRecord(selectedMenuItemID, &selectedMenuFunctionRecord);
	processItemFunction(selectedMenuFunctionRecord.SelectFunction);
	
	// Initialize menu state timer
	menuTimer.Timer = 0;
     d68:	10 92 ed 00 	sts	0x00ED, r1
	menuTimer.Enabled = 0;
     d6c:	ec ee       	ldi	r30, 0xEC	; 236
     d6e:	f0 e0       	ldi	r31, 0x00	; 0
     d70:	80 81       	ld	r24, Z
	menuTimer.RunOnce = 1;
     d72:	8e 7f       	andi	r24, 0xFE	; 254
     d74:	82 60       	ori	r24, 0x02	; 2
     d76:	80 83       	st	Z, r24
	
	// Initialize user timer
	userTimer.Enabled = 0;
     d78:	e0 ef       	ldi	r30, 0xF0	; 240
     d7a:	f0 e0       	ldi	r31, 0x00	; 0
     d7c:	80 81       	ld	r24, Z
	userTimer.RunOnce = 0;
     d7e:	8e 7f       	andi	r24, 0xFE	; 254
     d80:	8d 7f       	andi	r24, 0xFD	; 253
     d82:	80 83       	st	Z, r24
     d84:	08 95       	ret

00000d86 <processMenu>:
//	Main menu control, -  state function calls, jumps 
//	between menu states and indication
//	Call this function from main() with a fixed time interval.
//-----------------------------------------------------------------//
void processMenu(void)
{
     d86:	ff 92       	push	r15
     d88:	0f 93       	push	r16
     d8a:	1f 93       	push	r17
     d8c:	cf 93       	push	r28
     d8e:	df 93       	push	r29
	NextItem_t nextItem;
	uint16_t jumpCondition;
	
	processSoftTimer8b(&menuTimer);	
     d90:	8c ee       	ldi	r24, 0xEC	; 236
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	48 d3       	rcall	.+1680   	; 0x1426 <processSoftTimer8b>
	
	// Compose jump condition
	jumpCondition = button_state;		
     d96:	40 91 be 00 	lds	r20, 0x00BE
     d9a:	50 91 bf 00 	lds	r21, 0x00BF
	if (menuTimer.FTop)
     d9e:	80 91 ec 00 	lds	r24, 0x00EC
     da2:	85 fd       	sbrc	r24, 5
		jumpCondition |= TMR_EXP;
     da4:	50 68       	ori	r21, 0x80	; 128
	
	// Get next menu item according to current state and jump conditions
	nextItem = getNextMenuItem(selectedMenuItemID, jumpCondition);
     da6:	b0 91 eb 00 	lds	r27, 0x00EB
     daa:	80 e0       	ldi	r24, 0x00	; 0
     dac:	90 e0       	ldi	r25, 0x00	; 0
	MenuJumpRecord	jRecord;
	uint8_t i;
	
	for (i = 0; i < sizeof(menuJumpSet)/sizeof(MenuJumpRecord); i++  )
	{
		readJumpRecord(&menuJumpSet[i], &jRecord);		// read full jump record
     dae:	9c 01       	movw	r18, r24
     db0:	22 0f       	add	r18, r18
     db2:	33 1f       	adc	r19, r19
     db4:	22 0f       	add	r18, r18
     db6:	33 1f       	adc	r19, r19
     db8:	28 0f       	add	r18, r24
     dba:	39 1f       	adc	r19, r25
     dbc:	2d 55       	subi	r18, 0x5D	; 93
     dbe:	3e 4f       	sbci	r19, 0xFE	; 254
//		jRecPtr		- address of the jump record in the FLASH
//		resPtr		- address of the record to fill in the SRAM
//-----------------------------------------------------------------//
static inline void readJumpRecord(const MenuJumpRecord* jRecPtr, MenuJumpRecord* resPtr )
{
	resPtr->Item = pgm_read_byte(&jRecPtr->Item);
     dc0:	f9 01       	movw	r30, r18
     dc2:	a4 91       	lpm	r26, Z
	resPtr->JumpCondition = pgm_read_word(&jRecPtr->JumpCondition);
     dc4:	31 96       	adiw	r30, 0x01	; 1
     dc6:	65 91       	lpm	r22, Z+
     dc8:	74 91       	lpm	r23, Z
	resPtr->NextItem= pgm_read_byte(&jRecPtr->NextItem);
     dca:	f9 01       	movw	r30, r18
     dcc:	33 96       	adiw	r30, 0x03	; 3
     dce:	c4 91       	lpm	r28, Z
	resPtr->Flags= pgm_read_byte(&jRecPtr->Flags);
     dd0:	f9 01       	movw	r30, r18
     dd2:	34 96       	adiw	r30, 0x04	; 4
     dd4:	24 91       	lpm	r18, Z
	uint8_t i;
	
	for (i = 0; i < sizeof(menuJumpSet)/sizeof(MenuJumpRecord); i++  )
	{
		readJumpRecord(&menuJumpSet[i], &jRecord);		// read full jump record
		if (jRecord.Item == selectedItemId)				// If ID match,
     dd6:	ba 13       	cpse	r27, r26
     dd8:	15 c0       	rjmp	.+42     	; 0xe04 <processMenu+0x7e>
		{
			if ((jRecord.JumpCondition & jmpCond) != 0)		// if any of jump conditions match too,
     dda:	64 23       	and	r22, r20
     ddc:	75 23       	and	r23, r21
     dde:	67 2b       	or	r22, r23
     de0:	89 f0       	breq	.+34     	; 0xe04 <processMenu+0x7e>
			{
				nextItem.ItemID = jRecord.NextItem;			// switch to next menu item
				nextItem.ItemTimeout = jRecord.Flags & TIMEOUT_MASK;
     de2:	d2 2f       	mov	r29, r18
     de4:	df 73       	andi	r29, 0x3F	; 63
				nextItem.ShiftRight = (jRecord.Flags & SHIFT_RIGHT) ? 1 : 0;
     de6:	26 fb       	bst	r18, 6
     de8:	00 27       	eor	r16, r16
     dea:	00 f9       	bld	r16, 0
				nextItem.ShiftLeft = (jRecord.Flags & SHIFT_LEFT) ? 1 : 0;
     dec:	f2 2e       	mov	r15, r18
     dee:	ff 1c       	adc	r15, r15
     df0:	ff 24       	eor	r15, r15
     df2:	ff 1c       	adc	r15, r15
     df4:	10 e0       	ldi	r17, 0x00	; 0
     df6:	f0 fa       	bst	r15, 0
     df8:	10 f9       	bld	r17, 0
     dfa:	00 fb       	bst	r16, 0
     dfc:	11 f9       	bld	r17, 1
	
	// Get next menu item according to current state and jump conditions
	nextItem = getNextMenuItem(selectedMenuItemID, jumpCondition);
	
	// If next item differs from current
	if (nextItem.ItemID != selectedMenuItemID)
     dfe:	bc 13       	cpse	r27, r28
     e00:	06 c0       	rjmp	.+12     	; 0xe0e <processMenu+0x88>
     e02:	70 c0       	rjmp	.+224    	; 0xee4 <processMenu+0x15e>
     e04:	01 96       	adiw	r24, 0x01	; 1
	NextItem_t nextItem;
	nextItem.ItemID = selectedItemId;
	MenuJumpRecord	jRecord;
	uint8_t i;
	
	for (i = 0; i < sizeof(menuJumpSet)/sizeof(MenuJumpRecord); i++  )
     e06:	8d 31       	cpi	r24, 0x1D	; 29
     e08:	91 05       	cpc	r25, r1
     e0a:	89 f6       	brne	.-94     	; 0xdae <processMenu+0x28>
     e0c:	6b c0       	rjmp	.+214    	; 0xee4 <processMenu+0x15e>
	
	// If next item differs from current
	if (nextItem.ItemID != selectedMenuItemID)
	{		
		// Call exit function for current item
		processItemFunction(selectedMenuFunctionRecord.LeaveFunction);
     e0e:	e0 91 f9 00 	lds	r30, 0x00F9
     e12:	f0 91 fa 00 	lds	r31, 0x00FA
//	Arguments:
//		funcAddr - address of the function to run.
//-----------------------------------------------------------------//
static inline void processItemFunction(FuncPtr funcAddr)
{
	if (funcAddr != 0)
     e16:	30 97       	sbiw	r30, 0x00	; 0
     e18:	09 f0       	breq	.+2      	; 0xe1c <processMenu+0x96>
		((FuncPtr)funcAddr)();
     e1a:	09 95       	icall
		// Call exit function for current item
		processItemFunction(selectedMenuFunctionRecord.LeaveFunction);
		
		// If shifting is specified, start it before calling any 
		//	new menu item functions 
		if (nextItem.ShiftRight)
     e1c:	f0 fa       	bst	r15, 0
     e1e:	10 f9       	bld	r17, 0
     e20:	00 fb       	bst	r16, 0
     e22:	11 f9       	bld	r17, 1
     e24:	11 ff       	sbrs	r17, 1
     e26:	02 c0       	rjmp	.+4      	; 0xe2c <processMenu+0xa6>
			startShiftingWindowRight();
     e28:	3e dc       	rcall	.-1924   	; 0x6a6 <startShiftingWindowRight>
     e2a:	02 c0       	rjmp	.+4      	; 0xe30 <processMenu+0xaa>
		else if (nextItem.ShiftLeft)
     e2c:	10 fd       	sbrc	r17, 0
			startShiftingWindowLeft();
     e2e:	2d dc       	rcall	.-1958   	; 0x68a <startShiftingWindowLeft>
		
		// Select new item
		selectedMenuItemID = nextItem.ItemID;
     e30:	c0 93 eb 00 	sts	0x00EB, r28
     e34:	20 e0       	ldi	r18, 0x00	; 0
     e36:	30 e0       	ldi	r19, 0x00	; 0
static void getMenuFunctionRecord(uint8_t menuItemID, MenuFunctionRecord* menuRecord )
{
	uint8_t i;
	for (i = 0; i < sizeof(menuFunctionSet)/sizeof(MenuFunctionRecord); i++  )
	{
		readMenuRecord(&menuFunctionSet[i], menuRecord);
     e38:	c9 01       	movw	r24, r18
     e3a:	88 0f       	add	r24, r24
     e3c:	99 1f       	adc	r25, r25
     e3e:	88 0f       	add	r24, r24
     e40:	99 1f       	adc	r25, r25
     e42:	88 0f       	add	r24, r24
     e44:	99 1f       	adc	r25, r25
     e46:	82 1b       	sub	r24, r18
     e48:	93 0b       	sbc	r25, r19
     e4a:	88 5b       	subi	r24, 0xB8	; 184
     e4c:	9e 4f       	sbci	r25, 0xFE	; 254
//		fRecPtr		- address of the function record in the FLASH
//		resPtr		- address of the record to fill in the SRAM
//-----------------------------------------------------------------//
static inline void readMenuRecord(const MenuFunctionRecord* fRecPtr, MenuFunctionRecord* resPtr )
{
	resPtr->Item = pgm_read_byte(&fRecPtr->Item);
     e4e:	fc 01       	movw	r30, r24
     e50:	64 91       	lpm	r22, Z
	resPtr->SelectFunction = (FuncPtr)pgm_read_word(&fRecPtr->SelectFunction);
     e52:	31 96       	adiw	r30, 0x01	; 1
     e54:	45 91       	lpm	r20, Z+
     e56:	54 91       	lpm	r21, Z
     e58:	b4 2f       	mov	r27, r20
     e5a:	a5 2f       	mov	r26, r21
	resPtr->RunFunction = (FuncPtr)pgm_read_word(&fRecPtr->RunFunction);
     e5c:	fc 01       	movw	r30, r24
     e5e:	33 96       	adiw	r30, 0x03	; 3
     e60:	45 91       	lpm	r20, Z+
     e62:	54 91       	lpm	r21, Z
     e64:	74 2f       	mov	r23, r20
     e66:	45 2f       	mov	r20, r21
	resPtr->LeaveFunction = (FuncPtr)pgm_read_word(&fRecPtr->LeaveFunction);
     e68:	05 96       	adiw	r24, 0x05	; 5
     e6a:	fc 01       	movw	r30, r24
     e6c:	85 91       	lpm	r24, Z+
     e6e:	94 91       	lpm	r25, Z
     e70:	58 2f       	mov	r21, r24
{
	uint8_t i;
	for (i = 0; i < sizeof(menuFunctionSet)/sizeof(MenuFunctionRecord); i++  )
	{
		readMenuRecord(&menuFunctionSet[i], menuRecord);
		if (menuRecord->Item == menuItemID)
     e72:	c6 13       	cpse	r28, r22
     e74:	0f c0       	rjmp	.+30     	; 0xe94 <processMenu+0x10e>
     e76:	60 93 f4 00 	sts	0x00F4, r22
     e7a:	e5 ef       	ldi	r30, 0xF5	; 245
     e7c:	f0 e0       	ldi	r31, 0x00	; 0
     e7e:	b0 83       	st	Z, r27
     e80:	a1 83       	std	Z+1, r26	; 0x01
     e82:	e7 ef       	ldi	r30, 0xF7	; 247
     e84:	f0 e0       	ldi	r31, 0x00	; 0
     e86:	70 83       	st	Z, r23
     e88:	41 83       	std	Z+1, r20	; 0x01
     e8a:	e9 ef       	ldi	r30, 0xF9	; 249
     e8c:	f0 e0       	ldi	r31, 0x00	; 0
     e8e:	50 83       	st	Z, r21
     e90:	91 83       	std	Z+1, r25	; 0x01
     e92:	14 c0       	rjmp	.+40     	; 0xebc <processMenu+0x136>
     e94:	2f 5f       	subi	r18, 0xFF	; 255
     e96:	3f 4f       	sbci	r19, 0xFF	; 255
//	Output:
//-----------------------------------------------------------------//
static void getMenuFunctionRecord(uint8_t menuItemID, MenuFunctionRecord* menuRecord )
{
	uint8_t i;
	for (i = 0; i < sizeof(menuFunctionSet)/sizeof(MenuFunctionRecord); i++  )
     e98:	2d 30       	cpi	r18, 0x0D	; 13
     e9a:	31 05       	cpc	r19, r1
     e9c:	09 f0       	breq	.+2      	; 0xea0 <processMenu+0x11a>
     e9e:	cc cf       	rjmp	.-104    	; 0xe38 <processMenu+0xb2>
     ea0:	60 93 f4 00 	sts	0x00F4, r22
     ea4:	e5 ef       	ldi	r30, 0xF5	; 245
     ea6:	f0 e0       	ldi	r31, 0x00	; 0
     ea8:	b0 83       	st	Z, r27
     eaa:	a1 83       	std	Z+1, r26	; 0x01
     eac:	e7 ef       	ldi	r30, 0xF7	; 247
     eae:	f0 e0       	ldi	r31, 0x00	; 0
     eb0:	70 83       	st	Z, r23
     eb2:	41 83       	std	Z+1, r20	; 0x01
     eb4:	e9 ef       	ldi	r30, 0xF9	; 249
     eb6:	f0 e0       	ldi	r31, 0x00	; 0
     eb8:	50 83       	st	Z, r21
     eba:	91 83       	std	Z+1, r25	; 0x01
		selectedMenuItemID = nextItem.ItemID;
		
		// Load from FLASH and save function pointers
		getMenuFunctionRecord(selectedMenuItemID, &selectedMenuFunctionRecord);
		// Call select function for next item
		processItemFunction(selectedMenuFunctionRecord.SelectFunction);
     ebc:	e0 91 f5 00 	lds	r30, 0x00F5
     ec0:	f0 91 f6 00 	lds	r31, 0x00F6
//	Arguments:
//		funcAddr - address of the function to run.
//-----------------------------------------------------------------//
static inline void processItemFunction(FuncPtr funcAddr)
{
	if (funcAddr != 0)
     ec4:	30 97       	sbiw	r30, 0x00	; 0
     ec6:	09 f0       	breq	.+2      	; 0xeca <processMenu+0x144>
		((FuncPtr)funcAddr)();
     ec8:	09 95       	icall
		// Load from FLASH and save function pointers
		getMenuFunctionRecord(selectedMenuItemID, &selectedMenuFunctionRecord);
		// Call select function for next item
		processItemFunction(selectedMenuFunctionRecord.SelectFunction);
		// Start timer if timeout is enabled
		if (nextItem.ItemTimeout != 0)
     eca:	dd 23       	and	r29, r29
     ecc:	a9 f0       	breq	.+42     	; 0xef8 <processMenu+0x172>
		{
			menuTimer.Top = nextItem.ItemTimeout * MENU_TIMEOUT_MULT;
     ece:	dd 0f       	add	r29, r29
     ed0:	d0 93 ee 00 	sts	0x00EE, r29
			menuTimer.Timer = 0;
     ed4:	10 92 ed 00 	sts	0x00ED, r1
			menuTimer.Enabled = 1;	
     ed8:	ec ee       	ldi	r30, 0xEC	; 236
     eda:	f0 e0       	ldi	r31, 0x00	; 0
     edc:	80 81       	ld	r24, Z
     ede:	81 60       	ori	r24, 0x01	; 1
     ee0:	80 83       	st	Z, r24
     ee2:	0a c0       	rjmp	.+20     	; 0xef8 <processMenu+0x172>
		}
		
	}
	else
	{
		processSoftTimer8b(&userTimer);
     ee4:	80 ef       	ldi	r24, 0xF0	; 240
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	9e d2       	rcall	.+1340   	; 0x1426 <processSoftTimer8b>
		// Stay at previous item
		processItemFunction(selectedMenuFunctionRecord.RunFunction);
     eea:	e0 91 f7 00 	lds	r30, 0x00F7
     eee:	f0 91 f8 00 	lds	r31, 0x00F8
//	Arguments:
//		funcAddr - address of the function to run.
//-----------------------------------------------------------------//
static inline void processItemFunction(FuncPtr funcAddr)
{
	if (funcAddr != 0)
     ef2:	30 97       	sbiw	r30, 0x00	; 0
     ef4:	09 f0       	breq	.+2      	; 0xef8 <processMenu+0x172>
		((FuncPtr)funcAddr)();
     ef6:	09 95       	icall
	{
		processSoftTimer8b(&userTimer);
		// Stay at previous item
		processItemFunction(selectedMenuFunctionRecord.RunFunction);
	}	
}
     ef8:	df 91       	pop	r29
     efa:	cf 91       	pop	r28
     efc:	1f 91       	pop	r17
     efe:	0f 91       	pop	r16
     f00:	ff 90       	pop	r15
     f02:	08 95       	ret

00000f04 <u16toa_align_right>:
// Converts uint16_t value into decimal string with right alignment
// len = number of digits output (without terminating '\0')
// len[7] = 1 -> no terminating '\0' at buffer[len]
// fill_char -> char used for string padding
void u16toa_align_right(uint16_t val, char *buffer, uint8_t len,char fill_char)
{
     f04:	cf 93       	push	r28
     f06:	df 93       	push	r29
     f08:	fc 01       	movw	r30, r24
     f0a:	52 2f       	mov	r21, r18
	if (len & 0x80)
     f0c:	44 23       	and	r20, r20
     f0e:	2c f4       	brge	.+10     	; 0xf1a <u16toa_align_right+0x16>
	{
		len = len & 0x7F;
     f10:	4f 77       	andi	r20, 0x7F	; 127
		buffer += len;	
     f12:	eb 01       	movw	r28, r22
     f14:	c4 0f       	add	r28, r20
     f16:	d1 1d       	adc	r29, r1
     f18:	04 c0       	rjmp	.+8      	; 0xf22 <u16toa_align_right+0x1e>
	}
	else
	{
		buffer += len;	
     f1a:	eb 01       	movw	r28, r22
     f1c:	c4 0f       	add	r28, r20
     f1e:	d1 1d       	adc	r29, r1
		*buffer = 0;
     f20:	18 82       	st	Y, r1
	}
	
	do
	{
		*--buffer = val % 10 + '0';
     f22:	9f 01       	movw	r18, r30
     f24:	ad ec       	ldi	r26, 0xCD	; 205
     f26:	bc ec       	ldi	r27, 0xCC	; 204
     f28:	c1 d4       	rcall	.+2434   	; 0x18ac <__umulhisi3>
     f2a:	96 95       	lsr	r25
     f2c:	87 95       	ror	r24
     f2e:	96 95       	lsr	r25
     f30:	87 95       	ror	r24
     f32:	96 95       	lsr	r25
     f34:	87 95       	ror	r24
     f36:	dc 01       	movw	r26, r24
     f38:	aa 0f       	add	r26, r26
     f3a:	bb 1f       	adc	r27, r27
     f3c:	bc 01       	movw	r22, r24
     f3e:	66 0f       	add	r22, r22
     f40:	77 1f       	adc	r23, r23
     f42:	66 0f       	add	r22, r22
     f44:	77 1f       	adc	r23, r23
     f46:	66 0f       	add	r22, r22
     f48:	77 1f       	adc	r23, r23
     f4a:	6a 0f       	add	r22, r26
     f4c:	7b 1f       	adc	r23, r27
     f4e:	e6 1b       	sub	r30, r22
     f50:	f7 0b       	sbc	r31, r23
     f52:	e0 5d       	subi	r30, 0xD0	; 208
     f54:	ea 93       	st	-Y, r30
		val /= 10;
     f56:	fc 01       	movw	r30, r24
		len--;
     f58:	41 50       	subi	r20, 0x01	; 1
	}
	while ((val != 0) && len);
     f5a:	00 97       	sbiw	r24, 0x00	; 0
     f5c:	29 f4       	brne	.+10     	; 0xf68 <u16toa_align_right+0x64>
	
	// Padding
	while(len--)
     f5e:	84 2f       	mov	r24, r20
     f60:	81 50       	subi	r24, 0x01	; 1
     f62:	41 11       	cpse	r20, r1
     f64:	04 c0       	rjmp	.+8      	; 0xf6e <u16toa_align_right+0x6a>
     f66:	07 c0       	rjmp	.+14     	; 0xf76 <u16toa_align_right+0x72>
	{
		*--buffer = val % 10 + '0';
		val /= 10;
		len--;
	}
	while ((val != 0) && len);
     f68:	41 11       	cpse	r20, r1
     f6a:	db cf       	rjmp	.-74     	; 0xf22 <u16toa_align_right+0x1e>
     f6c:	04 c0       	rjmp	.+8      	; 0xf76 <u16toa_align_right+0x72>
     f6e:	fe 01       	movw	r30, r28
	
	// Padding
	while(len--)
		*--buffer = fill_char;
     f70:	52 93       	st	-Z, r21
		len--;
	}
	while ((val != 0) && len);
	
	// Padding
	while(len--)
     f72:	81 50       	subi	r24, 0x01	; 1
     f74:	e8 f7       	brcc	.-6      	; 0xf70 <u16toa_align_right+0x6c>
		*--buffer = fill_char;
}
     f76:	df 91       	pop	r29
     f78:	cf 91       	pop	r28
     f7a:	08 95       	ret

00000f7c <init_system>:


void init_system()
{
	// Setup Port D
	PORTD = 0; //(1<<PD_SYNCA | 1<<PD_SYNCB);
     f7c:	12 ba       	out	0x12, r1	; 18
	DDRD = (1<<PD5 | 1<<PD_TXD | 1<<PD_M1 | 1<<PD_M2 | 1<<PD_HEATER );
     f7e:	8e e3       	ldi	r24, 0x3E	; 62
     f80:	81 bb       	out	0x11, r24	; 17
	
	// Setup Port B
	PORTB = 0;
     f82:	18 ba       	out	0x18, r1	; 24
	DDRB = (1<<PB_BEEPER | 1<<PB_LED_DOUT | 1<<PB_LED_CLK | 1<<PB_SEGF | 1<<PB_SEGG | 1<<PB_SEGH);
     f84:	8f e3       	ldi	r24, 0x3F	; 63
     f86:	87 bb       	out	0x17, r24	; 23
	
	PORTC = 0;
     f88:	15 ba       	out	0x15, r1	; 21
	DDRC = (1<<PC_SEGA | 1<<PC_SEGB | 1<<PC_SEGC | 1<<PC_SEGD | 1<<PC_SEGE);	
     f8a:	8f e1       	ldi	r24, 0x1F	; 31
     f8c:	84 bb       	out	0x14, r24	; 20

	// Setup timer0
	// 1/1024 prescaler, T=64us @16MHz
	TCCR0 = (1<<CS02 | 0<<CS01 | 1<<CS00);
     f8e:	85 e0       	ldi	r24, 0x05	; 5
     f90:	83 bf       	out	0x33, r24	; 51
	// Start 256 * 64us = 16384us interval
	TCNT0 = 0;
     f92:	12 be       	out	0x32, r1	; 50
	// Clear interrupt flag
	TIFR |= (1<<TOV0);
     f94:	88 b7       	in	r24, 0x38	; 56
     f96:	81 60       	ori	r24, 0x01	; 1
     f98:	88 bf       	out	0x38, r24	; 56
	// Enable interrupts from timer 0
	TIMSK |= (1<<TOIE0);
     f9a:	89 b7       	in	r24, 0x39	; 57
     f9c:	81 60       	ori	r24, 0x01	; 1
     f9e:	89 bf       	out	0x39, r24	; 57
	
	// Setup timer2 as 1ms system frequency generator
	// 1/64 prescaler, CTC mode, OC2 disconnected
	TCCR2 = (1<<CS22 | 1<<WGM21);
     fa0:	8c e0       	ldi	r24, 0x0C	; 12
     fa2:	85 bd       	out	0x25, r24	; 37
	OCR2 = 249;
     fa4:	89 ef       	ldi	r24, 0xF9	; 249
     fa6:	83 bd       	out	0x23, r24	; 35
	TIMSK |= (1<<OCIE2);
     fa8:	89 b7       	in	r24, 0x39	; 57
     faa:	80 68       	ori	r24, 0x80	; 128
     fac:	89 bf       	out	0x39, r24	; 57
	
	// Setup timer1 as beeper frequency generator
	// CTC mode, 1/64 prescaler
	TCCR1A = 0;
     fae:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = (1<<WGM12 | 1<<CS11 | 1<<CS10);
     fb0:	8b e0       	ldi	r24, 0x0B	; 11
     fb2:	8e bd       	out	0x2e, r24	; 46
	// 1kHz beeper frequency default
	OCR1A = 127;
     fb4:	8f e7       	ldi	r24, 0x7F	; 127
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	9b bd       	out	0x2b, r25	; 43
     fba:	8a bd       	out	0x2a, r24	; 42

	// Setup AC sync comparator
	// Interrupt on output toggle
	ACSR |= (1<<ACI);
     fbc:	44 9a       	sbi	0x08, 4	; 8
	ACSR = (1<<ACIE | 0<<ACIS1 | 0<<ACIS0);
     fbe:	88 e0       	ldi	r24, 0x08	; 8
     fc0:	88 b9       	out	0x08, r24	; 8
	
	// Setup ADC
	// Internal Vref + cap, input ADC5, 
	ADMUX = (1<<REFS1 | 1<<REFS0 | 0<<MUX3 | 1<<MUX2 | 0<<MUX1 | 1<<MUX0 );
     fc2:	85 ec       	ldi	r24, 0xC5	; 197
     fc4:	87 b9       	out	0x07, r24	; 7
	// Prescaler = 128
	ADCSRA = (1<<ADEN |/* 1<<ADFR |*/  1<<ADIE | 1<<ADPS2 | 1<<ADPS1 | 1<<ADPS0);
     fc6:	8f e8       	ldi	r24, 0x8F	; 143
     fc8:	86 b9       	out	0x06, r24	; 6
	
	// Setup USART
	// Double speed
	UCSRA = (1<<U2X);
     fca:	82 e0       	ldi	r24, 0x02	; 2
     fcc:	8b b9       	out	0x0b, r24	; 11
	UCSRB = (1<<RXEN | 1<<TXEN | 0<<UCSZ2);
     fce:	88 e1       	ldi	r24, 0x18	; 24
     fd0:	8a b9       	out	0x0a, r24	; 10
	// No parity, 1 stop bit, 8 bit
	UCSRC = (1<<URSEL | 0<<UPM1 | 0<<UPM0 | 0<<USBS | 1<<UCSZ1 | 1<<UCSZ0);
     fd2:	86 e8       	ldi	r24, 0x86	; 134
     fd4:	80 bd       	out	0x20, r24	; 32
	// 57600 @16MHz, 2x
	UBRRH=0x00;
     fd6:	10 bc       	out	0x20, r1	; 32
	UBRRL=0x22;
     fd8:	82 e2       	ldi	r24, 0x22	; 34
     fda:	89 b9       	out	0x09, r24	; 9
     fdc:	08 95       	ret

00000fde <main>:




int main(void)
{
     fde:	cf 93       	push	r28
     fe0:	df 93       	push	r29
     fe2:	cd b7       	in	r28, 0x3d	; 61
     fe4:	de b7       	in	r29, 0x3e	; 62
     fe6:	2a 97       	sbiw	r28, 0x0a	; 10
     fe8:	0f b6       	in	r0, 0x3f	; 63
     fea:	f8 94       	cli
     fec:	de bf       	out	0x3e, r29	; 62
     fee:	0f be       	out	0x3f, r0	; 63
     ff0:	cd bf       	out	0x3d, r28	; 61
	uint8_t temp8u = 0x00;
	uint8_t uart_log_timeout_counter = 0;
	uint16_t uart_log_counter = 0;
	
	// Initialize IO
	init_system();
     ff2:	c4 df       	rcall	.-120    	; 0xf7c <init_system>
	// Initialize LED indicator
	initLedIndicator();
     ff4:	66 db       	rcall	.-2356   	; 0x6c2 <initLedIndicator>
	// Enable interrupts
	sei();
     ff6:	78 94       	sei
	
	// Beep
	SetBeeperFreq(1000);
     ff8:	88 ee       	ldi	r24, 0xE8	; 232
     ffa:	93 e0       	ldi	r25, 0x03	; 3
     ffc:	42 d2       	rcall	.+1156   	; 0x1482 <SetBeeperFreq>
	StartBeep(100);
     ffe:	84 e6       	ldi	r24, 0x64	; 100
    1000:	90 e0       	ldi	r25, 0x00	; 0
    1002:	60 d2       	rcall	.+1216   	; 0x14c4 <StartBeep>
	
	InitMenu();
    1004:	63 de       	rcall	.-826    	; 0xccc <InitMenu>

	setMotorDirection(ROTATE_FORWARD);
    1006:	81 e0       	ldi	r24, 0x01	; 1
    1008:	89 d0       	rcall	.+274    	; 0x111c <setMotorDirection>
	
	//button_state = BD_UP;
	//processMenu();
	
	printLedBuffer(0,"      ");
    100a:	6f e9       	ldi	r22, 0x9F	; 159
    100c:	70 e0       	ldi	r23, 0x00	; 0
    100e:	80 e0       	ldi	r24, 0x00	; 0
    1010:	7b db       	rcall	.-2314   	; 0x708 <printLedBuffer>
int main(void)
{
	char str[10];
	uint8_t temp8u = 0x00;
	uint8_t uart_log_timeout_counter = 0;
	uint16_t uart_log_counter = 0;
    1012:	e1 2c       	mov	r14, r1
    1014:	f1 2c       	mov	r15, r1

int main(void)
{
	char str[10];
	uint8_t temp8u = 0x00;
	uint8_t uart_log_timeout_counter = 0;
    1016:	d1 2c       	mov	r13, r1
	printLedBuffer(0,"      ");
	
    while(1)
    {
		
		if (menuUpdateTimer.FOvfl)
    1018:	0a e6       	ldi	r16, 0x6A	; 106
    101a:	10 e0       	ldi	r17, 0x00	; 0
				//---------------------------------//
				// Function is called every 100ms
				// UART message is sent every second
				if (uart_log_timeout_counter == 9)
				{
					uart_log_timeout_counter = 0;
    101c:	c1 2c       	mov	r12, r1
	printLedBuffer(0,"      ");
	
    while(1)
    {
		
		if (menuUpdateTimer.FOvfl)
    101e:	f8 01       	movw	r30, r16
    1020:	80 81       	ld	r24, Z
    1022:	86 ff       	sbrs	r24, 6
    1024:	fc cf       	rjmp	.-8      	; 0x101e <main+0x40>
		{
			// Get new temperature measurement
			update_filtered_adc();
    1026:	34 d9       	rcall	.-3480   	; 0x290 <update_filtered_adc>
			
			// Get new button state
			process_buttons();
    1028:	94 d9       	rcall	.-3288   	; 0x352 <process_buttons>
			
			// Give audio feedback
			if (sound_enable)
    102a:	80 91 65 00 	lds	r24, 0x0065
    102e:	88 23       	and	r24, r24
    1030:	b9 f0       	breq	.+46     	; 0x1060 <main+0x82>
						SetBeeperFreq(800);
						StartBeep(50);
					}
				}
				*/
				if (button_state & BL_MENU)
    1032:	20 91 be 00 	lds	r18, 0x00BE
    1036:	30 91 bf 00 	lds	r19, 0x00BF
    103a:	31 ff       	sbrs	r19, 1
    103c:	07 c0       	rjmp	.+14     	; 0x104c <main+0x6e>
				{
					SetBeeperFreq(800);
    103e:	80 e2       	ldi	r24, 0x20	; 32
    1040:	93 e0       	ldi	r25, 0x03	; 3
    1042:	1f d2       	rcall	.+1086   	; 0x1482 <SetBeeperFreq>
					StartBeep(40);
    1044:	88 e2       	ldi	r24, 0x28	; 40
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	3d d2       	rcall	.+1146   	; 0x14c4 <StartBeep>
    104a:	0a c0       	rjmp	.+20     	; 0x1060 <main+0x82>
				}
				else if (button_action_down)
    104c:	80 91 bd 00 	lds	r24, 0x00BD
    1050:	88 23       	and	r24, r24
    1052:	31 f0       	breq	.+12     	; 0x1060 <main+0x82>
				{
					SetBeeperFreq(1000);
    1054:	88 ee       	ldi	r24, 0xE8	; 232
    1056:	93 e0       	ldi	r25, 0x03	; 3
    1058:	14 d2       	rcall	.+1064   	; 0x1482 <SetBeeperFreq>
					StartBeep(40);
    105a:	88 e2       	ldi	r24, 0x28	; 40
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	32 d2       	rcall	.+1124   	; 0x14c4 <StartBeep>
				}	
			}
			

			// Process user menu states, settings and indication
			processMenu();
    1060:	92 de       	rcall	.-732    	; 0xd86 <processMenu>
			
			// Process cyclic rolling, direction control
			processRollControl();	
    1062:	ea d9       	rcall	.-3116   	; 0x438 <processRollControl>
			
			// Process heater regulation
			processHeaterControl();
    1064:	22 da       	rcall	.-3004   	; 0x4aa <processHeaterControl>
		


			if (menuUpdateTimer.FA_TGL)
    1066:	f8 01       	movw	r30, r16
    1068:	80 81       	ld	r24, Z
    106a:	82 ff       	sbrs	r24, 2
    106c:	32 c0       	rjmp	.+100    	; 0x10d2 <main+0xf4>
				//---------------------------------//
				// Log to UART
				//---------------------------------//
				// Function is called every 100ms
				// UART message is sent every second
				if (uart_log_timeout_counter == 9)
    106e:	f9 e0       	ldi	r31, 0x09	; 9
    1070:	df 12       	cpse	r13, r31
    1072:	2e c0       	rjmp	.+92     	; 0x10d0 <main+0xf2>
				{
					uart_log_timeout_counter = 0;
					
					
					u16toa_align_right(uart_log_counter,str,5,' ');
    1074:	20 e2       	ldi	r18, 0x20	; 32
    1076:	45 e0       	ldi	r20, 0x05	; 5
    1078:	be 01       	movw	r22, r28
    107a:	6f 5f       	subi	r22, 0xFF	; 255
    107c:	7f 4f       	sbci	r23, 0xFF	; 255
    107e:	c7 01       	movw	r24, r14
    1080:	41 df       	rcall	.-382    	; 0xf04 <u16toa_align_right>
					USART_sendstr(str);
    1082:	ce 01       	movw	r24, r28
    1084:	01 96       	adiw	r24, 0x01	; 1
    1086:	61 d2       	rcall	.+1218   	; 0x154a <USART_sendstr>
					USART_sendstr("     ");
    1088:	80 ea       	ldi	r24, 0xA0	; 160
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	5e d2       	rcall	.+1212   	; 0x154a <USART_sendstr>
					
					u16toa_align_right(adc_filtered_value,str,5,' ');
    108e:	20 e2       	ldi	r18, 0x20	; 32
    1090:	45 e0       	ldi	r20, 0x05	; 5
    1092:	be 01       	movw	r22, r28
    1094:	6f 5f       	subi	r22, 0xFF	; 255
    1096:	7f 4f       	sbci	r23, 0xFF	; 255
    1098:	80 91 d6 00 	lds	r24, 0x00D6
    109c:	90 91 d7 00 	lds	r25, 0x00D7
    10a0:	31 df       	rcall	.-414    	; 0xf04 <u16toa_align_right>
					USART_sendstr(str);
    10a2:	ce 01       	movw	r24, r28
    10a4:	01 96       	adiw	r24, 0x01	; 1
    10a6:	51 d2       	rcall	.+1186   	; 0x154a <USART_sendstr>
					USART_sendstr("     ");
    10a8:	80 ea       	ldi	r24, 0xA0	; 160
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	4e d2       	rcall	.+1180   	; 0x154a <USART_sendstr>
					
					if (p_flags & HEATER_ENABLED)
    10ae:	80 91 cf 00 	lds	r24, 0x00CF
    10b2:	86 ff       	sbrs	r24, 6
    10b4:	03 c0       	rjmp	.+6      	; 0x10bc <main+0xde>
					USART_send('1');
    10b6:	81 e3       	ldi	r24, 0x31	; 49
    10b8:	43 d2       	rcall	.+1158   	; 0x1540 <USART_send>
    10ba:	02 c0       	rjmp	.+4      	; 0x10c0 <main+0xe2>
					else
					USART_send('0');
    10bc:	80 e3       	ldi	r24, 0x30	; 48
    10be:	40 d2       	rcall	.+1152   	; 0x1540 <USART_send>
					
					USART_sendstr("\n\r");
    10c0:	86 ea       	ldi	r24, 0xA6	; 166
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	42 d2       	rcall	.+1156   	; 0x154a <USART_sendstr>
					
					uart_log_counter++;
    10c6:	8f ef       	ldi	r24, 0xFF	; 255
    10c8:	e8 1a       	sub	r14, r24
    10ca:	f8 0a       	sbc	r15, r24
				//---------------------------------//
				// Function is called every 100ms
				// UART message is sent every second
				if (uart_log_timeout_counter == 9)
				{
					uart_log_timeout_counter = 0;
    10cc:	dc 2c       	mov	r13, r12
    10ce:	01 c0       	rjmp	.+2      	; 0x10d2 <main+0xf4>
					uart_log_counter++;
					
				}
				else
				{
					uart_log_timeout_counter++;
    10d0:	d3 94       	inc	r13
			}
			
			
			
			
			menuUpdateTimer.FOvfl = 0;	
    10d2:	f8 01       	movw	r30, r16
    10d4:	80 81       	ld	r24, Z
    10d6:	8f 7b       	andi	r24, 0xBF	; 191
    10d8:	80 83       	st	Z, r24
    10da:	a1 cf       	rjmp	.-190    	; 0x101e <main+0x40>

000010dc <setDirectionUnsafe>:

		
static void setDirectionUnsafe(uint8_t dir)
{
	// Save previous control state
	uint8_t ctrl_motor_prev = ctrl_motor;
    10dc:	90 91 d1 00 	lds	r25, 0x00D1
	// Modify motor control bits
	ctrl_motor &= ~(CTRL_FORWARD | CTRL_REVERSE);	
	ctrl_motor |= (dir & (CTRL_FORWARD | CTRL_REVERSE));
    10e0:	83 70       	andi	r24, 0x03	; 3
static void setDirectionUnsafe(uint8_t dir)
{
	// Save previous control state
	uint8_t ctrl_motor_prev = ctrl_motor;
	// Modify motor control bits
	ctrl_motor &= ~(CTRL_FORWARD | CTRL_REVERSE);	
    10e2:	29 2f       	mov	r18, r25
    10e4:	2c 7f       	andi	r18, 0xFC	; 252
	ctrl_motor |= (dir & (CTRL_FORWARD | CTRL_REVERSE));
    10e6:	82 2b       	or	r24, r18
	// If control changed, provide one period for TRIAC to close
	if ((ctrl_motor_prev ^ ctrl_motor) & (CTRL_FORWARD | CTRL_REVERSE))
    10e8:	98 27       	eor	r25, r24
    10ea:	93 70       	andi	r25, 0x03	; 3
    10ec:	19 f4       	brne	.+6      	; 0x10f4 <setDirectionUnsafe+0x18>
{
	// Save previous control state
	uint8_t ctrl_motor_prev = ctrl_motor;
	// Modify motor control bits
	ctrl_motor &= ~(CTRL_FORWARD | CTRL_REVERSE);	
	ctrl_motor |= (dir & (CTRL_FORWARD | CTRL_REVERSE));
    10ee:	80 93 d1 00 	sts	0x00D1, r24
    10f2:	08 95       	ret
	// If control changed, provide one period for TRIAC to close
	if ((ctrl_motor_prev ^ ctrl_motor) & (CTRL_FORWARD | CTRL_REVERSE))
		ctrl_motor |= SKIP_CURRENT_MOTOR_REG;
    10f4:	80 64       	ori	r24, 0x40	; 64
    10f6:	80 93 d1 00 	sts	0x00D1, r24
    10fa:	08 95       	ret

000010fc <setHeaterControl>:


// User function to control heater intensity
inline void setHeaterControl(uint8_t value)
{
	ctrl_heater = value;
    10fc:	80 93 d0 00 	sts	0x00D0, r24
	p_flags &= ~READY_TO_UPDATE_HEATER;
    1100:	90 91 cf 00 	lds	r25, 0x00CF
    1104:	29 2f       	mov	r18, r25
    1106:	2f 77       	andi	r18, 0x7F	; 127
	if (value)
    1108:	88 23       	and	r24, r24
    110a:	21 f0       	breq	.+8      	; 0x1114 <setHeaterControl+0x18>
	p_flags |= HEATER_ENABLED;
    110c:	20 64       	ori	r18, 0x40	; 64
    110e:	20 93 cf 00 	sts	0x00CF, r18
    1112:	08 95       	ret
	else
	p_flags &= ~HEATER_ENABLED;
    1114:	9f 73       	andi	r25, 0x3F	; 63
    1116:	90 93 cf 00 	sts	0x00CF, r25
    111a:	08 95       	ret

0000111c <setMotorDirection>:
	
// User function to control motor rotation
void setMotorDirection(uint8_t dir)
{
	// Disable interrupts from timer0
	TIMSK &= ~(1<<TOIE0);
    111c:	99 b7       	in	r25, 0x39	; 57
    111e:	9e 7f       	andi	r25, 0xFE	; 254
    1120:	99 bf       	out	0x39, r25	; 57
	if (dir == ROTATE_FORWARD)
    1122:	81 30       	cpi	r24, 0x01	; 1
    1124:	41 f4       	brne	.+16     	; 0x1136 <setMotorDirection+0x1a>
	{
		setDirectionUnsafe(CTRL_FORWARD);
    1126:	da df       	rcall	.-76     	; 0x10dc <setDirectionUnsafe>
		rollState &= ~(ROLL_FWD | ROLL_REV);
    1128:	80 91 ce 00 	lds	r24, 0x00CE
    112c:	8c 7f       	andi	r24, 0xFC	; 252
		rollState |= ROLL_FWD;
    112e:	81 60       	ori	r24, 0x01	; 1
    1130:	80 93 ce 00 	sts	0x00CE, r24
    1134:	08 c0       	rjmp	.+16     	; 0x1146 <setMotorDirection+0x2a>
	}		
	else
	{
		setDirectionUnsafe(CTRL_REVERSE);
    1136:	82 e0       	ldi	r24, 0x02	; 2
    1138:	d1 df       	rcall	.-94     	; 0x10dc <setDirectionUnsafe>
		rollState &= ~(ROLL_FWD | ROLL_REV);
    113a:	80 91 ce 00 	lds	r24, 0x00CE
    113e:	8c 7f       	andi	r24, 0xFC	; 252
		rollState |= ROLL_REV;
    1140:	82 60       	ori	r24, 0x02	; 2
    1142:	80 93 ce 00 	sts	0x00CE, r24
	}		
	
	// Store previous roll counter value
	prevRollCounter = rollCycleCounter;
    1146:	80 91 cb 00 	lds	r24, 0x00CB
    114a:	90 91 cc 00 	lds	r25, 0x00CC
    114e:	90 93 ca 00 	sts	0x00CA, r25
    1152:	80 93 c9 00 	sts	0x00C9, r24
	// Reset roll counter
	rollCycleCounter = 0;
    1156:	10 92 cc 00 	sts	0x00CC, r1
    115a:	10 92 cb 00 	sts	0x00CB, r1
		
	// Enable interrupts from timer 0
	TIMSK |= (1<<TOIE0);	
    115e:	89 b7       	in	r24, 0x39	; 57
    1160:	81 60       	ori	r24, 0x01	; 1
    1162:	89 bf       	out	0x39, r24	; 57
    1164:	08 95       	ret

00001166 <startCycleRolling>:



uint8_t startCycleRolling(void)
{
	if ((prevRollCounter != 0) && (prevRollCounter > rollCycleCounter))
    1166:	80 91 c9 00 	lds	r24, 0x00C9
    116a:	90 91 ca 00 	lds	r25, 0x00CA
    116e:	00 97       	sbiw	r24, 0x00	; 0
    1170:	c9 f0       	breq	.+50     	; 0x11a4 <startCycleRolling+0x3e>
    1172:	20 91 cb 00 	lds	r18, 0x00CB
    1176:	30 91 cc 00 	lds	r19, 0x00CC
    117a:	28 17       	cp	r18, r24
    117c:	39 07       	cpc	r19, r25
    117e:	a0 f4       	brcc	.+40     	; 0x11a8 <startCycleRolling+0x42>
	{
		borderState = ( (rollState & (ROLL_FWD | ROLL_REV)) == ROLL_FWD ) ? ROLL_REV : ROLL_FWD;
    1180:	80 91 ce 00 	lds	r24, 0x00CE
    1184:	98 2f       	mov	r25, r24
    1186:	93 70       	andi	r25, 0x03	; 3
    1188:	91 30       	cpi	r25, 0x01	; 1
    118a:	11 f4       	brne	.+4      	; 0x1190 <startCycleRolling+0x2a>
    118c:	92 e0       	ldi	r25, 0x02	; 2
    118e:	01 c0       	rjmp	.+2      	; 0x1192 <startCycleRolling+0x2c>
    1190:	91 e0       	ldi	r25, 0x01	; 1
    1192:	90 93 cd 00 	sts	0x00CD, r25
		rollState |= ROLL_CYCLE;
    1196:	84 60       	ori	r24, 0x04	; 4
    1198:	80 93 ce 00 	sts	0x00CE, r24
		activeRollCycle = 1;	
    119c:	81 e0       	ldi	r24, 0x01	; 1
    119e:	80 93 fb 00 	sts	0x00FB, r24
		return 1;
    11a2:	08 95       	ret
	}
	else
	{
		return 0;	
    11a4:	80 e0       	ldi	r24, 0x00	; 0
    11a6:	08 95       	ret
    11a8:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    11aa:	08 95       	ret

000011ac <stopCycleRolling>:

void stopCycleRolling(void)
{
	rollState &= ~ROLL_CYCLE;
    11ac:	80 91 ce 00 	lds	r24, 0x00CE
    11b0:	8b 7f       	andi	r24, 0xFB	; 251
    11b2:	80 93 ce 00 	sts	0x00CE, r24
    11b6:	08 95       	ret

000011b8 <__vector_16>:




ISR(ANA_COMP_vect)
{
    11b8:	1f 92       	push	r1
    11ba:	0f 92       	push	r0
    11bc:	0f b6       	in	r0, 0x3f	; 63
    11be:	0f 92       	push	r0
    11c0:	11 24       	eor	r1, r1
    11c2:	8f 93       	push	r24
    11c4:	9f 93       	push	r25
	// Once triggered, disable further comparator interrupt
	ACSR &= ~(1<<ACIE);
    11c6:	43 98       	cbi	0x08, 3	; 8
	// Turn on heater TRIAC
	if (heater_cnt < ctrl_heater_sync)
    11c8:	90 91 d2 00 	lds	r25, 0x00D2
    11cc:	80 91 d3 00 	lds	r24, 0x00D3
    11d0:	98 17       	cp	r25, r24
    11d2:	08 f4       	brcc	.+2      	; 0x11d6 <__vector_16+0x1e>
		PORTD |= (1<<PD_HEATER);
    11d4:	94 9a       	sbi	0x12, 4	; 18
	// Reprogram timer0
	TCNT0 = 256 - TRIAC_IMPULSE_TIME;		// Triac gate impulse time
    11d6:	86 ef       	ldi	r24, 0xF6	; 246
    11d8:	82 bf       	out	0x32, r24	; 50
	// Modify state	
	p_state &= ~STATE_MASK;					// Start new state machine cycle
    11da:	80 91 69 00 	lds	r24, 0x0069
    11de:	80 7f       	andi	r24, 0xF0	; 240
	p_state ^= HALF_PERIOD_FLAG;			// Toggle flag
    11e0:	80 58       	subi	r24, 0x80	; 128
    11e2:	80 93 69 00 	sts	0x0069, r24
	
}
    11e6:	9f 91       	pop	r25
    11e8:	8f 91       	pop	r24
    11ea:	0f 90       	pop	r0
    11ec:	0f be       	out	0x3f, r0	; 63
    11ee:	0f 90       	pop	r0
    11f0:	1f 90       	pop	r1
    11f2:	18 95       	reti

000011f4 <__vector_9>:



ISR(TIMER0_OVF_vect)
{
    11f4:	1f 92       	push	r1
    11f6:	0f 92       	push	r0
    11f8:	0f b6       	in	r0, 0x3f	; 63
    11fa:	0f 92       	push	r0
    11fc:	11 24       	eor	r1, r1
    11fe:	2f 93       	push	r18
    1200:	3f 93       	push	r19
    1202:	4f 93       	push	r20
    1204:	5f 93       	push	r21
    1206:	6f 93       	push	r22
    1208:	7f 93       	push	r23
    120a:	8f 93       	push	r24
    120c:	9f 93       	push	r25
    120e:	af 93       	push	r26
    1210:	bf 93       	push	r27
    1212:	ef 93       	push	r30
    1214:	ff 93       	push	r31
	uint8_t temp;
	
	switch(p_state & STATE_MASK)
    1216:	80 91 69 00 	lds	r24, 0x0069
    121a:	8f 70       	andi	r24, 0x0F	; 15
    121c:	81 30       	cpi	r24, 0x01	; 1
    121e:	51 f0       	breq	.+20     	; 0x1234 <__vector_9+0x40>
    1220:	28 f0       	brcs	.+10     	; 0x122c <__vector_9+0x38>
    1222:	82 30       	cpi	r24, 0x02	; 2
    1224:	51 f0       	breq	.+20     	; 0x123a <__vector_9+0x46>
    1226:	83 30       	cpi	r24, 0x03	; 3
    1228:	91 f4       	brne	.+36     	; 0x124e <__vector_9+0x5a>
    122a:	0c c0       	rjmp	.+24     	; 0x1244 <__vector_9+0x50>
	{
		// TRIAC_IMPULSE_TIME finished
		case 0x00:
			// Turn off heater TRIAC
			PORTD &= ~(1<<PD_HEATER);
    122c:	94 98       	cbi	0x12, 4	; 18
			TCNT0 = 256 - (QUATER_PERIOD_TIME - TRIAC_IMPULSE_TIME);
    122e:	8c eb       	ldi	r24, 0xBC	; 188
    1230:	82 bf       	out	0x32, r24	; 50
			break;
    1232:	0d c0       	rjmp	.+26     	; 0x124e <__vector_9+0x5a>
		// QUATER_PERIOD_TIME finished	
		case 0x01:	
			TCNT0 = 256 - (SYNC_IGNORE_TIME - QUATER_PERIOD_TIME);
    1234:	82 ec       	ldi	r24, 0xC2	; 194
    1236:	82 bf       	out	0x32, r24	; 50
			break;	
    1238:	0a c0       	rjmp	.+20     	; 0x124e <__vector_9+0x5a>
		// SYNC_IGNORE_TIME finished	
		case 0x02:
			TCNT0 = 256 - SYNC_LOST_TIMEOUT;
    123a:	80 ee       	ldi	r24, 0xE0	; 224
    123c:	82 bf       	out	0x32, r24	; 50
			// Clear flag and enable interrupt from analog comparator
			ACSR |= (1<<ACI);
    123e:	44 9a       	sbi	0x08, 4	; 8
			ACSR |= (1<<ACIE);
    1240:	43 9a       	sbi	0x08, 3	; 8
			break;
    1242:	05 c0       	rjmp	.+10     	; 0x124e <__vector_9+0x5a>
		// SYNC_LOST_TIMEOUT finished
		case 0x03:
			// Error - sync is lost. It means that device has been disconnected from AC line.
			// Disable all power-consuming devices like LEDs and save user settings to EEPROM.
			PORTD &= ~(1<<PD_HEATER | 1<<PD_M1 | 1<<PD_M2);
    1244:	82 b3       	in	r24, 0x12	; 18
    1246:	83 7e       	andi	r24, 0xE3	; 227
    1248:	82 bb       	out	0x12, r24	; 18
			heater_cnt = 0;
    124a:	10 92 d2 00 	sts	0x00D2, r1
			// Sync is not present - TODO
			break;
	}	

	// Full period check
	if ((p_state & (HALF_PERIOD_FLAG | STATE_MASK)) == (HALF_PERIOD_FLAG | 0x01))
    124e:	80 91 69 00 	lds	r24, 0x0069
    1252:	8f 78       	andi	r24, 0x8F	; 143
    1254:	81 38       	cpi	r24, 0x81	; 129
    1256:	09 f0       	breq	.+2      	; 0x125a <__vector_9+0x66>
    1258:	c1 c0       	rjmp	.+386    	; 0x13dc <__vector_9+0x1e8>
	{
		// Full AC line period is done. Update controls.

		// Output power control - inductive load only
		temp = PORTD;
    125a:	82 b3       	in	r24, 0x12	; 18
		temp &= ~(1<<PD_M1 | 1<<PD_M2);
    125c:	98 2f       	mov	r25, r24
    125e:	93 7f       	andi	r25, 0xF3	; 243
		switch (ctrl_motor & (SKIP_CURRENT_MOTOR_REG | CTRL_FORWARD | CTRL_REVERSE))
    1260:	80 91 d1 00 	lds	r24, 0x00D1
    1264:	83 74       	andi	r24, 0x43	; 67
    1266:	81 30       	cpi	r24, 0x01	; 1
    1268:	21 f0       	breq	.+8      	; 0x1272 <__vector_9+0x7e>
    126a:	82 30       	cpi	r24, 0x02	; 2
    126c:	09 f0       	breq	.+2      	; 0x1270 <__vector_9+0x7c>
    126e:	9d c0       	rjmp	.+314    	; 0x13aa <__vector_9+0x1b6>
    1270:	4e c0       	rjmp	.+156    	; 0x130e <__vector_9+0x11a>
		{
			case CTRL_FORWARD:		// Rotating forward
				temp |= (1<<PD_M1);
    1272:	94 60       	ori	r25, 0x04	; 4
				PORTD = temp;
    1274:	92 bb       	out	0x12, r25	; 18
	
// Function to process rolling - sets rotation direction for next period
// Call once per each AC line period
static inline void controllRolling()
{
	rollCycleCounter++;
    1276:	80 91 cb 00 	lds	r24, 0x00CB
    127a:	90 91 cc 00 	lds	r25, 0x00CC
    127e:	01 96       	adiw	r24, 0x01	; 1
    1280:	90 93 cc 00 	sts	0x00CC, r25
    1284:	80 93 cb 00 	sts	0x00CB, r24
	uint8_t changeDir = 0;
	// Check overflow!
	
	if (rollState & ROLL_CYCLE)							// if cycle rolling
    1288:	40 91 ce 00 	lds	r20, 0x00CE
    128c:	42 ff       	sbrs	r20, 2
    128e:	2c c0       	rjmp	.+88     	; 0x12e8 <__vector_9+0xf4>
	{
		if (rollCycleCounter == prevRollCounter)				// if reached a border
    1290:	20 91 c9 00 	lds	r18, 0x00C9
    1294:	30 91 ca 00 	lds	r19, 0x00CA
    1298:	82 17       	cp	r24, r18
    129a:	93 07       	cpc	r25, r19
    129c:	29 f5       	brne	.+74     	; 0x12e8 <__vector_9+0xf4>
		{
			if ((rollState & (ROLL_FWD | ROLL_REV)) == borderState)	// if reached border == finish border (set in startCycleRoll)
    129e:	94 2f       	mov	r25, r20
    12a0:	93 70       	andi	r25, 0x03	; 3
    12a2:	80 91 cd 00 	lds	r24, 0x00CD
    12a6:	98 13       	cpse	r25, r24
    12a8:	a3 c0       	rjmp	.+326    	; 0x13f0 <__vector_9+0x1fc>
			{ 
				// Reached border is finish. Special processing required.
				if (activeRollCycle >= rollCycleSet)	
    12aa:	80 91 fb 00 	lds	r24, 0x00FB
    12ae:	90 91 66 00 	lds	r25, 0x0066
    12b2:	89 17       	cp	r24, r25
    12b4:	20 f0       	brcs	.+8      	; 0x12be <__vector_9+0xca>
				{
					// Done desired number of cycles
					rollState &= ~ROLL_CYCLE;			// stop cycle rolling
    12b6:	4b 7f       	andi	r20, 0xFB	; 251
    12b8:	40 93 ce 00 	sts	0x00CE, r20
    12bc:	15 c0       	rjmp	.+42     	; 0x12e8 <__vector_9+0xf4>
					// Done!
				}
				else		
				{
					// Do more cycles!
					activeRollCycle++;	
    12be:	8f 5f       	subi	r24, 0xFF	; 255
    12c0:	80 93 fb 00 	sts	0x00FB, r24
    12c4:	95 c0       	rjmp	.+298    	; 0x13f0 <__vector_9+0x1fc>
			//---- Change direction ----//
			if (changeDir)
			{
				if (rollState & ROLL_FWD)
				{
					rollState &= ~ROLL_FWD;
    12c6:	8e 7f       	andi	r24, 0xFE	; 254
					rollState |= ROLL_REV;
    12c8:	82 60       	ori	r24, 0x02	; 2
    12ca:	80 93 ce 00 	sts	0x00CE, r24
					setDirectionUnsafe(CTRL_REVERSE);
    12ce:	82 e0       	ldi	r24, 0x02	; 2
    12d0:	05 df       	rcall	.-502    	; 0x10dc <setDirectionUnsafe>
    12d2:	06 c0       	rjmp	.+12     	; 0x12e0 <__vector_9+0xec>
				}
				else
				{
					rollState &= ~ROLL_REV;
    12d4:	8d 7f       	andi	r24, 0xFD	; 253
					rollState |= ROLL_FWD;
    12d6:	81 60       	ori	r24, 0x01	; 1
    12d8:	80 93 ce 00 	sts	0x00CE, r24
					setDirectionUnsafe(CTRL_FORWARD);
    12dc:	81 e0       	ldi	r24, 0x01	; 1
    12de:	fe de       	rcall	.-516    	; 0x10dc <setDirectionUnsafe>
				}
				rollCycleCounter = 0;	// Reset roll counter
    12e0:	10 92 cc 00 	sts	0x00CC, r1
    12e4:	10 92 cb 00 	sts	0x00CB, r1
	
	
		
	
	// Set flags - actual rotate direction
	p_flags &= ~(ROTATE_FORWARD | ROTATE_REVERSE);
    12e8:	80 91 cf 00 	lds	r24, 0x00CF
    12ec:	8c 7f       	andi	r24, 0xFC	; 252
    12ee:	80 93 cf 00 	sts	0x00CF, r24
	if (rollState & ROLL_FWD)
    12f2:	90 91 ce 00 	lds	r25, 0x00CE
    12f6:	90 ff       	sbrs	r25, 0
    12f8:	04 c0       	rjmp	.+8      	; 0x1302 <__vector_9+0x10e>
		p_flags |= ROTATE_FORWARD;
    12fa:	81 60       	ori	r24, 0x01	; 1
    12fc:	80 93 cf 00 	sts	0x00CF, r24
    1300:	5a c0       	rjmp	.+180    	; 0x13b6 <__vector_9+0x1c2>
	else if (rollState & ROLL_REV)
    1302:	91 ff       	sbrs	r25, 1
    1304:	58 c0       	rjmp	.+176    	; 0x13b6 <__vector_9+0x1c2>
		p_flags |= ROTATE_REVERSE;
    1306:	82 60       	ori	r24, 0x02	; 2
    1308:	80 93 cf 00 	sts	0x00CF, r24
    130c:	54 c0       	rjmp	.+168    	; 0x13b6 <__vector_9+0x1c2>
				PORTD = temp;
			//	controlRolling(1);	// inc counter
				controllRolling();	
				break;
			case CTRL_REVERSE:		// Rotating reverse
				temp |= (1<<PD_M2);	
    130e:	98 60       	ori	r25, 0x08	; 8
				PORTD = temp;
    1310:	92 bb       	out	0x12, r25	; 18
	
// Function to process rolling - sets rotation direction for next period
// Call once per each AC line period
static inline void controllRolling()
{
	rollCycleCounter++;
    1312:	80 91 cb 00 	lds	r24, 0x00CB
    1316:	90 91 cc 00 	lds	r25, 0x00CC
    131a:	01 96       	adiw	r24, 0x01	; 1
    131c:	90 93 cc 00 	sts	0x00CC, r25
    1320:	80 93 cb 00 	sts	0x00CB, r24
	uint8_t changeDir = 0;
	// Check overflow!
	
	if (rollState & ROLL_CYCLE)							// if cycle rolling
    1324:	40 91 ce 00 	lds	r20, 0x00CE
    1328:	42 ff       	sbrs	r20, 2
    132a:	2c c0       	rjmp	.+88     	; 0x1384 <__vector_9+0x190>
	{
		if (rollCycleCounter == prevRollCounter)				// if reached a border
    132c:	20 91 c9 00 	lds	r18, 0x00C9
    1330:	30 91 ca 00 	lds	r19, 0x00CA
    1334:	82 17       	cp	r24, r18
    1336:	93 07       	cpc	r25, r19
    1338:	29 f5       	brne	.+74     	; 0x1384 <__vector_9+0x190>
		{
			if ((rollState & (ROLL_FWD | ROLL_REV)) == borderState)	// if reached border == finish border (set in startCycleRoll)
    133a:	94 2f       	mov	r25, r20
    133c:	93 70       	andi	r25, 0x03	; 3
    133e:	80 91 cd 00 	lds	r24, 0x00CD
    1342:	98 13       	cpse	r25, r24
    1344:	5a c0       	rjmp	.+180    	; 0x13fa <__vector_9+0x206>
			{ 
				// Reached border is finish. Special processing required.
				if (activeRollCycle >= rollCycleSet)	
    1346:	80 91 fb 00 	lds	r24, 0x00FB
    134a:	90 91 66 00 	lds	r25, 0x0066
    134e:	89 17       	cp	r24, r25
    1350:	20 f0       	brcs	.+8      	; 0x135a <__vector_9+0x166>
				{
					// Done desired number of cycles
					rollState &= ~ROLL_CYCLE;			// stop cycle rolling
    1352:	4b 7f       	andi	r20, 0xFB	; 251
    1354:	40 93 ce 00 	sts	0x00CE, r20
    1358:	15 c0       	rjmp	.+42     	; 0x1384 <__vector_9+0x190>
					// Done!
				}
				else		
				{
					// Do more cycles!
					activeRollCycle++;	
    135a:	8f 5f       	subi	r24, 0xFF	; 255
    135c:	80 93 fb 00 	sts	0x00FB, r24
    1360:	4c c0       	rjmp	.+152    	; 0x13fa <__vector_9+0x206>
			//---- Change direction ----//
			if (changeDir)
			{
				if (rollState & ROLL_FWD)
				{
					rollState &= ~ROLL_FWD;
    1362:	8e 7f       	andi	r24, 0xFE	; 254
					rollState |= ROLL_REV;
    1364:	82 60       	ori	r24, 0x02	; 2
    1366:	80 93 ce 00 	sts	0x00CE, r24
					setDirectionUnsafe(CTRL_REVERSE);
    136a:	82 e0       	ldi	r24, 0x02	; 2
    136c:	b7 de       	rcall	.-658    	; 0x10dc <setDirectionUnsafe>
    136e:	06 c0       	rjmp	.+12     	; 0x137c <__vector_9+0x188>
				}
				else
				{
					rollState &= ~ROLL_REV;
    1370:	8d 7f       	andi	r24, 0xFD	; 253
					rollState |= ROLL_FWD;
    1372:	81 60       	ori	r24, 0x01	; 1
    1374:	80 93 ce 00 	sts	0x00CE, r24
					setDirectionUnsafe(CTRL_FORWARD);
    1378:	81 e0       	ldi	r24, 0x01	; 1
    137a:	b0 de       	rcall	.-672    	; 0x10dc <setDirectionUnsafe>
				}
				rollCycleCounter = 0;	// Reset roll counter
    137c:	10 92 cc 00 	sts	0x00CC, r1
    1380:	10 92 cb 00 	sts	0x00CB, r1
	
	
		
	
	// Set flags - actual rotate direction
	p_flags &= ~(ROTATE_FORWARD | ROTATE_REVERSE);
    1384:	80 91 cf 00 	lds	r24, 0x00CF
    1388:	8c 7f       	andi	r24, 0xFC	; 252
    138a:	80 93 cf 00 	sts	0x00CF, r24
	if (rollState & ROLL_FWD)
    138e:	90 91 ce 00 	lds	r25, 0x00CE
    1392:	90 ff       	sbrs	r25, 0
    1394:	04 c0       	rjmp	.+8      	; 0x139e <__vector_9+0x1aa>
		p_flags |= ROTATE_FORWARD;
    1396:	81 60       	ori	r24, 0x01	; 1
    1398:	80 93 cf 00 	sts	0x00CF, r24
    139c:	0c c0       	rjmp	.+24     	; 0x13b6 <__vector_9+0x1c2>
	else if (rollState & ROLL_REV)
    139e:	91 ff       	sbrs	r25, 1
    13a0:	0a c0       	rjmp	.+20     	; 0x13b6 <__vector_9+0x1c2>
		p_flags |= ROTATE_REVERSE;
    13a2:	82 60       	ori	r24, 0x02	; 2
    13a4:	80 93 cf 00 	sts	0x00CF, r24
    13a8:	06 c0       	rjmp	.+12     	; 0x13b6 <__vector_9+0x1c2>
				PORTD = temp;
			//	controlRolling(-1);	// dec counter
				controllRolling();	
				break;
			default:				// Skip current period to allow TRIACs fully close
				PORTD = temp;
    13aa:	92 bb       	out	0x12, r25	; 18
				ctrl_motor &= ~SKIP_CURRENT_MOTOR_REG;
    13ac:	80 91 d1 00 	lds	r24, 0x00D1
    13b0:	8f 7b       	andi	r24, 0xBF	; 191
    13b2:	80 93 d1 00 	sts	0x00D1, r24
			//	controlRolling(0);	// do not update counter - motor is disabled for current period
		}
		

		// Process heater control counter
		if (heater_cnt == HEATER_REGULATION_PERIODS - 1)
    13b6:	80 91 d2 00 	lds	r24, 0x00D2
    13ba:	89 30       	cpi	r24, 0x09	; 9
    13bc:	61 f4       	brne	.+24     	; 0x13d6 <__vector_9+0x1e2>
		{
			heater_cnt = 0;
    13be:	10 92 d2 00 	sts	0x00D2, r1
			ctrl_heater_sync = ctrl_heater;
    13c2:	80 91 d0 00 	lds	r24, 0x00D0
    13c6:	80 93 d3 00 	sts	0x00D3, r24
			p_flags |= READY_TO_UPDATE_HEATER;
    13ca:	80 91 cf 00 	lds	r24, 0x00CF
    13ce:	80 68       	ori	r24, 0x80	; 128
    13d0:	80 93 cf 00 	sts	0x00CF, r24
    13d4:	03 c0       	rjmp	.+6      	; 0x13dc <__vector_9+0x1e8>
		}
		else
		{
			heater_cnt++;
    13d6:	8f 5f       	subi	r24, 0xFF	; 255
    13d8:	80 93 d2 00 	sts	0x00D2, r24
			
			
	}
	

	if ((p_state & STATE_MASK)  != 0x0F)
    13dc:	80 91 69 00 	lds	r24, 0x0069
    13e0:	98 2f       	mov	r25, r24
    13e2:	9f 70       	andi	r25, 0x0F	; 15
    13e4:	9f 30       	cpi	r25, 0x0F	; 15
    13e6:	71 f0       	breq	.+28     	; 0x1404 <__vector_9+0x210>
		p_state++;
    13e8:	8f 5f       	subi	r24, 0xFF	; 255
    13ea:	80 93 69 00 	sts	0x0069, r24
    13ee:	0a c0       	rjmp	.+20     	; 0x1404 <__vector_9+0x210>
			}
			
			//---- Change direction ----//
			if (changeDir)
			{
				if (rollState & ROLL_FWD)
    13f0:	80 91 ce 00 	lds	r24, 0x00CE
    13f4:	80 fd       	sbrc	r24, 0
    13f6:	67 cf       	rjmp	.-306    	; 0x12c6 <__vector_9+0xd2>
    13f8:	6d cf       	rjmp	.-294    	; 0x12d4 <__vector_9+0xe0>
    13fa:	80 91 ce 00 	lds	r24, 0x00CE
    13fe:	80 fd       	sbrc	r24, 0
    1400:	b0 cf       	rjmp	.-160    	; 0x1362 <__vector_9+0x16e>
    1402:	b6 cf       	rjmp	.-148    	; 0x1370 <__vector_9+0x17c>
	

	if ((p_state & STATE_MASK)  != 0x0F)
		p_state++;

}	
    1404:	ff 91       	pop	r31
    1406:	ef 91       	pop	r30
    1408:	bf 91       	pop	r27
    140a:	af 91       	pop	r26
    140c:	9f 91       	pop	r25
    140e:	8f 91       	pop	r24
    1410:	7f 91       	pop	r23
    1412:	6f 91       	pop	r22
    1414:	5f 91       	pop	r21
    1416:	4f 91       	pop	r20
    1418:	3f 91       	pop	r19
    141a:	2f 91       	pop	r18
    141c:	0f 90       	pop	r0
    141e:	0f be       	out	0x3f, r0	; 63
    1420:	0f 90       	pop	r0
    1422:	1f 90       	pop	r1
    1424:	18 95       	reti

00001426 <processSoftTimer8b>:
 
 
 
 
 void processSoftTimer8b(SoftTimer8b_t *tmr)
 {
    1426:	fc 01       	movw	r30, r24
	 uint8_t newTimerVal;

	 if (!tmr->Enabled)
    1428:	80 81       	ld	r24, Z
    142a:	80 ff       	sbrs	r24, 0
    142c:	29 c0       	rjmp	.+82     	; 0x1480 <processSoftTimer8b+0x5a>
		return;
	 
	 tmr->FA_EQ = 0;
	 tmr->FA_GE = 0;
	 tmr->FTop = 0;
    142e:	87 7e       	andi	r24, 0xE7	; 231
    1430:	8f 7d       	andi	r24, 0xDF	; 223
    1432:	80 83       	st	Z, r24
	 
	 if (tmr->Timer >= tmr->Top)
    1434:	81 81       	ldd	r24, Z+1	; 0x01
    1436:	92 81       	ldd	r25, Z+2	; 0x02
    1438:	89 17       	cp	r24, r25
    143a:	58 f0       	brcs	.+22     	; 0x1452 <processSoftTimer8b+0x2c>
	 {
		 if (tmr->RunOnce)
    143c:	90 81       	ld	r25, Z
    143e:	91 ff       	sbrs	r25, 1
    1440:	02 c0       	rjmp	.+4      	; 0x1446 <processSoftTimer8b+0x20>
		 {
			 tmr->Enabled = 0;
    1442:	9e 7f       	andi	r25, 0xFE	; 254
    1444:	90 83       	st	Z, r25
		 }
		 tmr->FTop = 1;
    1446:	90 81       	ld	r25, Z
		 tmr->FOvfl = 1;
    1448:	90 62       	ori	r25, 0x20	; 32
    144a:	90 64       	ori	r25, 0x40	; 64
    144c:	90 83       	st	Z, r25
		 newTimerVal = 0;
    144e:	20 e0       	ldi	r18, 0x00	; 0
    1450:	02 c0       	rjmp	.+4      	; 0x1456 <processSoftTimer8b+0x30>
	 }
	 else
	 {
		 newTimerVal = tmr->Timer + 1;
    1452:	28 2f       	mov	r18, r24
    1454:	2f 5f       	subi	r18, 0xFF	; 255
	 }
	 
	 if (tmr->Timer == tmr->CompA)
    1456:	93 81       	ldd	r25, Z+3	; 0x03
    1458:	89 13       	cpse	r24, r25
    145a:	0c c0       	rjmp	.+24     	; 0x1474 <processSoftTimer8b+0x4e>
	 {
		 tmr->FA_EQ = 1;
    145c:	80 81       	ld	r24, Z
		 tmr->FA_GE = 1;
    145e:	88 60       	ori	r24, 0x08	; 8
    1460:	80 61       	ori	r24, 0x10	; 16
		 tmr->FA_TGL = !tmr->FA_TGL;
    1462:	82 fb       	bst	r24, 2
    1464:	33 27       	eor	r19, r19
    1466:	30 f9       	bld	r19, 0
    1468:	91 e0       	ldi	r25, 0x01	; 1
    146a:	93 27       	eor	r25, r19
    146c:	90 fb       	bst	r25, 0
    146e:	82 f9       	bld	r24, 2
    1470:	80 83       	st	Z, r24
    1472:	05 c0       	rjmp	.+10     	; 0x147e <processSoftTimer8b+0x58>
	 }
	 else if (tmr->Timer >= tmr->CompA)
    1474:	89 17       	cp	r24, r25
    1476:	18 f0       	brcs	.+6      	; 0x147e <processSoftTimer8b+0x58>
	 {
		 tmr->FA_GE = 1;
    1478:	80 81       	ld	r24, Z
    147a:	80 61       	ori	r24, 0x10	; 16
    147c:	80 83       	st	Z, r24
	 }
	 
	 tmr->Timer = newTimerVal; 
    147e:	21 83       	std	Z+1, r18	; 0x01
    1480:	08 95       	ret

00001482 <SetBeeperFreq>:
}

// Setup beeper frequency (Hz)
void SetBeeperFreq(uint16_t freq_hz)
{
	uint16_t period_us = 1000000 / freq_hz;
    1482:	9c 01       	movw	r18, r24
    1484:	40 e0       	ldi	r20, 0x00	; 0
    1486:	50 e0       	ldi	r21, 0x00	; 0
    1488:	60 e4       	ldi	r22, 0x40	; 64
    148a:	72 e4       	ldi	r23, 0x42	; 66
    148c:	8f e0       	ldi	r24, 0x0F	; 15
    148e:	90 e0       	ldi	r25, 0x00	; 0
    1490:	f2 d1       	rcall	.+996    	; 0x1876 <__divmodsi4>
	if (period_us & 0xFFF8)
    1492:	da 01       	movw	r26, r20
    1494:	c9 01       	movw	r24, r18
    1496:	88 7f       	andi	r24, 0xF8	; 248
    1498:	aa 27       	eor	r26, r26
    149a:	bb 27       	eor	r27, r27
    149c:	89 2b       	or	r24, r25
    149e:	59 f0       	breq	.+22     	; 0x14b6 <SetBeeperFreq+0x34>
	OCR1A = (period_us>>3) - 1;
    14a0:	36 95       	lsr	r19
    14a2:	27 95       	ror	r18
    14a4:	36 95       	lsr	r19
    14a6:	27 95       	ror	r18
    14a8:	36 95       	lsr	r19
    14aa:	27 95       	ror	r18
    14ac:	21 50       	subi	r18, 0x01	; 1
    14ae:	31 09       	sbc	r19, r1
    14b0:	3b bd       	out	0x2b, r19	; 43
    14b2:	2a bd       	out	0x2a, r18	; 42
    14b4:	04 c0       	rjmp	.+8      	; 0x14be <SetBeeperFreq+0x3c>
		else
	OCR1A = 0x1;
    14b6:	81 e0       	ldi	r24, 0x01	; 1
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	9b bd       	out	0x2b, r25	; 43
    14bc:	8a bd       	out	0x2a, r24	; 42
	TCNT1 = 0;
    14be:	1d bc       	out	0x2d, r1	; 45
    14c0:	1c bc       	out	0x2c, r1	; 44
    14c2:	08 95       	ret

000014c4 <StartBeep>:
}

// Beep for some time in ms
void StartBeep(uint16_t time_ms)
{
	beep_cnt = time_ms;
    14c4:	90 93 d5 00 	sts	0x00D5, r25
    14c8:	80 93 d4 00 	sts	0x00D4, r24
// Enable / disable beeper output
inline void SetBeepOutput(uint8_t val)
{
	if (val)
		// Toggle OCR1A on compare match
		TCCR1A |= (1<<COM1A0);
    14cc:	8f b5       	in	r24, 0x2f	; 47
    14ce:	80 64       	ori	r24, 0x40	; 64
    14d0:	8f bd       	out	0x2f, r24	; 47
    14d2:	08 95       	ret

000014d4 <__vector_3>:
	SetBeepOutput(0);
}


ISR(TIMER2_COMP_vect)
{	
    14d4:	1f 92       	push	r1
    14d6:	0f 92       	push	r0
    14d8:	0f b6       	in	r0, 0x3f	; 63
    14da:	0f 92       	push	r0
    14dc:	11 24       	eor	r1, r1
    14de:	2f 93       	push	r18
    14e0:	3f 93       	push	r19
    14e2:	4f 93       	push	r20
    14e4:	5f 93       	push	r21
    14e6:	6f 93       	push	r22
    14e8:	7f 93       	push	r23
    14ea:	8f 93       	push	r24
    14ec:	9f 93       	push	r25
    14ee:	af 93       	push	r26
    14f0:	bf 93       	push	r27
    14f2:	ef 93       	push	r30
    14f4:	ff 93       	push	r31
	// Manage beeper
	if (beep_cnt)
    14f6:	80 91 d4 00 	lds	r24, 0x00D4
    14fa:	90 91 d5 00 	lds	r25, 0x00D5
    14fe:	00 97       	sbiw	r24, 0x00	; 0
    1500:	31 f0       	breq	.+12     	; 0x150e <__vector_3+0x3a>
		beep_cnt--;
    1502:	01 97       	sbiw	r24, 0x01	; 1
    1504:	90 93 d5 00 	sts	0x00D5, r25
    1508:	80 93 d4 00 	sts	0x00D4, r24
    150c:	03 c0       	rjmp	.+6      	; 0x1514 <__vector_3+0x40>
	if (val)
		// Toggle OCR1A on compare match
		TCCR1A |= (1<<COM1A0);
	else
		// Disable OCR1A output
		TCCR1A &= ~(1<<COM1A0 | 1<<COM1A1);
    150e:	8f b5       	in	r24, 0x2f	; 47
    1510:	8f 73       	andi	r24, 0x3F	; 63
    1512:	8f bd       	out	0x2f, r24	; 47
		beep_cnt--;
	else
		SetBeepOutput(0);	// done
	
	// Manage LED indicator
	processLedIndicator();
    1514:	33 d8       	rcall	.-3994   	; 0x57c <processLedIndicator>
	
	// Process menu update timer
	processSoftTimer8b(&menuUpdateTimer);	
    1516:	8a e6       	ldi	r24, 0x6A	; 106
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	85 df       	rcall	.-246    	; 0x1426 <processSoftTimer8b>
	
	
	// Start ADC conversion
	ADCSRA |= (1<<ADSC);
    151c:	36 9a       	sbi	0x06, 6	; 6
	
		
}
    151e:	ff 91       	pop	r31
    1520:	ef 91       	pop	r30
    1522:	bf 91       	pop	r27
    1524:	af 91       	pop	r26
    1526:	9f 91       	pop	r25
    1528:	8f 91       	pop	r24
    152a:	7f 91       	pop	r23
    152c:	6f 91       	pop	r22
    152e:	5f 91       	pop	r21
    1530:	4f 91       	pop	r20
    1532:	3f 91       	pop	r19
    1534:	2f 91       	pop	r18
    1536:	0f 90       	pop	r0
    1538:	0f be       	out	0x3f, r0	; 63
    153a:	0f 90       	pop	r0
    153c:	1f 90       	pop	r1
    153e:	18 95       	reti

00001540 <USART_send>:



void USART_send( uint8_t data )
{
	UCSRA |= (1<<TXC);                 // Clear flag
    1540:	5e 9a       	sbi	0x0b, 6	; 11
	UDR = data;
    1542:	8c b9       	out	0x0c, r24	; 12
	while ( !(UCSRA & (1<<TXC)) );  // Wait
    1544:	5e 9b       	sbis	0x0b, 6	; 11
    1546:	fe cf       	rjmp	.-4      	; 0x1544 <USART_send+0x4>
}
    1548:	08 95       	ret

0000154a <USART_sendstr>:


void USART_sendstr(char* str)
{
    154a:	1f 93       	push	r17
    154c:	cf 93       	push	r28
    154e:	df 93       	push	r29
    1550:	ec 01       	movw	r28, r24
	uint8_t i = 0;
	while (str[i])
    1552:	88 81       	ld	r24, Y
    1554:	88 23       	and	r24, r24
    1556:	49 f0       	breq	.+18     	; 0x156a <USART_sendstr+0x20>
}


void USART_sendstr(char* str)
{
	uint8_t i = 0;
    1558:	10 e0       	ldi	r17, 0x00	; 0
	while (str[i])
	{
		USART_send(str[i++]);
    155a:	1f 5f       	subi	r17, 0xFF	; 255
    155c:	f1 df       	rcall	.-30     	; 0x1540 <USART_send>


void USART_sendstr(char* str)
{
	uint8_t i = 0;
	while (str[i])
    155e:	fe 01       	movw	r30, r28
    1560:	e1 0f       	add	r30, r17
    1562:	f1 1d       	adc	r31, r1
    1564:	80 81       	ld	r24, Z
    1566:	81 11       	cpse	r24, r1
    1568:	f8 cf       	rjmp	.-16     	; 0x155a <USART_sendstr+0x10>
	{
		USART_send(str[i++]);
	}
}
    156a:	df 91       	pop	r29
    156c:	cf 91       	pop	r28
    156e:	1f 91       	pop	r17
    1570:	08 95       	ret

00001572 <__subsf3>:
    1572:	50 58       	subi	r21, 0x80	; 128

00001574 <__addsf3>:
    1574:	bb 27       	eor	r27, r27
    1576:	aa 27       	eor	r26, r26
    1578:	0e d0       	rcall	.+28     	; 0x1596 <__addsf3x>
    157a:	e0 c0       	rjmp	.+448    	; 0x173c <__fp_round>
    157c:	d1 d0       	rcall	.+418    	; 0x1720 <__fp_pscA>
    157e:	30 f0       	brcs	.+12     	; 0x158c <__addsf3+0x18>
    1580:	d6 d0       	rcall	.+428    	; 0x172e <__fp_pscB>
    1582:	20 f0       	brcs	.+8      	; 0x158c <__addsf3+0x18>
    1584:	31 f4       	brne	.+12     	; 0x1592 <__addsf3+0x1e>
    1586:	9f 3f       	cpi	r25, 0xFF	; 255
    1588:	11 f4       	brne	.+4      	; 0x158e <__addsf3+0x1a>
    158a:	1e f4       	brtc	.+6      	; 0x1592 <__addsf3+0x1e>
    158c:	c6 c0       	rjmp	.+396    	; 0x171a <__fp_nan>
    158e:	0e f4       	brtc	.+2      	; 0x1592 <__addsf3+0x1e>
    1590:	e0 95       	com	r30
    1592:	e7 fb       	bst	r30, 7
    1594:	bc c0       	rjmp	.+376    	; 0x170e <__fp_inf>

00001596 <__addsf3x>:
    1596:	e9 2f       	mov	r30, r25
    1598:	e2 d0       	rcall	.+452    	; 0x175e <__fp_split3>
    159a:	80 f3       	brcs	.-32     	; 0x157c <__addsf3+0x8>
    159c:	ba 17       	cp	r27, r26
    159e:	62 07       	cpc	r22, r18
    15a0:	73 07       	cpc	r23, r19
    15a2:	84 07       	cpc	r24, r20
    15a4:	95 07       	cpc	r25, r21
    15a6:	18 f0       	brcs	.+6      	; 0x15ae <__addsf3x+0x18>
    15a8:	71 f4       	brne	.+28     	; 0x15c6 <__addsf3x+0x30>
    15aa:	9e f5       	brtc	.+102    	; 0x1612 <__addsf3x+0x7c>
    15ac:	fa c0       	rjmp	.+500    	; 0x17a2 <__fp_zero>
    15ae:	0e f4       	brtc	.+2      	; 0x15b2 <__addsf3x+0x1c>
    15b0:	e0 95       	com	r30
    15b2:	0b 2e       	mov	r0, r27
    15b4:	ba 2f       	mov	r27, r26
    15b6:	a0 2d       	mov	r26, r0
    15b8:	0b 01       	movw	r0, r22
    15ba:	b9 01       	movw	r22, r18
    15bc:	90 01       	movw	r18, r0
    15be:	0c 01       	movw	r0, r24
    15c0:	ca 01       	movw	r24, r20
    15c2:	a0 01       	movw	r20, r0
    15c4:	11 24       	eor	r1, r1
    15c6:	ff 27       	eor	r31, r31
    15c8:	59 1b       	sub	r21, r25
    15ca:	99 f0       	breq	.+38     	; 0x15f2 <__addsf3x+0x5c>
    15cc:	59 3f       	cpi	r21, 0xF9	; 249
    15ce:	50 f4       	brcc	.+20     	; 0x15e4 <__addsf3x+0x4e>
    15d0:	50 3e       	cpi	r21, 0xE0	; 224
    15d2:	68 f1       	brcs	.+90     	; 0x162e <__addsf3x+0x98>
    15d4:	1a 16       	cp	r1, r26
    15d6:	f0 40       	sbci	r31, 0x00	; 0
    15d8:	a2 2f       	mov	r26, r18
    15da:	23 2f       	mov	r18, r19
    15dc:	34 2f       	mov	r19, r20
    15de:	44 27       	eor	r20, r20
    15e0:	58 5f       	subi	r21, 0xF8	; 248
    15e2:	f3 cf       	rjmp	.-26     	; 0x15ca <__addsf3x+0x34>
    15e4:	46 95       	lsr	r20
    15e6:	37 95       	ror	r19
    15e8:	27 95       	ror	r18
    15ea:	a7 95       	ror	r26
    15ec:	f0 40       	sbci	r31, 0x00	; 0
    15ee:	53 95       	inc	r21
    15f0:	c9 f7       	brne	.-14     	; 0x15e4 <__addsf3x+0x4e>
    15f2:	7e f4       	brtc	.+30     	; 0x1612 <__addsf3x+0x7c>
    15f4:	1f 16       	cp	r1, r31
    15f6:	ba 0b       	sbc	r27, r26
    15f8:	62 0b       	sbc	r22, r18
    15fa:	73 0b       	sbc	r23, r19
    15fc:	84 0b       	sbc	r24, r20
    15fe:	ba f0       	brmi	.+46     	; 0x162e <__addsf3x+0x98>
    1600:	91 50       	subi	r25, 0x01	; 1
    1602:	a1 f0       	breq	.+40     	; 0x162c <__addsf3x+0x96>
    1604:	ff 0f       	add	r31, r31
    1606:	bb 1f       	adc	r27, r27
    1608:	66 1f       	adc	r22, r22
    160a:	77 1f       	adc	r23, r23
    160c:	88 1f       	adc	r24, r24
    160e:	c2 f7       	brpl	.-16     	; 0x1600 <__addsf3x+0x6a>
    1610:	0e c0       	rjmp	.+28     	; 0x162e <__addsf3x+0x98>
    1612:	ba 0f       	add	r27, r26
    1614:	62 1f       	adc	r22, r18
    1616:	73 1f       	adc	r23, r19
    1618:	84 1f       	adc	r24, r20
    161a:	48 f4       	brcc	.+18     	; 0x162e <__addsf3x+0x98>
    161c:	87 95       	ror	r24
    161e:	77 95       	ror	r23
    1620:	67 95       	ror	r22
    1622:	b7 95       	ror	r27
    1624:	f7 95       	ror	r31
    1626:	9e 3f       	cpi	r25, 0xFE	; 254
    1628:	08 f0       	brcs	.+2      	; 0x162c <__addsf3x+0x96>
    162a:	b3 cf       	rjmp	.-154    	; 0x1592 <__addsf3+0x1e>
    162c:	93 95       	inc	r25
    162e:	88 0f       	add	r24, r24
    1630:	08 f0       	brcs	.+2      	; 0x1634 <__addsf3x+0x9e>
    1632:	99 27       	eor	r25, r25
    1634:	ee 0f       	add	r30, r30
    1636:	97 95       	ror	r25
    1638:	87 95       	ror	r24
    163a:	08 95       	ret

0000163c <__fixunssfsi>:
    163c:	98 d0       	rcall	.+304    	; 0x176e <__fp_splitA>
    163e:	88 f0       	brcs	.+34     	; 0x1662 <__fixunssfsi+0x26>
    1640:	9f 57       	subi	r25, 0x7F	; 127
    1642:	90 f0       	brcs	.+36     	; 0x1668 <__fixunssfsi+0x2c>
    1644:	b9 2f       	mov	r27, r25
    1646:	99 27       	eor	r25, r25
    1648:	b7 51       	subi	r27, 0x17	; 23
    164a:	a0 f0       	brcs	.+40     	; 0x1674 <__fixunssfsi+0x38>
    164c:	d1 f0       	breq	.+52     	; 0x1682 <__fixunssfsi+0x46>
    164e:	66 0f       	add	r22, r22
    1650:	77 1f       	adc	r23, r23
    1652:	88 1f       	adc	r24, r24
    1654:	99 1f       	adc	r25, r25
    1656:	1a f0       	brmi	.+6      	; 0x165e <__fixunssfsi+0x22>
    1658:	ba 95       	dec	r27
    165a:	c9 f7       	brne	.-14     	; 0x164e <__fixunssfsi+0x12>
    165c:	12 c0       	rjmp	.+36     	; 0x1682 <__fixunssfsi+0x46>
    165e:	b1 30       	cpi	r27, 0x01	; 1
    1660:	81 f0       	breq	.+32     	; 0x1682 <__fixunssfsi+0x46>
    1662:	9f d0       	rcall	.+318    	; 0x17a2 <__fp_zero>
    1664:	b1 e0       	ldi	r27, 0x01	; 1
    1666:	08 95       	ret
    1668:	9c c0       	rjmp	.+312    	; 0x17a2 <__fp_zero>
    166a:	67 2f       	mov	r22, r23
    166c:	78 2f       	mov	r23, r24
    166e:	88 27       	eor	r24, r24
    1670:	b8 5f       	subi	r27, 0xF8	; 248
    1672:	39 f0       	breq	.+14     	; 0x1682 <__fixunssfsi+0x46>
    1674:	b9 3f       	cpi	r27, 0xF9	; 249
    1676:	cc f3       	brlt	.-14     	; 0x166a <__fixunssfsi+0x2e>
    1678:	86 95       	lsr	r24
    167a:	77 95       	ror	r23
    167c:	67 95       	ror	r22
    167e:	b3 95       	inc	r27
    1680:	d9 f7       	brne	.-10     	; 0x1678 <__fixunssfsi+0x3c>
    1682:	3e f4       	brtc	.+14     	; 0x1692 <__fixunssfsi+0x56>
    1684:	90 95       	com	r25
    1686:	80 95       	com	r24
    1688:	70 95       	com	r23
    168a:	61 95       	neg	r22
    168c:	7f 4f       	sbci	r23, 0xFF	; 255
    168e:	8f 4f       	sbci	r24, 0xFF	; 255
    1690:	9f 4f       	sbci	r25, 0xFF	; 255
    1692:	08 95       	ret

00001694 <__floatunsisf>:
    1694:	e8 94       	clt
    1696:	09 c0       	rjmp	.+18     	; 0x16aa <__floatsisf+0x12>

00001698 <__floatsisf>:
    1698:	97 fb       	bst	r25, 7
    169a:	3e f4       	brtc	.+14     	; 0x16aa <__floatsisf+0x12>
    169c:	90 95       	com	r25
    169e:	80 95       	com	r24
    16a0:	70 95       	com	r23
    16a2:	61 95       	neg	r22
    16a4:	7f 4f       	sbci	r23, 0xFF	; 255
    16a6:	8f 4f       	sbci	r24, 0xFF	; 255
    16a8:	9f 4f       	sbci	r25, 0xFF	; 255
    16aa:	99 23       	and	r25, r25
    16ac:	a9 f0       	breq	.+42     	; 0x16d8 <__floatsisf+0x40>
    16ae:	f9 2f       	mov	r31, r25
    16b0:	96 e9       	ldi	r25, 0x96	; 150
    16b2:	bb 27       	eor	r27, r27
    16b4:	93 95       	inc	r25
    16b6:	f6 95       	lsr	r31
    16b8:	87 95       	ror	r24
    16ba:	77 95       	ror	r23
    16bc:	67 95       	ror	r22
    16be:	b7 95       	ror	r27
    16c0:	f1 11       	cpse	r31, r1
    16c2:	f8 cf       	rjmp	.-16     	; 0x16b4 <__floatsisf+0x1c>
    16c4:	fa f4       	brpl	.+62     	; 0x1704 <__floatsisf+0x6c>
    16c6:	bb 0f       	add	r27, r27
    16c8:	11 f4       	brne	.+4      	; 0x16ce <__floatsisf+0x36>
    16ca:	60 ff       	sbrs	r22, 0
    16cc:	1b c0       	rjmp	.+54     	; 0x1704 <__floatsisf+0x6c>
    16ce:	6f 5f       	subi	r22, 0xFF	; 255
    16d0:	7f 4f       	sbci	r23, 0xFF	; 255
    16d2:	8f 4f       	sbci	r24, 0xFF	; 255
    16d4:	9f 4f       	sbci	r25, 0xFF	; 255
    16d6:	16 c0       	rjmp	.+44     	; 0x1704 <__floatsisf+0x6c>
    16d8:	88 23       	and	r24, r24
    16da:	11 f0       	breq	.+4      	; 0x16e0 <__floatsisf+0x48>
    16dc:	96 e9       	ldi	r25, 0x96	; 150
    16de:	11 c0       	rjmp	.+34     	; 0x1702 <__floatsisf+0x6a>
    16e0:	77 23       	and	r23, r23
    16e2:	21 f0       	breq	.+8      	; 0x16ec <__floatsisf+0x54>
    16e4:	9e e8       	ldi	r25, 0x8E	; 142
    16e6:	87 2f       	mov	r24, r23
    16e8:	76 2f       	mov	r23, r22
    16ea:	05 c0       	rjmp	.+10     	; 0x16f6 <__floatsisf+0x5e>
    16ec:	66 23       	and	r22, r22
    16ee:	71 f0       	breq	.+28     	; 0x170c <__floatsisf+0x74>
    16f0:	96 e8       	ldi	r25, 0x86	; 134
    16f2:	86 2f       	mov	r24, r22
    16f4:	70 e0       	ldi	r23, 0x00	; 0
    16f6:	60 e0       	ldi	r22, 0x00	; 0
    16f8:	2a f0       	brmi	.+10     	; 0x1704 <__floatsisf+0x6c>
    16fa:	9a 95       	dec	r25
    16fc:	66 0f       	add	r22, r22
    16fe:	77 1f       	adc	r23, r23
    1700:	88 1f       	adc	r24, r24
    1702:	da f7       	brpl	.-10     	; 0x16fa <__floatsisf+0x62>
    1704:	88 0f       	add	r24, r24
    1706:	96 95       	lsr	r25
    1708:	87 95       	ror	r24
    170a:	97 f9       	bld	r25, 7
    170c:	08 95       	ret

0000170e <__fp_inf>:
    170e:	97 f9       	bld	r25, 7
    1710:	9f 67       	ori	r25, 0x7F	; 127
    1712:	80 e8       	ldi	r24, 0x80	; 128
    1714:	70 e0       	ldi	r23, 0x00	; 0
    1716:	60 e0       	ldi	r22, 0x00	; 0
    1718:	08 95       	ret

0000171a <__fp_nan>:
    171a:	9f ef       	ldi	r25, 0xFF	; 255
    171c:	80 ec       	ldi	r24, 0xC0	; 192
    171e:	08 95       	ret

00001720 <__fp_pscA>:
    1720:	00 24       	eor	r0, r0
    1722:	0a 94       	dec	r0
    1724:	16 16       	cp	r1, r22
    1726:	17 06       	cpc	r1, r23
    1728:	18 06       	cpc	r1, r24
    172a:	09 06       	cpc	r0, r25
    172c:	08 95       	ret

0000172e <__fp_pscB>:
    172e:	00 24       	eor	r0, r0
    1730:	0a 94       	dec	r0
    1732:	12 16       	cp	r1, r18
    1734:	13 06       	cpc	r1, r19
    1736:	14 06       	cpc	r1, r20
    1738:	05 06       	cpc	r0, r21
    173a:	08 95       	ret

0000173c <__fp_round>:
    173c:	09 2e       	mov	r0, r25
    173e:	03 94       	inc	r0
    1740:	00 0c       	add	r0, r0
    1742:	11 f4       	brne	.+4      	; 0x1748 <__fp_round+0xc>
    1744:	88 23       	and	r24, r24
    1746:	52 f0       	brmi	.+20     	; 0x175c <__fp_round+0x20>
    1748:	bb 0f       	add	r27, r27
    174a:	40 f4       	brcc	.+16     	; 0x175c <__fp_round+0x20>
    174c:	bf 2b       	or	r27, r31
    174e:	11 f4       	brne	.+4      	; 0x1754 <__fp_round+0x18>
    1750:	60 ff       	sbrs	r22, 0
    1752:	04 c0       	rjmp	.+8      	; 0x175c <__fp_round+0x20>
    1754:	6f 5f       	subi	r22, 0xFF	; 255
    1756:	7f 4f       	sbci	r23, 0xFF	; 255
    1758:	8f 4f       	sbci	r24, 0xFF	; 255
    175a:	9f 4f       	sbci	r25, 0xFF	; 255
    175c:	08 95       	ret

0000175e <__fp_split3>:
    175e:	57 fd       	sbrc	r21, 7
    1760:	90 58       	subi	r25, 0x80	; 128
    1762:	44 0f       	add	r20, r20
    1764:	55 1f       	adc	r21, r21
    1766:	59 f0       	breq	.+22     	; 0x177e <__fp_splitA+0x10>
    1768:	5f 3f       	cpi	r21, 0xFF	; 255
    176a:	71 f0       	breq	.+28     	; 0x1788 <__fp_splitA+0x1a>
    176c:	47 95       	ror	r20

0000176e <__fp_splitA>:
    176e:	88 0f       	add	r24, r24
    1770:	97 fb       	bst	r25, 7
    1772:	99 1f       	adc	r25, r25
    1774:	61 f0       	breq	.+24     	; 0x178e <__fp_splitA+0x20>
    1776:	9f 3f       	cpi	r25, 0xFF	; 255
    1778:	79 f0       	breq	.+30     	; 0x1798 <__fp_splitA+0x2a>
    177a:	87 95       	ror	r24
    177c:	08 95       	ret
    177e:	12 16       	cp	r1, r18
    1780:	13 06       	cpc	r1, r19
    1782:	14 06       	cpc	r1, r20
    1784:	55 1f       	adc	r21, r21
    1786:	f2 cf       	rjmp	.-28     	; 0x176c <__fp_split3+0xe>
    1788:	46 95       	lsr	r20
    178a:	f1 df       	rcall	.-30     	; 0x176e <__fp_splitA>
    178c:	08 c0       	rjmp	.+16     	; 0x179e <__fp_splitA+0x30>
    178e:	16 16       	cp	r1, r22
    1790:	17 06       	cpc	r1, r23
    1792:	18 06       	cpc	r1, r24
    1794:	99 1f       	adc	r25, r25
    1796:	f1 cf       	rjmp	.-30     	; 0x177a <__fp_splitA+0xc>
    1798:	86 95       	lsr	r24
    179a:	71 05       	cpc	r23, r1
    179c:	61 05       	cpc	r22, r1
    179e:	08 94       	sec
    17a0:	08 95       	ret

000017a2 <__fp_zero>:
    17a2:	e8 94       	clt

000017a4 <__fp_szero>:
    17a4:	bb 27       	eor	r27, r27
    17a6:	66 27       	eor	r22, r22
    17a8:	77 27       	eor	r23, r23
    17aa:	cb 01       	movw	r24, r22
    17ac:	97 f9       	bld	r25, 7
    17ae:	08 95       	ret

000017b0 <__mulsf3>:
    17b0:	0b d0       	rcall	.+22     	; 0x17c8 <__mulsf3x>
    17b2:	c4 cf       	rjmp	.-120    	; 0x173c <__fp_round>
    17b4:	b5 df       	rcall	.-150    	; 0x1720 <__fp_pscA>
    17b6:	28 f0       	brcs	.+10     	; 0x17c2 <__mulsf3+0x12>
    17b8:	ba df       	rcall	.-140    	; 0x172e <__fp_pscB>
    17ba:	18 f0       	brcs	.+6      	; 0x17c2 <__mulsf3+0x12>
    17bc:	95 23       	and	r25, r21
    17be:	09 f0       	breq	.+2      	; 0x17c2 <__mulsf3+0x12>
    17c0:	a6 cf       	rjmp	.-180    	; 0x170e <__fp_inf>
    17c2:	ab cf       	rjmp	.-170    	; 0x171a <__fp_nan>
    17c4:	11 24       	eor	r1, r1
    17c6:	ee cf       	rjmp	.-36     	; 0x17a4 <__fp_szero>

000017c8 <__mulsf3x>:
    17c8:	ca df       	rcall	.-108    	; 0x175e <__fp_split3>
    17ca:	a0 f3       	brcs	.-24     	; 0x17b4 <__mulsf3+0x4>

000017cc <__mulsf3_pse>:
    17cc:	95 9f       	mul	r25, r21
    17ce:	d1 f3       	breq	.-12     	; 0x17c4 <__mulsf3+0x14>
    17d0:	95 0f       	add	r25, r21
    17d2:	50 e0       	ldi	r21, 0x00	; 0
    17d4:	55 1f       	adc	r21, r21
    17d6:	62 9f       	mul	r22, r18
    17d8:	f0 01       	movw	r30, r0
    17da:	72 9f       	mul	r23, r18
    17dc:	bb 27       	eor	r27, r27
    17de:	f0 0d       	add	r31, r0
    17e0:	b1 1d       	adc	r27, r1
    17e2:	63 9f       	mul	r22, r19
    17e4:	aa 27       	eor	r26, r26
    17e6:	f0 0d       	add	r31, r0
    17e8:	b1 1d       	adc	r27, r1
    17ea:	aa 1f       	adc	r26, r26
    17ec:	64 9f       	mul	r22, r20
    17ee:	66 27       	eor	r22, r22
    17f0:	b0 0d       	add	r27, r0
    17f2:	a1 1d       	adc	r26, r1
    17f4:	66 1f       	adc	r22, r22
    17f6:	82 9f       	mul	r24, r18
    17f8:	22 27       	eor	r18, r18
    17fa:	b0 0d       	add	r27, r0
    17fc:	a1 1d       	adc	r26, r1
    17fe:	62 1f       	adc	r22, r18
    1800:	73 9f       	mul	r23, r19
    1802:	b0 0d       	add	r27, r0
    1804:	a1 1d       	adc	r26, r1
    1806:	62 1f       	adc	r22, r18
    1808:	83 9f       	mul	r24, r19
    180a:	a0 0d       	add	r26, r0
    180c:	61 1d       	adc	r22, r1
    180e:	22 1f       	adc	r18, r18
    1810:	74 9f       	mul	r23, r20
    1812:	33 27       	eor	r19, r19
    1814:	a0 0d       	add	r26, r0
    1816:	61 1d       	adc	r22, r1
    1818:	23 1f       	adc	r18, r19
    181a:	84 9f       	mul	r24, r20
    181c:	60 0d       	add	r22, r0
    181e:	21 1d       	adc	r18, r1
    1820:	82 2f       	mov	r24, r18
    1822:	76 2f       	mov	r23, r22
    1824:	6a 2f       	mov	r22, r26
    1826:	11 24       	eor	r1, r1
    1828:	9f 57       	subi	r25, 0x7F	; 127
    182a:	50 40       	sbci	r21, 0x00	; 0
    182c:	8a f0       	brmi	.+34     	; 0x1850 <__mulsf3_pse+0x84>
    182e:	e1 f0       	breq	.+56     	; 0x1868 <__mulsf3_pse+0x9c>
    1830:	88 23       	and	r24, r24
    1832:	4a f0       	brmi	.+18     	; 0x1846 <__mulsf3_pse+0x7a>
    1834:	ee 0f       	add	r30, r30
    1836:	ff 1f       	adc	r31, r31
    1838:	bb 1f       	adc	r27, r27
    183a:	66 1f       	adc	r22, r22
    183c:	77 1f       	adc	r23, r23
    183e:	88 1f       	adc	r24, r24
    1840:	91 50       	subi	r25, 0x01	; 1
    1842:	50 40       	sbci	r21, 0x00	; 0
    1844:	a9 f7       	brne	.-22     	; 0x1830 <__mulsf3_pse+0x64>
    1846:	9e 3f       	cpi	r25, 0xFE	; 254
    1848:	51 05       	cpc	r21, r1
    184a:	70 f0       	brcs	.+28     	; 0x1868 <__mulsf3_pse+0x9c>
    184c:	60 cf       	rjmp	.-320    	; 0x170e <__fp_inf>
    184e:	aa cf       	rjmp	.-172    	; 0x17a4 <__fp_szero>
    1850:	5f 3f       	cpi	r21, 0xFF	; 255
    1852:	ec f3       	brlt	.-6      	; 0x184e <__mulsf3_pse+0x82>
    1854:	98 3e       	cpi	r25, 0xE8	; 232
    1856:	dc f3       	brlt	.-10     	; 0x184e <__mulsf3_pse+0x82>
    1858:	86 95       	lsr	r24
    185a:	77 95       	ror	r23
    185c:	67 95       	ror	r22
    185e:	b7 95       	ror	r27
    1860:	f7 95       	ror	r31
    1862:	e7 95       	ror	r30
    1864:	9f 5f       	subi	r25, 0xFF	; 255
    1866:	c1 f7       	brne	.-16     	; 0x1858 <__mulsf3_pse+0x8c>
    1868:	fe 2b       	or	r31, r30
    186a:	88 0f       	add	r24, r24
    186c:	91 1d       	adc	r25, r1
    186e:	96 95       	lsr	r25
    1870:	87 95       	ror	r24
    1872:	97 f9       	bld	r25, 7
    1874:	08 95       	ret

00001876 <__divmodsi4>:
    1876:	05 2e       	mov	r0, r21
    1878:	97 fb       	bst	r25, 7
    187a:	16 f4       	brtc	.+4      	; 0x1880 <__divmodsi4+0xa>
    187c:	00 94       	com	r0
    187e:	06 d0       	rcall	.+12     	; 0x188c <__divmodsi4_neg1>
    1880:	57 fd       	sbrc	r21, 7
    1882:	0c d0       	rcall	.+24     	; 0x189c <__divmodsi4_neg2>
    1884:	1f d0       	rcall	.+62     	; 0x18c4 <__udivmodsi4>
    1886:	07 fc       	sbrc	r0, 7
    1888:	09 d0       	rcall	.+18     	; 0x189c <__divmodsi4_neg2>
    188a:	7e f4       	brtc	.+30     	; 0x18aa <__divmodsi4_exit>

0000188c <__divmodsi4_neg1>:
    188c:	90 95       	com	r25
    188e:	80 95       	com	r24
    1890:	70 95       	com	r23
    1892:	61 95       	neg	r22
    1894:	7f 4f       	sbci	r23, 0xFF	; 255
    1896:	8f 4f       	sbci	r24, 0xFF	; 255
    1898:	9f 4f       	sbci	r25, 0xFF	; 255
    189a:	08 95       	ret

0000189c <__divmodsi4_neg2>:
    189c:	50 95       	com	r21
    189e:	40 95       	com	r20
    18a0:	30 95       	com	r19
    18a2:	21 95       	neg	r18
    18a4:	3f 4f       	sbci	r19, 0xFF	; 255
    18a6:	4f 4f       	sbci	r20, 0xFF	; 255
    18a8:	5f 4f       	sbci	r21, 0xFF	; 255

000018aa <__divmodsi4_exit>:
    18aa:	08 95       	ret

000018ac <__umulhisi3>:
    18ac:	a2 9f       	mul	r26, r18
    18ae:	b0 01       	movw	r22, r0
    18b0:	b3 9f       	mul	r27, r19
    18b2:	c0 01       	movw	r24, r0
    18b4:	a3 9f       	mul	r26, r19
    18b6:	01 d0       	rcall	.+2      	; 0x18ba <__umulhisi3+0xe>
    18b8:	b2 9f       	mul	r27, r18
    18ba:	70 0d       	add	r23, r0
    18bc:	81 1d       	adc	r24, r1
    18be:	11 24       	eor	r1, r1
    18c0:	91 1d       	adc	r25, r1
    18c2:	08 95       	ret

000018c4 <__udivmodsi4>:
    18c4:	a1 e2       	ldi	r26, 0x21	; 33
    18c6:	1a 2e       	mov	r1, r26
    18c8:	aa 1b       	sub	r26, r26
    18ca:	bb 1b       	sub	r27, r27
    18cc:	fd 01       	movw	r30, r26
    18ce:	0d c0       	rjmp	.+26     	; 0x18ea <__udivmodsi4_ep>

000018d0 <__udivmodsi4_loop>:
    18d0:	aa 1f       	adc	r26, r26
    18d2:	bb 1f       	adc	r27, r27
    18d4:	ee 1f       	adc	r30, r30
    18d6:	ff 1f       	adc	r31, r31
    18d8:	a2 17       	cp	r26, r18
    18da:	b3 07       	cpc	r27, r19
    18dc:	e4 07       	cpc	r30, r20
    18de:	f5 07       	cpc	r31, r21
    18e0:	20 f0       	brcs	.+8      	; 0x18ea <__udivmodsi4_ep>
    18e2:	a2 1b       	sub	r26, r18
    18e4:	b3 0b       	sbc	r27, r19
    18e6:	e4 0b       	sbc	r30, r20
    18e8:	f5 0b       	sbc	r31, r21

000018ea <__udivmodsi4_ep>:
    18ea:	66 1f       	adc	r22, r22
    18ec:	77 1f       	adc	r23, r23
    18ee:	88 1f       	adc	r24, r24
    18f0:	99 1f       	adc	r25, r25
    18f2:	1a 94       	dec	r1
    18f4:	69 f7       	brne	.-38     	; 0x18d0 <__udivmodsi4_loop>
    18f6:	60 95       	com	r22
    18f8:	70 95       	com	r23
    18fa:	80 95       	com	r24
    18fc:	90 95       	com	r25
    18fe:	9b 01       	movw	r18, r22
    1900:	ac 01       	movw	r20, r24
    1902:	bd 01       	movw	r22, r26
    1904:	cf 01       	movw	r24, r30
    1906:	08 95       	ret

00001908 <_exit>:
    1908:	f8 94       	cli

0000190a <__stop_program>:
    190a:	ff cf       	rjmp	.-2      	; 0x190a <__stop_program>
