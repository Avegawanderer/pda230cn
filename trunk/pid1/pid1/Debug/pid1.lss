
pid1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001970  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000042  00800060  00001970  00001a24  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000006c  008000a2  008000a2  00001a66  2**0
                  ALLOC
  3 .eeprom       0000000a  00810000  00810000  00001a66  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         000007d4  00000000  00000000  00001a70  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      000000e3  00000000  00000000  00002244  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      0000002f  00000000  00000000  00002327  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000380  00000000  00000000  00002356  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   000032a8  00000000  00000000  000026d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00001133  00000000  00000000  0000597e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00001662  00000000  00000000  00006ab1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  000007d8  00000000  00000000  00008114  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000d49  00000000  00000000  000088ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00001b17  00000000  00000000  00009635  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000328  00000000  00000000  0000b14c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	19 c1       	rjmp	.+562    	; 0x234 <__ctors_end>
       2:	33 c1       	rjmp	.+614    	; 0x26a <__bad_interrupt>
       4:	32 c1       	rjmp	.+612    	; 0x26a <__bad_interrupt>
       6:	d4 cb       	rjmp	.-2136   	; 0xfffff7b0 <__eeprom_end+0xff7ef7a6>
       8:	30 c1       	rjmp	.+608    	; 0x26a <__bad_interrupt>
       a:	2f c1       	rjmp	.+606    	; 0x26a <__bad_interrupt>
       c:	2e c1       	rjmp	.+604    	; 0x26a <__bad_interrupt>
       e:	2d c1       	rjmp	.+602    	; 0x26a <__bad_interrupt>
      10:	2c c1       	rjmp	.+600    	; 0x26a <__bad_interrupt>
      12:	92 ca       	rjmp	.-2780   	; 0xfffff538 <__eeprom_end+0xff7ef52e>
      14:	2a c1       	rjmp	.+596    	; 0x26a <__bad_interrupt>
      16:	29 c1       	rjmp	.+594    	; 0x26a <__bad_interrupt>
      18:	28 c1       	rjmp	.+592    	; 0x26a <__bad_interrupt>
      1a:	27 c1       	rjmp	.+590    	; 0x26a <__bad_interrupt>
      1c:	dd c1       	rjmp	.+954    	; 0x3d8 <__vector_14>
      1e:	25 c1       	rjmp	.+586    	; 0x26a <__bad_interrupt>
      20:	69 ca       	rjmp	.-2862   	; 0xfffff4f4 <__eeprom_end+0xff7ef4ea>
      22:	23 c1       	rjmp	.+582    	; 0x26a <__bad_interrupt>
      24:	22 c1       	rjmp	.+580    	; 0x26a <__bad_interrupt>
      26:	bc c3       	rjmp	.+1912   	; 0x7a0 <decode_led_char+0x48>
      28:	cc c3       	rjmp	.+1944   	; 0x7c2 <decode_led_char+0x6a>
      2a:	cb c3       	rjmp	.+1942   	; 0x7c2 <decode_led_char+0x6a>
      2c:	ca c3       	rjmp	.+1940   	; 0x7c2 <decode_led_char+0x6a>
      2e:	c9 c3       	rjmp	.+1938   	; 0x7c2 <decode_led_char+0x6a>
      30:	c8 c3       	rjmp	.+1936   	; 0x7c2 <decode_led_char+0x6a>
      32:	c7 c3       	rjmp	.+1934   	; 0x7c2 <decode_led_char+0x6a>
      34:	c6 c3       	rjmp	.+1932   	; 0x7c2 <decode_led_char+0x6a>
      36:	c5 c3       	rjmp	.+1930   	; 0x7c2 <decode_led_char+0x6a>
      38:	c4 c3       	rjmp	.+1928   	; 0x7c2 <decode_led_char+0x6a>
      3a:	c3 c3       	rjmp	.+1926   	; 0x7c2 <decode_led_char+0x6a>
      3c:	c2 c3       	rjmp	.+1924   	; 0x7c2 <decode_led_char+0x6a>
      3e:	aa c3       	rjmp	.+1876   	; 0x794 <decode_led_char+0x3c>
      40:	ab c3       	rjmp	.+1878   	; 0x798 <decode_led_char+0x40>
      42:	a6 c3       	rjmp	.+1868   	; 0x790 <decode_led_char+0x38>
      44:	be c3       	rjmp	.+1916   	; 0x7c2 <decode_led_char+0x6a>
      46:	92 c3       	rjmp	.+1828   	; 0x76c <decode_led_char+0x14>
      48:	bb c3       	rjmp	.+1910   	; 0x7c0 <decode_led_char+0x68>
      4a:	92 c3       	rjmp	.+1828   	; 0x770 <decode_led_char+0x18>
      4c:	93 c3       	rjmp	.+1830   	; 0x774 <decode_led_char+0x1c>
      4e:	94 c3       	rjmp	.+1832   	; 0x778 <decode_led_char+0x20>
      50:	95 c3       	rjmp	.+1834   	; 0x77c <decode_led_char+0x24>
      52:	96 c3       	rjmp	.+1836   	; 0x780 <decode_led_char+0x28>
      54:	97 c3       	rjmp	.+1838   	; 0x784 <decode_led_char+0x2c>
      56:	98 c3       	rjmp	.+1840   	; 0x788 <decode_led_char+0x30>
      58:	99 c3       	rjmp	.+1842   	; 0x78c <decode_led_char+0x34>
      5a:	b3 c3       	rjmp	.+1894   	; 0x7c2 <decode_led_char+0x6a>
      5c:	b2 c3       	rjmp	.+1892   	; 0x7c2 <decode_led_char+0x6a>
      5e:	b1 c3       	rjmp	.+1890   	; 0x7c2 <decode_led_char+0x6a>
      60:	b0 c3       	rjmp	.+1888   	; 0x7c2 <decode_led_char+0x6a>
      62:	af c3       	rjmp	.+1886   	; 0x7c2 <decode_led_char+0x6a>
      64:	ae c3       	rjmp	.+1884   	; 0x7c2 <decode_led_char+0x6a>
      66:	ad c3       	rjmp	.+1882   	; 0x7c2 <decode_led_char+0x6a>
      68:	ac c3       	rjmp	.+1880   	; 0x7c2 <decode_led_char+0x6a>
      6a:	ab c3       	rjmp	.+1878   	; 0x7c2 <decode_led_char+0x6a>
      6c:	9d c3       	rjmp	.+1850   	; 0x7a8 <decode_led_char+0x50>
      6e:	a2 c3       	rjmp	.+1860   	; 0x7b4 <decode_led_char+0x5c>
      70:	a5 c3       	rjmp	.+1866   	; 0x7bc <decode_led_char+0x64>
      72:	9c c3       	rjmp	.+1848   	; 0x7ac <decode_led_char+0x54>
      74:	a6 c3       	rjmp	.+1868   	; 0x7c2 <decode_led_char+0x6a>
      76:	a5 c3       	rjmp	.+1866   	; 0x7c2 <decode_led_char+0x6a>
      78:	a4 c3       	rjmp	.+1864   	; 0x7c2 <decode_led_char+0x6a>
      7a:	a3 c3       	rjmp	.+1862   	; 0x7c2 <decode_led_char+0x6a>
      7c:	a2 c3       	rjmp	.+1860   	; 0x7c2 <decode_led_char+0x6a>
      7e:	a1 c3       	rjmp	.+1858   	; 0x7c2 <decode_led_char+0x6a>
      80:	a0 c3       	rjmp	.+1856   	; 0x7c2 <decode_led_char+0x6a>
      82:	96 c3       	rjmp	.+1836   	; 0x7b0 <decode_led_char+0x58>
      84:	73 c3       	rjmp	.+1766   	; 0x76c <decode_led_char+0x14>
      86:	98 c3       	rjmp	.+1840   	; 0x7b8 <decode_led_char+0x60>
      88:	9c c3       	rjmp	.+1848   	; 0x7c2 <decode_led_char+0x6a>
      8a:	9b c3       	rjmp	.+1846   	; 0x7c2 <decode_led_char+0x6a>
      8c:	77 c3       	rjmp	.+1774   	; 0x77c <decode_led_char+0x24>
      8e:	99 c3       	rjmp	.+1842   	; 0x7c2 <decode_led_char+0x6a>
      90:	98 c3       	rjmp	.+1840   	; 0x7c2 <decode_led_char+0x6a>
      92:	97 c3       	rjmp	.+1838   	; 0x7c2 <decode_led_char+0x6a>
      94:	96 c3       	rjmp	.+1836   	; 0x7c2 <decode_led_char+0x6a>
      96:	95 c3       	rjmp	.+1834   	; 0x7c2 <decode_led_char+0x6a>
      98:	94 c3       	rjmp	.+1832   	; 0x7c2 <decode_led_char+0x6a>
      9a:	93 c3       	rjmp	.+1830   	; 0x7c2 <decode_led_char+0x6a>
      9c:	92 c3       	rjmp	.+1828   	; 0x7c2 <decode_led_char+0x6a>
      9e:	91 c3       	rjmp	.+1826   	; 0x7c2 <decode_led_char+0x6a>
      a0:	90 c3       	rjmp	.+1824   	; 0x7c2 <decode_led_char+0x6a>
      a2:	8f c3       	rjmp	.+1822   	; 0x7c2 <decode_led_char+0x6a>
      a4:	7b c3       	rjmp	.+1782   	; 0x79c <decode_led_char+0x44>
      a6:	8d c3       	rjmp	.+1818   	; 0x7c2 <decode_led_char+0x6a>
      a8:	8c c3       	rjmp	.+1816   	; 0x7c2 <decode_led_char+0x6a>
      aa:	8b c3       	rjmp	.+1814   	; 0x7c2 <decode_led_char+0x6a>
      ac:	8a c3       	rjmp	.+1812   	; 0x7c2 <decode_led_char+0x6a>
      ae:	89 c3       	rjmp	.+1810   	; 0x7c2 <decode_led_char+0x6a>
      b0:	88 c3       	rjmp	.+1808   	; 0x7c2 <decode_led_char+0x6a>
      b2:	87 c3       	rjmp	.+1806   	; 0x7c2 <decode_led_char+0x6a>
      b4:	86 c3       	rjmp	.+1804   	; 0x7c2 <decode_led_char+0x6a>
      b6:	85 c3       	rjmp	.+1802   	; 0x7c2 <decode_led_char+0x6a>
      b8:	84 c3       	rjmp	.+1800   	; 0x7c2 <decode_led_char+0x6a>
      ba:	83 c3       	rjmp	.+1798   	; 0x7c2 <decode_led_char+0x6a>
      bc:	82 c3       	rjmp	.+1796   	; 0x7c2 <decode_led_char+0x6a>
      be:	81 c3       	rjmp	.+1794   	; 0x7c2 <decode_led_char+0x6a>
      c0:	80 c3       	rjmp	.+1792   	; 0x7c2 <decode_led_char+0x6a>
      c2:	7f c3       	rjmp	.+1790   	; 0x7c2 <decode_led_char+0x6a>
      c4:	7e c3       	rjmp	.+1788   	; 0x7c2 <decode_led_char+0x6a>
      c6:	7d c3       	rjmp	.+1786   	; 0x7c2 <decode_led_char+0x6a>
      c8:	7c c3       	rjmp	.+1784   	; 0x7c2 <decode_led_char+0x6a>
      ca:	7b c3       	rjmp	.+1782   	; 0x7c2 <decode_led_char+0x6a>
      cc:	7a c3       	rjmp	.+1780   	; 0x7c2 <decode_led_char+0x6a>
      ce:	79 c3       	rjmp	.+1778   	; 0x7c2 <decode_led_char+0x6a>
      d0:	78 c3       	rjmp	.+1776   	; 0x7c2 <decode_led_char+0x6a>
      d2:	77 c3       	rjmp	.+1774   	; 0x7c2 <decode_led_char+0x6a>
      d4:	76 c3       	rjmp	.+1772   	; 0x7c2 <decode_led_char+0x6a>
      d6:	75 c3       	rjmp	.+1770   	; 0x7c2 <decode_led_char+0x6a>
      d8:	74 c3       	rjmp	.+1768   	; 0x7c2 <decode_led_char+0x6a>
      da:	73 c3       	rjmp	.+1766   	; 0x7c2 <decode_led_char+0x6a>
      dc:	72 c3       	rjmp	.+1764   	; 0x7c2 <decode_led_char+0x6a>
      de:	71 c3       	rjmp	.+1762   	; 0x7c2 <decode_led_char+0x6a>
      e0:	70 c3       	rjmp	.+1760   	; 0x7c2 <decode_led_char+0x6a>
      e2:	6f c3       	rjmp	.+1758   	; 0x7c2 <decode_led_char+0x6a>
      e4:	6e c3       	rjmp	.+1756   	; 0x7c2 <decode_led_char+0x6a>
      e6:	6d c3       	rjmp	.+1754   	; 0x7c2 <decode_led_char+0x6a>
      e8:	6c c3       	rjmp	.+1752   	; 0x7c2 <decode_led_char+0x6a>
      ea:	6b c3       	rjmp	.+1750   	; 0x7c2 <decode_led_char+0x6a>
      ec:	6a c3       	rjmp	.+1748   	; 0x7c2 <decode_led_char+0x6a>
      ee:	69 c3       	rjmp	.+1746   	; 0x7c2 <decode_led_char+0x6a>
      f0:	68 c3       	rjmp	.+1744   	; 0x7c2 <decode_led_char+0x6a>
      f2:	67 c3       	rjmp	.+1742   	; 0x7c2 <decode_led_char+0x6a>
      f4:	66 c3       	rjmp	.+1740   	; 0x7c2 <decode_led_char+0x6a>
      f6:	65 c3       	rjmp	.+1738   	; 0x7c2 <decode_led_char+0x6a>
      f8:	64 c3       	rjmp	.+1736   	; 0x7c2 <decode_led_char+0x6a>
      fa:	63 c3       	rjmp	.+1734   	; 0x7c2 <decode_led_char+0x6a>
      fc:	62 c3       	rjmp	.+1732   	; 0x7c2 <decode_led_char+0x6a>
      fe:	61 c3       	rjmp	.+1730   	; 0x7c2 <decode_led_char+0x6a>
     100:	60 c3       	rjmp	.+1728   	; 0x7c2 <decode_led_char+0x6a>
     102:	5f c3       	rjmp	.+1726   	; 0x7c2 <decode_led_char+0x6a>
     104:	5e c3       	rjmp	.+1724   	; 0x7c2 <decode_led_char+0x6a>
     106:	5d c3       	rjmp	.+1722   	; 0x7c2 <decode_led_char+0x6a>
     108:	5c c3       	rjmp	.+1720   	; 0x7c2 <decode_led_char+0x6a>
     10a:	5b c3       	rjmp	.+1718   	; 0x7c2 <decode_led_char+0x6a>
     10c:	5a c3       	rjmp	.+1716   	; 0x7c2 <decode_led_char+0x6a>
     10e:	59 c3       	rjmp	.+1714   	; 0x7c2 <decode_led_char+0x6a>
     110:	58 c3       	rjmp	.+1712   	; 0x7c2 <decode_led_char+0x6a>
     112:	57 c3       	rjmp	.+1710   	; 0x7c2 <decode_led_char+0x6a>
     114:	56 c3       	rjmp	.+1708   	; 0x7c2 <decode_led_char+0x6a>
     116:	55 c3       	rjmp	.+1706   	; 0x7c2 <decode_led_char+0x6a>
     118:	54 c3       	rjmp	.+1704   	; 0x7c2 <decode_led_char+0x6a>
     11a:	53 c3       	rjmp	.+1702   	; 0x7c2 <decode_led_char+0x6a>
     11c:	52 c3       	rjmp	.+1700   	; 0x7c2 <decode_led_char+0x6a>
     11e:	51 c3       	rjmp	.+1698   	; 0x7c2 <decode_led_char+0x6a>
     120:	50 c3       	rjmp	.+1696   	; 0x7c2 <decode_led_char+0x6a>
     122:	4f c3       	rjmp	.+1694   	; 0x7c2 <decode_led_char+0x6a>
     124:	4e c3       	rjmp	.+1692   	; 0x7c2 <decode_led_char+0x6a>
     126:	4d c3       	rjmp	.+1690   	; 0x7c2 <decode_led_char+0x6a>
     128:	4c c3       	rjmp	.+1688   	; 0x7c2 <decode_led_char+0x6a>
     12a:	4b c3       	rjmp	.+1686   	; 0x7c2 <decode_led_char+0x6a>
     12c:	4a c3       	rjmp	.+1684   	; 0x7c2 <decode_led_char+0x6a>
     12e:	49 c3       	rjmp	.+1682   	; 0x7c2 <decode_led_char+0x6a>
     130:	48 c3       	rjmp	.+1680   	; 0x7c2 <decode_led_char+0x6a>
     132:	47 c3       	rjmp	.+1678   	; 0x7c2 <decode_led_char+0x6a>
     134:	46 c3       	rjmp	.+1676   	; 0x7c2 <decode_led_char+0x6a>
     136:	45 c3       	rjmp	.+1674   	; 0x7c2 <decode_led_char+0x6a>
     138:	44 c3       	rjmp	.+1672   	; 0x7c2 <decode_led_char+0x6a>
     13a:	43 c3       	rjmp	.+1670   	; 0x7c2 <decode_led_char+0x6a>
     13c:	42 c3       	rjmp	.+1668   	; 0x7c2 <decode_led_char+0x6a>
     13e:	41 c3       	rjmp	.+1666   	; 0x7c2 <decode_led_char+0x6a>
     140:	40 c3       	rjmp	.+1664   	; 0x7c2 <decode_led_char+0x6a>
     142:	3f c3       	rjmp	.+1662   	; 0x7c2 <decode_led_char+0x6a>
     144:	3e c3       	rjmp	.+1660   	; 0x7c2 <decode_led_char+0x6a>
     146:	2e c3       	rjmp	.+1628   	; 0x7a4 <decode_led_char+0x4c>

00000148 <menuFunctionSet>:
     148:	01 e0 07 86 06 14 07 03 10 07 84 07 64 05 02 80     ............d...
     158:	07 17 07 08 07 05 f6 06 b1 06 00 00 0b 6a 05 b1     .............j..
     168:	06 78 05 04 f6 06 33 06 00 00 0c 6a 05 33 06 78     .x....3....j.3.x
     178:	05 06 fe 06 e9 05 00 00 09 6a 05 e9 05 78 05 07     .........j...x..
     188:	fe 06 9f 05 00 00 0a 6a 05 9f 05 78 05 08 91 05     .......j...x....
     198:	7e 05 00 00 0d 83 05 7e 05 00 00                    ~......~...

000001a3 <menuJumpSet>:
     1a3:	01 06 00 03 a8 01 00 01 02 40 01 00 02 05 28 02     .........@....(.
     1b3:	00 01 01 80 03 00 83 01 40 05 00 82 01 00 05 04     ........@.......
     1c3:	00 04 68 05 02 00 07 a8 05 00 01 0b 28 0b 00 83     ..h.........(...
     1d3:	05 28 04 00 82 01 00 04 04 00 06 68 04 02 00 05     .(.........h....
     1e3:	a8 04 00 01 0c 28 0c 00 83 04 28 06 00 82 01 00     .....(....(.....
     1f3:	06 04 00 07 68 06 02 00 04 a8 06 00 01 09 00 07     ....h...........
     203:	00 82 01 00 07 04 00 05 68 07 02 00 06 a8 07 00     ........h.......
     213:	01 0a 00 09 00 02 06 00 09 00 01 08 14 08 00 83     ................
     223:	01 00 0a 00 02 07 00 0a 00 01 0d 14 0d 00 83 01     ................
	...

00000234 <__ctors_end>:
     234:	11 24       	eor	r1, r1
     236:	1f be       	out	0x3f, r1	; 63
     238:	cf e5       	ldi	r28, 0x5F	; 95
     23a:	d4 e0       	ldi	r29, 0x04	; 4
     23c:	de bf       	out	0x3e, r29	; 62
     23e:	cd bf       	out	0x3d, r28	; 61

00000240 <__do_copy_data>:
     240:	10 e0       	ldi	r17, 0x00	; 0
     242:	a0 e6       	ldi	r26, 0x60	; 96
     244:	b0 e0       	ldi	r27, 0x00	; 0
     246:	e0 e7       	ldi	r30, 0x70	; 112
     248:	f9 e1       	ldi	r31, 0x19	; 25
     24a:	02 c0       	rjmp	.+4      	; 0x250 <__do_copy_data+0x10>
     24c:	05 90       	lpm	r0, Z+
     24e:	0d 92       	st	X+, r0
     250:	a2 3a       	cpi	r26, 0xA2	; 162
     252:	b1 07       	cpc	r27, r17
     254:	d9 f7       	brne	.-10     	; 0x24c <__do_copy_data+0xc>

00000256 <__do_clear_bss>:
     256:	21 e0       	ldi	r18, 0x01	; 1
     258:	a2 ea       	ldi	r26, 0xA2	; 162
     25a:	b0 e0       	ldi	r27, 0x00	; 0
     25c:	01 c0       	rjmp	.+2      	; 0x260 <.do_clear_bss_start>

0000025e <.do_clear_bss_loop>:
     25e:	1d 92       	st	X+, r1

00000260 <.do_clear_bss_start>:
     260:	ae 30       	cpi	r26, 0x0E	; 14
     262:	b2 07       	cpc	r27, r18
     264:	e1 f7       	brne	.-8      	; 0x25e <.do_clear_bss_loop>
     266:	38 d8       	rcall	.-3984   	; 0xfffff2d8 <__eeprom_end+0xff7ef2ce>
     268:	81 cb       	rjmp	.-2302   	; 0xfffff96c <__eeprom_end+0xff7ef962>

0000026a <__bad_interrupt>:
     26a:	ca ce       	rjmp	.-620    	; 0x0 <__vectors>

0000026c <conv_ADC_to_Celsius>:
static int8_t adc_buffer_pos = -1;



uint16_t conv_ADC_to_Celsius(uint16_t adc_value)
{	
     26c:	0f 93       	push	r16
     26e:	1f 93       	push	r17
	return (uint16_t)(((int32_t)adc_value * k_norm + offset_norm) / (COEFF_SCALE));
     270:	20 91 a2 00 	lds	r18, 0x00A2
     274:	30 91 a3 00 	lds	r19, 0x00A3
     278:	40 91 a4 00 	lds	r20, 0x00A4
     27c:	50 91 a5 00 	lds	r21, 0x00A5
     280:	dc 01       	movw	r26, r24
     282:	24 db       	rcall	.-2488   	; 0xfffff8cc <__eeprom_end+0xff7ef8c2>
     284:	00 91 a6 00 	lds	r16, 0x00A6
     288:	10 91 a7 00 	lds	r17, 0x00A7
     28c:	20 91 a8 00 	lds	r18, 0x00A8
     290:	30 91 a9 00 	lds	r19, 0x00A9
     294:	60 0f       	add	r22, r16
     296:	71 1f       	adc	r23, r17
     298:	82 1f       	adc	r24, r18
     29a:	93 1f       	adc	r25, r19
     29c:	28 ee       	ldi	r18, 0xE8	; 232
     29e:	33 e0       	ldi	r19, 0x03	; 3
     2a0:	40 e0       	ldi	r20, 0x00	; 0
     2a2:	50 e0       	ldi	r21, 0x00	; 0
     2a4:	e6 da       	rcall	.-2612   	; 0xfffff872 <__eeprom_end+0xff7ef868>
}
     2a6:	82 2f       	mov	r24, r18
     2a8:	93 2f       	mov	r25, r19
     2aa:	1f 91       	pop	r17
     2ac:	0f 91       	pop	r16
     2ae:	08 95       	ret

000002b0 <conv_Celsius_to_ADC>:

uint16_t conv_Celsius_to_ADC(uint16_t degree_value)
{	
     2b0:	0f 93       	push	r16
     2b2:	1f 93       	push	r17
	return (uint16_t)(((int32_t)degree_value * COEFF_SCALE - offset_norm) / k_norm);
     2b4:	9c 01       	movw	r18, r24
     2b6:	a8 ee       	ldi	r26, 0xE8	; 232
     2b8:	b3 e0       	ldi	r27, 0x03	; 3
     2ba:	f6 da       	rcall	.-2580   	; 0xfffff8a8 <__eeprom_end+0xff7ef89e>
     2bc:	00 91 a6 00 	lds	r16, 0x00A6
     2c0:	10 91 a7 00 	lds	r17, 0x00A7
     2c4:	20 91 a8 00 	lds	r18, 0x00A8
     2c8:	30 91 a9 00 	lds	r19, 0x00A9
     2cc:	60 1b       	sub	r22, r16
     2ce:	71 0b       	sbc	r23, r17
     2d0:	82 0b       	sbc	r24, r18
     2d2:	93 0b       	sbc	r25, r19
     2d4:	20 91 a2 00 	lds	r18, 0x00A2
     2d8:	30 91 a3 00 	lds	r19, 0x00A3
     2dc:	40 91 a4 00 	lds	r20, 0x00A4
     2e0:	50 91 a5 00 	lds	r21, 0x00A5
     2e4:	c6 da       	rcall	.-2676   	; 0xfffff872 <__eeprom_end+0xff7ef868>
}
     2e6:	82 2f       	mov	r24, r18
     2e8:	93 2f       	mov	r25, r19
     2ea:	1f 91       	pop	r17
     2ec:	0f 91       	pop	r16
     2ee:	08 95       	ret

000002f0 <calculateCoeffs>:

void calculateCoeffs(void)
{
     2f0:	8f 92       	push	r8
     2f2:	9f 92       	push	r9
     2f4:	af 92       	push	r10
     2f6:	bf 92       	push	r11
     2f8:	cf 92       	push	r12
     2fa:	df 92       	push	r13
     2fc:	ef 92       	push	r14
     2fe:	ff 92       	push	r15
     300:	cf 93       	push	r28
     302:	df 93       	push	r29
	k_norm = ((int32_t)(cpoint1 - cpoint2) * COEFF_SCALE) / ((int32_t)(cpoint1_adc - cpoint2_adc));
     304:	b0 90 dd 00 	lds	r11, 0x00DD
     308:	c0 91 e2 00 	lds	r28, 0x00E2
     30c:	d0 91 e3 00 	lds	r29, 0x00E3
     310:	ab 2d       	mov	r26, r11
     312:	b0 e0       	ldi	r27, 0x00	; 0
     314:	80 91 e7 00 	lds	r24, 0x00E7
     318:	a8 1b       	sub	r26, r24
     31a:	b1 09       	sbc	r27, r1
     31c:	28 ee       	ldi	r18, 0xE8	; 232
     31e:	33 e0       	ldi	r19, 0x03	; 3
     320:	cf da       	rcall	.-2658   	; 0xfffff8c0 <__eeprom_end+0xff7ef8b6>
     322:	20 91 e5 00 	lds	r18, 0x00E5
     326:	30 91 e6 00 	lds	r19, 0x00E6
     32a:	ae 01       	movw	r20, r28
     32c:	42 1b       	sub	r20, r18
     32e:	53 0b       	sbc	r21, r19
     330:	9a 01       	movw	r18, r20
     332:	40 e0       	ldi	r20, 0x00	; 0
     334:	50 e0       	ldi	r21, 0x00	; 0
     336:	9d da       	rcall	.-2758   	; 0xfffff872 <__eeprom_end+0xff7ef868>
     338:	69 01       	movw	r12, r18
     33a:	7a 01       	movw	r14, r20
     33c:	20 93 a2 00 	sts	0x00A2, r18
     340:	30 93 a3 00 	sts	0x00A3, r19
     344:	40 93 a4 00 	sts	0x00A4, r20
     348:	50 93 a5 00 	sts	0x00A5, r21
	offset_norm = (int32_t)cpoint1 * COEFF_SCALE - (int32_t)cpoint1_adc * k_norm;
     34c:	2b 2d       	mov	r18, r11
     34e:	30 e0       	ldi	r19, 0x00	; 0
     350:	a8 ee       	ldi	r26, 0xE8	; 232
     352:	b3 e0       	ldi	r27, 0x03	; 3
     354:	a9 da       	rcall	.-2734   	; 0xfffff8a8 <__eeprom_end+0xff7ef89e>
     356:	4b 01       	movw	r8, r22
     358:	5c 01       	movw	r10, r24
     35a:	de 01       	movw	r26, r28
     35c:	a7 01       	movw	r20, r14
     35e:	96 01       	movw	r18, r12
     360:	b5 da       	rcall	.-2710   	; 0xfffff8cc <__eeprom_end+0xff7ef8c2>
     362:	86 1a       	sub	r8, r22
     364:	97 0a       	sbc	r9, r23
     366:	a8 0a       	sbc	r10, r24
     368:	b9 0a       	sbc	r11, r25
     36a:	80 92 a6 00 	sts	0x00A6, r8
     36e:	90 92 a7 00 	sts	0x00A7, r9
     372:	a0 92 a8 00 	sts	0x00A8, r10
     376:	b0 92 a9 00 	sts	0x00A9, r11
}
     37a:	df 91       	pop	r29
     37c:	cf 91       	pop	r28
     37e:	ff 90       	pop	r15
     380:	ef 90       	pop	r14
     382:	df 90       	pop	r13
     384:	cf 90       	pop	r12
     386:	bf 90       	pop	r11
     388:	af 90       	pop	r10
     38a:	9f 90       	pop	r9
     38c:	8f 90       	pop	r8
     38e:	08 95       	ret

00000390 <update_filtered_adc>:
void update_filtered_adc()
{
	uint8_t i;
	uint32_t filtered_value = 0;
	// Disable interrupts from ADC - to save data integrity
	ACSR &= ~(1<<ACIE);	
     390:	43 98       	cbi	0x08, 3	; 8
     392:	ea ea       	ldi	r30, 0xAA	; 170
     394:	f0 e0       	ldi	r31, 0x00	; 0
	k_norm = ((int32_t)(cpoint1 - cpoint2) * COEFF_SCALE) / ((int32_t)(cpoint1_adc - cpoint2_adc));
	offset_norm = (int32_t)cpoint1 * COEFF_SCALE - (int32_t)cpoint1_adc * k_norm;
}


void update_filtered_adc()
     396:	4a eb       	ldi	r20, 0xBA	; 186
     398:	50 e0       	ldi	r21, 0x00	; 0
{
	uint8_t i;
	uint32_t filtered_value = 0;
     39a:	80 e0       	ldi	r24, 0x00	; 0
     39c:	90 e0       	ldi	r25, 0x00	; 0
     39e:	dc 01       	movw	r26, r24
	// Disable interrupts from ADC - to save data integrity
	ACSR &= ~(1<<ACIE);	
	// Count up
	for(i=0;i<ADC_BUFFER_LENGTH;i++)
	{
		filtered_value += adc_sample_buffer[i];
     3a0:	21 91       	ld	r18, Z+
     3a2:	31 91       	ld	r19, Z+
     3a4:	82 0f       	add	r24, r18
     3a6:	93 1f       	adc	r25, r19
     3a8:	a1 1d       	adc	r26, r1
     3aa:	b1 1d       	adc	r27, r1
	uint8_t i;
	uint32_t filtered_value = 0;
	// Disable interrupts from ADC - to save data integrity
	ACSR &= ~(1<<ACIE);	
	// Count up
	for(i=0;i<ADC_BUFFER_LENGTH;i++)
     3ac:	e4 17       	cp	r30, r20
     3ae:	f5 07       	cpc	r31, r21
     3b0:	b9 f7       	brne	.-18     	; 0x3a0 <update_filtered_adc+0x10>
	{
		filtered_value += adc_sample_buffer[i];
	}	
	// Enable interrupts from ADC
	ACSR |= (1<<ACIE);
     3b2:	43 9a       	sbi	0x08, 3	; 8
	// Normalize ADC filtered value
	adc_filtered_value = (uint16_t)(filtered_value / ADC_BUFFER_LENGTH);
     3b4:	68 94       	set
     3b6:	12 f8       	bld	r1, 2
     3b8:	b6 95       	lsr	r27
     3ba:	a7 95       	ror	r26
     3bc:	97 95       	ror	r25
     3be:	87 95       	ror	r24
     3c0:	16 94       	lsr	r1
     3c2:	d1 f7       	brne	.-12     	; 0x3b8 <update_filtered_adc+0x28>
     3c4:	90 93 d9 00 	sts	0x00D9, r25
     3c8:	80 93 d8 00 	sts	0x00D8, r24
	// Convert to Celsius degree
	adc_filtered_celsius = conv_ADC_to_Celsius(adc_filtered_value);
     3cc:	4f df       	rcall	.-354    	; 0x26c <conv_ADC_to_Celsius>
     3ce:	90 93 db 00 	sts	0x00DB, r25
     3d2:	80 93 da 00 	sts	0x00DA, r24
     3d6:	08 95       	ret

000003d8 <__vector_14>:




ISR(ADC_vect)
{
     3d8:	1f 92       	push	r1
     3da:	0f 92       	push	r0
     3dc:	0f b6       	in	r0, 0x3f	; 63
     3de:	0f 92       	push	r0
     3e0:	11 24       	eor	r1, r1
     3e2:	2f 93       	push	r18
     3e4:	8f 93       	push	r24
     3e6:	9f 93       	push	r25
     3e8:	ef 93       	push	r30
     3ea:	ff 93       	push	r31
	uint16_t new_sample = ADC;
     3ec:	84 b1       	in	r24, 0x04	; 4
     3ee:	95 b1       	in	r25, 0x05	; 5
	
	if (adc_buffer_pos < 0)
     3f0:	20 91 60 00 	lds	r18, 0x0060
     3f4:	22 23       	and	r18, r18
     3f6:	fc f4       	brge	.+62     	; 0x436 <__vector_14+0x5e>
	{
		// First call to the function, fill whole buffer with current sample
		for (adc_buffer_pos = ADC_BUFFER_LENGTH-1; adc_buffer_pos > 0; adc_buffer_pos--)
			adc_sample_buffer[adc_buffer_pos] = new_sample;
     3f8:	90 93 b9 00 	sts	0x00B9, r25
     3fc:	80 93 b8 00 	sts	0x00B8, r24
     400:	90 93 b7 00 	sts	0x00B7, r25
     404:	80 93 b6 00 	sts	0x00B6, r24
     408:	90 93 b5 00 	sts	0x00B5, r25
     40c:	80 93 b4 00 	sts	0x00B4, r24
     410:	90 93 b3 00 	sts	0x00B3, r25
     414:	80 93 b2 00 	sts	0x00B2, r24
     418:	90 93 b1 00 	sts	0x00B1, r25
     41c:	80 93 b0 00 	sts	0x00B0, r24
     420:	90 93 af 00 	sts	0x00AF, r25
     424:	80 93 ae 00 	sts	0x00AE, r24
     428:	90 93 ad 00 	sts	0x00AD, r25
     42c:	80 93 ac 00 	sts	0x00AC, r24
     430:	10 92 60 00 	sts	0x0060, r1
     434:	0e c0       	rjmp	.+28     	; 0x452 <__vector_14+0x7a>
	}
	else
	{
		// Normal call
		adc_sample_buffer[adc_buffer_pos] = new_sample;
     436:	e2 2f       	mov	r30, r18
     438:	ee 0f       	add	r30, r30
     43a:	ff 0b       	sbc	r31, r31
     43c:	e6 55       	subi	r30, 0x56	; 86
     43e:	ff 4f       	sbci	r31, 0xFF	; 255
     440:	91 83       	std	Z+1, r25	; 0x01
     442:	80 83       	st	Z, r24
		adc_buffer_pos = (adc_buffer_pos == ADC_BUFFER_LENGTH - 1) ? 0 : adc_buffer_pos + 1;
     444:	27 30       	cpi	r18, 0x07	; 7
     446:	11 f0       	breq	.+4      	; 0x44c <__vector_14+0x74>
     448:	2f 5f       	subi	r18, 0xFF	; 255
     44a:	01 c0       	rjmp	.+2      	; 0x44e <__vector_14+0x76>
     44c:	20 e0       	ldi	r18, 0x00	; 0
     44e:	20 93 60 00 	sts	0x0060, r18
	}		
}	
     452:	ff 91       	pop	r31
     454:	ef 91       	pop	r30
     456:	9f 91       	pop	r25
     458:	8f 91       	pop	r24
     45a:	2f 91       	pop	r18
     45c:	0f 90       	pop	r0
     45e:	0f be       	out	0x3f, r0	; 63
     460:	0f 90       	pop	r0
     462:	1f 90       	pop	r1
     464:	18 95       	reti

00000466 <process_buttons>:
	uint8_t raw_delayed_inv;
	static uint8_t press_timer = 0;
	uint8_t long_press_mask;
	uint8_t long_press_event_mask;
	
	raw_delayed = raw_current;
     466:	30 91 c0 00 	lds	r19, 0x00C0
	raw_delayed_inv = raw_current_inv;
     46a:	20 91 61 00 	lds	r18, 0x0061
	raw_current = raw_button_state;
     46e:	90 91 fa 00 	lds	r25, 0x00FA
     472:	90 93 c0 00 	sts	0x00C0, r25
	raw_current_inv = ~raw_current;
     476:	49 2f       	mov	r20, r25
     478:	40 95       	com	r20
     47a:	40 93 61 00 	sts	0x0061, r20
	
	// Must be before press_timer update
	long_press_mask = (press_timer >= LONG_PRESS_DELAY) ? 0xFF : 0x00;
     47e:	80 91 c1 00 	lds	r24, 0x00C1
     482:	8c 30       	cpi	r24, 0x0C	; 12
     484:	10 f0       	brcs	.+4      	; 0x48a <process_buttons+0x24>
     486:	6f ef       	ldi	r22, 0xFF	; 255
     488:	01 c0       	rjmp	.+2      	; 0x48c <process_buttons+0x26>
     48a:	60 e0       	ldi	r22, 0x00	; 0
	
	if (raw_delayed != raw_current)
     48c:	39 17       	cp	r19, r25
     48e:	41 f0       	breq	.+16     	; 0x4a0 <process_buttons+0x3a>
	{
		press_timer = 0;
     490:	10 92 c1 00 	sts	0x00C1, r1
	}
	
	// Must after press_timer update
	long_press_event_mask = (press_timer == LONG_PRESS_DELAY) ? 0xFF : 0x00;
			
	button_action_down = raw_current & raw_delayed_inv;
     494:	89 2f       	mov	r24, r25
     496:	82 23       	and	r24, r18
     498:	80 93 bd 00 	sts	0x00BD, r24
     49c:	50 e0       	ldi	r21, 0x00	; 0
     49e:	14 c0       	rjmp	.+40     	; 0x4c8 <process_buttons+0x62>
	
	if (raw_delayed != raw_current)
	{
		press_timer = 0;
	}
	else if (press_timer <= LONG_PRESS_DELAY)
     4a0:	8d 30       	cpi	r24, 0x0D	; 13
     4a2:	18 f4       	brcc	.+6      	; 0x4aa <process_buttons+0x44>
	{
		press_timer++;
     4a4:	8f 5f       	subi	r24, 0xFF	; 255
     4a6:	80 93 c1 00 	sts	0x00C1, r24
	}
	
	// Must after press_timer update
	long_press_event_mask = (press_timer == LONG_PRESS_DELAY) ? 0xFF : 0x00;
     4aa:	50 91 c1 00 	lds	r21, 0x00C1
     4ae:	5c 30       	cpi	r21, 0x0C	; 12
     4b0:	09 f4       	brne	.+2      	; 0x4b4 <process_buttons+0x4e>
     4b2:	45 c0       	rjmp	.+138    	; 0x53e <process_buttons+0xd8>
			
	button_action_down = raw_current & raw_delayed_inv;
     4b4:	89 2f       	mov	r24, r25
     4b6:	82 23       	and	r24, r18
     4b8:	80 93 bd 00 	sts	0x00BD, r24
			
	if (press_timer > REPEAT_DELAY)
     4bc:	57 30       	cpi	r21, 0x07	; 7
     4be:	18 f0       	brcs	.+6      	; 0x4c6 <process_buttons+0x60>
     4c0:	50 e0       	ldi	r21, 0x00	; 0
		raw_delayed_inv |= 0xFF;
     4c2:	2f ef       	ldi	r18, 0xFF	; 255
     4c4:	01 c0       	rjmp	.+2      	; 0x4c8 <process_buttons+0x62>
	// Must after press_timer update
	long_press_event_mask = (press_timer == LONG_PRESS_DELAY) ? 0xFF : 0x00;
			
	button_action_down = raw_current & raw_delayed_inv;
			
	if (press_timer > REPEAT_DELAY)
     4c6:	50 e0       	ldi	r21, 0x00	; 0
		raw_delayed_inv |= 0xFF;
	
	button_action_rep = raw_current & raw_delayed_inv;
     4c8:	29 23       	and	r18, r25
     4ca:	20 93 bc 00 	sts	0x00BC, r18
	
	button_action_up_short = raw_current_inv & raw_delayed & ~long_press_mask;
     4ce:	60 95       	com	r22
     4d0:	34 23       	and	r19, r20
     4d2:	36 23       	and	r19, r22
     4d4:	30 93 bb 00 	sts	0x00BB, r19
	//button_action_up_long  = raw_current_inv & raw_delayed & long_press_mask;
	button_action_long  = raw_current & long_press_event_mask;
     4d8:	59 23       	and	r21, r25
     4da:	50 93 ba 00 	sts	0x00BA, r21
	
	// Compose button state
	button_state = (button_action_down & (BD_MENU | BD_UP | BD_DOWN | BD_ROTFWD | BD_ROTREV | BD_HEATCTRL));
     4de:	87 77       	andi	r24, 0x77	; 119
     4e0:	90 e0       	ldi	r25, 0x00	; 0
	if (button_action_up_short & BD_MENU)
     4e2:	30 fd       	sbrc	r19, 0
     4e4:	05 c0       	rjmp	.+10     	; 0x4f0 <process_buttons+0x8a>
	button_action_up_short = raw_current_inv & raw_delayed & ~long_press_mask;
	//button_action_up_long  = raw_current_inv & raw_delayed & long_press_mask;
	button_action_long  = raw_current & long_press_event_mask;
	
	// Compose button state
	button_state = (button_action_down & (BD_MENU | BD_UP | BD_DOWN | BD_ROTFWD | BD_ROTREV | BD_HEATCTRL));
     4e6:	90 93 bf 00 	sts	0x00BF, r25
     4ea:	80 93 be 00 	sts	0x00BE, r24
     4ee:	05 c0       	rjmp	.+10     	; 0x4fa <process_buttons+0x94>
	if (button_action_up_short & BD_MENU)
		button_state |= BS_MENU;
     4f0:	91 60       	ori	r25, 0x01	; 1
     4f2:	90 93 bf 00 	sts	0x00BF, r25
     4f6:	80 93 be 00 	sts	0x00BE, r24
	//if (button_action_up_long & BD_MENU)
	if (button_action_long & BD_MENU)
     4fa:	50 ff       	sbrs	r21, 0
     4fc:	09 c0       	rjmp	.+18     	; 0x510 <process_buttons+0xaa>
		button_state |= BL_MENU;
     4fe:	80 91 be 00 	lds	r24, 0x00BE
     502:	90 91 bf 00 	lds	r25, 0x00BF
     506:	92 60       	ori	r25, 0x02	; 2
     508:	90 93 bf 00 	sts	0x00BF, r25
     50c:	80 93 be 00 	sts	0x00BE, r24
	if (button_action_rep & BD_UP)
     510:	21 ff       	sbrs	r18, 1
     512:	09 c0       	rjmp	.+18     	; 0x526 <process_buttons+0xc0>
		button_state |= BR_UP;	
     514:	80 91 be 00 	lds	r24, 0x00BE
     518:	90 91 bf 00 	lds	r25, 0x00BF
     51c:	94 60       	ori	r25, 0x04	; 4
     51e:	90 93 bf 00 	sts	0x00BF, r25
     522:	80 93 be 00 	sts	0x00BE, r24
	if (button_action_rep & BD_DOWN)
     526:	22 ff       	sbrs	r18, 2
     528:	10 c0       	rjmp	.+32     	; 0x54a <process_buttons+0xe4>
		button_state |= BR_DOWN;
     52a:	80 91 be 00 	lds	r24, 0x00BE
     52e:	90 91 bf 00 	lds	r25, 0x00BF
     532:	98 60       	ori	r25, 0x08	; 8
     534:	90 93 bf 00 	sts	0x00BF, r25
     538:	80 93 be 00 	sts	0x00BE, r24
     53c:	08 95       	ret
	}
	
	// Must after press_timer update
	long_press_event_mask = (press_timer == LONG_PRESS_DELAY) ? 0xFF : 0x00;
			
	button_action_down = raw_current & raw_delayed_inv;
     53e:	83 2f       	mov	r24, r19
     540:	82 23       	and	r24, r18
     542:	80 93 bd 00 	sts	0x00BD, r24
	{
		press_timer++;
	}
	
	// Must after press_timer update
	long_press_event_mask = (press_timer == LONG_PRESS_DELAY) ? 0xFF : 0x00;
     546:	5f ef       	ldi	r21, 0xFF	; 255
     548:	bc cf       	rjmp	.-136    	; 0x4c2 <process_buttons+0x5c>
     54a:	08 95       	ret

0000054c <processRollControl>:

uint8_t setTempDbg;				// For UART log only

// Function to control motor rotation
void processRollControl(void)
{	
     54c:	cf 93       	push	r28
	uint8_t beepState = 0;
	static uint8_t beepMask = 0x00;
	
	// Control direction by buttons
	if (button_action_down & BD_ROTFWD)
     54e:	80 91 bd 00 	lds	r24, 0x00BD
     552:	84 ff       	sbrs	r24, 4
     554:	04 c0       	rjmp	.+8      	; 0x55e <processRollControl+0x12>
	{
		setMotorDirection(ROLL_FWD);	
     556:	81 e0       	ldi	r24, 0x01	; 1
     558:	5b d7       	rcall	.+3766   	; 0x1410 <setMotorDirection>
		beepState |= 0x01;			// pressed FWD button
     55a:	c1 e0       	ldi	r28, 0x01	; 1
     55c:	0f c0       	rjmp	.+30     	; 0x57c <processRollControl+0x30>
	}		
	else if (button_action_down & BD_ROTREV)
     55e:	85 ff       	sbrs	r24, 5
     560:	04 c0       	rjmp	.+8      	; 0x56a <processRollControl+0x1e>
	{
		setMotorDirection(ROLL_REV);
     562:	82 e0       	ldi	r24, 0x02	; 2
     564:	55 d7       	rcall	.+3754   	; 0x1410 <setMotorDirection>
		beepState |= 0x02;			// pressed REV button
     566:	c2 e0       	ldi	r28, 0x02	; 2
     568:	09 c0       	rjmp	.+18     	; 0x57c <processRollControl+0x30>
	}		
	else if (button_action_long & BD_CYCLE)
     56a:	80 91 ba 00 	lds	r24, 0x00BA
     56e:	88 23       	and	r24, r24
     570:	24 f4       	brge	.+8      	; 0x57a <processRollControl+0x2e>
	{
		stopCycleRolling(1);		// Reset points and disabled CYCLE mode (if was enabled)
     572:	81 e0       	ldi	r24, 0x01	; 1
     574:	6b d7       	rcall	.+3798   	; 0x144c <stopCycleRolling>
		beepState |= 0x08;			// reset of points by long pressing of ROLL button
     576:	c8 e0       	ldi	r28, 0x08	; 8
     578:	01 c0       	rjmp	.+2      	; 0x57c <processRollControl+0x30>
uint8_t setTempDbg;				// For UART log only

// Function to control motor rotation
void processRollControl(void)
{	
	uint8_t beepState = 0;
     57a:	c0 e0       	ldi	r28, 0x00	; 0
		stopCycleRolling(1);		// Reset points and disabled CYCLE mode (if was enabled)
		beepState |= 0x08;			// reset of points by long pressing of ROLL button
	}
	
	
	if (button_action_up_short & BD_CYCLE)
     57c:	80 91 bb 00 	lds	r24, 0x00BB
     580:	88 23       	and	r24, r24
     582:	74 f4       	brge	.+28     	; 0x5a0 <processRollControl+0x54>
	{
		if (rollState & ROLL_CYCLE)
     584:	80 91 ca 00 	lds	r24, 0x00CA
     588:	82 ff       	sbrs	r24, 2
     58a:	04 c0       	rjmp	.+8      	; 0x594 <processRollControl+0x48>
		{
			stopCycleRolling(0);
     58c:	80 e0       	ldi	r24, 0x00	; 0
     58e:	5e d7       	rcall	.+3772   	; 0x144c <stopCycleRolling>
			beepState |= 0x20;		// stopped cycle
     590:	c0 62       	ori	r28, 0x20	; 32
     592:	06 c0       	rjmp	.+12     	; 0x5a0 <processRollControl+0x54>
		}
		else if (startCycleRolling())
     594:	97 d7       	rcall	.+3886   	; 0x14c4 <startCycleRolling>
     596:	88 23       	and	r24, r24
     598:	11 f0       	breq	.+4      	; 0x59e <processRollControl+0x52>
		{
			beepState |= 0x10;		// started cycle
     59a:	c0 61       	ori	r28, 0x10	; 16
     59c:	01 c0       	rjmp	.+2      	; 0x5a0 <processRollControl+0x54>
		}
		else
		{
			beepState |= 0x40;		// failed to start cycle
     59e:	c0 64       	ori	r28, 0x40	; 64
		}			
	}		
	
	if (rollState & ROLL_DIR_CHANGED)
     5a0:	80 91 ca 00 	lds	r24, 0x00CA
     5a4:	85 ff       	sbrs	r24, 5
     5a6:	04 c0       	rjmp	.+8      	; 0x5b0 <processRollControl+0x64>
	{
		rollState &= ~ROLL_DIR_CHANGED;
     5a8:	8f 7d       	andi	r24, 0xDF	; 223
     5aa:	80 93 ca 00 	sts	0x00CA, r24
		beepState |= 0x04;	
     5ae:	c4 60       	ori	r28, 0x04	; 4
	}
	
	if (rollState & CYCLE_ROLL_DONE)
     5b0:	80 91 ca 00 	lds	r24, 0x00CA
     5b4:	84 ff       	sbrs	r24, 4
     5b6:	04 c0       	rjmp	.+8      	; 0x5c0 <processRollControl+0x74>
	{
		rollState &= ~CYCLE_ROLL_DONE;
     5b8:	8f 7e       	andi	r24, 0xEF	; 239
     5ba:	80 93 ca 00 	sts	0x00CA, r24
		beepState |= 0x80;	
     5be:	c0 68       	ori	r28, 0x80	; 128
	}		
	
	beepState &= beepMask;
     5c0:	80 91 c2 00 	lds	r24, 0x00C2
     5c4:	c8 23       	and	r28, r24
	
	if (beepState & 0x80)		// Roll cycle done
     5c6:	3c f4       	brge	.+14     	; 0x5d6 <processRollControl+0x8a>
	{
		SetBeeperFreq(1000);
     5c8:	88 ee       	ldi	r24, 0xE8	; 232
     5ca:	93 e0       	ldi	r25, 0x03	; 3
     5cc:	c4 d8       	rcall	.-3704   	; 0xfffff756 <__eeprom_end+0xff7ef74c>
		StartBeep(200);
     5ce:	88 ec       	ldi	r24, 0xC8	; 200
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	e2 d8       	rcall	.-3644   	; 0xfffff798 <__eeprom_end+0xff7ef78e>
     5d4:	1b c0       	rjmp	.+54     	; 0x60c <processRollControl+0xc0>
	}		
	else if (beepState & 0x40)	// Roll cycle start fail
     5d6:	c6 ff       	sbrs	r28, 6
     5d8:	07 c0       	rjmp	.+14     	; 0x5e8 <processRollControl+0x9c>
	{
		SetBeeperFreq(500);
     5da:	84 ef       	ldi	r24, 0xF4	; 244
     5dc:	91 e0       	ldi	r25, 0x01	; 1
     5de:	bb d8       	rcall	.-3722   	; 0xfffff756 <__eeprom_end+0xff7ef74c>
		StartBeep(50);
     5e0:	82 e3       	ldi	r24, 0x32	; 50
     5e2:	90 e0       	ldi	r25, 0x00	; 0
     5e4:	d9 d8       	rcall	.-3662   	; 0xfffff798 <__eeprom_end+0xff7ef78e>
     5e6:	12 c0       	rjmp	.+36     	; 0x60c <processRollControl+0xc0>
	} 
	else if (beepState & 0x08)	// Reset points
     5e8:	c3 ff       	sbrs	r28, 3
     5ea:	07 c0       	rjmp	.+14     	; 0x5fa <processRollControl+0xae>
	{
		SetBeeperFreq(800);
     5ec:	80 e2       	ldi	r24, 0x20	; 32
     5ee:	93 e0       	ldi	r25, 0x03	; 3
     5f0:	b2 d8       	rcall	.-3740   	; 0xfffff756 <__eeprom_end+0xff7ef74c>
		StartBeep(50);
     5f2:	82 e3       	ldi	r24, 0x32	; 50
     5f4:	90 e0       	ldi	r25, 0x00	; 0
     5f6:	d0 d8       	rcall	.-3680   	; 0xfffff798 <__eeprom_end+0xff7ef78e>
     5f8:	09 c0       	rjmp	.+18     	; 0x60c <processRollControl+0xc0>
	}							// Other
	else if ( beepState & (0x01 | 0x02 | 0x10 | 0x20 | 0x04) )
     5fa:	8c 2f       	mov	r24, r28
     5fc:	87 73       	andi	r24, 0x37	; 55
     5fe:	31 f0       	breq	.+12     	; 0x60c <processRollControl+0xc0>
	{
		SetBeeperFreq(1000);
     600:	88 ee       	ldi	r24, 0xE8	; 232
     602:	93 e0       	ldi	r25, 0x03	; 3
     604:	a8 d8       	rcall	.-3760   	; 0xfffff756 <__eeprom_end+0xff7ef74c>
		StartBeep(50);	
     606:	82 e3       	ldi	r24, 0x32	; 50
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	c6 d8       	rcall	.-3700   	; 0xfffff798 <__eeprom_end+0xff7ef78e>
	}			
	
	// Apply mask to next sound events
	beepMask = 0xFF;
	// Disable beep from DIR_CHANGED on next call if direction buttons have been pressed
	if (beepState & 0x03)	
     60c:	c3 70       	andi	r28, 0x03	; 3
     60e:	21 f4       	brne	.+8      	; 0x618 <processRollControl+0xcc>
		SetBeeperFreq(1000);
		StartBeep(50);	
	}			
	
	// Apply mask to next sound events
	beepMask = 0xFF;
     610:	8f ef       	ldi	r24, 0xFF	; 255
     612:	80 93 c2 00 	sts	0x00C2, r24
     616:	03 c0       	rjmp	.+6      	; 0x61e <processRollControl+0xd2>
	// Disable beep from DIR_CHANGED on next call if direction buttons have been pressed
	if (beepState & 0x03)	
		beepMask &= ~0x04;	
     618:	8b ef       	ldi	r24, 0xFB	; 251
     61a:	80 93 c2 00 	sts	0x00C2, r24
		
	
		
	// Indicate direction by LEDs
	clearExtraLeds(LED_ROTFWD | LED_ROTREV);
     61e:	80 e3       	ldi	r24, 0x30	; 48
     620:	0b d2       	rcall	.+1046   	; 0xa38 <clearExtraLeds>
	if (rollState & ROLL_FWD)
     622:	80 91 ca 00 	lds	r24, 0x00CA
     626:	80 ff       	sbrs	r24, 0
     628:	03 c0       	rjmp	.+6      	; 0x630 <processRollControl+0xe4>
		setExtraLeds(LED_ROTFWD);
     62a:	80 e1       	ldi	r24, 0x10	; 16
     62c:	ff d1       	rcall	.+1022   	; 0xa2c <setExtraLeds>
     62e:	04 c0       	rjmp	.+8      	; 0x638 <processRollControl+0xec>
	else if (rollState & ROLL_REV)
     630:	81 ff       	sbrs	r24, 1
     632:	02 c0       	rjmp	.+4      	; 0x638 <processRollControl+0xec>
		setExtraLeds(LED_ROTREV);
     634:	80 e2       	ldi	r24, 0x20	; 32
     636:	fa d1       	rcall	.+1012   	; 0xa2c <setExtraLeds>
		
}
     638:	cf 91       	pop	r28
     63a:	08 95       	ret

0000063c <processPID>:
{
	
	int16_t error, p_term, i_term, temp;
	static int16_t integAcc = 0;
	
	error = - setPoint + processValue;
     63c:	68 1b       	sub	r22, r24
     63e:	79 0b       	sbc	r23, r25
	
	
	//------ Calculate P term --------//
	if (error > 100)
     640:	65 36       	cpi	r22, 0x65	; 101
     642:	71 05       	cpc	r23, r1
     644:	5c f4       	brge	.+22     	; 0x65c <processPID+0x20>
	{
		p_term = 10000;
	}
	else if (error < -100)
     646:	6c 39       	cpi	r22, 0x9C	; 156
     648:	8f ef       	ldi	r24, 0xFF	; 255
     64a:	78 07       	cpc	r23, r24
     64c:	54 f0       	brlt	.+20     	; 0x662 <processPID+0x26>
	{
		p_term = -10000;
	}
	else
	{
		p_term = error * Kp;
     64e:	24 e1       	ldi	r18, 0x14	; 20
     650:	26 9f       	mul	r18, r22
     652:	c0 01       	movw	r24, r0
     654:	27 9f       	mul	r18, r23
     656:	90 0d       	add	r25, r0
     658:	11 24       	eor	r1, r1
     65a:	05 c0       	rjmp	.+10     	; 0x666 <processPID+0x2a>
	
	
	//------ Calculate P term --------//
	if (error > 100)
	{
		p_term = 10000;
     65c:	80 e1       	ldi	r24, 0x10	; 16
     65e:	97 e2       	ldi	r25, 0x27	; 39
     660:	02 c0       	rjmp	.+4      	; 0x666 <processPID+0x2a>
	}
	else if (error < -100)
	{
		p_term = -10000;
     662:	80 ef       	ldi	r24, 0xF0	; 240
     664:	98 ed       	ldi	r25, 0xD8	; 216
	}
	i_term = integAcc * Ki;
*/	
	//--------- Summ terms -----------//
	//temp = (p_term + i_term) / SCALING_FACTOR;
	temp = (p_term) / SCALING_FACTOR;
     666:	62 e3       	ldi	r22, 0x32	; 50
     668:	70 e0       	ldi	r23, 0x00	; 0
     66a:	f0 d8       	rcall	.-3616   	; 0xfffff84c <__eeprom_end+0xff7ef842>
     66c:	86 2f       	mov	r24, r22
     66e:	97 2f       	mov	r25, r23
     670:	99 23       	and	r25, r25
     672:	14 f4       	brge	.+4      	; 0x678 <processPID+0x3c>
     674:	80 e0       	ldi	r24, 0x00	; 0
     676:	90 e0       	ldi	r25, 0x00	; 0
	else if (temp < 0)
	{
		temp = 0;
	}
	
	return temp;
     678:	8b 30       	cpi	r24, 0x0B	; 11
     67a:	91 05       	cpc	r25, r1
     67c:	14 f0       	brlt	.+4      	; 0x682 <processPID+0x46>
     67e:	8a e0       	ldi	r24, 0x0A	; 10
     680:	90 e0       	ldi	r25, 0x00	; 0
	
}
     682:	08 95       	ret

00000684 <processHeaterControl>:
	static uint8_t heater_ctrl = 0;
	uint16_t set_value_adc;
	uint16_t pid_output;
	
	// Process heater ON/OFF control by button
	if (button_state & BD_HEATCTRL)
     684:	80 91 be 00 	lds	r24, 0x00BE
     688:	86 ff       	sbrs	r24, 6
     68a:	06 c0       	rjmp	.+12     	; 0x698 <processHeaterControl+0x14>
	{
		heater_ctrl ^= 0x01;
     68c:	90 91 c3 00 	lds	r25, 0x00C3
     690:	81 e0       	ldi	r24, 0x01	; 1
     692:	89 27       	eor	r24, r25
     694:	80 93 c3 00 	sts	0x00C3, r24
	}
	
	
	if (heater_ctrl)
     698:	80 91 c3 00 	lds	r24, 0x00C3
     69c:	88 23       	and	r24, r24
     69e:	c9 f0       	breq	.+50     	; 0x6d2 <processHeaterControl+0x4e>
	{
		// Heater enabled
		setTempDbg = setup_temp_value;
     6a0:	80 91 de 00 	lds	r24, 0x00DE
     6a4:	90 91 df 00 	lds	r25, 0x00DF
     6a8:	80 93 dc 00 	sts	0x00DC, r24
		
		//-----------------//
		// Process PID
		
		if (heaterState & READY_TO_UPDATE_HEATER)
     6ac:	20 91 cb 00 	lds	r18, 0x00CB
     6b0:	22 23       	and	r18, r18
     6b2:	64 f4       	brge	.+24     	; 0x6cc <processHeaterControl+0x48>
		{
			
			// Convert temperature setup to equal ADC value
			set_value_adc = conv_Celsius_to_ADC(setup_temp_value);
     6b4:	fd dd       	rcall	.-1030   	; 0x2b0 <conv_Celsius_to_ADC>
			
			// PID !!!
			pid_output = processPID(set_value_adc,adc_filtered_value);
     6b6:	60 91 d8 00 	lds	r22, 0x00D8
     6ba:	70 91 d9 00 	lds	r23, 0x00D9
     6be:	be df       	rcall	.-132    	; 0x63c <processPID>
			//setHeaterControl(10);	
			setHeaterControl(pid_output);	
     6c0:	97 d6       	rcall	.+3374   	; 0x13f0 <setHeaterControl>
			
			heaterState &= ~READY_TO_UPDATE_HEATER;
     6c2:	80 91 cb 00 	lds	r24, 0x00CB
     6c6:	8f 77       	andi	r24, 0x7F	; 127
     6c8:	80 93 cb 00 	sts	0x00CB, r24
		}
		//-----------------//
		
		setExtraLeds(LED_HEATER);
     6cc:	80 e4       	ldi	r24, 0x40	; 64
     6ce:	ae d1       	rcall	.+860    	; 0xa2c <setExtraLeds>
     6d0:	08 95       	ret
	}
	else
	{
		// Heater disabled
		setTempDbg = 0;
     6d2:	10 92 dc 00 	sts	0x00DC, r1
		setHeaterControl(0);
     6d6:	80 e0       	ldi	r24, 0x00	; 0
     6d8:	8b d6       	rcall	.+3350   	; 0x13f0 <setHeaterControl>
		clearExtraLeds(LED_HEATER);
     6da:	80 e4       	ldi	r24, 0x40	; 64
     6dc:	ad d1       	rcall	.+858    	; 0xa38 <clearExtraLeds>
     6de:	08 95       	ret

000006e0 <restoreGlobalParams>:




void restoreGlobalParams(void)
{
     6e0:	cf 93       	push	r28
     6e2:	df 93       	push	r29
     6e4:	cd b7       	in	r28, 0x3d	; 61
     6e6:	de b7       	in	r29, 0x3e	; 62
     6e8:	2a 97       	sbiw	r28, 0x0a	; 10
     6ea:	0f b6       	in	r0, 0x3f	; 63
     6ec:	f8 94       	cli
     6ee:	de bf       	out	0x3e, r29	; 62
     6f0:	0f be       	out	0x3f, r0	; 63
     6f2:	cd bf       	out	0x3d, r28	; 61
	 gParams_t gParams;
	 eeprom_read_block(&gParams,&nvParams,sizeof(nvParams));
     6f4:	4a e0       	ldi	r20, 0x0A	; 10
     6f6:	50 e0       	ldi	r21, 0x00	; 0
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ce 01       	movw	r24, r28
     6fe:	01 96       	adiw	r24, 0x01	; 1
     700:	25 d9       	rcall	.-3510   	; 0xfffff94c <__eeprom_end+0xff7ef942>
	 setup_temp_value = gParams.setup_temp_value;	// reference temperature
     702:	89 81       	ldd	r24, Y+1	; 0x01
     704:	80 93 de 00 	sts	0x00DE, r24
     708:	10 92 df 00 	sts	0x00DF, r1
	 rollCycleSet = gParams.rollCycleSet;			// number of rolling cycles
     70c:	8a 81       	ldd	r24, Y+2	; 0x02
     70e:	80 93 e1 00 	sts	0x00E1, r24
	 sound_enable = gParams.sound_enable;			// Global sound enable
     712:	8b 81       	ldd	r24, Y+3	; 0x03
     714:	80 93 e0 00 	sts	0x00E0, r24
	 power_off_timeout = gParams.power_off_timeout;	// Auto power OFF timeout, minutes
     718:	8c 81       	ldd	r24, Y+4	; 0x04
     71a:	80 93 e4 00 	sts	0x00E4, r24
	 cpoint1 = gParams.cpoint1;						// Calibration point 1
	 cpoint2 = gParams.cpoint2;						// Calibration point 2
	 cpoint1_adc = gParams.cpoint1_adc;
	 cpoint2_adc = gParams.cpoint2_adc;
	 
	 cpoint1 		= 25;
     71e:	89 e1       	ldi	r24, 0x19	; 25
     720:	80 93 dd 00 	sts	0x00DD, r24
	 cpoint1_adc 	= 860;
     724:	8c e5       	ldi	r24, 0x5C	; 92
     726:	93 e0       	ldi	r25, 0x03	; 3
     728:	90 93 e3 00 	sts	0x00E3, r25
     72c:	80 93 e2 00 	sts	0x00E2, r24
	 cpoint2 		= 145;
     730:	81 e9       	ldi	r24, 0x91	; 145
     732:	80 93 e7 00 	sts	0x00E7, r24
	 cpoint2_adc 	= 591;
     736:	8f e4       	ldi	r24, 0x4F	; 79
     738:	92 e0       	ldi	r25, 0x02	; 2
     73a:	90 93 e6 00 	sts	0x00E6, r25
     73e:	80 93 e5 00 	sts	0x00E5, r24
	 
}
     742:	2a 96       	adiw	r28, 0x0a	; 10
     744:	0f b6       	in	r0, 0x3f	; 63
     746:	f8 94       	cli
     748:	de bf       	out	0x3e, r29	; 62
     74a:	0f be       	out	0x3f, r0	; 63
     74c:	cd bf       	out	0x3d, r28	; 61
     74e:	df 91       	pop	r29
     750:	cf 91       	pop	r28
     752:	08 95       	ret

00000754 <exitPowerOff>:




void exitPowerOff(void)
{
     754:	08 95       	ret

00000756 <processAutoPowerOff>:
*/
}


void processAutoPowerOff(void)
{
     756:	08 95       	ret

00000758 <decode_led_char>:
// Decodes normal string literal to the 
//	7-segment representation
//---------------------------------------------//
static uint8_t decode_led_char(char c)
{
	switch(c)
     758:	48 2f       	mov	r20, r24
     75a:	50 e0       	ldi	r21, 0x00	; 0
     75c:	fa 01       	movw	r30, r20
     75e:	b0 97       	sbiw	r30, 0x20	; 32
     760:	e1 39       	cpi	r30, 0x91	; 145
     762:	f1 05       	cpc	r31, r1
     764:	70 f5       	brcc	.+92     	; 0x7c2 <decode_led_char+0x6a>
     766:	ed 5e       	subi	r30, 0xED	; 237
     768:	ff 4f       	sbci	r31, 0xFF	; 255
     76a:	09 94       	ijmp
	{
		case 'O':
		case '0': return (SEGA | SEGB | SEGC | SEGD | SEGE | SEGF);
     76c:	8f e3       	ldi	r24, 0x3F	; 63
     76e:	08 95       	ret
		case '1': return (SEGB | SEGC );
		case '2': return (SEGA | SEGB | SEGD | SEGE | SEGG);
     770:	8b e5       	ldi	r24, 0x5B	; 91
     772:	08 95       	ret
		case '3': return (SEGA | SEGB | SEGC | SEGD | SEGG);
     774:	8f e4       	ldi	r24, 0x4F	; 79
     776:	08 95       	ret
		case '4': return (SEGB | SEGC | SEGF | SEGG);
     778:	86 e6       	ldi	r24, 0x66	; 102
     77a:	08 95       	ret
		case 'S':
		case '5': return (SEGA | SEGC | SEGD | SEGF | SEGG);
     77c:	8d e6       	ldi	r24, 0x6D	; 109
     77e:	08 95       	ret
		case '6': return (SEGA | SEGC | SEGD | SEGE | SEGF | SEGG);
     780:	8d e7       	ldi	r24, 0x7D	; 125
     782:	08 95       	ret
		case '7': return (SEGA | SEGB | SEGC );
     784:	87 e0       	ldi	r24, 0x07	; 7
     786:	08 95       	ret
		case '8': return (SEGA | SEGB | SEGC | SEGD | SEGE | SEGF | SEGG);
     788:	8f e7       	ldi	r24, 0x7F	; 127
     78a:	08 95       	ret
		case '9': return (SEGA | SEGB | SEGC | SEGD | SEGF | SEGG);
     78c:	8f e6       	ldi	r24, 0x6F	; 111
     78e:	08 95       	ret
		case '.': return (SEGH);
     790:	80 e8       	ldi	r24, 0x80	; 128
     792:	08 95       	ret
		case ',': return (SEGH);
     794:	80 e8       	ldi	r24, 0x80	; 128
     796:	08 95       	ret
		case '-': return (SEGG);
     798:	80 e4       	ldi	r24, 0x40	; 64
     79a:	08 95       	ret
		case '_': return (SEGD);
     79c:	88 e0       	ldi	r24, 0x08	; 8
     79e:	08 95       	ret
		case ' ': return 0;
     7a0:	80 e0       	ldi	r24, 0x00	; 0
     7a2:	08 95       	ret
		case 0xB0:	return (SEGA | SEGB | SEGF | SEGG);		// Degree sin
     7a4:	83 e6       	ldi	r24, 0x63	; 99
     7a6:	08 95       	ret
		case 'C':	return (SEGA | SEGD | SEGE | SEGF);
     7a8:	89 e3       	ldi	r24, 0x39	; 57
     7aa:	08 95       	ret
		case 'F':	return (SEGA | SEGE | SEGF | SEGG);
     7ac:	81 e7       	ldi	r24, 0x71	; 113
     7ae:	08 95       	ret
		case 'N':	return (SEGC | SEGE | SEGG);
     7b0:	84 e5       	ldi	r24, 0x54	; 84
     7b2:	08 95       	ret
		case 'D': return (SEGB | SEGC | SEGD | SEGE | SEGG);
     7b4:	8e e5       	ldi	r24, 0x5E	; 94
     7b6:	08 95       	ret
		case 'P': return (SEGA | SEGB | SEGE | SEGF | SEGG);
     7b8:	83 e7       	ldi	r24, 0x73	; 115
     7ba:	08 95       	ret
		case 'E': return (SEGA | SEGD | SEGE | SEGF | SEGG);
     7bc:	89 e7       	ldi	r24, 0x79	; 121
     7be:	08 95       	ret
{
	switch(c)
	{
		case 'O':
		case '0': return (SEGA | SEGB | SEGC | SEGD | SEGE | SEGF);
		case '1': return (SEGB | SEGC );
     7c0:	86 e0       	ldi	r24, 0x06	; 6
		case 'D': return (SEGB | SEGC | SEGD | SEGE | SEGG);
		case 'P': return (SEGA | SEGB | SEGE | SEGF | SEGG);
		case 'E': return (SEGA | SEGD | SEGE | SEGF | SEGG);
		default:  return c;	
	}
}
     7c2:	08 95       	ret

000007c4 <wrap_led_buffer_index>:
//---------------------------------------------//
// Ensures that index is inside the buffer
// -128 <= index <= 127
//---------------------------------------------//
static uint8_t wrap_led_buffer_index(int8_t buf_index)
{
     7c4:	98 2f       	mov	r25, r24
	uint8_t new_index_u;
	new_index_u = (uint8_t) ((buf_index < 0) ? -buf_index : buf_index);
     7c6:	87 fd       	sbrc	r24, 7
     7c8:	81 95       	neg	r24
	if (new_index_u >= LED_BUFFER_LENGTH)
     7ca:	8e 30       	cpi	r24, 0x0E	; 14
     7cc:	78 f0       	brcs	.+30     	; 0x7ec <wrap_led_buffer_index+0x28>
		new_index_u = new_index_u % LED_BUFFER_LENGTH;
     7ce:	38 2f       	mov	r19, r24
     7d0:	36 95       	lsr	r19
     7d2:	23 e9       	ldi	r18, 0x93	; 147
     7d4:	32 9f       	mul	r19, r18
     7d6:	21 2d       	mov	r18, r1
     7d8:	11 24       	eor	r1, r1
     7da:	26 95       	lsr	r18
     7dc:	26 95       	lsr	r18
     7de:	22 0f       	add	r18, r18
     7e0:	32 2f       	mov	r19, r18
     7e2:	33 0f       	add	r19, r19
     7e4:	33 0f       	add	r19, r19
     7e6:	33 0f       	add	r19, r19
     7e8:	32 1b       	sub	r19, r18
     7ea:	83 1b       	sub	r24, r19
	new_index_u = ((buf_index >= 0) || (new_index_u == 0)) ? new_index_u :  LED_BUFFER_LENGTH - new_index_u ;
     7ec:	99 23       	and	r25, r25
     7ee:	2c f4       	brge	.+10     	; 0x7fa <wrap_led_buffer_index+0x36>
     7f0:	88 23       	and	r24, r24
     7f2:	19 f0       	breq	.+6      	; 0x7fa <wrap_led_buffer_index+0x36>
     7f4:	9e e0       	ldi	r25, 0x0E	; 14
     7f6:	98 1b       	sub	r25, r24
     7f8:	89 2f       	mov	r24, r25
	return new_index_u;
}
     7fa:	08 95       	ret

000007fc <processLedIndicator>:
// Call this function N times per sec to get N/NUM_DIGITS_TOTAL display update rate, where
// NUM_DIGITS_TOTAL is number_of_digits_of_LED_display if no extra LEDs are used or
// (number_of_digits_of_LED_display + 1) otherwise.
//---------------------------------------------//
void processLedIndicator()
{
     7fc:	cf 93       	push	r28
	disable_led_segments();
	#endif
	
	
	// Perform regular shift
	led_clock_pulse(!LED_DIGIT_ACT_LVL);
     7fe:	81 e0       	ldi	r24, 0x01	; 1
     800:	22 d1       	rcall	.+580    	; 0xa46 <led_clock_pulse>
	
	switch (wActivePos)
     802:	80 91 c5 00 	lds	r24, 0x00C5
     806:	88 23       	and	r24, r24
     808:	19 f0       	breq	.+6      	; 0x810 <processLedIndicator+0x14>
     80a:	86 30       	cpi	r24, 0x06	; 6
     80c:	f1 f5       	brne	.+124    	; 0x88a <processLedIndicator+0x8e>
     80e:	12 c0       	rjmp	.+36     	; 0x834 <processLedIndicator+0x38>
	{
	case 0:
		// Get buttons
		#ifndef CLEAN_OPERATION
		disable_led_segments();
     810:	46 d1       	rcall	.+652    	; 0xa9e <disable_led_segments>
		#endif
		enable_led_segments_pullups();
     812:	37 d1       	rcall	.+622    	; 0xa82 <enable_led_segments_pullups>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     814:	85 e3       	ldi	r24, 0x35	; 53
     816:	8a 95       	dec	r24
     818:	f1 f7       	brne	.-4      	; 0x816 <processLedIndicator+0x1a>
     81a:	00 00       	nop
		_delay_us(PULLUP_DELAY_US);
		capture_button_state();
     81c:	47 d1       	rcall	.+654    	; 0xaac <capture_button_state>
		#ifndef CLEAN_OPERATION
		enable_led_segments();
     81e:	38 d1       	rcall	.+624    	; 0xa90 <enable_led_segments>
		#endif
		// Start new cycle with active digit level
		led_clock_pulse(LED_DIGIT_ACT_LVL);
     820:	80 e0       	ldi	r24, 0x00	; 0
     822:	11 d1       	rcall	.+546    	; 0xa46 <led_clock_pulse>
		// Always start new cycle from specified buffer start position
		bufActivePos = wStartPos;
     824:	80 91 e9 00 	lds	r24, 0x00E9
     828:	80 93 c4 00 	sts	0x00C4, r24
		next_wActivePos = wActivePos + 1;
     82c:	c0 91 c5 00 	lds	r28, 0x00C5
     830:	cf 5f       	subi	r28, 0xFF	; 255
		break;
     832:	2f c0       	rjmp	.+94     	; 0x892 <processLedIndicator+0x96>
//---------------------------------------------//
// Performs window shifting
//---------------------------------------------//
static void processWindowShifter(void)
{
	if (shifterState == LED_SHIFT_DONE)
     834:	80 91 ea 00 	lds	r24, 0x00EA
     838:	88 23       	and	r24, r24
     83a:	81 f1       	breq	.+96     	; 0x89c <processLedIndicator+0xa0>
		return;
	
	// Process shift timer
	processSoftTimer8b(&shiftTimer);	
     83c:	86 ec       	ldi	r24, 0xC6	; 198
     83e:	90 e0       	ldi	r25, 0x00	; 0
     840:	5c d7       	rcall	.+3768   	; 0x16fa <processSoftTimer8b>
	
	if (shiftTimer.FTop)
     842:	80 91 c6 00 	lds	r24, 0x00C6
     846:	85 ff       	sbrs	r24, 5
     848:	23 c0       	rjmp	.+70     	; 0x890 <processLedIndicator+0x94>
	{
		// Check if finished
		if (wStartPos == bufStartPos)	
     84a:	80 91 e9 00 	lds	r24, 0x00E9
     84e:	90 91 eb 00 	lds	r25, 0x00EB
     852:	89 13       	cpse	r24, r25
     854:	04 c0       	rjmp	.+8      	; 0x85e <processLedIndicator+0x62>
		{
			// Update state
			shifterState = LED_SHIFT_DONE;
     856:	10 92 ea 00 	sts	0x00EA, r1
		// Always start new cycle from specified buffer start position
		bufActivePos = wStartPos;
		next_wActivePos = wActivePos + 1;
		break;
	case NUM_DIGITS_TOTAL-1:
		next_wActivePos = 0;
     85a:	c0 e0       	ldi	r28, 0x00	; 0
     85c:	1a c0       	rjmp	.+52     	; 0x892 <processLedIndicator+0x96>
		if (wStartPos == bufStartPos)	
		{
			// Update state
			shifterState = LED_SHIFT_DONE;
		}
		else if (shifterState == LED_SHIFT_RIGHT)
     85e:	90 91 ea 00 	lds	r25, 0x00EA
     862:	92 30       	cpi	r25, 0x02	; 2
     864:	49 f4       	brne	.+18     	; 0x878 <processLedIndicator+0x7c>
// Increments index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t inc_buffer_position(uint8_t position)
{
	return (position >= LED_BUFFER_LENGTH - 1) ? 0 : position + 1;
     866:	8d 30       	cpi	r24, 0x0D	; 13
     868:	10 f4       	brcc	.+4      	; 0x86e <processLedIndicator+0x72>
     86a:	8f 5f       	subi	r24, 0xFF	; 255
     86c:	01 c0       	rjmp	.+2      	; 0x870 <processLedIndicator+0x74>
     86e:	80 e0       	ldi	r24, 0x00	; 0
			// Update state
			shifterState = LED_SHIFT_DONE;
		}
		else if (shifterState == LED_SHIFT_RIGHT)
		{
			wStartPos = inc_buffer_position(wStartPos);	
     870:	80 93 e9 00 	sts	0x00E9, r24
		// Always start new cycle from specified buffer start position
		bufActivePos = wStartPos;
		next_wActivePos = wActivePos + 1;
		break;
	case NUM_DIGITS_TOTAL-1:
		next_wActivePos = 0;
     874:	c0 e0       	ldi	r28, 0x00	; 0
     876:	0d c0       	rjmp	.+26     	; 0x892 <processLedIndicator+0x96>
// Decrements index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t dec_buffer_position(uint8_t position)
{
	return (position == 0) ? LED_BUFFER_LENGTH - 1 : position - 1;
     878:	88 23       	and	r24, r24
     87a:	11 f0       	breq	.+4      	; 0x880 <processLedIndicator+0x84>
     87c:	81 50       	subi	r24, 0x01	; 1
     87e:	01 c0       	rjmp	.+2      	; 0x882 <processLedIndicator+0x86>
     880:	8d e0       	ldi	r24, 0x0D	; 13
		{
			wStartPos = inc_buffer_position(wStartPos);	
		}
		else
		{
			wStartPos = dec_buffer_position(wStartPos);		
     882:	80 93 e9 00 	sts	0x00E9, r24
		// Always start new cycle from specified buffer start position
		bufActivePos = wStartPos;
		next_wActivePos = wActivePos + 1;
		break;
	case NUM_DIGITS_TOTAL-1:
		next_wActivePos = 0;
     886:	c0 e0       	ldi	r28, 0x00	; 0
     888:	04 c0       	rjmp	.+8      	; 0x892 <processLedIndicator+0x96>
		// Shift LED window
		processWindowShifter();	
		break;
	default:
		next_wActivePos = wActivePos + 1;
     88a:	c8 2f       	mov	r28, r24
     88c:	cf 5f       	subi	r28, 0xFF	; 255
		break;
     88e:	01 c0       	rjmp	.+2      	; 0x892 <processLedIndicator+0x96>
		// Always start new cycle from specified buffer start position
		bufActivePos = wStartPos;
		next_wActivePos = wActivePos + 1;
		break;
	case NUM_DIGITS_TOTAL-1:
		next_wActivePos = 0;
     890:	c0 e0       	ldi	r28, 0x00	; 0
		next_wActivePos = wActivePos + 1;
		break;
	}		
	
	#ifdef 	USE_EXTRA_LED_DIGIT
	if (wActivePos == EXTRA_DIGIT_NUM)
     892:	80 91 c5 00 	lds	r24, 0x00C5
     896:	86 30       	cpi	r24, 0x06	; 6
     898:	31 f4       	brne	.+12     	; 0x8a6 <processLedIndicator+0xaa>
     89a:	01 c0       	rjmp	.+2      	; 0x89e <processLedIndicator+0xa2>
		// Always start new cycle from specified buffer start position
		bufActivePos = wStartPos;
		next_wActivePos = wActivePos + 1;
		break;
	case NUM_DIGITS_TOTAL-1:
		next_wActivePos = 0;
     89c:	c0 e0       	ldi	r28, 0x00	; 0
	
	#ifdef 	USE_EXTRA_LED_DIGIT
	if (wActivePos == EXTRA_DIGIT_NUM)
	{
		// Output separate LEDs state
		set_led_segments(extra_led_state);
     89e:	80 91 e8 00 	lds	r24, 0x00E8
     8a2:	e1 d0       	rcall	.+450    	; 0xa66 <set_led_segments>
     8a4:	10 c0       	rjmp	.+32     	; 0x8c6 <processLedIndicator+0xca>
	}
	else
	#endif
	{
		// Output new segment data
		set_led_segments(led_data_buffer[bufActivePos]);
     8a6:	e0 91 c4 00 	lds	r30, 0x00C4
     8aa:	f0 e0       	ldi	r31, 0x00	; 0
     8ac:	e4 51       	subi	r30, 0x14	; 20
     8ae:	ff 4f       	sbci	r31, 0xFF	; 255
     8b0:	80 81       	ld	r24, Z
     8b2:	d9 d0       	rcall	.+434    	; 0xa66 <set_led_segments>
		// Wrap around buffer length
		bufActivePos = inc_buffer_position(bufActivePos );
     8b4:	90 91 c4 00 	lds	r25, 0x00C4
// Increments index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t inc_buffer_position(uint8_t position)
{
	return (position >= LED_BUFFER_LENGTH - 1) ? 0 : position + 1;
     8b8:	9d 30       	cpi	r25, 0x0D	; 13
     8ba:	10 f4       	brcc	.+4      	; 0x8c0 <processLedIndicator+0xc4>
     8bc:	9f 5f       	subi	r25, 0xFF	; 255
     8be:	01 c0       	rjmp	.+2      	; 0x8c2 <processLedIndicator+0xc6>
     8c0:	90 e0       	ldi	r25, 0x00	; 0
	#endif
	{
		// Output new segment data
		set_led_segments(led_data_buffer[bufActivePos]);
		// Wrap around buffer length
		bufActivePos = inc_buffer_position(bufActivePos );
     8c2:	90 93 c4 00 	sts	0x00C4, r25
	}
		
	wActivePos = next_wActivePos;
     8c6:	c0 93 c5 00 	sts	0x00C5, r28
	
	#ifdef CLEAN_OPERATION
	enable_led_segments();
	#endif

}
     8ca:	cf 91       	pop	r28
     8cc:	08 95       	ret

000008ce <fillLedBuffer>:
//---------------------------------------------//
// Fills buffer from (bufStartPos + offset) 
//	position with single char
//---------------------------------------------//
void fillLedBuffer(int8_t offset, uint8_t length, char c)
{
     8ce:	1f 93       	push	r17
     8d0:	cf 93       	push	r28
     8d2:	df 93       	push	r29
     8d4:	18 2f       	mov	r17, r24
     8d6:	c6 2f       	mov	r28, r22
     8d8:	84 2f       	mov	r24, r20
	uint8_t val = decode_led_char(c);
     8da:	3e df       	rcall	.-388    	; 0x758 <decode_led_char>
     8dc:	d8 2f       	mov	r29, r24
	// Ensure index is inside the buffer
	uint8_t position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
     8de:	80 91 eb 00 	lds	r24, 0x00EB
     8e2:	81 0f       	add	r24, r17
     8e4:	6f df       	rcall	.-290    	; 0x7c4 <wrap_led_buffer_index>
// Increments index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t inc_buffer_position(uint8_t position)
{
	return (position >= LED_BUFFER_LENGTH - 1) ? 0 : position + 1;
     8e6:	90 e0       	ldi	r25, 0x00	; 0
void fillLedBuffer(int8_t offset, uint8_t length, char c)
{
	uint8_t val = decode_led_char(c);
	// Ensure index is inside the buffer
	uint8_t position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
	while(length--)
     8e8:	0a c0       	rjmp	.+20     	; 0x8fe <fillLedBuffer+0x30>
	{
		led_data_buffer[position] = val;
     8ea:	e8 2f       	mov	r30, r24
     8ec:	f0 e0       	ldi	r31, 0x00	; 0
     8ee:	e4 51       	subi	r30, 0x14	; 20
     8f0:	ff 4f       	sbci	r31, 0xFF	; 255
     8f2:	d0 83       	st	Z, r29
// Increments index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t inc_buffer_position(uint8_t position)
{
	return (position >= LED_BUFFER_LENGTH - 1) ? 0 : position + 1;
     8f4:	8d 30       	cpi	r24, 0x0D	; 13
     8f6:	10 f4       	brcc	.+4      	; 0x8fc <fillLedBuffer+0x2e>
     8f8:	8f 5f       	subi	r24, 0xFF	; 255
     8fa:	01 c0       	rjmp	.+2      	; 0x8fe <fillLedBuffer+0x30>
     8fc:	89 2f       	mov	r24, r25
void fillLedBuffer(int8_t offset, uint8_t length, char c)
{
	uint8_t val = decode_led_char(c);
	// Ensure index is inside the buffer
	uint8_t position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
	while(length--)
     8fe:	c1 50       	subi	r28, 0x01	; 1
     900:	a0 f7       	brcc	.-24     	; 0x8ea <fillLedBuffer+0x1c>
	{
		led_data_buffer[position] = val;
		position = inc_buffer_position(position);
	}
}
     902:	df 91       	pop	r29
     904:	cf 91       	pop	r28
     906:	1f 91       	pop	r17
     908:	08 95       	ret

0000090a <startShiftingWindowLeft>:
//	LED window left 
//---------------------------------------------//
void startShiftingWindowLeft(void)
{
	// Clear spaces between menu states
	fillLedBuffer(-2,2,' ');
     90a:	40 e2       	ldi	r20, 0x20	; 32
     90c:	62 e0       	ldi	r22, 0x02	; 2
     90e:	8e ef       	ldi	r24, 0xFE	; 254
     910:	de df       	rcall	.-68     	; 0x8ce <fillLedBuffer>
	// Set new buffer position for writing
	bufStartPos = wrap_led_buffer_index( (int8_t)bufStartPos - (NUM_DIGITS + 2) );
     912:	80 91 eb 00 	lds	r24, 0x00EB
     916:	88 50       	subi	r24, 0x08	; 8
     918:	55 df       	rcall	.-342    	; 0x7c4 <wrap_led_buffer_index>
     91a:	80 93 eb 00 	sts	0x00EB, r24
	// Set shifter state
	shifterState = LED_SHIFT_LEFT;
     91e:	81 e0       	ldi	r24, 0x01	; 1
     920:	80 93 ea 00 	sts	0x00EA, r24
     924:	08 95       	ret

00000926 <startShiftingWindowRight>:
//	LED window right 
//---------------------------------------------//
void startShiftingWindowRight(void)
{
	// Clear spaces between menu states
	fillLedBuffer(NUM_DIGITS,2,' ');
     926:	40 e2       	ldi	r20, 0x20	; 32
     928:	62 e0       	ldi	r22, 0x02	; 2
     92a:	86 e0       	ldi	r24, 0x06	; 6
     92c:	d0 df       	rcall	.-96     	; 0x8ce <fillLedBuffer>
	// Set new buffer position for writing
	bufStartPos = wrap_led_buffer_index( (int8_t)bufStartPos + NUM_DIGITS + 2 );
     92e:	80 91 eb 00 	lds	r24, 0x00EB
     932:	88 5f       	subi	r24, 0xF8	; 248
     934:	47 df       	rcall	.-370    	; 0x7c4 <wrap_led_buffer_index>
     936:	80 93 eb 00 	sts	0x00EB, r24
	// Set shifter state
	shifterState = LED_SHIFT_RIGHT;
     93a:	82 e0       	ldi	r24, 0x02	; 2
     93c:	80 93 ea 00 	sts	0x00EA, r24
     940:	08 95       	ret

00000942 <initLedIndicator>:
//---------------------------------------------//
//	Initialization
//	Call this function at start of your program
//---------------------------------------------//
void initLedIndicator()
{
     942:	cf 93       	push	r28
	uint8_t i;
	// First disable outputs
	disable_led_segments();
     944:	ac d0       	rcall	.+344    	; 0xa9e <disable_led_segments>
     946:	c7 e0       	ldi	r28, 0x07	; 7
	// Fill shift register with non-active levels
	for (i=0;i<NUM_DIGITS_TOTAL;i++)
	{
		led_clock_pulse(!LED_DIGIT_ACT_LVL);
     948:	81 e0       	ldi	r24, 0x01	; 1
     94a:	7d d0       	rcall	.+250    	; 0xa46 <led_clock_pulse>
     94c:	c1 50       	subi	r28, 0x01	; 1
{
	uint8_t i;
	// First disable outputs
	disable_led_segments();
	// Fill shift register with non-active levels
	for (i=0;i<NUM_DIGITS_TOTAL;i++)
     94e:	e1 f7       	brne	.-8      	; 0x948 <initLedIndicator+0x6>
	{
		led_clock_pulse(!LED_DIGIT_ACT_LVL);
	}
	// Now enable outputs
	enable_led_segments();
     950:	9f d0       	rcall	.+318    	; 0xa90 <enable_led_segments>
	
	// Reset pointers
	wStartPos = 0;
     952:	10 92 e9 00 	sts	0x00E9, r1
	bufStartPos = 0;
     956:	10 92 eb 00 	sts	0x00EB, r1
	bufActivePos = 0;
     95a:	10 92 c4 00 	sts	0x00C4, r1
	wActivePos = 0;
     95e:	10 92 c5 00 	sts	0x00C5, r1
	#ifdef 	USE_EXTRA_LED_DIGIT
	extra_led_state = 0;
     962:	10 92 e8 00 	sts	0x00E8, r1
	#endif
	
	// Clear the buffer 
	fillLedBuffer(0,LED_BUFFER_LENGTH,' ');
     966:	40 e2       	ldi	r20, 0x20	; 32
     968:	6e e0       	ldi	r22, 0x0E	; 14
     96a:	80 e0       	ldi	r24, 0x00	; 0
     96c:	b0 df       	rcall	.-160    	; 0x8ce <fillLedBuffer>
	
	// Initialize shift timer - always enabled, but 
	//	processed only when shifting is active
	shifterState = LED_SHIFT_DONE;
     96e:	10 92 ea 00 	sts	0x00EA, r1
	shiftTimer.Enabled = 1;
     972:	e6 ec       	ldi	r30, 0xC6	; 198
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	80 81       	ld	r24, Z
	shiftTimer.RunOnce = 0;
     978:	81 60       	ori	r24, 0x01	; 1
     97a:	8d 7f       	andi	r24, 0xFD	; 253
     97c:	80 83       	st	Z, r24
	shiftTimer.Top = LED_SHIFT_INTERVAL-1;
     97e:	89 e0       	ldi	r24, 0x09	; 9
     980:	80 93 c8 00 	sts	0x00C8, r24
}
     984:	cf 91       	pop	r28
     986:	08 95       	ret

00000988 <printLedBuffer>:
//		str - null-terminated char string
// Comma and dot (".", ",") get special processing - first occurrence is added to
// a preceding char, next are displayed as a single digit
//---------------------------------------------//
void printLedBuffer(int8_t offset, char* str)
{
     988:	df 92       	push	r13
     98a:	ef 92       	push	r14
     98c:	ff 92       	push	r15
     98e:	0f 93       	push	r16
     990:	1f 93       	push	r17
     992:	cf 93       	push	r28
     994:	df 93       	push	r29
     996:	eb 01       	movw	r28, r22
	char c;
	uint8_t decoded_sym;
	uint8_t state = 0x02;
	uint8_t comma_pos;
	// Ensure index is inside the buffer
	uint8_t buffer_position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
     998:	90 91 eb 00 	lds	r25, 0x00EB
     99c:	89 0f       	add	r24, r25
     99e:	12 df       	rcall	.-476    	; 0x7c4 <wrap_led_buffer_index>
     9a0:	18 2f       	mov	r17, r24
	comma_pos = buffer_position;
     9a2:	d8 2e       	mov	r13, r24
//---------------------------------------------//
void printLedBuffer(int8_t offset, char* str)
{
	char c;
	uint8_t decoded_sym;
	uint8_t state = 0x02;
     9a4:	02 e0       	ldi	r16, 0x02	; 2
		comma_pos = buffer_position;
		if (state != 0x01)
		{
			buffer_position = inc_buffer_position(buffer_position);
		}
		state = (state & 0x01) ? 0x03 : 0x00;		
     9a6:	f1 2c       	mov	r15, r1
     9a8:	0f 2e       	mov	r0, r31
     9aa:	f3 e0       	ldi	r31, 0x03	; 3
     9ac:	ef 2e       	mov	r14, r31
     9ae:	f0 2d       	mov	r31, r0
	uint8_t comma_pos;
	// Ensure index is inside the buffer
	uint8_t buffer_position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
	comma_pos = buffer_position;
	// Output chars
	while((c = *str++))
     9b0:	26 c0       	rjmp	.+76     	; 0x9fe <printLedBuffer+0x76>
	{
		decoded_sym = decode_led_char(c);
     9b2:	d2 de       	rcall	.-604    	; 0x758 <decode_led_char>
		state = (decoded_sym == SEGH) ? (state | 0x01) : (state & ~0x01);
     9b4:	80 38       	cpi	r24, 0x80	; 128
     9b6:	19 f4       	brne	.+6      	; 0x9be <printLedBuffer+0x36>
     9b8:	90 2f       	mov	r25, r16
     9ba:	91 60       	ori	r25, 0x01	; 1
     9bc:	02 c0       	rjmp	.+4      	; 0x9c2 <printLedBuffer+0x3a>
     9be:	90 2f       	mov	r25, r16
     9c0:	9e 7f       	andi	r25, 0xFE	; 254
		if (state == 0x01)			
     9c2:	91 30       	cpi	r25, 0x01	; 1
     9c4:	51 f4       	brne	.+20     	; 0x9da <printLedBuffer+0x52>
		{
			led_data_buffer[comma_pos] |= decoded_sym;
     9c6:	ed 2d       	mov	r30, r13
     9c8:	f0 e0       	ldi	r31, 0x00	; 0
     9ca:	e4 51       	subi	r30, 0x14	; 20
     9cc:	ff 4f       	sbci	r31, 0xFF	; 255
     9ce:	90 81       	ld	r25, Z
     9d0:	89 2b       	or	r24, r25
     9d2:	80 83       	st	Z, r24
     9d4:	81 2f       	mov	r24, r17
		comma_pos = buffer_position;
		if (state != 0x01)
		{
			buffer_position = inc_buffer_position(buffer_position);
		}
		state = (state & 0x01) ? 0x03 : 0x00;		
     9d6:	0e 2d       	mov	r16, r14
     9d8:	10 c0       	rjmp	.+32     	; 0x9fa <printLedBuffer+0x72>
		{
			led_data_buffer[comma_pos] |= decoded_sym;
		}
		else
		{
			led_data_buffer[buffer_position] = decoded_sym;	
     9da:	e1 2f       	mov	r30, r17
     9dc:	f0 e0       	ldi	r31, 0x00	; 0
     9de:	e4 51       	subi	r30, 0x14	; 20
     9e0:	ff 4f       	sbci	r31, 0xFF	; 255
     9e2:	80 83       	st	Z, r24
// Increments index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t inc_buffer_position(uint8_t position)
{
	return (position >= LED_BUFFER_LENGTH - 1) ? 0 : position + 1;
     9e4:	1d 30       	cpi	r17, 0x0D	; 13
     9e6:	18 f4       	brcc	.+6      	; 0x9ee <printLedBuffer+0x66>
     9e8:	81 2f       	mov	r24, r17
     9ea:	8f 5f       	subi	r24, 0xFF	; 255
     9ec:	01 c0       	rjmp	.+2      	; 0x9f0 <printLedBuffer+0x68>
     9ee:	8f 2d       	mov	r24, r15
		comma_pos = buffer_position;
		if (state != 0x01)
		{
			buffer_position = inc_buffer_position(buffer_position);
		}
		state = (state & 0x01) ? 0x03 : 0x00;		
     9f0:	90 ff       	sbrs	r25, 0
     9f2:	02 c0       	rjmp	.+4      	; 0x9f8 <printLedBuffer+0x70>
     9f4:	0e 2d       	mov	r16, r14
     9f6:	01 c0       	rjmp	.+2      	; 0x9fa <printLedBuffer+0x72>
     9f8:	0f 2d       	mov	r16, r15
     9fa:	d1 2e       	mov	r13, r17
     9fc:	18 2f       	mov	r17, r24
	uint8_t comma_pos;
	// Ensure index is inside the buffer
	uint8_t buffer_position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
	comma_pos = buffer_position;
	// Output chars
	while((c = *str++))
     9fe:	89 91       	ld	r24, Y+
     a00:	81 11       	cpse	r24, r1
     a02:	d7 cf       	rjmp	.-82     	; 0x9b2 <printLedBuffer+0x2a>
		{
			buffer_position = inc_buffer_position(buffer_position);
		}
		state = (state & 0x01) ? 0x03 : 0x00;		
	}
}
     a04:	df 91       	pop	r29
     a06:	cf 91       	pop	r28
     a08:	1f 91       	pop	r17
     a0a:	0f 91       	pop	r16
     a0c:	ff 90       	pop	r15
     a0e:	ef 90       	pop	r14
     a10:	df 90       	pop	r13
     a12:	08 95       	ret

00000a14 <setComma>:
//	buffer cell
//---------------------------------------------//
void setComma(int8_t offset)
{
	// Ensure index is inside the buffer
	uint8_t position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
     a14:	90 91 eb 00 	lds	r25, 0x00EB
     a18:	89 0f       	add	r24, r25
     a1a:	d4 de       	rcall	.-600    	; 0x7c4 <wrap_led_buffer_index>
	led_data_buffer[position] |= (SEGH);
     a1c:	e8 2f       	mov	r30, r24
     a1e:	f0 e0       	ldi	r31, 0x00	; 0
     a20:	e4 51       	subi	r30, 0x14	; 20
     a22:	ff 4f       	sbci	r31, 0xFF	; 255
     a24:	80 81       	ld	r24, Z
     a26:	80 68       	ori	r24, 0x80	; 128
     a28:	80 83       	st	Z, r24
     a2a:	08 95       	ret

00000a2c <setExtraLeds>:
// Argument is ORed with current LED state
//---------------------------------------------//
inline void setExtraLeds(uint8_t leds_set_value)
{
		//asm("cli");
		extra_led_state |= leds_set_value;
     a2c:	90 91 e8 00 	lds	r25, 0x00E8
     a30:	89 2b       	or	r24, r25
     a32:	80 93 e8 00 	sts	0x00E8, r24
     a36:	08 95       	ret

00000a38 <clearExtraLeds>:
// Argument is AND NOTed with current LED state
//---------------------------------------------//
inline void clearExtraLeds(uint8_t leds_clear_value)
{
		//asm("cli");
		extra_led_state &= ~leds_clear_value;
     a38:	90 91 e8 00 	lds	r25, 0x00E8
     a3c:	80 95       	com	r24
     a3e:	98 23       	and	r25, r24
     a40:	90 93 e8 00 	sts	0x00E8, r25
     a44:	08 95       	ret

00000a46 <led_clock_pulse>:


// Clocks in bit into the shift register
void led_clock_pulse(uint8_t bit)
{
	if (bit)
     a46:	88 23       	and	r24, r24
     a48:	11 f0       	breq	.+4      	; 0xa4e <led_clock_pulse+0x8>
		PORTB |= (1<<PB_LED_DOUT);
     a4a:	c0 9a       	sbi	0x18, 0	; 24
     a4c:	01 c0       	rjmp	.+2      	; 0xa50 <led_clock_pulse+0xa>
	else
		PORTB &= ~(1<<PB_LED_DOUT);
     a4e:	c0 98       	cbi	0x18, 0	; 24
     a50:	8a e1       	ldi	r24, 0x1A	; 26
     a52:	8a 95       	dec	r24
     a54:	f1 f7       	brne	.-4      	; 0xa52 <led_clock_pulse+0xc>
     a56:	00 c0       	rjmp	.+0      	; 0xa58 <led_clock_pulse+0x12>
	_delay_us(SETUP_DELAY_US);
	PORTB |= (1<<PB_LED_CLK);
     a58:	c2 9a       	sbi	0x18, 2	; 24
     a5a:	8a e1       	ldi	r24, 0x1A	; 26
     a5c:	8a 95       	dec	r24
     a5e:	f1 f7       	brne	.-4      	; 0xa5c <led_clock_pulse+0x16>
     a60:	00 c0       	rjmp	.+0      	; 0xa62 <led_clock_pulse+0x1c>
	_delay_us(SHIFT_DELAY_US);
	PORTB &= ~(1<<PB_LED_CLK);
     a62:	c2 98       	cbi	0x18, 2	; 24
     a64:	08 95       	ret

00000a66 <set_led_segments>:
// Outputs decoded segment data to port bits
void set_led_segments(uint8_t seg_ch)
{
	uint8_t pdat;
	seg_ch ^= LED_SEGMENT_MASK;
	pdat = PORTC & ~( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
     a66:	95 b3       	in	r25, 0x15	; 21
	pdat |= (seg_ch & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
     a68:	28 2f       	mov	r18, r24
     a6a:	2f 71       	andi	r18, 0x1F	; 31
// Outputs decoded segment data to port bits
void set_led_segments(uint8_t seg_ch)
{
	uint8_t pdat;
	seg_ch ^= LED_SEGMENT_MASK;
	pdat = PORTC & ~( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
     a6c:	90 7e       	andi	r25, 0xE0	; 224
	pdat |= (seg_ch & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
     a6e:	92 2b       	or	r25, r18
	PORTC = pdat;
     a70:	95 bb       	out	0x15, r25	; 21
	seg_ch >>= 2;
	pdat = PORTB & ~( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     a72:	98 b3       	in	r25, 0x18	; 24
	uint8_t pdat;
	seg_ch ^= LED_SEGMENT_MASK;
	pdat = PORTC & ~( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
	pdat |= (seg_ch & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
	PORTC = pdat;
	seg_ch >>= 2;
     a74:	86 95       	lsr	r24
     a76:	86 95       	lsr	r24
	pdat = PORTB & ~( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
	pdat |= (seg_ch & ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) ));
     a78:	88 73       	andi	r24, 0x38	; 56
	seg_ch ^= LED_SEGMENT_MASK;
	pdat = PORTC & ~( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
	pdat |= (seg_ch & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
	PORTC = pdat;
	seg_ch >>= 2;
	pdat = PORTB & ~( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     a7a:	97 7c       	andi	r25, 0xC7	; 199
	pdat |= (seg_ch & ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) ));
     a7c:	89 2b       	or	r24, r25
	PORTB = pdat;
     a7e:	88 bb       	out	0x18, r24	; 24
     a80:	08 95       	ret

00000a82 <enable_led_segments_pullups>:

// Turns segment port bits to HI-Z and
// enables pull-ups
void enable_led_segments_pullups()
{
	PORTC |= ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
     a82:	85 b3       	in	r24, 0x15	; 21
     a84:	8f 61       	ori	r24, 0x1F	; 31
     a86:	85 bb       	out	0x15, r24	; 21
	PORTB |= ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     a88:	88 b3       	in	r24, 0x18	; 24
     a8a:	88 63       	ori	r24, 0x38	; 56
     a8c:	88 bb       	out	0x18, r24	; 24
     a8e:	08 95       	ret

00000a90 <enable_led_segments>:
}	

void enable_led_segments()
{
	DDRC |= ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
     a90:	84 b3       	in	r24, 0x14	; 20
     a92:	8f 61       	ori	r24, 0x1F	; 31
     a94:	84 bb       	out	0x14, r24	; 20
	DDRB |= ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     a96:	87 b3       	in	r24, 0x17	; 23
     a98:	88 63       	ori	r24, 0x38	; 56
     a9a:	87 bb       	out	0x17, r24	; 23
     a9c:	08 95       	ret

00000a9e <disable_led_segments>:
}

void disable_led_segments()
{
	DDRC &= ~( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
     a9e:	84 b3       	in	r24, 0x14	; 20
     aa0:	80 7e       	andi	r24, 0xE0	; 224
     aa2:	84 bb       	out	0x14, r24	; 20
	DDRB &= ~( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     aa4:	87 b3       	in	r24, 0x17	; 23
     aa6:	87 7c       	andi	r24, 0xC7	; 199
     aa8:	87 bb       	out	0x17, r24	; 23
     aaa:	08 95       	ret

00000aac <capture_button_state>:


void capture_button_state()
{
	uint8_t pdat;
	pdat = PINB  & ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     aac:	86 b3       	in	r24, 0x16	; 22
     aae:	88 73       	andi	r24, 0x38	; 56
	pdat <<= 2;
	pdat |= (PINC & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
     ab0:	93 b3       	in	r25, 0x13	; 19

void capture_button_state()
{
	uint8_t pdat;
	pdat = PINB  & ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
	pdat <<= 2;
     ab2:	88 0f       	add	r24, r24
     ab4:	88 0f       	add	r24, r24
	pdat |= (PINC & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
     ab6:	9f 71       	andi	r25, 0x1F	; 31
     ab8:	89 2b       	or	r24, r25
	raw_button_state = pdat ^ RAW_BUTTONS_INVERSE_MASK;
     aba:	80 95       	com	r24
     abc:	80 93 fa 00 	sts	0x00FA, r24
     ac0:	08 95       	ret

00000ac2 <restartMenuTimer>:
//	 Restarts menu state timeout
//	Should be used in RUN function when control buttons are pressed.
//-----------------------------------------------------------------//
static void restartMenuTimer(void)
{
	menuTimer.Timer = 0;
     ac2:	10 92 fd 00 	sts	0x00FD, r1
     ac6:	08 95       	ret

00000ac8 <mf_setTempLeave>:
		clearExtraLeds(LED_TEMP);
}

void mf_setTempLeave(void)
{
	userTimer.Enabled = 0;
     ac8:	e2 e0       	ldi	r30, 0x02	; 2
     aca:	f1 e0       	ldi	r31, 0x01	; 1
     acc:	80 81       	ld	r24, Z
     ace:	8e 7f       	andi	r24, 0xFE	; 254
     ad0:	80 83       	st	Z, r24
     ad2:	08 95       	ret

00000ad4 <mf_leafSelectAct>:
	userTimer.FA_GE = 1;	
}

void mf_leafSelectAct(void)
{
	userTimer.Timer = 0;
     ad4:	10 92 03 01 	sts	0x0103, r1
	userTimer.Top = BLINK_PERIOD - 1;
     ad8:	87 e0       	ldi	r24, 0x07	; 7
     ada:	80 93 04 01 	sts	0x0104, r24
	userTimer.CompA = BLINK_PERIOD / 2;
     ade:	84 e0       	ldi	r24, 0x04	; 4
     ae0:	80 93 05 01 	sts	0x0105, r24
	userTimer.Enabled = 1;
     ae4:	e2 e0       	ldi	r30, 0x02	; 2
     ae6:	f1 e0       	ldi	r31, 0x01	; 1
     ae8:	80 81       	ld	r24, Z
     aea:	81 60       	ori	r24, 0x01	; 1
     aec:	80 83       	st	Z, r24
     aee:	08 95       	ret

00000af0 <mf_leafExit>:
}

void mf_leafExit(void)
{
	userTimer.Enabled = 0;	
     af0:	e2 e0       	ldi	r30, 0x02	; 2
     af2:	f1 e0       	ldi	r31, 0x01	; 1
     af4:	80 81       	ld	r24, Z
     af6:	8e 7f       	andi	r24, 0xFE	; 254
     af8:	80 83       	st	Z, r24
     afa:	08 95       	ret

00000afc <mf_cdoneDo>:
	calculateCoeffs();
}

void mf_cdoneDo(void)
{
	printLedBuffer(0," DONE ");
     afc:	61 e9       	ldi	r22, 0x91	; 145
     afe:	70 e0       	ldi	r23, 0x00	; 0
     b00:	80 e0       	ldi	r24, 0x00	; 0
     b02:	42 df       	rcall	.-380    	; 0x988 <printLedBuffer>
     b04:	08 95       	ret

00000b06 <mf_cdone2Select>:
}

void mf_cdone2Select(void)
{
	// Save current ADC as calibrating point
	cpoint2_adc = adc_filtered_value;
     b06:	80 91 d8 00 	lds	r24, 0x00D8
     b0a:	90 91 d9 00 	lds	r25, 0x00D9
     b0e:	90 93 e6 00 	sts	0x00E6, r25
     b12:	80 93 e5 00 	sts	0x00E5, r24
	// Save current Celsius degree
	cpoint2 = cpoint2_copy;
     b16:	80 91 01 01 	lds	r24, 0x0101
     b1a:	80 93 e7 00 	sts	0x00E7, r24
	// Calculate new coefficient for temperature conversion
	calculateCoeffs();
     b1e:	e8 db       	rcall	.-2096   	; 0x2f0 <calculateCoeffs>
     b20:	08 95       	ret

00000b22 <mf_cdone1Select>:
//---------------------------------------------//

void mf_cdone1Select(void)
{
	// Save current ADC as calibrating point
	cpoint1_adc = adc_filtered_value;
     b22:	80 91 d8 00 	lds	r24, 0x00D8
     b26:	90 91 d9 00 	lds	r25, 0x00D9
     b2a:	90 93 e3 00 	sts	0x00E3, r25
     b2e:	80 93 e2 00 	sts	0x00E2, r24
	// Save current Celsius degree
	cpoint1 = cpoint1_copy;
     b32:	80 91 00 01 	lds	r24, 0x0100
     b36:	80 93 dd 00 	sts	0x00DD, r24
	// Calculate new coefficient for temperature conversion
	calculateCoeffs();
     b3a:	da db       	rcall	.-2124   	; 0x2f0 <calculateCoeffs>
     b3c:	08 95       	ret

00000b3e <mf_calib2Do>:
}

//---------------------------------------------//

void mf_calib2Do(void)
{
     b3e:	cf 93       	push	r28
     b40:	df 93       	push	r29
     b42:	cd b7       	in	r28, 0x3d	; 61
     b44:	de b7       	in	r29, 0x3e	; 62
     b46:	27 97       	sbiw	r28, 0x07	; 7
     b48:	0f b6       	in	r0, 0x3f	; 63
     b4a:	f8 94       	cli
     b4c:	de bf       	out	0x3e, r29	; 62
     b4e:	0f be       	out	0x3f, r0	; 63
     b50:	cd bf       	out	0x3d, r28	; 61
	char str[] = {'P','2',' ',' ',' ',' ',0};
     b52:	87 e0       	ldi	r24, 0x07	; 7
     b54:	e7 e6       	ldi	r30, 0x67	; 103
     b56:	f0 e0       	ldi	r31, 0x00	; 0
     b58:	de 01       	movw	r26, r28
     b5a:	11 96       	adiw	r26, 0x01	; 1
     b5c:	01 90       	ld	r0, Z+
     b5e:	0d 92       	st	X+, r0
     b60:	8a 95       	dec	r24
     b62:	e1 f7       	brne	.-8      	; 0xb5c <mf_calib2Do+0x1e>
	
	
	if (button_state & (BD_UP | BR_UP))
     b64:	80 91 be 00 	lds	r24, 0x00BE
     b68:	90 91 bf 00 	lds	r25, 0x00BF
     b6c:	9c 01       	movw	r18, r24
     b6e:	22 70       	andi	r18, 0x02	; 2
     b70:	34 70       	andi	r19, 0x04	; 4
     b72:	23 2b       	or	r18, r19
     b74:	41 f0       	breq	.+16     	; 0xb86 <mf_calib2Do+0x48>
	{
		if (cpoint2_copy < MAX_CALIB_TEMP)
     b76:	80 91 01 01 	lds	r24, 0x0101
     b7a:	8a 3f       	cpi	r24, 0xFA	; 250
     b7c:	78 f4       	brcc	.+30     	; 0xb9c <mf_calib2Do+0x5e>
		cpoint2_copy += 1;
     b7e:	8f 5f       	subi	r24, 0xFF	; 255
     b80:	80 93 01 01 	sts	0x0101, r24
     b84:	0b c0       	rjmp	.+22     	; 0xb9c <mf_calib2Do+0x5e>
	}
	else if (button_state & (BD_DOWN | BR_DOWN))
     b86:	84 70       	andi	r24, 0x04	; 4
     b88:	98 70       	andi	r25, 0x08	; 8
     b8a:	89 2b       	or	r24, r25
     b8c:	39 f0       	breq	.+14     	; 0xb9c <mf_calib2Do+0x5e>
	{
		if (cpoint2_copy > MIN_CALIB_TEMP)
     b8e:	80 91 01 01 	lds	r24, 0x0101
     b92:	8b 30       	cpi	r24, 0x0B	; 11
     b94:	18 f0       	brcs	.+6      	; 0xb9c <mf_calib2Do+0x5e>
		cpoint2_copy -= 1;
     b96:	81 50       	subi	r24, 0x01	; 1
     b98:	80 93 01 01 	sts	0x0101, r24
	}
	
	if (userTimer.FA_GE)
     b9c:	80 91 02 01 	lds	r24, 0x0102
     ba0:	84 ff       	sbrs	r24, 4
     ba2:	09 c0       	rjmp	.+18     	; 0xbb6 <mf_calib2Do+0x78>
	{
		u16toa_align_right(cpoint2_copy,str + 3,0x80 | 3,' ');
     ba4:	20 e2       	ldi	r18, 0x20	; 32
     ba6:	43 e8       	ldi	r20, 0x83	; 131
     ba8:	be 01       	movw	r22, r28
     baa:	6c 5f       	subi	r22, 0xFC	; 252
     bac:	7f 4f       	sbci	r23, 0xFF	; 255
     bae:	80 91 01 01 	lds	r24, 0x0101
     bb2:	90 e0       	ldi	r25, 0x00	; 0
     bb4:	24 d3       	rcall	.+1608   	; 0x11fe <u16toa_align_right>
	}
	
	printLedBuffer(0,str);
     bb6:	be 01       	movw	r22, r28
     bb8:	6f 5f       	subi	r22, 0xFF	; 255
     bba:	7f 4f       	sbci	r23, 0xFF	; 255
     bbc:	80 e0       	ldi	r24, 0x00	; 0
     bbe:	e4 de       	rcall	.-568    	; 0x988 <printLedBuffer>
	
}
     bc0:	27 96       	adiw	r28, 0x07	; 7
     bc2:	0f b6       	in	r0, 0x3f	; 63
     bc4:	f8 94       	cli
     bc6:	de bf       	out	0x3e, r29	; 62
     bc8:	0f be       	out	0x3f, r0	; 63
     bca:	cd bf       	out	0x3d, r28	; 61
     bcc:	df 91       	pop	r29
     bce:	cf 91       	pop	r28
     bd0:	08 95       	ret

00000bd2 <mf_calib1Do>:
	cpoint1_copy = cpoint1;
	cpoint2_copy = cpoint2;
}

void mf_calib1Do(void)
{
     bd2:	cf 93       	push	r28
     bd4:	df 93       	push	r29
     bd6:	cd b7       	in	r28, 0x3d	; 61
     bd8:	de b7       	in	r29, 0x3e	; 62
     bda:	27 97       	sbiw	r28, 0x07	; 7
     bdc:	0f b6       	in	r0, 0x3f	; 63
     bde:	f8 94       	cli
     be0:	de bf       	out	0x3e, r29	; 62
     be2:	0f be       	out	0x3f, r0	; 63
     be4:	cd bf       	out	0x3d, r28	; 61
	char str[] = {'P','1',' ',' ',' ',' ',0};
     be6:	87 e0       	ldi	r24, 0x07	; 7
     be8:	ee e6       	ldi	r30, 0x6E	; 110
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	de 01       	movw	r26, r28
     bee:	11 96       	adiw	r26, 0x01	; 1
     bf0:	01 90       	ld	r0, Z+
     bf2:	0d 92       	st	X+, r0
     bf4:	8a 95       	dec	r24
     bf6:	e1 f7       	brne	.-8      	; 0xbf0 <mf_calib1Do+0x1e>
	
	
	if (button_state & (BD_UP | BR_UP))
     bf8:	80 91 be 00 	lds	r24, 0x00BE
     bfc:	90 91 bf 00 	lds	r25, 0x00BF
     c00:	9c 01       	movw	r18, r24
     c02:	22 70       	andi	r18, 0x02	; 2
     c04:	34 70       	andi	r19, 0x04	; 4
     c06:	23 2b       	or	r18, r19
     c08:	41 f0       	breq	.+16     	; 0xc1a <mf_calib1Do+0x48>
	{
		if (cpoint1_copy < MAX_CALIB_TEMP)
     c0a:	80 91 00 01 	lds	r24, 0x0100
     c0e:	8a 3f       	cpi	r24, 0xFA	; 250
     c10:	78 f4       	brcc	.+30     	; 0xc30 <mf_calib1Do+0x5e>
			cpoint1_copy += 1;
     c12:	8f 5f       	subi	r24, 0xFF	; 255
     c14:	80 93 00 01 	sts	0x0100, r24
     c18:	0b c0       	rjmp	.+22     	; 0xc30 <mf_calib1Do+0x5e>
	}
	else if (button_state & (BD_DOWN | BR_DOWN))
     c1a:	84 70       	andi	r24, 0x04	; 4
     c1c:	98 70       	andi	r25, 0x08	; 8
     c1e:	89 2b       	or	r24, r25
     c20:	39 f0       	breq	.+14     	; 0xc30 <mf_calib1Do+0x5e>
	{
		if (cpoint1_copy > MIN_CALIB_TEMP)
     c22:	80 91 00 01 	lds	r24, 0x0100
     c26:	8b 30       	cpi	r24, 0x0B	; 11
     c28:	18 f0       	brcs	.+6      	; 0xc30 <mf_calib1Do+0x5e>
			cpoint1_copy -= 1;
     c2a:	81 50       	subi	r24, 0x01	; 1
     c2c:	80 93 00 01 	sts	0x0100, r24
	}
	
	if (userTimer.FA_GE)
     c30:	80 91 02 01 	lds	r24, 0x0102
     c34:	84 ff       	sbrs	r24, 4
     c36:	09 c0       	rjmp	.+18     	; 0xc4a <mf_calib1Do+0x78>
	{
		u16toa_align_right(cpoint1_copy,str + 3,0x80 | 3,' ');
     c38:	20 e2       	ldi	r18, 0x20	; 32
     c3a:	43 e8       	ldi	r20, 0x83	; 131
     c3c:	be 01       	movw	r22, r28
     c3e:	6c 5f       	subi	r22, 0xFC	; 252
     c40:	7f 4f       	sbci	r23, 0xFF	; 255
     c42:	80 91 00 01 	lds	r24, 0x0100
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	da d2       	rcall	.+1460   	; 0x11fe <u16toa_align_right>
	}
	
	printLedBuffer(0,str);
     c4a:	be 01       	movw	r22, r28
     c4c:	6f 5f       	subi	r22, 0xFF	; 255
     c4e:	7f 4f       	sbci	r23, 0xFF	; 255
     c50:	80 e0       	ldi	r24, 0x00	; 0
     c52:	9a de       	rcall	.-716    	; 0x988 <printLedBuffer>
}
     c54:	27 96       	adiw	r28, 0x07	; 7
     c56:	0f b6       	in	r0, 0x3f	; 63
     c58:	f8 94       	cli
     c5a:	de bf       	out	0x3e, r29	; 62
     c5c:	0f be       	out	0x3f, r0	; 63
     c5e:	cd bf       	out	0x3d, r28	; 61
     c60:	df 91       	pop	r29
     c62:	cf 91       	pop	r28
     c64:	08 95       	ret

00000c66 <mf_autopoffDo>:

//---------------------------------------------//


void mf_autopoffDo(void)
{
     c66:	cf 93       	push	r28
     c68:	df 93       	push	r29
     c6a:	cd b7       	in	r28, 0x3d	; 61
     c6c:	de b7       	in	r29, 0x3e	; 62
     c6e:	27 97       	sbiw	r28, 0x07	; 7
     c70:	0f b6       	in	r0, 0x3f	; 63
     c72:	f8 94       	cli
     c74:	de bf       	out	0x3e, r29	; 62
     c76:	0f be       	out	0x3f, r0	; 63
     c78:	cd bf       	out	0x3d, r28	; 61
	char str[] = {'O','F','F',' ',' ',' ',0};
     c7a:	87 e0       	ldi	r24, 0x07	; 7
     c7c:	e5 e7       	ldi	r30, 0x75	; 117
     c7e:	f0 e0       	ldi	r31, 0x00	; 0
     c80:	de 01       	movw	r26, r28
     c82:	11 96       	adiw	r26, 0x01	; 1
     c84:	01 90       	ld	r0, Z+
     c86:	0d 92       	st	X+, r0
     c88:	8a 95       	dec	r24
     c8a:	e1 f7       	brne	.-8      	; 0xc84 <mf_autopoffDo+0x1e>
		
		
	if (button_state & (BD_UP | BR_UP))
     c8c:	80 91 be 00 	lds	r24, 0x00BE
     c90:	90 91 bf 00 	lds	r25, 0x00BF
     c94:	9c 01       	movw	r18, r24
     c96:	22 70       	andi	r18, 0x02	; 2
     c98:	34 70       	andi	r19, 0x04	; 4
     c9a:	23 2b       	or	r18, r19
     c9c:	49 f0       	breq	.+18     	; 0xcb0 <mf_autopoffDo+0x4a>
	{
		if (power_off_timeout < MAX_POWEROFF_TIMEOUT)
     c9e:	80 91 e4 00 	lds	r24, 0x00E4
     ca2:	8f 35       	cpi	r24, 0x5F	; 95
     ca4:	18 f4       	brcc	.+6      	; 0xcac <mf_autopoffDo+0x46>
			power_off_timeout += 5;
     ca6:	8b 5f       	subi	r24, 0xFB	; 251
     ca8:	80 93 e4 00 	sts	0x00E4, r24
		restartMenuTimer();
     cac:	0a df       	rcall	.-492    	; 0xac2 <restartMenuTimer>
     cae:	0c c0       	rjmp	.+24     	; 0xcc8 <mf_autopoffDo+0x62>
	}
	else if (button_state & (BD_DOWN | BR_DOWN))
     cb0:	84 70       	andi	r24, 0x04	; 4
     cb2:	98 70       	andi	r25, 0x08	; 8
     cb4:	89 2b       	or	r24, r25
     cb6:	41 f0       	breq	.+16     	; 0xcc8 <mf_autopoffDo+0x62>
	{
		if (power_off_timeout > MIN_POWEROFF_TIMEOUT)
     cb8:	80 91 e4 00 	lds	r24, 0x00E4
     cbc:	86 30       	cpi	r24, 0x06	; 6
     cbe:	18 f0       	brcs	.+6      	; 0xcc6 <mf_autopoffDo+0x60>
			power_off_timeout -= 5;
     cc0:	85 50       	subi	r24, 0x05	; 5
     cc2:	80 93 e4 00 	sts	0x00E4, r24
		restartMenuTimer();
     cc6:	fd de       	rcall	.-518    	; 0xac2 <restartMenuTimer>
	}	
		
	if (userTimer.FA_GE)
     cc8:	80 91 02 01 	lds	r24, 0x0102
     ccc:	84 ff       	sbrs	r24, 4
     cce:	10 c0       	rjmp	.+32     	; 0xcf0 <mf_autopoffDo+0x8a>
	{
		if (power_off_timeout != MAX_POWEROFF_TIMEOUT)
     cd0:	80 91 e4 00 	lds	r24, 0x00E4
     cd4:	8f 35       	cpi	r24, 0x5F	; 95
     cd6:	41 f0       	breq	.+16     	; 0xce8 <mf_autopoffDo+0x82>
			u16toa_align_right(power_off_timeout,str + 4,0x80 | 2,' ');	
     cd8:	20 e2       	ldi	r18, 0x20	; 32
     cda:	42 e8       	ldi	r20, 0x82	; 130
     cdc:	be 01       	movw	r22, r28
     cde:	6b 5f       	subi	r22, 0xFB	; 251
     ce0:	7f 4f       	sbci	r23, 0xFF	; 255
     ce2:	90 e0       	ldi	r25, 0x00	; 0
     ce4:	8c d2       	rcall	.+1304   	; 0x11fe <u16toa_align_right>
     ce6:	04 c0       	rjmp	.+8      	; 0xcf0 <mf_autopoffDo+0x8a>
		else 
		{
			str[4] = 'N';
     ce8:	8e e4       	ldi	r24, 0x4E	; 78
     cea:	8d 83       	std	Y+5, r24	; 0x05
			str[5] = 'O';
     cec:	8f e4       	ldi	r24, 0x4F	; 79
     cee:	8e 83       	std	Y+6, r24	; 0x06
		}			
	}		
		
	printLedBuffer(0,str);
     cf0:	be 01       	movw	r22, r28
     cf2:	6f 5f       	subi	r22, 0xFF	; 255
     cf4:	7f 4f       	sbci	r23, 0xFF	; 255
     cf6:	80 e0       	ldi	r24, 0x00	; 0
     cf8:	47 de       	rcall	.-882    	; 0x988 <printLedBuffer>
}
     cfa:	27 96       	adiw	r28, 0x07	; 7
     cfc:	0f b6       	in	r0, 0x3f	; 63
     cfe:	f8 94       	cli
     d00:	de bf       	out	0x3e, r29	; 62
     d02:	0f be       	out	0x3f, r0	; 63
     d04:	cd bf       	out	0x3d, r28	; 61
     d06:	df 91       	pop	r29
     d08:	cf 91       	pop	r28
     d0a:	08 95       	ret

00000d0c <mf_realTempDo>:
{
	setExtraLeds(LED_TEMP);
}

void mf_realTempDo(void)
{
     d0c:	cf 93       	push	r28
     d0e:	df 93       	push	r29
     d10:	cd b7       	in	r28, 0x3d	; 61
     d12:	de b7       	in	r29, 0x3e	; 62
     d14:	27 97       	sbiw	r28, 0x07	; 7
     d16:	0f b6       	in	r0, 0x3f	; 63
     d18:	f8 94       	cli
     d1a:	de bf       	out	0x3e, r29	; 62
     d1c:	0f be       	out	0x3f, r0	; 63
     d1e:	cd bf       	out	0x3d, r28	; 61
	char str[] = {' ',' ',' ',' ',0xB0,'C',0};
     d20:	87 e0       	ldi	r24, 0x07	; 7
     d22:	ec e7       	ldi	r30, 0x7C	; 124
     d24:	f0 e0       	ldi	r31, 0x00	; 0
     d26:	de 01       	movw	r26, r28
     d28:	11 96       	adiw	r26, 0x01	; 1
     d2a:	01 90       	ld	r0, Z+
     d2c:	0d 92       	st	X+, r0
     d2e:	8a 95       	dec	r24
     d30:	e1 f7       	brne	.-8      	; 0xd2a <mf_realTempDo+0x1e>
	// Output ADC result to LED
	u16toa_align_right(adc_filtered_celsius,str,0x80 | 4,' ');
     d32:	20 e2       	ldi	r18, 0x20	; 32
     d34:	44 e8       	ldi	r20, 0x84	; 132
     d36:	be 01       	movw	r22, r28
     d38:	6f 5f       	subi	r22, 0xFF	; 255
     d3a:	7f 4f       	sbci	r23, 0xFF	; 255
     d3c:	80 91 da 00 	lds	r24, 0x00DA
     d40:	90 91 db 00 	lds	r25, 0x00DB
     d44:	5c d2       	rcall	.+1208   	; 0x11fe <u16toa_align_right>
	printLedBuffer(0,str);
     d46:	be 01       	movw	r22, r28
     d48:	6f 5f       	subi	r22, 0xFF	; 255
     d4a:	7f 4f       	sbci	r23, 0xFF	; 255
     d4c:	80 e0       	ldi	r24, 0x00	; 0
     d4e:	1c de       	rcall	.-968    	; 0x988 <printLedBuffer>
}
     d50:	27 96       	adiw	r28, 0x07	; 7
     d52:	0f b6       	in	r0, 0x3f	; 63
     d54:	f8 94       	cli
     d56:	de bf       	out	0x3e, r29	; 62
     d58:	0f be       	out	0x3f, r0	; 63
     d5a:	cd bf       	out	0x3d, r28	; 61
     d5c:	df 91       	pop	r29
     d5e:	cf 91       	pop	r28
     d60:	08 95       	ret

00000d62 <mf_sndenDo>:

//---------------------------------------------//


void mf_sndenDo(void)
{
     d62:	cf 93       	push	r28
     d64:	df 93       	push	r29
     d66:	cd b7       	in	r28, 0x3d	; 61
     d68:	de b7       	in	r29, 0x3e	; 62
     d6a:	27 97       	sbiw	r28, 0x07	; 7
     d6c:	0f b6       	in	r0, 0x3f	; 63
     d6e:	f8 94       	cli
     d70:	de bf       	out	0x3e, r29	; 62
     d72:	0f be       	out	0x3f, r0	; 63
     d74:	cd bf       	out	0x3d, r28	; 61
	char str[] = {'S','N','D',' ',' ',' ',0};
     d76:	87 e0       	ldi	r24, 0x07	; 7
     d78:	e3 e8       	ldi	r30, 0x83	; 131
     d7a:	f0 e0       	ldi	r31, 0x00	; 0
     d7c:	de 01       	movw	r26, r28
     d7e:	11 96       	adiw	r26, 0x01	; 1
     d80:	01 90       	ld	r0, Z+
     d82:	0d 92       	st	X+, r0
     d84:	8a 95       	dec	r24
     d86:	e1 f7       	brne	.-8      	; 0xd80 <mf_sndenDo+0x1e>
		
	if (button_state & (BD_UP | BD_DOWN))
     d88:	80 91 be 00 	lds	r24, 0x00BE
     d8c:	90 91 bf 00 	lds	r25, 0x00BF
     d90:	86 70       	andi	r24, 0x06	; 6
     d92:	99 27       	eor	r25, r25
     d94:	89 2b       	or	r24, r25
     d96:	41 f0       	breq	.+16     	; 0xda8 <mf_sndenDo+0x46>
	{
		sound_enable = !sound_enable;
     d98:	81 e0       	ldi	r24, 0x01	; 1
     d9a:	90 91 e0 00 	lds	r25, 0x00E0
     d9e:	91 11       	cpse	r25, r1
     da0:	80 e0       	ldi	r24, 0x00	; 0
     da2:	80 93 e0 00 	sts	0x00E0, r24
		restartMenuTimer();
     da6:	8d de       	rcall	.-742    	; 0xac2 <restartMenuTimer>
	}			
		
	if (userTimer.FA_GE)
     da8:	80 91 02 01 	lds	r24, 0x0102
     dac:	84 ff       	sbrs	r24, 4
     dae:	0e c0       	rjmp	.+28     	; 0xdcc <mf_sndenDo+0x6a>
	{
		if (sound_enable)		
     db0:	80 91 e0 00 	lds	r24, 0x00E0
     db4:	88 23       	and	r24, r24
     db6:	29 f0       	breq	.+10     	; 0xdc2 <mf_sndenDo+0x60>
		{
			str[4] = 'O';
     db8:	8f e4       	ldi	r24, 0x4F	; 79
     dba:	8d 83       	std	Y+5, r24	; 0x05
			str[5] = 'N';
     dbc:	8e e4       	ldi	r24, 0x4E	; 78
     dbe:	8e 83       	std	Y+6, r24	; 0x06
     dc0:	05 c0       	rjmp	.+10     	; 0xdcc <mf_sndenDo+0x6a>
		}
		else
		{
			str[3] = 'O';
     dc2:	8f e4       	ldi	r24, 0x4F	; 79
     dc4:	8c 83       	std	Y+4, r24	; 0x04
			str[4] = 'F';
     dc6:	86 e4       	ldi	r24, 0x46	; 70
     dc8:	8d 83       	std	Y+5, r24	; 0x05
			str[5] = 'F';
     dca:	8e 83       	std	Y+6, r24	; 0x06
		}			
	}
		
	printLedBuffer(0,str);
     dcc:	be 01       	movw	r22, r28
     dce:	6f 5f       	subi	r22, 0xFF	; 255
     dd0:	7f 4f       	sbci	r23, 0xFF	; 255
     dd2:	80 e0       	ldi	r24, 0x00	; 0
     dd4:	d9 dd       	rcall	.-1102   	; 0x988 <printLedBuffer>
	setComma(2);
     dd6:	82 e0       	ldi	r24, 0x02	; 2
     dd8:	1d de       	rcall	.-966    	; 0xa14 <setComma>
}
     dda:	27 96       	adiw	r28, 0x07	; 7
     ddc:	0f b6       	in	r0, 0x3f	; 63
     dde:	f8 94       	cli
     de0:	de bf       	out	0x3e, r29	; 62
     de2:	0f be       	out	0x3f, r0	; 63
     de4:	cd bf       	out	0x3d, r28	; 61
     de6:	df 91       	pop	r29
     de8:	cf 91       	pop	r28
     dea:	08 95       	ret

00000dec <mf_leafSelect>:

// Select and exit functions, common for leaf menu items 

void mf_leafSelect(void)
{
	clearExtraLeds(LED_TEMP | LED_ROLL);
     dec:	83 e0       	ldi	r24, 0x03	; 3
     dee:	24 de       	rcall	.-952    	; 0xa38 <clearExtraLeds>
	userTimer.FA_GE = 1;	
     df0:	e2 e0       	ldi	r30, 0x02	; 2
     df2:	f1 e0       	ldi	r31, 0x01	; 1
     df4:	80 81       	ld	r24, Z
     df6:	80 61       	ori	r24, 0x10	; 16
     df8:	80 83       	st	Z, r24
     dfa:	08 95       	ret

00000dfc <mf_calibSelect>:

//---------------------------------------------//

void mf_calibSelect(void)
{
	mf_leafSelect();
     dfc:	f7 df       	rcall	.-18     	; 0xdec <mf_leafSelect>
	cpoint1_copy = cpoint1;
     dfe:	80 91 dd 00 	lds	r24, 0x00DD
     e02:	80 93 00 01 	sts	0x0100, r24
	cpoint2_copy = cpoint2;
     e06:	80 91 e7 00 	lds	r24, 0x00E7
     e0a:	80 93 01 01 	sts	0x0101, r24
     e0e:	08 95       	ret

00000e10 <mf_rollLeave>:
	printLedBuffer(0,str);
}

void mf_rollLeave(void)
{
	clearExtraLeds(LED_ROLL);
     e10:	82 e0       	ldi	r24, 0x02	; 2
     e12:	12 de       	rcall	.-988    	; 0xa38 <clearExtraLeds>
	userTimer.Enabled = 0;
     e14:	e2 e0       	ldi	r30, 0x02	; 2
     e16:	f1 e0       	ldi	r31, 0x01	; 1
     e18:	80 81       	ld	r24, Z
     e1a:	8e 7f       	andi	r24, 0xFE	; 254
     e1c:	80 83       	st	Z, r24
     e1e:	08 95       	ret

00000e20 <mf_setTempSelect>:
//---------------------------------------------//


void mf_setTempSelect(void)
{
	clearExtraLeds(LED_TEMP);
     e20:	81 e0       	ldi	r24, 0x01	; 1
     e22:	0a de       	rcall	.-1004   	; 0xa38 <clearExtraLeds>
	mf_leafSelectAct();		// setup and start timer
     e24:	57 de       	rcall	.-850    	; 0xad4 <mf_leafSelectAct>
     e26:	08 95       	ret

00000e28 <mf_realTempLeave>:
	printLedBuffer(0,str);
}

void mf_realTempLeave(void)
{
	clearExtraLeds(LED_TEMP);
     e28:	81 e0       	ldi	r24, 0x01	; 1
     e2a:	06 de       	rcall	.-1012   	; 0xa38 <clearExtraLeds>
     e2c:	08 95       	ret

00000e2e <mf_rollDo>:
	setExtraLeds(LED_ROLL);
	mf_leafSelectAct();		// setup and start timer
}

void mf_rollDo(void)
{
     e2e:	cf 93       	push	r28
     e30:	df 93       	push	r29
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
     e36:	27 97       	sbiw	r28, 0x07	; 7
     e38:	0f b6       	in	r0, 0x3f	; 63
     e3a:	f8 94       	cli
     e3c:	de bf       	out	0x3e, r29	; 62
     e3e:	0f be       	out	0x3f, r0	; 63
     e40:	cd bf       	out	0x3d, r28	; 61
	char str[] = {' ',' ',' ',' ',' ',' ',0};
     e42:	87 e0       	ldi	r24, 0x07	; 7
     e44:	ea e8       	ldi	r30, 0x8A	; 138
     e46:	f0 e0       	ldi	r31, 0x00	; 0
     e48:	de 01       	movw	r26, r28
     e4a:	11 96       	adiw	r26, 0x01	; 1
     e4c:	01 90       	ld	r0, Z+
     e4e:	0d 92       	st	X+, r0
     e50:	8a 95       	dec	r24
     e52:	e1 f7       	brne	.-8      	; 0xe4c <mf_rollDo+0x1e>
		
	if (button_state & (BD_UP | BR_UP))
     e54:	80 91 be 00 	lds	r24, 0x00BE
     e58:	90 91 bf 00 	lds	r25, 0x00BF
     e5c:	9c 01       	movw	r18, r24
     e5e:	22 70       	andi	r18, 0x02	; 2
     e60:	34 70       	andi	r19, 0x04	; 4
     e62:	23 2b       	or	r18, r19
     e64:	41 f0       	breq	.+16     	; 0xe76 <mf_rollDo+0x48>
	{
		if (rollCycleSet < MAX_ROLL_CYCLES)
     e66:	80 91 e1 00 	lds	r24, 0x00E1
     e6a:	83 36       	cpi	r24, 0x63	; 99
     e6c:	78 f4       	brcc	.+30     	; 0xe8c <mf_rollDo+0x5e>
		rollCycleSet += 1;
     e6e:	8f 5f       	subi	r24, 0xFF	; 255
     e70:	80 93 e1 00 	sts	0x00E1, r24
     e74:	0b c0       	rjmp	.+22     	; 0xe8c <mf_rollDo+0x5e>
	}
	else if (button_state & (BD_DOWN | BR_DOWN))
     e76:	84 70       	andi	r24, 0x04	; 4
     e78:	98 70       	andi	r25, 0x08	; 8
     e7a:	89 2b       	or	r24, r25
     e7c:	39 f0       	breq	.+14     	; 0xe8c <mf_rollDo+0x5e>
	{
		if (rollCycleSet > MIN_ROLL_CYCLES)
     e7e:	80 91 e1 00 	lds	r24, 0x00E1
     e82:	82 30       	cpi	r24, 0x02	; 2
     e84:	18 f0       	brcs	.+6      	; 0xe8c <mf_rollDo+0x5e>
		rollCycleSet -= 1;
     e86:	81 50       	subi	r24, 0x01	; 1
     e88:	80 93 e1 00 	sts	0x00E1, r24
	}	
		
	u16toa_align_right(rollCycleSet,str + 4,0x80 | 2,' ');
     e8c:	20 e2       	ldi	r18, 0x20	; 32
     e8e:	42 e8       	ldi	r20, 0x82	; 130
     e90:	be 01       	movw	r22, r28
     e92:	6b 5f       	subi	r22, 0xFB	; 251
     e94:	7f 4f       	sbci	r23, 0xFF	; 255
     e96:	80 91 e1 00 	lds	r24, 0x00E1
     e9a:	90 e0       	ldi	r25, 0x00	; 0
     e9c:	b0 d1       	rcall	.+864    	; 0x11fe <u16toa_align_right>
	
	if ((!(rollState & ROLL_CYCLE)) || (userTimer.FA_GE))
     e9e:	80 91 ca 00 	lds	r24, 0x00CA
     ea2:	82 ff       	sbrs	r24, 2
     ea4:	04 c0       	rjmp	.+8      	; 0xeae <mf_rollDo+0x80>
     ea6:	80 91 02 01 	lds	r24, 0x0102
     eaa:	84 ff       	sbrs	r24, 4
     eac:	09 c0       	rjmp	.+18     	; 0xec0 <mf_rollDo+0x92>
	{
		u16toa_align_right(activeRollCycle,str + 1,0x80 | 2,' ');
     eae:	20 e2       	ldi	r18, 0x20	; 32
     eb0:	42 e8       	ldi	r20, 0x82	; 130
     eb2:	be 01       	movw	r22, r28
     eb4:	6e 5f       	subi	r22, 0xFE	; 254
     eb6:	7f 4f       	sbci	r23, 0xFF	; 255
     eb8:	80 91 0d 01 	lds	r24, 0x010D
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	9f d1       	rcall	.+830    	; 0x11fe <u16toa_align_right>
	}
	
	str[0] = 0;
     ec0:	19 82       	std	Y+1, r1	; 0x01
	if (isTopPointValid())
     ec2:	e0 d2       	rcall	.+1472   	; 0x1484 <isTopPointValid>
     ec4:	88 23       	and	r24, r24
     ec6:	19 f0       	breq	.+6      	; 0xece <mf_rollDo+0xa0>
		str[0] |= SEGA;
     ec8:	89 81       	ldd	r24, Y+1	; 0x01
     eca:	81 60       	ori	r24, 0x01	; 1
     ecc:	89 83       	std	Y+1, r24	; 0x01
	if (isBottomPointValid())
     ece:	ea d2       	rcall	.+1492   	; 0x14a4 <isBottomPointValid>
     ed0:	88 23       	and	r24, r24
     ed2:	19 f0       	breq	.+6      	; 0xeda <mf_rollDo+0xac>
		str[0] |= SEGD;
     ed4:	89 81       	ldd	r24, Y+1	; 0x01
     ed6:	88 60       	ori	r24, 0x08	; 8
     ed8:	89 83       	std	Y+1, r24	; 0x01
	if (str[0] == 0)
     eda:	89 81       	ldd	r24, Y+1	; 0x01
     edc:	81 11       	cpse	r24, r1
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <mf_rollDo+0xb6>
		str[0] = ' ';
     ee0:	80 e2       	ldi	r24, 0x20	; 32
     ee2:	89 83       	std	Y+1, r24	; 0x01
		
	printLedBuffer(0,str);
     ee4:	be 01       	movw	r22, r28
     ee6:	6f 5f       	subi	r22, 0xFF	; 255
     ee8:	7f 4f       	sbci	r23, 0xFF	; 255
     eea:	80 e0       	ldi	r24, 0x00	; 0
     eec:	4d dd       	rcall	.-1382   	; 0x988 <printLedBuffer>
}
     eee:	27 96       	adiw	r28, 0x07	; 7
     ef0:	0f b6       	in	r0, 0x3f	; 63
     ef2:	f8 94       	cli
     ef4:	de bf       	out	0x3e, r29	; 62
     ef6:	0f be       	out	0x3f, r0	; 63
     ef8:	cd bf       	out	0x3d, r28	; 61
     efa:	df 91       	pop	r29
     efc:	cf 91       	pop	r28
     efe:	08 95       	ret

00000f00 <mf_rollSelect>:
//---------------------------------------------//
//---------------------------------------------//

void mf_rollSelect(void)
{
	setExtraLeds(LED_ROLL);
     f00:	82 e0       	ldi	r24, 0x02	; 2
     f02:	94 dd       	rcall	.-1240   	; 0xa2c <setExtraLeds>
	mf_leafSelectAct();		// setup and start timer
     f04:	e7 dd       	rcall	.-1074   	; 0xad4 <mf_leafSelectAct>
     f06:	08 95       	ret

00000f08 <mf_setTempDo>:
	clearExtraLeds(LED_TEMP);
	mf_leafSelectAct();		// setup and start timer
}

void mf_setTempDo(void)
{
     f08:	cf 93       	push	r28
     f0a:	df 93       	push	r29
     f0c:	cd b7       	in	r28, 0x3d	; 61
     f0e:	de b7       	in	r29, 0x3e	; 62
     f10:	27 97       	sbiw	r28, 0x07	; 7
     f12:	0f b6       	in	r0, 0x3f	; 63
     f14:	f8 94       	cli
     f16:	de bf       	out	0x3e, r29	; 62
     f18:	0f be       	out	0x3f, r0	; 63
     f1a:	cd bf       	out	0x3d, r28	; 61
	char str[] = {' ',' ',' ',' ',0xB0,'C',0};
     f1c:	87 e0       	ldi	r24, 0x07	; 7
     f1e:	ec e7       	ldi	r30, 0x7C	; 124
     f20:	f0 e0       	ldi	r31, 0x00	; 0
     f22:	de 01       	movw	r26, r28
     f24:	11 96       	adiw	r26, 0x01	; 1
     f26:	01 90       	ld	r0, Z+
     f28:	0d 92       	st	X+, r0
     f2a:	8a 95       	dec	r24
     f2c:	e1 f7       	brne	.-8      	; 0xf26 <mf_setTempDo+0x1e>

	
	if (button_state & (BD_UP | BR_UP))
     f2e:	80 91 be 00 	lds	r24, 0x00BE
     f32:	90 91 bf 00 	lds	r25, 0x00BF
     f36:	9c 01       	movw	r18, r24
     f38:	22 70       	andi	r18, 0x02	; 2
     f3a:	34 70       	andi	r19, 0x04	; 4
     f3c:	23 2b       	or	r18, r19
     f3e:	71 f0       	breq	.+28     	; 0xf5c <mf_setTempDo+0x54>
	{
		if (setup_temp_value < MAX_SET_TEMP)
     f40:	80 91 de 00 	lds	r24, 0x00DE
     f44:	90 91 df 00 	lds	r25, 0x00DF
     f48:	82 3d       	cpi	r24, 0xD2	; 210
     f4a:	91 05       	cpc	r25, r1
     f4c:	28 f4       	brcc	.+10     	; 0xf58 <mf_setTempDo+0x50>
			setup_temp_value += 5;
     f4e:	05 96       	adiw	r24, 0x05	; 5
     f50:	90 93 df 00 	sts	0x00DF, r25
     f54:	80 93 de 00 	sts	0x00DE, r24
		restartMenuTimer();
     f58:	b4 dd       	rcall	.-1176   	; 0xac2 <restartMenuTimer>
     f5a:	11 c0       	rjmp	.+34     	; 0xf7e <mf_setTempDo+0x76>
	}
	else if (button_state & (BD_DOWN | BR_DOWN))
     f5c:	84 70       	andi	r24, 0x04	; 4
     f5e:	98 70       	andi	r25, 0x08	; 8
     f60:	89 2b       	or	r24, r25
     f62:	69 f0       	breq	.+26     	; 0xf7e <mf_setTempDo+0x76>
	{
		if (setup_temp_value > MIN_SET_TEMP)
     f64:	80 91 de 00 	lds	r24, 0x00DE
     f68:	90 91 df 00 	lds	r25, 0x00DF
     f6c:	8f 31       	cpi	r24, 0x1F	; 31
     f6e:	91 05       	cpc	r25, r1
     f70:	28 f0       	brcs	.+10     	; 0xf7c <mf_setTempDo+0x74>
			setup_temp_value -= 5;
     f72:	05 97       	sbiw	r24, 0x05	; 5
     f74:	90 93 df 00 	sts	0x00DF, r25
     f78:	80 93 de 00 	sts	0x00DE, r24
		restartMenuTimer();
     f7c:	a2 dd       	rcall	.-1212   	; 0xac2 <restartMenuTimer>
	}					
		
	// Output ADC result to LED
	u16toa_align_right(setup_temp_value,str,0x80 | 4,' ');
     f7e:	20 e2       	ldi	r18, 0x20	; 32
     f80:	44 e8       	ldi	r20, 0x84	; 132
     f82:	be 01       	movw	r22, r28
     f84:	6f 5f       	subi	r22, 0xFF	; 255
     f86:	7f 4f       	sbci	r23, 0xFF	; 255
     f88:	80 91 de 00 	lds	r24, 0x00DE
     f8c:	90 91 df 00 	lds	r25, 0x00DF
     f90:	36 d1       	rcall	.+620    	; 0x11fe <u16toa_align_right>
	printLedBuffer(0,str);
     f92:	be 01       	movw	r22, r28
     f94:	6f 5f       	subi	r22, 0xFF	; 255
     f96:	7f 4f       	sbci	r23, 0xFF	; 255
     f98:	80 e0       	ldi	r24, 0x00	; 0
     f9a:	f6 dc       	rcall	.-1556   	; 0x988 <printLedBuffer>
	
	if (userTimer.FA_GE)
     f9c:	80 91 02 01 	lds	r24, 0x0102
     fa0:	84 ff       	sbrs	r24, 4
     fa2:	03 c0       	rjmp	.+6      	; 0xfaa <mf_setTempDo+0xa2>
		setExtraLeds(LED_TEMP);
     fa4:	81 e0       	ldi	r24, 0x01	; 1
     fa6:	42 dd       	rcall	.-1404   	; 0xa2c <setExtraLeds>
     fa8:	02 c0       	rjmp	.+4      	; 0xfae <mf_setTempDo+0xa6>
	else
		clearExtraLeds(LED_TEMP);
     faa:	81 e0       	ldi	r24, 0x01	; 1
     fac:	45 dd       	rcall	.-1398   	; 0xa38 <clearExtraLeds>
}
     fae:	27 96       	adiw	r28, 0x07	; 7
     fb0:	0f b6       	in	r0, 0x3f	; 63
     fb2:	f8 94       	cli
     fb4:	de bf       	out	0x3e, r29	; 62
     fb6:	0f be       	out	0x3f, r0	; 63
     fb8:	cd bf       	out	0x3d, r28	; 61
     fba:	df 91       	pop	r29
     fbc:	cf 91       	pop	r28
     fbe:	08 95       	ret

00000fc0 <mf_realTempSelect>:
//=================================================================//


void mf_realTempSelect(void)
{
	setExtraLeds(LED_TEMP);
     fc0:	81 e0       	ldi	r24, 0x01	; 1
     fc2:	34 dd       	rcall	.-1432   	; 0xa2c <setExtraLeds>
     fc4:	08 95       	ret

00000fc6 <InitMenu>:
//	Menu initialization
//	Call this function at start of your program before processMenu()
//-----------------------------------------------------------------//
void InitMenu(void)
{
	selectedMenuItemID = mi_REALTEMP;
     fc6:	81 e0       	ldi	r24, 0x01	; 1
     fc8:	80 93 fb 00 	sts	0x00FB, r24
     fcc:	20 e0       	ldi	r18, 0x00	; 0
     fce:	30 e0       	ldi	r19, 0x00	; 0
static void getMenuFunctionRecord(uint8_t menuItemID, MenuFunctionRecord* menuRecord )
{
	uint8_t i;
	for (i = 0; i < sizeof(menuFunctionSet)/sizeof(MenuFunctionRecord); i++  )
	{
		readMenuRecord(&menuFunctionSet[i], menuRecord);
     fd0:	c9 01       	movw	r24, r18
     fd2:	88 0f       	add	r24, r24
     fd4:	99 1f       	adc	r25, r25
     fd6:	88 0f       	add	r24, r24
     fd8:	99 1f       	adc	r25, r25
     fda:	88 0f       	add	r24, r24
     fdc:	99 1f       	adc	r25, r25
     fde:	82 1b       	sub	r24, r18
     fe0:	93 0b       	sbc	r25, r19
     fe2:	88 5b       	subi	r24, 0xB8	; 184
     fe4:	9e 4f       	sbci	r25, 0xFE	; 254
//		fRecPtr		- address of the function record in the FLASH
//		resPtr		- address of the record to fill in the SRAM
//-----------------------------------------------------------------//
static inline void readMenuRecord(const MenuFunctionRecord* fRecPtr, MenuFunctionRecord* resPtr )
{
	resPtr->Item = pgm_read_byte(&fRecPtr->Item);
     fe6:	fc 01       	movw	r30, r24
     fe8:	64 91       	lpm	r22, Z
	resPtr->SelectFunction = (FuncPtr)pgm_read_word(&fRecPtr->SelectFunction);
     fea:	31 96       	adiw	r30, 0x01	; 1
     fec:	45 91       	lpm	r20, Z+
     fee:	54 91       	lpm	r21, Z
     ff0:	b4 2f       	mov	r27, r20
     ff2:	a5 2f       	mov	r26, r21
	resPtr->RunFunction = (FuncPtr)pgm_read_word(&fRecPtr->RunFunction);
     ff4:	fc 01       	movw	r30, r24
     ff6:	33 96       	adiw	r30, 0x03	; 3
     ff8:	45 91       	lpm	r20, Z+
     ffa:	54 91       	lpm	r21, Z
     ffc:	74 2f       	mov	r23, r20
     ffe:	45 2f       	mov	r20, r21
	resPtr->LeaveFunction = (FuncPtr)pgm_read_word(&fRecPtr->LeaveFunction);
    1000:	05 96       	adiw	r24, 0x05	; 5
    1002:	fc 01       	movw	r30, r24
    1004:	85 91       	lpm	r24, Z+
    1006:	94 91       	lpm	r25, Z
    1008:	58 2f       	mov	r21, r24
{
	uint8_t i;
	for (i = 0; i < sizeof(menuFunctionSet)/sizeof(MenuFunctionRecord); i++  )
	{
		readMenuRecord(&menuFunctionSet[i], menuRecord);
		if (menuRecord->Item == menuItemID)
    100a:	61 30       	cpi	r22, 0x01	; 1
    100c:	79 f4       	brne	.+30     	; 0x102c <InitMenu+0x66>
    100e:	60 93 06 01 	sts	0x0106, r22
    1012:	e7 e0       	ldi	r30, 0x07	; 7
    1014:	f1 e0       	ldi	r31, 0x01	; 1
    1016:	b0 83       	st	Z, r27
    1018:	a1 83       	std	Z+1, r26	; 0x01
    101a:	e9 e0       	ldi	r30, 0x09	; 9
    101c:	f1 e0       	ldi	r31, 0x01	; 1
    101e:	70 83       	st	Z, r23
    1020:	41 83       	std	Z+1, r20	; 0x01
    1022:	eb e0       	ldi	r30, 0x0B	; 11
    1024:	f1 e0       	ldi	r31, 0x01	; 1
    1026:	50 83       	st	Z, r21
    1028:	91 83       	std	Z+1, r25	; 0x01
    102a:	14 c0       	rjmp	.+40     	; 0x1054 <InitMenu+0x8e>
    102c:	2f 5f       	subi	r18, 0xFF	; 255
    102e:	3f 4f       	sbci	r19, 0xFF	; 255
//	Output:
//-----------------------------------------------------------------//
static void getMenuFunctionRecord(uint8_t menuItemID, MenuFunctionRecord* menuRecord )
{
	uint8_t i;
	for (i = 0; i < sizeof(menuFunctionSet)/sizeof(MenuFunctionRecord); i++  )
    1030:	2d 30       	cpi	r18, 0x0D	; 13
    1032:	31 05       	cpc	r19, r1
    1034:	09 f0       	breq	.+2      	; 0x1038 <InitMenu+0x72>
    1036:	cc cf       	rjmp	.-104    	; 0xfd0 <InitMenu+0xa>
    1038:	60 93 06 01 	sts	0x0106, r22
    103c:	e7 e0       	ldi	r30, 0x07	; 7
    103e:	f1 e0       	ldi	r31, 0x01	; 1
    1040:	b0 83       	st	Z, r27
    1042:	a1 83       	std	Z+1, r26	; 0x01
    1044:	e9 e0       	ldi	r30, 0x09	; 9
    1046:	f1 e0       	ldi	r31, 0x01	; 1
    1048:	70 83       	st	Z, r23
    104a:	41 83       	std	Z+1, r20	; 0x01
    104c:	eb e0       	ldi	r30, 0x0B	; 11
    104e:	f1 e0       	ldi	r31, 0x01	; 1
    1050:	50 83       	st	Z, r21
    1052:	91 83       	std	Z+1, r25	; 0x01
//-----------------------------------------------------------------//
void InitMenu(void)
{
	selectedMenuItemID = mi_REALTEMP;
	getMenuFunctionRecord(selectedMenuItemID, &selectedMenuFunctionRecord);
	processItemFunction(selectedMenuFunctionRecord.SelectFunction);
    1054:	e0 91 07 01 	lds	r30, 0x0107
    1058:	f0 91 08 01 	lds	r31, 0x0108
//	Arguments:
//		funcAddr - address of the function to run.
//-----------------------------------------------------------------//
static inline void processItemFunction(FuncPtr funcAddr)
{
	if (funcAddr != 0)
    105c:	30 97       	sbiw	r30, 0x00	; 0
    105e:	09 f0       	breq	.+2      	; 0x1062 <InitMenu+0x9c>
		((FuncPtr)funcAddr)();
    1060:	09 95       	icall
	selectedMenuItemID = mi_REALTEMP;
	getMenuFunctionRecord(selectedMenuItemID, &selectedMenuFunctionRecord);
	processItemFunction(selectedMenuFunctionRecord.SelectFunction);
	
	// Initialize menu state timer
	menuTimer.Timer = 0;
    1062:	10 92 fd 00 	sts	0x00FD, r1
	menuTimer.Enabled = 0;
    1066:	ec ef       	ldi	r30, 0xFC	; 252
    1068:	f0 e0       	ldi	r31, 0x00	; 0
    106a:	80 81       	ld	r24, Z
	menuTimer.RunOnce = 1;
    106c:	8e 7f       	andi	r24, 0xFE	; 254
    106e:	82 60       	ori	r24, 0x02	; 2
    1070:	80 83       	st	Z, r24
	
	// Initialize user timer
	userTimer.Enabled = 0;
    1072:	e2 e0       	ldi	r30, 0x02	; 2
    1074:	f1 e0       	ldi	r31, 0x01	; 1
    1076:	80 81       	ld	r24, Z
	userTimer.RunOnce = 0;
    1078:	8e 7f       	andi	r24, 0xFE	; 254
    107a:	8d 7f       	andi	r24, 0xFD	; 253
    107c:	80 83       	st	Z, r24
    107e:	08 95       	ret

00001080 <processMenu>:
//	Main menu control, -  state function calls, jumps 
//	between menu states and indication
//	Call this function from main() with a fixed time interval.
//-----------------------------------------------------------------//
void processMenu(void)
{
    1080:	ff 92       	push	r15
    1082:	0f 93       	push	r16
    1084:	1f 93       	push	r17
    1086:	cf 93       	push	r28
    1088:	df 93       	push	r29
	NextItem_t nextItem;
	uint16_t jumpCondition;
	
	processSoftTimer8b(&menuTimer);	
    108a:	8c ef       	ldi	r24, 0xFC	; 252
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	35 d3       	rcall	.+1642   	; 0x16fa <processSoftTimer8b>
	
	// Compose jump condition
	jumpCondition = button_state;		
    1090:	40 91 be 00 	lds	r20, 0x00BE
    1094:	50 91 bf 00 	lds	r21, 0x00BF
	if (menuTimer.FTop)
    1098:	80 91 fc 00 	lds	r24, 0x00FC
    109c:	85 fd       	sbrc	r24, 5
		jumpCondition |= TMR_EXP;
    109e:	50 68       	ori	r21, 0x80	; 128
	
	// Get next menu item according to current state and jump conditions
	nextItem = getNextMenuItem(selectedMenuItemID, jumpCondition);
    10a0:	b0 91 fb 00 	lds	r27, 0x00FB
    10a4:	80 e0       	ldi	r24, 0x00	; 0
    10a6:	90 e0       	ldi	r25, 0x00	; 0
	MenuJumpRecord	jRecord;
	uint8_t i;
	
	for (i = 0; i < sizeof(menuJumpSet)/sizeof(MenuJumpRecord); i++  )
	{
		readJumpRecord(&menuJumpSet[i], &jRecord);		// read full jump record
    10a8:	9c 01       	movw	r18, r24
    10aa:	22 0f       	add	r18, r18
    10ac:	33 1f       	adc	r19, r19
    10ae:	22 0f       	add	r18, r18
    10b0:	33 1f       	adc	r19, r19
    10b2:	28 0f       	add	r18, r24
    10b4:	39 1f       	adc	r19, r25
    10b6:	2d 55       	subi	r18, 0x5D	; 93
    10b8:	3e 4f       	sbci	r19, 0xFE	; 254
//		jRecPtr		- address of the jump record in the FLASH
//		resPtr		- address of the record to fill in the SRAM
//-----------------------------------------------------------------//
static inline void readJumpRecord(const MenuJumpRecord* jRecPtr, MenuJumpRecord* resPtr )
{
	resPtr->Item = pgm_read_byte(&jRecPtr->Item);
    10ba:	f9 01       	movw	r30, r18
    10bc:	a4 91       	lpm	r26, Z
	resPtr->JumpCondition = pgm_read_word(&jRecPtr->JumpCondition);
    10be:	31 96       	adiw	r30, 0x01	; 1
    10c0:	65 91       	lpm	r22, Z+
    10c2:	74 91       	lpm	r23, Z
	resPtr->NextItem= pgm_read_byte(&jRecPtr->NextItem);
    10c4:	f9 01       	movw	r30, r18
    10c6:	33 96       	adiw	r30, 0x03	; 3
    10c8:	c4 91       	lpm	r28, Z
	resPtr->Flags= pgm_read_byte(&jRecPtr->Flags);
    10ca:	f9 01       	movw	r30, r18
    10cc:	34 96       	adiw	r30, 0x04	; 4
    10ce:	24 91       	lpm	r18, Z
	uint8_t i;
	
	for (i = 0; i < sizeof(menuJumpSet)/sizeof(MenuJumpRecord); i++  )
	{
		readJumpRecord(&menuJumpSet[i], &jRecord);		// read full jump record
		if (jRecord.Item == selectedItemId)				// If ID match,
    10d0:	ba 13       	cpse	r27, r26
    10d2:	15 c0       	rjmp	.+42     	; 0x10fe <processMenu+0x7e>
		{
			if ((jRecord.JumpCondition & jmpCond) != 0)		// if any of jump conditions match too,
    10d4:	64 23       	and	r22, r20
    10d6:	75 23       	and	r23, r21
    10d8:	67 2b       	or	r22, r23
    10da:	89 f0       	breq	.+34     	; 0x10fe <processMenu+0x7e>
			{
				nextItem.ItemID = jRecord.NextItem;			// switch to next menu item
				nextItem.ItemTimeout = jRecord.Flags & TIMEOUT_MASK;
    10dc:	d2 2f       	mov	r29, r18
    10de:	df 73       	andi	r29, 0x3F	; 63
				nextItem.ShiftRight = (jRecord.Flags & SHIFT_RIGHT) ? 1 : 0;
    10e0:	26 fb       	bst	r18, 6
    10e2:	00 27       	eor	r16, r16
    10e4:	00 f9       	bld	r16, 0
				nextItem.ShiftLeft = (jRecord.Flags & SHIFT_LEFT) ? 1 : 0;
    10e6:	f2 2e       	mov	r15, r18
    10e8:	ff 1c       	adc	r15, r15
    10ea:	ff 24       	eor	r15, r15
    10ec:	ff 1c       	adc	r15, r15
    10ee:	10 e0       	ldi	r17, 0x00	; 0
    10f0:	f0 fa       	bst	r15, 0
    10f2:	10 f9       	bld	r17, 0
    10f4:	00 fb       	bst	r16, 0
    10f6:	11 f9       	bld	r17, 1
	
	// Get next menu item according to current state and jump conditions
	nextItem = getNextMenuItem(selectedMenuItemID, jumpCondition);
	
	// If next item differs from current
	if (nextItem.ItemID != selectedMenuItemID)
    10f8:	bc 13       	cpse	r27, r28
    10fa:	06 c0       	rjmp	.+12     	; 0x1108 <processMenu+0x88>
    10fc:	70 c0       	rjmp	.+224    	; 0x11de <processMenu+0x15e>
    10fe:	01 96       	adiw	r24, 0x01	; 1
	NextItem_t nextItem;
	nextItem.ItemID = selectedItemId;
	MenuJumpRecord	jRecord;
	uint8_t i;
	
	for (i = 0; i < sizeof(menuJumpSet)/sizeof(MenuJumpRecord); i++  )
    1100:	8d 31       	cpi	r24, 0x1D	; 29
    1102:	91 05       	cpc	r25, r1
    1104:	89 f6       	brne	.-94     	; 0x10a8 <processMenu+0x28>
    1106:	6b c0       	rjmp	.+214    	; 0x11de <processMenu+0x15e>
	
	// If next item differs from current
	if (nextItem.ItemID != selectedMenuItemID)
	{		
		// Call exit function for current item
		processItemFunction(selectedMenuFunctionRecord.LeaveFunction);
    1108:	e0 91 0b 01 	lds	r30, 0x010B
    110c:	f0 91 0c 01 	lds	r31, 0x010C
//	Arguments:
//		funcAddr - address of the function to run.
//-----------------------------------------------------------------//
static inline void processItemFunction(FuncPtr funcAddr)
{
	if (funcAddr != 0)
    1110:	30 97       	sbiw	r30, 0x00	; 0
    1112:	09 f0       	breq	.+2      	; 0x1116 <processMenu+0x96>
		((FuncPtr)funcAddr)();
    1114:	09 95       	icall
		// Call exit function for current item
		processItemFunction(selectedMenuFunctionRecord.LeaveFunction);
		
		// If shifting is specified, start it before calling any 
		//	new menu item functions 
		if (nextItem.ShiftRight)
    1116:	f0 fa       	bst	r15, 0
    1118:	10 f9       	bld	r17, 0
    111a:	00 fb       	bst	r16, 0
    111c:	11 f9       	bld	r17, 1
    111e:	11 ff       	sbrs	r17, 1
    1120:	02 c0       	rjmp	.+4      	; 0x1126 <processMenu+0xa6>
			startShiftingWindowRight();
    1122:	01 dc       	rcall	.-2046   	; 0x926 <startShiftingWindowRight>
    1124:	02 c0       	rjmp	.+4      	; 0x112a <processMenu+0xaa>
		else if (nextItem.ShiftLeft)
    1126:	10 fd       	sbrc	r17, 0
			startShiftingWindowLeft();
    1128:	f0 db       	rcall	.-2080   	; 0x90a <startShiftingWindowLeft>
		
		// Select new item
		selectedMenuItemID = nextItem.ItemID;
    112a:	c0 93 fb 00 	sts	0x00FB, r28
    112e:	20 e0       	ldi	r18, 0x00	; 0
    1130:	30 e0       	ldi	r19, 0x00	; 0
static void getMenuFunctionRecord(uint8_t menuItemID, MenuFunctionRecord* menuRecord )
{
	uint8_t i;
	for (i = 0; i < sizeof(menuFunctionSet)/sizeof(MenuFunctionRecord); i++  )
	{
		readMenuRecord(&menuFunctionSet[i], menuRecord);
    1132:	c9 01       	movw	r24, r18
    1134:	88 0f       	add	r24, r24
    1136:	99 1f       	adc	r25, r25
    1138:	88 0f       	add	r24, r24
    113a:	99 1f       	adc	r25, r25
    113c:	88 0f       	add	r24, r24
    113e:	99 1f       	adc	r25, r25
    1140:	82 1b       	sub	r24, r18
    1142:	93 0b       	sbc	r25, r19
    1144:	88 5b       	subi	r24, 0xB8	; 184
    1146:	9e 4f       	sbci	r25, 0xFE	; 254
//		fRecPtr		- address of the function record in the FLASH
//		resPtr		- address of the record to fill in the SRAM
//-----------------------------------------------------------------//
static inline void readMenuRecord(const MenuFunctionRecord* fRecPtr, MenuFunctionRecord* resPtr )
{
	resPtr->Item = pgm_read_byte(&fRecPtr->Item);
    1148:	fc 01       	movw	r30, r24
    114a:	64 91       	lpm	r22, Z
	resPtr->SelectFunction = (FuncPtr)pgm_read_word(&fRecPtr->SelectFunction);
    114c:	31 96       	adiw	r30, 0x01	; 1
    114e:	45 91       	lpm	r20, Z+
    1150:	54 91       	lpm	r21, Z
    1152:	b4 2f       	mov	r27, r20
    1154:	a5 2f       	mov	r26, r21
	resPtr->RunFunction = (FuncPtr)pgm_read_word(&fRecPtr->RunFunction);
    1156:	fc 01       	movw	r30, r24
    1158:	33 96       	adiw	r30, 0x03	; 3
    115a:	45 91       	lpm	r20, Z+
    115c:	54 91       	lpm	r21, Z
    115e:	74 2f       	mov	r23, r20
    1160:	45 2f       	mov	r20, r21
	resPtr->LeaveFunction = (FuncPtr)pgm_read_word(&fRecPtr->LeaveFunction);
    1162:	05 96       	adiw	r24, 0x05	; 5
    1164:	fc 01       	movw	r30, r24
    1166:	85 91       	lpm	r24, Z+
    1168:	94 91       	lpm	r25, Z
    116a:	58 2f       	mov	r21, r24
{
	uint8_t i;
	for (i = 0; i < sizeof(menuFunctionSet)/sizeof(MenuFunctionRecord); i++  )
	{
		readMenuRecord(&menuFunctionSet[i], menuRecord);
		if (menuRecord->Item == menuItemID)
    116c:	c6 13       	cpse	r28, r22
    116e:	0f c0       	rjmp	.+30     	; 0x118e <processMenu+0x10e>
    1170:	60 93 06 01 	sts	0x0106, r22
    1174:	e7 e0       	ldi	r30, 0x07	; 7
    1176:	f1 e0       	ldi	r31, 0x01	; 1
    1178:	b0 83       	st	Z, r27
    117a:	a1 83       	std	Z+1, r26	; 0x01
    117c:	e9 e0       	ldi	r30, 0x09	; 9
    117e:	f1 e0       	ldi	r31, 0x01	; 1
    1180:	70 83       	st	Z, r23
    1182:	41 83       	std	Z+1, r20	; 0x01
    1184:	eb e0       	ldi	r30, 0x0B	; 11
    1186:	f1 e0       	ldi	r31, 0x01	; 1
    1188:	50 83       	st	Z, r21
    118a:	91 83       	std	Z+1, r25	; 0x01
    118c:	14 c0       	rjmp	.+40     	; 0x11b6 <processMenu+0x136>
    118e:	2f 5f       	subi	r18, 0xFF	; 255
    1190:	3f 4f       	sbci	r19, 0xFF	; 255
//	Output:
//-----------------------------------------------------------------//
static void getMenuFunctionRecord(uint8_t menuItemID, MenuFunctionRecord* menuRecord )
{
	uint8_t i;
	for (i = 0; i < sizeof(menuFunctionSet)/sizeof(MenuFunctionRecord); i++  )
    1192:	2d 30       	cpi	r18, 0x0D	; 13
    1194:	31 05       	cpc	r19, r1
    1196:	09 f0       	breq	.+2      	; 0x119a <processMenu+0x11a>
    1198:	cc cf       	rjmp	.-104    	; 0x1132 <processMenu+0xb2>
    119a:	60 93 06 01 	sts	0x0106, r22
    119e:	e7 e0       	ldi	r30, 0x07	; 7
    11a0:	f1 e0       	ldi	r31, 0x01	; 1
    11a2:	b0 83       	st	Z, r27
    11a4:	a1 83       	std	Z+1, r26	; 0x01
    11a6:	e9 e0       	ldi	r30, 0x09	; 9
    11a8:	f1 e0       	ldi	r31, 0x01	; 1
    11aa:	70 83       	st	Z, r23
    11ac:	41 83       	std	Z+1, r20	; 0x01
    11ae:	eb e0       	ldi	r30, 0x0B	; 11
    11b0:	f1 e0       	ldi	r31, 0x01	; 1
    11b2:	50 83       	st	Z, r21
    11b4:	91 83       	std	Z+1, r25	; 0x01
		selectedMenuItemID = nextItem.ItemID;
		
		// Load from FLASH and save function pointers
		getMenuFunctionRecord(selectedMenuItemID, &selectedMenuFunctionRecord);
		// Call select function for next item
		processItemFunction(selectedMenuFunctionRecord.SelectFunction);
    11b6:	e0 91 07 01 	lds	r30, 0x0107
    11ba:	f0 91 08 01 	lds	r31, 0x0108
//	Arguments:
//		funcAddr - address of the function to run.
//-----------------------------------------------------------------//
static inline void processItemFunction(FuncPtr funcAddr)
{
	if (funcAddr != 0)
    11be:	30 97       	sbiw	r30, 0x00	; 0
    11c0:	09 f0       	breq	.+2      	; 0x11c4 <processMenu+0x144>
		((FuncPtr)funcAddr)();
    11c2:	09 95       	icall
		// Load from FLASH and save function pointers
		getMenuFunctionRecord(selectedMenuItemID, &selectedMenuFunctionRecord);
		// Call select function for next item
		processItemFunction(selectedMenuFunctionRecord.SelectFunction);
		// Start timer if timeout is enabled
		if (nextItem.ItemTimeout != 0)
    11c4:	dd 23       	and	r29, r29
    11c6:	a9 f0       	breq	.+42     	; 0x11f2 <processMenu+0x172>
		{
			menuTimer.Top = nextItem.ItemTimeout * MENU_TIMEOUT_MULT;
    11c8:	dd 0f       	add	r29, r29
    11ca:	d0 93 fe 00 	sts	0x00FE, r29
			menuTimer.Timer = 0;
    11ce:	10 92 fd 00 	sts	0x00FD, r1
			menuTimer.Enabled = 1;	
    11d2:	ec ef       	ldi	r30, 0xFC	; 252
    11d4:	f0 e0       	ldi	r31, 0x00	; 0
    11d6:	80 81       	ld	r24, Z
    11d8:	81 60       	ori	r24, 0x01	; 1
    11da:	80 83       	st	Z, r24
    11dc:	0a c0       	rjmp	.+20     	; 0x11f2 <processMenu+0x172>
		}
		
	}
	else
	{
		processSoftTimer8b(&userTimer);
    11de:	82 e0       	ldi	r24, 0x02	; 2
    11e0:	91 e0       	ldi	r25, 0x01	; 1
    11e2:	8b d2       	rcall	.+1302   	; 0x16fa <processSoftTimer8b>
		// Stay at previous item
		processItemFunction(selectedMenuFunctionRecord.RunFunction);
    11e4:	e0 91 09 01 	lds	r30, 0x0109
    11e8:	f0 91 0a 01 	lds	r31, 0x010A
//	Arguments:
//		funcAddr - address of the function to run.
//-----------------------------------------------------------------//
static inline void processItemFunction(FuncPtr funcAddr)
{
	if (funcAddr != 0)
    11ec:	30 97       	sbiw	r30, 0x00	; 0
    11ee:	09 f0       	breq	.+2      	; 0x11f2 <processMenu+0x172>
		((FuncPtr)funcAddr)();
    11f0:	09 95       	icall
	{
		processSoftTimer8b(&userTimer);
		// Stay at previous item
		processItemFunction(selectedMenuFunctionRecord.RunFunction);
	}	
}
    11f2:	df 91       	pop	r29
    11f4:	cf 91       	pop	r28
    11f6:	1f 91       	pop	r17
    11f8:	0f 91       	pop	r16
    11fa:	ff 90       	pop	r15
    11fc:	08 95       	ret

000011fe <u16toa_align_right>:
// Converts uint16_t value into decimal string with right alignment
// len = number of digits output (without terminating '\0')
// len[7] = 1 -> no terminating '\0' at buffer[len]
// fill_char -> char used for string padding
void u16toa_align_right(uint16_t val, char *buffer, uint8_t len,char fill_char)
{
    11fe:	cf 93       	push	r28
    1200:	df 93       	push	r29
    1202:	fc 01       	movw	r30, r24
    1204:	52 2f       	mov	r21, r18
	if (len & 0x80)
    1206:	44 23       	and	r20, r20
    1208:	2c f4       	brge	.+10     	; 0x1214 <u16toa_align_right+0x16>
	{
		len = len & 0x7F;
    120a:	4f 77       	andi	r20, 0x7F	; 127
		buffer += len;	
    120c:	eb 01       	movw	r28, r22
    120e:	c4 0f       	add	r28, r20
    1210:	d1 1d       	adc	r29, r1
    1212:	04 c0       	rjmp	.+8      	; 0x121c <u16toa_align_right+0x1e>
	}
	else
	{
		buffer += len;	
    1214:	eb 01       	movw	r28, r22
    1216:	c4 0f       	add	r28, r20
    1218:	d1 1d       	adc	r29, r1
		*buffer = 0;
    121a:	18 82       	st	Y, r1
	}
	
	do
	{
		*--buffer = val % 10 + '0';
    121c:	9f 01       	movw	r18, r30
    121e:	ad ec       	ldi	r26, 0xCD	; 205
    1220:	bc ec       	ldi	r27, 0xCC	; 204
    1222:	42 d3       	rcall	.+1668   	; 0x18a8 <__umulhisi3>
    1224:	96 95       	lsr	r25
    1226:	87 95       	ror	r24
    1228:	96 95       	lsr	r25
    122a:	87 95       	ror	r24
    122c:	96 95       	lsr	r25
    122e:	87 95       	ror	r24
    1230:	dc 01       	movw	r26, r24
    1232:	aa 0f       	add	r26, r26
    1234:	bb 1f       	adc	r27, r27
    1236:	bc 01       	movw	r22, r24
    1238:	66 0f       	add	r22, r22
    123a:	77 1f       	adc	r23, r23
    123c:	66 0f       	add	r22, r22
    123e:	77 1f       	adc	r23, r23
    1240:	66 0f       	add	r22, r22
    1242:	77 1f       	adc	r23, r23
    1244:	6a 0f       	add	r22, r26
    1246:	7b 1f       	adc	r23, r27
    1248:	e6 1b       	sub	r30, r22
    124a:	f7 0b       	sbc	r31, r23
    124c:	e0 5d       	subi	r30, 0xD0	; 208
    124e:	ea 93       	st	-Y, r30
		val /= 10;
    1250:	fc 01       	movw	r30, r24
		len--;
    1252:	41 50       	subi	r20, 0x01	; 1
	}
	while ((val != 0) && len);
    1254:	00 97       	sbiw	r24, 0x00	; 0
    1256:	29 f4       	brne	.+10     	; 0x1262 <u16toa_align_right+0x64>
	
	// Padding
	while(len--)
    1258:	84 2f       	mov	r24, r20
    125a:	81 50       	subi	r24, 0x01	; 1
    125c:	41 11       	cpse	r20, r1
    125e:	04 c0       	rjmp	.+8      	; 0x1268 <u16toa_align_right+0x6a>
    1260:	07 c0       	rjmp	.+14     	; 0x1270 <u16toa_align_right+0x72>
	{
		*--buffer = val % 10 + '0';
		val /= 10;
		len--;
	}
	while ((val != 0) && len);
    1262:	41 11       	cpse	r20, r1
    1264:	db cf       	rjmp	.-74     	; 0x121c <u16toa_align_right+0x1e>
    1266:	04 c0       	rjmp	.+8      	; 0x1270 <u16toa_align_right+0x72>
    1268:	fe 01       	movw	r30, r28
	
	// Padding
	while(len--)
		*--buffer = fill_char;
    126a:	52 93       	st	-Z, r21
		len--;
	}
	while ((val != 0) && len);
	
	// Padding
	while(len--)
    126c:	81 50       	subi	r24, 0x01	; 1
    126e:	e8 f7       	brcc	.-6      	; 0x126a <u16toa_align_right+0x6c>
		*--buffer = fill_char;
}
    1270:	df 91       	pop	r29
    1272:	cf 91       	pop	r28
    1274:	08 95       	ret

00001276 <init_system>:
//extern void powTest(void);

void init_system()
{
	// Setup Port D
	PORTD = 0; //(1<<PD_SYNCA | 1<<PD_SYNCB);
    1276:	12 ba       	out	0x12, r1	; 18
	DDRD = (1<<PD_TXD | 1<<PD_M1 | 1<<PD_M2 | 1<<PD_HEATER | 1<<PD_HEAT_INDIC );
    1278:	8e e3       	ldi	r24, 0x3E	; 62
    127a:	81 bb       	out	0x11, r24	; 17
	
	// Setup Port B
	PORTB = 0;
    127c:	18 ba       	out	0x18, r1	; 24
	DDRB = (1<<PB_BEEPER | 1<<PB_LED_DOUT | 1<<PB_LED_CLK | 1<<PB_SEGF | 1<<PB_SEGG | 1<<PB_SEGH);
    127e:	8f e3       	ldi	r24, 0x3F	; 63
    1280:	87 bb       	out	0x17, r24	; 23
	
	PORTC = 0;
    1282:	15 ba       	out	0x15, r1	; 21
	DDRC = (1<<PC_SEGA | 1<<PC_SEGB | 1<<PC_SEGC | 1<<PC_SEGD | 1<<PC_SEGE);	
    1284:	8f e1       	ldi	r24, 0x1F	; 31
    1286:	84 bb       	out	0x14, r24	; 20

	// Setup timer0
	// 1/1024 prescaler, T=64us @16MHz
	TCCR0 = (1<<CS02 | 0<<CS01 | 1<<CS00);
    1288:	85 e0       	ldi	r24, 0x05	; 5
    128a:	83 bf       	out	0x33, r24	; 51
	// Start 256 * 64us = 16384us interval
	TCNT0 = 0;
    128c:	12 be       	out	0x32, r1	; 50
	// Clear interrupt flag
	TIFR |= (1<<TOV0);
    128e:	88 b7       	in	r24, 0x38	; 56
    1290:	81 60       	ori	r24, 0x01	; 1
    1292:	88 bf       	out	0x38, r24	; 56
	// Enable interrupts from timer 0
	TIMSK |= (1<<TOIE0);
    1294:	89 b7       	in	r24, 0x39	; 57
    1296:	81 60       	ori	r24, 0x01	; 1
    1298:	89 bf       	out	0x39, r24	; 57
	
	// Setup timer2 as 1ms system frequency generator
	// 1/64 prescaler, CTC mode, OC2 disconnected
	TCCR2 = (1<<CS22 | 1<<WGM21);
    129a:	8c e0       	ldi	r24, 0x0C	; 12
    129c:	85 bd       	out	0x25, r24	; 37
	OCR2 = 249;
    129e:	89 ef       	ldi	r24, 0xF9	; 249
    12a0:	83 bd       	out	0x23, r24	; 35
	TIMSK |= (1<<OCIE2);
    12a2:	89 b7       	in	r24, 0x39	; 57
    12a4:	80 68       	ori	r24, 0x80	; 128
    12a6:	89 bf       	out	0x39, r24	; 57
	
	// Setup timer1 as beeper frequency generator
	// CTC mode, 1/64 prescaler
	TCCR1A = 0;
    12a8:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = (1<<WGM12 | 1<<CS11 | 1<<CS10);
    12aa:	8b e0       	ldi	r24, 0x0B	; 11
    12ac:	8e bd       	out	0x2e, r24	; 46
	// 1kHz beeper frequency default
	OCR1A = 127;
    12ae:	8f e7       	ldi	r24, 0x7F	; 127
    12b0:	90 e0       	ldi	r25, 0x00	; 0
    12b2:	9b bd       	out	0x2b, r25	; 43
    12b4:	8a bd       	out	0x2a, r24	; 42

	// Setup AC sync comparator
	// Interrupt on output toggle
	ACSR |= (1<<ACI);
    12b6:	44 9a       	sbi	0x08, 4	; 8
	ACSR = (1<<ACIE | 0<<ACIS1 | 0<<ACIS0);
    12b8:	88 e0       	ldi	r24, 0x08	; 8
    12ba:	88 b9       	out	0x08, r24	; 8
	
	// Setup ADC
	// Internal Vref + cap, input ADC5, 
	ADMUX = (1<<REFS1 | 1<<REFS0 | 0<<MUX3 | 1<<MUX2 | 0<<MUX1 | 1<<MUX0 );
    12bc:	85 ec       	ldi	r24, 0xC5	; 197
    12be:	87 b9       	out	0x07, r24	; 7
	// Prescaler = 128
	ADCSRA = (1<<ADEN |/* 1<<ADFR |*/  1<<ADIE | 1<<ADPS2 | 1<<ADPS1 | 1<<ADPS0);
    12c0:	8f e8       	ldi	r24, 0x8F	; 143
    12c2:	86 b9       	out	0x06, r24	; 6
	
	// Setup USART
	// Double speed
	UCSRA = (1<<U2X);
    12c4:	82 e0       	ldi	r24, 0x02	; 2
    12c6:	8b b9       	out	0x0b, r24	; 11
	UCSRB = (1<<RXEN | 1<<TXEN | 0<<UCSZ2);
    12c8:	88 e1       	ldi	r24, 0x18	; 24
    12ca:	8a b9       	out	0x0a, r24	; 10
	// No parity, 1 stop bit, 8 bit
	UCSRC = (1<<URSEL | 0<<UPM1 | 0<<UPM0 | 0<<USBS | 1<<UCSZ1 | 1<<UCSZ0);
    12cc:	86 e8       	ldi	r24, 0x86	; 134
    12ce:	80 bd       	out	0x20, r24	; 32
	// 57600 @16MHz, 2x
	UBRRH=0x00;
    12d0:	10 bc       	out	0x20, r1	; 32
	UBRRL=0x22;
    12d2:	82 e2       	ldi	r24, 0x22	; 34
    12d4:	89 b9       	out	0x09, r24	; 9
    12d6:	08 95       	ret

000012d8 <main>:




int main(void)
{
    12d8:	cf 93       	push	r28
    12da:	df 93       	push	r29
    12dc:	cd b7       	in	r28, 0x3d	; 61
    12de:	de b7       	in	r29, 0x3e	; 62
    12e0:	2a 97       	sbiw	r28, 0x0a	; 10
    12e2:	0f b6       	in	r0, 0x3f	; 63
    12e4:	f8 94       	cli
    12e6:	de bf       	out	0x3e, r29	; 62
    12e8:	0f be       	out	0x3f, r0	; 63
    12ea:	cd bf       	out	0x3d, r28	; 61
	uint16_t uart_log_counter = 0;
	
	//powTest();
	
	// Initialize IO
	init_system();
    12ec:	c4 df       	rcall	.-120    	; 0x1276 <init_system>
	
	// Restore params
	restoreGlobalParams();
    12ee:	f8 d9       	rcall	.-3088   	; 0x6e0 <restoreGlobalParams>
	
	// Calibrate ADC coefficients using restored params
	calculateCoeffs();
    12f0:	ff d7       	rcall	.+4094   	; 0x22f0 <__data_load_end+0x93e>
	
	// Initialize LED indicator
	initLedIndicator();
    12f2:	27 db       	rcall	.-2482   	; 0x942 <initLedIndicator>
	
	// Enable interrupts
	sei();
    12f4:	78 94       	sei
	
	// Beep
	SetBeeperFreq(1000);
    12f6:	88 ee       	ldi	r24, 0xE8	; 232
    12f8:	93 e0       	ldi	r25, 0x03	; 3
    12fa:	2d d2       	rcall	.+1114   	; 0x1756 <SetBeeperFreq>
	StartBeep(200);
    12fc:	88 ec       	ldi	r24, 0xC8	; 200
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	4b d2       	rcall	.+1174   	; 0x1798 <StartBeep>
	
	InitMenu();
    1302:	61 de       	rcall	.-830    	; 0xfc6 <InitMenu>

	setMotorDirection(ROLL_FWD);
    1304:	81 e0       	ldi	r24, 0x01	; 1
    1306:	84 d0       	rcall	.+264    	; 0x1410 <setMotorDirection>
	
	//button_state = BD_UP;
	//processMenu();
	
	printLedBuffer(0,"      ");
    1308:	68 e9       	ldi	r22, 0x98	; 152
    130a:	70 e0       	ldi	r23, 0x00	; 0
    130c:	80 e0       	ldi	r24, 0x00	; 0
    130e:	3c db       	rcall	.-2440   	; 0x988 <printLedBuffer>
int main(void)
{
	char str[10];
	uint8_t temp8u = 0x00;
	uint8_t uart_log_timeout_counter = 0;
	uint16_t uart_log_counter = 0;
    1310:	e1 2c       	mov	r14, r1
    1312:	f1 2c       	mov	r15, r1
	printLedBuffer(0,"      ");
	
    while(1)
    {
		
		if (menuUpdateTimer.FOvfl)
    1314:	03 e6       	ldi	r16, 0x63	; 99
    1316:	10 e0       	ldi	r17, 0x00	; 0
    1318:	f8 01       	movw	r30, r16
    131a:	80 81       	ld	r24, Z
    131c:	86 ff       	sbrs	r24, 6
    131e:	fc cf       	rjmp	.-8      	; 0x1318 <main+0x40>
		{
			// Get new temperature measurement - new value is pushed into ring buffer
			// once every AC line period
			update_filtered_adc();
    1320:	37 d8       	rcall	.-3986   	; 0x390 <update_filtered_adc>
			
			// Get new button state
			process_buttons();
    1322:	a1 d8       	rcall	.-3774   	; 0x466 <process_buttons>
			
			// Give audio feedback
			if (button_state & BL_MENU)
    1324:	20 91 be 00 	lds	r18, 0x00BE
    1328:	30 91 bf 00 	lds	r19, 0x00BF
    132c:	31 ff       	sbrs	r19, 1
    132e:	07 c0       	rjmp	.+14     	; 0x133e <main+0x66>
			{
				SetBeeperFreq(800);
    1330:	80 e2       	ldi	r24, 0x20	; 32
    1332:	93 e0       	ldi	r25, 0x03	; 3
    1334:	10 d2       	rcall	.+1056   	; 0x1756 <SetBeeperFreq>
				StartBeep(40);
    1336:	88 e2       	ldi	r24, 0x28	; 40
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	2e d2       	rcall	.+1116   	; 0x1798 <StartBeep>
    133c:	0a c0       	rjmp	.+20     	; 0x1352 <main+0x7a>
			}
			else if (button_action_down & (BD_MENU | BD_UP | BD_DOWN | BD_HEATCTRL))
    133e:	80 91 bd 00 	lds	r24, 0x00BD
    1342:	87 74       	andi	r24, 0x47	; 71
    1344:	31 f0       	breq	.+12     	; 0x1352 <main+0x7a>
			{
				SetBeeperFreq(1000);
    1346:	88 ee       	ldi	r24, 0xE8	; 232
    1348:	93 e0       	ldi	r25, 0x03	; 3
    134a:	05 d2       	rcall	.+1034   	; 0x1756 <SetBeeperFreq>
				StartBeep(40);
    134c:	88 e2       	ldi	r24, 0x28	; 40
    134e:	90 e0       	ldi	r25, 0x00	; 0
    1350:	23 d2       	rcall	.+1094   	; 0x1798 <StartBeep>
			}	
			

			// Process user menu states, settings and indication
			processMenu();
    1352:	96 de       	rcall	.-724    	; 0x1080 <processMenu>
			
			// Process cyclic rolling, direction control
			processRollControl();	
    1354:	fb d8       	rcall	.-3594   	; 0x54c <processRollControl>
			
			// Process heater regulation
			processHeaterControl();
    1356:	96 d9       	rcall	.-3284   	; 0x684 <processHeaterControl>
		


			if (menuUpdateTimer.FA_TGL)
    1358:	f8 01       	movw	r30, r16
    135a:	80 81       	ld	r24, Z
    135c:	82 ff       	sbrs	r24, 2
    135e:	42 c0       	rjmp	.+132    	; 0x13e4 <main+0x10c>
				//---------------------------------//
				// Function is called every 50ms
				// UART message is sent every second call
				
										
				u16toa_align_right(uart_log_counter,str,5,' ');			// log message counter
    1360:	20 e2       	ldi	r18, 0x20	; 32
    1362:	45 e0       	ldi	r20, 0x05	; 5
    1364:	be 01       	movw	r22, r28
    1366:	6f 5f       	subi	r22, 0xFF	; 255
    1368:	7f 4f       	sbci	r23, 0xFF	; 255
    136a:	c7 01       	movw	r24, r14
    136c:	48 df       	rcall	.-368    	; 0x11fe <u16toa_align_right>
				USART_sendstr(str);
    136e:	ce 01       	movw	r24, r28
    1370:	01 96       	adiw	r24, 0x01	; 1
    1372:	58 d2       	rcall	.+1200   	; 0x1824 <USART_sendstr>
				
				u16toa_align_right(setTempDbg,str,6,' ');				// Temp setting
    1374:	20 e2       	ldi	r18, 0x20	; 32
    1376:	46 e0       	ldi	r20, 0x06	; 6
    1378:	be 01       	movw	r22, r28
    137a:	6f 5f       	subi	r22, 0xFF	; 255
    137c:	7f 4f       	sbci	r23, 0xFF	; 255
    137e:	80 91 dc 00 	lds	r24, 0x00DC
    1382:	90 e0       	ldi	r25, 0x00	; 0
    1384:	3c df       	rcall	.-392    	; 0x11fe <u16toa_align_right>
				USART_sendstr(str);
    1386:	ce 01       	movw	r24, r28
    1388:	01 96       	adiw	r24, 0x01	; 1
    138a:	4c d2       	rcall	.+1176   	; 0x1824 <USART_sendstr>
				
				u16toa_align_right(adc_filtered_value,str,8,' ');		// ADC filtered value
    138c:	20 e2       	ldi	r18, 0x20	; 32
    138e:	48 e0       	ldi	r20, 0x08	; 8
    1390:	be 01       	movw	r22, r28
    1392:	6f 5f       	subi	r22, 0xFF	; 255
    1394:	7f 4f       	sbci	r23, 0xFF	; 255
    1396:	80 91 d8 00 	lds	r24, 0x00D8
    139a:	90 91 d9 00 	lds	r25, 0x00D9
    139e:	2f df       	rcall	.-418    	; 0x11fe <u16toa_align_right>
				USART_sendstr(str);
    13a0:	ce 01       	movw	r24, r28
    13a2:	01 96       	adiw	r24, 0x01	; 1
    13a4:	3f d2       	rcall	.+1150   	; 0x1824 <USART_sendstr>
				
				u16toa_align_right(adc_filtered_celsius,str,6,' ');		// Celsius degree
    13a6:	20 e2       	ldi	r18, 0x20	; 32
    13a8:	46 e0       	ldi	r20, 0x06	; 6
    13aa:	be 01       	movw	r22, r28
    13ac:	6f 5f       	subi	r22, 0xFF	; 255
    13ae:	7f 4f       	sbci	r23, 0xFF	; 255
    13b0:	80 91 da 00 	lds	r24, 0x00DA
    13b4:	90 91 db 00 	lds	r25, 0x00DB
    13b8:	22 df       	rcall	.-444    	; 0x11fe <u16toa_align_right>
				USART_sendstr(str);
    13ba:	ce 01       	movw	r24, r28
    13bc:	01 96       	adiw	r24, 0x01	; 1
    13be:	32 d2       	rcall	.+1124   	; 0x1824 <USART_sendstr>
				
				u16toa_align_right(ctrl_heater,str,6,' ');				// Heater control (0 to 10)
    13c0:	20 e2       	ldi	r18, 0x20	; 32
    13c2:	46 e0       	ldi	r20, 0x06	; 6
    13c4:	be 01       	movw	r22, r28
    13c6:	6f 5f       	subi	r22, 0xFF	; 255
    13c8:	7f 4f       	sbci	r23, 0xFF	; 255
    13ca:	80 91 cc 00 	lds	r24, 0x00CC
    13ce:	90 e0       	ldi	r25, 0x00	; 0
    13d0:	16 df       	rcall	.-468    	; 0x11fe <u16toa_align_right>
				USART_sendstr(str);
    13d2:	ce 01       	movw	r24, r28
    13d4:	01 96       	adiw	r24, 0x01	; 1
    13d6:	26 d2       	rcall	.+1100   	; 0x1824 <USART_sendstr>
				
				
				USART_sendstr("\n\r");
    13d8:	8f e9       	ldi	r24, 0x9F	; 159
    13da:	90 e0       	ldi	r25, 0x00	; 0
    13dc:	23 d2       	rcall	.+1094   	; 0x1824 <USART_sendstr>
				
				uart_log_counter++;
    13de:	ff ef       	ldi	r31, 0xFF	; 255
    13e0:	ef 1a       	sub	r14, r31
    13e2:	ff 0a       	sbc	r15, r31
				//---------------------------------//
				
			}
			
			
			processAutoPowerOff();	// TODO
    13e4:	b8 d9       	rcall	.-3216   	; 0x756 <processAutoPowerOff>
			
			
			
			menuUpdateTimer.FOvfl = 0;	
    13e6:	f8 01       	movw	r30, r16
    13e8:	80 81       	ld	r24, Z
    13ea:	8f 7b       	andi	r24, 0xBF	; 191
    13ec:	80 83       	st	Z, r24
    13ee:	94 cf       	rjmp	.-216    	; 0x1318 <main+0x40>

000013f0 <setHeaterControl>:


// User function to control heater intensity
void setHeaterControl(uint8_t value)
{
	ctrl_heater = value;
    13f0:	80 93 cc 00 	sts	0x00CC, r24
	heaterState &= ~READY_TO_UPDATE_HEATER;
    13f4:	90 91 cb 00 	lds	r25, 0x00CB
    13f8:	29 2f       	mov	r18, r25
    13fa:	2f 77       	andi	r18, 0x7F	; 127
	
	if (ctrl_heater)
    13fc:	88 23       	and	r24, r24
    13fe:	21 f0       	breq	.+8      	; 0x1408 <setHeaterControl+0x18>
		heaterState |= HEATER_ENABLED;
    1400:	20 64       	ori	r18, 0x40	; 64
    1402:	20 93 cb 00 	sts	0x00CB, r18
    1406:	08 95       	ret
	else
		heaterState &= ~HEATER_ENABLED;	
    1408:	9f 73       	andi	r25, 0x3F	; 63
    140a:	90 93 cb 00 	sts	0x00CB, r25
    140e:	08 95       	ret

00001410 <setMotorDirection>:
	
// User function to control motor rotation
void setMotorDirection(uint8_t dir)
{
	// Disable interrupts from timer0 
	TIMSK &= ~(1<<TOIE0);
    1410:	99 b7       	in	r25, 0x39	; 57
    1412:	9e 7f       	andi	r25, 0xFE	; 254
    1414:	99 bf       	out	0x39, r25	; 57
		
	newDirReq = dir;	// save new direction request
    1416:	80 93 cd 00 	sts	0x00CD, r24
	
	if (dir & ROLL_FWD)
    141a:	80 ff       	sbrs	r24, 0
    141c:	09 c0       	rjmp	.+18     	; 0x1430 <setMotorDirection+0x20>
		bottomPoint = rollPoint;
    141e:	80 91 ce 00 	lds	r24, 0x00CE
    1422:	90 91 cf 00 	lds	r25, 0x00CF
    1426:	90 93 d1 00 	sts	0x00D1, r25
    142a:	80 93 d0 00 	sts	0x00D0, r24
    142e:	0a c0       	rjmp	.+20     	; 0x1444 <setMotorDirection+0x34>
	else if (dir & ROLL_REV)
    1430:	81 ff       	sbrs	r24, 1
    1432:	08 c0       	rjmp	.+16     	; 0x1444 <setMotorDirection+0x34>
		topPoint = rollPoint;
    1434:	80 91 ce 00 	lds	r24, 0x00CE
    1438:	90 91 cf 00 	lds	r25, 0x00CF
    143c:	90 93 d3 00 	sts	0x00D3, r25
    1440:	80 93 d2 00 	sts	0x00D2, r24
		

	// Enable interrupts from timer 0
	TIMSK |= (1<<TOIE0);	
    1444:	89 b7       	in	r24, 0x39	; 57
    1446:	81 60       	ori	r24, 0x01	; 1
    1448:	89 bf       	out	0x39, r24	; 57
    144a:	08 95       	ret

0000144c <stopCycleRolling>:
}

void stopCycleRolling(uint8_t doResetPoints)
{
	// Disable interrupts from timer0 
	TIMSK &= ~(1<<TOIE0);
    144c:	99 b7       	in	r25, 0x39	; 57
    144e:	9e 7f       	andi	r25, 0xFE	; 254
    1450:	99 bf       	out	0x39, r25	; 57
	
	rollState &= ~ROLL_CYCLE;
    1452:	90 91 ca 00 	lds	r25, 0x00CA
    1456:	9b 7f       	andi	r25, 0xFB	; 251
    1458:	90 93 ca 00 	sts	0x00CA, r25
	if (doResetPoints)
    145c:	88 23       	and	r24, r24
    145e:	71 f0       	breq	.+28     	; 0x147c <stopCycleRolling+0x30>
	{
		topPoint = bottomPoint = rollPoint;
    1460:	80 91 ce 00 	lds	r24, 0x00CE
    1464:	90 91 cf 00 	lds	r25, 0x00CF
    1468:	90 93 d1 00 	sts	0x00D1, r25
    146c:	80 93 d0 00 	sts	0x00D0, r24
    1470:	90 93 d3 00 	sts	0x00D3, r25
    1474:	80 93 d2 00 	sts	0x00D2, r24
		activeRollCycle = 0;	
    1478:	10 92 0d 01 	sts	0x010D, r1
	}		
	
	// Enable interrupts from timer 0
	TIMSK |= (1<<TOIE0);
    147c:	89 b7       	in	r24, 0x39	; 57
    147e:	81 60       	ori	r24, 0x01	; 1
    1480:	89 bf       	out	0x39, r24	; 57
    1482:	08 95       	ret

00001484 <isTopPointValid>:
}
*/

uint8_t isTopPointValid(void)
{
	return (	(int16_t)(topPoint - rollPoint) >= 0 );
    1484:	80 91 d2 00 	lds	r24, 0x00D2
    1488:	90 91 d3 00 	lds	r25, 0x00D3
    148c:	20 91 ce 00 	lds	r18, 0x00CE
    1490:	30 91 cf 00 	lds	r19, 0x00CF
    1494:	82 1b       	sub	r24, r18
    1496:	93 0b       	sbc	r25, r19
    1498:	89 2f       	mov	r24, r25
    149a:	80 95       	com	r24
}
    149c:	88 1f       	adc	r24, r24
    149e:	88 27       	eor	r24, r24
    14a0:	88 1f       	adc	r24, r24
    14a2:	08 95       	ret

000014a4 <isBottomPointValid>:

uint8_t isBottomPointValid(void)
{
	return (	(int16_t)(rollPoint - bottomPoint) >= 0	);
    14a4:	80 91 ce 00 	lds	r24, 0x00CE
    14a8:	90 91 cf 00 	lds	r25, 0x00CF
    14ac:	20 91 d0 00 	lds	r18, 0x00D0
    14b0:	30 91 d1 00 	lds	r19, 0x00D1
    14b4:	82 1b       	sub	r24, r18
    14b6:	93 0b       	sbc	r25, r19
    14b8:	89 2f       	mov	r24, r25
    14ba:	80 95       	com	r24
}
    14bc:	88 1f       	adc	r24, r24
    14be:	88 27       	eor	r24, r24
    14c0:	88 1f       	adc	r24, r24
    14c2:	08 95       	ret

000014c4 <startCycleRolling>:


uint8_t startCycleRolling(void)
{
	// Disable interrupts from timer0 
	TIMSK &= ~(1<<TOIE0);
    14c4:	89 b7       	in	r24, 0x39	; 57
    14c6:	8e 7f       	andi	r24, 0xFE	; 254
    14c8:	89 bf       	out	0x39, r24	; 57
	
	if ( isTopPointValid() && isBottomPointValid() )
    14ca:	dc df       	rcall	.-72     	; 0x1484 <isTopPointValid>
    14cc:	88 23       	and	r24, r24
    14ce:	59 f0       	breq	.+22     	; 0x14e6 <startCycleRolling+0x22>
    14d0:	e9 df       	rcall	.-46     	; 0x14a4 <isBottomPointValid>
    14d2:	88 23       	and	r24, r24
    14d4:	41 f0       	breq	.+16     	; 0x14e6 <startCycleRolling+0x22>
	{
		rollState |= ROLL_CYCLE;
    14d6:	80 91 ca 00 	lds	r24, 0x00CA
    14da:	84 60       	ori	r24, 0x04	; 4
    14dc:	80 93 ca 00 	sts	0x00CA, r24
		activeRollCycle = 1;
    14e0:	81 e0       	ldi	r24, 0x01	; 1
    14e2:	80 93 0d 01 	sts	0x010D, r24
	}
	
	// Enable interrupts from timer 0
	TIMSK |= (1<<TOIE0);
    14e6:	89 b7       	in	r24, 0x39	; 57
    14e8:	81 60       	ori	r24, 0x01	; 1
    14ea:	89 bf       	out	0x39, r24	; 57
	
	return (rollState & ROLL_CYCLE);
    14ec:	80 91 ca 00 	lds	r24, 0x00CA
}
    14f0:	84 70       	andi	r24, 0x04	; 4
    14f2:	08 95       	ret

000014f4 <__vector_16>:




ISR(ANA_COMP_vect)
{
    14f4:	1f 92       	push	r1
    14f6:	0f 92       	push	r0
    14f8:	0f b6       	in	r0, 0x3f	; 63
    14fa:	0f 92       	push	r0
    14fc:	11 24       	eor	r1, r1
    14fe:	8f 93       	push	r24
    1500:	9f 93       	push	r25
	// Once triggered, disable further comparator interrupt
	ACSR &= ~(1<<ACIE);
    1502:	43 98       	cbi	0x08, 3	; 8
	// Turn on heater TRIAC
	if (heater_cnt < ctrl_heater_sync)
    1504:	90 91 d4 00 	lds	r25, 0x00D4
    1508:	80 91 d5 00 	lds	r24, 0x00D5
    150c:	98 17       	cp	r25, r24
    150e:	20 f4       	brcc	.+8      	; 0x1518 <__vector_16+0x24>
		PORTD |= (1<<PD_HEATER | 1<<PD_HEAT_INDIC);	// Direct heater indication
    1510:	82 b3       	in	r24, 0x12	; 18
    1512:	80 63       	ori	r24, 0x30	; 48
    1514:	82 bb       	out	0x12, r24	; 18
    1516:	01 c0       	rjmp	.+2      	; 0x151a <__vector_16+0x26>
	else
		PORTD &= ~(1<<PD_HEAT_INDIC);
    1518:	95 98       	cbi	0x12, 5	; 18
	// Reprogram timer0
	TCNT0 = 256 - TRIAC_IMPULSE_TIME;		// Triac gate impulse time
    151a:	86 ef       	ldi	r24, 0xF6	; 246
    151c:	82 bf       	out	0x32, r24	; 50
	// Modify state	
	p_state &= ~STATE_MASK;					// Start new state machine cycle
    151e:	80 91 62 00 	lds	r24, 0x0062
    1522:	80 7f       	andi	r24, 0xF0	; 240
	p_state ^= HALF_PERIOD_FLAG;			// Toggle flag
    1524:	80 58       	subi	r24, 0x80	; 128
    1526:	80 93 62 00 	sts	0x0062, r24
	
}
    152a:	9f 91       	pop	r25
    152c:	8f 91       	pop	r24
    152e:	0f 90       	pop	r0
    1530:	0f be       	out	0x3f, r0	; 63
    1532:	0f 90       	pop	r0
    1534:	1f 90       	pop	r1
    1536:	18 95       	reti

00001538 <__vector_9>:



ISR(TIMER0_OVF_vect)
{
    1538:	1f 92       	push	r1
    153a:	0f 92       	push	r0
    153c:	0f b6       	in	r0, 0x3f	; 63
    153e:	0f 92       	push	r0
    1540:	11 24       	eor	r1, r1
    1542:	2f 93       	push	r18
    1544:	3f 93       	push	r19
    1546:	4f 93       	push	r20
    1548:	5f 93       	push	r21
    154a:	6f 93       	push	r22
    154c:	7f 93       	push	r23
    154e:	8f 93       	push	r24
    1550:	9f 93       	push	r25
    1552:	af 93       	push	r26
    1554:	bf 93       	push	r27
    1556:	ef 93       	push	r30
    1558:	ff 93       	push	r31
	uint8_t temp;
	
	switch(p_state & STATE_MASK)
    155a:	80 91 62 00 	lds	r24, 0x0062
    155e:	8f 70       	andi	r24, 0x0F	; 15
    1560:	81 30       	cpi	r24, 0x01	; 1
    1562:	51 f0       	breq	.+20     	; 0x1578 <__vector_9+0x40>
    1564:	28 f0       	brcs	.+10     	; 0x1570 <__vector_9+0x38>
    1566:	82 30       	cpi	r24, 0x02	; 2
    1568:	79 f0       	breq	.+30     	; 0x1588 <__vector_9+0x50>
    156a:	83 30       	cpi	r24, 0x03	; 3
    156c:	99 f4       	brne	.+38     	; 0x1594 <__vector_9+0x5c>
    156e:	11 c0       	rjmp	.+34     	; 0x1592 <__vector_9+0x5a>
	{
		// TRIAC_IMPULSE_TIME finished
		case 0x00:
			// Turn off heater TRIAC
			PORTD &= ~(1<<PD_HEATER);
    1570:	94 98       	cbi	0x12, 4	; 18
			TCNT0 = 256 - (QUATER_PERIOD_TIME - TRIAC_IMPULSE_TIME);
    1572:	8c eb       	ldi	r24, 0xBC	; 188
    1574:	82 bf       	out	0x32, r24	; 50
			break;
    1576:	0e c0       	rjmp	.+28     	; 0x1594 <__vector_9+0x5c>
		// QUATER_PERIOD_TIME finished	
		case 0x01:	
			TCNT0 = 256 - (SYNC_IGNORE_TIME - QUATER_PERIOD_TIME);
    1578:	82 ec       	ldi	r24, 0xC2	; 194
    157a:	82 bf       	out	0x32, r24	; 50
			// Start ADC conversion once every AC line period
			if (!(p_state & HALF_PERIOD_FLAG))
    157c:	80 91 62 00 	lds	r24, 0x0062
    1580:	88 23       	and	r24, r24
    1582:	44 f0       	brlt	.+16     	; 0x1594 <__vector_9+0x5c>
				ADCSRA |= (1<<ADSC);
    1584:	36 9a       	sbi	0x06, 6	; 6
    1586:	06 c0       	rjmp	.+12     	; 0x1594 <__vector_9+0x5c>
			break;	
		// SYNC_IGNORE_TIME finished	
		case 0x02:
			TCNT0 = 256 - SYNC_LOST_TIMEOUT;
    1588:	80 ee       	ldi	r24, 0xE0	; 224
    158a:	82 bf       	out	0x32, r24	; 50
			// Clear flag and enable interrupt from analog comparator
			ACSR |= (1<<ACI);
    158c:	44 9a       	sbi	0x08, 4	; 8
			ACSR |= (1<<ACIE);
    158e:	43 9a       	sbi	0x08, 3	; 8
			break;
    1590:	01 c0       	rjmp	.+2      	; 0x1594 <__vector_9+0x5c>
		// SYNC_LOST_TIMEOUT finished
		case 0x03:
			// Error - sync is lost. It means that device has been disconnected from AC line.
			// Disable all power-consuming devices like LEDs and save user settings to EEPROM.
			exitPowerOff();
    1592:	e0 d8       	rcall	.-3648   	; 0x754 <exitPowerOff>
			// Sync is not present - TODO
			break;
	}	

	// Full period check
	if ((p_state & (HALF_PERIOD_FLAG | STATE_MASK)) == (HALF_PERIOD_FLAG | 0x01))
    1594:	80 91 62 00 	lds	r24, 0x0062
    1598:	8f 78       	andi	r24, 0x8F	; 143
    159a:	81 38       	cpi	r24, 0x81	; 129
    159c:	09 f0       	breq	.+2      	; 0x15a0 <__vector_9+0x68>
    159e:	93 c0       	rjmp	.+294    	; 0x16c6 <__vector_9+0x18e>
	{
		// Full AC line period is done. Update controls.
		
		temp = PORTD;
    15a0:	92 b3       	in	r25, 0x12	; 18
		temp &= ~(1<<PD_M1 | 1<<PD_M2);
    15a2:	93 7f       	andi	r25, 0xF3	; 243
		if ( rollState & SKIP_CURRENT_MOTOR_CTRL )
    15a4:	80 91 ca 00 	lds	r24, 0x00CA
    15a8:	83 ff       	sbrs	r24, 3
    15aa:	05 c0       	rjmp	.+10     	; 0x15b6 <__vector_9+0x7e>
		{
			// Direction control changed. Skip current period to allow TRIACs fully close
			rollState &= ~SKIP_CURRENT_MOTOR_CTRL;
    15ac:	87 7f       	andi	r24, 0xF7	; 247
    15ae:	80 93 ca 00 	sts	0x00CA, r24
			PORTD = temp; 	
    15b2:	92 bb       	out	0x12, r25	; 18
    15b4:	75 c0       	rjmp	.+234    	; 0x16a0 <__vector_9+0x168>
		}
		else
		{
			// Apply direction control 
			if (rollState & ROLL_FWD)
    15b6:	80 ff       	sbrs	r24, 0
    15b8:	02 c0       	rjmp	.+4      	; 0x15be <__vector_9+0x86>
				temp |= (1<<PD_M1);
    15ba:	94 60       	ori	r25, 0x04	; 4
    15bc:	02 c0       	rjmp	.+4      	; 0x15c2 <__vector_9+0x8a>
			else if (rollState & ROLL_REV)
    15be:	81 fd       	sbrc	r24, 1
				temp |= (1<<PD_M2);
    15c0:	98 60       	ori	r25, 0x08	; 8
			PORTD = temp; 
    15c2:	92 bb       	out	0x12, r25	; 18
// Function to process rolling - sets rotation direction for next period
// Call once per each AC line period
static inline void controlRolling()
{
	// Process cycle rolling
	switch(rollState & (ROLL_FWD | ROLL_REV | ROLL_CYCLE))
    15c4:	40 91 ca 00 	lds	r20, 0x00CA
    15c8:	84 2f       	mov	r24, r20
    15ca:	87 70       	andi	r24, 0x07	; 7
    15cc:	85 30       	cpi	r24, 0x05	; 5
    15ce:	19 f0       	breq	.+6      	; 0x15d6 <__vector_9+0x9e>
    15d0:	86 30       	cpi	r24, 0x06	; 6
    15d2:	f1 f5       	brne	.+124    	; 0x1650 <__vector_9+0x118>
    15d4:	1f c0       	rjmp	.+62     	; 0x1614 <__vector_9+0xdc>
//---------------------------------------------//
//---------------------------------------------//

static inline uint8_t reachedTopPoint(void)
{
	return (	(int16_t)(topPoint - rollPoint) <= 0 );
    15d6:	80 91 d2 00 	lds	r24, 0x00D2
    15da:	90 91 d3 00 	lds	r25, 0x00D3
    15de:	20 91 ce 00 	lds	r18, 0x00CE
    15e2:	30 91 cf 00 	lds	r19, 0x00CF
    15e6:	82 1b       	sub	r24, r18
    15e8:	93 0b       	sbc	r25, r19
{
	// Process cycle rolling
	switch(rollState & (ROLL_FWD | ROLL_REV | ROLL_CYCLE))
	{
		case (ROLL_FWD | ROLL_CYCLE):
			if (reachedTopPoint())
    15ea:	18 16       	cp	r1, r24
    15ec:	19 06       	cpc	r1, r25
    15ee:	84 f1       	brlt	.+96     	; 0x1650 <__vector_9+0x118>
			{
				if (activeRollCycle >= rollCycleSet)	
    15f0:	80 91 0d 01 	lds	r24, 0x010D
    15f4:	90 91 e1 00 	lds	r25, 0x00E1
    15f8:	89 17       	cp	r24, r25
    15fa:	28 f0       	brcs	.+10     	; 0x1606 <__vector_9+0xce>
				{
					// DONE!
					rollState &= ~ROLL_CYCLE;
    15fc:	4b 7f       	andi	r20, 0xFB	; 251
					rollState |= CYCLE_ROLL_DONE;
    15fe:	40 61       	ori	r20, 0x10	; 16
    1600:	40 93 ca 00 	sts	0x00CA, r20
    1604:	25 c0       	rjmp	.+74     	; 0x1650 <__vector_9+0x118>
				}
				else
				{
					activeRollCycle++;
    1606:	8f 5f       	subi	r24, 0xFF	; 255
    1608:	80 93 0d 01 	sts	0x010D, r24
					// Change dir	
					newDirReq = ROLL_REV;				
    160c:	82 e0       	ldi	r24, 0x02	; 2
    160e:	80 93 cd 00 	sts	0x00CD, r24
    1612:	1e c0       	rjmp	.+60     	; 0x1650 <__vector_9+0x118>
	return (	(int16_t)(topPoint - rollPoint) <= 0 );
}

static inline uint8_t reachedBottomPoint(void)
{
	return (	(int16_t)(rollPoint - bottomPoint) <= 0 );
    1614:	80 91 ce 00 	lds	r24, 0x00CE
    1618:	90 91 cf 00 	lds	r25, 0x00CF
    161c:	20 91 d0 00 	lds	r18, 0x00D0
    1620:	30 91 d1 00 	lds	r19, 0x00D1
    1624:	82 1b       	sub	r24, r18
    1626:	93 0b       	sbc	r25, r19
				}
			}
			break;
		
		case (ROLL_REV | ROLL_CYCLE):	
			if (reachedBottomPoint())
    1628:	18 16       	cp	r1, r24
    162a:	19 06       	cpc	r1, r25
    162c:	8c f0       	brlt	.+34     	; 0x1650 <__vector_9+0x118>
			{
				if (activeRollCycle >= rollCycleSet)	
    162e:	80 91 0d 01 	lds	r24, 0x010D
    1632:	90 91 e1 00 	lds	r25, 0x00E1
    1636:	89 17       	cp	r24, r25
    1638:	28 f0       	brcs	.+10     	; 0x1644 <__vector_9+0x10c>
				{
					// DONE!
					rollState &= ~ROLL_CYCLE;
    163a:	4b 7f       	andi	r20, 0xFB	; 251
					rollState |= CYCLE_ROLL_DONE;
    163c:	40 61       	ori	r20, 0x10	; 16
    163e:	40 93 ca 00 	sts	0x00CA, r20
    1642:	06 c0       	rjmp	.+12     	; 0x1650 <__vector_9+0x118>
				}
				else
				{
					activeRollCycle++;
    1644:	8f 5f       	subi	r24, 0xFF	; 255
    1646:	80 93 0d 01 	sts	0x010D, r24
					// Change dir	
					newDirReq = ROLL_FWD;
    164a:	81 e0       	ldi	r24, 0x01	; 1
    164c:	80 93 cd 00 	sts	0x00CD, r24
		default:
			break;
	}
	
	// Process direction change
	if ((rollState ^ newDirReq) & (ROLL_FWD | ROLL_REV))
    1650:	80 91 ca 00 	lds	r24, 0x00CA
    1654:	90 91 cd 00 	lds	r25, 0x00CD
    1658:	29 2f       	mov	r18, r25
    165a:	28 27       	eor	r18, r24
    165c:	23 70       	andi	r18, 0x03	; 3
    165e:	19 f0       	breq	.+6      	; 0x1666 <__vector_9+0x12e>
	{
		rollState |= (SKIP_CURRENT_MOTOR_CTRL | ROLL_DIR_CHANGED);
    1660:	88 62       	ori	r24, 0x28	; 40
    1662:	80 93 ca 00 	sts	0x00CA, r24
	}
	rollState &= ~(ROLL_FWD | ROLL_REV);
    1666:	80 91 ca 00 	lds	r24, 0x00CA
    166a:	8c 7f       	andi	r24, 0xFC	; 252
	rollState |= newDirReq;
    166c:	89 2b       	or	r24, r25
    166e:	80 93 ca 00 	sts	0x00CA, r24
	return (	(int16_t)(rollPoint - bottomPoint) <= 0 );
}

static inline void updateRollPoint(void)
{	
	if (rollState & ROLL_FWD)
    1672:	80 ff       	sbrs	r24, 0
    1674:	0a c0       	rjmp	.+20     	; 0x168a <__vector_9+0x152>
		rollPoint++;
    1676:	80 91 ce 00 	lds	r24, 0x00CE
    167a:	90 91 cf 00 	lds	r25, 0x00CF
    167e:	01 96       	adiw	r24, 0x01	; 1
    1680:	90 93 cf 00 	sts	0x00CF, r25
    1684:	80 93 ce 00 	sts	0x00CE, r24
    1688:	0b c0       	rjmp	.+22     	; 0x16a0 <__vector_9+0x168>
	else if (rollState & ROLL_REV)
    168a:	81 ff       	sbrs	r24, 1
    168c:	09 c0       	rjmp	.+18     	; 0x16a0 <__vector_9+0x168>
		rollPoint--;	
    168e:	80 91 ce 00 	lds	r24, 0x00CE
    1692:	90 91 cf 00 	lds	r25, 0x00CF
    1696:	01 97       	sbiw	r24, 0x01	; 1
    1698:	90 93 cf 00 	sts	0x00CF, r25
    169c:	80 93 ce 00 	sts	0x00CE, r24
			controlRolling();
		}
			

		// Process heater control counter
		if (heater_cnt == HEATER_REGULATION_PERIODS - 1)
    16a0:	80 91 d4 00 	lds	r24, 0x00D4
    16a4:	89 30       	cpi	r24, 0x09	; 9
    16a6:	61 f4       	brne	.+24     	; 0x16c0 <__vector_9+0x188>
		{
			heater_cnt = 0;
    16a8:	10 92 d4 00 	sts	0x00D4, r1
			ctrl_heater_sync = ctrl_heater;
    16ac:	80 91 cc 00 	lds	r24, 0x00CC
    16b0:	80 93 d5 00 	sts	0x00D5, r24
			heaterState |= READY_TO_UPDATE_HEATER;
    16b4:	80 91 cb 00 	lds	r24, 0x00CB
    16b8:	80 68       	ori	r24, 0x80	; 128
    16ba:	80 93 cb 00 	sts	0x00CB, r24
    16be:	03 c0       	rjmp	.+6      	; 0x16c6 <__vector_9+0x18e>
		}
		else
		{
			heater_cnt++;
    16c0:	8f 5f       	subi	r24, 0xFF	; 255
    16c2:	80 93 d4 00 	sts	0x00D4, r24
			
			
	}
	

	if ((p_state & STATE_MASK)  != 0x0F)
    16c6:	80 91 62 00 	lds	r24, 0x0062
    16ca:	98 2f       	mov	r25, r24
    16cc:	9f 70       	andi	r25, 0x0F	; 15
    16ce:	9f 30       	cpi	r25, 0x0F	; 15
    16d0:	19 f0       	breq	.+6      	; 0x16d8 <__vector_9+0x1a0>
		p_state++;
    16d2:	8f 5f       	subi	r24, 0xFF	; 255
    16d4:	80 93 62 00 	sts	0x0062, r24

}	
    16d8:	ff 91       	pop	r31
    16da:	ef 91       	pop	r30
    16dc:	bf 91       	pop	r27
    16de:	af 91       	pop	r26
    16e0:	9f 91       	pop	r25
    16e2:	8f 91       	pop	r24
    16e4:	7f 91       	pop	r23
    16e6:	6f 91       	pop	r22
    16e8:	5f 91       	pop	r21
    16ea:	4f 91       	pop	r20
    16ec:	3f 91       	pop	r19
    16ee:	2f 91       	pop	r18
    16f0:	0f 90       	pop	r0
    16f2:	0f be       	out	0x3f, r0	; 63
    16f4:	0f 90       	pop	r0
    16f6:	1f 90       	pop	r1
    16f8:	18 95       	reti

000016fa <processSoftTimer8b>:
 
 
 
 
 void processSoftTimer8b(SoftTimer8b_t *tmr)
 {
    16fa:	fc 01       	movw	r30, r24
	 uint8_t newTimerVal;

	 if (!tmr->Enabled)
    16fc:	80 81       	ld	r24, Z
    16fe:	80 ff       	sbrs	r24, 0
    1700:	29 c0       	rjmp	.+82     	; 0x1754 <processSoftTimer8b+0x5a>
		return;
	 
	 tmr->FA_EQ = 0;
	 tmr->FA_GE = 0;
	 tmr->FTop = 0;
    1702:	87 7e       	andi	r24, 0xE7	; 231
    1704:	8f 7d       	andi	r24, 0xDF	; 223
    1706:	80 83       	st	Z, r24
	 
	 if (tmr->Timer >= tmr->Top)
    1708:	81 81       	ldd	r24, Z+1	; 0x01
    170a:	92 81       	ldd	r25, Z+2	; 0x02
    170c:	89 17       	cp	r24, r25
    170e:	58 f0       	brcs	.+22     	; 0x1726 <processSoftTimer8b+0x2c>
	 {
		 if (tmr->RunOnce)
    1710:	90 81       	ld	r25, Z
    1712:	91 ff       	sbrs	r25, 1
    1714:	02 c0       	rjmp	.+4      	; 0x171a <processSoftTimer8b+0x20>
		 {
			 tmr->Enabled = 0;
    1716:	9e 7f       	andi	r25, 0xFE	; 254
    1718:	90 83       	st	Z, r25
		 }
		 tmr->FTop = 1;
    171a:	90 81       	ld	r25, Z
		 tmr->FOvfl = 1;
    171c:	90 62       	ori	r25, 0x20	; 32
    171e:	90 64       	ori	r25, 0x40	; 64
    1720:	90 83       	st	Z, r25
		 newTimerVal = 0;
    1722:	20 e0       	ldi	r18, 0x00	; 0
    1724:	02 c0       	rjmp	.+4      	; 0x172a <processSoftTimer8b+0x30>
	 }
	 else
	 {
		 newTimerVal = tmr->Timer + 1;
    1726:	28 2f       	mov	r18, r24
    1728:	2f 5f       	subi	r18, 0xFF	; 255
	 }
	 
	 if (tmr->Timer == tmr->CompA)
    172a:	93 81       	ldd	r25, Z+3	; 0x03
    172c:	89 13       	cpse	r24, r25
    172e:	0c c0       	rjmp	.+24     	; 0x1748 <processSoftTimer8b+0x4e>
	 {
		 tmr->FA_EQ = 1;
    1730:	80 81       	ld	r24, Z
		 tmr->FA_GE = 1;
    1732:	88 60       	ori	r24, 0x08	; 8
    1734:	80 61       	ori	r24, 0x10	; 16
		 tmr->FA_TGL = !tmr->FA_TGL;
    1736:	82 fb       	bst	r24, 2
    1738:	33 27       	eor	r19, r19
    173a:	30 f9       	bld	r19, 0
    173c:	91 e0       	ldi	r25, 0x01	; 1
    173e:	93 27       	eor	r25, r19
    1740:	90 fb       	bst	r25, 0
    1742:	82 f9       	bld	r24, 2
    1744:	80 83       	st	Z, r24
    1746:	05 c0       	rjmp	.+10     	; 0x1752 <processSoftTimer8b+0x58>
	 }
	 else if (tmr->Timer >= tmr->CompA)
    1748:	89 17       	cp	r24, r25
    174a:	18 f0       	brcs	.+6      	; 0x1752 <processSoftTimer8b+0x58>
	 {
		 tmr->FA_GE = 1;
    174c:	80 81       	ld	r24, Z
    174e:	80 61       	ori	r24, 0x10	; 16
    1750:	80 83       	st	Z, r24
	 }
	 
	 tmr->Timer = newTimerVal; 
    1752:	21 83       	std	Z+1, r18	; 0x01
    1754:	08 95       	ret

00001756 <SetBeeperFreq>:
}

// Setup beeper frequency (Hz)
void SetBeeperFreq(uint16_t freq_hz)
{
	uint16_t period_us = 1000000 / freq_hz;
    1756:	9c 01       	movw	r18, r24
    1758:	40 e0       	ldi	r20, 0x00	; 0
    175a:	50 e0       	ldi	r21, 0x00	; 0
    175c:	60 e4       	ldi	r22, 0x40	; 64
    175e:	72 e4       	ldi	r23, 0x42	; 66
    1760:	8f e0       	ldi	r24, 0x0F	; 15
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	86 d0       	rcall	.+268    	; 0x1872 <__divmodsi4>
	if (period_us & 0xFFF8)
    1766:	da 01       	movw	r26, r20
    1768:	c9 01       	movw	r24, r18
    176a:	88 7f       	andi	r24, 0xF8	; 248
    176c:	aa 27       	eor	r26, r26
    176e:	bb 27       	eor	r27, r27
    1770:	89 2b       	or	r24, r25
    1772:	59 f0       	breq	.+22     	; 0x178a <SetBeeperFreq+0x34>
		OCR1A = (period_us>>3) - 1;
    1774:	36 95       	lsr	r19
    1776:	27 95       	ror	r18
    1778:	36 95       	lsr	r19
    177a:	27 95       	ror	r18
    177c:	36 95       	lsr	r19
    177e:	27 95       	ror	r18
    1780:	21 50       	subi	r18, 0x01	; 1
    1782:	31 09       	sbc	r19, r1
    1784:	3b bd       	out	0x2b, r19	; 43
    1786:	2a bd       	out	0x2a, r18	; 42
    1788:	04 c0       	rjmp	.+8      	; 0x1792 <SetBeeperFreq+0x3c>
	else
		OCR1A = 0x1;
    178a:	81 e0       	ldi	r24, 0x01	; 1
    178c:	90 e0       	ldi	r25, 0x00	; 0
    178e:	9b bd       	out	0x2b, r25	; 43
    1790:	8a bd       	out	0x2a, r24	; 42
	TCNT1 = 0;
    1792:	1d bc       	out	0x2d, r1	; 45
    1794:	1c bc       	out	0x2c, r1	; 44
    1796:	08 95       	ret

00001798 <StartBeep>:
}

// Beep for some time in ms
void StartBeep(uint16_t time_ms)
{
	if (sound_enable)
    1798:	20 91 e0 00 	lds	r18, 0x00E0
    179c:	22 23       	and	r18, r18
    179e:	39 f0       	breq	.+14     	; 0x17ae <StartBeep+0x16>
	{
		beep_cnt = time_ms;
    17a0:	90 93 d7 00 	sts	0x00D7, r25
    17a4:	80 93 d6 00 	sts	0x00D6, r24
// Enable / disable beeper output
inline void SetBeepOutput(uint8_t val)
{
	if (val)
		// Toggle OCR1A on compare match
		TCCR1A |= (1<<COM1A0);
    17a8:	8f b5       	in	r24, 0x2f	; 47
    17aa:	80 64       	ori	r24, 0x40	; 64
    17ac:	8f bd       	out	0x2f, r24	; 47
    17ae:	08 95       	ret

000017b0 <__vector_3>:
}



ISR(TIMER2_COMP_vect)
{	
    17b0:	1f 92       	push	r1
    17b2:	0f 92       	push	r0
    17b4:	0f b6       	in	r0, 0x3f	; 63
    17b6:	0f 92       	push	r0
    17b8:	11 24       	eor	r1, r1
    17ba:	2f 93       	push	r18
    17bc:	3f 93       	push	r19
    17be:	4f 93       	push	r20
    17c0:	5f 93       	push	r21
    17c2:	6f 93       	push	r22
    17c4:	7f 93       	push	r23
    17c6:	8f 93       	push	r24
    17c8:	9f 93       	push	r25
    17ca:	af 93       	push	r26
    17cc:	bf 93       	push	r27
    17ce:	ef 93       	push	r30
    17d0:	ff 93       	push	r31
	// Manage beeper
	if (beep_cnt)
    17d2:	80 91 d6 00 	lds	r24, 0x00D6
    17d6:	90 91 d7 00 	lds	r25, 0x00D7
    17da:	00 97       	sbiw	r24, 0x00	; 0
    17dc:	31 f0       	breq	.+12     	; 0x17ea <__vector_3+0x3a>
		beep_cnt--;
    17de:	01 97       	sbiw	r24, 0x01	; 1
    17e0:	90 93 d7 00 	sts	0x00D7, r25
    17e4:	80 93 d6 00 	sts	0x00D6, r24
    17e8:	03 c0       	rjmp	.+6      	; 0x17f0 <__vector_3+0x40>
	if (val)
		// Toggle OCR1A on compare match
		TCCR1A |= (1<<COM1A0);
	else
		// Disable OCR1A output
		TCCR1A &= ~(1<<COM1A0 | 1<<COM1A1);
    17ea:	8f b5       	in	r24, 0x2f	; 47
    17ec:	8f 73       	andi	r24, 0x3F	; 63
    17ee:	8f bd       	out	0x2f, r24	; 47
		beep_cnt--;
	else
		SetBeepOutput(0);	// done
	
	// Manage LED indicator
	processLedIndicator();
    17f0:	05 d8       	rcall	.-4086   	; 0x7fc <processLedIndicator>
	
	// Process menu update timer
	processSoftTimer8b(&menuUpdateTimer);	
    17f2:	83 e6       	ldi	r24, 0x63	; 99
    17f4:	90 e0       	ldi	r25, 0x00	; 0
    17f6:	81 df       	rcall	.-254    	; 0x16fa <processSoftTimer8b>
	
}
    17f8:	ff 91       	pop	r31
    17fa:	ef 91       	pop	r30
    17fc:	bf 91       	pop	r27
    17fe:	af 91       	pop	r26
    1800:	9f 91       	pop	r25
    1802:	8f 91       	pop	r24
    1804:	7f 91       	pop	r23
    1806:	6f 91       	pop	r22
    1808:	5f 91       	pop	r21
    180a:	4f 91       	pop	r20
    180c:	3f 91       	pop	r19
    180e:	2f 91       	pop	r18
    1810:	0f 90       	pop	r0
    1812:	0f be       	out	0x3f, r0	; 63
    1814:	0f 90       	pop	r0
    1816:	1f 90       	pop	r1
    1818:	18 95       	reti

0000181a <USART_send>:



void USART_send( uint8_t data )
{
	UCSRA |= (1<<TXC);                 // Clear flag
    181a:	5e 9a       	sbi	0x0b, 6	; 11
	UDR = data;
    181c:	8c b9       	out	0x0c, r24	; 12
	while ( !(UCSRA & (1<<TXC)) );  // Wait
    181e:	5e 9b       	sbis	0x0b, 6	; 11
    1820:	fe cf       	rjmp	.-4      	; 0x181e <USART_send+0x4>
}
    1822:	08 95       	ret

00001824 <USART_sendstr>:


void USART_sendstr(char* str)
{
    1824:	1f 93       	push	r17
    1826:	cf 93       	push	r28
    1828:	df 93       	push	r29
    182a:	ec 01       	movw	r28, r24
	uint8_t i = 0;
	while (str[i])
    182c:	88 81       	ld	r24, Y
    182e:	88 23       	and	r24, r24
    1830:	49 f0       	breq	.+18     	; 0x1844 <USART_sendstr+0x20>
}


void USART_sendstr(char* str)
{
	uint8_t i = 0;
    1832:	10 e0       	ldi	r17, 0x00	; 0
	while (str[i])
	{
		USART_send(str[i++]);
    1834:	1f 5f       	subi	r17, 0xFF	; 255
    1836:	f1 df       	rcall	.-30     	; 0x181a <USART_send>


void USART_sendstr(char* str)
{
	uint8_t i = 0;
	while (str[i])
    1838:	fe 01       	movw	r30, r28
    183a:	e1 0f       	add	r30, r17
    183c:	f1 1d       	adc	r31, r1
    183e:	80 81       	ld	r24, Z
    1840:	81 11       	cpse	r24, r1
    1842:	f8 cf       	rjmp	.-16     	; 0x1834 <USART_sendstr+0x10>
	{
		USART_send(str[i++]);
	}
}
    1844:	df 91       	pop	r29
    1846:	cf 91       	pop	r28
    1848:	1f 91       	pop	r17
    184a:	08 95       	ret

0000184c <__divmodhi4>:
    184c:	97 fb       	bst	r25, 7
    184e:	07 2e       	mov	r0, r23
    1850:	16 f4       	brtc	.+4      	; 0x1856 <__divmodhi4+0xa>
    1852:	00 94       	com	r0
    1854:	06 d0       	rcall	.+12     	; 0x1862 <__divmodhi4_neg1>
    1856:	77 fd       	sbrc	r23, 7
    1858:	08 d0       	rcall	.+16     	; 0x186a <__divmodhi4_neg2>
    185a:	42 d0       	rcall	.+132    	; 0x18e0 <__udivmodhi4>
    185c:	07 fc       	sbrc	r0, 7
    185e:	05 d0       	rcall	.+10     	; 0x186a <__divmodhi4_neg2>
    1860:	3e f4       	brtc	.+14     	; 0x1870 <__divmodhi4_exit>

00001862 <__divmodhi4_neg1>:
    1862:	90 95       	com	r25
    1864:	81 95       	neg	r24
    1866:	9f 4f       	sbci	r25, 0xFF	; 255
    1868:	08 95       	ret

0000186a <__divmodhi4_neg2>:
    186a:	70 95       	com	r23
    186c:	61 95       	neg	r22
    186e:	7f 4f       	sbci	r23, 0xFF	; 255

00001870 <__divmodhi4_exit>:
    1870:	08 95       	ret

00001872 <__divmodsi4>:
    1872:	05 2e       	mov	r0, r21
    1874:	97 fb       	bst	r25, 7
    1876:	16 f4       	brtc	.+4      	; 0x187c <__divmodsi4+0xa>
    1878:	00 94       	com	r0
    187a:	06 d0       	rcall	.+12     	; 0x1888 <__divmodsi4_neg1>
    187c:	57 fd       	sbrc	r21, 7
    187e:	0c d0       	rcall	.+24     	; 0x1898 <__divmodsi4_neg2>
    1880:	43 d0       	rcall	.+134    	; 0x1908 <__udivmodsi4>
    1882:	07 fc       	sbrc	r0, 7
    1884:	09 d0       	rcall	.+18     	; 0x1898 <__divmodsi4_neg2>
    1886:	7e f4       	brtc	.+30     	; 0x18a6 <__divmodsi4_exit>

00001888 <__divmodsi4_neg1>:
    1888:	90 95       	com	r25
    188a:	80 95       	com	r24
    188c:	70 95       	com	r23
    188e:	61 95       	neg	r22
    1890:	7f 4f       	sbci	r23, 0xFF	; 255
    1892:	8f 4f       	sbci	r24, 0xFF	; 255
    1894:	9f 4f       	sbci	r25, 0xFF	; 255
    1896:	08 95       	ret

00001898 <__divmodsi4_neg2>:
    1898:	50 95       	com	r21
    189a:	40 95       	com	r20
    189c:	30 95       	com	r19
    189e:	21 95       	neg	r18
    18a0:	3f 4f       	sbci	r19, 0xFF	; 255
    18a2:	4f 4f       	sbci	r20, 0xFF	; 255
    18a4:	5f 4f       	sbci	r21, 0xFF	; 255

000018a6 <__divmodsi4_exit>:
    18a6:	08 95       	ret

000018a8 <__umulhisi3>:
    18a8:	a2 9f       	mul	r26, r18
    18aa:	b0 01       	movw	r22, r0
    18ac:	b3 9f       	mul	r27, r19
    18ae:	c0 01       	movw	r24, r0
    18b0:	a3 9f       	mul	r26, r19
    18b2:	01 d0       	rcall	.+2      	; 0x18b6 <__umulhisi3+0xe>
    18b4:	b2 9f       	mul	r27, r18
    18b6:	70 0d       	add	r23, r0
    18b8:	81 1d       	adc	r24, r1
    18ba:	11 24       	eor	r1, r1
    18bc:	91 1d       	adc	r25, r1
    18be:	08 95       	ret

000018c0 <__usmulhisi3>:
    18c0:	f3 df       	rcall	.-26     	; 0x18a8 <__umulhisi3>

000018c2 <__usmulhisi3_tail>:
    18c2:	b7 ff       	sbrs	r27, 7
    18c4:	08 95       	ret
    18c6:	82 1b       	sub	r24, r18
    18c8:	93 0b       	sbc	r25, r19
    18ca:	08 95       	ret

000018cc <__muluhisi3>:
    18cc:	ed df       	rcall	.-38     	; 0x18a8 <__umulhisi3>
    18ce:	a5 9f       	mul	r26, r21
    18d0:	90 0d       	add	r25, r0
    18d2:	b4 9f       	mul	r27, r20
    18d4:	90 0d       	add	r25, r0
    18d6:	a4 9f       	mul	r26, r20
    18d8:	80 0d       	add	r24, r0
    18da:	91 1d       	adc	r25, r1
    18dc:	11 24       	eor	r1, r1
    18de:	08 95       	ret

000018e0 <__udivmodhi4>:
    18e0:	aa 1b       	sub	r26, r26
    18e2:	bb 1b       	sub	r27, r27
    18e4:	51 e1       	ldi	r21, 0x11	; 17
    18e6:	07 c0       	rjmp	.+14     	; 0x18f6 <__udivmodhi4_ep>

000018e8 <__udivmodhi4_loop>:
    18e8:	aa 1f       	adc	r26, r26
    18ea:	bb 1f       	adc	r27, r27
    18ec:	a6 17       	cp	r26, r22
    18ee:	b7 07       	cpc	r27, r23
    18f0:	10 f0       	brcs	.+4      	; 0x18f6 <__udivmodhi4_ep>
    18f2:	a6 1b       	sub	r26, r22
    18f4:	b7 0b       	sbc	r27, r23

000018f6 <__udivmodhi4_ep>:
    18f6:	88 1f       	adc	r24, r24
    18f8:	99 1f       	adc	r25, r25
    18fa:	5a 95       	dec	r21
    18fc:	a9 f7       	brne	.-22     	; 0x18e8 <__udivmodhi4_loop>
    18fe:	80 95       	com	r24
    1900:	90 95       	com	r25
    1902:	bc 01       	movw	r22, r24
    1904:	cd 01       	movw	r24, r26
    1906:	08 95       	ret

00001908 <__udivmodsi4>:
    1908:	a1 e2       	ldi	r26, 0x21	; 33
    190a:	1a 2e       	mov	r1, r26
    190c:	aa 1b       	sub	r26, r26
    190e:	bb 1b       	sub	r27, r27
    1910:	fd 01       	movw	r30, r26
    1912:	0d c0       	rjmp	.+26     	; 0x192e <__udivmodsi4_ep>

00001914 <__udivmodsi4_loop>:
    1914:	aa 1f       	adc	r26, r26
    1916:	bb 1f       	adc	r27, r27
    1918:	ee 1f       	adc	r30, r30
    191a:	ff 1f       	adc	r31, r31
    191c:	a2 17       	cp	r26, r18
    191e:	b3 07       	cpc	r27, r19
    1920:	e4 07       	cpc	r30, r20
    1922:	f5 07       	cpc	r31, r21
    1924:	20 f0       	brcs	.+8      	; 0x192e <__udivmodsi4_ep>
    1926:	a2 1b       	sub	r26, r18
    1928:	b3 0b       	sbc	r27, r19
    192a:	e4 0b       	sbc	r30, r20
    192c:	f5 0b       	sbc	r31, r21

0000192e <__udivmodsi4_ep>:
    192e:	66 1f       	adc	r22, r22
    1930:	77 1f       	adc	r23, r23
    1932:	88 1f       	adc	r24, r24
    1934:	99 1f       	adc	r25, r25
    1936:	1a 94       	dec	r1
    1938:	69 f7       	brne	.-38     	; 0x1914 <__udivmodsi4_loop>
    193a:	60 95       	com	r22
    193c:	70 95       	com	r23
    193e:	80 95       	com	r24
    1940:	90 95       	com	r25
    1942:	9b 01       	movw	r18, r22
    1944:	ac 01       	movw	r20, r24
    1946:	bd 01       	movw	r22, r26
    1948:	cf 01       	movw	r24, r30
    194a:	08 95       	ret

0000194c <__eerd_block_m8>:
    194c:	dc 01       	movw	r26, r24
    194e:	cb 01       	movw	r24, r22

00001950 <__eerd_blraw_m8>:
    1950:	fc 01       	movw	r30, r24
    1952:	e1 99       	sbic	0x1c, 1	; 28
    1954:	fe cf       	rjmp	.-4      	; 0x1952 <__eerd_blraw_m8+0x2>
    1956:	06 c0       	rjmp	.+12     	; 0x1964 <__eerd_blraw_m8+0x14>
    1958:	ff bb       	out	0x1f, r31	; 31
    195a:	ee bb       	out	0x1e, r30	; 30
    195c:	e0 9a       	sbi	0x1c, 0	; 28
    195e:	31 96       	adiw	r30, 0x01	; 1
    1960:	0d b2       	in	r0, 0x1d	; 29
    1962:	0d 92       	st	X+, r0
    1964:	41 50       	subi	r20, 0x01	; 1
    1966:	50 40       	sbci	r21, 0x00	; 0
    1968:	b8 f7       	brcc	.-18     	; 0x1958 <__eerd_blraw_m8+0x8>
    196a:	08 95       	ret

0000196c <_exit>:
    196c:	f8 94       	cli

0000196e <__stop_program>:
    196e:	ff cf       	rjmp	.-2      	; 0x196e <__stop_program>
