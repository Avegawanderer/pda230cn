
pid1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001b72  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000084  00800060  00001b72  00001c26  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000df  008000e4  008000e4  00001caa  2**0
                  ALLOC
  3 .eeprom       0000000a  00810000  00810000  00001caa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         000009c0  00000000  00000000  00001cb4  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      000001a6  00000000  00000000  00002674  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      0000002f  00000000  00000000  0000281a  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 000003f0  00000000  00000000  00002849  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00003db6  00000000  00000000  00002c39  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000013e5  00000000  00000000  000069ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000189a  00000000  00000000  00007dd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000974  00000000  00000000  00009670  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00001076  00000000  00000000  00009fe4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00001d70  00000000  00000000  0000b05a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000360  00000000  00000000  0000cdca  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	ad c0       	rjmp	.+346    	; 0x15c <__ctors_end>
       2:	c7 c0       	rjmp	.+398    	; 0x192 <__bad_interrupt>
       4:	c6 c0       	rjmp	.+396    	; 0x192 <__bad_interrupt>
       6:	a4 cc       	rjmp	.-1720   	; 0xfffff950 <__eeprom_end+0xff7ef946>
       8:	c4 c0       	rjmp	.+392    	; 0x192 <__bad_interrupt>
       a:	c3 c0       	rjmp	.+390    	; 0x192 <__bad_interrupt>
       c:	c2 c0       	rjmp	.+388    	; 0x192 <__bad_interrupt>
       e:	c1 c0       	rjmp	.+386    	; 0x192 <__bad_interrupt>
      10:	c0 c0       	rjmp	.+384    	; 0x192 <__bad_interrupt>
      12:	09 cb       	rjmp	.-2542   	; 0xfffff626 <__eeprom_end+0xff7ef61c>
      14:	be c0       	rjmp	.+380    	; 0x192 <__bad_interrupt>
      16:	bd c0       	rjmp	.+378    	; 0x192 <__bad_interrupt>
      18:	bc c0       	rjmp	.+376    	; 0x192 <__bad_interrupt>
      1a:	bb c0       	rjmp	.+374    	; 0x192 <__bad_interrupt>
      1c:	54 c1       	rjmp	.+680    	; 0x2c6 <__vector_14>
      1e:	b9 c0       	rjmp	.+370    	; 0x192 <__bad_interrupt>
      20:	c4 ca       	rjmp	.-2680   	; 0xfffff5aa <__eeprom_end+0xff7ef5a0>
      22:	b7 c0       	rjmp	.+366    	; 0x192 <__bad_interrupt>
      24:	b6 c0       	rjmp	.+364    	; 0x192 <__bad_interrupt>

00000026 <led_encode_table>:
      26:	30 3f 4f 3f 31 06 32 5b 33 4f 34 66 53 6d 35 6d     0?O?1.2[3O4fSm5m
      36:	36 7d 37 07 38 7f 39 6f 2e 80 2c 80 2d 40 5f 08     6}7.8.9o..,.-@_.
      46:	20 00 b0 63 41 77 43 39 46 71 4e 54 44 5e 50 73      ..cAwC9FqNTD^Ps
      56:	45 79 52 50                                         EyRP

0000005a <menuFunctionSet>:
      5a:	01 e2 07 e4 07 31 06 03 2e 06 93 07 d0 05 02 90     .....1..........
      6a:	07 29 07 26 06 05 06 06 e4 06 00 00 0b d6 05 e4     .).&............
      7a:	06 e4 05 04 06 06 4c 06 00 00 0c d6 05 4c 06 e4     ......L......L..
      8a:	05 06 1a 06 9d 06 00 00 09 d6 05 9d 06 ed 05 07     ................
      9a:	0e 06 9d 06 00 00 0a d6 05 9d 06 ed 05 08 33 06     ..............3.
      aa:	fc 05 00 00 0d 33 06 fc 05 00 00 0e 00 06 f8 05     .....3..........
      ba:	ea 05                                               ..

000000bc <menuJumpSet>:
      bc:	01 c0 00 03 a8 01 00 01 02 40 01 00 02 05 28 02     .........@....(.
      cc:	00 01 01 80 03 00 83 01 40 05 00 82 01 00 05 80     ........@.......
      dc:	00 04 68 05 40 00 07 a8 05 00 01 0b 28 0b 00 83     ..h.@.......(...
      ec:	05 28 04 00 82 01 00 04 80 00 06 68 04 40 00 05     .(.........h.@..
      fc:	a8 04 00 01 0c 28 0c 00 83 04 28 06 00 82 01 00     .....(....(.....
     10c:	06 80 00 07 68 06 40 00 04 a8 06 00 01 09 00 07     ....h.@.........
     11c:	00 82 01 00 07 80 00 05 68 07 40 00 06 a8 07 00     ........h.@.....
     12c:	01 0a 00 09 00 02 06 28 09 00 01 08 14 08 00 83     .......(........
     13c:	01 00 0a 00 02 07 28 0a 00 01 0d 14 0d 00 83 01     ......(.........
     14c:	00 01 00 40 0e 00 02 00 40 0e 00 0e d5 01 01 00     ...@....@.......

0000015c <__ctors_end>:
     15c:	11 24       	eor	r1, r1
     15e:	1f be       	out	0x3f, r1	; 63
     160:	cf e5       	ldi	r28, 0x5F	; 95
     162:	d4 e0       	ldi	r29, 0x04	; 4
     164:	de bf       	out	0x3e, r29	; 62
     166:	cd bf       	out	0x3d, r28	; 61

00000168 <__do_copy_data>:
     168:	10 e0       	ldi	r17, 0x00	; 0
     16a:	a0 e6       	ldi	r26, 0x60	; 96
     16c:	b0 e0       	ldi	r27, 0x00	; 0
     16e:	e2 e7       	ldi	r30, 0x72	; 114
     170:	fb e1       	ldi	r31, 0x1B	; 27
     172:	02 c0       	rjmp	.+4      	; 0x178 <__do_copy_data+0x10>
     174:	05 90       	lpm	r0, Z+
     176:	0d 92       	st	X+, r0
     178:	a4 3e       	cpi	r26, 0xE4	; 228
     17a:	b1 07       	cpc	r27, r17
     17c:	d9 f7       	brne	.-10     	; 0x174 <__do_copy_data+0xc>

0000017e <__do_clear_bss>:
     17e:	21 e0       	ldi	r18, 0x01	; 1
     180:	a4 ee       	ldi	r26, 0xE4	; 228
     182:	b0 e0       	ldi	r27, 0x00	; 0
     184:	01 c0       	rjmp	.+2      	; 0x188 <.do_clear_bss_start>

00000186 <.do_clear_bss_loop>:
     186:	1d 92       	st	X+, r1

00000188 <.do_clear_bss_start>:
     188:	a3 3c       	cpi	r26, 0xC3	; 195
     18a:	b2 07       	cpc	r27, r18
     18c:	e1 f7       	brne	.-8      	; 0x186 <.do_clear_bss_loop>
     18e:	cf d8       	rcall	.-3682   	; 0xfffff32e <__eeprom_end+0xff7ef324>
     190:	ee cc       	rjmp	.-1572   	; 0xfffffb6e <__eeprom_end+0xff7efb64>

00000192 <__bad_interrupt>:
     192:	36 cf       	rjmp	.-404    	; 0x0 <__vectors>

00000194 <conv_ADC_to_Celsius>:
//---------------------------------------------//
//---------------------------------------------//


uint16_t conv_ADC_to_Celsius(uint16_t adc_value)
{	
     194:	0f 93       	push	r16
     196:	1f 93       	push	r17
	return (uint16_t)(((int32_t)adc_value * k_norm + offset_norm) / (COEFF_SCALE));
     198:	20 91 e4 00 	lds	r18, 0x00E4
     19c:	30 91 e5 00 	lds	r19, 0x00E5
     1a0:	40 91 e6 00 	lds	r20, 0x00E6
     1a4:	50 91 e7 00 	lds	r21, 0x00E7
     1a8:	dc 01       	movw	r26, r24
     1aa:	85 dc       	rcall	.-1782   	; 0xfffffab6 <__eeprom_end+0xff7efaac>
     1ac:	00 91 e8 00 	lds	r16, 0x00E8
     1b0:	10 91 e9 00 	lds	r17, 0x00E9
     1b4:	20 91 ea 00 	lds	r18, 0x00EA
     1b8:	30 91 eb 00 	lds	r19, 0x00EB
     1bc:	60 0f       	add	r22, r16
     1be:	71 1f       	adc	r23, r17
     1c0:	82 1f       	adc	r24, r18
     1c2:	93 1f       	adc	r25, r19
     1c4:	28 ee       	ldi	r18, 0xE8	; 232
     1c6:	33 e0       	ldi	r19, 0x03	; 3
     1c8:	40 e0       	ldi	r20, 0x00	; 0
     1ca:	50 e0       	ldi	r21, 0x00	; 0
     1cc:	41 dc       	rcall	.-1918   	; 0xfffffa50 <__eeprom_end+0xff7efa46>
}
     1ce:	c9 01       	movw	r24, r18
     1d0:	1f 91       	pop	r17
     1d2:	0f 91       	pop	r16
     1d4:	08 95       	ret

000001d6 <conv_Celsius_to_ADC>:

uint16_t conv_Celsius_to_ADC(uint16_t degree_value)
{
     1d6:	0f 93       	push	r16
     1d8:	1f 93       	push	r17
	degree_value += 1;
     1da:	9c 01       	movw	r18, r24
     1dc:	2f 5f       	subi	r18, 0xFF	; 255
     1de:	3f 4f       	sbci	r19, 0xFF	; 255
	return (uint16_t)(((int32_t)degree_value * COEFF_SCALE - offset_norm) / k_norm);
     1e0:	a8 ee       	ldi	r26, 0xE8	; 232
     1e2:	b3 e0       	ldi	r27, 0x03	; 3
     1e4:	56 dc       	rcall	.-1876   	; 0xfffffa92 <__eeprom_end+0xff7efa88>
     1e6:	00 91 e8 00 	lds	r16, 0x00E8
     1ea:	10 91 e9 00 	lds	r17, 0x00E9
     1ee:	20 91 ea 00 	lds	r18, 0x00EA
     1f2:	30 91 eb 00 	lds	r19, 0x00EB
     1f6:	60 1b       	sub	r22, r16
     1f8:	71 0b       	sbc	r23, r17
     1fa:	82 0b       	sbc	r24, r18
     1fc:	93 0b       	sbc	r25, r19
     1fe:	20 91 e4 00 	lds	r18, 0x00E4
     202:	30 91 e5 00 	lds	r19, 0x00E5
     206:	40 91 e6 00 	lds	r20, 0x00E6
     20a:	50 91 e7 00 	lds	r21, 0x00E7
     20e:	20 dc       	rcall	.-1984   	; 0xfffffa50 <__eeprom_end+0xff7efa46>
}
     210:	c9 01       	movw	r24, r18
     212:	1f 91       	pop	r17
     214:	0f 91       	pop	r16
     216:	08 95       	ret

00000218 <calculateCoeffs>:

void calculateCoeffs(void)
{
     218:	8f 92       	push	r8
     21a:	9f 92       	push	r9
     21c:	af 92       	push	r10
     21e:	bf 92       	push	r11
     220:	cf 92       	push	r12
     222:	df 92       	push	r13
     224:	ef 92       	push	r14
     226:	ff 92       	push	r15
     228:	cf 93       	push	r28
     22a:	df 93       	push	r29
	k_norm = ((int32_t)(cp.cpoint2 - cp.cpoint1) * COEFF_SCALE) / ((int32_t)(cp.cpoint2_adc - cp.cpoint1_adc));
     22c:	f0 90 91 01 	lds	r15, 0x0191
     230:	a0 91 92 01 	lds	r26, 0x0192
     234:	b0 e0       	ldi	r27, 0x00	; 0
     236:	af 19       	sub	r26, r15
     238:	b1 09       	sbc	r27, r1
     23a:	c0 91 93 01 	lds	r28, 0x0193
     23e:	d0 91 94 01 	lds	r29, 0x0194
     242:	28 ee       	ldi	r18, 0xE8	; 232
     244:	33 e0       	ldi	r19, 0x03	; 3
     246:	31 dc       	rcall	.-1950   	; 0xfffffaaa <__eeprom_end+0xff7efaa0>
     248:	20 91 95 01 	lds	r18, 0x0195
     24c:	30 91 96 01 	lds	r19, 0x0196
     250:	2c 1b       	sub	r18, r28
     252:	3d 0b       	sbc	r19, r29
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	fb db       	rcall	.-2058   	; 0xfffffa50 <__eeprom_end+0xff7efa46>
     25a:	49 01       	movw	r8, r18
     25c:	5a 01       	movw	r10, r20
     25e:	20 93 e4 00 	sts	0x00E4, r18
     262:	30 93 e5 00 	sts	0x00E5, r19
     266:	40 93 e6 00 	sts	0x00E6, r20
     26a:	50 93 e7 00 	sts	0x00E7, r21
	offset_norm = (int32_t)cp.cpoint1 * COEFF_SCALE - (int32_t)cp.cpoint1_adc * k_norm;
     26e:	2f 2d       	mov	r18, r15
     270:	30 e0       	ldi	r19, 0x00	; 0
     272:	a8 ee       	ldi	r26, 0xE8	; 232
     274:	b3 e0       	ldi	r27, 0x03	; 3
     276:	0d dc       	rcall	.-2022   	; 0xfffffa92 <__eeprom_end+0xff7efa88>
     278:	6b 01       	movw	r12, r22
     27a:	7c 01       	movw	r14, r24
     27c:	de 01       	movw	r26, r28
     27e:	a5 01       	movw	r20, r10
     280:	94 01       	movw	r18, r8
     282:	19 dc       	rcall	.-1998   	; 0xfffffab6 <__eeprom_end+0xff7efaac>
     284:	c6 1a       	sub	r12, r22
     286:	d7 0a       	sbc	r13, r23
     288:	e8 0a       	sbc	r14, r24
     28a:	f9 0a       	sbc	r15, r25
     28c:	c0 92 e8 00 	sts	0x00E8, r12
     290:	d0 92 e9 00 	sts	0x00E9, r13
     294:	e0 92 ea 00 	sts	0x00EA, r14
     298:	f0 92 eb 00 	sts	0x00EB, r15
}
     29c:	df 91       	pop	r29
     29e:	cf 91       	pop	r28
     2a0:	ff 90       	pop	r15
     2a2:	ef 90       	pop	r14
     2a4:	df 90       	pop	r13
     2a6:	cf 90       	pop	r12
     2a8:	bf 90       	pop	r11
     2aa:	af 90       	pop	r10
     2ac:	9f 90       	pop	r9
     2ae:	8f 90       	pop	r8
     2b0:	08 95       	ret

000002b2 <update_Celsius>:
}

void update_Celsius(void)
{
	// Convert to Celsius degree
	adc_celsius = conv_ADC_to_Celsius(adc_normalized);
     2b2:	80 91 63 01 	lds	r24, 0x0163
     2b6:	90 91 64 01 	lds	r25, 0x0164
     2ba:	6c df       	rcall	.-296    	; 0x194 <conv_ADC_to_Celsius>
     2bc:	90 93 67 01 	sts	0x0167, r25
     2c0:	80 93 66 01 	sts	0x0166, r24
     2c4:	08 95       	ret

000002c6 <__vector_14>:




ISR(ADC_vect)
{
     2c6:	1f 92       	push	r1
     2c8:	0f 92       	push	r0
     2ca:	0f b6       	in	r0, 0x3f	; 63
     2cc:	0f 92       	push	r0
     2ce:	11 24       	eor	r1, r1
     2d0:	2f 93       	push	r18
     2d2:	3f 93       	push	r19
     2d4:	4f 93       	push	r20
     2d6:	8f 93       	push	r24
     2d8:	9f 93       	push	r25
     2da:	ef 93       	push	r30
     2dc:	ff 93       	push	r31
	static uint8_t adc_buffer_pointer = ADC_BUFFER_LENGTH;
	// Get new sample
	uint16_t new_sample = 1024 - ADC;	
     2de:	24 b1       	in	r18, 0x04	; 4
     2e0:	35 b1       	in	r19, 0x05	; 5
	// Add new sample to the buffer
	raw_adc_buffer[--adc_buffer_pointer] = new_sample;
     2e2:	40 91 77 00 	lds	r20, 0x0077
     2e6:	41 50       	subi	r20, 0x01	; 1
     2e8:	40 93 77 00 	sts	0x0077, r20
     2ec:	e4 2f       	mov	r30, r20
     2ee:	f0 e0       	ldi	r31, 0x00	; 0
     2f0:	ee 0f       	add	r30, r30
     2f2:	ff 1f       	adc	r31, r31
     2f4:	ed 5d       	subi	r30, 0xDD	; 221
     2f6:	fe 4f       	sbci	r31, 0xFE	; 254

ISR(ADC_vect)
{
	static uint8_t adc_buffer_pointer = ADC_BUFFER_LENGTH;
	// Get new sample
	uint16_t new_sample = 1024 - ADC;	
     2f8:	80 e0       	ldi	r24, 0x00	; 0
     2fa:	94 e0       	ldi	r25, 0x04	; 4
     2fc:	82 1b       	sub	r24, r18
     2fe:	93 0b       	sbc	r25, r19
	// Add new sample to the buffer
	raw_adc_buffer[--adc_buffer_pointer] = new_sample;
     300:	91 83       	std	Z+1, r25	; 0x01
     302:	80 83       	st	Z, r24
	if (adc_buffer_pointer == 0)
     304:	41 11       	cpse	r20, r1
     306:	03 c0       	rjmp	.+6      	; 0x30e <__vector_14+0x48>
		adc_buffer_pointer = ADC_BUFFER_LENGTH;
     308:	80 e2       	ldi	r24, 0x20	; 32
     30a:	80 93 77 00 	sts	0x0077, r24
}	
     30e:	ff 91       	pop	r31
     310:	ef 91       	pop	r30
     312:	9f 91       	pop	r25
     314:	8f 91       	pop	r24
     316:	4f 91       	pop	r20
     318:	3f 91       	pop	r19
     31a:	2f 91       	pop	r18
     31c:	0f 90       	pop	r0
     31e:	0f be       	out	0x3f, r0	; 63
     320:	0f 90       	pop	r0
     322:	1f 90       	pop	r1
     324:	18 95       	reti

00000326 <fir_i16_i8>:
// FIR digital filter
// Samples: signed, 16-bit
// Coeffs:  signed, 8-bit
//---------------------------------------------//
int16_t fir_i16_i8(int16_t new_sample, int16_t *samples, filter8bit_core_t* iir_core)
{
     326:	cf 92       	push	r12
     328:	df 92       	push	r13
     32a:	ef 92       	push	r14
     32c:	ff 92       	push	r15
     32e:	0f 93       	push	r16
     330:	1f 93       	push	r17
     332:	cf 93       	push	r28
     334:	df 93       	push	r29
     336:	8c 01       	movw	r16, r24
     338:	eb 01       	movw	r28, r22
     33a:	fa 01       	movw	r30, r20
	int32_t summ;
	uint8_t i;
	
	summ = new_sample * iir_core->coeffs[0];
     33c:	23 81       	ldd	r18, Z+3	; 0x03
     33e:	20 03       	mulsu	r18, r16
     340:	60 01       	movw	r12, r0
     342:	21 9f       	mul	r18, r17
     344:	d0 0c       	add	r13, r0
     346:	11 24       	eor	r1, r1
     348:	ee 24       	eor	r14, r14
     34a:	d7 fc       	sbrc	r13, 7
     34c:	e0 94       	com	r14
     34e:	fe 2c       	mov	r15, r14
	for (i=iir_core->n-1; i>0; i--)
     350:	40 81       	ld	r20, Z
     352:	1e c0       	rjmp	.+60     	; 0x390 <fir_i16_i8+0x6a>
	{
		samples[i] = samples[i-1];
     354:	84 2f       	mov	r24, r20
     356:	90 e0       	ldi	r25, 0x00	; 0
     358:	dc 01       	movw	r26, r24
     35a:	11 97       	sbiw	r26, 0x01	; 1
     35c:	aa 0f       	add	r26, r26
     35e:	bb 1f       	adc	r27, r27
     360:	ac 0f       	add	r26, r28
     362:	bd 1f       	adc	r27, r29
     364:	2d 91       	ld	r18, X+
     366:	3c 91       	ld	r19, X
     368:	dc 01       	movw	r26, r24
     36a:	aa 0f       	add	r26, r26
     36c:	bb 1f       	adc	r27, r27
     36e:	ac 0f       	add	r26, r28
     370:	bd 1f       	adc	r27, r29
     372:	2d 93       	st	X+, r18
     374:	3c 93       	st	X, r19
		summ += (int32_t)samples[i] * iir_core->coeffs[i];
     376:	df 01       	movw	r26, r30
     378:	a8 0f       	add	r26, r24
     37a:	b9 1f       	adc	r27, r25
     37c:	13 96       	adiw	r26, 0x03	; 3
     37e:	ac 91       	ld	r26, X
     380:	bb 27       	eor	r27, r27
     382:	a7 fd       	sbrc	r26, 7
     384:	b0 95       	com	r27
     386:	7f db       	rcall	.-2306   	; 0xfffffa86 <__eeprom_end+0xff7efa7c>
     388:	c6 0e       	add	r12, r22
     38a:	d7 1e       	adc	r13, r23
     38c:	e8 1e       	adc	r14, r24
     38e:	f9 1e       	adc	r15, r25
{
	int32_t summ;
	uint8_t i;
	
	summ = new_sample * iir_core->coeffs[0];
	for (i=iir_core->n-1; i>0; i--)
     390:	41 50       	subi	r20, 0x01	; 1
     392:	01 f7       	brne	.-64     	; 0x354 <fir_i16_i8+0x2e>
	{
		samples[i] = samples[i-1];
		summ += (int32_t)samples[i] * iir_core->coeffs[i];
	}
	samples[0] = new_sample;
     394:	19 83       	std	Y+1, r17	; 0x01
     396:	08 83       	st	Y, r16
	return (int16_t)(summ / iir_core->dc_gain);
     398:	21 81       	ldd	r18, Z+1	; 0x01
     39a:	32 81       	ldd	r19, Z+2	; 0x02
     39c:	40 e0       	ldi	r20, 0x00	; 0
     39e:	50 e0       	ldi	r21, 0x00	; 0
     3a0:	c7 01       	movw	r24, r14
     3a2:	b6 01       	movw	r22, r12
     3a4:	55 db       	rcall	.-2390   	; 0xfffffa50 <__eeprom_end+0xff7efa46>
}
     3a6:	c9 01       	movw	r24, r18
     3a8:	df 91       	pop	r29
     3aa:	cf 91       	pop	r28
     3ac:	1f 91       	pop	r17
     3ae:	0f 91       	pop	r16
     3b0:	ff 90       	pop	r15
     3b2:	ef 90       	pop	r14
     3b4:	df 90       	pop	r13
     3b6:	cf 90       	pop	r12
     3b8:	08 95       	ret

000003ba <update_normalized_adc>:
void update_normalized_adc()
{
	uint8_t i;
	uint16_t adc_raw_summ = 0;
	// Disable interrupts from ADC - to save data integrity
	ADCSRA &= ~(1<<ADIE);	
     3ba:	33 98       	cbi	0x06, 3	; 6
     3bc:	e3 e2       	ldi	r30, 0x23	; 35
     3be:	f1 e0       	ldi	r31, 0x01	; 1


void update_normalized_adc()
{
	uint8_t i;
	uint16_t adc_raw_summ = 0;
     3c0:	80 e0       	ldi	r24, 0x00	; 0
     3c2:	90 e0       	ldi	r25, 0x00	; 0
	// Disable interrupts from ADC - to save data integrity
	ADCSRA &= ~(1<<ADIE);	
	// Get normalized mean window summ
	for (i=0;i<ADC_BUFFER_LENGTH;i++)
		adc_raw_summ += raw_adc_buffer[i];
     3c4:	21 91       	ld	r18, Z+
     3c6:	31 91       	ld	r19, Z+
     3c8:	82 0f       	add	r24, r18
     3ca:	93 1f       	adc	r25, r19
	uint8_t i;
	uint16_t adc_raw_summ = 0;
	// Disable interrupts from ADC - to save data integrity
	ADCSRA &= ~(1<<ADIE);	
	// Get normalized mean window summ
	for (i=0;i<ADC_BUFFER_LENGTH;i++)
     3cc:	21 e0       	ldi	r18, 0x01	; 1
     3ce:	e3 36       	cpi	r30, 0x63	; 99
     3d0:	f2 07       	cpc	r31, r18
     3d2:	c1 f7       	brne	.-16     	; 0x3c4 <update_normalized_adc+0xa>
		adc_raw_summ += raw_adc_buffer[i];
	// Enable interrupts from ADC
	ADCSRA |= (1<<ADIE);
     3d4:	33 9a       	sbi	0x06, 3	; 6
	
	adc_normalized = adc_raw_summ >> 5;		// ADC_BUFFER_LENGTH = 32 !
     3d6:	9c 01       	movw	r18, r24
     3d8:	65 e0       	ldi	r22, 0x05	; 5
     3da:	36 95       	lsr	r19
     3dc:	27 95       	ror	r18
     3de:	6a 95       	dec	r22
     3e0:	e1 f7       	brne	.-8      	; 0x3da <update_normalized_adc+0x20>
     3e2:	30 93 64 01 	sts	0x0164, r19
     3e6:	20 93 63 01 	sts	0x0163, r18
	adc_oversampled = adc_raw_summ >> 3;
     3ea:	73 e0       	ldi	r23, 0x03	; 3
     3ec:	96 95       	lsr	r25
     3ee:	87 95       	ror	r24
     3f0:	7a 95       	dec	r23
     3f2:	e1 f7       	brne	.-8      	; 0x3ec <update_normalized_adc+0x32>
     3f4:	90 93 22 01 	sts	0x0122, r25
     3f8:	80 93 21 01 	sts	0x0121, r24
	// Filter
	adc_filtered = fir_i16_i8(adc_oversampled, filter_buffer, &fir_filter_rect);	
     3fc:	40 e6       	ldi	r20, 0x60	; 96
     3fe:	50 e0       	ldi	r21, 0x00	; 0
     400:	68 e6       	ldi	r22, 0x68	; 104
     402:	71 e0       	ldi	r23, 0x01	; 1
     404:	90 df       	rcall	.-224    	; 0x326 <fir_i16_i8>
     406:	90 93 20 01 	sts	0x0120, r25
     40a:	80 93 1f 01 	sts	0x011F, r24
	// Check sensor
	adc_status = 0;
     40e:	10 92 65 01 	sts	0x0165, r1
	if (adc_normalized < 50)
     412:	80 91 63 01 	lds	r24, 0x0163
     416:	90 91 64 01 	lds	r25, 0x0164
     41a:	82 33       	cpi	r24, 0x32	; 50
     41c:	91 05       	cpc	r25, r1
     41e:	10 f4       	brcc	.+4      	; 0x424 <update_normalized_adc+0x6a>
		adc_status |= SENSOR_ERROR_NO_PRESENT;
     420:	81 e0       	ldi	r24, 0x01	; 1
     422:	04 c0       	rjmp	.+8      	; 0x42c <update_normalized_adc+0x72>
	else if (adc_normalized > 1000)
     424:	89 3e       	cpi	r24, 0xE9	; 233
     426:	93 40       	sbci	r25, 0x03	; 3
     428:	18 f0       	brcs	.+6      	; 0x430 <update_normalized_adc+0x76>
		adc_status |= SENSOR_ERROR_SHORTED;
     42a:	82 e0       	ldi	r24, 0x02	; 2
     42c:	80 93 65 01 	sts	0x0165, r24
     430:	08 95       	ret

00000432 <process_buttons>:
	uint8_t long_press_mask;
	uint8_t long_press_event_mask;
	
	uint16_t composed_state;
	
	raw_delayed = raw_current;
     432:	50 91 f2 00 	lds	r21, 0x00F2
	raw_delayed_inv = raw_current_inv;
     436:	30 91 78 00 	lds	r19, 0x0078
	raw_current = raw_button_state;
     43a:	90 91 c2 01 	lds	r25, 0x01C2
     43e:	90 93 f2 00 	sts	0x00F2, r25
	raw_current_inv = ~raw_current;
     442:	69 2f       	mov	r22, r25
     444:	60 95       	com	r22
     446:	60 93 78 00 	sts	0x0078, r22
	
	// Must be before press_timer update
	long_press_mask = (press_timer >= LONG_PRESS_DELAY) ? 0xFF : 0x00;
     44a:	80 91 f3 00 	lds	r24, 0x00F3
     44e:	8c 30       	cpi	r24, 0x0C	; 12
     450:	10 f0       	brcs	.+4      	; 0x456 <process_buttons+0x24>
     452:	2f ef       	ldi	r18, 0xFF	; 255
     454:	01 c0       	rjmp	.+2      	; 0x458 <process_buttons+0x26>
     456:	20 e0       	ldi	r18, 0x00	; 0
	
	if (raw_delayed != raw_current)
     458:	59 17       	cp	r21, r25
     45a:	19 f0       	breq	.+6      	; 0x462 <__stack+0x3>
	{
		press_timer = 0;
     45c:	10 92 f3 00 	sts	0x00F3, r1
     460:	05 c0       	rjmp	.+10     	; 0x46c <__stack+0xd>
	}
	else if (press_timer <= LONG_PRESS_DELAY)
     462:	8d 30       	cpi	r24, 0x0D	; 13
     464:	18 f4       	brcc	.+6      	; 0x46c <__stack+0xd>
	{
		press_timer++;
     466:	8f 5f       	subi	r24, 0xFF	; 255
     468:	80 93 f3 00 	sts	0x00F3, r24
	}
	
	// Must after press_timer update
	long_press_event_mask = (press_timer == LONG_PRESS_DELAY) ? 0xFF : 0x00;
     46c:	70 91 f3 00 	lds	r23, 0x00F3
     470:	7c 30       	cpi	r23, 0x0C	; 12
     472:	11 f4       	brne	.+4      	; 0x478 <__stack+0x19>
     474:	4f ef       	ldi	r20, 0xFF	; 255
     476:	01 c0       	rjmp	.+2      	; 0x47a <__stack+0x1b>
     478:	40 e0       	ldi	r20, 0x00	; 0
			
	button_action_down = raw_current & raw_delayed_inv;
     47a:	89 2f       	mov	r24, r25
     47c:	83 23       	and	r24, r19
     47e:	80 93 ef 00 	sts	0x00EF, r24
			
	if (press_timer > REPEAT_DELAY)
     482:	77 30       	cpi	r23, 0x07	; 7
     484:	08 f0       	brcs	.+2      	; 0x488 <__stack+0x29>
		raw_delayed_inv |= 0xFF;
     486:	3f ef       	ldi	r19, 0xFF	; 255
	
	button_action_rep = raw_current & raw_delayed_inv;
     488:	39 23       	and	r19, r25
     48a:	30 93 ee 00 	sts	0x00EE, r19
	
	button_action_up_short = raw_current_inv & raw_delayed & ~long_press_mask;
     48e:	20 95       	com	r18
     490:	56 23       	and	r21, r22
     492:	25 23       	and	r18, r21
     494:	20 93 ed 00 	sts	0x00ED, r18
	//button_action_up_long  = raw_current_inv & raw_delayed & long_press_mask;
	button_action_long  = raw_current & long_press_event_mask;
     498:	49 23       	and	r20, r25
     49a:	40 93 ec 00 	sts	0x00EC, r20
	
	// Compose button state
	composed_state = (button_action_down & (BD_MENU | BD_UP | BD_DOWN | BD_ROTFWD | BD_ROTREV | BD_HEATCTRL | BD_CYCLE));
     49e:	8d 7f       	andi	r24, 0xFD	; 253
     4a0:	90 e0       	ldi	r25, 0x00	; 0
	if (button_action_up_short & BD_MENU)
     4a2:	25 fd       	sbrc	r18, 5
		composed_state |= BS_MENU;
     4a4:	91 60       	ori	r25, 0x01	; 1
	//if (button_action_up_long & BD_MENU)
	if (button_action_long & BD_MENU)
     4a6:	45 fd       	sbrc	r20, 5
		composed_state |= BL_MENU;
     4a8:	92 60       	ori	r25, 0x02	; 2
	if (button_action_rep & BD_UP)
     4aa:	36 fd       	sbrc	r19, 6
		composed_state |= BR_UP;	
     4ac:	94 60       	ori	r25, 0x04	; 4
	if (button_action_rep & BD_DOWN)
     4ae:	37 fd       	sbrc	r19, 7
		composed_state |= BR_DOWN;
     4b0:	98 60       	ori	r25, 0x08	; 8

	button_state = composed_state;
     4b2:	90 93 f1 00 	sts	0x00F1, r25
     4b6:	80 93 f0 00 	sts	0x00F0, r24
     4ba:	08 95       	ret

000004bc <processRollControl>:
int16_t dbg_PID_output;


// Function to control motor rotation
void processRollControl(void)
{	
     4bc:	cf 93       	push	r28
	uint8_t beepState = 0;
	static uint8_t force_rotate = 0;
	
	// Process auto power off control
	if (autoPowerOffState & AUTO_POFF_ACTIVE)
     4be:	80 91 f4 00 	lds	r24, 0x00F4
     4c2:	80 ff       	sbrs	r24, 0
     4c4:	0f c0       	rjmp	.+30     	; 0x4e4 <processRollControl+0x28>
	{
		stopCycleRolling(1);	
     4c6:	81 e0       	ldi	r24, 0x01	; 1
     4c8:	1c d8       	rcall	.-4040   	; 0xfffff502 <__eeprom_end+0xff7ef4f8>
		if (adc_celsius <= POFF_MOTOR_TRESHOLD)
     4ca:	80 91 66 01 	lds	r24, 0x0166
     4ce:	90 91 67 01 	lds	r25, 0x0167
     4d2:	c3 97       	sbiw	r24, 0x33	; 51
     4d4:	08 f0       	brcs	.+2      	; 0x4d8 <processRollControl+0x1c>
     4d6:	65 c0       	rjmp	.+202    	; 0x5a2 <processRollControl+0xe6>
		{
			force_rotate = ROLL_FWD;		// Default direction
     4d8:	81 e0       	ldi	r24, 0x01	; 1
     4da:	80 93 f6 00 	sts	0x00F6, r24
			setMotorDirection(0);			// Stop the motor
     4de:	80 e0       	ldi	r24, 0x00	; 0
     4e0:	ef d7       	rcall	.+4062   	; 0x14c0 <setMotorDirection>
     4e2:	5f c0       	rjmp	.+190    	; 0x5a2 <processRollControl+0xe6>
		}
	}
	else
	{
		// Control direction by buttons
		if ((button_action_down & (BD_ROTFWD | BD_ROTREV)) == (BD_ROTFWD | BD_ROTREV))
     4e4:	80 91 ef 00 	lds	r24, 0x00EF
     4e8:	98 2f       	mov	r25, r24
     4ea:	94 71       	andi	r25, 0x14	; 20
     4ec:	94 31       	cpi	r25, 0x14	; 20
     4ee:	11 f4       	brne	.+4      	; 0x4f4 <processRollControl+0x38>
		{
			// Stop
			setMotorDirection(0);
     4f0:	80 e0       	ldi	r24, 0x00	; 0
     4f2:	03 c0       	rjmp	.+6      	; 0x4fa <processRollControl+0x3e>
			beepState |= 0x01;			// Stopped
		}
		else if (button_action_down & BD_ROTFWD)
     4f4:	82 ff       	sbrs	r24, 2
     4f6:	04 c0       	rjmp	.+8      	; 0x500 <processRollControl+0x44>
		{
			setMotorDirection(ROLL_FWD);	
     4f8:	81 e0       	ldi	r24, 0x01	; 1
     4fa:	e2 d7       	rcall	.+4036   	; 0x14c0 <setMotorDirection>
			beepState |= 0x01;			// pressed FWD button
     4fc:	c1 e0       	ldi	r28, 0x01	; 1
     4fe:	13 c0       	rjmp	.+38     	; 0x526 <processRollControl+0x6a>
		}		
		else if (button_action_down & BD_ROTREV)
     500:	84 ff       	sbrs	r24, 4
     502:	04 c0       	rjmp	.+8      	; 0x50c <processRollControl+0x50>
		{
			setMotorDirection(ROLL_REV);
     504:	82 e0       	ldi	r24, 0x02	; 2
     506:	dc d7       	rcall	.+4024   	; 0x14c0 <setMotorDirection>
			beepState |= 0x02;			// pressed REV button
     508:	c2 e0       	ldi	r28, 0x02	; 2
     50a:	0d c0       	rjmp	.+26     	; 0x526 <processRollControl+0x6a>
		}		
		else if (button_action_long & BD_CYCLE)
     50c:	80 91 ec 00 	lds	r24, 0x00EC
     510:	83 ff       	sbrs	r24, 3
     512:	04 c0       	rjmp	.+8      	; 0x51c <processRollControl+0x60>
		{
			stopCycleRolling(1);		// Reset points and disable CYCLE mode (if was enabled)
     514:	81 e0       	ldi	r24, 0x01	; 1
     516:	f5 d7       	rcall	.+4074   	; 0x1502 <stopCycleRolling>
			beepState |= 0x08;			// reset of points by long pressing of ROLL button
     518:	c8 e0       	ldi	r28, 0x08	; 8
     51a:	05 c0       	rjmp	.+10     	; 0x526 <processRollControl+0x6a>
		}
		else if (force_rotate)
     51c:	80 91 f6 00 	lds	r24, 0x00F6
     520:	81 11       	cpse	r24, r1
		{
			// Auto power off mode was exited by pressing some other button, not direction buttons
			// Start roll, but do not beep in this case
			setMotorDirection(force_rotate);
     522:	ce d7       	rcall	.+3996   	; 0x14c0 <setMotorDirection>


// Function to control motor rotation
void processRollControl(void)
{	
	uint8_t beepState = 0;
     524:	c0 e0       	ldi	r28, 0x00	; 0
		{
			// Auto power off mode was exited by pressing some other button, not direction buttons
			// Start roll, but do not beep in this case
			setMotorDirection(force_rotate);
		}
		force_rotate = 0;		// First normal pass will clear 
     526:	10 92 f6 00 	sts	0x00F6, r1
			
		if (button_action_up_short & BD_CYCLE)
     52a:	80 91 ed 00 	lds	r24, 0x00ED
     52e:	83 ff       	sbrs	r24, 3
     530:	0e c0       	rjmp	.+28     	; 0x54e <processRollControl+0x92>
		{
			if (rollState & ROLL_CYCLE)
     532:	80 91 10 01 	lds	r24, 0x0110
     536:	82 ff       	sbrs	r24, 2
     538:	04 c0       	rjmp	.+8      	; 0x542 <processRollControl+0x86>
			{
				stopCycleRolling(0);
     53a:	80 e0       	ldi	r24, 0x00	; 0
     53c:	e2 d7       	rcall	.+4036   	; 0x1502 <stopCycleRolling>
				beepState |= 0x20;		// stopped cycle
     53e:	c0 62       	ori	r28, 0x20	; 32
     540:	06 c0       	rjmp	.+12     	; 0x54e <processRollControl+0x92>
			}
			else if (startCycleRolling())
     542:	1b d8       	rcall	.-4042   	; 0xfffff57a <__eeprom_end+0xff7ef570>
     544:	88 23       	and	r24, r24
     546:	11 f0       	breq	.+4      	; 0x54c <processRollControl+0x90>
			{
				beepState |= 0x10;		// started cycle
     548:	c0 61       	ori	r28, 0x10	; 16
     54a:	01 c0       	rjmp	.+2      	; 0x54e <processRollControl+0x92>
			}
			else
			{
				beepState |= 0x40;		// failed to start cycle
     54c:	c0 64       	ori	r28, 0x40	; 64
			}			
		}		
			
		if (rollState & ROLL_DIR_CHANGED)
     54e:	80 91 10 01 	lds	r24, 0x0110
     552:	85 ff       	sbrs	r24, 5
     554:	04 c0       	rjmp	.+8      	; 0x55e <processRollControl+0xa2>
		{
			rollState &= ~ROLL_DIR_CHANGED;
     556:	8f 7d       	andi	r24, 0xDF	; 223
     558:	80 93 10 01 	sts	0x0110, r24
			beepState |= 0x04;	
     55c:	c4 60       	ori	r28, 0x04	; 4
		}
			
		if (rollState & CYCLE_ROLL_DONE)
     55e:	80 91 10 01 	lds	r24, 0x0110
     562:	84 ff       	sbrs	r24, 4
     564:	04 c0       	rjmp	.+8      	; 0x56e <processRollControl+0xb2>
		{
			rollState &= ~CYCLE_ROLL_DONE;
     566:	8f 7e       	andi	r24, 0xEF	; 239
     568:	80 93 10 01 	sts	0x0110, r24
			beepState |= 0x80;	
     56c:	c0 68       	ori	r28, 0x80	; 128
		}		
			
		//-----------//
			
		if (beepState & 0x80)		// Roll cycle done
     56e:	c7 ff       	sbrs	r28, 7
     570:	06 c0       	rjmp	.+12     	; 0x57e <processRollControl+0xc2>
		{
			SetBeeperFreq(1000);
     572:	88 ee       	ldi	r24, 0xE8	; 232
     574:	93 e0       	ldi	r25, 0x03	; 3
     576:	b6 d9       	rcall	.-3220   	; 0xfffff8e4 <__eeprom_end+0xff7ef8da>
			StartBeep(200);
     578:	88 ec       	ldi	r24, 0xC8	; 200
     57a:	90 e0       	ldi	r25, 0x00	; 0
     57c:	11 c0       	rjmp	.+34     	; 0x5a0 <processRollControl+0xe4>
		}		
		else if (beepState & 0x40)	// Roll cycle start fail
     57e:	c6 ff       	sbrs	r28, 6
     580:	03 c0       	rjmp	.+6      	; 0x588 <processRollControl+0xcc>
		{
			SetBeeperFreq(500);
     582:	84 ef       	ldi	r24, 0xF4	; 244
     584:	91 e0       	ldi	r25, 0x01	; 1
     586:	09 c0       	rjmp	.+18     	; 0x59a <processRollControl+0xde>
			StartBeep(50);
		} 
		else if (beepState & 0x08)	// Reset points
     588:	c3 ff       	sbrs	r28, 3
     58a:	03 c0       	rjmp	.+6      	; 0x592 <processRollControl+0xd6>
		{
			SetBeeperFreq(800);
     58c:	80 e2       	ldi	r24, 0x20	; 32
     58e:	93 e0       	ldi	r25, 0x03	; 3
     590:	04 c0       	rjmp	.+8      	; 0x59a <processRollControl+0xde>
			StartBeep(50);
		}							// Other
		else if ( beepState & (0x01 | 0x02 | 0x10 | 0x20 | 0x04) )
     592:	c7 73       	andi	r28, 0x37	; 55
     594:	31 f0       	breq	.+12     	; 0x5a2 <processRollControl+0xe6>
		{
			SetBeeperFreq(1000);
     596:	88 ee       	ldi	r24, 0xE8	; 232
     598:	93 e0       	ldi	r25, 0x03	; 3
     59a:	a4 d9       	rcall	.-3256   	; 0xfffff8e4 <__eeprom_end+0xff7ef8da>
			StartBeep(50);	
     59c:	82 e3       	ldi	r24, 0x32	; 50
     59e:	90 e0       	ldi	r25, 0x00	; 0
     5a0:	c1 d9       	rcall	.-3198   	; 0xfffff924 <__eeprom_end+0xff7ef91a>
		}			
			
	}

	//----- LED indication ------//
	clearExtraLeds(LED_ROTFWD | LED_ROTREV);
     5a2:	88 e1       	ldi	r24, 0x18	; 24
     5a4:	b3 d2       	rcall	.+1382   	; 0xb0c <clearExtraLeds>
	if (rollState & ROLL_FWD)
     5a6:	80 91 10 01 	lds	r24, 0x0110
     5aa:	80 ff       	sbrs	r24, 0
     5ac:	02 c0       	rjmp	.+4      	; 0x5b2 <processRollControl+0xf6>
		setExtraLeds(LED_ROTFWD);
     5ae:	88 e0       	ldi	r24, 0x08	; 8
     5b0:	03 c0       	rjmp	.+6      	; 0x5b8 <processRollControl+0xfc>
	else if (rollState & ROLL_REV)
     5b2:	81 ff       	sbrs	r24, 1
     5b4:	03 c0       	rjmp	.+6      	; 0x5bc <processRollControl+0x100>
		setExtraLeds(LED_ROTREV);
     5b6:	80 e1       	ldi	r24, 0x10	; 16
}
     5b8:	cf 91       	pop	r28
	//----- LED indication ------//
	clearExtraLeds(LED_ROTFWD | LED_ROTREV);
	if (rollState & ROLL_FWD)
		setExtraLeds(LED_ROTFWD);
	else if (rollState & ROLL_REV)
		setExtraLeds(LED_ROTREV);
     5ba:	a2 c2       	rjmp	.+1348   	; 0xb00 <setExtraLeds>
}
     5bc:	cf 91       	pop	r28
     5be:	08 95       	ret

000005c0 <processPID>:




uint8_t processPID(uint16_t setPoint, uint16_t processValue)
{
     5c0:	ef 92       	push	r14
     5c2:	ff 92       	push	r15
     5c4:	0f 93       	push	r16
     5c6:	1f 93       	push	r17
     5c8:	cf 93       	push	r28
     5ca:	df 93       	push	r29
     5cc:	8b 01       	movw	r16, r22
	int16_t error, p_term, i_term, d_term, temp;
	static uint16_t lastProcessValue;
	static int16_t integAcc = 0;
	
	error = setPoint - processValue;
     5ce:	86 1b       	sub	r24, r22
     5d0:	97 0b       	sbc	r25, r23
	
	
	//------ Calculate P term --------//
	
	if (error > 100 )
     5d2:	85 36       	cpi	r24, 0x65	; 101
     5d4:	91 05       	cpc	r25, r1
     5d6:	5c f4       	brge	.+22     	; 0x5ee <processPID+0x2e>
	{
		p_term = 2000;	
	}
	else if (error < -100 )
     5d8:	8c 39       	cpi	r24, 0x9C	; 156
     5da:	2f ef       	ldi	r18, 0xFF	; 255
     5dc:	92 07       	cpc	r25, r18
     5de:	54 f0       	brlt	.+20     	; 0x5f4 <processPID+0x34>
	{
		p_term = -2000 ;	
	}
	else
	{
		p_term = error * Kp;
     5e0:	2a e0       	ldi	r18, 0x0A	; 10
     5e2:	28 9f       	mul	r18, r24
     5e4:	e0 01       	movw	r28, r0
     5e6:	29 9f       	mul	r18, r25
     5e8:	d0 0d       	add	r29, r0
     5ea:	11 24       	eor	r1, r1
     5ec:	05 c0       	rjmp	.+10     	; 0x5f8 <processPID+0x38>
	
	//------ Calculate P term --------//
	
	if (error > 100 )
	{
		p_term = 2000;	
     5ee:	c0 ed       	ldi	r28, 0xD0	; 208
     5f0:	d7 e0       	ldi	r29, 0x07	; 7
     5f2:	02 c0       	rjmp	.+4      	; 0x5f8 <processPID+0x38>
	}
	else if (error < -100 )
	{
		p_term = -2000 ;	
     5f4:	c0 e3       	ldi	r28, 0x30	; 48
     5f6:	d8 ef       	ldi	r29, 0xF8	; 248
		p_term = error * Kp;
	}
	
	//------ Calculate I term --------//

	integAcc += error;
     5f8:	20 91 f7 00 	lds	r18, 0x00F7
     5fc:	30 91 f8 00 	lds	r19, 0x00F8
     600:	28 0f       	add	r18, r24
     602:	39 1f       	adc	r19, r25
	
	if (integAcc > 1000 )
     604:	29 3e       	cpi	r18, 0xE9	; 233
     606:	83 e0       	ldi	r24, 0x03	; 3
     608:	38 07       	cpc	r19, r24
     60a:	3c f0       	brlt	.+14     	; 0x61a <processPID+0x5a>
	{
		integAcc = 1000;
     60c:	88 ee       	ldi	r24, 0xE8	; 232
     60e:	93 e0       	ldi	r25, 0x03	; 3
     610:	90 93 f8 00 	sts	0x00F8, r25
     614:	80 93 f7 00 	sts	0x00F7, r24
     618:	0b c0       	rjmp	.+22     	; 0x630 <processPID+0x70>
	}
	else if (integAcc < 0)
     61a:	37 fd       	sbrc	r19, 7
     61c:	05 c0       	rjmp	.+10     	; 0x628 <processPID+0x68>
		p_term = error * Kp;
	}
	
	//------ Calculate I term --------//

	integAcc += error;
     61e:	30 93 f8 00 	sts	0x00F8, r19
     622:	20 93 f7 00 	sts	0x00F7, r18
     626:	04 c0       	rjmp	.+8      	; 0x630 <processPID+0x70>
	{
		integAcc = 1000;
	}
	else if (integAcc < 0)
	{
		integAcc = 0;
     628:	10 92 f8 00 	sts	0x00F8, r1
     62c:	10 92 f7 00 	sts	0x00F7, r1
	}
	i_term = integAcc * Ki;
     630:	20 91 f7 00 	lds	r18, 0x00F7
     634:	30 91 f8 00 	lds	r19, 0x00F8
     638:	45 e0       	ldi	r20, 0x05	; 5
     63a:	42 9f       	mul	r20, r18
     63c:	c0 01       	movw	r24, r0
     63e:	43 9f       	mul	r20, r19
     640:	90 0d       	add	r25, r0
     642:	11 24       	eor	r1, r1
	i_term /= 20;
     644:	64 e1       	ldi	r22, 0x14	; 20
     646:	70 e0       	ldi	r23, 0x00	; 0
     648:	f0 d9       	rcall	.-3104   	; 0xfffffa2a <__eeprom_end+0xff7efa20>
     64a:	7b 01       	movw	r14, r22
	
	
	//------ Calculate D term --------//
	// 13_1
	d_term = fir_i16_i8((lastProcessValue - processValue)*10, pid_dterm_buffer, &dterm_filter_core);
     64c:	80 91 f9 00 	lds	r24, 0x00F9
     650:	90 91 fa 00 	lds	r25, 0x00FA
     654:	80 1b       	sub	r24, r16
     656:	91 0b       	sbc	r25, r17
     658:	49 e7       	ldi	r20, 0x79	; 121
     65a:	50 e0       	ldi	r21, 0x00	; 0
     65c:	63 ea       	ldi	r22, 0xA3	; 163
     65e:	71 e0       	ldi	r23, 0x01	; 1
     660:	2a e0       	ldi	r18, 0x0A	; 10
     662:	fc 01       	movw	r30, r24
     664:	2e 9f       	mul	r18, r30
     666:	c0 01       	movw	r24, r0
     668:	2f 9f       	mul	r18, r31
     66a:	90 0d       	add	r25, r0
     66c:	11 24       	eor	r1, r1
     66e:	5b de       	rcall	.-842    	; 0x326 <fir_i16_i8>
	lastProcessValue = processValue;
     670:	10 93 fa 00 	sts	0x00FA, r17
     674:	00 93 f9 00 	sts	0x00F9, r16
	d_term = Kd * d_term;
     678:	22 e3       	ldi	r18, 0x32	; 50
     67a:	28 9f       	mul	r18, r24
     67c:	f0 01       	movw	r30, r0
     67e:	29 9f       	mul	r18, r25
     680:	f0 0d       	add	r31, r0
     682:	11 24       	eor	r1, r1
	
	//--------- Summ terms -----------//
	temp = (p_term + i_term + d_term) / SCALING_FACTOR;
     684:	ce 01       	movw	r24, r28
     686:	8e 0d       	add	r24, r14
     688:	9f 1d       	adc	r25, r15
     68a:	8e 0f       	add	r24, r30
     68c:	9f 1f       	adc	r25, r31
     68e:	65 e0       	ldi	r22, 0x05	; 5
     690:	70 e0       	ldi	r23, 0x00	; 0
     692:	cb d9       	rcall	.-3178   	; 0xfffffa2a <__eeprom_end+0xff7efa20>
     694:	9b 01       	movw	r18, r22
     696:	77 ff       	sbrs	r23, 7
     698:	02 c0       	rjmp	.+4      	; 0x69e <processPID+0xde>
     69a:	20 e0       	ldi	r18, 0x00	; 0
     69c:	30 e0       	ldi	r19, 0x00	; 0
     69e:	c9 01       	movw	r24, r18
     6a0:	25 36       	cpi	r18, 0x65	; 101
     6a2:	31 05       	cpc	r19, r1
     6a4:	14 f0       	brlt	.+4      	; 0x6aa <processPID+0xea>
     6a6:	84 e6       	ldi	r24, 0x64	; 100
     6a8:	90 e0       	ldi	r25, 0x00	; 0
		temp = 0;
	}
	
	
	//------- Debug --------//
	dbg_PID_p_term = p_term;
     6aa:	d0 93 9e 01 	sts	0x019E, r29
     6ae:	c0 93 9d 01 	sts	0x019D, r28
	dbg_PID_d_term = d_term;
     6b2:	f0 93 ac 01 	sts	0x01AC, r31
     6b6:	e0 93 ab 01 	sts	0x01AB, r30
	dbg_PID_i_term = i_term;
     6ba:	f0 92 a2 01 	sts	0x01A2, r15
     6be:	e0 92 a1 01 	sts	0x01A1, r14
	dbg_PID_output = temp;
     6c2:	90 93 9c 01 	sts	0x019C, r25
     6c6:	80 93 9b 01 	sts	0x019B, r24
	
	
	return temp;
	
}
     6ca:	df 91       	pop	r29
     6cc:	cf 91       	pop	r28
     6ce:	1f 91       	pop	r17
     6d0:	0f 91       	pop	r16
     6d2:	ff 90       	pop	r15
     6d4:	ef 90       	pop	r14
     6d6:	08 95       	ret

000006d8 <processHeaterControl>:
	processPID(0,adc_filtered);			// oversampled PID control
}


void processHeaterControl(void)
{
     6d8:	0f 93       	push	r16
     6da:	1f 93       	push	r17
     6dc:	cf 93       	push	r28
     6de:	df 93       	push	r29
	uint16_t setPoint;
	uint16_t processValue;
	uint16_t pid_output;
	
	// Process heater ON/OFF control by button
	if (button_state & BD_HEATCTRL)
     6e0:	80 91 f0 00 	lds	r24, 0x00F0
     6e4:	80 ff       	sbrs	r24, 0
     6e6:	0b c0       	rjmp	.+22     	; 0x6fe <processHeaterControl+0x26>
	{
		heaterState ^= HEATER_ENABLED;
     6e8:	80 91 f5 00 	lds	r24, 0x00F5
     6ec:	91 e0       	ldi	r25, 0x01	; 1
     6ee:	89 27       	eor	r24, r25
     6f0:	80 93 f5 00 	sts	0x00F5, r24
		// Force update heater power
		sys_timers.flags |= UPDATE_PID;		// Not very good approach if UPDATE_PID flag is used somewhere else
     6f4:	80 91 8f 00 	lds	r24, 0x008F
     6f8:	80 64       	ori	r24, 0x40	; 64
     6fa:	80 93 8f 00 	sts	0x008F, r24
	}
	
	// Process auto power off control and sensor errors
	if ((autoPowerOffState & AUTO_POFF_ACTIVE) || (adc_status & (SENSOR_ERROR_NO_PRESENT | SENSOR_ERROR_SHORTED)))
     6fe:	80 91 f4 00 	lds	r24, 0x00F4
     702:	80 fd       	sbrc	r24, 0
     704:	04 c0       	rjmp	.+8      	; 0x70e <processHeaterControl+0x36>
     706:	80 91 65 01 	lds	r24, 0x0165
     70a:	83 70       	andi	r24, 0x03	; 3
     70c:	29 f0       	breq	.+10     	; 0x718 <processHeaterControl+0x40>
	{
		heaterState &= ~HEATER_ENABLED;
     70e:	80 91 f5 00 	lds	r24, 0x00F5
     712:	8e 7f       	andi	r24, 0xFE	; 254
     714:	80 93 f5 00 	sts	0x00F5, r24
	}		
	
	// Check if heater control should be updated
	// PID call interval is a multiple of Celsius update interval. 
	if (sys_timers.flags & UPDATE_PID)
     718:	80 91 8f 00 	lds	r24, 0x008F
     71c:	86 ff       	sbrs	r24, 6
     71e:	39 c0       	rjmp	.+114    	; 0x792 <processHeaterControl+0xba>
	{
		// Convert temperature setup to equal ADC value
		set_value_adc = conv_Celsius_to_ADC(p.setup_temp_value);					
     720:	80 91 97 01 	lds	r24, 0x0197
     724:	90 e0       	ldi	r25, 0x00	; 0
     726:	57 dd       	rcall	.-1362   	; 0x1d6 <conv_Celsius_to_ADC>

		setPoint = set_value_adc * 4;		
     728:	ec 01       	movw	r28, r24
     72a:	cc 0f       	add	r28, r28
     72c:	dd 1f       	adc	r29, r29
     72e:	cc 0f       	add	r28, r28
     730:	dd 1f       	adc	r29, r29
		setPoint >>= 1;
     732:	d6 95       	lsr	r29
     734:	c7 95       	ror	r28
		processValue = adc_filtered >> 1;	// normal PID control
     736:	00 91 1f 01 	lds	r16, 0x011F
     73a:	10 91 20 01 	lds	r17, 0x0120
     73e:	16 95       	lsr	r17
     740:	07 95       	ror	r16
		
		// Process PID
		pid_output = processPID(setPoint, processValue);		
     742:	b8 01       	movw	r22, r16
     744:	ce 01       	movw	r24, r28
     746:	3c df       	rcall	.-392    	; 0x5c0 <processPID>
					
		// If heater is disabled, override output
		if (!(heaterState & HEATER_ENABLED))
     748:	90 91 f5 00 	lds	r25, 0x00F5
     74c:	90 ff       	sbrs	r25, 0
     74e:	02 c0       	rjmp	.+4      	; 0x754 <processHeaterControl+0x7c>
		setPoint = set_value_adc * 4;		
		setPoint >>= 1;
		processValue = adc_filtered >> 1;	// normal PID control
		
		// Process PID
		pid_output = processPID(setPoint, processValue);		
     750:	90 e0       	ldi	r25, 0x00	; 0
     752:	02 c0       	rjmp	.+4      	; 0x758 <processHeaterControl+0x80>
					
		// If heater is disabled, override output
		if (!(heaterState & HEATER_ENABLED))
			pid_output = 0;
     754:	80 e0       	ldi	r24, 0x00	; 0
     756:	90 e0       	ldi	r25, 0x00	; 0
			
		// Set new heater power value	
		setHeaterPower(pid_output);	
     758:	a6 d6       	rcall	.+3404   	; 0x14a6 <setHeaterPower>
		
		//------- Debug --------//		
		// PID input:
		dbg_SetPointCelsius = (heaterState & HEATER_ENABLED) ? p.setup_temp_value : 0;
     75a:	80 91 f5 00 	lds	r24, 0x00F5
     75e:	98 2f       	mov	r25, r24
     760:	91 70       	andi	r25, 0x01	; 1
     762:	80 ff       	sbrs	r24, 0
     764:	03 c0       	rjmp	.+6      	; 0x76c <processHeaterControl+0x94>
     766:	80 91 97 01 	lds	r24, 0x0197
     76a:	01 c0       	rjmp	.+2      	; 0x76e <processHeaterControl+0x96>
     76c:	80 e0       	ldi	r24, 0x00	; 0
     76e:	80 93 90 01 	sts	0x0190, r24
		dbg_SetPointPID = (heaterState & HEATER_ENABLED) ? setPoint : 0;
     772:	91 11       	cpse	r25, r1
     774:	02 c0       	rjmp	.+4      	; 0x77a <processHeaterControl+0xa2>
     776:	c0 e0       	ldi	r28, 0x00	; 0
     778:	d0 e0       	ldi	r29, 0x00	; 0
     77a:	d0 93 ae 01 	sts	0x01AE, r29
     77e:	c0 93 ad 01 	sts	0x01AD, r28
		dbg_RealTempCelsius = adc_filtered;
     782:	80 91 1f 01 	lds	r24, 0x011F
     786:	80 93 af 01 	sts	0x01AF, r24
		dbg_RealTempPID = processValue;
     78a:	10 93 a0 01 	sts	0x01A0, r17
     78e:	00 93 9f 01 	sts	0x019F, r16
		
	}	
		
	
	//----- LED indication ------//
	if (heaterState & HEATER_ENABLED)
     792:	80 91 f5 00 	lds	r24, 0x00F5
     796:	80 ff       	sbrs	r24, 0
     798:	06 c0       	rjmp	.+12     	; 0x7a6 <processHeaterControl+0xce>
		setExtraLeds(LED_HEATER);
     79a:	84 e0       	ldi	r24, 0x04	; 4
	else
		clearExtraLeds(LED_HEATER);
	
}
     79c:	df 91       	pop	r29
     79e:	cf 91       	pop	r28
     7a0:	1f 91       	pop	r17
     7a2:	0f 91       	pop	r16
	}	
		
	
	//----- LED indication ------//
	if (heaterState & HEATER_ENABLED)
		setExtraLeds(LED_HEATER);
     7a4:	ad c1       	rjmp	.+858    	; 0xb00 <setExtraLeds>
	else
		clearExtraLeds(LED_HEATER);
     7a6:	84 e0       	ldi	r24, 0x04	; 4
	
}
     7a8:	df 91       	pop	r29
     7aa:	cf 91       	pop	r28
     7ac:	1f 91       	pop	r17
     7ae:	0f 91       	pop	r16
	
	//----- LED indication ------//
	if (heaterState & HEATER_ENABLED)
		setExtraLeds(LED_HEATER);
	else
		clearExtraLeds(LED_HEATER);
     7b0:	ad c1       	rjmp	.+858    	; 0xb0c <clearExtraLeds>

000007b2 <heaterInit>:


void heaterInit(void)
{
	//processPID(0,adc_normalized);
	processPID(0,adc_filtered);			// oversampled PID control
     7b2:	60 91 1f 01 	lds	r22, 0x011F
     7b6:	70 91 20 01 	lds	r23, 0x0120
     7ba:	80 e0       	ldi	r24, 0x00	; 0
     7bc:	90 e0       	ldi	r25, 0x00	; 0
     7be:	00 cf       	rjmp	.-512    	; 0x5c0 <processPID>

000007c0 <processHeaterAlerts>:

// Function to process all heater alerts:
//	- getting near to desired temperature
//	- continuous heating when disabled
void processHeaterAlerts(void)
{
     7c0:	cf 93       	push	r28
     7c2:	df 93       	push	r29
	static uint8_t tempAlertRange = TEMP_ALERT_RANGE;
	static uint16_t refCapturedTemp = 0xFFFF;
	uint16_t currentTemperature = adc_celsius;
     7c4:	c0 91 66 01 	lds	r28, 0x0166
     7c8:	d0 91 67 01 	lds	r29, 0x0167
	
	
	// Indicate reaching of desired temperature
	if ( (currentTemperature > p.setup_temp_value - tempAlertRange) && (currentTemperature < p.setup_temp_value + tempAlertRange) )
     7cc:	20 91 97 01 	lds	r18, 0x0197
     7d0:	30 e0       	ldi	r19, 0x00	; 0
     7d2:	60 91 80 00 	lds	r22, 0x0080
     7d6:	86 2f       	mov	r24, r22
     7d8:	90 e0       	ldi	r25, 0x00	; 0
     7da:	a9 01       	movw	r20, r18
     7dc:	48 1b       	sub	r20, r24
     7de:	59 0b       	sbc	r21, r25
     7e0:	4c 17       	cp	r20, r28
     7e2:	5d 07       	cpc	r21, r29
     7e4:	98 f4       	brcc	.+38     	; 0x80c <processHeaterAlerts+0x4c>
     7e6:	82 0f       	add	r24, r18
     7e8:	93 1f       	adc	r25, r19
     7ea:	c8 17       	cp	r28, r24
     7ec:	d9 07       	cpc	r29, r25
     7ee:	70 f4       	brcc	.+28     	; 0x80c <processHeaterAlerts+0x4c>
	{
		if ((tempAlertRange == TEMP_ALERT_RANGE) && (heaterState & HEATER_ENABLED))
     7f0:	65 30       	cpi	r22, 0x05	; 5
     7f2:	51 f4       	brne	.+20     	; 0x808 <processHeaterAlerts+0x48>
     7f4:	80 91 f5 00 	lds	r24, 0x00F5
     7f8:	80 ff       	sbrs	r24, 0
     7fa:	06 c0       	rjmp	.+12     	; 0x808 <processHeaterAlerts+0x48>
		{
			SetBeeperFreq(1000);
     7fc:	88 ee       	ldi	r24, 0xE8	; 232
     7fe:	93 e0       	ldi	r25, 0x03	; 3
     800:	71 d8       	rcall	.-3870   	; 0xfffff8e4 <__eeprom_end+0xff7ef8da>
			StartBeep(400);
     802:	80 e9       	ldi	r24, 0x90	; 144
     804:	91 e0       	ldi	r25, 0x01	; 1
     806:	8e d8       	rcall	.-3812   	; 0xfffff924 <__eeprom_end+0xff7ef91a>
		}
		// Add some hysteresis
		tempAlertRange = TEMP_ALERT_RANGE + TEMP_ALERT_HYST;
     808:	8a e0       	ldi	r24, 0x0A	; 10
     80a:	01 c0       	rjmp	.+2      	; 0x80e <processHeaterAlerts+0x4e>
	}			
	else
	{
		tempAlertRange = TEMP_ALERT_RANGE;
     80c:	85 e0       	ldi	r24, 0x05	; 5
     80e:	80 93 80 00 	sts	0x0080, r24
	// Growing temperature with heater disabled alert 
	// This alert is done regardless of global sound enable
	// A false triggering may occur if ambient temperature grows.
	// To reset the warning in this case just turn on heater for at least one systimer tick (50ms)
	// If heater is enabled, it is implied that user controls heating process
	if (heaterState & (HEATER_ENABLED | CALIBRATION_ACTIVE))
     812:	80 91 f5 00 	lds	r24, 0x00F5
     816:	83 70       	andi	r24, 0x03	; 3
     818:	09 f0       	breq	.+2      	; 0x81c <processHeaterAlerts+0x5c>
     81a:	0b c0       	rjmp	.+22     	; 0x832 <processHeaterAlerts+0x72>
	{
		// Heater enabled, just save current temperature as reference
		// Same if calibration in progress, even if heater is disabled
		refCapturedTemp = currentTemperature;
	}
	else if (sys_timers.flags & EXPIRED_10SEC)
     81c:	80 91 8f 00 	lds	r24, 0x008F
     820:	81 ff       	sbrs	r24, 1
     822:	19 c0       	rjmp	.+50     	; 0x856 <processHeaterAlerts+0x96>
	{
		// Heater disabled. If temperature is falling,
		if (currentTemperature < refCapturedTemp)
     824:	80 91 81 00 	lds	r24, 0x0081
     828:	90 91 82 00 	lds	r25, 0x0082
     82c:	c8 17       	cp	r28, r24
     82e:	d9 07       	cpc	r29, r25
     830:	28 f4       	brcc	.+10     	; 0x83c <processHeaterAlerts+0x7c>
		{
			// save current temperature as reference
			refCapturedTemp = currentTemperature;
     832:	d0 93 82 00 	sts	0x0082, r29
     836:	c0 93 81 00 	sts	0x0081, r28
     83a:	0d c0       	rjmp	.+26     	; 0x856 <processHeaterAlerts+0x96>
		else
		{
			// Heater is disabled. If current temperature is higher than reference + some safe interval,
			// there might be a hardware failure - short circuit, etc
			// BEEP like a devil  }:-(
			if (currentTemperature >= (refCapturedTemp + SAFE_TEMP_INTERVAL))
     83c:	44 96       	adiw	r24, 0x14	; 20
     83e:	c8 17       	cp	r28, r24
     840:	d9 07       	cpc	r29, r25
     842:	48 f0       	brcs	.+18     	; 0x856 <processHeaterAlerts+0x96>
			{
				// Enable beeper output regardless of menu setting
				OverrideSoundDisable();
     844:	81 d8       	rcall	.-3838   	; 0xfffff948 <__eeprom_end+0xff7ef93e>
				SetBeeperFreq(1500);
     846:	8c ed       	ldi	r24, 0xDC	; 220
     848:	95 e0       	ldi	r25, 0x05	; 5
     84a:	4c d8       	rcall	.-3944   	; 0xfffff8e4 <__eeprom_end+0xff7ef8da>
				StartBeep(5000);	
     84c:	88 e8       	ldi	r24, 0x88	; 136
     84e:	93 e1       	ldi	r25, 0x13	; 19
			}
		}
	}
	

}
     850:	df 91       	pop	r29
     852:	cf 91       	pop	r28
			if (currentTemperature >= (refCapturedTemp + SAFE_TEMP_INTERVAL))
			{
				// Enable beeper output regardless of menu setting
				OverrideSoundDisable();
				SetBeeperFreq(1500);
				StartBeep(5000);	
     854:	67 c8       	rjmp	.-3890   	; 0xfffff924 <__eeprom_end+0xff7ef91a>
			}
		}
	}
	

}
     856:	df 91       	pop	r29
     858:	cf 91       	pop	r28
     85a:	08 95       	ret

0000085c <restoreGlobalParams>:


void restoreGlobalParams(void)
{
	eeprom_read_block(&p,&eeGlobalParams,sizeof(eeGlobalParams));
     85c:	44 e0       	ldi	r20, 0x04	; 4
     85e:	50 e0       	ldi	r21, 0x00	; 0
     860:	66 e0       	ldi	r22, 0x06	; 6
     862:	70 e0       	ldi	r23, 0x00	; 0
     864:	87 e9       	ldi	r24, 0x97	; 151
     866:	91 e0       	ldi	r25, 0x01	; 1
     868:	52 d9       	rcall	.-3420   	; 0xfffffb0e <__eeprom_end+0xff7efb04>
	eeprom_read_block(&cp,&eeCalibrationParams,sizeof(eeCalibrationParams));
     86a:	46 e0       	ldi	r20, 0x06	; 6
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	60 e0       	ldi	r22, 0x00	; 0
     870:	70 e0       	ldi	r23, 0x00	; 0
     872:	81 e9       	ldi	r24, 0x91	; 145
     874:	91 e0       	ldi	r25, 0x01	; 1
     876:	4b c9       	rjmp	.-3434   	; 0xfffffb0e <__eeprom_end+0xff7efb04>

00000878 <saveCalibrationToEEPROM>:
}


void saveCalibrationToEEPROM(void)
{
	eeprom_update_block(&cp,&eeCalibrationParams,sizeof(eeCalibrationParams));	
     878:	46 e0       	ldi	r20, 0x06	; 6
     87a:	50 e0       	ldi	r21, 0x00	; 0
     87c:	60 e0       	ldi	r22, 0x00	; 0
     87e:	70 e0       	ldi	r23, 0x00	; 0
     880:	81 e9       	ldi	r24, 0x91	; 145
     882:	91 e0       	ldi	r25, 0x01	; 1
     884:	54 c9       	rjmp	.-3416   	; 0xfffffb2e <__eeprom_end+0xff7efb24>

00000886 <exitPowerOff>:

void exitPowerOff(void)
{

	// Put all ports into HI-Z
	DDRB = 0x00;
     886:	17 ba       	out	0x17, r1	; 23
	PORTB = 0x00;
     888:	18 ba       	out	0x18, r1	; 24
	DDRC = 0x00;
     88a:	14 ba       	out	0x14, r1	; 20
	PORTC = 0x00;
     88c:	15 ba       	out	0x15, r1	; 21
	DDRD = 0x00;
     88e:	11 ba       	out	0x11, r1	; 17
	PORTD = 0x00;
     890:	12 ba       	out	0x12, r1	; 18
	
	// Disable all interrupts
	cli();
     892:	f8 94       	cli
	
	// Save parameters to EEPROM
	eeprom_update_block(&p,&eeGlobalParams,sizeof(eeGlobalParams));	
     894:	44 e0       	ldi	r20, 0x04	; 4
     896:	50 e0       	ldi	r21, 0x00	; 0
     898:	66 e0       	ldi	r22, 0x06	; 6
     89a:	70 e0       	ldi	r23, 0x00	; 0
     89c:	87 e9       	ldi	r24, 0x97	; 151
     89e:	91 e0       	ldi	r25, 0x01	; 1
     8a0:	46 d9       	rcall	.-3444   	; 0xfffffb2e <__eeprom_end+0xff7efb24>
     8a2:	ff cf       	rjmp	.-2      	; 0x8a2 <exitPowerOff+0x1c>

000008a4 <decode_led_char>:
//---------------------------------------------//
// Decodes normal string literal to the
//	7-segment representation
//---------------------------------------------//
static uint8_t decode_led_char(char c)
{
     8a4:	20 e0       	ldi	r18, 0x00	; 0
     8a6:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t i;
	encode_7seg_pair encode_pair;
	for (i = 0; i < sizeof(led_encode_table)/sizeof(encode_7seg_pair); i++  )
	{
		encode_pair.code = pgm_read_byte(&led_encode_table[i].code);
     8a8:	a9 01       	movw	r20, r18
     8aa:	44 0f       	add	r20, r20
     8ac:	55 1f       	adc	r21, r21
     8ae:	fa 01       	movw	r30, r20
     8b0:	ea 5d       	subi	r30, 0xDA	; 218
     8b2:	ff 4f       	sbci	r31, 0xFF	; 255
     8b4:	e4 91       	lpm	r30, Z
		if (encode_pair.code == c)
     8b6:	e8 13       	cpse	r30, r24
     8b8:	05 c0       	rjmp	.+10     	; 0x8c4 <decode_led_char+0x20>
		{
			i = pgm_read_byte(&led_encode_table[i].segdata);
     8ba:	fa 01       	movw	r30, r20
     8bc:	e9 5d       	subi	r30, 0xD9	; 217
     8be:	ff 4f       	sbci	r31, 0xFF	; 255
     8c0:	84 91       	lpm	r24, Z
     8c2:	08 95       	ret
     8c4:	2f 5f       	subi	r18, 0xFF	; 255
     8c6:	3f 4f       	sbci	r19, 0xFF	; 255
//---------------------------------------------//
static uint8_t decode_led_char(char c)
{
	uint8_t i;
	encode_7seg_pair encode_pair;
	for (i = 0; i < sizeof(led_encode_table)/sizeof(encode_7seg_pair); i++  )
     8c8:	2a 31       	cpi	r18, 0x1A	; 26
     8ca:	31 05       	cpc	r19, r1
     8cc:	69 f7       	brne	.-38     	; 0x8a8 <decode_led_char+0x4>
			return i;
		}		
	}			
	// No item was found - return argument value
	return  c;
}
     8ce:	08 95       	ret

000008d0 <wrap_led_buffer_index>:
//---------------------------------------------//
// Ensures that index is inside the buffer
// -128 <= index <= 127
//---------------------------------------------//
static uint8_t wrap_led_buffer_index(int8_t buf_index)
{
     8d0:	28 2f       	mov	r18, r24
	uint8_t new_index_u;
	new_index_u = (uint8_t) ((buf_index < 0) ? -buf_index : buf_index);
     8d2:	87 fd       	sbrc	r24, 7
     8d4:	81 95       	neg	r24
	if (new_index_u >= LED_BUFFER_LENGTH)
     8d6:	8e 30       	cpi	r24, 0x0E	; 14
     8d8:	18 f0       	brcs	.+6      	; 0x8e0 <wrap_led_buffer_index+0x10>
		new_index_u = new_index_u % LED_BUFFER_LENGTH;
     8da:	6e e0       	ldi	r22, 0x0E	; 14
     8dc:	86 d8       	rcall	.-3828   	; 0xfffff9ea <__eeprom_end+0xff7ef9e0>
     8de:	89 2f       	mov	r24, r25
	new_index_u = ((buf_index >= 0) || (new_index_u == 0)) ? new_index_u :  LED_BUFFER_LENGTH - new_index_u ;
     8e0:	27 ff       	sbrs	r18, 7
     8e2:	05 c0       	rjmp	.+10     	; 0x8ee <wrap_led_buffer_index+0x1e>
     8e4:	88 23       	and	r24, r24
     8e6:	19 f0       	breq	.+6      	; 0x8ee <wrap_led_buffer_index+0x1e>
     8e8:	9e e0       	ldi	r25, 0x0E	; 14
     8ea:	98 1b       	sub	r25, r24
     8ec:	89 2f       	mov	r24, r25
	return new_index_u;
}
     8ee:	08 95       	ret

000008f0 <processLedIndicator>:
// Call this function N times per sec to get N/NUM_DIGITS_TOTAL display update rate, where
// NUM_DIGITS_TOTAL is number_of_digits_of_LED_display if no extra LEDs are used or
// (number_of_digits_of_LED_display + 1) otherwise.
//---------------------------------------------//
void processLedIndicator()
{
     8f0:	cf 93       	push	r28
	uint8_t next_wActivePos;
	
	// Turn off segments
	#ifdef CLEAN_OPERATION
	disable_led_segments();
     8f2:	3f d1       	rcall	.+638    	; 0xb72 <disable_led_segments>
	#endif
	
	
	// Perform regular shift
	led_clock_pulse(!LED_DIGIT_ACT_LVL);
     8f4:	81 e0       	ldi	r24, 0x01	; 1
     8f6:	11 d1       	rcall	.+546    	; 0xb1a <led_clock_pulse>
	
	switch (wActivePos)
     8f8:	c0 91 fc 00 	lds	r28, 0x00FC
     8fc:	cc 23       	and	r28, r28
     8fe:	19 f0       	breq	.+6      	; 0x906 <processLedIndicator+0x16>
     900:	c6 30       	cpi	r28, 0x06	; 6
     902:	c1 f5       	brne	.+112    	; 0x974 <processLedIndicator+0x84>
     904:	0f c0       	rjmp	.+30     	; 0x924 <processLedIndicator+0x34>
	case 0:
		// Get buttons
		#ifndef CLEAN_OPERATION
		disable_led_segments();
		#endif
		enable_led_segments_pullups();
     906:	27 d1       	rcall	.+590    	; 0xb56 <enable_led_segments_pullups>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     908:	85 e3       	ldi	r24, 0x35	; 53
     90a:	8a 95       	dec	r24
     90c:	f1 f7       	brne	.-4      	; 0x90a <processLedIndicator+0x1a>
     90e:	00 00       	nop
		_delay_us(PULLUP_DELAY_US);
		capture_button_state();
     910:	37 d1       	rcall	.+622    	; 0xb80 <capture_button_state>
		#ifndef CLEAN_OPERATION
		enable_led_segments();
		#endif
		// Start new cycle with active digit level
		led_clock_pulse(LED_DIGIT_ACT_LVL);
     912:	80 e0       	ldi	r24, 0x00	; 0
     914:	02 d1       	rcall	.+516    	; 0xb1a <led_clock_pulse>
		// Always start new cycle from specified buffer start position
		bufActivePos = wStartPos;
     916:	80 91 b1 01 	lds	r24, 0x01B1
     91a:	80 93 fb 00 	sts	0x00FB, r24
		next_wActivePos = wActivePos + 1;
     91e:	c0 91 fc 00 	lds	r28, 0x00FC
     922:	28 c0       	rjmp	.+80     	; 0x974 <processLedIndicator+0x84>
//---------------------------------------------//
// Performs window shifting
//---------------------------------------------//
static void processWindowShifter(void)
{
	if (shifterState == LED_SHIFT_DONE)
     924:	80 91 b2 01 	lds	r24, 0x01B2
     928:	81 11       	cpse	r24, r1
     92a:	01 c0       	rjmp	.+2      	; 0x92e <processLedIndicator+0x3e>
     92c:	1b c0       	rjmp	.+54     	; 0x964 <processLedIndicator+0x74>
		return;
	
	// Process shift timer
	processSoftTimer8b(&shiftTimer);	
     92e:	8d ef       	ldi	r24, 0xFD	; 253
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	42 d7       	rcall	.+3716   	; 0x17b8 <processSoftTimer8b>
	
	if (shiftTimer.FTop)
     934:	80 91 fd 00 	lds	r24, 0x00FD
     938:	85 ff       	sbrs	r24, 5
     93a:	14 c0       	rjmp	.+40     	; 0x964 <processLedIndicator+0x74>
	{
		// Check if finished
		if (wStartPos == bufStartPos)	
     93c:	80 91 b1 01 	lds	r24, 0x01B1
     940:	90 91 b3 01 	lds	r25, 0x01B3
     944:	89 13       	cpse	r24, r25
     946:	03 c0       	rjmp	.+6      	; 0x94e <processLedIndicator+0x5e>
		{
			// Update state
			shifterState = LED_SHIFT_DONE;
     948:	10 92 b2 01 	sts	0x01B2, r1
     94c:	0b c0       	rjmp	.+22     	; 0x964 <processLedIndicator+0x74>
		}
		else if (shifterState == LED_SHIFT_RIGHT)
     94e:	90 91 b2 01 	lds	r25, 0x01B2
     952:	92 30       	cpi	r25, 0x02	; 2
     954:	49 f4       	brne	.+18     	; 0x968 <processLedIndicator+0x78>
// Increments index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t inc_buffer_position(uint8_t position)
{
	return (position >= LED_BUFFER_LENGTH - 1) ? 0 : position + 1;
     956:	8d 30       	cpi	r24, 0x0D	; 13
     958:	10 f4       	brcc	.+4      	; 0x95e <processLedIndicator+0x6e>
     95a:	8f 5f       	subi	r24, 0xFF	; 255
     95c:	01 c0       	rjmp	.+2      	; 0x960 <processLedIndicator+0x70>
     95e:	80 e0       	ldi	r24, 0x00	; 0
			// Update state
			shifterState = LED_SHIFT_DONE;
		}
		else if (shifterState == LED_SHIFT_RIGHT)
		{
			wStartPos = inc_buffer_position(wStartPos);	
     960:	80 93 b1 01 	sts	0x01B1, r24
		// Always start new cycle from specified buffer start position
		bufActivePos = wStartPos;
		next_wActivePos = wActivePos + 1;
		break;
	case NUM_DIGITS_TOTAL-1:
		next_wActivePos = 0;
     964:	c0 e0       	ldi	r28, 0x00	; 0
     966:	07 c0       	rjmp	.+14     	; 0x976 <processLedIndicator+0x86>
// Decrements index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t dec_buffer_position(uint8_t position)
{
	return (position == 0) ? LED_BUFFER_LENGTH - 1 : position - 1;
     968:	88 23       	and	r24, r24
     96a:	11 f0       	breq	.+4      	; 0x970 <processLedIndicator+0x80>
     96c:	81 50       	subi	r24, 0x01	; 1
     96e:	f8 cf       	rjmp	.-16     	; 0x960 <processLedIndicator+0x70>
     970:	8d e0       	ldi	r24, 0x0D	; 13
     972:	f6 cf       	rjmp	.-20     	; 0x960 <processLedIndicator+0x70>
		next_wActivePos = 0;
		// Shift LED window
		processWindowShifter();	
		break;
	default:
		next_wActivePos = wActivePos + 1;
     974:	cf 5f       	subi	r28, 0xFF	; 255
		break;
	}		
	
	#ifdef 	USE_EXTRA_LED_DIGIT
	if (wActivePos == EXTRA_DIGIT_NUM)
     976:	80 91 fc 00 	lds	r24, 0x00FC
     97a:	86 30       	cpi	r24, 0x06	; 6
     97c:	21 f4       	brne	.+8      	; 0x986 <processLedIndicator+0x96>
	{
		// Output separate LEDs state
		set_led_segments(extra_led_state);
     97e:	80 91 b0 01 	lds	r24, 0x01B0
     982:	db d0       	rcall	.+438    	; 0xb3a <set_led_segments>
     984:	10 c0       	rjmp	.+32     	; 0x9a6 <processLedIndicator+0xb6>
	}
	else
	#endif
	{
		// Output new segment data
		set_led_segments(led_data_buffer[bufActivePos]);
     986:	e0 91 fb 00 	lds	r30, 0x00FB
     98a:	f0 e0       	ldi	r31, 0x00	; 0
     98c:	ec 54       	subi	r30, 0x4C	; 76
     98e:	fe 4f       	sbci	r31, 0xFE	; 254
     990:	80 81       	ld	r24, Z
     992:	d3 d0       	rcall	.+422    	; 0xb3a <set_led_segments>
		// Wrap around buffer length
		bufActivePos = inc_buffer_position(bufActivePos );
     994:	80 91 fb 00 	lds	r24, 0x00FB
// Increments index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t inc_buffer_position(uint8_t position)
{
	return (position >= LED_BUFFER_LENGTH - 1) ? 0 : position + 1;
     998:	8d 30       	cpi	r24, 0x0D	; 13
     99a:	10 f4       	brcc	.+4      	; 0x9a0 <processLedIndicator+0xb0>
     99c:	8f 5f       	subi	r24, 0xFF	; 255
     99e:	01 c0       	rjmp	.+2      	; 0x9a2 <processLedIndicator+0xb2>
     9a0:	80 e0       	ldi	r24, 0x00	; 0
	#endif
	{
		// Output new segment data
		set_led_segments(led_data_buffer[bufActivePos]);
		// Wrap around buffer length
		bufActivePos = inc_buffer_position(bufActivePos );
     9a2:	80 93 fb 00 	sts	0x00FB, r24
	}
		
	wActivePos = next_wActivePos;
     9a6:	c0 93 fc 00 	sts	0x00FC, r28
	
	#ifdef CLEAN_OPERATION
	enable_led_segments();
	#endif

}
     9aa:	cf 91       	pop	r28
	}
		
	wActivePos = next_wActivePos;
	
	#ifdef CLEAN_OPERATION
	enable_led_segments();
     9ac:	db c0       	rjmp	.+438    	; 0xb64 <enable_led_segments>

000009ae <fillLedBuffer>:
//---------------------------------------------//
// Fills buffer from (bufStartPos + offset) 
//	position with single char
//---------------------------------------------//
void fillLedBuffer(int8_t offset, uint8_t length, char c)
{
     9ae:	0f 93       	push	r16
     9b0:	1f 93       	push	r17
     9b2:	cf 93       	push	r28
     9b4:	df 93       	push	r29
     9b6:	1f 92       	push	r1
     9b8:	cd b7       	in	r28, 0x3d	; 61
     9ba:	de b7       	in	r29, 0x3e	; 62
     9bc:	18 2f       	mov	r17, r24
     9be:	84 2f       	mov	r24, r20
	uint8_t val = decode_led_char(c);
     9c0:	69 83       	std	Y+1, r22	; 0x01
     9c2:	70 df       	rcall	.-288    	; 0x8a4 <decode_led_char>
     9c4:	08 2f       	mov	r16, r24
	// Ensure index is inside the buffer
	uint8_t position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
     9c6:	80 91 b3 01 	lds	r24, 0x01B3
     9ca:	81 0f       	add	r24, r17
     9cc:	81 df       	rcall	.-254    	; 0x8d0 <wrap_led_buffer_index>
	while(length--)
     9ce:	69 81       	ldd	r22, Y+1	; 0x01
     9d0:	0a c0       	rjmp	.+20     	; 0x9e6 <fillLedBuffer+0x38>
	{
		led_data_buffer[position] = val;
     9d2:	e8 2f       	mov	r30, r24
     9d4:	f0 e0       	ldi	r31, 0x00	; 0
     9d6:	ec 54       	subi	r30, 0x4C	; 76
     9d8:	fe 4f       	sbci	r31, 0xFE	; 254
     9da:	00 83       	st	Z, r16
// Increments index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t inc_buffer_position(uint8_t position)
{
	return (position >= LED_BUFFER_LENGTH - 1) ? 0 : position + 1;
     9dc:	8d 30       	cpi	r24, 0x0D	; 13
     9de:	10 f4       	brcc	.+4      	; 0x9e4 <fillLedBuffer+0x36>
     9e0:	8f 5f       	subi	r24, 0xFF	; 255
     9e2:	01 c0       	rjmp	.+2      	; 0x9e6 <fillLedBuffer+0x38>
     9e4:	80 e0       	ldi	r24, 0x00	; 0
void fillLedBuffer(int8_t offset, uint8_t length, char c)
{
	uint8_t val = decode_led_char(c);
	// Ensure index is inside the buffer
	uint8_t position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
	while(length--)
     9e6:	61 50       	subi	r22, 0x01	; 1
     9e8:	a0 f7       	brcc	.-24     	; 0x9d2 <fillLedBuffer+0x24>
	{
		led_data_buffer[position] = val;
		position = inc_buffer_position(position);
	}
}
     9ea:	0f 90       	pop	r0
     9ec:	df 91       	pop	r29
     9ee:	cf 91       	pop	r28
     9f0:	1f 91       	pop	r17
     9f2:	0f 91       	pop	r16
     9f4:	08 95       	ret

000009f6 <startShiftingWindowLeft>:
//	LED window left 
//---------------------------------------------//
void startShiftingWindowLeft(void)
{
	// Clear spaces between menu states
	fillLedBuffer(-2,2,' ');
     9f6:	40 e2       	ldi	r20, 0x20	; 32
     9f8:	62 e0       	ldi	r22, 0x02	; 2
     9fa:	8e ef       	ldi	r24, 0xFE	; 254
     9fc:	d8 df       	rcall	.-80     	; 0x9ae <fillLedBuffer>
	// Set new buffer position for writing
	bufStartPos = wrap_led_buffer_index( (int8_t)bufStartPos - (NUM_DIGITS + 2) );
     9fe:	80 91 b3 01 	lds	r24, 0x01B3
     a02:	88 50       	subi	r24, 0x08	; 8
     a04:	65 df       	rcall	.-310    	; 0x8d0 <wrap_led_buffer_index>
     a06:	80 93 b3 01 	sts	0x01B3, r24
	// Set shifter state
	shifterState = LED_SHIFT_LEFT;
     a0a:	81 e0       	ldi	r24, 0x01	; 1
     a0c:	80 93 b2 01 	sts	0x01B2, r24
     a10:	08 95       	ret

00000a12 <startShiftingWindowRight>:
//	LED window right 
//---------------------------------------------//
void startShiftingWindowRight(void)
{
	// Clear spaces between menu states
	fillLedBuffer(NUM_DIGITS,2,' ');
     a12:	40 e2       	ldi	r20, 0x20	; 32
     a14:	62 e0       	ldi	r22, 0x02	; 2
     a16:	86 e0       	ldi	r24, 0x06	; 6
     a18:	ca df       	rcall	.-108    	; 0x9ae <fillLedBuffer>
	// Set new buffer position for writing
	bufStartPos = wrap_led_buffer_index( (int8_t)bufStartPos + NUM_DIGITS + 2 );
     a1a:	80 91 b3 01 	lds	r24, 0x01B3
     a1e:	88 5f       	subi	r24, 0xF8	; 248
     a20:	57 df       	rcall	.-338    	; 0x8d0 <wrap_led_buffer_index>
     a22:	80 93 b3 01 	sts	0x01B3, r24
	// Set shifter state
	shifterState = LED_SHIFT_RIGHT;
     a26:	82 e0       	ldi	r24, 0x02	; 2
     a28:	80 93 b2 01 	sts	0x01B2, r24
     a2c:	08 95       	ret

00000a2e <initLedIndicator>:
//---------------------------------------------//
//	Initialization
//	Call this function at start of your program
//---------------------------------------------//
void initLedIndicator()
{
     a2e:	cf 93       	push	r28
	uint8_t i;
	// First disable outputs
	disable_led_segments();
     a30:	a0 d0       	rcall	.+320    	; 0xb72 <disable_led_segments>
     a32:	c7 e0       	ldi	r28, 0x07	; 7
	// Fill shift register with non-active levels
	for (i=0;i<NUM_DIGITS_TOTAL;i++)
	{
		led_clock_pulse(!LED_DIGIT_ACT_LVL);
     a34:	81 e0       	ldi	r24, 0x01	; 1
     a36:	71 d0       	rcall	.+226    	; 0xb1a <led_clock_pulse>
     a38:	c1 50       	subi	r28, 0x01	; 1
{
	uint8_t i;
	// First disable outputs
	disable_led_segments();
	// Fill shift register with non-active levels
	for (i=0;i<NUM_DIGITS_TOTAL;i++)
     a3a:	e1 f7       	brne	.-8      	; 0xa34 <initLedIndicator+0x6>
	{
		led_clock_pulse(!LED_DIGIT_ACT_LVL);
	}
	// Now enable outputs
	enable_led_segments();
     a3c:	93 d0       	rcall	.+294    	; 0xb64 <enable_led_segments>
	
	// Reset pointers
	wStartPos = 0;
     a3e:	10 92 b1 01 	sts	0x01B1, r1
	bufStartPos = 0;
     a42:	10 92 b3 01 	sts	0x01B3, r1
	bufActivePos = 0;
     a46:	10 92 fb 00 	sts	0x00FB, r1
	wActivePos = 0;
     a4a:	10 92 fc 00 	sts	0x00FC, r1
	#ifdef 	USE_EXTRA_LED_DIGIT
	extra_led_state = 0;
     a4e:	10 92 b0 01 	sts	0x01B0, r1
	#endif
	
	// Clear the buffer 
	fillLedBuffer(0,LED_BUFFER_LENGTH,' ');
     a52:	40 e2       	ldi	r20, 0x20	; 32
     a54:	6e e0       	ldi	r22, 0x0E	; 14
     a56:	80 e0       	ldi	r24, 0x00	; 0
     a58:	aa df       	rcall	.-172    	; 0x9ae <fillLedBuffer>
	
	// Initialize shift timer - always enabled, but 
	//	processed only when shifting is active
	shifterState = LED_SHIFT_DONE;
     a5a:	10 92 b2 01 	sts	0x01B2, r1
	shiftTimer.Enabled = 1;
     a5e:	80 91 fd 00 	lds	r24, 0x00FD
	shiftTimer.RunOnce = 0;
     a62:	81 60       	ori	r24, 0x01	; 1
     a64:	8d 7f       	andi	r24, 0xFD	; 253
     a66:	80 93 fd 00 	sts	0x00FD, r24
	shiftTimer.Top = LED_SHIFT_INTERVAL-1;
     a6a:	89 e0       	ldi	r24, 0x09	; 9
     a6c:	80 93 ff 00 	sts	0x00FF, r24
}
     a70:	cf 91       	pop	r28
     a72:	08 95       	ret

00000a74 <printLedBuffer>:
//		str - null-terminated char string
// Comma and dot (".", ",") get special processing - first occurrence is added to
// a preceding char, next are displayed as a single digit
//---------------------------------------------//
void printLedBuffer(int8_t offset, char* str)
{
     a74:	ff 92       	push	r15
     a76:	0f 93       	push	r16
     a78:	1f 93       	push	r17
     a7a:	cf 93       	push	r28
     a7c:	df 93       	push	r29
     a7e:	eb 01       	movw	r28, r22
	char c;
	uint8_t decoded_sym;
	uint8_t state = 0x02;
	uint8_t comma_pos;
	// Ensure index is inside the buffer
	uint8_t buffer_position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
     a80:	90 91 b3 01 	lds	r25, 0x01B3
     a84:	89 0f       	add	r24, r25
     a86:	24 df       	rcall	.-440    	; 0x8d0 <wrap_led_buffer_index>
     a88:	18 2f       	mov	r17, r24
	comma_pos = buffer_position;
     a8a:	f8 2e       	mov	r15, r24
//---------------------------------------------//
void printLedBuffer(int8_t offset, char* str)
{
	char c;
	uint8_t decoded_sym;
	uint8_t state = 0x02;
     a8c:	02 e0       	ldi	r16, 0x02	; 2
	uint8_t comma_pos;
	// Ensure index is inside the buffer
	uint8_t buffer_position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
	comma_pos = buffer_position;
	// Output chars
	while((c = *str++))
     a8e:	23 c0       	rjmp	.+70     	; 0xad6 <printLedBuffer+0x62>
	{
		decoded_sym = decode_led_char(c);
     a90:	09 df       	rcall	.-494    	; 0x8a4 <decode_led_char>
		state = (decoded_sym == SEGH) ? (state | 0x01) : (state & ~0x01);
     a92:	80 38       	cpi	r24, 0x80	; 128
     a94:	11 f4       	brne	.+4      	; 0xa9a <printLedBuffer+0x26>
     a96:	01 60       	ori	r16, 0x01	; 1
     a98:	01 c0       	rjmp	.+2      	; 0xa9c <printLedBuffer+0x28>
     a9a:	0e 7f       	andi	r16, 0xFE	; 254
		if (state == 0x01)			
     a9c:	01 30       	cpi	r16, 0x01	; 1
     a9e:	49 f4       	brne	.+18     	; 0xab2 <printLedBuffer+0x3e>
		{
			led_data_buffer[comma_pos] |= decoded_sym;
     aa0:	ef 2d       	mov	r30, r15
     aa2:	f0 e0       	ldi	r31, 0x00	; 0
     aa4:	ec 54       	subi	r30, 0x4C	; 76
     aa6:	fe 4f       	sbci	r31, 0xFE	; 254
     aa8:	90 81       	ld	r25, Z
     aaa:	98 2b       	or	r25, r24
     aac:	90 83       	st	Z, r25
     aae:	81 2f       	mov	r24, r17
     ab0:	0b c0       	rjmp	.+22     	; 0xac8 <printLedBuffer+0x54>
		}
		else
		{
			led_data_buffer[buffer_position] = decoded_sym;	
     ab2:	e1 2f       	mov	r30, r17
     ab4:	f0 e0       	ldi	r31, 0x00	; 0
     ab6:	ec 54       	subi	r30, 0x4C	; 76
     ab8:	fe 4f       	sbci	r31, 0xFE	; 254
     aba:	80 83       	st	Z, r24
// Increments index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t inc_buffer_position(uint8_t position)
{
	return (position >= LED_BUFFER_LENGTH - 1) ? 0 : position + 1;
     abc:	1d 30       	cpi	r17, 0x0D	; 13
     abe:	18 f4       	brcc	.+6      	; 0xac6 <printLedBuffer+0x52>
     ac0:	81 2f       	mov	r24, r17
     ac2:	8f 5f       	subi	r24, 0xFF	; 255
     ac4:	01 c0       	rjmp	.+2      	; 0xac8 <printLedBuffer+0x54>
     ac6:	80 e0       	ldi	r24, 0x00	; 0
		comma_pos = buffer_position;
		if (state != 0x01)
		{
			buffer_position = inc_buffer_position(buffer_position);
		}
		state = (state & 0x01) ? 0x03 : 0x00;		
     ac8:	00 ff       	sbrs	r16, 0
     aca:	02 c0       	rjmp	.+4      	; 0xad0 <printLedBuffer+0x5c>
     acc:	03 e0       	ldi	r16, 0x03	; 3
     ace:	01 c0       	rjmp	.+2      	; 0xad2 <printLedBuffer+0x5e>
     ad0:	00 e0       	ldi	r16, 0x00	; 0
     ad2:	f1 2e       	mov	r15, r17
     ad4:	18 2f       	mov	r17, r24
	uint8_t comma_pos;
	// Ensure index is inside the buffer
	uint8_t buffer_position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
	comma_pos = buffer_position;
	// Output chars
	while((c = *str++))
     ad6:	89 91       	ld	r24, Y+
     ad8:	81 11       	cpse	r24, r1
     ada:	da cf       	rjmp	.-76     	; 0xa90 <printLedBuffer+0x1c>
		{
			buffer_position = inc_buffer_position(buffer_position);
		}
		state = (state & 0x01) ? 0x03 : 0x00;		
	}
}
     adc:	df 91       	pop	r29
     ade:	cf 91       	pop	r28
     ae0:	1f 91       	pop	r17
     ae2:	0f 91       	pop	r16
     ae4:	ff 90       	pop	r15
     ae6:	08 95       	ret

00000ae8 <setComma>:
//	buffer cell
//---------------------------------------------//
void setComma(int8_t offset)
{
	// Ensure index is inside the buffer
	uint8_t position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
     ae8:	90 91 b3 01 	lds	r25, 0x01B3
     aec:	89 0f       	add	r24, r25
     aee:	f0 de       	rcall	.-544    	; 0x8d0 <wrap_led_buffer_index>
	led_data_buffer[position] |= (SEGH);
     af0:	e8 2f       	mov	r30, r24
     af2:	f0 e0       	ldi	r31, 0x00	; 0
     af4:	ec 54       	subi	r30, 0x4C	; 76
     af6:	fe 4f       	sbci	r31, 0xFE	; 254
     af8:	80 81       	ld	r24, Z
     afa:	80 68       	ori	r24, 0x80	; 128
     afc:	80 83       	st	Z, r24
     afe:	08 95       	ret

00000b00 <setExtraLeds>:
// Argument is ORed with current LED state
//---------------------------------------------//
inline void setExtraLeds(uint8_t leds_set_value)
{
		//asm("cli");
		extra_led_state |= leds_set_value;
     b00:	90 91 b0 01 	lds	r25, 0x01B0
     b04:	98 2b       	or	r25, r24
     b06:	90 93 b0 01 	sts	0x01B0, r25
     b0a:	08 95       	ret

00000b0c <clearExtraLeds>:
// Argument is AND NOTed with current LED state
//---------------------------------------------//
inline void clearExtraLeds(uint8_t leds_clear_value)
{
		//asm("cli");
		extra_led_state &= ~leds_clear_value;
     b0c:	90 91 b0 01 	lds	r25, 0x01B0
     b10:	80 95       	com	r24
     b12:	89 23       	and	r24, r25
     b14:	80 93 b0 01 	sts	0x01B0, r24
     b18:	08 95       	ret

00000b1a <led_clock_pulse>:


// Clocks in bit into the shift register
void led_clock_pulse(uint8_t bit)
{
	if (bit)
     b1a:	88 23       	and	r24, r24
     b1c:	11 f0       	breq	.+4      	; 0xb22 <led_clock_pulse+0x8>
		PORTB |= (1<<PB_LED_DOUT);
     b1e:	c0 9a       	sbi	0x18, 0	; 24
     b20:	01 c0       	rjmp	.+2      	; 0xb24 <led_clock_pulse+0xa>
	else
		PORTB &= ~(1<<PB_LED_DOUT);
     b22:	c0 98       	cbi	0x18, 0	; 24
     b24:	8a e1       	ldi	r24, 0x1A	; 26
     b26:	8a 95       	dec	r24
     b28:	f1 f7       	brne	.-4      	; 0xb26 <led_clock_pulse+0xc>
     b2a:	00 c0       	rjmp	.+0      	; 0xb2c <led_clock_pulse+0x12>
	_delay_us(SETUP_DELAY_US);
	PORTB |= (1<<PB_LED_CLK);
     b2c:	c2 9a       	sbi	0x18, 2	; 24
     b2e:	8a e1       	ldi	r24, 0x1A	; 26
     b30:	8a 95       	dec	r24
     b32:	f1 f7       	brne	.-4      	; 0xb30 <led_clock_pulse+0x16>
     b34:	00 c0       	rjmp	.+0      	; 0xb36 <led_clock_pulse+0x1c>
	_delay_us(SHIFT_DELAY_US);
	PORTB &= ~(1<<PB_LED_CLK);
     b36:	c2 98       	cbi	0x18, 2	; 24
     b38:	08 95       	ret

00000b3a <set_led_segments>:
// Outputs decoded segment data to port bits
void set_led_segments(uint8_t seg_ch)
{
	uint8_t pdat;
	seg_ch ^= LED_SEGMENT_MASK;
	pdat = PORTC & ~( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
     b3a:	25 b3       	in	r18, 0x15	; 21
	pdat |= (seg_ch & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
     b3c:	98 2f       	mov	r25, r24
     b3e:	9f 71       	andi	r25, 0x1F	; 31
// Outputs decoded segment data to port bits
void set_led_segments(uint8_t seg_ch)
{
	uint8_t pdat;
	seg_ch ^= LED_SEGMENT_MASK;
	pdat = PORTC & ~( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
     b40:	20 7e       	andi	r18, 0xE0	; 224
	pdat |= (seg_ch & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
     b42:	92 2b       	or	r25, r18
	PORTC = pdat;
     b44:	95 bb       	out	0x15, r25	; 21
	seg_ch >>= 2;
	pdat = PORTB & ~( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     b46:	98 b3       	in	r25, 0x18	; 24
	uint8_t pdat;
	seg_ch ^= LED_SEGMENT_MASK;
	pdat = PORTC & ~( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
	pdat |= (seg_ch & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
	PORTC = pdat;
	seg_ch >>= 2;
     b48:	86 95       	lsr	r24
     b4a:	86 95       	lsr	r24
	pdat = PORTB & ~( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
	pdat |= (seg_ch & ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) ));
     b4c:	88 73       	andi	r24, 0x38	; 56
	seg_ch ^= LED_SEGMENT_MASK;
	pdat = PORTC & ~( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
	pdat |= (seg_ch & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
	PORTC = pdat;
	seg_ch >>= 2;
	pdat = PORTB & ~( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     b4e:	97 7c       	andi	r25, 0xC7	; 199
	pdat |= (seg_ch & ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) ));
     b50:	89 2b       	or	r24, r25
	PORTB = pdat;
     b52:	88 bb       	out	0x18, r24	; 24
     b54:	08 95       	ret

00000b56 <enable_led_segments_pullups>:

// Turns segment port bits to HI-Z and
// enables pull-ups
void enable_led_segments_pullups()
{
	PORTC |= ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
     b56:	85 b3       	in	r24, 0x15	; 21
     b58:	8f 61       	ori	r24, 0x1F	; 31
     b5a:	85 bb       	out	0x15, r24	; 21
	PORTB |= ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     b5c:	88 b3       	in	r24, 0x18	; 24
     b5e:	88 63       	ori	r24, 0x38	; 56
     b60:	88 bb       	out	0x18, r24	; 24
     b62:	08 95       	ret

00000b64 <enable_led_segments>:
}	

void enable_led_segments()
{
	DDRC |= ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
     b64:	84 b3       	in	r24, 0x14	; 20
     b66:	8f 61       	ori	r24, 0x1F	; 31
     b68:	84 bb       	out	0x14, r24	; 20
	DDRB |= ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     b6a:	87 b3       	in	r24, 0x17	; 23
     b6c:	88 63       	ori	r24, 0x38	; 56
     b6e:	87 bb       	out	0x17, r24	; 23
     b70:	08 95       	ret

00000b72 <disable_led_segments>:
}

void disable_led_segments()
{
	DDRC &= ~( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
     b72:	84 b3       	in	r24, 0x14	; 20
     b74:	80 7e       	andi	r24, 0xE0	; 224
     b76:	84 bb       	out	0x14, r24	; 20
	DDRB &= ~( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     b78:	87 b3       	in	r24, 0x17	; 23
     b7a:	87 7c       	andi	r24, 0xC7	; 199
     b7c:	87 bb       	out	0x17, r24	; 23
     b7e:	08 95       	ret

00000b80 <capture_button_state>:


void capture_button_state()
{
	uint8_t pdat;
	pdat = PINB  & ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     b80:	86 b3       	in	r24, 0x16	; 22
     b82:	88 73       	andi	r24, 0x38	; 56
	pdat <<= 2;
	pdat |= (PINC & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
     b84:	93 b3       	in	r25, 0x13	; 19

void capture_button_state()
{
	uint8_t pdat;
	pdat = PINB  & ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
	pdat <<= 2;
     b86:	88 0f       	add	r24, r24
     b88:	88 0f       	add	r24, r24
	pdat |= (PINC & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
     b8a:	9f 71       	andi	r25, 0x1F	; 31
     b8c:	89 2b       	or	r24, r25
	raw_button_state = pdat ^ RAW_BUTTONS_INVERSE_MASK;
     b8e:	80 95       	com	r24
     b90:	80 93 c2 01 	sts	0x01C2, r24
     b94:	08 95       	ret

00000b96 <processItemFunction>:
//	Arguments:
//		funcAddr - address of the function to run.
//-----------------------------------------------------------------//
static inline void processItemFunction(FuncPtr funcAddr)
{
	if (funcAddr != 0)
     b96:	00 97       	sbiw	r24, 0x00	; 0
     b98:	11 f0       	breq	.+4      	; 0xb9e <processItemFunction+0x8>
		((FuncPtr)funcAddr)();
     b9a:	fc 01       	movw	r30, r24
     b9c:	09 94       	ijmp
     b9e:	08 95       	ret

00000ba0 <mf_setTempLeave>:
		clearExtraLeds(LED_TEMP);
}

void mf_setTempLeave(void)
{
	userTimer.Enabled = 0;
     ba0:	eb e0       	ldi	r30, 0x0B	; 11
     ba2:	f1 e0       	ldi	r31, 0x01	; 1
     ba4:	80 81       	ld	r24, Z
     ba6:	8e 7f       	andi	r24, 0xFE	; 254
     ba8:	80 83       	st	Z, r24
     baa:	08 95       	ret

00000bac <mf_leafSelectAct>:
	userTimer.FA_GE = 1;	
}

void mf_leafSelectAct(void)
{
	userTimer.Timer = 0;
     bac:	10 92 0c 01 	sts	0x010C, r1
	userTimer.Top = BLINK_PERIOD - 1;
     bb0:	87 e0       	ldi	r24, 0x07	; 7
     bb2:	80 93 0d 01 	sts	0x010D, r24
	userTimer.CompA = BLINK_PERIOD / 2;
     bb6:	84 e0       	ldi	r24, 0x04	; 4
     bb8:	80 93 0e 01 	sts	0x010E, r24
	userTimer.Enabled = 1;
     bbc:	eb e0       	ldi	r30, 0x0B	; 11
     bbe:	f1 e0       	ldi	r31, 0x01	; 1
     bc0:	80 81       	ld	r24, Z
     bc2:	81 60       	ori	r24, 0x01	; 1
     bc4:	80 83       	st	Z, r24
     bc6:	08 95       	ret

00000bc8 <mf_leafExit>:
}

void mf_leafExit(void)
{
	userTimer.Enabled = 0;	
     bc8:	eb e0       	ldi	r30, 0x0B	; 11
     bca:	f1 e0       	ldi	r31, 0x01	; 1
     bcc:	80 81       	ld	r24, Z
     bce:	8e 7f       	andi	r24, 0xFE	; 254
     bd0:	80 83       	st	Z, r24
     bd2:	08 95       	ret

00000bd4 <mf_actpoffLeave>:
	printLedBuffer(0,"   OFF");
}

void mf_actpoffLeave(void)
{
	autoPowerOffState = 0;	
     bd4:	10 92 f4 00 	sts	0x00F4, r1
     bd8:	08 95       	ret

00000bda <mf_calibDoExit>:
	userTimer.Enabled = 1;
}

void mf_leafExit(void)
{
	userTimer.Enabled = 0;	
     bda:	eb e0       	ldi	r30, 0x0B	; 11
     bdc:	f1 e0       	ldi	r31, 0x01	; 1
     bde:	80 81       	ld	r24, Z
     be0:	8e 7f       	andi	r24, 0xFE	; 254
     be2:	80 83       	st	Z, r24


void mf_calibDoExit(void)
{
	mf_leafExit();
	heaterState &= ~CALIBRATION_ACTIVE;
     be4:	80 91 f5 00 	lds	r24, 0x00F5
     be8:	8d 7f       	andi	r24, 0xFD	; 253
     bea:	80 93 f5 00 	sts	0x00F5, r24
     bee:	08 95       	ret

00000bf0 <mf_actpoffDo>:
}

// Indication of power off mode
void mf_actpoffDo(void)
{
	printLedBuffer(0,"   OFF");
     bf0:	60 eb       	ldi	r22, 0xB0	; 176
     bf2:	70 e0       	ldi	r23, 0x00	; 0
     bf4:	80 e0       	ldi	r24, 0x00	; 0
     bf6:	3e cf       	rjmp	.-388    	; 0xa74 <printLedBuffer>

00000bf8 <mf_cdoneDo>:
}


void mf_cdoneDo(void)
{
	printLedBuffer(0," DONE ");
     bf8:	67 eb       	ldi	r22, 0xB7	; 183
     bfa:	70 e0       	ldi	r23, 0x00	; 0
     bfc:	80 e0       	ldi	r24, 0x00	; 0
     bfe:	3a cf       	rjmp	.-396    	; 0xa74 <printLedBuffer>

00000c00 <mf_actpoffSelect>:



void mf_actpoffSelect(void)
{
	clearExtraLeds(LED_TEMP | LED_ROLL);
     c00:	80 ec       	ldi	r24, 0xC0	; 192
     c02:	84 df       	rcall	.-248    	; 0xb0c <clearExtraLeds>
	autoPowerOffState = AUTO_POFF_ACTIVE;
     c04:	81 e0       	ldi	r24, 0x01	; 1
     c06:	80 93 f4 00 	sts	0x00F4, r24
     c0a:	08 95       	ret

00000c0c <mf_leafSelect>:

// Select and exit functions, common for leaf menu items 

void mf_leafSelect(void)
{
	clearExtraLeds(LED_TEMP | LED_ROLL);
     c0c:	80 ec       	ldi	r24, 0xC0	; 192
     c0e:	7e df       	rcall	.-260    	; 0xb0c <clearExtraLeds>
	userTimer.FA_GE = 1;	
     c10:	eb e0       	ldi	r30, 0x0B	; 11
     c12:	f1 e0       	ldi	r31, 0x01	; 1
     c14:	80 81       	ld	r24, Z
     c16:	80 61       	ori	r24, 0x10	; 16
     c18:	80 83       	st	Z, r24
     c1a:	08 95       	ret

00000c1c <mf_calibP2Select>:
	printLedBuffer(0,"P1    ");
}

void mf_calibP2Select(void)
{
	mf_leafSelect();
     c1c:	f7 df       	rcall	.-18     	; 0xc0c <mf_leafSelect>
	cpoint_user_val = cp.cpoint2;	// determine which point to use at select func
     c1e:	80 91 92 01 	lds	r24, 0x0192
     c22:	80 93 09 01 	sts	0x0109, r24
	cpointNum = 2;
     c26:	82 e0       	ldi	r24, 0x02	; 2
     c28:	80 93 0a 01 	sts	0x010A, r24
	printLedBuffer(0,"P2    ");
     c2c:	6e eb       	ldi	r22, 0xBE	; 190
     c2e:	70 e0       	ldi	r23, 0x00	; 0
     c30:	80 e0       	ldi	r24, 0x00	; 0
     c32:	20 cf       	rjmp	.-448    	; 0xa74 <printLedBuffer>

00000c34 <mf_calibP1Select>:
//---------------------------------------------//


void mf_calibP1Select(void)
{
	mf_leafSelect();
     c34:	eb df       	rcall	.-42     	; 0xc0c <mf_leafSelect>
	cpoint_user_val = cp.cpoint1;	// determine which point to use at select func
     c36:	80 91 91 01 	lds	r24, 0x0191
     c3a:	80 93 09 01 	sts	0x0109, r24
	cpointNum = 1;
     c3e:	81 e0       	ldi	r24, 0x01	; 1
     c40:	80 93 0a 01 	sts	0x010A, r24
	printLedBuffer(0,"P1    ");
     c44:	65 ec       	ldi	r22, 0xC5	; 197
     c46:	70 e0       	ldi	r23, 0x00	; 0
     c48:	80 e0       	ldi	r24, 0x00	; 0
     c4a:	14 cf       	rjmp	.-472    	; 0xa74 <printLedBuffer>

00000c4c <mf_rollLeave>:
	printLedBuffer(0,str);
}

void mf_rollLeave(void)
{
	clearExtraLeds(LED_ROLL);
     c4c:	80 e4       	ldi	r24, 0x40	; 64
     c4e:	5e df       	rcall	.-324    	; 0xb0c <clearExtraLeds>
	userTimer.Enabled = 0;
     c50:	eb e0       	ldi	r30, 0x0B	; 11
     c52:	f1 e0       	ldi	r31, 0x01	; 1
     c54:	80 81       	ld	r24, Z
     c56:	8e 7f       	andi	r24, 0xFE	; 254
     c58:	80 83       	st	Z, r24
     c5a:	08 95       	ret

00000c5c <mf_setTempSelect>:
//---------------------------------------------//


void mf_setTempSelect(void)
{
	clearExtraLeds(LED_TEMP);
     c5c:	80 e8       	ldi	r24, 0x80	; 128
     c5e:	56 df       	rcall	.-340    	; 0xb0c <clearExtraLeds>
	mf_leafSelectAct();		// setup and start timer
     c60:	a5 cf       	rjmp	.-182    	; 0xbac <mf_leafSelectAct>

00000c62 <mf_realTempLeave>:
	}
}

void mf_realTempLeave(void)
{
	clearExtraLeds(LED_TEMP);
     c62:	80 e8       	ldi	r24, 0x80	; 128
     c64:	53 cf       	rjmp	.-346    	; 0xb0c <clearExtraLeds>

00000c66 <mf_cdoneSelect>:

//---------------------------------------------//

void mf_cdoneSelect(void)
{
	applyCalibrationPoint(cpointNum,cpoint_user_val);
     c66:	20 91 09 01 	lds	r18, 0x0109
}


void applyCalibrationPoint(uint8_t cpointNum, uint8_t cpointVal)
{
	if (cpointNum == 1)
     c6a:	30 91 0a 01 	lds	r19, 0x010A
     c6e:	80 91 63 01 	lds	r24, 0x0163
     c72:	90 91 64 01 	lds	r25, 0x0164
     c76:	31 30       	cpi	r19, 0x01	; 1
     c78:	39 f4       	brne	.+14     	; 0xc88 <mf_cdoneSelect+0x22>
	{
		cp.cpoint1_adc = adc_normalized;
     c7a:	90 93 94 01 	sts	0x0194, r25
     c7e:	80 93 93 01 	sts	0x0193, r24
		cp.cpoint1 = cpointVal;
     c82:	20 93 91 01 	sts	0x0191, r18
     c86:	06 c0       	rjmp	.+12     	; 0xc94 <mf_cdoneSelect+0x2e>
	}
	else
	{
		cp.cpoint2_adc = adc_normalized;
     c88:	90 93 96 01 	sts	0x0196, r25
     c8c:	80 93 95 01 	sts	0x0195, r24
		cp.cpoint2 = cpointVal;
     c90:	20 93 92 01 	sts	0x0192, r18
	}
	calculateCoeffs();
     c94:	c1 da       	rcall	.-2686   	; 0x218 <calculateCoeffs>
	saveCalibrationToEEPROM();
     c96:	f0 cd       	rjmp	.-1056   	; 0x878 <saveCalibrationToEEPROM>

00000c98 <mf_autopoffDo>:

//---------------------------------------------//


void mf_autopoffDo(void)
{
     c98:	cf 93       	push	r28
     c9a:	df 93       	push	r29
     c9c:	cd b7       	in	r28, 0x3d	; 61
     c9e:	de b7       	in	r29, 0x3e	; 62
     ca0:	27 97       	sbiw	r28, 0x07	; 7
     ca2:	0f b6       	in	r0, 0x3f	; 63
     ca4:	f8 94       	cli
     ca6:	de bf       	out	0x3e, r29	; 62
     ca8:	0f be       	out	0x3f, r0	; 63
     caa:	cd bf       	out	0x3d, r28	; 61
	char str[] = {'O','F','F',' ',' ',' ',0};
     cac:	87 e0       	ldi	r24, 0x07	; 7
     cae:	e4 e9       	ldi	r30, 0x94	; 148
     cb0:	f0 e0       	ldi	r31, 0x00	; 0
     cb2:	de 01       	movw	r26, r28
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	01 90       	ld	r0, Z+
     cb8:	0d 92       	st	X+, r0
     cba:	8a 95       	dec	r24
     cbc:	e1 f7       	brne	.-8      	; 0xcb6 <mf_autopoffDo+0x1e>
		
	if (button_state & (BD_UP | BR_UP))
     cbe:	80 91 f0 00 	lds	r24, 0x00F0
     cc2:	90 91 f1 00 	lds	r25, 0x00F1
     cc6:	9c 01       	movw	r18, r24
     cc8:	20 74       	andi	r18, 0x40	; 64
     cca:	34 70       	andi	r19, 0x04	; 4
     ccc:	23 2b       	or	r18, r19
     cce:	31 f0       	breq	.+12     	; 0xcdc <mf_autopoffDo+0x44>
	{
		if (p.power_off_timeout < MAX_POWEROFF_TIMEOUT)
     cd0:	80 91 9a 01 	lds	r24, 0x019A
     cd4:	8f 35       	cpi	r24, 0x5F	; 95
     cd6:	68 f4       	brcc	.+26     	; 0xcf2 <mf_autopoffDo+0x5a>
			p.power_off_timeout += 5;
     cd8:	8b 5f       	subi	r24, 0xFB	; 251
     cda:	09 c0       	rjmp	.+18     	; 0xcee <mf_autopoffDo+0x56>
		restartMenuTimer();
	}
	else if (button_state & (BD_DOWN | BR_DOWN))
     cdc:	80 78       	andi	r24, 0x80	; 128
     cde:	98 70       	andi	r25, 0x08	; 8
     ce0:	89 2b       	or	r24, r25
     ce2:	49 f0       	breq	.+18     	; 0xcf6 <mf_autopoffDo+0x5e>
	{
		if (p.power_off_timeout > MIN_POWEROFF_TIMEOUT)
     ce4:	80 91 9a 01 	lds	r24, 0x019A
     ce8:	86 30       	cpi	r24, 0x06	; 6
     cea:	18 f0       	brcs	.+6      	; 0xcf2 <mf_autopoffDo+0x5a>
			p.power_off_timeout -= 5;
     cec:	85 50       	subi	r24, 0x05	; 5
     cee:	80 93 9a 01 	sts	0x019A, r24
//	 Restarts menu state timeout
//	Should be used in RUN function when control buttons are pressed.
//-----------------------------------------------------------------//
static void restartMenuTimer(void)
{
	menuTimer.Timer = 0;
     cf2:	10 92 84 00 	sts	0x0084, r1
		if (p.power_off_timeout > MIN_POWEROFF_TIMEOUT)
			p.power_off_timeout -= 5;
		restartMenuTimer();
	}	
		
	if (userTimer.FA_GE)
     cf6:	80 91 0b 01 	lds	r24, 0x010B
     cfa:	84 ff       	sbrs	r24, 4
     cfc:	10 c0       	rjmp	.+32     	; 0xd1e <mf_autopoffDo+0x86>
	{
		if (p.power_off_timeout != MAX_POWEROFF_TIMEOUT)
     cfe:	80 91 9a 01 	lds	r24, 0x019A
     d02:	8f 35       	cpi	r24, 0x5F	; 95
     d04:	41 f0       	breq	.+16     	; 0xd16 <mf_autopoffDo+0x7e>
			u16toa_align_right(p.power_off_timeout,str + 4,0x80 | 2,' ');	
     d06:	20 e2       	ldi	r18, 0x20	; 32
     d08:	42 e8       	ldi	r20, 0x82	; 130
     d0a:	be 01       	movw	r22, r28
     d0c:	6b 5f       	subi	r22, 0xFB	; 251
     d0e:	7f 4f       	sbci	r23, 0xFF	; 255
     d10:	90 e0       	ldi	r25, 0x00	; 0
     d12:	3f d2       	rcall	.+1150   	; 0x1192 <u16toa_align_right>
     d14:	04 c0       	rjmp	.+8      	; 0xd1e <mf_autopoffDo+0x86>
		else 
		{
			str[4] = 'N';
     d16:	8e e4       	ldi	r24, 0x4E	; 78
     d18:	8d 83       	std	Y+5, r24	; 0x05
			str[5] = 'O';
     d1a:	8f e4       	ldi	r24, 0x4F	; 79
     d1c:	8e 83       	std	Y+6, r24	; 0x06
		}			
	}		
		
	printLedBuffer(0,str);
     d1e:	be 01       	movw	r22, r28
     d20:	6f 5f       	subi	r22, 0xFF	; 255
     d22:	7f 4f       	sbci	r23, 0xFF	; 255
     d24:	80 e0       	ldi	r24, 0x00	; 0
     d26:	a6 de       	rcall	.-692    	; 0xa74 <printLedBuffer>
}
     d28:	27 96       	adiw	r28, 0x07	; 7
     d2a:	0f b6       	in	r0, 0x3f	; 63
     d2c:	f8 94       	cli
     d2e:	de bf       	out	0x3e, r29	; 62
     d30:	0f be       	out	0x3f, r0	; 63
     d32:	cd bf       	out	0x3d, r28	; 61
     d34:	df 91       	pop	r29
     d36:	cf 91       	pop	r28
     d38:	08 95       	ret

00000d3a <mf_calibDo>:
	cpointNum = 2;
	printLedBuffer(0,"P2    ");
}

void mf_calibDo(void)
{
     d3a:	cf 93       	push	r28
     d3c:	df 93       	push	r29
     d3e:	00 d0       	rcall	.+0      	; 0xd40 <mf_calibDo+0x6>
     d40:	00 d0       	rcall	.+0      	; 0xd42 <mf_calibDo+0x8>
     d42:	cd b7       	in	r28, 0x3d	; 61
     d44:	de b7       	in	r29, 0x3e	; 62
	char str[] = "   ";
     d46:	80 e2       	ldi	r24, 0x20	; 32
     d48:	90 e2       	ldi	r25, 0x20	; 32
     d4a:	a0 e2       	ldi	r26, 0x20	; 32
     d4c:	b0 e0       	ldi	r27, 0x00	; 0
     d4e:	89 83       	std	Y+1, r24	; 0x01
     d50:	9a 83       	std	Y+2, r25	; 0x02
     d52:	ab 83       	std	Y+3, r26	; 0x03
     d54:	bc 83       	std	Y+4, r27	; 0x04
	
	if (button_state & (BD_UP | BR_UP))
     d56:	80 91 f0 00 	lds	r24, 0x00F0
     d5a:	90 91 f1 00 	lds	r25, 0x00F1
     d5e:	9c 01       	movw	r18, r24
     d60:	20 74       	andi	r18, 0x40	; 64
     d62:	34 70       	andi	r19, 0x04	; 4
     d64:	23 2b       	or	r18, r19
     d66:	31 f0       	breq	.+12     	; 0xd74 <mf_calibDo+0x3a>
	{
		if (cpoint_user_val < MAX_CALIB_TEMP)
     d68:	80 91 09 01 	lds	r24, 0x0109
     d6c:	8a 3f       	cpi	r24, 0xFA	; 250
     d6e:	68 f4       	brcc	.+26     	; 0xd8a <mf_calibDo+0x50>
		cpoint_user_val += 1;
     d70:	8f 5f       	subi	r24, 0xFF	; 255
     d72:	09 c0       	rjmp	.+18     	; 0xd86 <mf_calibDo+0x4c>
	}
	else if (button_state & (BD_DOWN | BR_DOWN))
     d74:	80 78       	andi	r24, 0x80	; 128
     d76:	98 70       	andi	r25, 0x08	; 8
     d78:	89 2b       	or	r24, r25
     d7a:	39 f0       	breq	.+14     	; 0xd8a <mf_calibDo+0x50>
	{
		if (cpoint_user_val > MIN_CALIB_TEMP)
     d7c:	80 91 09 01 	lds	r24, 0x0109
     d80:	8b 30       	cpi	r24, 0x0B	; 11
     d82:	18 f0       	brcs	.+6      	; 0xd8a <mf_calibDo+0x50>
		cpoint_user_val -= 1;
     d84:	81 50       	subi	r24, 0x01	; 1
     d86:	80 93 09 01 	sts	0x0109, r24
	}
	
	if (userTimer.FA_GE)
     d8a:	80 91 0b 01 	lds	r24, 0x010B
     d8e:	84 ff       	sbrs	r24, 4
     d90:	0f c0       	rjmp	.+30     	; 0xdb0 <mf_calibDo+0x76>
	{
		u16toa_align_right(cpoint_user_val,str,3,' ');
     d92:	20 e2       	ldi	r18, 0x20	; 32
     d94:	43 e0       	ldi	r20, 0x03	; 3
     d96:	be 01       	movw	r22, r28
     d98:	6f 5f       	subi	r22, 0xFF	; 255
     d9a:	7f 4f       	sbci	r23, 0xFF	; 255
     d9c:	80 91 09 01 	lds	r24, 0x0109
     da0:	90 e0       	ldi	r25, 0x00	; 0
     da2:	f7 d1       	rcall	.+1006   	; 0x1192 <u16toa_align_right>
		resetAutoPowerOffCounter();
     da4:	9c d5       	rcall	.+2872   	; 0x18de <resetAutoPowerOffCounter>
		heaterState |= CALIBRATION_ACTIVE;
     da6:	80 91 f5 00 	lds	r24, 0x00F5
     daa:	82 60       	ori	r24, 0x02	; 2
     dac:	80 93 f5 00 	sts	0x00F5, r24
	}
	
	printLedBuffer(3,str);
     db0:	be 01       	movw	r22, r28
     db2:	6f 5f       	subi	r22, 0xFF	; 255
     db4:	7f 4f       	sbci	r23, 0xFF	; 255
     db6:	83 e0       	ldi	r24, 0x03	; 3
     db8:	5d de       	rcall	.-838    	; 0xa74 <printLedBuffer>
}
     dba:	0f 90       	pop	r0
     dbc:	0f 90       	pop	r0
     dbe:	0f 90       	pop	r0
     dc0:	0f 90       	pop	r0
     dc2:	df 91       	pop	r29
     dc4:	cf 91       	pop	r28
     dc6:	08 95       	ret

00000dc8 <mf_sndenDo>:

//---------------------------------------------//


void mf_sndenDo(void)
{
     dc8:	cf 93       	push	r28
     dca:	df 93       	push	r29
     dcc:	cd b7       	in	r28, 0x3d	; 61
     dce:	de b7       	in	r29, 0x3e	; 62
     dd0:	27 97       	sbiw	r28, 0x07	; 7
     dd2:	0f b6       	in	r0, 0x3f	; 63
     dd4:	f8 94       	cli
     dd6:	de bf       	out	0x3e, r29	; 62
     dd8:	0f be       	out	0x3f, r0	; 63
     dda:	cd bf       	out	0x3d, r28	; 61
	char str[] = {'S','N','D',' ',' ',' ',0};
     ddc:	87 e0       	ldi	r24, 0x07	; 7
     dde:	eb e9       	ldi	r30, 0x9B	; 155
     de0:	f0 e0       	ldi	r31, 0x00	; 0
     de2:	de 01       	movw	r26, r28
     de4:	11 96       	adiw	r26, 0x01	; 1
     de6:	01 90       	ld	r0, Z+
     de8:	0d 92       	st	X+, r0
     dea:	8a 95       	dec	r24
     dec:	e1 f7       	brne	.-8      	; 0xde6 <mf_sndenDo+0x1e>
		
	if (button_state & (BD_UP | BD_DOWN))
     dee:	80 91 f0 00 	lds	r24, 0x00F0
     df2:	90 91 f1 00 	lds	r25, 0x00F1
     df6:	80 7c       	andi	r24, 0xC0	; 192
     df8:	99 27       	eor	r25, r25
     dfa:	89 2b       	or	r24, r25
     dfc:	49 f0       	breq	.+18     	; 0xe10 <mf_sndenDo+0x48>
	{
		p.sound_enable = !p.sound_enable;
     dfe:	81 e0       	ldi	r24, 0x01	; 1
     e00:	90 91 99 01 	lds	r25, 0x0199
     e04:	91 11       	cpse	r25, r1
     e06:	80 e0       	ldi	r24, 0x00	; 0
     e08:	80 93 99 01 	sts	0x0199, r24
//	 Restarts menu state timeout
//	Should be used in RUN function when control buttons are pressed.
//-----------------------------------------------------------------//
static void restartMenuTimer(void)
{
	menuTimer.Timer = 0;
     e0c:	10 92 84 00 	sts	0x0084, r1
	{
		p.sound_enable = !p.sound_enable;
		restartMenuTimer();
	}			
		
	if (userTimer.FA_GE)
     e10:	80 91 0b 01 	lds	r24, 0x010B
     e14:	84 ff       	sbrs	r24, 4
     e16:	0d c0       	rjmp	.+26     	; 0xe32 <mf_sndenDo+0x6a>
	{
		if (p.sound_enable)		
     e18:	80 91 99 01 	lds	r24, 0x0199
     e1c:	88 23       	and	r24, r24
     e1e:	21 f0       	breq	.+8      	; 0xe28 <mf_sndenDo+0x60>
		{
			str[4] = 'O';
     e20:	8f e4       	ldi	r24, 0x4F	; 79
     e22:	8d 83       	std	Y+5, r24	; 0x05
			str[5] = 'N';
     e24:	8e e4       	ldi	r24, 0x4E	; 78
     e26:	04 c0       	rjmp	.+8      	; 0xe30 <mf_sndenDo+0x68>
		}
		else
		{
			str[3] = 'O';
     e28:	8f e4       	ldi	r24, 0x4F	; 79
     e2a:	8c 83       	std	Y+4, r24	; 0x04
			str[4] = 'F';
     e2c:	86 e4       	ldi	r24, 0x46	; 70
     e2e:	8d 83       	std	Y+5, r24	; 0x05
			str[5] = 'F';
     e30:	8e 83       	std	Y+6, r24	; 0x06
		}			
	}
		
	printLedBuffer(0,str);
     e32:	be 01       	movw	r22, r28
     e34:	6f 5f       	subi	r22, 0xFF	; 255
     e36:	7f 4f       	sbci	r23, 0xFF	; 255
     e38:	80 e0       	ldi	r24, 0x00	; 0
     e3a:	1c de       	rcall	.-968    	; 0xa74 <printLedBuffer>
	setComma(2);
     e3c:	82 e0       	ldi	r24, 0x02	; 2
     e3e:	54 de       	rcall	.-856    	; 0xae8 <setComma>
}
     e40:	27 96       	adiw	r28, 0x07	; 7
     e42:	0f b6       	in	r0, 0x3f	; 63
     e44:	f8 94       	cli
     e46:	de bf       	out	0x3e, r29	; 62
     e48:	0f be       	out	0x3f, r0	; 63
     e4a:	cd bf       	out	0x3d, r28	; 61
     e4c:	df 91       	pop	r29
     e4e:	cf 91       	pop	r28
     e50:	08 95       	ret

00000e52 <mf_rollDo>:
	setExtraLeds(LED_ROLL);
	mf_leafSelectAct();		// setup and start timer
}

void mf_rollDo(void)
{
     e52:	cf 93       	push	r28
     e54:	df 93       	push	r29
     e56:	cd b7       	in	r28, 0x3d	; 61
     e58:	de b7       	in	r29, 0x3e	; 62
     e5a:	27 97       	sbiw	r28, 0x07	; 7
     e5c:	0f b6       	in	r0, 0x3f	; 63
     e5e:	f8 94       	cli
     e60:	de bf       	out	0x3e, r29	; 62
     e62:	0f be       	out	0x3f, r0	; 63
     e64:	cd bf       	out	0x3d, r28	; 61
	char str[] = {' ',' ',' ',' ',' ',' ',0};
     e66:	87 e0       	ldi	r24, 0x07	; 7
     e68:	e2 ea       	ldi	r30, 0xA2	; 162
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	de 01       	movw	r26, r28
     e6e:	11 96       	adiw	r26, 0x01	; 1
     e70:	01 90       	ld	r0, Z+
     e72:	0d 92       	st	X+, r0
     e74:	8a 95       	dec	r24
     e76:	e1 f7       	brne	.-8      	; 0xe70 <mf_rollDo+0x1e>
		
	if (button_state & (BD_UP | BR_UP))
     e78:	80 91 f0 00 	lds	r24, 0x00F0
     e7c:	90 91 f1 00 	lds	r25, 0x00F1
     e80:	9c 01       	movw	r18, r24
     e82:	20 74       	andi	r18, 0x40	; 64
     e84:	34 70       	andi	r19, 0x04	; 4
     e86:	23 2b       	or	r18, r19
     e88:	31 f0       	breq	.+12     	; 0xe96 <mf_rollDo+0x44>
	{
		if (p.rollCycleSet < MAX_ROLL_CYCLES)
     e8a:	80 91 98 01 	lds	r24, 0x0198
     e8e:	83 36       	cpi	r24, 0x63	; 99
     e90:	68 f4       	brcc	.+26     	; 0xeac <mf_rollDo+0x5a>
			p.rollCycleSet += 1;
     e92:	8f 5f       	subi	r24, 0xFF	; 255
     e94:	09 c0       	rjmp	.+18     	; 0xea8 <mf_rollDo+0x56>
	}
	else if (button_state & (BD_DOWN | BR_DOWN))
     e96:	80 78       	andi	r24, 0x80	; 128
     e98:	98 70       	andi	r25, 0x08	; 8
     e9a:	89 2b       	or	r24, r25
     e9c:	39 f0       	breq	.+14     	; 0xeac <mf_rollDo+0x5a>
	{
		if (p.rollCycleSet > MIN_ROLL_CYCLES)
     e9e:	80 91 98 01 	lds	r24, 0x0198
     ea2:	82 30       	cpi	r24, 0x02	; 2
     ea4:	18 f0       	brcs	.+6      	; 0xeac <mf_rollDo+0x5a>
			p.rollCycleSet -= 1;
     ea6:	81 50       	subi	r24, 0x01	; 1
     ea8:	80 93 98 01 	sts	0x0198, r24
	}	
		
	u16toa_align_right(p.rollCycleSet,str + 4,0x80 | 2,' ');
     eac:	20 e2       	ldi	r18, 0x20	; 32
     eae:	42 e8       	ldi	r20, 0x82	; 130
     eb0:	be 01       	movw	r22, r28
     eb2:	6b 5f       	subi	r22, 0xFB	; 251
     eb4:	7f 4f       	sbci	r23, 0xFF	; 255
     eb6:	80 91 98 01 	lds	r24, 0x0198
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	6a d1       	rcall	.+724    	; 0x1192 <u16toa_align_right>
	
	if ((!(rollState & ROLL_CYCLE)) || (userTimer.FA_GE))
     ebe:	80 91 10 01 	lds	r24, 0x0110
     ec2:	82 ff       	sbrs	r24, 2
     ec4:	04 c0       	rjmp	.+8      	; 0xece <mf_rollDo+0x7c>
     ec6:	80 91 0b 01 	lds	r24, 0x010B
     eca:	84 ff       	sbrs	r24, 4
     ecc:	09 c0       	rjmp	.+18     	; 0xee0 <mf_rollDo+0x8e>
	{
		u16toa_align_right(activeRollCycle,str + 1,0x80 | 2,' ');
     ece:	20 e2       	ldi	r18, 0x20	; 32
     ed0:	42 e8       	ldi	r20, 0x82	; 130
     ed2:	be 01       	movw	r22, r28
     ed4:	6e 5f       	subi	r22, 0xFE	; 254
     ed6:	7f 4f       	sbci	r23, 0xFF	; 255
     ed8:	80 91 0f 01 	lds	r24, 0x010F
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	59 d1       	rcall	.+690    	; 0x1192 <u16toa_align_right>
	}
	
	str[0] = 0;
     ee0:	19 82       	std	Y+1, r1	; 0x01
	if (isTopPointValid())
     ee2:	2b d3       	rcall	.+1622   	; 0x153a <isTopPointValid>
     ee4:	88 23       	and	r24, r24
     ee6:	19 f0       	breq	.+6      	; 0xeee <mf_rollDo+0x9c>
		str[0] |= SEGA;
     ee8:	89 81       	ldd	r24, Y+1	; 0x01
     eea:	81 60       	ori	r24, 0x01	; 1
     eec:	89 83       	std	Y+1, r24	; 0x01
	if (isBottomPointValid())
     eee:	35 d3       	rcall	.+1642   	; 0x155a <isBottomPointValid>
     ef0:	88 23       	and	r24, r24
     ef2:	19 f0       	breq	.+6      	; 0xefa <mf_rollDo+0xa8>
		str[0] |= SEGD;
     ef4:	89 81       	ldd	r24, Y+1	; 0x01
     ef6:	88 60       	ori	r24, 0x08	; 8
     ef8:	89 83       	std	Y+1, r24	; 0x01
	if (str[0] == 0)
     efa:	89 81       	ldd	r24, Y+1	; 0x01
     efc:	81 11       	cpse	r24, r1
     efe:	02 c0       	rjmp	.+4      	; 0xf04 <mf_rollDo+0xb2>
		str[0] = ' ';
     f00:	80 e2       	ldi	r24, 0x20	; 32
     f02:	89 83       	std	Y+1, r24	; 0x01
		
	printLedBuffer(0,str);
     f04:	be 01       	movw	r22, r28
     f06:	6f 5f       	subi	r22, 0xFF	; 255
     f08:	7f 4f       	sbci	r23, 0xFF	; 255
     f0a:	80 e0       	ldi	r24, 0x00	; 0
     f0c:	b3 dd       	rcall	.-1178   	; 0xa74 <printLedBuffer>
}
     f0e:	27 96       	adiw	r28, 0x07	; 7
     f10:	0f b6       	in	r0, 0x3f	; 63
     f12:	f8 94       	cli
     f14:	de bf       	out	0x3e, r29	; 62
     f16:	0f be       	out	0x3f, r0	; 63
     f18:	cd bf       	out	0x3d, r28	; 61
     f1a:	df 91       	pop	r29
     f1c:	cf 91       	pop	r28
     f1e:	08 95       	ret

00000f20 <mf_rollSelect>:
//---------------------------------------------//
//---------------------------------------------//

void mf_rollSelect(void)
{
	setExtraLeds(LED_ROLL);
     f20:	80 e4       	ldi	r24, 0x40	; 64
     f22:	ee dd       	rcall	.-1060   	; 0xb00 <setExtraLeds>
	mf_leafSelectAct();		// setup and start timer
     f24:	43 ce       	rjmp	.-890    	; 0xbac <mf_leafSelectAct>

00000f26 <mf_setTempDo>:
	clearExtraLeds(LED_TEMP);
	mf_leafSelectAct();		// setup and start timer
}

void mf_setTempDo(void)
{
     f26:	cf 93       	push	r28
     f28:	df 93       	push	r29
     f2a:	cd b7       	in	r28, 0x3d	; 61
     f2c:	de b7       	in	r29, 0x3e	; 62
     f2e:	27 97       	sbiw	r28, 0x07	; 7
     f30:	0f b6       	in	r0, 0x3f	; 63
     f32:	f8 94       	cli
     f34:	de bf       	out	0x3e, r29	; 62
     f36:	0f be       	out	0x3f, r0	; 63
     f38:	cd bf       	out	0x3d, r28	; 61
	char str[] = {' ',' ',' ',' ',0xB0,'C',0};
     f3a:	87 e0       	ldi	r24, 0x07	; 7
     f3c:	e9 ea       	ldi	r30, 0xA9	; 169
     f3e:	f0 e0       	ldi	r31, 0x00	; 0
     f40:	de 01       	movw	r26, r28
     f42:	11 96       	adiw	r26, 0x01	; 1
     f44:	01 90       	ld	r0, Z+
     f46:	0d 92       	st	X+, r0
     f48:	8a 95       	dec	r24
     f4a:	e1 f7       	brne	.-8      	; 0xf44 <mf_setTempDo+0x1e>
	
	if (button_state & (BD_UP | BR_UP))
     f4c:	80 91 f0 00 	lds	r24, 0x00F0
     f50:	90 91 f1 00 	lds	r25, 0x00F1
     f54:	9c 01       	movw	r18, r24
     f56:	20 74       	andi	r18, 0x40	; 64
     f58:	34 70       	andi	r19, 0x04	; 4
     f5a:	23 2b       	or	r18, r19
     f5c:	31 f0       	breq	.+12     	; 0xf6a <mf_setTempDo+0x44>
	{
		if (p.setup_temp_value < MAX_SET_TEMP)
     f5e:	80 91 97 01 	lds	r24, 0x0197
     f62:	8a 3f       	cpi	r24, 0xFA	; 250
     f64:	68 f4       	brcc	.+26     	; 0xf80 <mf_setTempDo+0x5a>
			p.setup_temp_value += 5;
     f66:	8b 5f       	subi	r24, 0xFB	; 251
     f68:	09 c0       	rjmp	.+18     	; 0xf7c <mf_setTempDo+0x56>
		restartMenuTimer();
	}
	else if (button_state & (BD_DOWN | BR_DOWN))
     f6a:	80 78       	andi	r24, 0x80	; 128
     f6c:	98 70       	andi	r25, 0x08	; 8
     f6e:	89 2b       	or	r24, r25
     f70:	49 f0       	breq	.+18     	; 0xf84 <mf_setTempDo+0x5e>
	{
		if (p.setup_temp_value > MIN_SET_TEMP)
     f72:	80 91 97 01 	lds	r24, 0x0197
     f76:	8f 31       	cpi	r24, 0x1F	; 31
     f78:	18 f0       	brcs	.+6      	; 0xf80 <mf_setTempDo+0x5a>
			p.setup_temp_value -= 5;
     f7a:	85 50       	subi	r24, 0x05	; 5
     f7c:	80 93 97 01 	sts	0x0197, r24
//	 Restarts menu state timeout
//	Should be used in RUN function when control buttons are pressed.
//-----------------------------------------------------------------//
static void restartMenuTimer(void)
{
	menuTimer.Timer = 0;
     f80:	10 92 84 00 	sts	0x0084, r1
			p.setup_temp_value -= 5;
		restartMenuTimer();
	}					
		
	// Output ADC result to LED
	u16toa_align_right(p.setup_temp_value,str,0x80 | 4,' ');
     f84:	20 e2       	ldi	r18, 0x20	; 32
     f86:	44 e8       	ldi	r20, 0x84	; 132
     f88:	be 01       	movw	r22, r28
     f8a:	6f 5f       	subi	r22, 0xFF	; 255
     f8c:	7f 4f       	sbci	r23, 0xFF	; 255
     f8e:	80 91 97 01 	lds	r24, 0x0197
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	fe d0       	rcall	.+508    	; 0x1192 <u16toa_align_right>
	printLedBuffer(0,str);
     f96:	be 01       	movw	r22, r28
     f98:	6f 5f       	subi	r22, 0xFF	; 255
     f9a:	7f 4f       	sbci	r23, 0xFF	; 255
     f9c:	80 e0       	ldi	r24, 0x00	; 0
     f9e:	6a dd       	rcall	.-1324   	; 0xa74 <printLedBuffer>
	
	if (userTimer.FA_GE)
     fa0:	80 91 0b 01 	lds	r24, 0x010B
     fa4:	84 ff       	sbrs	r24, 4
     fa6:	03 c0       	rjmp	.+6      	; 0xfae <mf_setTempDo+0x88>
		setExtraLeds(LED_TEMP);
     fa8:	80 e8       	ldi	r24, 0x80	; 128
     faa:	aa dd       	rcall	.-1196   	; 0xb00 <setExtraLeds>
     fac:	02 c0       	rjmp	.+4      	; 0xfb2 <mf_setTempDo+0x8c>
	else
		clearExtraLeds(LED_TEMP);
     fae:	80 e8       	ldi	r24, 0x80	; 128
     fb0:	ad dd       	rcall	.-1190   	; 0xb0c <clearExtraLeds>
}
     fb2:	27 96       	adiw	r28, 0x07	; 7
     fb4:	0f b6       	in	r0, 0x3f	; 63
     fb6:	f8 94       	cli
     fb8:	de bf       	out	0x3e, r29	; 62
     fba:	0f be       	out	0x3f, r0	; 63
     fbc:	cd bf       	out	0x3d, r28	; 61
     fbe:	df 91       	pop	r29
     fc0:	cf 91       	pop	r28
     fc2:	08 95       	ret

00000fc4 <mf_realTempSelect>:
//=================================================================//


void mf_realTempSelect(void)
{
	setExtraLeds(LED_TEMP);
     fc4:	80 e8       	ldi	r24, 0x80	; 128
     fc6:	9c cd       	rjmp	.-1224   	; 0xb00 <setExtraLeds>

00000fc8 <mf_realTempDo>:
}

void mf_realTempDo(void)
{
     fc8:	cf 93       	push	r28
     fca:	df 93       	push	r29
     fcc:	cd b7       	in	r28, 0x3d	; 61
     fce:	de b7       	in	r29, 0x3e	; 62
     fd0:	27 97       	sbiw	r28, 0x07	; 7
     fd2:	0f b6       	in	r0, 0x3f	; 63
     fd4:	f8 94       	cli
     fd6:	de bf       	out	0x3e, r29	; 62
     fd8:	0f be       	out	0x3f, r0	; 63
     fda:	cd bf       	out	0x3d, r28	; 61
	char str[] = {' ',' ',' ',' ',0xB0,'C',0};
     fdc:	87 e0       	ldi	r24, 0x07	; 7
     fde:	e9 ea       	ldi	r30, 0xA9	; 169
     fe0:	f0 e0       	ldi	r31, 0x00	; 0
     fe2:	de 01       	movw	r26, r28
     fe4:	11 96       	adiw	r26, 0x01	; 1
     fe6:	01 90       	ld	r0, Z+
     fe8:	0d 92       	st	X+, r0
     fea:	8a 95       	dec	r24
     fec:	e1 f7       	brne	.-8      	; 0xfe6 <mf_realTempDo+0x1e>

	if (adc_status & (SENSOR_ERROR_NO_PRESENT))
     fee:	80 91 65 01 	lds	r24, 0x0165
     ff2:	80 ff       	sbrs	r24, 0
     ff4:	03 c0       	rjmp	.+6      	; 0xffc <mf_realTempDo+0x34>
	{
		printLedBuffer(0,"ERR 01");
     ff6:	6c ec       	ldi	r22, 0xCC	; 204
     ff8:	70 e0       	ldi	r23, 0x00	; 0
     ffa:	12 c0       	rjmp	.+36     	; 0x1020 <mf_realTempDo+0x58>
	}
	else if (adc_status & (SENSOR_ERROR_SHORTED))
     ffc:	81 ff       	sbrs	r24, 1
     ffe:	03 c0       	rjmp	.+6      	; 0x1006 <mf_realTempDo+0x3e>
	{
		printLedBuffer(0,"ERR 02");
    1000:	63 ed       	ldi	r22, 0xD3	; 211
    1002:	70 e0       	ldi	r23, 0x00	; 0
    1004:	0d c0       	rjmp	.+26     	; 0x1020 <mf_realTempDo+0x58>
	}
	else
	{
		// Output ADC result to LED
		u16toa_align_right(adc_celsius,str,0x80 | 4,' ');
    1006:	20 e2       	ldi	r18, 0x20	; 32
    1008:	44 e8       	ldi	r20, 0x84	; 132
    100a:	be 01       	movw	r22, r28
    100c:	6f 5f       	subi	r22, 0xFF	; 255
    100e:	7f 4f       	sbci	r23, 0xFF	; 255
    1010:	80 91 66 01 	lds	r24, 0x0166
    1014:	90 91 67 01 	lds	r25, 0x0167
    1018:	bc d0       	rcall	.+376    	; 0x1192 <u16toa_align_right>
		printLedBuffer(0,str);
    101a:	be 01       	movw	r22, r28
    101c:	6f 5f       	subi	r22, 0xFF	; 255
    101e:	7f 4f       	sbci	r23, 0xFF	; 255
    1020:	80 e0       	ldi	r24, 0x00	; 0
    1022:	28 dd       	rcall	.-1456   	; 0xa74 <printLedBuffer>
	}
}
    1024:	27 96       	adiw	r28, 0x07	; 7
    1026:	0f b6       	in	r0, 0x3f	; 63
    1028:	f8 94       	cli
    102a:	de bf       	out	0x3e, r29	; 62
    102c:	0f be       	out	0x3f, r0	; 63
    102e:	cd bf       	out	0x3d, r28	; 61
    1030:	df 91       	pop	r29
    1032:	cf 91       	pop	r28
    1034:	08 95       	ret

00001036 <getMenuFunctionRecord.constprop.1>:
//	Arguments:
//		menuItemID - ID of an item
//		menuRecord - pointer to function structure to fill
//	Output:
//-----------------------------------------------------------------//
static void getMenuFunctionRecord(uint8_t menuItemID, MenuFunctionRecord* menuRecord )
    1036:	1f 93       	push	r17
    1038:	cf 93       	push	r28
    103a:	df 93       	push	r29
    103c:	c0 e0       	ldi	r28, 0x00	; 0
    103e:	d0 e0       	ldi	r29, 0x00	; 0
{
	uint8_t i;
	for (i = 0; i < sizeof(menuFunctionSet)/sizeof(MenuFunctionRecord); i++  )
	{
		readMenuRecord(&menuFunctionSet[i], menuRecord);
    1040:	17 e0       	ldi	r17, 0x07	; 7
    1042:	1c 9f       	mul	r17, r28
    1044:	90 01       	movw	r18, r0
    1046:	1d 9f       	mul	r17, r29
    1048:	30 0d       	add	r19, r0
    104a:	11 24       	eor	r1, r1
    104c:	26 5a       	subi	r18, 0xA6	; 166
    104e:	3f 4f       	sbci	r19, 0xFF	; 255
//		fRecPtr		- address of the function record in the FLASH
//		resPtr		- address of the record to fill in the SRAM
//-----------------------------------------------------------------//
static inline void readMenuRecord(const MenuFunctionRecord* fRecPtr, MenuFunctionRecord* resPtr )
{
	resPtr->Item = pgm_read_byte(&fRecPtr->Item);
    1050:	f9 01       	movw	r30, r18
    1052:	94 91       	lpm	r25, Z
	resPtr->SelectFunction = (FuncPtr)pgm_read_word(&fRecPtr->SelectFunction);
    1054:	31 96       	adiw	r30, 0x01	; 1
    1056:	a5 91       	lpm	r26, Z+
    1058:	b4 91       	lpm	r27, Z
	resPtr->RunFunction = (FuncPtr)pgm_read_word(&fRecPtr->RunFunction);
    105a:	f9 01       	movw	r30, r18
    105c:	33 96       	adiw	r30, 0x03	; 3
    105e:	65 91       	lpm	r22, Z+
    1060:	74 91       	lpm	r23, Z
	resPtr->LeaveFunction = (FuncPtr)pgm_read_word(&fRecPtr->LeaveFunction);
    1062:	2b 5f       	subi	r18, 0xFB	; 251
    1064:	3f 4f       	sbci	r19, 0xFF	; 255
    1066:	f9 01       	movw	r30, r18
    1068:	45 91       	lpm	r20, Z+
    106a:	54 91       	lpm	r21, Z
{
	uint8_t i;
	for (i = 0; i < sizeof(menuFunctionSet)/sizeof(MenuFunctionRecord); i++  )
	{
		readMenuRecord(&menuFunctionSet[i], menuRecord);
		if (menuRecord->Item == menuItemID)
    106c:	98 13       	cpse	r25, r24
    106e:	03 c0       	rjmp	.+6      	; 0x1076 <getMenuFunctionRecord.constprop.1+0x40>
    1070:	80 93 02 01 	sts	0x0102, r24
    1074:	06 c0       	rjmp	.+12     	; 0x1082 <getMenuFunctionRecord.constprop.1+0x4c>
    1076:	21 96       	adiw	r28, 0x01	; 1
//	Output:
//-----------------------------------------------------------------//
static void getMenuFunctionRecord(uint8_t menuItemID, MenuFunctionRecord* menuRecord )
{
	uint8_t i;
	for (i = 0; i < sizeof(menuFunctionSet)/sizeof(MenuFunctionRecord); i++  )
    1078:	ce 30       	cpi	r28, 0x0E	; 14
    107a:	d1 05       	cpc	r29, r1
    107c:	11 f7       	brne	.-60     	; 0x1042 <getMenuFunctionRecord.constprop.1+0xc>
    107e:	90 93 02 01 	sts	0x0102, r25
    1082:	a0 93 03 01 	sts	0x0103, r26
    1086:	b0 93 04 01 	sts	0x0104, r27
    108a:	60 93 05 01 	sts	0x0105, r22
    108e:	70 93 06 01 	sts	0x0106, r23
    1092:	40 93 07 01 	sts	0x0107, r20
    1096:	50 93 08 01 	sts	0x0108, r21
	{
		readMenuRecord(&menuFunctionSet[i], menuRecord);
		if (menuRecord->Item == menuItemID)
			break;
	}
}
    109a:	df 91       	pop	r29
    109c:	cf 91       	pop	r28
    109e:	1f 91       	pop	r17
    10a0:	08 95       	ret

000010a2 <InitMenu>:
//	Menu initialization
//	Call this function at start of your program before processMenu()
//-----------------------------------------------------------------//
void InitMenu(void)
{
	selectedMenuItemID = mi_REALTEMP;
    10a2:	81 e0       	ldi	r24, 0x01	; 1
    10a4:	80 93 01 01 	sts	0x0101, r24
	getMenuFunctionRecord(selectedMenuItemID, &selectedMenuFunctionRecord);
    10a8:	c6 df       	rcall	.-116    	; 0x1036 <getMenuFunctionRecord.constprop.1>
	processItemFunction(selectedMenuFunctionRecord.SelectFunction);
    10aa:	80 91 03 01 	lds	r24, 0x0103
    10ae:	90 91 04 01 	lds	r25, 0x0104
    10b2:	71 cd       	rjmp	.-1310   	; 0xb96 <processItemFunction>

000010b4 <processMenu>:
//	Main menu control, -  state function calls, jumps 
//	between menu states and indication
//	Call this function from main() with a fixed time interval.
//-----------------------------------------------------------------//
void processMenu(void)
{
    10b4:	0f 93       	push	r16
    10b6:	1f 93       	push	r17
    10b8:	cf 93       	push	r28
    10ba:	df 93       	push	r29
	NextItem_t nextItem;
	uint16_t jumpCondition;
	
	processSoftTimer8b(&menuTimer);	
    10bc:	83 e8       	ldi	r24, 0x83	; 131
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	7b d3       	rcall	.+1782   	; 0x17b8 <processSoftTimer8b>
	
	// Compose jump condition
	jumpCondition = button_state;		
    10c2:	40 91 f0 00 	lds	r20, 0x00F0
    10c6:	50 91 f1 00 	lds	r21, 0x00F1
	if (menuTimer.FTop)
    10ca:	80 91 83 00 	lds	r24, 0x0083
    10ce:	85 fd       	sbrc	r24, 5
		jumpCondition |= TMR_EXP;
    10d0:	50 68       	ori	r21, 0x80	; 128
	if (sys_timers.flags & AUTOPOFF_EXPIRED)
    10d2:	80 91 8f 00 	lds	r24, 0x008F
    10d6:	84 fd       	sbrc	r24, 4
		jumpCondition |= GOTO_POFF;
    10d8:	50 64       	ori	r21, 0x40	; 64
	
	// Get next menu item according to current state and jump conditions
	nextItem = getNextMenuItem(selectedMenuItemID, jumpCondition);
    10da:	80 91 01 01 	lds	r24, 0x0101
    10de:	60 e0       	ldi	r22, 0x00	; 0
    10e0:	70 e0       	ldi	r23, 0x00	; 0
	MenuJumpRecord	jRecord;
	uint8_t i;
	
	for (i = 0; i < sizeof(menuJumpSet)/sizeof(MenuJumpRecord); i++  )
	{
		readJumpRecord(&menuJumpSet[i], &jRecord);		// read full jump record
    10e2:	95 e0       	ldi	r25, 0x05	; 5
    10e4:	96 9f       	mul	r25, r22
    10e6:	90 01       	movw	r18, r0
    10e8:	97 9f       	mul	r25, r23
    10ea:	30 0d       	add	r19, r0
    10ec:	11 24       	eor	r1, r1
    10ee:	24 54       	subi	r18, 0x44	; 68
    10f0:	3f 4f       	sbci	r19, 0xFF	; 255
//		jRecPtr		- address of the jump record in the FLASH
//		resPtr		- address of the record to fill in the SRAM
//-----------------------------------------------------------------//
static inline void readJumpRecord(const MenuJumpRecord* jRecPtr, MenuJumpRecord* resPtr )
{
	resPtr->Item = pgm_read_byte(&jRecPtr->Item);
    10f2:	f9 01       	movw	r30, r18
    10f4:	14 91       	lpm	r17, Z
	resPtr->JumpCondition = pgm_read_word(&jRecPtr->JumpCondition);
    10f6:	31 96       	adiw	r30, 0x01	; 1
    10f8:	a5 91       	lpm	r26, Z+
    10fa:	b4 91       	lpm	r27, Z
	resPtr->NextItem= pgm_read_byte(&jRecPtr->NextItem);
    10fc:	f9 01       	movw	r30, r18
    10fe:	33 96       	adiw	r30, 0x03	; 3
    1100:	c4 91       	lpm	r28, Z
	resPtr->Flags= pgm_read_byte(&jRecPtr->Flags);
    1102:	f9 01       	movw	r30, r18
    1104:	34 96       	adiw	r30, 0x04	; 4
    1106:	d4 91       	lpm	r29, Z
	uint8_t i;
	
	for (i = 0; i < sizeof(menuJumpSet)/sizeof(MenuJumpRecord); i++  )
	{
		readJumpRecord(&menuJumpSet[i], &jRecord);		// read full jump record
		if (jRecord.Item == selectedItemId)				// If ID match,
    1108:	18 13       	cpse	r17, r24
    110a:	0b c0       	rjmp	.+22     	; 0x1122 <processMenu+0x6e>
		{
			if ((jRecord.JumpCondition & jmpCond) != 0)		// if any of jump conditions match too,
    110c:	a4 23       	and	r26, r20
    110e:	b5 23       	and	r27, r21
    1110:	ab 2b       	or	r26, r27
    1112:	39 f0       	breq	.+14     	; 0x1122 <processMenu+0x6e>
			{
				nextItem.ItemID = jRecord.NextItem;			// switch to next menu item
				nextItem.ItemTimeout = jRecord.Flags & TIMEOUT_MASK;
    1114:	1d 2f       	mov	r17, r29
    1116:	1f 73       	andi	r17, 0x3F	; 63
				nextItem.ShiftFlags = (jRecord.Flags & (SHIFT_LEFT | SHIFT_RIGHT));
    1118:	0d 2f       	mov	r16, r29
    111a:	00 7c       	andi	r16, 0xC0	; 192
	
	// Get next menu item according to current state and jump conditions
	nextItem = getNextMenuItem(selectedMenuItemID, jumpCondition);
	
	// If next item differs from current
	if (nextItem.ItemID != selectedMenuItemID)
    111c:	c8 13       	cpse	r28, r24
    111e:	07 c0       	rjmp	.+14     	; 0x112e <processMenu+0x7a>
    1120:	27 c0       	rjmp	.+78     	; 0x1170 <processMenu+0xbc>
    1122:	6f 5f       	subi	r22, 0xFF	; 255
    1124:	7f 4f       	sbci	r23, 0xFF	; 255
	NextItem_t nextItem;
	nextItem.ItemID = selectedItemId;
	MenuJumpRecord	jRecord;
	uint8_t i;
	
	for (i = 0; i < sizeof(menuJumpSet)/sizeof(MenuJumpRecord); i++  )
    1126:	60 32       	cpi	r22, 0x20	; 32
    1128:	71 05       	cpc	r23, r1
    112a:	e1 f6       	brne	.-72     	; 0x10e4 <processMenu+0x30>
    112c:	21 c0       	rjmp	.+66     	; 0x1170 <processMenu+0xbc>
	
	// If next item differs from current
	if (nextItem.ItemID != selectedMenuItemID)
	{		
		// Call exit function for current item
		processItemFunction(selectedMenuFunctionRecord.LeaveFunction);
    112e:	80 91 07 01 	lds	r24, 0x0107
    1132:	90 91 08 01 	lds	r25, 0x0108
    1136:	2f dd       	rcall	.-1442   	; 0xb96 <processItemFunction>
		
		// If shifting is specified, start it before calling any 
		//	new menu item functions 
		if (nextItem.ShiftFlags & SHIFT_RIGHT)
    1138:	d6 ff       	sbrs	r29, 6
    113a:	02 c0       	rjmp	.+4      	; 0x1140 <processMenu+0x8c>
			startShiftingWindowRight();
    113c:	6a dc       	rcall	.-1836   	; 0xa12 <startShiftingWindowRight>
    113e:	02 c0       	rjmp	.+4      	; 0x1144 <processMenu+0x90>
		else if (nextItem.ShiftFlags & SHIFT_LEFT)
    1140:	07 fd       	sbrc	r16, 7
			startShiftingWindowLeft();
    1142:	59 dc       	rcall	.-1870   	; 0x9f6 <startShiftingWindowLeft>
		
		// Select new item
		selectedMenuItemID = nextItem.ItemID;
    1144:	c0 93 01 01 	sts	0x0101, r28
		
		// Load from FLASH and save function pointers
		getMenuFunctionRecord(selectedMenuItemID, &selectedMenuFunctionRecord);
    1148:	8c 2f       	mov	r24, r28
    114a:	75 df       	rcall	.-278    	; 0x1036 <getMenuFunctionRecord.constprop.1>
		// Call select function for next item
		processItemFunction(selectedMenuFunctionRecord.SelectFunction);
    114c:	80 91 03 01 	lds	r24, 0x0103
    1150:	90 91 04 01 	lds	r25, 0x0104
    1154:	20 dd       	rcall	.-1472   	; 0xb96 <processItemFunction>
		// Start timer if timeout is enabled
		if (nextItem.ItemTimeout != 0)
    1156:	11 23       	and	r17, r17
    1158:	b9 f0       	breq	.+46     	; 0x1188 <processMenu+0xd4>
		{
			menuTimer.Top = nextItem.ItemTimeout * MENU_TIMEOUT_MULT;
    115a:	11 0f       	add	r17, r17
    115c:	10 93 85 00 	sts	0x0085, r17
			menuTimer.Timer = 0;
    1160:	10 92 84 00 	sts	0x0084, r1
			menuTimer.Enabled = 1;	
    1164:	80 91 83 00 	lds	r24, 0x0083
    1168:	81 60       	ori	r24, 0x01	; 1
    116a:	80 93 83 00 	sts	0x0083, r24
    116e:	0c c0       	rjmp	.+24     	; 0x1188 <processMenu+0xd4>
		}
		
	}
	else
	{
		processSoftTimer8b(&userTimer);
    1170:	8b e0       	ldi	r24, 0x0B	; 11
    1172:	91 e0       	ldi	r25, 0x01	; 1
    1174:	21 d3       	rcall	.+1602   	; 0x17b8 <processSoftTimer8b>
		// Stay at previous item
		processItemFunction(selectedMenuFunctionRecord.RunFunction);
    1176:	80 91 05 01 	lds	r24, 0x0105
    117a:	90 91 06 01 	lds	r25, 0x0106
	}	
}
    117e:	df 91       	pop	r29
    1180:	cf 91       	pop	r28
    1182:	1f 91       	pop	r17
    1184:	0f 91       	pop	r16
	}
	else
	{
		processSoftTimer8b(&userTimer);
		// Stay at previous item
		processItemFunction(selectedMenuFunctionRecord.RunFunction);
    1186:	07 cd       	rjmp	.-1522   	; 0xb96 <processItemFunction>
	}	
}
    1188:	df 91       	pop	r29
    118a:	cf 91       	pop	r28
    118c:	1f 91       	pop	r17
    118e:	0f 91       	pop	r16
    1190:	08 95       	ret

00001192 <u16toa_align_right>:
// Converts uint16_t value into decimal string with right alignment
// len = number of digits output (without terminating '\0')
// len[7] = 1 -> no terminating '\0' at buffer[len]
// fill_char -> char used for string padding
void u16toa_align_right(uint16_t val, char *buffer, uint8_t len,char fill_char)
{
    1192:	cf 93       	push	r28
    1194:	df 93       	push	r29
	if (len & 0x80)
    1196:	47 ff       	sbrs	r20, 7
    1198:	05 c0       	rjmp	.+10     	; 0x11a4 <u16toa_align_right+0x12>
	{
		len = len & 0x7F;
    119a:	4f 77       	andi	r20, 0x7F	; 127
		buffer += len;	
    119c:	fb 01       	movw	r30, r22
    119e:	e4 0f       	add	r30, r20
    11a0:	f1 1d       	adc	r31, r1
    11a2:	04 c0       	rjmp	.+8      	; 0x11ac <u16toa_align_right+0x1a>
	}
	else
	{
		buffer += len;	
    11a4:	fb 01       	movw	r30, r22
    11a6:	e4 0f       	add	r30, r20
    11a8:	f1 1d       	adc	r31, r1
		*buffer = 0;
    11aa:	10 82       	st	Z, r1
	}
	
	do
	{
		*--buffer = val % 10 + '0';
    11ac:	ca e0       	ldi	r28, 0x0A	; 10
    11ae:	d0 e0       	ldi	r29, 0x00	; 0
    11b0:	be 01       	movw	r22, r28
    11b2:	27 d4       	rcall	.+2126   	; 0x1a02 <__udivmodhi4>
    11b4:	80 5d       	subi	r24, 0xD0	; 208
    11b6:	82 93       	st	-Z, r24
		val /= 10;
    11b8:	cb 01       	movw	r24, r22
		len--;
    11ba:	41 50       	subi	r20, 0x01	; 1
	}
	while ((val != 0) && len);
    11bc:	00 97       	sbiw	r24, 0x00	; 0
    11be:	21 f0       	breq	.+8      	; 0x11c8 <u16toa_align_right+0x36>
    11c0:	41 11       	cpse	r20, r1
    11c2:	f6 cf       	rjmp	.-20     	; 0x11b0 <u16toa_align_right+0x1e>
    11c4:	01 c0       	rjmp	.+2      	; 0x11c8 <u16toa_align_right+0x36>
	
	// Padding
	while(len--)
		*--buffer = fill_char;
    11c6:	22 93       	st	-Z, r18
		len--;
	}
	while ((val != 0) && len);
	
	// Padding
	while(len--)
    11c8:	41 50       	subi	r20, 0x01	; 1
    11ca:	e8 f7       	brcc	.-6      	; 0x11c6 <u16toa_align_right+0x34>
		*--buffer = fill_char;
}
    11cc:	df 91       	pop	r29
    11ce:	cf 91       	pop	r28
    11d0:	08 95       	ret

000011d2 <i32toa_align_right>:



void i32toa_align_right(int32_t val, char *buffer, uint8_t len)
{
    11d2:	cf 92       	push	r12
    11d4:	df 92       	push	r13
    11d6:	ef 92       	push	r14
    11d8:	ff 92       	push	r15
    11da:	0f 93       	push	r16
    11dc:	1f 93       	push	r17
    11de:	cf 93       	push	r28
    11e0:	df 93       	push	r29
    11e2:	12 2f       	mov	r17, r18
	uint8_t is_negative = (val < 0) ? 1 : 0;
    11e4:	6b 01       	movw	r12, r22
    11e6:	7c 01       	movw	r14, r24
    11e8:	cc 24       	eor	r12, r12
    11ea:	f7 fc       	sbrc	r15, 7
    11ec:	c3 94       	inc	r12
    11ee:	dd 24       	eor	r13, r13
    11f0:	ee 24       	eor	r14, r14
    11f2:	ff 24       	eor	r15, r15
    11f4:	0c 2d       	mov	r16, r12
	if (is_negative)
    11f6:	cc 20       	and	r12, r12
    11f8:	39 f0       	breq	.+14     	; 0x1208 <i32toa_align_right+0x36>
		val = -val;
    11fa:	90 95       	com	r25
    11fc:	80 95       	com	r24
    11fe:	70 95       	com	r23
    1200:	61 95       	neg	r22
    1202:	7f 4f       	sbci	r23, 0xFF	; 255
    1204:	8f 4f       	sbci	r24, 0xFF	; 255
    1206:	9f 4f       	sbci	r25, 0xFF	; 255
		
	buffer += len;	
    1208:	ea 01       	movw	r28, r20
    120a:	c1 0f       	add	r28, r17
    120c:	d1 1d       	adc	r29, r1
	*buffer = 0;
    120e:	18 82       	st	Y, r1
	
	do
	{
		*--buffer = val % 10 + '0';
    1210:	2a e0       	ldi	r18, 0x0A	; 10
    1212:	c2 2e       	mov	r12, r18
    1214:	d1 2c       	mov	r13, r1
    1216:	e1 2c       	mov	r14, r1
    1218:	f1 2c       	mov	r15, r1
    121a:	a7 01       	movw	r20, r14
    121c:	96 01       	movw	r18, r12
    121e:	18 d4       	rcall	.+2096   	; 0x1a50 <__divmodsi4>
    1220:	60 5d       	subi	r22, 0xD0	; 208
    1222:	6a 93       	st	-Y, r22
		val /= 10;
    1224:	b9 01       	movw	r22, r18
    1226:	ca 01       	movw	r24, r20
		len--;
    1228:	11 50       	subi	r17, 0x01	; 1
	}
	while ((val != 0) && len);
    122a:	61 15       	cp	r22, r1
    122c:	71 05       	cpc	r23, r1
    122e:	81 05       	cpc	r24, r1
    1230:	91 05       	cpc	r25, r1
    1232:	19 f0       	breq	.+6      	; 0x123a <i32toa_align_right+0x68>
    1234:	11 11       	cpse	r17, r1
    1236:	f1 cf       	rjmp	.-30     	; 0x121a <i32toa_align_right+0x48>
    1238:	08 c0       	rjmp	.+16     	; 0x124a <i32toa_align_right+0x78>
	
	if ( (len) && (is_negative) )
    123a:	11 23       	and	r17, r17
    123c:	31 f0       	breq	.+12     	; 0x124a <i32toa_align_right+0x78>
    123e:	00 23       	and	r16, r16
    1240:	21 f0       	breq	.+8      	; 0x124a <i32toa_align_right+0x78>
	{
		*--buffer = '-';
    1242:	21 97       	sbiw	r28, 0x01	; 1
    1244:	8d e2       	ldi	r24, 0x2D	; 45
    1246:	88 83       	st	Y, r24
		len--;	
    1248:	11 50       	subi	r17, 0x01	; 1
	}	
	
	// Padding
	while(len--)
		*--buffer = ' ';
    124a:	80 e2       	ldi	r24, 0x20	; 32
    124c:	01 c0       	rjmp	.+2      	; 0x1250 <i32toa_align_right+0x7e>
    124e:	8a 93       	st	-Y, r24
		*--buffer = '-';
		len--;	
	}	
	
	// Padding
	while(len--)
    1250:	11 50       	subi	r17, 0x01	; 1
    1252:	e8 f7       	brcc	.-6      	; 0x124e <i32toa_align_right+0x7c>
		*--buffer = ' ';
	
}
    1254:	df 91       	pop	r29
    1256:	cf 91       	pop	r28
    1258:	1f 91       	pop	r17
    125a:	0f 91       	pop	r16
    125c:	ff 90       	pop	r15
    125e:	ef 90       	pop	r14
    1260:	df 90       	pop	r13
    1262:	cf 90       	pop	r12
    1264:	08 95       	ret

00001266 <logI32p>:
	u16toa_align_right(val,str,6,' ');
	USART_sendstr(str);
}

static void logI32p(int32_t val)
{
    1266:	cf 93       	push	r28
    1268:	df 93       	push	r29
    126a:	cd b7       	in	r28, 0x3d	; 61
    126c:	de b7       	in	r29, 0x3e	; 62
    126e:	2c 97       	sbiw	r28, 0x0c	; 12
    1270:	0f b6       	in	r0, 0x3f	; 63
    1272:	f8 94       	cli
    1274:	de bf       	out	0x3e, r29	; 62
    1276:	0f be       	out	0x3f, r0	; 63
    1278:	cd bf       	out	0x3d, r28	; 61
	char str[12];
	i32toa_align_right(val,str,12);
    127a:	2c e0       	ldi	r18, 0x0C	; 12
    127c:	ae 01       	movw	r20, r28
    127e:	4f 5f       	subi	r20, 0xFF	; 255
    1280:	5f 4f       	sbci	r21, 0xFF	; 255
    1282:	a7 df       	rcall	.-178    	; 0x11d2 <i32toa_align_right>
	USART_sendstr(str);
    1284:	ce 01       	movw	r24, r28
    1286:	01 96       	adiw	r24, 0x01	; 1
    1288:	9e d3       	rcall	.+1852   	; 0x19c6 <USART_sendstr>
}
    128a:	2c 96       	adiw	r28, 0x0c	; 12
    128c:	0f b6       	in	r0, 0x3f	; 63
    128e:	f8 94       	cli
    1290:	de bf       	out	0x3e, r29	; 62
    1292:	0f be       	out	0x3f, r0	; 63
    1294:	cd bf       	out	0x3d, r28	; 61
    1296:	df 91       	pop	r29
    1298:	cf 91       	pop	r28
    129a:	08 95       	ret

0000129c <logU16p>:
    }
}


static void logU16p(uint16_t val)
{
    129c:	cf 93       	push	r28
    129e:	df 93       	push	r29
    12a0:	00 d0       	rcall	.+0      	; 0x12a2 <logU16p+0x6>
    12a2:	00 d0       	rcall	.+0      	; 0x12a4 <logU16p+0x8>
    12a4:	00 d0       	rcall	.+0      	; 0x12a6 <logU16p+0xa>
    12a6:	cd b7       	in	r28, 0x3d	; 61
    12a8:	de b7       	in	r29, 0x3e	; 62
	char str[6];
	u16toa_align_right(val,str,6,' ');
    12aa:	20 e2       	ldi	r18, 0x20	; 32
    12ac:	46 e0       	ldi	r20, 0x06	; 6
    12ae:	be 01       	movw	r22, r28
    12b0:	6f 5f       	subi	r22, 0xFF	; 255
    12b2:	7f 4f       	sbci	r23, 0xFF	; 255
    12b4:	6e df       	rcall	.-292    	; 0x1192 <u16toa_align_right>
	USART_sendstr(str);
    12b6:	ce 01       	movw	r24, r28
    12b8:	01 96       	adiw	r24, 0x01	; 1
    12ba:	85 d3       	rcall	.+1802   	; 0x19c6 <USART_sendstr>
}
    12bc:	26 96       	adiw	r28, 0x06	; 6
    12be:	0f b6       	in	r0, 0x3f	; 63
    12c0:	f8 94       	cli
    12c2:	de bf       	out	0x3e, r29	; 62
    12c4:	0f be       	out	0x3f, r0	; 63
    12c6:	cd bf       	out	0x3d, r28	; 61
    12c8:	df 91       	pop	r29
    12ca:	cf 91       	pop	r28
    12cc:	08 95       	ret

000012ce <init_system_io>:


void init_system_io()
{
	// Setup Port D
	PORTD = 0;//(1<<PD_SYNCA | 1<<PD_SYNCB);
    12ce:	12 ba       	out	0x12, r1	; 18
	DDRD = (1<<PD_TXD | 1<<PD_M1 | 1<<PD_M2 | 1<<PD_HEATER | 1<<PD_HEAT_INDIC );
    12d0:	8e e3       	ldi	r24, 0x3E	; 62
    12d2:	81 bb       	out	0x11, r24	; 17
	
	// Setup Port B
	PORTB = 0;
    12d4:	18 ba       	out	0x18, r1	; 24
	DDRB = (1<<PB_BEEPER | 1<<PB_LED_DOUT | 1<<PB_LED_CLK | 1<<PB_SEGF | 1<<PB_SEGG | 1<<PB_SEGH);
    12d6:	8f e3       	ldi	r24, 0x3F	; 63
    12d8:	87 bb       	out	0x17, r24	; 23
	
	PORTC = 0;
    12da:	15 ba       	out	0x15, r1	; 21
	DDRC = (1<<PC_SEGA | 1<<PC_SEGB | 1<<PC_SEGC | 1<<PC_SEGD | 1<<PC_SEGE);	
    12dc:	8f e1       	ldi	r24, 0x1F	; 31
    12de:	84 bb       	out	0x14, r24	; 20

	// Setup timer0
	// 1/1024 prescaler, T=64us @16MHz
	TCCR0 = (1<<CS02 | 0<<CS01 | 1<<CS00);
    12e0:	85 e0       	ldi	r24, 0x05	; 5
    12e2:	83 bf       	out	0x33, r24	; 51
	TCNT0 = 0;
    12e4:	12 be       	out	0x32, r1	; 50
	// Clear interrupt flag
	TIFR |= (1<<TOV0);
    12e6:	88 b7       	in	r24, 0x38	; 56
    12e8:	81 60       	ori	r24, 0x01	; 1
    12ea:	88 bf       	out	0x38, r24	; 56
	// Enable interrupts from timer 0
	TIMSK |= (1<<TOIE0);
    12ec:	89 b7       	in	r24, 0x39	; 57
    12ee:	81 60       	ori	r24, 0x01	; 1
    12f0:	89 bf       	out	0x39, r24	; 57
	
	// Setup timer2 as 1ms system frequency generator
	// 1/64 prescaler, CTC mode, OC2 disconnected
	TCCR2 = (1<<CS22 | 1<<WGM21);
    12f2:	8c e0       	ldi	r24, 0x0C	; 12
    12f4:	85 bd       	out	0x25, r24	; 37
	OCR2 = 249;						// 1ms @ 16MHz
    12f6:	89 ef       	ldi	r24, 0xF9	; 249
    12f8:	83 bd       	out	0x23, r24	; 35
	TIMSK |= (1<<OCIE2);
    12fa:	89 b7       	in	r24, 0x39	; 57
    12fc:	80 68       	ori	r24, 0x80	; 128
    12fe:	89 bf       	out	0x39, r24	; 57
	
	// Setup timer1 as beeper frequency generator
	// CTC mode, 1/64 prescaler
	TCCR1A = 0;
    1300:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = (1<<WGM12 | 1<<CS11 | 1<<CS10);
    1302:	8b e0       	ldi	r24, 0x0B	; 11
    1304:	8e bd       	out	0x2e, r24	; 46
	// 1kHz beeper frequency default
	OCR1A = 127;
    1306:	8f e7       	ldi	r24, 0x7F	; 127
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	9b bd       	out	0x2b, r25	; 43
    130c:	8a bd       	out	0x2a, r24	; 42

	// Setup AC sync comparator
	// Interrupt on output toggle
	ACSR = (1<<ACIE | 0<<ACIS1 | 0<<ACIS0);
    130e:	88 e0       	ldi	r24, 0x08	; 8
    1310:	88 b9       	out	0x08, r24	; 8
	
	// Setup ADC
	// Internal Vref + cap, input ADC5, 
	ADMUX = (1<<REFS1 | 1<<REFS0 | 0<<MUX3 | 1<<MUX2 | 0<<MUX1 | 1<<MUX0 );
    1312:	85 ec       	ldi	r24, 0xC5	; 197
    1314:	87 b9       	out	0x07, r24	; 7
	// Prescaler = 128
	ADCSRA = (1<<ADEN |/* 1<<ADFR |*/  1<<ADIE | 1<<ADPS2 | 1<<ADPS1 | 1<<ADPS0);
    1316:	8f e8       	ldi	r24, 0x8F	; 143
    1318:	86 b9       	out	0x06, r24	; 6
	
	// Setup USART
	// Double speed
	UCSRA = (1<<U2X);
    131a:	82 e0       	ldi	r24, 0x02	; 2
    131c:	8b b9       	out	0x0b, r24	; 11
	UCSRB = (1<<RXEN | 1<<TXEN | 0<<UCSZ2);
    131e:	88 e1       	ldi	r24, 0x18	; 24
    1320:	8a b9       	out	0x0a, r24	; 10
	// No parity, 1 stop bit, 8 bit
	UCSRC = (1<<URSEL | 0<<UPM1 | 0<<UPM0 | 0<<USBS | 1<<UCSZ1 | 1<<UCSZ0);
    1322:	86 e8       	ldi	r24, 0x86	; 134
    1324:	80 bd       	out	0x20, r24	; 32
	// 57600 @16MHz, 2x
	UBRRH=0x00;
    1326:	10 bc       	out	0x20, r1	; 32
	UBRRL=0x22;
    1328:	82 e2       	ldi	r24, 0x22	; 34
    132a:	89 b9       	out	0x09, r24	; 9
    132c:	08 95       	ret

0000132e <main>:
}



int main(void)
{
    132e:	cf 93       	push	r28
    1330:	df 93       	push	r29
    1332:	1f 92       	push	r1
    1334:	cd b7       	in	r28, 0x3d	; 61
    1336:	de b7       	in	r29, 0x3e	; 62
	volatile char str[12];
	volatile uint8_t temp8u = 0x00;
    1338:	19 82       	std	Y+1, r1	; 0x01
	volatile uint16_t temp16u;
	
	// Initialize MCU IO
	init_system_io();
    133a:	c9 df       	rcall	.-110    	; 0x12ce <init_system_io>
	// Restore params from EEPROM
	restoreGlobalParams();
    133c:	8f da       	rcall	.-2786   	; 0x85c <restoreGlobalParams>
	// Calibrate ADC coefficients using restored params
	calculateCoeffs();
    133e:	6c d7       	rcall	.+3800   	; 0x2218 <__data_load_end+0x622>
	// Initialize LED indicator
	initLedIndicator();
    1340:	76 db       	rcall	.-2324   	; 0xa2e <initLedIndicator>
	// Clear comparator interrupt flag to prevent false triggering
	ACSR |= (1<<ACI);
    1342:	44 9a       	sbi	0x08, 4	; 8
	sei();
    1344:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1346:	2f ef       	ldi	r18, 0xFF	; 255
    1348:	81 ee       	ldi	r24, 0xE1	; 225
    134a:	94 e0       	ldi	r25, 0x04	; 4
    134c:	21 50       	subi	r18, 0x01	; 1
    134e:	80 40       	sbci	r24, 0x00	; 0
    1350:	90 40       	sbci	r25, 0x00	; 0
    1352:	e1 f7       	brne	.-8      	; 0x134c <main+0x1e>
    1354:	00 c0       	rjmp	.+0      	; 0x1356 <main+0x28>
    1356:	00 00       	nop
	// Safety delay for power part and ADC buffer
	_delay_ms(100);
	// Check AC line
	if(p_state == 0x0F) 	
    1358:	80 91 87 00 	lds	r24, 0x0087
    135c:	8f 30       	cpi	r24, 0x0F	; 15
    135e:	69 f4       	brne	.+26     	; 0x137a <main+0x4c>
	{
		// Power control state machine has not changed - sync has not been detected
		printLedBuffer(0,"ERR AC");
    1360:	6a ed       	ldi	r22, 0xDA	; 218
    1362:	70 e0       	ldi	r23, 0x00	; 0
    1364:	80 e0       	ldi	r24, 0x00	; 0
    1366:	86 db       	rcall	.-2292   	; 0xa74 <printLedBuffer>
    1368:	2f ef       	ldi	r18, 0xFF	; 255
    136a:	83 ed       	ldi	r24, 0xD3	; 211
    136c:	90 e3       	ldi	r25, 0x30	; 48
    136e:	21 50       	subi	r18, 0x01	; 1
    1370:	80 40       	sbci	r24, 0x00	; 0
    1372:	90 40       	sbci	r25, 0x00	; 0
    1374:	e1 f7       	brne	.-8      	; 0x136e <main+0x40>
    1376:	00 c0       	rjmp	.+0      	; 0x1378 <main+0x4a>
    1378:	00 00       	nop
		_delay_ms(1000);
	}
	// Initialize menu
	InitMenu();
    137a:	93 de       	rcall	.-730    	; 0x10a2 <InitMenu>
	// Beep
	SetBeeperFreq(1000);
    137c:	88 ee       	ldi	r24, 0xE8	; 232
    137e:	93 e0       	ldi	r25, 0x03	; 3
    1380:	b1 d2       	rcall	.+1378   	; 0x18e4 <SetBeeperFreq>
	StartBeep(200);
    1382:	88 ec       	ldi	r24, 0xC8	; 200
    1384:	90 e0       	ldi	r25, 0x00	; 0
    1386:	ce d2       	rcall	.+1436   	; 0x1924 <StartBeep>
	// When we get here, full ADC buffer have been sampled
	// Get oversampled and filtered ADC for PID controller
	update_normalized_adc();
    1388:	18 d8       	rcall	.-4048   	; 0x3ba <update_normalized_adc>
	// Call PID controller function in order to initialize it's internal structures
	heaterInit();
    138a:	13 da       	rcall	.-3034   	; 0x7b2 <heaterInit>
	// Start rotating
	setMotorDirection(ROLL_FWD);
    138c:	81 e0       	ldi	r24, 0x01	; 1
    138e:	98 d0       	rcall	.+304    	; 0x14c0 <setMotorDirection>
	// Clear timer
	menuUpdateTimer.FOvfl = 0;
    1390:	80 91 90 00 	lds	r24, 0x0090
    1394:	8f 7b       	andi	r24, 0xBF	; 191
    1396:	80 93 90 00 	sts	0x0090, r24
	// Enable watchdog
	wdt_enable(WDTO_1S);
    139a:	2e e0       	ldi	r18, 0x0E	; 14
    139c:	88 e1       	ldi	r24, 0x18	; 24
    139e:	90 e0       	ldi	r25, 0x00	; 0
    13a0:	0f b6       	in	r0, 0x3f	; 63
    13a2:	f8 94       	cli
    13a4:	a8 95       	wdr
    13a6:	81 bd       	out	0x21, r24	; 33
    13a8:	0f be       	out	0x3f, r0	; 63
    13aa:	21 bd       	out	0x21, r18	; 33

    while(1)
    {
		
		if (menuUpdateTimer.FOvfl)
    13ac:	80 91 90 00 	lds	r24, 0x0090
    13b0:	86 ff       	sbrs	r24, 6
    13b2:	fc cf       	rjmp	.-8      	; 0x13ac <main+0x7e>
		{
			// Reset watchdog timer
			wdt_reset();
    13b4:	a8 95       	wdr
			
			//--------- BUTTONS ----------//
			
			// Get new button state
			process_buttons();
    13b6:	3d d8       	rcall	.-3974   	; 0x432 <process_buttons>
			
			// Give sound feedback
			if (button_state & BL_MENU)
    13b8:	80 91 f0 00 	lds	r24, 0x00F0
    13bc:	90 91 f1 00 	lds	r25, 0x00F1
    13c0:	91 ff       	sbrs	r25, 1
    13c2:	03 c0       	rjmp	.+6      	; 0x13ca <main+0x9c>
			{
				SetBeeperFreq(800);
    13c4:	80 e2       	ldi	r24, 0x20	; 32
    13c6:	93 e0       	ldi	r25, 0x03	; 3
    13c8:	06 c0       	rjmp	.+12     	; 0x13d6 <main+0xa8>
				StartBeep(40);
			}
			else if (button_action_down & (BD_MENU | BD_UP | BD_DOWN | BD_HEATCTRL))
    13ca:	80 91 ef 00 	lds	r24, 0x00EF
    13ce:	81 7e       	andi	r24, 0xE1	; 225
    13d0:	31 f0       	breq	.+12     	; 0x13de <main+0xb0>
			{
				SetBeeperFreq(1000);
    13d2:	88 ee       	ldi	r24, 0xE8	; 232
    13d4:	93 e0       	ldi	r25, 0x03	; 3
    13d6:	86 d2       	rcall	.+1292   	; 0x18e4 <SetBeeperFreq>
				StartBeep(40);
    13d8:	88 e2       	ldi	r24, 0x28	; 40
    13da:	90 e0       	ldi	r25, 0x00	; 0
    13dc:	a3 d2       	rcall	.+1350   	; 0x1924 <StartBeep>
			}	
			// Direction control buttons sounds get special processing at processRollControl()
			
			// If any button is pressed, restart power off interval
			if (button_action_down)
    13de:	80 91 ef 00 	lds	r24, 0x00EF
    13e2:	81 11       	cpse	r24, r1
				resetAutoPowerOffCounter();
    13e4:	7c d2       	rcall	.+1272   	; 0x18de <resetAutoPowerOffCounter>
			
			//---------- TIMERS ----------//
			
			// Process timers and time counters - it is important to call
			// this function before menu and power controls processing
			processSystemTimers();
    13e6:	14 d2       	rcall	.+1064   	; 0x1810 <processSystemTimers>

			// Warn user about near auto powering off
			if (sys_timers.flags & AUTOPOFF_SOON)
    13e8:	80 91 8f 00 	lds	r24, 0x008F
    13ec:	83 ff       	sbrs	r24, 3
    13ee:	06 c0       	rjmp	.+12     	; 0x13fc <main+0xce>
			{
				SetBeeperFreq(1200);
    13f0:	80 eb       	ldi	r24, 0xB0	; 176
    13f2:	94 e0       	ldi	r25, 0x04	; 4
    13f4:	77 d2       	rcall	.+1262   	; 0x18e4 <SetBeeperFreq>
				StartBeep(200);
    13f6:	88 ec       	ldi	r24, 0xC8	; 200
    13f8:	90 e0       	ldi	r25, 0x00	; 0
    13fa:	94 d2       	rcall	.+1320   	; 0x1924 <StartBeep>
			}		
			
			//----------- ADC ------------//
			
			// Get new temperature measurement
			update_normalized_adc();			
    13fc:	de d7       	rcall	.+4028   	; 0x23ba <__data_load_end+0x7c4>
		
			// Update indicated Celsius degree
			if (sys_timers.flags & EXPIRED_CELSIUS)
    13fe:	80 91 8f 00 	lds	r24, 0x008F
    1402:	80 fd       	sbrc	r24, 0
				update_Celsius();		
    1404:	56 d7       	rcall	.+3756   	; 0x22b2 <__data_load_end+0x6bc>
			
			//----------- MENU -----------//		
				
			// Process user menu states, settings and indication
			processMenu();
    1406:	56 de       	rcall	.-852    	; 0x10b4 <processMenu>
			
			//--------- CONTROLS ---------//		
			
			// Process cyclic rolling, direction control
			processRollControl();	
    1408:	59 d8       	rcall	.-3918   	; 0x4bc <processRollControl>
			
			// Process heater regulation
			processHeaterControl();
    140a:	66 d9       	rcall	.-3380   	; 0x6d8 <processHeaterControl>
		
			// Process heater events and warnings
			processHeaterAlerts();
    140c:	d9 d9       	rcall	.-3150   	; 0x7c0 <processHeaterAlerts>
			
			
			
			//------- LOG to UART --------//	
			if (sys_timers.flags & EXPIRED_LOG)
    140e:	80 91 8f 00 	lds	r24, 0x008F
    1412:	85 ff       	sbrs	r24, 5
    1414:	42 c0       	rjmp	.+132    	; 0x149a <main+0x16c>
			{
				
				logU16p(adc_celsius);					// Actual temp Celsius
    1416:	80 91 66 01 	lds	r24, 0x0166
    141a:	90 91 67 01 	lds	r25, 0x0167
    141e:	3e df       	rcall	.-388    	; 0x129c <logU16p>
				logU16p(adc_oversampled);				// Actual temp (ADC), oversampled
    1420:	80 91 21 01 	lds	r24, 0x0121
    1424:	90 91 22 01 	lds	r25, 0x0122
    1428:	39 df       	rcall	.-398    	; 0x129c <logU16p>
				logU16p(adc_filtered);					// Actual temp (ADC), oversampled, filtered
    142a:	80 91 1f 01 	lds	r24, 0x011F
    142e:	90 91 20 01 	lds	r25, 0x0120
    1432:	34 df       	rcall	.-408    	; 0x129c <logU16p>
				USART_sendstr("    ");
    1434:	87 ec       	ldi	r24, 0xC7	; 199
    1436:	90 e0       	ldi	r25, 0x00	; 0
    1438:	c6 d2       	rcall	.+1420   	; 0x19c6 <USART_sendstr>
				
				logU16p(dbg_SetPointPID);				// Temp setting, as input to PID
    143a:	80 91 ad 01 	lds	r24, 0x01AD
    143e:	90 91 ae 01 	lds	r25, 0x01AE
    1442:	2c df       	rcall	.-424    	; 0x129c <logU16p>
				logU16p(dbg_RealTempPID);				// Real temp, sampled for PID input
    1444:	80 91 9f 01 	lds	r24, 0x019F
    1448:	90 91 a0 01 	lds	r25, 0x01A0
    144c:	27 df       	rcall	.-434    	; 0x129c <logU16p>
				
				logI32p(dbg_PID_p_term);				// p term
    144e:	60 91 9d 01 	lds	r22, 0x019D
    1452:	70 91 9e 01 	lds	r23, 0x019E
    1456:	88 27       	eor	r24, r24
    1458:	77 fd       	sbrc	r23, 7
    145a:	80 95       	com	r24
    145c:	98 2f       	mov	r25, r24
    145e:	03 df       	rcall	.-506    	; 0x1266 <logI32p>
				logI32p(dbg_PID_d_term);				// d term
    1460:	60 91 ab 01 	lds	r22, 0x01AB
    1464:	70 91 ac 01 	lds	r23, 0x01AC
    1468:	88 27       	eor	r24, r24
    146a:	77 fd       	sbrc	r23, 7
    146c:	80 95       	com	r24
    146e:	98 2f       	mov	r25, r24
    1470:	fa de       	rcall	.-524    	; 0x1266 <logI32p>
				logI32p(dbg_PID_i_term);				// i term
    1472:	60 91 a1 01 	lds	r22, 0x01A1
    1476:	70 91 a2 01 	lds	r23, 0x01A2
    147a:	88 27       	eor	r24, r24
    147c:	77 fd       	sbrc	r23, 7
    147e:	80 95       	com	r24
    1480:	98 2f       	mov	r25, r24
    1482:	f1 de       	rcall	.-542    	; 0x1266 <logI32p>
				USART_sendstr("    ");
    1484:	87 ec       	ldi	r24, 0xC7	; 199
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	9e d2       	rcall	.+1340   	; 0x19c6 <USART_sendstr>
				
				logU16p(dbg_PID_output);				// PID output
    148a:	80 91 9b 01 	lds	r24, 0x019B
    148e:	90 91 9c 01 	lds	r25, 0x019C
    1492:	04 df       	rcall	.-504    	; 0x129c <logU16p>
			
				USART_sendstr("\n\r");
    1494:	81 ee       	ldi	r24, 0xE1	; 225
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	96 d2       	rcall	.+1324   	; 0x19c6 <USART_sendstr>
				//---------------------------------//
				
			}
			
			
			menuUpdateTimer.FOvfl = 0;	
    149a:	80 91 90 00 	lds	r24, 0x0090
    149e:	8f 7b       	andi	r24, 0xBF	; 191
    14a0:	80 93 90 00 	sts	0x0090, r24
    14a4:	83 cf       	rjmp	.-250    	; 0x13ac <main+0x7e>

000014a6 <setHeaterPower>:

// User function to control heater intensity
void setHeaterPower(uint16_t value)
{
	// Disable interrupts from analog comparator
	ACSR &= ~(1<<ACIE);
    14a6:	43 98       	cbi	0x08, 3	; 8
	// Update value
	heaterPower = (value > HEATER_MAX_POWER) ? HEATER_MAX_POWER : value;
    14a8:	9c 01       	movw	r18, r24
    14aa:	85 36       	cpi	r24, 0x65	; 101
    14ac:	91 05       	cpc	r25, r1
    14ae:	10 f0       	brcs	.+4      	; 0x14b4 <setHeaterPower+0xe>
    14b0:	24 e6       	ldi	r18, 0x64	; 100
    14b2:	30 e0       	ldi	r19, 0x00	; 0
    14b4:	30 93 12 01 	sts	0x0112, r19
    14b8:	20 93 11 01 	sts	0x0111, r18
	// Reenable interrupts
	ACSR |= (1<<ACIE);
    14bc:	43 9a       	sbi	0x08, 3	; 8
    14be:	08 95       	ret

000014c0 <setMotorDirection>:

// User function to control motor rotation
void setMotorDirection(uint8_t dir)
{
	// Disable interrupts from timer0 
	TIMSK &= ~(1<<TOIE0);
    14c0:	99 b7       	in	r25, 0x39	; 57
    14c2:	9e 7f       	andi	r25, 0xFE	; 254
    14c4:	99 bf       	out	0x39, r25	; 57
		
	newDirReq = dir;	// save new direction request
    14c6:	80 93 13 01 	sts	0x0113, r24
	dirChangedMask = ~ROLL_DIR_CHANGED;
    14ca:	9f ed       	ldi	r25, 0xDF	; 223
    14cc:	90 93 88 00 	sts	0x0088, r25
	
	if (dir & ROLL_FWD)
    14d0:	80 ff       	sbrs	r24, 0
    14d2:	09 c0       	rjmp	.+18     	; 0x14e6 <setMotorDirection+0x26>
		bottomPoint = rollPoint;  
    14d4:	80 91 14 01 	lds	r24, 0x0114
    14d8:	90 91 15 01 	lds	r25, 0x0115
    14dc:	90 93 17 01 	sts	0x0117, r25
    14e0:	80 93 16 01 	sts	0x0116, r24
    14e4:	0a c0       	rjmp	.+20     	; 0x14fa <setMotorDirection+0x3a>
	else if (dir & ROLL_REV)
    14e6:	81 ff       	sbrs	r24, 1
    14e8:	08 c0       	rjmp	.+16     	; 0x14fa <setMotorDirection+0x3a>
		topPoint = rollPoint;
    14ea:	80 91 14 01 	lds	r24, 0x0114
    14ee:	90 91 15 01 	lds	r25, 0x0115
    14f2:	90 93 19 01 	sts	0x0119, r25
    14f6:	80 93 18 01 	sts	0x0118, r24

	// Enable interrupts from timer 0
	TIMSK |= (1<<TOIE0);	
    14fa:	89 b7       	in	r24, 0x39	; 57
    14fc:	81 60       	ori	r24, 0x01	; 1
    14fe:	89 bf       	out	0x39, r24	; 57
    1500:	08 95       	ret

00001502 <stopCycleRolling>:
}

void stopCycleRolling(uint8_t doResetPoints)
{
	// Disable interrupts from timer0 
	TIMSK &= ~(1<<TOIE0);
    1502:	99 b7       	in	r25, 0x39	; 57
    1504:	9e 7f       	andi	r25, 0xFE	; 254
    1506:	99 bf       	out	0x39, r25	; 57
	
	rollState &= ~ROLL_CYCLE;
    1508:	90 91 10 01 	lds	r25, 0x0110
    150c:	9b 7f       	andi	r25, 0xFB	; 251
    150e:	90 93 10 01 	sts	0x0110, r25
	if (doResetPoints)
    1512:	88 23       	and	r24, r24
    1514:	71 f0       	breq	.+28     	; 0x1532 <stopCycleRolling+0x30>
	{
		topPoint = bottomPoint = rollPoint;
    1516:	80 91 14 01 	lds	r24, 0x0114
    151a:	90 91 15 01 	lds	r25, 0x0115
    151e:	90 93 17 01 	sts	0x0117, r25
    1522:	80 93 16 01 	sts	0x0116, r24
    1526:	90 93 19 01 	sts	0x0119, r25
    152a:	80 93 18 01 	sts	0x0118, r24
		activeRollCycle = 0;	
    152e:	10 92 0f 01 	sts	0x010F, r1
	}		
	
	// Enable interrupts from timer 0
	TIMSK |= (1<<TOIE0);
    1532:	89 b7       	in	r24, 0x39	; 57
    1534:	81 60       	ori	r24, 0x01	; 1
    1536:	89 bf       	out	0x39, r24	; 57
    1538:	08 95       	ret

0000153a <isTopPointValid>:



uint8_t isTopPointValid(void)
{
	return (	(int16_t)(topPoint - rollPoint) >= 0 );
    153a:	80 91 18 01 	lds	r24, 0x0118
    153e:	90 91 19 01 	lds	r25, 0x0119
    1542:	20 91 14 01 	lds	r18, 0x0114
    1546:	30 91 15 01 	lds	r19, 0x0115
    154a:	82 1b       	sub	r24, r18
    154c:	93 0b       	sbc	r25, r19
    154e:	89 2f       	mov	r24, r25
    1550:	80 95       	com	r24
}
    1552:	88 1f       	adc	r24, r24
    1554:	88 27       	eor	r24, r24
    1556:	88 1f       	adc	r24, r24
    1558:	08 95       	ret

0000155a <isBottomPointValid>:

uint8_t isBottomPointValid(void)
{
	return (	(int16_t)(rollPoint - bottomPoint) >= 0	);
    155a:	80 91 14 01 	lds	r24, 0x0114
    155e:	90 91 15 01 	lds	r25, 0x0115
    1562:	20 91 16 01 	lds	r18, 0x0116
    1566:	30 91 17 01 	lds	r19, 0x0117
    156a:	82 1b       	sub	r24, r18
    156c:	93 0b       	sbc	r25, r19
    156e:	89 2f       	mov	r24, r25
    1570:	80 95       	com	r24
}
    1572:	88 1f       	adc	r24, r24
    1574:	88 27       	eor	r24, r24
    1576:	88 1f       	adc	r24, r24
    1578:	08 95       	ret

0000157a <startCycleRolling>:


uint8_t startCycleRolling(void)
{
	// Disable interrupts from timer0 
	TIMSK &= ~(1<<TOIE0);
    157a:	89 b7       	in	r24, 0x39	; 57
    157c:	8e 7f       	andi	r24, 0xFE	; 254
    157e:	89 bf       	out	0x39, r24	; 57
	
	if ( isTopPointValid() && isBottomPointValid() )
    1580:	dc df       	rcall	.-72     	; 0x153a <isTopPointValid>
    1582:	88 23       	and	r24, r24
    1584:	59 f0       	breq	.+22     	; 0x159c <startCycleRolling+0x22>
    1586:	e9 df       	rcall	.-46     	; 0x155a <isBottomPointValid>
    1588:	88 23       	and	r24, r24
    158a:	41 f0       	breq	.+16     	; 0x159c <startCycleRolling+0x22>
	{
		rollState |= ROLL_CYCLE;
    158c:	80 91 10 01 	lds	r24, 0x0110
    1590:	84 60       	ori	r24, 0x04	; 4
    1592:	80 93 10 01 	sts	0x0110, r24
		activeRollCycle = 1;
    1596:	81 e0       	ldi	r24, 0x01	; 1
    1598:	80 93 0f 01 	sts	0x010F, r24
	}
	
	// Enable interrupts from timer 0
	TIMSK |= (1<<TOIE0);
    159c:	89 b7       	in	r24, 0x39	; 57
    159e:	81 60       	ori	r24, 0x01	; 1
    15a0:	89 bf       	out	0x39, r24	; 57
	
	return (rollState & ROLL_CYCLE);
    15a2:	80 91 10 01 	lds	r24, 0x0110
}
    15a6:	84 70       	andi	r24, 0x04	; 4
    15a8:	08 95       	ret

000015aa <__vector_16>:




ISR(ANA_COMP_vect)
{
    15aa:	1f 92       	push	r1
    15ac:	0f 92       	push	r0
    15ae:	0f b6       	in	r0, 0x3f	; 63
    15b0:	0f 92       	push	r0
    15b2:	11 24       	eor	r1, r1
    15b4:	2f 93       	push	r18
    15b6:	3f 93       	push	r19
    15b8:	4f 93       	push	r20
    15ba:	5f 93       	push	r21
    15bc:	8f 93       	push	r24
    15be:	9f 93       	push	r25
	static uint16_t sigma = 0;
	uint16_t delta;
	
	// Once triggered, disable further comparator interrupt
	ACSR &= ~(1<<ACIE);
    15c0:	43 98       	cbi	0x08, 3	; 8
	
	// Process heater delta-sigma modulator
	if (sigma >= HEATER_MAX_POWER)
    15c2:	40 91 1a 01 	lds	r20, 0x011A
    15c6:	50 91 1b 01 	lds	r21, 0x011B
    15ca:	44 36       	cpi	r20, 0x64	; 100
    15cc:	51 05       	cpc	r21, r1
    15ce:	30 f0       	brcs	.+12     	; 0x15dc <__vector_16+0x32>
	{
		PORTD |= (1<<PD_HEATER | 1<<PD_HEAT_INDIC);
    15d0:	82 b3       	in	r24, 0x12	; 18
    15d2:	80 63       	ori	r24, 0x30	; 48
    15d4:	82 bb       	out	0x12, r24	; 18
		delta = -HEATER_MAX_POWER;	
    15d6:	2c e9       	ldi	r18, 0x9C	; 156
    15d8:	3f ef       	ldi	r19, 0xFF	; 255
    15da:	03 c0       	rjmp	.+6      	; 0x15e2 <__vector_16+0x38>
	}		
	else
	{
		PORTD &= ~(1<<PD_HEAT_INDIC);
    15dc:	95 98       	cbi	0x12, 5	; 18
		delta = 0;
    15de:	20 e0       	ldi	r18, 0x00	; 0
    15e0:	30 e0       	ldi	r19, 0x00	; 0
	}
	sigma += delta + heaterPower;	
    15e2:	80 91 11 01 	lds	r24, 0x0111
    15e6:	90 91 12 01 	lds	r25, 0x0112
    15ea:	84 0f       	add	r24, r20
    15ec:	95 1f       	adc	r25, r21
    15ee:	82 0f       	add	r24, r18
    15f0:	93 1f       	adc	r25, r19
    15f2:	90 93 1b 01 	sts	0x011B, r25
    15f6:	80 93 1a 01 	sts	0x011A, r24
	
	// Reprogram timer0
	TCNT0 = 256 - TRIAC_IMPULSE_TIME;		// Triac gate impulse time
    15fa:	86 ef       	ldi	r24, 0xF6	; 246
    15fc:	82 bf       	out	0x32, r24	; 50
	TIFR |= (1<<TOV0);						// Clear interrupt flag
    15fe:	88 b7       	in	r24, 0x38	; 56
    1600:	81 60       	ori	r24, 0x01	; 1
    1602:	88 bf       	out	0x38, r24	; 56
	// Modify state	
	p_state &= ~STATE_MASK;					// Start new state machine cycle
    1604:	80 91 87 00 	lds	r24, 0x0087
    1608:	80 7f       	andi	r24, 0xF0	; 240
	p_state ^= HALF_PERIOD_FLAG;			// Toggle flag
    160a:	80 58       	subi	r24, 0x80	; 128
    160c:	80 93 87 00 	sts	0x0087, r24
	
}
    1610:	9f 91       	pop	r25
    1612:	8f 91       	pop	r24
    1614:	5f 91       	pop	r21
    1616:	4f 91       	pop	r20
    1618:	3f 91       	pop	r19
    161a:	2f 91       	pop	r18
    161c:	0f 90       	pop	r0
    161e:	0f be       	out	0x3f, r0	; 63
    1620:	0f 90       	pop	r0
    1622:	1f 90       	pop	r1
    1624:	18 95       	reti

00001626 <__vector_9>:



ISR(TIMER0_OVF_vect)
{
    1626:	1f 92       	push	r1
    1628:	0f 92       	push	r0
    162a:	0f b6       	in	r0, 0x3f	; 63
    162c:	0f 92       	push	r0
    162e:	11 24       	eor	r1, r1
    1630:	2f 93       	push	r18
    1632:	3f 93       	push	r19
    1634:	4f 93       	push	r20
    1636:	5f 93       	push	r21
    1638:	6f 93       	push	r22
    163a:	7f 93       	push	r23
    163c:	8f 93       	push	r24
    163e:	9f 93       	push	r25
    1640:	af 93       	push	r26
    1642:	bf 93       	push	r27
    1644:	ef 93       	push	r30
    1646:	ff 93       	push	r31
	uint8_t temp;
	
	switch(p_state & STATE_MASK)
    1648:	80 91 87 00 	lds	r24, 0x0087
    164c:	8f 70       	andi	r24, 0x0F	; 15
    164e:	81 30       	cpi	r24, 0x01	; 1
    1650:	49 f0       	breq	.+18     	; 0x1664 <__vector_9+0x3e>
    1652:	28 f0       	brcs	.+10     	; 0x165e <__vector_9+0x38>
    1654:	82 30       	cpi	r24, 0x02	; 2
    1656:	49 f0       	breq	.+18     	; 0x166a <__vector_9+0x44>
    1658:	83 30       	cpi	r24, 0x03	; 3
    165a:	69 f4       	brne	.+26     	; 0x1676 <__vector_9+0x50>
    165c:	0b c0       	rjmp	.+22     	; 0x1674 <__vector_9+0x4e>
	{
		// TRIAC_IMPULSE_TIME finished
		case 0x00:
			// Turn off heater TRIAC
			PORTD &= ~(1<<PD_HEATER);
    165e:	94 98       	cbi	0x12, 4	; 18
			TCNT0 = 256 - (QUATER_PERIOD_TIME - TRIAC_IMPULSE_TIME);
    1660:	8c eb       	ldi	r24, 0xBC	; 188
    1662:	01 c0       	rjmp	.+2      	; 0x1666 <__vector_9+0x40>
			break;
		// QUATER_PERIOD_TIME finished	
		case 0x01:	
			TCNT0 = 256 - (SYNC_IGNORE_TIME - QUATER_PERIOD_TIME);
    1664:	81 ed       	ldi	r24, 0xD1	; 209
    1666:	82 bf       	out	0x32, r24	; 50
			break;	
    1668:	06 c0       	rjmp	.+12     	; 0x1676 <__vector_9+0x50>
		// SYNC_IGNORE_TIME finished	
		case 0x02:
			TCNT0 = 256 - SYNC_LOST_TIMEOUT;
    166a:	82 ec       	ldi	r24, 0xC2	; 194
    166c:	82 bf       	out	0x32, r24	; 50
			// Clear flag and enable interrupt from analog comparator
			ACSR |= (1<<ACI);
    166e:	44 9a       	sbi	0x08, 4	; 8
			ACSR |= (1<<ACIE);
    1670:	43 9a       	sbi	0x08, 3	; 8
			break;
    1672:	01 c0       	rjmp	.+2      	; 0x1676 <__vector_9+0x50>
		// SYNC_LOST_TIMEOUT finished
		case 0x03:
			// Error - sync is lost. It means that device has been disconnected from AC line.
			// Disable all power-consuming devices like LEDs and save user settings to EEPROM.
			exitPowerOff();
    1674:	08 d9       	rcall	.-3568   	; 0x886 <exitPowerOff>
			// Sync is not present - do nothing
			break;
	}	

	// Full period check
	if ((p_state & (HALF_PERIOD_FLAG | STATE_MASK)) == (HALF_PERIOD_FLAG | 0x01))
    1676:	80 91 87 00 	lds	r24, 0x0087
    167a:	8f 78       	andi	r24, 0x8F	; 143
    167c:	81 38       	cpi	r24, 0x81	; 129
    167e:	09 f0       	breq	.+2      	; 0x1682 <__vector_9+0x5c>
    1680:	81 c0       	rjmp	.+258    	; 0x1784 <__vector_9+0x15e>
	{
		// Quarter AC line period is done. Update motor controls.
		temp = PORTD;
    1682:	82 b3       	in	r24, 0x12	; 18
		temp &= ~(1<<PD_M1 | 1<<PD_M2);
    1684:	83 7f       	andi	r24, 0xF3	; 243
		if ( rollState & SKIP_CURRENT_MOTOR_CTRL )
    1686:	90 91 10 01 	lds	r25, 0x0110
    168a:	93 ff       	sbrs	r25, 3
    168c:	05 c0       	rjmp	.+10     	; 0x1698 <__vector_9+0x72>
		{
			// Direction control changed. Skip current period to allow TRIACs fully close
			rollState &= ~SKIP_CURRENT_MOTOR_CTRL;
    168e:	97 7f       	andi	r25, 0xF7	; 247
    1690:	90 93 10 01 	sts	0x0110, r25
			PORTD = temp; 	
    1694:	82 bb       	out	0x12, r24	; 18
    1696:	76 c0       	rjmp	.+236    	; 0x1784 <__vector_9+0x15e>
		}
		else
		{
			// Apply direction control 
			if (rollState & ROLL_FWD)
    1698:	90 ff       	sbrs	r25, 0
    169a:	02 c0       	rjmp	.+4      	; 0x16a0 <__vector_9+0x7a>
				temp |= (1<<PD_M1);
    169c:	84 60       	ori	r24, 0x04	; 4
    169e:	02 c0       	rjmp	.+4      	; 0x16a4 <__vector_9+0x7e>
			else if (rollState & ROLL_REV)
    16a0:	91 fd       	sbrc	r25, 1
				temp |= (1<<PD_M2);
    16a2:	88 60       	ori	r24, 0x08	; 8
			PORTD = temp; 
    16a4:	82 bb       	out	0x12, r24	; 18
// Function to process rolling - sets rotation direction for next period
// Call once per each AC line period
static inline void controlRolling()
{
	// Process cycle rolling
	switch(rollState & (ROLL_FWD | ROLL_REV | ROLL_CYCLE))
    16a6:	40 91 10 01 	lds	r20, 0x0110
    16aa:	84 2f       	mov	r24, r20
    16ac:	87 70       	andi	r24, 0x07	; 7
    16ae:	85 30       	cpi	r24, 0x05	; 5
    16b0:	19 f0       	breq	.+6      	; 0x16b8 <__vector_9+0x92>
    16b2:	86 30       	cpi	r24, 0x06	; 6
    16b4:	e9 f5       	brne	.+122    	; 0x1730 <__vector_9+0x10a>
    16b6:	1d c0       	rjmp	.+58     	; 0x16f2 <__vector_9+0xcc>
//---------------------------------------------//
//---------------------------------------------//

static inline uint8_t reachedTopPoint(void)
{
	return (	(int16_t)(topPoint - rollPoint) <= 0 );
    16b8:	80 91 18 01 	lds	r24, 0x0118
    16bc:	90 91 19 01 	lds	r25, 0x0119
    16c0:	20 91 14 01 	lds	r18, 0x0114
    16c4:	30 91 15 01 	lds	r19, 0x0115
    16c8:	82 1b       	sub	r24, r18
    16ca:	93 0b       	sbc	r25, r19
{
	// Process cycle rolling
	switch(rollState & (ROLL_FWD | ROLL_REV | ROLL_CYCLE))
	{
		case (ROLL_FWD | ROLL_CYCLE):
			if (reachedTopPoint())
    16cc:	18 16       	cp	r1, r24
    16ce:	19 06       	cpc	r1, r25
    16d0:	7c f1       	brlt	.+94     	; 0x1730 <__vector_9+0x10a>
			{
				if (activeRollCycle >= p.rollCycleSet)	
    16d2:	80 91 0f 01 	lds	r24, 0x010F
    16d6:	90 91 98 01 	lds	r25, 0x0198
    16da:	89 17       	cp	r24, r25
    16dc:	28 f0       	brcs	.+10     	; 0x16e8 <__vector_9+0xc2>
				{
					// DONE!
					rollState &= ~ROLL_CYCLE;
    16de:	4b 7f       	andi	r20, 0xFB	; 251
					rollState |= CYCLE_ROLL_DONE;
    16e0:	40 61       	ori	r20, 0x10	; 16
    16e2:	40 93 10 01 	sts	0x0110, r20
    16e6:	24 c0       	rjmp	.+72     	; 0x1730 <__vector_9+0x10a>
				}
				else
				{
					activeRollCycle++;
    16e8:	8f 5f       	subi	r24, 0xFF	; 255
    16ea:	80 93 0f 01 	sts	0x010F, r24
					// Change dir	
					newDirReq = ROLL_REV;				
    16ee:	82 e0       	ldi	r24, 0x02	; 2
    16f0:	1d c0       	rjmp	.+58     	; 0x172c <__vector_9+0x106>
	return (	(int16_t)(topPoint - rollPoint) <= 0 );
}

static inline uint8_t reachedBottomPoint(void)
{
	return (	(int16_t)(rollPoint - bottomPoint) <= 0 );
    16f2:	80 91 14 01 	lds	r24, 0x0114
    16f6:	90 91 15 01 	lds	r25, 0x0115
    16fa:	20 91 16 01 	lds	r18, 0x0116
    16fe:	30 91 17 01 	lds	r19, 0x0117
    1702:	82 1b       	sub	r24, r18
    1704:	93 0b       	sbc	r25, r19
				}
			}
			break;
		
		case (ROLL_REV | ROLL_CYCLE):	
			if (reachedBottomPoint())
    1706:	18 16       	cp	r1, r24
    1708:	19 06       	cpc	r1, r25
    170a:	94 f0       	brlt	.+36     	; 0x1730 <__vector_9+0x10a>
			{
				if (activeRollCycle >= p.rollCycleSet)	
    170c:	80 91 0f 01 	lds	r24, 0x010F
    1710:	90 91 98 01 	lds	r25, 0x0198
    1714:	89 17       	cp	r24, r25
    1716:	30 f0       	brcs	.+12     	; 0x1724 <__vector_9+0xfe>
				{
					// DONE!
					rollState &= ~ROLL_CYCLE;
    1718:	84 2f       	mov	r24, r20
    171a:	8b 7f       	andi	r24, 0xFB	; 251
					rollState |= CYCLE_ROLL_DONE;
    171c:	80 61       	ori	r24, 0x10	; 16
    171e:	80 93 10 01 	sts	0x0110, r24
    1722:	06 c0       	rjmp	.+12     	; 0x1730 <__vector_9+0x10a>
				}
				else
				{
					activeRollCycle++;
    1724:	8f 5f       	subi	r24, 0xFF	; 255
    1726:	80 93 0f 01 	sts	0x010F, r24
					// Change dir	
					newDirReq = ROLL_FWD;
    172a:	81 e0       	ldi	r24, 0x01	; 1
    172c:	80 93 13 01 	sts	0x0113, r24
		default:
			break;
	}
	
	// Process direction change
	if ((rollState ^ newDirReq) & (ROLL_FWD | ROLL_REV))
    1730:	20 91 10 01 	lds	r18, 0x0110
    1734:	90 91 13 01 	lds	r25, 0x0113
    1738:	89 2f       	mov	r24, r25
    173a:	82 27       	eor	r24, r18
    173c:	83 70       	andi	r24, 0x03	; 3
    173e:	19 f0       	breq	.+6      	; 0x1746 <__vector_9+0x120>
	{
		// ROLL_DIR_CHANGED is used for sound beep
		rollState |= (SKIP_CURRENT_MOTOR_CTRL | ROLL_DIR_CHANGED);
    1740:	28 62       	ori	r18, 0x28	; 40
    1742:	20 93 10 01 	sts	0x0110, r18
	}
	
	rollState &= ~(ROLL_FWD | ROLL_REV);
    1746:	80 91 10 01 	lds	r24, 0x0110
    174a:	8c 7f       	andi	r24, 0xFC	; 252
	rollState |= newDirReq;
    174c:	89 2b       	or	r24, r25
	rollState &= dirChangedMask;
    174e:	90 91 88 00 	lds	r25, 0x0088
    1752:	89 23       	and	r24, r25
    1754:	80 93 10 01 	sts	0x0110, r24
	dirChangedMask = 0xFF;
    1758:	9f ef       	ldi	r25, 0xFF	; 255
    175a:	90 93 88 00 	sts	0x0088, r25
	return (	(int16_t)(rollPoint - bottomPoint) <= 0 );
}

static inline void updateRollPoint(void)
{	
	if (rollState & ROLL_FWD)
    175e:	80 ff       	sbrs	r24, 0
    1760:	06 c0       	rjmp	.+12     	; 0x176e <__vector_9+0x148>
		rollPoint++;
    1762:	80 91 14 01 	lds	r24, 0x0114
    1766:	90 91 15 01 	lds	r25, 0x0115
    176a:	01 96       	adiw	r24, 0x01	; 1
    176c:	07 c0       	rjmp	.+14     	; 0x177c <__vector_9+0x156>
	else if (rollState & ROLL_REV)
    176e:	81 ff       	sbrs	r24, 1
    1770:	09 c0       	rjmp	.+18     	; 0x1784 <__vector_9+0x15e>
		rollPoint--;	
    1772:	80 91 14 01 	lds	r24, 0x0114
    1776:	90 91 15 01 	lds	r25, 0x0115
    177a:	01 97       	sbiw	r24, 0x01	; 1
    177c:	90 93 15 01 	sts	0x0115, r25
    1780:	80 93 14 01 	sts	0x0114, r24
			controlRolling();
		}
	}
	
	
	if ((p_state & STATE_MASK)  != 0x0F)
    1784:	80 91 87 00 	lds	r24, 0x0087
    1788:	98 2f       	mov	r25, r24
    178a:	9f 70       	andi	r25, 0x0F	; 15
    178c:	9f 30       	cpi	r25, 0x0F	; 15
    178e:	19 f0       	breq	.+6      	; 0x1796 <__vector_9+0x170>
		p_state++;
    1790:	8f 5f       	subi	r24, 0xFF	; 255
    1792:	80 93 87 00 	sts	0x0087, r24
}	
    1796:	ff 91       	pop	r31
    1798:	ef 91       	pop	r30
    179a:	bf 91       	pop	r27
    179c:	af 91       	pop	r26
    179e:	9f 91       	pop	r25
    17a0:	8f 91       	pop	r24
    17a2:	7f 91       	pop	r23
    17a4:	6f 91       	pop	r22
    17a6:	5f 91       	pop	r21
    17a8:	4f 91       	pop	r20
    17aa:	3f 91       	pop	r19
    17ac:	2f 91       	pop	r18
    17ae:	0f 90       	pop	r0
    17b0:	0f be       	out	0x3f, r0	; 63
    17b2:	0f 90       	pop	r0
    17b4:	1f 90       	pop	r1
    17b6:	18 95       	reti

000017b8 <processSoftTimer8b>:
 
 
 
 
 void processSoftTimer8b(SoftTimer8b_t *tmr)
 {
    17b8:	fc 01       	movw	r30, r24
	 uint8_t newTimerVal;

	 if (!tmr->Enabled)
    17ba:	90 81       	ld	r25, Z
    17bc:	90 ff       	sbrs	r25, 0
    17be:	27 c0       	rjmp	.+78     	; 0x180e <processSoftTimer8b+0x56>
		return;
	 
	 tmr->FA_EQ = 0;
	 tmr->FA_GE = 0;
	 tmr->FTop = 0;
    17c0:	97 7e       	andi	r25, 0xE7	; 231
    17c2:	9f 7d       	andi	r25, 0xDF	; 223
    17c4:	90 83       	st	Z, r25
	 
	 if (tmr->Timer >= tmr->Top)
    17c6:	81 81       	ldd	r24, Z+1	; 0x01
    17c8:	22 81       	ldd	r18, Z+2	; 0x02
    17ca:	82 17       	cp	r24, r18
    17cc:	50 f0       	brcs	.+20     	; 0x17e2 <processSoftTimer8b+0x2a>
	 {
		 if (tmr->RunOnce)
    17ce:	91 ff       	sbrs	r25, 1
    17d0:	02 c0       	rjmp	.+4      	; 0x17d6 <processSoftTimer8b+0x1e>
		 {
			 tmr->Enabled = 0;
    17d2:	9e 7f       	andi	r25, 0xFE	; 254
    17d4:	90 83       	st	Z, r25
		 }
		 tmr->FTop = 1;
    17d6:	90 81       	ld	r25, Z
		 tmr->FOvfl = 1;
    17d8:	90 62       	ori	r25, 0x20	; 32
    17da:	90 64       	ori	r25, 0x40	; 64
    17dc:	90 83       	st	Z, r25
		 newTimerVal = 0;
    17de:	20 e0       	ldi	r18, 0x00	; 0
    17e0:	02 c0       	rjmp	.+4      	; 0x17e6 <processSoftTimer8b+0x2e>
	 }
	 else
	 {
		 newTimerVal = tmr->Timer + 1;
    17e2:	28 2f       	mov	r18, r24
    17e4:	2f 5f       	subi	r18, 0xFF	; 255
	 }
	 
	 if (tmr->Timer == tmr->CompA)
    17e6:	93 81       	ldd	r25, Z+3	; 0x03
    17e8:	89 13       	cpse	r24, r25
    17ea:	0b c0       	rjmp	.+22     	; 0x1802 <processSoftTimer8b+0x4a>
	 {
		 tmr->FA_EQ = 1;
    17ec:	80 81       	ld	r24, Z
		 tmr->FA_GE = 1;
    17ee:	88 60       	ori	r24, 0x08	; 8
    17f0:	80 61       	ori	r24, 0x10	; 16
		 tmr->FA_TGL = !tmr->FA_TGL;
    17f2:	82 fb       	bst	r24, 2
    17f4:	99 27       	eor	r25, r25
    17f6:	90 f9       	bld	r25, 0
    17f8:	31 e0       	ldi	r19, 0x01	; 1
    17fa:	93 27       	eor	r25, r19
    17fc:	90 fb       	bst	r25, 0
    17fe:	82 f9       	bld	r24, 2
    1800:	04 c0       	rjmp	.+8      	; 0x180a <processSoftTimer8b+0x52>
	 }
	 else if (tmr->Timer >= tmr->CompA)
    1802:	89 17       	cp	r24, r25
    1804:	18 f0       	brcs	.+6      	; 0x180c <processSoftTimer8b+0x54>
	 {
		 tmr->FA_GE = 1;
    1806:	80 81       	ld	r24, Z
    1808:	80 61       	ori	r24, 0x10	; 16
    180a:	80 83       	st	Z, r24
	 }
	 
	 tmr->Timer = newTimerVal; 
    180c:	21 83       	std	Z+1, r18	; 0x01
    180e:	08 95       	ret

00001810 <processSystemTimers>:



void processSystemTimers(void)
{
	sys_timers.flags = 0x00;
    1810:	10 92 8f 00 	sts	0x008F, r1
	
	// Process Celsius counter
	if (--sys_timers.celsius_upd_counter == 0)
    1814:	80 91 89 00 	lds	r24, 0x0089
    1818:	81 50       	subi	r24, 0x01	; 1
    181a:	80 93 89 00 	sts	0x0089, r24
    181e:	81 11       	cpse	r24, r1
    1820:	13 c0       	rjmp	.+38     	; 0x1848 <processSystemTimers+0x38>
	{
		sys_timers.celsius_upd_counter = CELSIUS_UDPATE_INTERVAL;
    1822:	84 e0       	ldi	r24, 0x04	; 4
    1824:	80 93 89 00 	sts	0x0089, r24
		sys_timers.flags |= EXPIRED_CELSIUS;
    1828:	81 e0       	ldi	r24, 0x01	; 1
    182a:	80 93 8f 00 	sts	0x008F, r24
		
		// Process PID update counter
		if (--sys_timers.pid_update_counter == 0)
    182e:	80 91 8e 00 	lds	r24, 0x008E
    1832:	81 50       	subi	r24, 0x01	; 1
    1834:	80 93 8e 00 	sts	0x008E, r24
    1838:	81 11       	cpse	r24, r1
    183a:	06 c0       	rjmp	.+12     	; 0x1848 <processSystemTimers+0x38>
		{
			sys_timers.pid_update_counter = PID_UPDATE_INTERVAL;
    183c:	8a e0       	ldi	r24, 0x0A	; 10
    183e:	80 93 8e 00 	sts	0x008E, r24
			sys_timers.flags |= UPDATE_PID;
    1842:	81 e4       	ldi	r24, 0x41	; 65
    1844:	80 93 8f 00 	sts	0x008F, r24
		}
	}
	
	// Process log counter
	if (--sys_timers.log_counter == 0)
    1848:	80 91 8d 00 	lds	r24, 0x008D
    184c:	81 50       	subi	r24, 0x01	; 1
    184e:	19 f0       	breq	.+6      	; 0x1856 <processSystemTimers+0x46>
    1850:	80 93 8d 00 	sts	0x008D, r24
    1854:	08 c0       	rjmp	.+16     	; 0x1866 <processSystemTimers+0x56>
	{
		sys_timers.log_counter = LOG_INTERVAL;
    1856:	82 e0       	ldi	r24, 0x02	; 2
    1858:	80 93 8d 00 	sts	0x008D, r24
		sys_timers.flags |= EXPIRED_LOG;
    185c:	80 91 8f 00 	lds	r24, 0x008F
    1860:	80 62       	ori	r24, 0x20	; 32
    1862:	80 93 8f 00 	sts	0x008F, r24
	}
	
	// Process 10 seconds counter
	if (--sys_timers.counter_10sec == 0)
    1866:	80 91 8a 00 	lds	r24, 0x008A
    186a:	81 50       	subi	r24, 0x01	; 1
    186c:	80 93 8a 00 	sts	0x008A, r24
    1870:	81 11       	cpse	r24, r1
    1872:	34 c0       	rjmp	.+104    	; 0x18dc <processSystemTimers+0xcc>
	{
		sys_timers.counter_10sec = COUNTER_10SEC_INTERVAL;
    1874:	88 ec       	ldi	r24, 0xC8	; 200
    1876:	80 93 8a 00 	sts	0x008A, r24
		sys_timers.flags |= EXPIRED_10SEC;
    187a:	40 91 8f 00 	lds	r20, 0x008F
    187e:	84 2f       	mov	r24, r20
    1880:	82 60       	ori	r24, 0x02	; 2
    1882:	80 93 8f 00 	sts	0x008F, r24
		
		// Process 1 minute counter
		if (--sys_timers.counter_1min == 0)
    1886:	80 91 8b 00 	lds	r24, 0x008B
    188a:	81 50       	subi	r24, 0x01	; 1
    188c:	80 93 8b 00 	sts	0x008B, r24
    1890:	81 11       	cpse	r24, r1
    1892:	24 c0       	rjmp	.+72     	; 0x18dc <processSystemTimers+0xcc>
		{
			sys_timers.counter_1min = COUNTER_1MIN_INTERVAL;
    1894:	86 e0       	ldi	r24, 0x06	; 6
    1896:	80 93 8b 00 	sts	0x008B, r24
			sys_timers.flags |= EXPIRED_1MIN;
    189a:	84 2f       	mov	r24, r20
    189c:	86 60       	ori	r24, 0x06	; 6
    189e:	80 93 8f 00 	sts	0x008F, r24
			
			// Process auto power off counter
			if (sys_timers.poff_counter != MAX_POWEROFF_TIMEOUT - 1)
    18a2:	80 91 8c 00 	lds	r24, 0x008C
    18a6:	8e 35       	cpi	r24, 0x5E	; 94
    18a8:	19 f0       	breq	.+6      	; 0x18b0 <processSystemTimers+0xa0>
				sys_timers.poff_counter++;
    18aa:	8f 5f       	subi	r24, 0xFF	; 255
    18ac:	80 93 8c 00 	sts	0x008C, r24
			if (sys_timers.poff_counter == p.power_off_timeout - 1)
    18b0:	60 91 8c 00 	lds	r22, 0x008C
    18b4:	50 91 9a 01 	lds	r21, 0x019A
    18b8:	26 2f       	mov	r18, r22
    18ba:	30 e0       	ldi	r19, 0x00	; 0
    18bc:	85 2f       	mov	r24, r21
    18be:	90 e0       	ldi	r25, 0x00	; 0
    18c0:	01 97       	sbiw	r24, 0x01	; 1
    18c2:	28 17       	cp	r18, r24
    18c4:	39 07       	cpc	r19, r25
    18c6:	19 f4       	brne	.+6      	; 0x18ce <processSystemTimers+0xbe>
				sys_timers.flags |= AUTOPOFF_SOON;
    18c8:	4e 60       	ori	r20, 0x0E	; 14
    18ca:	40 93 8f 00 	sts	0x008F, r20
			if (sys_timers.poff_counter == p.power_off_timeout)
    18ce:	65 13       	cpse	r22, r21
    18d0:	05 c0       	rjmp	.+10     	; 0x18dc <processSystemTimers+0xcc>
				sys_timers.flags |= AUTOPOFF_EXPIRED;			
    18d2:	80 91 8f 00 	lds	r24, 0x008F
    18d6:	80 61       	ori	r24, 0x10	; 16
    18d8:	80 93 8f 00 	sts	0x008F, r24
    18dc:	08 95       	ret

000018de <resetAutoPowerOffCounter>:
}


void resetAutoPowerOffCounter(void)
{
	sys_timers.poff_counter = 0;
    18de:	10 92 8c 00 	sts	0x008C, r1
    18e2:	08 95       	ret

000018e4 <SetBeeperFreq>:
}

// Setup beeper frequency (Hz)
void SetBeeperFreq(uint16_t freq_hz)
{
	uint16_t period_us = 1000000 / freq_hz;
    18e4:	9c 01       	movw	r18, r24
    18e6:	40 e0       	ldi	r20, 0x00	; 0
    18e8:	50 e0       	ldi	r21, 0x00	; 0
    18ea:	60 e4       	ldi	r22, 0x40	; 64
    18ec:	72 e4       	ldi	r23, 0x42	; 66
    18ee:	8f e0       	ldi	r24, 0x0F	; 15
    18f0:	90 e0       	ldi	r25, 0x00	; 0
    18f2:	ae d0       	rcall	.+348    	; 0x1a50 <__divmodsi4>
	if (period_us & 0xFFF8)
    18f4:	da 01       	movw	r26, r20
    18f6:	c9 01       	movw	r24, r18
    18f8:	88 7f       	andi	r24, 0xF8	; 248
    18fa:	aa 27       	eor	r26, r26
    18fc:	bb 27       	eor	r27, r27
    18fe:	89 2b       	or	r24, r25
    1900:	51 f0       	breq	.+20     	; 0x1916 <SetBeeperFreq+0x32>
		OCR1A = (period_us>>3) - 1;
    1902:	43 e0       	ldi	r20, 0x03	; 3
    1904:	36 95       	lsr	r19
    1906:	27 95       	ror	r18
    1908:	4a 95       	dec	r20
    190a:	e1 f7       	brne	.-8      	; 0x1904 <SetBeeperFreq+0x20>
    190c:	21 50       	subi	r18, 0x01	; 1
    190e:	31 09       	sbc	r19, r1
    1910:	3b bd       	out	0x2b, r19	; 43
    1912:	2a bd       	out	0x2a, r18	; 42
    1914:	04 c0       	rjmp	.+8      	; 0x191e <SetBeeperFreq+0x3a>
	else
		OCR1A = 0x1;
    1916:	81 e0       	ldi	r24, 0x01	; 1
    1918:	90 e0       	ldi	r25, 0x00	; 0
    191a:	9b bd       	out	0x2b, r25	; 43
    191c:	8a bd       	out	0x2a, r24	; 42
	TCNT1 = 0;
    191e:	1d bc       	out	0x2d, r1	; 45
    1920:	1c bc       	out	0x2c, r1	; 44
    1922:	08 95       	ret

00001924 <StartBeep>:
}

// Beep for some time in ms
void StartBeep(uint16_t time_ms)
{
	if ( (p.sound_enable) || (enableOverride) )
    1924:	20 91 99 01 	lds	r18, 0x0199
    1928:	21 11       	cpse	r18, r1
    192a:	04 c0       	rjmp	.+8      	; 0x1934 <StartBeep+0x10>
    192c:	20 91 1c 01 	lds	r18, 0x011C
    1930:	22 23       	and	r18, r18
    1932:	39 f0       	breq	.+14     	; 0x1942 <StartBeep+0x1e>
	{
		beep_cnt = time_ms;
    1934:	90 93 1e 01 	sts	0x011E, r25
    1938:	80 93 1d 01 	sts	0x011D, r24
// Enable / disable beeper output
inline void SetBeepOutput(uint8_t val)
{
	if (val)
		// Toggle OCR1A on compare match
		TCCR1A |= (1<<COM1A0);
    193c:	8f b5       	in	r24, 0x2f	; 47
    193e:	80 64       	ori	r24, 0x40	; 64
    1940:	8f bd       	out	0x2f, r24	; 47
	if ( (p.sound_enable) || (enableOverride) )
	{
		beep_cnt = time_ms;
		SetBeepOutput(1);		
	}
	enableOverride = 0;
    1942:	10 92 1c 01 	sts	0x011C, r1
    1946:	08 95       	ret

00001948 <OverrideSoundDisable>:
}

void OverrideSoundDisable(void)
{
	enableOverride = 1;
    1948:	81 e0       	ldi	r24, 0x01	; 1
    194a:	80 93 1c 01 	sts	0x011C, r24
    194e:	08 95       	ret

00001950 <__vector_3>:




ISR(TIMER2_COMP_vect)
{	
    1950:	1f 92       	push	r1
    1952:	0f 92       	push	r0
    1954:	0f b6       	in	r0, 0x3f	; 63
    1956:	0f 92       	push	r0
    1958:	11 24       	eor	r1, r1
    195a:	2f 93       	push	r18
    195c:	3f 93       	push	r19
    195e:	4f 93       	push	r20
    1960:	5f 93       	push	r21
    1962:	6f 93       	push	r22
    1964:	7f 93       	push	r23
    1966:	8f 93       	push	r24
    1968:	9f 93       	push	r25
    196a:	af 93       	push	r26
    196c:	bf 93       	push	r27
    196e:	ef 93       	push	r30
    1970:	ff 93       	push	r31
	
	// Manage beeper
	if (beep_cnt)
    1972:	80 91 1d 01 	lds	r24, 0x011D
    1976:	90 91 1e 01 	lds	r25, 0x011E
    197a:	00 97       	sbiw	r24, 0x00	; 0
    197c:	31 f0       	breq	.+12     	; 0x198a <__vector_3+0x3a>
		beep_cnt--;
    197e:	01 97       	sbiw	r24, 0x01	; 1
    1980:	90 93 1e 01 	sts	0x011E, r25
    1984:	80 93 1d 01 	sts	0x011D, r24
    1988:	03 c0       	rjmp	.+6      	; 0x1990 <__vector_3+0x40>
	if (val)
		// Toggle OCR1A on compare match
		TCCR1A |= (1<<COM1A0);
	else
		// Disable OCR1A output
		TCCR1A &= ~(1<<COM1A0 | 1<<COM1A1);
    198a:	8f b5       	in	r24, 0x2f	; 47
    198c:	8f 73       	andi	r24, 0x3F	; 63
    198e:	8f bd       	out	0x2f, r24	; 47
		beep_cnt--;
	else
		SetBeepOutput(0);	// done
	
	// Manage LED indicator
	processLedIndicator();
    1990:	af d7       	rcall	.+3934   	; 0x28f0 <__data_load_end+0xcfa>
	
	// Process menu update timer
	processSoftTimer8b(&menuUpdateTimer);	
    1992:	80 e9       	ldi	r24, 0x90	; 144
    1994:	90 e0       	ldi	r25, 0x00	; 0
    1996:	10 df       	rcall	.-480    	; 0x17b8 <processSoftTimer8b>
	
	// Start ADC conversion 
	ADCSRA |= (1<<ADSC);
    1998:	36 9a       	sbi	0x06, 6	; 6
	
}
    199a:	ff 91       	pop	r31
    199c:	ef 91       	pop	r30
    199e:	bf 91       	pop	r27
    19a0:	af 91       	pop	r26
    19a2:	9f 91       	pop	r25
    19a4:	8f 91       	pop	r24
    19a6:	7f 91       	pop	r23
    19a8:	6f 91       	pop	r22
    19aa:	5f 91       	pop	r21
    19ac:	4f 91       	pop	r20
    19ae:	3f 91       	pop	r19
    19b0:	2f 91       	pop	r18
    19b2:	0f 90       	pop	r0
    19b4:	0f be       	out	0x3f, r0	; 63
    19b6:	0f 90       	pop	r0
    19b8:	1f 90       	pop	r1
    19ba:	18 95       	reti

000019bc <USART_send>:



void USART_send( uint8_t data )
{
	UCSRA |= (1<<TXC);                 // Clear flag
    19bc:	5e 9a       	sbi	0x0b, 6	; 11
	UDR = data;
    19be:	8c b9       	out	0x0c, r24	; 12
	while ( !(UCSRA & (1<<TXC)) );  // Wait
    19c0:	5e 9b       	sbis	0x0b, 6	; 11
    19c2:	fe cf       	rjmp	.-4      	; 0x19c0 <USART_send+0x4>
}
    19c4:	08 95       	ret

000019c6 <USART_sendstr>:


void USART_sendstr(char* str)
{
    19c6:	1f 93       	push	r17
    19c8:	cf 93       	push	r28
    19ca:	df 93       	push	r29
    19cc:	ec 01       	movw	r28, r24
	uint8_t i = 0;
    19ce:	10 e0       	ldi	r17, 0x00	; 0
	while (str[i])
    19d0:	02 c0       	rjmp	.+4      	; 0x19d6 <USART_sendstr+0x10>
	{
		USART_send(str[i++]);
    19d2:	1f 5f       	subi	r17, 0xFF	; 255
    19d4:	f3 df       	rcall	.-26     	; 0x19bc <USART_send>


void USART_sendstr(char* str)
{
	uint8_t i = 0;
	while (str[i])
    19d6:	fe 01       	movw	r30, r28
    19d8:	e1 0f       	add	r30, r17
    19da:	f1 1d       	adc	r31, r1
    19dc:	80 81       	ld	r24, Z
    19de:	81 11       	cpse	r24, r1
    19e0:	f8 cf       	rjmp	.-16     	; 0x19d2 <USART_sendstr+0xc>
	{
		USART_send(str[i++]);
	}
}
    19e2:	df 91       	pop	r29
    19e4:	cf 91       	pop	r28
    19e6:	1f 91       	pop	r17
    19e8:	08 95       	ret

000019ea <__udivmodqi4>:
    19ea:	99 1b       	sub	r25, r25
    19ec:	79 e0       	ldi	r23, 0x09	; 9
    19ee:	04 c0       	rjmp	.+8      	; 0x19f8 <__udivmodqi4_ep>

000019f0 <__udivmodqi4_loop>:
    19f0:	99 1f       	adc	r25, r25
    19f2:	96 17       	cp	r25, r22
    19f4:	08 f0       	brcs	.+2      	; 0x19f8 <__udivmodqi4_ep>
    19f6:	96 1b       	sub	r25, r22

000019f8 <__udivmodqi4_ep>:
    19f8:	88 1f       	adc	r24, r24
    19fa:	7a 95       	dec	r23
    19fc:	c9 f7       	brne	.-14     	; 0x19f0 <__udivmodqi4_loop>
    19fe:	80 95       	com	r24
    1a00:	08 95       	ret

00001a02 <__udivmodhi4>:
    1a02:	aa 1b       	sub	r26, r26
    1a04:	bb 1b       	sub	r27, r27
    1a06:	51 e1       	ldi	r21, 0x11	; 17
    1a08:	07 c0       	rjmp	.+14     	; 0x1a18 <__udivmodhi4_ep>

00001a0a <__udivmodhi4_loop>:
    1a0a:	aa 1f       	adc	r26, r26
    1a0c:	bb 1f       	adc	r27, r27
    1a0e:	a6 17       	cp	r26, r22
    1a10:	b7 07       	cpc	r27, r23
    1a12:	10 f0       	brcs	.+4      	; 0x1a18 <__udivmodhi4_ep>
    1a14:	a6 1b       	sub	r26, r22
    1a16:	b7 0b       	sbc	r27, r23

00001a18 <__udivmodhi4_ep>:
    1a18:	88 1f       	adc	r24, r24
    1a1a:	99 1f       	adc	r25, r25
    1a1c:	5a 95       	dec	r21
    1a1e:	a9 f7       	brne	.-22     	; 0x1a0a <__udivmodhi4_loop>
    1a20:	80 95       	com	r24
    1a22:	90 95       	com	r25
    1a24:	bc 01       	movw	r22, r24
    1a26:	cd 01       	movw	r24, r26
    1a28:	08 95       	ret

00001a2a <__divmodhi4>:
    1a2a:	97 fb       	bst	r25, 7
    1a2c:	07 2e       	mov	r0, r23
    1a2e:	16 f4       	brtc	.+4      	; 0x1a34 <__divmodhi4+0xa>
    1a30:	00 94       	com	r0
    1a32:	06 d0       	rcall	.+12     	; 0x1a40 <__divmodhi4_neg1>
    1a34:	77 fd       	sbrc	r23, 7
    1a36:	08 d0       	rcall	.+16     	; 0x1a48 <__divmodhi4_neg2>
    1a38:	e4 df       	rcall	.-56     	; 0x1a02 <__udivmodhi4>
    1a3a:	07 fc       	sbrc	r0, 7
    1a3c:	05 d0       	rcall	.+10     	; 0x1a48 <__divmodhi4_neg2>
    1a3e:	3e f4       	brtc	.+14     	; 0x1a4e <__divmodhi4_exit>

00001a40 <__divmodhi4_neg1>:
    1a40:	90 95       	com	r25
    1a42:	81 95       	neg	r24
    1a44:	9f 4f       	sbci	r25, 0xFF	; 255
    1a46:	08 95       	ret

00001a48 <__divmodhi4_neg2>:
    1a48:	70 95       	com	r23
    1a4a:	61 95       	neg	r22
    1a4c:	7f 4f       	sbci	r23, 0xFF	; 255

00001a4e <__divmodhi4_exit>:
    1a4e:	08 95       	ret

00001a50 <__divmodsi4>:
    1a50:	05 2e       	mov	r0, r21
    1a52:	97 fb       	bst	r25, 7
    1a54:	16 f4       	brtc	.+4      	; 0x1a5a <__divmodsi4+0xa>
    1a56:	00 94       	com	r0
    1a58:	06 d0       	rcall	.+12     	; 0x1a66 <__divmodsi4_neg1>
    1a5a:	57 fd       	sbrc	r21, 7
    1a5c:	0c d0       	rcall	.+24     	; 0x1a76 <__divmodsi4_neg2>
    1a5e:	35 d0       	rcall	.+106    	; 0x1aca <__udivmodsi4>
    1a60:	07 fc       	sbrc	r0, 7
    1a62:	09 d0       	rcall	.+18     	; 0x1a76 <__divmodsi4_neg2>
    1a64:	7e f4       	brtc	.+30     	; 0x1a84 <__divmodsi4_exit>

00001a66 <__divmodsi4_neg1>:
    1a66:	90 95       	com	r25
    1a68:	80 95       	com	r24
    1a6a:	70 95       	com	r23
    1a6c:	61 95       	neg	r22
    1a6e:	7f 4f       	sbci	r23, 0xFF	; 255
    1a70:	8f 4f       	sbci	r24, 0xFF	; 255
    1a72:	9f 4f       	sbci	r25, 0xFF	; 255
    1a74:	08 95       	ret

00001a76 <__divmodsi4_neg2>:
    1a76:	50 95       	com	r21
    1a78:	40 95       	com	r20
    1a7a:	30 95       	com	r19
    1a7c:	21 95       	neg	r18
    1a7e:	3f 4f       	sbci	r19, 0xFF	; 255
    1a80:	4f 4f       	sbci	r20, 0xFF	; 255
    1a82:	5f 4f       	sbci	r21, 0xFF	; 255

00001a84 <__divmodsi4_exit>:
    1a84:	08 95       	ret

00001a86 <__mulhisi3>:
    1a86:	05 d0       	rcall	.+10     	; 0x1a92 <__umulhisi3>
    1a88:	33 23       	and	r19, r19
    1a8a:	12 f4       	brpl	.+4      	; 0x1a90 <__mulhisi3+0xa>
    1a8c:	8a 1b       	sub	r24, r26
    1a8e:	9b 0b       	sbc	r25, r27
    1a90:	0d c0       	rjmp	.+26     	; 0x1aac <__usmulhisi3_tail>

00001a92 <__umulhisi3>:
    1a92:	a2 9f       	mul	r26, r18
    1a94:	b0 01       	movw	r22, r0
    1a96:	b3 9f       	mul	r27, r19
    1a98:	c0 01       	movw	r24, r0
    1a9a:	a3 9f       	mul	r26, r19
    1a9c:	01 d0       	rcall	.+2      	; 0x1aa0 <__umulhisi3+0xe>
    1a9e:	b2 9f       	mul	r27, r18
    1aa0:	70 0d       	add	r23, r0
    1aa2:	81 1d       	adc	r24, r1
    1aa4:	11 24       	eor	r1, r1
    1aa6:	91 1d       	adc	r25, r1
    1aa8:	08 95       	ret

00001aaa <__usmulhisi3>:
    1aaa:	f3 df       	rcall	.-26     	; 0x1a92 <__umulhisi3>

00001aac <__usmulhisi3_tail>:
    1aac:	b7 ff       	sbrs	r27, 7
    1aae:	08 95       	ret
    1ab0:	82 1b       	sub	r24, r18
    1ab2:	93 0b       	sbc	r25, r19
    1ab4:	08 95       	ret

00001ab6 <__muluhisi3>:
    1ab6:	ed df       	rcall	.-38     	; 0x1a92 <__umulhisi3>
    1ab8:	a5 9f       	mul	r26, r21
    1aba:	90 0d       	add	r25, r0
    1abc:	b4 9f       	mul	r27, r20
    1abe:	90 0d       	add	r25, r0
    1ac0:	a4 9f       	mul	r26, r20
    1ac2:	80 0d       	add	r24, r0
    1ac4:	91 1d       	adc	r25, r1
    1ac6:	11 24       	eor	r1, r1
    1ac8:	08 95       	ret

00001aca <__udivmodsi4>:
    1aca:	a1 e2       	ldi	r26, 0x21	; 33
    1acc:	1a 2e       	mov	r1, r26
    1ace:	aa 1b       	sub	r26, r26
    1ad0:	bb 1b       	sub	r27, r27
    1ad2:	fd 01       	movw	r30, r26
    1ad4:	0d c0       	rjmp	.+26     	; 0x1af0 <__udivmodsi4_ep>

00001ad6 <__udivmodsi4_loop>:
    1ad6:	aa 1f       	adc	r26, r26
    1ad8:	bb 1f       	adc	r27, r27
    1ada:	ee 1f       	adc	r30, r30
    1adc:	ff 1f       	adc	r31, r31
    1ade:	a2 17       	cp	r26, r18
    1ae0:	b3 07       	cpc	r27, r19
    1ae2:	e4 07       	cpc	r30, r20
    1ae4:	f5 07       	cpc	r31, r21
    1ae6:	20 f0       	brcs	.+8      	; 0x1af0 <__udivmodsi4_ep>
    1ae8:	a2 1b       	sub	r26, r18
    1aea:	b3 0b       	sbc	r27, r19
    1aec:	e4 0b       	sbc	r30, r20
    1aee:	f5 0b       	sbc	r31, r21

00001af0 <__udivmodsi4_ep>:
    1af0:	66 1f       	adc	r22, r22
    1af2:	77 1f       	adc	r23, r23
    1af4:	88 1f       	adc	r24, r24
    1af6:	99 1f       	adc	r25, r25
    1af8:	1a 94       	dec	r1
    1afa:	69 f7       	brne	.-38     	; 0x1ad6 <__udivmodsi4_loop>
    1afc:	60 95       	com	r22
    1afe:	70 95       	com	r23
    1b00:	80 95       	com	r24
    1b02:	90 95       	com	r25
    1b04:	9b 01       	movw	r18, r22
    1b06:	ac 01       	movw	r20, r24
    1b08:	bd 01       	movw	r22, r26
    1b0a:	cf 01       	movw	r24, r30
    1b0c:	08 95       	ret

00001b0e <__eerd_block_m8>:
    1b0e:	dc 01       	movw	r26, r24
    1b10:	cb 01       	movw	r24, r22

00001b12 <__eerd_blraw_m8>:
    1b12:	fc 01       	movw	r30, r24
    1b14:	e1 99       	sbic	0x1c, 1	; 28
    1b16:	fe cf       	rjmp	.-4      	; 0x1b14 <__eerd_blraw_m8+0x2>
    1b18:	06 c0       	rjmp	.+12     	; 0x1b26 <__eerd_blraw_m8+0x14>
    1b1a:	ff bb       	out	0x1f, r31	; 31
    1b1c:	ee bb       	out	0x1e, r30	; 30
    1b1e:	e0 9a       	sbi	0x1c, 0	; 28
    1b20:	31 96       	adiw	r30, 0x01	; 1
    1b22:	0d b2       	in	r0, 0x1d	; 29
    1b24:	0d 92       	st	X+, r0
    1b26:	41 50       	subi	r20, 0x01	; 1
    1b28:	50 40       	sbci	r21, 0x00	; 0
    1b2a:	b8 f7       	brcc	.-18     	; 0x1b1a <__eerd_blraw_m8+0x8>
    1b2c:	08 95       	ret

00001b2e <__eeupd_block_m8>:
    1b2e:	dc 01       	movw	r26, r24
    1b30:	a4 0f       	add	r26, r20
    1b32:	b5 1f       	adc	r27, r21
    1b34:	41 50       	subi	r20, 0x01	; 1
    1b36:	50 40       	sbci	r21, 0x00	; 0
    1b38:	40 f0       	brcs	.+16     	; 0x1b4a <__eeupd_block_m8+0x1c>
    1b3a:	cb 01       	movw	r24, r22
    1b3c:	84 0f       	add	r24, r20
    1b3e:	95 1f       	adc	r25, r21
    1b40:	2e 91       	ld	r18, -X
    1b42:	05 d0       	rcall	.+10     	; 0x1b4e <__eeupd_r18_m8>
    1b44:	41 50       	subi	r20, 0x01	; 1
    1b46:	50 40       	sbci	r21, 0x00	; 0
    1b48:	d8 f7       	brcc	.-10     	; 0x1b40 <__eeupd_block_m8+0x12>
    1b4a:	08 95       	ret

00001b4c <__eeupd_byte_m8>:
    1b4c:	26 2f       	mov	r18, r22

00001b4e <__eeupd_r18_m8>:
    1b4e:	e1 99       	sbic	0x1c, 1	; 28
    1b50:	fe cf       	rjmp	.-4      	; 0x1b4e <__eeupd_r18_m8>
    1b52:	9f bb       	out	0x1f, r25	; 31
    1b54:	8e bb       	out	0x1e, r24	; 30
    1b56:	e0 9a       	sbi	0x1c, 0	; 28
    1b58:	01 97       	sbiw	r24, 0x01	; 1
    1b5a:	0d b2       	in	r0, 0x1d	; 29
    1b5c:	02 16       	cp	r0, r18
    1b5e:	31 f0       	breq	.+12     	; 0x1b6c <__eeupd_r18_m8+0x1e>
    1b60:	2d bb       	out	0x1d, r18	; 29
    1b62:	0f b6       	in	r0, 0x3f	; 63
    1b64:	f8 94       	cli
    1b66:	e2 9a       	sbi	0x1c, 2	; 28
    1b68:	e1 9a       	sbi	0x1c, 1	; 28
    1b6a:	0f be       	out	0x3f, r0	; 63
    1b6c:	08 95       	ret

00001b6e <_exit>:
    1b6e:	f8 94       	cli

00001b70 <__stop_program>:
    1b70:	ff cf       	rjmp	.-2      	; 0x1b70 <__stop_program>
