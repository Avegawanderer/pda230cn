
pid1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001c22  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000008e  00800060  00001c22  00001cd6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000c6  008000ee  008000ee  00001d64  2**0
                  ALLOC
  3 .eeprom       0000000a  00810000  00810000  00001d64  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         000009c0  00000000  00000000  00001d70  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      000001a6  00000000  00000000  00002730  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      0000002f  00000000  00000000  000028d6  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000408  00000000  00000000  00002905  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00003e7d  00000000  00000000  00002d0d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000013fa  00000000  00000000  00006b8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   000018d6  00000000  00000000  00007f84  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  000009f4  00000000  00000000  0000985c  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00001096  00000000  00000000  0000a250  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00001f01  00000000  00000000  0000b2e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000348  00000000  00000000  0000d1e7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	ad c0       	rjmp	.+346    	; 0x15c <__ctors_end>
       2:	c7 c0       	rjmp	.+398    	; 0x192 <__bad_interrupt>
       4:	c6 c0       	rjmp	.+396    	; 0x192 <__bad_interrupt>
       6:	02 cd       	rjmp	.-1532   	; 0xfffffa0c <__eeprom_end+0xff7efa02>
       8:	c4 c0       	rjmp	.+392    	; 0x192 <__bad_interrupt>
       a:	c3 c0       	rjmp	.+390    	; 0x192 <__bad_interrupt>
       c:	c2 c0       	rjmp	.+388    	; 0x192 <__bad_interrupt>
       e:	c1 c0       	rjmp	.+386    	; 0x192 <__bad_interrupt>
      10:	c0 c0       	rjmp	.+384    	; 0x192 <__bad_interrupt>
      12:	67 cb       	rjmp	.-2354   	; 0xfffff6e2 <__eeprom_end+0xff7ef6d8>
      14:	be c0       	rjmp	.+380    	; 0x192 <__bad_interrupt>
      16:	bd c0       	rjmp	.+378    	; 0x192 <__bad_interrupt>
      18:	bc c0       	rjmp	.+376    	; 0x192 <__bad_interrupt>
      1a:	bb c0       	rjmp	.+374    	; 0x192 <__bad_interrupt>
      1c:	d6 c1       	rjmp	.+940    	; 0x3ca <__vector_14>
      1e:	b9 c0       	rjmp	.+370    	; 0x192 <__bad_interrupt>
      20:	22 cb       	rjmp	.-2492   	; 0xfffff666 <__eeprom_end+0xff7ef65c>
      22:	b7 c0       	rjmp	.+366    	; 0x192 <__bad_interrupt>
      24:	b6 c0       	rjmp	.+364    	; 0x192 <__bad_interrupt>

00000026 <led_encode_table>:
      26:	30 3f 4f 3f 31 06 32 5b 33 4f 34 66 53 6d 35 6d     0?O?1.2[3O4fSm5m
      36:	36 7d 37 07 38 7f 39 6f 2e 80 2c 80 2d 40 5f 08     6}7.8.9o..,.-@_.
      46:	20 00 b0 63 41 77 43 39 46 71 4e 54 44 5e 50 73      ..cAwC9FqNTD^Ps
      56:	45 79 52 50                                         EyRP

0000005a <menuFunctionSet>:
      5a:	01 79 08 8f 06 79 07 03 76 07 2a 08 f2 05 02 27     .y...y..v.*....'
      6a:	08 c0 07 6e 07 05 5c 07 7b 07 00 00 0b f8 05 7b     ...n..\.{......{
      7a:	07 06 06 04 5c 07 3e 06 00 00 0c f8 05 3e 06 06     ....\.>......>..
      8a:	06 06 64 07 08 07 00 00 09 f8 05 08 07 0f 06 07     ..d.............
      9a:	64 07 ba 06 00 00 0a f8 05 ba 06 0f 06 08 30 06     d.............0.
      aa:	1a 06 00 00 0d 22 06 1a 06 00 00 0e 56 07 1e 06     ....."......V...
      ba:	0c 06                                               ..

000000bc <menuJumpSet>:
      bc:	01 06 00 03 a8 01 00 01 02 40 01 00 02 05 28 02     .........@....(.
      cc:	00 01 01 80 03 00 83 01 40 05 00 82 01 00 05 04     ........@.......
      dc:	00 04 68 05 02 00 07 a8 05 00 01 0b 28 0b 00 83     ..h.........(...
      ec:	05 28 04 00 82 01 00 04 04 00 06 68 04 02 00 05     .(.........h....
      fc:	a8 04 00 01 0c 28 0c 00 83 04 28 06 00 82 01 00     .....(....(.....
     10c:	06 04 00 07 68 06 02 00 04 a8 06 00 01 09 00 07     ....h...........
     11c:	00 82 01 00 07 04 00 05 68 07 02 00 06 a8 07 00     ........h.......
     12c:	01 0a 00 09 00 02 06 28 09 00 01 08 14 08 00 83     .......(........
     13c:	01 00 0a 00 02 07 28 0a 00 01 0d 14 0d 00 83 01     ......(.........
     14c:	00 01 00 40 0e 00 02 00 40 0e 00 0e 76 01 01 00     ...@....@...v...

0000015c <__ctors_end>:
     15c:	11 24       	eor	r1, r1
     15e:	1f be       	out	0x3f, r1	; 63
     160:	cf e5       	ldi	r28, 0x5F	; 95
     162:	d4 e0       	ldi	r29, 0x04	; 4
     164:	de bf       	out	0x3e, r29	; 62
     166:	cd bf       	out	0x3d, r28	; 61

00000168 <__do_copy_data>:
     168:	10 e0       	ldi	r17, 0x00	; 0
     16a:	a0 e6       	ldi	r26, 0x60	; 96
     16c:	b0 e0       	ldi	r27, 0x00	; 0
     16e:	e2 e2       	ldi	r30, 0x22	; 34
     170:	fc e1       	ldi	r31, 0x1C	; 28
     172:	02 c0       	rjmp	.+4      	; 0x178 <__do_copy_data+0x10>
     174:	05 90       	lpm	r0, Z+
     176:	0d 92       	st	X+, r0
     178:	ae 3e       	cpi	r26, 0xEE	; 238
     17a:	b1 07       	cpc	r27, r17
     17c:	d9 f7       	brne	.-10     	; 0x174 <__do_copy_data+0xc>

0000017e <__do_clear_bss>:
     17e:	21 e0       	ldi	r18, 0x01	; 1
     180:	ae ee       	ldi	r26, 0xEE	; 238
     182:	b0 e0       	ldi	r27, 0x00	; 0
     184:	01 c0       	rjmp	.+2      	; 0x188 <.do_clear_bss_start>

00000186 <.do_clear_bss_loop>:
     186:	1d 92       	st	X+, r1

00000188 <.do_clear_bss_start>:
     188:	a4 3b       	cpi	r26, 0xB4	; 180
     18a:	b2 07       	cpc	r27, r18
     18c:	e1 f7       	brne	.-8      	; 0x186 <.do_clear_bss_loop>
     18e:	3c d9       	rcall	.-3464   	; 0xfffff408 <__eeprom_end+0xff7ef3fe>
     190:	46 cd       	rjmp	.-1396   	; 0xfffffc1e <__eeprom_end+0xff7efc14>

00000192 <__bad_interrupt>:
     192:	36 cf       	rjmp	.-404    	; 0x0 <__vectors>

00000194 <conv_ADC_to_Celsius>:
		25 Celsius	->	765
*/


uint16_t conv_ADC_to_Celsius(uint16_t adc_value)
{	
     194:	0f 93       	push	r16
     196:	1f 93       	push	r17
	return (uint16_t)(((int32_t)adc_value * k_norm + offset_norm) / (COEFF_SCALE));
     198:	20 91 ee 00 	lds	r18, 0x00EE
     19c:	30 91 ef 00 	lds	r19, 0x00EF
     1a0:	40 91 f0 00 	lds	r20, 0x00F0
     1a4:	50 91 f1 00 	lds	r21, 0x00F1
     1a8:	dc 01       	movw	r26, r24
     1aa:	ff dc       	rcall	.-1538   	; 0xfffffbaa <__eeprom_end+0xff7efba0>
     1ac:	00 91 f2 00 	lds	r16, 0x00F2
     1b0:	10 91 f3 00 	lds	r17, 0x00F3
     1b4:	20 91 f4 00 	lds	r18, 0x00F4
     1b8:	30 91 f5 00 	lds	r19, 0x00F5
     1bc:	60 0f       	add	r22, r16
     1be:	71 1f       	adc	r23, r17
     1c0:	82 1f       	adc	r24, r18
     1c2:	93 1f       	adc	r25, r19
     1c4:	28 ee       	ldi	r18, 0xE8	; 232
     1c6:	33 e0       	ldi	r19, 0x03	; 3
     1c8:	40 e0       	ldi	r20, 0x00	; 0
     1ca:	50 e0       	ldi	r21, 0x00	; 0
     1cc:	c1 dc       	rcall	.-1662   	; 0xfffffb50 <__eeprom_end+0xff7efb46>
}
     1ce:	c9 01       	movw	r24, r18
     1d0:	1f 91       	pop	r17
     1d2:	0f 91       	pop	r16
     1d4:	08 95       	ret

000001d6 <conv_Celsius_to_ADC>:

uint16_t conv_Celsius_to_ADC(uint16_t degree_value)
{
     1d6:	0f 93       	push	r16
     1d8:	1f 93       	push	r17
	degree_value += 1;
     1da:	9c 01       	movw	r18, r24
     1dc:	2f 5f       	subi	r18, 0xFF	; 255
     1de:	3f 4f       	sbci	r19, 0xFF	; 255
	return (uint16_t)(((int32_t)degree_value * COEFF_SCALE - offset_norm) / k_norm);
     1e0:	a8 ee       	ldi	r26, 0xE8	; 232
     1e2:	b3 e0       	ldi	r27, 0x03	; 3
     1e4:	d0 dc       	rcall	.-1632   	; 0xfffffb86 <__eeprom_end+0xff7efb7c>
     1e6:	00 91 f2 00 	lds	r16, 0x00F2
     1ea:	10 91 f3 00 	lds	r17, 0x00F3
     1ee:	20 91 f4 00 	lds	r18, 0x00F4
     1f2:	30 91 f5 00 	lds	r19, 0x00F5
     1f6:	60 1b       	sub	r22, r16
     1f8:	71 0b       	sbc	r23, r17
     1fa:	82 0b       	sbc	r24, r18
     1fc:	93 0b       	sbc	r25, r19
     1fe:	20 91 ee 00 	lds	r18, 0x00EE
     202:	30 91 ef 00 	lds	r19, 0x00EF
     206:	40 91 f0 00 	lds	r20, 0x00F0
     20a:	50 91 f1 00 	lds	r21, 0x00F1
     20e:	a0 dc       	rcall	.-1728   	; 0xfffffb50 <__eeprom_end+0xff7efb46>
}
     210:	c9 01       	movw	r24, r18
     212:	1f 91       	pop	r17
     214:	0f 91       	pop	r16
     216:	08 95       	ret

00000218 <calculateCoeffs>:

void calculateCoeffs(void)
{
     218:	8f 92       	push	r8
     21a:	9f 92       	push	r9
     21c:	af 92       	push	r10
     21e:	bf 92       	push	r11
     220:	cf 92       	push	r12
     222:	df 92       	push	r13
     224:	ef 92       	push	r14
     226:	ff 92       	push	r15
     228:	cf 93       	push	r28
     22a:	df 93       	push	r29
	k_norm = ((int32_t)(cp.cpoint2 - cp.cpoint1) * COEFF_SCALE) / ((int32_t)(cp.cpoint2_adc - cp.cpoint1_adc));
     22c:	f0 90 82 01 	lds	r15, 0x0182
     230:	a0 91 83 01 	lds	r26, 0x0183
     234:	b0 e0       	ldi	r27, 0x00	; 0
     236:	af 19       	sub	r26, r15
     238:	b1 09       	sbc	r27, r1
     23a:	c0 91 84 01 	lds	r28, 0x0184
     23e:	d0 91 85 01 	lds	r29, 0x0185
     242:	28 ee       	ldi	r18, 0xE8	; 232
     244:	33 e0       	ldi	r19, 0x03	; 3
     246:	ab dc       	rcall	.-1706   	; 0xfffffb9e <__eeprom_end+0xff7efb94>
     248:	20 91 86 01 	lds	r18, 0x0186
     24c:	30 91 87 01 	lds	r19, 0x0187
     250:	2c 1b       	sub	r18, r28
     252:	3d 0b       	sbc	r19, r29
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	7b dc       	rcall	.-1802   	; 0xfffffb50 <__eeprom_end+0xff7efb46>
     25a:	49 01       	movw	r8, r18
     25c:	5a 01       	movw	r10, r20
     25e:	20 93 ee 00 	sts	0x00EE, r18
     262:	30 93 ef 00 	sts	0x00EF, r19
     266:	40 93 f0 00 	sts	0x00F0, r20
     26a:	50 93 f1 00 	sts	0x00F1, r21
	offset_norm = (int32_t)cp.cpoint1 * COEFF_SCALE - (int32_t)cp.cpoint1_adc * k_norm;
     26e:	2f 2d       	mov	r18, r15
     270:	30 e0       	ldi	r19, 0x00	; 0
     272:	a8 ee       	ldi	r26, 0xE8	; 232
     274:	b3 e0       	ldi	r27, 0x03	; 3
     276:	87 dc       	rcall	.-1778   	; 0xfffffb86 <__eeprom_end+0xff7efb7c>
     278:	6b 01       	movw	r12, r22
     27a:	7c 01       	movw	r14, r24
     27c:	de 01       	movw	r26, r28
     27e:	a5 01       	movw	r20, r10
     280:	94 01       	movw	r18, r8
     282:	93 dc       	rcall	.-1754   	; 0xfffffbaa <__eeprom_end+0xff7efba0>
     284:	c6 1a       	sub	r12, r22
     286:	d7 0a       	sbc	r13, r23
     288:	e8 0a       	sbc	r14, r24
     28a:	f9 0a       	sbc	r15, r25
     28c:	c0 92 f2 00 	sts	0x00F2, r12
     290:	d0 92 f3 00 	sts	0x00F3, r13
     294:	e0 92 f4 00 	sts	0x00F4, r14
     298:	f0 92 f5 00 	sts	0x00F5, r15
}
     29c:	df 91       	pop	r29
     29e:	cf 91       	pop	r28
     2a0:	ff 90       	pop	r15
     2a2:	ef 90       	pop	r14
     2a4:	df 90       	pop	r13
     2a6:	cf 90       	pop	r12
     2a8:	bf 90       	pop	r11
     2aa:	af 90       	pop	r10
     2ac:	9f 90       	pop	r9
     2ae:	8f 90       	pop	r8
     2b0:	08 95       	ret

000002b2 <update_Celsius>:
}

void update_Celsius(void)
{
	// Convert to Celsius degree
	adc_celsius = conv_ADC_to_Celsius(adc_normalized);
     2b2:	80 91 55 01 	lds	r24, 0x0155
     2b6:	90 91 56 01 	lds	r25, 0x0156
     2ba:	6c df       	rcall	.-296    	; 0x194 <conv_ADC_to_Celsius>
     2bc:	90 93 58 01 	sts	0x0158, r25
     2c0:	80 93 57 01 	sts	0x0157, r24
     2c4:	08 95       	ret

000002c6 <iir_u16>:



// IIR digital filter
uint16_t iir_u16(uint16_t *data, filter8bit_core_t* iir_core)
{
     2c6:	cf 92       	push	r12
     2c8:	df 92       	push	r13
     2ca:	ef 92       	push	r14
     2cc:	ff 92       	push	r15
     2ce:	1f 93       	push	r17
     2d0:	cf 93       	push	r28
     2d2:	df 93       	push	r29
     2d4:	eb 01       	movw	r28, r22
	uint32_t summ = 0;
	uint8_t i;
	
	for (i=0; i<iir_core->n; i++)
     2d6:	18 81       	ld	r17, Y
     2d8:	fc 01       	movw	r30, r24
     2da:	40 e0       	ldi	r20, 0x00	; 0
     2dc:	50 e0       	ldi	r21, 0x00	; 0


// IIR digital filter
uint16_t iir_u16(uint16_t *data, filter8bit_core_t* iir_core)
{
	uint32_t summ = 0;
     2de:	c1 2c       	mov	r12, r1
     2e0:	d1 2c       	mov	r13, r1
     2e2:	76 01       	movw	r14, r12
	uint8_t i;
	
	for (i=0; i<iir_core->n; i++)
     2e4:	0f c0       	rjmp	.+30     	; 0x304 <iir_u16+0x3e>
		summ += (uint32_t)data[i] * iir_core->coeffs[i];
     2e6:	21 91       	ld	r18, Z+
     2e8:	31 91       	ld	r19, Z+
}	



// IIR digital filter
uint16_t iir_u16(uint16_t *data, filter8bit_core_t* iir_core)
     2ea:	de 01       	movw	r26, r28
     2ec:	a4 0f       	add	r26, r20
     2ee:	b5 1f       	adc	r27, r21
{
	uint32_t summ = 0;
	uint8_t i;
	
	for (i=0; i<iir_core->n; i++)
		summ += (uint32_t)data[i] * iir_core->coeffs[i];
     2f0:	13 96       	adiw	r26, 0x03	; 3
     2f2:	ac 91       	ld	r26, X
     2f4:	b0 e0       	ldi	r27, 0x00	; 0
     2f6:	47 dc       	rcall	.-1906   	; 0xfffffb86 <__eeprom_end+0xff7efb7c>
     2f8:	c6 0e       	add	r12, r22
     2fa:	d7 1e       	adc	r13, r23
     2fc:	e8 1e       	adc	r14, r24
     2fe:	f9 1e       	adc	r15, r25
     300:	4f 5f       	subi	r20, 0xFF	; 255
     302:	5f 4f       	sbci	r21, 0xFF	; 255
uint16_t iir_u16(uint16_t *data, filter8bit_core_t* iir_core)
{
	uint32_t summ = 0;
	uint8_t i;
	
	for (i=0; i<iir_core->n; i++)
     304:	41 17       	cp	r20, r17
     306:	78 f3       	brcs	.-34     	; 0x2e6 <iir_u16+0x20>
		summ += (uint32_t)data[i] * iir_core->coeffs[i];
	
	
	return (uint16_t)(summ / iir_core->dc_gain);
     308:	29 81       	ldd	r18, Y+1	; 0x01
     30a:	3a 81       	ldd	r19, Y+2	; 0x02
     30c:	40 e0       	ldi	r20, 0x00	; 0
     30e:	50 e0       	ldi	r21, 0x00	; 0
     310:	c7 01       	movw	r24, r14
     312:	b6 01       	movw	r22, r12
     314:	fb db       	rcall	.-2058   	; 0xfffffb0c <__eeprom_end+0xff7efb02>
}
     316:	c9 01       	movw	r24, r18
     318:	df 91       	pop	r29
     31a:	cf 91       	pop	r28
     31c:	1f 91       	pop	r17
     31e:	ff 90       	pop	r15
     320:	ef 90       	pop	r14
     322:	df 90       	pop	r13
     324:	cf 90       	pop	r12
     326:	08 95       	ret

00000328 <addToRingU16>:
//---------------------------------------------//
//---------------------------------------------//

// Ring buffer main function - add new data and update summ
void addToRingU16(RingBufU16_t* bptr, uint16_t sample)
{
     328:	ff 92       	push	r15
     32a:	0f 93       	push	r16
     32c:	1f 93       	push	r17
     32e:	cf 93       	push	r28
     330:	df 93       	push	r29
     332:	fc 01       	movw	r30, r24
     334:	cb 01       	movw	r24, r22
	if (bptr->stat == RNORM)
     336:	20 85       	ldd	r18, Z+8	; 0x08
     338:	21 11       	cpse	r18, r1
     33a:	18 c0       	rjmp	.+48     	; 0x36c <addToRingU16+0x44>
	{
		bptr->summ -= bptr->data[bptr->curr_pos];
     33c:	27 81       	ldd	r18, Z+7	; 0x07
     33e:	41 81       	ldd	r20, Z+1	; 0x01
     340:	32 81       	ldd	r19, Z+2	; 0x02
     342:	a4 2f       	mov	r26, r20
     344:	b3 2f       	mov	r27, r19
     346:	a2 0f       	add	r26, r18
     348:	b1 1d       	adc	r27, r1
     34a:	a2 0f       	add	r26, r18
     34c:	b1 1d       	adc	r27, r1
     34e:	2d 91       	ld	r18, X+
     350:	3c 91       	ld	r19, X
     352:	43 81       	ldd	r20, Z+3	; 0x03
     354:	54 81       	ldd	r21, Z+4	; 0x04
     356:	65 81       	ldd	r22, Z+5	; 0x05
     358:	76 81       	ldd	r23, Z+6	; 0x06
     35a:	42 1b       	sub	r20, r18
     35c:	53 0b       	sbc	r21, r19
     35e:	61 09       	sbc	r22, r1
     360:	71 09       	sbc	r23, r1
     362:	43 83       	std	Z+3, r20	; 0x03
     364:	54 83       	std	Z+4, r21	; 0x04
     366:	65 83       	std	Z+5, r22	; 0x05
     368:	76 83       	std	Z+6, r23	; 0x06
     36a:	05 c0       	rjmp	.+10     	; 0x376 <addToRingU16+0x4e>
	}
	else
	{
		bptr->curr_pos = 0;
     36c:	17 82       	std	Z+7, r1	; 0x07
		bptr->summ = 0;
     36e:	13 82       	std	Z+3, r1	; 0x03
     370:	14 82       	std	Z+4, r1	; 0x04
     372:	15 82       	std	Z+5, r1	; 0x05
     374:	16 82       	std	Z+6, r1	; 0x06
	}
	do	
	{
		bptr->data[bptr->curr_pos++] = sample;
     376:	d1 81       	ldd	r29, Z+1	; 0x01
     378:	f2 80       	ldd	r15, Z+2	; 0x02
     37a:	43 81       	ldd	r20, Z+3	; 0x03
     37c:	54 81       	ldd	r21, Z+4	; 0x04
     37e:	65 81       	ldd	r22, Z+5	; 0x05
     380:	76 81       	ldd	r23, Z+6	; 0x06
		bptr->summ += sample;
     382:	8c 01       	movw	r16, r24
     384:	20 e0       	ldi	r18, 0x00	; 0
     386:	30 e0       	ldi	r19, 0x00	; 0
		bptr->curr_pos = 0;
		bptr->summ = 0;
	}
	do	
	{
		bptr->data[bptr->curr_pos++] = sample;
     388:	c7 81       	ldd	r28, Z+7	; 0x07
     38a:	ad 2f       	mov	r26, r29
     38c:	bf 2d       	mov	r27, r15
     38e:	ac 0f       	add	r26, r28
     390:	b1 1d       	adc	r27, r1
     392:	ac 0f       	add	r26, r28
     394:	b1 1d       	adc	r27, r1
     396:	8d 93       	st	X+, r24
     398:	9c 93       	st	X, r25
     39a:	cf 5f       	subi	r28, 0xFF	; 255
     39c:	c7 83       	std	Z+7, r28	; 0x07
//---------------------------------------------//
//---------------------------------------------//
//---------------------------------------------//

// Ring buffer main function - add new data and update summ
void addToRingU16(RingBufU16_t* bptr, uint16_t sample)
     39e:	40 0f       	add	r20, r16
     3a0:	51 1f       	adc	r21, r17
     3a2:	62 1f       	adc	r22, r18
     3a4:	73 1f       	adc	r23, r19
	}
	do	
	{
		bptr->data[bptr->curr_pos++] = sample;
		bptr->summ += sample;
		if (bptr->curr_pos == bptr->length)	
     3a6:	a0 81       	ld	r26, Z
     3a8:	ca 13       	cpse	r28, r26
     3aa:	02 c0       	rjmp	.+4      	; 0x3b0 <addToRingU16+0x88>
		{	
			bptr->curr_pos = 0;	
     3ac:	17 82       	std	Z+7, r1	; 0x07
			bptr->stat = RNORM;
     3ae:	10 86       	std	Z+8, r1	; 0x08
		}
	} 
	while (bptr->stat != RNORM);
     3b0:	a0 85       	ldd	r26, Z+8	; 0x08
     3b2:	a1 11       	cpse	r26, r1
     3b4:	e9 cf       	rjmp	.-46     	; 0x388 <addToRingU16+0x60>
     3b6:	43 83       	std	Z+3, r20	; 0x03
     3b8:	54 83       	std	Z+4, r21	; 0x04
     3ba:	65 83       	std	Z+5, r22	; 0x05
     3bc:	76 83       	std	Z+6, r23	; 0x06
}
     3be:	df 91       	pop	r29
     3c0:	cf 91       	pop	r28
     3c2:	1f 91       	pop	r17
     3c4:	0f 91       	pop	r16
     3c6:	ff 90       	pop	r15
     3c8:	08 95       	ret

000003ca <__vector_14>:
}
*/


ISR(ADC_vect)
{
     3ca:	1f 92       	push	r1
     3cc:	0f 92       	push	r0
     3ce:	0f b6       	in	r0, 0x3f	; 63
     3d0:	0f 92       	push	r0
     3d2:	11 24       	eor	r1, r1
     3d4:	2f 93       	push	r18
     3d6:	3f 93       	push	r19
     3d8:	4f 93       	push	r20
     3da:	5f 93       	push	r21
     3dc:	6f 93       	push	r22
     3de:	7f 93       	push	r23
     3e0:	8f 93       	push	r24
     3e2:	9f 93       	push	r25
     3e4:	af 93       	push	r26
     3e6:	bf 93       	push	r27
     3e8:	ef 93       	push	r30
     3ea:	ff 93       	push	r31
	// Get new sample
	uint16_t new_sample = 1024 - ADC;	
     3ec:	84 b1       	in	r24, 0x04	; 4
     3ee:	95 b1       	in	r25, 0x05	; 5
     3f0:	60 e0       	ldi	r22, 0x00	; 0
     3f2:	74 e0       	ldi	r23, 0x04	; 4
     3f4:	68 1b       	sub	r22, r24
     3f6:	79 0b       	sbc	r23, r25
	// Add new sample to the ring buffer
	addToRingU16(&ringBufADC, new_sample);
     3f8:	80 e8       	ldi	r24, 0x80	; 128
     3fa:	90 e0       	ldi	r25, 0x00	; 0
     3fc:	95 df       	rcall	.-214    	; 0x328 <addToRingU16>
}	
     3fe:	ff 91       	pop	r31
     400:	ef 91       	pop	r30
     402:	bf 91       	pop	r27
     404:	af 91       	pop	r26
     406:	9f 91       	pop	r25
     408:	8f 91       	pop	r24
     40a:	7f 91       	pop	r23
     40c:	6f 91       	pop	r22
     40e:	5f 91       	pop	r21
     410:	4f 91       	pop	r20
     412:	3f 91       	pop	r19
     414:	2f 91       	pop	r18
     416:	0f 90       	pop	r0
     418:	0f be       	out	0x3f, r0	; 63
     41a:	0f 90       	pop	r0
     41c:	1f 90       	pop	r1
     41e:	18 95       	reti

00000420 <update_normalized_adc>:
	offset_norm = (int32_t)cp.cpoint1 * COEFF_SCALE - (int32_t)cp.cpoint1_adc * k_norm;
}


void update_normalized_adc()
{
     420:	cf 92       	push	r12
     422:	df 92       	push	r13
     424:	ef 92       	push	r14
     426:	ff 92       	push	r15
	// Disable interrupts from ADC - to save data integrity
	ADCSRA &= ~(1<<ADIE);	
     428:	33 98       	cbi	0x06, 3	; 6
}

// Get ring buffer normalized value
uint16_t getNormalizedRingU16(RingBufU16_t* bptr)
{
	return 	bptr->summ / bptr->length;
     42a:	c0 90 83 00 	lds	r12, 0x0083
     42e:	d0 90 84 00 	lds	r13, 0x0084
     432:	e0 90 85 00 	lds	r14, 0x0085
     436:	f0 90 86 00 	lds	r15, 0x0086
     43a:	20 91 80 00 	lds	r18, 0x0080
     43e:	30 e0       	ldi	r19, 0x00	; 0
     440:	40 e0       	ldi	r20, 0x00	; 0
     442:	50 e0       	ldi	r21, 0x00	; 0
     444:	c7 01       	movw	r24, r14
     446:	b6 01       	movw	r22, r12
     448:	61 db       	rcall	.-2366   	; 0xfffffb0c <__eeprom_end+0xff7efb02>
     44a:	30 93 56 01 	sts	0x0156, r19
     44e:	20 93 55 01 	sts	0x0155, r18
{
	// Disable interrupts from ADC - to save data integrity
	ADCSRA &= ~(1<<ADIE);	
	// Get normalized mean window summ
	adc_normalized = (uint16_t)getNormalizedRingU16(&ringBufADC);
	adc_oversampled = ringBufADC.summ >> 2;
     452:	c7 01       	movw	r24, r14
     454:	b6 01       	movw	r22, r12
     456:	22 e0       	ldi	r18, 0x02	; 2
     458:	96 95       	lsr	r25
     45a:	87 95       	ror	r24
     45c:	77 95       	ror	r23
     45e:	67 95       	ror	r22
     460:	2a 95       	dec	r18
     462:	d1 f7       	brne	.-12     	; 0x458 <update_normalized_adc+0x38>
     464:	70 93 2c 01 	sts	0x012C, r23
     468:	60 93 2b 01 	sts	0x012B, r22
	// Filter
	addToRingU16(&ringBufFilter, adc_oversampled);
     46c:	87 e7       	ldi	r24, 0x77	; 119
     46e:	90 e0       	ldi	r25, 0x00	; 0
     470:	5b df       	rcall	.-330    	; 0x328 <addToRingU16>
	adc_filtered = iir_u16(filter_buffer, &iir_filter_rect);	
     472:	60 e6       	ldi	r22, 0x60	; 96
     474:	70 e0       	ldi	r23, 0x00	; 0
     476:	89 e5       	ldi	r24, 0x59	; 89
     478:	91 e0       	ldi	r25, 0x01	; 1
     47a:	25 df       	rcall	.-438    	; 0x2c6 <iir_u16>
     47c:	90 93 2a 01 	sts	0x012A, r25
     480:	80 93 29 01 	sts	0x0129, r24

	// Enable interrupts from ADC
	ADCSRA |= (1<<ADIE);
     484:	33 9a       	sbi	0x06, 3	; 6
}
     486:	ff 90       	pop	r15
     488:	ef 90       	pop	r14
     48a:	df 90       	pop	r13
     48c:	cf 90       	pop	r12
     48e:	08 95       	ret

00000490 <process_buttons>:
	uint8_t long_press_mask;
	uint8_t long_press_event_mask;
	
	uint16_t composed_state;
	
	raw_delayed = raw_current;
     490:	50 91 fc 00 	lds	r21, 0x00FC
	raw_delayed_inv = raw_current_inv;
     494:	30 91 89 00 	lds	r19, 0x0089
	raw_current = raw_button_state;
     498:	90 91 b3 01 	lds	r25, 0x01B3
     49c:	90 93 fc 00 	sts	0x00FC, r25
	raw_current_inv = ~raw_current;
     4a0:	69 2f       	mov	r22, r25
     4a2:	60 95       	com	r22
     4a4:	60 93 89 00 	sts	0x0089, r22
	
	// Must be before press_timer update
	long_press_mask = (press_timer >= LONG_PRESS_DELAY) ? 0xFF : 0x00;
     4a8:	80 91 fd 00 	lds	r24, 0x00FD
     4ac:	8c 30       	cpi	r24, 0x0C	; 12
     4ae:	10 f0       	brcs	.+4      	; 0x4b4 <process_buttons+0x24>
     4b0:	2f ef       	ldi	r18, 0xFF	; 255
     4b2:	01 c0       	rjmp	.+2      	; 0x4b6 <process_buttons+0x26>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
	
	if (raw_delayed != raw_current)
     4b6:	59 17       	cp	r21, r25
     4b8:	19 f0       	breq	.+6      	; 0x4c0 <process_buttons+0x30>
	{
		press_timer = 0;
     4ba:	10 92 fd 00 	sts	0x00FD, r1
     4be:	05 c0       	rjmp	.+10     	; 0x4ca <process_buttons+0x3a>
	}
	else if (press_timer <= LONG_PRESS_DELAY)
     4c0:	8d 30       	cpi	r24, 0x0D	; 13
     4c2:	18 f4       	brcc	.+6      	; 0x4ca <process_buttons+0x3a>
	{
		press_timer++;
     4c4:	8f 5f       	subi	r24, 0xFF	; 255
     4c6:	80 93 fd 00 	sts	0x00FD, r24
	}
	
	// Must after press_timer update
	long_press_event_mask = (press_timer == LONG_PRESS_DELAY) ? 0xFF : 0x00;
     4ca:	70 91 fd 00 	lds	r23, 0x00FD
     4ce:	7c 30       	cpi	r23, 0x0C	; 12
     4d0:	11 f4       	brne	.+4      	; 0x4d6 <process_buttons+0x46>
     4d2:	4f ef       	ldi	r20, 0xFF	; 255
     4d4:	01 c0       	rjmp	.+2      	; 0x4d8 <process_buttons+0x48>
     4d6:	40 e0       	ldi	r20, 0x00	; 0
			
	button_action_down = raw_current & raw_delayed_inv;
     4d8:	89 2f       	mov	r24, r25
     4da:	83 23       	and	r24, r19
     4dc:	80 93 f9 00 	sts	0x00F9, r24
			
	if (press_timer > REPEAT_DELAY)
     4e0:	77 30       	cpi	r23, 0x07	; 7
     4e2:	08 f0       	brcs	.+2      	; 0x4e6 <process_buttons+0x56>
		raw_delayed_inv |= 0xFF;
     4e4:	3f ef       	ldi	r19, 0xFF	; 255
	
	button_action_rep = raw_current & raw_delayed_inv;
     4e6:	39 23       	and	r19, r25
     4e8:	30 93 f8 00 	sts	0x00F8, r19
	
	button_action_up_short = raw_current_inv & raw_delayed & ~long_press_mask;
     4ec:	20 95       	com	r18
     4ee:	56 23       	and	r21, r22
     4f0:	25 23       	and	r18, r21
     4f2:	20 93 f7 00 	sts	0x00F7, r18
	//button_action_up_long  = raw_current_inv & raw_delayed & long_press_mask;
	button_action_long  = raw_current & long_press_event_mask;
     4f6:	49 23       	and	r20, r25
     4f8:	40 93 f6 00 	sts	0x00F6, r20
	
	// Compose button state
	composed_state = (button_action_down & (BD_MENU | BD_UP | BD_DOWN | BD_ROTFWD | BD_ROTREV | BD_HEATCTRL | BD_CYCLE));
     4fc:	87 7f       	andi	r24, 0xF7	; 247
     4fe:	90 e0       	ldi	r25, 0x00	; 0
	if (button_action_up_short & BD_MENU)
     500:	20 fd       	sbrc	r18, 0
		composed_state |= BS_MENU;
     502:	91 60       	ori	r25, 0x01	; 1
	//if (button_action_up_long & BD_MENU)
	if (button_action_long & BD_MENU)
     504:	40 fd       	sbrc	r20, 0
		composed_state |= BL_MENU;
     506:	92 60       	ori	r25, 0x02	; 2
	if (button_action_rep & BD_UP)
     508:	31 fd       	sbrc	r19, 1
		composed_state |= BR_UP;	
     50a:	94 60       	ori	r25, 0x04	; 4
	if (button_action_rep & BD_DOWN)
     50c:	32 fd       	sbrc	r19, 2
		composed_state |= BR_DOWN;
     50e:	98 60       	ori	r25, 0x08	; 8

	button_state = composed_state;
     510:	90 93 fb 00 	sts	0x00FB, r25
     514:	80 93 fa 00 	sts	0x00FA, r24
     518:	08 95       	ret

0000051a <processRollControl>:
int16_t dbg_PID_output;


// Function to control motor rotation
void processRollControl(void)
{	
     51a:	cf 93       	push	r28
//	static uint8_t beepMask = 0x00;
//	uint8_t nextBeepMask = 0xFF;
	static uint8_t force_rotate = 0;
	
	// Process auto power off control
	if (autoPowerOffState & AUTO_POFF_ACTIVE)
     51c:	80 91 fe 00 	lds	r24, 0x00FE
     520:	80 ff       	sbrs	r24, 0
     522:	0f c0       	rjmp	.+30     	; 0x542 <processRollControl+0x28>
	{
		stopCycleRolling(1);	
     524:	81 e0       	ldi	r24, 0x01	; 1
     526:	4b d8       	rcall	.-3946   	; 0xfffff5be <__eeprom_end+0xff7ef5b4>
		if (adc_celsius <= POFF_MOTOR_TRESHOLD)
     528:	80 91 57 01 	lds	r24, 0x0157
     52c:	90 91 58 01 	lds	r25, 0x0158
     530:	c3 97       	sbiw	r24, 0x33	; 51
     532:	08 f0       	brcs	.+2      	; 0x536 <processRollControl+0x1c>
     534:	5f c0       	rjmp	.+190    	; 0x5f4 <processRollControl+0xda>
		{
			force_rotate = ROLL_FWD;		// Default direction
     536:	81 e0       	ldi	r24, 0x01	; 1
     538:	80 93 00 01 	sts	0x0100, r24
			setMotorDirection(0);			// Stop the motor
     53c:	80 e0       	ldi	r24, 0x00	; 0
     53e:	1e d8       	rcall	.-4036   	; 0xfffff57c <__eeprom_end+0xff7ef572>
     540:	59 c0       	rjmp	.+178    	; 0x5f4 <processRollControl+0xda>
		}
	}
	else
	{
		// Control direction by buttons
		if (button_action_down & BD_ROTFWD)
     542:	80 91 f9 00 	lds	r24, 0x00F9
     546:	84 ff       	sbrs	r24, 4
     548:	04 c0       	rjmp	.+8      	; 0x552 <processRollControl+0x38>
		{
			setMotorDirection(ROLL_FWD);	
     54a:	81 e0       	ldi	r24, 0x01	; 1
     54c:	17 d8       	rcall	.-4050   	; 0xfffff57c <__eeprom_end+0xff7ef572>
			beepState |= 0x01;			// pressed FWD button
     54e:	c1 e0       	ldi	r28, 0x01	; 1
     550:	13 c0       	rjmp	.+38     	; 0x578 <processRollControl+0x5e>
		}		
		else if (button_action_down & BD_ROTREV)
     552:	85 ff       	sbrs	r24, 5
     554:	04 c0       	rjmp	.+8      	; 0x55e <processRollControl+0x44>
		{
			setMotorDirection(ROLL_REV);
     556:	82 e0       	ldi	r24, 0x02	; 2
     558:	11 d8       	rcall	.-4062   	; 0xfffff57c <__eeprom_end+0xff7ef572>
			beepState |= 0x02;			// pressed REV button
     55a:	c2 e0       	ldi	r28, 0x02	; 2
     55c:	0d c0       	rjmp	.+26     	; 0x578 <processRollControl+0x5e>
		}		
		else if (button_action_long & BD_CYCLE)
     55e:	80 91 f6 00 	lds	r24, 0x00F6
     562:	87 ff       	sbrs	r24, 7
     564:	04 c0       	rjmp	.+8      	; 0x56e <processRollControl+0x54>
		{
			stopCycleRolling(1);		// Reset points and disable CYCLE mode (if was enabled)
     566:	81 e0       	ldi	r24, 0x01	; 1
     568:	2a d8       	rcall	.-4012   	; 0xfffff5be <__eeprom_end+0xff7ef5b4>
			beepState |= 0x08;			// reset of points by long pressing of ROLL button
     56a:	c8 e0       	ldi	r28, 0x08	; 8
     56c:	05 c0       	rjmp	.+10     	; 0x578 <processRollControl+0x5e>
		}
		else if (force_rotate)
     56e:	80 91 00 01 	lds	r24, 0x0100
     572:	81 11       	cpse	r24, r1
		{
			// Auto power off mode was exited by pressing some other button, not direction buttons
			// Start roll, but do not beep in this case
			setMotorDirection(force_rotate);
     574:	03 d8       	rcall	.-4090   	; 0xfffff57c <__eeprom_end+0xff7ef572>


// Function to control motor rotation
void processRollControl(void)
{	
	uint8_t beepState = 0;
     576:	c0 e0       	ldi	r28, 0x00	; 0
		{
			// Auto power off mode was exited by pressing some other button, not direction buttons
			// Start roll, but do not beep in this case
			setMotorDirection(force_rotate);
		}
		force_rotate = 0;		// First normal pass will clear 
     578:	10 92 00 01 	sts	0x0100, r1
			
		if (button_action_up_short & BD_CYCLE)
     57c:	80 91 f7 00 	lds	r24, 0x00F7
     580:	87 ff       	sbrs	r24, 7
     582:	0e c0       	rjmp	.+28     	; 0x5a0 <processRollControl+0x86>
		{
			if (rollState & ROLL_CYCLE)
     584:	80 91 1a 01 	lds	r24, 0x011A
     588:	82 ff       	sbrs	r24, 2
     58a:	04 c0       	rjmp	.+8      	; 0x594 <processRollControl+0x7a>
			{
				stopCycleRolling(0);
     58c:	80 e0       	ldi	r24, 0x00	; 0
     58e:	17 d8       	rcall	.-4050   	; 0xfffff5be <__eeprom_end+0xff7ef5b4>
				beepState |= 0x20;		// stopped cycle
     590:	c0 62       	ori	r28, 0x20	; 32
     592:	06 c0       	rjmp	.+12     	; 0x5a0 <processRollControl+0x86>
			}
			else if (startCycleRolling())
     594:	50 d8       	rcall	.-3936   	; 0xfffff636 <__eeprom_end+0xff7ef62c>
     596:	88 23       	and	r24, r24
     598:	11 f0       	breq	.+4      	; 0x59e <processRollControl+0x84>
			{
				beepState |= 0x10;		// started cycle
     59a:	c0 61       	ori	r28, 0x10	; 16
     59c:	01 c0       	rjmp	.+2      	; 0x5a0 <processRollControl+0x86>
			}
			else
			{
				beepState |= 0x40;		// failed to start cycle
     59e:	c0 64       	ori	r28, 0x40	; 64
			}			
		}		
			
		if (rollState & ROLL_DIR_CHANGED)
     5a0:	80 91 1a 01 	lds	r24, 0x011A
     5a4:	85 ff       	sbrs	r24, 5
     5a6:	04 c0       	rjmp	.+8      	; 0x5b0 <processRollControl+0x96>
		{
			rollState &= ~ROLL_DIR_CHANGED;
     5a8:	8f 7d       	andi	r24, 0xDF	; 223
     5aa:	80 93 1a 01 	sts	0x011A, r24
			beepState |= 0x04;	
     5ae:	c4 60       	ori	r28, 0x04	; 4
		}
			
		if (rollState & CYCLE_ROLL_DONE)
     5b0:	80 91 1a 01 	lds	r24, 0x011A
     5b4:	84 ff       	sbrs	r24, 4
     5b6:	04 c0       	rjmp	.+8      	; 0x5c0 <processRollControl+0xa6>
		{
			rollState &= ~CYCLE_ROLL_DONE;
     5b8:	8f 7e       	andi	r24, 0xEF	; 239
     5ba:	80 93 1a 01 	sts	0x011A, r24
			beepState |= 0x80;	
     5be:	c0 68       	ori	r28, 0x80	; 128
		}		
			
		//-----------//
			
		if (beepState & 0x80)		// Roll cycle done
     5c0:	c7 ff       	sbrs	r28, 7
     5c2:	06 c0       	rjmp	.+12     	; 0x5d0 <processRollControl+0xb6>
		{
			SetBeeperFreq(1000);
     5c4:	88 ee       	ldi	r24, 0xE8	; 232
     5c6:	93 e0       	ldi	r25, 0x03	; 3
     5c8:	eb d9       	rcall	.-3114   	; 0xfffff9a0 <__eeprom_end+0xff7ef996>
			StartBeep(200);
     5ca:	88 ec       	ldi	r24, 0xC8	; 200
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	11 c0       	rjmp	.+34     	; 0x5f2 <processRollControl+0xd8>
		}		
		else if (beepState & 0x40)	// Roll cycle start fail
     5d0:	c6 ff       	sbrs	r28, 6
     5d2:	03 c0       	rjmp	.+6      	; 0x5da <processRollControl+0xc0>
		{
			SetBeeperFreq(500);
     5d4:	84 ef       	ldi	r24, 0xF4	; 244
     5d6:	91 e0       	ldi	r25, 0x01	; 1
     5d8:	09 c0       	rjmp	.+18     	; 0x5ec <processRollControl+0xd2>
			StartBeep(50);
		} 
		else if (beepState & 0x08)	// Reset points
     5da:	c3 ff       	sbrs	r28, 3
     5dc:	03 c0       	rjmp	.+6      	; 0x5e4 <processRollControl+0xca>
		{
			SetBeeperFreq(800);
     5de:	80 e2       	ldi	r24, 0x20	; 32
     5e0:	93 e0       	ldi	r25, 0x03	; 3
     5e2:	04 c0       	rjmp	.+8      	; 0x5ec <processRollControl+0xd2>
			StartBeep(50);
		}							// Other
		else if ( beepState & (0x01 | 0x02 | 0x10 | 0x20 | 0x04) )
     5e4:	c7 73       	andi	r28, 0x37	; 55
     5e6:	31 f0       	breq	.+12     	; 0x5f4 <processRollControl+0xda>
		{
			SetBeeperFreq(1000);
     5e8:	88 ee       	ldi	r24, 0xE8	; 232
     5ea:	93 e0       	ldi	r25, 0x03	; 3
     5ec:	d9 d9       	rcall	.-3150   	; 0xfffff9a0 <__eeprom_end+0xff7ef996>
			StartBeep(50);	
     5ee:	82 e3       	ldi	r24, 0x32	; 50
     5f0:	90 e0       	ldi	r25, 0x00	; 0
     5f2:	f6 d9       	rcall	.-3092   	; 0xfffff9e0 <__eeprom_end+0xff7ef9d6>
		}			
			
	}

	//----- LED indication ------//
	clearExtraLeds(LED_ROTFWD | LED_ROTREV);
     5f4:	80 e3       	ldi	r24, 0x30	; 48
     5f6:	ac d2       	rcall	.+1368   	; 0xb50 <clearExtraLeds>
	if (rollState & ROLL_FWD)
     5f8:	80 91 1a 01 	lds	r24, 0x011A
     5fc:	80 ff       	sbrs	r24, 0
     5fe:	02 c0       	rjmp	.+4      	; 0x604 <processRollControl+0xea>
		setExtraLeds(LED_ROTFWD);
     600:	80 e1       	ldi	r24, 0x10	; 16
     602:	03 c0       	rjmp	.+6      	; 0x60a <processRollControl+0xf0>
	else if (rollState & ROLL_REV)
     604:	81 ff       	sbrs	r24, 1
     606:	03 c0       	rjmp	.+6      	; 0x60e <processRollControl+0xf4>
		setExtraLeds(LED_ROTREV);
     608:	80 e2       	ldi	r24, 0x20	; 32
}
     60a:	cf 91       	pop	r28
	//----- LED indication ------//
	clearExtraLeds(LED_ROTFWD | LED_ROTREV);
	if (rollState & ROLL_FWD)
		setExtraLeds(LED_ROTFWD);
	else if (rollState & ROLL_REV)
		setExtraLeds(LED_ROTREV);
     60c:	9b c2       	rjmp	.+1334   	; 0xb44 <setExtraLeds>
}
     60e:	cf 91       	pop	r28
     610:	08 95       	ret

00000612 <processPID>:
	return pid_output;
}
*/

uint8_t processPID(uint16_t setPoint, uint16_t processValue)
{
     612:	0f 93       	push	r16
     614:	1f 93       	push	r17
     616:	cf 93       	push	r28
     618:	df 93       	push	r29
     61a:	fb 01       	movw	r30, r22
	int16_t error, p_term, i_term, d_term, temp;
	static uint16_t lastProcessValue;
	static int16_t integAcc = 0;
	
	error = setPoint - processValue;
     61c:	86 1b       	sub	r24, r22
     61e:	97 0b       	sbc	r25, r23
	
	
	//------ Calculate P term --------//
	
	if (error > 100 )
     620:	85 36       	cpi	r24, 0x65	; 101
     622:	91 05       	cpc	r25, r1
     624:	5c f4       	brge	.+22     	; 0x63c <processPID+0x2a>
	{
		p_term = 2000;	
	}
	else if (error < -100 )
     626:	8c 39       	cpi	r24, 0x9C	; 156
     628:	2f ef       	ldi	r18, 0xFF	; 255
     62a:	92 07       	cpc	r25, r18
     62c:	54 f0       	brlt	.+20     	; 0x642 <processPID+0x30>
	{
		p_term = -2000 ;	
	}
	else
	{
		p_term = error * Kp;
     62e:	2a e0       	ldi	r18, 0x0A	; 10
     630:	28 9f       	mul	r18, r24
     632:	e0 01       	movw	r28, r0
     634:	29 9f       	mul	r18, r25
     636:	d0 0d       	add	r29, r0
     638:	11 24       	eor	r1, r1
     63a:	05 c0       	rjmp	.+10     	; 0x646 <processPID+0x34>
	
	//------ Calculate P term --------//
	
	if (error > 100 )
	{
		p_term = 2000;	
     63c:	c0 ed       	ldi	r28, 0xD0	; 208
     63e:	d7 e0       	ldi	r29, 0x07	; 7
     640:	02 c0       	rjmp	.+4      	; 0x646 <processPID+0x34>
	}
	else if (error < -100 )
	{
		p_term = -2000 ;	
     642:	c0 e3       	ldi	r28, 0x30	; 48
     644:	d8 ef       	ldi	r29, 0xF8	; 248
		i_term = integAcc * Ki;
		//i_term /= 100;	//12_2
		i_term /= 50;
	*/
	
	integAcc += error;
     646:	20 91 01 01 	lds	r18, 0x0101
     64a:	30 91 02 01 	lds	r19, 0x0102
     64e:	28 0f       	add	r18, r24
     650:	39 1f       	adc	r19, r25
	
	if (integAcc > 1000 )
     652:	29 3e       	cpi	r18, 0xE9	; 233
     654:	83 e0       	ldi	r24, 0x03	; 3
     656:	38 07       	cpc	r19, r24
     658:	1c f0       	brlt	.+6      	; 0x660 <processPID+0x4e>
	{
		integAcc = 1000;
     65a:	88 ee       	ldi	r24, 0xE8	; 232
     65c:	93 e0       	ldi	r25, 0x03	; 3
     65e:	0b c0       	rjmp	.+22     	; 0x676 <processPID+0x64>
	}
	else if (integAcc < -1000)
     660:	28 31       	cpi	r18, 0x18	; 24
     662:	8c ef       	ldi	r24, 0xFC	; 252
     664:	38 07       	cpc	r19, r24
     666:	2c f0       	brlt	.+10     	; 0x672 <processPID+0x60>
		i_term = integAcc * Ki;
		//i_term /= 100;	//12_2
		i_term /= 50;
	*/
	
	integAcc += error;
     668:	30 93 02 01 	sts	0x0102, r19
     66c:	20 93 01 01 	sts	0x0101, r18
     670:	06 c0       	rjmp	.+12     	; 0x67e <processPID+0x6c>
	{
		integAcc = 1000;
	}
	else if (integAcc < -1000)
	{
		integAcc = -1000;
     672:	88 e1       	ldi	r24, 0x18	; 24
     674:	9c ef       	ldi	r25, 0xFC	; 252
     676:	90 93 02 01 	sts	0x0102, r25
     67a:	80 93 01 01 	sts	0x0101, r24
	}
	i_term = integAcc * Ki;
     67e:	20 91 01 01 	lds	r18, 0x0101
     682:	30 91 02 01 	lds	r19, 0x0102
     686:	45 e0       	ldi	r20, 0x05	; 5
     688:	42 9f       	mul	r20, r18
     68a:	c0 01       	movw	r24, r0
     68c:	43 9f       	mul	r20, r19
     68e:	90 0d       	add	r25, r0
     690:	11 24       	eor	r1, r1
	i_term /= 20;
     692:	64 e1       	ldi	r22, 0x14	; 20
     694:	70 e0       	ldi	r23, 0x00	; 0
     696:	27 da       	rcall	.-2994   	; 0xfffffae6 <__eeprom_end+0xff7efadc>
     698:	8b 01       	movw	r16, r22
	
	
	//------ Calculate D term --------//
	lastProcessValue = ringBufDterm.summ;
     69a:	80 91 8d 00 	lds	r24, 0x008D
     69e:	90 91 8e 00 	lds	r25, 0x008E
     6a2:	90 93 04 01 	sts	0x0104, r25
     6a6:	80 93 03 01 	sts	0x0103, r24
	addToRingU16(&ringBufDterm, processValue);
     6aa:	bf 01       	movw	r22, r30
     6ac:	8a e8       	ldi	r24, 0x8A	; 138
     6ae:	90 e0       	ldi	r25, 0x00	; 0
     6b0:	3b de       	rcall	.-906    	; 0x328 <addToRingU16>
	processValue = ringBufDterm.summ;
	d_term = Kd * ((int16_t)(lastProcessValue - processValue));
     6b2:	80 91 03 01 	lds	r24, 0x0103
     6b6:	90 91 04 01 	lds	r25, 0x0104
     6ba:	20 91 8d 00 	lds	r18, 0x008D
     6be:	30 91 8e 00 	lds	r19, 0x008E
     6c2:	82 1b       	sub	r24, r18
     6c4:	93 0b       	sbc	r25, r19
     6c6:	40 e5       	ldi	r20, 0x50	; 80
     6c8:	48 9f       	mul	r20, r24
     6ca:	90 01       	movw	r18, r0
     6cc:	49 9f       	mul	r20, r25
     6ce:	30 0d       	add	r19, r0
     6d0:	11 24       	eor	r1, r1

	
	//--------- Summ terms -----------//
	temp = (p_term + i_term + d_term) / SCALING_FACTOR;
     6d2:	ce 01       	movw	r24, r28
     6d4:	80 0f       	add	r24, r16
     6d6:	91 1f       	adc	r25, r17
     6d8:	82 0f       	add	r24, r18
     6da:	93 1f       	adc	r25, r19
     6dc:	65 e0       	ldi	r22, 0x05	; 5
     6de:	70 e0       	ldi	r23, 0x00	; 0
     6e0:	02 da       	rcall	.-3068   	; 0xfffffae6 <__eeprom_end+0xff7efadc>
     6e2:	cb 01       	movw	r24, r22
     6e4:	77 ff       	sbrs	r23, 7
     6e6:	02 c0       	rjmp	.+4      	; 0x6ec <processPID+0xda>
     6e8:	80 e0       	ldi	r24, 0x00	; 0
     6ea:	90 e0       	ldi	r25, 0x00	; 0
     6ec:	85 36       	cpi	r24, 0x65	; 101
     6ee:	91 05       	cpc	r25, r1
     6f0:	14 f0       	brlt	.+4      	; 0x6f6 <processPID+0xe4>
     6f2:	84 e6       	ldi	r24, 0x64	; 100
     6f4:	90 e0       	ldi	r25, 0x00	; 0
		temp = 0;
	}
	
	
	//------- Debug --------//
	dbg_PID_p_term = p_term;
     6f6:	d0 93 8f 01 	sts	0x018F, r29
     6fa:	c0 93 8e 01 	sts	0x018E, r28
	dbg_PID_d_term = d_term;
     6fe:	30 93 9d 01 	sts	0x019D, r19
     702:	20 93 9c 01 	sts	0x019C, r18
	dbg_PID_i_term = i_term;
     706:	10 93 93 01 	sts	0x0193, r17
     70a:	00 93 92 01 	sts	0x0192, r16
	dbg_PID_output = temp;
     70e:	90 93 8d 01 	sts	0x018D, r25
     712:	80 93 8c 01 	sts	0x018C, r24
	
	
	return temp;
	
}
     716:	df 91       	pop	r29
     718:	cf 91       	pop	r28
     71a:	1f 91       	pop	r17
     71c:	0f 91       	pop	r16
     71e:	08 95       	ret

00000720 <processHeaterControl>:
	processPID(0,adc_filtered);			// oversampled PID control
}


void processHeaterControl(void)
{
     720:	0f 93       	push	r16
     722:	1f 93       	push	r17
     724:	cf 93       	push	r28
     726:	df 93       	push	r29
	uint16_t pid_output;
	
	// TODO: check code size with local copy of heaterState
	
	// Process heater ON/OFF control by button
	if (button_state & BD_HEATCTRL)
     728:	80 91 fa 00 	lds	r24, 0x00FA
     72c:	86 ff       	sbrs	r24, 6
     72e:	0b c0       	rjmp	.+22     	; 0x746 <processHeaterControl+0x26>
	{
		heaterState ^= HEATER_ENABLED;
     730:	80 91 ff 00 	lds	r24, 0x00FF
     734:	91 e0       	ldi	r25, 0x01	; 1
     736:	89 27       	eor	r24, r25
     738:	80 93 ff 00 	sts	0x00FF, r24
		// Force update heater power
		sys_timers.flags |= UPDATE_PID;		// Not very good approach if UPDATE_PID flag is used somewhere else
     73c:	80 91 a2 00 	lds	r24, 0x00A2
     740:	80 64       	ori	r24, 0x40	; 64
     742:	80 93 a2 00 	sts	0x00A2, r24
	}
	
	// Process auto power off control
	if (autoPowerOffState & AUTO_POFF_ACTIVE)
     746:	80 91 fe 00 	lds	r24, 0x00FE
     74a:	80 ff       	sbrs	r24, 0
     74c:	05 c0       	rjmp	.+10     	; 0x758 <processHeaterControl+0x38>
	{
		heaterState &= ~HEATER_ENABLED;
     74e:	80 91 ff 00 	lds	r24, 0x00FF
     752:	8e 7f       	andi	r24, 0xFE	; 254
     754:	80 93 ff 00 	sts	0x00FF, r24
	}		
	
	// Check if heater control should be updated
	// PID call interval is a multiple of Celsius update interval. 
	if (sys_timers.flags & UPDATE_PID)
     758:	80 91 a2 00 	lds	r24, 0x00A2
     75c:	86 ff       	sbrs	r24, 6
     75e:	3a c0       	rjmp	.+116    	; 0x7d4 <processHeaterControl+0xb4>
	{
		// Convert temperature setup to equal ADC value
		set_value_adc = conv_Celsius_to_ADC(p.setup_temp_value);					
     760:	80 91 88 01 	lds	r24, 0x0188
     764:	90 e0       	ldi	r25, 0x00	; 0
     766:	37 dd       	rcall	.-1426   	; 0x1d6 <conv_Celsius_to_ADC>

		setPoint = set_value_adc * 5;
     768:	25 e0       	ldi	r18, 0x05	; 5
     76a:	28 9f       	mul	r18, r24
     76c:	e0 01       	movw	r28, r0
     76e:	29 9f       	mul	r18, r25
     770:	d0 0d       	add	r29, r0
     772:	11 24       	eor	r1, r1
		setPoint >>= 1;
     774:	d6 95       	lsr	r29
     776:	c7 95       	ror	r28
		processValue = adc_filtered >> 1;	// normal PID control
     778:	00 91 29 01 	lds	r16, 0x0129
     77c:	10 91 2a 01 	lds	r17, 0x012A
     780:	16 95       	lsr	r17
     782:	07 95       	ror	r16
		//setPoint = set_value_adc * 5;
		//processValue = adc_filtered;		// oversampled PID control
		
		// Process PID
		pid_output = processPID(setPoint, processValue);		
     784:	b8 01       	movw	r22, r16
     786:	ce 01       	movw	r24, r28
     788:	44 df       	rcall	.-376    	; 0x612 <processPID>
		
		// DSM test only
		//pid_output = (p.setup_temp_value < 50) ? 0 : p.setup_temp_value - 50;
					
		// If heater is disabled, override output
		if (!(heaterState & HEATER_ENABLED))
     78a:	90 91 ff 00 	lds	r25, 0x00FF
     78e:	90 ff       	sbrs	r25, 0
     790:	02 c0       	rjmp	.+4      	; 0x796 <processHeaterControl+0x76>
		processValue = adc_filtered >> 1;	// normal PID control
		//setPoint = set_value_adc * 5;
		//processValue = adc_filtered;		// oversampled PID control
		
		// Process PID
		pid_output = processPID(setPoint, processValue);		
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	02 c0       	rjmp	.+4      	; 0x79a <processHeaterControl+0x7a>
		// DSM test only
		//pid_output = (p.setup_temp_value < 50) ? 0 : p.setup_temp_value - 50;
					
		// If heater is disabled, override output
		if (!(heaterState & HEATER_ENABLED))
			pid_output = 0;
     796:	80 e0       	ldi	r24, 0x00	; 0
     798:	90 e0       	ldi	r25, 0x00	; 0
			
		// Set new heater power value	
		setHeaterPower(pid_output);	
     79a:	e3 d6       	rcall	.+3526   	; 0x1562 <setHeaterPower>
		
		//------- Debug --------//		
		// PID input:
		dbg_SetPointCelsius = (heaterState & HEATER_ENABLED) ? p.setup_temp_value : 0;
     79c:	80 91 ff 00 	lds	r24, 0x00FF
     7a0:	98 2f       	mov	r25, r24
     7a2:	91 70       	andi	r25, 0x01	; 1
     7a4:	80 ff       	sbrs	r24, 0
     7a6:	03 c0       	rjmp	.+6      	; 0x7ae <processHeaterControl+0x8e>
     7a8:	80 91 88 01 	lds	r24, 0x0188
     7ac:	01 c0       	rjmp	.+2      	; 0x7b0 <processHeaterControl+0x90>
     7ae:	80 e0       	ldi	r24, 0x00	; 0
     7b0:	80 93 81 01 	sts	0x0181, r24
		dbg_SetPointPID = (heaterState & HEATER_ENABLED) ? setPoint : 0;
     7b4:	91 11       	cpse	r25, r1
     7b6:	02 c0       	rjmp	.+4      	; 0x7bc <processHeaterControl+0x9c>
     7b8:	c0 e0       	ldi	r28, 0x00	; 0
     7ba:	d0 e0       	ldi	r29, 0x00	; 0
     7bc:	d0 93 9f 01 	sts	0x019F, r29
     7c0:	c0 93 9e 01 	sts	0x019E, r28
		dbg_RealTempCelsius = adc_filtered;
     7c4:	80 91 29 01 	lds	r24, 0x0129
     7c8:	80 93 a0 01 	sts	0x01A0, r24
		dbg_RealTempPID = processValue;
     7cc:	10 93 91 01 	sts	0x0191, r17
     7d0:	00 93 90 01 	sts	0x0190, r16
		
	}	
		
	
	//----- LED indication ------//
	if (heaterState & HEATER_ENABLED)
     7d4:	80 91 ff 00 	lds	r24, 0x00FF
     7d8:	80 ff       	sbrs	r24, 0
     7da:	06 c0       	rjmp	.+12     	; 0x7e8 <processHeaterControl+0xc8>
		setExtraLeds(LED_HEATER);
     7dc:	80 e4       	ldi	r24, 0x40	; 64
	else
		clearExtraLeds(LED_HEATER);
	
}
     7de:	df 91       	pop	r29
     7e0:	cf 91       	pop	r28
     7e2:	1f 91       	pop	r17
     7e4:	0f 91       	pop	r16
	}	
		
	
	//----- LED indication ------//
	if (heaterState & HEATER_ENABLED)
		setExtraLeds(LED_HEATER);
     7e6:	ae c1       	rjmp	.+860    	; 0xb44 <setExtraLeds>
	else
		clearExtraLeds(LED_HEATER);
     7e8:	80 e4       	ldi	r24, 0x40	; 64
	
}
     7ea:	df 91       	pop	r29
     7ec:	cf 91       	pop	r28
     7ee:	1f 91       	pop	r17
     7f0:	0f 91       	pop	r16
	
	//----- LED indication ------//
	if (heaterState & HEATER_ENABLED)
		setExtraLeds(LED_HEATER);
	else
		clearExtraLeds(LED_HEATER);
     7f2:	ae c1       	rjmp	.+860    	; 0xb50 <clearExtraLeds>

000007f4 <heaterInit>:


void heaterInit(void)
{
	//processPID(0,adc_normalized);
	processPID(0,adc_filtered);			// oversampled PID control
     7f4:	60 91 29 01 	lds	r22, 0x0129
     7f8:	70 91 2a 01 	lds	r23, 0x012A
     7fc:	80 e0       	ldi	r24, 0x00	; 0
     7fe:	90 e0       	ldi	r25, 0x00	; 0
     800:	08 cf       	rjmp	.-496    	; 0x612 <processPID>

00000802 <processHeaterAlerts>:

// Function to process all heater alerts:
//	- getting near to desired temperature
//	- continuous heating when disabled
void processHeaterAlerts(void)
{
     802:	cf 93       	push	r28
     804:	df 93       	push	r29
	static uint8_t tempAlertRange = TEMP_ALERT_RANGE;
	static uint16_t refCapturedTemp = 0xFFFF;
	uint16_t currentTemperature = adc_celsius;
     806:	c0 91 57 01 	lds	r28, 0x0157
     80a:	d0 91 58 01 	lds	r29, 0x0158
	
	
	// Indicate reaching of desired temperature
	if ( (currentTemperature > p.setup_temp_value - tempAlertRange) && (currentTemperature < p.setup_temp_value + tempAlertRange) )
     80e:	20 91 88 01 	lds	r18, 0x0188
     812:	30 e0       	ldi	r19, 0x00	; 0
     814:	60 91 93 00 	lds	r22, 0x0093
     818:	86 2f       	mov	r24, r22
     81a:	90 e0       	ldi	r25, 0x00	; 0
     81c:	a9 01       	movw	r20, r18
     81e:	48 1b       	sub	r20, r24
     820:	59 0b       	sbc	r21, r25
     822:	4c 17       	cp	r20, r28
     824:	5d 07       	cpc	r21, r29
     826:	98 f4       	brcc	.+38     	; 0x84e <processHeaterAlerts+0x4c>
     828:	82 0f       	add	r24, r18
     82a:	93 1f       	adc	r25, r19
     82c:	c8 17       	cp	r28, r24
     82e:	d9 07       	cpc	r29, r25
     830:	70 f4       	brcc	.+28     	; 0x84e <processHeaterAlerts+0x4c>
	{
		if ((tempAlertRange == TEMP_ALERT_RANGE) && (heaterState & HEATER_ENABLED))
     832:	65 30       	cpi	r22, 0x05	; 5
     834:	51 f4       	brne	.+20     	; 0x84a <processHeaterAlerts+0x48>
     836:	80 91 ff 00 	lds	r24, 0x00FF
     83a:	80 ff       	sbrs	r24, 0
     83c:	06 c0       	rjmp	.+12     	; 0x84a <processHeaterAlerts+0x48>
		{
			SetBeeperFreq(1000);
     83e:	88 ee       	ldi	r24, 0xE8	; 232
     840:	93 e0       	ldi	r25, 0x03	; 3
     842:	ae d8       	rcall	.-3748   	; 0xfffff9a0 <__eeprom_end+0xff7ef996>
			StartBeep(400);
     844:	80 e9       	ldi	r24, 0x90	; 144
     846:	91 e0       	ldi	r25, 0x01	; 1
     848:	cb d8       	rcall	.-3690   	; 0xfffff9e0 <__eeprom_end+0xff7ef9d6>
		}
		// Add some hysteresis
		tempAlertRange = TEMP_ALERT_RANGE + TEMP_ALERT_HYST;
     84a:	8a e0       	ldi	r24, 0x0A	; 10
     84c:	01 c0       	rjmp	.+2      	; 0x850 <processHeaterAlerts+0x4e>
	}			
	else
	{
		tempAlertRange = TEMP_ALERT_RANGE;
     84e:	85 e0       	ldi	r24, 0x05	; 5
     850:	80 93 93 00 	sts	0x0093, r24
	// Growing temperature with heater disabled alert 
	// This alert is done regardless of global sound enable
	// A false triggering may occur if ambient temperature grows.
	// To reset the warning in this case just turn on heater for at least one systimer tick (50ms)
	// If heater is enabled, it is implied that user controls heating process
	if (heaterState & (HEATER_ENABLED | CALIBRATION_ACTIVE))
     854:	80 91 ff 00 	lds	r24, 0x00FF
     858:	83 70       	andi	r24, 0x03	; 3
     85a:	09 f0       	breq	.+2      	; 0x85e <processHeaterAlerts+0x5c>
     85c:	0b c0       	rjmp	.+22     	; 0x874 <processHeaterAlerts+0x72>
	{
		// Heater enabled, just save current temperature as reference
		// Same if calibration in progress, even if heater is disabled
		refCapturedTemp = currentTemperature;
	}
	else if (sys_timers.flags & EXPIRED_10SEC)
     85e:	80 91 a2 00 	lds	r24, 0x00A2
     862:	81 ff       	sbrs	r24, 1
     864:	19 c0       	rjmp	.+50     	; 0x898 <processHeaterAlerts+0x96>
	{
		// Heater disabled. If temperature is falling,
		if (currentTemperature < refCapturedTemp)
     866:	80 91 94 00 	lds	r24, 0x0094
     86a:	90 91 95 00 	lds	r25, 0x0095
     86e:	c8 17       	cp	r28, r24
     870:	d9 07       	cpc	r29, r25
     872:	28 f4       	brcc	.+10     	; 0x87e <processHeaterAlerts+0x7c>
		{
			// save current temperature as reference
			refCapturedTemp = currentTemperature;
     874:	d0 93 95 00 	sts	0x0095, r29
     878:	c0 93 94 00 	sts	0x0094, r28
     87c:	0d c0       	rjmp	.+26     	; 0x898 <processHeaterAlerts+0x96>
		else
		{
			// Heater is disabled. If current temperature is higher than reference + some safe interval,
			// there might be a hardware failure - short circuit, etc
			// BEEP like a devil  }:-(
			if (currentTemperature >= (refCapturedTemp + SAFE_TEMP_INTERVAL))
     87e:	0f 96       	adiw	r24, 0x0f	; 15
     880:	c8 17       	cp	r28, r24
     882:	d9 07       	cpc	r29, r25
     884:	48 f0       	brcs	.+18     	; 0x898 <processHeaterAlerts+0x96>
			{
				// Enable beeper output regardless of menu setting
				OverrideSoundDisable();
     886:	be d8       	rcall	.-3716   	; 0xfffffa04 <__eeprom_end+0xff7ef9fa>
				SetBeeperFreq(1500);
     888:	8c ed       	ldi	r24, 0xDC	; 220
     88a:	95 e0       	ldi	r25, 0x05	; 5
     88c:	89 d8       	rcall	.-3822   	; 0xfffff9a0 <__eeprom_end+0xff7ef996>
				StartBeep(5000);	
     88e:	88 e8       	ldi	r24, 0x88	; 136
     890:	93 e1       	ldi	r25, 0x13	; 19
			}
		}
	}
	

}
     892:	df 91       	pop	r29
     894:	cf 91       	pop	r28
			if (currentTemperature >= (refCapturedTemp + SAFE_TEMP_INTERVAL))
			{
				// Enable beeper output regardless of menu setting
				OverrideSoundDisable();
				SetBeeperFreq(1500);
				StartBeep(5000);	
     896:	a4 c8       	rjmp	.-3768   	; 0xfffff9e0 <__eeprom_end+0xff7ef9d6>
			}
		}
	}
	

}
     898:	df 91       	pop	r29
     89a:	cf 91       	pop	r28
     89c:	08 95       	ret

0000089e <restoreGlobalParams>:


void restoreGlobalParams(void)
{
	eeprom_read_block(&p,&eeGlobalParams,sizeof(eeGlobalParams));
     89e:	44 e0       	ldi	r20, 0x04	; 4
     8a0:	50 e0       	ldi	r21, 0x00	; 0
     8a2:	66 e0       	ldi	r22, 0x06	; 6
     8a4:	70 e0       	ldi	r23, 0x00	; 0
     8a6:	88 e8       	ldi	r24, 0x88	; 136
     8a8:	91 e0       	ldi	r25, 0x01	; 1
     8aa:	89 d9       	rcall	.-3310   	; 0xfffffbbe <__eeprom_end+0xff7efbb4>
	eeprom_read_block(&cp,&eeCalibrationParams,sizeof(eeCalibrationParams));
     8ac:	46 e0       	ldi	r20, 0x06	; 6
     8ae:	50 e0       	ldi	r21, 0x00	; 0
     8b0:	60 e0       	ldi	r22, 0x00	; 0
     8b2:	70 e0       	ldi	r23, 0x00	; 0
     8b4:	82 e8       	ldi	r24, 0x82	; 130
     8b6:	91 e0       	ldi	r25, 0x01	; 1
     8b8:	82 c9       	rjmp	.-3324   	; 0xfffffbbe <__eeprom_end+0xff7efbb4>

000008ba <saveCalibrationToEEPROM>:
}


void saveCalibrationToEEPROM(void)
{
	eeprom_update_block(&cp,&eeCalibrationParams,sizeof(eeCalibrationParams));	
     8ba:	46 e0       	ldi	r20, 0x06	; 6
     8bc:	50 e0       	ldi	r21, 0x00	; 0
     8be:	60 e0       	ldi	r22, 0x00	; 0
     8c0:	70 e0       	ldi	r23, 0x00	; 0
     8c2:	82 e8       	ldi	r24, 0x82	; 130
     8c4:	91 e0       	ldi	r25, 0x01	; 1
     8c6:	8b c9       	rjmp	.-3306   	; 0xfffffbde <__eeprom_end+0xff7efbd4>

000008c8 <exitPowerOff>:

void exitPowerOff(void)
{

	// Put all ports into HI-Z
	DDRB = 0x00;
     8c8:	17 ba       	out	0x17, r1	; 23
	PORTB = 0x00;
     8ca:	18 ba       	out	0x18, r1	; 24
	DDRC = 0x00;
     8cc:	14 ba       	out	0x14, r1	; 20
	PORTC = 0x00;
     8ce:	15 ba       	out	0x15, r1	; 21
	DDRD = 0x00;
     8d0:	11 ba       	out	0x11, r1	; 17
	PORTD = 0x00;
     8d2:	12 ba       	out	0x12, r1	; 18
	
	// Disable all interrupts
	cli();
     8d4:	f8 94       	cli
	
	// Save parameters to EEPROM
	eeprom_update_block(&p,&eeGlobalParams,sizeof(eeGlobalParams));	
     8d6:	44 e0       	ldi	r20, 0x04	; 4
     8d8:	50 e0       	ldi	r21, 0x00	; 0
     8da:	66 e0       	ldi	r22, 0x06	; 6
     8dc:	70 e0       	ldi	r23, 0x00	; 0
     8de:	88 e8       	ldi	r24, 0x88	; 136
     8e0:	91 e0       	ldi	r25, 0x01	; 1
     8e2:	7d d9       	rcall	.-3334   	; 0xfffffbde <__eeprom_end+0xff7efbd4>
     8e4:	ff cf       	rjmp	.-2      	; 0x8e4 <exitPowerOff+0x1c>

000008e6 <decode_led_char>:
//---------------------------------------------//
// Decodes normal string literal to the
//	7-segment representation
//---------------------------------------------//
static uint8_t decode_led_char(char c)
{
     8e6:	20 e0       	ldi	r18, 0x00	; 0
     8e8:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t i;
	encode_7seg_pair encode_pair;
	for (i = 0; i < sizeof(led_encode_table)/sizeof(encode_7seg_pair); i++  )
	{
		encode_pair.code = pgm_read_byte(&led_encode_table[i].code);
     8ea:	a9 01       	movw	r20, r18
     8ec:	44 0f       	add	r20, r20
     8ee:	55 1f       	adc	r21, r21
     8f0:	fa 01       	movw	r30, r20
     8f2:	ea 5d       	subi	r30, 0xDA	; 218
     8f4:	ff 4f       	sbci	r31, 0xFF	; 255
     8f6:	e4 91       	lpm	r30, Z
		if (encode_pair.code == c)
     8f8:	e8 13       	cpse	r30, r24
     8fa:	05 c0       	rjmp	.+10     	; 0x906 <decode_led_char+0x20>
		{
			i = pgm_read_byte(&led_encode_table[i].segdata);
     8fc:	fa 01       	movw	r30, r20
     8fe:	e9 5d       	subi	r30, 0xD9	; 217
     900:	ff 4f       	sbci	r31, 0xFF	; 255
     902:	84 91       	lpm	r24, Z
     904:	08 95       	ret
     906:	2f 5f       	subi	r18, 0xFF	; 255
     908:	3f 4f       	sbci	r19, 0xFF	; 255
//---------------------------------------------//
static uint8_t decode_led_char(char c)
{
	uint8_t i;
	encode_7seg_pair encode_pair;
	for (i = 0; i < sizeof(led_encode_table)/sizeof(encode_7seg_pair); i++  )
     90a:	2a 31       	cpi	r18, 0x1A	; 26
     90c:	31 05       	cpc	r19, r1
     90e:	69 f7       	brne	.-38     	; 0x8ea <decode_led_char+0x4>
			return i;
		}		
	}			
	// No item was found - return argument value
	return  c;
}
     910:	08 95       	ret

00000912 <wrap_led_buffer_index>:
//---------------------------------------------//
// Ensures that index is inside the buffer
// -128 <= index <= 127
//---------------------------------------------//
static uint8_t wrap_led_buffer_index(int8_t buf_index)
{
     912:	28 2f       	mov	r18, r24
	uint8_t new_index_u;
	new_index_u = (uint8_t) ((buf_index < 0) ? -buf_index : buf_index);
     914:	87 fd       	sbrc	r24, 7
     916:	81 95       	neg	r24
	if (new_index_u >= LED_BUFFER_LENGTH)
     918:	8e 30       	cpi	r24, 0x0E	; 14
     91a:	18 f0       	brcs	.+6      	; 0x922 <wrap_led_buffer_index+0x10>
		new_index_u = new_index_u % LED_BUFFER_LENGTH;
     91c:	6e e0       	ldi	r22, 0x0E	; 14
     91e:	c3 d8       	rcall	.-3706   	; 0xfffffaa6 <__eeprom_end+0xff7efa9c>
     920:	89 2f       	mov	r24, r25
	new_index_u = ((buf_index >= 0) || (new_index_u == 0)) ? new_index_u :  LED_BUFFER_LENGTH - new_index_u ;
     922:	27 ff       	sbrs	r18, 7
     924:	05 c0       	rjmp	.+10     	; 0x930 <wrap_led_buffer_index+0x1e>
     926:	88 23       	and	r24, r24
     928:	19 f0       	breq	.+6      	; 0x930 <wrap_led_buffer_index+0x1e>
     92a:	9e e0       	ldi	r25, 0x0E	; 14
     92c:	98 1b       	sub	r25, r24
     92e:	89 2f       	mov	r24, r25
	return new_index_u;
}
     930:	08 95       	ret

00000932 <processLedIndicator>:
// Call this function N times per sec to get N/NUM_DIGITS_TOTAL display update rate, where
// NUM_DIGITS_TOTAL is number_of_digits_of_LED_display if no extra LEDs are used or
// (number_of_digits_of_LED_display + 1) otherwise.
//---------------------------------------------//
void processLedIndicator()
{
     932:	cf 93       	push	r28
	disable_led_segments();
	#endif
	
	
	// Perform regular shift
	led_clock_pulse(!LED_DIGIT_ACT_LVL);
     934:	81 e0       	ldi	r24, 0x01	; 1
     936:	13 d1       	rcall	.+550    	; 0xb5e <led_clock_pulse>
	
	switch (wActivePos)
     938:	c0 91 06 01 	lds	r28, 0x0106
     93c:	cc 23       	and	r28, r28
     93e:	19 f0       	breq	.+6      	; 0x946 <processLedIndicator+0x14>
     940:	c6 30       	cpi	r28, 0x06	; 6
     942:	d1 f5       	brne	.+116    	; 0x9b8 <processLedIndicator+0x86>
     944:	11 c0       	rjmp	.+34     	; 0x968 <processLedIndicator+0x36>
	{
	case 0:
		// Get buttons
		#ifndef CLEAN_OPERATION
		disable_led_segments();
     946:	37 d1       	rcall	.+622    	; 0xbb6 <disable_led_segments>
		#endif
		enable_led_segments_pullups();
     948:	28 d1       	rcall	.+592    	; 0xb9a <enable_led_segments_pullups>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     94a:	85 e3       	ldi	r24, 0x35	; 53
     94c:	8a 95       	dec	r24
     94e:	f1 f7       	brne	.-4      	; 0x94c <processLedIndicator+0x1a>
     950:	00 00       	nop
		_delay_us(PULLUP_DELAY_US);
		capture_button_state();
     952:	38 d1       	rcall	.+624    	; 0xbc4 <capture_button_state>
		#ifndef CLEAN_OPERATION
		enable_led_segments();
     954:	29 d1       	rcall	.+594    	; 0xba8 <enable_led_segments>
		#endif
		// Start new cycle with active digit level
		led_clock_pulse(LED_DIGIT_ACT_LVL);
     956:	80 e0       	ldi	r24, 0x00	; 0
     958:	02 d1       	rcall	.+516    	; 0xb5e <led_clock_pulse>
		// Always start new cycle from specified buffer start position
		bufActivePos = wStartPos;
     95a:	80 91 a2 01 	lds	r24, 0x01A2
     95e:	80 93 05 01 	sts	0x0105, r24
		next_wActivePos = wActivePos + 1;
     962:	c0 91 06 01 	lds	r28, 0x0106
     966:	28 c0       	rjmp	.+80     	; 0x9b8 <processLedIndicator+0x86>
//---------------------------------------------//
// Performs window shifting
//---------------------------------------------//
static void processWindowShifter(void)
{
	if (shifterState == LED_SHIFT_DONE)
     968:	80 91 a3 01 	lds	r24, 0x01A3
     96c:	81 11       	cpse	r24, r1
     96e:	01 c0       	rjmp	.+2      	; 0x972 <processLedIndicator+0x40>
     970:	1b c0       	rjmp	.+54     	; 0x9a8 <processLedIndicator+0x76>
		return;
	
	// Process shift timer
	processSoftTimer8b(&shiftTimer);	
     972:	87 e0       	ldi	r24, 0x07	; 7
     974:	91 e0       	ldi	r25, 0x01	; 1
     976:	7e d7       	rcall	.+3836   	; 0x1874 <processSoftTimer8b>
	
	if (shiftTimer.FTop)
     978:	80 91 07 01 	lds	r24, 0x0107
     97c:	85 ff       	sbrs	r24, 5
     97e:	14 c0       	rjmp	.+40     	; 0x9a8 <processLedIndicator+0x76>
	{
		// Check if finished
		if (wStartPos == bufStartPos)	
     980:	80 91 a2 01 	lds	r24, 0x01A2
     984:	90 91 a4 01 	lds	r25, 0x01A4
     988:	89 13       	cpse	r24, r25
     98a:	03 c0       	rjmp	.+6      	; 0x992 <processLedIndicator+0x60>
		{
			// Update state
			shifterState = LED_SHIFT_DONE;
     98c:	10 92 a3 01 	sts	0x01A3, r1
     990:	0b c0       	rjmp	.+22     	; 0x9a8 <processLedIndicator+0x76>
		}
		else if (shifterState == LED_SHIFT_RIGHT)
     992:	90 91 a3 01 	lds	r25, 0x01A3
     996:	92 30       	cpi	r25, 0x02	; 2
     998:	49 f4       	brne	.+18     	; 0x9ac <processLedIndicator+0x7a>
// Increments index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t inc_buffer_position(uint8_t position)
{
	return (position >= LED_BUFFER_LENGTH - 1) ? 0 : position + 1;
     99a:	8d 30       	cpi	r24, 0x0D	; 13
     99c:	10 f4       	brcc	.+4      	; 0x9a2 <processLedIndicator+0x70>
     99e:	8f 5f       	subi	r24, 0xFF	; 255
     9a0:	01 c0       	rjmp	.+2      	; 0x9a4 <processLedIndicator+0x72>
     9a2:	80 e0       	ldi	r24, 0x00	; 0
			// Update state
			shifterState = LED_SHIFT_DONE;
		}
		else if (shifterState == LED_SHIFT_RIGHT)
		{
			wStartPos = inc_buffer_position(wStartPos);	
     9a4:	80 93 a2 01 	sts	0x01A2, r24
		// Always start new cycle from specified buffer start position
		bufActivePos = wStartPos;
		next_wActivePos = wActivePos + 1;
		break;
	case NUM_DIGITS_TOTAL-1:
		next_wActivePos = 0;
     9a8:	c0 e0       	ldi	r28, 0x00	; 0
     9aa:	07 c0       	rjmp	.+14     	; 0x9ba <processLedIndicator+0x88>
// Decrements index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t dec_buffer_position(uint8_t position)
{
	return (position == 0) ? LED_BUFFER_LENGTH - 1 : position - 1;
     9ac:	88 23       	and	r24, r24
     9ae:	11 f0       	breq	.+4      	; 0x9b4 <processLedIndicator+0x82>
     9b0:	81 50       	subi	r24, 0x01	; 1
     9b2:	f8 cf       	rjmp	.-16     	; 0x9a4 <processLedIndicator+0x72>
     9b4:	8d e0       	ldi	r24, 0x0D	; 13
     9b6:	f6 cf       	rjmp	.-20     	; 0x9a4 <processLedIndicator+0x72>
		next_wActivePos = 0;
		// Shift LED window
		processWindowShifter();	
		break;
	default:
		next_wActivePos = wActivePos + 1;
     9b8:	cf 5f       	subi	r28, 0xFF	; 255
		break;
	}		
	
	#ifdef 	USE_EXTRA_LED_DIGIT
	if (wActivePos == EXTRA_DIGIT_NUM)
     9ba:	80 91 06 01 	lds	r24, 0x0106
     9be:	86 30       	cpi	r24, 0x06	; 6
     9c0:	21 f4       	brne	.+8      	; 0x9ca <processLedIndicator+0x98>
	{
		// Output separate LEDs state
		set_led_segments(extra_led_state);
     9c2:	80 91 a1 01 	lds	r24, 0x01A1
     9c6:	db d0       	rcall	.+438    	; 0xb7e <set_led_segments>
     9c8:	10 c0       	rjmp	.+32     	; 0x9ea <processLedIndicator+0xb8>
	}
	else
	#endif
	{
		// Output new segment data
		set_led_segments(led_data_buffer[bufActivePos]);
     9ca:	e0 91 05 01 	lds	r30, 0x0105
     9ce:	f0 e0       	ldi	r31, 0x00	; 0
     9d0:	eb 55       	subi	r30, 0x5B	; 91
     9d2:	fe 4f       	sbci	r31, 0xFE	; 254
     9d4:	80 81       	ld	r24, Z
     9d6:	d3 d0       	rcall	.+422    	; 0xb7e <set_led_segments>
		// Wrap around buffer length
		bufActivePos = inc_buffer_position(bufActivePos );
     9d8:	80 91 05 01 	lds	r24, 0x0105
// Increments index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t inc_buffer_position(uint8_t position)
{
	return (position >= LED_BUFFER_LENGTH - 1) ? 0 : position + 1;
     9dc:	8d 30       	cpi	r24, 0x0D	; 13
     9de:	10 f4       	brcc	.+4      	; 0x9e4 <processLedIndicator+0xb2>
     9e0:	8f 5f       	subi	r24, 0xFF	; 255
     9e2:	01 c0       	rjmp	.+2      	; 0x9e6 <processLedIndicator+0xb4>
     9e4:	80 e0       	ldi	r24, 0x00	; 0
	#endif
	{
		// Output new segment data
		set_led_segments(led_data_buffer[bufActivePos]);
		// Wrap around buffer length
		bufActivePos = inc_buffer_position(bufActivePos );
     9e6:	80 93 05 01 	sts	0x0105, r24
	}
		
	wActivePos = next_wActivePos;
     9ea:	c0 93 06 01 	sts	0x0106, r28
	
	#ifdef CLEAN_OPERATION
	enable_led_segments();
	#endif

}
     9ee:	cf 91       	pop	r28
     9f0:	08 95       	ret

000009f2 <fillLedBuffer>:
//---------------------------------------------//
// Fills buffer from (bufStartPos + offset) 
//	position with single char
//---------------------------------------------//
void fillLedBuffer(int8_t offset, uint8_t length, char c)
{
     9f2:	0f 93       	push	r16
     9f4:	1f 93       	push	r17
     9f6:	cf 93       	push	r28
     9f8:	df 93       	push	r29
     9fa:	1f 92       	push	r1
     9fc:	cd b7       	in	r28, 0x3d	; 61
     9fe:	de b7       	in	r29, 0x3e	; 62
     a00:	18 2f       	mov	r17, r24
     a02:	84 2f       	mov	r24, r20
	uint8_t val = decode_led_char(c);
     a04:	69 83       	std	Y+1, r22	; 0x01
     a06:	6f df       	rcall	.-290    	; 0x8e6 <decode_led_char>
     a08:	08 2f       	mov	r16, r24
	// Ensure index is inside the buffer
	uint8_t position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
     a0a:	80 91 a4 01 	lds	r24, 0x01A4
     a0e:	81 0f       	add	r24, r17
     a10:	80 df       	rcall	.-256    	; 0x912 <wrap_led_buffer_index>
	while(length--)
     a12:	69 81       	ldd	r22, Y+1	; 0x01
     a14:	0a c0       	rjmp	.+20     	; 0xa2a <fillLedBuffer+0x38>
	{
		led_data_buffer[position] = val;
     a16:	e8 2f       	mov	r30, r24
     a18:	f0 e0       	ldi	r31, 0x00	; 0
     a1a:	eb 55       	subi	r30, 0x5B	; 91
     a1c:	fe 4f       	sbci	r31, 0xFE	; 254
     a1e:	00 83       	st	Z, r16
// Increments index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t inc_buffer_position(uint8_t position)
{
	return (position >= LED_BUFFER_LENGTH - 1) ? 0 : position + 1;
     a20:	8d 30       	cpi	r24, 0x0D	; 13
     a22:	10 f4       	brcc	.+4      	; 0xa28 <fillLedBuffer+0x36>
     a24:	8f 5f       	subi	r24, 0xFF	; 255
     a26:	01 c0       	rjmp	.+2      	; 0xa2a <fillLedBuffer+0x38>
     a28:	80 e0       	ldi	r24, 0x00	; 0
void fillLedBuffer(int8_t offset, uint8_t length, char c)
{
	uint8_t val = decode_led_char(c);
	// Ensure index is inside the buffer
	uint8_t position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
	while(length--)
     a2a:	61 50       	subi	r22, 0x01	; 1
     a2c:	a0 f7       	brcc	.-24     	; 0xa16 <fillLedBuffer+0x24>
	{
		led_data_buffer[position] = val;
		position = inc_buffer_position(position);
	}
}
     a2e:	0f 90       	pop	r0
     a30:	df 91       	pop	r29
     a32:	cf 91       	pop	r28
     a34:	1f 91       	pop	r17
     a36:	0f 91       	pop	r16
     a38:	08 95       	ret

00000a3a <startShiftingWindowLeft>:
//	LED window left 
//---------------------------------------------//
void startShiftingWindowLeft(void)
{
	// Clear spaces between menu states
	fillLedBuffer(-2,2,' ');
     a3a:	40 e2       	ldi	r20, 0x20	; 32
     a3c:	62 e0       	ldi	r22, 0x02	; 2
     a3e:	8e ef       	ldi	r24, 0xFE	; 254
     a40:	d8 df       	rcall	.-80     	; 0x9f2 <fillLedBuffer>
	// Set new buffer position for writing
	bufStartPos = wrap_led_buffer_index( (int8_t)bufStartPos - (NUM_DIGITS + 2) );
     a42:	80 91 a4 01 	lds	r24, 0x01A4
     a46:	88 50       	subi	r24, 0x08	; 8
     a48:	64 df       	rcall	.-312    	; 0x912 <wrap_led_buffer_index>
     a4a:	80 93 a4 01 	sts	0x01A4, r24
	// Set shifter state
	shifterState = LED_SHIFT_LEFT;
     a4e:	81 e0       	ldi	r24, 0x01	; 1
     a50:	80 93 a3 01 	sts	0x01A3, r24
     a54:	08 95       	ret

00000a56 <startShiftingWindowRight>:
//	LED window right 
//---------------------------------------------//
void startShiftingWindowRight(void)
{
	// Clear spaces between menu states
	fillLedBuffer(NUM_DIGITS,2,' ');
     a56:	40 e2       	ldi	r20, 0x20	; 32
     a58:	62 e0       	ldi	r22, 0x02	; 2
     a5a:	86 e0       	ldi	r24, 0x06	; 6
     a5c:	ca df       	rcall	.-108    	; 0x9f2 <fillLedBuffer>
	// Set new buffer position for writing
	bufStartPos = wrap_led_buffer_index( (int8_t)bufStartPos + NUM_DIGITS + 2 );
     a5e:	80 91 a4 01 	lds	r24, 0x01A4
     a62:	88 5f       	subi	r24, 0xF8	; 248
     a64:	56 df       	rcall	.-340    	; 0x912 <wrap_led_buffer_index>
     a66:	80 93 a4 01 	sts	0x01A4, r24
	// Set shifter state
	shifterState = LED_SHIFT_RIGHT;
     a6a:	82 e0       	ldi	r24, 0x02	; 2
     a6c:	80 93 a3 01 	sts	0x01A3, r24
     a70:	08 95       	ret

00000a72 <initLedIndicator>:
//---------------------------------------------//
//	Initialization
//	Call this function at start of your program
//---------------------------------------------//
void initLedIndicator()
{
     a72:	cf 93       	push	r28
	uint8_t i;
	// First disable outputs
	disable_led_segments();
     a74:	a0 d0       	rcall	.+320    	; 0xbb6 <disable_led_segments>
     a76:	c7 e0       	ldi	r28, 0x07	; 7
	// Fill shift register with non-active levels
	for (i=0;i<NUM_DIGITS_TOTAL;i++)
	{
		led_clock_pulse(!LED_DIGIT_ACT_LVL);
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	71 d0       	rcall	.+226    	; 0xb5e <led_clock_pulse>
     a7c:	c1 50       	subi	r28, 0x01	; 1
{
	uint8_t i;
	// First disable outputs
	disable_led_segments();
	// Fill shift register with non-active levels
	for (i=0;i<NUM_DIGITS_TOTAL;i++)
     a7e:	e1 f7       	brne	.-8      	; 0xa78 <initLedIndicator+0x6>
	{
		led_clock_pulse(!LED_DIGIT_ACT_LVL);
	}
	// Now enable outputs
	enable_led_segments();
     a80:	93 d0       	rcall	.+294    	; 0xba8 <enable_led_segments>
	
	// Reset pointers
	wStartPos = 0;
     a82:	10 92 a2 01 	sts	0x01A2, r1
	bufStartPos = 0;
     a86:	10 92 a4 01 	sts	0x01A4, r1
	bufActivePos = 0;
     a8a:	10 92 05 01 	sts	0x0105, r1
	wActivePos = 0;
     a8e:	10 92 06 01 	sts	0x0106, r1
	#ifdef 	USE_EXTRA_LED_DIGIT
	extra_led_state = 0;
     a92:	10 92 a1 01 	sts	0x01A1, r1
	#endif
	
	// Clear the buffer 
	fillLedBuffer(0,LED_BUFFER_LENGTH,' ');
     a96:	40 e2       	ldi	r20, 0x20	; 32
     a98:	6e e0       	ldi	r22, 0x0E	; 14
     a9a:	80 e0       	ldi	r24, 0x00	; 0
     a9c:	aa df       	rcall	.-172    	; 0x9f2 <fillLedBuffer>
	
	// Initialize shift timer - always enabled, but 
	//	processed only when shifting is active
	shifterState = LED_SHIFT_DONE;
     a9e:	10 92 a3 01 	sts	0x01A3, r1
	shiftTimer.Enabled = 1;
     aa2:	80 91 07 01 	lds	r24, 0x0107
	shiftTimer.RunOnce = 0;
     aa6:	81 60       	ori	r24, 0x01	; 1
     aa8:	8d 7f       	andi	r24, 0xFD	; 253
     aaa:	80 93 07 01 	sts	0x0107, r24
	shiftTimer.Top = LED_SHIFT_INTERVAL-1;
     aae:	89 e0       	ldi	r24, 0x09	; 9
     ab0:	80 93 09 01 	sts	0x0109, r24
}
     ab4:	cf 91       	pop	r28
     ab6:	08 95       	ret

00000ab8 <printLedBuffer>:
//		str - null-terminated char string
// Comma and dot (".", ",") get special processing - first occurrence is added to
// a preceding char, next are displayed as a single digit
//---------------------------------------------//
void printLedBuffer(int8_t offset, char* str)
{
     ab8:	ff 92       	push	r15
     aba:	0f 93       	push	r16
     abc:	1f 93       	push	r17
     abe:	cf 93       	push	r28
     ac0:	df 93       	push	r29
     ac2:	eb 01       	movw	r28, r22
	char c;
	uint8_t decoded_sym;
	uint8_t state = 0x02;
	uint8_t comma_pos;
	// Ensure index is inside the buffer
	uint8_t buffer_position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
     ac4:	90 91 a4 01 	lds	r25, 0x01A4
     ac8:	89 0f       	add	r24, r25
     aca:	23 df       	rcall	.-442    	; 0x912 <wrap_led_buffer_index>
     acc:	18 2f       	mov	r17, r24
	comma_pos = buffer_position;
     ace:	f8 2e       	mov	r15, r24
//---------------------------------------------//
void printLedBuffer(int8_t offset, char* str)
{
	char c;
	uint8_t decoded_sym;
	uint8_t state = 0x02;
     ad0:	02 e0       	ldi	r16, 0x02	; 2
	uint8_t comma_pos;
	// Ensure index is inside the buffer
	uint8_t buffer_position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
	comma_pos = buffer_position;
	// Output chars
	while((c = *str++))
     ad2:	23 c0       	rjmp	.+70     	; 0xb1a <printLedBuffer+0x62>
	{
		decoded_sym = decode_led_char(c);
     ad4:	08 df       	rcall	.-496    	; 0x8e6 <decode_led_char>
		state = (decoded_sym == SEGH) ? (state | 0x01) : (state & ~0x01);
     ad6:	80 38       	cpi	r24, 0x80	; 128
     ad8:	11 f4       	brne	.+4      	; 0xade <printLedBuffer+0x26>
     ada:	01 60       	ori	r16, 0x01	; 1
     adc:	01 c0       	rjmp	.+2      	; 0xae0 <printLedBuffer+0x28>
     ade:	0e 7f       	andi	r16, 0xFE	; 254
		if (state == 0x01)			
     ae0:	01 30       	cpi	r16, 0x01	; 1
     ae2:	49 f4       	brne	.+18     	; 0xaf6 <printLedBuffer+0x3e>
		{
			led_data_buffer[comma_pos] |= decoded_sym;
     ae4:	ef 2d       	mov	r30, r15
     ae6:	f0 e0       	ldi	r31, 0x00	; 0
     ae8:	eb 55       	subi	r30, 0x5B	; 91
     aea:	fe 4f       	sbci	r31, 0xFE	; 254
     aec:	90 81       	ld	r25, Z
     aee:	98 2b       	or	r25, r24
     af0:	90 83       	st	Z, r25
     af2:	81 2f       	mov	r24, r17
     af4:	0b c0       	rjmp	.+22     	; 0xb0c <printLedBuffer+0x54>
		}
		else
		{
			led_data_buffer[buffer_position] = decoded_sym;	
     af6:	e1 2f       	mov	r30, r17
     af8:	f0 e0       	ldi	r31, 0x00	; 0
     afa:	eb 55       	subi	r30, 0x5B	; 91
     afc:	fe 4f       	sbci	r31, 0xFE	; 254
     afe:	80 83       	st	Z, r24
// Increments index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t inc_buffer_position(uint8_t position)
{
	return (position >= LED_BUFFER_LENGTH - 1) ? 0 : position + 1;
     b00:	1d 30       	cpi	r17, 0x0D	; 13
     b02:	18 f4       	brcc	.+6      	; 0xb0a <printLedBuffer+0x52>
     b04:	81 2f       	mov	r24, r17
     b06:	8f 5f       	subi	r24, 0xFF	; 255
     b08:	01 c0       	rjmp	.+2      	; 0xb0c <printLedBuffer+0x54>
     b0a:	80 e0       	ldi	r24, 0x00	; 0
		comma_pos = buffer_position;
		if (state != 0x01)
		{
			buffer_position = inc_buffer_position(buffer_position);
		}
		state = (state & 0x01) ? 0x03 : 0x00;		
     b0c:	00 ff       	sbrs	r16, 0
     b0e:	02 c0       	rjmp	.+4      	; 0xb14 <printLedBuffer+0x5c>
     b10:	03 e0       	ldi	r16, 0x03	; 3
     b12:	01 c0       	rjmp	.+2      	; 0xb16 <printLedBuffer+0x5e>
     b14:	00 e0       	ldi	r16, 0x00	; 0
     b16:	f1 2e       	mov	r15, r17
     b18:	18 2f       	mov	r17, r24
	uint8_t comma_pos;
	// Ensure index is inside the buffer
	uint8_t buffer_position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
	comma_pos = buffer_position;
	// Output chars
	while((c = *str++))
     b1a:	89 91       	ld	r24, Y+
     b1c:	81 11       	cpse	r24, r1
     b1e:	da cf       	rjmp	.-76     	; 0xad4 <printLedBuffer+0x1c>
		{
			buffer_position = inc_buffer_position(buffer_position);
		}
		state = (state & 0x01) ? 0x03 : 0x00;		
	}
}
     b20:	df 91       	pop	r29
     b22:	cf 91       	pop	r28
     b24:	1f 91       	pop	r17
     b26:	0f 91       	pop	r16
     b28:	ff 90       	pop	r15
     b2a:	08 95       	ret

00000b2c <setComma>:
//	buffer cell
//---------------------------------------------//
void setComma(int8_t offset)
{
	// Ensure index is inside the buffer
	uint8_t position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
     b2c:	90 91 a4 01 	lds	r25, 0x01A4
     b30:	89 0f       	add	r24, r25
     b32:	ef de       	rcall	.-546    	; 0x912 <wrap_led_buffer_index>
	led_data_buffer[position] |= (SEGH);
     b34:	e8 2f       	mov	r30, r24
     b36:	f0 e0       	ldi	r31, 0x00	; 0
     b38:	eb 55       	subi	r30, 0x5B	; 91
     b3a:	fe 4f       	sbci	r31, 0xFE	; 254
     b3c:	80 81       	ld	r24, Z
     b3e:	80 68       	ori	r24, 0x80	; 128
     b40:	80 83       	st	Z, r24
     b42:	08 95       	ret

00000b44 <setExtraLeds>:
// Argument is ORed with current LED state
//---------------------------------------------//
inline void setExtraLeds(uint8_t leds_set_value)
{
		//asm("cli");
		extra_led_state |= leds_set_value;
     b44:	90 91 a1 01 	lds	r25, 0x01A1
     b48:	98 2b       	or	r25, r24
     b4a:	90 93 a1 01 	sts	0x01A1, r25
     b4e:	08 95       	ret

00000b50 <clearExtraLeds>:
// Argument is AND NOTed with current LED state
//---------------------------------------------//
inline void clearExtraLeds(uint8_t leds_clear_value)
{
		//asm("cli");
		extra_led_state &= ~leds_clear_value;
     b50:	90 91 a1 01 	lds	r25, 0x01A1
     b54:	80 95       	com	r24
     b56:	89 23       	and	r24, r25
     b58:	80 93 a1 01 	sts	0x01A1, r24
     b5c:	08 95       	ret

00000b5e <led_clock_pulse>:


// Clocks in bit into the shift register
void led_clock_pulse(uint8_t bit)
{
	if (bit)
     b5e:	88 23       	and	r24, r24
     b60:	11 f0       	breq	.+4      	; 0xb66 <led_clock_pulse+0x8>
		PORTB |= (1<<PB_LED_DOUT);
     b62:	c0 9a       	sbi	0x18, 0	; 24
     b64:	01 c0       	rjmp	.+2      	; 0xb68 <led_clock_pulse+0xa>
	else
		PORTB &= ~(1<<PB_LED_DOUT);
     b66:	c0 98       	cbi	0x18, 0	; 24
     b68:	8a e1       	ldi	r24, 0x1A	; 26
     b6a:	8a 95       	dec	r24
     b6c:	f1 f7       	brne	.-4      	; 0xb6a <led_clock_pulse+0xc>
     b6e:	00 c0       	rjmp	.+0      	; 0xb70 <led_clock_pulse+0x12>
	_delay_us(SETUP_DELAY_US);
	PORTB |= (1<<PB_LED_CLK);
     b70:	c2 9a       	sbi	0x18, 2	; 24
     b72:	8a e1       	ldi	r24, 0x1A	; 26
     b74:	8a 95       	dec	r24
     b76:	f1 f7       	brne	.-4      	; 0xb74 <led_clock_pulse+0x16>
     b78:	00 c0       	rjmp	.+0      	; 0xb7a <led_clock_pulse+0x1c>
	_delay_us(SHIFT_DELAY_US);
	PORTB &= ~(1<<PB_LED_CLK);
     b7a:	c2 98       	cbi	0x18, 2	; 24
     b7c:	08 95       	ret

00000b7e <set_led_segments>:
// Outputs decoded segment data to port bits
void set_led_segments(uint8_t seg_ch)
{
	uint8_t pdat;
	seg_ch ^= LED_SEGMENT_MASK;
	pdat = PORTC & ~( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
     b7e:	25 b3       	in	r18, 0x15	; 21
	pdat |= (seg_ch & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
     b80:	98 2f       	mov	r25, r24
     b82:	9f 71       	andi	r25, 0x1F	; 31
// Outputs decoded segment data to port bits
void set_led_segments(uint8_t seg_ch)
{
	uint8_t pdat;
	seg_ch ^= LED_SEGMENT_MASK;
	pdat = PORTC & ~( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
     b84:	20 7e       	andi	r18, 0xE0	; 224
	pdat |= (seg_ch & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
     b86:	92 2b       	or	r25, r18
	PORTC = pdat;
     b88:	95 bb       	out	0x15, r25	; 21
	seg_ch >>= 2;
	pdat = PORTB & ~( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     b8a:	98 b3       	in	r25, 0x18	; 24
	uint8_t pdat;
	seg_ch ^= LED_SEGMENT_MASK;
	pdat = PORTC & ~( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
	pdat |= (seg_ch & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
	PORTC = pdat;
	seg_ch >>= 2;
     b8c:	86 95       	lsr	r24
     b8e:	86 95       	lsr	r24
	pdat = PORTB & ~( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
	pdat |= (seg_ch & ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) ));
     b90:	88 73       	andi	r24, 0x38	; 56
	seg_ch ^= LED_SEGMENT_MASK;
	pdat = PORTC & ~( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
	pdat |= (seg_ch & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
	PORTC = pdat;
	seg_ch >>= 2;
	pdat = PORTB & ~( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     b92:	97 7c       	andi	r25, 0xC7	; 199
	pdat |= (seg_ch & ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) ));
     b94:	89 2b       	or	r24, r25
	PORTB = pdat;
     b96:	88 bb       	out	0x18, r24	; 24
     b98:	08 95       	ret

00000b9a <enable_led_segments_pullups>:

// Turns segment port bits to HI-Z and
// enables pull-ups
void enable_led_segments_pullups()
{
	PORTC |= ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
     b9a:	85 b3       	in	r24, 0x15	; 21
     b9c:	8f 61       	ori	r24, 0x1F	; 31
     b9e:	85 bb       	out	0x15, r24	; 21
	PORTB |= ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     ba0:	88 b3       	in	r24, 0x18	; 24
     ba2:	88 63       	ori	r24, 0x38	; 56
     ba4:	88 bb       	out	0x18, r24	; 24
     ba6:	08 95       	ret

00000ba8 <enable_led_segments>:
}	

void enable_led_segments()
{
	DDRC |= ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
     ba8:	84 b3       	in	r24, 0x14	; 20
     baa:	8f 61       	ori	r24, 0x1F	; 31
     bac:	84 bb       	out	0x14, r24	; 20
	DDRB |= ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     bae:	87 b3       	in	r24, 0x17	; 23
     bb0:	88 63       	ori	r24, 0x38	; 56
     bb2:	87 bb       	out	0x17, r24	; 23
     bb4:	08 95       	ret

00000bb6 <disable_led_segments>:
}

void disable_led_segments()
{
	DDRC &= ~( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
     bb6:	84 b3       	in	r24, 0x14	; 20
     bb8:	80 7e       	andi	r24, 0xE0	; 224
     bba:	84 bb       	out	0x14, r24	; 20
	DDRB &= ~( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     bbc:	87 b3       	in	r24, 0x17	; 23
     bbe:	87 7c       	andi	r24, 0xC7	; 199
     bc0:	87 bb       	out	0x17, r24	; 23
     bc2:	08 95       	ret

00000bc4 <capture_button_state>:


void capture_button_state()
{
	uint8_t pdat;
	pdat = PINB  & ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     bc4:	86 b3       	in	r24, 0x16	; 22
     bc6:	88 73       	andi	r24, 0x38	; 56
	pdat <<= 2;
	pdat |= (PINC & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
     bc8:	93 b3       	in	r25, 0x13	; 19

void capture_button_state()
{
	uint8_t pdat;
	pdat = PINB  & ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
	pdat <<= 2;
     bca:	88 0f       	add	r24, r24
     bcc:	88 0f       	add	r24, r24
	pdat |= (PINC & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
     bce:	9f 71       	andi	r25, 0x1F	; 31
     bd0:	89 2b       	or	r24, r25
	raw_button_state = pdat ^ RAW_BUTTONS_INVERSE_MASK;
     bd2:	80 95       	com	r24
     bd4:	80 93 b3 01 	sts	0x01B3, r24
     bd8:	08 95       	ret

00000bda <processItemFunction>:
//	Arguments:
//		funcAddr - address of the function to run.
//-----------------------------------------------------------------//
static inline void processItemFunction(FuncPtr funcAddr)
{
	if (funcAddr != 0)
     bda:	00 97       	sbiw	r24, 0x00	; 0
     bdc:	11 f0       	breq	.+4      	; 0xbe2 <processItemFunction+0x8>
		((FuncPtr)funcAddr)();
     bde:	fc 01       	movw	r30, r24
     be0:	09 94       	ijmp
     be2:	08 95       	ret

00000be4 <mf_setTempLeave>:
		clearExtraLeds(LED_TEMP);
}

void mf_setTempLeave(void)
{
	userTimer.Enabled = 0;
     be4:	e3 e1       	ldi	r30, 0x13	; 19
     be6:	f1 e0       	ldi	r31, 0x01	; 1
     be8:	80 81       	ld	r24, Z
     bea:	8e 7f       	andi	r24, 0xFE	; 254
     bec:	80 83       	st	Z, r24
     bee:	08 95       	ret

00000bf0 <mf_leafSelectAct>:
	userTimer.FA_GE = 1;	
}

void mf_leafSelectAct(void)
{
	userTimer.Timer = 0;
     bf0:	10 92 14 01 	sts	0x0114, r1
	userTimer.Top = BLINK_PERIOD - 1;
     bf4:	87 e0       	ldi	r24, 0x07	; 7
     bf6:	80 93 15 01 	sts	0x0115, r24
	userTimer.CompA = BLINK_PERIOD / 2;
     bfa:	84 e0       	ldi	r24, 0x04	; 4
     bfc:	80 93 16 01 	sts	0x0116, r24
	userTimer.Enabled = 1;
     c00:	e3 e1       	ldi	r30, 0x13	; 19
     c02:	f1 e0       	ldi	r31, 0x01	; 1
     c04:	80 81       	ld	r24, Z
     c06:	81 60       	ori	r24, 0x01	; 1
     c08:	80 83       	st	Z, r24
     c0a:	08 95       	ret

00000c0c <mf_leafExit>:
}

void mf_leafExit(void)
{
	userTimer.Enabled = 0;	
     c0c:	e3 e1       	ldi	r30, 0x13	; 19
     c0e:	f1 e0       	ldi	r31, 0x01	; 1
     c10:	80 81       	ld	r24, Z
     c12:	8e 7f       	andi	r24, 0xFE	; 254
     c14:	80 83       	st	Z, r24
     c16:	08 95       	ret

00000c18 <mf_actpoffLeave>:
	printLedBuffer(0,"   OFF");
}

void mf_actpoffLeave(void)
{
	autoPowerOffState = 0;	
     c18:	10 92 fe 00 	sts	0x00FE, r1
     c1c:	08 95       	ret

00000c1e <mf_calibDoExit>:
	userTimer.Enabled = 1;
}

void mf_leafExit(void)
{
	userTimer.Enabled = 0;	
     c1e:	e3 e1       	ldi	r30, 0x13	; 19
     c20:	f1 e0       	ldi	r31, 0x01	; 1
     c22:	80 81       	ld	r24, Z
     c24:	8e 7f       	andi	r24, 0xFE	; 254
     c26:	80 83       	st	Z, r24
}

void mf_calibDoExit(void)
{
	mf_leafExit();
	heaterState &= ~CALIBRATION_ACTIVE;
     c28:	80 91 ff 00 	lds	r24, 0x00FF
     c2c:	8d 7f       	andi	r24, 0xFD	; 253
     c2e:	80 93 ff 00 	sts	0x00FF, r24
     c32:	08 95       	ret

00000c34 <mf_cdoneDo>:
	saveCalibrationToEEPROM();
}

void mf_cdoneDo(void)
{
	printLedBuffer(0," DONE ");
     c34:	61 ed       	ldi	r22, 0xD1	; 209
     c36:	70 e0       	ldi	r23, 0x00	; 0
     c38:	80 e0       	ldi	r24, 0x00	; 0
     c3a:	3e cf       	rjmp	.-388    	; 0xab8 <printLedBuffer>

00000c3c <mf_actpoffDo>:
}

// Indication of power off mode
void mf_actpoffDo(void)
{
	printLedBuffer(0,"   OFF");
     c3c:	68 ed       	ldi	r22, 0xD8	; 216
     c3e:	70 e0       	ldi	r23, 0x00	; 0
     c40:	80 e0       	ldi	r24, 0x00	; 0
     c42:	3a cf       	rjmp	.-396    	; 0xab8 <printLedBuffer>

00000c44 <mf_cdone2Select>:
}

void mf_cdone2Select(void)
{
	// Save current ADC as calibrating point
	cp.cpoint2_adc = adc_normalized;
     c44:	80 91 55 01 	lds	r24, 0x0155
     c48:	90 91 56 01 	lds	r25, 0x0156
     c4c:	90 93 87 01 	sts	0x0187, r25
     c50:	80 93 86 01 	sts	0x0186, r24
	// Save current Celsius degree
	cp.cpoint2 = cpoint2_copy;
     c54:	80 91 18 01 	lds	r24, 0x0118
     c58:	80 93 83 01 	sts	0x0183, r24
	// Calculate new coefficient for temperature conversion
	calculateCoeffs();
     c5c:	dd da       	rcall	.-2630   	; 0x218 <calculateCoeffs>
	saveCalibrationToEEPROM();
     c5e:	2d ce       	rjmp	.-934    	; 0x8ba <saveCalibrationToEEPROM>

00000c60 <mf_cdone1Select>:
//---------------------------------------------//

void mf_cdone1Select(void)
{
	// Save current ADC as calibrating point
	cp.cpoint1_adc = adc_normalized;
     c60:	80 91 55 01 	lds	r24, 0x0155
     c64:	90 91 56 01 	lds	r25, 0x0156
     c68:	90 93 85 01 	sts	0x0185, r25
     c6c:	80 93 84 01 	sts	0x0184, r24
	// Save current Celsius degree
	cp.cpoint1 = cpoint1_copy;
     c70:	80 91 17 01 	lds	r24, 0x0117
     c74:	80 93 82 01 	sts	0x0182, r24
	// Calculate new coefficient for temperature conversion
	calculateCoeffs();
     c78:	cf da       	rcall	.-2658   	; 0x218 <calculateCoeffs>
	saveCalibrationToEEPROM();
     c7a:	1f ce       	rjmp	.-962    	; 0x8ba <saveCalibrationToEEPROM>

00000c7c <mf_autopoffDo>:

//---------------------------------------------//


void mf_autopoffDo(void)
{
     c7c:	cf 93       	push	r28
     c7e:	df 93       	push	r29
     c80:	cd b7       	in	r28, 0x3d	; 61
     c82:	de b7       	in	r29, 0x3e	; 62
     c84:	27 97       	sbiw	r28, 0x07	; 7
     c86:	0f b6       	in	r0, 0x3f	; 63
     c88:	f8 94       	cli
     c8a:	de bf       	out	0x3e, r29	; 62
     c8c:	0f be       	out	0x3f, r0	; 63
     c8e:	cd bf       	out	0x3d, r28	; 61
	char str[] = {'O','F','F',' ',' ',' ',0};
     c90:	87 e0       	ldi	r24, 0x07	; 7
     c92:	e7 ea       	ldi	r30, 0xA7	; 167
     c94:	f0 e0       	ldi	r31, 0x00	; 0
     c96:	de 01       	movw	r26, r28
     c98:	11 96       	adiw	r26, 0x01	; 1
     c9a:	01 90       	ld	r0, Z+
     c9c:	0d 92       	st	X+, r0
     c9e:	8a 95       	dec	r24
     ca0:	e1 f7       	brne	.-8      	; 0xc9a <mf_autopoffDo+0x1e>
		
		
	if (button_state & (BD_UP | BR_UP))
     ca2:	80 91 fa 00 	lds	r24, 0x00FA
     ca6:	90 91 fb 00 	lds	r25, 0x00FB
     caa:	9c 01       	movw	r18, r24
     cac:	22 70       	andi	r18, 0x02	; 2
     cae:	34 70       	andi	r19, 0x04	; 4
     cb0:	23 2b       	or	r18, r19
     cb2:	31 f0       	breq	.+12     	; 0xcc0 <mf_autopoffDo+0x44>
	{
		if (p.power_off_timeout < MAX_POWEROFF_TIMEOUT)
     cb4:	80 91 8b 01 	lds	r24, 0x018B
     cb8:	8f 35       	cpi	r24, 0x5F	; 95
     cba:	68 f4       	brcc	.+26     	; 0xcd6 <mf_autopoffDo+0x5a>
			p.power_off_timeout += 5;
     cbc:	8b 5f       	subi	r24, 0xFB	; 251
     cbe:	09 c0       	rjmp	.+18     	; 0xcd2 <mf_autopoffDo+0x56>
		restartMenuTimer();
	}
	else if (button_state & (BD_DOWN | BR_DOWN))
     cc0:	84 70       	andi	r24, 0x04	; 4
     cc2:	98 70       	andi	r25, 0x08	; 8
     cc4:	89 2b       	or	r24, r25
     cc6:	49 f0       	breq	.+18     	; 0xcda <mf_autopoffDo+0x5e>
	{
		if (p.power_off_timeout > MIN_POWEROFF_TIMEOUT)
     cc8:	80 91 8b 01 	lds	r24, 0x018B
     ccc:	86 30       	cpi	r24, 0x06	; 6
     cce:	18 f0       	brcs	.+6      	; 0xcd6 <mf_autopoffDo+0x5a>
			p.power_off_timeout -= 5;
     cd0:	85 50       	subi	r24, 0x05	; 5
     cd2:	80 93 8b 01 	sts	0x018B, r24
//	 Restarts menu state timeout
//	Should be used in RUN function when control buttons are pressed.
//-----------------------------------------------------------------//
static void restartMenuTimer(void)
{
	menuTimer.Timer = 0;
     cd6:	10 92 97 00 	sts	0x0097, r1
		if (p.power_off_timeout > MIN_POWEROFF_TIMEOUT)
			p.power_off_timeout -= 5;
		restartMenuTimer();
	}	
		
	if (userTimer.FA_GE)
     cda:	80 91 13 01 	lds	r24, 0x0113
     cde:	84 ff       	sbrs	r24, 4
     ce0:	10 c0       	rjmp	.+32     	; 0xd02 <mf_autopoffDo+0x86>
	{
		if (p.power_off_timeout != MAX_POWEROFF_TIMEOUT)
     ce2:	80 91 8b 01 	lds	r24, 0x018B
     ce6:	8f 35       	cpi	r24, 0x5F	; 95
     ce8:	41 f0       	breq	.+16     	; 0xcfa <mf_autopoffDo+0x7e>
			u16toa_align_right(p.power_off_timeout,str + 4,0x80 | 2,' ');	
     cea:	20 e2       	ldi	r18, 0x20	; 32
     cec:	42 e8       	ldi	r20, 0x82	; 130
     cee:	be 01       	movw	r22, r28
     cf0:	6b 5f       	subi	r22, 0xFB	; 251
     cf2:	7f 4f       	sbci	r23, 0xFF	; 255
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	ba d2       	rcall	.+1396   	; 0x126c <u16toa_align_right>
     cf8:	04 c0       	rjmp	.+8      	; 0xd02 <mf_autopoffDo+0x86>
		else 
		{
			str[4] = 'N';
     cfa:	8e e4       	ldi	r24, 0x4E	; 78
     cfc:	8d 83       	std	Y+5, r24	; 0x05
			str[5] = 'O';
     cfe:	8f e4       	ldi	r24, 0x4F	; 79
     d00:	8e 83       	std	Y+6, r24	; 0x06
		}			
	}		
		
	printLedBuffer(0,str);
     d02:	be 01       	movw	r22, r28
     d04:	6f 5f       	subi	r22, 0xFF	; 255
     d06:	7f 4f       	sbci	r23, 0xFF	; 255
     d08:	80 e0       	ldi	r24, 0x00	; 0
     d0a:	d6 de       	rcall	.-596    	; 0xab8 <printLedBuffer>
}
     d0c:	27 96       	adiw	r28, 0x07	; 7
     d0e:	0f b6       	in	r0, 0x3f	; 63
     d10:	f8 94       	cli
     d12:	de bf       	out	0x3e, r29	; 62
     d14:	0f be       	out	0x3f, r0	; 63
     d16:	cd bf       	out	0x3d, r28	; 61
     d18:	df 91       	pop	r29
     d1a:	cf 91       	pop	r28
     d1c:	08 95       	ret

00000d1e <mf_realTempDo>:
{
	setExtraLeds(LED_TEMP);
}

void mf_realTempDo(void)
{
     d1e:	cf 93       	push	r28
     d20:	df 93       	push	r29
     d22:	cd b7       	in	r28, 0x3d	; 61
     d24:	de b7       	in	r29, 0x3e	; 62
     d26:	27 97       	sbiw	r28, 0x07	; 7
     d28:	0f b6       	in	r0, 0x3f	; 63
     d2a:	f8 94       	cli
     d2c:	de bf       	out	0x3e, r29	; 62
     d2e:	0f be       	out	0x3f, r0	; 63
     d30:	cd bf       	out	0x3d, r28	; 61
	char str[] = {' ',' ',' ',' ',0xB0,'C',0};
     d32:	87 e0       	ldi	r24, 0x07	; 7
     d34:	ee ea       	ldi	r30, 0xAE	; 174
     d36:	f0 e0       	ldi	r31, 0x00	; 0
     d38:	de 01       	movw	r26, r28
     d3a:	11 96       	adiw	r26, 0x01	; 1
     d3c:	01 90       	ld	r0, Z+
     d3e:	0d 92       	st	X+, r0
     d40:	8a 95       	dec	r24
     d42:	e1 f7       	brne	.-8      	; 0xd3c <mf_realTempDo+0x1e>
	// Output ADC result to LED
	u16toa_align_right(adc_celsius,str,0x80 | 4,' ');
     d44:	20 e2       	ldi	r18, 0x20	; 32
     d46:	44 e8       	ldi	r20, 0x84	; 132
     d48:	be 01       	movw	r22, r28
     d4a:	6f 5f       	subi	r22, 0xFF	; 255
     d4c:	7f 4f       	sbci	r23, 0xFF	; 255
     d4e:	80 91 57 01 	lds	r24, 0x0157
     d52:	90 91 58 01 	lds	r25, 0x0158
     d56:	8a d2       	rcall	.+1300   	; 0x126c <u16toa_align_right>
	printLedBuffer(0,str);
     d58:	be 01       	movw	r22, r28
     d5a:	6f 5f       	subi	r22, 0xFF	; 255
     d5c:	7f 4f       	sbci	r23, 0xFF	; 255
     d5e:	80 e0       	ldi	r24, 0x00	; 0
     d60:	ab de       	rcall	.-682    	; 0xab8 <printLedBuffer>
}
     d62:	27 96       	adiw	r28, 0x07	; 7
     d64:	0f b6       	in	r0, 0x3f	; 63
     d66:	f8 94       	cli
     d68:	de bf       	out	0x3e, r29	; 62
     d6a:	0f be       	out	0x3f, r0	; 63
     d6c:	cd bf       	out	0x3d, r28	; 61
     d6e:	df 91       	pop	r29
     d70:	cf 91       	pop	r28
     d72:	08 95       	ret

00000d74 <mf_calib2Do>:
}

//---------------------------------------------//

void mf_calib2Do(void)
{
     d74:	cf 93       	push	r28
     d76:	df 93       	push	r29
     d78:	cd b7       	in	r28, 0x3d	; 61
     d7a:	de b7       	in	r29, 0x3e	; 62
     d7c:	27 97       	sbiw	r28, 0x07	; 7
     d7e:	0f b6       	in	r0, 0x3f	; 63
     d80:	f8 94       	cli
     d82:	de bf       	out	0x3e, r29	; 62
     d84:	0f be       	out	0x3f, r0	; 63
     d86:	cd bf       	out	0x3d, r28	; 61
	char str[] = {'P','2',' ',' ',' ',' ',0};
     d88:	87 e0       	ldi	r24, 0x07	; 7
     d8a:	e5 eb       	ldi	r30, 0xB5	; 181
     d8c:	f0 e0       	ldi	r31, 0x00	; 0
     d8e:	de 01       	movw	r26, r28
     d90:	11 96       	adiw	r26, 0x01	; 1
     d92:	01 90       	ld	r0, Z+
     d94:	0d 92       	st	X+, r0
     d96:	8a 95       	dec	r24
     d98:	e1 f7       	brne	.-8      	; 0xd92 <mf_calib2Do+0x1e>
	
	
	if (button_state & (BD_UP | BR_UP))
     d9a:	80 91 fa 00 	lds	r24, 0x00FA
     d9e:	90 91 fb 00 	lds	r25, 0x00FB
     da2:	9c 01       	movw	r18, r24
     da4:	22 70       	andi	r18, 0x02	; 2
     da6:	34 70       	andi	r19, 0x04	; 4
     da8:	23 2b       	or	r18, r19
     daa:	31 f0       	breq	.+12     	; 0xdb8 <mf_calib2Do+0x44>
	{
		if (cpoint2_copy < MAX_CALIB_TEMP)
     dac:	80 91 18 01 	lds	r24, 0x0118
     db0:	8a 3f       	cpi	r24, 0xFA	; 250
     db2:	68 f4       	brcc	.+26     	; 0xdce <mf_calib2Do+0x5a>
		cpoint2_copy += 1;
     db4:	8f 5f       	subi	r24, 0xFF	; 255
     db6:	09 c0       	rjmp	.+18     	; 0xdca <mf_calib2Do+0x56>
	}
	else if (button_state & (BD_DOWN | BR_DOWN))
     db8:	84 70       	andi	r24, 0x04	; 4
     dba:	98 70       	andi	r25, 0x08	; 8
     dbc:	89 2b       	or	r24, r25
     dbe:	39 f0       	breq	.+14     	; 0xdce <mf_calib2Do+0x5a>
	{
		if (cpoint2_copy > MIN_CALIB_TEMP)
     dc0:	80 91 18 01 	lds	r24, 0x0118
     dc4:	8b 30       	cpi	r24, 0x0B	; 11
     dc6:	18 f0       	brcs	.+6      	; 0xdce <mf_calib2Do+0x5a>
		cpoint2_copy -= 1;
     dc8:	81 50       	subi	r24, 0x01	; 1
     dca:	80 93 18 01 	sts	0x0118, r24
	}
	
	if (userTimer.FA_GE)
     dce:	80 91 13 01 	lds	r24, 0x0113
     dd2:	84 ff       	sbrs	r24, 4
     dd4:	0f c0       	rjmp	.+30     	; 0xdf4 <mf_calib2Do+0x80>
	{
		u16toa_align_right(cpoint2_copy,str + 3,0x80 | 3,' ');
     dd6:	20 e2       	ldi	r18, 0x20	; 32
     dd8:	43 e8       	ldi	r20, 0x83	; 131
     dda:	be 01       	movw	r22, r28
     ddc:	6c 5f       	subi	r22, 0xFC	; 252
     dde:	7f 4f       	sbci	r23, 0xFF	; 255
     de0:	80 91 18 01 	lds	r24, 0x0118
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	42 d2       	rcall	.+1156   	; 0x126c <u16toa_align_right>
		resetAutoPowerOffCounter();
     de8:	d8 d5       	rcall	.+2992   	; 0x199a <resetAutoPowerOffCounter>
		heaterState |= CALIBRATION_ACTIVE;
     dea:	80 91 ff 00 	lds	r24, 0x00FF
     dee:	82 60       	ori	r24, 0x02	; 2
     df0:	80 93 ff 00 	sts	0x00FF, r24
	}
	
	printLedBuffer(0,str);
     df4:	be 01       	movw	r22, r28
     df6:	6f 5f       	subi	r22, 0xFF	; 255
     df8:	7f 4f       	sbci	r23, 0xFF	; 255
     dfa:	80 e0       	ldi	r24, 0x00	; 0
     dfc:	5d de       	rcall	.-838    	; 0xab8 <printLedBuffer>
	
}
     dfe:	27 96       	adiw	r28, 0x07	; 7
     e00:	0f b6       	in	r0, 0x3f	; 63
     e02:	f8 94       	cli
     e04:	de bf       	out	0x3e, r29	; 62
     e06:	0f be       	out	0x3f, r0	; 63
     e08:	cd bf       	out	0x3d, r28	; 61
     e0a:	df 91       	pop	r29
     e0c:	cf 91       	pop	r28
     e0e:	08 95       	ret

00000e10 <mf_calib1Do>:
	cpoint1_copy = cp.cpoint1;
	cpoint2_copy = cp.cpoint2;
}

void mf_calib1Do(void)
{
     e10:	cf 93       	push	r28
     e12:	df 93       	push	r29
     e14:	cd b7       	in	r28, 0x3d	; 61
     e16:	de b7       	in	r29, 0x3e	; 62
     e18:	27 97       	sbiw	r28, 0x07	; 7
     e1a:	0f b6       	in	r0, 0x3f	; 63
     e1c:	f8 94       	cli
     e1e:	de bf       	out	0x3e, r29	; 62
     e20:	0f be       	out	0x3f, r0	; 63
     e22:	cd bf       	out	0x3d, r28	; 61
	char str[] = {'P','1',' ',' ',' ',' ',0};
     e24:	87 e0       	ldi	r24, 0x07	; 7
     e26:	ec eb       	ldi	r30, 0xBC	; 188
     e28:	f0 e0       	ldi	r31, 0x00	; 0
     e2a:	de 01       	movw	r26, r28
     e2c:	11 96       	adiw	r26, 0x01	; 1
     e2e:	01 90       	ld	r0, Z+
     e30:	0d 92       	st	X+, r0
     e32:	8a 95       	dec	r24
     e34:	e1 f7       	brne	.-8      	; 0xe2e <mf_calib1Do+0x1e>
	
	
	if (button_state & (BD_UP | BR_UP))
     e36:	80 91 fa 00 	lds	r24, 0x00FA
     e3a:	90 91 fb 00 	lds	r25, 0x00FB
     e3e:	9c 01       	movw	r18, r24
     e40:	22 70       	andi	r18, 0x02	; 2
     e42:	34 70       	andi	r19, 0x04	; 4
     e44:	23 2b       	or	r18, r19
     e46:	31 f0       	breq	.+12     	; 0xe54 <mf_calib1Do+0x44>
	{
		if (cpoint1_copy < MAX_CALIB_TEMP)
     e48:	80 91 17 01 	lds	r24, 0x0117
     e4c:	8a 3f       	cpi	r24, 0xFA	; 250
     e4e:	68 f4       	brcc	.+26     	; 0xe6a <mf_calib1Do+0x5a>
			cpoint1_copy += 1;
     e50:	8f 5f       	subi	r24, 0xFF	; 255
     e52:	09 c0       	rjmp	.+18     	; 0xe66 <mf_calib1Do+0x56>
	}
	else if (button_state & (BD_DOWN | BR_DOWN))
     e54:	84 70       	andi	r24, 0x04	; 4
     e56:	98 70       	andi	r25, 0x08	; 8
     e58:	89 2b       	or	r24, r25
     e5a:	39 f0       	breq	.+14     	; 0xe6a <mf_calib1Do+0x5a>
	{
		if (cpoint1_copy > MIN_CALIB_TEMP)
     e5c:	80 91 17 01 	lds	r24, 0x0117
     e60:	8b 30       	cpi	r24, 0x0B	; 11
     e62:	18 f0       	brcs	.+6      	; 0xe6a <mf_calib1Do+0x5a>
			cpoint1_copy -= 1;
     e64:	81 50       	subi	r24, 0x01	; 1
     e66:	80 93 17 01 	sts	0x0117, r24
	}
	
	if (userTimer.FA_GE)
     e6a:	80 91 13 01 	lds	r24, 0x0113
     e6e:	84 ff       	sbrs	r24, 4
     e70:	0f c0       	rjmp	.+30     	; 0xe90 <mf_calib1Do+0x80>
	{
		u16toa_align_right(cpoint1_copy,str + 3,0x80 | 3,' ');
     e72:	20 e2       	ldi	r18, 0x20	; 32
     e74:	43 e8       	ldi	r20, 0x83	; 131
     e76:	be 01       	movw	r22, r28
     e78:	6c 5f       	subi	r22, 0xFC	; 252
     e7a:	7f 4f       	sbci	r23, 0xFF	; 255
     e7c:	80 91 17 01 	lds	r24, 0x0117
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	f4 d1       	rcall	.+1000   	; 0x126c <u16toa_align_right>
		resetAutoPowerOffCounter();
     e84:	8a d5       	rcall	.+2836   	; 0x199a <resetAutoPowerOffCounter>
		heaterState |= CALIBRATION_ACTIVE;
     e86:	80 91 ff 00 	lds	r24, 0x00FF
     e8a:	82 60       	ori	r24, 0x02	; 2
     e8c:	80 93 ff 00 	sts	0x00FF, r24
	}
	
	printLedBuffer(0,str);
     e90:	be 01       	movw	r22, r28
     e92:	6f 5f       	subi	r22, 0xFF	; 255
     e94:	7f 4f       	sbci	r23, 0xFF	; 255
     e96:	80 e0       	ldi	r24, 0x00	; 0
     e98:	0f de       	rcall	.-994    	; 0xab8 <printLedBuffer>
	
}
     e9a:	27 96       	adiw	r28, 0x07	; 7
     e9c:	0f b6       	in	r0, 0x3f	; 63
     e9e:	f8 94       	cli
     ea0:	de bf       	out	0x3e, r29	; 62
     ea2:	0f be       	out	0x3f, r0	; 63
     ea4:	cd bf       	out	0x3d, r28	; 61
     ea6:	df 91       	pop	r29
     ea8:	cf 91       	pop	r28
     eaa:	08 95       	ret

00000eac <mf_actpoffSelect>:



void mf_actpoffSelect(void)
{
	clearExtraLeds(LED_TEMP | LED_ROLL);
     eac:	83 e0       	ldi	r24, 0x03	; 3
     eae:	50 de       	rcall	.-864    	; 0xb50 <clearExtraLeds>
	autoPowerOffState = AUTO_POFF_ACTIVE;
     eb0:	81 e0       	ldi	r24, 0x01	; 1
     eb2:	80 93 fe 00 	sts	0x00FE, r24
     eb6:	08 95       	ret

00000eb8 <mf_leafSelect>:

// Select and exit functions, common for leaf menu items 

void mf_leafSelect(void)
{
	clearExtraLeds(LED_TEMP | LED_ROLL);
     eb8:	83 e0       	ldi	r24, 0x03	; 3
     eba:	4a de       	rcall	.-876    	; 0xb50 <clearExtraLeds>
	userTimer.FA_GE = 1;	
     ebc:	e3 e1       	ldi	r30, 0x13	; 19
     ebe:	f1 e0       	ldi	r31, 0x01	; 1
     ec0:	80 81       	ld	r24, Z
     ec2:	80 61       	ori	r24, 0x10	; 16
     ec4:	80 83       	st	Z, r24
     ec6:	08 95       	ret

00000ec8 <mf_calibSelect>:

//---------------------------------------------//

void mf_calibSelect(void)
{
	mf_leafSelect();
     ec8:	f7 df       	rcall	.-18     	; 0xeb8 <mf_leafSelect>
	cpoint1_copy = cp.cpoint1;
     eca:	80 91 82 01 	lds	r24, 0x0182
     ece:	80 93 17 01 	sts	0x0117, r24
	cpoint2_copy = cp.cpoint2;
     ed2:	80 91 83 01 	lds	r24, 0x0183
     ed6:	80 93 18 01 	sts	0x0118, r24
     eda:	08 95       	ret

00000edc <mf_rollLeave>:
	printLedBuffer(0,str);
}

void mf_rollLeave(void)
{
	clearExtraLeds(LED_ROLL);
     edc:	82 e0       	ldi	r24, 0x02	; 2
     ede:	38 de       	rcall	.-912    	; 0xb50 <clearExtraLeds>
	userTimer.Enabled = 0;
     ee0:	e3 e1       	ldi	r30, 0x13	; 19
     ee2:	f1 e0       	ldi	r31, 0x01	; 1
     ee4:	80 81       	ld	r24, Z
     ee6:	8e 7f       	andi	r24, 0xFE	; 254
     ee8:	80 83       	st	Z, r24
     eea:	08 95       	ret

00000eec <mf_setTempSelect>:
//---------------------------------------------//


void mf_setTempSelect(void)
{
	clearExtraLeds(LED_TEMP);
     eec:	81 e0       	ldi	r24, 0x01	; 1
     eee:	30 de       	rcall	.-928    	; 0xb50 <clearExtraLeds>
	mf_leafSelectAct();		// setup and start timer
     ef0:	7f ce       	rjmp	.-770    	; 0xbf0 <mf_leafSelectAct>

00000ef2 <mf_realTempLeave>:
	printLedBuffer(0,str);
}

void mf_realTempLeave(void)
{
	clearExtraLeds(LED_TEMP);
     ef2:	81 e0       	ldi	r24, 0x01	; 1
     ef4:	2d ce       	rjmp	.-934    	; 0xb50 <clearExtraLeds>

00000ef6 <mf_sndenDo>:

//---------------------------------------------//


void mf_sndenDo(void)
{
     ef6:	cf 93       	push	r28
     ef8:	df 93       	push	r29
     efa:	cd b7       	in	r28, 0x3d	; 61
     efc:	de b7       	in	r29, 0x3e	; 62
     efe:	27 97       	sbiw	r28, 0x07	; 7
     f00:	0f b6       	in	r0, 0x3f	; 63
     f02:	f8 94       	cli
     f04:	de bf       	out	0x3e, r29	; 62
     f06:	0f be       	out	0x3f, r0	; 63
     f08:	cd bf       	out	0x3d, r28	; 61
	char str[] = {'S','N','D',' ',' ',' ',0};
     f0a:	87 e0       	ldi	r24, 0x07	; 7
     f0c:	e3 ec       	ldi	r30, 0xC3	; 195
     f0e:	f0 e0       	ldi	r31, 0x00	; 0
     f10:	de 01       	movw	r26, r28
     f12:	11 96       	adiw	r26, 0x01	; 1
     f14:	01 90       	ld	r0, Z+
     f16:	0d 92       	st	X+, r0
     f18:	8a 95       	dec	r24
     f1a:	e1 f7       	brne	.-8      	; 0xf14 <mf_sndenDo+0x1e>
		
	if (button_state & (BD_UP | BD_DOWN))
     f1c:	80 91 fa 00 	lds	r24, 0x00FA
     f20:	90 91 fb 00 	lds	r25, 0x00FB
     f24:	86 70       	andi	r24, 0x06	; 6
     f26:	99 27       	eor	r25, r25
     f28:	89 2b       	or	r24, r25
     f2a:	49 f0       	breq	.+18     	; 0xf3e <mf_sndenDo+0x48>
	{
		p.sound_enable = !p.sound_enable;
     f2c:	81 e0       	ldi	r24, 0x01	; 1
     f2e:	90 91 8a 01 	lds	r25, 0x018A
     f32:	91 11       	cpse	r25, r1
     f34:	80 e0       	ldi	r24, 0x00	; 0
     f36:	80 93 8a 01 	sts	0x018A, r24
//	 Restarts menu state timeout
//	Should be used in RUN function when control buttons are pressed.
//-----------------------------------------------------------------//
static void restartMenuTimer(void)
{
	menuTimer.Timer = 0;
     f3a:	10 92 97 00 	sts	0x0097, r1
	{
		p.sound_enable = !p.sound_enable;
		restartMenuTimer();
	}			
		
	if (userTimer.FA_GE)
     f3e:	80 91 13 01 	lds	r24, 0x0113
     f42:	84 ff       	sbrs	r24, 4
     f44:	0d c0       	rjmp	.+26     	; 0xf60 <mf_sndenDo+0x6a>
	{
		if (p.sound_enable)		
     f46:	80 91 8a 01 	lds	r24, 0x018A
     f4a:	88 23       	and	r24, r24
     f4c:	21 f0       	breq	.+8      	; 0xf56 <mf_sndenDo+0x60>
		{
			str[4] = 'O';
     f4e:	8f e4       	ldi	r24, 0x4F	; 79
     f50:	8d 83       	std	Y+5, r24	; 0x05
			str[5] = 'N';
     f52:	8e e4       	ldi	r24, 0x4E	; 78
     f54:	04 c0       	rjmp	.+8      	; 0xf5e <mf_sndenDo+0x68>
		}
		else
		{
			str[3] = 'O';
     f56:	8f e4       	ldi	r24, 0x4F	; 79
     f58:	8c 83       	std	Y+4, r24	; 0x04
			str[4] = 'F';
     f5a:	86 e4       	ldi	r24, 0x46	; 70
     f5c:	8d 83       	std	Y+5, r24	; 0x05
			str[5] = 'F';
     f5e:	8e 83       	std	Y+6, r24	; 0x06
		}			
	}
		
	printLedBuffer(0,str);
     f60:	be 01       	movw	r22, r28
     f62:	6f 5f       	subi	r22, 0xFF	; 255
     f64:	7f 4f       	sbci	r23, 0xFF	; 255
     f66:	80 e0       	ldi	r24, 0x00	; 0
     f68:	a7 dd       	rcall	.-1202   	; 0xab8 <printLedBuffer>
	setComma(2);
     f6a:	82 e0       	ldi	r24, 0x02	; 2
     f6c:	df dd       	rcall	.-1090   	; 0xb2c <setComma>
}
     f6e:	27 96       	adiw	r28, 0x07	; 7
     f70:	0f b6       	in	r0, 0x3f	; 63
     f72:	f8 94       	cli
     f74:	de bf       	out	0x3e, r29	; 62
     f76:	0f be       	out	0x3f, r0	; 63
     f78:	cd bf       	out	0x3d, r28	; 61
     f7a:	df 91       	pop	r29
     f7c:	cf 91       	pop	r28
     f7e:	08 95       	ret

00000f80 <mf_rollDo>:
	setExtraLeds(LED_ROLL);
	mf_leafSelectAct();		// setup and start timer
}

void mf_rollDo(void)
{
     f80:	cf 93       	push	r28
     f82:	df 93       	push	r29
     f84:	cd b7       	in	r28, 0x3d	; 61
     f86:	de b7       	in	r29, 0x3e	; 62
     f88:	27 97       	sbiw	r28, 0x07	; 7
     f8a:	0f b6       	in	r0, 0x3f	; 63
     f8c:	f8 94       	cli
     f8e:	de bf       	out	0x3e, r29	; 62
     f90:	0f be       	out	0x3f, r0	; 63
     f92:	cd bf       	out	0x3d, r28	; 61
	char str[] = {' ',' ',' ',' ',' ',' ',0};
     f94:	87 e0       	ldi	r24, 0x07	; 7
     f96:	ea ec       	ldi	r30, 0xCA	; 202
     f98:	f0 e0       	ldi	r31, 0x00	; 0
     f9a:	de 01       	movw	r26, r28
     f9c:	11 96       	adiw	r26, 0x01	; 1
     f9e:	01 90       	ld	r0, Z+
     fa0:	0d 92       	st	X+, r0
     fa2:	8a 95       	dec	r24
     fa4:	e1 f7       	brne	.-8      	; 0xf9e <mf_rollDo+0x1e>
		
	if (button_state & (BD_UP | BR_UP))
     fa6:	80 91 fa 00 	lds	r24, 0x00FA
     faa:	90 91 fb 00 	lds	r25, 0x00FB
     fae:	9c 01       	movw	r18, r24
     fb0:	22 70       	andi	r18, 0x02	; 2
     fb2:	34 70       	andi	r19, 0x04	; 4
     fb4:	23 2b       	or	r18, r19
     fb6:	31 f0       	breq	.+12     	; 0xfc4 <mf_rollDo+0x44>
	{
		if (p.rollCycleSet < MAX_ROLL_CYCLES)
     fb8:	80 91 89 01 	lds	r24, 0x0189
     fbc:	83 36       	cpi	r24, 0x63	; 99
     fbe:	68 f4       	brcc	.+26     	; 0xfda <mf_rollDo+0x5a>
			p.rollCycleSet += 1;
     fc0:	8f 5f       	subi	r24, 0xFF	; 255
     fc2:	09 c0       	rjmp	.+18     	; 0xfd6 <mf_rollDo+0x56>
	}
	else if (button_state & (BD_DOWN | BR_DOWN))
     fc4:	84 70       	andi	r24, 0x04	; 4
     fc6:	98 70       	andi	r25, 0x08	; 8
     fc8:	89 2b       	or	r24, r25
     fca:	39 f0       	breq	.+14     	; 0xfda <mf_rollDo+0x5a>
	{
		if (p.rollCycleSet > MIN_ROLL_CYCLES)
     fcc:	80 91 89 01 	lds	r24, 0x0189
     fd0:	82 30       	cpi	r24, 0x02	; 2
     fd2:	18 f0       	brcs	.+6      	; 0xfda <mf_rollDo+0x5a>
			p.rollCycleSet -= 1;
     fd4:	81 50       	subi	r24, 0x01	; 1
     fd6:	80 93 89 01 	sts	0x0189, r24
	}	
		
	u16toa_align_right(p.rollCycleSet,str + 4,0x80 | 2,' ');
     fda:	20 e2       	ldi	r18, 0x20	; 32
     fdc:	42 e8       	ldi	r20, 0x82	; 130
     fde:	be 01       	movw	r22, r28
     fe0:	6b 5f       	subi	r22, 0xFB	; 251
     fe2:	7f 4f       	sbci	r23, 0xFF	; 255
     fe4:	80 91 89 01 	lds	r24, 0x0189
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	40 d1       	rcall	.+640    	; 0x126c <u16toa_align_right>
	
	if ((!(rollState & ROLL_CYCLE)) || (userTimer.FA_GE))
     fec:	80 91 1a 01 	lds	r24, 0x011A
     ff0:	82 ff       	sbrs	r24, 2
     ff2:	04 c0       	rjmp	.+8      	; 0xffc <mf_rollDo+0x7c>
     ff4:	80 91 13 01 	lds	r24, 0x0113
     ff8:	84 ff       	sbrs	r24, 4
     ffa:	09 c0       	rjmp	.+18     	; 0x100e <mf_rollDo+0x8e>
	{
		u16toa_align_right(activeRollCycle,str + 1,0x80 | 2,' ');
     ffc:	20 e2       	ldi	r18, 0x20	; 32
     ffe:	42 e8       	ldi	r20, 0x82	; 130
    1000:	be 01       	movw	r22, r28
    1002:	6e 5f       	subi	r22, 0xFE	; 254
    1004:	7f 4f       	sbci	r23, 0xFF	; 255
    1006:	80 91 19 01 	lds	r24, 0x0119
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	2f d1       	rcall	.+606    	; 0x126c <u16toa_align_right>
	}
	
	str[0] = 0;
    100e:	19 82       	std	Y+1, r1	; 0x01
	if (isTopPointValid())
    1010:	f2 d2       	rcall	.+1508   	; 0x15f6 <isTopPointValid>
    1012:	88 23       	and	r24, r24
    1014:	19 f0       	breq	.+6      	; 0x101c <mf_rollDo+0x9c>
		str[0] |= SEGA;
    1016:	89 81       	ldd	r24, Y+1	; 0x01
    1018:	81 60       	ori	r24, 0x01	; 1
    101a:	89 83       	std	Y+1, r24	; 0x01
	if (isBottomPointValid())
    101c:	fc d2       	rcall	.+1528   	; 0x1616 <isBottomPointValid>
    101e:	88 23       	and	r24, r24
    1020:	19 f0       	breq	.+6      	; 0x1028 <mf_rollDo+0xa8>
		str[0] |= SEGD;
    1022:	89 81       	ldd	r24, Y+1	; 0x01
    1024:	88 60       	ori	r24, 0x08	; 8
    1026:	89 83       	std	Y+1, r24	; 0x01
	if (str[0] == 0)
    1028:	89 81       	ldd	r24, Y+1	; 0x01
    102a:	81 11       	cpse	r24, r1
    102c:	02 c0       	rjmp	.+4      	; 0x1032 <mf_rollDo+0xb2>
		str[0] = ' ';
    102e:	80 e2       	ldi	r24, 0x20	; 32
    1030:	89 83       	std	Y+1, r24	; 0x01
		
	printLedBuffer(0,str);
    1032:	be 01       	movw	r22, r28
    1034:	6f 5f       	subi	r22, 0xFF	; 255
    1036:	7f 4f       	sbci	r23, 0xFF	; 255
    1038:	80 e0       	ldi	r24, 0x00	; 0
    103a:	3e dd       	rcall	.-1412   	; 0xab8 <printLedBuffer>
}
    103c:	27 96       	adiw	r28, 0x07	; 7
    103e:	0f b6       	in	r0, 0x3f	; 63
    1040:	f8 94       	cli
    1042:	de bf       	out	0x3e, r29	; 62
    1044:	0f be       	out	0x3f, r0	; 63
    1046:	cd bf       	out	0x3d, r28	; 61
    1048:	df 91       	pop	r29
    104a:	cf 91       	pop	r28
    104c:	08 95       	ret

0000104e <mf_rollSelect>:
//---------------------------------------------//
//---------------------------------------------//

void mf_rollSelect(void)
{
	setExtraLeds(LED_ROLL);
    104e:	82 e0       	ldi	r24, 0x02	; 2
    1050:	79 dd       	rcall	.-1294   	; 0xb44 <setExtraLeds>
	mf_leafSelectAct();		// setup and start timer
    1052:	ce cd       	rjmp	.-1124   	; 0xbf0 <mf_leafSelectAct>

00001054 <mf_setTempDo>:
	clearExtraLeds(LED_TEMP);
	mf_leafSelectAct();		// setup and start timer
}

void mf_setTempDo(void)
{
    1054:	cf 93       	push	r28
    1056:	df 93       	push	r29
    1058:	cd b7       	in	r28, 0x3d	; 61
    105a:	de b7       	in	r29, 0x3e	; 62
    105c:	27 97       	sbiw	r28, 0x07	; 7
    105e:	0f b6       	in	r0, 0x3f	; 63
    1060:	f8 94       	cli
    1062:	de bf       	out	0x3e, r29	; 62
    1064:	0f be       	out	0x3f, r0	; 63
    1066:	cd bf       	out	0x3d, r28	; 61
	char str[] = {' ',' ',' ',' ',0xB0,'C',0};
    1068:	87 e0       	ldi	r24, 0x07	; 7
    106a:	ee ea       	ldi	r30, 0xAE	; 174
    106c:	f0 e0       	ldi	r31, 0x00	; 0
    106e:	de 01       	movw	r26, r28
    1070:	11 96       	adiw	r26, 0x01	; 1
    1072:	01 90       	ld	r0, Z+
    1074:	0d 92       	st	X+, r0
    1076:	8a 95       	dec	r24
    1078:	e1 f7       	brne	.-8      	; 0x1072 <mf_setTempDo+0x1e>

	
	if (button_state & (BD_UP | BR_UP))
    107a:	80 91 fa 00 	lds	r24, 0x00FA
    107e:	90 91 fb 00 	lds	r25, 0x00FB
    1082:	9c 01       	movw	r18, r24
    1084:	22 70       	andi	r18, 0x02	; 2
    1086:	34 70       	andi	r19, 0x04	; 4
    1088:	23 2b       	or	r18, r19
    108a:	31 f0       	breq	.+12     	; 0x1098 <mf_setTempDo+0x44>
	{
		if (p.setup_temp_value < MAX_SET_TEMP)
    108c:	80 91 88 01 	lds	r24, 0x0188
    1090:	8a 3f       	cpi	r24, 0xFA	; 250
    1092:	68 f4       	brcc	.+26     	; 0x10ae <mf_setTempDo+0x5a>
			p.setup_temp_value += 5;
    1094:	8b 5f       	subi	r24, 0xFB	; 251
    1096:	09 c0       	rjmp	.+18     	; 0x10aa <mf_setTempDo+0x56>
		restartMenuTimer();
	}
	else if (button_state & (BD_DOWN | BR_DOWN))
    1098:	84 70       	andi	r24, 0x04	; 4
    109a:	98 70       	andi	r25, 0x08	; 8
    109c:	89 2b       	or	r24, r25
    109e:	49 f0       	breq	.+18     	; 0x10b2 <mf_setTempDo+0x5e>
	{
		if (p.setup_temp_value > MIN_SET_TEMP)
    10a0:	80 91 88 01 	lds	r24, 0x0188
    10a4:	8f 31       	cpi	r24, 0x1F	; 31
    10a6:	18 f0       	brcs	.+6      	; 0x10ae <mf_setTempDo+0x5a>
			p.setup_temp_value -= 5;
    10a8:	85 50       	subi	r24, 0x05	; 5
    10aa:	80 93 88 01 	sts	0x0188, r24
//	 Restarts menu state timeout
//	Should be used in RUN function when control buttons are pressed.
//-----------------------------------------------------------------//
static void restartMenuTimer(void)
{
	menuTimer.Timer = 0;
    10ae:	10 92 97 00 	sts	0x0097, r1
			p.setup_temp_value -= 5;
		restartMenuTimer();
	}					
		
	// Output ADC result to LED
	u16toa_align_right(p.setup_temp_value,str,0x80 | 4,' ');
    10b2:	20 e2       	ldi	r18, 0x20	; 32
    10b4:	44 e8       	ldi	r20, 0x84	; 132
    10b6:	be 01       	movw	r22, r28
    10b8:	6f 5f       	subi	r22, 0xFF	; 255
    10ba:	7f 4f       	sbci	r23, 0xFF	; 255
    10bc:	80 91 88 01 	lds	r24, 0x0188
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	d4 d0       	rcall	.+424    	; 0x126c <u16toa_align_right>
	printLedBuffer(0,str);
    10c4:	be 01       	movw	r22, r28
    10c6:	6f 5f       	subi	r22, 0xFF	; 255
    10c8:	7f 4f       	sbci	r23, 0xFF	; 255
    10ca:	80 e0       	ldi	r24, 0x00	; 0
    10cc:	f5 dc       	rcall	.-1558   	; 0xab8 <printLedBuffer>
	
	if (userTimer.FA_GE)
    10ce:	80 91 13 01 	lds	r24, 0x0113
    10d2:	84 ff       	sbrs	r24, 4
    10d4:	03 c0       	rjmp	.+6      	; 0x10dc <mf_setTempDo+0x88>
		setExtraLeds(LED_TEMP);
    10d6:	81 e0       	ldi	r24, 0x01	; 1
    10d8:	35 dd       	rcall	.-1430   	; 0xb44 <setExtraLeds>
    10da:	02 c0       	rjmp	.+4      	; 0x10e0 <mf_setTempDo+0x8c>
	else
		clearExtraLeds(LED_TEMP);
    10dc:	81 e0       	ldi	r24, 0x01	; 1
    10de:	38 dd       	rcall	.-1424   	; 0xb50 <clearExtraLeds>
}
    10e0:	27 96       	adiw	r28, 0x07	; 7
    10e2:	0f b6       	in	r0, 0x3f	; 63
    10e4:	f8 94       	cli
    10e6:	de bf       	out	0x3e, r29	; 62
    10e8:	0f be       	out	0x3f, r0	; 63
    10ea:	cd bf       	out	0x3d, r28	; 61
    10ec:	df 91       	pop	r29
    10ee:	cf 91       	pop	r28
    10f0:	08 95       	ret

000010f2 <mf_realTempSelect>:
//=================================================================//


void mf_realTempSelect(void)
{
	setExtraLeds(LED_TEMP);
    10f2:	81 e0       	ldi	r24, 0x01	; 1
    10f4:	27 cd       	rjmp	.-1458   	; 0xb44 <setExtraLeds>

000010f6 <getMenuFunctionRecord.constprop.0>:
//	Arguments:
//		menuItemID - ID of an item
//		menuRecord - pointer to function structure to fill
//	Output:
//-----------------------------------------------------------------//
static void getMenuFunctionRecord(uint8_t menuItemID, MenuFunctionRecord* menuRecord )
    10f6:	1f 93       	push	r17
    10f8:	cf 93       	push	r28
    10fa:	df 93       	push	r29
    10fc:	c0 e0       	ldi	r28, 0x00	; 0
    10fe:	d0 e0       	ldi	r29, 0x00	; 0
{
	uint8_t i;
	for (i = 0; i < sizeof(menuFunctionSet)/sizeof(MenuFunctionRecord); i++  )
	{
		readMenuRecord(&menuFunctionSet[i], menuRecord);
    1100:	17 e0       	ldi	r17, 0x07	; 7
    1102:	1c 9f       	mul	r17, r28
    1104:	90 01       	movw	r18, r0
    1106:	1d 9f       	mul	r17, r29
    1108:	30 0d       	add	r19, r0
    110a:	11 24       	eor	r1, r1
    110c:	26 5a       	subi	r18, 0xA6	; 166
    110e:	3f 4f       	sbci	r19, 0xFF	; 255
//		fRecPtr		- address of the function record in the FLASH
//		resPtr		- address of the record to fill in the SRAM
//-----------------------------------------------------------------//
static inline void readMenuRecord(const MenuFunctionRecord* fRecPtr, MenuFunctionRecord* resPtr )
{
	resPtr->Item = pgm_read_byte(&fRecPtr->Item);
    1110:	f9 01       	movw	r30, r18
    1112:	94 91       	lpm	r25, Z
	resPtr->SelectFunction = (FuncPtr)pgm_read_word(&fRecPtr->SelectFunction);
    1114:	31 96       	adiw	r30, 0x01	; 1
    1116:	a5 91       	lpm	r26, Z+
    1118:	b4 91       	lpm	r27, Z
	resPtr->RunFunction = (FuncPtr)pgm_read_word(&fRecPtr->RunFunction);
    111a:	f9 01       	movw	r30, r18
    111c:	33 96       	adiw	r30, 0x03	; 3
    111e:	65 91       	lpm	r22, Z+
    1120:	74 91       	lpm	r23, Z
	resPtr->LeaveFunction = (FuncPtr)pgm_read_word(&fRecPtr->LeaveFunction);
    1122:	2b 5f       	subi	r18, 0xFB	; 251
    1124:	3f 4f       	sbci	r19, 0xFF	; 255
    1126:	f9 01       	movw	r30, r18
    1128:	45 91       	lpm	r20, Z+
    112a:	54 91       	lpm	r21, Z
{
	uint8_t i;
	for (i = 0; i < sizeof(menuFunctionSet)/sizeof(MenuFunctionRecord); i++  )
	{
		readMenuRecord(&menuFunctionSet[i], menuRecord);
		if (menuRecord->Item == menuItemID)
    112c:	98 13       	cpse	r25, r24
    112e:	03 c0       	rjmp	.+6      	; 0x1136 <getMenuFunctionRecord.constprop.0+0x40>
    1130:	80 93 0c 01 	sts	0x010C, r24
    1134:	06 c0       	rjmp	.+12     	; 0x1142 <getMenuFunctionRecord.constprop.0+0x4c>
    1136:	21 96       	adiw	r28, 0x01	; 1
//	Output:
//-----------------------------------------------------------------//
static void getMenuFunctionRecord(uint8_t menuItemID, MenuFunctionRecord* menuRecord )
{
	uint8_t i;
	for (i = 0; i < sizeof(menuFunctionSet)/sizeof(MenuFunctionRecord); i++  )
    1138:	ce 30       	cpi	r28, 0x0E	; 14
    113a:	d1 05       	cpc	r29, r1
    113c:	11 f7       	brne	.-60     	; 0x1102 <getMenuFunctionRecord.constprop.0+0xc>
    113e:	90 93 0c 01 	sts	0x010C, r25
    1142:	a0 93 0d 01 	sts	0x010D, r26
    1146:	b0 93 0e 01 	sts	0x010E, r27
    114a:	60 93 0f 01 	sts	0x010F, r22
    114e:	70 93 10 01 	sts	0x0110, r23
    1152:	40 93 11 01 	sts	0x0111, r20
    1156:	50 93 12 01 	sts	0x0112, r21
	{
		readMenuRecord(&menuFunctionSet[i], menuRecord);
		if (menuRecord->Item == menuItemID)
			break;
	}
}
    115a:	df 91       	pop	r29
    115c:	cf 91       	pop	r28
    115e:	1f 91       	pop	r17
    1160:	08 95       	ret

00001162 <InitMenu>:
//	Menu initialization
//	Call this function at start of your program before processMenu()
//-----------------------------------------------------------------//
void InitMenu(void)
{
	selectedMenuItemID = mi_REALTEMP;
    1162:	81 e0       	ldi	r24, 0x01	; 1
    1164:	80 93 0b 01 	sts	0x010B, r24
	getMenuFunctionRecord(selectedMenuItemID, &selectedMenuFunctionRecord);
    1168:	c6 df       	rcall	.-116    	; 0x10f6 <getMenuFunctionRecord.constprop.0>
	processItemFunction(selectedMenuFunctionRecord.SelectFunction);
    116a:	80 91 0d 01 	lds	r24, 0x010D
    116e:	90 91 0e 01 	lds	r25, 0x010E
    1172:	33 cd       	rjmp	.-1434   	; 0xbda <processItemFunction>

00001174 <processMenu>:
//	Main menu control, -  state function calls, jumps 
//	between menu states and indication
//	Call this function from main() with a fixed time interval.
//-----------------------------------------------------------------//
void processMenu(void)
{
    1174:	ff 92       	push	r15
    1176:	0f 93       	push	r16
    1178:	1f 93       	push	r17
    117a:	cf 93       	push	r28
    117c:	df 93       	push	r29
	NextItem_t nextItem;
	uint16_t jumpCondition;
	
	processSoftTimer8b(&menuTimer);	
    117e:	86 e9       	ldi	r24, 0x96	; 150
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	78 d3       	rcall	.+1776   	; 0x1874 <processSoftTimer8b>
	
	// Compose jump condition
	jumpCondition = button_state;		
    1184:	40 91 fa 00 	lds	r20, 0x00FA
    1188:	50 91 fb 00 	lds	r21, 0x00FB
	if (menuTimer.FTop)
    118c:	80 91 96 00 	lds	r24, 0x0096
    1190:	85 fd       	sbrc	r24, 5
		jumpCondition |= TMR_EXP;
    1192:	50 68       	ori	r21, 0x80	; 128
	if (sys_timers.flags & AUTOPOFF_EXPIRED)
    1194:	80 91 a2 00 	lds	r24, 0x00A2
    1198:	84 fd       	sbrc	r24, 4
		jumpCondition |= GOTO_POFF;
    119a:	50 64       	ori	r21, 0x40	; 64
	
	// Get next menu item according to current state and jump conditions
	nextItem = getNextMenuItem(selectedMenuItemID, jumpCondition);
    119c:	80 91 0b 01 	lds	r24, 0x010B
    11a0:	60 e0       	ldi	r22, 0x00	; 0
    11a2:	70 e0       	ldi	r23, 0x00	; 0
	MenuJumpRecord	jRecord;
	uint8_t i;
	
	for (i = 0; i < sizeof(menuJumpSet)/sizeof(MenuJumpRecord); i++  )
	{
		readJumpRecord(&menuJumpSet[i], &jRecord);		// read full jump record
    11a4:	95 e0       	ldi	r25, 0x05	; 5
    11a6:	96 9f       	mul	r25, r22
    11a8:	90 01       	movw	r18, r0
    11aa:	97 9f       	mul	r25, r23
    11ac:	30 0d       	add	r19, r0
    11ae:	11 24       	eor	r1, r1
    11b0:	24 54       	subi	r18, 0x44	; 68
    11b2:	3f 4f       	sbci	r19, 0xFF	; 255
//		jRecPtr		- address of the jump record in the FLASH
//		resPtr		- address of the record to fill in the SRAM
//-----------------------------------------------------------------//
static inline void readJumpRecord(const MenuJumpRecord* jRecPtr, MenuJumpRecord* resPtr )
{
	resPtr->Item = pgm_read_byte(&jRecPtr->Item);
    11b4:	f9 01       	movw	r30, r18
    11b6:	14 91       	lpm	r17, Z
	resPtr->JumpCondition = pgm_read_word(&jRecPtr->JumpCondition);
    11b8:	31 96       	adiw	r30, 0x01	; 1
    11ba:	a5 91       	lpm	r26, Z+
    11bc:	b4 91       	lpm	r27, Z
	resPtr->NextItem= pgm_read_byte(&jRecPtr->NextItem);
    11be:	f9 01       	movw	r30, r18
    11c0:	33 96       	adiw	r30, 0x03	; 3
    11c2:	d4 91       	lpm	r29, Z
	resPtr->Flags= pgm_read_byte(&jRecPtr->Flags);
    11c4:	f9 01       	movw	r30, r18
    11c6:	34 96       	adiw	r30, 0x04	; 4
    11c8:	24 91       	lpm	r18, Z
	uint8_t i;
	
	for (i = 0; i < sizeof(menuJumpSet)/sizeof(MenuJumpRecord); i++  )
	{
		readJumpRecord(&menuJumpSet[i], &jRecord);		// read full jump record
		if (jRecord.Item == selectedItemId)				// If ID match,
    11ca:	18 13       	cpse	r17, r24
    11cc:	0e c0       	rjmp	.+28     	; 0x11ea <processMenu+0x76>
		{
			if ((jRecord.JumpCondition & jmpCond) != 0)		// if any of jump conditions match too,
    11ce:	a4 23       	and	r26, r20
    11d0:	b5 23       	and	r27, r21
    11d2:	ab 2b       	or	r26, r27
    11d4:	51 f0       	breq	.+20     	; 0x11ea <processMenu+0x76>
			{
				nextItem.ItemID = jRecord.NextItem;			// switch to next menu item
				nextItem.ItemTimeout = jRecord.Flags & TIMEOUT_MASK;
    11d6:	c2 2f       	mov	r28, r18
    11d8:	cf 73       	andi	r28, 0x3F	; 63
				nextItem.ShiftRight = (jRecord.Flags & SHIFT_RIGHT) ? 1 : 0;
    11da:	26 fb       	bst	r18, 6
    11dc:	00 27       	eor	r16, r16
    11de:	00 f9       	bld	r16, 0
				nextItem.ShiftLeft = (jRecord.Flags & SHIFT_LEFT) ? 1 : 0;
    11e0:	f2 2e       	mov	r15, r18
    11e2:	ff 1c       	adc	r15, r15
    11e4:	ff 24       	eor	r15, r15
    11e6:	ff 1c       	adc	r15, r15
    11e8:	06 c0       	rjmp	.+12     	; 0x11f6 <processMenu+0x82>
    11ea:	6f 5f       	subi	r22, 0xFF	; 255
    11ec:	7f 4f       	sbci	r23, 0xFF	; 255
	NextItem_t nextItem;
	nextItem.ItemID = selectedItemId;
	MenuJumpRecord	jRecord;
	uint8_t i;
	
	for (i = 0; i < sizeof(menuJumpSet)/sizeof(MenuJumpRecord); i++  )
    11ee:	60 32       	cpi	r22, 0x20	; 32
    11f0:	71 05       	cpc	r23, r1
    11f2:	c9 f6       	brne	.-78     	; 0x11a6 <processMenu+0x32>
		jumpCondition |= TMR_EXP;
	if (sys_timers.flags & AUTOPOFF_EXPIRED)
		jumpCondition |= GOTO_POFF;
	
	// Get next menu item according to current state and jump conditions
	nextItem = getNextMenuItem(selectedMenuItemID, jumpCondition);
    11f4:	d8 2f       	mov	r29, r24
    11f6:	10 e0       	ldi	r17, 0x00	; 0
    11f8:	f0 fa       	bst	r15, 0
    11fa:	10 f9       	bld	r17, 0
    11fc:	00 fb       	bst	r16, 0
    11fe:	11 f9       	bld	r17, 1
	
	// If next item differs from current
	if (nextItem.ItemID != selectedMenuItemID)
    1200:	d8 17       	cp	r29, r24
    1202:	09 f1       	breq	.+66     	; 0x1246 <processMenu+0xd2>
	{		
		// Call exit function for current item
		processItemFunction(selectedMenuFunctionRecord.LeaveFunction);
    1204:	80 91 11 01 	lds	r24, 0x0111
    1208:	90 91 12 01 	lds	r25, 0x0112
    120c:	e6 dc       	rcall	.-1588   	; 0xbda <processItemFunction>
		
		// If shifting is specified, start it before calling any 
		//	new menu item functions 
		if (nextItem.ShiftRight)
    120e:	11 ff       	sbrs	r17, 1
    1210:	02 c0       	rjmp	.+4      	; 0x1216 <processMenu+0xa2>
			startShiftingWindowRight();
    1212:	21 dc       	rcall	.-1982   	; 0xa56 <startShiftingWindowRight>
    1214:	02 c0       	rjmp	.+4      	; 0x121a <processMenu+0xa6>
		else if (nextItem.ShiftLeft)
    1216:	10 fd       	sbrc	r17, 0
			startShiftingWindowLeft();
    1218:	10 dc       	rcall	.-2016   	; 0xa3a <startShiftingWindowLeft>
		
		// Select new item
		selectedMenuItemID = nextItem.ItemID;
    121a:	d0 93 0b 01 	sts	0x010B, r29
		
		// Load from FLASH and save function pointers
		getMenuFunctionRecord(selectedMenuItemID, &selectedMenuFunctionRecord);
    121e:	8d 2f       	mov	r24, r29
    1220:	6a df       	rcall	.-300    	; 0x10f6 <getMenuFunctionRecord.constprop.0>
		// Call select function for next item
		processItemFunction(selectedMenuFunctionRecord.SelectFunction);
    1222:	80 91 0d 01 	lds	r24, 0x010D
    1226:	90 91 0e 01 	lds	r25, 0x010E
    122a:	d7 dc       	rcall	.-1618   	; 0xbda <processItemFunction>
		// Start timer if timeout is enabled
		if (nextItem.ItemTimeout != 0)
    122c:	cc 23       	and	r28, r28
    122e:	c1 f0       	breq	.+48     	; 0x1260 <processMenu+0xec>
		{
			menuTimer.Top = nextItem.ItemTimeout * MENU_TIMEOUT_MULT;
    1230:	cc 0f       	add	r28, r28
    1232:	c0 93 98 00 	sts	0x0098, r28
			menuTimer.Timer = 0;
    1236:	10 92 97 00 	sts	0x0097, r1
			menuTimer.Enabled = 1;	
    123a:	80 91 96 00 	lds	r24, 0x0096
    123e:	81 60       	ori	r24, 0x01	; 1
    1240:	80 93 96 00 	sts	0x0096, r24
    1244:	0d c0       	rjmp	.+26     	; 0x1260 <processMenu+0xec>
		}
		
	}
	else
	{
		processSoftTimer8b(&userTimer);
    1246:	83 e1       	ldi	r24, 0x13	; 19
    1248:	91 e0       	ldi	r25, 0x01	; 1
    124a:	14 d3       	rcall	.+1576   	; 0x1874 <processSoftTimer8b>
		// Stay at previous item
		processItemFunction(selectedMenuFunctionRecord.RunFunction);
    124c:	80 91 0f 01 	lds	r24, 0x010F
    1250:	90 91 10 01 	lds	r25, 0x0110
	}	
}
    1254:	df 91       	pop	r29
    1256:	cf 91       	pop	r28
    1258:	1f 91       	pop	r17
    125a:	0f 91       	pop	r16
    125c:	ff 90       	pop	r15
	}
	else
	{
		processSoftTimer8b(&userTimer);
		// Stay at previous item
		processItemFunction(selectedMenuFunctionRecord.RunFunction);
    125e:	bd cc       	rjmp	.-1670   	; 0xbda <processItemFunction>
	}	
}
    1260:	df 91       	pop	r29
    1262:	cf 91       	pop	r28
    1264:	1f 91       	pop	r17
    1266:	0f 91       	pop	r16
    1268:	ff 90       	pop	r15
    126a:	08 95       	ret

0000126c <u16toa_align_right>:
// Converts uint16_t value into decimal string with right alignment
// len = number of digits output (without terminating '\0')
// len[7] = 1 -> no terminating '\0' at buffer[len]
// fill_char -> char used for string padding
void u16toa_align_right(uint16_t val, char *buffer, uint8_t len,char fill_char)
{
    126c:	cf 93       	push	r28
    126e:	df 93       	push	r29
	if (len & 0x80)
    1270:	47 ff       	sbrs	r20, 7
    1272:	05 c0       	rjmp	.+10     	; 0x127e <u16toa_align_right+0x12>
	{
		len = len & 0x7F;
    1274:	4f 77       	andi	r20, 0x7F	; 127
		buffer += len;	
    1276:	fb 01       	movw	r30, r22
    1278:	e4 0f       	add	r30, r20
    127a:	f1 1d       	adc	r31, r1
    127c:	04 c0       	rjmp	.+8      	; 0x1286 <u16toa_align_right+0x1a>
	}
	else
	{
		buffer += len;	
    127e:	fb 01       	movw	r30, r22
    1280:	e4 0f       	add	r30, r20
    1282:	f1 1d       	adc	r31, r1
		*buffer = 0;
    1284:	10 82       	st	Z, r1
	}
	
	do
	{
		*--buffer = val % 10 + '0';
    1286:	ca e0       	ldi	r28, 0x0A	; 10
    1288:	d0 e0       	ldi	r29, 0x00	; 0
    128a:	be 01       	movw	r22, r28
    128c:	18 d4       	rcall	.+2096   	; 0x1abe <__udivmodhi4>
    128e:	80 5d       	subi	r24, 0xD0	; 208
    1290:	82 93       	st	-Z, r24
		val /= 10;
    1292:	cb 01       	movw	r24, r22
		len--;
    1294:	41 50       	subi	r20, 0x01	; 1
	}
	while ((val != 0) && len);
    1296:	00 97       	sbiw	r24, 0x00	; 0
    1298:	21 f0       	breq	.+8      	; 0x12a2 <u16toa_align_right+0x36>
    129a:	41 11       	cpse	r20, r1
    129c:	f6 cf       	rjmp	.-20     	; 0x128a <u16toa_align_right+0x1e>
    129e:	01 c0       	rjmp	.+2      	; 0x12a2 <u16toa_align_right+0x36>
	
	// Padding
	while(len--)
		*--buffer = fill_char;
    12a0:	22 93       	st	-Z, r18
		len--;
	}
	while ((val != 0) && len);
	
	// Padding
	while(len--)
    12a2:	41 50       	subi	r20, 0x01	; 1
    12a4:	e8 f7       	brcc	.-6      	; 0x12a0 <u16toa_align_right+0x34>
		*--buffer = fill_char;
}
    12a6:	df 91       	pop	r29
    12a8:	cf 91       	pop	r28
    12aa:	08 95       	ret

000012ac <i32toa_align_right>:



void i32toa_align_right(int32_t val, char *buffer, uint8_t len)
{
    12ac:	cf 92       	push	r12
    12ae:	df 92       	push	r13
    12b0:	ef 92       	push	r14
    12b2:	ff 92       	push	r15
    12b4:	0f 93       	push	r16
    12b6:	1f 93       	push	r17
    12b8:	cf 93       	push	r28
    12ba:	df 93       	push	r29
    12bc:	12 2f       	mov	r17, r18
	uint8_t is_negative = (val < 0) ? 1 : 0;
    12be:	6b 01       	movw	r12, r22
    12c0:	7c 01       	movw	r14, r24
    12c2:	cc 24       	eor	r12, r12
    12c4:	f7 fc       	sbrc	r15, 7
    12c6:	c3 94       	inc	r12
    12c8:	dd 24       	eor	r13, r13
    12ca:	ee 24       	eor	r14, r14
    12cc:	ff 24       	eor	r15, r15
    12ce:	0c 2d       	mov	r16, r12
	if (is_negative)
    12d0:	cc 20       	and	r12, r12
    12d2:	39 f0       	breq	.+14     	; 0x12e2 <i32toa_align_right+0x36>
		val = -val;
    12d4:	90 95       	com	r25
    12d6:	80 95       	com	r24
    12d8:	70 95       	com	r23
    12da:	61 95       	neg	r22
    12dc:	7f 4f       	sbci	r23, 0xFF	; 255
    12de:	8f 4f       	sbci	r24, 0xFF	; 255
    12e0:	9f 4f       	sbci	r25, 0xFF	; 255
		
	buffer += len;	
    12e2:	ea 01       	movw	r28, r20
    12e4:	c1 0f       	add	r28, r17
    12e6:	d1 1d       	adc	r29, r1
	*buffer = 0;
    12e8:	18 82       	st	Y, r1
	
	do
	{
		*--buffer = val % 10 + '0';
    12ea:	2a e0       	ldi	r18, 0x0A	; 10
    12ec:	c2 2e       	mov	r12, r18
    12ee:	d1 2c       	mov	r13, r1
    12f0:	e1 2c       	mov	r14, r1
    12f2:	f1 2c       	mov	r15, r1
    12f4:	a7 01       	movw	r20, r14
    12f6:	96 01       	movw	r18, r12
    12f8:	2b d4       	rcall	.+2134   	; 0x1b50 <__divmodsi4>
    12fa:	60 5d       	subi	r22, 0xD0	; 208
    12fc:	6a 93       	st	-Y, r22
		val /= 10;
    12fe:	b9 01       	movw	r22, r18
    1300:	ca 01       	movw	r24, r20
		len--;
    1302:	11 50       	subi	r17, 0x01	; 1
	}
	while ((val != 0) && len);
    1304:	61 15       	cp	r22, r1
    1306:	71 05       	cpc	r23, r1
    1308:	81 05       	cpc	r24, r1
    130a:	91 05       	cpc	r25, r1
    130c:	19 f0       	breq	.+6      	; 0x1314 <i32toa_align_right+0x68>
    130e:	11 11       	cpse	r17, r1
    1310:	f1 cf       	rjmp	.-30     	; 0x12f4 <i32toa_align_right+0x48>
    1312:	08 c0       	rjmp	.+16     	; 0x1324 <i32toa_align_right+0x78>
	
	if ( (len) && (is_negative) )
    1314:	11 23       	and	r17, r17
    1316:	31 f0       	breq	.+12     	; 0x1324 <i32toa_align_right+0x78>
    1318:	00 23       	and	r16, r16
    131a:	21 f0       	breq	.+8      	; 0x1324 <i32toa_align_right+0x78>
	{
		*--buffer = '-';
    131c:	21 97       	sbiw	r28, 0x01	; 1
    131e:	8d e2       	ldi	r24, 0x2D	; 45
    1320:	88 83       	st	Y, r24
		len--;	
    1322:	11 50       	subi	r17, 0x01	; 1
	}	
	
	// Padding
	while(len--)
		*--buffer = ' ';
    1324:	80 e2       	ldi	r24, 0x20	; 32
    1326:	01 c0       	rjmp	.+2      	; 0x132a <i32toa_align_right+0x7e>
    1328:	8a 93       	st	-Y, r24
		*--buffer = '-';
		len--;	
	}	
	
	// Padding
	while(len--)
    132a:	11 50       	subi	r17, 0x01	; 1
    132c:	e8 f7       	brcc	.-6      	; 0x1328 <i32toa_align_right+0x7c>
		*--buffer = ' ';
	
}
    132e:	df 91       	pop	r29
    1330:	cf 91       	pop	r28
    1332:	1f 91       	pop	r17
    1334:	0f 91       	pop	r16
    1336:	ff 90       	pop	r15
    1338:	ef 90       	pop	r14
    133a:	df 90       	pop	r13
    133c:	cf 90       	pop	r12
    133e:	08 95       	ret

00001340 <logI32p>:
	u16toa_align_right(val,str,6,' ');
	USART_sendstr(str);
}

static void logI32p(int32_t val)
{
    1340:	cf 93       	push	r28
    1342:	df 93       	push	r29
    1344:	cd b7       	in	r28, 0x3d	; 61
    1346:	de b7       	in	r29, 0x3e	; 62
    1348:	2c 97       	sbiw	r28, 0x0c	; 12
    134a:	0f b6       	in	r0, 0x3f	; 63
    134c:	f8 94       	cli
    134e:	de bf       	out	0x3e, r29	; 62
    1350:	0f be       	out	0x3f, r0	; 63
    1352:	cd bf       	out	0x3d, r28	; 61
	char str[12];
	i32toa_align_right(val,str,12);
    1354:	2c e0       	ldi	r18, 0x0C	; 12
    1356:	ae 01       	movw	r20, r28
    1358:	4f 5f       	subi	r20, 0xFF	; 255
    135a:	5f 4f       	sbci	r21, 0xFF	; 255
    135c:	a7 df       	rcall	.-178    	; 0x12ac <i32toa_align_right>
	USART_sendstr(str);
    135e:	ce 01       	movw	r24, r28
    1360:	01 96       	adiw	r24, 0x01	; 1
    1362:	8f d3       	rcall	.+1822   	; 0x1a82 <USART_sendstr>
}
    1364:	2c 96       	adiw	r28, 0x0c	; 12
    1366:	0f b6       	in	r0, 0x3f	; 63
    1368:	f8 94       	cli
    136a:	de bf       	out	0x3e, r29	; 62
    136c:	0f be       	out	0x3f, r0	; 63
    136e:	cd bf       	out	0x3d, r28	; 61
    1370:	df 91       	pop	r29
    1372:	cf 91       	pop	r28
    1374:	08 95       	ret

00001376 <logU16p>:
    }
}


static void logU16p(uint16_t val)
{
    1376:	cf 93       	push	r28
    1378:	df 93       	push	r29
    137a:	00 d0       	rcall	.+0      	; 0x137c <logU16p+0x6>
    137c:	00 d0       	rcall	.+0      	; 0x137e <logU16p+0x8>
    137e:	00 d0       	rcall	.+0      	; 0x1380 <logU16p+0xa>
    1380:	cd b7       	in	r28, 0x3d	; 61
    1382:	de b7       	in	r29, 0x3e	; 62
	char str[6];
	u16toa_align_right(val,str,6,' ');
    1384:	20 e2       	ldi	r18, 0x20	; 32
    1386:	46 e0       	ldi	r20, 0x06	; 6
    1388:	be 01       	movw	r22, r28
    138a:	6f 5f       	subi	r22, 0xFF	; 255
    138c:	7f 4f       	sbci	r23, 0xFF	; 255
    138e:	6e df       	rcall	.-292    	; 0x126c <u16toa_align_right>
	USART_sendstr(str);
    1390:	ce 01       	movw	r24, r28
    1392:	01 96       	adiw	r24, 0x01	; 1
    1394:	76 d3       	rcall	.+1772   	; 0x1a82 <USART_sendstr>
}
    1396:	26 96       	adiw	r28, 0x06	; 6
    1398:	0f b6       	in	r0, 0x3f	; 63
    139a:	f8 94       	cli
    139c:	de bf       	out	0x3e, r29	; 62
    139e:	0f be       	out	0x3f, r0	; 63
    13a0:	cd bf       	out	0x3d, r28	; 61
    13a2:	df 91       	pop	r29
    13a4:	cf 91       	pop	r28
    13a6:	08 95       	ret

000013a8 <init_system_io>:
//extern void powTest(void);

void init_system_io()
{
	// Setup Port D
	PORTD = 0;//(1<<PD_SYNCA | 1<<PD_SYNCB);
    13a8:	12 ba       	out	0x12, r1	; 18
	DDRD = (1<<PD_TXD | 1<<PD_M1 | 1<<PD_M2 | 1<<PD_HEATER | 1<<PD_HEAT_INDIC );
    13aa:	8e e3       	ldi	r24, 0x3E	; 62
    13ac:	81 bb       	out	0x11, r24	; 17
	
	// Setup Port B
	PORTB = 0;
    13ae:	18 ba       	out	0x18, r1	; 24
	DDRB = (1<<PB_BEEPER | 1<<PB_LED_DOUT | 1<<PB_LED_CLK | 1<<PB_SEGF | 1<<PB_SEGG | 1<<PB_SEGH);
    13b0:	8f e3       	ldi	r24, 0x3F	; 63
    13b2:	87 bb       	out	0x17, r24	; 23
	
	PORTC = 0;
    13b4:	15 ba       	out	0x15, r1	; 21
	DDRC = (1<<PC_SEGA | 1<<PC_SEGB | 1<<PC_SEGC | 1<<PC_SEGD | 1<<PC_SEGE);	
    13b6:	8f e1       	ldi	r24, 0x1F	; 31
    13b8:	84 bb       	out	0x14, r24	; 20

	// Setup timer0
	// 1/1024 prescaler, T=64us @16MHz
	TCCR0 = (1<<CS02 | 0<<CS01 | 1<<CS00);
    13ba:	85 e0       	ldi	r24, 0x05	; 5
    13bc:	83 bf       	out	0x33, r24	; 51
	TCNT0 = 0;
    13be:	12 be       	out	0x32, r1	; 50
	// Clear interrupt flag
	TIFR |= (1<<TOV0);
    13c0:	88 b7       	in	r24, 0x38	; 56
    13c2:	81 60       	ori	r24, 0x01	; 1
    13c4:	88 bf       	out	0x38, r24	; 56
	// Enable interrupts from timer 0
	TIMSK |= (1<<TOIE0);
    13c6:	89 b7       	in	r24, 0x39	; 57
    13c8:	81 60       	ori	r24, 0x01	; 1
    13ca:	89 bf       	out	0x39, r24	; 57
	
	// Setup timer2 as 1ms system frequency generator
	// 1/64 prescaler, CTC mode, OC2 disconnected
	TCCR2 = (1<<CS22 | 1<<WGM21);
    13cc:	8c e0       	ldi	r24, 0x0C	; 12
    13ce:	85 bd       	out	0x25, r24	; 37
	OCR2 = 249;						// 1ms @ 16MHz
    13d0:	89 ef       	ldi	r24, 0xF9	; 249
    13d2:	83 bd       	out	0x23, r24	; 35
	TIMSK |= (1<<OCIE2);
    13d4:	89 b7       	in	r24, 0x39	; 57
    13d6:	80 68       	ori	r24, 0x80	; 128
    13d8:	89 bf       	out	0x39, r24	; 57
	
	// Setup timer1 as beeper frequency generator
	// CTC mode, 1/64 prescaler
	TCCR1A = 0;
    13da:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = (1<<WGM12 | 1<<CS11 | 1<<CS10);
    13dc:	8b e0       	ldi	r24, 0x0B	; 11
    13de:	8e bd       	out	0x2e, r24	; 46
	// 1kHz beeper frequency default
	OCR1A = 127;
    13e0:	8f e7       	ldi	r24, 0x7F	; 127
    13e2:	90 e0       	ldi	r25, 0x00	; 0
    13e4:	9b bd       	out	0x2b, r25	; 43
    13e6:	8a bd       	out	0x2a, r24	; 42

	// Setup AC sync comparator
	// Interrupt on output toggle
	ACSR = (1<<ACIE | 0<<ACIS1 | 0<<ACIS0);
    13e8:	88 e0       	ldi	r24, 0x08	; 8
    13ea:	88 b9       	out	0x08, r24	; 8
	
	// Setup ADC
	// Internal Vref + cap, input ADC5, 
	ADMUX = (1<<REFS1 | 1<<REFS0 | 0<<MUX3 | 1<<MUX2 | 0<<MUX1 | 1<<MUX0 );
    13ec:	85 ec       	ldi	r24, 0xC5	; 197
    13ee:	87 b9       	out	0x07, r24	; 7
	// Prescaler = 128
	ADCSRA = (1<<ADEN |/* 1<<ADFR |*/  1<<ADIE | 1<<ADPS2 | 1<<ADPS1 | 1<<ADPS0);
    13f0:	8f e8       	ldi	r24, 0x8F	; 143
    13f2:	86 b9       	out	0x06, r24	; 6
	
	// Setup USART
	// Double speed
	UCSRA = (1<<U2X);
    13f4:	82 e0       	ldi	r24, 0x02	; 2
    13f6:	8b b9       	out	0x0b, r24	; 11
	UCSRB = (1<<RXEN | 1<<TXEN | 0<<UCSZ2);
    13f8:	88 e1       	ldi	r24, 0x18	; 24
    13fa:	8a b9       	out	0x0a, r24	; 10
	// No parity, 1 stop bit, 8 bit
	UCSRC = (1<<URSEL | 0<<UPM1 | 0<<UPM0 | 0<<USBS | 1<<UCSZ1 | 1<<UCSZ0);
    13fc:	86 e8       	ldi	r24, 0x86	; 134
    13fe:	80 bd       	out	0x20, r24	; 32
	// 57600 @16MHz, 2x
	UBRRH=0x00;
    1400:	10 bc       	out	0x20, r1	; 32
	UBRRL=0x22;
    1402:	82 e2       	ldi	r24, 0x22	; 34
    1404:	89 b9       	out	0x09, r24	; 9
    1406:	08 95       	ret

00001408 <main>:
}



int main(void)
{
    1408:	cf 93       	push	r28
    140a:	df 93       	push	r29
    140c:	1f 92       	push	r1
    140e:	cd b7       	in	r28, 0x3d	; 61
    1410:	de b7       	in	r29, 0x3e	; 62
	char str[12];
	volatile uint8_t temp8u = 0x00;
    1412:	19 82       	std	Y+1, r1	; 0x01
	//temp16u = 1200;
	//logI32p(temp16u);
	//i32toa_align_right(temp16u,str,12);
	
	// Initialize MCU IO
	init_system_io();
    1414:	c9 df       	rcall	.-110    	; 0x13a8 <init_system_io>
	// Restore params from EEPROM
	restoreGlobalParams();
    1416:	43 da       	rcall	.-2938   	; 0x89e <restoreGlobalParams>
	// Calibrate ADC coefficients using restored params
	calculateCoeffs();
    1418:	ff d6       	rcall	.+3582   	; 0x2218 <__data_load_end+0x568>
	// Initialize LED indicator
	initLedIndicator();
    141a:	2b db       	rcall	.-2474   	; 0xa72 <initLedIndicator>
	// Clear comparator interrupt flag to prevent false triggering
	ACSR |= (1<<ACI);
    141c:	44 9a       	sbi	0x08, 4	; 8
	sei();
    141e:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1420:	2f ef       	ldi	r18, 0xFF	; 255
    1422:	80 e7       	ldi	r24, 0x70	; 112
    1424:	92 e0       	ldi	r25, 0x02	; 2
    1426:	21 50       	subi	r18, 0x01	; 1
    1428:	80 40       	sbci	r24, 0x00	; 0
    142a:	90 40       	sbci	r25, 0x00	; 0
    142c:	e1 f7       	brne	.-8      	; 0x1426 <main+0x1e>
    142e:	00 c0       	rjmp	.+0      	; 0x1430 <main+0x28>
    1430:	00 00       	nop
	// Safety delay for power part
	_delay_ms(50);
	// Check AC line
	if(p_state == 0x0F) 	
    1432:	80 91 9a 00 	lds	r24, 0x009A
    1436:	8f 30       	cpi	r24, 0x0F	; 15
    1438:	69 f4       	brne	.+26     	; 0x1454 <main+0x4c>
	{
		// Power control state machine has not changed - sync has not been detected
		printLedBuffer(0,"AC ERR");
    143a:	6f ed       	ldi	r22, 0xDF	; 223
    143c:	70 e0       	ldi	r23, 0x00	; 0
    143e:	80 e0       	ldi	r24, 0x00	; 0
    1440:	3b db       	rcall	.-2442   	; 0xab8 <printLedBuffer>
    1442:	2f ef       	ldi	r18, 0xFF	; 255
    1444:	83 ed       	ldi	r24, 0xD3	; 211
    1446:	90 e3       	ldi	r25, 0x30	; 48
    1448:	21 50       	subi	r18, 0x01	; 1
    144a:	80 40       	sbci	r24, 0x00	; 0
    144c:	90 40       	sbci	r25, 0x00	; 0
    144e:	e1 f7       	brne	.-8      	; 0x1448 <main+0x40>
    1450:	00 c0       	rjmp	.+0      	; 0x1452 <main+0x4a>
    1452:	00 00       	nop
		_delay_ms(1000);
	}
	// Initialize menu
	InitMenu();
    1454:	86 de       	rcall	.-756    	; 0x1162 <InitMenu>
	// Beep
	SetBeeperFreq(1000);
    1456:	88 ee       	ldi	r24, 0xE8	; 232
    1458:	93 e0       	ldi	r25, 0x03	; 3
    145a:	a2 d2       	rcall	.+1348   	; 0x19a0 <SetBeeperFreq>
	StartBeep(200);
    145c:	88 ec       	ldi	r24, 0xC8	; 200
    145e:	90 e0       	ldi	r25, 0x00	; 0
    1460:	bf d2       	rcall	.+1406   	; 0x19e0 <StartBeep>
	// ---- TODO: check out when PID will be finished ----//
	// When we get here, few ADC counts have been sampled.
	update_normalized_adc();
    1462:	de d7       	rcall	.+4028   	; 0x2420 <__data_load_end+0x770>
	// Call PID controler function in order to initialize it's internal structures
	heaterInit();
    1464:	c7 d9       	rcall	.-3186   	; 0x7f4 <heaterInit>
	//----------------------------------------------------//
	// Start rotating
	setMotorDirection(ROLL_FWD);
    1466:	81 e0       	ldi	r24, 0x01	; 1
    1468:	89 d0       	rcall	.+274    	; 0x157c <setMotorDirection>
	// Clear timer
	menuUpdateTimer.FOvfl = 0;
    146a:	80 91 a3 00 	lds	r24, 0x00A3
    146e:	8f 7b       	andi	r24, 0xBF	; 191
    1470:	80 93 a3 00 	sts	0x00A3, r24

    while(1)
    {
		
		if (menuUpdateTimer.FOvfl)
    1474:	80 91 a3 00 	lds	r24, 0x00A3
    1478:	86 ff       	sbrs	r24, 6
    147a:	fc cf       	rjmp	.-8      	; 0x1474 <main+0x6c>
		{
			//--------- BUTTONS ----------//
			
			// Get new button state
			process_buttons();
    147c:	09 d8       	rcall	.-4078   	; 0x490 <process_buttons>
			
			// Give sound feedback
			if (button_state & BL_MENU)
    147e:	80 91 fa 00 	lds	r24, 0x00FA
    1482:	90 91 fb 00 	lds	r25, 0x00FB
    1486:	91 ff       	sbrs	r25, 1
    1488:	03 c0       	rjmp	.+6      	; 0x1490 <main+0x88>
			{
				SetBeeperFreq(800);
    148a:	80 e2       	ldi	r24, 0x20	; 32
    148c:	93 e0       	ldi	r25, 0x03	; 3
    148e:	06 c0       	rjmp	.+12     	; 0x149c <main+0x94>
				StartBeep(40);
			}
			else if (button_action_down & (BD_MENU | BD_UP | BD_DOWN | BD_HEATCTRL))
    1490:	80 91 f9 00 	lds	r24, 0x00F9
    1494:	87 74       	andi	r24, 0x47	; 71
    1496:	31 f0       	breq	.+12     	; 0x14a4 <main+0x9c>
			{
				SetBeeperFreq(1000);
    1498:	88 ee       	ldi	r24, 0xE8	; 232
    149a:	93 e0       	ldi	r25, 0x03	; 3
    149c:	81 d2       	rcall	.+1282   	; 0x19a0 <SetBeeperFreq>
				StartBeep(40);
    149e:	88 e2       	ldi	r24, 0x28	; 40
    14a0:	90 e0       	ldi	r25, 0x00	; 0
    14a2:	9e d2       	rcall	.+1340   	; 0x19e0 <StartBeep>
			}	
			// Direction control buttons sounds get special processing at processRollControl()
			
			// If any button is pressed, restart power off interval
			if (button_action_down)
    14a4:	80 91 f9 00 	lds	r24, 0x00F9
    14a8:	81 11       	cpse	r24, r1
				resetAutoPowerOffCounter();
    14aa:	77 d2       	rcall	.+1262   	; 0x199a <resetAutoPowerOffCounter>
			
			//---------- TIMERS ----------//
			
			// Process timers and time counters - it is important to call
			// this function before menu and power controls processing
			processSystemTimers();
    14ac:	0f d2       	rcall	.+1054   	; 0x18cc <processSystemTimers>

			// Warn user about near auto powering off
			if (sys_timers.flags & AUTOPOFF_SOON)
    14ae:	80 91 a2 00 	lds	r24, 0x00A2
    14b2:	83 ff       	sbrs	r24, 3
    14b4:	06 c0       	rjmp	.+12     	; 0x14c2 <main+0xba>
			{
				SetBeeperFreq(1200);
    14b6:	80 eb       	ldi	r24, 0xB0	; 176
    14b8:	94 e0       	ldi	r25, 0x04	; 4
    14ba:	72 d2       	rcall	.+1252   	; 0x19a0 <SetBeeperFreq>
				StartBeep(200);
    14bc:	88 ec       	ldi	r24, 0xC8	; 200
    14be:	90 e0       	ldi	r25, 0x00	; 0
    14c0:	8f d2       	rcall	.+1310   	; 0x19e0 <StartBeep>
			}		
			
			//----------- ADC ------------//
			
			// Get new temperature measurement
			update_normalized_adc();			
    14c2:	ae d7       	rcall	.+3932   	; 0x2420 <__data_load_end+0x770>
		
			// Update indicated Celsius degree
			if (sys_timers.flags & EXPIRED_CELSIUS)
    14c4:	80 91 a2 00 	lds	r24, 0x00A2
    14c8:	80 fd       	sbrc	r24, 0
				update_Celsius();		
    14ca:	f3 d6       	rcall	.+3558   	; 0x22b2 <__data_load_end+0x602>
			
			//----------- MENU -----------//		
				
			// Process user menu states, settings and indication
			processMenu();
    14cc:	53 de       	rcall	.-858    	; 0x1174 <processMenu>
			
			//--------- CONTROLS ---------//		
			
			// Process cyclic rolling, direction control
			processRollControl();	
    14ce:	25 d8       	rcall	.-4022   	; 0x51a <processRollControl>
			
			// Process heater regulation
			processHeaterControl();
    14d0:	27 d9       	rcall	.-3506   	; 0x720 <processHeaterControl>
		
			// Process heater events and warnings
			processHeaterAlerts();
    14d2:	97 d9       	rcall	.-3282   	; 0x802 <processHeaterAlerts>
			
			
			
			//------- LOG to UART --------//	
			if (sys_timers.flags & EXPIRED_LOG)
    14d4:	80 91 a2 00 	lds	r24, 0x00A2
    14d8:	85 ff       	sbrs	r24, 5
    14da:	c7 cf       	rjmp	.-114    	; 0x146a <main+0x62>
			{
				
				logU16p(adc_celsius);					// Actual temp Celsius
    14dc:	80 91 57 01 	lds	r24, 0x0157
    14e0:	90 91 58 01 	lds	r25, 0x0158
    14e4:	48 df       	rcall	.-368    	; 0x1376 <logU16p>
				logU16p(adc_oversampled);				// Actual temp (ADC), oversampled
    14e6:	80 91 2b 01 	lds	r24, 0x012B
    14ea:	90 91 2c 01 	lds	r25, 0x012C
    14ee:	43 df       	rcall	.-378    	; 0x1376 <logU16p>
				logU16p(adc_filtered);					// Actual temp (ADC), oversampled, filtered
    14f0:	80 91 29 01 	lds	r24, 0x0129
    14f4:	90 91 2a 01 	lds	r25, 0x012A
    14f8:	3e df       	rcall	.-388    	; 0x1376 <logU16p>
				USART_sendstr("    ");
    14fa:	86 ee       	ldi	r24, 0xE6	; 230
    14fc:	90 e0       	ldi	r25, 0x00	; 0
    14fe:	c1 d2       	rcall	.+1410   	; 0x1a82 <USART_sendstr>
				
				logU16p(dbg_SetPointPID);				// Temp setting, as input to PID
    1500:	80 91 9e 01 	lds	r24, 0x019E
    1504:	90 91 9f 01 	lds	r25, 0x019F
    1508:	36 df       	rcall	.-404    	; 0x1376 <logU16p>
				logU16p(dbg_RealTempPID);				// Real temp, sampled for PID input
    150a:	80 91 90 01 	lds	r24, 0x0190
    150e:	90 91 91 01 	lds	r25, 0x0191
    1512:	31 df       	rcall	.-414    	; 0x1376 <logU16p>
				
				logI32p(dbg_PID_p_term);				// p term
    1514:	60 91 8e 01 	lds	r22, 0x018E
    1518:	70 91 8f 01 	lds	r23, 0x018F
    151c:	88 27       	eor	r24, r24
    151e:	77 fd       	sbrc	r23, 7
    1520:	80 95       	com	r24
    1522:	98 2f       	mov	r25, r24
    1524:	0d df       	rcall	.-486    	; 0x1340 <logI32p>
				logI32p(dbg_PID_d_term);				// d term
    1526:	60 91 9c 01 	lds	r22, 0x019C
    152a:	70 91 9d 01 	lds	r23, 0x019D
    152e:	88 27       	eor	r24, r24
    1530:	77 fd       	sbrc	r23, 7
    1532:	80 95       	com	r24
    1534:	98 2f       	mov	r25, r24
    1536:	04 df       	rcall	.-504    	; 0x1340 <logI32p>
				logI32p(dbg_PID_i_term);				// i term
    1538:	60 91 92 01 	lds	r22, 0x0192
    153c:	70 91 93 01 	lds	r23, 0x0193
    1540:	88 27       	eor	r24, r24
    1542:	77 fd       	sbrc	r23, 7
    1544:	80 95       	com	r24
    1546:	98 2f       	mov	r25, r24
    1548:	fb de       	rcall	.-522    	; 0x1340 <logI32p>
				USART_sendstr("    ");
    154a:	86 ee       	ldi	r24, 0xE6	; 230
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	99 d2       	rcall	.+1330   	; 0x1a82 <USART_sendstr>
				
				logU16p(dbg_PID_output);				// PID output
    1550:	80 91 8c 01 	lds	r24, 0x018C
    1554:	90 91 8d 01 	lds	r25, 0x018D
    1558:	0e df       	rcall	.-484    	; 0x1376 <logU16p>
			
				USART_sendstr("\n\r");
    155a:	8b ee       	ldi	r24, 0xEB	; 235
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	91 d2       	rcall	.+1314   	; 0x1a82 <USART_sendstr>
    1560:	84 cf       	rjmp	.-248    	; 0x146a <main+0x62>

00001562 <setHeaterPower>:

// User function to control heater intensity
void setHeaterPower(uint16_t value)
{
	// Disable interrupts from analog comparator
	ACSR &= ~(1<<ACIE);
    1562:	43 98       	cbi	0x08, 3	; 8
	// Update value
	heaterPower = (value > HEATER_MAX_POWER) ? HEATER_MAX_POWER : value;
    1564:	9c 01       	movw	r18, r24
    1566:	85 36       	cpi	r24, 0x65	; 101
    1568:	91 05       	cpc	r25, r1
    156a:	10 f0       	brcs	.+4      	; 0x1570 <setHeaterPower+0xe>
    156c:	24 e6       	ldi	r18, 0x64	; 100
    156e:	30 e0       	ldi	r19, 0x00	; 0
    1570:	30 93 1c 01 	sts	0x011C, r19
    1574:	20 93 1b 01 	sts	0x011B, r18
	// Reenable interrupts
	ACSR |= (1<<ACIE);
    1578:	43 9a       	sbi	0x08, 3	; 8
    157a:	08 95       	ret

0000157c <setMotorDirection>:

// User function to control motor rotation
void setMotorDirection(uint8_t dir)
{
	// Disable interrupts from timer0 
	TIMSK &= ~(1<<TOIE0);
    157c:	99 b7       	in	r25, 0x39	; 57
    157e:	9e 7f       	andi	r25, 0xFE	; 254
    1580:	99 bf       	out	0x39, r25	; 57
		
	newDirReq = dir;	// save new direction request
    1582:	80 93 1d 01 	sts	0x011D, r24
	dirChangedMask = ~ROLL_DIR_CHANGED;
    1586:	9f ed       	ldi	r25, 0xDF	; 223
    1588:	90 93 9b 00 	sts	0x009B, r25
	
	if (dir & ROLL_FWD)
    158c:	80 ff       	sbrs	r24, 0
    158e:	09 c0       	rjmp	.+18     	; 0x15a2 <setMotorDirection+0x26>
		bottomPoint = rollPoint;
    1590:	80 91 1e 01 	lds	r24, 0x011E
    1594:	90 91 1f 01 	lds	r25, 0x011F
    1598:	90 93 21 01 	sts	0x0121, r25
    159c:	80 93 20 01 	sts	0x0120, r24
    15a0:	0a c0       	rjmp	.+20     	; 0x15b6 <setMotorDirection+0x3a>
	else if (dir & ROLL_REV)
    15a2:	81 ff       	sbrs	r24, 1
    15a4:	08 c0       	rjmp	.+16     	; 0x15b6 <setMotorDirection+0x3a>
		topPoint = rollPoint;
    15a6:	80 91 1e 01 	lds	r24, 0x011E
    15aa:	90 91 1f 01 	lds	r25, 0x011F
    15ae:	90 93 23 01 	sts	0x0123, r25
    15b2:	80 93 22 01 	sts	0x0122, r24

	// Enable interrupts from timer 0
	TIMSK |= (1<<TOIE0);	
    15b6:	89 b7       	in	r24, 0x39	; 57
    15b8:	81 60       	ori	r24, 0x01	; 1
    15ba:	89 bf       	out	0x39, r24	; 57
    15bc:	08 95       	ret

000015be <stopCycleRolling>:
}

void stopCycleRolling(uint8_t doResetPoints)
{
	// Disable interrupts from timer0 
	TIMSK &= ~(1<<TOIE0);
    15be:	99 b7       	in	r25, 0x39	; 57
    15c0:	9e 7f       	andi	r25, 0xFE	; 254
    15c2:	99 bf       	out	0x39, r25	; 57
	
	rollState &= ~ROLL_CYCLE;
    15c4:	90 91 1a 01 	lds	r25, 0x011A
    15c8:	9b 7f       	andi	r25, 0xFB	; 251
    15ca:	90 93 1a 01 	sts	0x011A, r25
	if (doResetPoints)
    15ce:	88 23       	and	r24, r24
    15d0:	71 f0       	breq	.+28     	; 0x15ee <stopCycleRolling+0x30>
	{
		topPoint = bottomPoint = rollPoint;
    15d2:	80 91 1e 01 	lds	r24, 0x011E
    15d6:	90 91 1f 01 	lds	r25, 0x011F
    15da:	90 93 21 01 	sts	0x0121, r25
    15de:	80 93 20 01 	sts	0x0120, r24
    15e2:	90 93 23 01 	sts	0x0123, r25
    15e6:	80 93 22 01 	sts	0x0122, r24
		activeRollCycle = 0;	
    15ea:	10 92 19 01 	sts	0x0119, r1
	}		
	
	// Enable interrupts from timer 0
	TIMSK |= (1<<TOIE0);
    15ee:	89 b7       	in	r24, 0x39	; 57
    15f0:	81 60       	ori	r24, 0x01	; 1
    15f2:	89 bf       	out	0x39, r24	; 57
    15f4:	08 95       	ret

000015f6 <isTopPointValid>:



uint8_t isTopPointValid(void)
{
	return (	(int16_t)(topPoint - rollPoint) >= 0 );
    15f6:	80 91 22 01 	lds	r24, 0x0122
    15fa:	90 91 23 01 	lds	r25, 0x0123
    15fe:	20 91 1e 01 	lds	r18, 0x011E
    1602:	30 91 1f 01 	lds	r19, 0x011F
    1606:	82 1b       	sub	r24, r18
    1608:	93 0b       	sbc	r25, r19
    160a:	89 2f       	mov	r24, r25
    160c:	80 95       	com	r24
}
    160e:	88 1f       	adc	r24, r24
    1610:	88 27       	eor	r24, r24
    1612:	88 1f       	adc	r24, r24
    1614:	08 95       	ret

00001616 <isBottomPointValid>:

uint8_t isBottomPointValid(void)
{
	return (	(int16_t)(rollPoint - bottomPoint) >= 0	);
    1616:	80 91 1e 01 	lds	r24, 0x011E
    161a:	90 91 1f 01 	lds	r25, 0x011F
    161e:	20 91 20 01 	lds	r18, 0x0120
    1622:	30 91 21 01 	lds	r19, 0x0121
    1626:	82 1b       	sub	r24, r18
    1628:	93 0b       	sbc	r25, r19
    162a:	89 2f       	mov	r24, r25
    162c:	80 95       	com	r24
}
    162e:	88 1f       	adc	r24, r24
    1630:	88 27       	eor	r24, r24
    1632:	88 1f       	adc	r24, r24
    1634:	08 95       	ret

00001636 <startCycleRolling>:


uint8_t startCycleRolling(void)
{
	// Disable interrupts from timer0 
	TIMSK &= ~(1<<TOIE0);
    1636:	89 b7       	in	r24, 0x39	; 57
    1638:	8e 7f       	andi	r24, 0xFE	; 254
    163a:	89 bf       	out	0x39, r24	; 57
	
	if ( isTopPointValid() && isBottomPointValid() )
    163c:	dc df       	rcall	.-72     	; 0x15f6 <isTopPointValid>
    163e:	88 23       	and	r24, r24
    1640:	59 f0       	breq	.+22     	; 0x1658 <startCycleRolling+0x22>
    1642:	e9 df       	rcall	.-46     	; 0x1616 <isBottomPointValid>
    1644:	88 23       	and	r24, r24
    1646:	41 f0       	breq	.+16     	; 0x1658 <startCycleRolling+0x22>
	{
		rollState |= ROLL_CYCLE;
    1648:	80 91 1a 01 	lds	r24, 0x011A
    164c:	84 60       	ori	r24, 0x04	; 4
    164e:	80 93 1a 01 	sts	0x011A, r24
		activeRollCycle = 1;
    1652:	81 e0       	ldi	r24, 0x01	; 1
    1654:	80 93 19 01 	sts	0x0119, r24
	}
	
	// Enable interrupts from timer 0
	TIMSK |= (1<<TOIE0);
    1658:	89 b7       	in	r24, 0x39	; 57
    165a:	81 60       	ori	r24, 0x01	; 1
    165c:	89 bf       	out	0x39, r24	; 57
	
	return (rollState & ROLL_CYCLE);
    165e:	80 91 1a 01 	lds	r24, 0x011A
}
    1662:	84 70       	andi	r24, 0x04	; 4
    1664:	08 95       	ret

00001666 <__vector_16>:




ISR(ANA_COMP_vect)
{
    1666:	1f 92       	push	r1
    1668:	0f 92       	push	r0
    166a:	0f b6       	in	r0, 0x3f	; 63
    166c:	0f 92       	push	r0
    166e:	11 24       	eor	r1, r1
    1670:	2f 93       	push	r18
    1672:	3f 93       	push	r19
    1674:	4f 93       	push	r20
    1676:	5f 93       	push	r21
    1678:	8f 93       	push	r24
    167a:	9f 93       	push	r25
	static uint16_t sigma = 0;
	uint16_t delta;
	
	// Once triggered, disable further comparator interrupt
	ACSR &= ~(1<<ACIE);
    167c:	43 98       	cbi	0x08, 3	; 8
	
	// Process heater delta-sigma modulator
	if (sigma >= HEATER_MAX_POWER)
    167e:	40 91 24 01 	lds	r20, 0x0124
    1682:	50 91 25 01 	lds	r21, 0x0125
    1686:	44 36       	cpi	r20, 0x64	; 100
    1688:	51 05       	cpc	r21, r1
    168a:	30 f0       	brcs	.+12     	; 0x1698 <__vector_16+0x32>
	{
		PORTD |= (1<<PD_HEATER | 1<<PD_HEAT_INDIC);
    168c:	82 b3       	in	r24, 0x12	; 18
    168e:	80 63       	ori	r24, 0x30	; 48
    1690:	82 bb       	out	0x12, r24	; 18
		delta = -HEATER_MAX_POWER;	
    1692:	2c e9       	ldi	r18, 0x9C	; 156
    1694:	3f ef       	ldi	r19, 0xFF	; 255
    1696:	03 c0       	rjmp	.+6      	; 0x169e <__vector_16+0x38>
	}		
	else
	{
		PORTD &= ~(1<<PD_HEAT_INDIC);
    1698:	95 98       	cbi	0x12, 5	; 18
		delta = 0;
    169a:	20 e0       	ldi	r18, 0x00	; 0
    169c:	30 e0       	ldi	r19, 0x00	; 0
	}
	sigma += delta + heaterPower;	
    169e:	80 91 1b 01 	lds	r24, 0x011B
    16a2:	90 91 1c 01 	lds	r25, 0x011C
    16a6:	84 0f       	add	r24, r20
    16a8:	95 1f       	adc	r25, r21
    16aa:	82 0f       	add	r24, r18
    16ac:	93 1f       	adc	r25, r19
    16ae:	90 93 25 01 	sts	0x0125, r25
    16b2:	80 93 24 01 	sts	0x0124, r24
	
	// Reprogram timer0
	TCNT0 = 256 - TRIAC_IMPULSE_TIME;		// Triac gate impulse time
    16b6:	86 ef       	ldi	r24, 0xF6	; 246
    16b8:	82 bf       	out	0x32, r24	; 50
	TIFR |= (1<<TOV0);						// Clear interrupt flag
    16ba:	88 b7       	in	r24, 0x38	; 56
    16bc:	81 60       	ori	r24, 0x01	; 1
    16be:	88 bf       	out	0x38, r24	; 56
	// Modify state	
	p_state &= ~STATE_MASK;					// Start new state machine cycle
    16c0:	80 91 9a 00 	lds	r24, 0x009A
    16c4:	80 7f       	andi	r24, 0xF0	; 240
	p_state ^= HALF_PERIOD_FLAG;			// Toggle flag
    16c6:	80 58       	subi	r24, 0x80	; 128
    16c8:	80 93 9a 00 	sts	0x009A, r24
	
}
    16cc:	9f 91       	pop	r25
    16ce:	8f 91       	pop	r24
    16d0:	5f 91       	pop	r21
    16d2:	4f 91       	pop	r20
    16d4:	3f 91       	pop	r19
    16d6:	2f 91       	pop	r18
    16d8:	0f 90       	pop	r0
    16da:	0f be       	out	0x3f, r0	; 63
    16dc:	0f 90       	pop	r0
    16de:	1f 90       	pop	r1
    16e0:	18 95       	reti

000016e2 <__vector_9>:



ISR(TIMER0_OVF_vect)
{
    16e2:	1f 92       	push	r1
    16e4:	0f 92       	push	r0
    16e6:	0f b6       	in	r0, 0x3f	; 63
    16e8:	0f 92       	push	r0
    16ea:	11 24       	eor	r1, r1
    16ec:	2f 93       	push	r18
    16ee:	3f 93       	push	r19
    16f0:	4f 93       	push	r20
    16f2:	5f 93       	push	r21
    16f4:	6f 93       	push	r22
    16f6:	7f 93       	push	r23
    16f8:	8f 93       	push	r24
    16fa:	9f 93       	push	r25
    16fc:	af 93       	push	r26
    16fe:	bf 93       	push	r27
    1700:	ef 93       	push	r30
    1702:	ff 93       	push	r31
	uint8_t temp;
	
	switch(p_state & STATE_MASK)
    1704:	80 91 9a 00 	lds	r24, 0x009A
    1708:	8f 70       	andi	r24, 0x0F	; 15
    170a:	81 30       	cpi	r24, 0x01	; 1
    170c:	49 f0       	breq	.+18     	; 0x1720 <__vector_9+0x3e>
    170e:	28 f0       	brcs	.+10     	; 0x171a <__vector_9+0x38>
    1710:	82 30       	cpi	r24, 0x02	; 2
    1712:	49 f0       	breq	.+18     	; 0x1726 <__vector_9+0x44>
    1714:	83 30       	cpi	r24, 0x03	; 3
    1716:	69 f4       	brne	.+26     	; 0x1732 <__vector_9+0x50>
    1718:	0b c0       	rjmp	.+22     	; 0x1730 <__vector_9+0x4e>
	{
		// TRIAC_IMPULSE_TIME finished
		case 0x00:
			// Turn off heater TRIAC
			PORTD &= ~(1<<PD_HEATER);
    171a:	94 98       	cbi	0x12, 4	; 18
			TCNT0 = 256 - (QUATER_PERIOD_TIME - TRIAC_IMPULSE_TIME);
    171c:	8c eb       	ldi	r24, 0xBC	; 188
    171e:	01 c0       	rjmp	.+2      	; 0x1722 <__vector_9+0x40>
			break;
		// QUATER_PERIOD_TIME finished	
		case 0x01:	
			TCNT0 = 256 - (SYNC_IGNORE_TIME - QUATER_PERIOD_TIME);
    1720:	82 ec       	ldi	r24, 0xC2	; 194
    1722:	82 bf       	out	0x32, r24	; 50
			break;	
    1724:	06 c0       	rjmp	.+12     	; 0x1732 <__vector_9+0x50>
		// SYNC_IGNORE_TIME finished	
		case 0x02:
			TCNT0 = 256 - SYNC_LOST_TIMEOUT;
    1726:	80 ee       	ldi	r24, 0xE0	; 224
    1728:	82 bf       	out	0x32, r24	; 50
			// Clear flag and enable interrupt from analog comparator
			ACSR |= (1<<ACI);
    172a:	44 9a       	sbi	0x08, 4	; 8
			ACSR |= (1<<ACIE);
    172c:	43 9a       	sbi	0x08, 3	; 8
			break;
    172e:	01 c0       	rjmp	.+2      	; 0x1732 <__vector_9+0x50>
		// SYNC_LOST_TIMEOUT finished
		case 0x03:
			// Error - sync is lost. It means that device has been disconnected from AC line.
			// Disable all power-consuming devices like LEDs and save user settings to EEPROM.
			exitPowerOff();
    1730:	cb d8       	rcall	.-3690   	; 0x8c8 <exitPowerOff>
			// Sync is not present - do nothing
			break;
	}	

	// Full period check
	if ((p_state & (HALF_PERIOD_FLAG | STATE_MASK)) == (HALF_PERIOD_FLAG | 0x01))
    1732:	80 91 9a 00 	lds	r24, 0x009A
    1736:	8f 78       	andi	r24, 0x8F	; 143
    1738:	81 38       	cpi	r24, 0x81	; 129
    173a:	09 f0       	breq	.+2      	; 0x173e <__vector_9+0x5c>
    173c:	81 c0       	rjmp	.+258    	; 0x1840 <__vector_9+0x15e>
	{
		// Quater AC line period is done. Update motor controls.
		temp = PORTD;
    173e:	82 b3       	in	r24, 0x12	; 18
		temp &= ~(1<<PD_M1 | 1<<PD_M2);
    1740:	83 7f       	andi	r24, 0xF3	; 243
		if ( rollState & SKIP_CURRENT_MOTOR_CTRL )
    1742:	90 91 1a 01 	lds	r25, 0x011A
    1746:	93 ff       	sbrs	r25, 3
    1748:	05 c0       	rjmp	.+10     	; 0x1754 <__vector_9+0x72>
		{
			// Direction control changed. Skip current period to allow TRIACs fully close
			rollState &= ~SKIP_CURRENT_MOTOR_CTRL;
    174a:	97 7f       	andi	r25, 0xF7	; 247
    174c:	90 93 1a 01 	sts	0x011A, r25
			PORTD = temp; 	
    1750:	82 bb       	out	0x12, r24	; 18
    1752:	76 c0       	rjmp	.+236    	; 0x1840 <__vector_9+0x15e>
		}
		else
		{
			// Apply direction control 
			if (rollState & ROLL_FWD)
    1754:	90 ff       	sbrs	r25, 0
    1756:	02 c0       	rjmp	.+4      	; 0x175c <__vector_9+0x7a>
				temp |= (1<<PD_M1);
    1758:	84 60       	ori	r24, 0x04	; 4
    175a:	02 c0       	rjmp	.+4      	; 0x1760 <__vector_9+0x7e>
			else if (rollState & ROLL_REV)
    175c:	91 fd       	sbrc	r25, 1
				temp |= (1<<PD_M2);
    175e:	88 60       	ori	r24, 0x08	; 8
			PORTD = temp; 
    1760:	82 bb       	out	0x12, r24	; 18
// Function to process rolling - sets rotation direction for next period
// Call once per each AC line period
static inline void controlRolling()
{
	// Process cycle rolling
	switch(rollState & (ROLL_FWD | ROLL_REV | ROLL_CYCLE))
    1762:	40 91 1a 01 	lds	r20, 0x011A
    1766:	84 2f       	mov	r24, r20
    1768:	87 70       	andi	r24, 0x07	; 7
    176a:	85 30       	cpi	r24, 0x05	; 5
    176c:	19 f0       	breq	.+6      	; 0x1774 <__vector_9+0x92>
    176e:	86 30       	cpi	r24, 0x06	; 6
    1770:	e9 f5       	brne	.+122    	; 0x17ec <__vector_9+0x10a>
    1772:	1d c0       	rjmp	.+58     	; 0x17ae <__vector_9+0xcc>
//---------------------------------------------//
//---------------------------------------------//

static inline uint8_t reachedTopPoint(void)
{
	return (	(int16_t)(topPoint - rollPoint) <= 0 );
    1774:	80 91 22 01 	lds	r24, 0x0122
    1778:	90 91 23 01 	lds	r25, 0x0123
    177c:	20 91 1e 01 	lds	r18, 0x011E
    1780:	30 91 1f 01 	lds	r19, 0x011F
    1784:	82 1b       	sub	r24, r18
    1786:	93 0b       	sbc	r25, r19
{
	// Process cycle rolling
	switch(rollState & (ROLL_FWD | ROLL_REV | ROLL_CYCLE))
	{
		case (ROLL_FWD | ROLL_CYCLE):
			if (reachedTopPoint())
    1788:	18 16       	cp	r1, r24
    178a:	19 06       	cpc	r1, r25
    178c:	7c f1       	brlt	.+94     	; 0x17ec <__vector_9+0x10a>
			{
				if (activeRollCycle >= p.rollCycleSet)	
    178e:	80 91 19 01 	lds	r24, 0x0119
    1792:	90 91 89 01 	lds	r25, 0x0189
    1796:	89 17       	cp	r24, r25
    1798:	28 f0       	brcs	.+10     	; 0x17a4 <__vector_9+0xc2>
				{
					// DONE!
					rollState &= ~ROLL_CYCLE;
    179a:	4b 7f       	andi	r20, 0xFB	; 251
					rollState |= CYCLE_ROLL_DONE;
    179c:	40 61       	ori	r20, 0x10	; 16
    179e:	40 93 1a 01 	sts	0x011A, r20
    17a2:	24 c0       	rjmp	.+72     	; 0x17ec <__vector_9+0x10a>
				}
				else
				{
					activeRollCycle++;
    17a4:	8f 5f       	subi	r24, 0xFF	; 255
    17a6:	80 93 19 01 	sts	0x0119, r24
					// Change dir	
					newDirReq = ROLL_REV;				
    17aa:	82 e0       	ldi	r24, 0x02	; 2
    17ac:	1d c0       	rjmp	.+58     	; 0x17e8 <__vector_9+0x106>
	return (	(int16_t)(topPoint - rollPoint) <= 0 );
}

static inline uint8_t reachedBottomPoint(void)
{
	return (	(int16_t)(rollPoint - bottomPoint) <= 0 );
    17ae:	80 91 1e 01 	lds	r24, 0x011E
    17b2:	90 91 1f 01 	lds	r25, 0x011F
    17b6:	20 91 20 01 	lds	r18, 0x0120
    17ba:	30 91 21 01 	lds	r19, 0x0121
    17be:	82 1b       	sub	r24, r18
    17c0:	93 0b       	sbc	r25, r19
				}
			}
			break;
		
		case (ROLL_REV | ROLL_CYCLE):	
			if (reachedBottomPoint())
    17c2:	18 16       	cp	r1, r24
    17c4:	19 06       	cpc	r1, r25
    17c6:	94 f0       	brlt	.+36     	; 0x17ec <__vector_9+0x10a>
			{
				if (activeRollCycle >= p.rollCycleSet)	
    17c8:	80 91 19 01 	lds	r24, 0x0119
    17cc:	90 91 89 01 	lds	r25, 0x0189
    17d0:	89 17       	cp	r24, r25
    17d2:	30 f0       	brcs	.+12     	; 0x17e0 <__vector_9+0xfe>
				{
					// DONE!
					rollState &= ~ROLL_CYCLE;
    17d4:	84 2f       	mov	r24, r20
    17d6:	8b 7f       	andi	r24, 0xFB	; 251
					rollState |= CYCLE_ROLL_DONE;
    17d8:	80 61       	ori	r24, 0x10	; 16
    17da:	80 93 1a 01 	sts	0x011A, r24
    17de:	06 c0       	rjmp	.+12     	; 0x17ec <__vector_9+0x10a>
				}
				else
				{
					activeRollCycle++;
    17e0:	8f 5f       	subi	r24, 0xFF	; 255
    17e2:	80 93 19 01 	sts	0x0119, r24
					// Change dir	
					newDirReq = ROLL_FWD;
    17e6:	81 e0       	ldi	r24, 0x01	; 1
    17e8:	80 93 1d 01 	sts	0x011D, r24
		default:
			break;
	}
	
	// Process direction change
	if ((rollState ^ newDirReq) & (ROLL_FWD | ROLL_REV))
    17ec:	20 91 1a 01 	lds	r18, 0x011A
    17f0:	90 91 1d 01 	lds	r25, 0x011D
    17f4:	89 2f       	mov	r24, r25
    17f6:	82 27       	eor	r24, r18
    17f8:	83 70       	andi	r24, 0x03	; 3
    17fa:	19 f0       	breq	.+6      	; 0x1802 <__vector_9+0x120>
	{
		// ROLL_DIR_CHANGED is used for sound beep
		rollState |= (SKIP_CURRENT_MOTOR_CTRL | ROLL_DIR_CHANGED);
    17fc:	28 62       	ori	r18, 0x28	; 40
    17fe:	20 93 1a 01 	sts	0x011A, r18
	}
	
	rollState &= ~(ROLL_FWD | ROLL_REV);
    1802:	80 91 1a 01 	lds	r24, 0x011A
    1806:	8c 7f       	andi	r24, 0xFC	; 252
	rollState |= newDirReq;
    1808:	89 2b       	or	r24, r25
	rollState &= dirChangedMask;
    180a:	90 91 9b 00 	lds	r25, 0x009B
    180e:	89 23       	and	r24, r25
    1810:	80 93 1a 01 	sts	0x011A, r24
	dirChangedMask = 0xFF;
    1814:	9f ef       	ldi	r25, 0xFF	; 255
    1816:	90 93 9b 00 	sts	0x009B, r25
	return (	(int16_t)(rollPoint - bottomPoint) <= 0 );
}

static inline void updateRollPoint(void)
{	
	if (rollState & ROLL_FWD)
    181a:	80 ff       	sbrs	r24, 0
    181c:	06 c0       	rjmp	.+12     	; 0x182a <__vector_9+0x148>
		rollPoint++;
    181e:	80 91 1e 01 	lds	r24, 0x011E
    1822:	90 91 1f 01 	lds	r25, 0x011F
    1826:	01 96       	adiw	r24, 0x01	; 1
    1828:	07 c0       	rjmp	.+14     	; 0x1838 <__vector_9+0x156>
	else if (rollState & ROLL_REV)
    182a:	81 ff       	sbrs	r24, 1
    182c:	09 c0       	rjmp	.+18     	; 0x1840 <__vector_9+0x15e>
		rollPoint--;	
    182e:	80 91 1e 01 	lds	r24, 0x011E
    1832:	90 91 1f 01 	lds	r25, 0x011F
    1836:	01 97       	sbiw	r24, 0x01	; 1
    1838:	90 93 1f 01 	sts	0x011F, r25
    183c:	80 93 1e 01 	sts	0x011E, r24
			controlRolling();
		}
	}
	
	
	if ((p_state & STATE_MASK)  != 0x0F)
    1840:	80 91 9a 00 	lds	r24, 0x009A
    1844:	98 2f       	mov	r25, r24
    1846:	9f 70       	andi	r25, 0x0F	; 15
    1848:	9f 30       	cpi	r25, 0x0F	; 15
    184a:	19 f0       	breq	.+6      	; 0x1852 <__vector_9+0x170>
		p_state++;
    184c:	8f 5f       	subi	r24, 0xFF	; 255
    184e:	80 93 9a 00 	sts	0x009A, r24
}	
    1852:	ff 91       	pop	r31
    1854:	ef 91       	pop	r30
    1856:	bf 91       	pop	r27
    1858:	af 91       	pop	r26
    185a:	9f 91       	pop	r25
    185c:	8f 91       	pop	r24
    185e:	7f 91       	pop	r23
    1860:	6f 91       	pop	r22
    1862:	5f 91       	pop	r21
    1864:	4f 91       	pop	r20
    1866:	3f 91       	pop	r19
    1868:	2f 91       	pop	r18
    186a:	0f 90       	pop	r0
    186c:	0f be       	out	0x3f, r0	; 63
    186e:	0f 90       	pop	r0
    1870:	1f 90       	pop	r1
    1872:	18 95       	reti

00001874 <processSoftTimer8b>:
 
 
 
 
 void processSoftTimer8b(SoftTimer8b_t *tmr)
 {
    1874:	fc 01       	movw	r30, r24
	 uint8_t newTimerVal;

	 if (!tmr->Enabled)
    1876:	90 81       	ld	r25, Z
    1878:	90 ff       	sbrs	r25, 0
    187a:	27 c0       	rjmp	.+78     	; 0x18ca <processSoftTimer8b+0x56>
		return;
	 
	 tmr->FA_EQ = 0;
	 tmr->FA_GE = 0;
	 tmr->FTop = 0;
    187c:	97 7e       	andi	r25, 0xE7	; 231
    187e:	9f 7d       	andi	r25, 0xDF	; 223
    1880:	90 83       	st	Z, r25
	 
	 if (tmr->Timer >= tmr->Top)
    1882:	81 81       	ldd	r24, Z+1	; 0x01
    1884:	22 81       	ldd	r18, Z+2	; 0x02
    1886:	82 17       	cp	r24, r18
    1888:	50 f0       	brcs	.+20     	; 0x189e <processSoftTimer8b+0x2a>
	 {
		 if (tmr->RunOnce)
    188a:	91 ff       	sbrs	r25, 1
    188c:	02 c0       	rjmp	.+4      	; 0x1892 <processSoftTimer8b+0x1e>
		 {
			 tmr->Enabled = 0;
    188e:	9e 7f       	andi	r25, 0xFE	; 254
    1890:	90 83       	st	Z, r25
		 }
		 tmr->FTop = 1;
    1892:	90 81       	ld	r25, Z
		 tmr->FOvfl = 1;
    1894:	90 62       	ori	r25, 0x20	; 32
    1896:	90 64       	ori	r25, 0x40	; 64
    1898:	90 83       	st	Z, r25
		 newTimerVal = 0;
    189a:	20 e0       	ldi	r18, 0x00	; 0
    189c:	02 c0       	rjmp	.+4      	; 0x18a2 <processSoftTimer8b+0x2e>
	 }
	 else
	 {
		 newTimerVal = tmr->Timer + 1;
    189e:	28 2f       	mov	r18, r24
    18a0:	2f 5f       	subi	r18, 0xFF	; 255
	 }
	 
	 if (tmr->Timer == tmr->CompA)
    18a2:	93 81       	ldd	r25, Z+3	; 0x03
    18a4:	89 13       	cpse	r24, r25
    18a6:	0b c0       	rjmp	.+22     	; 0x18be <processSoftTimer8b+0x4a>
	 {
		 tmr->FA_EQ = 1;
    18a8:	80 81       	ld	r24, Z
		 tmr->FA_GE = 1;
    18aa:	88 60       	ori	r24, 0x08	; 8
    18ac:	80 61       	ori	r24, 0x10	; 16
		 tmr->FA_TGL = !tmr->FA_TGL;
    18ae:	82 fb       	bst	r24, 2
    18b0:	99 27       	eor	r25, r25
    18b2:	90 f9       	bld	r25, 0
    18b4:	31 e0       	ldi	r19, 0x01	; 1
    18b6:	93 27       	eor	r25, r19
    18b8:	90 fb       	bst	r25, 0
    18ba:	82 f9       	bld	r24, 2
    18bc:	04 c0       	rjmp	.+8      	; 0x18c6 <processSoftTimer8b+0x52>
	 }
	 else if (tmr->Timer >= tmr->CompA)
    18be:	89 17       	cp	r24, r25
    18c0:	18 f0       	brcs	.+6      	; 0x18c8 <processSoftTimer8b+0x54>
	 {
		 tmr->FA_GE = 1;
    18c2:	80 81       	ld	r24, Z
    18c4:	80 61       	ori	r24, 0x10	; 16
    18c6:	80 83       	st	Z, r24
	 }
	 
	 tmr->Timer = newTimerVal; 
    18c8:	21 83       	std	Z+1, r18	; 0x01
    18ca:	08 95       	ret

000018cc <processSystemTimers>:



void processSystemTimers(void)
{
	sys_timers.flags = 0x00;
    18cc:	10 92 a2 00 	sts	0x00A2, r1
	
	// Process Celsius counter
	if (--sys_timers.celsius_upd_counter == 0)
    18d0:	80 91 9c 00 	lds	r24, 0x009C
    18d4:	81 50       	subi	r24, 0x01	; 1
    18d6:	80 93 9c 00 	sts	0x009C, r24
    18da:	81 11       	cpse	r24, r1
    18dc:	13 c0       	rjmp	.+38     	; 0x1904 <processSystemTimers+0x38>
	{
		sys_timers.celsius_upd_counter = CELSIUS_UDPATE_INTERVAL;
    18de:	84 e0       	ldi	r24, 0x04	; 4
    18e0:	80 93 9c 00 	sts	0x009C, r24
		sys_timers.flags |= EXPIRED_CELSIUS;
    18e4:	81 e0       	ldi	r24, 0x01	; 1
    18e6:	80 93 a2 00 	sts	0x00A2, r24
		
		// Process PID update counter
		if (--sys_timers.pid_update_counter == 0)
    18ea:	80 91 a1 00 	lds	r24, 0x00A1
    18ee:	81 50       	subi	r24, 0x01	; 1
    18f0:	80 93 a1 00 	sts	0x00A1, r24
    18f4:	81 11       	cpse	r24, r1
    18f6:	06 c0       	rjmp	.+12     	; 0x1904 <processSystemTimers+0x38>
		{
			sys_timers.pid_update_counter = PID_UPDATE_INTERVAL;
    18f8:	8a e0       	ldi	r24, 0x0A	; 10
    18fa:	80 93 a1 00 	sts	0x00A1, r24
			sys_timers.flags |= UPDATE_PID;
    18fe:	81 e4       	ldi	r24, 0x41	; 65
    1900:	80 93 a2 00 	sts	0x00A2, r24
		}
	}
	
	// Process log counter
	if (--sys_timers.log_counter == 0)
    1904:	80 91 a0 00 	lds	r24, 0x00A0
    1908:	81 50       	subi	r24, 0x01	; 1
    190a:	19 f0       	breq	.+6      	; 0x1912 <processSystemTimers+0x46>
    190c:	80 93 a0 00 	sts	0x00A0, r24
    1910:	08 c0       	rjmp	.+16     	; 0x1922 <processSystemTimers+0x56>
	{
		sys_timers.log_counter = LOG_INTERVAL;
    1912:	82 e0       	ldi	r24, 0x02	; 2
    1914:	80 93 a0 00 	sts	0x00A0, r24
		sys_timers.flags |= EXPIRED_LOG;
    1918:	80 91 a2 00 	lds	r24, 0x00A2
    191c:	80 62       	ori	r24, 0x20	; 32
    191e:	80 93 a2 00 	sts	0x00A2, r24
	}
	
	// Process 10 seconds counter
	if (--sys_timers.counter_10sec == 0)
    1922:	80 91 9d 00 	lds	r24, 0x009D
    1926:	81 50       	subi	r24, 0x01	; 1
    1928:	80 93 9d 00 	sts	0x009D, r24
    192c:	81 11       	cpse	r24, r1
    192e:	34 c0       	rjmp	.+104    	; 0x1998 <processSystemTimers+0xcc>
	{
		sys_timers.counter_10sec = COUNTER_10SEC_INTERVAL;
    1930:	88 ec       	ldi	r24, 0xC8	; 200
    1932:	80 93 9d 00 	sts	0x009D, r24
		sys_timers.flags |= EXPIRED_10SEC;
    1936:	40 91 a2 00 	lds	r20, 0x00A2
    193a:	84 2f       	mov	r24, r20
    193c:	82 60       	ori	r24, 0x02	; 2
    193e:	80 93 a2 00 	sts	0x00A2, r24
		
		// Process 1 minute counter
		if (--sys_timers.counter_1min == 0)
    1942:	80 91 9e 00 	lds	r24, 0x009E
    1946:	81 50       	subi	r24, 0x01	; 1
    1948:	80 93 9e 00 	sts	0x009E, r24
    194c:	81 11       	cpse	r24, r1
    194e:	24 c0       	rjmp	.+72     	; 0x1998 <processSystemTimers+0xcc>
		{
			sys_timers.counter_1min = COUNTER_1MIN_INTERVAL;
    1950:	86 e0       	ldi	r24, 0x06	; 6
    1952:	80 93 9e 00 	sts	0x009E, r24
			sys_timers.flags |= EXPIRED_1MIN;
    1956:	84 2f       	mov	r24, r20
    1958:	86 60       	ori	r24, 0x06	; 6
    195a:	80 93 a2 00 	sts	0x00A2, r24
			
			// Process auto power off counter
			if (sys_timers.poff_counter != MAX_POWEROFF_TIMEOUT - 1)
    195e:	80 91 9f 00 	lds	r24, 0x009F
    1962:	8e 35       	cpi	r24, 0x5E	; 94
    1964:	19 f0       	breq	.+6      	; 0x196c <processSystemTimers+0xa0>
				sys_timers.poff_counter++;
    1966:	8f 5f       	subi	r24, 0xFF	; 255
    1968:	80 93 9f 00 	sts	0x009F, r24
			if (sys_timers.poff_counter == p.power_off_timeout - 1)
    196c:	60 91 9f 00 	lds	r22, 0x009F
    1970:	50 91 8b 01 	lds	r21, 0x018B
    1974:	26 2f       	mov	r18, r22
    1976:	30 e0       	ldi	r19, 0x00	; 0
    1978:	85 2f       	mov	r24, r21
    197a:	90 e0       	ldi	r25, 0x00	; 0
    197c:	01 97       	sbiw	r24, 0x01	; 1
    197e:	28 17       	cp	r18, r24
    1980:	39 07       	cpc	r19, r25
    1982:	19 f4       	brne	.+6      	; 0x198a <processSystemTimers+0xbe>
				sys_timers.flags |= AUTOPOFF_SOON;
    1984:	4e 60       	ori	r20, 0x0E	; 14
    1986:	40 93 a2 00 	sts	0x00A2, r20
			if (sys_timers.poff_counter == p.power_off_timeout)
    198a:	65 13       	cpse	r22, r21
    198c:	05 c0       	rjmp	.+10     	; 0x1998 <processSystemTimers+0xcc>
				sys_timers.flags |= AUTOPOFF_EXPIRED;			
    198e:	80 91 a2 00 	lds	r24, 0x00A2
    1992:	80 61       	ori	r24, 0x10	; 16
    1994:	80 93 a2 00 	sts	0x00A2, r24
    1998:	08 95       	ret

0000199a <resetAutoPowerOffCounter>:
}


void resetAutoPowerOffCounter(void)
{
	sys_timers.poff_counter = 0;
    199a:	10 92 9f 00 	sts	0x009F, r1
    199e:	08 95       	ret

000019a0 <SetBeeperFreq>:
}

// Setup beeper frequency (Hz)
void SetBeeperFreq(uint16_t freq_hz)
{
	uint16_t period_us = 1000000 / freq_hz;
    19a0:	9c 01       	movw	r18, r24
    19a2:	40 e0       	ldi	r20, 0x00	; 0
    19a4:	50 e0       	ldi	r21, 0x00	; 0
    19a6:	60 e4       	ldi	r22, 0x40	; 64
    19a8:	72 e4       	ldi	r23, 0x42	; 66
    19aa:	8f e0       	ldi	r24, 0x0F	; 15
    19ac:	90 e0       	ldi	r25, 0x00	; 0
    19ae:	d0 d0       	rcall	.+416    	; 0x1b50 <__divmodsi4>
	if (period_us & 0xFFF8)
    19b0:	da 01       	movw	r26, r20
    19b2:	c9 01       	movw	r24, r18
    19b4:	88 7f       	andi	r24, 0xF8	; 248
    19b6:	aa 27       	eor	r26, r26
    19b8:	bb 27       	eor	r27, r27
    19ba:	89 2b       	or	r24, r25
    19bc:	51 f0       	breq	.+20     	; 0x19d2 <SetBeeperFreq+0x32>
		OCR1A = (period_us>>3) - 1;
    19be:	43 e0       	ldi	r20, 0x03	; 3
    19c0:	36 95       	lsr	r19
    19c2:	27 95       	ror	r18
    19c4:	4a 95       	dec	r20
    19c6:	e1 f7       	brne	.-8      	; 0x19c0 <SetBeeperFreq+0x20>
    19c8:	21 50       	subi	r18, 0x01	; 1
    19ca:	31 09       	sbc	r19, r1
    19cc:	3b bd       	out	0x2b, r19	; 43
    19ce:	2a bd       	out	0x2a, r18	; 42
    19d0:	04 c0       	rjmp	.+8      	; 0x19da <SetBeeperFreq+0x3a>
	else
		OCR1A = 0x1;
    19d2:	81 e0       	ldi	r24, 0x01	; 1
    19d4:	90 e0       	ldi	r25, 0x00	; 0
    19d6:	9b bd       	out	0x2b, r25	; 43
    19d8:	8a bd       	out	0x2a, r24	; 42
	TCNT1 = 0;
    19da:	1d bc       	out	0x2d, r1	; 45
    19dc:	1c bc       	out	0x2c, r1	; 44
    19de:	08 95       	ret

000019e0 <StartBeep>:
}

// Beep for some time in ms
void StartBeep(uint16_t time_ms)
{
	if ( (p.sound_enable) || (enableOverride) )
    19e0:	20 91 8a 01 	lds	r18, 0x018A
    19e4:	21 11       	cpse	r18, r1
    19e6:	04 c0       	rjmp	.+8      	; 0x19f0 <StartBeep+0x10>
    19e8:	20 91 26 01 	lds	r18, 0x0126
    19ec:	22 23       	and	r18, r18
    19ee:	39 f0       	breq	.+14     	; 0x19fe <StartBeep+0x1e>
	{
		beep_cnt = time_ms;
    19f0:	90 93 28 01 	sts	0x0128, r25
    19f4:	80 93 27 01 	sts	0x0127, r24
// Enable / disable beeper output
inline void SetBeepOutput(uint8_t val)
{
	if (val)
		// Toggle OCR1A on compare match
		TCCR1A |= (1<<COM1A0);
    19f8:	8f b5       	in	r24, 0x2f	; 47
    19fa:	80 64       	ori	r24, 0x40	; 64
    19fc:	8f bd       	out	0x2f, r24	; 47
	if ( (p.sound_enable) || (enableOverride) )
	{
		beep_cnt = time_ms;
		SetBeepOutput(1);		
	}
	enableOverride = 0;
    19fe:	10 92 26 01 	sts	0x0126, r1
    1a02:	08 95       	ret

00001a04 <OverrideSoundDisable>:
}

void OverrideSoundDisable(void)
{
	enableOverride = 1;
    1a04:	81 e0       	ldi	r24, 0x01	; 1
    1a06:	80 93 26 01 	sts	0x0126, r24
    1a0a:	08 95       	ret

00001a0c <__vector_3>:




ISR(TIMER2_COMP_vect)
{	
    1a0c:	1f 92       	push	r1
    1a0e:	0f 92       	push	r0
    1a10:	0f b6       	in	r0, 0x3f	; 63
    1a12:	0f 92       	push	r0
    1a14:	11 24       	eor	r1, r1
    1a16:	2f 93       	push	r18
    1a18:	3f 93       	push	r19
    1a1a:	4f 93       	push	r20
    1a1c:	5f 93       	push	r21
    1a1e:	6f 93       	push	r22
    1a20:	7f 93       	push	r23
    1a22:	8f 93       	push	r24
    1a24:	9f 93       	push	r25
    1a26:	af 93       	push	r26
    1a28:	bf 93       	push	r27
    1a2a:	ef 93       	push	r30
    1a2c:	ff 93       	push	r31
	
	// Manage beeper
	if (beep_cnt)
    1a2e:	80 91 27 01 	lds	r24, 0x0127
    1a32:	90 91 28 01 	lds	r25, 0x0128
    1a36:	00 97       	sbiw	r24, 0x00	; 0
    1a38:	31 f0       	breq	.+12     	; 0x1a46 <__vector_3+0x3a>
		beep_cnt--;
    1a3a:	01 97       	sbiw	r24, 0x01	; 1
    1a3c:	90 93 28 01 	sts	0x0128, r25
    1a40:	80 93 27 01 	sts	0x0127, r24
    1a44:	03 c0       	rjmp	.+6      	; 0x1a4c <__vector_3+0x40>
	if (val)
		// Toggle OCR1A on compare match
		TCCR1A |= (1<<COM1A0);
	else
		// Disable OCR1A output
		TCCR1A &= ~(1<<COM1A0 | 1<<COM1A1);
    1a46:	8f b5       	in	r24, 0x2f	; 47
    1a48:	8f 73       	andi	r24, 0x3F	; 63
    1a4a:	8f bd       	out	0x2f, r24	; 47
		beep_cnt--;
	else
		SetBeepOutput(0);	// done
	
	// Manage LED indicator
	processLedIndicator();
    1a4c:	72 d7       	rcall	.+3812   	; 0x2932 <__data_load_end+0xc82>
	
	// Process menu update timer
	processSoftTimer8b(&menuUpdateTimer);	
    1a4e:	83 ea       	ldi	r24, 0xA3	; 163
    1a50:	90 e0       	ldi	r25, 0x00	; 0
    1a52:	10 df       	rcall	.-480    	; 0x1874 <processSoftTimer8b>
	
	// Start ADC conversion 
	ADCSRA |= (1<<ADSC);
    1a54:	36 9a       	sbi	0x06, 6	; 6
	
}
    1a56:	ff 91       	pop	r31
    1a58:	ef 91       	pop	r30
    1a5a:	bf 91       	pop	r27
    1a5c:	af 91       	pop	r26
    1a5e:	9f 91       	pop	r25
    1a60:	8f 91       	pop	r24
    1a62:	7f 91       	pop	r23
    1a64:	6f 91       	pop	r22
    1a66:	5f 91       	pop	r21
    1a68:	4f 91       	pop	r20
    1a6a:	3f 91       	pop	r19
    1a6c:	2f 91       	pop	r18
    1a6e:	0f 90       	pop	r0
    1a70:	0f be       	out	0x3f, r0	; 63
    1a72:	0f 90       	pop	r0
    1a74:	1f 90       	pop	r1
    1a76:	18 95       	reti

00001a78 <USART_send>:



void USART_send( uint8_t data )
{
	UCSRA |= (1<<TXC);                 // Clear flag
    1a78:	5e 9a       	sbi	0x0b, 6	; 11
	UDR = data;
    1a7a:	8c b9       	out	0x0c, r24	; 12
	while ( !(UCSRA & (1<<TXC)) );  // Wait
    1a7c:	5e 9b       	sbis	0x0b, 6	; 11
    1a7e:	fe cf       	rjmp	.-4      	; 0x1a7c <USART_send+0x4>
}
    1a80:	08 95       	ret

00001a82 <USART_sendstr>:


void USART_sendstr(char* str)
{
    1a82:	1f 93       	push	r17
    1a84:	cf 93       	push	r28
    1a86:	df 93       	push	r29
    1a88:	ec 01       	movw	r28, r24
	uint8_t i = 0;
    1a8a:	10 e0       	ldi	r17, 0x00	; 0
	while (str[i])
    1a8c:	02 c0       	rjmp	.+4      	; 0x1a92 <USART_sendstr+0x10>
	{
		USART_send(str[i++]);
    1a8e:	1f 5f       	subi	r17, 0xFF	; 255
    1a90:	f3 df       	rcall	.-26     	; 0x1a78 <USART_send>


void USART_sendstr(char* str)
{
	uint8_t i = 0;
	while (str[i])
    1a92:	fe 01       	movw	r30, r28
    1a94:	e1 0f       	add	r30, r17
    1a96:	f1 1d       	adc	r31, r1
    1a98:	80 81       	ld	r24, Z
    1a9a:	81 11       	cpse	r24, r1
    1a9c:	f8 cf       	rjmp	.-16     	; 0x1a8e <USART_sendstr+0xc>
	{
		USART_send(str[i++]);
	}
}
    1a9e:	df 91       	pop	r29
    1aa0:	cf 91       	pop	r28
    1aa2:	1f 91       	pop	r17
    1aa4:	08 95       	ret

00001aa6 <__udivmodqi4>:
    1aa6:	99 1b       	sub	r25, r25
    1aa8:	79 e0       	ldi	r23, 0x09	; 9
    1aaa:	04 c0       	rjmp	.+8      	; 0x1ab4 <__udivmodqi4_ep>

00001aac <__udivmodqi4_loop>:
    1aac:	99 1f       	adc	r25, r25
    1aae:	96 17       	cp	r25, r22
    1ab0:	08 f0       	brcs	.+2      	; 0x1ab4 <__udivmodqi4_ep>
    1ab2:	96 1b       	sub	r25, r22

00001ab4 <__udivmodqi4_ep>:
    1ab4:	88 1f       	adc	r24, r24
    1ab6:	7a 95       	dec	r23
    1ab8:	c9 f7       	brne	.-14     	; 0x1aac <__udivmodqi4_loop>
    1aba:	80 95       	com	r24
    1abc:	08 95       	ret

00001abe <__udivmodhi4>:
    1abe:	aa 1b       	sub	r26, r26
    1ac0:	bb 1b       	sub	r27, r27
    1ac2:	51 e1       	ldi	r21, 0x11	; 17
    1ac4:	07 c0       	rjmp	.+14     	; 0x1ad4 <__udivmodhi4_ep>

00001ac6 <__udivmodhi4_loop>:
    1ac6:	aa 1f       	adc	r26, r26
    1ac8:	bb 1f       	adc	r27, r27
    1aca:	a6 17       	cp	r26, r22
    1acc:	b7 07       	cpc	r27, r23
    1ace:	10 f0       	brcs	.+4      	; 0x1ad4 <__udivmodhi4_ep>
    1ad0:	a6 1b       	sub	r26, r22
    1ad2:	b7 0b       	sbc	r27, r23

00001ad4 <__udivmodhi4_ep>:
    1ad4:	88 1f       	adc	r24, r24
    1ad6:	99 1f       	adc	r25, r25
    1ad8:	5a 95       	dec	r21
    1ada:	a9 f7       	brne	.-22     	; 0x1ac6 <__udivmodhi4_loop>
    1adc:	80 95       	com	r24
    1ade:	90 95       	com	r25
    1ae0:	bc 01       	movw	r22, r24
    1ae2:	cd 01       	movw	r24, r26
    1ae4:	08 95       	ret

00001ae6 <__divmodhi4>:
    1ae6:	97 fb       	bst	r25, 7
    1ae8:	07 2e       	mov	r0, r23
    1aea:	16 f4       	brtc	.+4      	; 0x1af0 <__divmodhi4+0xa>
    1aec:	00 94       	com	r0
    1aee:	06 d0       	rcall	.+12     	; 0x1afc <__divmodhi4_neg1>
    1af0:	77 fd       	sbrc	r23, 7
    1af2:	08 d0       	rcall	.+16     	; 0x1b04 <__divmodhi4_neg2>
    1af4:	e4 df       	rcall	.-56     	; 0x1abe <__udivmodhi4>
    1af6:	07 fc       	sbrc	r0, 7
    1af8:	05 d0       	rcall	.+10     	; 0x1b04 <__divmodhi4_neg2>
    1afa:	3e f4       	brtc	.+14     	; 0x1b0a <__divmodhi4_exit>

00001afc <__divmodhi4_neg1>:
    1afc:	90 95       	com	r25
    1afe:	81 95       	neg	r24
    1b00:	9f 4f       	sbci	r25, 0xFF	; 255
    1b02:	08 95       	ret

00001b04 <__divmodhi4_neg2>:
    1b04:	70 95       	com	r23
    1b06:	61 95       	neg	r22
    1b08:	7f 4f       	sbci	r23, 0xFF	; 255

00001b0a <__divmodhi4_exit>:
    1b0a:	08 95       	ret

00001b0c <__udivmodsi4>:
    1b0c:	a1 e2       	ldi	r26, 0x21	; 33
    1b0e:	1a 2e       	mov	r1, r26
    1b10:	aa 1b       	sub	r26, r26
    1b12:	bb 1b       	sub	r27, r27
    1b14:	fd 01       	movw	r30, r26
    1b16:	0d c0       	rjmp	.+26     	; 0x1b32 <__udivmodsi4_ep>

00001b18 <__udivmodsi4_loop>:
    1b18:	aa 1f       	adc	r26, r26
    1b1a:	bb 1f       	adc	r27, r27
    1b1c:	ee 1f       	adc	r30, r30
    1b1e:	ff 1f       	adc	r31, r31
    1b20:	a2 17       	cp	r26, r18
    1b22:	b3 07       	cpc	r27, r19
    1b24:	e4 07       	cpc	r30, r20
    1b26:	f5 07       	cpc	r31, r21
    1b28:	20 f0       	brcs	.+8      	; 0x1b32 <__udivmodsi4_ep>
    1b2a:	a2 1b       	sub	r26, r18
    1b2c:	b3 0b       	sbc	r27, r19
    1b2e:	e4 0b       	sbc	r30, r20
    1b30:	f5 0b       	sbc	r31, r21

00001b32 <__udivmodsi4_ep>:
    1b32:	66 1f       	adc	r22, r22
    1b34:	77 1f       	adc	r23, r23
    1b36:	88 1f       	adc	r24, r24
    1b38:	99 1f       	adc	r25, r25
    1b3a:	1a 94       	dec	r1
    1b3c:	69 f7       	brne	.-38     	; 0x1b18 <__udivmodsi4_loop>
    1b3e:	60 95       	com	r22
    1b40:	70 95       	com	r23
    1b42:	80 95       	com	r24
    1b44:	90 95       	com	r25
    1b46:	9b 01       	movw	r18, r22
    1b48:	ac 01       	movw	r20, r24
    1b4a:	bd 01       	movw	r22, r26
    1b4c:	cf 01       	movw	r24, r30
    1b4e:	08 95       	ret

00001b50 <__divmodsi4>:
    1b50:	05 2e       	mov	r0, r21
    1b52:	97 fb       	bst	r25, 7
    1b54:	16 f4       	brtc	.+4      	; 0x1b5a <__divmodsi4+0xa>
    1b56:	00 94       	com	r0
    1b58:	06 d0       	rcall	.+12     	; 0x1b66 <__divmodsi4_neg1>
    1b5a:	57 fd       	sbrc	r21, 7
    1b5c:	0c d0       	rcall	.+24     	; 0x1b76 <__divmodsi4_neg2>
    1b5e:	d6 df       	rcall	.-84     	; 0x1b0c <__udivmodsi4>
    1b60:	07 fc       	sbrc	r0, 7
    1b62:	09 d0       	rcall	.+18     	; 0x1b76 <__divmodsi4_neg2>
    1b64:	7e f4       	brtc	.+30     	; 0x1b84 <__divmodsi4_exit>

00001b66 <__divmodsi4_neg1>:
    1b66:	90 95       	com	r25
    1b68:	80 95       	com	r24
    1b6a:	70 95       	com	r23
    1b6c:	61 95       	neg	r22
    1b6e:	7f 4f       	sbci	r23, 0xFF	; 255
    1b70:	8f 4f       	sbci	r24, 0xFF	; 255
    1b72:	9f 4f       	sbci	r25, 0xFF	; 255
    1b74:	08 95       	ret

00001b76 <__divmodsi4_neg2>:
    1b76:	50 95       	com	r21
    1b78:	40 95       	com	r20
    1b7a:	30 95       	com	r19
    1b7c:	21 95       	neg	r18
    1b7e:	3f 4f       	sbci	r19, 0xFF	; 255
    1b80:	4f 4f       	sbci	r20, 0xFF	; 255
    1b82:	5f 4f       	sbci	r21, 0xFF	; 255

00001b84 <__divmodsi4_exit>:
    1b84:	08 95       	ret

00001b86 <__umulhisi3>:
    1b86:	a2 9f       	mul	r26, r18
    1b88:	b0 01       	movw	r22, r0
    1b8a:	b3 9f       	mul	r27, r19
    1b8c:	c0 01       	movw	r24, r0
    1b8e:	a3 9f       	mul	r26, r19
    1b90:	01 d0       	rcall	.+2      	; 0x1b94 <__umulhisi3+0xe>
    1b92:	b2 9f       	mul	r27, r18
    1b94:	70 0d       	add	r23, r0
    1b96:	81 1d       	adc	r24, r1
    1b98:	11 24       	eor	r1, r1
    1b9a:	91 1d       	adc	r25, r1
    1b9c:	08 95       	ret

00001b9e <__usmulhisi3>:
    1b9e:	f3 df       	rcall	.-26     	; 0x1b86 <__umulhisi3>

00001ba0 <__usmulhisi3_tail>:
    1ba0:	b7 ff       	sbrs	r27, 7
    1ba2:	08 95       	ret
    1ba4:	82 1b       	sub	r24, r18
    1ba6:	93 0b       	sbc	r25, r19
    1ba8:	08 95       	ret

00001baa <__muluhisi3>:
    1baa:	ed df       	rcall	.-38     	; 0x1b86 <__umulhisi3>
    1bac:	a5 9f       	mul	r26, r21
    1bae:	90 0d       	add	r25, r0
    1bb0:	b4 9f       	mul	r27, r20
    1bb2:	90 0d       	add	r25, r0
    1bb4:	a4 9f       	mul	r26, r20
    1bb6:	80 0d       	add	r24, r0
    1bb8:	91 1d       	adc	r25, r1
    1bba:	11 24       	eor	r1, r1
    1bbc:	08 95       	ret

00001bbe <__eerd_block_m8>:
    1bbe:	dc 01       	movw	r26, r24
    1bc0:	cb 01       	movw	r24, r22

00001bc2 <__eerd_blraw_m8>:
    1bc2:	fc 01       	movw	r30, r24
    1bc4:	e1 99       	sbic	0x1c, 1	; 28
    1bc6:	fe cf       	rjmp	.-4      	; 0x1bc4 <__eerd_blraw_m8+0x2>
    1bc8:	06 c0       	rjmp	.+12     	; 0x1bd6 <__eerd_blraw_m8+0x14>
    1bca:	ff bb       	out	0x1f, r31	; 31
    1bcc:	ee bb       	out	0x1e, r30	; 30
    1bce:	e0 9a       	sbi	0x1c, 0	; 28
    1bd0:	31 96       	adiw	r30, 0x01	; 1
    1bd2:	0d b2       	in	r0, 0x1d	; 29
    1bd4:	0d 92       	st	X+, r0
    1bd6:	41 50       	subi	r20, 0x01	; 1
    1bd8:	50 40       	sbci	r21, 0x00	; 0
    1bda:	b8 f7       	brcc	.-18     	; 0x1bca <__eerd_blraw_m8+0x8>
    1bdc:	08 95       	ret

00001bde <__eeupd_block_m8>:
    1bde:	dc 01       	movw	r26, r24
    1be0:	a4 0f       	add	r26, r20
    1be2:	b5 1f       	adc	r27, r21
    1be4:	41 50       	subi	r20, 0x01	; 1
    1be6:	50 40       	sbci	r21, 0x00	; 0
    1be8:	40 f0       	brcs	.+16     	; 0x1bfa <__eeupd_block_m8+0x1c>
    1bea:	cb 01       	movw	r24, r22
    1bec:	84 0f       	add	r24, r20
    1bee:	95 1f       	adc	r25, r21
    1bf0:	2e 91       	ld	r18, -X
    1bf2:	05 d0       	rcall	.+10     	; 0x1bfe <__eeupd_r18_m8>
    1bf4:	41 50       	subi	r20, 0x01	; 1
    1bf6:	50 40       	sbci	r21, 0x00	; 0
    1bf8:	d8 f7       	brcc	.-10     	; 0x1bf0 <__eeupd_block_m8+0x12>
    1bfa:	08 95       	ret

00001bfc <__eeupd_byte_m8>:
    1bfc:	26 2f       	mov	r18, r22

00001bfe <__eeupd_r18_m8>:
    1bfe:	e1 99       	sbic	0x1c, 1	; 28
    1c00:	fe cf       	rjmp	.-4      	; 0x1bfe <__eeupd_r18_m8>
    1c02:	9f bb       	out	0x1f, r25	; 31
    1c04:	8e bb       	out	0x1e, r24	; 30
    1c06:	e0 9a       	sbi	0x1c, 0	; 28
    1c08:	01 97       	sbiw	r24, 0x01	; 1
    1c0a:	0d b2       	in	r0, 0x1d	; 29
    1c0c:	02 16       	cp	r0, r18
    1c0e:	31 f0       	breq	.+12     	; 0x1c1c <__eeupd_r18_m8+0x1e>
    1c10:	2d bb       	out	0x1d, r18	; 29
    1c12:	0f b6       	in	r0, 0x3f	; 63
    1c14:	f8 94       	cli
    1c16:	e2 9a       	sbi	0x1c, 2	; 28
    1c18:	e1 9a       	sbi	0x1c, 1	; 28
    1c1a:	0f be       	out	0x3f, r0	; 63
    1c1c:	08 95       	ret

00001c1e <_exit>:
    1c1e:	f8 94       	cli

00001c20 <__stop_program>:
    1c20:	ff cf       	rjmp	.-2      	; 0x1c20 <__stop_program>
