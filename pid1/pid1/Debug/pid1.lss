
pid1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001c96  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000096  00800060  00001c96  00001d4a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000c6  008000f6  008000f6  00001de0  2**0
                  ALLOC
  3 .eeprom       0000000a  00810000  00810000  00001de0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         000009c0  00000000  00000000  00001dec  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      000001a6  00000000  00000000  000027ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      0000002f  00000000  00000000  00002952  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000410  00000000  00000000  00002981  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00003f88  00000000  00000000  00002d91  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00001410  00000000  00000000  00006d19  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00001904  00000000  00000000  00008129  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000a34  00000000  00000000  00009a30  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000010b0  00000000  00000000  0000a464  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000203e  00000000  00000000  0000b514  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000350  00000000  00000000  0000d552  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	ad c0       	rjmp	.+346    	; 0x15c <__ctors_end>
       2:	c7 c0       	rjmp	.+398    	; 0x192 <__bad_interrupt>
       4:	c6 c0       	rjmp	.+396    	; 0x192 <__bad_interrupt>
       6:	3c cd       	rjmp	.-1416   	; 0xfffffa80 <__eeprom_end+0xff7efa76>
       8:	c4 c0       	rjmp	.+392    	; 0x192 <__bad_interrupt>
       a:	c3 c0       	rjmp	.+390    	; 0x192 <__bad_interrupt>
       c:	c2 c0       	rjmp	.+388    	; 0x192 <__bad_interrupt>
       e:	c1 c0       	rjmp	.+386    	; 0x192 <__bad_interrupt>
      10:	c0 c0       	rjmp	.+384    	; 0x192 <__bad_interrupt>
      12:	a1 cb       	rjmp	.-2238   	; 0xfffff756 <__eeprom_end+0xff7ef74c>
      14:	be c0       	rjmp	.+380    	; 0x192 <__bad_interrupt>
      16:	bd c0       	rjmp	.+378    	; 0x192 <__bad_interrupt>
      18:	bc c0       	rjmp	.+376    	; 0x192 <__bad_interrupt>
      1a:	bb c0       	rjmp	.+374    	; 0x192 <__bad_interrupt>
      1c:	09 c2       	rjmp	.+1042   	; 0x430 <__vector_14>
      1e:	b9 c0       	rjmp	.+370    	; 0x192 <__bad_interrupt>
      20:	5c cb       	rjmp	.-2376   	; 0xfffff6da <__eeprom_end+0xff7ef6d0>
      22:	b7 c0       	rjmp	.+366    	; 0x192 <__bad_interrupt>
      24:	b6 c0       	rjmp	.+364    	; 0x192 <__bad_interrupt>

00000026 <led_encode_table>:
      26:	30 3f 4f 3f 31 06 32 5b 33 4f 34 66 53 6d 35 6d     0?O?1.2[3O4fSm5m
      36:	36 7d 37 07 38 7f 39 6f 2e 80 2c 80 2d 40 5f 08     6}7.8.9o..,.-@_.
      46:	20 00 b0 63 41 77 43 39 46 71 4e 54 44 5e 50 73      ..cAwC9FqNTD^Ps
      56:	45 79 52 50                                         EyRP

0000005a <menuFunctionSet>:
      5a:	01 b3 08 c9 06 b3 07 03 b0 07 64 08 2c 06 02 61     ..........d.,..a
      6a:	08 fa 07 a8 07 05 96 07 b5 07 00 00 0b 32 06 b5     .............2..
      7a:	07 40 06 04 96 07 78 06 00 00 0c 32 06 78 06 40     .@....x....2.x.@
      8a:	06 06 9e 07 42 07 00 00 09 32 06 42 07 49 06 07     ....B....2.B.I..
      9a:	9e 07 f4 06 00 00 0a 32 06 f4 06 49 06 08 6a 06     .......2...I..j.
      aa:	54 06 00 00 0d 5c 06 54 06 00 00 0e 90 07 58 06     T....\.T......X.
      ba:	46 06                                               F.

000000bc <menuJumpSet>:
      bc:	01 06 00 03 a8 01 00 01 02 40 01 00 02 05 28 02     .........@....(.
      cc:	00 01 01 80 03 00 83 01 40 05 00 82 01 00 05 04     ........@.......
      dc:	00 04 68 05 02 00 07 a8 05 00 01 0b 28 0b 00 83     ..h.........(...
      ec:	05 28 04 00 82 01 00 04 04 00 06 68 04 02 00 05     .(.........h....
      fc:	a8 04 00 01 0c 28 0c 00 83 04 28 06 00 82 01 00     .....(....(.....
     10c:	06 04 00 07 68 06 02 00 04 a8 06 00 01 09 00 07     ....h...........
     11c:	00 82 01 00 07 04 00 05 68 07 02 00 06 a8 07 00     ........h.......
     12c:	01 0a 00 09 00 02 06 28 09 00 01 08 14 08 00 83     .......(........
     13c:	01 00 0a 00 02 07 28 0a 00 01 0d 14 0d 00 83 01     ......(.........
     14c:	00 01 00 40 0e 00 02 00 40 0e 00 0e 76 01 01 00     ...@....@...v...

0000015c <__ctors_end>:
     15c:	11 24       	eor	r1, r1
     15e:	1f be       	out	0x3f, r1	; 63
     160:	cf e5       	ldi	r28, 0x5F	; 95
     162:	d4 e0       	ldi	r29, 0x04	; 4
     164:	de bf       	out	0x3e, r29	; 62
     166:	cd bf       	out	0x3d, r28	; 61

00000168 <__do_copy_data>:
     168:	10 e0       	ldi	r17, 0x00	; 0
     16a:	a0 e6       	ldi	r26, 0x60	; 96
     16c:	b0 e0       	ldi	r27, 0x00	; 0
     16e:	e6 e9       	ldi	r30, 0x96	; 150
     170:	fc e1       	ldi	r31, 0x1C	; 28
     172:	02 c0       	rjmp	.+4      	; 0x178 <__do_copy_data+0x10>
     174:	05 90       	lpm	r0, Z+
     176:	0d 92       	st	X+, r0
     178:	a6 3f       	cpi	r26, 0xF6	; 246
     17a:	b1 07       	cpc	r27, r17
     17c:	d9 f7       	brne	.-10     	; 0x174 <__do_copy_data+0xc>

0000017e <__do_clear_bss>:
     17e:	21 e0       	ldi	r18, 0x01	; 1
     180:	a6 ef       	ldi	r26, 0xF6	; 246
     182:	b0 e0       	ldi	r27, 0x00	; 0
     184:	01 c0       	rjmp	.+2      	; 0x188 <.do_clear_bss_start>

00000186 <.do_clear_bss_loop>:
     186:	1d 92       	st	X+, r1

00000188 <.do_clear_bss_start>:
     188:	ac 3b       	cpi	r26, 0xBC	; 188
     18a:	b2 07       	cpc	r27, r18
     18c:	e1 f7       	brne	.-8      	; 0x186 <.do_clear_bss_loop>
     18e:	76 d9       	rcall	.-3348   	; 0xfffff47c <__eeprom_end+0xff7ef472>
     190:	80 cd       	rjmp	.-1280   	; 0xfffffc92 <__eeprom_end+0xff7efc88>

00000192 <__bad_interrupt>:
     192:	36 cf       	rjmp	.-404    	; 0x0 <__vectors>

00000194 <conv_ADC_to_Celsius>:
		25 Celsius	->	765
*/


uint16_t conv_ADC_to_Celsius(uint16_t adc_value)
{	
     194:	0f 93       	push	r16
     196:	1f 93       	push	r17
	return (uint16_t)(((int32_t)adc_value * k_norm + offset_norm) / (COEFF_SCALE));
     198:	20 91 f6 00 	lds	r18, 0x00F6
     19c:	30 91 f7 00 	lds	r19, 0x00F7
     1a0:	40 91 f8 00 	lds	r20, 0x00F8
     1a4:	50 91 f9 00 	lds	r21, 0x00F9
     1a8:	dc 01       	movw	r26, r24
     1aa:	39 dd       	rcall	.-1422   	; 0xfffffc1e <__eeprom_end+0xff7efc14>
     1ac:	00 91 fa 00 	lds	r16, 0x00FA
     1b0:	10 91 fb 00 	lds	r17, 0x00FB
     1b4:	20 91 fc 00 	lds	r18, 0x00FC
     1b8:	30 91 fd 00 	lds	r19, 0x00FD
     1bc:	60 0f       	add	r22, r16
     1be:	71 1f       	adc	r23, r17
     1c0:	82 1f       	adc	r24, r18
     1c2:	93 1f       	adc	r25, r19
     1c4:	28 ee       	ldi	r18, 0xE8	; 232
     1c6:	33 e0       	ldi	r19, 0x03	; 3
     1c8:	40 e0       	ldi	r20, 0x00	; 0
     1ca:	50 e0       	ldi	r21, 0x00	; 0
     1cc:	fb dc       	rcall	.-1546   	; 0xfffffbc4 <__eeprom_end+0xff7efbba>
}
     1ce:	c9 01       	movw	r24, r18
     1d0:	1f 91       	pop	r17
     1d2:	0f 91       	pop	r16
     1d4:	08 95       	ret

000001d6 <conv_Celsius_to_ADC>:

uint16_t conv_Celsius_to_ADC(uint16_t degree_value)
{
     1d6:	0f 93       	push	r16
     1d8:	1f 93       	push	r17
	degree_value += 1;
     1da:	9c 01       	movw	r18, r24
     1dc:	2f 5f       	subi	r18, 0xFF	; 255
     1de:	3f 4f       	sbci	r19, 0xFF	; 255
	return (uint16_t)(((int32_t)degree_value * COEFF_SCALE - offset_norm) / k_norm);
     1e0:	a8 ee       	ldi	r26, 0xE8	; 232
     1e2:	b3 e0       	ldi	r27, 0x03	; 3
     1e4:	0a dd       	rcall	.-1516   	; 0xfffffbfa <__eeprom_end+0xff7efbf0>
     1e6:	00 91 fa 00 	lds	r16, 0x00FA
     1ea:	10 91 fb 00 	lds	r17, 0x00FB
     1ee:	20 91 fc 00 	lds	r18, 0x00FC
     1f2:	30 91 fd 00 	lds	r19, 0x00FD
     1f6:	60 1b       	sub	r22, r16
     1f8:	71 0b       	sbc	r23, r17
     1fa:	82 0b       	sbc	r24, r18
     1fc:	93 0b       	sbc	r25, r19
     1fe:	20 91 f6 00 	lds	r18, 0x00F6
     202:	30 91 f7 00 	lds	r19, 0x00F7
     206:	40 91 f8 00 	lds	r20, 0x00F8
     20a:	50 91 f9 00 	lds	r21, 0x00F9
     20e:	da dc       	rcall	.-1612   	; 0xfffffbc4 <__eeprom_end+0xff7efbba>
}
     210:	c9 01       	movw	r24, r18
     212:	1f 91       	pop	r17
     214:	0f 91       	pop	r16
     216:	08 95       	ret

00000218 <calculateCoeffs>:

void calculateCoeffs(void)
{
     218:	8f 92       	push	r8
     21a:	9f 92       	push	r9
     21c:	af 92       	push	r10
     21e:	bf 92       	push	r11
     220:	cf 92       	push	r12
     222:	df 92       	push	r13
     224:	ef 92       	push	r14
     226:	ff 92       	push	r15
     228:	cf 93       	push	r28
     22a:	df 93       	push	r29
	k_norm = ((int32_t)(cp.cpoint2 - cp.cpoint1) * COEFF_SCALE) / ((int32_t)(cp.cpoint2_adc - cp.cpoint1_adc));
     22c:	f0 90 8a 01 	lds	r15, 0x018A
     230:	a0 91 8b 01 	lds	r26, 0x018B
     234:	b0 e0       	ldi	r27, 0x00	; 0
     236:	af 19       	sub	r26, r15
     238:	b1 09       	sbc	r27, r1
     23a:	c0 91 8c 01 	lds	r28, 0x018C
     23e:	d0 91 8d 01 	lds	r29, 0x018D
     242:	28 ee       	ldi	r18, 0xE8	; 232
     244:	33 e0       	ldi	r19, 0x03	; 3
     246:	e5 dc       	rcall	.-1590   	; 0xfffffc12 <__eeprom_end+0xff7efc08>
     248:	20 91 8e 01 	lds	r18, 0x018E
     24c:	30 91 8f 01 	lds	r19, 0x018F
     250:	2c 1b       	sub	r18, r28
     252:	3d 0b       	sbc	r19, r29
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	b5 dc       	rcall	.-1686   	; 0xfffffbc4 <__eeprom_end+0xff7efbba>
     25a:	49 01       	movw	r8, r18
     25c:	5a 01       	movw	r10, r20
     25e:	20 93 f6 00 	sts	0x00F6, r18
     262:	30 93 f7 00 	sts	0x00F7, r19
     266:	40 93 f8 00 	sts	0x00F8, r20
     26a:	50 93 f9 00 	sts	0x00F9, r21
	offset_norm = (int32_t)cp.cpoint1 * COEFF_SCALE - (int32_t)cp.cpoint1_adc * k_norm;
     26e:	2f 2d       	mov	r18, r15
     270:	30 e0       	ldi	r19, 0x00	; 0
     272:	a8 ee       	ldi	r26, 0xE8	; 232
     274:	b3 e0       	ldi	r27, 0x03	; 3
     276:	c1 dc       	rcall	.-1662   	; 0xfffffbfa <__eeprom_end+0xff7efbf0>
     278:	6b 01       	movw	r12, r22
     27a:	7c 01       	movw	r14, r24
     27c:	de 01       	movw	r26, r28
     27e:	a5 01       	movw	r20, r10
     280:	94 01       	movw	r18, r8
     282:	cd dc       	rcall	.-1638   	; 0xfffffc1e <__eeprom_end+0xff7efc14>
     284:	c6 1a       	sub	r12, r22
     286:	d7 0a       	sbc	r13, r23
     288:	e8 0a       	sbc	r14, r24
     28a:	f9 0a       	sbc	r15, r25
     28c:	c0 92 fa 00 	sts	0x00FA, r12
     290:	d0 92 fb 00 	sts	0x00FB, r13
     294:	e0 92 fc 00 	sts	0x00FC, r14
     298:	f0 92 fd 00 	sts	0x00FD, r15
}
     29c:	df 91       	pop	r29
     29e:	cf 91       	pop	r28
     2a0:	ff 90       	pop	r15
     2a2:	ef 90       	pop	r14
     2a4:	df 90       	pop	r13
     2a6:	cf 90       	pop	r12
     2a8:	bf 90       	pop	r11
     2aa:	af 90       	pop	r10
     2ac:	9f 90       	pop	r9
     2ae:	8f 90       	pop	r8
     2b0:	08 95       	ret

000002b2 <update_Celsius>:
}

void update_Celsius(void)
{
	// Convert to Celsius degree
	adc_celsius = conv_ADC_to_Celsius(adc_normalized);
     2b2:	80 91 5d 01 	lds	r24, 0x015D
     2b6:	90 91 5e 01 	lds	r25, 0x015E
     2ba:	6c df       	rcall	.-296    	; 0x194 <conv_ADC_to_Celsius>
     2bc:	90 93 60 01 	sts	0x0160, r25
     2c0:	80 93 5f 01 	sts	0x015F, r24
     2c4:	08 95       	ret

000002c6 <iir_u16>:



// IIR digital filter
uint16_t iir_u16(uint16_t *data, filter8bit_core_t* iir_core)
{
     2c6:	cf 92       	push	r12
     2c8:	df 92       	push	r13
     2ca:	ef 92       	push	r14
     2cc:	ff 92       	push	r15
     2ce:	1f 93       	push	r17
     2d0:	cf 93       	push	r28
     2d2:	df 93       	push	r29
     2d4:	eb 01       	movw	r28, r22
	uint32_t summ = 0;
	uint8_t i;
	
	for (i=0; i<iir_core->n; i++)
     2d6:	18 81       	ld	r17, Y
     2d8:	fc 01       	movw	r30, r24
     2da:	40 e0       	ldi	r20, 0x00	; 0
     2dc:	50 e0       	ldi	r21, 0x00	; 0


// IIR digital filter
uint16_t iir_u16(uint16_t *data, filter8bit_core_t* iir_core)
{
	uint32_t summ = 0;
     2de:	c1 2c       	mov	r12, r1
     2e0:	d1 2c       	mov	r13, r1
     2e2:	76 01       	movw	r14, r12
	uint8_t i;
	
	for (i=0; i<iir_core->n; i++)
     2e4:	0f c0       	rjmp	.+30     	; 0x304 <iir_u16+0x3e>
		summ += (uint32_t)data[i] * iir_core->coeffs[i];
     2e6:	21 91       	ld	r18, Z+
     2e8:	31 91       	ld	r19, Z+
}	



// IIR digital filter
uint16_t iir_u16(uint16_t *data, filter8bit_core_t* iir_core)
     2ea:	de 01       	movw	r26, r28
     2ec:	a4 0f       	add	r26, r20
     2ee:	b5 1f       	adc	r27, r21
{
	uint32_t summ = 0;
	uint8_t i;
	
	for (i=0; i<iir_core->n; i++)
		summ += (uint32_t)data[i] * iir_core->coeffs[i];
     2f0:	13 96       	adiw	r26, 0x03	; 3
     2f2:	ac 91       	ld	r26, X
     2f4:	b0 e0       	ldi	r27, 0x00	; 0
     2f6:	81 dc       	rcall	.-1790   	; 0xfffffbfa <__eeprom_end+0xff7efbf0>
     2f8:	c6 0e       	add	r12, r22
     2fa:	d7 1e       	adc	r13, r23
     2fc:	e8 1e       	adc	r14, r24
     2fe:	f9 1e       	adc	r15, r25
     300:	4f 5f       	subi	r20, 0xFF	; 255
     302:	5f 4f       	sbci	r21, 0xFF	; 255
uint16_t iir_u16(uint16_t *data, filter8bit_core_t* iir_core)
{
	uint32_t summ = 0;
	uint8_t i;
	
	for (i=0; i<iir_core->n; i++)
     304:	41 17       	cp	r20, r17
     306:	78 f3       	brcs	.-34     	; 0x2e6 <iir_u16+0x20>
		summ += (uint32_t)data[i] * iir_core->coeffs[i];
	
	
	return (uint16_t)(summ / iir_core->dc_gain);
     308:	29 81       	ldd	r18, Y+1	; 0x01
     30a:	3a 81       	ldd	r19, Y+2	; 0x02
     30c:	40 e0       	ldi	r20, 0x00	; 0
     30e:	50 e0       	ldi	r21, 0x00	; 0
     310:	c7 01       	movw	r24, r14
     312:	b6 01       	movw	r22, r12
     314:	35 dc       	rcall	.-1942   	; 0xfffffb80 <__eeprom_end+0xff7efb76>
}
     316:	c9 01       	movw	r24, r18
     318:	df 91       	pop	r29
     31a:	cf 91       	pop	r28
     31c:	1f 91       	pop	r17
     31e:	ff 90       	pop	r15
     320:	ef 90       	pop	r14
     322:	df 90       	pop	r13
     324:	cf 90       	pop	r12
     326:	08 95       	ret

00000328 <iir_i16>:

int16_t iir_i16(int16_t *data, filter8bit_core_t* iir_core)
{
     328:	cf 92       	push	r12
     32a:	df 92       	push	r13
     32c:	ef 92       	push	r14
     32e:	ff 92       	push	r15
     330:	1f 93       	push	r17
     332:	cf 93       	push	r28
     334:	df 93       	push	r29
     336:	eb 01       	movw	r28, r22
	int32_t summ = 0;
	uint8_t i;
	
	for (i=0; i<iir_core->n; i++)
     338:	18 81       	ld	r17, Y
     33a:	fc 01       	movw	r30, r24
     33c:	40 e0       	ldi	r20, 0x00	; 0
     33e:	50 e0       	ldi	r21, 0x00	; 0
	return (uint16_t)(summ / iir_core->dc_gain);
}

int16_t iir_i16(int16_t *data, filter8bit_core_t* iir_core)
{
	int32_t summ = 0;
     340:	c1 2c       	mov	r12, r1
     342:	d1 2c       	mov	r13, r1
     344:	76 01       	movw	r14, r12
	uint8_t i;
	
	for (i=0; i<iir_core->n; i++)
     346:	11 c0       	rjmp	.+34     	; 0x36a <iir_i16+0x42>
	summ += (int32_t)data[i] * iir_core->coeffs[i];
     348:	61 91       	ld	r22, Z+
     34a:	71 91       	ld	r23, Z+
	
	
	return (uint16_t)(summ / iir_core->dc_gain);
}

int16_t iir_i16(int16_t *data, filter8bit_core_t* iir_core)
     34c:	ce 01       	movw	r24, r28
     34e:	84 0f       	add	r24, r20
     350:	95 1f       	adc	r25, r21
{
	int32_t summ = 0;
	uint8_t i;
	
	for (i=0; i<iir_core->n; i++)
	summ += (int32_t)data[i] * iir_core->coeffs[i];
     352:	dc 01       	movw	r26, r24
     354:	13 96       	adiw	r26, 0x03	; 3
     356:	2c 91       	ld	r18, X
     358:	30 e0       	ldi	r19, 0x00	; 0
     35a:	db 01       	movw	r26, r22
     35c:	5a dc       	rcall	.-1868   	; 0xfffffc12 <__eeprom_end+0xff7efc08>
     35e:	c6 0e       	add	r12, r22
     360:	d7 1e       	adc	r13, r23
     362:	e8 1e       	adc	r14, r24
     364:	f9 1e       	adc	r15, r25
     366:	4f 5f       	subi	r20, 0xFF	; 255
     368:	5f 4f       	sbci	r21, 0xFF	; 255
int16_t iir_i16(int16_t *data, filter8bit_core_t* iir_core)
{
	int32_t summ = 0;
	uint8_t i;
	
	for (i=0; i<iir_core->n; i++)
     36a:	41 17       	cp	r20, r17
     36c:	68 f3       	brcs	.-38     	; 0x348 <iir_i16+0x20>
	summ += (int32_t)data[i] * iir_core->coeffs[i];
	
	
	return (int16_t)(summ / iir_core->dc_gain);
     36e:	29 81       	ldd	r18, Y+1	; 0x01
     370:	3a 81       	ldd	r19, Y+2	; 0x02
     372:	40 e0       	ldi	r20, 0x00	; 0
     374:	50 e0       	ldi	r21, 0x00	; 0
     376:	c7 01       	movw	r24, r14
     378:	b6 01       	movw	r22, r12
     37a:	24 dc       	rcall	.-1976   	; 0xfffffbc4 <__eeprom_end+0xff7efbba>
}
     37c:	c9 01       	movw	r24, r18
     37e:	df 91       	pop	r29
     380:	cf 91       	pop	r28
     382:	1f 91       	pop	r17
     384:	ff 90       	pop	r15
     386:	ef 90       	pop	r14
     388:	df 90       	pop	r13
     38a:	cf 90       	pop	r12
     38c:	08 95       	ret

0000038e <addToRingU16>:
//---------------------------------------------//
//---------------------------------------------//

// Ring buffer main function - add new data and update summ
void addToRingU16(RingBufU16_t* bptr, uint16_t sample)
{
     38e:	ff 92       	push	r15
     390:	0f 93       	push	r16
     392:	1f 93       	push	r17
     394:	cf 93       	push	r28
     396:	df 93       	push	r29
     398:	fc 01       	movw	r30, r24
     39a:	cb 01       	movw	r24, r22
	if (bptr->stat == RNORM)
     39c:	20 85       	ldd	r18, Z+8	; 0x08
     39e:	21 11       	cpse	r18, r1
     3a0:	18 c0       	rjmp	.+48     	; 0x3d2 <addToRingU16+0x44>
	{
		bptr->summ -= bptr->data[bptr->curr_pos];
     3a2:	27 81       	ldd	r18, Z+7	; 0x07
     3a4:	41 81       	ldd	r20, Z+1	; 0x01
     3a6:	32 81       	ldd	r19, Z+2	; 0x02
     3a8:	a4 2f       	mov	r26, r20
     3aa:	b3 2f       	mov	r27, r19
     3ac:	a2 0f       	add	r26, r18
     3ae:	b1 1d       	adc	r27, r1
     3b0:	a2 0f       	add	r26, r18
     3b2:	b1 1d       	adc	r27, r1
     3b4:	2d 91       	ld	r18, X+
     3b6:	3c 91       	ld	r19, X
     3b8:	43 81       	ldd	r20, Z+3	; 0x03
     3ba:	54 81       	ldd	r21, Z+4	; 0x04
     3bc:	65 81       	ldd	r22, Z+5	; 0x05
     3be:	76 81       	ldd	r23, Z+6	; 0x06
     3c0:	42 1b       	sub	r20, r18
     3c2:	53 0b       	sbc	r21, r19
     3c4:	61 09       	sbc	r22, r1
     3c6:	71 09       	sbc	r23, r1
     3c8:	43 83       	std	Z+3, r20	; 0x03
     3ca:	54 83       	std	Z+4, r21	; 0x04
     3cc:	65 83       	std	Z+5, r22	; 0x05
     3ce:	76 83       	std	Z+6, r23	; 0x06
     3d0:	05 c0       	rjmp	.+10     	; 0x3dc <addToRingU16+0x4e>
	}
	else
	{
		bptr->curr_pos = 0;
     3d2:	17 82       	std	Z+7, r1	; 0x07
		bptr->summ = 0;
     3d4:	13 82       	std	Z+3, r1	; 0x03
     3d6:	14 82       	std	Z+4, r1	; 0x04
     3d8:	15 82       	std	Z+5, r1	; 0x05
     3da:	16 82       	std	Z+6, r1	; 0x06
	}
	do	
	{
		bptr->data[bptr->curr_pos++] = sample;
     3dc:	d1 81       	ldd	r29, Z+1	; 0x01
     3de:	f2 80       	ldd	r15, Z+2	; 0x02
     3e0:	43 81       	ldd	r20, Z+3	; 0x03
     3e2:	54 81       	ldd	r21, Z+4	; 0x04
     3e4:	65 81       	ldd	r22, Z+5	; 0x05
     3e6:	76 81       	ldd	r23, Z+6	; 0x06
		bptr->summ += sample;
     3e8:	8c 01       	movw	r16, r24
     3ea:	20 e0       	ldi	r18, 0x00	; 0
     3ec:	30 e0       	ldi	r19, 0x00	; 0
		bptr->curr_pos = 0;
		bptr->summ = 0;
	}
	do	
	{
		bptr->data[bptr->curr_pos++] = sample;
     3ee:	c7 81       	ldd	r28, Z+7	; 0x07
     3f0:	ad 2f       	mov	r26, r29
     3f2:	bf 2d       	mov	r27, r15
     3f4:	ac 0f       	add	r26, r28
     3f6:	b1 1d       	adc	r27, r1
     3f8:	ac 0f       	add	r26, r28
     3fa:	b1 1d       	adc	r27, r1
     3fc:	8d 93       	st	X+, r24
     3fe:	9c 93       	st	X, r25
     400:	cf 5f       	subi	r28, 0xFF	; 255
     402:	c7 83       	std	Z+7, r28	; 0x07
//---------------------------------------------//
//---------------------------------------------//
//---------------------------------------------//

// Ring buffer main function - add new data and update summ
void addToRingU16(RingBufU16_t* bptr, uint16_t sample)
     404:	40 0f       	add	r20, r16
     406:	51 1f       	adc	r21, r17
     408:	62 1f       	adc	r22, r18
     40a:	73 1f       	adc	r23, r19
	}
	do	
	{
		bptr->data[bptr->curr_pos++] = sample;
		bptr->summ += sample;
		if (bptr->curr_pos == bptr->length)	
     40c:	a0 81       	ld	r26, Z
     40e:	ca 13       	cpse	r28, r26
     410:	02 c0       	rjmp	.+4      	; 0x416 <addToRingU16+0x88>
		{	
			bptr->curr_pos = 0;	
     412:	17 82       	std	Z+7, r1	; 0x07
			bptr->stat = RNORM;
     414:	10 86       	std	Z+8, r1	; 0x08
		}
	} 
	while (bptr->stat != RNORM);
     416:	a0 85       	ldd	r26, Z+8	; 0x08
     418:	a1 11       	cpse	r26, r1
     41a:	e9 cf       	rjmp	.-46     	; 0x3ee <addToRingU16+0x60>
     41c:	43 83       	std	Z+3, r20	; 0x03
     41e:	54 83       	std	Z+4, r21	; 0x04
     420:	65 83       	std	Z+5, r22	; 0x05
     422:	76 83       	std	Z+6, r23	; 0x06
}
     424:	df 91       	pop	r29
     426:	cf 91       	pop	r28
     428:	1f 91       	pop	r17
     42a:	0f 91       	pop	r16
     42c:	ff 90       	pop	r15
     42e:	08 95       	ret

00000430 <__vector_14>:
}
*/


ISR(ADC_vect)
{
     430:	1f 92       	push	r1
     432:	0f 92       	push	r0
     434:	0f b6       	in	r0, 0x3f	; 63
     436:	0f 92       	push	r0
     438:	11 24       	eor	r1, r1
     43a:	2f 93       	push	r18
     43c:	3f 93       	push	r19
     43e:	4f 93       	push	r20
     440:	5f 93       	push	r21
     442:	6f 93       	push	r22
     444:	7f 93       	push	r23
     446:	8f 93       	push	r24
     448:	9f 93       	push	r25
     44a:	af 93       	push	r26
     44c:	bf 93       	push	r27
     44e:	ef 93       	push	r30
     450:	ff 93       	push	r31
	// Get new sample
	uint16_t new_sample = 1024 - ADC;	
     452:	84 b1       	in	r24, 0x04	; 4
     454:	95 b1       	in	r25, 0x05	; 5
     456:	60 e0       	ldi	r22, 0x00	; 0
     458:	74 e0       	ldi	r23, 0x04	; 4
     45a:	68 1b       	sub	r22, r24
     45c:	79 0b       	sbc	r23, r25
	// Add new sample to the ring buffer
	addToRingU16(&ringBufADC, new_sample);
     45e:	80 e8       	ldi	r24, 0x80	; 128
     460:	90 e0       	ldi	r25, 0x00	; 0
     462:	95 df       	rcall	.-214    	; 0x38e <addToRingU16>
}	
     464:	ff 91       	pop	r31
     466:	ef 91       	pop	r30
     468:	bf 91       	pop	r27
     46a:	af 91       	pop	r26
     46c:	9f 91       	pop	r25
     46e:	8f 91       	pop	r24
     470:	7f 91       	pop	r23
     472:	6f 91       	pop	r22
     474:	5f 91       	pop	r21
     476:	4f 91       	pop	r20
     478:	3f 91       	pop	r19
     47a:	2f 91       	pop	r18
     47c:	0f 90       	pop	r0
     47e:	0f be       	out	0x3f, r0	; 63
     480:	0f 90       	pop	r0
     482:	1f 90       	pop	r1
     484:	18 95       	reti

00000486 <update_normalized_adc>:
	offset_norm = (int32_t)cp.cpoint1 * COEFF_SCALE - (int32_t)cp.cpoint1_adc * k_norm;
}


void update_normalized_adc()
{
     486:	cf 92       	push	r12
     488:	df 92       	push	r13
     48a:	ef 92       	push	r14
     48c:	ff 92       	push	r15
	// Disable interrupts from ADC - to save data integrity
	ADCSRA &= ~(1<<ADIE);	
     48e:	33 98       	cbi	0x06, 3	; 6
}

// Get ring buffer normalized value
uint16_t getNormalizedRingU16(RingBufU16_t* bptr)
{
	return 	bptr->summ / bptr->length;
     490:	c0 90 83 00 	lds	r12, 0x0083
     494:	d0 90 84 00 	lds	r13, 0x0084
     498:	e0 90 85 00 	lds	r14, 0x0085
     49c:	f0 90 86 00 	lds	r15, 0x0086
     4a0:	20 91 80 00 	lds	r18, 0x0080
     4a4:	30 e0       	ldi	r19, 0x00	; 0
     4a6:	40 e0       	ldi	r20, 0x00	; 0
     4a8:	50 e0       	ldi	r21, 0x00	; 0
     4aa:	c7 01       	movw	r24, r14
     4ac:	b6 01       	movw	r22, r12
     4ae:	68 db       	rcall	.-2352   	; 0xfffffb80 <__eeprom_end+0xff7efb76>
     4b0:	30 93 5e 01 	sts	0x015E, r19
     4b4:	20 93 5d 01 	sts	0x015D, r18
{
	// Disable interrupts from ADC - to save data integrity
	ADCSRA &= ~(1<<ADIE);	
	// Get normalized mean window summ
	adc_normalized = (uint16_t)getNormalizedRingU16(&ringBufADC);
	adc_oversampled = ringBufADC.summ >> 2;
     4b8:	c7 01       	movw	r24, r14
     4ba:	b6 01       	movw	r22, r12
     4bc:	22 e0       	ldi	r18, 0x02	; 2
     4be:	96 95       	lsr	r25
     4c0:	87 95       	ror	r24
     4c2:	77 95       	ror	r23
     4c4:	67 95       	ror	r22
     4c6:	2a 95       	dec	r18
     4c8:	d1 f7       	brne	.-12     	; 0x4be <update_normalized_adc+0x38>
     4ca:	70 93 34 01 	sts	0x0134, r23
     4ce:	60 93 33 01 	sts	0x0133, r22
	// Filter
	addToRingU16(&ringBufFilter, adc_oversampled);
     4d2:	87 e7       	ldi	r24, 0x77	; 119
     4d4:	90 e0       	ldi	r25, 0x00	; 0
     4d6:	5b df       	rcall	.-330    	; 0x38e <addToRingU16>
	adc_filtered = iir_u16(filter_buffer, &iir_filter_rect);	
     4d8:	60 e6       	ldi	r22, 0x60	; 96
     4da:	70 e0       	ldi	r23, 0x00	; 0
     4dc:	81 e6       	ldi	r24, 0x61	; 97
     4de:	91 e0       	ldi	r25, 0x01	; 1
     4e0:	f2 de       	rcall	.-540    	; 0x2c6 <iir_u16>
     4e2:	90 93 32 01 	sts	0x0132, r25
     4e6:	80 93 31 01 	sts	0x0131, r24

	// Enable interrupts from ADC
	ADCSRA |= (1<<ADIE);
     4ea:	33 9a       	sbi	0x06, 3	; 6
}
     4ec:	ff 90       	pop	r15
     4ee:	ef 90       	pop	r14
     4f0:	df 90       	pop	r13
     4f2:	cf 90       	pop	r12
     4f4:	08 95       	ret

000004f6 <process_buttons>:
	uint8_t long_press_mask;
	uint8_t long_press_event_mask;
	
	uint16_t composed_state;
	
	raw_delayed = raw_current;
     4f6:	50 91 04 01 	lds	r21, 0x0104
	raw_delayed_inv = raw_current_inv;
     4fa:	30 91 89 00 	lds	r19, 0x0089
	raw_current = raw_button_state;
     4fe:	90 91 bb 01 	lds	r25, 0x01BB
     502:	90 93 04 01 	sts	0x0104, r25
	raw_current_inv = ~raw_current;
     506:	69 2f       	mov	r22, r25
     508:	60 95       	com	r22
     50a:	60 93 89 00 	sts	0x0089, r22
	
	// Must be before press_timer update
	long_press_mask = (press_timer >= LONG_PRESS_DELAY) ? 0xFF : 0x00;
     50e:	80 91 05 01 	lds	r24, 0x0105
     512:	8c 30       	cpi	r24, 0x0C	; 12
     514:	10 f0       	brcs	.+4      	; 0x51a <process_buttons+0x24>
     516:	2f ef       	ldi	r18, 0xFF	; 255
     518:	01 c0       	rjmp	.+2      	; 0x51c <process_buttons+0x26>
     51a:	20 e0       	ldi	r18, 0x00	; 0
	
	if (raw_delayed != raw_current)
     51c:	59 17       	cp	r21, r25
     51e:	19 f0       	breq	.+6      	; 0x526 <process_buttons+0x30>
	{
		press_timer = 0;
     520:	10 92 05 01 	sts	0x0105, r1
     524:	05 c0       	rjmp	.+10     	; 0x530 <process_buttons+0x3a>
	}
	else if (press_timer <= LONG_PRESS_DELAY)
     526:	8d 30       	cpi	r24, 0x0D	; 13
     528:	18 f4       	brcc	.+6      	; 0x530 <process_buttons+0x3a>
	{
		press_timer++;
     52a:	8f 5f       	subi	r24, 0xFF	; 255
     52c:	80 93 05 01 	sts	0x0105, r24
	}
	
	// Must after press_timer update
	long_press_event_mask = (press_timer == LONG_PRESS_DELAY) ? 0xFF : 0x00;
     530:	70 91 05 01 	lds	r23, 0x0105
     534:	7c 30       	cpi	r23, 0x0C	; 12
     536:	11 f4       	brne	.+4      	; 0x53c <process_buttons+0x46>
     538:	4f ef       	ldi	r20, 0xFF	; 255
     53a:	01 c0       	rjmp	.+2      	; 0x53e <process_buttons+0x48>
     53c:	40 e0       	ldi	r20, 0x00	; 0
			
	button_action_down = raw_current & raw_delayed_inv;
     53e:	89 2f       	mov	r24, r25
     540:	83 23       	and	r24, r19
     542:	80 93 01 01 	sts	0x0101, r24
			
	if (press_timer > REPEAT_DELAY)
     546:	77 30       	cpi	r23, 0x07	; 7
     548:	08 f0       	brcs	.+2      	; 0x54c <process_buttons+0x56>
		raw_delayed_inv |= 0xFF;
     54a:	3f ef       	ldi	r19, 0xFF	; 255
	
	button_action_rep = raw_current & raw_delayed_inv;
     54c:	39 23       	and	r19, r25
     54e:	30 93 00 01 	sts	0x0100, r19
	
	button_action_up_short = raw_current_inv & raw_delayed & ~long_press_mask;
     552:	20 95       	com	r18
     554:	56 23       	and	r21, r22
     556:	25 23       	and	r18, r21
     558:	20 93 ff 00 	sts	0x00FF, r18
	//button_action_up_long  = raw_current_inv & raw_delayed & long_press_mask;
	button_action_long  = raw_current & long_press_event_mask;
     55c:	49 23       	and	r20, r25
     55e:	40 93 fe 00 	sts	0x00FE, r20
	
	// Compose button state
	composed_state = (button_action_down & (BD_MENU | BD_UP | BD_DOWN | BD_ROTFWD | BD_ROTREV | BD_HEATCTRL | BD_CYCLE));
     562:	87 7f       	andi	r24, 0xF7	; 247
     564:	90 e0       	ldi	r25, 0x00	; 0
	if (button_action_up_short & BD_MENU)
     566:	20 fd       	sbrc	r18, 0
		composed_state |= BS_MENU;
     568:	91 60       	ori	r25, 0x01	; 1
	//if (button_action_up_long & BD_MENU)
	if (button_action_long & BD_MENU)
     56a:	40 fd       	sbrc	r20, 0
		composed_state |= BL_MENU;
     56c:	92 60       	ori	r25, 0x02	; 2
	if (button_action_rep & BD_UP)
     56e:	31 fd       	sbrc	r19, 1
		composed_state |= BR_UP;	
     570:	94 60       	ori	r25, 0x04	; 4
	if (button_action_rep & BD_DOWN)
     572:	32 fd       	sbrc	r19, 2
		composed_state |= BR_DOWN;
     574:	98 60       	ori	r25, 0x08	; 8

	button_state = composed_state;
     576:	90 93 03 01 	sts	0x0103, r25
     57a:	80 93 02 01 	sts	0x0102, r24
     57e:	08 95       	ret

00000580 <processRollControl>:
int16_t dbg_PID_output;


// Function to control motor rotation
void processRollControl(void)
{	
     580:	cf 93       	push	r28
//	static uint8_t beepMask = 0x00;
//	uint8_t nextBeepMask = 0xFF;
	static uint8_t force_rotate = 0;
	
	// Process auto power off control
	if (autoPowerOffState & AUTO_POFF_ACTIVE)
     582:	80 91 06 01 	lds	r24, 0x0106
     586:	80 ff       	sbrs	r24, 0
     588:	0f c0       	rjmp	.+30     	; 0x5a8 <processRollControl+0x28>
	{
		stopCycleRolling(1);	
     58a:	81 e0       	ldi	r24, 0x01	; 1
     58c:	52 d8       	rcall	.-3932   	; 0xfffff632 <__eeprom_end+0xff7ef628>
		if (adc_celsius <= POFF_MOTOR_TRESHOLD)
     58e:	80 91 5f 01 	lds	r24, 0x015F
     592:	90 91 60 01 	lds	r25, 0x0160
     596:	c3 97       	sbiw	r24, 0x33	; 51
     598:	08 f0       	brcs	.+2      	; 0x59c <processRollControl+0x1c>
     59a:	5f c0       	rjmp	.+190    	; 0x65a <processRollControl+0xda>
		{
			force_rotate = ROLL_FWD;		// Default direction
     59c:	81 e0       	ldi	r24, 0x01	; 1
     59e:	80 93 08 01 	sts	0x0108, r24
			setMotorDirection(0);			// Stop the motor
     5a2:	80 e0       	ldi	r24, 0x00	; 0
     5a4:	25 d8       	rcall	.-4022   	; 0xfffff5f0 <__eeprom_end+0xff7ef5e6>
     5a6:	59 c0       	rjmp	.+178    	; 0x65a <processRollControl+0xda>
		}
	}
	else
	{
		// Control direction by buttons
		if (button_action_down & BD_ROTFWD)
     5a8:	80 91 01 01 	lds	r24, 0x0101
     5ac:	84 ff       	sbrs	r24, 4
     5ae:	04 c0       	rjmp	.+8      	; 0x5b8 <processRollControl+0x38>
		{
			setMotorDirection(ROLL_FWD);	
     5b0:	81 e0       	ldi	r24, 0x01	; 1
     5b2:	1e d8       	rcall	.-4036   	; 0xfffff5f0 <__eeprom_end+0xff7ef5e6>
			beepState |= 0x01;			// pressed FWD button
     5b4:	c1 e0       	ldi	r28, 0x01	; 1
     5b6:	13 c0       	rjmp	.+38     	; 0x5de <processRollControl+0x5e>
		}		
		else if (button_action_down & BD_ROTREV)
     5b8:	85 ff       	sbrs	r24, 5
     5ba:	04 c0       	rjmp	.+8      	; 0x5c4 <processRollControl+0x44>
		{
			setMotorDirection(ROLL_REV);
     5bc:	82 e0       	ldi	r24, 0x02	; 2
     5be:	18 d8       	rcall	.-4048   	; 0xfffff5f0 <__eeprom_end+0xff7ef5e6>
			beepState |= 0x02;			// pressed REV button
     5c0:	c2 e0       	ldi	r28, 0x02	; 2
     5c2:	0d c0       	rjmp	.+26     	; 0x5de <processRollControl+0x5e>
		}		
		else if (button_action_long & BD_CYCLE)
     5c4:	80 91 fe 00 	lds	r24, 0x00FE
     5c8:	87 ff       	sbrs	r24, 7
     5ca:	04 c0       	rjmp	.+8      	; 0x5d4 <processRollControl+0x54>
		{
			stopCycleRolling(1);		// Reset points and disable CYCLE mode (if was enabled)
     5cc:	81 e0       	ldi	r24, 0x01	; 1
     5ce:	31 d8       	rcall	.-3998   	; 0xfffff632 <__eeprom_end+0xff7ef628>
			beepState |= 0x08;			// reset of points by long pressing of ROLL button
     5d0:	c8 e0       	ldi	r28, 0x08	; 8
     5d2:	05 c0       	rjmp	.+10     	; 0x5de <processRollControl+0x5e>
		}
		else if (force_rotate)
     5d4:	80 91 08 01 	lds	r24, 0x0108
     5d8:	81 11       	cpse	r24, r1
		{
			// Auto power off mode was exited by pressing some other button, not direction buttons
			// Start roll, but do not beep in this case
			setMotorDirection(force_rotate);
     5da:	0a d8       	rcall	.-4076   	; 0xfffff5f0 <__eeprom_end+0xff7ef5e6>


// Function to control motor rotation
void processRollControl(void)
{	
	uint8_t beepState = 0;
     5dc:	c0 e0       	ldi	r28, 0x00	; 0
		{
			// Auto power off mode was exited by pressing some other button, not direction buttons
			// Start roll, but do not beep in this case
			setMotorDirection(force_rotate);
		}
		force_rotate = 0;		// First normal pass will clear 
     5de:	10 92 08 01 	sts	0x0108, r1
			
		if (button_action_up_short & BD_CYCLE)
     5e2:	80 91 ff 00 	lds	r24, 0x00FF
     5e6:	87 ff       	sbrs	r24, 7
     5e8:	0e c0       	rjmp	.+28     	; 0x606 <processRollControl+0x86>
		{
			if (rollState & ROLL_CYCLE)
     5ea:	80 91 22 01 	lds	r24, 0x0122
     5ee:	82 ff       	sbrs	r24, 2
     5f0:	04 c0       	rjmp	.+8      	; 0x5fa <processRollControl+0x7a>
			{
				stopCycleRolling(0);
     5f2:	80 e0       	ldi	r24, 0x00	; 0
     5f4:	1e d8       	rcall	.-4036   	; 0xfffff632 <__eeprom_end+0xff7ef628>
				beepState |= 0x20;		// stopped cycle
     5f6:	c0 62       	ori	r28, 0x20	; 32
     5f8:	06 c0       	rjmp	.+12     	; 0x606 <processRollControl+0x86>
			}
			else if (startCycleRolling())
     5fa:	57 d8       	rcall	.-3922   	; 0xfffff6aa <__eeprom_end+0xff7ef6a0>
     5fc:	88 23       	and	r24, r24
     5fe:	11 f0       	breq	.+4      	; 0x604 <processRollControl+0x84>
			{
				beepState |= 0x10;		// started cycle
     600:	c0 61       	ori	r28, 0x10	; 16
     602:	01 c0       	rjmp	.+2      	; 0x606 <processRollControl+0x86>
			}
			else
			{
				beepState |= 0x40;		// failed to start cycle
     604:	c0 64       	ori	r28, 0x40	; 64
			}			
		}		
			
		if (rollState & ROLL_DIR_CHANGED)
     606:	80 91 22 01 	lds	r24, 0x0122
     60a:	85 ff       	sbrs	r24, 5
     60c:	04 c0       	rjmp	.+8      	; 0x616 <processRollControl+0x96>
		{
			rollState &= ~ROLL_DIR_CHANGED;
     60e:	8f 7d       	andi	r24, 0xDF	; 223
     610:	80 93 22 01 	sts	0x0122, r24
			beepState |= 0x04;	
     614:	c4 60       	ori	r28, 0x04	; 4
		}
			
		if (rollState & CYCLE_ROLL_DONE)
     616:	80 91 22 01 	lds	r24, 0x0122
     61a:	84 ff       	sbrs	r24, 4
     61c:	04 c0       	rjmp	.+8      	; 0x626 <processRollControl+0xa6>
		{
			rollState &= ~CYCLE_ROLL_DONE;
     61e:	8f 7e       	andi	r24, 0xEF	; 239
     620:	80 93 22 01 	sts	0x0122, r24
			beepState |= 0x80;	
     624:	c0 68       	ori	r28, 0x80	; 128
		}		
			
		//-----------//
			
		if (beepState & 0x80)		// Roll cycle done
     626:	c7 ff       	sbrs	r28, 7
     628:	06 c0       	rjmp	.+12     	; 0x636 <processRollControl+0xb6>
		{
			SetBeeperFreq(1000);
     62a:	88 ee       	ldi	r24, 0xE8	; 232
     62c:	93 e0       	ldi	r25, 0x03	; 3
     62e:	f2 d9       	rcall	.-3100   	; 0xfffffa14 <__eeprom_end+0xff7efa0a>
			StartBeep(200);
     630:	88 ec       	ldi	r24, 0xC8	; 200
     632:	90 e0       	ldi	r25, 0x00	; 0
     634:	11 c0       	rjmp	.+34     	; 0x658 <processRollControl+0xd8>
		}		
		else if (beepState & 0x40)	// Roll cycle start fail
     636:	c6 ff       	sbrs	r28, 6
     638:	03 c0       	rjmp	.+6      	; 0x640 <processRollControl+0xc0>
		{
			SetBeeperFreq(500);
     63a:	84 ef       	ldi	r24, 0xF4	; 244
     63c:	91 e0       	ldi	r25, 0x01	; 1
     63e:	09 c0       	rjmp	.+18     	; 0x652 <processRollControl+0xd2>
			StartBeep(50);
		} 
		else if (beepState & 0x08)	// Reset points
     640:	c3 ff       	sbrs	r28, 3
     642:	03 c0       	rjmp	.+6      	; 0x64a <processRollControl+0xca>
		{
			SetBeeperFreq(800);
     644:	80 e2       	ldi	r24, 0x20	; 32
     646:	93 e0       	ldi	r25, 0x03	; 3
     648:	04 c0       	rjmp	.+8      	; 0x652 <processRollControl+0xd2>
			StartBeep(50);
		}							// Other
		else if ( beepState & (0x01 | 0x02 | 0x10 | 0x20 | 0x04) )
     64a:	c7 73       	andi	r28, 0x37	; 55
     64c:	31 f0       	breq	.+12     	; 0x65a <processRollControl+0xda>
		{
			SetBeeperFreq(1000);
     64e:	88 ee       	ldi	r24, 0xE8	; 232
     650:	93 e0       	ldi	r25, 0x03	; 3
     652:	e0 d9       	rcall	.-3136   	; 0xfffffa14 <__eeprom_end+0xff7efa0a>
			StartBeep(50);	
     654:	82 e3       	ldi	r24, 0x32	; 50
     656:	90 e0       	ldi	r25, 0x00	; 0
     658:	fd d9       	rcall	.-3078   	; 0xfffffa54 <__eeprom_end+0xff7efa4a>
		}			
			
	}

	//----- LED indication ------//
	clearExtraLeds(LED_ROTFWD | LED_ROTREV);
     65a:	80 e3       	ldi	r24, 0x30	; 48
     65c:	b3 d2       	rcall	.+1382   	; 0xbc4 <clearExtraLeds>
	if (rollState & ROLL_FWD)
     65e:	80 91 22 01 	lds	r24, 0x0122
     662:	80 ff       	sbrs	r24, 0
     664:	02 c0       	rjmp	.+4      	; 0x66a <processRollControl+0xea>
		setExtraLeds(LED_ROTFWD);
     666:	80 e1       	ldi	r24, 0x10	; 16
     668:	03 c0       	rjmp	.+6      	; 0x670 <processRollControl+0xf0>
	else if (rollState & ROLL_REV)
     66a:	81 ff       	sbrs	r24, 1
     66c:	03 c0       	rjmp	.+6      	; 0x674 <processRollControl+0xf4>
		setExtraLeds(LED_ROTREV);
     66e:	80 e2       	ldi	r24, 0x20	; 32
}
     670:	cf 91       	pop	r28
	//----- LED indication ------//
	clearExtraLeds(LED_ROTFWD | LED_ROTREV);
	if (rollState & ROLL_FWD)
		setExtraLeds(LED_ROTFWD);
	else if (rollState & ROLL_REV)
		setExtraLeds(LED_ROTREV);
     672:	a2 c2       	rjmp	.+1348   	; 0xbb8 <setExtraLeds>
}
     674:	cf 91       	pop	r28
     676:	08 95       	ret

00000678 <processPID>:
	return pid_output;
}
*/

uint8_t processPID(uint16_t setPoint, uint16_t processValue)
{
     678:	ef 92       	push	r14
     67a:	ff 92       	push	r15
     67c:	0f 93       	push	r16
     67e:	1f 93       	push	r17
     680:	cf 93       	push	r28
     682:	df 93       	push	r29
     684:	8b 01       	movw	r16, r22
	int16_t error, p_term, i_term, d_term, temp;
	static uint16_t lastProcessValue;
	static int16_t integAcc = 0;
	
	error = setPoint - processValue;
     686:	86 1b       	sub	r24, r22
     688:	97 0b       	sbc	r25, r23
	
	
	//------ Calculate P term --------//
	
	if (error > 100 )
     68a:	85 36       	cpi	r24, 0x65	; 101
     68c:	91 05       	cpc	r25, r1
     68e:	5c f4       	brge	.+22     	; 0x6a6 <processPID+0x2e>
	{
		p_term = 2000;	
	}
	else if (error < -100 )
     690:	8c 39       	cpi	r24, 0x9C	; 156
     692:	2f ef       	ldi	r18, 0xFF	; 255
     694:	92 07       	cpc	r25, r18
     696:	54 f0       	brlt	.+20     	; 0x6ac <processPID+0x34>
	{
		p_term = -2000 ;	
	}
	else
	{
		p_term = error * Kp;
     698:	2a e0       	ldi	r18, 0x0A	; 10
     69a:	28 9f       	mul	r18, r24
     69c:	e0 01       	movw	r28, r0
     69e:	29 9f       	mul	r18, r25
     6a0:	d0 0d       	add	r29, r0
     6a2:	11 24       	eor	r1, r1
     6a4:	05 c0       	rjmp	.+10     	; 0x6b0 <processPID+0x38>
	
	//------ Calculate P term --------//
	
	if (error > 100 )
	{
		p_term = 2000;	
     6a6:	c0 ed       	ldi	r28, 0xD0	; 208
     6a8:	d7 e0       	ldi	r29, 0x07	; 7
     6aa:	02 c0       	rjmp	.+4      	; 0x6b0 <processPID+0x38>
	}
	else if (error < -100 )
	{
		p_term = -2000 ;	
     6ac:	c0 e3       	ldi	r28, 0x30	; 48
     6ae:	d8 ef       	ldi	r29, 0xF8	; 248
		i_term = integAcc * Ki;
		//i_term /= 100;	//12_2
		i_term /= 50;
	*/
	
	integAcc += error;
     6b0:	20 91 09 01 	lds	r18, 0x0109
     6b4:	30 91 0a 01 	lds	r19, 0x010A
     6b8:	28 0f       	add	r18, r24
     6ba:	39 1f       	adc	r19, r25
	
	if (integAcc > 1000 )
     6bc:	29 3e       	cpi	r18, 0xE9	; 233
     6be:	83 e0       	ldi	r24, 0x03	; 3
     6c0:	38 07       	cpc	r19, r24
     6c2:	3c f0       	brlt	.+14     	; 0x6d2 <processPID+0x5a>
	{
		integAcc = 1000;
     6c4:	88 ee       	ldi	r24, 0xE8	; 232
     6c6:	93 e0       	ldi	r25, 0x03	; 3
     6c8:	90 93 0a 01 	sts	0x010A, r25
     6cc:	80 93 09 01 	sts	0x0109, r24
     6d0:	0b c0       	rjmp	.+22     	; 0x6e8 <processPID+0x70>
	}
	else if (integAcc < 0)
     6d2:	37 fd       	sbrc	r19, 7
     6d4:	05 c0       	rjmp	.+10     	; 0x6e0 <processPID+0x68>
		i_term = integAcc * Ki;
		//i_term /= 100;	//12_2
		i_term /= 50;
	*/
	
	integAcc += error;
     6d6:	30 93 0a 01 	sts	0x010A, r19
     6da:	20 93 09 01 	sts	0x0109, r18
     6de:	04 c0       	rjmp	.+8      	; 0x6e8 <processPID+0x70>
	{
		integAcc = 1000;
	}
	else if (integAcc < 0)
	{
		integAcc = 0;
     6e0:	10 92 0a 01 	sts	0x010A, r1
     6e4:	10 92 09 01 	sts	0x0109, r1
	}
	i_term = integAcc * Ki;
     6e8:	20 91 09 01 	lds	r18, 0x0109
     6ec:	30 91 0a 01 	lds	r19, 0x010A
     6f0:	45 e0       	ldi	r20, 0x05	; 5
     6f2:	42 9f       	mul	r20, r18
     6f4:	c0 01       	movw	r24, r0
     6f6:	43 9f       	mul	r20, r19
     6f8:	90 0d       	add	r25, r0
     6fa:	11 24       	eor	r1, r1
	i_term /= 20;
     6fc:	64 e1       	ldi	r22, 0x14	; 20
     6fe:	70 e0       	ldi	r23, 0x00	; 0
     700:	2c da       	rcall	.-2984   	; 0xfffffb5a <__eeprom_end+0xff7efb50>
     702:	7b 01       	movw	r14, r22
	addToRingU16(&ringBufDterm, processValue);
	processValue = ringBufDterm.summ;
	d_term = Kd * ((int16_t)(lastProcessValue - processValue));
*/
	// 12_6
	addToRingU16(&ringBufDterm, (lastProcessValue - processValue)*10);
     704:	80 91 0b 01 	lds	r24, 0x010B
     708:	90 91 0c 01 	lds	r25, 0x010C
     70c:	80 1b       	sub	r24, r16
     70e:	91 0b       	sbc	r25, r17
     710:	2a e0       	ldi	r18, 0x0A	; 10
     712:	28 9f       	mul	r18, r24
     714:	b0 01       	movw	r22, r0
     716:	29 9f       	mul	r18, r25
     718:	70 0d       	add	r23, r0
     71a:	11 24       	eor	r1, r1
     71c:	81 e9       	ldi	r24, 0x91	; 145
     71e:	90 e0       	ldi	r25, 0x00	; 0
     720:	36 de       	rcall	.-916    	; 0x38e <addToRingU16>
	lastProcessValue = processValue;
     722:	10 93 0c 01 	sts	0x010C, r17
     726:	00 93 0b 01 	sts	0x010B, r16
	d_term = iir_i16(pid_dterm_buffer,&dterm_filter_core);
     72a:	6a e8       	ldi	r22, 0x8A	; 138
     72c:	70 e0       	ldi	r23, 0x00	; 0
     72e:	8c e9       	ldi	r24, 0x9C	; 156
     730:	91 e0       	ldi	r25, 0x01	; 1
     732:	fa dd       	rcall	.-1036   	; 0x328 <iir_i16>
	d_term = Kd * d_term;
     734:	22 e3       	ldi	r18, 0x32	; 50
     736:	28 9f       	mul	r18, r24
     738:	f0 01       	movw	r30, r0
     73a:	29 9f       	mul	r18, r25
     73c:	f0 0d       	add	r31, r0
     73e:	11 24       	eor	r1, r1
	
	//--------- Summ terms -----------//
	temp = (p_term + i_term + d_term) / SCALING_FACTOR;
     740:	ce 01       	movw	r24, r28
     742:	8e 0d       	add	r24, r14
     744:	9f 1d       	adc	r25, r15
     746:	8e 0f       	add	r24, r30
     748:	9f 1f       	adc	r25, r31
     74a:	65 e0       	ldi	r22, 0x05	; 5
     74c:	70 e0       	ldi	r23, 0x00	; 0
     74e:	05 da       	rcall	.-3062   	; 0xfffffb5a <__eeprom_end+0xff7efb50>
     750:	9b 01       	movw	r18, r22
     752:	77 ff       	sbrs	r23, 7
     754:	02 c0       	rjmp	.+4      	; 0x75a <processPID+0xe2>
     756:	20 e0       	ldi	r18, 0x00	; 0
     758:	30 e0       	ldi	r19, 0x00	; 0
     75a:	c9 01       	movw	r24, r18
     75c:	25 36       	cpi	r18, 0x65	; 101
     75e:	31 05       	cpc	r19, r1
     760:	14 f0       	brlt	.+4      	; 0x766 <processPID+0xee>
     762:	84 e6       	ldi	r24, 0x64	; 100
     764:	90 e0       	ldi	r25, 0x00	; 0
		temp = 0;
	}
	
	
	//------- Debug --------//
	dbg_PID_p_term = p_term;
     766:	d0 93 97 01 	sts	0x0197, r29
     76a:	c0 93 96 01 	sts	0x0196, r28
	dbg_PID_d_term = d_term;
     76e:	f0 93 a5 01 	sts	0x01A5, r31
     772:	e0 93 a4 01 	sts	0x01A4, r30
	dbg_PID_i_term = i_term;
     776:	f0 92 9b 01 	sts	0x019B, r15
     77a:	e0 92 9a 01 	sts	0x019A, r14
	dbg_PID_output = temp;
     77e:	90 93 95 01 	sts	0x0195, r25
     782:	80 93 94 01 	sts	0x0194, r24
	
	
	return temp;
	
}
     786:	df 91       	pop	r29
     788:	cf 91       	pop	r28
     78a:	1f 91       	pop	r17
     78c:	0f 91       	pop	r16
     78e:	ff 90       	pop	r15
     790:	ef 90       	pop	r14
     792:	08 95       	ret

00000794 <processHeaterControl>:
	processPID(0,adc_filtered);			// oversampled PID control
}


void processHeaterControl(void)
{
     794:	0f 93       	push	r16
     796:	1f 93       	push	r17
     798:	cf 93       	push	r28
     79a:	df 93       	push	r29
	uint16_t pid_output;
	
	// TODO: check code size with local copy of heaterState
	
	// Process heater ON/OFF control by button
	if (button_state & BD_HEATCTRL)
     79c:	80 91 02 01 	lds	r24, 0x0102
     7a0:	86 ff       	sbrs	r24, 6
     7a2:	0b c0       	rjmp	.+22     	; 0x7ba <processHeaterControl+0x26>
	{
		heaterState ^= HEATER_ENABLED;
     7a4:	80 91 07 01 	lds	r24, 0x0107
     7a8:	91 e0       	ldi	r25, 0x01	; 1
     7aa:	89 27       	eor	r24, r25
     7ac:	80 93 07 01 	sts	0x0107, r24
		// Force update heater power
		sys_timers.flags |= UPDATE_PID;		// Not very good approach if UPDATE_PID flag is used somewhere else
     7b0:	80 91 a9 00 	lds	r24, 0x00A9
     7b4:	80 64       	ori	r24, 0x40	; 64
     7b6:	80 93 a9 00 	sts	0x00A9, r24
	}
	
	// Process auto power off control
	if (autoPowerOffState & AUTO_POFF_ACTIVE)
     7ba:	80 91 06 01 	lds	r24, 0x0106
     7be:	80 ff       	sbrs	r24, 0
     7c0:	05 c0       	rjmp	.+10     	; 0x7cc <processHeaterControl+0x38>
	{
		heaterState &= ~HEATER_ENABLED;
     7c2:	80 91 07 01 	lds	r24, 0x0107
     7c6:	8e 7f       	andi	r24, 0xFE	; 254
     7c8:	80 93 07 01 	sts	0x0107, r24
	}		
	
	// Check if heater control should be updated
	// PID call interval is a multiple of Celsius update interval. 
	if (sys_timers.flags & UPDATE_PID)
     7cc:	80 91 a9 00 	lds	r24, 0x00A9
     7d0:	86 ff       	sbrs	r24, 6
     7d2:	3a c0       	rjmp	.+116    	; 0x848 <processHeaterControl+0xb4>
	{
		// Convert temperature setup to equal ADC value
		set_value_adc = conv_Celsius_to_ADC(p.setup_temp_value);					
     7d4:	80 91 90 01 	lds	r24, 0x0190
     7d8:	90 e0       	ldi	r25, 0x00	; 0
     7da:	fd dc       	rcall	.-1542   	; 0x1d6 <conv_Celsius_to_ADC>

		setPoint = set_value_adc * 5;
     7dc:	25 e0       	ldi	r18, 0x05	; 5
     7de:	28 9f       	mul	r18, r24
     7e0:	e0 01       	movw	r28, r0
     7e2:	29 9f       	mul	r18, r25
     7e4:	d0 0d       	add	r29, r0
     7e6:	11 24       	eor	r1, r1
		setPoint >>= 1;
     7e8:	d6 95       	lsr	r29
     7ea:	c7 95       	ror	r28
		processValue = adc_filtered >> 1;	// normal PID control
     7ec:	00 91 31 01 	lds	r16, 0x0131
     7f0:	10 91 32 01 	lds	r17, 0x0132
     7f4:	16 95       	lsr	r17
     7f6:	07 95       	ror	r16
		//setPoint = set_value_adc * 5;
		//processValue = adc_filtered;		// oversampled PID control
		
		// Process PID
		pid_output = processPID(setPoint, processValue);		
     7f8:	b8 01       	movw	r22, r16
     7fa:	ce 01       	movw	r24, r28
     7fc:	3d df       	rcall	.-390    	; 0x678 <processPID>
		
		// DSM test only
		//pid_output = (p.setup_temp_value < 50) ? 0 : p.setup_temp_value - 50;
					
		// If heater is disabled, override output
		if (!(heaterState & HEATER_ENABLED))
     7fe:	90 91 07 01 	lds	r25, 0x0107
     802:	90 ff       	sbrs	r25, 0
     804:	02 c0       	rjmp	.+4      	; 0x80a <processHeaterControl+0x76>
		processValue = adc_filtered >> 1;	// normal PID control
		//setPoint = set_value_adc * 5;
		//processValue = adc_filtered;		// oversampled PID control
		
		// Process PID
		pid_output = processPID(setPoint, processValue);		
     806:	90 e0       	ldi	r25, 0x00	; 0
     808:	02 c0       	rjmp	.+4      	; 0x80e <processHeaterControl+0x7a>
		// DSM test only
		//pid_output = (p.setup_temp_value < 50) ? 0 : p.setup_temp_value - 50;
					
		// If heater is disabled, override output
		if (!(heaterState & HEATER_ENABLED))
			pid_output = 0;
     80a:	80 e0       	ldi	r24, 0x00	; 0
     80c:	90 e0       	ldi	r25, 0x00	; 0
			
		// Set new heater power value	
		setHeaterPower(pid_output);	
     80e:	e3 d6       	rcall	.+3526   	; 0x15d6 <setHeaterPower>
		
		//------- Debug --------//		
		// PID input:
		dbg_SetPointCelsius = (heaterState & HEATER_ENABLED) ? p.setup_temp_value : 0;
     810:	80 91 07 01 	lds	r24, 0x0107
     814:	98 2f       	mov	r25, r24
     816:	91 70       	andi	r25, 0x01	; 1
     818:	80 ff       	sbrs	r24, 0
     81a:	03 c0       	rjmp	.+6      	; 0x822 <processHeaterControl+0x8e>
     81c:	80 91 90 01 	lds	r24, 0x0190
     820:	01 c0       	rjmp	.+2      	; 0x824 <processHeaterControl+0x90>
     822:	80 e0       	ldi	r24, 0x00	; 0
     824:	80 93 89 01 	sts	0x0189, r24
		dbg_SetPointPID = (heaterState & HEATER_ENABLED) ? setPoint : 0;
     828:	91 11       	cpse	r25, r1
     82a:	02 c0       	rjmp	.+4      	; 0x830 <processHeaterControl+0x9c>
     82c:	c0 e0       	ldi	r28, 0x00	; 0
     82e:	d0 e0       	ldi	r29, 0x00	; 0
     830:	d0 93 a7 01 	sts	0x01A7, r29
     834:	c0 93 a6 01 	sts	0x01A6, r28
		dbg_RealTempCelsius = adc_filtered;
     838:	80 91 31 01 	lds	r24, 0x0131
     83c:	80 93 a8 01 	sts	0x01A8, r24
		dbg_RealTempPID = processValue;
     840:	10 93 99 01 	sts	0x0199, r17
     844:	00 93 98 01 	sts	0x0198, r16
		
	}	
		
	
	//----- LED indication ------//
	if (heaterState & HEATER_ENABLED)
     848:	80 91 07 01 	lds	r24, 0x0107
     84c:	80 ff       	sbrs	r24, 0
     84e:	06 c0       	rjmp	.+12     	; 0x85c <processHeaterControl+0xc8>
		setExtraLeds(LED_HEATER);
     850:	80 e4       	ldi	r24, 0x40	; 64
	else
		clearExtraLeds(LED_HEATER);
	
}
     852:	df 91       	pop	r29
     854:	cf 91       	pop	r28
     856:	1f 91       	pop	r17
     858:	0f 91       	pop	r16
	}	
		
	
	//----- LED indication ------//
	if (heaterState & HEATER_ENABLED)
		setExtraLeds(LED_HEATER);
     85a:	ae c1       	rjmp	.+860    	; 0xbb8 <setExtraLeds>
	else
		clearExtraLeds(LED_HEATER);
     85c:	80 e4       	ldi	r24, 0x40	; 64
	
}
     85e:	df 91       	pop	r29
     860:	cf 91       	pop	r28
     862:	1f 91       	pop	r17
     864:	0f 91       	pop	r16
	
	//----- LED indication ------//
	if (heaterState & HEATER_ENABLED)
		setExtraLeds(LED_HEATER);
	else
		clearExtraLeds(LED_HEATER);
     866:	ae c1       	rjmp	.+860    	; 0xbc4 <clearExtraLeds>

00000868 <heaterInit>:


void heaterInit(void)
{
	//processPID(0,adc_normalized);
	processPID(0,adc_filtered);			// oversampled PID control
     868:	60 91 31 01 	lds	r22, 0x0131
     86c:	70 91 32 01 	lds	r23, 0x0132
     870:	80 e0       	ldi	r24, 0x00	; 0
     872:	90 e0       	ldi	r25, 0x00	; 0
     874:	01 cf       	rjmp	.-510    	; 0x678 <processPID>

00000876 <processHeaterAlerts>:

// Function to process all heater alerts:
//	- getting near to desired temperature
//	- continuous heating when disabled
void processHeaterAlerts(void)
{
     876:	cf 93       	push	r28
     878:	df 93       	push	r29
	static uint8_t tempAlertRange = TEMP_ALERT_RANGE;
	static uint16_t refCapturedTemp = 0xFFFF;
	uint16_t currentTemperature = adc_celsius;
     87a:	c0 91 5f 01 	lds	r28, 0x015F
     87e:	d0 91 60 01 	lds	r29, 0x0160
	
	
	// Indicate reaching of desired temperature
	if ( (currentTemperature > p.setup_temp_value - tempAlertRange) && (currentTemperature < p.setup_temp_value + tempAlertRange) )
     882:	20 91 90 01 	lds	r18, 0x0190
     886:	30 e0       	ldi	r19, 0x00	; 0
     888:	60 91 9a 00 	lds	r22, 0x009A
     88c:	86 2f       	mov	r24, r22
     88e:	90 e0       	ldi	r25, 0x00	; 0
     890:	a9 01       	movw	r20, r18
     892:	48 1b       	sub	r20, r24
     894:	59 0b       	sbc	r21, r25
     896:	4c 17       	cp	r20, r28
     898:	5d 07       	cpc	r21, r29
     89a:	98 f4       	brcc	.+38     	; 0x8c2 <processHeaterAlerts+0x4c>
     89c:	82 0f       	add	r24, r18
     89e:	93 1f       	adc	r25, r19
     8a0:	c8 17       	cp	r28, r24
     8a2:	d9 07       	cpc	r29, r25
     8a4:	70 f4       	brcc	.+28     	; 0x8c2 <processHeaterAlerts+0x4c>
	{
		if ((tempAlertRange == TEMP_ALERT_RANGE) && (heaterState & HEATER_ENABLED))
     8a6:	65 30       	cpi	r22, 0x05	; 5
     8a8:	51 f4       	brne	.+20     	; 0x8be <processHeaterAlerts+0x48>
     8aa:	80 91 07 01 	lds	r24, 0x0107
     8ae:	80 ff       	sbrs	r24, 0
     8b0:	06 c0       	rjmp	.+12     	; 0x8be <processHeaterAlerts+0x48>
		{
			SetBeeperFreq(1000);
     8b2:	88 ee       	ldi	r24, 0xE8	; 232
     8b4:	93 e0       	ldi	r25, 0x03	; 3
     8b6:	ae d8       	rcall	.-3748   	; 0xfffffa14 <__eeprom_end+0xff7efa0a>
			StartBeep(400);
     8b8:	80 e9       	ldi	r24, 0x90	; 144
     8ba:	91 e0       	ldi	r25, 0x01	; 1
     8bc:	cb d8       	rcall	.-3690   	; 0xfffffa54 <__eeprom_end+0xff7efa4a>
		}
		// Add some hysteresis
		tempAlertRange = TEMP_ALERT_RANGE + TEMP_ALERT_HYST;
     8be:	8a e0       	ldi	r24, 0x0A	; 10
     8c0:	01 c0       	rjmp	.+2      	; 0x8c4 <processHeaterAlerts+0x4e>
	}			
	else
	{
		tempAlertRange = TEMP_ALERT_RANGE;
     8c2:	85 e0       	ldi	r24, 0x05	; 5
     8c4:	80 93 9a 00 	sts	0x009A, r24
	// Growing temperature with heater disabled alert 
	// This alert is done regardless of global sound enable
	// A false triggering may occur if ambient temperature grows.
	// To reset the warning in this case just turn on heater for at least one systimer tick (50ms)
	// If heater is enabled, it is implied that user controls heating process
	if (heaterState & (HEATER_ENABLED | CALIBRATION_ACTIVE))
     8c8:	80 91 07 01 	lds	r24, 0x0107
     8cc:	83 70       	andi	r24, 0x03	; 3
     8ce:	09 f0       	breq	.+2      	; 0x8d2 <processHeaterAlerts+0x5c>
     8d0:	0b c0       	rjmp	.+22     	; 0x8e8 <processHeaterAlerts+0x72>
	{
		// Heater enabled, just save current temperature as reference
		// Same if calibration in progress, even if heater is disabled
		refCapturedTemp = currentTemperature;
	}
	else if (sys_timers.flags & EXPIRED_10SEC)
     8d2:	80 91 a9 00 	lds	r24, 0x00A9
     8d6:	81 ff       	sbrs	r24, 1
     8d8:	19 c0       	rjmp	.+50     	; 0x90c <processHeaterAlerts+0x96>
	{
		// Heater disabled. If temperature is falling,
		if (currentTemperature < refCapturedTemp)
     8da:	80 91 9b 00 	lds	r24, 0x009B
     8de:	90 91 9c 00 	lds	r25, 0x009C
     8e2:	c8 17       	cp	r28, r24
     8e4:	d9 07       	cpc	r29, r25
     8e6:	28 f4       	brcc	.+10     	; 0x8f2 <processHeaterAlerts+0x7c>
		{
			// save current temperature as reference
			refCapturedTemp = currentTemperature;
     8e8:	d0 93 9c 00 	sts	0x009C, r29
     8ec:	c0 93 9b 00 	sts	0x009B, r28
     8f0:	0d c0       	rjmp	.+26     	; 0x90c <processHeaterAlerts+0x96>
		else
		{
			// Heater is disabled. If current temperature is higher than reference + some safe interval,
			// there might be a hardware failure - short circuit, etc
			// BEEP like a devil  }:-(
			if (currentTemperature >= (refCapturedTemp + SAFE_TEMP_INTERVAL))
     8f2:	0f 96       	adiw	r24, 0x0f	; 15
     8f4:	c8 17       	cp	r28, r24
     8f6:	d9 07       	cpc	r29, r25
     8f8:	48 f0       	brcs	.+18     	; 0x90c <processHeaterAlerts+0x96>
			{
				// Enable beeper output regardless of menu setting
				OverrideSoundDisable();
     8fa:	be d8       	rcall	.-3716   	; 0xfffffa78 <__eeprom_end+0xff7efa6e>
				SetBeeperFreq(1500);
     8fc:	8c ed       	ldi	r24, 0xDC	; 220
     8fe:	95 e0       	ldi	r25, 0x05	; 5
     900:	89 d8       	rcall	.-3822   	; 0xfffffa14 <__eeprom_end+0xff7efa0a>
				StartBeep(5000);	
     902:	88 e8       	ldi	r24, 0x88	; 136
     904:	93 e1       	ldi	r25, 0x13	; 19
			}
		}
	}
	

}
     906:	df 91       	pop	r29
     908:	cf 91       	pop	r28
			if (currentTemperature >= (refCapturedTemp + SAFE_TEMP_INTERVAL))
			{
				// Enable beeper output regardless of menu setting
				OverrideSoundDisable();
				SetBeeperFreq(1500);
				StartBeep(5000);	
     90a:	a4 c8       	rjmp	.-3768   	; 0xfffffa54 <__eeprom_end+0xff7efa4a>
			}
		}
	}
	

}
     90c:	df 91       	pop	r29
     90e:	cf 91       	pop	r28
     910:	08 95       	ret

00000912 <restoreGlobalParams>:


void restoreGlobalParams(void)
{
	eeprom_read_block(&p,&eeGlobalParams,sizeof(eeGlobalParams));
     912:	44 e0       	ldi	r20, 0x04	; 4
     914:	50 e0       	ldi	r21, 0x00	; 0
     916:	66 e0       	ldi	r22, 0x06	; 6
     918:	70 e0       	ldi	r23, 0x00	; 0
     91a:	80 e9       	ldi	r24, 0x90	; 144
     91c:	91 e0       	ldi	r25, 0x01	; 1
     91e:	89 d9       	rcall	.-3310   	; 0xfffffc32 <__eeprom_end+0xff7efc28>
	eeprom_read_block(&cp,&eeCalibrationParams,sizeof(eeCalibrationParams));
     920:	46 e0       	ldi	r20, 0x06	; 6
     922:	50 e0       	ldi	r21, 0x00	; 0
     924:	60 e0       	ldi	r22, 0x00	; 0
     926:	70 e0       	ldi	r23, 0x00	; 0
     928:	8a e8       	ldi	r24, 0x8A	; 138
     92a:	91 e0       	ldi	r25, 0x01	; 1
     92c:	82 c9       	rjmp	.-3324   	; 0xfffffc32 <__eeprom_end+0xff7efc28>

0000092e <saveCalibrationToEEPROM>:
}


void saveCalibrationToEEPROM(void)
{
	eeprom_update_block(&cp,&eeCalibrationParams,sizeof(eeCalibrationParams));	
     92e:	46 e0       	ldi	r20, 0x06	; 6
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	60 e0       	ldi	r22, 0x00	; 0
     934:	70 e0       	ldi	r23, 0x00	; 0
     936:	8a e8       	ldi	r24, 0x8A	; 138
     938:	91 e0       	ldi	r25, 0x01	; 1
     93a:	8b c9       	rjmp	.-3306   	; 0xfffffc52 <__eeprom_end+0xff7efc48>

0000093c <exitPowerOff>:

void exitPowerOff(void)
{

	// Put all ports into HI-Z
	DDRB = 0x00;
     93c:	17 ba       	out	0x17, r1	; 23
	PORTB = 0x00;
     93e:	18 ba       	out	0x18, r1	; 24
	DDRC = 0x00;
     940:	14 ba       	out	0x14, r1	; 20
	PORTC = 0x00;
     942:	15 ba       	out	0x15, r1	; 21
	DDRD = 0x00;
     944:	11 ba       	out	0x11, r1	; 17
	PORTD = 0x00;
     946:	12 ba       	out	0x12, r1	; 18
	
	// Disable all interrupts
	cli();
     948:	f8 94       	cli
	
	// Save parameters to EEPROM
	eeprom_update_block(&p,&eeGlobalParams,sizeof(eeGlobalParams));	
     94a:	44 e0       	ldi	r20, 0x04	; 4
     94c:	50 e0       	ldi	r21, 0x00	; 0
     94e:	66 e0       	ldi	r22, 0x06	; 6
     950:	70 e0       	ldi	r23, 0x00	; 0
     952:	80 e9       	ldi	r24, 0x90	; 144
     954:	91 e0       	ldi	r25, 0x01	; 1
     956:	7d d9       	rcall	.-3334   	; 0xfffffc52 <__eeprom_end+0xff7efc48>
     958:	ff cf       	rjmp	.-2      	; 0x958 <exitPowerOff+0x1c>

0000095a <decode_led_char>:
//---------------------------------------------//
// Decodes normal string literal to the
//	7-segment representation
//---------------------------------------------//
static uint8_t decode_led_char(char c)
{
     95a:	20 e0       	ldi	r18, 0x00	; 0
     95c:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t i;
	encode_7seg_pair encode_pair;
	for (i = 0; i < sizeof(led_encode_table)/sizeof(encode_7seg_pair); i++  )
	{
		encode_pair.code = pgm_read_byte(&led_encode_table[i].code);
     95e:	a9 01       	movw	r20, r18
     960:	44 0f       	add	r20, r20
     962:	55 1f       	adc	r21, r21
     964:	fa 01       	movw	r30, r20
     966:	ea 5d       	subi	r30, 0xDA	; 218
     968:	ff 4f       	sbci	r31, 0xFF	; 255
     96a:	e4 91       	lpm	r30, Z
		if (encode_pair.code == c)
     96c:	e8 13       	cpse	r30, r24
     96e:	05 c0       	rjmp	.+10     	; 0x97a <decode_led_char+0x20>
		{
			i = pgm_read_byte(&led_encode_table[i].segdata);
     970:	fa 01       	movw	r30, r20
     972:	e9 5d       	subi	r30, 0xD9	; 217
     974:	ff 4f       	sbci	r31, 0xFF	; 255
     976:	84 91       	lpm	r24, Z
     978:	08 95       	ret
     97a:	2f 5f       	subi	r18, 0xFF	; 255
     97c:	3f 4f       	sbci	r19, 0xFF	; 255
//---------------------------------------------//
static uint8_t decode_led_char(char c)
{
	uint8_t i;
	encode_7seg_pair encode_pair;
	for (i = 0; i < sizeof(led_encode_table)/sizeof(encode_7seg_pair); i++  )
     97e:	2a 31       	cpi	r18, 0x1A	; 26
     980:	31 05       	cpc	r19, r1
     982:	69 f7       	brne	.-38     	; 0x95e <decode_led_char+0x4>
			return i;
		}		
	}			
	// No item was found - return argument value
	return  c;
}
     984:	08 95       	ret

00000986 <wrap_led_buffer_index>:
//---------------------------------------------//
// Ensures that index is inside the buffer
// -128 <= index <= 127
//---------------------------------------------//
static uint8_t wrap_led_buffer_index(int8_t buf_index)
{
     986:	28 2f       	mov	r18, r24
	uint8_t new_index_u;
	new_index_u = (uint8_t) ((buf_index < 0) ? -buf_index : buf_index);
     988:	87 fd       	sbrc	r24, 7
     98a:	81 95       	neg	r24
	if (new_index_u >= LED_BUFFER_LENGTH)
     98c:	8e 30       	cpi	r24, 0x0E	; 14
     98e:	18 f0       	brcs	.+6      	; 0x996 <wrap_led_buffer_index+0x10>
		new_index_u = new_index_u % LED_BUFFER_LENGTH;
     990:	6e e0       	ldi	r22, 0x0E	; 14
     992:	c3 d8       	rcall	.-3706   	; 0xfffffb1a <__eeprom_end+0xff7efb10>
     994:	89 2f       	mov	r24, r25
	new_index_u = ((buf_index >= 0) || (new_index_u == 0)) ? new_index_u :  LED_BUFFER_LENGTH - new_index_u ;
     996:	27 ff       	sbrs	r18, 7
     998:	05 c0       	rjmp	.+10     	; 0x9a4 <wrap_led_buffer_index+0x1e>
     99a:	88 23       	and	r24, r24
     99c:	19 f0       	breq	.+6      	; 0x9a4 <wrap_led_buffer_index+0x1e>
     99e:	9e e0       	ldi	r25, 0x0E	; 14
     9a0:	98 1b       	sub	r25, r24
     9a2:	89 2f       	mov	r24, r25
	return new_index_u;
}
     9a4:	08 95       	ret

000009a6 <processLedIndicator>:
// Call this function N times per sec to get N/NUM_DIGITS_TOTAL display update rate, where
// NUM_DIGITS_TOTAL is number_of_digits_of_LED_display if no extra LEDs are used or
// (number_of_digits_of_LED_display + 1) otherwise.
//---------------------------------------------//
void processLedIndicator()
{
     9a6:	cf 93       	push	r28
	disable_led_segments();
	#endif
	
	
	// Perform regular shift
	led_clock_pulse(!LED_DIGIT_ACT_LVL);
     9a8:	81 e0       	ldi	r24, 0x01	; 1
     9aa:	13 d1       	rcall	.+550    	; 0xbd2 <led_clock_pulse>
	
	switch (wActivePos)
     9ac:	c0 91 0e 01 	lds	r28, 0x010E
     9b0:	cc 23       	and	r28, r28
     9b2:	19 f0       	breq	.+6      	; 0x9ba <processLedIndicator+0x14>
     9b4:	c6 30       	cpi	r28, 0x06	; 6
     9b6:	d1 f5       	brne	.+116    	; 0xa2c <processLedIndicator+0x86>
     9b8:	11 c0       	rjmp	.+34     	; 0x9dc <processLedIndicator+0x36>
	{
	case 0:
		// Get buttons
		#ifndef CLEAN_OPERATION
		disable_led_segments();
     9ba:	37 d1       	rcall	.+622    	; 0xc2a <disable_led_segments>
		#endif
		enable_led_segments_pullups();
     9bc:	28 d1       	rcall	.+592    	; 0xc0e <enable_led_segments_pullups>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     9be:	85 e3       	ldi	r24, 0x35	; 53
     9c0:	8a 95       	dec	r24
     9c2:	f1 f7       	brne	.-4      	; 0x9c0 <processLedIndicator+0x1a>
     9c4:	00 00       	nop
		_delay_us(PULLUP_DELAY_US);
		capture_button_state();
     9c6:	38 d1       	rcall	.+624    	; 0xc38 <capture_button_state>
		#ifndef CLEAN_OPERATION
		enable_led_segments();
     9c8:	29 d1       	rcall	.+594    	; 0xc1c <enable_led_segments>
		#endif
		// Start new cycle with active digit level
		led_clock_pulse(LED_DIGIT_ACT_LVL);
     9ca:	80 e0       	ldi	r24, 0x00	; 0
     9cc:	02 d1       	rcall	.+516    	; 0xbd2 <led_clock_pulse>
		// Always start new cycle from specified buffer start position
		bufActivePos = wStartPos;
     9ce:	80 91 aa 01 	lds	r24, 0x01AA
     9d2:	80 93 0d 01 	sts	0x010D, r24
		next_wActivePos = wActivePos + 1;
     9d6:	c0 91 0e 01 	lds	r28, 0x010E
     9da:	28 c0       	rjmp	.+80     	; 0xa2c <processLedIndicator+0x86>
//---------------------------------------------//
// Performs window shifting
//---------------------------------------------//
static void processWindowShifter(void)
{
	if (shifterState == LED_SHIFT_DONE)
     9dc:	80 91 ab 01 	lds	r24, 0x01AB
     9e0:	81 11       	cpse	r24, r1
     9e2:	01 c0       	rjmp	.+2      	; 0x9e6 <processLedIndicator+0x40>
     9e4:	1b c0       	rjmp	.+54     	; 0xa1c <processLedIndicator+0x76>
		return;
	
	// Process shift timer
	processSoftTimer8b(&shiftTimer);	
     9e6:	8f e0       	ldi	r24, 0x0F	; 15
     9e8:	91 e0       	ldi	r25, 0x01	; 1
     9ea:	7e d7       	rcall	.+3836   	; 0x18e8 <processSoftTimer8b>
	
	if (shiftTimer.FTop)
     9ec:	80 91 0f 01 	lds	r24, 0x010F
     9f0:	85 ff       	sbrs	r24, 5
     9f2:	14 c0       	rjmp	.+40     	; 0xa1c <processLedIndicator+0x76>
	{
		// Check if finished
		if (wStartPos == bufStartPos)	
     9f4:	80 91 aa 01 	lds	r24, 0x01AA
     9f8:	90 91 ac 01 	lds	r25, 0x01AC
     9fc:	89 13       	cpse	r24, r25
     9fe:	03 c0       	rjmp	.+6      	; 0xa06 <processLedIndicator+0x60>
		{
			// Update state
			shifterState = LED_SHIFT_DONE;
     a00:	10 92 ab 01 	sts	0x01AB, r1
     a04:	0b c0       	rjmp	.+22     	; 0xa1c <processLedIndicator+0x76>
		}
		else if (shifterState == LED_SHIFT_RIGHT)
     a06:	90 91 ab 01 	lds	r25, 0x01AB
     a0a:	92 30       	cpi	r25, 0x02	; 2
     a0c:	49 f4       	brne	.+18     	; 0xa20 <processLedIndicator+0x7a>
// Increments index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t inc_buffer_position(uint8_t position)
{
	return (position >= LED_BUFFER_LENGTH - 1) ? 0 : position + 1;
     a0e:	8d 30       	cpi	r24, 0x0D	; 13
     a10:	10 f4       	brcc	.+4      	; 0xa16 <processLedIndicator+0x70>
     a12:	8f 5f       	subi	r24, 0xFF	; 255
     a14:	01 c0       	rjmp	.+2      	; 0xa18 <processLedIndicator+0x72>
     a16:	80 e0       	ldi	r24, 0x00	; 0
			// Update state
			shifterState = LED_SHIFT_DONE;
		}
		else if (shifterState == LED_SHIFT_RIGHT)
		{
			wStartPos = inc_buffer_position(wStartPos);	
     a18:	80 93 aa 01 	sts	0x01AA, r24
		// Always start new cycle from specified buffer start position
		bufActivePos = wStartPos;
		next_wActivePos = wActivePos + 1;
		break;
	case NUM_DIGITS_TOTAL-1:
		next_wActivePos = 0;
     a1c:	c0 e0       	ldi	r28, 0x00	; 0
     a1e:	07 c0       	rjmp	.+14     	; 0xa2e <processLedIndicator+0x88>
// Decrements index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t dec_buffer_position(uint8_t position)
{
	return (position == 0) ? LED_BUFFER_LENGTH - 1 : position - 1;
     a20:	88 23       	and	r24, r24
     a22:	11 f0       	breq	.+4      	; 0xa28 <processLedIndicator+0x82>
     a24:	81 50       	subi	r24, 0x01	; 1
     a26:	f8 cf       	rjmp	.-16     	; 0xa18 <processLedIndicator+0x72>
     a28:	8d e0       	ldi	r24, 0x0D	; 13
     a2a:	f6 cf       	rjmp	.-20     	; 0xa18 <processLedIndicator+0x72>
		next_wActivePos = 0;
		// Shift LED window
		processWindowShifter();	
		break;
	default:
		next_wActivePos = wActivePos + 1;
     a2c:	cf 5f       	subi	r28, 0xFF	; 255
		break;
	}		
	
	#ifdef 	USE_EXTRA_LED_DIGIT
	if (wActivePos == EXTRA_DIGIT_NUM)
     a2e:	80 91 0e 01 	lds	r24, 0x010E
     a32:	86 30       	cpi	r24, 0x06	; 6
     a34:	21 f4       	brne	.+8      	; 0xa3e <processLedIndicator+0x98>
	{
		// Output separate LEDs state
		set_led_segments(extra_led_state);
     a36:	80 91 a9 01 	lds	r24, 0x01A9
     a3a:	db d0       	rcall	.+438    	; 0xbf2 <set_led_segments>
     a3c:	10 c0       	rjmp	.+32     	; 0xa5e <processLedIndicator+0xb8>
	}
	else
	#endif
	{
		// Output new segment data
		set_led_segments(led_data_buffer[bufActivePos]);
     a3e:	e0 91 0d 01 	lds	r30, 0x010D
     a42:	f0 e0       	ldi	r31, 0x00	; 0
     a44:	e3 55       	subi	r30, 0x53	; 83
     a46:	fe 4f       	sbci	r31, 0xFE	; 254
     a48:	80 81       	ld	r24, Z
     a4a:	d3 d0       	rcall	.+422    	; 0xbf2 <set_led_segments>
		// Wrap around buffer length
		bufActivePos = inc_buffer_position(bufActivePos );
     a4c:	80 91 0d 01 	lds	r24, 0x010D
// Increments index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t inc_buffer_position(uint8_t position)
{
	return (position >= LED_BUFFER_LENGTH - 1) ? 0 : position + 1;
     a50:	8d 30       	cpi	r24, 0x0D	; 13
     a52:	10 f4       	brcc	.+4      	; 0xa58 <processLedIndicator+0xb2>
     a54:	8f 5f       	subi	r24, 0xFF	; 255
     a56:	01 c0       	rjmp	.+2      	; 0xa5a <processLedIndicator+0xb4>
     a58:	80 e0       	ldi	r24, 0x00	; 0
	#endif
	{
		// Output new segment data
		set_led_segments(led_data_buffer[bufActivePos]);
		// Wrap around buffer length
		bufActivePos = inc_buffer_position(bufActivePos );
     a5a:	80 93 0d 01 	sts	0x010D, r24
	}
		
	wActivePos = next_wActivePos;
     a5e:	c0 93 0e 01 	sts	0x010E, r28
	
	#ifdef CLEAN_OPERATION
	enable_led_segments();
	#endif

}
     a62:	cf 91       	pop	r28
     a64:	08 95       	ret

00000a66 <fillLedBuffer>:
//---------------------------------------------//
// Fills buffer from (bufStartPos + offset) 
//	position with single char
//---------------------------------------------//
void fillLedBuffer(int8_t offset, uint8_t length, char c)
{
     a66:	0f 93       	push	r16
     a68:	1f 93       	push	r17
     a6a:	cf 93       	push	r28
     a6c:	df 93       	push	r29
     a6e:	1f 92       	push	r1
     a70:	cd b7       	in	r28, 0x3d	; 61
     a72:	de b7       	in	r29, 0x3e	; 62
     a74:	18 2f       	mov	r17, r24
     a76:	84 2f       	mov	r24, r20
	uint8_t val = decode_led_char(c);
     a78:	69 83       	std	Y+1, r22	; 0x01
     a7a:	6f df       	rcall	.-290    	; 0x95a <decode_led_char>
     a7c:	08 2f       	mov	r16, r24
	// Ensure index is inside the buffer
	uint8_t position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
     a7e:	80 91 ac 01 	lds	r24, 0x01AC
     a82:	81 0f       	add	r24, r17
     a84:	80 df       	rcall	.-256    	; 0x986 <wrap_led_buffer_index>
	while(length--)
     a86:	69 81       	ldd	r22, Y+1	; 0x01
     a88:	0a c0       	rjmp	.+20     	; 0xa9e <fillLedBuffer+0x38>
	{
		led_data_buffer[position] = val;
     a8a:	e8 2f       	mov	r30, r24
     a8c:	f0 e0       	ldi	r31, 0x00	; 0
     a8e:	e3 55       	subi	r30, 0x53	; 83
     a90:	fe 4f       	sbci	r31, 0xFE	; 254
     a92:	00 83       	st	Z, r16
// Increments index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t inc_buffer_position(uint8_t position)
{
	return (position >= LED_BUFFER_LENGTH - 1) ? 0 : position + 1;
     a94:	8d 30       	cpi	r24, 0x0D	; 13
     a96:	10 f4       	brcc	.+4      	; 0xa9c <fillLedBuffer+0x36>
     a98:	8f 5f       	subi	r24, 0xFF	; 255
     a9a:	01 c0       	rjmp	.+2      	; 0xa9e <fillLedBuffer+0x38>
     a9c:	80 e0       	ldi	r24, 0x00	; 0
void fillLedBuffer(int8_t offset, uint8_t length, char c)
{
	uint8_t val = decode_led_char(c);
	// Ensure index is inside the buffer
	uint8_t position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
	while(length--)
     a9e:	61 50       	subi	r22, 0x01	; 1
     aa0:	a0 f7       	brcc	.-24     	; 0xa8a <fillLedBuffer+0x24>
	{
		led_data_buffer[position] = val;
		position = inc_buffer_position(position);
	}
}
     aa2:	0f 90       	pop	r0
     aa4:	df 91       	pop	r29
     aa6:	cf 91       	pop	r28
     aa8:	1f 91       	pop	r17
     aaa:	0f 91       	pop	r16
     aac:	08 95       	ret

00000aae <startShiftingWindowLeft>:
//	LED window left 
//---------------------------------------------//
void startShiftingWindowLeft(void)
{
	// Clear spaces between menu states
	fillLedBuffer(-2,2,' ');
     aae:	40 e2       	ldi	r20, 0x20	; 32
     ab0:	62 e0       	ldi	r22, 0x02	; 2
     ab2:	8e ef       	ldi	r24, 0xFE	; 254
     ab4:	d8 df       	rcall	.-80     	; 0xa66 <fillLedBuffer>
	// Set new buffer position for writing
	bufStartPos = wrap_led_buffer_index( (int8_t)bufStartPos - (NUM_DIGITS + 2) );
     ab6:	80 91 ac 01 	lds	r24, 0x01AC
     aba:	88 50       	subi	r24, 0x08	; 8
     abc:	64 df       	rcall	.-312    	; 0x986 <wrap_led_buffer_index>
     abe:	80 93 ac 01 	sts	0x01AC, r24
	// Set shifter state
	shifterState = LED_SHIFT_LEFT;
     ac2:	81 e0       	ldi	r24, 0x01	; 1
     ac4:	80 93 ab 01 	sts	0x01AB, r24
     ac8:	08 95       	ret

00000aca <startShiftingWindowRight>:
//	LED window right 
//---------------------------------------------//
void startShiftingWindowRight(void)
{
	// Clear spaces between menu states
	fillLedBuffer(NUM_DIGITS,2,' ');
     aca:	40 e2       	ldi	r20, 0x20	; 32
     acc:	62 e0       	ldi	r22, 0x02	; 2
     ace:	86 e0       	ldi	r24, 0x06	; 6
     ad0:	ca df       	rcall	.-108    	; 0xa66 <fillLedBuffer>
	// Set new buffer position for writing
	bufStartPos = wrap_led_buffer_index( (int8_t)bufStartPos + NUM_DIGITS + 2 );
     ad2:	80 91 ac 01 	lds	r24, 0x01AC
     ad6:	88 5f       	subi	r24, 0xF8	; 248
     ad8:	56 df       	rcall	.-340    	; 0x986 <wrap_led_buffer_index>
     ada:	80 93 ac 01 	sts	0x01AC, r24
	// Set shifter state
	shifterState = LED_SHIFT_RIGHT;
     ade:	82 e0       	ldi	r24, 0x02	; 2
     ae0:	80 93 ab 01 	sts	0x01AB, r24
     ae4:	08 95       	ret

00000ae6 <initLedIndicator>:
//---------------------------------------------//
//	Initialization
//	Call this function at start of your program
//---------------------------------------------//
void initLedIndicator()
{
     ae6:	cf 93       	push	r28
	uint8_t i;
	// First disable outputs
	disable_led_segments();
     ae8:	a0 d0       	rcall	.+320    	; 0xc2a <disable_led_segments>
     aea:	c7 e0       	ldi	r28, 0x07	; 7
	// Fill shift register with non-active levels
	for (i=0;i<NUM_DIGITS_TOTAL;i++)
	{
		led_clock_pulse(!LED_DIGIT_ACT_LVL);
     aec:	81 e0       	ldi	r24, 0x01	; 1
     aee:	71 d0       	rcall	.+226    	; 0xbd2 <led_clock_pulse>
     af0:	c1 50       	subi	r28, 0x01	; 1
{
	uint8_t i;
	// First disable outputs
	disable_led_segments();
	// Fill shift register with non-active levels
	for (i=0;i<NUM_DIGITS_TOTAL;i++)
     af2:	e1 f7       	brne	.-8      	; 0xaec <initLedIndicator+0x6>
	{
		led_clock_pulse(!LED_DIGIT_ACT_LVL);
	}
	// Now enable outputs
	enable_led_segments();
     af4:	93 d0       	rcall	.+294    	; 0xc1c <enable_led_segments>
	
	// Reset pointers
	wStartPos = 0;
     af6:	10 92 aa 01 	sts	0x01AA, r1
	bufStartPos = 0;
     afa:	10 92 ac 01 	sts	0x01AC, r1
	bufActivePos = 0;
     afe:	10 92 0d 01 	sts	0x010D, r1
	wActivePos = 0;
     b02:	10 92 0e 01 	sts	0x010E, r1
	#ifdef 	USE_EXTRA_LED_DIGIT
	extra_led_state = 0;
     b06:	10 92 a9 01 	sts	0x01A9, r1
	#endif
	
	// Clear the buffer 
	fillLedBuffer(0,LED_BUFFER_LENGTH,' ');
     b0a:	40 e2       	ldi	r20, 0x20	; 32
     b0c:	6e e0       	ldi	r22, 0x0E	; 14
     b0e:	80 e0       	ldi	r24, 0x00	; 0
     b10:	aa df       	rcall	.-172    	; 0xa66 <fillLedBuffer>
	
	// Initialize shift timer - always enabled, but 
	//	processed only when shifting is active
	shifterState = LED_SHIFT_DONE;
     b12:	10 92 ab 01 	sts	0x01AB, r1
	shiftTimer.Enabled = 1;
     b16:	80 91 0f 01 	lds	r24, 0x010F
	shiftTimer.RunOnce = 0;
     b1a:	81 60       	ori	r24, 0x01	; 1
     b1c:	8d 7f       	andi	r24, 0xFD	; 253
     b1e:	80 93 0f 01 	sts	0x010F, r24
	shiftTimer.Top = LED_SHIFT_INTERVAL-1;
     b22:	89 e0       	ldi	r24, 0x09	; 9
     b24:	80 93 11 01 	sts	0x0111, r24
}
     b28:	cf 91       	pop	r28
     b2a:	08 95       	ret

00000b2c <printLedBuffer>:
//		str - null-terminated char string
// Comma and dot (".", ",") get special processing - first occurrence is added to
// a preceding char, next are displayed as a single digit
//---------------------------------------------//
void printLedBuffer(int8_t offset, char* str)
{
     b2c:	ff 92       	push	r15
     b2e:	0f 93       	push	r16
     b30:	1f 93       	push	r17
     b32:	cf 93       	push	r28
     b34:	df 93       	push	r29
     b36:	eb 01       	movw	r28, r22
	char c;
	uint8_t decoded_sym;
	uint8_t state = 0x02;
	uint8_t comma_pos;
	// Ensure index is inside the buffer
	uint8_t buffer_position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
     b38:	90 91 ac 01 	lds	r25, 0x01AC
     b3c:	89 0f       	add	r24, r25
     b3e:	23 df       	rcall	.-442    	; 0x986 <wrap_led_buffer_index>
     b40:	18 2f       	mov	r17, r24
	comma_pos = buffer_position;
     b42:	f8 2e       	mov	r15, r24
//---------------------------------------------//
void printLedBuffer(int8_t offset, char* str)
{
	char c;
	uint8_t decoded_sym;
	uint8_t state = 0x02;
     b44:	02 e0       	ldi	r16, 0x02	; 2
	uint8_t comma_pos;
	// Ensure index is inside the buffer
	uint8_t buffer_position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
	comma_pos = buffer_position;
	// Output chars
	while((c = *str++))
     b46:	23 c0       	rjmp	.+70     	; 0xb8e <printLedBuffer+0x62>
	{
		decoded_sym = decode_led_char(c);
     b48:	08 df       	rcall	.-496    	; 0x95a <decode_led_char>
		state = (decoded_sym == SEGH) ? (state | 0x01) : (state & ~0x01);
     b4a:	80 38       	cpi	r24, 0x80	; 128
     b4c:	11 f4       	brne	.+4      	; 0xb52 <printLedBuffer+0x26>
     b4e:	01 60       	ori	r16, 0x01	; 1
     b50:	01 c0       	rjmp	.+2      	; 0xb54 <printLedBuffer+0x28>
     b52:	0e 7f       	andi	r16, 0xFE	; 254
		if (state == 0x01)			
     b54:	01 30       	cpi	r16, 0x01	; 1
     b56:	49 f4       	brne	.+18     	; 0xb6a <printLedBuffer+0x3e>
		{
			led_data_buffer[comma_pos] |= decoded_sym;
     b58:	ef 2d       	mov	r30, r15
     b5a:	f0 e0       	ldi	r31, 0x00	; 0
     b5c:	e3 55       	subi	r30, 0x53	; 83
     b5e:	fe 4f       	sbci	r31, 0xFE	; 254
     b60:	90 81       	ld	r25, Z
     b62:	98 2b       	or	r25, r24
     b64:	90 83       	st	Z, r25
     b66:	81 2f       	mov	r24, r17
     b68:	0b c0       	rjmp	.+22     	; 0xb80 <printLedBuffer+0x54>
		}
		else
		{
			led_data_buffer[buffer_position] = decoded_sym;	
     b6a:	e1 2f       	mov	r30, r17
     b6c:	f0 e0       	ldi	r31, 0x00	; 0
     b6e:	e3 55       	subi	r30, 0x53	; 83
     b70:	fe 4f       	sbci	r31, 0xFE	; 254
     b72:	80 83       	st	Z, r24
// Increments index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t inc_buffer_position(uint8_t position)
{
	return (position >= LED_BUFFER_LENGTH - 1) ? 0 : position + 1;
     b74:	1d 30       	cpi	r17, 0x0D	; 13
     b76:	18 f4       	brcc	.+6      	; 0xb7e <printLedBuffer+0x52>
     b78:	81 2f       	mov	r24, r17
     b7a:	8f 5f       	subi	r24, 0xFF	; 255
     b7c:	01 c0       	rjmp	.+2      	; 0xb80 <printLedBuffer+0x54>
     b7e:	80 e0       	ldi	r24, 0x00	; 0
		comma_pos = buffer_position;
		if (state != 0x01)
		{
			buffer_position = inc_buffer_position(buffer_position);
		}
		state = (state & 0x01) ? 0x03 : 0x00;		
     b80:	00 ff       	sbrs	r16, 0
     b82:	02 c0       	rjmp	.+4      	; 0xb88 <printLedBuffer+0x5c>
     b84:	03 e0       	ldi	r16, 0x03	; 3
     b86:	01 c0       	rjmp	.+2      	; 0xb8a <printLedBuffer+0x5e>
     b88:	00 e0       	ldi	r16, 0x00	; 0
     b8a:	f1 2e       	mov	r15, r17
     b8c:	18 2f       	mov	r17, r24
	uint8_t comma_pos;
	// Ensure index is inside the buffer
	uint8_t buffer_position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
	comma_pos = buffer_position;
	// Output chars
	while((c = *str++))
     b8e:	89 91       	ld	r24, Y+
     b90:	81 11       	cpse	r24, r1
     b92:	da cf       	rjmp	.-76     	; 0xb48 <printLedBuffer+0x1c>
		{
			buffer_position = inc_buffer_position(buffer_position);
		}
		state = (state & 0x01) ? 0x03 : 0x00;		
	}
}
     b94:	df 91       	pop	r29
     b96:	cf 91       	pop	r28
     b98:	1f 91       	pop	r17
     b9a:	0f 91       	pop	r16
     b9c:	ff 90       	pop	r15
     b9e:	08 95       	ret

00000ba0 <setComma>:
//	buffer cell
//---------------------------------------------//
void setComma(int8_t offset)
{
	// Ensure index is inside the buffer
	uint8_t position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
     ba0:	90 91 ac 01 	lds	r25, 0x01AC
     ba4:	89 0f       	add	r24, r25
     ba6:	ef de       	rcall	.-546    	; 0x986 <wrap_led_buffer_index>
	led_data_buffer[position] |= (SEGH);
     ba8:	e8 2f       	mov	r30, r24
     baa:	f0 e0       	ldi	r31, 0x00	; 0
     bac:	e3 55       	subi	r30, 0x53	; 83
     bae:	fe 4f       	sbci	r31, 0xFE	; 254
     bb0:	80 81       	ld	r24, Z
     bb2:	80 68       	ori	r24, 0x80	; 128
     bb4:	80 83       	st	Z, r24
     bb6:	08 95       	ret

00000bb8 <setExtraLeds>:
// Argument is ORed with current LED state
//---------------------------------------------//
inline void setExtraLeds(uint8_t leds_set_value)
{
		//asm("cli");
		extra_led_state |= leds_set_value;
     bb8:	90 91 a9 01 	lds	r25, 0x01A9
     bbc:	98 2b       	or	r25, r24
     bbe:	90 93 a9 01 	sts	0x01A9, r25
     bc2:	08 95       	ret

00000bc4 <clearExtraLeds>:
// Argument is AND NOTed with current LED state
//---------------------------------------------//
inline void clearExtraLeds(uint8_t leds_clear_value)
{
		//asm("cli");
		extra_led_state &= ~leds_clear_value;
     bc4:	90 91 a9 01 	lds	r25, 0x01A9
     bc8:	80 95       	com	r24
     bca:	89 23       	and	r24, r25
     bcc:	80 93 a9 01 	sts	0x01A9, r24
     bd0:	08 95       	ret

00000bd2 <led_clock_pulse>:


// Clocks in bit into the shift register
void led_clock_pulse(uint8_t bit)
{
	if (bit)
     bd2:	88 23       	and	r24, r24
     bd4:	11 f0       	breq	.+4      	; 0xbda <led_clock_pulse+0x8>
		PORTB |= (1<<PB_LED_DOUT);
     bd6:	c0 9a       	sbi	0x18, 0	; 24
     bd8:	01 c0       	rjmp	.+2      	; 0xbdc <led_clock_pulse+0xa>
	else
		PORTB &= ~(1<<PB_LED_DOUT);
     bda:	c0 98       	cbi	0x18, 0	; 24
     bdc:	8a e1       	ldi	r24, 0x1A	; 26
     bde:	8a 95       	dec	r24
     be0:	f1 f7       	brne	.-4      	; 0xbde <led_clock_pulse+0xc>
     be2:	00 c0       	rjmp	.+0      	; 0xbe4 <led_clock_pulse+0x12>
	_delay_us(SETUP_DELAY_US);
	PORTB |= (1<<PB_LED_CLK);
     be4:	c2 9a       	sbi	0x18, 2	; 24
     be6:	8a e1       	ldi	r24, 0x1A	; 26
     be8:	8a 95       	dec	r24
     bea:	f1 f7       	brne	.-4      	; 0xbe8 <led_clock_pulse+0x16>
     bec:	00 c0       	rjmp	.+0      	; 0xbee <led_clock_pulse+0x1c>
	_delay_us(SHIFT_DELAY_US);
	PORTB &= ~(1<<PB_LED_CLK);
     bee:	c2 98       	cbi	0x18, 2	; 24
     bf0:	08 95       	ret

00000bf2 <set_led_segments>:
// Outputs decoded segment data to port bits
void set_led_segments(uint8_t seg_ch)
{
	uint8_t pdat;
	seg_ch ^= LED_SEGMENT_MASK;
	pdat = PORTC & ~( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
     bf2:	25 b3       	in	r18, 0x15	; 21
	pdat |= (seg_ch & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
     bf4:	98 2f       	mov	r25, r24
     bf6:	9f 71       	andi	r25, 0x1F	; 31
// Outputs decoded segment data to port bits
void set_led_segments(uint8_t seg_ch)
{
	uint8_t pdat;
	seg_ch ^= LED_SEGMENT_MASK;
	pdat = PORTC & ~( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
     bf8:	20 7e       	andi	r18, 0xE0	; 224
	pdat |= (seg_ch & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
     bfa:	92 2b       	or	r25, r18
	PORTC = pdat;
     bfc:	95 bb       	out	0x15, r25	; 21
	seg_ch >>= 2;
	pdat = PORTB & ~( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     bfe:	98 b3       	in	r25, 0x18	; 24
	uint8_t pdat;
	seg_ch ^= LED_SEGMENT_MASK;
	pdat = PORTC & ~( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
	pdat |= (seg_ch & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
	PORTC = pdat;
	seg_ch >>= 2;
     c00:	86 95       	lsr	r24
     c02:	86 95       	lsr	r24
	pdat = PORTB & ~( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
	pdat |= (seg_ch & ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) ));
     c04:	88 73       	andi	r24, 0x38	; 56
	seg_ch ^= LED_SEGMENT_MASK;
	pdat = PORTC & ~( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
	pdat |= (seg_ch & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
	PORTC = pdat;
	seg_ch >>= 2;
	pdat = PORTB & ~( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     c06:	97 7c       	andi	r25, 0xC7	; 199
	pdat |= (seg_ch & ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) ));
     c08:	89 2b       	or	r24, r25
	PORTB = pdat;
     c0a:	88 bb       	out	0x18, r24	; 24
     c0c:	08 95       	ret

00000c0e <enable_led_segments_pullups>:

// Turns segment port bits to HI-Z and
// enables pull-ups
void enable_led_segments_pullups()
{
	PORTC |= ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
     c0e:	85 b3       	in	r24, 0x15	; 21
     c10:	8f 61       	ori	r24, 0x1F	; 31
     c12:	85 bb       	out	0x15, r24	; 21
	PORTB |= ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     c14:	88 b3       	in	r24, 0x18	; 24
     c16:	88 63       	ori	r24, 0x38	; 56
     c18:	88 bb       	out	0x18, r24	; 24
     c1a:	08 95       	ret

00000c1c <enable_led_segments>:
}	

void enable_led_segments()
{
	DDRC |= ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
     c1c:	84 b3       	in	r24, 0x14	; 20
     c1e:	8f 61       	ori	r24, 0x1F	; 31
     c20:	84 bb       	out	0x14, r24	; 20
	DDRB |= ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     c22:	87 b3       	in	r24, 0x17	; 23
     c24:	88 63       	ori	r24, 0x38	; 56
     c26:	87 bb       	out	0x17, r24	; 23
     c28:	08 95       	ret

00000c2a <disable_led_segments>:
}

void disable_led_segments()
{
	DDRC &= ~( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
     c2a:	84 b3       	in	r24, 0x14	; 20
     c2c:	80 7e       	andi	r24, 0xE0	; 224
     c2e:	84 bb       	out	0x14, r24	; 20
	DDRB &= ~( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     c30:	87 b3       	in	r24, 0x17	; 23
     c32:	87 7c       	andi	r24, 0xC7	; 199
     c34:	87 bb       	out	0x17, r24	; 23
     c36:	08 95       	ret

00000c38 <capture_button_state>:


void capture_button_state()
{
	uint8_t pdat;
	pdat = PINB  & ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     c38:	86 b3       	in	r24, 0x16	; 22
     c3a:	88 73       	andi	r24, 0x38	; 56
	pdat <<= 2;
	pdat |= (PINC & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
     c3c:	93 b3       	in	r25, 0x13	; 19

void capture_button_state()
{
	uint8_t pdat;
	pdat = PINB  & ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
	pdat <<= 2;
     c3e:	88 0f       	add	r24, r24
     c40:	88 0f       	add	r24, r24
	pdat |= (PINC & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
     c42:	9f 71       	andi	r25, 0x1F	; 31
     c44:	89 2b       	or	r24, r25
	raw_button_state = pdat ^ RAW_BUTTONS_INVERSE_MASK;
     c46:	80 95       	com	r24
     c48:	80 93 bb 01 	sts	0x01BB, r24
     c4c:	08 95       	ret

00000c4e <processItemFunction>:
//	Arguments:
//		funcAddr - address of the function to run.
//-----------------------------------------------------------------//
static inline void processItemFunction(FuncPtr funcAddr)
{
	if (funcAddr != 0)
     c4e:	00 97       	sbiw	r24, 0x00	; 0
     c50:	11 f0       	breq	.+4      	; 0xc56 <processItemFunction+0x8>
		((FuncPtr)funcAddr)();
     c52:	fc 01       	movw	r30, r24
     c54:	09 94       	ijmp
     c56:	08 95       	ret

00000c58 <mf_setTempLeave>:
		clearExtraLeds(LED_TEMP);
}

void mf_setTempLeave(void)
{
	userTimer.Enabled = 0;
     c58:	eb e1       	ldi	r30, 0x1B	; 27
     c5a:	f1 e0       	ldi	r31, 0x01	; 1
     c5c:	80 81       	ld	r24, Z
     c5e:	8e 7f       	andi	r24, 0xFE	; 254
     c60:	80 83       	st	Z, r24
     c62:	08 95       	ret

00000c64 <mf_leafSelectAct>:
	userTimer.FA_GE = 1;	
}

void mf_leafSelectAct(void)
{
	userTimer.Timer = 0;
     c64:	10 92 1c 01 	sts	0x011C, r1
	userTimer.Top = BLINK_PERIOD - 1;
     c68:	87 e0       	ldi	r24, 0x07	; 7
     c6a:	80 93 1d 01 	sts	0x011D, r24
	userTimer.CompA = BLINK_PERIOD / 2;
     c6e:	84 e0       	ldi	r24, 0x04	; 4
     c70:	80 93 1e 01 	sts	0x011E, r24
	userTimer.Enabled = 1;
     c74:	eb e1       	ldi	r30, 0x1B	; 27
     c76:	f1 e0       	ldi	r31, 0x01	; 1
     c78:	80 81       	ld	r24, Z
     c7a:	81 60       	ori	r24, 0x01	; 1
     c7c:	80 83       	st	Z, r24
     c7e:	08 95       	ret

00000c80 <mf_leafExit>:
}

void mf_leafExit(void)
{
	userTimer.Enabled = 0;	
     c80:	eb e1       	ldi	r30, 0x1B	; 27
     c82:	f1 e0       	ldi	r31, 0x01	; 1
     c84:	80 81       	ld	r24, Z
     c86:	8e 7f       	andi	r24, 0xFE	; 254
     c88:	80 83       	st	Z, r24
     c8a:	08 95       	ret

00000c8c <mf_actpoffLeave>:
	printLedBuffer(0,"   OFF");
}

void mf_actpoffLeave(void)
{
	autoPowerOffState = 0;	
     c8c:	10 92 06 01 	sts	0x0106, r1
     c90:	08 95       	ret

00000c92 <mf_calibDoExit>:
	userTimer.Enabled = 1;
}

void mf_leafExit(void)
{
	userTimer.Enabled = 0;	
     c92:	eb e1       	ldi	r30, 0x1B	; 27
     c94:	f1 e0       	ldi	r31, 0x01	; 1
     c96:	80 81       	ld	r24, Z
     c98:	8e 7f       	andi	r24, 0xFE	; 254
     c9a:	80 83       	st	Z, r24
}

void mf_calibDoExit(void)
{
	mf_leafExit();
	heaterState &= ~CALIBRATION_ACTIVE;
     c9c:	80 91 07 01 	lds	r24, 0x0107
     ca0:	8d 7f       	andi	r24, 0xFD	; 253
     ca2:	80 93 07 01 	sts	0x0107, r24
     ca6:	08 95       	ret

00000ca8 <mf_cdoneDo>:
	saveCalibrationToEEPROM();
}

void mf_cdoneDo(void)
{
	printLedBuffer(0," DONE ");
     ca8:	68 ed       	ldi	r22, 0xD8	; 216
     caa:	70 e0       	ldi	r23, 0x00	; 0
     cac:	80 e0       	ldi	r24, 0x00	; 0
     cae:	3e cf       	rjmp	.-388    	; 0xb2c <printLedBuffer>

00000cb0 <mf_actpoffDo>:
}

// Indication of power off mode
void mf_actpoffDo(void)
{
	printLedBuffer(0,"   OFF");
     cb0:	6f ed       	ldi	r22, 0xDF	; 223
     cb2:	70 e0       	ldi	r23, 0x00	; 0
     cb4:	80 e0       	ldi	r24, 0x00	; 0
     cb6:	3a cf       	rjmp	.-396    	; 0xb2c <printLedBuffer>

00000cb8 <mf_cdone2Select>:
}

void mf_cdone2Select(void)
{
	// Save current ADC as calibrating point
	cp.cpoint2_adc = adc_normalized;
     cb8:	80 91 5d 01 	lds	r24, 0x015D
     cbc:	90 91 5e 01 	lds	r25, 0x015E
     cc0:	90 93 8f 01 	sts	0x018F, r25
     cc4:	80 93 8e 01 	sts	0x018E, r24
	// Save current Celsius degree
	cp.cpoint2 = cpoint2_copy;
     cc8:	80 91 20 01 	lds	r24, 0x0120
     ccc:	80 93 8b 01 	sts	0x018B, r24
	// Calculate new coefficient for temperature conversion
	calculateCoeffs();
     cd0:	a3 da       	rcall	.-2746   	; 0x218 <calculateCoeffs>
	saveCalibrationToEEPROM();
     cd2:	2d ce       	rjmp	.-934    	; 0x92e <saveCalibrationToEEPROM>

00000cd4 <mf_cdone1Select>:
//---------------------------------------------//

void mf_cdone1Select(void)
{
	// Save current ADC as calibrating point
	cp.cpoint1_adc = adc_normalized;
     cd4:	80 91 5d 01 	lds	r24, 0x015D
     cd8:	90 91 5e 01 	lds	r25, 0x015E
     cdc:	90 93 8d 01 	sts	0x018D, r25
     ce0:	80 93 8c 01 	sts	0x018C, r24
	// Save current Celsius degree
	cp.cpoint1 = cpoint1_copy;
     ce4:	80 91 1f 01 	lds	r24, 0x011F
     ce8:	80 93 8a 01 	sts	0x018A, r24
	// Calculate new coefficient for temperature conversion
	calculateCoeffs();
     cec:	95 da       	rcall	.-2774   	; 0x218 <calculateCoeffs>
	saveCalibrationToEEPROM();
     cee:	1f ce       	rjmp	.-962    	; 0x92e <saveCalibrationToEEPROM>

00000cf0 <mf_autopoffDo>:

//---------------------------------------------//


void mf_autopoffDo(void)
{
     cf0:	cf 93       	push	r28
     cf2:	df 93       	push	r29
     cf4:	cd b7       	in	r28, 0x3d	; 61
     cf6:	de b7       	in	r29, 0x3e	; 62
     cf8:	27 97       	sbiw	r28, 0x07	; 7
     cfa:	0f b6       	in	r0, 0x3f	; 63
     cfc:	f8 94       	cli
     cfe:	de bf       	out	0x3e, r29	; 62
     d00:	0f be       	out	0x3f, r0	; 63
     d02:	cd bf       	out	0x3d, r28	; 61
	char str[] = {'O','F','F',' ',' ',' ',0};
     d04:	87 e0       	ldi	r24, 0x07	; 7
     d06:	ee ea       	ldi	r30, 0xAE	; 174
     d08:	f0 e0       	ldi	r31, 0x00	; 0
     d0a:	de 01       	movw	r26, r28
     d0c:	11 96       	adiw	r26, 0x01	; 1
     d0e:	01 90       	ld	r0, Z+
     d10:	0d 92       	st	X+, r0
     d12:	8a 95       	dec	r24
     d14:	e1 f7       	brne	.-8      	; 0xd0e <mf_autopoffDo+0x1e>
		
		
	if (button_state & (BD_UP | BR_UP))
     d16:	80 91 02 01 	lds	r24, 0x0102
     d1a:	90 91 03 01 	lds	r25, 0x0103
     d1e:	9c 01       	movw	r18, r24
     d20:	22 70       	andi	r18, 0x02	; 2
     d22:	34 70       	andi	r19, 0x04	; 4
     d24:	23 2b       	or	r18, r19
     d26:	31 f0       	breq	.+12     	; 0xd34 <mf_autopoffDo+0x44>
	{
		if (p.power_off_timeout < MAX_POWEROFF_TIMEOUT)
     d28:	80 91 93 01 	lds	r24, 0x0193
     d2c:	8f 35       	cpi	r24, 0x5F	; 95
     d2e:	68 f4       	brcc	.+26     	; 0xd4a <mf_autopoffDo+0x5a>
			p.power_off_timeout += 5;
     d30:	8b 5f       	subi	r24, 0xFB	; 251
     d32:	09 c0       	rjmp	.+18     	; 0xd46 <mf_autopoffDo+0x56>
		restartMenuTimer();
	}
	else if (button_state & (BD_DOWN | BR_DOWN))
     d34:	84 70       	andi	r24, 0x04	; 4
     d36:	98 70       	andi	r25, 0x08	; 8
     d38:	89 2b       	or	r24, r25
     d3a:	49 f0       	breq	.+18     	; 0xd4e <mf_autopoffDo+0x5e>
	{
		if (p.power_off_timeout > MIN_POWEROFF_TIMEOUT)
     d3c:	80 91 93 01 	lds	r24, 0x0193
     d40:	86 30       	cpi	r24, 0x06	; 6
     d42:	18 f0       	brcs	.+6      	; 0xd4a <mf_autopoffDo+0x5a>
			p.power_off_timeout -= 5;
     d44:	85 50       	subi	r24, 0x05	; 5
     d46:	80 93 93 01 	sts	0x0193, r24
//	 Restarts menu state timeout
//	Should be used in RUN function when control buttons are pressed.
//-----------------------------------------------------------------//
static void restartMenuTimer(void)
{
	menuTimer.Timer = 0;
     d4a:	10 92 9e 00 	sts	0x009E, r1
		if (p.power_off_timeout > MIN_POWEROFF_TIMEOUT)
			p.power_off_timeout -= 5;
		restartMenuTimer();
	}	
		
	if (userTimer.FA_GE)
     d4e:	80 91 1b 01 	lds	r24, 0x011B
     d52:	84 ff       	sbrs	r24, 4
     d54:	10 c0       	rjmp	.+32     	; 0xd76 <mf_autopoffDo+0x86>
	{
		if (p.power_off_timeout != MAX_POWEROFF_TIMEOUT)
     d56:	80 91 93 01 	lds	r24, 0x0193
     d5a:	8f 35       	cpi	r24, 0x5F	; 95
     d5c:	41 f0       	breq	.+16     	; 0xd6e <mf_autopoffDo+0x7e>
			u16toa_align_right(p.power_off_timeout,str + 4,0x80 | 2,' ');	
     d5e:	20 e2       	ldi	r18, 0x20	; 32
     d60:	42 e8       	ldi	r20, 0x82	; 130
     d62:	be 01       	movw	r22, r28
     d64:	6b 5f       	subi	r22, 0xFB	; 251
     d66:	7f 4f       	sbci	r23, 0xFF	; 255
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	ba d2       	rcall	.+1396   	; 0x12e0 <u16toa_align_right>
     d6c:	04 c0       	rjmp	.+8      	; 0xd76 <mf_autopoffDo+0x86>
		else 
		{
			str[4] = 'N';
     d6e:	8e e4       	ldi	r24, 0x4E	; 78
     d70:	8d 83       	std	Y+5, r24	; 0x05
			str[5] = 'O';
     d72:	8f e4       	ldi	r24, 0x4F	; 79
     d74:	8e 83       	std	Y+6, r24	; 0x06
		}			
	}		
		
	printLedBuffer(0,str);
     d76:	be 01       	movw	r22, r28
     d78:	6f 5f       	subi	r22, 0xFF	; 255
     d7a:	7f 4f       	sbci	r23, 0xFF	; 255
     d7c:	80 e0       	ldi	r24, 0x00	; 0
     d7e:	d6 de       	rcall	.-596    	; 0xb2c <printLedBuffer>
}
     d80:	27 96       	adiw	r28, 0x07	; 7
     d82:	0f b6       	in	r0, 0x3f	; 63
     d84:	f8 94       	cli
     d86:	de bf       	out	0x3e, r29	; 62
     d88:	0f be       	out	0x3f, r0	; 63
     d8a:	cd bf       	out	0x3d, r28	; 61
     d8c:	df 91       	pop	r29
     d8e:	cf 91       	pop	r28
     d90:	08 95       	ret

00000d92 <mf_realTempDo>:
{
	setExtraLeds(LED_TEMP);
}

void mf_realTempDo(void)
{
     d92:	cf 93       	push	r28
     d94:	df 93       	push	r29
     d96:	cd b7       	in	r28, 0x3d	; 61
     d98:	de b7       	in	r29, 0x3e	; 62
     d9a:	27 97       	sbiw	r28, 0x07	; 7
     d9c:	0f b6       	in	r0, 0x3f	; 63
     d9e:	f8 94       	cli
     da0:	de bf       	out	0x3e, r29	; 62
     da2:	0f be       	out	0x3f, r0	; 63
     da4:	cd bf       	out	0x3d, r28	; 61
	char str[] = {' ',' ',' ',' ',0xB0,'C',0};
     da6:	87 e0       	ldi	r24, 0x07	; 7
     da8:	e5 eb       	ldi	r30, 0xB5	; 181
     daa:	f0 e0       	ldi	r31, 0x00	; 0
     dac:	de 01       	movw	r26, r28
     dae:	11 96       	adiw	r26, 0x01	; 1
     db0:	01 90       	ld	r0, Z+
     db2:	0d 92       	st	X+, r0
     db4:	8a 95       	dec	r24
     db6:	e1 f7       	brne	.-8      	; 0xdb0 <mf_realTempDo+0x1e>
	// Output ADC result to LED
	u16toa_align_right(adc_celsius,str,0x80 | 4,' ');
     db8:	20 e2       	ldi	r18, 0x20	; 32
     dba:	44 e8       	ldi	r20, 0x84	; 132
     dbc:	be 01       	movw	r22, r28
     dbe:	6f 5f       	subi	r22, 0xFF	; 255
     dc0:	7f 4f       	sbci	r23, 0xFF	; 255
     dc2:	80 91 5f 01 	lds	r24, 0x015F
     dc6:	90 91 60 01 	lds	r25, 0x0160
     dca:	8a d2       	rcall	.+1300   	; 0x12e0 <u16toa_align_right>
	printLedBuffer(0,str);
     dcc:	be 01       	movw	r22, r28
     dce:	6f 5f       	subi	r22, 0xFF	; 255
     dd0:	7f 4f       	sbci	r23, 0xFF	; 255
     dd2:	80 e0       	ldi	r24, 0x00	; 0
     dd4:	ab de       	rcall	.-682    	; 0xb2c <printLedBuffer>
}
     dd6:	27 96       	adiw	r28, 0x07	; 7
     dd8:	0f b6       	in	r0, 0x3f	; 63
     dda:	f8 94       	cli
     ddc:	de bf       	out	0x3e, r29	; 62
     dde:	0f be       	out	0x3f, r0	; 63
     de0:	cd bf       	out	0x3d, r28	; 61
     de2:	df 91       	pop	r29
     de4:	cf 91       	pop	r28
     de6:	08 95       	ret

00000de8 <mf_calib2Do>:
}

//---------------------------------------------//

void mf_calib2Do(void)
{
     de8:	cf 93       	push	r28
     dea:	df 93       	push	r29
     dec:	cd b7       	in	r28, 0x3d	; 61
     dee:	de b7       	in	r29, 0x3e	; 62
     df0:	27 97       	sbiw	r28, 0x07	; 7
     df2:	0f b6       	in	r0, 0x3f	; 63
     df4:	f8 94       	cli
     df6:	de bf       	out	0x3e, r29	; 62
     df8:	0f be       	out	0x3f, r0	; 63
     dfa:	cd bf       	out	0x3d, r28	; 61
	char str[] = {'P','2',' ',' ',' ',' ',0};
     dfc:	87 e0       	ldi	r24, 0x07	; 7
     dfe:	ec eb       	ldi	r30, 0xBC	; 188
     e00:	f0 e0       	ldi	r31, 0x00	; 0
     e02:	de 01       	movw	r26, r28
     e04:	11 96       	adiw	r26, 0x01	; 1
     e06:	01 90       	ld	r0, Z+
     e08:	0d 92       	st	X+, r0
     e0a:	8a 95       	dec	r24
     e0c:	e1 f7       	brne	.-8      	; 0xe06 <mf_calib2Do+0x1e>
	
	
	if (button_state & (BD_UP | BR_UP))
     e0e:	80 91 02 01 	lds	r24, 0x0102
     e12:	90 91 03 01 	lds	r25, 0x0103
     e16:	9c 01       	movw	r18, r24
     e18:	22 70       	andi	r18, 0x02	; 2
     e1a:	34 70       	andi	r19, 0x04	; 4
     e1c:	23 2b       	or	r18, r19
     e1e:	31 f0       	breq	.+12     	; 0xe2c <mf_calib2Do+0x44>
	{
		if (cpoint2_copy < MAX_CALIB_TEMP)
     e20:	80 91 20 01 	lds	r24, 0x0120
     e24:	8a 3f       	cpi	r24, 0xFA	; 250
     e26:	68 f4       	brcc	.+26     	; 0xe42 <mf_calib2Do+0x5a>
		cpoint2_copy += 1;
     e28:	8f 5f       	subi	r24, 0xFF	; 255
     e2a:	09 c0       	rjmp	.+18     	; 0xe3e <mf_calib2Do+0x56>
	}
	else if (button_state & (BD_DOWN | BR_DOWN))
     e2c:	84 70       	andi	r24, 0x04	; 4
     e2e:	98 70       	andi	r25, 0x08	; 8
     e30:	89 2b       	or	r24, r25
     e32:	39 f0       	breq	.+14     	; 0xe42 <mf_calib2Do+0x5a>
	{
		if (cpoint2_copy > MIN_CALIB_TEMP)
     e34:	80 91 20 01 	lds	r24, 0x0120
     e38:	8b 30       	cpi	r24, 0x0B	; 11
     e3a:	18 f0       	brcs	.+6      	; 0xe42 <mf_calib2Do+0x5a>
		cpoint2_copy -= 1;
     e3c:	81 50       	subi	r24, 0x01	; 1
     e3e:	80 93 20 01 	sts	0x0120, r24
	}
	
	if (userTimer.FA_GE)
     e42:	80 91 1b 01 	lds	r24, 0x011B
     e46:	84 ff       	sbrs	r24, 4
     e48:	0f c0       	rjmp	.+30     	; 0xe68 <mf_calib2Do+0x80>
	{
		u16toa_align_right(cpoint2_copy,str + 3,0x80 | 3,' ');
     e4a:	20 e2       	ldi	r18, 0x20	; 32
     e4c:	43 e8       	ldi	r20, 0x83	; 131
     e4e:	be 01       	movw	r22, r28
     e50:	6c 5f       	subi	r22, 0xFC	; 252
     e52:	7f 4f       	sbci	r23, 0xFF	; 255
     e54:	80 91 20 01 	lds	r24, 0x0120
     e58:	90 e0       	ldi	r25, 0x00	; 0
     e5a:	42 d2       	rcall	.+1156   	; 0x12e0 <u16toa_align_right>
		resetAutoPowerOffCounter();
     e5c:	d8 d5       	rcall	.+2992   	; 0x1a0e <resetAutoPowerOffCounter>
		heaterState |= CALIBRATION_ACTIVE;
     e5e:	80 91 07 01 	lds	r24, 0x0107
     e62:	82 60       	ori	r24, 0x02	; 2
     e64:	80 93 07 01 	sts	0x0107, r24
	}
	
	printLedBuffer(0,str);
     e68:	be 01       	movw	r22, r28
     e6a:	6f 5f       	subi	r22, 0xFF	; 255
     e6c:	7f 4f       	sbci	r23, 0xFF	; 255
     e6e:	80 e0       	ldi	r24, 0x00	; 0
     e70:	5d de       	rcall	.-838    	; 0xb2c <printLedBuffer>
	
}
     e72:	27 96       	adiw	r28, 0x07	; 7
     e74:	0f b6       	in	r0, 0x3f	; 63
     e76:	f8 94       	cli
     e78:	de bf       	out	0x3e, r29	; 62
     e7a:	0f be       	out	0x3f, r0	; 63
     e7c:	cd bf       	out	0x3d, r28	; 61
     e7e:	df 91       	pop	r29
     e80:	cf 91       	pop	r28
     e82:	08 95       	ret

00000e84 <mf_calib1Do>:
	cpoint1_copy = cp.cpoint1;
	cpoint2_copy = cp.cpoint2;
}

void mf_calib1Do(void)
{
     e84:	cf 93       	push	r28
     e86:	df 93       	push	r29
     e88:	cd b7       	in	r28, 0x3d	; 61
     e8a:	de b7       	in	r29, 0x3e	; 62
     e8c:	27 97       	sbiw	r28, 0x07	; 7
     e8e:	0f b6       	in	r0, 0x3f	; 63
     e90:	f8 94       	cli
     e92:	de bf       	out	0x3e, r29	; 62
     e94:	0f be       	out	0x3f, r0	; 63
     e96:	cd bf       	out	0x3d, r28	; 61
	char str[] = {'P','1',' ',' ',' ',' ',0};
     e98:	87 e0       	ldi	r24, 0x07	; 7
     e9a:	e3 ec       	ldi	r30, 0xC3	; 195
     e9c:	f0 e0       	ldi	r31, 0x00	; 0
     e9e:	de 01       	movw	r26, r28
     ea0:	11 96       	adiw	r26, 0x01	; 1
     ea2:	01 90       	ld	r0, Z+
     ea4:	0d 92       	st	X+, r0
     ea6:	8a 95       	dec	r24
     ea8:	e1 f7       	brne	.-8      	; 0xea2 <mf_calib1Do+0x1e>
	
	
	if (button_state & (BD_UP | BR_UP))
     eaa:	80 91 02 01 	lds	r24, 0x0102
     eae:	90 91 03 01 	lds	r25, 0x0103
     eb2:	9c 01       	movw	r18, r24
     eb4:	22 70       	andi	r18, 0x02	; 2
     eb6:	34 70       	andi	r19, 0x04	; 4
     eb8:	23 2b       	or	r18, r19
     eba:	31 f0       	breq	.+12     	; 0xec8 <mf_calib1Do+0x44>
	{
		if (cpoint1_copy < MAX_CALIB_TEMP)
     ebc:	80 91 1f 01 	lds	r24, 0x011F
     ec0:	8a 3f       	cpi	r24, 0xFA	; 250
     ec2:	68 f4       	brcc	.+26     	; 0xede <mf_calib1Do+0x5a>
			cpoint1_copy += 1;
     ec4:	8f 5f       	subi	r24, 0xFF	; 255
     ec6:	09 c0       	rjmp	.+18     	; 0xeda <mf_calib1Do+0x56>
	}
	else if (button_state & (BD_DOWN | BR_DOWN))
     ec8:	84 70       	andi	r24, 0x04	; 4
     eca:	98 70       	andi	r25, 0x08	; 8
     ecc:	89 2b       	or	r24, r25
     ece:	39 f0       	breq	.+14     	; 0xede <mf_calib1Do+0x5a>
	{
		if (cpoint1_copy > MIN_CALIB_TEMP)
     ed0:	80 91 1f 01 	lds	r24, 0x011F
     ed4:	8b 30       	cpi	r24, 0x0B	; 11
     ed6:	18 f0       	brcs	.+6      	; 0xede <mf_calib1Do+0x5a>
			cpoint1_copy -= 1;
     ed8:	81 50       	subi	r24, 0x01	; 1
     eda:	80 93 1f 01 	sts	0x011F, r24
	}
	
	if (userTimer.FA_GE)
     ede:	80 91 1b 01 	lds	r24, 0x011B
     ee2:	84 ff       	sbrs	r24, 4
     ee4:	0f c0       	rjmp	.+30     	; 0xf04 <mf_calib1Do+0x80>
	{
		u16toa_align_right(cpoint1_copy,str + 3,0x80 | 3,' ');
     ee6:	20 e2       	ldi	r18, 0x20	; 32
     ee8:	43 e8       	ldi	r20, 0x83	; 131
     eea:	be 01       	movw	r22, r28
     eec:	6c 5f       	subi	r22, 0xFC	; 252
     eee:	7f 4f       	sbci	r23, 0xFF	; 255
     ef0:	80 91 1f 01 	lds	r24, 0x011F
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	f4 d1       	rcall	.+1000   	; 0x12e0 <u16toa_align_right>
		resetAutoPowerOffCounter();
     ef8:	8a d5       	rcall	.+2836   	; 0x1a0e <resetAutoPowerOffCounter>
		heaterState |= CALIBRATION_ACTIVE;
     efa:	80 91 07 01 	lds	r24, 0x0107
     efe:	82 60       	ori	r24, 0x02	; 2
     f00:	80 93 07 01 	sts	0x0107, r24
	}
	
	printLedBuffer(0,str);
     f04:	be 01       	movw	r22, r28
     f06:	6f 5f       	subi	r22, 0xFF	; 255
     f08:	7f 4f       	sbci	r23, 0xFF	; 255
     f0a:	80 e0       	ldi	r24, 0x00	; 0
     f0c:	0f de       	rcall	.-994    	; 0xb2c <printLedBuffer>
	
}
     f0e:	27 96       	adiw	r28, 0x07	; 7
     f10:	0f b6       	in	r0, 0x3f	; 63
     f12:	f8 94       	cli
     f14:	de bf       	out	0x3e, r29	; 62
     f16:	0f be       	out	0x3f, r0	; 63
     f18:	cd bf       	out	0x3d, r28	; 61
     f1a:	df 91       	pop	r29
     f1c:	cf 91       	pop	r28
     f1e:	08 95       	ret

00000f20 <mf_actpoffSelect>:



void mf_actpoffSelect(void)
{
	clearExtraLeds(LED_TEMP | LED_ROLL);
     f20:	83 e0       	ldi	r24, 0x03	; 3
     f22:	50 de       	rcall	.-864    	; 0xbc4 <clearExtraLeds>
	autoPowerOffState = AUTO_POFF_ACTIVE;
     f24:	81 e0       	ldi	r24, 0x01	; 1
     f26:	80 93 06 01 	sts	0x0106, r24
     f2a:	08 95       	ret

00000f2c <mf_leafSelect>:

// Select and exit functions, common for leaf menu items 

void mf_leafSelect(void)
{
	clearExtraLeds(LED_TEMP | LED_ROLL);
     f2c:	83 e0       	ldi	r24, 0x03	; 3
     f2e:	4a de       	rcall	.-876    	; 0xbc4 <clearExtraLeds>
	userTimer.FA_GE = 1;	
     f30:	eb e1       	ldi	r30, 0x1B	; 27
     f32:	f1 e0       	ldi	r31, 0x01	; 1
     f34:	80 81       	ld	r24, Z
     f36:	80 61       	ori	r24, 0x10	; 16
     f38:	80 83       	st	Z, r24
     f3a:	08 95       	ret

00000f3c <mf_calibSelect>:

//---------------------------------------------//

void mf_calibSelect(void)
{
	mf_leafSelect();
     f3c:	f7 df       	rcall	.-18     	; 0xf2c <mf_leafSelect>
	cpoint1_copy = cp.cpoint1;
     f3e:	80 91 8a 01 	lds	r24, 0x018A
     f42:	80 93 1f 01 	sts	0x011F, r24
	cpoint2_copy = cp.cpoint2;
     f46:	80 91 8b 01 	lds	r24, 0x018B
     f4a:	80 93 20 01 	sts	0x0120, r24
     f4e:	08 95       	ret

00000f50 <mf_rollLeave>:
	printLedBuffer(0,str);
}

void mf_rollLeave(void)
{
	clearExtraLeds(LED_ROLL);
     f50:	82 e0       	ldi	r24, 0x02	; 2
     f52:	38 de       	rcall	.-912    	; 0xbc4 <clearExtraLeds>
	userTimer.Enabled = 0;
     f54:	eb e1       	ldi	r30, 0x1B	; 27
     f56:	f1 e0       	ldi	r31, 0x01	; 1
     f58:	80 81       	ld	r24, Z
     f5a:	8e 7f       	andi	r24, 0xFE	; 254
     f5c:	80 83       	st	Z, r24
     f5e:	08 95       	ret

00000f60 <mf_setTempSelect>:
//---------------------------------------------//


void mf_setTempSelect(void)
{
	clearExtraLeds(LED_TEMP);
     f60:	81 e0       	ldi	r24, 0x01	; 1
     f62:	30 de       	rcall	.-928    	; 0xbc4 <clearExtraLeds>
	mf_leafSelectAct();		// setup and start timer
     f64:	7f ce       	rjmp	.-770    	; 0xc64 <mf_leafSelectAct>

00000f66 <mf_realTempLeave>:
	printLedBuffer(0,str);
}

void mf_realTempLeave(void)
{
	clearExtraLeds(LED_TEMP);
     f66:	81 e0       	ldi	r24, 0x01	; 1
     f68:	2d ce       	rjmp	.-934    	; 0xbc4 <clearExtraLeds>

00000f6a <mf_sndenDo>:

//---------------------------------------------//


void mf_sndenDo(void)
{
     f6a:	cf 93       	push	r28
     f6c:	df 93       	push	r29
     f6e:	cd b7       	in	r28, 0x3d	; 61
     f70:	de b7       	in	r29, 0x3e	; 62
     f72:	27 97       	sbiw	r28, 0x07	; 7
     f74:	0f b6       	in	r0, 0x3f	; 63
     f76:	f8 94       	cli
     f78:	de bf       	out	0x3e, r29	; 62
     f7a:	0f be       	out	0x3f, r0	; 63
     f7c:	cd bf       	out	0x3d, r28	; 61
	char str[] = {'S','N','D',' ',' ',' ',0};
     f7e:	87 e0       	ldi	r24, 0x07	; 7
     f80:	ea ec       	ldi	r30, 0xCA	; 202
     f82:	f0 e0       	ldi	r31, 0x00	; 0
     f84:	de 01       	movw	r26, r28
     f86:	11 96       	adiw	r26, 0x01	; 1
     f88:	01 90       	ld	r0, Z+
     f8a:	0d 92       	st	X+, r0
     f8c:	8a 95       	dec	r24
     f8e:	e1 f7       	brne	.-8      	; 0xf88 <mf_sndenDo+0x1e>
		
	if (button_state & (BD_UP | BD_DOWN))
     f90:	80 91 02 01 	lds	r24, 0x0102
     f94:	90 91 03 01 	lds	r25, 0x0103
     f98:	86 70       	andi	r24, 0x06	; 6
     f9a:	99 27       	eor	r25, r25
     f9c:	89 2b       	or	r24, r25
     f9e:	49 f0       	breq	.+18     	; 0xfb2 <mf_sndenDo+0x48>
	{
		p.sound_enable = !p.sound_enable;
     fa0:	81 e0       	ldi	r24, 0x01	; 1
     fa2:	90 91 92 01 	lds	r25, 0x0192
     fa6:	91 11       	cpse	r25, r1
     fa8:	80 e0       	ldi	r24, 0x00	; 0
     faa:	80 93 92 01 	sts	0x0192, r24
//	 Restarts menu state timeout
//	Should be used in RUN function when control buttons are pressed.
//-----------------------------------------------------------------//
static void restartMenuTimer(void)
{
	menuTimer.Timer = 0;
     fae:	10 92 9e 00 	sts	0x009E, r1
	{
		p.sound_enable = !p.sound_enable;
		restartMenuTimer();
	}			
		
	if (userTimer.FA_GE)
     fb2:	80 91 1b 01 	lds	r24, 0x011B
     fb6:	84 ff       	sbrs	r24, 4
     fb8:	0d c0       	rjmp	.+26     	; 0xfd4 <mf_sndenDo+0x6a>
	{
		if (p.sound_enable)		
     fba:	80 91 92 01 	lds	r24, 0x0192
     fbe:	88 23       	and	r24, r24
     fc0:	21 f0       	breq	.+8      	; 0xfca <mf_sndenDo+0x60>
		{
			str[4] = 'O';
     fc2:	8f e4       	ldi	r24, 0x4F	; 79
     fc4:	8d 83       	std	Y+5, r24	; 0x05
			str[5] = 'N';
     fc6:	8e e4       	ldi	r24, 0x4E	; 78
     fc8:	04 c0       	rjmp	.+8      	; 0xfd2 <mf_sndenDo+0x68>
		}
		else
		{
			str[3] = 'O';
     fca:	8f e4       	ldi	r24, 0x4F	; 79
     fcc:	8c 83       	std	Y+4, r24	; 0x04
			str[4] = 'F';
     fce:	86 e4       	ldi	r24, 0x46	; 70
     fd0:	8d 83       	std	Y+5, r24	; 0x05
			str[5] = 'F';
     fd2:	8e 83       	std	Y+6, r24	; 0x06
		}			
	}
		
	printLedBuffer(0,str);
     fd4:	be 01       	movw	r22, r28
     fd6:	6f 5f       	subi	r22, 0xFF	; 255
     fd8:	7f 4f       	sbci	r23, 0xFF	; 255
     fda:	80 e0       	ldi	r24, 0x00	; 0
     fdc:	a7 dd       	rcall	.-1202   	; 0xb2c <printLedBuffer>
	setComma(2);
     fde:	82 e0       	ldi	r24, 0x02	; 2
     fe0:	df dd       	rcall	.-1090   	; 0xba0 <setComma>
}
     fe2:	27 96       	adiw	r28, 0x07	; 7
     fe4:	0f b6       	in	r0, 0x3f	; 63
     fe6:	f8 94       	cli
     fe8:	de bf       	out	0x3e, r29	; 62
     fea:	0f be       	out	0x3f, r0	; 63
     fec:	cd bf       	out	0x3d, r28	; 61
     fee:	df 91       	pop	r29
     ff0:	cf 91       	pop	r28
     ff2:	08 95       	ret

00000ff4 <mf_rollDo>:
	setExtraLeds(LED_ROLL);
	mf_leafSelectAct();		// setup and start timer
}

void mf_rollDo(void)
{
     ff4:	cf 93       	push	r28
     ff6:	df 93       	push	r29
     ff8:	cd b7       	in	r28, 0x3d	; 61
     ffa:	de b7       	in	r29, 0x3e	; 62
     ffc:	27 97       	sbiw	r28, 0x07	; 7
     ffe:	0f b6       	in	r0, 0x3f	; 63
    1000:	f8 94       	cli
    1002:	de bf       	out	0x3e, r29	; 62
    1004:	0f be       	out	0x3f, r0	; 63
    1006:	cd bf       	out	0x3d, r28	; 61
	char str[] = {' ',' ',' ',' ',' ',' ',0};
    1008:	87 e0       	ldi	r24, 0x07	; 7
    100a:	e1 ed       	ldi	r30, 0xD1	; 209
    100c:	f0 e0       	ldi	r31, 0x00	; 0
    100e:	de 01       	movw	r26, r28
    1010:	11 96       	adiw	r26, 0x01	; 1
    1012:	01 90       	ld	r0, Z+
    1014:	0d 92       	st	X+, r0
    1016:	8a 95       	dec	r24
    1018:	e1 f7       	brne	.-8      	; 0x1012 <mf_rollDo+0x1e>
		
	if (button_state & (BD_UP | BR_UP))
    101a:	80 91 02 01 	lds	r24, 0x0102
    101e:	90 91 03 01 	lds	r25, 0x0103
    1022:	9c 01       	movw	r18, r24
    1024:	22 70       	andi	r18, 0x02	; 2
    1026:	34 70       	andi	r19, 0x04	; 4
    1028:	23 2b       	or	r18, r19
    102a:	31 f0       	breq	.+12     	; 0x1038 <mf_rollDo+0x44>
	{
		if (p.rollCycleSet < MAX_ROLL_CYCLES)
    102c:	80 91 91 01 	lds	r24, 0x0191
    1030:	83 36       	cpi	r24, 0x63	; 99
    1032:	68 f4       	brcc	.+26     	; 0x104e <mf_rollDo+0x5a>
			p.rollCycleSet += 1;
    1034:	8f 5f       	subi	r24, 0xFF	; 255
    1036:	09 c0       	rjmp	.+18     	; 0x104a <mf_rollDo+0x56>
	}
	else if (button_state & (BD_DOWN | BR_DOWN))
    1038:	84 70       	andi	r24, 0x04	; 4
    103a:	98 70       	andi	r25, 0x08	; 8
    103c:	89 2b       	or	r24, r25
    103e:	39 f0       	breq	.+14     	; 0x104e <mf_rollDo+0x5a>
	{
		if (p.rollCycleSet > MIN_ROLL_CYCLES)
    1040:	80 91 91 01 	lds	r24, 0x0191
    1044:	82 30       	cpi	r24, 0x02	; 2
    1046:	18 f0       	brcs	.+6      	; 0x104e <mf_rollDo+0x5a>
			p.rollCycleSet -= 1;
    1048:	81 50       	subi	r24, 0x01	; 1
    104a:	80 93 91 01 	sts	0x0191, r24
	}	
		
	u16toa_align_right(p.rollCycleSet,str + 4,0x80 | 2,' ');
    104e:	20 e2       	ldi	r18, 0x20	; 32
    1050:	42 e8       	ldi	r20, 0x82	; 130
    1052:	be 01       	movw	r22, r28
    1054:	6b 5f       	subi	r22, 0xFB	; 251
    1056:	7f 4f       	sbci	r23, 0xFF	; 255
    1058:	80 91 91 01 	lds	r24, 0x0191
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	40 d1       	rcall	.+640    	; 0x12e0 <u16toa_align_right>
	
	if ((!(rollState & ROLL_CYCLE)) || (userTimer.FA_GE))
    1060:	80 91 22 01 	lds	r24, 0x0122
    1064:	82 ff       	sbrs	r24, 2
    1066:	04 c0       	rjmp	.+8      	; 0x1070 <mf_rollDo+0x7c>
    1068:	80 91 1b 01 	lds	r24, 0x011B
    106c:	84 ff       	sbrs	r24, 4
    106e:	09 c0       	rjmp	.+18     	; 0x1082 <mf_rollDo+0x8e>
	{
		u16toa_align_right(activeRollCycle,str + 1,0x80 | 2,' ');
    1070:	20 e2       	ldi	r18, 0x20	; 32
    1072:	42 e8       	ldi	r20, 0x82	; 130
    1074:	be 01       	movw	r22, r28
    1076:	6e 5f       	subi	r22, 0xFE	; 254
    1078:	7f 4f       	sbci	r23, 0xFF	; 255
    107a:	80 91 21 01 	lds	r24, 0x0121
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	2f d1       	rcall	.+606    	; 0x12e0 <u16toa_align_right>
	}
	
	str[0] = 0;
    1082:	19 82       	std	Y+1, r1	; 0x01
	if (isTopPointValid())
    1084:	f2 d2       	rcall	.+1508   	; 0x166a <isTopPointValid>
    1086:	88 23       	and	r24, r24
    1088:	19 f0       	breq	.+6      	; 0x1090 <mf_rollDo+0x9c>
		str[0] |= SEGA;
    108a:	89 81       	ldd	r24, Y+1	; 0x01
    108c:	81 60       	ori	r24, 0x01	; 1
    108e:	89 83       	std	Y+1, r24	; 0x01
	if (isBottomPointValid())
    1090:	fc d2       	rcall	.+1528   	; 0x168a <isBottomPointValid>
    1092:	88 23       	and	r24, r24
    1094:	19 f0       	breq	.+6      	; 0x109c <mf_rollDo+0xa8>
		str[0] |= SEGD;
    1096:	89 81       	ldd	r24, Y+1	; 0x01
    1098:	88 60       	ori	r24, 0x08	; 8
    109a:	89 83       	std	Y+1, r24	; 0x01
	if (str[0] == 0)
    109c:	89 81       	ldd	r24, Y+1	; 0x01
    109e:	81 11       	cpse	r24, r1
    10a0:	02 c0       	rjmp	.+4      	; 0x10a6 <mf_rollDo+0xb2>
		str[0] = ' ';
    10a2:	80 e2       	ldi	r24, 0x20	; 32
    10a4:	89 83       	std	Y+1, r24	; 0x01
		
	printLedBuffer(0,str);
    10a6:	be 01       	movw	r22, r28
    10a8:	6f 5f       	subi	r22, 0xFF	; 255
    10aa:	7f 4f       	sbci	r23, 0xFF	; 255
    10ac:	80 e0       	ldi	r24, 0x00	; 0
    10ae:	3e dd       	rcall	.-1412   	; 0xb2c <printLedBuffer>
}
    10b0:	27 96       	adiw	r28, 0x07	; 7
    10b2:	0f b6       	in	r0, 0x3f	; 63
    10b4:	f8 94       	cli
    10b6:	de bf       	out	0x3e, r29	; 62
    10b8:	0f be       	out	0x3f, r0	; 63
    10ba:	cd bf       	out	0x3d, r28	; 61
    10bc:	df 91       	pop	r29
    10be:	cf 91       	pop	r28
    10c0:	08 95       	ret

000010c2 <mf_rollSelect>:
//---------------------------------------------//
//---------------------------------------------//

void mf_rollSelect(void)
{
	setExtraLeds(LED_ROLL);
    10c2:	82 e0       	ldi	r24, 0x02	; 2
    10c4:	79 dd       	rcall	.-1294   	; 0xbb8 <setExtraLeds>
	mf_leafSelectAct();		// setup and start timer
    10c6:	ce cd       	rjmp	.-1124   	; 0xc64 <mf_leafSelectAct>

000010c8 <mf_setTempDo>:
	clearExtraLeds(LED_TEMP);
	mf_leafSelectAct();		// setup and start timer
}

void mf_setTempDo(void)
{
    10c8:	cf 93       	push	r28
    10ca:	df 93       	push	r29
    10cc:	cd b7       	in	r28, 0x3d	; 61
    10ce:	de b7       	in	r29, 0x3e	; 62
    10d0:	27 97       	sbiw	r28, 0x07	; 7
    10d2:	0f b6       	in	r0, 0x3f	; 63
    10d4:	f8 94       	cli
    10d6:	de bf       	out	0x3e, r29	; 62
    10d8:	0f be       	out	0x3f, r0	; 63
    10da:	cd bf       	out	0x3d, r28	; 61
	char str[] = {' ',' ',' ',' ',0xB0,'C',0};
    10dc:	87 e0       	ldi	r24, 0x07	; 7
    10de:	e5 eb       	ldi	r30, 0xB5	; 181
    10e0:	f0 e0       	ldi	r31, 0x00	; 0
    10e2:	de 01       	movw	r26, r28
    10e4:	11 96       	adiw	r26, 0x01	; 1
    10e6:	01 90       	ld	r0, Z+
    10e8:	0d 92       	st	X+, r0
    10ea:	8a 95       	dec	r24
    10ec:	e1 f7       	brne	.-8      	; 0x10e6 <mf_setTempDo+0x1e>

	
	if (button_state & (BD_UP | BR_UP))
    10ee:	80 91 02 01 	lds	r24, 0x0102
    10f2:	90 91 03 01 	lds	r25, 0x0103
    10f6:	9c 01       	movw	r18, r24
    10f8:	22 70       	andi	r18, 0x02	; 2
    10fa:	34 70       	andi	r19, 0x04	; 4
    10fc:	23 2b       	or	r18, r19
    10fe:	31 f0       	breq	.+12     	; 0x110c <mf_setTempDo+0x44>
	{
		if (p.setup_temp_value < MAX_SET_TEMP)
    1100:	80 91 90 01 	lds	r24, 0x0190
    1104:	8a 3f       	cpi	r24, 0xFA	; 250
    1106:	68 f4       	brcc	.+26     	; 0x1122 <mf_setTempDo+0x5a>
			p.setup_temp_value += 5;
    1108:	8b 5f       	subi	r24, 0xFB	; 251
    110a:	09 c0       	rjmp	.+18     	; 0x111e <mf_setTempDo+0x56>
		restartMenuTimer();
	}
	else if (button_state & (BD_DOWN | BR_DOWN))
    110c:	84 70       	andi	r24, 0x04	; 4
    110e:	98 70       	andi	r25, 0x08	; 8
    1110:	89 2b       	or	r24, r25
    1112:	49 f0       	breq	.+18     	; 0x1126 <mf_setTempDo+0x5e>
	{
		if (p.setup_temp_value > MIN_SET_TEMP)
    1114:	80 91 90 01 	lds	r24, 0x0190
    1118:	8f 31       	cpi	r24, 0x1F	; 31
    111a:	18 f0       	brcs	.+6      	; 0x1122 <mf_setTempDo+0x5a>
			p.setup_temp_value -= 5;
    111c:	85 50       	subi	r24, 0x05	; 5
    111e:	80 93 90 01 	sts	0x0190, r24
//	 Restarts menu state timeout
//	Should be used in RUN function when control buttons are pressed.
//-----------------------------------------------------------------//
static void restartMenuTimer(void)
{
	menuTimer.Timer = 0;
    1122:	10 92 9e 00 	sts	0x009E, r1
			p.setup_temp_value -= 5;
		restartMenuTimer();
	}					
		
	// Output ADC result to LED
	u16toa_align_right(p.setup_temp_value,str,0x80 | 4,' ');
    1126:	20 e2       	ldi	r18, 0x20	; 32
    1128:	44 e8       	ldi	r20, 0x84	; 132
    112a:	be 01       	movw	r22, r28
    112c:	6f 5f       	subi	r22, 0xFF	; 255
    112e:	7f 4f       	sbci	r23, 0xFF	; 255
    1130:	80 91 90 01 	lds	r24, 0x0190
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	d4 d0       	rcall	.+424    	; 0x12e0 <u16toa_align_right>
	printLedBuffer(0,str);
    1138:	be 01       	movw	r22, r28
    113a:	6f 5f       	subi	r22, 0xFF	; 255
    113c:	7f 4f       	sbci	r23, 0xFF	; 255
    113e:	80 e0       	ldi	r24, 0x00	; 0
    1140:	f5 dc       	rcall	.-1558   	; 0xb2c <printLedBuffer>
	
	if (userTimer.FA_GE)
    1142:	80 91 1b 01 	lds	r24, 0x011B
    1146:	84 ff       	sbrs	r24, 4
    1148:	03 c0       	rjmp	.+6      	; 0x1150 <mf_setTempDo+0x88>
		setExtraLeds(LED_TEMP);
    114a:	81 e0       	ldi	r24, 0x01	; 1
    114c:	35 dd       	rcall	.-1430   	; 0xbb8 <setExtraLeds>
    114e:	02 c0       	rjmp	.+4      	; 0x1154 <mf_setTempDo+0x8c>
	else
		clearExtraLeds(LED_TEMP);
    1150:	81 e0       	ldi	r24, 0x01	; 1
    1152:	38 dd       	rcall	.-1424   	; 0xbc4 <clearExtraLeds>
}
    1154:	27 96       	adiw	r28, 0x07	; 7
    1156:	0f b6       	in	r0, 0x3f	; 63
    1158:	f8 94       	cli
    115a:	de bf       	out	0x3e, r29	; 62
    115c:	0f be       	out	0x3f, r0	; 63
    115e:	cd bf       	out	0x3d, r28	; 61
    1160:	df 91       	pop	r29
    1162:	cf 91       	pop	r28
    1164:	08 95       	ret

00001166 <mf_realTempSelect>:
//=================================================================//


void mf_realTempSelect(void)
{
	setExtraLeds(LED_TEMP);
    1166:	81 e0       	ldi	r24, 0x01	; 1
    1168:	27 cd       	rjmp	.-1458   	; 0xbb8 <setExtraLeds>

0000116a <getMenuFunctionRecord.constprop.0>:
//	Arguments:
//		menuItemID - ID of an item
//		menuRecord - pointer to function structure to fill
//	Output:
//-----------------------------------------------------------------//
static void getMenuFunctionRecord(uint8_t menuItemID, MenuFunctionRecord* menuRecord )
    116a:	1f 93       	push	r17
    116c:	cf 93       	push	r28
    116e:	df 93       	push	r29
    1170:	c0 e0       	ldi	r28, 0x00	; 0
    1172:	d0 e0       	ldi	r29, 0x00	; 0
{
	uint8_t i;
	for (i = 0; i < sizeof(menuFunctionSet)/sizeof(MenuFunctionRecord); i++  )
	{
		readMenuRecord(&menuFunctionSet[i], menuRecord);
    1174:	17 e0       	ldi	r17, 0x07	; 7
    1176:	1c 9f       	mul	r17, r28
    1178:	90 01       	movw	r18, r0
    117a:	1d 9f       	mul	r17, r29
    117c:	30 0d       	add	r19, r0
    117e:	11 24       	eor	r1, r1
    1180:	26 5a       	subi	r18, 0xA6	; 166
    1182:	3f 4f       	sbci	r19, 0xFF	; 255
//		fRecPtr		- address of the function record in the FLASH
//		resPtr		- address of the record to fill in the SRAM
//-----------------------------------------------------------------//
static inline void readMenuRecord(const MenuFunctionRecord* fRecPtr, MenuFunctionRecord* resPtr )
{
	resPtr->Item = pgm_read_byte(&fRecPtr->Item);
    1184:	f9 01       	movw	r30, r18
    1186:	94 91       	lpm	r25, Z
	resPtr->SelectFunction = (FuncPtr)pgm_read_word(&fRecPtr->SelectFunction);
    1188:	31 96       	adiw	r30, 0x01	; 1
    118a:	a5 91       	lpm	r26, Z+
    118c:	b4 91       	lpm	r27, Z
	resPtr->RunFunction = (FuncPtr)pgm_read_word(&fRecPtr->RunFunction);
    118e:	f9 01       	movw	r30, r18
    1190:	33 96       	adiw	r30, 0x03	; 3
    1192:	65 91       	lpm	r22, Z+
    1194:	74 91       	lpm	r23, Z
	resPtr->LeaveFunction = (FuncPtr)pgm_read_word(&fRecPtr->LeaveFunction);
    1196:	2b 5f       	subi	r18, 0xFB	; 251
    1198:	3f 4f       	sbci	r19, 0xFF	; 255
    119a:	f9 01       	movw	r30, r18
    119c:	45 91       	lpm	r20, Z+
    119e:	54 91       	lpm	r21, Z
{
	uint8_t i;
	for (i = 0; i < sizeof(menuFunctionSet)/sizeof(MenuFunctionRecord); i++  )
	{
		readMenuRecord(&menuFunctionSet[i], menuRecord);
		if (menuRecord->Item == menuItemID)
    11a0:	98 13       	cpse	r25, r24
    11a2:	03 c0       	rjmp	.+6      	; 0x11aa <getMenuFunctionRecord.constprop.0+0x40>
    11a4:	80 93 14 01 	sts	0x0114, r24
    11a8:	06 c0       	rjmp	.+12     	; 0x11b6 <getMenuFunctionRecord.constprop.0+0x4c>
    11aa:	21 96       	adiw	r28, 0x01	; 1
//	Output:
//-----------------------------------------------------------------//
static void getMenuFunctionRecord(uint8_t menuItemID, MenuFunctionRecord* menuRecord )
{
	uint8_t i;
	for (i = 0; i < sizeof(menuFunctionSet)/sizeof(MenuFunctionRecord); i++  )
    11ac:	ce 30       	cpi	r28, 0x0E	; 14
    11ae:	d1 05       	cpc	r29, r1
    11b0:	11 f7       	brne	.-60     	; 0x1176 <getMenuFunctionRecord.constprop.0+0xc>
    11b2:	90 93 14 01 	sts	0x0114, r25
    11b6:	a0 93 15 01 	sts	0x0115, r26
    11ba:	b0 93 16 01 	sts	0x0116, r27
    11be:	60 93 17 01 	sts	0x0117, r22
    11c2:	70 93 18 01 	sts	0x0118, r23
    11c6:	40 93 19 01 	sts	0x0119, r20
    11ca:	50 93 1a 01 	sts	0x011A, r21
	{
		readMenuRecord(&menuFunctionSet[i], menuRecord);
		if (menuRecord->Item == menuItemID)
			break;
	}
}
    11ce:	df 91       	pop	r29
    11d0:	cf 91       	pop	r28
    11d2:	1f 91       	pop	r17
    11d4:	08 95       	ret

000011d6 <InitMenu>:
//	Menu initialization
//	Call this function at start of your program before processMenu()
//-----------------------------------------------------------------//
void InitMenu(void)
{
	selectedMenuItemID = mi_REALTEMP;
    11d6:	81 e0       	ldi	r24, 0x01	; 1
    11d8:	80 93 13 01 	sts	0x0113, r24
	getMenuFunctionRecord(selectedMenuItemID, &selectedMenuFunctionRecord);
    11dc:	c6 df       	rcall	.-116    	; 0x116a <getMenuFunctionRecord.constprop.0>
	processItemFunction(selectedMenuFunctionRecord.SelectFunction);
    11de:	80 91 15 01 	lds	r24, 0x0115
    11e2:	90 91 16 01 	lds	r25, 0x0116
    11e6:	33 cd       	rjmp	.-1434   	; 0xc4e <processItemFunction>

000011e8 <processMenu>:
//	Main menu control, -  state function calls, jumps 
//	between menu states and indication
//	Call this function from main() with a fixed time interval.
//-----------------------------------------------------------------//
void processMenu(void)
{
    11e8:	ff 92       	push	r15
    11ea:	0f 93       	push	r16
    11ec:	1f 93       	push	r17
    11ee:	cf 93       	push	r28
    11f0:	df 93       	push	r29
	NextItem_t nextItem;
	uint16_t jumpCondition;
	
	processSoftTimer8b(&menuTimer);	
    11f2:	8d e9       	ldi	r24, 0x9D	; 157
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	78 d3       	rcall	.+1776   	; 0x18e8 <processSoftTimer8b>
	
	// Compose jump condition
	jumpCondition = button_state;		
    11f8:	40 91 02 01 	lds	r20, 0x0102
    11fc:	50 91 03 01 	lds	r21, 0x0103
	if (menuTimer.FTop)
    1200:	80 91 9d 00 	lds	r24, 0x009D
    1204:	85 fd       	sbrc	r24, 5
		jumpCondition |= TMR_EXP;
    1206:	50 68       	ori	r21, 0x80	; 128
	if (sys_timers.flags & AUTOPOFF_EXPIRED)
    1208:	80 91 a9 00 	lds	r24, 0x00A9
    120c:	84 fd       	sbrc	r24, 4
		jumpCondition |= GOTO_POFF;
    120e:	50 64       	ori	r21, 0x40	; 64
	
	// Get next menu item according to current state and jump conditions
	nextItem = getNextMenuItem(selectedMenuItemID, jumpCondition);
    1210:	80 91 13 01 	lds	r24, 0x0113
    1214:	60 e0       	ldi	r22, 0x00	; 0
    1216:	70 e0       	ldi	r23, 0x00	; 0
	MenuJumpRecord	jRecord;
	uint8_t i;
	
	for (i = 0; i < sizeof(menuJumpSet)/sizeof(MenuJumpRecord); i++  )
	{
		readJumpRecord(&menuJumpSet[i], &jRecord);		// read full jump record
    1218:	95 e0       	ldi	r25, 0x05	; 5
    121a:	96 9f       	mul	r25, r22
    121c:	90 01       	movw	r18, r0
    121e:	97 9f       	mul	r25, r23
    1220:	30 0d       	add	r19, r0
    1222:	11 24       	eor	r1, r1
    1224:	24 54       	subi	r18, 0x44	; 68
    1226:	3f 4f       	sbci	r19, 0xFF	; 255
//		jRecPtr		- address of the jump record in the FLASH
//		resPtr		- address of the record to fill in the SRAM
//-----------------------------------------------------------------//
static inline void readJumpRecord(const MenuJumpRecord* jRecPtr, MenuJumpRecord* resPtr )
{
	resPtr->Item = pgm_read_byte(&jRecPtr->Item);
    1228:	f9 01       	movw	r30, r18
    122a:	14 91       	lpm	r17, Z
	resPtr->JumpCondition = pgm_read_word(&jRecPtr->JumpCondition);
    122c:	31 96       	adiw	r30, 0x01	; 1
    122e:	a5 91       	lpm	r26, Z+
    1230:	b4 91       	lpm	r27, Z
	resPtr->NextItem= pgm_read_byte(&jRecPtr->NextItem);
    1232:	f9 01       	movw	r30, r18
    1234:	33 96       	adiw	r30, 0x03	; 3
    1236:	d4 91       	lpm	r29, Z
	resPtr->Flags= pgm_read_byte(&jRecPtr->Flags);
    1238:	f9 01       	movw	r30, r18
    123a:	34 96       	adiw	r30, 0x04	; 4
    123c:	24 91       	lpm	r18, Z
	uint8_t i;
	
	for (i = 0; i < sizeof(menuJumpSet)/sizeof(MenuJumpRecord); i++  )
	{
		readJumpRecord(&menuJumpSet[i], &jRecord);		// read full jump record
		if (jRecord.Item == selectedItemId)				// If ID match,
    123e:	18 13       	cpse	r17, r24
    1240:	0e c0       	rjmp	.+28     	; 0x125e <processMenu+0x76>
		{
			if ((jRecord.JumpCondition & jmpCond) != 0)		// if any of jump conditions match too,
    1242:	a4 23       	and	r26, r20
    1244:	b5 23       	and	r27, r21
    1246:	ab 2b       	or	r26, r27
    1248:	51 f0       	breq	.+20     	; 0x125e <processMenu+0x76>
			{
				nextItem.ItemID = jRecord.NextItem;			// switch to next menu item
				nextItem.ItemTimeout = jRecord.Flags & TIMEOUT_MASK;
    124a:	c2 2f       	mov	r28, r18
    124c:	cf 73       	andi	r28, 0x3F	; 63
				nextItem.ShiftRight = (jRecord.Flags & SHIFT_RIGHT) ? 1 : 0;
    124e:	26 fb       	bst	r18, 6
    1250:	00 27       	eor	r16, r16
    1252:	00 f9       	bld	r16, 0
				nextItem.ShiftLeft = (jRecord.Flags & SHIFT_LEFT) ? 1 : 0;
    1254:	f2 2e       	mov	r15, r18
    1256:	ff 1c       	adc	r15, r15
    1258:	ff 24       	eor	r15, r15
    125a:	ff 1c       	adc	r15, r15
    125c:	06 c0       	rjmp	.+12     	; 0x126a <processMenu+0x82>
    125e:	6f 5f       	subi	r22, 0xFF	; 255
    1260:	7f 4f       	sbci	r23, 0xFF	; 255
	NextItem_t nextItem;
	nextItem.ItemID = selectedItemId;
	MenuJumpRecord	jRecord;
	uint8_t i;
	
	for (i = 0; i < sizeof(menuJumpSet)/sizeof(MenuJumpRecord); i++  )
    1262:	60 32       	cpi	r22, 0x20	; 32
    1264:	71 05       	cpc	r23, r1
    1266:	c9 f6       	brne	.-78     	; 0x121a <processMenu+0x32>
		jumpCondition |= TMR_EXP;
	if (sys_timers.flags & AUTOPOFF_EXPIRED)
		jumpCondition |= GOTO_POFF;
	
	// Get next menu item according to current state and jump conditions
	nextItem = getNextMenuItem(selectedMenuItemID, jumpCondition);
    1268:	d8 2f       	mov	r29, r24
    126a:	10 e0       	ldi	r17, 0x00	; 0
    126c:	f0 fa       	bst	r15, 0
    126e:	10 f9       	bld	r17, 0
    1270:	00 fb       	bst	r16, 0
    1272:	11 f9       	bld	r17, 1
	
	// If next item differs from current
	if (nextItem.ItemID != selectedMenuItemID)
    1274:	d8 17       	cp	r29, r24
    1276:	09 f1       	breq	.+66     	; 0x12ba <processMenu+0xd2>
	{		
		// Call exit function for current item
		processItemFunction(selectedMenuFunctionRecord.LeaveFunction);
    1278:	80 91 19 01 	lds	r24, 0x0119
    127c:	90 91 1a 01 	lds	r25, 0x011A
    1280:	e6 dc       	rcall	.-1588   	; 0xc4e <processItemFunction>
		
		// If shifting is specified, start it before calling any 
		//	new menu item functions 
		if (nextItem.ShiftRight)
    1282:	11 ff       	sbrs	r17, 1
    1284:	02 c0       	rjmp	.+4      	; 0x128a <processMenu+0xa2>
			startShiftingWindowRight();
    1286:	21 dc       	rcall	.-1982   	; 0xaca <startShiftingWindowRight>
    1288:	02 c0       	rjmp	.+4      	; 0x128e <processMenu+0xa6>
		else if (nextItem.ShiftLeft)
    128a:	10 fd       	sbrc	r17, 0
			startShiftingWindowLeft();
    128c:	10 dc       	rcall	.-2016   	; 0xaae <startShiftingWindowLeft>
		
		// Select new item
		selectedMenuItemID = nextItem.ItemID;
    128e:	d0 93 13 01 	sts	0x0113, r29
		
		// Load from FLASH and save function pointers
		getMenuFunctionRecord(selectedMenuItemID, &selectedMenuFunctionRecord);
    1292:	8d 2f       	mov	r24, r29
    1294:	6a df       	rcall	.-300    	; 0x116a <getMenuFunctionRecord.constprop.0>
		// Call select function for next item
		processItemFunction(selectedMenuFunctionRecord.SelectFunction);
    1296:	80 91 15 01 	lds	r24, 0x0115
    129a:	90 91 16 01 	lds	r25, 0x0116
    129e:	d7 dc       	rcall	.-1618   	; 0xc4e <processItemFunction>
		// Start timer if timeout is enabled
		if (nextItem.ItemTimeout != 0)
    12a0:	cc 23       	and	r28, r28
    12a2:	c1 f0       	breq	.+48     	; 0x12d4 <processMenu+0xec>
		{
			menuTimer.Top = nextItem.ItemTimeout * MENU_TIMEOUT_MULT;
    12a4:	cc 0f       	add	r28, r28
    12a6:	c0 93 9f 00 	sts	0x009F, r28
			menuTimer.Timer = 0;
    12aa:	10 92 9e 00 	sts	0x009E, r1
			menuTimer.Enabled = 1;	
    12ae:	80 91 9d 00 	lds	r24, 0x009D
    12b2:	81 60       	ori	r24, 0x01	; 1
    12b4:	80 93 9d 00 	sts	0x009D, r24
    12b8:	0d c0       	rjmp	.+26     	; 0x12d4 <processMenu+0xec>
		}
		
	}
	else
	{
		processSoftTimer8b(&userTimer);
    12ba:	8b e1       	ldi	r24, 0x1B	; 27
    12bc:	91 e0       	ldi	r25, 0x01	; 1
    12be:	14 d3       	rcall	.+1576   	; 0x18e8 <processSoftTimer8b>
		// Stay at previous item
		processItemFunction(selectedMenuFunctionRecord.RunFunction);
    12c0:	80 91 17 01 	lds	r24, 0x0117
    12c4:	90 91 18 01 	lds	r25, 0x0118
	}	
}
    12c8:	df 91       	pop	r29
    12ca:	cf 91       	pop	r28
    12cc:	1f 91       	pop	r17
    12ce:	0f 91       	pop	r16
    12d0:	ff 90       	pop	r15
	}
	else
	{
		processSoftTimer8b(&userTimer);
		// Stay at previous item
		processItemFunction(selectedMenuFunctionRecord.RunFunction);
    12d2:	bd cc       	rjmp	.-1670   	; 0xc4e <processItemFunction>
	}	
}
    12d4:	df 91       	pop	r29
    12d6:	cf 91       	pop	r28
    12d8:	1f 91       	pop	r17
    12da:	0f 91       	pop	r16
    12dc:	ff 90       	pop	r15
    12de:	08 95       	ret

000012e0 <u16toa_align_right>:
// Converts uint16_t value into decimal string with right alignment
// len = number of digits output (without terminating '\0')
// len[7] = 1 -> no terminating '\0' at buffer[len]
// fill_char -> char used for string padding
void u16toa_align_right(uint16_t val, char *buffer, uint8_t len,char fill_char)
{
    12e0:	cf 93       	push	r28
    12e2:	df 93       	push	r29
	if (len & 0x80)
    12e4:	47 ff       	sbrs	r20, 7
    12e6:	05 c0       	rjmp	.+10     	; 0x12f2 <u16toa_align_right+0x12>
	{
		len = len & 0x7F;
    12e8:	4f 77       	andi	r20, 0x7F	; 127
		buffer += len;	
    12ea:	fb 01       	movw	r30, r22
    12ec:	e4 0f       	add	r30, r20
    12ee:	f1 1d       	adc	r31, r1
    12f0:	04 c0       	rjmp	.+8      	; 0x12fa <u16toa_align_right+0x1a>
	}
	else
	{
		buffer += len;	
    12f2:	fb 01       	movw	r30, r22
    12f4:	e4 0f       	add	r30, r20
    12f6:	f1 1d       	adc	r31, r1
		*buffer = 0;
    12f8:	10 82       	st	Z, r1
	}
	
	do
	{
		*--buffer = val % 10 + '0';
    12fa:	ca e0       	ldi	r28, 0x0A	; 10
    12fc:	d0 e0       	ldi	r29, 0x00	; 0
    12fe:	be 01       	movw	r22, r28
    1300:	18 d4       	rcall	.+2096   	; 0x1b32 <__udivmodhi4>
    1302:	80 5d       	subi	r24, 0xD0	; 208
    1304:	82 93       	st	-Z, r24
		val /= 10;
    1306:	cb 01       	movw	r24, r22
		len--;
    1308:	41 50       	subi	r20, 0x01	; 1
	}
	while ((val != 0) && len);
    130a:	00 97       	sbiw	r24, 0x00	; 0
    130c:	21 f0       	breq	.+8      	; 0x1316 <u16toa_align_right+0x36>
    130e:	41 11       	cpse	r20, r1
    1310:	f6 cf       	rjmp	.-20     	; 0x12fe <u16toa_align_right+0x1e>
    1312:	01 c0       	rjmp	.+2      	; 0x1316 <u16toa_align_right+0x36>
	
	// Padding
	while(len--)
		*--buffer = fill_char;
    1314:	22 93       	st	-Z, r18
		len--;
	}
	while ((val != 0) && len);
	
	// Padding
	while(len--)
    1316:	41 50       	subi	r20, 0x01	; 1
    1318:	e8 f7       	brcc	.-6      	; 0x1314 <u16toa_align_right+0x34>
		*--buffer = fill_char;
}
    131a:	df 91       	pop	r29
    131c:	cf 91       	pop	r28
    131e:	08 95       	ret

00001320 <i32toa_align_right>:



void i32toa_align_right(int32_t val, char *buffer, uint8_t len)
{
    1320:	cf 92       	push	r12
    1322:	df 92       	push	r13
    1324:	ef 92       	push	r14
    1326:	ff 92       	push	r15
    1328:	0f 93       	push	r16
    132a:	1f 93       	push	r17
    132c:	cf 93       	push	r28
    132e:	df 93       	push	r29
    1330:	12 2f       	mov	r17, r18
	uint8_t is_negative = (val < 0) ? 1 : 0;
    1332:	6b 01       	movw	r12, r22
    1334:	7c 01       	movw	r14, r24
    1336:	cc 24       	eor	r12, r12
    1338:	f7 fc       	sbrc	r15, 7
    133a:	c3 94       	inc	r12
    133c:	dd 24       	eor	r13, r13
    133e:	ee 24       	eor	r14, r14
    1340:	ff 24       	eor	r15, r15
    1342:	0c 2d       	mov	r16, r12
	if (is_negative)
    1344:	cc 20       	and	r12, r12
    1346:	39 f0       	breq	.+14     	; 0x1356 <i32toa_align_right+0x36>
		val = -val;
    1348:	90 95       	com	r25
    134a:	80 95       	com	r24
    134c:	70 95       	com	r23
    134e:	61 95       	neg	r22
    1350:	7f 4f       	sbci	r23, 0xFF	; 255
    1352:	8f 4f       	sbci	r24, 0xFF	; 255
    1354:	9f 4f       	sbci	r25, 0xFF	; 255
		
	buffer += len;	
    1356:	ea 01       	movw	r28, r20
    1358:	c1 0f       	add	r28, r17
    135a:	d1 1d       	adc	r29, r1
	*buffer = 0;
    135c:	18 82       	st	Y, r1
	
	do
	{
		*--buffer = val % 10 + '0';
    135e:	2a e0       	ldi	r18, 0x0A	; 10
    1360:	c2 2e       	mov	r12, r18
    1362:	d1 2c       	mov	r13, r1
    1364:	e1 2c       	mov	r14, r1
    1366:	f1 2c       	mov	r15, r1
    1368:	a7 01       	movw	r20, r14
    136a:	96 01       	movw	r18, r12
    136c:	2b d4       	rcall	.+2134   	; 0x1bc4 <__divmodsi4>
    136e:	60 5d       	subi	r22, 0xD0	; 208
    1370:	6a 93       	st	-Y, r22
		val /= 10;
    1372:	b9 01       	movw	r22, r18
    1374:	ca 01       	movw	r24, r20
		len--;
    1376:	11 50       	subi	r17, 0x01	; 1
	}
	while ((val != 0) && len);
    1378:	61 15       	cp	r22, r1
    137a:	71 05       	cpc	r23, r1
    137c:	81 05       	cpc	r24, r1
    137e:	91 05       	cpc	r25, r1
    1380:	19 f0       	breq	.+6      	; 0x1388 <i32toa_align_right+0x68>
    1382:	11 11       	cpse	r17, r1
    1384:	f1 cf       	rjmp	.-30     	; 0x1368 <i32toa_align_right+0x48>
    1386:	08 c0       	rjmp	.+16     	; 0x1398 <i32toa_align_right+0x78>
	
	if ( (len) && (is_negative) )
    1388:	11 23       	and	r17, r17
    138a:	31 f0       	breq	.+12     	; 0x1398 <i32toa_align_right+0x78>
    138c:	00 23       	and	r16, r16
    138e:	21 f0       	breq	.+8      	; 0x1398 <i32toa_align_right+0x78>
	{
		*--buffer = '-';
    1390:	21 97       	sbiw	r28, 0x01	; 1
    1392:	8d e2       	ldi	r24, 0x2D	; 45
    1394:	88 83       	st	Y, r24
		len--;	
    1396:	11 50       	subi	r17, 0x01	; 1
	}	
	
	// Padding
	while(len--)
		*--buffer = ' ';
    1398:	80 e2       	ldi	r24, 0x20	; 32
    139a:	01 c0       	rjmp	.+2      	; 0x139e <i32toa_align_right+0x7e>
    139c:	8a 93       	st	-Y, r24
		*--buffer = '-';
		len--;	
	}	
	
	// Padding
	while(len--)
    139e:	11 50       	subi	r17, 0x01	; 1
    13a0:	e8 f7       	brcc	.-6      	; 0x139c <i32toa_align_right+0x7c>
		*--buffer = ' ';
	
}
    13a2:	df 91       	pop	r29
    13a4:	cf 91       	pop	r28
    13a6:	1f 91       	pop	r17
    13a8:	0f 91       	pop	r16
    13aa:	ff 90       	pop	r15
    13ac:	ef 90       	pop	r14
    13ae:	df 90       	pop	r13
    13b0:	cf 90       	pop	r12
    13b2:	08 95       	ret

000013b4 <logI32p>:
	u16toa_align_right(val,str,6,' ');
	USART_sendstr(str);
}

static void logI32p(int32_t val)
{
    13b4:	cf 93       	push	r28
    13b6:	df 93       	push	r29
    13b8:	cd b7       	in	r28, 0x3d	; 61
    13ba:	de b7       	in	r29, 0x3e	; 62
    13bc:	2c 97       	sbiw	r28, 0x0c	; 12
    13be:	0f b6       	in	r0, 0x3f	; 63
    13c0:	f8 94       	cli
    13c2:	de bf       	out	0x3e, r29	; 62
    13c4:	0f be       	out	0x3f, r0	; 63
    13c6:	cd bf       	out	0x3d, r28	; 61
	char str[12];
	i32toa_align_right(val,str,12);
    13c8:	2c e0       	ldi	r18, 0x0C	; 12
    13ca:	ae 01       	movw	r20, r28
    13cc:	4f 5f       	subi	r20, 0xFF	; 255
    13ce:	5f 4f       	sbci	r21, 0xFF	; 255
    13d0:	a7 df       	rcall	.-178    	; 0x1320 <i32toa_align_right>
	USART_sendstr(str);
    13d2:	ce 01       	movw	r24, r28
    13d4:	01 96       	adiw	r24, 0x01	; 1
    13d6:	8f d3       	rcall	.+1822   	; 0x1af6 <USART_sendstr>
}
    13d8:	2c 96       	adiw	r28, 0x0c	; 12
    13da:	0f b6       	in	r0, 0x3f	; 63
    13dc:	f8 94       	cli
    13de:	de bf       	out	0x3e, r29	; 62
    13e0:	0f be       	out	0x3f, r0	; 63
    13e2:	cd bf       	out	0x3d, r28	; 61
    13e4:	df 91       	pop	r29
    13e6:	cf 91       	pop	r28
    13e8:	08 95       	ret

000013ea <logU16p>:
    }
}


static void logU16p(uint16_t val)
{
    13ea:	cf 93       	push	r28
    13ec:	df 93       	push	r29
    13ee:	00 d0       	rcall	.+0      	; 0x13f0 <logU16p+0x6>
    13f0:	00 d0       	rcall	.+0      	; 0x13f2 <logU16p+0x8>
    13f2:	00 d0       	rcall	.+0      	; 0x13f4 <logU16p+0xa>
    13f4:	cd b7       	in	r28, 0x3d	; 61
    13f6:	de b7       	in	r29, 0x3e	; 62
	char str[6];
	u16toa_align_right(val,str,6,' ');
    13f8:	20 e2       	ldi	r18, 0x20	; 32
    13fa:	46 e0       	ldi	r20, 0x06	; 6
    13fc:	be 01       	movw	r22, r28
    13fe:	6f 5f       	subi	r22, 0xFF	; 255
    1400:	7f 4f       	sbci	r23, 0xFF	; 255
    1402:	6e df       	rcall	.-292    	; 0x12e0 <u16toa_align_right>
	USART_sendstr(str);
    1404:	ce 01       	movw	r24, r28
    1406:	01 96       	adiw	r24, 0x01	; 1
    1408:	76 d3       	rcall	.+1772   	; 0x1af6 <USART_sendstr>
}
    140a:	26 96       	adiw	r28, 0x06	; 6
    140c:	0f b6       	in	r0, 0x3f	; 63
    140e:	f8 94       	cli
    1410:	de bf       	out	0x3e, r29	; 62
    1412:	0f be       	out	0x3f, r0	; 63
    1414:	cd bf       	out	0x3d, r28	; 61
    1416:	df 91       	pop	r29
    1418:	cf 91       	pop	r28
    141a:	08 95       	ret

0000141c <init_system_io>:
//extern void powTest(void);

void init_system_io()
{
	// Setup Port D
	PORTD = 0;//(1<<PD_SYNCA | 1<<PD_SYNCB);
    141c:	12 ba       	out	0x12, r1	; 18
	DDRD = (1<<PD_TXD | 1<<PD_M1 | 1<<PD_M2 | 1<<PD_HEATER | 1<<PD_HEAT_INDIC );
    141e:	8e e3       	ldi	r24, 0x3E	; 62
    1420:	81 bb       	out	0x11, r24	; 17
	
	// Setup Port B
	PORTB = 0;
    1422:	18 ba       	out	0x18, r1	; 24
	DDRB = (1<<PB_BEEPER | 1<<PB_LED_DOUT | 1<<PB_LED_CLK | 1<<PB_SEGF | 1<<PB_SEGG | 1<<PB_SEGH);
    1424:	8f e3       	ldi	r24, 0x3F	; 63
    1426:	87 bb       	out	0x17, r24	; 23
	
	PORTC = 0;
    1428:	15 ba       	out	0x15, r1	; 21
	DDRC = (1<<PC_SEGA | 1<<PC_SEGB | 1<<PC_SEGC | 1<<PC_SEGD | 1<<PC_SEGE);	
    142a:	8f e1       	ldi	r24, 0x1F	; 31
    142c:	84 bb       	out	0x14, r24	; 20

	// Setup timer0
	// 1/1024 prescaler, T=64us @16MHz
	TCCR0 = (1<<CS02 | 0<<CS01 | 1<<CS00);
    142e:	85 e0       	ldi	r24, 0x05	; 5
    1430:	83 bf       	out	0x33, r24	; 51
	TCNT0 = 0;
    1432:	12 be       	out	0x32, r1	; 50
	// Clear interrupt flag
	TIFR |= (1<<TOV0);
    1434:	88 b7       	in	r24, 0x38	; 56
    1436:	81 60       	ori	r24, 0x01	; 1
    1438:	88 bf       	out	0x38, r24	; 56
	// Enable interrupts from timer 0
	TIMSK |= (1<<TOIE0);
    143a:	89 b7       	in	r24, 0x39	; 57
    143c:	81 60       	ori	r24, 0x01	; 1
    143e:	89 bf       	out	0x39, r24	; 57
	
	// Setup timer2 as 1ms system frequency generator
	// 1/64 prescaler, CTC mode, OC2 disconnected
	TCCR2 = (1<<CS22 | 1<<WGM21);
    1440:	8c e0       	ldi	r24, 0x0C	; 12
    1442:	85 bd       	out	0x25, r24	; 37
	OCR2 = 249;						// 1ms @ 16MHz
    1444:	89 ef       	ldi	r24, 0xF9	; 249
    1446:	83 bd       	out	0x23, r24	; 35
	TIMSK |= (1<<OCIE2);
    1448:	89 b7       	in	r24, 0x39	; 57
    144a:	80 68       	ori	r24, 0x80	; 128
    144c:	89 bf       	out	0x39, r24	; 57
	
	// Setup timer1 as beeper frequency generator
	// CTC mode, 1/64 prescaler
	TCCR1A = 0;
    144e:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = (1<<WGM12 | 1<<CS11 | 1<<CS10);
    1450:	8b e0       	ldi	r24, 0x0B	; 11
    1452:	8e bd       	out	0x2e, r24	; 46
	// 1kHz beeper frequency default
	OCR1A = 127;
    1454:	8f e7       	ldi	r24, 0x7F	; 127
    1456:	90 e0       	ldi	r25, 0x00	; 0
    1458:	9b bd       	out	0x2b, r25	; 43
    145a:	8a bd       	out	0x2a, r24	; 42

	// Setup AC sync comparator
	// Interrupt on output toggle
	ACSR = (1<<ACIE | 0<<ACIS1 | 0<<ACIS0);
    145c:	88 e0       	ldi	r24, 0x08	; 8
    145e:	88 b9       	out	0x08, r24	; 8
	
	// Setup ADC
	// Internal Vref + cap, input ADC5, 
	ADMUX = (1<<REFS1 | 1<<REFS0 | 0<<MUX3 | 1<<MUX2 | 0<<MUX1 | 1<<MUX0 );
    1460:	85 ec       	ldi	r24, 0xC5	; 197
    1462:	87 b9       	out	0x07, r24	; 7
	// Prescaler = 128
	ADCSRA = (1<<ADEN |/* 1<<ADFR |*/  1<<ADIE | 1<<ADPS2 | 1<<ADPS1 | 1<<ADPS0);
    1464:	8f e8       	ldi	r24, 0x8F	; 143
    1466:	86 b9       	out	0x06, r24	; 6
	
	// Setup USART
	// Double speed
	UCSRA = (1<<U2X);
    1468:	82 e0       	ldi	r24, 0x02	; 2
    146a:	8b b9       	out	0x0b, r24	; 11
	UCSRB = (1<<RXEN | 1<<TXEN | 0<<UCSZ2);
    146c:	88 e1       	ldi	r24, 0x18	; 24
    146e:	8a b9       	out	0x0a, r24	; 10
	// No parity, 1 stop bit, 8 bit
	UCSRC = (1<<URSEL | 0<<UPM1 | 0<<UPM0 | 0<<USBS | 1<<UCSZ1 | 1<<UCSZ0);
    1470:	86 e8       	ldi	r24, 0x86	; 134
    1472:	80 bd       	out	0x20, r24	; 32
	// 57600 @16MHz, 2x
	UBRRH=0x00;
    1474:	10 bc       	out	0x20, r1	; 32
	UBRRL=0x22;
    1476:	82 e2       	ldi	r24, 0x22	; 34
    1478:	89 b9       	out	0x09, r24	; 9
    147a:	08 95       	ret

0000147c <main>:
}



int main(void)
{
    147c:	cf 93       	push	r28
    147e:	df 93       	push	r29
    1480:	1f 92       	push	r1
    1482:	cd b7       	in	r28, 0x3d	; 61
    1484:	de b7       	in	r29, 0x3e	; 62
	char str[12];
	volatile uint8_t temp8u = 0x00;
    1486:	19 82       	std	Y+1, r1	; 0x01
	//temp16u = 1200;
	//logI32p(temp16u);
	//i32toa_align_right(temp16u,str,12);
	
	// Initialize MCU IO
	init_system_io();
    1488:	c9 df       	rcall	.-110    	; 0x141c <init_system_io>
	// Restore params from EEPROM
	restoreGlobalParams();
    148a:	43 da       	rcall	.-2938   	; 0x912 <restoreGlobalParams>
	// Calibrate ADC coefficients using restored params
	calculateCoeffs();
    148c:	c5 d6       	rcall	.+3466   	; 0x2218 <__data_load_end+0x4ec>
	// Initialize LED indicator
	initLedIndicator();
    148e:	2b db       	rcall	.-2474   	; 0xae6 <initLedIndicator>
	// Clear comparator interrupt flag to prevent false triggering
	ACSR |= (1<<ACI);
    1490:	44 9a       	sbi	0x08, 4	; 8
	sei();
    1492:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1494:	2f ef       	ldi	r18, 0xFF	; 255
    1496:	80 e7       	ldi	r24, 0x70	; 112
    1498:	92 e0       	ldi	r25, 0x02	; 2
    149a:	21 50       	subi	r18, 0x01	; 1
    149c:	80 40       	sbci	r24, 0x00	; 0
    149e:	90 40       	sbci	r25, 0x00	; 0
    14a0:	e1 f7       	brne	.-8      	; 0x149a <main+0x1e>
    14a2:	00 c0       	rjmp	.+0      	; 0x14a4 <main+0x28>
    14a4:	00 00       	nop
	// Safety delay for power part
	_delay_ms(50);
	// Check AC line
	if(p_state == 0x0F) 	
    14a6:	80 91 a1 00 	lds	r24, 0x00A1
    14aa:	8f 30       	cpi	r24, 0x0F	; 15
    14ac:	69 f4       	brne	.+26     	; 0x14c8 <main+0x4c>
	{
		// Power control state machine has not changed - sync has not been detected
		printLedBuffer(0,"AC ERR");
    14ae:	66 ee       	ldi	r22, 0xE6	; 230
    14b0:	70 e0       	ldi	r23, 0x00	; 0
    14b2:	80 e0       	ldi	r24, 0x00	; 0
    14b4:	3b db       	rcall	.-2442   	; 0xb2c <printLedBuffer>
    14b6:	2f ef       	ldi	r18, 0xFF	; 255
    14b8:	83 ed       	ldi	r24, 0xD3	; 211
    14ba:	90 e3       	ldi	r25, 0x30	; 48
    14bc:	21 50       	subi	r18, 0x01	; 1
    14be:	80 40       	sbci	r24, 0x00	; 0
    14c0:	90 40       	sbci	r25, 0x00	; 0
    14c2:	e1 f7       	brne	.-8      	; 0x14bc <main+0x40>
    14c4:	00 c0       	rjmp	.+0      	; 0x14c6 <main+0x4a>
    14c6:	00 00       	nop
		_delay_ms(1000);
	}
	// Initialize menu
	InitMenu();
    14c8:	86 de       	rcall	.-756    	; 0x11d6 <InitMenu>
	// Beep
	SetBeeperFreq(1000);
    14ca:	88 ee       	ldi	r24, 0xE8	; 232
    14cc:	93 e0       	ldi	r25, 0x03	; 3
    14ce:	a2 d2       	rcall	.+1348   	; 0x1a14 <SetBeeperFreq>
	StartBeep(200);
    14d0:	88 ec       	ldi	r24, 0xC8	; 200
    14d2:	90 e0       	ldi	r25, 0x00	; 0
    14d4:	bf d2       	rcall	.+1406   	; 0x1a54 <StartBeep>
	// ---- TODO: check out when PID will be finished ----//
	// When we get here, few ADC counts have been sampled.
	update_normalized_adc();
    14d6:	d7 d7       	rcall	.+4014   	; 0x2486 <__data_load_end+0x75a>
	// Call PID controler function in order to initialize it's internal structures
	heaterInit();
    14d8:	c7 d9       	rcall	.-3186   	; 0x868 <heaterInit>
	//----------------------------------------------------//
	// Start rotating
	setMotorDirection(ROLL_FWD);
    14da:	81 e0       	ldi	r24, 0x01	; 1
    14dc:	89 d0       	rcall	.+274    	; 0x15f0 <setMotorDirection>
	// Clear timer
	menuUpdateTimer.FOvfl = 0;
    14de:	80 91 aa 00 	lds	r24, 0x00AA
    14e2:	8f 7b       	andi	r24, 0xBF	; 191
    14e4:	80 93 aa 00 	sts	0x00AA, r24

    while(1)
    {
		
		if (menuUpdateTimer.FOvfl)
    14e8:	80 91 aa 00 	lds	r24, 0x00AA
    14ec:	86 ff       	sbrs	r24, 6
    14ee:	fc cf       	rjmp	.-8      	; 0x14e8 <main+0x6c>
		{
			//--------- BUTTONS ----------//
			
			// Get new button state
			process_buttons();
    14f0:	02 d8       	rcall	.-4092   	; 0x4f6 <process_buttons>
			
			// Give sound feedback
			if (button_state & BL_MENU)
    14f2:	80 91 02 01 	lds	r24, 0x0102
    14f6:	90 91 03 01 	lds	r25, 0x0103
    14fa:	91 ff       	sbrs	r25, 1
    14fc:	03 c0       	rjmp	.+6      	; 0x1504 <main+0x88>
			{
				SetBeeperFreq(800);
    14fe:	80 e2       	ldi	r24, 0x20	; 32
    1500:	93 e0       	ldi	r25, 0x03	; 3
    1502:	06 c0       	rjmp	.+12     	; 0x1510 <main+0x94>
				StartBeep(40);
			}
			else if (button_action_down & (BD_MENU | BD_UP | BD_DOWN | BD_HEATCTRL))
    1504:	80 91 01 01 	lds	r24, 0x0101
    1508:	87 74       	andi	r24, 0x47	; 71
    150a:	31 f0       	breq	.+12     	; 0x1518 <main+0x9c>
			{
				SetBeeperFreq(1000);
    150c:	88 ee       	ldi	r24, 0xE8	; 232
    150e:	93 e0       	ldi	r25, 0x03	; 3
    1510:	81 d2       	rcall	.+1282   	; 0x1a14 <SetBeeperFreq>
				StartBeep(40);
    1512:	88 e2       	ldi	r24, 0x28	; 40
    1514:	90 e0       	ldi	r25, 0x00	; 0
    1516:	9e d2       	rcall	.+1340   	; 0x1a54 <StartBeep>
			}	
			// Direction control buttons sounds get special processing at processRollControl()
			
			// If any button is pressed, restart power off interval
			if (button_action_down)
    1518:	80 91 01 01 	lds	r24, 0x0101
    151c:	81 11       	cpse	r24, r1
				resetAutoPowerOffCounter();
    151e:	77 d2       	rcall	.+1262   	; 0x1a0e <resetAutoPowerOffCounter>
			
			//---------- TIMERS ----------//
			
			// Process timers and time counters - it is important to call
			// this function before menu and power controls processing
			processSystemTimers();
    1520:	0f d2       	rcall	.+1054   	; 0x1940 <processSystemTimers>

			// Warn user about near auto powering off
			if (sys_timers.flags & AUTOPOFF_SOON)
    1522:	80 91 a9 00 	lds	r24, 0x00A9
    1526:	83 ff       	sbrs	r24, 3
    1528:	06 c0       	rjmp	.+12     	; 0x1536 <main+0xba>
			{
				SetBeeperFreq(1200);
    152a:	80 eb       	ldi	r24, 0xB0	; 176
    152c:	94 e0       	ldi	r25, 0x04	; 4
    152e:	72 d2       	rcall	.+1252   	; 0x1a14 <SetBeeperFreq>
				StartBeep(200);
    1530:	88 ec       	ldi	r24, 0xC8	; 200
    1532:	90 e0       	ldi	r25, 0x00	; 0
    1534:	8f d2       	rcall	.+1310   	; 0x1a54 <StartBeep>
			}		
			
			//----------- ADC ------------//
			
			// Get new temperature measurement
			update_normalized_adc();			
    1536:	a7 d7       	rcall	.+3918   	; 0x2486 <__data_load_end+0x75a>
		
			// Update indicated Celsius degree
			if (sys_timers.flags & EXPIRED_CELSIUS)
    1538:	80 91 a9 00 	lds	r24, 0x00A9
    153c:	80 fd       	sbrc	r24, 0
				update_Celsius();		
    153e:	b9 d6       	rcall	.+3442   	; 0x22b2 <__data_load_end+0x586>
			
			//----------- MENU -----------//		
				
			// Process user menu states, settings and indication
			processMenu();
    1540:	53 de       	rcall	.-858    	; 0x11e8 <processMenu>
			
			//--------- CONTROLS ---------//		
			
			// Process cyclic rolling, direction control
			processRollControl();	
    1542:	1e d8       	rcall	.-4036   	; 0x580 <processRollControl>
			
			// Process heater regulation
			processHeaterControl();
    1544:	27 d9       	rcall	.-3506   	; 0x794 <processHeaterControl>
		
			// Process heater events and warnings
			processHeaterAlerts();
    1546:	97 d9       	rcall	.-3282   	; 0x876 <processHeaterAlerts>
			
			
			
			//------- LOG to UART --------//	
			if (sys_timers.flags & EXPIRED_LOG)
    1548:	80 91 a9 00 	lds	r24, 0x00A9
    154c:	85 ff       	sbrs	r24, 5
    154e:	c7 cf       	rjmp	.-114    	; 0x14de <main+0x62>
			{
				
				logU16p(adc_celsius);					// Actual temp Celsius
    1550:	80 91 5f 01 	lds	r24, 0x015F
    1554:	90 91 60 01 	lds	r25, 0x0160
    1558:	48 df       	rcall	.-368    	; 0x13ea <logU16p>
				logU16p(adc_oversampled);				// Actual temp (ADC), oversampled
    155a:	80 91 33 01 	lds	r24, 0x0133
    155e:	90 91 34 01 	lds	r25, 0x0134
    1562:	43 df       	rcall	.-378    	; 0x13ea <logU16p>
				logU16p(adc_filtered);					// Actual temp (ADC), oversampled, filtered
    1564:	80 91 31 01 	lds	r24, 0x0131
    1568:	90 91 32 01 	lds	r25, 0x0132
    156c:	3e df       	rcall	.-388    	; 0x13ea <logU16p>
				USART_sendstr("    ");
    156e:	8d ee       	ldi	r24, 0xED	; 237
    1570:	90 e0       	ldi	r25, 0x00	; 0
    1572:	c1 d2       	rcall	.+1410   	; 0x1af6 <USART_sendstr>
				
				logU16p(dbg_SetPointPID);				// Temp setting, as input to PID
    1574:	80 91 a6 01 	lds	r24, 0x01A6
    1578:	90 91 a7 01 	lds	r25, 0x01A7
    157c:	36 df       	rcall	.-404    	; 0x13ea <logU16p>
				logU16p(dbg_RealTempPID);				// Real temp, sampled for PID input
    157e:	80 91 98 01 	lds	r24, 0x0198
    1582:	90 91 99 01 	lds	r25, 0x0199
    1586:	31 df       	rcall	.-414    	; 0x13ea <logU16p>
				
				logI32p(dbg_PID_p_term);				// p term
    1588:	60 91 96 01 	lds	r22, 0x0196
    158c:	70 91 97 01 	lds	r23, 0x0197
    1590:	88 27       	eor	r24, r24
    1592:	77 fd       	sbrc	r23, 7
    1594:	80 95       	com	r24
    1596:	98 2f       	mov	r25, r24
    1598:	0d df       	rcall	.-486    	; 0x13b4 <logI32p>
				logI32p(dbg_PID_d_term);				// d term
    159a:	60 91 a4 01 	lds	r22, 0x01A4
    159e:	70 91 a5 01 	lds	r23, 0x01A5
    15a2:	88 27       	eor	r24, r24
    15a4:	77 fd       	sbrc	r23, 7
    15a6:	80 95       	com	r24
    15a8:	98 2f       	mov	r25, r24
    15aa:	04 df       	rcall	.-504    	; 0x13b4 <logI32p>
				logI32p(dbg_PID_i_term);				// i term
    15ac:	60 91 9a 01 	lds	r22, 0x019A
    15b0:	70 91 9b 01 	lds	r23, 0x019B
    15b4:	88 27       	eor	r24, r24
    15b6:	77 fd       	sbrc	r23, 7
    15b8:	80 95       	com	r24
    15ba:	98 2f       	mov	r25, r24
    15bc:	fb de       	rcall	.-522    	; 0x13b4 <logI32p>
				USART_sendstr("    ");
    15be:	8d ee       	ldi	r24, 0xED	; 237
    15c0:	90 e0       	ldi	r25, 0x00	; 0
    15c2:	99 d2       	rcall	.+1330   	; 0x1af6 <USART_sendstr>
				
				logU16p(dbg_PID_output);				// PID output
    15c4:	80 91 94 01 	lds	r24, 0x0194
    15c8:	90 91 95 01 	lds	r25, 0x0195
    15cc:	0e df       	rcall	.-484    	; 0x13ea <logU16p>
			
				USART_sendstr("\n\r");
    15ce:	82 ef       	ldi	r24, 0xF2	; 242
    15d0:	90 e0       	ldi	r25, 0x00	; 0
    15d2:	91 d2       	rcall	.+1314   	; 0x1af6 <USART_sendstr>
    15d4:	84 cf       	rjmp	.-248    	; 0x14de <main+0x62>

000015d6 <setHeaterPower>:

// User function to control heater intensity
void setHeaterPower(uint16_t value)
{
	// Disable interrupts from analog comparator
	ACSR &= ~(1<<ACIE);
    15d6:	43 98       	cbi	0x08, 3	; 8
	// Update value
	heaterPower = (value > HEATER_MAX_POWER) ? HEATER_MAX_POWER : value;
    15d8:	9c 01       	movw	r18, r24
    15da:	85 36       	cpi	r24, 0x65	; 101
    15dc:	91 05       	cpc	r25, r1
    15de:	10 f0       	brcs	.+4      	; 0x15e4 <setHeaterPower+0xe>
    15e0:	24 e6       	ldi	r18, 0x64	; 100
    15e2:	30 e0       	ldi	r19, 0x00	; 0
    15e4:	30 93 24 01 	sts	0x0124, r19
    15e8:	20 93 23 01 	sts	0x0123, r18
	// Reenable interrupts
	ACSR |= (1<<ACIE);
    15ec:	43 9a       	sbi	0x08, 3	; 8
    15ee:	08 95       	ret

000015f0 <setMotorDirection>:

// User function to control motor rotation
void setMotorDirection(uint8_t dir)
{
	// Disable interrupts from timer0 
	TIMSK &= ~(1<<TOIE0);
    15f0:	99 b7       	in	r25, 0x39	; 57
    15f2:	9e 7f       	andi	r25, 0xFE	; 254
    15f4:	99 bf       	out	0x39, r25	; 57
		
	newDirReq = dir;	// save new direction request
    15f6:	80 93 25 01 	sts	0x0125, r24
	dirChangedMask = ~ROLL_DIR_CHANGED;
    15fa:	9f ed       	ldi	r25, 0xDF	; 223
    15fc:	90 93 a2 00 	sts	0x00A2, r25
	
	if (dir & ROLL_FWD)
    1600:	80 ff       	sbrs	r24, 0
    1602:	09 c0       	rjmp	.+18     	; 0x1616 <setMotorDirection+0x26>
		bottomPoint = rollPoint;
    1604:	80 91 26 01 	lds	r24, 0x0126
    1608:	90 91 27 01 	lds	r25, 0x0127
    160c:	90 93 29 01 	sts	0x0129, r25
    1610:	80 93 28 01 	sts	0x0128, r24
    1614:	0a c0       	rjmp	.+20     	; 0x162a <setMotorDirection+0x3a>
	else if (dir & ROLL_REV)
    1616:	81 ff       	sbrs	r24, 1
    1618:	08 c0       	rjmp	.+16     	; 0x162a <setMotorDirection+0x3a>
		topPoint = rollPoint;
    161a:	80 91 26 01 	lds	r24, 0x0126
    161e:	90 91 27 01 	lds	r25, 0x0127
    1622:	90 93 2b 01 	sts	0x012B, r25
    1626:	80 93 2a 01 	sts	0x012A, r24

	// Enable interrupts from timer 0
	TIMSK |= (1<<TOIE0);	
    162a:	89 b7       	in	r24, 0x39	; 57
    162c:	81 60       	ori	r24, 0x01	; 1
    162e:	89 bf       	out	0x39, r24	; 57
    1630:	08 95       	ret

00001632 <stopCycleRolling>:
}

void stopCycleRolling(uint8_t doResetPoints)
{
	// Disable interrupts from timer0 
	TIMSK &= ~(1<<TOIE0);
    1632:	99 b7       	in	r25, 0x39	; 57
    1634:	9e 7f       	andi	r25, 0xFE	; 254
    1636:	99 bf       	out	0x39, r25	; 57
	
	rollState &= ~ROLL_CYCLE;
    1638:	90 91 22 01 	lds	r25, 0x0122
    163c:	9b 7f       	andi	r25, 0xFB	; 251
    163e:	90 93 22 01 	sts	0x0122, r25
	if (doResetPoints)
    1642:	88 23       	and	r24, r24
    1644:	71 f0       	breq	.+28     	; 0x1662 <stopCycleRolling+0x30>
	{
		topPoint = bottomPoint = rollPoint;
    1646:	80 91 26 01 	lds	r24, 0x0126
    164a:	90 91 27 01 	lds	r25, 0x0127
    164e:	90 93 29 01 	sts	0x0129, r25
    1652:	80 93 28 01 	sts	0x0128, r24
    1656:	90 93 2b 01 	sts	0x012B, r25
    165a:	80 93 2a 01 	sts	0x012A, r24
		activeRollCycle = 0;	
    165e:	10 92 21 01 	sts	0x0121, r1
	}		
	
	// Enable interrupts from timer 0
	TIMSK |= (1<<TOIE0);
    1662:	89 b7       	in	r24, 0x39	; 57
    1664:	81 60       	ori	r24, 0x01	; 1
    1666:	89 bf       	out	0x39, r24	; 57
    1668:	08 95       	ret

0000166a <isTopPointValid>:



uint8_t isTopPointValid(void)
{
	return (	(int16_t)(topPoint - rollPoint) >= 0 );
    166a:	80 91 2a 01 	lds	r24, 0x012A
    166e:	90 91 2b 01 	lds	r25, 0x012B
    1672:	20 91 26 01 	lds	r18, 0x0126
    1676:	30 91 27 01 	lds	r19, 0x0127
    167a:	82 1b       	sub	r24, r18
    167c:	93 0b       	sbc	r25, r19
    167e:	89 2f       	mov	r24, r25
    1680:	80 95       	com	r24
}
    1682:	88 1f       	adc	r24, r24
    1684:	88 27       	eor	r24, r24
    1686:	88 1f       	adc	r24, r24
    1688:	08 95       	ret

0000168a <isBottomPointValid>:

uint8_t isBottomPointValid(void)
{
	return (	(int16_t)(rollPoint - bottomPoint) >= 0	);
    168a:	80 91 26 01 	lds	r24, 0x0126
    168e:	90 91 27 01 	lds	r25, 0x0127
    1692:	20 91 28 01 	lds	r18, 0x0128
    1696:	30 91 29 01 	lds	r19, 0x0129
    169a:	82 1b       	sub	r24, r18
    169c:	93 0b       	sbc	r25, r19
    169e:	89 2f       	mov	r24, r25
    16a0:	80 95       	com	r24
}
    16a2:	88 1f       	adc	r24, r24
    16a4:	88 27       	eor	r24, r24
    16a6:	88 1f       	adc	r24, r24
    16a8:	08 95       	ret

000016aa <startCycleRolling>:


uint8_t startCycleRolling(void)
{
	// Disable interrupts from timer0 
	TIMSK &= ~(1<<TOIE0);
    16aa:	89 b7       	in	r24, 0x39	; 57
    16ac:	8e 7f       	andi	r24, 0xFE	; 254
    16ae:	89 bf       	out	0x39, r24	; 57
	
	if ( isTopPointValid() && isBottomPointValid() )
    16b0:	dc df       	rcall	.-72     	; 0x166a <isTopPointValid>
    16b2:	88 23       	and	r24, r24
    16b4:	59 f0       	breq	.+22     	; 0x16cc <startCycleRolling+0x22>
    16b6:	e9 df       	rcall	.-46     	; 0x168a <isBottomPointValid>
    16b8:	88 23       	and	r24, r24
    16ba:	41 f0       	breq	.+16     	; 0x16cc <startCycleRolling+0x22>
	{
		rollState |= ROLL_CYCLE;
    16bc:	80 91 22 01 	lds	r24, 0x0122
    16c0:	84 60       	ori	r24, 0x04	; 4
    16c2:	80 93 22 01 	sts	0x0122, r24
		activeRollCycle = 1;
    16c6:	81 e0       	ldi	r24, 0x01	; 1
    16c8:	80 93 21 01 	sts	0x0121, r24
	}
	
	// Enable interrupts from timer 0
	TIMSK |= (1<<TOIE0);
    16cc:	89 b7       	in	r24, 0x39	; 57
    16ce:	81 60       	ori	r24, 0x01	; 1
    16d0:	89 bf       	out	0x39, r24	; 57
	
	return (rollState & ROLL_CYCLE);
    16d2:	80 91 22 01 	lds	r24, 0x0122
}
    16d6:	84 70       	andi	r24, 0x04	; 4
    16d8:	08 95       	ret

000016da <__vector_16>:




ISR(ANA_COMP_vect)
{
    16da:	1f 92       	push	r1
    16dc:	0f 92       	push	r0
    16de:	0f b6       	in	r0, 0x3f	; 63
    16e0:	0f 92       	push	r0
    16e2:	11 24       	eor	r1, r1
    16e4:	2f 93       	push	r18
    16e6:	3f 93       	push	r19
    16e8:	4f 93       	push	r20
    16ea:	5f 93       	push	r21
    16ec:	8f 93       	push	r24
    16ee:	9f 93       	push	r25
	static uint16_t sigma = 0;
	uint16_t delta;
	
	// Once triggered, disable further comparator interrupt
	ACSR &= ~(1<<ACIE);
    16f0:	43 98       	cbi	0x08, 3	; 8
	
	// Process heater delta-sigma modulator
	if (sigma >= HEATER_MAX_POWER)
    16f2:	40 91 2c 01 	lds	r20, 0x012C
    16f6:	50 91 2d 01 	lds	r21, 0x012D
    16fa:	44 36       	cpi	r20, 0x64	; 100
    16fc:	51 05       	cpc	r21, r1
    16fe:	30 f0       	brcs	.+12     	; 0x170c <__vector_16+0x32>
	{
		PORTD |= (1<<PD_HEATER | 1<<PD_HEAT_INDIC);
    1700:	82 b3       	in	r24, 0x12	; 18
    1702:	80 63       	ori	r24, 0x30	; 48
    1704:	82 bb       	out	0x12, r24	; 18
		delta = -HEATER_MAX_POWER;	
    1706:	2c e9       	ldi	r18, 0x9C	; 156
    1708:	3f ef       	ldi	r19, 0xFF	; 255
    170a:	03 c0       	rjmp	.+6      	; 0x1712 <__vector_16+0x38>
	}		
	else
	{
		PORTD &= ~(1<<PD_HEAT_INDIC);
    170c:	95 98       	cbi	0x12, 5	; 18
		delta = 0;
    170e:	20 e0       	ldi	r18, 0x00	; 0
    1710:	30 e0       	ldi	r19, 0x00	; 0
	}
	sigma += delta + heaterPower;	
    1712:	80 91 23 01 	lds	r24, 0x0123
    1716:	90 91 24 01 	lds	r25, 0x0124
    171a:	84 0f       	add	r24, r20
    171c:	95 1f       	adc	r25, r21
    171e:	82 0f       	add	r24, r18
    1720:	93 1f       	adc	r25, r19
    1722:	90 93 2d 01 	sts	0x012D, r25
    1726:	80 93 2c 01 	sts	0x012C, r24
	
	// Reprogram timer0
	TCNT0 = 256 - TRIAC_IMPULSE_TIME;		// Triac gate impulse time
    172a:	86 ef       	ldi	r24, 0xF6	; 246
    172c:	82 bf       	out	0x32, r24	; 50
	TIFR |= (1<<TOV0);						// Clear interrupt flag
    172e:	88 b7       	in	r24, 0x38	; 56
    1730:	81 60       	ori	r24, 0x01	; 1
    1732:	88 bf       	out	0x38, r24	; 56
	// Modify state	
	p_state &= ~STATE_MASK;					// Start new state machine cycle
    1734:	80 91 a1 00 	lds	r24, 0x00A1
    1738:	80 7f       	andi	r24, 0xF0	; 240
	p_state ^= HALF_PERIOD_FLAG;			// Toggle flag
    173a:	80 58       	subi	r24, 0x80	; 128
    173c:	80 93 a1 00 	sts	0x00A1, r24
	
}
    1740:	9f 91       	pop	r25
    1742:	8f 91       	pop	r24
    1744:	5f 91       	pop	r21
    1746:	4f 91       	pop	r20
    1748:	3f 91       	pop	r19
    174a:	2f 91       	pop	r18
    174c:	0f 90       	pop	r0
    174e:	0f be       	out	0x3f, r0	; 63
    1750:	0f 90       	pop	r0
    1752:	1f 90       	pop	r1
    1754:	18 95       	reti

00001756 <__vector_9>:



ISR(TIMER0_OVF_vect)
{
    1756:	1f 92       	push	r1
    1758:	0f 92       	push	r0
    175a:	0f b6       	in	r0, 0x3f	; 63
    175c:	0f 92       	push	r0
    175e:	11 24       	eor	r1, r1
    1760:	2f 93       	push	r18
    1762:	3f 93       	push	r19
    1764:	4f 93       	push	r20
    1766:	5f 93       	push	r21
    1768:	6f 93       	push	r22
    176a:	7f 93       	push	r23
    176c:	8f 93       	push	r24
    176e:	9f 93       	push	r25
    1770:	af 93       	push	r26
    1772:	bf 93       	push	r27
    1774:	ef 93       	push	r30
    1776:	ff 93       	push	r31
	uint8_t temp;
	
	switch(p_state & STATE_MASK)
    1778:	80 91 a1 00 	lds	r24, 0x00A1
    177c:	8f 70       	andi	r24, 0x0F	; 15
    177e:	81 30       	cpi	r24, 0x01	; 1
    1780:	49 f0       	breq	.+18     	; 0x1794 <__vector_9+0x3e>
    1782:	28 f0       	brcs	.+10     	; 0x178e <__vector_9+0x38>
    1784:	82 30       	cpi	r24, 0x02	; 2
    1786:	49 f0       	breq	.+18     	; 0x179a <__vector_9+0x44>
    1788:	83 30       	cpi	r24, 0x03	; 3
    178a:	69 f4       	brne	.+26     	; 0x17a6 <__vector_9+0x50>
    178c:	0b c0       	rjmp	.+22     	; 0x17a4 <__vector_9+0x4e>
	{
		// TRIAC_IMPULSE_TIME finished
		case 0x00:
			// Turn off heater TRIAC
			PORTD &= ~(1<<PD_HEATER);
    178e:	94 98       	cbi	0x12, 4	; 18
			TCNT0 = 256 - (QUATER_PERIOD_TIME - TRIAC_IMPULSE_TIME);
    1790:	8c eb       	ldi	r24, 0xBC	; 188
    1792:	01 c0       	rjmp	.+2      	; 0x1796 <__vector_9+0x40>
			break;
		// QUATER_PERIOD_TIME finished	
		case 0x01:	
			TCNT0 = 256 - (SYNC_IGNORE_TIME - QUATER_PERIOD_TIME);
    1794:	82 ec       	ldi	r24, 0xC2	; 194
    1796:	82 bf       	out	0x32, r24	; 50
			break;	
    1798:	06 c0       	rjmp	.+12     	; 0x17a6 <__vector_9+0x50>
		// SYNC_IGNORE_TIME finished	
		case 0x02:
			TCNT0 = 256 - SYNC_LOST_TIMEOUT;
    179a:	80 ee       	ldi	r24, 0xE0	; 224
    179c:	82 bf       	out	0x32, r24	; 50
			// Clear flag and enable interrupt from analog comparator
			ACSR |= (1<<ACI);
    179e:	44 9a       	sbi	0x08, 4	; 8
			ACSR |= (1<<ACIE);
    17a0:	43 9a       	sbi	0x08, 3	; 8
			break;
    17a2:	01 c0       	rjmp	.+2      	; 0x17a6 <__vector_9+0x50>
		// SYNC_LOST_TIMEOUT finished
		case 0x03:
			// Error - sync is lost. It means that device has been disconnected from AC line.
			// Disable all power-consuming devices like LEDs and save user settings to EEPROM.
			exitPowerOff();
    17a4:	cb d8       	rcall	.-3690   	; 0x93c <exitPowerOff>
			// Sync is not present - do nothing
			break;
	}	

	// Full period check
	if ((p_state & (HALF_PERIOD_FLAG | STATE_MASK)) == (HALF_PERIOD_FLAG | 0x01))
    17a6:	80 91 a1 00 	lds	r24, 0x00A1
    17aa:	8f 78       	andi	r24, 0x8F	; 143
    17ac:	81 38       	cpi	r24, 0x81	; 129
    17ae:	09 f0       	breq	.+2      	; 0x17b2 <__vector_9+0x5c>
    17b0:	81 c0       	rjmp	.+258    	; 0x18b4 <__vector_9+0x15e>
	{
		// Quater AC line period is done. Update motor controls.
		temp = PORTD;
    17b2:	82 b3       	in	r24, 0x12	; 18
		temp &= ~(1<<PD_M1 | 1<<PD_M2);
    17b4:	83 7f       	andi	r24, 0xF3	; 243
		if ( rollState & SKIP_CURRENT_MOTOR_CTRL )
    17b6:	90 91 22 01 	lds	r25, 0x0122
    17ba:	93 ff       	sbrs	r25, 3
    17bc:	05 c0       	rjmp	.+10     	; 0x17c8 <__vector_9+0x72>
		{
			// Direction control changed. Skip current period to allow TRIACs fully close
			rollState &= ~SKIP_CURRENT_MOTOR_CTRL;
    17be:	97 7f       	andi	r25, 0xF7	; 247
    17c0:	90 93 22 01 	sts	0x0122, r25
			PORTD = temp; 	
    17c4:	82 bb       	out	0x12, r24	; 18
    17c6:	76 c0       	rjmp	.+236    	; 0x18b4 <__vector_9+0x15e>
		}
		else
		{
			// Apply direction control 
			if (rollState & ROLL_FWD)
    17c8:	90 ff       	sbrs	r25, 0
    17ca:	02 c0       	rjmp	.+4      	; 0x17d0 <__vector_9+0x7a>
				temp |= (1<<PD_M1);
    17cc:	84 60       	ori	r24, 0x04	; 4
    17ce:	02 c0       	rjmp	.+4      	; 0x17d4 <__vector_9+0x7e>
			else if (rollState & ROLL_REV)
    17d0:	91 fd       	sbrc	r25, 1
				temp |= (1<<PD_M2);
    17d2:	88 60       	ori	r24, 0x08	; 8
			PORTD = temp; 
    17d4:	82 bb       	out	0x12, r24	; 18
// Function to process rolling - sets rotation direction for next period
// Call once per each AC line period
static inline void controlRolling()
{
	// Process cycle rolling
	switch(rollState & (ROLL_FWD | ROLL_REV | ROLL_CYCLE))
    17d6:	40 91 22 01 	lds	r20, 0x0122
    17da:	84 2f       	mov	r24, r20
    17dc:	87 70       	andi	r24, 0x07	; 7
    17de:	85 30       	cpi	r24, 0x05	; 5
    17e0:	19 f0       	breq	.+6      	; 0x17e8 <__vector_9+0x92>
    17e2:	86 30       	cpi	r24, 0x06	; 6
    17e4:	e9 f5       	brne	.+122    	; 0x1860 <__vector_9+0x10a>
    17e6:	1d c0       	rjmp	.+58     	; 0x1822 <__vector_9+0xcc>
//---------------------------------------------//
//---------------------------------------------//

static inline uint8_t reachedTopPoint(void)
{
	return (	(int16_t)(topPoint - rollPoint) <= 0 );
    17e8:	80 91 2a 01 	lds	r24, 0x012A
    17ec:	90 91 2b 01 	lds	r25, 0x012B
    17f0:	20 91 26 01 	lds	r18, 0x0126
    17f4:	30 91 27 01 	lds	r19, 0x0127
    17f8:	82 1b       	sub	r24, r18
    17fa:	93 0b       	sbc	r25, r19
{
	// Process cycle rolling
	switch(rollState & (ROLL_FWD | ROLL_REV | ROLL_CYCLE))
	{
		case (ROLL_FWD | ROLL_CYCLE):
			if (reachedTopPoint())
    17fc:	18 16       	cp	r1, r24
    17fe:	19 06       	cpc	r1, r25
    1800:	7c f1       	brlt	.+94     	; 0x1860 <__vector_9+0x10a>
			{
				if (activeRollCycle >= p.rollCycleSet)	
    1802:	80 91 21 01 	lds	r24, 0x0121
    1806:	90 91 91 01 	lds	r25, 0x0191
    180a:	89 17       	cp	r24, r25
    180c:	28 f0       	brcs	.+10     	; 0x1818 <__vector_9+0xc2>
				{
					// DONE!
					rollState &= ~ROLL_CYCLE;
    180e:	4b 7f       	andi	r20, 0xFB	; 251
					rollState |= CYCLE_ROLL_DONE;
    1810:	40 61       	ori	r20, 0x10	; 16
    1812:	40 93 22 01 	sts	0x0122, r20
    1816:	24 c0       	rjmp	.+72     	; 0x1860 <__vector_9+0x10a>
				}
				else
				{
					activeRollCycle++;
    1818:	8f 5f       	subi	r24, 0xFF	; 255
    181a:	80 93 21 01 	sts	0x0121, r24
					// Change dir	
					newDirReq = ROLL_REV;				
    181e:	82 e0       	ldi	r24, 0x02	; 2
    1820:	1d c0       	rjmp	.+58     	; 0x185c <__vector_9+0x106>
	return (	(int16_t)(topPoint - rollPoint) <= 0 );
}

static inline uint8_t reachedBottomPoint(void)
{
	return (	(int16_t)(rollPoint - bottomPoint) <= 0 );
    1822:	80 91 26 01 	lds	r24, 0x0126
    1826:	90 91 27 01 	lds	r25, 0x0127
    182a:	20 91 28 01 	lds	r18, 0x0128
    182e:	30 91 29 01 	lds	r19, 0x0129
    1832:	82 1b       	sub	r24, r18
    1834:	93 0b       	sbc	r25, r19
				}
			}
			break;
		
		case (ROLL_REV | ROLL_CYCLE):	
			if (reachedBottomPoint())
    1836:	18 16       	cp	r1, r24
    1838:	19 06       	cpc	r1, r25
    183a:	94 f0       	brlt	.+36     	; 0x1860 <__vector_9+0x10a>
			{
				if (activeRollCycle >= p.rollCycleSet)	
    183c:	80 91 21 01 	lds	r24, 0x0121
    1840:	90 91 91 01 	lds	r25, 0x0191
    1844:	89 17       	cp	r24, r25
    1846:	30 f0       	brcs	.+12     	; 0x1854 <__vector_9+0xfe>
				{
					// DONE!
					rollState &= ~ROLL_CYCLE;
    1848:	84 2f       	mov	r24, r20
    184a:	8b 7f       	andi	r24, 0xFB	; 251
					rollState |= CYCLE_ROLL_DONE;
    184c:	80 61       	ori	r24, 0x10	; 16
    184e:	80 93 22 01 	sts	0x0122, r24
    1852:	06 c0       	rjmp	.+12     	; 0x1860 <__vector_9+0x10a>
				}
				else
				{
					activeRollCycle++;
    1854:	8f 5f       	subi	r24, 0xFF	; 255
    1856:	80 93 21 01 	sts	0x0121, r24
					// Change dir	
					newDirReq = ROLL_FWD;
    185a:	81 e0       	ldi	r24, 0x01	; 1
    185c:	80 93 25 01 	sts	0x0125, r24
		default:
			break;
	}
	
	// Process direction change
	if ((rollState ^ newDirReq) & (ROLL_FWD | ROLL_REV))
    1860:	20 91 22 01 	lds	r18, 0x0122
    1864:	90 91 25 01 	lds	r25, 0x0125
    1868:	89 2f       	mov	r24, r25
    186a:	82 27       	eor	r24, r18
    186c:	83 70       	andi	r24, 0x03	; 3
    186e:	19 f0       	breq	.+6      	; 0x1876 <__vector_9+0x120>
	{
		// ROLL_DIR_CHANGED is used for sound beep
		rollState |= (SKIP_CURRENT_MOTOR_CTRL | ROLL_DIR_CHANGED);
    1870:	28 62       	ori	r18, 0x28	; 40
    1872:	20 93 22 01 	sts	0x0122, r18
	}
	
	rollState &= ~(ROLL_FWD | ROLL_REV);
    1876:	80 91 22 01 	lds	r24, 0x0122
    187a:	8c 7f       	andi	r24, 0xFC	; 252
	rollState |= newDirReq;
    187c:	89 2b       	or	r24, r25
	rollState &= dirChangedMask;
    187e:	90 91 a2 00 	lds	r25, 0x00A2
    1882:	89 23       	and	r24, r25
    1884:	80 93 22 01 	sts	0x0122, r24
	dirChangedMask = 0xFF;
    1888:	9f ef       	ldi	r25, 0xFF	; 255
    188a:	90 93 a2 00 	sts	0x00A2, r25
	return (	(int16_t)(rollPoint - bottomPoint) <= 0 );
}

static inline void updateRollPoint(void)
{	
	if (rollState & ROLL_FWD)
    188e:	80 ff       	sbrs	r24, 0
    1890:	06 c0       	rjmp	.+12     	; 0x189e <__vector_9+0x148>
		rollPoint++;
    1892:	80 91 26 01 	lds	r24, 0x0126
    1896:	90 91 27 01 	lds	r25, 0x0127
    189a:	01 96       	adiw	r24, 0x01	; 1
    189c:	07 c0       	rjmp	.+14     	; 0x18ac <__vector_9+0x156>
	else if (rollState & ROLL_REV)
    189e:	81 ff       	sbrs	r24, 1
    18a0:	09 c0       	rjmp	.+18     	; 0x18b4 <__vector_9+0x15e>
		rollPoint--;	
    18a2:	80 91 26 01 	lds	r24, 0x0126
    18a6:	90 91 27 01 	lds	r25, 0x0127
    18aa:	01 97       	sbiw	r24, 0x01	; 1
    18ac:	90 93 27 01 	sts	0x0127, r25
    18b0:	80 93 26 01 	sts	0x0126, r24
			controlRolling();
		}
	}
	
	
	if ((p_state & STATE_MASK)  != 0x0F)
    18b4:	80 91 a1 00 	lds	r24, 0x00A1
    18b8:	98 2f       	mov	r25, r24
    18ba:	9f 70       	andi	r25, 0x0F	; 15
    18bc:	9f 30       	cpi	r25, 0x0F	; 15
    18be:	19 f0       	breq	.+6      	; 0x18c6 <__vector_9+0x170>
		p_state++;
    18c0:	8f 5f       	subi	r24, 0xFF	; 255
    18c2:	80 93 a1 00 	sts	0x00A1, r24
}	
    18c6:	ff 91       	pop	r31
    18c8:	ef 91       	pop	r30
    18ca:	bf 91       	pop	r27
    18cc:	af 91       	pop	r26
    18ce:	9f 91       	pop	r25
    18d0:	8f 91       	pop	r24
    18d2:	7f 91       	pop	r23
    18d4:	6f 91       	pop	r22
    18d6:	5f 91       	pop	r21
    18d8:	4f 91       	pop	r20
    18da:	3f 91       	pop	r19
    18dc:	2f 91       	pop	r18
    18de:	0f 90       	pop	r0
    18e0:	0f be       	out	0x3f, r0	; 63
    18e2:	0f 90       	pop	r0
    18e4:	1f 90       	pop	r1
    18e6:	18 95       	reti

000018e8 <processSoftTimer8b>:
 
 
 
 
 void processSoftTimer8b(SoftTimer8b_t *tmr)
 {
    18e8:	fc 01       	movw	r30, r24
	 uint8_t newTimerVal;

	 if (!tmr->Enabled)
    18ea:	90 81       	ld	r25, Z
    18ec:	90 ff       	sbrs	r25, 0
    18ee:	27 c0       	rjmp	.+78     	; 0x193e <processSoftTimer8b+0x56>
		return;
	 
	 tmr->FA_EQ = 0;
	 tmr->FA_GE = 0;
	 tmr->FTop = 0;
    18f0:	97 7e       	andi	r25, 0xE7	; 231
    18f2:	9f 7d       	andi	r25, 0xDF	; 223
    18f4:	90 83       	st	Z, r25
	 
	 if (tmr->Timer >= tmr->Top)
    18f6:	81 81       	ldd	r24, Z+1	; 0x01
    18f8:	22 81       	ldd	r18, Z+2	; 0x02
    18fa:	82 17       	cp	r24, r18
    18fc:	50 f0       	brcs	.+20     	; 0x1912 <processSoftTimer8b+0x2a>
	 {
		 if (tmr->RunOnce)
    18fe:	91 ff       	sbrs	r25, 1
    1900:	02 c0       	rjmp	.+4      	; 0x1906 <processSoftTimer8b+0x1e>
		 {
			 tmr->Enabled = 0;
    1902:	9e 7f       	andi	r25, 0xFE	; 254
    1904:	90 83       	st	Z, r25
		 }
		 tmr->FTop = 1;
    1906:	90 81       	ld	r25, Z
		 tmr->FOvfl = 1;
    1908:	90 62       	ori	r25, 0x20	; 32
    190a:	90 64       	ori	r25, 0x40	; 64
    190c:	90 83       	st	Z, r25
		 newTimerVal = 0;
    190e:	20 e0       	ldi	r18, 0x00	; 0
    1910:	02 c0       	rjmp	.+4      	; 0x1916 <processSoftTimer8b+0x2e>
	 }
	 else
	 {
		 newTimerVal = tmr->Timer + 1;
    1912:	28 2f       	mov	r18, r24
    1914:	2f 5f       	subi	r18, 0xFF	; 255
	 }
	 
	 if (tmr->Timer == tmr->CompA)
    1916:	93 81       	ldd	r25, Z+3	; 0x03
    1918:	89 13       	cpse	r24, r25
    191a:	0b c0       	rjmp	.+22     	; 0x1932 <processSoftTimer8b+0x4a>
	 {
		 tmr->FA_EQ = 1;
    191c:	80 81       	ld	r24, Z
		 tmr->FA_GE = 1;
    191e:	88 60       	ori	r24, 0x08	; 8
    1920:	80 61       	ori	r24, 0x10	; 16
		 tmr->FA_TGL = !tmr->FA_TGL;
    1922:	82 fb       	bst	r24, 2
    1924:	99 27       	eor	r25, r25
    1926:	90 f9       	bld	r25, 0
    1928:	31 e0       	ldi	r19, 0x01	; 1
    192a:	93 27       	eor	r25, r19
    192c:	90 fb       	bst	r25, 0
    192e:	82 f9       	bld	r24, 2
    1930:	04 c0       	rjmp	.+8      	; 0x193a <processSoftTimer8b+0x52>
	 }
	 else if (tmr->Timer >= tmr->CompA)
    1932:	89 17       	cp	r24, r25
    1934:	18 f0       	brcs	.+6      	; 0x193c <processSoftTimer8b+0x54>
	 {
		 tmr->FA_GE = 1;
    1936:	80 81       	ld	r24, Z
    1938:	80 61       	ori	r24, 0x10	; 16
    193a:	80 83       	st	Z, r24
	 }
	 
	 tmr->Timer = newTimerVal; 
    193c:	21 83       	std	Z+1, r18	; 0x01
    193e:	08 95       	ret

00001940 <processSystemTimers>:



void processSystemTimers(void)
{
	sys_timers.flags = 0x00;
    1940:	10 92 a9 00 	sts	0x00A9, r1
	
	// Process Celsius counter
	if (--sys_timers.celsius_upd_counter == 0)
    1944:	80 91 a3 00 	lds	r24, 0x00A3
    1948:	81 50       	subi	r24, 0x01	; 1
    194a:	80 93 a3 00 	sts	0x00A3, r24
    194e:	81 11       	cpse	r24, r1
    1950:	13 c0       	rjmp	.+38     	; 0x1978 <processSystemTimers+0x38>
	{
		sys_timers.celsius_upd_counter = CELSIUS_UDPATE_INTERVAL;
    1952:	84 e0       	ldi	r24, 0x04	; 4
    1954:	80 93 a3 00 	sts	0x00A3, r24
		sys_timers.flags |= EXPIRED_CELSIUS;
    1958:	81 e0       	ldi	r24, 0x01	; 1
    195a:	80 93 a9 00 	sts	0x00A9, r24
		
		// Process PID update counter
		if (--sys_timers.pid_update_counter == 0)
    195e:	80 91 a8 00 	lds	r24, 0x00A8
    1962:	81 50       	subi	r24, 0x01	; 1
    1964:	80 93 a8 00 	sts	0x00A8, r24
    1968:	81 11       	cpse	r24, r1
    196a:	06 c0       	rjmp	.+12     	; 0x1978 <processSystemTimers+0x38>
		{
			sys_timers.pid_update_counter = PID_UPDATE_INTERVAL;
    196c:	8a e0       	ldi	r24, 0x0A	; 10
    196e:	80 93 a8 00 	sts	0x00A8, r24
			sys_timers.flags |= UPDATE_PID;
    1972:	81 e4       	ldi	r24, 0x41	; 65
    1974:	80 93 a9 00 	sts	0x00A9, r24
		}
	}
	
	// Process log counter
	if (--sys_timers.log_counter == 0)
    1978:	80 91 a7 00 	lds	r24, 0x00A7
    197c:	81 50       	subi	r24, 0x01	; 1
    197e:	19 f0       	breq	.+6      	; 0x1986 <processSystemTimers+0x46>
    1980:	80 93 a7 00 	sts	0x00A7, r24
    1984:	08 c0       	rjmp	.+16     	; 0x1996 <processSystemTimers+0x56>
	{
		sys_timers.log_counter = LOG_INTERVAL;
    1986:	82 e0       	ldi	r24, 0x02	; 2
    1988:	80 93 a7 00 	sts	0x00A7, r24
		sys_timers.flags |= EXPIRED_LOG;
    198c:	80 91 a9 00 	lds	r24, 0x00A9
    1990:	80 62       	ori	r24, 0x20	; 32
    1992:	80 93 a9 00 	sts	0x00A9, r24
	}
	
	// Process 10 seconds counter
	if (--sys_timers.counter_10sec == 0)
    1996:	80 91 a4 00 	lds	r24, 0x00A4
    199a:	81 50       	subi	r24, 0x01	; 1
    199c:	80 93 a4 00 	sts	0x00A4, r24
    19a0:	81 11       	cpse	r24, r1
    19a2:	34 c0       	rjmp	.+104    	; 0x1a0c <processSystemTimers+0xcc>
	{
		sys_timers.counter_10sec = COUNTER_10SEC_INTERVAL;
    19a4:	88 ec       	ldi	r24, 0xC8	; 200
    19a6:	80 93 a4 00 	sts	0x00A4, r24
		sys_timers.flags |= EXPIRED_10SEC;
    19aa:	40 91 a9 00 	lds	r20, 0x00A9
    19ae:	84 2f       	mov	r24, r20
    19b0:	82 60       	ori	r24, 0x02	; 2
    19b2:	80 93 a9 00 	sts	0x00A9, r24
		
		// Process 1 minute counter
		if (--sys_timers.counter_1min == 0)
    19b6:	80 91 a5 00 	lds	r24, 0x00A5
    19ba:	81 50       	subi	r24, 0x01	; 1
    19bc:	80 93 a5 00 	sts	0x00A5, r24
    19c0:	81 11       	cpse	r24, r1
    19c2:	24 c0       	rjmp	.+72     	; 0x1a0c <processSystemTimers+0xcc>
		{
			sys_timers.counter_1min = COUNTER_1MIN_INTERVAL;
    19c4:	86 e0       	ldi	r24, 0x06	; 6
    19c6:	80 93 a5 00 	sts	0x00A5, r24
			sys_timers.flags |= EXPIRED_1MIN;
    19ca:	84 2f       	mov	r24, r20
    19cc:	86 60       	ori	r24, 0x06	; 6
    19ce:	80 93 a9 00 	sts	0x00A9, r24
			
			// Process auto power off counter
			if (sys_timers.poff_counter != MAX_POWEROFF_TIMEOUT - 1)
    19d2:	80 91 a6 00 	lds	r24, 0x00A6
    19d6:	8e 35       	cpi	r24, 0x5E	; 94
    19d8:	19 f0       	breq	.+6      	; 0x19e0 <processSystemTimers+0xa0>
				sys_timers.poff_counter++;
    19da:	8f 5f       	subi	r24, 0xFF	; 255
    19dc:	80 93 a6 00 	sts	0x00A6, r24
			if (sys_timers.poff_counter == p.power_off_timeout - 1)
    19e0:	60 91 a6 00 	lds	r22, 0x00A6
    19e4:	50 91 93 01 	lds	r21, 0x0193
    19e8:	26 2f       	mov	r18, r22
    19ea:	30 e0       	ldi	r19, 0x00	; 0
    19ec:	85 2f       	mov	r24, r21
    19ee:	90 e0       	ldi	r25, 0x00	; 0
    19f0:	01 97       	sbiw	r24, 0x01	; 1
    19f2:	28 17       	cp	r18, r24
    19f4:	39 07       	cpc	r19, r25
    19f6:	19 f4       	brne	.+6      	; 0x19fe <processSystemTimers+0xbe>
				sys_timers.flags |= AUTOPOFF_SOON;
    19f8:	4e 60       	ori	r20, 0x0E	; 14
    19fa:	40 93 a9 00 	sts	0x00A9, r20
			if (sys_timers.poff_counter == p.power_off_timeout)
    19fe:	65 13       	cpse	r22, r21
    1a00:	05 c0       	rjmp	.+10     	; 0x1a0c <processSystemTimers+0xcc>
				sys_timers.flags |= AUTOPOFF_EXPIRED;			
    1a02:	80 91 a9 00 	lds	r24, 0x00A9
    1a06:	80 61       	ori	r24, 0x10	; 16
    1a08:	80 93 a9 00 	sts	0x00A9, r24
    1a0c:	08 95       	ret

00001a0e <resetAutoPowerOffCounter>:
}


void resetAutoPowerOffCounter(void)
{
	sys_timers.poff_counter = 0;
    1a0e:	10 92 a6 00 	sts	0x00A6, r1
    1a12:	08 95       	ret

00001a14 <SetBeeperFreq>:
}

// Setup beeper frequency (Hz)
void SetBeeperFreq(uint16_t freq_hz)
{
	uint16_t period_us = 1000000 / freq_hz;
    1a14:	9c 01       	movw	r18, r24
    1a16:	40 e0       	ldi	r20, 0x00	; 0
    1a18:	50 e0       	ldi	r21, 0x00	; 0
    1a1a:	60 e4       	ldi	r22, 0x40	; 64
    1a1c:	72 e4       	ldi	r23, 0x42	; 66
    1a1e:	8f e0       	ldi	r24, 0x0F	; 15
    1a20:	90 e0       	ldi	r25, 0x00	; 0
    1a22:	d0 d0       	rcall	.+416    	; 0x1bc4 <__divmodsi4>
	if (period_us & 0xFFF8)
    1a24:	da 01       	movw	r26, r20
    1a26:	c9 01       	movw	r24, r18
    1a28:	88 7f       	andi	r24, 0xF8	; 248
    1a2a:	aa 27       	eor	r26, r26
    1a2c:	bb 27       	eor	r27, r27
    1a2e:	89 2b       	or	r24, r25
    1a30:	51 f0       	breq	.+20     	; 0x1a46 <SetBeeperFreq+0x32>
		OCR1A = (period_us>>3) - 1;
    1a32:	43 e0       	ldi	r20, 0x03	; 3
    1a34:	36 95       	lsr	r19
    1a36:	27 95       	ror	r18
    1a38:	4a 95       	dec	r20
    1a3a:	e1 f7       	brne	.-8      	; 0x1a34 <SetBeeperFreq+0x20>
    1a3c:	21 50       	subi	r18, 0x01	; 1
    1a3e:	31 09       	sbc	r19, r1
    1a40:	3b bd       	out	0x2b, r19	; 43
    1a42:	2a bd       	out	0x2a, r18	; 42
    1a44:	04 c0       	rjmp	.+8      	; 0x1a4e <SetBeeperFreq+0x3a>
	else
		OCR1A = 0x1;
    1a46:	81 e0       	ldi	r24, 0x01	; 1
    1a48:	90 e0       	ldi	r25, 0x00	; 0
    1a4a:	9b bd       	out	0x2b, r25	; 43
    1a4c:	8a bd       	out	0x2a, r24	; 42
	TCNT1 = 0;
    1a4e:	1d bc       	out	0x2d, r1	; 45
    1a50:	1c bc       	out	0x2c, r1	; 44
    1a52:	08 95       	ret

00001a54 <StartBeep>:
}

// Beep for some time in ms
void StartBeep(uint16_t time_ms)
{
	if ( (p.sound_enable) || (enableOverride) )
    1a54:	20 91 92 01 	lds	r18, 0x0192
    1a58:	21 11       	cpse	r18, r1
    1a5a:	04 c0       	rjmp	.+8      	; 0x1a64 <StartBeep+0x10>
    1a5c:	20 91 2e 01 	lds	r18, 0x012E
    1a60:	22 23       	and	r18, r18
    1a62:	39 f0       	breq	.+14     	; 0x1a72 <StartBeep+0x1e>
	{
		beep_cnt = time_ms;
    1a64:	90 93 30 01 	sts	0x0130, r25
    1a68:	80 93 2f 01 	sts	0x012F, r24
// Enable / disable beeper output
inline void SetBeepOutput(uint8_t val)
{
	if (val)
		// Toggle OCR1A on compare match
		TCCR1A |= (1<<COM1A0);
    1a6c:	8f b5       	in	r24, 0x2f	; 47
    1a6e:	80 64       	ori	r24, 0x40	; 64
    1a70:	8f bd       	out	0x2f, r24	; 47
	if ( (p.sound_enable) || (enableOverride) )
	{
		beep_cnt = time_ms;
		SetBeepOutput(1);		
	}
	enableOverride = 0;
    1a72:	10 92 2e 01 	sts	0x012E, r1
    1a76:	08 95       	ret

00001a78 <OverrideSoundDisable>:
}

void OverrideSoundDisable(void)
{
	enableOverride = 1;
    1a78:	81 e0       	ldi	r24, 0x01	; 1
    1a7a:	80 93 2e 01 	sts	0x012E, r24
    1a7e:	08 95       	ret

00001a80 <__vector_3>:




ISR(TIMER2_COMP_vect)
{	
    1a80:	1f 92       	push	r1
    1a82:	0f 92       	push	r0
    1a84:	0f b6       	in	r0, 0x3f	; 63
    1a86:	0f 92       	push	r0
    1a88:	11 24       	eor	r1, r1
    1a8a:	2f 93       	push	r18
    1a8c:	3f 93       	push	r19
    1a8e:	4f 93       	push	r20
    1a90:	5f 93       	push	r21
    1a92:	6f 93       	push	r22
    1a94:	7f 93       	push	r23
    1a96:	8f 93       	push	r24
    1a98:	9f 93       	push	r25
    1a9a:	af 93       	push	r26
    1a9c:	bf 93       	push	r27
    1a9e:	ef 93       	push	r30
    1aa0:	ff 93       	push	r31
	
	// Manage beeper
	if (beep_cnt)
    1aa2:	80 91 2f 01 	lds	r24, 0x012F
    1aa6:	90 91 30 01 	lds	r25, 0x0130
    1aaa:	00 97       	sbiw	r24, 0x00	; 0
    1aac:	31 f0       	breq	.+12     	; 0x1aba <__vector_3+0x3a>
		beep_cnt--;
    1aae:	01 97       	sbiw	r24, 0x01	; 1
    1ab0:	90 93 30 01 	sts	0x0130, r25
    1ab4:	80 93 2f 01 	sts	0x012F, r24
    1ab8:	03 c0       	rjmp	.+6      	; 0x1ac0 <__vector_3+0x40>
	if (val)
		// Toggle OCR1A on compare match
		TCCR1A |= (1<<COM1A0);
	else
		// Disable OCR1A output
		TCCR1A &= ~(1<<COM1A0 | 1<<COM1A1);
    1aba:	8f b5       	in	r24, 0x2f	; 47
    1abc:	8f 73       	andi	r24, 0x3F	; 63
    1abe:	8f bd       	out	0x2f, r24	; 47
		beep_cnt--;
	else
		SetBeepOutput(0);	// done
	
	// Manage LED indicator
	processLedIndicator();
    1ac0:	72 d7       	rcall	.+3812   	; 0x29a6 <__data_load_end+0xc7a>
	
	// Process menu update timer
	processSoftTimer8b(&menuUpdateTimer);	
    1ac2:	8a ea       	ldi	r24, 0xAA	; 170
    1ac4:	90 e0       	ldi	r25, 0x00	; 0
    1ac6:	10 df       	rcall	.-480    	; 0x18e8 <processSoftTimer8b>
	
	// Start ADC conversion 
	ADCSRA |= (1<<ADSC);
    1ac8:	36 9a       	sbi	0x06, 6	; 6
	
}
    1aca:	ff 91       	pop	r31
    1acc:	ef 91       	pop	r30
    1ace:	bf 91       	pop	r27
    1ad0:	af 91       	pop	r26
    1ad2:	9f 91       	pop	r25
    1ad4:	8f 91       	pop	r24
    1ad6:	7f 91       	pop	r23
    1ad8:	6f 91       	pop	r22
    1ada:	5f 91       	pop	r21
    1adc:	4f 91       	pop	r20
    1ade:	3f 91       	pop	r19
    1ae0:	2f 91       	pop	r18
    1ae2:	0f 90       	pop	r0
    1ae4:	0f be       	out	0x3f, r0	; 63
    1ae6:	0f 90       	pop	r0
    1ae8:	1f 90       	pop	r1
    1aea:	18 95       	reti

00001aec <USART_send>:



void USART_send( uint8_t data )
{
	UCSRA |= (1<<TXC);                 // Clear flag
    1aec:	5e 9a       	sbi	0x0b, 6	; 11
	UDR = data;
    1aee:	8c b9       	out	0x0c, r24	; 12
	while ( !(UCSRA & (1<<TXC)) );  // Wait
    1af0:	5e 9b       	sbis	0x0b, 6	; 11
    1af2:	fe cf       	rjmp	.-4      	; 0x1af0 <USART_send+0x4>
}
    1af4:	08 95       	ret

00001af6 <USART_sendstr>:


void USART_sendstr(char* str)
{
    1af6:	1f 93       	push	r17
    1af8:	cf 93       	push	r28
    1afa:	df 93       	push	r29
    1afc:	ec 01       	movw	r28, r24
	uint8_t i = 0;
    1afe:	10 e0       	ldi	r17, 0x00	; 0
	while (str[i])
    1b00:	02 c0       	rjmp	.+4      	; 0x1b06 <USART_sendstr+0x10>
	{
		USART_send(str[i++]);
    1b02:	1f 5f       	subi	r17, 0xFF	; 255
    1b04:	f3 df       	rcall	.-26     	; 0x1aec <USART_send>


void USART_sendstr(char* str)
{
	uint8_t i = 0;
	while (str[i])
    1b06:	fe 01       	movw	r30, r28
    1b08:	e1 0f       	add	r30, r17
    1b0a:	f1 1d       	adc	r31, r1
    1b0c:	80 81       	ld	r24, Z
    1b0e:	81 11       	cpse	r24, r1
    1b10:	f8 cf       	rjmp	.-16     	; 0x1b02 <USART_sendstr+0xc>
	{
		USART_send(str[i++]);
	}
}
    1b12:	df 91       	pop	r29
    1b14:	cf 91       	pop	r28
    1b16:	1f 91       	pop	r17
    1b18:	08 95       	ret

00001b1a <__udivmodqi4>:
    1b1a:	99 1b       	sub	r25, r25
    1b1c:	79 e0       	ldi	r23, 0x09	; 9
    1b1e:	04 c0       	rjmp	.+8      	; 0x1b28 <__udivmodqi4_ep>

00001b20 <__udivmodqi4_loop>:
    1b20:	99 1f       	adc	r25, r25
    1b22:	96 17       	cp	r25, r22
    1b24:	08 f0       	brcs	.+2      	; 0x1b28 <__udivmodqi4_ep>
    1b26:	96 1b       	sub	r25, r22

00001b28 <__udivmodqi4_ep>:
    1b28:	88 1f       	adc	r24, r24
    1b2a:	7a 95       	dec	r23
    1b2c:	c9 f7       	brne	.-14     	; 0x1b20 <__udivmodqi4_loop>
    1b2e:	80 95       	com	r24
    1b30:	08 95       	ret

00001b32 <__udivmodhi4>:
    1b32:	aa 1b       	sub	r26, r26
    1b34:	bb 1b       	sub	r27, r27
    1b36:	51 e1       	ldi	r21, 0x11	; 17
    1b38:	07 c0       	rjmp	.+14     	; 0x1b48 <__udivmodhi4_ep>

00001b3a <__udivmodhi4_loop>:
    1b3a:	aa 1f       	adc	r26, r26
    1b3c:	bb 1f       	adc	r27, r27
    1b3e:	a6 17       	cp	r26, r22
    1b40:	b7 07       	cpc	r27, r23
    1b42:	10 f0       	brcs	.+4      	; 0x1b48 <__udivmodhi4_ep>
    1b44:	a6 1b       	sub	r26, r22
    1b46:	b7 0b       	sbc	r27, r23

00001b48 <__udivmodhi4_ep>:
    1b48:	88 1f       	adc	r24, r24
    1b4a:	99 1f       	adc	r25, r25
    1b4c:	5a 95       	dec	r21
    1b4e:	a9 f7       	brne	.-22     	; 0x1b3a <__udivmodhi4_loop>
    1b50:	80 95       	com	r24
    1b52:	90 95       	com	r25
    1b54:	bc 01       	movw	r22, r24
    1b56:	cd 01       	movw	r24, r26
    1b58:	08 95       	ret

00001b5a <__divmodhi4>:
    1b5a:	97 fb       	bst	r25, 7
    1b5c:	07 2e       	mov	r0, r23
    1b5e:	16 f4       	brtc	.+4      	; 0x1b64 <__divmodhi4+0xa>
    1b60:	00 94       	com	r0
    1b62:	06 d0       	rcall	.+12     	; 0x1b70 <__divmodhi4_neg1>
    1b64:	77 fd       	sbrc	r23, 7
    1b66:	08 d0       	rcall	.+16     	; 0x1b78 <__divmodhi4_neg2>
    1b68:	e4 df       	rcall	.-56     	; 0x1b32 <__udivmodhi4>
    1b6a:	07 fc       	sbrc	r0, 7
    1b6c:	05 d0       	rcall	.+10     	; 0x1b78 <__divmodhi4_neg2>
    1b6e:	3e f4       	brtc	.+14     	; 0x1b7e <__divmodhi4_exit>

00001b70 <__divmodhi4_neg1>:
    1b70:	90 95       	com	r25
    1b72:	81 95       	neg	r24
    1b74:	9f 4f       	sbci	r25, 0xFF	; 255
    1b76:	08 95       	ret

00001b78 <__divmodhi4_neg2>:
    1b78:	70 95       	com	r23
    1b7a:	61 95       	neg	r22
    1b7c:	7f 4f       	sbci	r23, 0xFF	; 255

00001b7e <__divmodhi4_exit>:
    1b7e:	08 95       	ret

00001b80 <__udivmodsi4>:
    1b80:	a1 e2       	ldi	r26, 0x21	; 33
    1b82:	1a 2e       	mov	r1, r26
    1b84:	aa 1b       	sub	r26, r26
    1b86:	bb 1b       	sub	r27, r27
    1b88:	fd 01       	movw	r30, r26
    1b8a:	0d c0       	rjmp	.+26     	; 0x1ba6 <__udivmodsi4_ep>

00001b8c <__udivmodsi4_loop>:
    1b8c:	aa 1f       	adc	r26, r26
    1b8e:	bb 1f       	adc	r27, r27
    1b90:	ee 1f       	adc	r30, r30
    1b92:	ff 1f       	adc	r31, r31
    1b94:	a2 17       	cp	r26, r18
    1b96:	b3 07       	cpc	r27, r19
    1b98:	e4 07       	cpc	r30, r20
    1b9a:	f5 07       	cpc	r31, r21
    1b9c:	20 f0       	brcs	.+8      	; 0x1ba6 <__udivmodsi4_ep>
    1b9e:	a2 1b       	sub	r26, r18
    1ba0:	b3 0b       	sbc	r27, r19
    1ba2:	e4 0b       	sbc	r30, r20
    1ba4:	f5 0b       	sbc	r31, r21

00001ba6 <__udivmodsi4_ep>:
    1ba6:	66 1f       	adc	r22, r22
    1ba8:	77 1f       	adc	r23, r23
    1baa:	88 1f       	adc	r24, r24
    1bac:	99 1f       	adc	r25, r25
    1bae:	1a 94       	dec	r1
    1bb0:	69 f7       	brne	.-38     	; 0x1b8c <__udivmodsi4_loop>
    1bb2:	60 95       	com	r22
    1bb4:	70 95       	com	r23
    1bb6:	80 95       	com	r24
    1bb8:	90 95       	com	r25
    1bba:	9b 01       	movw	r18, r22
    1bbc:	ac 01       	movw	r20, r24
    1bbe:	bd 01       	movw	r22, r26
    1bc0:	cf 01       	movw	r24, r30
    1bc2:	08 95       	ret

00001bc4 <__divmodsi4>:
    1bc4:	05 2e       	mov	r0, r21
    1bc6:	97 fb       	bst	r25, 7
    1bc8:	16 f4       	brtc	.+4      	; 0x1bce <__divmodsi4+0xa>
    1bca:	00 94       	com	r0
    1bcc:	06 d0       	rcall	.+12     	; 0x1bda <__divmodsi4_neg1>
    1bce:	57 fd       	sbrc	r21, 7
    1bd0:	0c d0       	rcall	.+24     	; 0x1bea <__divmodsi4_neg2>
    1bd2:	d6 df       	rcall	.-84     	; 0x1b80 <__udivmodsi4>
    1bd4:	07 fc       	sbrc	r0, 7
    1bd6:	09 d0       	rcall	.+18     	; 0x1bea <__divmodsi4_neg2>
    1bd8:	7e f4       	brtc	.+30     	; 0x1bf8 <__divmodsi4_exit>

00001bda <__divmodsi4_neg1>:
    1bda:	90 95       	com	r25
    1bdc:	80 95       	com	r24
    1bde:	70 95       	com	r23
    1be0:	61 95       	neg	r22
    1be2:	7f 4f       	sbci	r23, 0xFF	; 255
    1be4:	8f 4f       	sbci	r24, 0xFF	; 255
    1be6:	9f 4f       	sbci	r25, 0xFF	; 255
    1be8:	08 95       	ret

00001bea <__divmodsi4_neg2>:
    1bea:	50 95       	com	r21
    1bec:	40 95       	com	r20
    1bee:	30 95       	com	r19
    1bf0:	21 95       	neg	r18
    1bf2:	3f 4f       	sbci	r19, 0xFF	; 255
    1bf4:	4f 4f       	sbci	r20, 0xFF	; 255
    1bf6:	5f 4f       	sbci	r21, 0xFF	; 255

00001bf8 <__divmodsi4_exit>:
    1bf8:	08 95       	ret

00001bfa <__umulhisi3>:
    1bfa:	a2 9f       	mul	r26, r18
    1bfc:	b0 01       	movw	r22, r0
    1bfe:	b3 9f       	mul	r27, r19
    1c00:	c0 01       	movw	r24, r0
    1c02:	a3 9f       	mul	r26, r19
    1c04:	01 d0       	rcall	.+2      	; 0x1c08 <__umulhisi3+0xe>
    1c06:	b2 9f       	mul	r27, r18
    1c08:	70 0d       	add	r23, r0
    1c0a:	81 1d       	adc	r24, r1
    1c0c:	11 24       	eor	r1, r1
    1c0e:	91 1d       	adc	r25, r1
    1c10:	08 95       	ret

00001c12 <__usmulhisi3>:
    1c12:	f3 df       	rcall	.-26     	; 0x1bfa <__umulhisi3>

00001c14 <__usmulhisi3_tail>:
    1c14:	b7 ff       	sbrs	r27, 7
    1c16:	08 95       	ret
    1c18:	82 1b       	sub	r24, r18
    1c1a:	93 0b       	sbc	r25, r19
    1c1c:	08 95       	ret

00001c1e <__muluhisi3>:
    1c1e:	ed df       	rcall	.-38     	; 0x1bfa <__umulhisi3>
    1c20:	a5 9f       	mul	r26, r21
    1c22:	90 0d       	add	r25, r0
    1c24:	b4 9f       	mul	r27, r20
    1c26:	90 0d       	add	r25, r0
    1c28:	a4 9f       	mul	r26, r20
    1c2a:	80 0d       	add	r24, r0
    1c2c:	91 1d       	adc	r25, r1
    1c2e:	11 24       	eor	r1, r1
    1c30:	08 95       	ret

00001c32 <__eerd_block_m8>:
    1c32:	dc 01       	movw	r26, r24
    1c34:	cb 01       	movw	r24, r22

00001c36 <__eerd_blraw_m8>:
    1c36:	fc 01       	movw	r30, r24
    1c38:	e1 99       	sbic	0x1c, 1	; 28
    1c3a:	fe cf       	rjmp	.-4      	; 0x1c38 <__eerd_blraw_m8+0x2>
    1c3c:	06 c0       	rjmp	.+12     	; 0x1c4a <__eerd_blraw_m8+0x14>
    1c3e:	ff bb       	out	0x1f, r31	; 31
    1c40:	ee bb       	out	0x1e, r30	; 30
    1c42:	e0 9a       	sbi	0x1c, 0	; 28
    1c44:	31 96       	adiw	r30, 0x01	; 1
    1c46:	0d b2       	in	r0, 0x1d	; 29
    1c48:	0d 92       	st	X+, r0
    1c4a:	41 50       	subi	r20, 0x01	; 1
    1c4c:	50 40       	sbci	r21, 0x00	; 0
    1c4e:	b8 f7       	brcc	.-18     	; 0x1c3e <__eerd_blraw_m8+0x8>
    1c50:	08 95       	ret

00001c52 <__eeupd_block_m8>:
    1c52:	dc 01       	movw	r26, r24
    1c54:	a4 0f       	add	r26, r20
    1c56:	b5 1f       	adc	r27, r21
    1c58:	41 50       	subi	r20, 0x01	; 1
    1c5a:	50 40       	sbci	r21, 0x00	; 0
    1c5c:	40 f0       	brcs	.+16     	; 0x1c6e <__eeupd_block_m8+0x1c>
    1c5e:	cb 01       	movw	r24, r22
    1c60:	84 0f       	add	r24, r20
    1c62:	95 1f       	adc	r25, r21
    1c64:	2e 91       	ld	r18, -X
    1c66:	05 d0       	rcall	.+10     	; 0x1c72 <__eeupd_r18_m8>
    1c68:	41 50       	subi	r20, 0x01	; 1
    1c6a:	50 40       	sbci	r21, 0x00	; 0
    1c6c:	d8 f7       	brcc	.-10     	; 0x1c64 <__eeupd_block_m8+0x12>
    1c6e:	08 95       	ret

00001c70 <__eeupd_byte_m8>:
    1c70:	26 2f       	mov	r18, r22

00001c72 <__eeupd_r18_m8>:
    1c72:	e1 99       	sbic	0x1c, 1	; 28
    1c74:	fe cf       	rjmp	.-4      	; 0x1c72 <__eeupd_r18_m8>
    1c76:	9f bb       	out	0x1f, r25	; 31
    1c78:	8e bb       	out	0x1e, r24	; 30
    1c7a:	e0 9a       	sbi	0x1c, 0	; 28
    1c7c:	01 97       	sbiw	r24, 0x01	; 1
    1c7e:	0d b2       	in	r0, 0x1d	; 29
    1c80:	02 16       	cp	r0, r18
    1c82:	31 f0       	breq	.+12     	; 0x1c90 <__eeupd_r18_m8+0x1e>
    1c84:	2d bb       	out	0x1d, r18	; 29
    1c86:	0f b6       	in	r0, 0x3f	; 63
    1c88:	f8 94       	cli
    1c8a:	e2 9a       	sbi	0x1c, 2	; 28
    1c8c:	e1 9a       	sbi	0x1c, 1	; 28
    1c8e:	0f be       	out	0x3f, r0	; 63
    1c90:	08 95       	ret

00001c92 <_exit>:
    1c92:	f8 94       	cli

00001c94 <__stop_program>:
    1c94:	ff cf       	rjmp	.-2      	; 0x1c94 <__stop_program>
