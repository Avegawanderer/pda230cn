
pid1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001d66  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000070  00800060  00001d66  00001e1a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000102  008000d0  008000d0  00001e8a  2**0
                  ALLOC
  3 .eeprom       00000070  00810000  00810000  00001e8a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         00000ad4  00000000  00000000  00001efc  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      00000269  00000000  00000000  000029d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      0000002f  00000000  00000000  00002c39  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000438  00000000  00000000  00002c68  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   000046b0  00000000  00000000  000030a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00001608  00000000  00000000  00007750  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00001dd4  00000000  00000000  00008d58  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  0000098c  00000000  00000000  0000ab2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000012ba  00000000  00000000  0000b4b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00001be3  00000000  00000000  0000c772  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000358  00000000  00000000  0000e355  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	ce c0       	rjmp	.+412    	; 0x19e <__ctors_end>
       2:	e8 c0       	rjmp	.+464    	; 0x1d4 <__bad_interrupt>
       4:	e7 c0       	rjmp	.+462    	; 0x1d4 <__bad_interrupt>
       6:	3d cd       	rjmp	.-1414   	; 0xfffffa82 <__eeprom_end+0xff7efa12>
       8:	e5 c0       	rjmp	.+458    	; 0x1d4 <__bad_interrupt>
       a:	e4 c0       	rjmp	.+456    	; 0x1d4 <__bad_interrupt>
       c:	e3 c0       	rjmp	.+454    	; 0x1d4 <__bad_interrupt>
       e:	e2 c0       	rjmp	.+452    	; 0x1d4 <__bad_interrupt>
      10:	e1 c0       	rjmp	.+450    	; 0x1d4 <__bad_interrupt>
      12:	d8 cb       	rjmp	.-2128   	; 0xfffff7c4 <__eeprom_end+0xff7ef754>
      14:	df c0       	rjmp	.+446    	; 0x1d4 <__bad_interrupt>
      16:	de c0       	rjmp	.+444    	; 0x1d4 <__bad_interrupt>
      18:	dd c0       	rjmp	.+442    	; 0x1d4 <__bad_interrupt>
      1a:	dc c0       	rjmp	.+440    	; 0x1d4 <__bad_interrupt>
      1c:	b0 c1       	rjmp	.+864    	; 0x37e <__vector_14>
      1e:	da c0       	rjmp	.+436    	; 0x1d4 <__bad_interrupt>
      20:	93 cb       	rjmp	.-2266   	; 0xfffff748 <__eeprom_end+0xff7ef6d8>
      22:	d8 c0       	rjmp	.+432    	; 0x1d4 <__bad_interrupt>
      24:	d7 c0       	rjmp	.+430    	; 0x1d4 <__bad_interrupt>

00000026 <pmCalibrationDefaults>:
      26:	16 78 c3 00 91 01                                   .x....

0000002c <pmGlobalDefaults>:
      2c:	32 0a 01 1e                                         2...

00000030 <led_encode_table>:
      30:	30 3f 4f 3f 31 06 32 5b 33 4f 34 66 53 6d 35 6d     0?O?1.2[3O4fSm5m
      40:	36 7d 37 07 38 7f 39 6f 2e 80 2c 80 2d 40 5f 08     6}7.8.9o..,.-@_.
      50:	20 00 b0 63 41 77 43 39 46 71 4e 54 44 5e 50 73      ..cAwC9FqNTD^Ps
      60:	45 79 55 3e 47 3d 52 50                             EyU>G=RP

00000068 <ms_calibDo>:
      68:	20 20 20 00                                            .

0000006c <ms_autoPoffDo>:
      6c:	4f 46 46 20 20 20 00                                OFF   .

00000073 <ms_soundEnDo>:
      73:	53 4e 44 20 20 20 00                                SND   .

0000007a <ms_rollDo>:
      7a:	20 20 20 20 20 20 00                                      .

00000081 <ms_realTempDo>:
      81:	20 20 20 20 b0 43 00                                    .C.

00000088 <menuFunctionSet>:
      88:	01 b3 07 b5 07 64 06 03 5c 06 7a 07 d5 05 02 77     .....d..\.z....w
      98:	07 23 07 55 06 05 4f 06 f0 06 00 00 0b e3 05 f0     .#.U..O.........
      a8:	06 f1 05 04 49 06 7f 06 00 00 0c e3 05 7f 06 ff     ....I...........
      b8:	05 06 3d 06 ba 06 00 00 09 e3 05 ba 06 10 06 07     ..=.............
      c8:	31 06 ba 06 00 00 0a e3 05 ba 06 10 06 08 66 06     1.............f.
      d8:	1f 06 00 00 0d 66 06 1f 06 00 00 0e 23 06 1b 06     .....f......#...
      e8:	0d 06                                               ..

000000ea <menuJumpSet>:
      ea:	01 c0 00 03 8a 01 00 01 02 40 01 00 02 05 0a 02     .........@......
      fa:	00 01 01 80 02 00 02 05 0a 03 00 81 01 40 03 00     .............@..
     10a:	02 01 60 05 00 82 01 00 05 80 00 04 4a 05 40 00     ..`.........J.@.
     11a:	07 8a 05 00 01 0b 0a 0b 00 81 05 0a 0b 00 02 05     ................
     12a:	2a 04 00 82 01 00 04 80 00 06 4a 04 40 00 05 8a     *.........J.@...
     13a:	04 00 01 0c 0a 0c 00 81 04 0a 0c 00 02 04 2a 06     ..............*.
     14a:	00 82 01 00 06 80 00 07 4a 06 40 00 04 8a 06 00     ........J.@.....
     15a:	01 09 00 07 00 82 01 00 07 80 00 05 4a 07 40 00     ............J.@.
     16a:	06 8a 07 00 01 0a 00 09 00 02 06 0a 09 00 01 08     ................
     17a:	05 08 00 83 01 00 0a 00 02 07 0a 0a 00 01 0d 05     ................
     18a:	0d 00 83 01 00 01 00 40 0e 00 02 00 40 0e 00 0e     .......@....@...
     19a:	d5 01 01 00                                         ....

0000019e <__ctors_end>:
     19e:	11 24       	eor	r1, r1
     1a0:	1f be       	out	0x3f, r1	; 63
     1a2:	cf e5       	ldi	r28, 0x5F	; 95
     1a4:	d4 e0       	ldi	r29, 0x04	; 4
     1a6:	de bf       	out	0x3e, r29	; 62
     1a8:	cd bf       	out	0x3d, r28	; 61

000001aa <__do_copy_data>:
     1aa:	10 e0       	ldi	r17, 0x00	; 0
     1ac:	a0 e6       	ldi	r26, 0x60	; 96
     1ae:	b0 e0       	ldi	r27, 0x00	; 0
     1b0:	e6 e6       	ldi	r30, 0x66	; 102
     1b2:	fd e1       	ldi	r31, 0x1D	; 29
     1b4:	02 c0       	rjmp	.+4      	; 0x1ba <__do_copy_data+0x10>
     1b6:	05 90       	lpm	r0, Z+
     1b8:	0d 92       	st	X+, r0
     1ba:	a0 3d       	cpi	r26, 0xD0	; 208
     1bc:	b1 07       	cpc	r27, r17
     1be:	d9 f7       	brne	.-10     	; 0x1b6 <__do_copy_data+0xc>

000001c0 <__do_clear_bss>:
     1c0:	21 e0       	ldi	r18, 0x01	; 1
     1c2:	a0 ed       	ldi	r26, 0xD0	; 208
     1c4:	b0 e0       	ldi	r27, 0x00	; 0
     1c6:	01 c0       	rjmp	.+2      	; 0x1ca <.do_clear_bss_start>

000001c8 <.do_clear_bss_loop>:
     1c8:	1d 92       	st	X+, r1

000001ca <.do_clear_bss_start>:
     1ca:	a2 3d       	cpi	r26, 0xD2	; 210
     1cc:	b2 07       	cpc	r27, r18
     1ce:	e1 f7       	brne	.-8      	; 0x1c8 <.do_clear_bss_loop>
     1d0:	05 d8       	rcall	.-4086   	; 0xfffff1dc <__eeprom_end+0xff7ef16c>
     1d2:	c7 cd       	rjmp	.-1138   	; 0xfffffd62 <__eeprom_end+0xff7efcf2>

000001d4 <__bad_interrupt>:
     1d4:	15 cf       	rjmp	.-470    	; 0x0 <__vectors>

000001d6 <conv_ADC_to_Celsius>:
//---------------------------------------------//
//---------------------------------------------//


int16_t conv_ADC_to_Celsius(uint16_t adc_value)
{	
     1d6:	0f 93       	push	r16
     1d8:	1f 93       	push	r17
	return (int16_t)(((int32_t)adc_value * k_norm + offset_norm) / (COEFF_SCALE));
     1da:	20 91 d0 00 	lds	r18, 0x00D0
     1de:	30 91 d1 00 	lds	r19, 0x00D1
     1e2:	40 91 d2 00 	lds	r20, 0x00D2
     1e6:	50 91 d3 00 	lds	r21, 0x00D3
     1ea:	dc 01       	movw	r26, r24
     1ec:	4d dd       	rcall	.-1382   	; 0xfffffc88 <__eeprom_end+0xff7efc18>
     1ee:	00 91 d4 00 	lds	r16, 0x00D4
     1f2:	10 91 d5 00 	lds	r17, 0x00D5
     1f6:	20 91 d6 00 	lds	r18, 0x00D6
     1fa:	30 91 d7 00 	lds	r19, 0x00D7
     1fe:	60 0f       	add	r22, r16
     200:	71 1f       	adc	r23, r17
     202:	82 1f       	adc	r24, r18
     204:	93 1f       	adc	r25, r19
     206:	28 ee       	ldi	r18, 0xE8	; 232
     208:	33 e0       	ldi	r19, 0x03	; 3
     20a:	40 e0       	ldi	r20, 0x00	; 0
     20c:	50 e0       	ldi	r21, 0x00	; 0
     20e:	09 dd       	rcall	.-1518   	; 0xfffffc22 <__eeprom_end+0xff7efbb2>
}
     210:	c9 01       	movw	r24, r18
     212:	1f 91       	pop	r17
     214:	0f 91       	pop	r16
     216:	08 95       	ret

00000218 <conv_Celsius_to_ADC>:

uint16_t conv_Celsius_to_ADC(int16_t degree_value)
{
     218:	0f 93       	push	r16
     21a:	1f 93       	push	r17
	degree_value += 1;
     21c:	dc 01       	movw	r26, r24
     21e:	11 96       	adiw	r26, 0x01	; 1
	return (uint16_t)(((int32_t)degree_value * COEFF_SCALE - offset_norm) / k_norm);
     220:	28 ee       	ldi	r18, 0xE8	; 232
     222:	33 e0       	ldi	r19, 0x03	; 3
     224:	2b dd       	rcall	.-1450   	; 0xfffffc7c <__eeprom_end+0xff7efc0c>
     226:	00 91 d4 00 	lds	r16, 0x00D4
     22a:	10 91 d5 00 	lds	r17, 0x00D5
     22e:	20 91 d6 00 	lds	r18, 0x00D6
     232:	30 91 d7 00 	lds	r19, 0x00D7
     236:	60 1b       	sub	r22, r16
     238:	71 0b       	sbc	r23, r17
     23a:	82 0b       	sbc	r24, r18
     23c:	93 0b       	sbc	r25, r19
     23e:	20 91 d0 00 	lds	r18, 0x00D0
     242:	30 91 d1 00 	lds	r19, 0x00D1
     246:	40 91 d2 00 	lds	r20, 0x00D2
     24a:	50 91 d3 00 	lds	r21, 0x00D3
     24e:	e9 dc       	rcall	.-1582   	; 0xfffffc22 <__eeprom_end+0xff7efbb2>
}
     250:	c9 01       	movw	r24, r18
     252:	1f 91       	pop	r17
     254:	0f 91       	pop	r16
     256:	08 95       	ret

00000258 <calculateCoeffs>:

void calculateCoeffs(void)
{
     258:	8f 92       	push	r8
     25a:	9f 92       	push	r9
     25c:	af 92       	push	r10
     25e:	bf 92       	push	r11
     260:	cf 92       	push	r12
     262:	df 92       	push	r13
     264:	ef 92       	push	r14
     266:	ff 92       	push	r15
     268:	cf 93       	push	r28
     26a:	df 93       	push	r29
	k_norm = ((int32_t)(cp.cpoint2 - cp.cpoint1) * COEFF_SCALE) / ((int32_t)(cp.cpoint2_adc - cp.cpoint1_adc));
     26c:	f0 90 8b 01 	lds	r15, 0x018B
     270:	a0 91 8c 01 	lds	r26, 0x018C
     274:	b0 e0       	ldi	r27, 0x00	; 0
     276:	af 19       	sub	r26, r15
     278:	b1 09       	sbc	r27, r1
     27a:	c0 91 8d 01 	lds	r28, 0x018D
     27e:	d0 91 8e 01 	lds	r29, 0x018E
     282:	28 ee       	ldi	r18, 0xE8	; 232
     284:	33 e0       	ldi	r19, 0x03	; 3
     286:	fa dc       	rcall	.-1548   	; 0xfffffc7c <__eeprom_end+0xff7efc0c>
     288:	20 91 8f 01 	lds	r18, 0x018F
     28c:	30 91 90 01 	lds	r19, 0x0190
     290:	2c 1b       	sub	r18, r28
     292:	3d 0b       	sbc	r19, r29
     294:	40 e0       	ldi	r20, 0x00	; 0
     296:	50 e0       	ldi	r21, 0x00	; 0
     298:	c4 dc       	rcall	.-1656   	; 0xfffffc22 <__eeprom_end+0xff7efbb2>
     29a:	49 01       	movw	r8, r18
     29c:	5a 01       	movw	r10, r20
     29e:	20 93 d0 00 	sts	0x00D0, r18
     2a2:	30 93 d1 00 	sts	0x00D1, r19
     2a6:	40 93 d2 00 	sts	0x00D2, r20
     2aa:	50 93 d3 00 	sts	0x00D3, r21
	offset_norm = (int32_t)cp.cpoint1 * COEFF_SCALE - (int32_t)cp.cpoint1_adc * k_norm;
     2ae:	2f 2d       	mov	r18, r15
     2b0:	30 e0       	ldi	r19, 0x00	; 0
     2b2:	a8 ee       	ldi	r26, 0xE8	; 232
     2b4:	b3 e0       	ldi	r27, 0x03	; 3
     2b6:	d6 dc       	rcall	.-1620   	; 0xfffffc64 <__eeprom_end+0xff7efbf4>
     2b8:	6b 01       	movw	r12, r22
     2ba:	7c 01       	movw	r14, r24
     2bc:	de 01       	movw	r26, r28
     2be:	a5 01       	movw	r20, r10
     2c0:	94 01       	movw	r18, r8
     2c2:	e2 dc       	rcall	.-1596   	; 0xfffffc88 <__eeprom_end+0xff7efc18>
     2c4:	c6 1a       	sub	r12, r22
     2c6:	d7 0a       	sbc	r13, r23
     2c8:	e8 0a       	sbc	r14, r24
     2ca:	f9 0a       	sbc	r15, r25
     2cc:	c0 92 d4 00 	sts	0x00D4, r12
     2d0:	d0 92 d5 00 	sts	0x00D5, r13
     2d4:	e0 92 d6 00 	sts	0x00D6, r14
     2d8:	f0 92 d7 00 	sts	0x00D7, r15
}
     2dc:	df 91       	pop	r29
     2de:	cf 91       	pop	r28
     2e0:	ff 90       	pop	r15
     2e2:	ef 90       	pop	r14
     2e4:	df 90       	pop	r13
     2e6:	cf 90       	pop	r12
     2e8:	bf 90       	pop	r11
     2ea:	af 90       	pop	r10
     2ec:	9f 90       	pop	r9
     2ee:	8f 90       	pop	r8
     2f0:	08 95       	ret

000002f2 <update_normalized_adc>:
void update_normalized_adc()
{
	uint8_t i;
	uint16_t adc_raw_summ = 0;
	// Disable interrupts from ADC - to save data integrity
	ADCSRA &= ~(1<<ADIE);	
     2f2:	33 98       	cbi	0x06, 3	; 6
     2f4:	ed e1       	ldi	r30, 0x1D	; 29
     2f6:	f1 e0       	ldi	r31, 0x01	; 1


void update_normalized_adc()
{
	uint8_t i;
	uint16_t adc_raw_summ = 0;
     2f8:	80 e0       	ldi	r24, 0x00	; 0
     2fa:	90 e0       	ldi	r25, 0x00	; 0
	// Disable interrupts from ADC - to save data integrity
	ADCSRA &= ~(1<<ADIE);	
	// Get normalized mean window summ
	for (i=0;i<ADC_BUFFER_LENGTH;i++)
		adc_raw_summ += raw_adc_buffer[i];
     2fc:	21 91       	ld	r18, Z+
     2fe:	31 91       	ld	r19, Z+
     300:	82 0f       	add	r24, r18
     302:	93 1f       	adc	r25, r19
	uint8_t i;
	uint16_t adc_raw_summ = 0;
	// Disable interrupts from ADC - to save data integrity
	ADCSRA &= ~(1<<ADIE);	
	// Get normalized mean window summ
	for (i=0;i<ADC_BUFFER_LENGTH;i++)
     304:	21 e0       	ldi	r18, 0x01	; 1
     306:	ed 35       	cpi	r30, 0x5D	; 93
     308:	f2 07       	cpc	r31, r18
     30a:	c1 f7       	brne	.-16     	; 0x2fc <update_normalized_adc+0xa>
		adc_raw_summ += raw_adc_buffer[i];
	// Enable interrupts from ADC
	ADCSRA |= (1<<ADIE);
     30c:	33 9a       	sbi	0x06, 3	; 6
	
	adc_normalized = adc_raw_summ >> 5;		// ADC_BUFFER_LENGTH = 32 !
     30e:	9c 01       	movw	r18, r24
     310:	45 e0       	ldi	r20, 0x05	; 5
     312:	36 95       	lsr	r19
     314:	27 95       	ror	r18
     316:	4a 95       	dec	r20
     318:	e1 f7       	brne	.-8      	; 0x312 <update_normalized_adc+0x20>
     31a:	30 93 5e 01 	sts	0x015E, r19
     31e:	20 93 5d 01 	sts	0x015D, r18
	adc_oversampled = adc_raw_summ >> 3;	// adc_oversampled is 4 times greater than adc_normalized
     322:	53 e0       	ldi	r21, 0x03	; 3
     324:	96 95       	lsr	r25
     326:	87 95       	ror	r24
     328:	5a 95       	dec	r21
     32a:	e1 f7       	brne	.-8      	; 0x324 <update_normalized_adc+0x32>
     32c:	90 93 1c 01 	sts	0x011C, r25
     330:	80 93 1b 01 	sts	0x011B, r24
	// Filter
	adc_filtered = fir_i16_i8(adc_oversampled, filter_buffer, &fir_filter_rect);	
     334:	40 e6       	ldi	r20, 0x60	; 96
     336:	50 e0       	ldi	r21, 0x00	; 0
     338:	62 e6       	ldi	r22, 0x62	; 98
     33a:	71 e0       	ldi	r23, 0x01	; 1
     33c:	8c d2       	rcall	.+1304   	; 0x856 <fir_i16_i8>
     33e:	90 93 1a 01 	sts	0x011A, r25
     342:	80 93 19 01 	sts	0x0119, r24
	// Check sensor
	adc_status = 0;
     346:	10 92 5f 01 	sts	0x015F, r1
	if (adc_normalized < 50)
     34a:	80 91 5d 01 	lds	r24, 0x015D
     34e:	90 91 5e 01 	lds	r25, 0x015E
     352:	82 33       	cpi	r24, 0x32	; 50
     354:	91 05       	cpc	r25, r1
     356:	10 f4       	brcc	.+4      	; 0x35c <update_normalized_adc+0x6a>
		adc_status |= SENSOR_ERROR_NO_PRESENT;
     358:	81 e0       	ldi	r24, 0x01	; 1
     35a:	04 c0       	rjmp	.+8      	; 0x364 <update_normalized_adc+0x72>
	else if (adc_normalized > 1000)
     35c:	89 3e       	cpi	r24, 0xE9	; 233
     35e:	93 40       	sbci	r25, 0x03	; 3
     360:	18 f0       	brcs	.+6      	; 0x368 <update_normalized_adc+0x76>
		adc_status |= SENSOR_ERROR_SHORTED;
     362:	82 e0       	ldi	r24, 0x02	; 2
     364:	80 93 5f 01 	sts	0x015F, r24
     368:	08 95       	ret

0000036a <update_Celsius>:
}

void update_Celsius(void)
{
	// Convert to Celsius degree
	adc_celsius = conv_ADC_to_Celsius(adc_normalized);
     36a:	80 91 5d 01 	lds	r24, 0x015D
     36e:	90 91 5e 01 	lds	r25, 0x015E
     372:	31 df       	rcall	.-414    	; 0x1d6 <conv_ADC_to_Celsius>
     374:	90 93 61 01 	sts	0x0161, r25
     378:	80 93 60 01 	sts	0x0160, r24
     37c:	08 95       	ret

0000037e <__vector_14>:



// ADC conversion is started by system timer (Timer2 ISR) every 1 ms
ISR(ADC_vect)
{
     37e:	1f 92       	push	r1
     380:	0f 92       	push	r0
     382:	0f b6       	in	r0, 0x3f	; 63
     384:	0f 92       	push	r0
     386:	11 24       	eor	r1, r1
     388:	2f 93       	push	r18
     38a:	3f 93       	push	r19
     38c:	4f 93       	push	r20
     38e:	8f 93       	push	r24
     390:	9f 93       	push	r25
     392:	ef 93       	push	r30
     394:	ff 93       	push	r31
	static uint8_t adc_buffer_pointer = ADC_BUFFER_LENGTH;
	// Get new sample
	uint16_t new_sample = 1024 - ADC;	
     396:	24 b1       	in	r18, 0x04	; 4
     398:	35 b1       	in	r19, 0x05	; 5
	// Add new sample to the buffer
	raw_adc_buffer[--adc_buffer_pointer] = new_sample;
     39a:	40 91 77 00 	lds	r20, 0x0077
     39e:	41 50       	subi	r20, 0x01	; 1
     3a0:	40 93 77 00 	sts	0x0077, r20
     3a4:	e4 2f       	mov	r30, r20
     3a6:	f0 e0       	ldi	r31, 0x00	; 0
     3a8:	ee 0f       	add	r30, r30
     3aa:	ff 1f       	adc	r31, r31
     3ac:	e3 5e       	subi	r30, 0xE3	; 227
     3ae:	fe 4f       	sbci	r31, 0xFE	; 254
// ADC conversion is started by system timer (Timer2 ISR) every 1 ms
ISR(ADC_vect)
{
	static uint8_t adc_buffer_pointer = ADC_BUFFER_LENGTH;
	// Get new sample
	uint16_t new_sample = 1024 - ADC;	
     3b0:	80 e0       	ldi	r24, 0x00	; 0
     3b2:	94 e0       	ldi	r25, 0x04	; 4
     3b4:	82 1b       	sub	r24, r18
     3b6:	93 0b       	sbc	r25, r19
	// Add new sample to the buffer
	raw_adc_buffer[--adc_buffer_pointer] = new_sample;
     3b8:	91 83       	std	Z+1, r25	; 0x01
     3ba:	80 83       	st	Z, r24
	if (adc_buffer_pointer == 0)
     3bc:	41 11       	cpse	r20, r1
     3be:	03 c0       	rjmp	.+6      	; 0x3c6 <__vector_14+0x48>
		adc_buffer_pointer = ADC_BUFFER_LENGTH;
     3c0:	80 e2       	ldi	r24, 0x20	; 32
     3c2:	80 93 77 00 	sts	0x0077, r24
}	
     3c6:	ff 91       	pop	r31
     3c8:	ef 91       	pop	r30
     3ca:	9f 91       	pop	r25
     3cc:	8f 91       	pop	r24
     3ce:	4f 91       	pop	r20
     3d0:	3f 91       	pop	r19
     3d2:	2f 91       	pop	r18
     3d4:	0f 90       	pop	r0
     3d6:	0f be       	out	0x3f, r0	; 63
     3d8:	0f 90       	pop	r0
     3da:	1f 90       	pop	r1
     3dc:	18 95       	reti

000003de <process_buttons>:
	uint8_t long_press_mask;
	uint8_t long_press_event_mask;
	
	uint16_t composed_state;
	
	raw_delayed = raw_current;
     3de:	50 91 de 00 	lds	r21, 0x00DE
	raw_delayed_inv = raw_current_inv;
     3e2:	40 91 78 00 	lds	r20, 0x0078
	raw_current = raw_button_state;
     3e6:	90 91 ab 01 	lds	r25, 0x01AB
     3ea:	90 93 de 00 	sts	0x00DE, r25
	raw_current_inv = ~raw_current;
     3ee:	69 2f       	mov	r22, r25
     3f0:	60 95       	com	r22
     3f2:	60 93 78 00 	sts	0x0078, r22
	
	// Must be before press_timer update
	long_press_mask = (press_timer >= LONG_PRESS_DELAY) ? 0xFF : 0x00;
     3f6:	80 91 df 00 	lds	r24, 0x00DF
     3fa:	8c 30       	cpi	r24, 0x0C	; 12
     3fc:	10 f0       	brcs	.+4      	; 0x402 <process_buttons+0x24>
     3fe:	2f ef       	ldi	r18, 0xFF	; 255
     400:	01 c0       	rjmp	.+2      	; 0x404 <process_buttons+0x26>
     402:	20 e0       	ldi	r18, 0x00	; 0
	
	if (raw_delayed != raw_current)
     404:	59 17       	cp	r21, r25
     406:	19 f0       	breq	.+6      	; 0x40e <process_buttons+0x30>
	{
		press_timer = 0;
     408:	10 92 df 00 	sts	0x00DF, r1
     40c:	05 c0       	rjmp	.+10     	; 0x418 <process_buttons+0x3a>
	}
	else if (press_timer <= LONG_PRESS_DELAY)
     40e:	8d 30       	cpi	r24, 0x0D	; 13
     410:	18 f4       	brcc	.+6      	; 0x418 <process_buttons+0x3a>
	{
		press_timer++;
     412:	8f 5f       	subi	r24, 0xFF	; 255
     414:	80 93 df 00 	sts	0x00DF, r24
	}
	
	// Must after press_timer update
	long_press_event_mask = (press_timer == LONG_PRESS_DELAY) ? 0xFF : 0x00;
     418:	70 91 df 00 	lds	r23, 0x00DF
     41c:	7c 30       	cpi	r23, 0x0C	; 12
     41e:	11 f4       	brne	.+4      	; 0x424 <process_buttons+0x46>
     420:	3f ef       	ldi	r19, 0xFF	; 255
     422:	01 c0       	rjmp	.+2      	; 0x426 <process_buttons+0x48>
     424:	30 e0       	ldi	r19, 0x00	; 0
			
	button_action_down = raw_current & raw_delayed_inv;
     426:	89 2f       	mov	r24, r25
     428:	84 23       	and	r24, r20
     42a:	80 93 db 00 	sts	0x00DB, r24
			
	if (press_timer > REPEAT_DELAY)
     42e:	77 30       	cpi	r23, 0x07	; 7
     430:	08 f0       	brcs	.+2      	; 0x434 <process_buttons+0x56>
		raw_delayed_inv |= 0xFF;
     432:	4f ef       	ldi	r20, 0xFF	; 255
	
	button_action_rep = raw_current & raw_delayed_inv;
     434:	49 23       	and	r20, r25
     436:	40 93 da 00 	sts	0x00DA, r20
	
	button_action_up_short = raw_current_inv & raw_delayed & ~long_press_mask;
     43a:	20 95       	com	r18
     43c:	56 23       	and	r21, r22
     43e:	25 23       	and	r18, r21
     440:	20 93 d9 00 	sts	0x00D9, r18
	//button_action_up_long  = raw_current_inv & raw_delayed & long_press_mask;
	button_action_long  = raw_current & long_press_event_mask;
     444:	39 23       	and	r19, r25
     446:	30 93 d8 00 	sts	0x00D8, r19
	
	// Compose button state
	composed_state = (button_action_down & (BD_MENU | BD_UP | BD_DOWN | BD_ROTFWD | BD_ROTREV | BD_HEATCTRL | BD_CYCLE));
     44a:	8d 7f       	andi	r24, 0xFD	; 253
     44c:	90 e0       	ldi	r25, 0x00	; 0
	if (button_action_up_short & BD_MENU)
     44e:	25 fd       	sbrc	r18, 5
		composed_state |= BS_MENU;
     450:	91 60       	ori	r25, 0x01	; 1
	//if (button_action_up_long & BD_MENU)
	if (button_action_long & BD_MENU)
     452:	35 fd       	sbrc	r19, 5
		composed_state |= BL_MENU;
     454:	92 60       	ori	r25, 0x02	; 2
	if (button_action_rep & BD_UP)
     456:	46 fd       	sbrc	r20, 6
		composed_state |= BR_UP;	
     458:	94 60       	ori	r25, 0x04	; 4
	if (button_action_rep & BD_DOWN)
     45a:	47 fd       	sbrc	r20, 7
		composed_state |= BR_DOWN;
     45c:	98 60       	ori	r25, 0x08	; 8
		
	if (button_action_up_short & BD_HEATCTRL)
     45e:	20 fd       	sbrc	r18, 0
		composed_state |= BS_HEATCTRL;
     460:	90 61       	ori	r25, 0x10	; 16
	if (button_action_long & BD_HEATCTRL)
     462:	30 fd       	sbrc	r19, 0
		composed_state |= BL_HEATCTRL;
     464:	90 62       	ori	r25, 0x20	; 32

	button_state = composed_state;
     466:	90 93 dd 00 	sts	0x00DD, r25
     46a:	80 93 dc 00 	sts	0x00DC, r24
     46e:	08 95       	ret

00000470 <getDataCRC>:

}


static uint8_t getDataCRC(void *p,uint8_t byte_count)
{
     470:	fc 01       	movw	r30, r24
	uint8_t crc_byte = 0;
     472:	80 e0       	ldi	r24, 0x00	; 0
	while(byte_count--)
     474:	09 c0       	rjmp	.+18     	; 0x488 <getDataCRC+0x18>
	{
		// Using ibutton CRC function for reason of 8-bit output CRC
		crc_byte = _crc_ibutton_update (crc_byte, *(uint8_t*)p++);	
     476:	91 91       	ld	r25, Z+

static __inline__ uint8_t
_crc_ibutton_update(uint8_t __crc, uint8_t __data)
{
	uint8_t __i, __pattern;
	__asm__ __volatile__ (
     478:	89 27       	eor	r24, r25
     47a:	98 e0       	ldi	r25, 0x08	; 8
     47c:	2c e8       	ldi	r18, 0x8C	; 140
     47e:	86 95       	lsr	r24
     480:	08 f4       	brcc	.+2      	; 0x484 <getDataCRC+0x14>
     482:	82 27       	eor	r24, r18
     484:	9a 95       	dec	r25
     486:	d9 f7       	brne	.-10     	; 0x47e <getDataCRC+0xe>


static uint8_t getDataCRC(void *p,uint8_t byte_count)
{
	uint8_t crc_byte = 0;
	while(byte_count--)
     488:	61 50       	subi	r22, 0x01	; 1
     48a:	a8 f7       	brcc	.-22     	; 0x476 <getDataCRC+0x6>
	{
		// Using ibutton CRC function for reason of 8-bit output CRC
		crc_byte = _crc_ibutton_update (crc_byte, *(uint8_t*)p++);	
	}
	return crc_byte;
}
     48c:	08 95       	ret

0000048e <processRollControl>:



// Function to control motor rotation
void processRollControl(void)
{	
     48e:	cf 93       	push	r28
	uint8_t beepState = 0;
	static uint8_t force_rotate = 0;
	
	// Process auto power off control
	if (autoPowerOffState & AUTO_POFF_ACTIVE)
     490:	80 91 e0 00 	lds	r24, 0x00E0
     494:	80 ff       	sbrs	r24, 0
     496:	25 c0       	rjmp	.+74     	; 0x4e2 <processRollControl+0x54>
	{
		stopCycleRolling(RESET_POINTS);	
     498:	81 e0       	ldi	r24, 0x01	; 1
     49a:	02 d9       	rcall	.-3580   	; 0xfffff6a0 <__eeprom_end+0xff7ef630>
		if ( (adc_status & (SENSOR_ERROR_NO_PRESENT | SENSOR_ERROR_SHORTED)) ||
     49c:	80 91 5f 01 	lds	r24, 0x015F
     4a0:	83 70       	andi	r24, 0x03	; 3
     4a2:	39 f4       	brne	.+14     	; 0x4b2 <processRollControl+0x24>
			 (adc_celsius > (POFF_MOTOR_TRESHOLD + POFF_MOTOR_HYST)) )
     4a4:	80 91 60 01 	lds	r24, 0x0160
     4a8:	90 91 61 01 	lds	r25, 0x0161
	
	// Process auto power off control
	if (autoPowerOffState & AUTO_POFF_ACTIVE)
	{
		stopCycleRolling(RESET_POINTS);	
		if ( (adc_status & (SENSOR_ERROR_NO_PRESENT | SENSOR_ERROR_SHORTED)) ||
     4ac:	88 33       	cpi	r24, 0x38	; 56
     4ae:	91 05       	cpc	r25, r1
     4b0:	54 f0       	brlt	.+20     	; 0x4c6 <processRollControl+0x38>
			 (adc_celsius > (POFF_MOTOR_TRESHOLD + POFF_MOTOR_HYST)) )
		{
			// If there is any sensor error, or
			// if temperature is greater than (threshold + some hysteresis) 
			if (!(rollState & (ROLL_FWD | ROLL_REV)))
     4b2:	80 91 03 01 	lds	r24, 0x0103
     4b6:	83 70       	andi	r24, 0x03	; 3
     4b8:	09 f0       	breq	.+2      	; 0x4bc <processRollControl+0x2e>
     4ba:	6d c0       	rjmp	.+218    	; 0x596 <processRollControl+0x108>
			{
				// If motor is stopped
				setMotorDirection(ROLL_FWD);		// Start rotating in order to prevent rollers damage
     4bc:	81 e0       	ldi	r24, 0x01	; 1
     4be:	cf d8       	rcall	.-3682   	; 0xfffff65e <__eeprom_end+0xff7ef5ee>
				force_rotate = 0;					// Do not start motor on power off exit
     4c0:	10 92 e2 00 	sts	0x00E2, r1
     4c4:	68 c0       	rjmp	.+208    	; 0x596 <processRollControl+0x108>
			}
		}
		else if (adc_celsius <= POFF_MOTOR_TRESHOLD)
     4c6:	c3 97       	sbiw	r24, 0x33	; 51
     4c8:	0c f0       	brlt	.+2      	; 0x4cc <processRollControl+0x3e>
     4ca:	65 c0       	rjmp	.+202    	; 0x596 <processRollControl+0x108>
		{
			if (rollState & (ROLL_FWD | ROLL_REV))
     4cc:	80 91 03 01 	lds	r24, 0x0103
     4d0:	83 70       	andi	r24, 0x03	; 3
     4d2:	09 f4       	brne	.+2      	; 0x4d6 <processRollControl+0x48>
     4d4:	60 c0       	rjmp	.+192    	; 0x596 <processRollControl+0x108>
			{	
				// If temperature is below threshold and motor is rotating
				setMotorDirection(0);			// Stop the motor
     4d6:	80 e0       	ldi	r24, 0x00	; 0
     4d8:	c2 d8       	rcall	.-3708   	; 0xfffff65e <__eeprom_end+0xff7ef5ee>
				force_rotate = ROLL_FWD;		// Start motor on power-off mode exit
     4da:	81 e0       	ldi	r24, 0x01	; 1
     4dc:	80 93 e2 00 	sts	0x00E2, r24
     4e0:	5a c0       	rjmp	.+180    	; 0x596 <processRollControl+0x108>
		}
	}
	else
	{
		// Control direction by buttons
		if ((raw_button_state & (BD_ROTFWD | BD_ROTREV)) == (BD_ROTFWD | BD_ROTREV))
     4e2:	80 91 ab 01 	lds	r24, 0x01AB
     4e6:	84 71       	andi	r24, 0x14	; 20
     4e8:	84 31       	cpi	r24, 0x14	; 20
     4ea:	11 f4       	brne	.+4      	; 0x4f0 <processRollControl+0x62>
		{
			// Both Forward and Reverse buttons are pressed - stop
			// Attention - stopping motor when rollers are hot can possibly damage them
			setMotorDirection(0);
     4ec:	80 e0       	ldi	r24, 0x00	; 0
     4ee:	19 c0       	rjmp	.+50     	; 0x522 <processRollControl+0x94>
		}
		else if (button_action_down & BD_ROTFWD)
     4f0:	80 91 db 00 	lds	r24, 0x00DB
     4f4:	82 ff       	sbrs	r24, 2
     4f6:	04 c0       	rjmp	.+8      	; 0x500 <processRollControl+0x72>
		{
			setMotorDirection(ROLL_FWD);	
     4f8:	81 e0       	ldi	r24, 0x01	; 1
     4fa:	b1 d8       	rcall	.-3742   	; 0xfffff65e <__eeprom_end+0xff7ef5ee>
			beepState |= 0x01;			// pressed FWD button
     4fc:	c1 e0       	ldi	r28, 0x01	; 1
     4fe:	13 c0       	rjmp	.+38     	; 0x526 <processRollControl+0x98>
		}		
		else if (button_action_down & BD_ROTREV)
     500:	84 ff       	sbrs	r24, 4
     502:	04 c0       	rjmp	.+8      	; 0x50c <processRollControl+0x7e>
		{
			setMotorDirection(ROLL_REV);
     504:	82 e0       	ldi	r24, 0x02	; 2
     506:	ab d8       	rcall	.-3754   	; 0xfffff65e <__eeprom_end+0xff7ef5ee>
			beepState |= 0x02;			// pressed REV button
     508:	c2 e0       	ldi	r28, 0x02	; 2
     50a:	0d c0       	rjmp	.+26     	; 0x526 <processRollControl+0x98>
		}		
		else if (button_action_long & BD_CYCLE)
     50c:	80 91 d8 00 	lds	r24, 0x00D8
     510:	83 ff       	sbrs	r24, 3
     512:	04 c0       	rjmp	.+8      	; 0x51c <processRollControl+0x8e>
		{
			stopCycleRolling(RESET_POINTS);		// Reset points and disable CYCLE mode (if was enabled)
     514:	81 e0       	ldi	r24, 0x01	; 1
     516:	c4 d8       	rcall	.-3704   	; 0xfffff6a0 <__eeprom_end+0xff7ef630>
			beepState |= 0x08;					// reset of points by long pressing of ROLL button
     518:	c8 e0       	ldi	r28, 0x08	; 8
     51a:	05 c0       	rjmp	.+10     	; 0x526 <processRollControl+0x98>
		}
		else if (force_rotate)
     51c:	80 91 e2 00 	lds	r24, 0x00E2
     520:	81 11       	cpse	r24, r1
		{
			// Auto power off mode was exited by pressing some other button, not direction buttons
			// Start roll, but do not beep in this case
			setMotorDirection(force_rotate);
     522:	9d d8       	rcall	.-3782   	; 0xfffff65e <__eeprom_end+0xff7ef5ee>


// Function to control motor rotation
void processRollControl(void)
{	
	uint8_t beepState = 0;
     524:	c0 e0       	ldi	r28, 0x00	; 0
		{
			// Auto power off mode was exited by pressing some other button, not direction buttons
			// Start roll, but do not beep in this case
			setMotorDirection(force_rotate);
		}
		force_rotate = 0;		// First normal pass will clear 
     526:	10 92 e2 00 	sts	0x00E2, r1
			
		if (button_action_up_short & BD_CYCLE)
     52a:	80 91 d9 00 	lds	r24, 0x00D9
     52e:	83 ff       	sbrs	r24, 3
     530:	0e c0       	rjmp	.+28     	; 0x54e <processRollControl+0xc0>
		{
			if (rollState & ROLL_CYCLE)
     532:	80 91 03 01 	lds	r24, 0x0103
     536:	82 ff       	sbrs	r24, 2
     538:	04 c0       	rjmp	.+8      	; 0x542 <processRollControl+0xb4>
			{
				stopCycleRolling(DO_NOT_RESET_POINTS);
     53a:	80 e0       	ldi	r24, 0x00	; 0
     53c:	b1 d8       	rcall	.-3742   	; 0xfffff6a0 <__eeprom_end+0xff7ef630>
				beepState |= 0x20;		// stopped cycle
     53e:	c0 62       	ori	r28, 0x20	; 32
     540:	06 c0       	rjmp	.+12     	; 0x54e <processRollControl+0xc0>
			}
			else if (startCycleRolling())
     542:	ea d8       	rcall	.-3628   	; 0xfffff718 <__eeprom_end+0xff7ef6a8>
     544:	88 23       	and	r24, r24
     546:	11 f0       	breq	.+4      	; 0x54c <processRollControl+0xbe>
			{
				beepState |= 0x10;		// started cycle
     548:	c0 61       	ori	r28, 0x10	; 16
     54a:	01 c0       	rjmp	.+2      	; 0x54e <processRollControl+0xc0>
			}
			else
			{
				beepState |= 0x40;		// failed to start cycle
     54c:	c0 64       	ori	r28, 0x40	; 64
			}			
		}		
		
		// ROLL_DIR_CHANGED is set only when direction is changed automatically,
		// not when changed by calling setMotorDirection() function
		if (rollState & ROLL_DIR_CHANGED)
     54e:	80 91 03 01 	lds	r24, 0x0103
     552:	85 ff       	sbrs	r24, 5
     554:	04 c0       	rjmp	.+8      	; 0x55e <processRollControl+0xd0>
		{
			rollState &= ~ROLL_DIR_CHANGED;
     556:	8f 7d       	andi	r24, 0xDF	; 223
     558:	80 93 03 01 	sts	0x0103, r24
			beepState |= 0x04;	
     55c:	c4 60       	ori	r28, 0x04	; 4
		}
		if (rollState & CYCLE_ROLL_DONE)
     55e:	80 91 03 01 	lds	r24, 0x0103
     562:	84 ff       	sbrs	r24, 4
     564:	04 c0       	rjmp	.+8      	; 0x56e <processRollControl+0xe0>
		{
			rollState &= ~CYCLE_ROLL_DONE;
     566:	8f 7e       	andi	r24, 0xEF	; 239
     568:	80 93 03 01 	sts	0x0103, r24
			beepState |= 0x80;	
     56c:	c0 68       	ori	r28, 0x80	; 128
		}		
			
		//-----------//
			
		if (beepState & 0x80)		// Roll cycle done
     56e:	c7 ff       	sbrs	r28, 7
     570:	03 c0       	rjmp	.+6      	; 0x578 <processRollControl+0xea>
		{
			Sound_Play(m_siren4);	
     572:	8c e0       	ldi	r24, 0x0C	; 12
     574:	90 e0       	ldi	r25, 0x00	; 0
     576:	0e c0       	rjmp	.+28     	; 0x594 <processRollControl+0x106>
		}		
		else if (beepState & 0x40)	// Roll cycle start fail
     578:	c6 ff       	sbrs	r28, 6
     57a:	03 c0       	rjmp	.+6      	; 0x582 <processRollControl+0xf4>
		{
			Sound_Play(m_beep_500Hz_40ms);	
     57c:	8c e5       	ldi	r24, 0x5C	; 92
     57e:	90 e0       	ldi	r25, 0x00	; 0
     580:	09 c0       	rjmp	.+18     	; 0x594 <processRollControl+0x106>
		} 
		else if (beepState & 0x08)	// Reset points
     582:	c3 ff       	sbrs	r28, 3
     584:	03 c0       	rjmp	.+6      	; 0x58c <processRollControl+0xfe>
		{
			Sound_Play(m_beep_800Hz_40ms);	
     586:	80 e6       	ldi	r24, 0x60	; 96
     588:	90 e0       	ldi	r25, 0x00	; 0
     58a:	04 c0       	rjmp	.+8      	; 0x594 <processRollControl+0x106>
		}							// Other
		else if ( beepState & (0x01 | 0x02 | 0x10 | 0x20 | 0x04) )
     58c:	c7 73       	andi	r28, 0x37	; 55
     58e:	19 f0       	breq	.+6      	; 0x596 <processRollControl+0x108>
		{
			Sound_Play(m_beep_1000Hz_40ms);	
     590:	84 e6       	ldi	r24, 0x64	; 100
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	fe da       	rcall	.-2564   	; 0xfffffb92 <__eeprom_end+0xff7efb22>
		}			
			
	}

	//----- LED indication ------//
	clearExtraLeds(LED_ROTFWD | LED_ROTREV);
     596:	88 e1       	ldi	r24, 0x18	; 24
     598:	be d2       	rcall	.+1404   	; 0xb16 <clearExtraLeds>
	if (rollState & ROLL_FWD)
     59a:	80 91 03 01 	lds	r24, 0x0103
     59e:	80 ff       	sbrs	r24, 0
     5a0:	02 c0       	rjmp	.+4      	; 0x5a6 <processRollControl+0x118>
		setExtraLeds(LED_ROTFWD);
     5a2:	88 e0       	ldi	r24, 0x08	; 8
     5a4:	03 c0       	rjmp	.+6      	; 0x5ac <processRollControl+0x11e>
	else if (rollState & ROLL_REV)
     5a6:	81 ff       	sbrs	r24, 1
     5a8:	03 c0       	rjmp	.+6      	; 0x5b0 <processRollControl+0x122>
		setExtraLeds(LED_ROTREV);
     5aa:	80 e1       	ldi	r24, 0x10	; 16
}
     5ac:	cf 91       	pop	r28
	//----- LED indication ------//
	clearExtraLeds(LED_ROTFWD | LED_ROTREV);
	if (rollState & ROLL_FWD)
		setExtraLeds(LED_ROTFWD);
	else if (rollState & ROLL_REV)
		setExtraLeds(LED_ROTREV);
     5ae:	ad c2       	rjmp	.+1370   	; 0xb0a <setExtraLeds>
}
     5b0:	cf 91       	pop	r28
     5b2:	08 95       	ret

000005b4 <processHeaterControl>:




void processHeaterControl(void)
{
     5b4:	0f 93       	push	r16
     5b6:	1f 93       	push	r17
     5b8:	cf 93       	push	r28
     5ba:	df 93       	push	r29
	uint16_t setPoint;
	uint16_t processValue;
	uint16_t pid_output = 0;
	
	// Process heater ON/OFF control by button
	if (button_state & BS_HEATCTRL)
     5bc:	80 91 dc 00 	lds	r24, 0x00DC
     5c0:	90 91 dd 00 	lds	r25, 0x00DD
     5c4:	94 ff       	sbrs	r25, 4
     5c6:	0b c0       	rjmp	.+22     	; 0x5de <processHeaterControl+0x2a>
	{
		heaterState ^= HEATER_ENABLED;
     5c8:	20 91 e1 00 	lds	r18, 0x00E1
     5cc:	31 e0       	ldi	r19, 0x01	; 1
     5ce:	23 27       	eor	r18, r19
     5d0:	20 93 e1 00 	sts	0x00E1, r18
		// Force update heater power
		sys_timers.flags |= UPDATE_PID;		// Not very good approach if UPDATE_PID flag is used outside this function
     5d4:	20 91 89 00 	lds	r18, 0x0089
     5d8:	20 64       	ori	r18, 0x40	; 64
     5da:	20 93 89 00 	sts	0x0089, r18
     5de:	20 91 e1 00 	lds	r18, 0x00E1
	}
	
	// Process PID controller reset
	if (button_state & BL_HEATCTRL)
     5e2:	95 ff       	sbrs	r25, 5
     5e4:	09 c0       	rjmp	.+18     	; 0x5f8 <processHeaterControl+0x44>
	{
		heaterState |= RESET_PID;
     5e6:	24 60       	ori	r18, 0x04	; 4
     5e8:	20 93 e1 00 	sts	0x00E1, r18
		// Force update heater power
		sys_timers.flags |= UPDATE_PID;
     5ec:	80 91 89 00 	lds	r24, 0x0089
     5f0:	80 64       	ori	r24, 0x40	; 64
     5f2:	80 93 89 00 	sts	0x0089, r24
     5f6:	03 c0       	rjmp	.+6      	; 0x5fe <processHeaterControl+0x4a>
	}
	else
	{
		heaterState &= ~RESET_PID;
     5f8:	2b 7f       	andi	r18, 0xFB	; 251
     5fa:	20 93 e1 00 	sts	0x00E1, r18
	}
	
	// Process auto power off control and sensor errors
	if ((autoPowerOffState & AUTO_POFF_ACTIVE) || (adc_status & (SENSOR_ERROR_NO_PRESENT | SENSOR_ERROR_SHORTED)))
     5fe:	80 91 e0 00 	lds	r24, 0x00E0
     602:	80 fd       	sbrc	r24, 0
     604:	04 c0       	rjmp	.+8      	; 0x60e <processHeaterControl+0x5a>
     606:	80 91 5f 01 	lds	r24, 0x015F
     60a:	83 70       	andi	r24, 0x03	; 3
     60c:	29 f0       	breq	.+10     	; 0x618 <processHeaterControl+0x64>
	{
		heaterState &= ~HEATER_ENABLED;
     60e:	80 91 e1 00 	lds	r24, 0x00E1
     612:	8e 7f       	andi	r24, 0xFE	; 254
     614:	80 93 e1 00 	sts	0x00E1, r24
	}	

	// Update integrator limits if set point is changed
	if (heaterState & SETPOINT_CHANGED)
     618:	80 91 e1 00 	lds	r24, 0x00E1
     61c:	83 ff       	sbrs	r24, 3
     61e:	08 c0       	rjmp	.+16     	; 0x630 <processHeaterControl+0x7c>
	{
		setPIDIntegratorLimit(p.setup_temp_value);
     620:	80 91 91 01 	lds	r24, 0x0191
     624:	ec d6       	rcall	.+3544   	; 0x13fe <setPIDIntegratorLimit>
		// Force update heater power
		sys_timers.flags |= UPDATE_PID;
     626:	80 91 89 00 	lds	r24, 0x0089
     62a:	80 64       	ori	r24, 0x40	; 64
     62c:	80 93 89 00 	sts	0x0089, r24
	}

	
	// Check if heater control should be updated
	// PID call interval is a multiple of Celsius update interval. 
	if (sys_timers.flags & UPDATE_PID)
     630:	80 91 89 00 	lds	r24, 0x0089
     634:	86 ff       	sbrs	r24, 6
     636:	36 c0       	rjmp	.+108    	; 0x6a4 <processHeaterControl+0xf0>
	{
		// Convert temperature setup to equal ADC value
		set_value_adc = conv_Celsius_to_ADC(p.setup_temp_value);					
     638:	80 91 91 01 	lds	r24, 0x0191
     63c:	90 e0       	ldi	r25, 0x00	; 0
     63e:	ec dd       	rcall	.-1064   	; 0x218 <conv_Celsius_to_ADC>

		// PID input: 1 count ~ 0.125 Celsius degree (see adc.c)
		setPoint = set_value_adc * ADC_OVERSAMPLE_RATE;		
     640:	ec 01       	movw	r28, r24
     642:	cc 0f       	add	r28, r28
     644:	dd 1f       	adc	r29, r29
     646:	cc 0f       	add	r28, r28
     648:	dd 1f       	adc	r29, r29
		processValue = adc_filtered;
     64a:	00 91 19 01 	lds	r16, 0x0119
     64e:	10 91 1a 01 	lds	r17, 0x011A
		
		// Process PID
		// If heater is disabled, output will be 0
		pid_output = processPID(setPoint, processValue, heaterState);		
     652:	40 91 e1 00 	lds	r20, 0x00E1
     656:	b8 01       	movw	r22, r16
     658:	ce 01       	movw	r24, r28
     65a:	ea d6       	rcall	.+3540   	; 0x1430 <processPID>
     65c:	90 e0       	ldi	r25, 0x00	; 0
		
		// If unregulated mode is selected, override PID output 
		// This mode must be used with care for calibration only
		if ((heaterState & HEATER_ENABLED) && (p.setup_temp_value >= MAX_SET_TEMP))
     65e:	20 91 e1 00 	lds	r18, 0x00E1
     662:	20 ff       	sbrs	r18, 0
     664:	06 c0       	rjmp	.+12     	; 0x672 <processHeaterControl+0xbe>
     666:	20 91 91 01 	lds	r18, 0x0191
     66a:	2f 3f       	cpi	r18, 0xFF	; 255
     66c:	11 f4       	brne	.+4      	; 0x672 <processHeaterControl+0xbe>
			pid_output = HEATER_MAX_POWER;		
     66e:	84 e6       	ldi	r24, 0x64	; 100
     670:	90 e0       	ldi	r25, 0x00	; 0
			
		// Set new heater power value	
		setHeaterPower(pid_output);	
     672:	e8 d7       	rcall	.+4048   	; 0x1644 <setHeaterPower>
		
		
		//------- Debug --------//		
		// PID input:
		dbg_SetPointCelsius = (heaterState & HEATER_ENABLED) ? p.setup_temp_value : 0;
     674:	80 91 e1 00 	lds	r24, 0x00E1
     678:	98 2f       	mov	r25, r24
     67a:	91 70       	andi	r25, 0x01	; 1
     67c:	80 ff       	sbrs	r24, 0
     67e:	03 c0       	rjmp	.+6      	; 0x686 <processHeaterControl+0xd2>
     680:	80 91 91 01 	lds	r24, 0x0191
     684:	01 c0       	rjmp	.+2      	; 0x688 <processHeaterControl+0xd4>
     686:	80 e0       	ldi	r24, 0x00	; 0
     688:	80 93 8a 01 	sts	0x018A, r24
		dbg_SetPointPID = (heaterState & HEATER_ENABLED) ? setPoint : 0;
     68c:	91 11       	cpse	r25, r1
     68e:	02 c0       	rjmp	.+4      	; 0x694 <processHeaterControl+0xe0>
     690:	c0 e0       	ldi	r28, 0x00	; 0
     692:	d0 e0       	ldi	r29, 0x00	; 0
     694:	d0 93 98 01 	sts	0x0198, r29
     698:	c0 93 97 01 	sts	0x0197, r28
		dbg_RealTempPID = processValue;
     69c:	10 93 96 01 	sts	0x0196, r17
     6a0:	00 93 95 01 	sts	0x0195, r16
		
	}	
		
	
	//----- LED indication ------//
	if (heaterState & HEATER_ENABLED)
     6a4:	80 91 e1 00 	lds	r24, 0x00E1
     6a8:	80 ff       	sbrs	r24, 0
     6aa:	06 c0       	rjmp	.+12     	; 0x6b8 <processHeaterControl+0x104>
		setExtraLeds(LED_HEATER);
     6ac:	84 e0       	ldi	r24, 0x04	; 4
	else
		clearExtraLeds(LED_HEATER);
	
}
     6ae:	df 91       	pop	r29
     6b0:	cf 91       	pop	r28
     6b2:	1f 91       	pop	r17
     6b4:	0f 91       	pop	r16
	}	
		
	
	//----- LED indication ------//
	if (heaterState & HEATER_ENABLED)
		setExtraLeds(LED_HEATER);
     6b6:	29 c2       	rjmp	.+1106   	; 0xb0a <setExtraLeds>
	else
		clearExtraLeds(LED_HEATER);
     6b8:	84 e0       	ldi	r24, 0x04	; 4
	
}
     6ba:	df 91       	pop	r29
     6bc:	cf 91       	pop	r28
     6be:	1f 91       	pop	r17
     6c0:	0f 91       	pop	r16
	
	//----- LED indication ------//
	if (heaterState & HEATER_ENABLED)
		setExtraLeds(LED_HEATER);
	else
		clearExtraLeds(LED_HEATER);
     6c2:	29 c2       	rjmp	.+1106   	; 0xb16 <clearExtraLeds>

000006c4 <processHeaterEvents>:

// Function to monitor heater events
void processHeaterEvents(void)
{
	// Generate temperature changed event
	if (setPoint_prev != p.setup_temp_value)
     6c4:	90 91 91 01 	lds	r25, 0x0191
     6c8:	20 91 79 00 	lds	r18, 0x0079
     6cc:	80 91 e1 00 	lds	r24, 0x00E1
     6d0:	29 17       	cp	r18, r25
     6d2:	31 f0       	breq	.+12     	; 0x6e0 <processHeaterEvents+0x1c>
	{
		heaterState |= SETPOINT_CHANGED;
     6d4:	88 60       	ori	r24, 0x08	; 8
     6d6:	80 93 e1 00 	sts	0x00E1, r24
		setPoint_prev = p.setup_temp_value;
     6da:	90 93 79 00 	sts	0x0079, r25
     6de:	08 95       	ret
	}
	else
	{
		heaterState &= ~SETPOINT_CHANGED;
     6e0:	87 7f       	andi	r24, 0xF7	; 247
     6e2:	80 93 e1 00 	sts	0x00E1, r24
     6e6:	08 95       	ret

000006e8 <processHeaterAlerts>:
// Function to process all heater alerts:
//	- sensor errors
//	- getting close to desired temperature
//	- continuous heating when disabled
void processHeaterAlerts(void)
{
     6e8:	cf 93       	push	r28
     6ea:	df 93       	push	r29
	static uint8_t tempAlertRange = TEMP_ALERT_RANGE;
	static int16_t refCapturedTemp = INT16_MAX;
	int16_t currentTemperature = adc_celsius;
     6ec:	c0 91 60 01 	lds	r28, 0x0160
     6f0:	d0 91 61 01 	lds	r29, 0x0161
	
	// ADC sensor errors alert
	if (adc_status & (SENSOR_ERROR_NO_PRESENT | SENSOR_ERROR_SHORTED))
     6f4:	80 91 5f 01 	lds	r24, 0x015F
     6f8:	83 70       	andi	r24, 0x03	; 3
     6fa:	41 f0       	breq	.+16     	; 0x70c <processHeaterAlerts+0x24>
	{
		if (sys_timers.flags & EXPIRED_10SEC)
     6fc:	80 91 89 00 	lds	r24, 0x0089
     700:	81 ff       	sbrs	r24, 1
     702:	43 c0       	rjmp	.+134    	; 0x78a <processHeaterAlerts+0xa2>
		{
			// Enable beeper output regardless of menu setting
			Sound_OverrideDisable();
     704:	58 da       	rcall	.-2896   	; 0xfffffbb6 <__eeprom_end+0xff7efb46>
			Sound_Play(m_siren3);
     706:	84 e1       	ldi	r24, 0x14	; 20
     708:	90 e0       	ldi	r25, 0x00	; 0
     70a:	3c c0       	rjmp	.+120    	; 0x784 <processHeaterAlerts+0x9c>
		return;
	}
	
	
	// Indicate reaching of desired temperature
	if ( (currentTemperature > p.setup_temp_value - tempAlertRange) && (currentTemperature < p.setup_temp_value + tempAlertRange) )
     70c:	20 91 91 01 	lds	r18, 0x0191
     710:	30 e0       	ldi	r19, 0x00	; 0
     712:	60 91 7a 00 	lds	r22, 0x007A
     716:	86 2f       	mov	r24, r22
     718:	90 e0       	ldi	r25, 0x00	; 0
     71a:	a9 01       	movw	r20, r18
     71c:	48 1b       	sub	r20, r24
     71e:	59 0b       	sbc	r21, r25
     720:	4c 17       	cp	r20, r28
     722:	5d 07       	cpc	r21, r29
     724:	84 f4       	brge	.+32     	; 0x746 <processHeaterAlerts+0x5e>
     726:	82 0f       	add	r24, r18
     728:	93 1f       	adc	r25, r19
     72a:	c8 17       	cp	r28, r24
     72c:	d9 07       	cpc	r29, r25
     72e:	5c f4       	brge	.+22     	; 0x746 <processHeaterAlerts+0x5e>
	{
		if ((tempAlertRange == TEMP_ALERT_RANGE) && (heaterState & HEATER_ENABLED))
     730:	65 30       	cpi	r22, 0x05	; 5
     732:	39 f4       	brne	.+14     	; 0x742 <processHeaterAlerts+0x5a>
     734:	80 91 e1 00 	lds	r24, 0x00E1
     738:	80 ff       	sbrs	r24, 0
     73a:	03 c0       	rjmp	.+6      	; 0x742 <processHeaterAlerts+0x5a>
		{
			Sound_Play(m_siren1);
     73c:	84 e3       	ldi	r24, 0x34	; 52
     73e:	90 e0       	ldi	r25, 0x00	; 0
     740:	28 da       	rcall	.-2992   	; 0xfffffb92 <__eeprom_end+0xff7efb22>
		}
		// Add some hysteresis
		tempAlertRange = TEMP_ALERT_RANGE + TEMP_ALERT_HYST;
     742:	8a e0       	ldi	r24, 0x0A	; 10
     744:	01 c0       	rjmp	.+2      	; 0x748 <processHeaterAlerts+0x60>
	}			
	else
	{
		tempAlertRange = TEMP_ALERT_RANGE;
     746:	85 e0       	ldi	r24, 0x05	; 5
     748:	80 93 7a 00 	sts	0x007A, r24
	// Growing temperature with heater disabled alert 
	// This alert is done regardless of global sound enable
	// A false triggering may occur if ambient temperature grows.
	// To reset the warning in this case just turn on heater for at least one systimer tick (50ms)
	// If heater is enabled, it is implied that user controls heating process
	if (heaterState & (HEATER_ENABLED | CALIBRATION_ACTIVE))
     74c:	80 91 e1 00 	lds	r24, 0x00E1
     750:	83 70       	andi	r24, 0x03	; 3
     752:	09 f0       	breq	.+2      	; 0x756 <processHeaterAlerts+0x6e>
     754:	0b c0       	rjmp	.+22     	; 0x76c <processHeaterAlerts+0x84>
	{
		// Heater enabled, just save current temperature as reference
		// Same if calibration in progress, even if heater is disabled
		refCapturedTemp = currentTemperature;
	}
	else if (sys_timers.flags & EXPIRED_10SEC)
     756:	80 91 89 00 	lds	r24, 0x0089
     75a:	81 ff       	sbrs	r24, 1
     75c:	16 c0       	rjmp	.+44     	; 0x78a <processHeaterAlerts+0xa2>
	{
		// Heater disabled. If temperature is falling,
		if (currentTemperature < refCapturedTemp)
     75e:	80 91 7b 00 	lds	r24, 0x007B
     762:	90 91 7c 00 	lds	r25, 0x007C
     766:	c8 17       	cp	r28, r24
     768:	d9 07       	cpc	r29, r25
     76a:	2c f4       	brge	.+10     	; 0x776 <processHeaterAlerts+0x8e>
		{
			// save current temperature as reference
			refCapturedTemp = currentTemperature;
     76c:	d0 93 7c 00 	sts	0x007C, r29
     770:	c0 93 7b 00 	sts	0x007B, r28
     774:	0a c0       	rjmp	.+20     	; 0x78a <processHeaterAlerts+0xa2>
		else
		{
			// Heater is disabled. If current temperature is higher than reference + some safe interval,
			// there might be a hardware failure - short circuit, etc
			// BEEP like a devil  }:-(
			if (currentTemperature >= (refCapturedTemp + SAFE_TEMP_INTERVAL))
     776:	43 96       	adiw	r24, 0x13	; 19
     778:	8c 17       	cp	r24, r28
     77a:	9d 07       	cpc	r25, r29
     77c:	34 f4       	brge	.+12     	; 0x78a <processHeaterAlerts+0xa2>
			{
				// Enable beeper output regardless of menu setting
				Sound_OverrideDisable();
     77e:	1b da       	rcall	.-3018   	; 0xfffffbb6 <__eeprom_end+0xff7efb46>
				Sound_Play(m_siren2);
     780:	8a e1       	ldi	r24, 0x1A	; 26
     782:	90 e0       	ldi	r25, 0x00	; 0
			}
		}
	}
	

}
     784:	df 91       	pop	r29
     786:	cf 91       	pop	r28
			// BEEP like a devil  }:-(
			if (currentTemperature >= (refCapturedTemp + SAFE_TEMP_INTERVAL))
			{
				// Enable beeper output regardless of menu setting
				Sound_OverrideDisable();
				Sound_Play(m_siren2);
     788:	04 ca       	rjmp	.-3064   	; 0xfffffb92 <__eeprom_end+0xff7efb22>
			}
		}
	}
	

}
     78a:	df 91       	pop	r29
     78c:	cf 91       	pop	r28
     78e:	08 95       	ret

00000790 <saveCalibrationToEEPROM>:


void saveCalibrationToEEPROM(void)
{
	// Calibration parameters normally are only saved after calibrating 
	eeprom_update_block(&cp,&eeCalibrationParams,sizeof(cParams_t));	
     790:	46 e0       	ldi	r20, 0x06	; 6
     792:	50 e0       	ldi	r21, 0x00	; 0
     794:	62 e0       	ldi	r22, 0x02	; 2
     796:	70 e0       	ldi	r23, 0x00	; 0
     798:	8b e8       	ldi	r24, 0x8B	; 139
     79a:	91 e0       	ldi	r25, 0x01	; 1
     79c:	c2 da       	rcall	.-2684   	; 0xfffffd22 <__eeprom_end+0xff7efcb2>
	#ifdef USE_EEPROM_CRC
	uint8_t new_crc_byte = getDataCRC(&cp,sizeof(cParams_t));
     79e:	66 e0       	ldi	r22, 0x06	; 6
     7a0:	8b e8       	ldi	r24, 0x8B	; 139
     7a2:	91 e0       	ldi	r25, 0x01	; 1
     7a4:	65 de       	rcall	.-822    	; 0x470 <getDataCRC>
	eeprom_update_byte(&ee_cParamsCRC,new_crc_byte);
     7a6:	68 2f       	mov	r22, r24
     7a8:	80 e0       	ldi	r24, 0x00	; 0
     7aa:	90 e0       	ldi	r25, 0x00	; 0
     7ac:	c9 ca       	rjmp	.-2670   	; 0xfffffd40 <__eeprom_end+0xff7efcd0>

000007ae <saveGlobalParamsToEEPROM>:

void saveGlobalParamsToEEPROM(void)
{
	// Save global parameters to EEPROM
	// eeprom_update_block() updates only bytes that were changed
	eeprom_update_block(&p,&eeGlobalParams,sizeof(gParams_t));
     7ae:	44 e0       	ldi	r20, 0x04	; 4
     7b0:	50 e0       	ldi	r21, 0x00	; 0
     7b2:	68 e0       	ldi	r22, 0x08	; 8
     7b4:	70 e0       	ldi	r23, 0x00	; 0
     7b6:	81 e9       	ldi	r24, 0x91	; 145
     7b8:	91 e0       	ldi	r25, 0x01	; 1
     7ba:	b3 da       	rcall	.-2714   	; 0xfffffd22 <__eeprom_end+0xff7efcb2>
	#ifdef USE_EEPROM_CRC
	uint8_t new_crc_byte = getDataCRC(&p,sizeof(gParams_t));
     7bc:	64 e0       	ldi	r22, 0x04	; 4
     7be:	81 e9       	ldi	r24, 0x91	; 145
     7c0:	91 e0       	ldi	r25, 0x01	; 1
     7c2:	56 de       	rcall	.-852    	; 0x470 <getDataCRC>
	eeprom_update_byte(&ee_gParamsCRC,new_crc_byte);
     7c4:	68 2f       	mov	r22, r24
     7c6:	81 e0       	ldi	r24, 0x01	; 1
     7c8:	90 e0       	ldi	r25, 0x00	; 0
     7ca:	ba ca       	rjmp	.-2700   	; 0xfffffd40 <__eeprom_end+0xff7efcd0>

000007cc <restoreGlobalParams>:
	return crc_byte;
}


uint8_t restoreGlobalParams(void)
{	
     7cc:	cf 93       	push	r28
     7ce:	df 93       	push	r29
	uint8_t defaults_used = 0;
	
	// Restore global parameters - temperature setting, sound enable, etc.
	eeprom_read_block(&p,&eeGlobalParams,sizeof(gParams_t));
     7d0:	44 e0       	ldi	r20, 0x04	; 4
     7d2:	50 e0       	ldi	r21, 0x00	; 0
     7d4:	68 e0       	ldi	r22, 0x08	; 8
     7d6:	70 e0       	ldi	r23, 0x00	; 0
     7d8:	81 e9       	ldi	r24, 0x91	; 145
     7da:	91 e0       	ldi	r25, 0x01	; 1
     7dc:	8a da       	rcall	.-2796   	; 0xfffffcf2 <__eeprom_end+0xff7efc82>
	// Restore ADC calibration parameters
	eeprom_read_block(&cp,&eeCalibrationParams,sizeof(cParams_t));
     7de:	46 e0       	ldi	r20, 0x06	; 6
     7e0:	50 e0       	ldi	r21, 0x00	; 0
     7e2:	62 e0       	ldi	r22, 0x02	; 2
     7e4:	70 e0       	ldi	r23, 0x00	; 0
     7e6:	8b e8       	ldi	r24, 0x8B	; 139
     7e8:	91 e0       	ldi	r25, 0x01	; 1
     7ea:	83 da       	rcall	.-2810   	; 0xfffffcf2 <__eeprom_end+0xff7efc82>
	#ifdef USE_EEPROM_CRC
	uint8_t crc_byte;
	uint8_t temp8u;
	
	//------- Check global params -------//
	crc_byte = getDataCRC(&p,sizeof(gParams_t));
     7ec:	64 e0       	ldi	r22, 0x04	; 4
     7ee:	81 e9       	ldi	r24, 0x91	; 145
     7f0:	91 e0       	ldi	r25, 0x01	; 1
     7f2:	3e de       	rcall	.-900    	; 0x470 <getDataCRC>
     7f4:	c8 2f       	mov	r28, r24
	temp8u = eeprom_read_byte(&ee_gParamsCRC);
     7f6:	81 e0       	ldi	r24, 0x01	; 1
     7f8:	90 e0       	ldi	r25, 0x00	; 0
     7fa:	8b da       	rcall	.-2794   	; 0xfffffd12 <__eeprom_end+0xff7efca2>
	// Restore global defaults if corrupted
	if (temp8u != crc_byte)
     7fc:	8c 17       	cp	r24, r28
     7fe:	51 f0       	breq	.+20     	; 0x814 <restoreGlobalParams+0x48>
	{
		//PGM_read_block(&p,&pmGlobalDefaults,sizeof(gParams_t));
		memcpy_P(&p,&pmGlobalDefaults,sizeof(gParams_t));
     800:	44 e0       	ldi	r20, 0x04	; 4
     802:	50 e0       	ldi	r21, 0x00	; 0
     804:	6c e2       	ldi	r22, 0x2C	; 44
     806:	70 e0       	ldi	r23, 0x00	; 0
     808:	81 e9       	ldi	r24, 0x91	; 145
     80a:	91 e0       	ldi	r25, 0x01	; 1
     80c:	69 da       	rcall	.-2862   	; 0xfffffce0 <__eeprom_end+0xff7efc70>
		// Save restored default values with correct CRC
		saveGlobalParamsToEEPROM();
     80e:	cf df       	rcall	.-98     	; 0x7ae <saveGlobalParamsToEEPROM>
		defaults_used |= 0x01;
     810:	c1 e0       	ldi	r28, 0x01	; 1
     812:	01 c0       	rjmp	.+2      	; 0x816 <restoreGlobalParams+0x4a>
}


uint8_t restoreGlobalParams(void)
{	
	uint8_t defaults_used = 0;
     814:	c0 e0       	ldi	r28, 0x00	; 0
		saveGlobalParamsToEEPROM();
		defaults_used |= 0x01;
	}
	
	//----- Check calibration params -----//
	crc_byte = getDataCRC(&cp,sizeof(cParams_t));
     816:	66 e0       	ldi	r22, 0x06	; 6
     818:	8b e8       	ldi	r24, 0x8B	; 139
     81a:	91 e0       	ldi	r25, 0x01	; 1
     81c:	29 de       	rcall	.-942    	; 0x470 <getDataCRC>
     81e:	d8 2f       	mov	r29, r24
	temp8u = eeprom_read_byte(&ee_cParamsCRC);
     820:	80 e0       	ldi	r24, 0x00	; 0
     822:	90 e0       	ldi	r25, 0x00	; 0
     824:	76 da       	rcall	.-2836   	; 0xfffffd12 <__eeprom_end+0xff7efca2>
	// Restore calibration defaults if corrupted
	if (temp8u != crc_byte)
     826:	8d 17       	cp	r24, r29
     828:	49 f0       	breq	.+18     	; 0x83c <restoreGlobalParams+0x70>
	{
		//PGM_read_block(&cp,&pmCalibrationDefaults,sizeof(cParams_t));
		memcpy_P(&cp,&pmCalibrationDefaults,sizeof(cParams_t));
     82a:	46 e0       	ldi	r20, 0x06	; 6
     82c:	50 e0       	ldi	r21, 0x00	; 0
     82e:	66 e2       	ldi	r22, 0x26	; 38
     830:	70 e0       	ldi	r23, 0x00	; 0
     832:	8b e8       	ldi	r24, 0x8B	; 139
     834:	91 e0       	ldi	r25, 0x01	; 1
     836:	54 da       	rcall	.-2904   	; 0xfffffce0 <__eeprom_end+0xff7efc70>
		// Save restored default values with correct CRC
		saveCalibrationToEEPROM();
     838:	ab df       	rcall	.-170    	; 0x790 <saveCalibrationToEEPROM>
		defaults_used |= 0x02;	
     83a:	c2 60       	ori	r28, 0x02	; 2
	}
	#endif
	
	return defaults_used;
}
     83c:	8c 2f       	mov	r24, r28
     83e:	df 91       	pop	r29
     840:	cf 91       	pop	r28
     842:	08 95       	ret

00000844 <exitPowerOff>:
}

void exitPowerOff(void)
{
	// Put all ports into HI-Z
	DDRB = 0x00;
     844:	17 ba       	out	0x17, r1	; 23
	PORTB = 0x00;
     846:	18 ba       	out	0x18, r1	; 24
	DDRC = 0x00;
     848:	14 ba       	out	0x14, r1	; 20
	PORTC = 0x00;
     84a:	15 ba       	out	0x15, r1	; 21
	DDRD = 0x00;
     84c:	11 ba       	out	0x11, r1	; 17
	PORTD = 0x00;
     84e:	12 ba       	out	0x12, r1	; 18
	
	// Disable all interrupts
	cli();
     850:	f8 94       	cli
	
	saveGlobalParamsToEEPROM();
     852:	ad df       	rcall	.-166    	; 0x7ae <saveGlobalParamsToEEPROM>
     854:	ff cf       	rjmp	.-2      	; 0x854 <exitPowerOff+0x10>

00000856 <fir_i16_i8>:
// FIR digital filter
// Samples: signed, 16-bit
// Coeffs:  signed, 8-bit
//---------------------------------------------//
int16_t fir_i16_i8(int16_t new_sample, int16_t *samples, filter8bit_core_t* iir_core)
{
     856:	cf 92       	push	r12
     858:	df 92       	push	r13
     85a:	ef 92       	push	r14
     85c:	ff 92       	push	r15
     85e:	0f 93       	push	r16
     860:	1f 93       	push	r17
     862:	cf 93       	push	r28
     864:	df 93       	push	r29
     866:	8c 01       	movw	r16, r24
     868:	eb 01       	movw	r28, r22
     86a:	fa 01       	movw	r30, r20
	int32_t summ;
	uint8_t i;
	
	summ = new_sample * iir_core->coeffs[0];
     86c:	23 81       	ldd	r18, Z+3	; 0x03
     86e:	20 03       	mulsu	r18, r16
     870:	60 01       	movw	r12, r0
     872:	21 9f       	mul	r18, r17
     874:	d0 0c       	add	r13, r0
     876:	11 24       	eor	r1, r1
     878:	ee 24       	eor	r14, r14
     87a:	d7 fc       	sbrc	r13, 7
     87c:	e0 94       	com	r14
     87e:	fe 2c       	mov	r15, r14
	for (i=iir_core->n-1; i>0; i--)
     880:	40 81       	ld	r20, Z
     882:	1e c0       	rjmp	.+60     	; 0x8c0 <fir_i16_i8+0x6a>
	{
		samples[i] = samples[i-1];
     884:	84 2f       	mov	r24, r20
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	dc 01       	movw	r26, r24
     88a:	11 97       	sbiw	r26, 0x01	; 1
     88c:	aa 0f       	add	r26, r26
     88e:	bb 1f       	adc	r27, r27
     890:	ac 0f       	add	r26, r28
     892:	bd 1f       	adc	r27, r29
     894:	2d 91       	ld	r18, X+
     896:	3c 91       	ld	r19, X
     898:	dc 01       	movw	r26, r24
     89a:	aa 0f       	add	r26, r26
     89c:	bb 1f       	adc	r27, r27
     89e:	ac 0f       	add	r26, r28
     8a0:	bd 1f       	adc	r27, r29
     8a2:	2d 93       	st	X+, r18
     8a4:	3c 93       	st	X, r19
		summ += (int32_t)samples[i] * iir_core->coeffs[i];
     8a6:	df 01       	movw	r26, r30
     8a8:	a8 0f       	add	r26, r24
     8aa:	b9 1f       	adc	r27, r25
     8ac:	13 96       	adiw	r26, 0x03	; 3
     8ae:	ac 91       	ld	r26, X
     8b0:	bb 27       	eor	r27, r27
     8b2:	a7 fd       	sbrc	r26, 7
     8b4:	b0 95       	com	r27
     8b6:	d0 d9       	rcall	.-3168   	; 0xfffffc58 <__eeprom_end+0xff7efbe8>
     8b8:	c6 0e       	add	r12, r22
     8ba:	d7 1e       	adc	r13, r23
     8bc:	e8 1e       	adc	r14, r24
     8be:	f9 1e       	adc	r15, r25
{
	int32_t summ;
	uint8_t i;
	
	summ = new_sample * iir_core->coeffs[0];
	for (i=iir_core->n-1; i>0; i--)
     8c0:	41 50       	subi	r20, 0x01	; 1
     8c2:	01 f7       	brne	.-64     	; 0x884 <fir_i16_i8+0x2e>
	{
		samples[i] = samples[i-1];
		summ += (int32_t)samples[i] * iir_core->coeffs[i];
	}
	samples[0] = new_sample;
     8c4:	19 83       	std	Y+1, r17	; 0x01
     8c6:	08 83       	st	Y, r16
	return (int16_t)(summ / iir_core->dc_gain);
     8c8:	21 81       	ldd	r18, Z+1	; 0x01
     8ca:	32 81       	ldd	r19, Z+2	; 0x02
     8cc:	40 e0       	ldi	r20, 0x00	; 0
     8ce:	50 e0       	ldi	r21, 0x00	; 0
     8d0:	c7 01       	movw	r24, r14
     8d2:	b6 01       	movw	r22, r12
     8d4:	a6 d9       	rcall	.-3252   	; 0xfffffc22 <__eeprom_end+0xff7efbb2>
}
     8d6:	c9 01       	movw	r24, r18
     8d8:	df 91       	pop	r29
     8da:	cf 91       	pop	r28
     8dc:	1f 91       	pop	r17
     8de:	0f 91       	pop	r16
     8e0:	ff 90       	pop	r15
     8e2:	ef 90       	pop	r14
     8e4:	df 90       	pop	r13
     8e6:	cf 90       	pop	r12
     8e8:	08 95       	ret

000008ea <decode_led_char>:
//---------------------------------------------//
// Decodes normal string literal to the
//	7-segment representation
//---------------------------------------------//
static uint8_t decode_led_char(char c)
{
     8ea:	20 e0       	ldi	r18, 0x00	; 0
     8ec:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t i;
	encode_7seg_pair encode_pair;
	for (i = 0; i < sizeof(led_encode_table)/sizeof(encode_7seg_pair); i++  )
	{
		encode_pair.code = pgm_read_byte(&led_encode_table[i].code);
     8ee:	a9 01       	movw	r20, r18
     8f0:	44 0f       	add	r20, r20
     8f2:	55 1f       	adc	r21, r21
     8f4:	fa 01       	movw	r30, r20
     8f6:	e0 5d       	subi	r30, 0xD0	; 208
     8f8:	ff 4f       	sbci	r31, 0xFF	; 255
     8fa:	e4 91       	lpm	r30, Z
		if (encode_pair.code == c)
     8fc:	e8 13       	cpse	r30, r24
     8fe:	05 c0       	rjmp	.+10     	; 0x90a <decode_led_char+0x20>
		{
			i = pgm_read_byte(&led_encode_table[i].segdata);
     900:	fa 01       	movw	r30, r20
     902:	ef 5c       	subi	r30, 0xCF	; 207
     904:	ff 4f       	sbci	r31, 0xFF	; 255
     906:	84 91       	lpm	r24, Z
     908:	08 95       	ret
     90a:	2f 5f       	subi	r18, 0xFF	; 255
     90c:	3f 4f       	sbci	r19, 0xFF	; 255
//---------------------------------------------//
static uint8_t decode_led_char(char c)
{
	uint8_t i;
	encode_7seg_pair encode_pair;
	for (i = 0; i < sizeof(led_encode_table)/sizeof(encode_7seg_pair); i++  )
     90e:	2c 31       	cpi	r18, 0x1C	; 28
     910:	31 05       	cpc	r19, r1
     912:	69 f7       	brne	.-38     	; 0x8ee <decode_led_char+0x4>
			return i;
		}		
	}			
	// No item was found - return argument value
	return  c;
}
     914:	08 95       	ret

00000916 <wrap_led_buffer_index>:
//---------------------------------------------//
// Ensures that index is inside the buffer
// -128 <= index <= 127
//---------------------------------------------//
static uint8_t wrap_led_buffer_index(int8_t buf_index)
{
     916:	28 2f       	mov	r18, r24
	uint8_t new_index_u;
	new_index_u = (uint8_t) ((buf_index < 0) ? -buf_index : buf_index);
     918:	87 fd       	sbrc	r24, 7
     91a:	81 95       	neg	r24
	if (new_index_u >= LED_BUFFER_LENGTH)
     91c:	8e 30       	cpi	r24, 0x0E	; 14
     91e:	18 f0       	brcs	.+6      	; 0x926 <wrap_led_buffer_index+0x10>
		new_index_u = new_index_u % LED_BUFFER_LENGTH;
     920:	6e e0       	ldi	r22, 0x0E	; 14
     922:	73 d9       	rcall	.-3354   	; 0xfffffc0a <__eeprom_end+0xff7efb9a>
     924:	89 2f       	mov	r24, r25
	new_index_u = ((buf_index >= 0) || (new_index_u == 0)) ? new_index_u :  LED_BUFFER_LENGTH - new_index_u ;
     926:	27 ff       	sbrs	r18, 7
     928:	05 c0       	rjmp	.+10     	; 0x934 <wrap_led_buffer_index+0x1e>
     92a:	88 23       	and	r24, r24
     92c:	19 f0       	breq	.+6      	; 0x934 <wrap_led_buffer_index+0x1e>
     92e:	9e e0       	ldi	r25, 0x0E	; 14
     930:	98 1b       	sub	r25, r24
     932:	89 2f       	mov	r24, r25
	return new_index_u;
}
     934:	08 95       	ret

00000936 <processLedIndicator>:
// Call this function N times per sec to get N/NUM_DIGITS_TOTAL display update rate, where
// NUM_DIGITS_TOTAL is number_of_digits_of_LED_display if no extra LEDs are used or
// (number_of_digits_of_LED_display + 1) otherwise.
//---------------------------------------------//
void processLedIndicator()
{
     936:	cf 93       	push	r28
	uint8_t next_wActivePos;
	
	// Turn off segments
	#ifdef CLEAN_OPERATION
	disable_led_segments();
     938:	21 d1       	rcall	.+578    	; 0xb7c <disable_led_segments>
	#endif
	
	
	// Perform regular shift
	led_clock_pulse(!LED_DIGIT_ACT_LVL);
     93a:	81 e0       	ldi	r24, 0x01	; 1
     93c:	f3 d0       	rcall	.+486    	; 0xb24 <led_clock_pulse>
	
	// Switch on active window item position
	switch (wActivePos)
     93e:	c0 91 e4 00 	lds	r28, 0x00E4
     942:	cc 23       	and	r28, r28
     944:	19 f0       	breq	.+6      	; 0x94c <processLedIndicator+0x16>
     946:	c6 30       	cpi	r28, 0x06	; 6
     948:	c1 f5       	brne	.+112    	; 0x9ba <processLedIndicator+0x84>
     94a:	0f c0       	rjmp	.+30     	; 0x96a <processLedIndicator+0x34>
	case 0:
		// Get buttons
		#ifndef CLEAN_OPERATION
		disable_led_segments();
		#endif
		enable_led_segments_pullups();
     94c:	09 d1       	rcall	.+530    	; 0xb60 <enable_led_segments_pullups>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     94e:	85 e3       	ldi	r24, 0x35	; 53
     950:	8a 95       	dec	r24
     952:	f1 f7       	brne	.-4      	; 0x950 <processLedIndicator+0x1a>
     954:	00 00       	nop
		_delay_us(PULLUP_DELAY_US);
		capture_button_state();
     956:	19 d1       	rcall	.+562    	; 0xb8a <capture_button_state>
		#ifndef CLEAN_OPERATION
		enable_led_segments();
		#endif
		// Start new cycle with active digit level
		led_clock_pulse(LED_DIGIT_ACT_LVL);
     958:	80 e0       	ldi	r24, 0x00	; 0
     95a:	e4 d0       	rcall	.+456    	; 0xb24 <led_clock_pulse>
		// Always start new cycle from specified buffer start position
		bufActivePos = wStartPos;
     95c:	80 91 9a 01 	lds	r24, 0x019A
     960:	80 93 e3 00 	sts	0x00E3, r24
		next_wActivePos = wActivePos + 1;
     964:	c0 91 e4 00 	lds	r28, 0x00E4
     968:	28 c0       	rjmp	.+80     	; 0x9ba <processLedIndicator+0x84>
//---------------------------------------------//
// Performs window shifting
//---------------------------------------------//
static void processWindowShifter(void)
{
	if (shifterState == LED_SHIFT_DONE)
     96a:	80 91 9b 01 	lds	r24, 0x019B
     96e:	81 11       	cpse	r24, r1
     970:	01 c0       	rjmp	.+2      	; 0x974 <processLedIndicator+0x3e>
     972:	1b c0       	rjmp	.+54     	; 0x9aa <processLedIndicator+0x74>
		return;
	
	// Process shift timer
	processSoftTimer8b(&shiftTimer);	
     974:	85 ee       	ldi	r24, 0xE5	; 229
     976:	90 e0       	ldi	r25, 0x00	; 0
     978:	ee d7       	rcall	.+4060   	; 0x1956 <processSoftTimer8b>
	
	if (shiftTimer.FTop)
     97a:	80 91 e5 00 	lds	r24, 0x00E5
     97e:	85 ff       	sbrs	r24, 5
     980:	14 c0       	rjmp	.+40     	; 0x9aa <processLedIndicator+0x74>
	{
		// Check if finished
		if (wStartPos == bufStartPos)	
     982:	80 91 9a 01 	lds	r24, 0x019A
     986:	90 91 9c 01 	lds	r25, 0x019C
     98a:	89 13       	cpse	r24, r25
     98c:	03 c0       	rjmp	.+6      	; 0x994 <processLedIndicator+0x5e>
		{
			// Update state
			shifterState = LED_SHIFT_DONE;
     98e:	10 92 9b 01 	sts	0x019B, r1
     992:	0b c0       	rjmp	.+22     	; 0x9aa <processLedIndicator+0x74>
		}
		else if (shifterState == LED_SHIFT_RIGHT)
     994:	90 91 9b 01 	lds	r25, 0x019B
     998:	92 30       	cpi	r25, 0x02	; 2
     99a:	49 f4       	brne	.+18     	; 0x9ae <processLedIndicator+0x78>
// Increments index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t inc_buffer_position(uint8_t position)
{
	return (position >= LED_BUFFER_LENGTH - 1) ? 0 : position + 1;
     99c:	8d 30       	cpi	r24, 0x0D	; 13
     99e:	10 f4       	brcc	.+4      	; 0x9a4 <processLedIndicator+0x6e>
     9a0:	8f 5f       	subi	r24, 0xFF	; 255
     9a2:	01 c0       	rjmp	.+2      	; 0x9a6 <processLedIndicator+0x70>
     9a4:	80 e0       	ldi	r24, 0x00	; 0
			// Update state
			shifterState = LED_SHIFT_DONE;
		}
		else if (shifterState == LED_SHIFT_RIGHT)
		{
			wStartPos = inc_buffer_position(wStartPos);	
     9a6:	80 93 9a 01 	sts	0x019A, r24
		// Always start new cycle from specified buffer start position
		bufActivePos = wStartPos;
		next_wActivePos = wActivePos + 1;
		break;
	case NUM_DIGITS_TOTAL-1:
		next_wActivePos = 0;
     9aa:	c0 e0       	ldi	r28, 0x00	; 0
     9ac:	07 c0       	rjmp	.+14     	; 0x9bc <processLedIndicator+0x86>
// Decrements index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t dec_buffer_position(uint8_t position)
{
	return (position == 0) ? LED_BUFFER_LENGTH - 1 : position - 1;
     9ae:	88 23       	and	r24, r24
     9b0:	11 f0       	breq	.+4      	; 0x9b6 <processLedIndicator+0x80>
     9b2:	81 50       	subi	r24, 0x01	; 1
     9b4:	f8 cf       	rjmp	.-16     	; 0x9a6 <processLedIndicator+0x70>
     9b6:	8d e0       	ldi	r24, 0x0D	; 13
     9b8:	f6 cf       	rjmp	.-20     	; 0x9a6 <processLedIndicator+0x70>
		next_wActivePos = 0;
		// Shift LED window
		processWindowShifter();	
		break;
	default:
		next_wActivePos = wActivePos + 1;
     9ba:	cf 5f       	subi	r28, 0xFF	; 255
		break;
	}		
	
	#ifdef 	USE_EXTRA_LED_DIGIT
	if (wActivePos == EXTRA_DIGIT_NUM)
     9bc:	80 91 e4 00 	lds	r24, 0x00E4
     9c0:	86 30       	cpi	r24, 0x06	; 6
     9c2:	21 f4       	brne	.+8      	; 0x9cc <processLedIndicator+0x96>
	{
		// Output separate LEDs state
		set_led_segments(extra_led_state);
     9c4:	80 91 99 01 	lds	r24, 0x0199
     9c8:	bd d0       	rcall	.+378    	; 0xb44 <set_led_segments>
     9ca:	10 c0       	rjmp	.+32     	; 0x9ec <processLedIndicator+0xb6>
	}
	else
	#endif
	{
		// Output new segment data
		set_led_segments(led_data_buffer[bufActivePos]);
     9cc:	e0 91 e3 00 	lds	r30, 0x00E3
     9d0:	f0 e0       	ldi	r31, 0x00	; 0
     9d2:	e3 56       	subi	r30, 0x63	; 99
     9d4:	fe 4f       	sbci	r31, 0xFE	; 254
     9d6:	80 81       	ld	r24, Z
     9d8:	b5 d0       	rcall	.+362    	; 0xb44 <set_led_segments>
		// Wrap around buffer length
		bufActivePos = inc_buffer_position(bufActivePos );
     9da:	80 91 e3 00 	lds	r24, 0x00E3
// Increments index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t inc_buffer_position(uint8_t position)
{
	return (position >= LED_BUFFER_LENGTH - 1) ? 0 : position + 1;
     9de:	8d 30       	cpi	r24, 0x0D	; 13
     9e0:	10 f4       	brcc	.+4      	; 0x9e6 <processLedIndicator+0xb0>
     9e2:	8f 5f       	subi	r24, 0xFF	; 255
     9e4:	01 c0       	rjmp	.+2      	; 0x9e8 <processLedIndicator+0xb2>
     9e6:	80 e0       	ldi	r24, 0x00	; 0
	#endif
	{
		// Output new segment data
		set_led_segments(led_data_buffer[bufActivePos]);
		// Wrap around buffer length
		bufActivePos = inc_buffer_position(bufActivePos );
     9e8:	80 93 e3 00 	sts	0x00E3, r24
	}
		
	wActivePos = next_wActivePos;
     9ec:	c0 93 e4 00 	sts	0x00E4, r28
	
	#ifdef CLEAN_OPERATION
	enable_led_segments();
	#endif

}
     9f0:	cf 91       	pop	r28
	}
		
	wActivePos = next_wActivePos;
	
	#ifdef CLEAN_OPERATION
	enable_led_segments();
     9f2:	bd c0       	rjmp	.+378    	; 0xb6e <enable_led_segments>

000009f4 <fillLedBuffer>:
//---------------------------------------------//
// Fills buffer from (bufStartPos + offset) 
//	position with single char
//---------------------------------------------//
void fillLedBuffer(int8_t offset, uint8_t length, char c)
{
     9f4:	0f 93       	push	r16
     9f6:	1f 93       	push	r17
     9f8:	cf 93       	push	r28
     9fa:	df 93       	push	r29
     9fc:	1f 92       	push	r1
     9fe:	cd b7       	in	r28, 0x3d	; 61
     a00:	de b7       	in	r29, 0x3e	; 62
     a02:	18 2f       	mov	r17, r24
     a04:	84 2f       	mov	r24, r20
	uint8_t val = decode_led_char(c);
     a06:	69 83       	std	Y+1, r22	; 0x01
     a08:	70 df       	rcall	.-288    	; 0x8ea <decode_led_char>
     a0a:	08 2f       	mov	r16, r24
	// Ensure index is inside the buffer
	uint8_t position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
     a0c:	80 91 9c 01 	lds	r24, 0x019C
     a10:	81 0f       	add	r24, r17
     a12:	81 df       	rcall	.-254    	; 0x916 <wrap_led_buffer_index>
	while(length--)
     a14:	69 81       	ldd	r22, Y+1	; 0x01
     a16:	0a c0       	rjmp	.+20     	; 0xa2c <fillLedBuffer+0x38>
	{
		led_data_buffer[position] = val;
     a18:	e8 2f       	mov	r30, r24
     a1a:	f0 e0       	ldi	r31, 0x00	; 0
     a1c:	e3 56       	subi	r30, 0x63	; 99
     a1e:	fe 4f       	sbci	r31, 0xFE	; 254
     a20:	00 83       	st	Z, r16
// Increments index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t inc_buffer_position(uint8_t position)
{
	return (position >= LED_BUFFER_LENGTH - 1) ? 0 : position + 1;
     a22:	8d 30       	cpi	r24, 0x0D	; 13
     a24:	10 f4       	brcc	.+4      	; 0xa2a <fillLedBuffer+0x36>
     a26:	8f 5f       	subi	r24, 0xFF	; 255
     a28:	01 c0       	rjmp	.+2      	; 0xa2c <fillLedBuffer+0x38>
     a2a:	80 e0       	ldi	r24, 0x00	; 0
void fillLedBuffer(int8_t offset, uint8_t length, char c)
{
	uint8_t val = decode_led_char(c);
	// Ensure index is inside the buffer
	uint8_t position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
	while(length--)
     a2c:	61 50       	subi	r22, 0x01	; 1
     a2e:	a0 f7       	brcc	.-24     	; 0xa18 <fillLedBuffer+0x24>
	{
		led_data_buffer[position] = val;
		position = inc_buffer_position(position);
	}
}
     a30:	0f 90       	pop	r0
     a32:	df 91       	pop	r29
     a34:	cf 91       	pop	r28
     a36:	1f 91       	pop	r17
     a38:	0f 91       	pop	r16
     a3a:	08 95       	ret

00000a3c <startShiftingWindowLeft>:
//	LED window left 
//---------------------------------------------//
void startShiftingWindowLeft(void)
{
	// Clear spaces between menu states
	fillLedBuffer(-2,2,' ');
     a3c:	40 e2       	ldi	r20, 0x20	; 32
     a3e:	62 e0       	ldi	r22, 0x02	; 2
     a40:	8e ef       	ldi	r24, 0xFE	; 254
     a42:	d8 df       	rcall	.-80     	; 0x9f4 <fillLedBuffer>
	// Set new buffer position for writing
	bufStartPos = wrap_led_buffer_index( (int8_t)bufStartPos - (NUM_DIGITS + 2) );
     a44:	80 91 9c 01 	lds	r24, 0x019C
     a48:	88 50       	subi	r24, 0x08	; 8
     a4a:	65 df       	rcall	.-310    	; 0x916 <wrap_led_buffer_index>
     a4c:	80 93 9c 01 	sts	0x019C, r24
	// Set shifter state
	shifterState = LED_SHIFT_LEFT;
     a50:	81 e0       	ldi	r24, 0x01	; 1
     a52:	80 93 9b 01 	sts	0x019B, r24
     a56:	08 95       	ret

00000a58 <startShiftingWindowRight>:
//	LED window right 
//---------------------------------------------//
void startShiftingWindowRight(void)
{
	// Clear spaces between menu states
	fillLedBuffer(NUM_DIGITS,2,' ');
     a58:	40 e2       	ldi	r20, 0x20	; 32
     a5a:	62 e0       	ldi	r22, 0x02	; 2
     a5c:	86 e0       	ldi	r24, 0x06	; 6
     a5e:	ca df       	rcall	.-108    	; 0x9f4 <fillLedBuffer>
	// Set new buffer position for writing
	bufStartPos = wrap_led_buffer_index( (int8_t)bufStartPos + NUM_DIGITS + 2 );
     a60:	80 91 9c 01 	lds	r24, 0x019C
     a64:	88 5f       	subi	r24, 0xF8	; 248
     a66:	57 df       	rcall	.-338    	; 0x916 <wrap_led_buffer_index>
     a68:	80 93 9c 01 	sts	0x019C, r24
	// Set shifter state
	shifterState = LED_SHIFT_RIGHT;
     a6c:	82 e0       	ldi	r24, 0x02	; 2
     a6e:	80 93 9b 01 	sts	0x019B, r24
     a72:	08 95       	ret

00000a74 <initLedIndicator>:
//---------------------------------------------//
//	Initialization
//	Call this function at start of your program
//---------------------------------------------//
void initLedIndicator()
{
     a74:	cf 93       	push	r28
	uint8_t i;
	// First disable outputs
	disable_led_segments();
     a76:	82 d0       	rcall	.+260    	; 0xb7c <disable_led_segments>
     a78:	c7 e0       	ldi	r28, 0x07	; 7
	// Fill shift register with non-active levels
	for (i=0;i<NUM_DIGITS_TOTAL;i++)
	{
		led_clock_pulse(!LED_DIGIT_ACT_LVL);
     a7a:	81 e0       	ldi	r24, 0x01	; 1
     a7c:	53 d0       	rcall	.+166    	; 0xb24 <led_clock_pulse>
     a7e:	c1 50       	subi	r28, 0x01	; 1
{
	uint8_t i;
	// First disable outputs
	disable_led_segments();
	// Fill shift register with non-active levels
	for (i=0;i<NUM_DIGITS_TOTAL;i++)
     a80:	e1 f7       	brne	.-8      	; 0xa7a <initLedIndicator+0x6>
	{
		led_clock_pulse(!LED_DIGIT_ACT_LVL);
	}
	// Now enable outputs
	enable_led_segments();
     a82:	75 d0       	rcall	.+234    	; 0xb6e <enable_led_segments>
	
	// Reset pointers
	wStartPos = 0;
     a84:	10 92 9a 01 	sts	0x019A, r1
	bufStartPos = 0;
     a88:	10 92 9c 01 	sts	0x019C, r1
	bufActivePos = 0;
     a8c:	10 92 e3 00 	sts	0x00E3, r1
	wActivePos = 0;
     a90:	10 92 e4 00 	sts	0x00E4, r1
	#ifdef 	USE_EXTRA_LED_DIGIT
	extra_led_state = 0;
     a94:	10 92 99 01 	sts	0x0199, r1
	#endif
	
	// Clear the buffer 
	fillLedBuffer(0,LED_BUFFER_LENGTH,' ');
     a98:	40 e2       	ldi	r20, 0x20	; 32
     a9a:	6e e0       	ldi	r22, 0x0E	; 14
     a9c:	80 e0       	ldi	r24, 0x00	; 0
     a9e:	aa df       	rcall	.-172    	; 0x9f4 <fillLedBuffer>
	
	// Initialize shift timer - always enabled, but 
	//	processed only when shifting is active
	shifterState = LED_SHIFT_DONE;
     aa0:	10 92 9b 01 	sts	0x019B, r1
	shiftTimer.Enabled = 1;
     aa4:	80 91 e5 00 	lds	r24, 0x00E5
	shiftTimer.RunOnce = 0;
     aa8:	81 60       	ori	r24, 0x01	; 1
     aaa:	8d 7f       	andi	r24, 0xFD	; 253
     aac:	80 93 e5 00 	sts	0x00E5, r24
	shiftTimer.Top = LED_SHIFT_INTERVAL-1;
     ab0:	89 e0       	ldi	r24, 0x09	; 9
     ab2:	80 93 e7 00 	sts	0x00E7, r24
}
     ab6:	cf 91       	pop	r28
     ab8:	08 95       	ret

00000aba <printLedBuffer>:
// Arguments:
//		offset	- buffer index to start with (with respect to bufStartPos)
//		str - null-terminated char string
//---------------------------------------------//		
void printLedBuffer(int8_t offset, char* str)
{
     aba:	1f 93       	push	r17
     abc:	cf 93       	push	r28
     abe:	df 93       	push	r29
     ac0:	eb 01       	movw	r28, r22
	char c;
	uint8_t decoded_sym;
	// Ensure index is inside the buffer
	uint8_t buffer_position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
     ac2:	90 91 9c 01 	lds	r25, 0x019C
     ac6:	89 0f       	add	r24, r25
     ac8:	26 df       	rcall	.-436    	; 0x916 <wrap_led_buffer_index>
     aca:	18 2f       	mov	r17, r24
	// Output chars
	while((c = *str++))
     acc:	0b c0       	rjmp	.+22     	; 0xae4 <printLedBuffer+0x2a>
	{
		decoded_sym = decode_led_char(c);
     ace:	0d df       	rcall	.-486    	; 0x8ea <decode_led_char>
		led_data_buffer[buffer_position] = decoded_sym;
     ad0:	e1 2f       	mov	r30, r17
     ad2:	f0 e0       	ldi	r31, 0x00	; 0
     ad4:	e3 56       	subi	r30, 0x63	; 99
     ad6:	fe 4f       	sbci	r31, 0xFE	; 254
     ad8:	80 83       	st	Z, r24
// Increments index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t inc_buffer_position(uint8_t position)
{
	return (position >= LED_BUFFER_LENGTH - 1) ? 0 : position + 1;
     ada:	1d 30       	cpi	r17, 0x0D	; 13
     adc:	10 f4       	brcc	.+4      	; 0xae2 <printLedBuffer+0x28>
     ade:	1f 5f       	subi	r17, 0xFF	; 255
     ae0:	01 c0       	rjmp	.+2      	; 0xae4 <printLedBuffer+0x2a>
     ae2:	10 e0       	ldi	r17, 0x00	; 0
	char c;
	uint8_t decoded_sym;
	// Ensure index is inside the buffer
	uint8_t buffer_position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
	// Output chars
	while((c = *str++))
     ae4:	89 91       	ld	r24, Y+
     ae6:	81 11       	cpse	r24, r1
     ae8:	f2 cf       	rjmp	.-28     	; 0xace <printLedBuffer+0x14>
	{
		decoded_sym = decode_led_char(c);
		led_data_buffer[buffer_position] = decoded_sym;
		buffer_position = inc_buffer_position(buffer_position);
	}
}
     aea:	df 91       	pop	r29
     aec:	cf 91       	pop	r28
     aee:	1f 91       	pop	r17
     af0:	08 95       	ret

00000af2 <setComma>:
//	buffer cell
//---------------------------------------------//
void setComma(int8_t offset)
{
	// Ensure index is inside the buffer
	uint8_t position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
     af2:	90 91 9c 01 	lds	r25, 0x019C
     af6:	89 0f       	add	r24, r25
     af8:	0e df       	rcall	.-484    	; 0x916 <wrap_led_buffer_index>
	led_data_buffer[position] |= (SEGH);
     afa:	e8 2f       	mov	r30, r24
     afc:	f0 e0       	ldi	r31, 0x00	; 0
     afe:	e3 56       	subi	r30, 0x63	; 99
     b00:	fe 4f       	sbci	r31, 0xFE	; 254
     b02:	80 81       	ld	r24, Z
     b04:	80 68       	ori	r24, 0x80	; 128
     b06:	80 83       	st	Z, r24
     b08:	08 95       	ret

00000b0a <setExtraLeds>:
// Argument is ORed with current LED state
//---------------------------------------------//
inline void setExtraLeds(uint8_t leds_set_value)
{
		//asm("cli");
		extra_led_state |= leds_set_value;
     b0a:	90 91 99 01 	lds	r25, 0x0199
     b0e:	98 2b       	or	r25, r24
     b10:	90 93 99 01 	sts	0x0199, r25
     b14:	08 95       	ret

00000b16 <clearExtraLeds>:
// Argument is AND NOTed with current LED state
//---------------------------------------------//
inline void clearExtraLeds(uint8_t leds_clear_value)
{
		//asm("cli");
		extra_led_state &= ~leds_clear_value;
     b16:	90 91 99 01 	lds	r25, 0x0199
     b1a:	80 95       	com	r24
     b1c:	89 23       	and	r24, r25
     b1e:	80 93 99 01 	sts	0x0199, r24
     b22:	08 95       	ret

00000b24 <led_clock_pulse>:


// Clocks in bit into the shift register
void led_clock_pulse(uint8_t bit)
{
	if (bit)
     b24:	88 23       	and	r24, r24
     b26:	11 f0       	breq	.+4      	; 0xb2c <led_clock_pulse+0x8>
		PORTB |= (1<<PB_LED_DOUT);
     b28:	c0 9a       	sbi	0x18, 0	; 24
     b2a:	01 c0       	rjmp	.+2      	; 0xb2e <led_clock_pulse+0xa>
	else
		PORTB &= ~(1<<PB_LED_DOUT);
     b2c:	c0 98       	cbi	0x18, 0	; 24
     b2e:	8a e1       	ldi	r24, 0x1A	; 26
     b30:	8a 95       	dec	r24
     b32:	f1 f7       	brne	.-4      	; 0xb30 <led_clock_pulse+0xc>
     b34:	00 c0       	rjmp	.+0      	; 0xb36 <led_clock_pulse+0x12>
	_delay_us(SETUP_DELAY_US);
	PORTB |= (1<<PB_LED_CLK);
     b36:	c2 9a       	sbi	0x18, 2	; 24
     b38:	8a e1       	ldi	r24, 0x1A	; 26
     b3a:	8a 95       	dec	r24
     b3c:	f1 f7       	brne	.-4      	; 0xb3a <led_clock_pulse+0x16>
     b3e:	00 c0       	rjmp	.+0      	; 0xb40 <led_clock_pulse+0x1c>
	_delay_us(SHIFT_DELAY_US);
	PORTB &= ~(1<<PB_LED_CLK);
     b40:	c2 98       	cbi	0x18, 2	; 24
     b42:	08 95       	ret

00000b44 <set_led_segments>:
// Outputs decoded segment data to port bits
void set_led_segments(uint8_t seg_ch)
{
	uint8_t pdat;
	seg_ch ^= LED_SEGMENT_MASK;
	pdat = PORTC & ~( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
     b44:	25 b3       	in	r18, 0x15	; 21
	pdat |= (seg_ch & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
     b46:	98 2f       	mov	r25, r24
     b48:	9f 71       	andi	r25, 0x1F	; 31
// Outputs decoded segment data to port bits
void set_led_segments(uint8_t seg_ch)
{
	uint8_t pdat;
	seg_ch ^= LED_SEGMENT_MASK;
	pdat = PORTC & ~( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
     b4a:	20 7e       	andi	r18, 0xE0	; 224
	pdat |= (seg_ch & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
     b4c:	92 2b       	or	r25, r18
	PORTC = pdat;
     b4e:	95 bb       	out	0x15, r25	; 21
	seg_ch >>= 2;
	pdat = PORTB & ~( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     b50:	98 b3       	in	r25, 0x18	; 24
	uint8_t pdat;
	seg_ch ^= LED_SEGMENT_MASK;
	pdat = PORTC & ~( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
	pdat |= (seg_ch & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
	PORTC = pdat;
	seg_ch >>= 2;
     b52:	86 95       	lsr	r24
     b54:	86 95       	lsr	r24
	pdat = PORTB & ~( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
	pdat |= (seg_ch & ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) ));
     b56:	88 73       	andi	r24, 0x38	; 56
	seg_ch ^= LED_SEGMENT_MASK;
	pdat = PORTC & ~( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
	pdat |= (seg_ch & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
	PORTC = pdat;
	seg_ch >>= 2;
	pdat = PORTB & ~( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     b58:	97 7c       	andi	r25, 0xC7	; 199
	pdat |= (seg_ch & ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) ));
     b5a:	89 2b       	or	r24, r25
	PORTB = pdat;
     b5c:	88 bb       	out	0x18, r24	; 24
     b5e:	08 95       	ret

00000b60 <enable_led_segments_pullups>:

// Turns segment port bits to HI-Z and
// enables pull-ups
void enable_led_segments_pullups()
{
	PORTC |= ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
     b60:	85 b3       	in	r24, 0x15	; 21
     b62:	8f 61       	ori	r24, 0x1F	; 31
     b64:	85 bb       	out	0x15, r24	; 21
	PORTB |= ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     b66:	88 b3       	in	r24, 0x18	; 24
     b68:	88 63       	ori	r24, 0x38	; 56
     b6a:	88 bb       	out	0x18, r24	; 24
     b6c:	08 95       	ret

00000b6e <enable_led_segments>:
}	

void enable_led_segments()
{
	DDRC |= ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
     b6e:	84 b3       	in	r24, 0x14	; 20
     b70:	8f 61       	ori	r24, 0x1F	; 31
     b72:	84 bb       	out	0x14, r24	; 20
	DDRB |= ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     b74:	87 b3       	in	r24, 0x17	; 23
     b76:	88 63       	ori	r24, 0x38	; 56
     b78:	87 bb       	out	0x17, r24	; 23
     b7a:	08 95       	ret

00000b7c <disable_led_segments>:
}

void disable_led_segments()
{
	DDRC &= ~( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
     b7c:	84 b3       	in	r24, 0x14	; 20
     b7e:	80 7e       	andi	r24, 0xE0	; 224
     b80:	84 bb       	out	0x14, r24	; 20
	DDRB &= ~( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     b82:	87 b3       	in	r24, 0x17	; 23
     b84:	87 7c       	andi	r24, 0xC7	; 199
     b86:	87 bb       	out	0x17, r24	; 23
     b88:	08 95       	ret

00000b8a <capture_button_state>:


void capture_button_state()
{
	uint8_t pdat;
	pdat = PINB  & ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     b8a:	86 b3       	in	r24, 0x16	; 22
     b8c:	88 73       	andi	r24, 0x38	; 56
	pdat <<= 2;
	pdat |= (PINC & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
     b8e:	93 b3       	in	r25, 0x13	; 19

void capture_button_state()
{
	uint8_t pdat;
	pdat = PINB  & ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
	pdat <<= 2;
     b90:	88 0f       	add	r24, r24
     b92:	88 0f       	add	r24, r24
	pdat |= (PINC & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
     b94:	9f 71       	andi	r25, 0x1F	; 31
     b96:	89 2b       	or	r24, r25
	raw_button_state = pdat ^ RAW_BUTTONS_INVERSE_MASK;
     b98:	80 95       	com	r24
     b9a:	80 93 ab 01 	sts	0x01AB, r24
     b9e:	08 95       	ret

00000ba0 <processItemFunction>:
//	Arguments:
//		funcAddr - address of the function to run.
//-----------------------------------------------------------------//
static inline void processItemFunction(FuncPtr funcAddr)
{
	if (funcAddr != 0)
     ba0:	00 97       	sbiw	r24, 0x00	; 0
     ba2:	11 f0       	breq	.+4      	; 0xba8 <processItemFunction+0x8>
		((FuncPtr)funcAddr)();
     ba4:	fc 01       	movw	r30, r24
     ba6:	09 94       	ijmp
     ba8:	08 95       	ret

00000baa <mf_setTempLeave>:
	userTimer.Enabled = 1;
}

void mf_leafExit(void)
{
	userTimer.Enabled = 0;	
     baa:	80 91 f3 00 	lds	r24, 0x00F3
     bae:	8e 7f       	andi	r24, 0xFE	; 254
     bb0:	80 93 f3 00 	sts	0x00F3, r24
}

void mf_setTempLeave(void)
{
	mf_leafExit();
	if (!(jumpFlags & DISCARD_CHANGES))
     bb4:	80 91 f7 00 	lds	r24, 0x00F7
     bb8:	85 fd       	sbrc	r24, 5
     bba:	04 c0       	rjmp	.+8      	; 0xbc4 <mf_setTempLeave+0x1a>
	{
		p.setup_temp_value = setupValue_u8;		// Apply changes		
     bbc:	80 91 f1 00 	lds	r24, 0x00F1
     bc0:	80 93 91 01 	sts	0x0191, r24
     bc4:	08 95       	ret

00000bc6 <mf_leafSelectAct>:
	userTimer.FA_GE = 1;	
}

void mf_leafSelectAct(void)
{
	userTimer.Timer = 0;
     bc6:	10 92 f4 00 	sts	0x00F4, r1
	userTimer.Top = BLINK_PERIOD - 1;
     bca:	87 e0       	ldi	r24, 0x07	; 7
     bcc:	80 93 f5 00 	sts	0x00F5, r24
	userTimer.CompA = BLINK_PERIOD / 2;
     bd0:	84 e0       	ldi	r24, 0x04	; 4
     bd2:	80 93 f6 00 	sts	0x00F6, r24
	userTimer.Enabled = 1;
     bd6:	e3 ef       	ldi	r30, 0xF3	; 243
     bd8:	f0 e0       	ldi	r31, 0x00	; 0
     bda:	80 81       	ld	r24, Z
     bdc:	81 60       	ori	r24, 0x01	; 1
     bde:	80 83       	st	Z, r24
     be0:	08 95       	ret

00000be2 <mf_sndenLeave>:
}

void mf_leafExit(void)
{
	userTimer.Enabled = 0;	
     be2:	80 91 f3 00 	lds	r24, 0x00F3
     be6:	8e 7f       	andi	r24, 0xFE	; 254
     be8:	80 93 f3 00 	sts	0x00F3, r24
}

void mf_sndenLeave(void)
{
	mf_leafExit();
	if (!(jumpFlags & DISCARD_CHANGES))
     bec:	80 91 f7 00 	lds	r24, 0x00F7
     bf0:	85 fd       	sbrc	r24, 5
     bf2:	04 c0       	rjmp	.+8      	; 0xbfc <mf_sndenLeave+0x1a>
	{
		p.sound_enable = setupValue_u8;		// Apply changes
     bf4:	80 91 f1 00 	lds	r24, 0x00F1
     bf8:	80 93 93 01 	sts	0x0193, r24
     bfc:	08 95       	ret

00000bfe <mf_autopoffLeave>:
	userTimer.Enabled = 1;
}

void mf_leafExit(void)
{
	userTimer.Enabled = 0;	
     bfe:	80 91 f3 00 	lds	r24, 0x00F3
     c02:	8e 7f       	andi	r24, 0xFE	; 254
     c04:	80 93 f3 00 	sts	0x00F3, r24
}

void mf_autopoffLeave(void)
{
	mf_leafExit();
	if (!(jumpFlags & DISCARD_CHANGES))
     c08:	80 91 f7 00 	lds	r24, 0x00F7
     c0c:	85 fd       	sbrc	r24, 5
     c0e:	04 c0       	rjmp	.+8      	; 0xc18 <mf_autopoffLeave+0x1a>
	{
		p.power_off_timeout = setupValue_u8;		// Apply changes
     c10:	80 91 f1 00 	lds	r24, 0x00F1
     c14:	80 93 94 01 	sts	0x0194, r24
     c18:	08 95       	ret

00000c1a <mf_actpoffLeave>:
	printLedBuffer(0,"   OFF");
}

void mf_actpoffLeave(void)
{
	autoPowerOffState = 0;	
     c1a:	10 92 e0 00 	sts	0x00E0, r1
     c1e:	08 95       	ret

00000c20 <mf_calibDoExit>:
	userTimer.Enabled = 1;
}

void mf_leafExit(void)
{
	userTimer.Enabled = 0;	
     c20:	e3 ef       	ldi	r30, 0xF3	; 243
     c22:	f0 e0       	ldi	r31, 0x00	; 0
     c24:	80 81       	ld	r24, Z
     c26:	8e 7f       	andi	r24, 0xFE	; 254
     c28:	80 83       	st	Z, r24


void mf_calibDoExit(void)
{
	mf_leafExit();
	heaterState &= ~CALIBRATION_ACTIVE;
     c2a:	80 91 e1 00 	lds	r24, 0x00E1
     c2e:	8d 7f       	andi	r24, 0xFD	; 253
     c30:	80 93 e1 00 	sts	0x00E1, r24
     c34:	08 95       	ret

00000c36 <mf_actpoffDo>:
}

// Indication of power off mode
void mf_actpoffDo(void)
{
	printLedBuffer(0,"   OFF");
     c36:	6e e8       	ldi	r22, 0x8E	; 142
     c38:	70 e0       	ldi	r23, 0x00	; 0
     c3a:	80 e0       	ldi	r24, 0x00	; 0
     c3c:	3e cf       	rjmp	.-388    	; 0xaba <printLedBuffer>

00000c3e <mf_cdoneDo>:
	saveCalibrationToEEPROM();
}

void mf_cdoneDo(void)
{
	printLedBuffer(0," DONE ");
     c3e:	65 e9       	ldi	r22, 0x95	; 149
     c40:	70 e0       	ldi	r23, 0x00	; 0
     c42:	80 e0       	ldi	r24, 0x00	; 0
     c44:	3a cf       	rjmp	.-396    	; 0xaba <printLedBuffer>

00000c46 <mf_actpoffSelect>:
// Menu item "Active power off"
// Specific menu item - used as indicator of system state
//------------------------------------------------//
void mf_actpoffSelect(void)
{
	clearExtraLeds(LED_TEMP | LED_ROLL);
     c46:	80 ec       	ldi	r24, 0xC0	; 192
     c48:	66 df       	rcall	.-308    	; 0xb16 <clearExtraLeds>
	autoPowerOffState = AUTO_POFF_ACTIVE;	// Set global flag
     c4a:	81 e0       	ldi	r24, 0x01	; 1
     c4c:	80 93 e0 00 	sts	0x00E0, r24
     c50:	08 95       	ret

00000c52 <mf_leafSelect>:

// Select and exit functions, common for leaf menu items 

void mf_leafSelect(void)
{
	clearExtraLeds(LED_TEMP | LED_ROLL);
     c52:	80 ec       	ldi	r24, 0xC0	; 192
     c54:	60 df       	rcall	.-320    	; 0xb16 <clearExtraLeds>
	userTimer.FA_GE = 1;	
     c56:	e3 ef       	ldi	r30, 0xF3	; 243
     c58:	f0 e0       	ldi	r31, 0x00	; 0
     c5a:	80 81       	ld	r24, Z
     c5c:	80 61       	ori	r24, 0x10	; 16
     c5e:	80 83       	st	Z, r24
     c60:	08 95       	ret

00000c62 <mf_calibP2Select>:
	printLedBuffer(0,"P1    ");
}

void mf_calibP2Select(void)
{
	mf_leafSelect();
     c62:	f7 df       	rcall	.-18     	; 0xc52 <mf_leafSelect>
	setupValue_u8 = cp.cpoint2;	// determine which point to use at select func
     c64:	80 91 8c 01 	lds	r24, 0x018C
     c68:	80 93 f1 00 	sts	0x00F1, r24
	cpointNum = 2;
     c6c:	82 e0       	ldi	r24, 0x02	; 2
     c6e:	80 93 f2 00 	sts	0x00F2, r24
	printLedBuffer(0,"P2    ");
     c72:	6c e9       	ldi	r22, 0x9C	; 156
     c74:	70 e0       	ldi	r23, 0x00	; 0
     c76:	80 e0       	ldi	r24, 0x00	; 0
     c78:	20 cf       	rjmp	.-448    	; 0xaba <printLedBuffer>

00000c7a <mf_calibP1Select>:
// There are two calibration points - the menu item is 
// same for both.
//------------------------------------------------//
void mf_calibP1Select(void)
{
	mf_leafSelect();
     c7a:	eb df       	rcall	.-42     	; 0xc52 <mf_leafSelect>
	setupValue_u8 = cp.cpoint1;	// determine which point to use at select func
     c7c:	80 91 8b 01 	lds	r24, 0x018B
     c80:	80 93 f1 00 	sts	0x00F1, r24
	cpointNum = 1;
     c84:	81 e0       	ldi	r24, 0x01	; 1
     c86:	80 93 f2 00 	sts	0x00F2, r24
	printLedBuffer(0,"P1    ");
     c8a:	63 ea       	ldi	r22, 0xA3	; 163
     c8c:	70 e0       	ldi	r23, 0x00	; 0
     c8e:	80 e0       	ldi	r24, 0x00	; 0
     c90:	14 cf       	rjmp	.-472    	; 0xaba <printLedBuffer>

00000c92 <mf_autopoffSelect>:
//------------------------------------------------//
// Menu item "Auto power off setup"
//------------------------------------------------//
void mf_autopoffSelect(void)
{
	mf_leafSelect();						
     c92:	df df       	rcall	.-66     	; 0xc52 <mf_leafSelect>
	setupValue_u8 = p.power_off_timeout;	// Make a copy of parameter being changed
     c94:	80 91 94 01 	lds	r24, 0x0194
     c98:	80 93 f1 00 	sts	0x00F1, r24
     c9c:	08 95       	ret

00000c9e <mf_sndenSelect>:
//------------------------------------------------//
// Menu item "Sound enable/disable"
//------------------------------------------------//
void mf_sndenSelect(void)
{
	mf_leafSelect();					
     c9e:	d9 df       	rcall	.-78     	; 0xc52 <mf_leafSelect>
	setupValue_u8 = p.sound_enable;		// Make a copy of parameter being changed
     ca0:	80 91 93 01 	lds	r24, 0x0193
     ca4:	80 93 f1 00 	sts	0x00F1, r24
     ca8:	08 95       	ret

00000caa <mf_rollLeave>:
	userTimer.Enabled = 1;
}

void mf_leafExit(void)
{
	userTimer.Enabled = 0;	
     caa:	e3 ef       	ldi	r30, 0xF3	; 243
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	80 81       	ld	r24, Z
     cb0:	8e 7f       	andi	r24, 0xFE	; 254
     cb2:	80 83       	st	Z, r24
}

void mf_rollLeave(void)
{
	mf_leafExit();
	clearExtraLeds(LED_ROLL);
     cb4:	80 e4       	ldi	r24, 0x40	; 64
     cb6:	2f cf       	rjmp	.-418    	; 0xb16 <clearExtraLeds>

00000cb8 <mf_setTempSelect>:
// Menu item "Temperature setting"
// TOP level
//------------------------------------------------//
void mf_setTempSelect(void)
{
	clearExtraLeds(LED_TEMP);
     cb8:	80 e8       	ldi	r24, 0x80	; 128
     cba:	2d df       	rcall	.-422    	; 0xb16 <clearExtraLeds>
	mf_leafSelectAct();						// setup and start timer
     cbc:	84 df       	rcall	.-248    	; 0xbc6 <mf_leafSelectAct>
	setupValue_u8 = p.setup_temp_value;		// Make a copy of parameter being changed
     cbe:	80 91 91 01 	lds	r24, 0x0191
     cc2:	80 93 f1 00 	sts	0x00F1, r24
     cc6:	08 95       	ret

00000cc8 <mf_realTempLeave>:
	}
}

void mf_realTempLeave(void)
{
	clearExtraLeds(LED_TEMP);
     cc8:	80 e8       	ldi	r24, 0x80	; 128
     cca:	25 cf       	rjmp	.-438    	; 0xb16 <clearExtraLeds>

00000ccc <mf_cdoneSelect>:
// There are two calibration points - the menu item is
// same for both.
//------------------------------------------------//
void mf_cdoneSelect(void)
{
	applyCalibrationPoint(cpointNum,setupValue_u8);
     ccc:	20 91 f1 00 	lds	r18, 0x00F1
}

void applyCalibrationPoint(uint8_t cpointNum, uint8_t cpointVal)
{
	if (cpointNum == 1)
     cd0:	30 91 f2 00 	lds	r19, 0x00F2
     cd4:	80 91 5d 01 	lds	r24, 0x015D
     cd8:	90 91 5e 01 	lds	r25, 0x015E
     cdc:	31 30       	cpi	r19, 0x01	; 1
     cde:	39 f4       	brne	.+14     	; 0xcee <mf_cdoneSelect+0x22>
	{
		cp.cpoint1_adc = adc_normalized;
     ce0:	90 93 8e 01 	sts	0x018E, r25
     ce4:	80 93 8d 01 	sts	0x018D, r24
		cp.cpoint1 = cpointVal;
     ce8:	20 93 8b 01 	sts	0x018B, r18
     cec:	06 c0       	rjmp	.+12     	; 0xcfa <mf_cdoneSelect+0x2e>
	}
	else
	{
		cp.cpoint2_adc = adc_normalized;
     cee:	90 93 90 01 	sts	0x0190, r25
     cf2:	80 93 8f 01 	sts	0x018F, r24
		cp.cpoint2 = cpointVal;
     cf6:	20 93 8c 01 	sts	0x018C, r18
	}
	calculateCoeffs();
     cfa:	ae da       	rcall	.-2724   	; 0x258 <calculateCoeffs>
	saveCalibrationToEEPROM();
     cfc:	49 cd       	rjmp	.-1390   	; 0x790 <saveCalibrationToEEPROM>

00000cfe <mf_autopoffDo>:
}

void mf_autopoffDo(void)
{
	char *str = (char *)&temp_str;
	memcpy_P(str,&ms_autoPoffDo,7);	
     cfe:	47 e0       	ldi	r20, 0x07	; 7
     d00:	50 e0       	ldi	r21, 0x00	; 0
     d02:	6c e6       	ldi	r22, 0x6C	; 108
     d04:	70 e0       	ldi	r23, 0x00	; 0
     d06:	8c ea       	ldi	r24, 0xAC	; 172
     d08:	91 e0       	ldi	r25, 0x01	; 1
     d0a:	ea d7       	rcall	.+4052   	; 0x1ce0 <memcpy_P>
		
	if (button_state & (BD_UP | BR_UP))
     d0c:	80 91 dc 00 	lds	r24, 0x00DC
     d10:	90 91 dd 00 	lds	r25, 0x00DD
     d14:	9c 01       	movw	r18, r24
     d16:	20 74       	andi	r18, 0x40	; 64
     d18:	34 70       	andi	r19, 0x04	; 4
     d1a:	23 2b       	or	r18, r19
     d1c:	31 f0       	breq	.+12     	; 0xd2a <mf_autopoffDo+0x2c>
	{
		if (setupValue_u8 < MAX_POWEROFF_TIMEOUT)
     d1e:	80 91 f1 00 	lds	r24, 0x00F1
     d22:	8f 35       	cpi	r24, 0x5F	; 95
     d24:	68 f4       	brcc	.+26     	; 0xd40 <mf_autopoffDo+0x42>
			setupValue_u8 += POWEROFF_SET_STEP;
     d26:	8b 5f       	subi	r24, 0xFB	; 251
     d28:	09 c0       	rjmp	.+18     	; 0xd3c <mf_autopoffDo+0x3e>
		restartMenuTimer();
	}
	else if (button_state & (BD_DOWN | BR_DOWN))
     d2a:	80 78       	andi	r24, 0x80	; 128
     d2c:	98 70       	andi	r25, 0x08	; 8
     d2e:	89 2b       	or	r24, r25
     d30:	49 f0       	breq	.+18     	; 0xd44 <mf_autopoffDo+0x46>
	{
		if (setupValue_u8 > MIN_POWEROFF_TIMEOUT)
     d32:	80 91 f1 00 	lds	r24, 0x00F1
     d36:	86 30       	cpi	r24, 0x06	; 6
     d38:	18 f0       	brcs	.+6      	; 0xd40 <mf_autopoffDo+0x42>
			setupValue_u8 -= POWEROFF_SET_STEP;
     d3a:	85 50       	subi	r24, 0x05	; 5
     d3c:	80 93 f1 00 	sts	0x00F1, r24
//	 Restarts menu state timeout
//	Should be used in RUN function when control buttons are pressed.
//-----------------------------------------------------------------//
static void restartMenuTimer(void)
{
	menuTimer.Timer = 0;
     d40:	10 92 7e 00 	sts	0x007E, r1
		if (setupValue_u8 > MIN_POWEROFF_TIMEOUT)
			setupValue_u8 -= POWEROFF_SET_STEP;
		restartMenuTimer();
	}	
		
	if (userTimer.FA_GE)
     d44:	80 91 f3 00 	lds	r24, 0x00F3
     d48:	84 ff       	sbrs	r24, 4
     d4a:	10 c0       	rjmp	.+32     	; 0xd6c <mf_autopoffDo+0x6e>
	{
		if (setupValue_u8 < MAX_POWEROFF_TIMEOUT)
     d4c:	80 91 f1 00 	lds	r24, 0x00F1
     d50:	8f 35       	cpi	r24, 0x5F	; 95
     d52:	30 f4       	brcc	.+12     	; 0xd60 <mf_autopoffDo+0x62>
		{
			u16toa_align_right(setupValue_u8,str + 4,NO_TERMINATING_ZERO | 2);	
     d54:	42 e8       	ldi	r20, 0x82	; 130
     d56:	60 eb       	ldi	r22, 0xB0	; 176
     d58:	71 e0       	ldi	r23, 0x01	; 1
     d5a:	90 e0       	ldi	r25, 0x00	; 0
     d5c:	2a d2       	rcall	.+1108   	; 0x11b2 <u16toa_align_right>
     d5e:	06 c0       	rjmp	.+12     	; 0xd6c <mf_autopoffDo+0x6e>
		}			
		else 
		{
			str[4] = 'N';
     d60:	8e e4       	ldi	r24, 0x4E	; 78
     d62:	80 93 b0 01 	sts	0x01B0, r24
			str[5] = 'O';
     d66:	8f e4       	ldi	r24, 0x4F	; 79
     d68:	80 93 b1 01 	sts	0x01B1, r24
		}			
	}		
		
	printLedBuffer(0,str);
     d6c:	6c ea       	ldi	r22, 0xAC	; 172
     d6e:	71 e0       	ldi	r23, 0x01	; 1
     d70:	80 e0       	ldi	r24, 0x00	; 0
     d72:	a3 ce       	rjmp	.-698    	; 0xaba <printLedBuffer>

00000d74 <mf_calibDo>:
}

void mf_calibDo(void)
{
	char *str = (char *)&temp_str;
	memcpy_P(str,&ms_calibDo,4);
     d74:	44 e0       	ldi	r20, 0x04	; 4
     d76:	50 e0       	ldi	r21, 0x00	; 0
     d78:	68 e6       	ldi	r22, 0x68	; 104
     d7a:	70 e0       	ldi	r23, 0x00	; 0
     d7c:	8c ea       	ldi	r24, 0xAC	; 172
     d7e:	91 e0       	ldi	r25, 0x01	; 1
     d80:	af d7       	rcall	.+3934   	; 0x1ce0 <memcpy_P>
	
	if (button_state & (BD_UP | BR_UP))
     d82:	80 91 dc 00 	lds	r24, 0x00DC
     d86:	90 91 dd 00 	lds	r25, 0x00DD
     d8a:	9c 01       	movw	r18, r24
     d8c:	20 74       	andi	r18, 0x40	; 64
     d8e:	34 70       	andi	r19, 0x04	; 4
     d90:	23 2b       	or	r18, r19
     d92:	31 f0       	breq	.+12     	; 0xda0 <mf_calibDo+0x2c>
	{
		if (setupValue_u8 < MAX_CALIB_TEMP)
     d94:	80 91 f1 00 	lds	r24, 0x00F1
     d98:	8a 3f       	cpi	r24, 0xFA	; 250
     d9a:	68 f4       	brcc	.+26     	; 0xdb6 <mf_calibDo+0x42>
		setupValue_u8 += CALIB_TEMP_STEP;
     d9c:	8f 5f       	subi	r24, 0xFF	; 255
     d9e:	09 c0       	rjmp	.+18     	; 0xdb2 <mf_calibDo+0x3e>
	}
	else if (button_state & (BD_DOWN | BR_DOWN))
     da0:	80 78       	andi	r24, 0x80	; 128
     da2:	98 70       	andi	r25, 0x08	; 8
     da4:	89 2b       	or	r24, r25
     da6:	39 f0       	breq	.+14     	; 0xdb6 <mf_calibDo+0x42>
	{
		if (setupValue_u8 > MIN_CALIB_TEMP)
     da8:	80 91 f1 00 	lds	r24, 0x00F1
     dac:	8b 30       	cpi	r24, 0x0B	; 11
     dae:	18 f0       	brcs	.+6      	; 0xdb6 <mf_calibDo+0x42>
		setupValue_u8 -= CALIB_TEMP_STEP;
     db0:	81 50       	subi	r24, 0x01	; 1
     db2:	80 93 f1 00 	sts	0x00F1, r24
	}
	
	if (userTimer.FA_GE)
     db6:	80 91 f3 00 	lds	r24, 0x00F3
     dba:	84 ff       	sbrs	r24, 4
     dbc:	0d c0       	rjmp	.+26     	; 0xdd8 <mf_calibDo+0x64>
	{
		u16toa_align_right(setupValue_u8,str,3);
     dbe:	43 e0       	ldi	r20, 0x03	; 3
     dc0:	6c ea       	ldi	r22, 0xAC	; 172
     dc2:	71 e0       	ldi	r23, 0x01	; 1
     dc4:	80 91 f1 00 	lds	r24, 0x00F1
     dc8:	90 e0       	ldi	r25, 0x00	; 0
     dca:	f3 d1       	rcall	.+998    	; 0x11b2 <u16toa_align_right>
		resetAutoPowerOffCounter();
     dcc:	57 d6       	rcall	.+3246   	; 0x1a7c <resetAutoPowerOffCounter>
		heaterState |= CALIBRATION_ACTIVE;
     dce:	80 91 e1 00 	lds	r24, 0x00E1
     dd2:	82 60       	ori	r24, 0x02	; 2
     dd4:	80 93 e1 00 	sts	0x00E1, r24
	}
	
	printLedBuffer(3,str);
     dd8:	6c ea       	ldi	r22, 0xAC	; 172
     dda:	71 e0       	ldi	r23, 0x01	; 1
     ddc:	83 e0       	ldi	r24, 0x03	; 3
     dde:	6d ce       	rjmp	.-806    	; 0xaba <printLedBuffer>

00000de0 <mf_sndenDo>:
}

void mf_sndenDo(void)
{
	char *str = (char *)&temp_str;
	memcpy_P(str,&ms_soundEnDo,7);	
     de0:	47 e0       	ldi	r20, 0x07	; 7
     de2:	50 e0       	ldi	r21, 0x00	; 0
     de4:	63 e7       	ldi	r22, 0x73	; 115
     de6:	70 e0       	ldi	r23, 0x00	; 0
     de8:	8c ea       	ldi	r24, 0xAC	; 172
     dea:	91 e0       	ldi	r25, 0x01	; 1
     dec:	79 d7       	rcall	.+3826   	; 0x1ce0 <memcpy_P>
		
	if (button_state & (BD_UP | BD_DOWN))
     dee:	80 91 dc 00 	lds	r24, 0x00DC
     df2:	90 91 dd 00 	lds	r25, 0x00DD
     df6:	80 7c       	andi	r24, 0xC0	; 192
     df8:	99 27       	eor	r25, r25
     dfa:	89 2b       	or	r24, r25
     dfc:	49 f0       	breq	.+18     	; 0xe10 <mf_sndenDo+0x30>
	{
		setupValue_u8 = !setupValue_u8;
     dfe:	81 e0       	ldi	r24, 0x01	; 1
     e00:	90 91 f1 00 	lds	r25, 0x00F1
     e04:	91 11       	cpse	r25, r1
     e06:	80 e0       	ldi	r24, 0x00	; 0
     e08:	80 93 f1 00 	sts	0x00F1, r24
//	 Restarts menu state timeout
//	Should be used in RUN function when control buttons are pressed.
//-----------------------------------------------------------------//
static void restartMenuTimer(void)
{
	menuTimer.Timer = 0;
     e0c:	10 92 7e 00 	sts	0x007E, r1
	{
		setupValue_u8 = !setupValue_u8;
		restartMenuTimer();
	}			
		
	if (userTimer.FA_GE)
     e10:	80 91 f3 00 	lds	r24, 0x00F3
     e14:	84 ff       	sbrs	r24, 4
     e16:	11 c0       	rjmp	.+34     	; 0xe3a <mf_sndenDo+0x5a>
	{
		if (setupValue_u8)		
     e18:	80 91 f1 00 	lds	r24, 0x00F1
     e1c:	88 23       	and	r24, r24
     e1e:	29 f0       	breq	.+10     	; 0xe2a <mf_sndenDo+0x4a>
		{
			str[4] = 'O';
     e20:	8f e4       	ldi	r24, 0x4F	; 79
     e22:	80 93 b0 01 	sts	0x01B0, r24
			str[5] = 'N';
     e26:	8e e4       	ldi	r24, 0x4E	; 78
     e28:	06 c0       	rjmp	.+12     	; 0xe36 <mf_sndenDo+0x56>
		}
		else
		{
			str[3] = 'O';
     e2a:	8f e4       	ldi	r24, 0x4F	; 79
     e2c:	80 93 af 01 	sts	0x01AF, r24
			str[4] = 'F';
     e30:	86 e4       	ldi	r24, 0x46	; 70
     e32:	80 93 b0 01 	sts	0x01B0, r24
			str[5] = 'F';
     e36:	80 93 b1 01 	sts	0x01B1, r24
		}			
	}
		
	printLedBuffer(0,str);
     e3a:	6c ea       	ldi	r22, 0xAC	; 172
     e3c:	71 e0       	ldi	r23, 0x01	; 1
     e3e:	80 e0       	ldi	r24, 0x00	; 0
     e40:	3c de       	rcall	.-904    	; 0xaba <printLedBuffer>
	setComma(2);
     e42:	82 e0       	ldi	r24, 0x02	; 2
     e44:	56 ce       	rjmp	.-852    	; 0xaf2 <setComma>

00000e46 <mf_rollDo>:
}

void mf_rollDo(void)
{
	char *str = (char *)&temp_str;
	memcpy_P(str,&ms_rollDo,7);
     e46:	47 e0       	ldi	r20, 0x07	; 7
     e48:	50 e0       	ldi	r21, 0x00	; 0
     e4a:	6a e7       	ldi	r22, 0x7A	; 122
     e4c:	70 e0       	ldi	r23, 0x00	; 0
     e4e:	8c ea       	ldi	r24, 0xAC	; 172
     e50:	91 e0       	ldi	r25, 0x01	; 1
     e52:	46 d7       	rcall	.+3724   	; 0x1ce0 <memcpy_P>
		
	if (button_state & (BD_UP | BR_UP))
     e54:	80 91 dc 00 	lds	r24, 0x00DC
     e58:	90 91 dd 00 	lds	r25, 0x00DD
     e5c:	9c 01       	movw	r18, r24
     e5e:	20 74       	andi	r18, 0x40	; 64
     e60:	34 70       	andi	r19, 0x04	; 4
     e62:	23 2b       	or	r18, r19
     e64:	31 f0       	breq	.+12     	; 0xe72 <mf_rollDo+0x2c>
	{
		if (p.rollCycleSet < MAX_ROLL_CYCLES)
     e66:	80 91 92 01 	lds	r24, 0x0192
     e6a:	83 36       	cpi	r24, 0x63	; 99
     e6c:	68 f4       	brcc	.+26     	; 0xe88 <mf_rollDo+0x42>
			p.rollCycleSet += ROLL_CYCLES_STEP;
     e6e:	8f 5f       	subi	r24, 0xFF	; 255
     e70:	09 c0       	rjmp	.+18     	; 0xe84 <mf_rollDo+0x3e>
	}
	else if (button_state & (BD_DOWN | BR_DOWN))
     e72:	80 78       	andi	r24, 0x80	; 128
     e74:	98 70       	andi	r25, 0x08	; 8
     e76:	89 2b       	or	r24, r25
     e78:	39 f0       	breq	.+14     	; 0xe88 <mf_rollDo+0x42>
	{
		if (p.rollCycleSet > MIN_ROLL_CYCLES)
     e7a:	80 91 92 01 	lds	r24, 0x0192
     e7e:	82 30       	cpi	r24, 0x02	; 2
     e80:	18 f0       	brcs	.+6      	; 0xe88 <mf_rollDo+0x42>
			p.rollCycleSet -= ROLL_CYCLES_STEP;
     e82:	81 50       	subi	r24, 0x01	; 1
     e84:	80 93 92 01 	sts	0x0192, r24
	}	
		
	u16toa_align_right(p.rollCycleSet,str + 4,NO_TERMINATING_ZERO | 2);
     e88:	42 e8       	ldi	r20, 0x82	; 130
     e8a:	60 eb       	ldi	r22, 0xB0	; 176
     e8c:	71 e0       	ldi	r23, 0x01	; 1
     e8e:	80 91 92 01 	lds	r24, 0x0192
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	8e d1       	rcall	.+796    	; 0x11b2 <u16toa_align_right>
	
	if ((!(rollState & ROLL_CYCLE)) || (userTimer.FA_GE))
     e96:	80 91 03 01 	lds	r24, 0x0103
     e9a:	82 ff       	sbrs	r24, 2
     e9c:	04 c0       	rjmp	.+8      	; 0xea6 <mf_rollDo+0x60>
     e9e:	80 91 f3 00 	lds	r24, 0x00F3
     ea2:	84 ff       	sbrs	r24, 4
     ea4:	07 c0       	rjmp	.+14     	; 0xeb4 <mf_rollDo+0x6e>
	{
		u16toa_align_right(activeRollCycle,str + 1,NO_TERMINATING_ZERO | 2);
     ea6:	42 e8       	ldi	r20, 0x82	; 130
     ea8:	6d ea       	ldi	r22, 0xAD	; 173
     eaa:	71 e0       	ldi	r23, 0x01	; 1
     eac:	80 91 02 01 	lds	r24, 0x0102
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	7f d1       	rcall	.+766    	; 0x11b2 <u16toa_align_right>
	}
	
	str[0] = 0;
     eb4:	10 92 ac 01 	sts	0x01AC, r1
	if (isTopPointValid())
     eb8:	0f d4       	rcall	.+2078   	; 0x16d8 <isTopPointValid>
     eba:	88 23       	and	r24, r24
     ebc:	29 f0       	breq	.+10     	; 0xec8 <mf_rollDo+0x82>
		str[0] |= SEGA;
     ebe:	80 91 ac 01 	lds	r24, 0x01AC
     ec2:	81 60       	ori	r24, 0x01	; 1
     ec4:	80 93 ac 01 	sts	0x01AC, r24
	if (isBottomPointValid())
     ec8:	17 d4       	rcall	.+2094   	; 0x16f8 <isBottomPointValid>
     eca:	88 23       	and	r24, r24
     ecc:	29 f0       	breq	.+10     	; 0xed8 <mf_rollDo+0x92>
		str[0] |= SEGD;
     ece:	80 91 ac 01 	lds	r24, 0x01AC
     ed2:	88 60       	ori	r24, 0x08	; 8
     ed4:	80 93 ac 01 	sts	0x01AC, r24
	if (str[0] == 0)
     ed8:	80 91 ac 01 	lds	r24, 0x01AC
     edc:	81 11       	cpse	r24, r1
     ede:	03 c0       	rjmp	.+6      	; 0xee6 <mf_rollDo+0xa0>
		str[0] = ' ';
     ee0:	80 e2       	ldi	r24, 0x20	; 32
     ee2:	80 93 ac 01 	sts	0x01AC, r24
		
	printLedBuffer(0,str);
     ee6:	6c ea       	ldi	r22, 0xAC	; 172
     ee8:	71 e0       	ldi	r23, 0x01	; 1
     eea:	80 e0       	ldi	r24, 0x00	; 0
     eec:	e6 cd       	rjmp	.-1076   	; 0xaba <printLedBuffer>

00000eee <mf_rollSelect>:
// TOP level
//------------------------------------------------//

void mf_rollSelect(void)
{
	mf_leafSelectAct();		// setup and start timer
     eee:	6b de       	rcall	.-810    	; 0xbc6 <mf_leafSelectAct>
	setExtraLeds(LED_ROLL);
     ef0:	80 e4       	ldi	r24, 0x40	; 64
     ef2:	0b ce       	rjmp	.-1002   	; 0xb0a <setExtraLeds>

00000ef4 <mf_setTempDo>:
}

void mf_setTempDo(void)
{
	char *str = (char *)&temp_str;
	memcpy_P(str,&ms_realTempDo,7);
     ef4:	47 e0       	ldi	r20, 0x07	; 7
     ef6:	50 e0       	ldi	r21, 0x00	; 0
     ef8:	61 e8       	ldi	r22, 0x81	; 129
     efa:	70 e0       	ldi	r23, 0x00	; 0
     efc:	8c ea       	ldi	r24, 0xAC	; 172
     efe:	91 e0       	ldi	r25, 0x01	; 1
     f00:	ef d6       	rcall	.+3550   	; 0x1ce0 <memcpy_P>
	
	if (button_state & (BD_UP | BR_UP))
     f02:	80 91 dc 00 	lds	r24, 0x00DC
     f06:	90 91 dd 00 	lds	r25, 0x00DD
     f0a:	9c 01       	movw	r18, r24
     f0c:	20 74       	andi	r18, 0x40	; 64
     f0e:	34 70       	andi	r19, 0x04	; 4
     f10:	40 91 f1 00 	lds	r20, 0x00F1
     f14:	23 2b       	or	r18, r19
     f16:	21 f0       	breq	.+8      	; 0xf20 <mf_setTempDo+0x2c>
	{
		if (setupValue_u8 < MAX_SET_TEMP)
     f18:	4f 3f       	cpi	r20, 0xFF	; 255
     f1a:	59 f0       	breq	.+22     	; 0xf32 <mf_setTempDo+0x3e>
			setupValue_u8 += TEMP_SET_STEP;
     f1c:	4b 5f       	subi	r20, 0xFB	; 251
     f1e:	07 c0       	rjmp	.+14     	; 0xf2e <mf_setTempDo+0x3a>
		restartMenuTimer();
	}
	else if (button_state & (BD_DOWN | BR_DOWN))
     f20:	80 78       	andi	r24, 0x80	; 128
     f22:	98 70       	andi	r25, 0x08	; 8
     f24:	89 2b       	or	r24, r25
     f26:	39 f0       	breq	.+14     	; 0xf36 <mf_setTempDo+0x42>
	{
		if (setupValue_u8 > MIN_SET_TEMP)
     f28:	4f 31       	cpi	r20, 0x1F	; 31
     f2a:	18 f0       	brcs	.+6      	; 0xf32 <mf_setTempDo+0x3e>
			setupValue_u8 -= TEMP_SET_STEP;
     f2c:	45 50       	subi	r20, 0x05	; 5
     f2e:	40 93 f1 00 	sts	0x00F1, r20
//	 Restarts menu state timeout
//	Should be used in RUN function when control buttons are pressed.
//-----------------------------------------------------------------//
static void restartMenuTimer(void)
{
	menuTimer.Timer = 0;
     f32:	10 92 7e 00 	sts	0x007E, r1
			setupValue_u8 -= TEMP_SET_STEP;
		restartMenuTimer();
	}					
		
	// Output setting to LED
	if (setupValue_u8 < MAX_SET_TEMP)
     f36:	80 91 f1 00 	lds	r24, 0x00F1
     f3a:	8f 3f       	cpi	r24, 0xFF	; 255
     f3c:	41 f0       	breq	.+16     	; 0xf4e <mf_setTempDo+0x5a>
	{
		u16toa_align_right(setupValue_u8,str,NO_TERMINATING_ZERO | 4);
     f3e:	44 e8       	ldi	r20, 0x84	; 132
     f40:	6c ea       	ldi	r22, 0xAC	; 172
     f42:	71 e0       	ldi	r23, 0x01	; 1
     f44:	90 e0       	ldi	r25, 0x00	; 0
     f46:	35 d1       	rcall	.+618    	; 0x11b2 <u16toa_align_right>
		printLedBuffer(0,str);
     f48:	6c ea       	ldi	r22, 0xAC	; 172
     f4a:	71 e0       	ldi	r23, 0x01	; 1
     f4c:	02 c0       	rjmp	.+4      	; 0xf52 <mf_setTempDo+0x5e>
	}		
	else
	{
		printLedBuffer(0," UNREG");
     f4e:	6a ea       	ldi	r22, 0xAA	; 170
     f50:	70 e0       	ldi	r23, 0x00	; 0
     f52:	80 e0       	ldi	r24, 0x00	; 0
     f54:	b2 dd       	rcall	.-1180   	; 0xaba <printLedBuffer>
	}
	
	if (userTimer.FA_GE)
     f56:	80 91 f3 00 	lds	r24, 0x00F3
     f5a:	84 ff       	sbrs	r24, 4
     f5c:	02 c0       	rjmp	.+4      	; 0xf62 <mf_setTempDo+0x6e>
		setExtraLeds(LED_TEMP);
     f5e:	80 e8       	ldi	r24, 0x80	; 128
     f60:	d4 cd       	rjmp	.-1112   	; 0xb0a <setExtraLeds>
	else
		clearExtraLeds(LED_TEMP);
     f62:	80 e8       	ldi	r24, 0x80	; 128
     f64:	d8 cd       	rjmp	.-1104   	; 0xb16 <clearExtraLeds>

00000f66 <mf_realTempSelect>:
// Menu item "Real temperature indication"
// TOP level
//------------------------------------------------//
void mf_realTempSelect(void)
{
	setExtraLeds(LED_TEMP);
     f66:	80 e8       	ldi	r24, 0x80	; 128
     f68:	d0 cd       	rjmp	.-1120   	; 0xb0a <setExtraLeds>

00000f6a <mf_realTempDo>:
}

void mf_realTempDo(void)
{
	char *str = (char *)&temp_str;
	memcpy_P(str,&ms_realTempDo,7);
     f6a:	47 e0       	ldi	r20, 0x07	; 7
     f6c:	50 e0       	ldi	r21, 0x00	; 0
     f6e:	61 e8       	ldi	r22, 0x81	; 129
     f70:	70 e0       	ldi	r23, 0x00	; 0
     f72:	8c ea       	ldi	r24, 0xAC	; 172
     f74:	91 e0       	ldi	r25, 0x01	; 1
     f76:	b4 d6       	rcall	.+3432   	; 0x1ce0 <memcpy_P>
	
	if (adc_status & (SENSOR_ERROR_NO_PRESENT))
     f78:	80 91 5f 01 	lds	r24, 0x015F
     f7c:	80 ff       	sbrs	r24, 0
     f7e:	03 c0       	rjmp	.+6      	; 0xf86 <mf_realTempDo+0x1c>
	{
		printLedBuffer(0,"ERR 01");
     f80:	61 eb       	ldi	r22, 0xB1	; 177
     f82:	70 e0       	ldi	r23, 0x00	; 0
     f84:	13 c0       	rjmp	.+38     	; 0xfac <mf_realTempDo+0x42>
	}
	else if (adc_status & (SENSOR_ERROR_SHORTED))
     f86:	81 ff       	sbrs	r24, 1
     f88:	03 c0       	rjmp	.+6      	; 0xf90 <mf_realTempDo+0x26>
	{
		printLedBuffer(0,"ERR 02");
     f8a:	68 eb       	ldi	r22, 0xB8	; 184
     f8c:	70 e0       	ldi	r23, 0x00	; 0
     f8e:	0e c0       	rjmp	.+28     	; 0xfac <mf_realTempDo+0x42>
	}
	else
	{
		// Output ADC result to LED
		i32toa_align_right((int32_t)adc_celsius,str,NO_TERMINATING_ZERO | 4);
     f90:	60 91 60 01 	lds	r22, 0x0160
     f94:	70 91 61 01 	lds	r23, 0x0161
     f98:	88 27       	eor	r24, r24
     f9a:	77 fd       	sbrc	r23, 7
     f9c:	80 95       	com	r24
     f9e:	98 2f       	mov	r25, r24
     fa0:	24 e8       	ldi	r18, 0x84	; 132
     fa2:	4c ea       	ldi	r20, 0xAC	; 172
     fa4:	51 e0       	ldi	r21, 0x01	; 1
     fa6:	b8 d0       	rcall	.+368    	; 0x1118 <i32toa_align_right>
		printLedBuffer(0,str);
     fa8:	6c ea       	ldi	r22, 0xAC	; 172
     faa:	71 e0       	ldi	r23, 0x01	; 1
     fac:	80 e0       	ldi	r24, 0x00	; 0
     fae:	85 cd       	rjmp	.-1270   	; 0xaba <printLedBuffer>

00000fb0 <getMenuFunctionRecord.constprop.1>:
//	Arguments:
//		menuItemID - ID of an item
//		menuRecord - pointer to function structure to fill
//	Output:
//-----------------------------------------------------------------//
static void getMenuFunctionRecord(uint8_t menuItemID, MenuFunctionRecord* menuRecord )
     fb0:	0f 93       	push	r16
     fb2:	1f 93       	push	r17
     fb4:	cf 93       	push	r28
     fb6:	df 93       	push	r29
     fb8:	18 2f       	mov	r17, r24
     fba:	c0 e0       	ldi	r28, 0x00	; 0
     fbc:	d0 e0       	ldi	r29, 0x00	; 0
{
	uint8_t i;
	for (i = 0; i < sizeof(menuFunctionSet)/sizeof(MenuFunctionRecord); i++  )
	{
		memcpy_P(menuRecord,&menuFunctionSet[i],sizeof(MenuFunctionRecord));
     fbe:	07 e0       	ldi	r16, 0x07	; 7
     fc0:	0c 9f       	mul	r16, r28
     fc2:	b0 01       	movw	r22, r0
     fc4:	0d 9f       	mul	r16, r29
     fc6:	70 0d       	add	r23, r0
     fc8:	11 24       	eor	r1, r1
     fca:	68 57       	subi	r22, 0x78	; 120
     fcc:	7f 4f       	sbci	r23, 0xFF	; 255
     fce:	47 e0       	ldi	r20, 0x07	; 7
     fd0:	50 e0       	ldi	r21, 0x00	; 0
     fd2:	8a ee       	ldi	r24, 0xEA	; 234
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	84 d6       	rcall	.+3336   	; 0x1ce0 <memcpy_P>
		if (menuRecord->Item == menuItemID)
     fd8:	80 91 ea 00 	lds	r24, 0x00EA
     fdc:	81 17       	cp	r24, r17
     fde:	21 f0       	breq	.+8      	; 0xfe8 <getMenuFunctionRecord.constprop.1+0x38>
     fe0:	21 96       	adiw	r28, 0x01	; 1
//	Output:
//-----------------------------------------------------------------//
static void getMenuFunctionRecord(uint8_t menuItemID, MenuFunctionRecord* menuRecord )
{
	uint8_t i;
	for (i = 0; i < sizeof(menuFunctionSet)/sizeof(MenuFunctionRecord); i++  )
     fe2:	ce 30       	cpi	r28, 0x0E	; 14
     fe4:	d1 05       	cpc	r29, r1
     fe6:	61 f7       	brne	.-40     	; 0xfc0 <getMenuFunctionRecord.constprop.1+0x10>
	{
		memcpy_P(menuRecord,&menuFunctionSet[i],sizeof(MenuFunctionRecord));
		if (menuRecord->Item == menuItemID)
			break;
	}
}
     fe8:	df 91       	pop	r29
     fea:	cf 91       	pop	r28
     fec:	1f 91       	pop	r17
     fee:	0f 91       	pop	r16
     ff0:	08 95       	ret

00000ff2 <InitMenu>:
//	Menu initialization
//	Call this function at start of your program before processMenu()
//-----------------------------------------------------------------//
void InitMenu(void)
{
	selectedMenuItemID = mi_REALTEMP;
     ff2:	81 e0       	ldi	r24, 0x01	; 1
     ff4:	80 93 e9 00 	sts	0x00E9, r24
	getMenuFunctionRecord(selectedMenuItemID, &selectedMenuFunctionRecord);
     ff8:	db df       	rcall	.-74     	; 0xfb0 <getMenuFunctionRecord.constprop.1>
	processItemFunction(selectedMenuFunctionRecord.SelectFunction);
     ffa:	80 91 eb 00 	lds	r24, 0x00EB
     ffe:	90 91 ec 00 	lds	r25, 0x00EC
    1002:	ce cd       	rjmp	.-1124   	; 0xba0 <processItemFunction>

00001004 <processMenu>:
//	Main menu control, -  state function calls, jumps 
//	between menu states and indication
//	Call this function from main() with a fixed time interval.
//-----------------------------------------------------------------//
void processMenu(void)
{
    1004:	af 92       	push	r10
    1006:	bf 92       	push	r11
    1008:	cf 92       	push	r12
    100a:	df 92       	push	r13
    100c:	ef 92       	push	r14
    100e:	ff 92       	push	r15
    1010:	0f 93       	push	r16
    1012:	1f 93       	push	r17
    1014:	cf 93       	push	r28
    1016:	df 93       	push	r29
    1018:	00 d0       	rcall	.+0      	; 0x101a <processMenu+0x16>
    101a:	00 d0       	rcall	.+0      	; 0x101c <processMenu+0x18>
    101c:	1f 92       	push	r1
    101e:	cd b7       	in	r28, 0x3d	; 61
    1020:	de b7       	in	r29, 0x3e	; 62
	NextItem_t nextItem;
	uint16_t jumpCondition;
	
	processSoftTimer8b(&menuTimer);	
    1022:	8d e7       	ldi	r24, 0x7D	; 125
    1024:	90 e0       	ldi	r25, 0x00	; 0
    1026:	97 d4       	rcall	.+2350   	; 0x1956 <processSoftTimer8b>
	
	// Compose jump condition
	jumpCondition = button_state;		
    1028:	00 91 dc 00 	lds	r16, 0x00DC
    102c:	10 91 dd 00 	lds	r17, 0x00DD
	if (menuTimer.FTop)
    1030:	80 91 7d 00 	lds	r24, 0x007D
    1034:	85 fd       	sbrc	r24, 5
		jumpCondition |= TMR_EXP;
    1036:	10 68       	ori	r17, 0x80	; 128
	if (sys_timers.flags & AUTOPOFF_EXPIRED)
    1038:	80 91 89 00 	lds	r24, 0x0089
    103c:	84 fd       	sbrc	r24, 4
		jumpCondition |= GOTO_POFF;
    103e:	10 64       	ori	r17, 0x40	; 64
	
	// Get next menu item according to current state and jump conditions
	nextItem = getNextMenuItem(selectedMenuItemID, jumpCondition);
    1040:	d0 90 e9 00 	lds	r13, 0x00E9
    1044:	e1 2c       	mov	r14, r1
    1046:	f1 2c       	mov	r15, r1
	MenuJumpRecord	jRecord;
	uint8_t i;
	
	for (i = 0; i < sizeof(menuJumpSet)/sizeof(MenuJumpRecord); i++  )
	{
		memcpy_P(&jRecord,&menuJumpSet[i],sizeof(MenuJumpRecord));
    1048:	35 e0       	ldi	r19, 0x05	; 5
    104a:	a3 2e       	mov	r10, r19
    104c:	ae 9c       	mul	r10, r14
    104e:	b0 01       	movw	r22, r0
    1050:	af 9c       	mul	r10, r15
    1052:	70 0d       	add	r23, r0
    1054:	11 24       	eor	r1, r1
    1056:	66 51       	subi	r22, 0x16	; 22
    1058:	7f 4f       	sbci	r23, 0xFF	; 255
    105a:	45 e0       	ldi	r20, 0x05	; 5
    105c:	50 e0       	ldi	r21, 0x00	; 0
    105e:	ce 01       	movw	r24, r28
    1060:	01 96       	adiw	r24, 0x01	; 1
    1062:	3e d6       	rcall	.+3196   	; 0x1ce0 <memcpy_P>
		if (jRecord.Item == selectedItemId)				// If ID match,
    1064:	89 81       	ldd	r24, Y+1	; 0x01
    1066:	8d 11       	cpse	r24, r13
    1068:	0f c0       	rjmp	.+30     	; 0x1088 <processMenu+0x84>
		{
			if ((jRecord.JumpCondition & jmpCond) != 0)		// if any of jump conditions match too,
    106a:	2a 81       	ldd	r18, Y+2	; 0x02
    106c:	3b 81       	ldd	r19, Y+3	; 0x03
    106e:	20 23       	and	r18, r16
    1070:	31 23       	and	r19, r17
    1072:	23 2b       	or	r18, r19
    1074:	49 f0       	breq	.+18     	; 0x1088 <processMenu+0x84>
			{
				nextItem.ItemID = jRecord.NextItem;			// switch to next menu item
    1076:	dc 80       	ldd	r13, Y+4	; 0x04
				nextItem.ItemTimeout = jRecord.Flags & TIMEOUT_MASK;
    1078:	8d 81       	ldd	r24, Y+5	; 0x05
    107a:	9f e0       	ldi	r25, 0x0F	; 15
    107c:	b9 2e       	mov	r11, r25
    107e:	b8 22       	and	r11, r24
				nextItem.Flags = jRecord.Flags & ~TIMEOUT_MASK;
    1080:	20 ef       	ldi	r18, 0xF0	; 240
    1082:	c2 2e       	mov	r12, r18
    1084:	c8 22       	and	r12, r24
    1086:	07 c0       	rjmp	.+14     	; 0x1096 <processMenu+0x92>
    1088:	8f ef       	ldi	r24, 0xFF	; 255
    108a:	e8 1a       	sub	r14, r24
    108c:	f8 0a       	sbc	r15, r24
	NextItem_t nextItem;
	nextItem.ItemID = selectedItemId;
	MenuJumpRecord	jRecord;
	uint8_t i;
	
	for (i = 0; i < sizeof(menuJumpSet)/sizeof(MenuJumpRecord); i++  )
    108e:	84 e2       	ldi	r24, 0x24	; 36
    1090:	e8 16       	cp	r14, r24
    1092:	f1 04       	cpc	r15, r1
    1094:	d9 f6       	brne	.-74     	; 0x104c <processMenu+0x48>
	
	// Get next menu item according to current state and jump conditions
	nextItem = getNextMenuItem(selectedMenuItemID, jumpCondition);
	
	// If next item differs from current
	if (nextItem.ItemID != selectedMenuItemID)
    1096:	80 91 e9 00 	lds	r24, 0x00E9
    109a:	d8 16       	cp	r13, r24
    109c:	29 f1       	breq	.+74     	; 0x10e8 <processMenu+0xe4>
	{		
		jumpFlags = nextItem.Flags;
    109e:	c0 92 f7 00 	sts	0x00F7, r12
		// Call exit function for current item
		processItemFunction(selectedMenuFunctionRecord.LeaveFunction);
    10a2:	80 91 ef 00 	lds	r24, 0x00EF
    10a6:	90 91 f0 00 	lds	r25, 0x00F0
    10aa:	7a dd       	rcall	.-1292   	; 0xba0 <processItemFunction>
		
		// If shifting is specified, start it before calling any 
		//	new menu item functions 
		if (nextItem.Flags & SHIFT_RIGHT)
    10ac:	c6 fe       	sbrs	r12, 6
    10ae:	02 c0       	rjmp	.+4      	; 0x10b4 <processMenu+0xb0>
			startShiftingWindowRight();
    10b0:	d3 dc       	rcall	.-1626   	; 0xa58 <startShiftingWindowRight>
    10b2:	02 c0       	rjmp	.+4      	; 0x10b8 <processMenu+0xb4>
		else if (nextItem.Flags & SHIFT_LEFT)
    10b4:	c7 fc       	sbrc	r12, 7
			startShiftingWindowLeft();
    10b6:	c2 dc       	rcall	.-1660   	; 0xa3c <startShiftingWindowLeft>
		
		// Select new item
		selectedMenuItemID = nextItem.ItemID;
    10b8:	d0 92 e9 00 	sts	0x00E9, r13
		
		// Load from FLASH and save function pointers
		getMenuFunctionRecord(selectedMenuItemID, &selectedMenuFunctionRecord);
    10bc:	8d 2d       	mov	r24, r13
    10be:	78 df       	rcall	.-272    	; 0xfb0 <getMenuFunctionRecord.constprop.1>
		// Call select function for next item
		processItemFunction(selectedMenuFunctionRecord.SelectFunction);
    10c0:	80 91 eb 00 	lds	r24, 0x00EB
    10c4:	90 91 ec 00 	lds	r25, 0x00EC
    10c8:	6b dd       	rcall	.-1322   	; 0xba0 <processItemFunction>
		// Start timer if timeout is enabled
		if (nextItem.ItemTimeout != 0)
    10ca:	bb 20       	and	r11, r11
    10cc:	a9 f0       	breq	.+42     	; 0x10f8 <processMenu+0xf4>
		{
			menuTimer.Top = nextItem.ItemTimeout * MENU_TIMEOUT_MULT;
    10ce:	bb 0c       	add	r11, r11
    10d0:	bb 0c       	add	r11, r11
    10d2:	bb 0c       	add	r11, r11
    10d4:	b0 92 7f 00 	sts	0x007F, r11
			menuTimer.Timer = 0;
    10d8:	10 92 7e 00 	sts	0x007E, r1
			menuTimer.Enabled = 1;	
    10dc:	80 91 7d 00 	lds	r24, 0x007D
    10e0:	81 60       	ori	r24, 0x01	; 1
    10e2:	80 93 7d 00 	sts	0x007D, r24
    10e6:	08 c0       	rjmp	.+16     	; 0x10f8 <processMenu+0xf4>
		}	
	}
	else
	{
		processSoftTimer8b(&userTimer);
    10e8:	83 ef       	ldi	r24, 0xF3	; 243
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	34 d4       	rcall	.+2152   	; 0x1956 <processSoftTimer8b>
		// Stay at previous item
		processItemFunction(selectedMenuFunctionRecord.RunFunction);
    10ee:	80 91 ed 00 	lds	r24, 0x00ED
    10f2:	90 91 ee 00 	lds	r25, 0x00EE
    10f6:	54 dd       	rcall	.-1368   	; 0xba0 <processItemFunction>
	}	
}
    10f8:	0f 90       	pop	r0
    10fa:	0f 90       	pop	r0
    10fc:	0f 90       	pop	r0
    10fe:	0f 90       	pop	r0
    1100:	0f 90       	pop	r0
    1102:	df 91       	pop	r29
    1104:	cf 91       	pop	r28
    1106:	1f 91       	pop	r17
    1108:	0f 91       	pop	r16
    110a:	ff 90       	pop	r15
    110c:	ef 90       	pop	r14
    110e:	df 90       	pop	r13
    1110:	cf 90       	pop	r12
    1112:	bf 90       	pop	r11
    1114:	af 90       	pop	r10
    1116:	08 95       	ret

00001118 <i32toa_align_right>:
}



void i32toa_align_right(int32_t val, char *buffer, uint8_t len)
{
    1118:	cf 92       	push	r12
    111a:	df 92       	push	r13
    111c:	ef 92       	push	r14
    111e:	ff 92       	push	r15
    1120:	0f 93       	push	r16
    1122:	1f 93       	push	r17
    1124:	cf 93       	push	r28
    1126:	df 93       	push	r29
    1128:	12 2f       	mov	r17, r18
	uint8_t is_negative = 0;
	if (!len)	return;
    112a:	22 23       	and	r18, r18
    112c:	c9 f1       	breq	.+114    	; 0x11a0 <i32toa_align_right+0x88>
	
	if (val < 0)
    112e:	97 ff       	sbrs	r25, 7
    1130:	09 c0       	rjmp	.+18     	; 0x1144 <i32toa_align_right+0x2c>
	{
		val = -val;
    1132:	90 95       	com	r25
    1134:	80 95       	com	r24
    1136:	70 95       	com	r23
    1138:	61 95       	neg	r22
    113a:	7f 4f       	sbci	r23, 0xFF	; 255
    113c:	8f 4f       	sbci	r24, 0xFF	; 255
    113e:	9f 4f       	sbci	r25, 0xFF	; 255
		is_negative = 1;
    1140:	01 e0       	ldi	r16, 0x01	; 1
    1142:	01 c0       	rjmp	.+2      	; 0x1146 <i32toa_align_right+0x2e>



void i32toa_align_right(int32_t val, char *buffer, uint8_t len)
{
	uint8_t is_negative = 0;
    1144:	00 e0       	ldi	r16, 0x00	; 0
	{
		val = -val;
		is_negative = 1;
	}
	
	if (len & NO_TERMINATING_ZERO)
    1146:	17 ff       	sbrs	r17, 7
    1148:	05 c0       	rjmp	.+10     	; 0x1154 <i32toa_align_right+0x3c>
	{
		len = len & ~NO_TERMINATING_ZERO;
    114a:	1f 77       	andi	r17, 0x7F	; 127
		buffer += len;	
    114c:	ea 01       	movw	r28, r20
    114e:	c1 0f       	add	r28, r17
    1150:	d1 1d       	adc	r29, r1
    1152:	04 c0       	rjmp	.+8      	; 0x115c <i32toa_align_right+0x44>
	}
	else
	{
		buffer += len;	
    1154:	ea 01       	movw	r28, r20
    1156:	c1 0f       	add	r28, r17
    1158:	d1 1d       	adc	r29, r1
		*buffer = 0;
    115a:	18 82       	st	Y, r1
	}
	
	do
	{
		*--buffer = val % 10 + '0';
    115c:	2a e0       	ldi	r18, 0x0A	; 10
    115e:	c2 2e       	mov	r12, r18
    1160:	d1 2c       	mov	r13, r1
    1162:	e1 2c       	mov	r14, r1
    1164:	f1 2c       	mov	r15, r1
    1166:	a7 01       	movw	r20, r14
    1168:	96 01       	movw	r18, r12
    116a:	5b d5       	rcall	.+2742   	; 0x1c22 <__divmodsi4>
    116c:	60 5d       	subi	r22, 0xD0	; 208
    116e:	6a 93       	st	-Y, r22
		val /= 10;
    1170:	b9 01       	movw	r22, r18
    1172:	ca 01       	movw	r24, r20
		len--;
    1174:	11 50       	subi	r17, 0x01	; 1
	}
	while ((val != 0) && len);
    1176:	61 15       	cp	r22, r1
    1178:	71 05       	cpc	r23, r1
    117a:	81 05       	cpc	r24, r1
    117c:	91 05       	cpc	r25, r1
    117e:	19 f0       	breq	.+6      	; 0x1186 <i32toa_align_right+0x6e>
    1180:	11 11       	cpse	r17, r1
    1182:	f1 cf       	rjmp	.-30     	; 0x1166 <i32toa_align_right+0x4e>
    1184:	08 c0       	rjmp	.+16     	; 0x1196 <i32toa_align_right+0x7e>
	
	if ( (len) && (is_negative) )
    1186:	11 23       	and	r17, r17
    1188:	31 f0       	breq	.+12     	; 0x1196 <i32toa_align_right+0x7e>
    118a:	00 23       	and	r16, r16
    118c:	21 f0       	breq	.+8      	; 0x1196 <i32toa_align_right+0x7e>
	{
		*--buffer = '-';
    118e:	21 97       	sbiw	r28, 0x01	; 1
    1190:	8d e2       	ldi	r24, 0x2D	; 45
    1192:	88 83       	st	Y, r24
		len--;	
    1194:	11 50       	subi	r17, 0x01	; 1
	}	
	
	// Padding
	while(len--)
		*--buffer = ' ';
    1196:	80 e2       	ldi	r24, 0x20	; 32
    1198:	01 c0       	rjmp	.+2      	; 0x119c <i32toa_align_right+0x84>
    119a:	8a 93       	st	-Y, r24
		*--buffer = '-';
		len--;	
	}	
	
	// Padding
	while(len--)
    119c:	11 50       	subi	r17, 0x01	; 1
    119e:	e8 f7       	brcc	.-6      	; 0x119a <i32toa_align_right+0x82>
		*--buffer = ' ';
}
    11a0:	df 91       	pop	r29
    11a2:	cf 91       	pop	r28
    11a4:	1f 91       	pop	r17
    11a6:	0f 91       	pop	r16
    11a8:	ff 90       	pop	r15
    11aa:	ef 90       	pop	r14
    11ac:	df 90       	pop	r13
    11ae:	cf 90       	pop	r12
    11b0:	08 95       	ret

000011b2 <u16toa_align_right>:




void u16toa_align_right(uint16_t val, char *buffer, uint8_t len)
{
    11b2:	fb 01       	movw	r30, r22
    11b4:	24 2f       	mov	r18, r20
	i32toa_align_right((int32_t)val, buffer, len);
    11b6:	bc 01       	movw	r22, r24
    11b8:	80 e0       	ldi	r24, 0x00	; 0
    11ba:	90 e0       	ldi	r25, 0x00	; 0
    11bc:	af 01       	movw	r20, r30
    11be:	ac cf       	rjmp	.-168    	; 0x1118 <i32toa_align_right>

000011c0 <logI32p>:
	USART_sendstr(str);
}

static void logI32p(int32_t val)
{
	i32toa_align_right(val,str,12);
    11c0:	2c e0       	ldi	r18, 0x0C	; 12
    11c2:	46 eb       	ldi	r20, 0xB6	; 182
    11c4:	51 e0       	ldi	r21, 0x01	; 1
    11c6:	a8 df       	rcall	.-176    	; 0x1118 <i32toa_align_right>
	USART_sendstr(str);
    11c8:	86 eb       	ldi	r24, 0xB6	; 182
    11ca:	91 e0       	ldi	r25, 0x01	; 1
    11cc:	fd c4       	rjmp	.+2554   	; 0x1bc8 <USART_sendstr>

000011ce <logU16p>:
}


static void logU16p(uint16_t val)
{
	u16toa_align_right(val,str,6);
    11ce:	46 e0       	ldi	r20, 0x06	; 6
    11d0:	66 eb       	ldi	r22, 0xB6	; 182
    11d2:	71 e0       	ldi	r23, 0x01	; 1
    11d4:	ee df       	rcall	.-36     	; 0x11b2 <u16toa_align_right>
	USART_sendstr(str);
    11d6:	86 eb       	ldi	r24, 0xB6	; 182
    11d8:	91 e0       	ldi	r25, 0x01	; 1
    11da:	f6 c4       	rjmp	.+2540   	; 0x1bc8 <USART_sendstr>

000011dc <main>:


char str[20];

int main(void)
{
    11dc:	cf 93       	push	r28
    11de:	df 93       	push	r29
    11e0:	1f 92       	push	r1
    11e2:	cd b7       	in	r28, 0x3d	; 61
    11e4:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t temp8u = 0x00;
    11e6:	19 82       	std	Y+1, r1	; 0x01


static void init_system_io()
{
	// Setup Port D
	PORTD = 0;//(1<<PD_SYNCA | 1<<PD_SYNCB);
    11e8:	12 ba       	out	0x12, r1	; 18
	DDRD = (1<<PD_TXD | 1<<PD_M1 | 1<<PD_M2 | 1<<PD_HEATER | 1<<PD_HEAT_INDIC );
    11ea:	8e e3       	ldi	r24, 0x3E	; 62
    11ec:	81 bb       	out	0x11, r24	; 17
	
	// Setup Port B
	PORTB = 0;
    11ee:	18 ba       	out	0x18, r1	; 24
	DDRB = (1<<PB_BEEPER | 1<<PB_LED_DOUT | 1<<PB_LED_CLK | 1<<PB_SEGF | 1<<PB_SEGG | 1<<PB_SEGH);
    11f0:	8f e3       	ldi	r24, 0x3F	; 63
    11f2:	87 bb       	out	0x17, r24	; 23
	
	PORTC = 0;
    11f4:	15 ba       	out	0x15, r1	; 21
	DDRC = (1<<PC_SEGA | 1<<PC_SEGB | 1<<PC_SEGC | 1<<PC_SEGD | 1<<PC_SEGE);	
    11f6:	8f e1       	ldi	r24, 0x1F	; 31
    11f8:	84 bb       	out	0x14, r24	; 20

	// Setup timer0
	// 1/1024 prescaler, T=64us @16MHz
	TCCR0 = (1<<CS02 | 0<<CS01 | 1<<CS00);
    11fa:	85 e0       	ldi	r24, 0x05	; 5
    11fc:	83 bf       	out	0x33, r24	; 51
	TCNT0 = 0;
    11fe:	12 be       	out	0x32, r1	; 50
	// Clear interrupt flag
	TIFR |= (1<<TOV0);
    1200:	88 b7       	in	r24, 0x38	; 56
    1202:	81 60       	ori	r24, 0x01	; 1
    1204:	88 bf       	out	0x38, r24	; 56
	// Enable interrupts from timer 0
	TIMSK |= (1<<TOIE0);
    1206:	89 b7       	in	r24, 0x39	; 57
    1208:	81 60       	ori	r24, 0x01	; 1
    120a:	89 bf       	out	0x39, r24	; 57
	
	// Setup timer2 as 1ms system frequency generator
	// 1/64 prescaler, CTC mode, OC2 disconnected
	TCCR2 = (1<<CS22 | 1<<WGM21);
    120c:	8c e0       	ldi	r24, 0x0C	; 12
    120e:	85 bd       	out	0x25, r24	; 37
	OCR2 = 249;						// 1ms @ 16MHz
    1210:	89 ef       	ldi	r24, 0xF9	; 249
    1212:	83 bd       	out	0x23, r24	; 35
	TIMSK |= (1<<OCIE2);
    1214:	89 b7       	in	r24, 0x39	; 57
    1216:	80 68       	ori	r24, 0x80	; 128
    1218:	89 bf       	out	0x39, r24	; 57
	
	// Setup timer1 as beeper frequency generator
	// CTC mode, 1/64 prescaler
	TCCR1A = 0;
    121a:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = (1<<WGM12 | 1<<CS11 | 1<<CS10);
    121c:	8b e0       	ldi	r24, 0x0B	; 11
    121e:	8e bd       	out	0x2e, r24	; 46
	// 1kHz beeper frequency default
	OCR1A = 127;
    1220:	8f e7       	ldi	r24, 0x7F	; 127
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	9b bd       	out	0x2b, r25	; 43
    1226:	8a bd       	out	0x2a, r24	; 42

	// Setup AC sync comparator
	// Interrupt on output toggle
	ACSR = (1<<ACIE | 0<<ACIS1 | 0<<ACIS0);
    1228:	88 e0       	ldi	r24, 0x08	; 8
    122a:	88 b9       	out	0x08, r24	; 8
	
	// Setup ADC
	// Internal Vref + cap, input ADC5, 
	ADMUX = (1<<REFS1 | 1<<REFS0 | 0<<MUX3 | 1<<MUX2 | 0<<MUX1 | 1<<MUX0 );
    122c:	85 ec       	ldi	r24, 0xC5	; 197
    122e:	87 b9       	out	0x07, r24	; 7
	// Prescaler = 128
	ADCSRA = (1<<ADEN |/* 1<<ADFR |*/  1<<ADIE | 1<<ADPS2 | 1<<ADPS1 | 1<<ADPS0);
    1230:	8f e8       	ldi	r24, 0x8F	; 143
    1232:	86 b9       	out	0x06, r24	; 6
	
	// Setup USART
	// Double speed
	UCSRA = (1<<U2X);
    1234:	82 e0       	ldi	r24, 0x02	; 2
    1236:	8b b9       	out	0x0b, r24	; 11
	UCSRB = (1<<RXEN | 1<<TXEN | 0<<UCSZ2);
    1238:	88 e1       	ldi	r24, 0x18	; 24
    123a:	8a b9       	out	0x0a, r24	; 10
	// No parity, 1 stop bit, 8 bit
	UCSRC = (1<<URSEL | 0<<UPM1 | 0<<UPM0 | 0<<USBS | 1<<UCSZ1 | 1<<UCSZ0);
    123c:	86 e8       	ldi	r24, 0x86	; 134
    123e:	80 bd       	out	0x20, r24	; 32
	// 57600 @16MHz, 2x
	UBRRH=0x00;
    1240:	10 bc       	out	0x20, r1	; 32
	UBRRL=0x22;
    1242:	82 e2       	ldi	r24, 0x22	; 34
    1244:	89 b9       	out	0x09, r24	; 9
	volatile uint16_t temp16u;
	// Initialize MCU IO
	init_system_io();
	// Restore params from EEPROM
	// If some values are corrupted, settings or/and calibration are loaded with default configuration.
	temp8u = restoreGlobalParams();
    1246:	c2 da       	rcall	.-2684   	; 0x7cc <restoreGlobalParams>
    1248:	89 83       	std	Y+1, r24	; 0x01
	// Calibrate ADC coefficients using restored params
	calculateCoeffs();
    124a:	06 d8       	rcall	.-4084   	; 0x258 <calculateCoeffs>
	// Initialize LED indicator
	initLedIndicator();
    124c:	13 dc       	rcall	.-2010   	; 0xa74 <initLedIndicator>
	// Clear comparator interrupt flag to prevent false triggering
	ACSR |= (1<<ACI);
    124e:	44 9a       	sbi	0x08, 4	; 8
	sei();
    1250:	78 94       	sei
	// If default values were loaded from EEPROM, inform user
	#ifdef USE_EEPROM_CRC
	if (temp8u)
    1252:	89 81       	ldd	r24, Y+1	; 0x01
    1254:	88 23       	and	r24, r24
    1256:	a9 f0       	breq	.+42     	; 0x1282 <main+0xa6>
	{
		printLedBuffer(0,"ERR E");
    1258:	6f eb       	ldi	r22, 0xBF	; 191
    125a:	70 e0       	ldi	r23, 0x00	; 0
    125c:	80 e0       	ldi	r24, 0x00	; 0
    125e:	2d dc       	rcall	.-1958   	; 0xaba <printLedBuffer>
		fillLedBuffer(5,1,temp8u + 0x30);	// error code: E1 - CRC error in global params, E2 - CRC error in calibration, E3 - both
    1260:	49 81       	ldd	r20, Y+1	; 0x01
    1262:	40 5d       	subi	r20, 0xD0	; 208
    1264:	61 e0       	ldi	r22, 0x01	; 1
    1266:	85 e0       	ldi	r24, 0x05	; 5
    1268:	c5 db       	rcall	.-2166   	; 0x9f4 <fillLedBuffer>
		Sound_Play(m_beep_err1);
    126a:	84 e5       	ldi	r24, 0x54	; 84
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	91 d4       	rcall	.+2338   	; 0x1b92 <Sound_Play>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1270:	2f ef       	ldi	r18, 0xFF	; 255
    1272:	83 ed       	ldi	r24, 0xD3	; 211
    1274:	90 e3       	ldi	r25, 0x30	; 48
    1276:	21 50       	subi	r18, 0x01	; 1
    1278:	80 40       	sbci	r24, 0x00	; 0
    127a:	90 40       	sbci	r25, 0x00	; 0
    127c:	e1 f7       	brne	.-8      	; 0x1276 <main+0x9a>
    127e:	00 c0       	rjmp	.+0      	; 0x1280 <main+0xa4>
    1280:	00 00       	nop
		_delay_ms(1000);
	} 
	#endif
	// Dump calibration data over UART - might be useful for debug
	logU16p(cp.cpoint1);
    1282:	80 91 8b 01 	lds	r24, 0x018B
    1286:	90 e0       	ldi	r25, 0x00	; 0
    1288:	a2 df       	rcall	.-188    	; 0x11ce <logU16p>
	logU16p(cp.cpoint1_adc);
    128a:	80 91 8d 01 	lds	r24, 0x018D
    128e:	90 91 8e 01 	lds	r25, 0x018E
    1292:	9d df       	rcall	.-198    	; 0x11ce <logU16p>
	logU16p(cp.cpoint2);
    1294:	80 91 8c 01 	lds	r24, 0x018C
    1298:	90 e0       	ldi	r25, 0x00	; 0
    129a:	99 df       	rcall	.-206    	; 0x11ce <logU16p>
	logU16p(cp.cpoint2_adc);
    129c:	80 91 8f 01 	lds	r24, 0x018F
    12a0:	90 91 90 01 	lds	r25, 0x0190
    12a4:	94 df       	rcall	.-216    	; 0x11ce <logU16p>
	USART_sendstr("\n\r");
    12a6:	85 ec       	ldi	r24, 0xC5	; 197
    12a8:	90 e0       	ldi	r25, 0x00	; 0
    12aa:	8e d4       	rcall	.+2332   	; 0x1bc8 <USART_sendstr>
    12ac:	2f ef       	ldi	r18, 0xFF	; 255
    12ae:	81 ee       	ldi	r24, 0xE1	; 225
    12b0:	94 e0       	ldi	r25, 0x04	; 4
    12b2:	21 50       	subi	r18, 0x01	; 1
    12b4:	80 40       	sbci	r24, 0x00	; 0
    12b6:	90 40       	sbci	r25, 0x00	; 0
    12b8:	e1 f7       	brne	.-8      	; 0x12b2 <main+0xd6>
    12ba:	00 c0       	rjmp	.+0      	; 0x12bc <main+0xe0>
    12bc:	00 00       	nop
	// Safety delay for power part and ADC buffer
	_delay_ms(100);
	// Check AC line
	if(p_state == 0x0F) 	
    12be:	80 91 81 00 	lds	r24, 0x0081
    12c2:	8f 30       	cpi	r24, 0x0F	; 15
    12c4:	69 f4       	brne	.+26     	; 0x12e0 <main+0x104>
	{
		// Power control state machine has not changed - sync has not been detected
		printLedBuffer(0,"ERR AC");
    12c6:	68 ec       	ldi	r22, 0xC8	; 200
    12c8:	70 e0       	ldi	r23, 0x00	; 0
    12ca:	80 e0       	ldi	r24, 0x00	; 0
    12cc:	f6 db       	rcall	.-2068   	; 0xaba <printLedBuffer>
    12ce:	2f ef       	ldi	r18, 0xFF	; 255
    12d0:	83 ed       	ldi	r24, 0xD3	; 211
    12d2:	90 e3       	ldi	r25, 0x30	; 48
    12d4:	21 50       	subi	r18, 0x01	; 1
    12d6:	80 40       	sbci	r24, 0x00	; 0
    12d8:	90 40       	sbci	r25, 0x00	; 0
    12da:	e1 f7       	brne	.-8      	; 0x12d4 <main+0xf8>
    12dc:	00 c0       	rjmp	.+0      	; 0x12de <main+0x102>
    12de:	00 00       	nop
		_delay_ms(1000);
	}
	// Initialize menu
	InitMenu();
    12e0:	88 de       	rcall	.-752    	; 0xff2 <InitMenu>
	// Beep
	Sound_Play(m_beep_1000Hz_100ms);
    12e2:	88 e6       	ldi	r24, 0x68	; 104
    12e4:	90 e0       	ldi	r25, 0x00	; 0
    12e6:	55 d4       	rcall	.+2218   	; 0x1b92 <Sound_Play>
	// When we get here, full ADC buffer have been sampled
	// Get oversampled and filtered ADC for PID controller
	update_normalized_adc();
    12e8:	04 d8       	rcall	.-4088   	; 0x2f2 <update_normalized_adc>
	
	// Start rotating
	setMotorDirection(ROLL_FWD);
    12ea:	81 e0       	ldi	r24, 0x01	; 1
    12ec:	b8 d1       	rcall	.+880    	; 0x165e <setMotorDirection>
	// Clear timer
	menuUpdateTimer.FOvfl = 0;
    12ee:	80 91 8a 00 	lds	r24, 0x008A
    12f2:	8f 7b       	andi	r24, 0xBF	; 191
    12f4:	80 93 8a 00 	sts	0x008A, r24
	// Enable watchdog
	wdt_enable(WDTO_1S);
    12f8:	2e e0       	ldi	r18, 0x0E	; 14
    12fa:	88 e1       	ldi	r24, 0x18	; 24
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	0f b6       	in	r0, 0x3f	; 63
    1300:	f8 94       	cli
    1302:	a8 95       	wdr
    1304:	81 bd       	out	0x21, r24	; 33
    1306:	0f be       	out	0x3f, r0	; 63
    1308:	21 bd       	out	0x21, r18	; 33

    while(1)
    {
		if (menuUpdateTimer.FOvfl)
    130a:	80 91 8a 00 	lds	r24, 0x008A
    130e:	86 ff       	sbrs	r24, 6
    1310:	fc cf       	rjmp	.-8      	; 0x130a <main+0x12e>
		{
			// Reset watchdog timer
			wdt_reset();
    1312:	a8 95       	wdr
			
			//--------- BUTTONS ----------//
			
			// Get new button state
			process_buttons();
    1314:	64 d8       	rcall	.-3896   	; 0x3de <process_buttons>
			
			// Give sound feedback
			if (button_state & (BL_MENU | BL_HEATCTRL))
    1316:	80 91 dc 00 	lds	r24, 0x00DC
    131a:	90 91 dd 00 	lds	r25, 0x00DD
    131e:	88 27       	eor	r24, r24
    1320:	92 72       	andi	r25, 0x22	; 34
    1322:	89 2b       	or	r24, r25
    1324:	19 f0       	breq	.+6      	; 0x132c <main+0x150>
			{
				Sound_Play(m_beep_800Hz_40ms);
    1326:	80 e6       	ldi	r24, 0x60	; 96
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	06 c0       	rjmp	.+12     	; 0x1338 <main+0x15c>
			}
			else if (button_action_down & (BD_MENU | BD_UP | BD_DOWN | BD_HEATCTRL))
    132c:	80 91 db 00 	lds	r24, 0x00DB
    1330:	81 7e       	andi	r24, 0xE1	; 225
    1332:	19 f0       	breq	.+6      	; 0x133a <main+0x15e>
			{
				Sound_Play(m_beep_1000Hz_40ms);
    1334:	84 e6       	ldi	r24, 0x64	; 100
    1336:	90 e0       	ldi	r25, 0x00	; 0
    1338:	2c d4       	rcall	.+2136   	; 0x1b92 <Sound_Play>
			}	
			// Direction control buttons sounds get special processing at processRollControl()
			
			// If any button is pressed, restart power off interval
			if (button_action_down)
    133a:	80 91 db 00 	lds	r24, 0x00DB
    133e:	81 11       	cpse	r24, r1
				resetAutoPowerOffCounter();
    1340:	9d d3       	rcall	.+1850   	; 0x1a7c <resetAutoPowerOffCounter>
			
			//---------- TIMERS ----------//
			
			// Process timers and time counters - it is important to call
			// this function before menu and power controls processing
			processSystemTimers();
    1342:	35 d3       	rcall	.+1642   	; 0x19ae <processSystemTimers>

			// Warn user about soon auto powering off
			if (sys_timers.flags & AUTOPOFF_SOON)
    1344:	80 91 89 00 	lds	r24, 0x0089
    1348:	83 ff       	sbrs	r24, 3
    134a:	03 c0       	rjmp	.+6      	; 0x1352 <main+0x176>
			{
				Sound_Play(m_beep_warn_poff);
    134c:	80 e4       	ldi	r24, 0x40	; 64
    134e:	90 e0       	ldi	r25, 0x00	; 0
    1350:	20 d4       	rcall	.+2112   	; 0x1b92 <Sound_Play>
			}		
			
			//----------- ADC ------------//
			
			// Get new temperature measurement
			update_normalized_adc();			
    1352:	cf d7       	rcall	.+3998   	; 0x22f2 <__data_load_end+0x51c>
		
			// Update indicated Celsius degree
			if (sys_timers.flags & EXPIRED_CELSIUS)
    1354:	80 91 89 00 	lds	r24, 0x0089
    1358:	80 fd       	sbrc	r24, 0
				update_Celsius();		
    135a:	07 d8       	rcall	.-4082   	; 0x36a <update_Celsius>
			
			//----------- MENU -----------//		
				
			// Process user menu states, settings and indication
			processMenu();
    135c:	53 de       	rcall	.-858    	; 0x1004 <processMenu>
			
			//--------- CONTROLS ---------//		
			
			// Process cyclic rolling, direction control
			processRollControl();	
    135e:	97 d8       	rcall	.-3794   	; 0x48e <processRollControl>
			
			// Process heater events monitoring
			// Must be called before processHeaterControl()
			processHeaterEvents();
    1360:	b1 d9       	rcall	.-3230   	; 0x6c4 <processHeaterEvents>
			
			// Process heater regulation
			processHeaterControl();
    1362:	28 d9       	rcall	.-3504   	; 0x5b4 <processHeaterControl>
		
			// Process heater warnings
			processHeaterAlerts();
    1364:	c1 d9       	rcall	.-3198   	; 0x6e8 <processHeaterAlerts>
			
			
			
			//------- LOG to UART --------//	
			if (sys_timers.flags & EXPIRED_LOG)
    1366:	80 91 89 00 	lds	r24, 0x0089
    136a:	85 ff       	sbrs	r24, 5
    136c:	42 c0       	rjmp	.+132    	; 0x13f2 <main+0x216>
			{
				
				logU16p(adc_celsius);					// Actual temp Celsius
    136e:	80 91 60 01 	lds	r24, 0x0160
    1372:	90 91 61 01 	lds	r25, 0x0161
    1376:	2b df       	rcall	.-426    	; 0x11ce <logU16p>
				logU16p(adc_normalized);				// Actual temp (ADC), normalized
    1378:	80 91 5d 01 	lds	r24, 0x015D
    137c:	90 91 5e 01 	lds	r25, 0x015E
    1380:	26 df       	rcall	.-436    	; 0x11ce <logU16p>
				logU16p(adc_filtered);					// Actual temp (ADC), oversampled, filtered
    1382:	80 91 19 01 	lds	r24, 0x0119
    1386:	90 91 1a 01 	lds	r25, 0x011A
    138a:	21 df       	rcall	.-446    	; 0x11ce <logU16p>
				USART_sendstr("    ");
    138c:	85 ea       	ldi	r24, 0xA5	; 165
    138e:	90 e0       	ldi	r25, 0x00	; 0
    1390:	1b d4       	rcall	.+2102   	; 0x1bc8 <USART_sendstr>
				
				logU16p(dbg_SetPointPID);				// PID setpoint
    1392:	80 91 97 01 	lds	r24, 0x0197
    1396:	90 91 98 01 	lds	r25, 0x0198
    139a:	19 df       	rcall	.-462    	; 0x11ce <logU16p>
				logU16p(dbg_RealTempPID);				// PID process value
    139c:	80 91 95 01 	lds	r24, 0x0195
    13a0:	90 91 96 01 	lds	r25, 0x0196
    13a4:	14 df       	rcall	.-472    	; 0x11ce <logU16p>
				
				logI32p(dbg_PID_p_term);				// p term
    13a6:	60 91 cc 01 	lds	r22, 0x01CC
    13aa:	70 91 cd 01 	lds	r23, 0x01CD
    13ae:	88 27       	eor	r24, r24
    13b0:	77 fd       	sbrc	r23, 7
    13b2:	80 95       	com	r24
    13b4:	98 2f       	mov	r25, r24
    13b6:	04 df       	rcall	.-504    	; 0x11c0 <logI32p>
				logI32p(dbg_PID_d_term);				// d term
    13b8:	60 91 d0 01 	lds	r22, 0x01D0
    13bc:	70 91 d1 01 	lds	r23, 0x01D1
    13c0:	88 27       	eor	r24, r24
    13c2:	77 fd       	sbrc	r23, 7
    13c4:	80 95       	com	r24
    13c6:	98 2f       	mov	r25, r24
    13c8:	fb de       	rcall	.-522    	; 0x11c0 <logI32p>
				logI32p(dbg_PID_i_term);				// i term
    13ca:	60 91 ce 01 	lds	r22, 0x01CE
    13ce:	70 91 cf 01 	lds	r23, 0x01CF
    13d2:	88 27       	eor	r24, r24
    13d4:	77 fd       	sbrc	r23, 7
    13d6:	80 95       	com	r24
    13d8:	98 2f       	mov	r25, r24
    13da:	f2 de       	rcall	.-540    	; 0x11c0 <logI32p>
				USART_sendstr("    ");
    13dc:	85 ea       	ldi	r24, 0xA5	; 165
    13de:	90 e0       	ldi	r25, 0x00	; 0
    13e0:	f3 d3       	rcall	.+2022   	; 0x1bc8 <USART_sendstr>
				
				logU16p(dbg_PID_output);				// PID output
    13e2:	80 91 ca 01 	lds	r24, 0x01CA
    13e6:	90 91 cb 01 	lds	r25, 0x01CB
    13ea:	f1 de       	rcall	.-542    	; 0x11ce <logU16p>
			
				USART_sendstr("\n\r");
    13ec:	85 ec       	ldi	r24, 0xC5	; 197
    13ee:	90 e0       	ldi	r25, 0x00	; 0
    13f0:	eb d3       	rcall	.+2006   	; 0x1bc8 <USART_sendstr>
				//---------------------------------//
				
			}
			
			
			menuUpdateTimer.FOvfl = 0;	
    13f2:	80 91 8a 00 	lds	r24, 0x008A
    13f6:	8f 7b       	andi	r24, 0xBF	; 191
    13f8:	80 93 8a 00 	sts	0x008A, r24
    13fc:	86 cf       	rjmp	.-244    	; 0x130a <main+0x12e>

000013fe <setPIDIntegratorLimit>:
// Argument is Celsius degree
// Call this function every time when the set point is changed and once during initialization
void setPIDIntegratorLimit(uint8_t set_temp)
{
	uint8_t lim_percent;
	if (set_temp < 60)
    13fe:	8c 33       	cpi	r24, 0x3C	; 60
    1400:	18 f0       	brcs	.+6      	; 0x1408 <setPIDIntegratorLimit+0xa>
		lim_percent = 20;
	else
		lim_percent = set_temp / 3;	// 20% for 60C, 30% for 90C, about 53% for 160C
    1402:	63 e0       	ldi	r22, 0x03	; 3
    1404:	02 d4       	rcall	.+2052   	; 0x1c0a <__udivmodqi4>
    1406:	01 c0       	rjmp	.+2      	; 0x140a <setPIDIntegratorLimit+0xc>
// Call this function every time when the set point is changed and once during initialization
void setPIDIntegratorLimit(uint8_t set_temp)
{
	uint8_t lim_percent;
	if (set_temp < 60)
		lim_percent = 20;
    1408:	84 e1       	ldi	r24, 0x14	; 20
	else
		lim_percent = set_temp / 3;	// 20% for 60C, 30% for 90C, about 53% for 160C

	integ_soft_k = ((int32_t)lim_percent * 10000) / INTEGRATOR_SOFT_RANGE;
    140a:	28 2f       	mov	r18, r24
    140c:	30 e0       	ldi	r19, 0x00	; 0
    140e:	a0 e1       	ldi	r26, 0x10	; 16
    1410:	b7 e2       	ldi	r27, 0x27	; 39
    1412:	28 d4       	rcall	.+2128   	; 0x1c64 <__umulhisi3>
    1414:	2c e5       	ldi	r18, 0x5C	; 92
    1416:	31 e0       	ldi	r19, 0x01	; 1
    1418:	40 e0       	ldi	r20, 0x00	; 0
    141a:	50 e0       	ldi	r21, 0x00	; 0
    141c:	02 d4       	rcall	.+2052   	; 0x1c22 <__divmodsi4>
    141e:	20 93 f8 00 	sts	0x00F8, r18
    1422:	30 93 f9 00 	sts	0x00F9, r19
    1426:	40 93 fa 00 	sts	0x00FA, r20
    142a:	50 93 fb 00 	sts	0x00FB, r21
    142e:	08 95       	ret

00001430 <processPID>:
//	setPoint - desired process value
//	processValue - actual process value
//	mode - enable/disable controller - 
//	  terms are calculated anyway, but output is set to 0 when disabled
uint8_t processPID(uint16_t setPoint, uint16_t processValue, uint8_t mode)
{
    1430:	4f 92       	push	r4
    1432:	5f 92       	push	r5
    1434:	6f 92       	push	r6
    1436:	7f 92       	push	r7
    1438:	bf 92       	push	r11
    143a:	cf 92       	push	r12
    143c:	df 92       	push	r13
    143e:	ef 92       	push	r14
    1440:	ff 92       	push	r15
    1442:	0f 93       	push	r16
    1444:	1f 93       	push	r17
    1446:	cf 93       	push	r28
    1448:	df 93       	push	r29
    144a:	6b 01       	movw	r12, r22
    144c:	b4 2e       	mov	r11, r20
	static int32_t integAcc;
	int16_t error, p_term, i_term, d_term, temp;
	int32_t integ_max;

	// Get the error
	error = setPoint - processValue;
    144e:	86 1b       	sub	r24, r22
    1450:	97 0b       	sbc	r25, r23
	
	//------ Calculate P term --------//
	if (error > (PROP_MAX / Kp))			// Compare before multiplication to avoid overflow
    1452:	8d 35       	cpi	r24, 0x5D	; 93
    1454:	21 e0       	ldi	r18, 0x01	; 1
    1456:	92 07       	cpc	r25, r18
    1458:	5c f4       	brge	.+22     	; 0x1470 <processPID+0x40>
	{
		p_term = PROP_MAX;	
	}
	else if (error < (PROP_MIN / Kp))
    145a:	84 3a       	cpi	r24, 0xA4	; 164
    145c:	2e ef       	ldi	r18, 0xFE	; 254
    145e:	92 07       	cpc	r25, r18
    1460:	54 f0       	brlt	.+20     	; 0x1476 <processPID+0x46>
	{
		p_term = PROP_MIN;	
	}
	else
	{
		p_term = error * Kp;
    1462:	2b e2       	ldi	r18, 0x2B	; 43
    1464:	28 9f       	mul	r18, r24
    1466:	80 01       	movw	r16, r0
    1468:	29 9f       	mul	r18, r25
    146a:	10 0d       	add	r17, r0
    146c:	11 24       	eor	r1, r1
    146e:	05 c0       	rjmp	.+10     	; 0x147a <processPID+0x4a>
	error = setPoint - processValue;
	
	//------ Calculate P term --------//
	if (error > (PROP_MAX / Kp))			// Compare before multiplication to avoid overflow
	{
		p_term = PROP_MAX;	
    1470:	08 e9       	ldi	r16, 0x98	; 152
    1472:	1a e3       	ldi	r17, 0x3A	; 58
    1474:	02 c0       	rjmp	.+4      	; 0x147a <processPID+0x4a>
	}
	else if (error < (PROP_MIN / Kp))
	{
		p_term = PROP_MIN;	
    1476:	08 e6       	ldi	r16, 0x68	; 104
    1478:	15 ec       	ldi	r17, 0xC5	; 197
	{
		p_term = error * Kp;
	}
	
	//------ Calculate I term --------//
	if (!(mode & PID_RESET_INTEGRATOR))
    147a:	b2 fc       	sbrc	r11, 2
    147c:	1f c0       	rjmp	.+62     	; 0x14bc <processPID+0x8c>
		integAcc += error * Ki;
    147e:	23 e2       	ldi	r18, 0x23	; 35
    1480:	28 9f       	mul	r18, r24
    1482:	20 01       	movw	r4, r0
    1484:	29 9f       	mul	r18, r25
    1486:	50 0c       	add	r5, r0
    1488:	11 24       	eor	r1, r1
    148a:	66 24       	eor	r6, r6
    148c:	57 fc       	sbrc	r5, 7
    148e:	60 94       	com	r6
    1490:	76 2c       	mov	r7, r6
    1492:	40 91 fc 00 	lds	r20, 0x00FC
    1496:	50 91 fd 00 	lds	r21, 0x00FD
    149a:	60 91 fe 00 	lds	r22, 0x00FE
    149e:	70 91 ff 00 	lds	r23, 0x00FF
    14a2:	44 0d       	add	r20, r4
    14a4:	55 1d       	adc	r21, r5
    14a6:	66 1d       	adc	r22, r6
    14a8:	77 1d       	adc	r23, r7
    14aa:	40 93 fc 00 	sts	0x00FC, r20
    14ae:	50 93 fd 00 	sts	0x00FD, r21
    14b2:	60 93 fe 00 	sts	0x00FE, r22
    14b6:	70 93 ff 00 	sts	0x00FF, r23
    14ba:	08 c0       	rjmp	.+16     	; 0x14cc <processPID+0x9c>
	else
		integAcc = 0;		// May be useful for debug
    14bc:	10 92 fc 00 	sts	0x00FC, r1
    14c0:	10 92 fd 00 	sts	0x00FD, r1
    14c4:	10 92 fe 00 	sts	0x00FE, r1
    14c8:	10 92 ff 00 	sts	0x00FF, r1

	#ifdef INTEGRATOR_SOFT_LIMIT
	// Soft limit is a monotone linear function f(error), f(error) = 0 when error = INTEGRATOR_SOFT_RANGE
	// growing up to f(error) = INTEGRATOR_SOFT_MAX when error = 0
	if (error > INTEGRATOR_SOFT_RANGE)
    14cc:	8d 35       	cpi	r24, 0x5D	; 93
    14ce:	21 e0       	ldi	r18, 0x01	; 1
    14d0:	92 07       	cpc	r25, r18
    14d2:	c4 f4       	brge	.+48     	; 0x1504 <processPID+0xd4>
		integ_max = 0;
	else if (error < 0)
    14d4:	97 fd       	sbrc	r25, 7
    14d6:	1a c0       	rjmp	.+52     	; 0x150c <processPID+0xdc>
		integ_max = INTEGRATOR_MAX;
	else
	{
		//integ_max = (INTEGRATOR_SOFT_RANGE - (int32_t)error) * INTEGRATOR_SOFT_K;
		integ_max = (INTEGRATOR_SOFT_RANGE - (int32_t)error) * integ_soft_k;
    14d8:	aa 27       	eor	r26, r26
    14da:	97 fd       	sbrc	r25, 7
    14dc:	a0 95       	com	r26
    14de:	ba 2f       	mov	r27, r26
    14e0:	2c e5       	ldi	r18, 0x5C	; 92
    14e2:	31 e0       	ldi	r19, 0x01	; 1
    14e4:	40 e0       	ldi	r20, 0x00	; 0
    14e6:	50 e0       	ldi	r21, 0x00	; 0
    14e8:	28 1b       	sub	r18, r24
    14ea:	39 0b       	sbc	r19, r25
    14ec:	4a 0b       	sbc	r20, r26
    14ee:	5b 0b       	sbc	r21, r27
    14f0:	60 91 f8 00 	lds	r22, 0x00F8
    14f4:	70 91 f9 00 	lds	r23, 0x00F9
    14f8:	80 91 fa 00 	lds	r24, 0x00FA
    14fc:	90 91 fb 00 	lds	r25, 0x00FB
    1500:	75 d3       	rcall	.+1770   	; 0x1bec <__mulsi3>
    1502:	08 c0       	rjmp	.+16     	; 0x1514 <processPID+0xe4>

	#ifdef INTEGRATOR_SOFT_LIMIT
	// Soft limit is a monotone linear function f(error), f(error) = 0 when error = INTEGRATOR_SOFT_RANGE
	// growing up to f(error) = INTEGRATOR_SOFT_MAX when error = 0
	if (error > INTEGRATOR_SOFT_RANGE)
		integ_max = 0;
    1504:	60 e0       	ldi	r22, 0x00	; 0
    1506:	70 e0       	ldi	r23, 0x00	; 0
    1508:	cb 01       	movw	r24, r22
    150a:	04 c0       	rjmp	.+8      	; 0x1514 <processPID+0xe4>
	else if (error < 0)
		integ_max = INTEGRATOR_MAX;
    150c:	60 e2       	ldi	r22, 0x20	; 32
    150e:	71 ea       	ldi	r23, 0xA1	; 161
    1510:	87 e0       	ldi	r24, 0x07	; 7
    1512:	90 e0       	ldi	r25, 0x00	; 0
	{
		//integ_max = (INTEGRATOR_SOFT_RANGE - (int32_t)error) * INTEGRATOR_SOFT_K;
		integ_max = (INTEGRATOR_SOFT_RANGE - (int32_t)error) * integ_soft_k;
	}

	if (integAcc > integ_max )
    1514:	40 90 fc 00 	lds	r4, 0x00FC
    1518:	50 90 fd 00 	lds	r5, 0x00FD
    151c:	60 90 fe 00 	lds	r6, 0x00FE
    1520:	70 90 ff 00 	lds	r7, 0x00FF
    1524:	64 15       	cp	r22, r4
    1526:	75 05       	cpc	r23, r5
    1528:	86 05       	cpc	r24, r6
    152a:	97 05       	cpc	r25, r7
    152c:	4c f4       	brge	.+18     	; 0x1540 <processPID+0x110>
	{
		integAcc = integ_max;
    152e:	60 93 fc 00 	sts	0x00FC, r22
    1532:	70 93 fd 00 	sts	0x00FD, r23
    1536:	80 93 fe 00 	sts	0x00FE, r24
    153a:	90 93 ff 00 	sts	0x00FF, r25
    153e:	0a c0       	rjmp	.+20     	; 0x1554 <processPID+0x124>
	}
	else if (integAcc < INTEGRATOR_MIN)
    1540:	77 fe       	sbrs	r7, 7
    1542:	08 c0       	rjmp	.+16     	; 0x1554 <processPID+0x124>
	{
		integAcc = INTEGRATOR_MIN;
    1544:	10 92 fc 00 	sts	0x00FC, r1
    1548:	10 92 fd 00 	sts	0x00FD, r1
    154c:	10 92 fe 00 	sts	0x00FE, r1
    1550:	10 92 ff 00 	sts	0x00FF, r1
	{
		integAcc = INTEGRATOR_MIN;
	}
	#endif
	
	i_term = (int16_t)(integAcc / INTEGRATOR_SCALE);	// Should not exceed MAXINT16
    1554:	60 91 fc 00 	lds	r22, 0x00FC
    1558:	70 91 fd 00 	lds	r23, 0x00FD
    155c:	80 91 fe 00 	lds	r24, 0x00FE
    1560:	90 91 ff 00 	lds	r25, 0x00FF
    1564:	24 e6       	ldi	r18, 0x64	; 100
    1566:	30 e0       	ldi	r19, 0x00	; 0
    1568:	40 e0       	ldi	r20, 0x00	; 0
    156a:	50 e0       	ldi	r21, 0x00	; 0
    156c:	5a d3       	rcall	.+1716   	; 0x1c22 <__divmodsi4>
    156e:	79 01       	movw	r14, r18

	//------ Calculate D term --------//
	d_term = lastProcessValue - processValue;	
    1570:	80 91 00 01 	lds	r24, 0x0100
    1574:	90 91 01 01 	lds	r25, 0x0101
    1578:	8c 19       	sub	r24, r12
    157a:	9d 09       	sbc	r25, r13
	if (d_term > DIFF_MAX / Kd)
    157c:	88 30       	cpi	r24, 0x08	; 8
    157e:	91 05       	cpc	r25, r1
    1580:	74 f4       	brge	.+28     	; 0x159e <processPID+0x16e>
	{
		d_term = DIFF_MAX;
	}
	else if (d_term < DIFF_MIN / Kd)
    1582:	89 3f       	cpi	r24, 0xF9	; 249
    1584:	2f ef       	ldi	r18, 0xFF	; 255
    1586:	92 07       	cpc	r25, r18
    1588:	6c f0       	brlt	.+26     	; 0x15a4 <processPID+0x174>
	{
		d_term = DIFF_MIN;
	}
	else
	{
		d_term = Kd * d_term;
    158a:	20 e9       	ldi	r18, 0x90	; 144
    158c:	31 e0       	ldi	r19, 0x01	; 1
    158e:	82 9f       	mul	r24, r18
    1590:	e0 01       	movw	r28, r0
    1592:	83 9f       	mul	r24, r19
    1594:	d0 0d       	add	r29, r0
    1596:	92 9f       	mul	r25, r18
    1598:	d0 0d       	add	r29, r0
    159a:	11 24       	eor	r1, r1
    159c:	05 c0       	rjmp	.+10     	; 0x15a8 <processPID+0x178>

	//------ Calculate D term --------//
	d_term = lastProcessValue - processValue;	
	if (d_term > DIFF_MAX / Kd)
	{
		d_term = DIFF_MAX;
    159e:	c8 eb       	ldi	r28, 0xB8	; 184
    15a0:	db e0       	ldi	r29, 0x0B	; 11
    15a2:	02 c0       	rjmp	.+4      	; 0x15a8 <processPID+0x178>
	}
	else if (d_term < DIFF_MIN / Kd)
	{
		d_term = DIFF_MIN;
    15a4:	c8 e4       	ldi	r28, 0x48	; 72
    15a6:	d4 ef       	ldi	r29, 0xF4	; 244
	}
	else
	{
		d_term = Kd * d_term;
	}
	lastProcessValue = processValue;
    15a8:	d0 92 01 01 	sts	0x0101, r13
    15ac:	c0 92 00 01 	sts	0x0100, r12
	
	//--------- Summ terms -----------//
	if (mode & PID_ENABLED)
    15b0:	b0 fe       	sbrs	r11, 0
    15b2:	20 c0       	rjmp	.+64     	; 0x15f4 <processPID+0x1c4>
		temp = (int16_t)( ((int32_t)p_term + (int32_t)i_term + (int32_t)d_term) / SCALING_FACTOR );
    15b4:	b8 01       	movw	r22, r16
    15b6:	88 27       	eor	r24, r24
    15b8:	77 fd       	sbrc	r23, 7
    15ba:	80 95       	com	r24
    15bc:	98 2f       	mov	r25, r24
    15be:	27 01       	movw	r4, r14
    15c0:	66 24       	eor	r6, r6
    15c2:	57 fc       	sbrc	r5, 7
    15c4:	60 94       	com	r6
    15c6:	76 2c       	mov	r7, r6
    15c8:	64 0d       	add	r22, r4
    15ca:	75 1d       	adc	r23, r5
    15cc:	86 1d       	adc	r24, r6
    15ce:	97 1d       	adc	r25, r7
    15d0:	2e 01       	movw	r4, r28
    15d2:	66 24       	eor	r6, r6
    15d4:	57 fc       	sbrc	r5, 7
    15d6:	60 94       	com	r6
    15d8:	76 2c       	mov	r7, r6
    15da:	64 0d       	add	r22, r4
    15dc:	75 1d       	adc	r23, r5
    15de:	86 1d       	adc	r24, r6
    15e0:	97 1d       	adc	r25, r7
    15e2:	24 e6       	ldi	r18, 0x64	; 100
    15e4:	30 e0       	ldi	r19, 0x00	; 0
    15e6:	40 e0       	ldi	r20, 0x00	; 0
    15e8:	50 e0       	ldi	r21, 0x00	; 0
    15ea:	1b d3       	rcall	.+1590   	; 0x1c22 <__divmodsi4>
	else
		temp = 0;
	
	if (temp > PID_OUTPUT_MAX)
    15ec:	25 36       	cpi	r18, 0x65	; 101
    15ee:	31 05       	cpc	r19, r1
    15f0:	4c f4       	brge	.+18     	; 0x1604 <processPID+0x1d4>
    15f2:	02 c0       	rjmp	.+4      	; 0x15f8 <processPID+0x1c8>
	
	//--------- Summ terms -----------//
	if (mode & PID_ENABLED)
		temp = (int16_t)( ((int32_t)p_term + (int32_t)i_term + (int32_t)d_term) / SCALING_FACTOR );
	else
		temp = 0;
    15f4:	20 e0       	ldi	r18, 0x00	; 0
    15f6:	30 e0       	ldi	r19, 0x00	; 0
    15f8:	c9 01       	movw	r24, r18
    15fa:	37 ff       	sbrs	r19, 7
    15fc:	05 c0       	rjmp	.+10     	; 0x1608 <processPID+0x1d8>
    15fe:	80 e0       	ldi	r24, 0x00	; 0
    1600:	90 e0       	ldi	r25, 0x00	; 0
    1602:	02 c0       	rjmp	.+4      	; 0x1608 <processPID+0x1d8>
	
	if (temp > PID_OUTPUT_MAX)
	{
		temp = PID_OUTPUT_MAX;
    1604:	84 e6       	ldi	r24, 0x64	; 100
    1606:	90 e0       	ldi	r25, 0x00	; 0
	{
		temp = PID_OUTPUT_MIN;
	}
	
	//------- Debug --------//
	dbg_PID_p_term = p_term;
    1608:	10 93 cd 01 	sts	0x01CD, r17
    160c:	00 93 cc 01 	sts	0x01CC, r16
	dbg_PID_d_term = d_term;
    1610:	d0 93 d1 01 	sts	0x01D1, r29
    1614:	c0 93 d0 01 	sts	0x01D0, r28
	dbg_PID_i_term = i_term;
    1618:	f0 92 cf 01 	sts	0x01CF, r15
    161c:	e0 92 ce 01 	sts	0x01CE, r14
	dbg_PID_output = temp;
    1620:	90 93 cb 01 	sts	0x01CB, r25
    1624:	80 93 ca 01 	sts	0x01CA, r24
	
	
	return (uint8_t)temp;	
}
    1628:	df 91       	pop	r29
    162a:	cf 91       	pop	r28
    162c:	1f 91       	pop	r17
    162e:	0f 91       	pop	r16
    1630:	ff 90       	pop	r15
    1632:	ef 90       	pop	r14
    1634:	df 90       	pop	r13
    1636:	cf 90       	pop	r12
    1638:	bf 90       	pop	r11
    163a:	7f 90       	pop	r7
    163c:	6f 90       	pop	r6
    163e:	5f 90       	pop	r5
    1640:	4f 90       	pop	r4
    1642:	08 95       	ret

00001644 <setHeaterPower>:

// User function to control heater intensity
void setHeaterPower(uint16_t value)
{
	// Disable interrupts from analog comparator
	ACSR &= ~(1<<ACIE);
    1644:	43 98       	cbi	0x08, 3	; 8
	// Update value
	heaterPower = (value > HEATER_MAX_POWER) ? HEATER_MAX_POWER : value;
    1646:	9c 01       	movw	r18, r24
    1648:	85 36       	cpi	r24, 0x65	; 101
    164a:	91 05       	cpc	r25, r1
    164c:	10 f0       	brcs	.+4      	; 0x1652 <setHeaterPower+0xe>
    164e:	24 e6       	ldi	r18, 0x64	; 100
    1650:	30 e0       	ldi	r19, 0x00	; 0
    1652:	30 93 05 01 	sts	0x0105, r19
    1656:	20 93 04 01 	sts	0x0104, r18
	// Reenable interrupts
	ACSR |= (1<<ACIE);
    165a:	43 9a       	sbi	0x08, 3	; 8
    165c:	08 95       	ret

0000165e <setMotorDirection>:

// User function to control motor rotation
void setMotorDirection(uint8_t dir)
{
	// Disable interrupts from timer0 
	TIMSK &= ~(1<<TOIE0);
    165e:	99 b7       	in	r25, 0x39	; 57
    1660:	9e 7f       	andi	r25, 0xFE	; 254
    1662:	99 bf       	out	0x39, r25	; 57
		
	newDirReq = dir;	// save new direction request
    1664:	80 93 06 01 	sts	0x0106, r24
	dirChangedMask = ~ROLL_DIR_CHANGED;
    1668:	9f ed       	ldi	r25, 0xDF	; 223
    166a:	90 93 82 00 	sts	0x0082, r25
	
	if (dir & ROLL_FWD)
    166e:	80 ff       	sbrs	r24, 0
    1670:	09 c0       	rjmp	.+18     	; 0x1684 <setMotorDirection+0x26>
		bottomPoint = rollPoint;  
    1672:	80 91 07 01 	lds	r24, 0x0107
    1676:	90 91 08 01 	lds	r25, 0x0108
    167a:	90 93 0a 01 	sts	0x010A, r25
    167e:	80 93 09 01 	sts	0x0109, r24
    1682:	0a c0       	rjmp	.+20     	; 0x1698 <setMotorDirection+0x3a>
	else if (dir & ROLL_REV)
    1684:	81 ff       	sbrs	r24, 1
    1686:	08 c0       	rjmp	.+16     	; 0x1698 <setMotorDirection+0x3a>
		topPoint = rollPoint;
    1688:	80 91 07 01 	lds	r24, 0x0107
    168c:	90 91 08 01 	lds	r25, 0x0108
    1690:	90 93 0c 01 	sts	0x010C, r25
    1694:	80 93 0b 01 	sts	0x010B, r24

	// Enable interrupts from timer 0
	TIMSK |= (1<<TOIE0);	
    1698:	89 b7       	in	r24, 0x39	; 57
    169a:	81 60       	ori	r24, 0x01	; 1
    169c:	89 bf       	out	0x39, r24	; 57
    169e:	08 95       	ret

000016a0 <stopCycleRolling>:
}

void stopCycleRolling(uint8_t doResetPoints)
{
	// Disable interrupts from timer0 
	TIMSK &= ~(1<<TOIE0);
    16a0:	99 b7       	in	r25, 0x39	; 57
    16a2:	9e 7f       	andi	r25, 0xFE	; 254
    16a4:	99 bf       	out	0x39, r25	; 57
	
	rollState &= ~ROLL_CYCLE;
    16a6:	90 91 03 01 	lds	r25, 0x0103
    16aa:	9b 7f       	andi	r25, 0xFB	; 251
    16ac:	90 93 03 01 	sts	0x0103, r25
	if (doResetPoints)
    16b0:	88 23       	and	r24, r24
    16b2:	71 f0       	breq	.+28     	; 0x16d0 <stopCycleRolling+0x30>
	{
		topPoint = bottomPoint = rollPoint;
    16b4:	80 91 07 01 	lds	r24, 0x0107
    16b8:	90 91 08 01 	lds	r25, 0x0108
    16bc:	90 93 0a 01 	sts	0x010A, r25
    16c0:	80 93 09 01 	sts	0x0109, r24
    16c4:	90 93 0c 01 	sts	0x010C, r25
    16c8:	80 93 0b 01 	sts	0x010B, r24
		activeRollCycle = 0;	
    16cc:	10 92 02 01 	sts	0x0102, r1
	}		
	
	// Enable interrupts from timer 0
	TIMSK |= (1<<TOIE0);
    16d0:	89 b7       	in	r24, 0x39	; 57
    16d2:	81 60       	ori	r24, 0x01	; 1
    16d4:	89 bf       	out	0x39, r24	; 57
    16d6:	08 95       	ret

000016d8 <isTopPointValid>:



uint8_t isTopPointValid(void)
{
	return (	(int16_t)(topPoint - rollPoint) >= 0 );
    16d8:	80 91 0b 01 	lds	r24, 0x010B
    16dc:	90 91 0c 01 	lds	r25, 0x010C
    16e0:	20 91 07 01 	lds	r18, 0x0107
    16e4:	30 91 08 01 	lds	r19, 0x0108
    16e8:	82 1b       	sub	r24, r18
    16ea:	93 0b       	sbc	r25, r19
    16ec:	89 2f       	mov	r24, r25
    16ee:	80 95       	com	r24
}
    16f0:	88 1f       	adc	r24, r24
    16f2:	88 27       	eor	r24, r24
    16f4:	88 1f       	adc	r24, r24
    16f6:	08 95       	ret

000016f8 <isBottomPointValid>:

uint8_t isBottomPointValid(void)
{
	return (	(int16_t)(rollPoint - bottomPoint) >= 0	);
    16f8:	80 91 07 01 	lds	r24, 0x0107
    16fc:	90 91 08 01 	lds	r25, 0x0108
    1700:	20 91 09 01 	lds	r18, 0x0109
    1704:	30 91 0a 01 	lds	r19, 0x010A
    1708:	82 1b       	sub	r24, r18
    170a:	93 0b       	sbc	r25, r19
    170c:	89 2f       	mov	r24, r25
    170e:	80 95       	com	r24
}
    1710:	88 1f       	adc	r24, r24
    1712:	88 27       	eor	r24, r24
    1714:	88 1f       	adc	r24, r24
    1716:	08 95       	ret

00001718 <startCycleRolling>:


uint8_t startCycleRolling(void)
{
	// Disable interrupts from timer0 
	TIMSK &= ~(1<<TOIE0);
    1718:	89 b7       	in	r24, 0x39	; 57
    171a:	8e 7f       	andi	r24, 0xFE	; 254
    171c:	89 bf       	out	0x39, r24	; 57
	
	if ( isTopPointValid() && isBottomPointValid() )
    171e:	dc df       	rcall	.-72     	; 0x16d8 <isTopPointValid>
    1720:	88 23       	and	r24, r24
    1722:	59 f0       	breq	.+22     	; 0x173a <startCycleRolling+0x22>
    1724:	e9 df       	rcall	.-46     	; 0x16f8 <isBottomPointValid>
    1726:	88 23       	and	r24, r24
    1728:	41 f0       	breq	.+16     	; 0x173a <startCycleRolling+0x22>
	{
		rollState |= ROLL_CYCLE;
    172a:	80 91 03 01 	lds	r24, 0x0103
    172e:	84 60       	ori	r24, 0x04	; 4
    1730:	80 93 03 01 	sts	0x0103, r24
		activeRollCycle = 1;
    1734:	81 e0       	ldi	r24, 0x01	; 1
    1736:	80 93 02 01 	sts	0x0102, r24
	}
	
	// Enable interrupts from timer 0
	TIMSK |= (1<<TOIE0);
    173a:	89 b7       	in	r24, 0x39	; 57
    173c:	81 60       	ori	r24, 0x01	; 1
    173e:	89 bf       	out	0x39, r24	; 57
	
	return (rollState & ROLL_CYCLE);
    1740:	80 91 03 01 	lds	r24, 0x0103
}
    1744:	84 70       	andi	r24, 0x04	; 4
    1746:	08 95       	ret

00001748 <__vector_16>:




ISR(ANA_COMP_vect)
{
    1748:	1f 92       	push	r1
    174a:	0f 92       	push	r0
    174c:	0f b6       	in	r0, 0x3f	; 63
    174e:	0f 92       	push	r0
    1750:	11 24       	eor	r1, r1
    1752:	2f 93       	push	r18
    1754:	3f 93       	push	r19
    1756:	4f 93       	push	r20
    1758:	5f 93       	push	r21
    175a:	8f 93       	push	r24
    175c:	9f 93       	push	r25
	static uint16_t sigma = 0;
	uint16_t delta;
	
	// Once triggered, disable further comparator interrupt
	ACSR &= ~(1<<ACIE);
    175e:	43 98       	cbi	0x08, 3	; 8
	
	// Process heater delta-sigma modulator
	if (sigma >= HEATER_MAX_POWER)
    1760:	40 91 0d 01 	lds	r20, 0x010D
    1764:	50 91 0e 01 	lds	r21, 0x010E
    1768:	44 36       	cpi	r20, 0x64	; 100
    176a:	51 05       	cpc	r21, r1
    176c:	30 f0       	brcs	.+12     	; 0x177a <__vector_16+0x32>
	{
		PORTD |= (1<<PD_HEATER | 1<<PD_HEAT_INDIC);
    176e:	82 b3       	in	r24, 0x12	; 18
    1770:	80 63       	ori	r24, 0x30	; 48
    1772:	82 bb       	out	0x12, r24	; 18
		delta = -HEATER_MAX_POWER;	
    1774:	2c e9       	ldi	r18, 0x9C	; 156
    1776:	3f ef       	ldi	r19, 0xFF	; 255
    1778:	03 c0       	rjmp	.+6      	; 0x1780 <__vector_16+0x38>
	}		
	else
	{
		PORTD &= ~(1<<PD_HEAT_INDIC);
    177a:	95 98       	cbi	0x12, 5	; 18
		delta = 0;
    177c:	20 e0       	ldi	r18, 0x00	; 0
    177e:	30 e0       	ldi	r19, 0x00	; 0
	}
	sigma += delta + heaterPower;	
    1780:	80 91 04 01 	lds	r24, 0x0104
    1784:	90 91 05 01 	lds	r25, 0x0105
    1788:	84 0f       	add	r24, r20
    178a:	95 1f       	adc	r25, r21
    178c:	82 0f       	add	r24, r18
    178e:	93 1f       	adc	r25, r19
    1790:	90 93 0e 01 	sts	0x010E, r25
    1794:	80 93 0d 01 	sts	0x010D, r24
	
	// Reprogram timer0
	TCNT0 = 256 - TRIAC_IMPULSE_TIME;		// Triac gate impulse time
    1798:	86 ef       	ldi	r24, 0xF6	; 246
    179a:	82 bf       	out	0x32, r24	; 50
	TIFR |= (1<<TOV0);						// Clear interrupt flag
    179c:	88 b7       	in	r24, 0x38	; 56
    179e:	81 60       	ori	r24, 0x01	; 1
    17a0:	88 bf       	out	0x38, r24	; 56
	// Modify state	
	p_state &= ~STATE_MASK;					// Start new state machine cycle
    17a2:	80 91 81 00 	lds	r24, 0x0081
    17a6:	80 7f       	andi	r24, 0xF0	; 240
	p_state ^= HALF_PERIOD_FLAG;			// Toggle flag
    17a8:	80 58       	subi	r24, 0x80	; 128
    17aa:	80 93 81 00 	sts	0x0081, r24
	
}
    17ae:	9f 91       	pop	r25
    17b0:	8f 91       	pop	r24
    17b2:	5f 91       	pop	r21
    17b4:	4f 91       	pop	r20
    17b6:	3f 91       	pop	r19
    17b8:	2f 91       	pop	r18
    17ba:	0f 90       	pop	r0
    17bc:	0f be       	out	0x3f, r0	; 63
    17be:	0f 90       	pop	r0
    17c0:	1f 90       	pop	r1
    17c2:	18 95       	reti

000017c4 <__vector_9>:



ISR(TIMER0_OVF_vect)
{
    17c4:	1f 92       	push	r1
    17c6:	0f 92       	push	r0
    17c8:	0f b6       	in	r0, 0x3f	; 63
    17ca:	0f 92       	push	r0
    17cc:	11 24       	eor	r1, r1
    17ce:	2f 93       	push	r18
    17d0:	3f 93       	push	r19
    17d2:	4f 93       	push	r20
    17d4:	5f 93       	push	r21
    17d6:	6f 93       	push	r22
    17d8:	7f 93       	push	r23
    17da:	8f 93       	push	r24
    17dc:	9f 93       	push	r25
    17de:	af 93       	push	r26
    17e0:	bf 93       	push	r27
    17e2:	ef 93       	push	r30
    17e4:	ff 93       	push	r31
	uint8_t temp;
	
	switch(p_state & STATE_MASK)
    17e6:	80 91 81 00 	lds	r24, 0x0081
    17ea:	8f 70       	andi	r24, 0x0F	; 15
    17ec:	81 30       	cpi	r24, 0x01	; 1
    17ee:	49 f0       	breq	.+18     	; 0x1802 <__vector_9+0x3e>
    17f0:	28 f0       	brcs	.+10     	; 0x17fc <__vector_9+0x38>
    17f2:	82 30       	cpi	r24, 0x02	; 2
    17f4:	49 f0       	breq	.+18     	; 0x1808 <__vector_9+0x44>
    17f6:	83 30       	cpi	r24, 0x03	; 3
    17f8:	69 f4       	brne	.+26     	; 0x1814 <__vector_9+0x50>
    17fa:	0b c0       	rjmp	.+22     	; 0x1812 <__vector_9+0x4e>
	{
		// TRIAC_IMPULSE_TIME finished
		case 0x00:
			// Turn off heater TRIAC
			PORTD &= ~(1<<PD_HEATER);
    17fc:	94 98       	cbi	0x12, 4	; 18
			TCNT0 = 256 - (QUATER_PERIOD_TIME - TRIAC_IMPULSE_TIME);
    17fe:	8c eb       	ldi	r24, 0xBC	; 188
    1800:	01 c0       	rjmp	.+2      	; 0x1804 <__vector_9+0x40>
			break;
		// QUATER_PERIOD_TIME finished	
		case 0x01:	
			TCNT0 = 256 - (SYNC_IGNORE_TIME - QUATER_PERIOD_TIME);
    1802:	81 ed       	ldi	r24, 0xD1	; 209
    1804:	82 bf       	out	0x32, r24	; 50
			break;	
    1806:	06 c0       	rjmp	.+12     	; 0x1814 <__vector_9+0x50>
		// SYNC_IGNORE_TIME finished	
		case 0x02:
			TCNT0 = 256 - SYNC_LOST_TIMEOUT;
    1808:	82 ec       	ldi	r24, 0xC2	; 194
    180a:	82 bf       	out	0x32, r24	; 50
			// Clear flag and enable interrupt from analog comparator
			ACSR |= (1<<ACI);
    180c:	44 9a       	sbi	0x08, 4	; 8
			ACSR |= (1<<ACIE);
    180e:	43 9a       	sbi	0x08, 3	; 8
			break;
    1810:	01 c0       	rjmp	.+2      	; 0x1814 <__vector_9+0x50>
		// SYNC_LOST_TIMEOUT finished
		case 0x03:
			// Error - sync is lost. It means that device has been disconnected from AC line.
			// Disable all power-consuming devices like LEDs and save user settings to EEPROM.
			exitPowerOff();
    1812:	18 d8       	rcall	.-4048   	; 0x844 <exitPowerOff>
			// Sync is not present - do nothing
			break;
	}	

	// Full period check
	if ((p_state & (HALF_PERIOD_FLAG | STATE_MASK)) == (HALF_PERIOD_FLAG | 0x01))
    1814:	80 91 81 00 	lds	r24, 0x0081
    1818:	8f 78       	andi	r24, 0x8F	; 143
    181a:	81 38       	cpi	r24, 0x81	; 129
    181c:	09 f0       	breq	.+2      	; 0x1820 <__vector_9+0x5c>
    181e:	81 c0       	rjmp	.+258    	; 0x1922 <__vector_9+0x15e>
	{
		// Quarter AC line period is done. Update motor controls.
		temp = PORTD;
    1820:	82 b3       	in	r24, 0x12	; 18
		temp &= ~(1<<PD_M1 | 1<<PD_M2);
    1822:	83 7f       	andi	r24, 0xF3	; 243
		if ( rollState & SKIP_CURRENT_MOTOR_CTRL )
    1824:	90 91 03 01 	lds	r25, 0x0103
    1828:	93 ff       	sbrs	r25, 3
    182a:	05 c0       	rjmp	.+10     	; 0x1836 <__vector_9+0x72>
		{
			// Direction control changed. Skip current period to allow TRIACs fully close
			rollState &= ~SKIP_CURRENT_MOTOR_CTRL;
    182c:	97 7f       	andi	r25, 0xF7	; 247
    182e:	90 93 03 01 	sts	0x0103, r25
			PORTD = temp; 	
    1832:	82 bb       	out	0x12, r24	; 18
    1834:	76 c0       	rjmp	.+236    	; 0x1922 <__vector_9+0x15e>
		}
		else
		{
			// Apply direction control 
			if (rollState & ROLL_FWD)
    1836:	90 ff       	sbrs	r25, 0
    1838:	02 c0       	rjmp	.+4      	; 0x183e <__vector_9+0x7a>
				temp |= (1<<PD_M1);
    183a:	84 60       	ori	r24, 0x04	; 4
    183c:	02 c0       	rjmp	.+4      	; 0x1842 <__vector_9+0x7e>
			else if (rollState & ROLL_REV)
    183e:	91 fd       	sbrc	r25, 1
				temp |= (1<<PD_M2);
    1840:	88 60       	ori	r24, 0x08	; 8
			PORTD = temp; 
    1842:	82 bb       	out	0x12, r24	; 18
// Function to process rolling - sets rotation direction for next period
// Call once per each AC line period
static inline void controlRolling()
{
	// Process cycle rolling
	switch(rollState & (ROLL_FWD | ROLL_REV | ROLL_CYCLE))
    1844:	40 91 03 01 	lds	r20, 0x0103
    1848:	84 2f       	mov	r24, r20
    184a:	87 70       	andi	r24, 0x07	; 7
    184c:	85 30       	cpi	r24, 0x05	; 5
    184e:	19 f0       	breq	.+6      	; 0x1856 <__vector_9+0x92>
    1850:	86 30       	cpi	r24, 0x06	; 6
    1852:	e9 f5       	brne	.+122    	; 0x18ce <__vector_9+0x10a>
    1854:	1d c0       	rjmp	.+58     	; 0x1890 <__vector_9+0xcc>
//---------------------------------------------//
//---------------------------------------------//

static inline uint8_t reachedTopPoint(void)
{
	return (	(int16_t)(topPoint - rollPoint) <= 0 );
    1856:	80 91 0b 01 	lds	r24, 0x010B
    185a:	90 91 0c 01 	lds	r25, 0x010C
    185e:	20 91 07 01 	lds	r18, 0x0107
    1862:	30 91 08 01 	lds	r19, 0x0108
    1866:	82 1b       	sub	r24, r18
    1868:	93 0b       	sbc	r25, r19
{
	// Process cycle rolling
	switch(rollState & (ROLL_FWD | ROLL_REV | ROLL_CYCLE))
	{
		case (ROLL_FWD | ROLL_CYCLE):
			if (reachedTopPoint())
    186a:	18 16       	cp	r1, r24
    186c:	19 06       	cpc	r1, r25
    186e:	7c f1       	brlt	.+94     	; 0x18ce <__vector_9+0x10a>
			{
				if (activeRollCycle >= p.rollCycleSet)	
    1870:	80 91 02 01 	lds	r24, 0x0102
    1874:	90 91 92 01 	lds	r25, 0x0192
    1878:	89 17       	cp	r24, r25
    187a:	28 f0       	brcs	.+10     	; 0x1886 <__vector_9+0xc2>
				{
					// DONE!
					rollState &= ~ROLL_CYCLE;
    187c:	4b 7f       	andi	r20, 0xFB	; 251
					rollState |= CYCLE_ROLL_DONE;
    187e:	40 61       	ori	r20, 0x10	; 16
    1880:	40 93 03 01 	sts	0x0103, r20
    1884:	24 c0       	rjmp	.+72     	; 0x18ce <__vector_9+0x10a>
				}
				else
				{
					activeRollCycle++;
    1886:	8f 5f       	subi	r24, 0xFF	; 255
    1888:	80 93 02 01 	sts	0x0102, r24
					// Change dir	
					newDirReq = ROLL_REV;				
    188c:	82 e0       	ldi	r24, 0x02	; 2
    188e:	1d c0       	rjmp	.+58     	; 0x18ca <__vector_9+0x106>
	return (	(int16_t)(topPoint - rollPoint) <= 0 );
}

static inline uint8_t reachedBottomPoint(void)
{
	return (	(int16_t)(rollPoint - bottomPoint) <= 0 );
    1890:	80 91 07 01 	lds	r24, 0x0107
    1894:	90 91 08 01 	lds	r25, 0x0108
    1898:	20 91 09 01 	lds	r18, 0x0109
    189c:	30 91 0a 01 	lds	r19, 0x010A
    18a0:	82 1b       	sub	r24, r18
    18a2:	93 0b       	sbc	r25, r19
				}
			}
			break;
		
		case (ROLL_REV | ROLL_CYCLE):	
			if (reachedBottomPoint())
    18a4:	18 16       	cp	r1, r24
    18a6:	19 06       	cpc	r1, r25
    18a8:	94 f0       	brlt	.+36     	; 0x18ce <__vector_9+0x10a>
			{
				if (activeRollCycle >= p.rollCycleSet)	
    18aa:	80 91 02 01 	lds	r24, 0x0102
    18ae:	90 91 92 01 	lds	r25, 0x0192
    18b2:	89 17       	cp	r24, r25
    18b4:	30 f0       	brcs	.+12     	; 0x18c2 <__vector_9+0xfe>
				{
					// DONE!
					rollState &= ~ROLL_CYCLE;
    18b6:	84 2f       	mov	r24, r20
    18b8:	8b 7f       	andi	r24, 0xFB	; 251
					rollState |= CYCLE_ROLL_DONE;
    18ba:	80 61       	ori	r24, 0x10	; 16
    18bc:	80 93 03 01 	sts	0x0103, r24
    18c0:	06 c0       	rjmp	.+12     	; 0x18ce <__vector_9+0x10a>
				}
				else
				{
					activeRollCycle++;
    18c2:	8f 5f       	subi	r24, 0xFF	; 255
    18c4:	80 93 02 01 	sts	0x0102, r24
					// Change dir	
					newDirReq = ROLL_FWD;
    18c8:	81 e0       	ldi	r24, 0x01	; 1
    18ca:	80 93 06 01 	sts	0x0106, r24
		default:
			break;
	}
	
	// Process direction change
	if ((rollState ^ newDirReq) & (ROLL_FWD | ROLL_REV))
    18ce:	20 91 03 01 	lds	r18, 0x0103
    18d2:	90 91 06 01 	lds	r25, 0x0106
    18d6:	89 2f       	mov	r24, r25
    18d8:	82 27       	eor	r24, r18
    18da:	83 70       	andi	r24, 0x03	; 3
    18dc:	19 f0       	breq	.+6      	; 0x18e4 <__vector_9+0x120>
	{
		// ROLL_DIR_CHANGED is used for sound beep
		rollState |= (SKIP_CURRENT_MOTOR_CTRL | ROLL_DIR_CHANGED);
    18de:	28 62       	ori	r18, 0x28	; 40
    18e0:	20 93 03 01 	sts	0x0103, r18
	}
	
	rollState &= ~(ROLL_FWD | ROLL_REV);
    18e4:	80 91 03 01 	lds	r24, 0x0103
    18e8:	8c 7f       	andi	r24, 0xFC	; 252
	rollState |= newDirReq;
    18ea:	89 2b       	or	r24, r25
	rollState &= dirChangedMask;
    18ec:	90 91 82 00 	lds	r25, 0x0082
    18f0:	89 23       	and	r24, r25
    18f2:	80 93 03 01 	sts	0x0103, r24
	dirChangedMask = 0xFF;
    18f6:	9f ef       	ldi	r25, 0xFF	; 255
    18f8:	90 93 82 00 	sts	0x0082, r25
	return (	(int16_t)(rollPoint - bottomPoint) <= 0 );
}

static inline void updateRollPoint(void)
{	
	if (rollState & ROLL_FWD)
    18fc:	80 ff       	sbrs	r24, 0
    18fe:	06 c0       	rjmp	.+12     	; 0x190c <__vector_9+0x148>
		rollPoint++;
    1900:	80 91 07 01 	lds	r24, 0x0107
    1904:	90 91 08 01 	lds	r25, 0x0108
    1908:	01 96       	adiw	r24, 0x01	; 1
    190a:	07 c0       	rjmp	.+14     	; 0x191a <__vector_9+0x156>
	else if (rollState & ROLL_REV)
    190c:	81 ff       	sbrs	r24, 1
    190e:	09 c0       	rjmp	.+18     	; 0x1922 <__vector_9+0x15e>
		rollPoint--;	
    1910:	80 91 07 01 	lds	r24, 0x0107
    1914:	90 91 08 01 	lds	r25, 0x0108
    1918:	01 97       	sbiw	r24, 0x01	; 1
    191a:	90 93 08 01 	sts	0x0108, r25
    191e:	80 93 07 01 	sts	0x0107, r24
			controlRolling();
		}
	}
	
	
	if ((p_state & STATE_MASK)  != 0x0F)
    1922:	80 91 81 00 	lds	r24, 0x0081
    1926:	98 2f       	mov	r25, r24
    1928:	9f 70       	andi	r25, 0x0F	; 15
    192a:	9f 30       	cpi	r25, 0x0F	; 15
    192c:	19 f0       	breq	.+6      	; 0x1934 <__vector_9+0x170>
		p_state++;
    192e:	8f 5f       	subi	r24, 0xFF	; 255
    1930:	80 93 81 00 	sts	0x0081, r24
}	
    1934:	ff 91       	pop	r31
    1936:	ef 91       	pop	r30
    1938:	bf 91       	pop	r27
    193a:	af 91       	pop	r26
    193c:	9f 91       	pop	r25
    193e:	8f 91       	pop	r24
    1940:	7f 91       	pop	r23
    1942:	6f 91       	pop	r22
    1944:	5f 91       	pop	r21
    1946:	4f 91       	pop	r20
    1948:	3f 91       	pop	r19
    194a:	2f 91       	pop	r18
    194c:	0f 90       	pop	r0
    194e:	0f be       	out	0x3f, r0	; 63
    1950:	0f 90       	pop	r0
    1952:	1f 90       	pop	r1
    1954:	18 95       	reti

00001956 <processSoftTimer8b>:
 
 
 
 
 void processSoftTimer8b(SoftTimer8b_t *tmr)
 {
    1956:	fc 01       	movw	r30, r24
	 uint8_t newTimerVal;

	 if (!tmr->Enabled)
    1958:	90 81       	ld	r25, Z
    195a:	90 ff       	sbrs	r25, 0
    195c:	27 c0       	rjmp	.+78     	; 0x19ac <processSoftTimer8b+0x56>
		return;
	 
	 tmr->FA_EQ = 0;
	 tmr->FA_GE = 0;
	 tmr->FTop = 0;
    195e:	97 7e       	andi	r25, 0xE7	; 231
    1960:	9f 7d       	andi	r25, 0xDF	; 223
    1962:	90 83       	st	Z, r25
	 
	 if (tmr->Timer >= tmr->Top)
    1964:	81 81       	ldd	r24, Z+1	; 0x01
    1966:	22 81       	ldd	r18, Z+2	; 0x02
    1968:	82 17       	cp	r24, r18
    196a:	50 f0       	brcs	.+20     	; 0x1980 <processSoftTimer8b+0x2a>
	 {
		 if (tmr->RunOnce)
    196c:	91 ff       	sbrs	r25, 1
    196e:	02 c0       	rjmp	.+4      	; 0x1974 <processSoftTimer8b+0x1e>
		 {
			 tmr->Enabled = 0;
    1970:	9e 7f       	andi	r25, 0xFE	; 254
    1972:	90 83       	st	Z, r25
		 }
		 tmr->FTop = 1;
    1974:	90 81       	ld	r25, Z
		 tmr->FOvfl = 1;
    1976:	90 62       	ori	r25, 0x20	; 32
    1978:	90 64       	ori	r25, 0x40	; 64
    197a:	90 83       	st	Z, r25
		 newTimerVal = 0;
    197c:	20 e0       	ldi	r18, 0x00	; 0
    197e:	02 c0       	rjmp	.+4      	; 0x1984 <processSoftTimer8b+0x2e>
	 }
	 else
	 {
		 newTimerVal = tmr->Timer + 1;
    1980:	28 2f       	mov	r18, r24
    1982:	2f 5f       	subi	r18, 0xFF	; 255
	 }
	 
	 if (tmr->Timer == tmr->CompA)
    1984:	93 81       	ldd	r25, Z+3	; 0x03
    1986:	89 13       	cpse	r24, r25
    1988:	0b c0       	rjmp	.+22     	; 0x19a0 <processSoftTimer8b+0x4a>
	 {
		 tmr->FA_EQ = 1;
    198a:	80 81       	ld	r24, Z
		 tmr->FA_GE = 1;
    198c:	88 60       	ori	r24, 0x08	; 8
    198e:	80 61       	ori	r24, 0x10	; 16
		 tmr->FA_TGL = !tmr->FA_TGL;
    1990:	82 fb       	bst	r24, 2
    1992:	99 27       	eor	r25, r25
    1994:	90 f9       	bld	r25, 0
    1996:	31 e0       	ldi	r19, 0x01	; 1
    1998:	93 27       	eor	r25, r19
    199a:	90 fb       	bst	r25, 0
    199c:	82 f9       	bld	r24, 2
    199e:	04 c0       	rjmp	.+8      	; 0x19a8 <processSoftTimer8b+0x52>
	 }
	 else if (tmr->Timer >= tmr->CompA)
    19a0:	89 17       	cp	r24, r25
    19a2:	18 f0       	brcs	.+6      	; 0x19aa <processSoftTimer8b+0x54>
	 {
		 tmr->FA_GE = 1;
    19a4:	80 81       	ld	r24, Z
    19a6:	80 61       	ori	r24, 0x10	; 16
    19a8:	80 83       	st	Z, r24
	 }
	 
	 tmr->Timer = newTimerVal; 
    19aa:	21 83       	std	Z+1, r18	; 0x01
    19ac:	08 95       	ret

000019ae <processSystemTimers>:
static uint8_t enableOverride = 0;


void processSystemTimers(void)
{
	sys_timers.flags = 0x00;
    19ae:	10 92 89 00 	sts	0x0089, r1
	
	// Process Celsius counter
	if (--sys_timers.celsius_upd_counter == 0)
    19b2:	80 91 83 00 	lds	r24, 0x0083
    19b6:	81 50       	subi	r24, 0x01	; 1
    19b8:	80 93 83 00 	sts	0x0083, r24
    19bc:	81 11       	cpse	r24, r1
    19be:	13 c0       	rjmp	.+38     	; 0x19e6 <processSystemTimers+0x38>
	{
		sys_timers.celsius_upd_counter = CELSIUS_UDPATE_INTERVAL;
    19c0:	84 e0       	ldi	r24, 0x04	; 4
    19c2:	80 93 83 00 	sts	0x0083, r24
		sys_timers.flags |= EXPIRED_CELSIUS;
    19c6:	81 e0       	ldi	r24, 0x01	; 1
    19c8:	80 93 89 00 	sts	0x0089, r24
		
		// Process PID update counter
		if (--sys_timers.pid_update_counter == 0)
    19cc:	80 91 88 00 	lds	r24, 0x0088
    19d0:	81 50       	subi	r24, 0x01	; 1
    19d2:	80 93 88 00 	sts	0x0088, r24
    19d6:	81 11       	cpse	r24, r1
    19d8:	06 c0       	rjmp	.+12     	; 0x19e6 <processSystemTimers+0x38>
		{
			sys_timers.pid_update_counter = PID_UPDATE_INTERVAL;
    19da:	84 e1       	ldi	r24, 0x14	; 20
    19dc:	80 93 88 00 	sts	0x0088, r24
			sys_timers.flags |= UPDATE_PID;
    19e0:	81 e4       	ldi	r24, 0x41	; 65
    19e2:	80 93 89 00 	sts	0x0089, r24
		}
	}
	
	// Process log counter
	if (--sys_timers.log_counter == 0)
    19e6:	80 91 87 00 	lds	r24, 0x0087
    19ea:	81 50       	subi	r24, 0x01	; 1
    19ec:	19 f0       	breq	.+6      	; 0x19f4 <processSystemTimers+0x46>
    19ee:	80 93 87 00 	sts	0x0087, r24
    19f2:	08 c0       	rjmp	.+16     	; 0x1a04 <processSystemTimers+0x56>
	{
		sys_timers.log_counter = LOG_INTERVAL;
    19f4:	82 e0       	ldi	r24, 0x02	; 2
    19f6:	80 93 87 00 	sts	0x0087, r24
		sys_timers.flags |= EXPIRED_LOG;
    19fa:	80 91 89 00 	lds	r24, 0x0089
    19fe:	80 62       	ori	r24, 0x20	; 32
    1a00:	80 93 89 00 	sts	0x0089, r24
	}
	
	// Process 10 seconds counter
	if (--sys_timers.counter_10sec == 0)
    1a04:	80 91 84 00 	lds	r24, 0x0084
    1a08:	81 50       	subi	r24, 0x01	; 1
    1a0a:	80 93 84 00 	sts	0x0084, r24
    1a0e:	81 11       	cpse	r24, r1
    1a10:	34 c0       	rjmp	.+104    	; 0x1a7a <processSystemTimers+0xcc>
	{
		sys_timers.counter_10sec = COUNTER_10SEC_INTERVAL;
    1a12:	88 ec       	ldi	r24, 0xC8	; 200
    1a14:	80 93 84 00 	sts	0x0084, r24
		sys_timers.flags |= EXPIRED_10SEC;
    1a18:	40 91 89 00 	lds	r20, 0x0089
    1a1c:	84 2f       	mov	r24, r20
    1a1e:	82 60       	ori	r24, 0x02	; 2
    1a20:	80 93 89 00 	sts	0x0089, r24
		
		// Process 1 minute counter
		if (--sys_timers.counter_1min == 0)
    1a24:	80 91 85 00 	lds	r24, 0x0085
    1a28:	81 50       	subi	r24, 0x01	; 1
    1a2a:	80 93 85 00 	sts	0x0085, r24
    1a2e:	81 11       	cpse	r24, r1
    1a30:	24 c0       	rjmp	.+72     	; 0x1a7a <processSystemTimers+0xcc>
		{
			sys_timers.counter_1min = COUNTER_1MIN_INTERVAL;
    1a32:	86 e0       	ldi	r24, 0x06	; 6
    1a34:	80 93 85 00 	sts	0x0085, r24
			sys_timers.flags |= EXPIRED_1MIN;
    1a38:	84 2f       	mov	r24, r20
    1a3a:	86 60       	ori	r24, 0x06	; 6
    1a3c:	80 93 89 00 	sts	0x0089, r24
			
			// Process auto power off counter
			if (sys_timers.poff_counter != MAX_POWEROFF_TIMEOUT - 1)
    1a40:	80 91 86 00 	lds	r24, 0x0086
    1a44:	8e 35       	cpi	r24, 0x5E	; 94
    1a46:	19 f0       	breq	.+6      	; 0x1a4e <processSystemTimers+0xa0>
				sys_timers.poff_counter++;
    1a48:	8f 5f       	subi	r24, 0xFF	; 255
    1a4a:	80 93 86 00 	sts	0x0086, r24
			if (sys_timers.poff_counter == p.power_off_timeout - 1)
    1a4e:	60 91 86 00 	lds	r22, 0x0086
    1a52:	50 91 94 01 	lds	r21, 0x0194
    1a56:	26 2f       	mov	r18, r22
    1a58:	30 e0       	ldi	r19, 0x00	; 0
    1a5a:	85 2f       	mov	r24, r21
    1a5c:	90 e0       	ldi	r25, 0x00	; 0
    1a5e:	01 97       	sbiw	r24, 0x01	; 1
    1a60:	28 17       	cp	r18, r24
    1a62:	39 07       	cpc	r19, r25
    1a64:	19 f4       	brne	.+6      	; 0x1a6c <processSystemTimers+0xbe>
				sys_timers.flags |= AUTOPOFF_SOON;
    1a66:	4e 60       	ori	r20, 0x0E	; 14
    1a68:	40 93 89 00 	sts	0x0089, r20
			if (sys_timers.poff_counter == p.power_off_timeout)
    1a6c:	65 13       	cpse	r22, r21
    1a6e:	05 c0       	rjmp	.+10     	; 0x1a7a <processSystemTimers+0xcc>
				sys_timers.flags |= AUTOPOFF_EXPIRED;			
    1a70:	80 91 89 00 	lds	r24, 0x0089
    1a74:	80 61       	ori	r24, 0x10	; 16
    1a76:	80 93 89 00 	sts	0x0089, r24
    1a7a:	08 95       	ret

00001a7c <resetAutoPowerOffCounter>:
}


void resetAutoPowerOffCounter(void)
{
	sys_timers.poff_counter = 0;
    1a7c:	10 92 86 00 	sts	0x0086, r1
    1a80:	08 95       	ret

00001a82 <__vector_3>:
// ----------------------- //


// Period is 1ms @ 16MHz
ISR(TIMER2_COMP_vect)
{	
    1a82:	1f 92       	push	r1
    1a84:	0f 92       	push	r0
    1a86:	0f b6       	in	r0, 0x3f	; 63
    1a88:	0f 92       	push	r0
    1a8a:	11 24       	eor	r1, r1
    1a8c:	2f 93       	push	r18
    1a8e:	3f 93       	push	r19
    1a90:	4f 93       	push	r20
    1a92:	5f 93       	push	r21
    1a94:	6f 93       	push	r22
    1a96:	7f 93       	push	r23
    1a98:	8f 93       	push	r24
    1a9a:	9f 93       	push	r25
    1a9c:	af 93       	push	r26
    1a9e:	bf 93       	push	r27
    1aa0:	ef 93       	push	r30
    1aa2:	ff 93       	push	r31
	// Manage LED indicator
	processLedIndicator();
    1aa4:	48 d7       	rcall	.+3728   	; 0x2936 <__data_load_end+0xb60>
static inline void Sound_Process(void)
{
	static uint16_t note_time_counter;
	static tone_t tone;
	static const tone_t* p_melody;
	uint8_t new_state = sound_state;
    1aa6:	20 91 0f 01 	lds	r18, 0x010F
	
	switch (sound_state)
    1aaa:	22 30       	cpi	r18, 0x02	; 2
    1aac:	99 f1       	breq	.+102    	; 0x1b14 <__vector_3+0x92>
    1aae:	20 f4       	brcc	.+8      	; 0x1ab8 <__vector_3+0x36>
    1ab0:	21 30       	cpi	r18, 0x01	; 1
    1ab2:	09 f0       	breq	.+2      	; 0x1ab6 <__vector_3+0x34>
    1ab4:	50 c0       	rjmp	.+160    	; 0x1b56 <__vector_3+0xd4>
    1ab6:	0f c0       	rjmp	.+30     	; 0x1ad6 <__vector_3+0x54>
    1ab8:	23 30       	cpi	r18, 0x03	; 3
    1aba:	21 f0       	breq	.+8      	; 0x1ac4 <__vector_3+0x42>
    1abc:	25 30       	cpi	r18, 0x05	; 5
    1abe:	09 f0       	breq	.+2      	; 0x1ac2 <__vector_3+0x40>
    1ac0:	4a c0       	rjmp	.+148    	; 0x1b56 <__vector_3+0xd4>
    1ac2:	15 c0       	rjmp	.+42     	; 0x1aee <__vector_3+0x6c>
	{
		case SOUND_START_NEW:
			p_melody = new_melody;
    1ac4:	80 91 10 01 	lds	r24, 0x0110
    1ac8:	90 91 11 01 	lds	r25, 0x0111
    1acc:	90 93 13 01 	sts	0x0113, r25
    1ad0:	80 93 12 01 	sts	0x0112, r24
    1ad4:	44 c0       	rjmp	.+136    	; 0x1b5e <__vector_3+0xdc>
			new_state = SOUND_APPLY_TONE;
			p_melody = NULL;				// Beeper mode
			break;
		#endif
		case SOUND_PLAY:
			if (--note_time_counter == 0)
    1ad6:	80 91 14 01 	lds	r24, 0x0114
    1ada:	90 91 15 01 	lds	r25, 0x0115
    1ade:	01 97       	sbiw	r24, 0x01	; 1
    1ae0:	90 93 15 01 	sts	0x0115, r25
    1ae4:	80 93 14 01 	sts	0x0114, r24
    1ae8:	89 2b       	or	r24, r25
    1aea:	c9 f1       	breq	.+114    	; 0x1b5e <__vector_3+0xdc>
    1aec:	3b c0       	rjmp	.+118    	; 0x1b64 <__vector_3+0xe2>
		case SOUND_GET_NEXT_TONE:
			#ifdef USE_BEEP_FUNCTION
			if (p_melody != NULL)			// If driver is playing melody, not beeping
			{
				#endif
				if (!eeprom_is_ready())		// If EEPROM is busy and Sound_Process() is called from an ISR, deadly block may appear
    1aee:	e1 99       	sbic	0x1c, 1	; 28
    1af0:	3b c0       	rjmp	.+118    	; 0x1b68 <__vector_3+0xe6>
					return;
				eeprom_read_block(&tone,p_melody++,sizeof(tone_t));
    1af2:	60 91 12 01 	lds	r22, 0x0112
    1af6:	70 91 13 01 	lds	r23, 0x0113
    1afa:	cb 01       	movw	r24, r22
    1afc:	02 96       	adiw	r24, 0x02	; 2
    1afe:	90 93 13 01 	sts	0x0113, r25
    1b02:	80 93 12 01 	sts	0x0112, r24
    1b06:	42 e0       	ldi	r20, 0x02	; 2
    1b08:	50 e0       	ldi	r21, 0x00	; 0
    1b0a:	86 e1       	ldi	r24, 0x16	; 22
    1b0c:	91 e0       	ldi	r25, 0x01	; 1
    1b0e:	f1 d0       	rcall	.+482    	; 0x1cf2 <__eerd_block_m8>
				new_state = SOUND_APPLY_TONE;
    1b10:	22 e0       	ldi	r18, 0x02	; 2
    1b12:	28 c0       	rjmp	.+80     	; 0x1b64 <__vector_3+0xe2>
				new_state = SOUND_OFF;
			}
			#endif
			break;
		case SOUND_APPLY_TONE:
			if (tone.duration == 0)
    1b14:	80 91 17 01 	lds	r24, 0x0117
    1b18:	88 23       	and	r24, r24
    1b1a:	19 f1       	breq	.+70     	; 0x1b62 <__vector_3+0xe0>
				new_state = SOUND_OFF;
			}
			else
			{
				// Setup period
				if (tone.tone_period != 0)
    1b1c:	80 91 16 01 	lds	r24, 0x0116
    1b20:	88 23       	and	r24, r24
    1b22:	49 f0       	breq	.+18     	; 0x1b36 <__vector_3+0xb4>
				{
					// Timer runs at 250kHz (T = 4us), tone_period is set in units of 8us
					// Output toggles on compare match
					OCR1A = tone.tone_period - 1;
    1b24:	90 e0       	ldi	r25, 0x00	; 0
    1b26:	01 97       	sbiw	r24, 0x01	; 1
    1b28:	9b bd       	out	0x2b, r25	; 43
    1b2a:	8a bd       	out	0x2a, r24	; 42
					TCNT1 = 0;
    1b2c:	1d bc       	out	0x2d, r1	; 45
    1b2e:	1c bc       	out	0x2c, r1	; 44
					// Toggle OCR1A on compare match
					TCCR1A |= (1<<COM1A0);
    1b30:	8f b5       	in	r24, 0x2f	; 47
    1b32:	80 64       	ori	r24, 0x40	; 64
    1b34:	02 c0       	rjmp	.+4      	; 0x1b3a <__vector_3+0xb8>
				}
				else
				{
					// Disable OCR1A output
					TCCR1A &= ~(1<<COM1A0 | 1<<COM1A1);
    1b36:	8f b5       	in	r24, 0x2f	; 47
    1b38:	8f 73       	andi	r24, 0x3F	; 63
    1b3a:	8f bd       	out	0x2f, r24	; 47
				}
				note_time_counter = (uint16_t)tone.duration * TONE_DURATION_SCALE - 2;
    1b3c:	80 91 17 01 	lds	r24, 0x0117
    1b40:	2a e0       	ldi	r18, 0x0A	; 10
    1b42:	82 9f       	mul	r24, r18
    1b44:	c0 01       	movw	r24, r0
    1b46:	11 24       	eor	r1, r1
    1b48:	02 97       	sbiw	r24, 0x02	; 2
    1b4a:	90 93 15 01 	sts	0x0115, r25
    1b4e:	80 93 14 01 	sts	0x0114, r24
				new_state = SOUND_PLAY;
    1b52:	21 e0       	ldi	r18, 0x01	; 1
    1b54:	07 c0       	rjmp	.+14     	; 0x1b64 <__vector_3+0xe2>
			}
			break;
			default:
			// Disable OCR1A output
			TCCR1A &= ~(1<<COM1A0 | 1<<COM1A1);
    1b56:	8f b5       	in	r24, 0x2f	; 47
    1b58:	8f 73       	andi	r24, 0x3F	; 63
    1b5a:	8f bd       	out	0x2f, r24	; 47
    1b5c:	03 c0       	rjmp	.+6      	; 0x1b64 <__vector_3+0xe2>
			p_melody = NULL;				// Beeper mode
			break;
		#endif
		case SOUND_PLAY:
			if (--note_time_counter == 0)
				new_state = SOUND_GET_NEXT_TONE;
    1b5e:	25 e0       	ldi	r18, 0x05	; 5
    1b60:	01 c0       	rjmp	.+2      	; 0x1b64 <__vector_3+0xe2>
			break;
		case SOUND_APPLY_TONE:
			if (tone.duration == 0)
			{
				// Finished
				new_state = SOUND_OFF;
    1b62:	20 e0       	ldi	r18, 0x00	; 0
			default:
			// Disable OCR1A output
			TCCR1A &= ~(1<<COM1A0 | 1<<COM1A1);
			break;
	}
	sound_state = new_state;
    1b64:	20 93 0f 01 	sts	0x010F, r18
	
	// Do sound stuff
	Sound_Process();
	
	// Process menu update timer
	processSoftTimer8b(&menuUpdateTimer);	
    1b68:	8a e8       	ldi	r24, 0x8A	; 138
    1b6a:	90 e0       	ldi	r25, 0x00	; 0
    1b6c:	f4 de       	rcall	.-536    	; 0x1956 <processSoftTimer8b>
	
	// Start ADC conversion 
	ADCSRA |= (1<<ADSC);
    1b6e:	36 9a       	sbi	0x06, 6	; 6
}
    1b70:	ff 91       	pop	r31
    1b72:	ef 91       	pop	r30
    1b74:	bf 91       	pop	r27
    1b76:	af 91       	pop	r26
    1b78:	9f 91       	pop	r25
    1b7a:	8f 91       	pop	r24
    1b7c:	7f 91       	pop	r23
    1b7e:	6f 91       	pop	r22
    1b80:	5f 91       	pop	r21
    1b82:	4f 91       	pop	r20
    1b84:	3f 91       	pop	r19
    1b86:	2f 91       	pop	r18
    1b88:	0f 90       	pop	r0
    1b8a:	0f be       	out	0x3f, r0	; 63
    1b8c:	0f 90       	pop	r0
    1b8e:	1f 90       	pop	r1
    1b90:	18 95       	reti

00001b92 <Sound_Play>:
}
#endif

void Sound_Play(const tone_t* p_melody)
{
	if ((p.sound_enable) || (SoundEnable_override))
    1b92:	20 91 93 01 	lds	r18, 0x0193
    1b96:	21 11       	cpse	r18, r1
    1b98:	04 c0       	rjmp	.+8      	; 0x1ba2 <Sound_Play+0x10>
    1b9a:	20 91 18 01 	lds	r18, 0x0118
    1b9e:	22 23       	and	r18, r18
    1ba0:	49 f0       	breq	.+18     	; 0x1bb4 <Sound_Play+0x22>
	{
		new_melody =  p_melody;
    1ba2:	90 93 11 01 	sts	0x0111, r25
    1ba6:	80 93 10 01 	sts	0x0110, r24
		sound_state = SOUND_START_NEW;		// No need to disable interrupts - atomic operation
    1baa:	83 e0       	ldi	r24, 0x03	; 3
    1bac:	80 93 0f 01 	sts	0x010F, r24
		SoundEnable_override = 0;
    1bb0:	10 92 18 01 	sts	0x0118, r1
    1bb4:	08 95       	ret

00001bb6 <Sound_OverrideDisable>:
	sound_state = SOUND_OFF;
}

void Sound_OverrideDisable(void)
{
	SoundEnable_override = 1;
    1bb6:	81 e0       	ldi	r24, 0x01	; 1
    1bb8:	80 93 18 01 	sts	0x0118, r24
    1bbc:	08 95       	ret

00001bbe <USART_send>:



void USART_send( uint8_t data )
{
	UCSRA |= (1<<TXC);                 // Clear flag
    1bbe:	5e 9a       	sbi	0x0b, 6	; 11
	UDR = data;
    1bc0:	8c b9       	out	0x0c, r24	; 12
	while ( !(UCSRA & (1<<TXC)) );  // Wait
    1bc2:	5e 9b       	sbis	0x0b, 6	; 11
    1bc4:	fe cf       	rjmp	.-4      	; 0x1bc2 <USART_send+0x4>
}
    1bc6:	08 95       	ret

00001bc8 <USART_sendstr>:


void USART_sendstr(char* str)
{
    1bc8:	1f 93       	push	r17
    1bca:	cf 93       	push	r28
    1bcc:	df 93       	push	r29
    1bce:	ec 01       	movw	r28, r24
	uint8_t i = 0;
    1bd0:	10 e0       	ldi	r17, 0x00	; 0
	while (str[i])
    1bd2:	02 c0       	rjmp	.+4      	; 0x1bd8 <USART_sendstr+0x10>
	{
		USART_send(str[i++]);
    1bd4:	1f 5f       	subi	r17, 0xFF	; 255
    1bd6:	f3 df       	rcall	.-26     	; 0x1bbe <USART_send>


void USART_sendstr(char* str)
{
	uint8_t i = 0;
	while (str[i])
    1bd8:	fe 01       	movw	r30, r28
    1bda:	e1 0f       	add	r30, r17
    1bdc:	f1 1d       	adc	r31, r1
    1bde:	80 81       	ld	r24, Z
    1be0:	81 11       	cpse	r24, r1
    1be2:	f8 cf       	rjmp	.-16     	; 0x1bd4 <USART_sendstr+0xc>
	{
		USART_send(str[i++]);
	}
}
    1be4:	df 91       	pop	r29
    1be6:	cf 91       	pop	r28
    1be8:	1f 91       	pop	r17
    1bea:	08 95       	ret

00001bec <__mulsi3>:
    1bec:	db 01       	movw	r26, r22
    1bee:	8f 93       	push	r24
    1bf0:	9f 93       	push	r25
    1bf2:	4a d0       	rcall	.+148    	; 0x1c88 <__muluhisi3>
    1bf4:	bf 91       	pop	r27
    1bf6:	af 91       	pop	r26
    1bf8:	a2 9f       	mul	r26, r18
    1bfa:	80 0d       	add	r24, r0
    1bfc:	91 1d       	adc	r25, r1
    1bfe:	a3 9f       	mul	r26, r19
    1c00:	90 0d       	add	r25, r0
    1c02:	b2 9f       	mul	r27, r18
    1c04:	90 0d       	add	r25, r0
    1c06:	11 24       	eor	r1, r1
    1c08:	08 95       	ret

00001c0a <__udivmodqi4>:
    1c0a:	99 1b       	sub	r25, r25
    1c0c:	79 e0       	ldi	r23, 0x09	; 9
    1c0e:	04 c0       	rjmp	.+8      	; 0x1c18 <__udivmodqi4_ep>

00001c10 <__udivmodqi4_loop>:
    1c10:	99 1f       	adc	r25, r25
    1c12:	96 17       	cp	r25, r22
    1c14:	08 f0       	brcs	.+2      	; 0x1c18 <__udivmodqi4_ep>
    1c16:	96 1b       	sub	r25, r22

00001c18 <__udivmodqi4_ep>:
    1c18:	88 1f       	adc	r24, r24
    1c1a:	7a 95       	dec	r23
    1c1c:	c9 f7       	brne	.-14     	; 0x1c10 <__udivmodqi4_loop>
    1c1e:	80 95       	com	r24
    1c20:	08 95       	ret

00001c22 <__divmodsi4>:
    1c22:	05 2e       	mov	r0, r21
    1c24:	97 fb       	bst	r25, 7
    1c26:	16 f4       	brtc	.+4      	; 0x1c2c <__divmodsi4+0xa>
    1c28:	00 94       	com	r0
    1c2a:	06 d0       	rcall	.+12     	; 0x1c38 <__divmodsi4_neg1>
    1c2c:	57 fd       	sbrc	r21, 7
    1c2e:	0c d0       	rcall	.+24     	; 0x1c48 <__divmodsi4_neg2>
    1c30:	35 d0       	rcall	.+106    	; 0x1c9c <__udivmodsi4>
    1c32:	07 fc       	sbrc	r0, 7
    1c34:	09 d0       	rcall	.+18     	; 0x1c48 <__divmodsi4_neg2>
    1c36:	7e f4       	brtc	.+30     	; 0x1c56 <__divmodsi4_exit>

00001c38 <__divmodsi4_neg1>:
    1c38:	90 95       	com	r25
    1c3a:	80 95       	com	r24
    1c3c:	70 95       	com	r23
    1c3e:	61 95       	neg	r22
    1c40:	7f 4f       	sbci	r23, 0xFF	; 255
    1c42:	8f 4f       	sbci	r24, 0xFF	; 255
    1c44:	9f 4f       	sbci	r25, 0xFF	; 255
    1c46:	08 95       	ret

00001c48 <__divmodsi4_neg2>:
    1c48:	50 95       	com	r21
    1c4a:	40 95       	com	r20
    1c4c:	30 95       	com	r19
    1c4e:	21 95       	neg	r18
    1c50:	3f 4f       	sbci	r19, 0xFF	; 255
    1c52:	4f 4f       	sbci	r20, 0xFF	; 255
    1c54:	5f 4f       	sbci	r21, 0xFF	; 255

00001c56 <__divmodsi4_exit>:
    1c56:	08 95       	ret

00001c58 <__mulhisi3>:
    1c58:	05 d0       	rcall	.+10     	; 0x1c64 <__umulhisi3>
    1c5a:	33 23       	and	r19, r19
    1c5c:	12 f4       	brpl	.+4      	; 0x1c62 <__mulhisi3+0xa>
    1c5e:	8a 1b       	sub	r24, r26
    1c60:	9b 0b       	sbc	r25, r27
    1c62:	0d c0       	rjmp	.+26     	; 0x1c7e <__usmulhisi3_tail>

00001c64 <__umulhisi3>:
    1c64:	a2 9f       	mul	r26, r18
    1c66:	b0 01       	movw	r22, r0
    1c68:	b3 9f       	mul	r27, r19
    1c6a:	c0 01       	movw	r24, r0
    1c6c:	a3 9f       	mul	r26, r19
    1c6e:	01 d0       	rcall	.+2      	; 0x1c72 <__umulhisi3+0xe>
    1c70:	b2 9f       	mul	r27, r18
    1c72:	70 0d       	add	r23, r0
    1c74:	81 1d       	adc	r24, r1
    1c76:	11 24       	eor	r1, r1
    1c78:	91 1d       	adc	r25, r1
    1c7a:	08 95       	ret

00001c7c <__usmulhisi3>:
    1c7c:	f3 df       	rcall	.-26     	; 0x1c64 <__umulhisi3>

00001c7e <__usmulhisi3_tail>:
    1c7e:	b7 ff       	sbrs	r27, 7
    1c80:	08 95       	ret
    1c82:	82 1b       	sub	r24, r18
    1c84:	93 0b       	sbc	r25, r19
    1c86:	08 95       	ret

00001c88 <__muluhisi3>:
    1c88:	ed df       	rcall	.-38     	; 0x1c64 <__umulhisi3>
    1c8a:	a5 9f       	mul	r26, r21
    1c8c:	90 0d       	add	r25, r0
    1c8e:	b4 9f       	mul	r27, r20
    1c90:	90 0d       	add	r25, r0
    1c92:	a4 9f       	mul	r26, r20
    1c94:	80 0d       	add	r24, r0
    1c96:	91 1d       	adc	r25, r1
    1c98:	11 24       	eor	r1, r1
    1c9a:	08 95       	ret

00001c9c <__udivmodsi4>:
    1c9c:	a1 e2       	ldi	r26, 0x21	; 33
    1c9e:	1a 2e       	mov	r1, r26
    1ca0:	aa 1b       	sub	r26, r26
    1ca2:	bb 1b       	sub	r27, r27
    1ca4:	fd 01       	movw	r30, r26
    1ca6:	0d c0       	rjmp	.+26     	; 0x1cc2 <__udivmodsi4_ep>

00001ca8 <__udivmodsi4_loop>:
    1ca8:	aa 1f       	adc	r26, r26
    1caa:	bb 1f       	adc	r27, r27
    1cac:	ee 1f       	adc	r30, r30
    1cae:	ff 1f       	adc	r31, r31
    1cb0:	a2 17       	cp	r26, r18
    1cb2:	b3 07       	cpc	r27, r19
    1cb4:	e4 07       	cpc	r30, r20
    1cb6:	f5 07       	cpc	r31, r21
    1cb8:	20 f0       	brcs	.+8      	; 0x1cc2 <__udivmodsi4_ep>
    1cba:	a2 1b       	sub	r26, r18
    1cbc:	b3 0b       	sbc	r27, r19
    1cbe:	e4 0b       	sbc	r30, r20
    1cc0:	f5 0b       	sbc	r31, r21

00001cc2 <__udivmodsi4_ep>:
    1cc2:	66 1f       	adc	r22, r22
    1cc4:	77 1f       	adc	r23, r23
    1cc6:	88 1f       	adc	r24, r24
    1cc8:	99 1f       	adc	r25, r25
    1cca:	1a 94       	dec	r1
    1ccc:	69 f7       	brne	.-38     	; 0x1ca8 <__udivmodsi4_loop>
    1cce:	60 95       	com	r22
    1cd0:	70 95       	com	r23
    1cd2:	80 95       	com	r24
    1cd4:	90 95       	com	r25
    1cd6:	9b 01       	movw	r18, r22
    1cd8:	ac 01       	movw	r20, r24
    1cda:	bd 01       	movw	r22, r26
    1cdc:	cf 01       	movw	r24, r30
    1cde:	08 95       	ret

00001ce0 <memcpy_P>:
    1ce0:	fb 01       	movw	r30, r22
    1ce2:	dc 01       	movw	r26, r24
    1ce4:	02 c0       	rjmp	.+4      	; 0x1cea <memcpy_P+0xa>
    1ce6:	05 90       	lpm	r0, Z+
    1ce8:	0d 92       	st	X+, r0
    1cea:	41 50       	subi	r20, 0x01	; 1
    1cec:	50 40       	sbci	r21, 0x00	; 0
    1cee:	d8 f7       	brcc	.-10     	; 0x1ce6 <memcpy_P+0x6>
    1cf0:	08 95       	ret

00001cf2 <__eerd_block_m8>:
    1cf2:	dc 01       	movw	r26, r24
    1cf4:	cb 01       	movw	r24, r22

00001cf6 <__eerd_blraw_m8>:
    1cf6:	fc 01       	movw	r30, r24
    1cf8:	e1 99       	sbic	0x1c, 1	; 28
    1cfa:	fe cf       	rjmp	.-4      	; 0x1cf8 <__eerd_blraw_m8+0x2>
    1cfc:	06 c0       	rjmp	.+12     	; 0x1d0a <__eerd_blraw_m8+0x14>
    1cfe:	ff bb       	out	0x1f, r31	; 31
    1d00:	ee bb       	out	0x1e, r30	; 30
    1d02:	e0 9a       	sbi	0x1c, 0	; 28
    1d04:	31 96       	adiw	r30, 0x01	; 1
    1d06:	0d b2       	in	r0, 0x1d	; 29
    1d08:	0d 92       	st	X+, r0
    1d0a:	41 50       	subi	r20, 0x01	; 1
    1d0c:	50 40       	sbci	r21, 0x00	; 0
    1d0e:	b8 f7       	brcc	.-18     	; 0x1cfe <__eerd_blraw_m8+0x8>
    1d10:	08 95       	ret

00001d12 <__eerd_byte_m8>:
    1d12:	e1 99       	sbic	0x1c, 1	; 28
    1d14:	fe cf       	rjmp	.-4      	; 0x1d12 <__eerd_byte_m8>
    1d16:	9f bb       	out	0x1f, r25	; 31
    1d18:	8e bb       	out	0x1e, r24	; 30
    1d1a:	e0 9a       	sbi	0x1c, 0	; 28
    1d1c:	99 27       	eor	r25, r25
    1d1e:	8d b3       	in	r24, 0x1d	; 29
    1d20:	08 95       	ret

00001d22 <__eeupd_block_m8>:
    1d22:	dc 01       	movw	r26, r24
    1d24:	a4 0f       	add	r26, r20
    1d26:	b5 1f       	adc	r27, r21
    1d28:	41 50       	subi	r20, 0x01	; 1
    1d2a:	50 40       	sbci	r21, 0x00	; 0
    1d2c:	40 f0       	brcs	.+16     	; 0x1d3e <__eeupd_block_m8+0x1c>
    1d2e:	cb 01       	movw	r24, r22
    1d30:	84 0f       	add	r24, r20
    1d32:	95 1f       	adc	r25, r21
    1d34:	2e 91       	ld	r18, -X
    1d36:	05 d0       	rcall	.+10     	; 0x1d42 <__eeupd_r18_m8>
    1d38:	41 50       	subi	r20, 0x01	; 1
    1d3a:	50 40       	sbci	r21, 0x00	; 0
    1d3c:	d8 f7       	brcc	.-10     	; 0x1d34 <__eeupd_block_m8+0x12>
    1d3e:	08 95       	ret

00001d40 <__eeupd_byte_m8>:
    1d40:	26 2f       	mov	r18, r22

00001d42 <__eeupd_r18_m8>:
    1d42:	e1 99       	sbic	0x1c, 1	; 28
    1d44:	fe cf       	rjmp	.-4      	; 0x1d42 <__eeupd_r18_m8>
    1d46:	9f bb       	out	0x1f, r25	; 31
    1d48:	8e bb       	out	0x1e, r24	; 30
    1d4a:	e0 9a       	sbi	0x1c, 0	; 28
    1d4c:	01 97       	sbiw	r24, 0x01	; 1
    1d4e:	0d b2       	in	r0, 0x1d	; 29
    1d50:	02 16       	cp	r0, r18
    1d52:	31 f0       	breq	.+12     	; 0x1d60 <__eeupd_r18_m8+0x1e>
    1d54:	2d bb       	out	0x1d, r18	; 29
    1d56:	0f b6       	in	r0, 0x3f	; 63
    1d58:	f8 94       	cli
    1d5a:	e2 9a       	sbi	0x1c, 2	; 28
    1d5c:	e1 9a       	sbi	0x1c, 1	; 28
    1d5e:	0f be       	out	0x3f, r0	; 63
    1d60:	08 95       	ret

00001d62 <_exit>:
    1d62:	f8 94       	cli

00001d64 <__stop_program>:
    1d64:	ff cf       	rjmp	.-2      	; 0x1d64 <__stop_program>
