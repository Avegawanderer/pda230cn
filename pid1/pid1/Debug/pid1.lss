
pid1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000199a  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000048  00800060  0000199a  00001a4e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000054  008000a8  008000a8  00001a96  2**0
                  ALLOC
  3 .eeprom       00000006  00810000  00810000  00001a96  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         00001cb0  00000000  00000000  00001a9c  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      000005ba  00000000  00000000  0000374c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      0000002f  00000000  00000000  00003d06  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000368  00000000  00000000  00003d35  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00002efc  00000000  00000000  0000409d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000010e4  00000000  00000000  00006f99  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   000015e4  00000000  00000000  0000807d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  0000075c  00000000  00000000  00009664  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000c4d  00000000  00000000  00009dc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000192c  00000000  00000000  0000aa0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000310  00000000  00000000  0000c339  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	19 c1       	rjmp	.+562    	; 0x234 <__ctors_end>
       2:	33 c1       	rjmp	.+614    	; 0x26a <__bad_interrupt>
       4:	32 c1       	rjmp	.+612    	; 0x26a <__bad_interrupt>
       6:	9d ca       	rjmp	.-2758   	; 0xfffff542 <__eeprom_end+0xff7ef53c>
       8:	30 c1       	rjmp	.+608    	; 0x26a <__bad_interrupt>
       a:	2f c1       	rjmp	.+606    	; 0x26a <__bad_interrupt>
       c:	2e c1       	rjmp	.+604    	; 0x26a <__bad_interrupt>
       e:	2d c1       	rjmp	.+602    	; 0x26a <__bad_interrupt>
      10:	2c c1       	rjmp	.+600    	; 0x26a <__bad_interrupt>
      12:	64 c9       	rjmp	.-3384   	; 0xfffff2dc <__eeprom_end+0xff7ef2d6>
      14:	2a c1       	rjmp	.+596    	; 0x26a <__bad_interrupt>
      16:	29 c1       	rjmp	.+594    	; 0x26a <__bad_interrupt>
      18:	28 c1       	rjmp	.+592    	; 0x26a <__bad_interrupt>
      1a:	27 c1       	rjmp	.+590    	; 0x26a <__bad_interrupt>
      1c:	53 c1       	rjmp	.+678    	; 0x2c4 <__vector_14>
      1e:	25 c1       	rjmp	.+586    	; 0x26a <__bad_interrupt>
      20:	3b c9       	rjmp	.-3466   	; 0xfffff298 <__eeprom_end+0xff7ef292>
      22:	23 c1       	rjmp	.+582    	; 0x26a <__bad_interrupt>
      24:	22 c1       	rjmp	.+580    	; 0x26a <__bad_interrupt>
      26:	c9 c2       	rjmp	.+1426   	; 0x5ba <decode_led_char+0x48>
      28:	d9 c2       	rjmp	.+1458   	; 0x5dc <decode_led_char+0x6a>
      2a:	d8 c2       	rjmp	.+1456   	; 0x5dc <decode_led_char+0x6a>
      2c:	d7 c2       	rjmp	.+1454   	; 0x5dc <decode_led_char+0x6a>
      2e:	d6 c2       	rjmp	.+1452   	; 0x5dc <decode_led_char+0x6a>
      30:	d5 c2       	rjmp	.+1450   	; 0x5dc <decode_led_char+0x6a>
      32:	d4 c2       	rjmp	.+1448   	; 0x5dc <decode_led_char+0x6a>
      34:	d3 c2       	rjmp	.+1446   	; 0x5dc <decode_led_char+0x6a>
      36:	d2 c2       	rjmp	.+1444   	; 0x5dc <decode_led_char+0x6a>
      38:	d1 c2       	rjmp	.+1442   	; 0x5dc <decode_led_char+0x6a>
      3a:	d0 c2       	rjmp	.+1440   	; 0x5dc <decode_led_char+0x6a>
      3c:	cf c2       	rjmp	.+1438   	; 0x5dc <decode_led_char+0x6a>
      3e:	b7 c2       	rjmp	.+1390   	; 0x5ae <decode_led_char+0x3c>
      40:	b8 c2       	rjmp	.+1392   	; 0x5b2 <decode_led_char+0x40>
      42:	b3 c2       	rjmp	.+1382   	; 0x5aa <decode_led_char+0x38>
      44:	cb c2       	rjmp	.+1430   	; 0x5dc <decode_led_char+0x6a>
      46:	9f c2       	rjmp	.+1342   	; 0x586 <decode_led_char+0x14>
      48:	c8 c2       	rjmp	.+1424   	; 0x5da <decode_led_char+0x68>
      4a:	9f c2       	rjmp	.+1342   	; 0x58a <decode_led_char+0x18>
      4c:	a0 c2       	rjmp	.+1344   	; 0x58e <decode_led_char+0x1c>
      4e:	a1 c2       	rjmp	.+1346   	; 0x592 <decode_led_char+0x20>
      50:	a2 c2       	rjmp	.+1348   	; 0x596 <decode_led_char+0x24>
      52:	a3 c2       	rjmp	.+1350   	; 0x59a <decode_led_char+0x28>
      54:	a4 c2       	rjmp	.+1352   	; 0x59e <decode_led_char+0x2c>
      56:	a5 c2       	rjmp	.+1354   	; 0x5a2 <decode_led_char+0x30>
      58:	a6 c2       	rjmp	.+1356   	; 0x5a6 <decode_led_char+0x34>
      5a:	c0 c2       	rjmp	.+1408   	; 0x5dc <decode_led_char+0x6a>
      5c:	bf c2       	rjmp	.+1406   	; 0x5dc <decode_led_char+0x6a>
      5e:	be c2       	rjmp	.+1404   	; 0x5dc <decode_led_char+0x6a>
      60:	bd c2       	rjmp	.+1402   	; 0x5dc <decode_led_char+0x6a>
      62:	bc c2       	rjmp	.+1400   	; 0x5dc <decode_led_char+0x6a>
      64:	bb c2       	rjmp	.+1398   	; 0x5dc <decode_led_char+0x6a>
      66:	ba c2       	rjmp	.+1396   	; 0x5dc <decode_led_char+0x6a>
      68:	b9 c2       	rjmp	.+1394   	; 0x5dc <decode_led_char+0x6a>
      6a:	b8 c2       	rjmp	.+1392   	; 0x5dc <decode_led_char+0x6a>
      6c:	aa c2       	rjmp	.+1364   	; 0x5c2 <decode_led_char+0x50>
      6e:	af c2       	rjmp	.+1374   	; 0x5ce <decode_led_char+0x5c>
      70:	b2 c2       	rjmp	.+1380   	; 0x5d6 <decode_led_char+0x64>
      72:	a9 c2       	rjmp	.+1362   	; 0x5c6 <decode_led_char+0x54>
      74:	b3 c2       	rjmp	.+1382   	; 0x5dc <decode_led_char+0x6a>
      76:	b2 c2       	rjmp	.+1380   	; 0x5dc <decode_led_char+0x6a>
      78:	b1 c2       	rjmp	.+1378   	; 0x5dc <decode_led_char+0x6a>
      7a:	b0 c2       	rjmp	.+1376   	; 0x5dc <decode_led_char+0x6a>
      7c:	af c2       	rjmp	.+1374   	; 0x5dc <decode_led_char+0x6a>
      7e:	ae c2       	rjmp	.+1372   	; 0x5dc <decode_led_char+0x6a>
      80:	ad c2       	rjmp	.+1370   	; 0x5dc <decode_led_char+0x6a>
      82:	a3 c2       	rjmp	.+1350   	; 0x5ca <decode_led_char+0x58>
      84:	80 c2       	rjmp	.+1280   	; 0x586 <decode_led_char+0x14>
      86:	a5 c2       	rjmp	.+1354   	; 0x5d2 <decode_led_char+0x60>
      88:	a9 c2       	rjmp	.+1362   	; 0x5dc <decode_led_char+0x6a>
      8a:	a8 c2       	rjmp	.+1360   	; 0x5dc <decode_led_char+0x6a>
      8c:	84 c2       	rjmp	.+1288   	; 0x596 <decode_led_char+0x24>
      8e:	a6 c2       	rjmp	.+1356   	; 0x5dc <decode_led_char+0x6a>
      90:	a5 c2       	rjmp	.+1354   	; 0x5dc <decode_led_char+0x6a>
      92:	a4 c2       	rjmp	.+1352   	; 0x5dc <decode_led_char+0x6a>
      94:	a3 c2       	rjmp	.+1350   	; 0x5dc <decode_led_char+0x6a>
      96:	a2 c2       	rjmp	.+1348   	; 0x5dc <decode_led_char+0x6a>
      98:	a1 c2       	rjmp	.+1346   	; 0x5dc <decode_led_char+0x6a>
      9a:	a0 c2       	rjmp	.+1344   	; 0x5dc <decode_led_char+0x6a>
      9c:	9f c2       	rjmp	.+1342   	; 0x5dc <decode_led_char+0x6a>
      9e:	9e c2       	rjmp	.+1340   	; 0x5dc <decode_led_char+0x6a>
      a0:	9d c2       	rjmp	.+1338   	; 0x5dc <decode_led_char+0x6a>
      a2:	9c c2       	rjmp	.+1336   	; 0x5dc <decode_led_char+0x6a>
      a4:	88 c2       	rjmp	.+1296   	; 0x5b6 <decode_led_char+0x44>
      a6:	9a c2       	rjmp	.+1332   	; 0x5dc <decode_led_char+0x6a>
      a8:	99 c2       	rjmp	.+1330   	; 0x5dc <decode_led_char+0x6a>
      aa:	98 c2       	rjmp	.+1328   	; 0x5dc <decode_led_char+0x6a>
      ac:	97 c2       	rjmp	.+1326   	; 0x5dc <decode_led_char+0x6a>
      ae:	96 c2       	rjmp	.+1324   	; 0x5dc <decode_led_char+0x6a>
      b0:	95 c2       	rjmp	.+1322   	; 0x5dc <decode_led_char+0x6a>
      b2:	94 c2       	rjmp	.+1320   	; 0x5dc <decode_led_char+0x6a>
      b4:	93 c2       	rjmp	.+1318   	; 0x5dc <decode_led_char+0x6a>
      b6:	92 c2       	rjmp	.+1316   	; 0x5dc <decode_led_char+0x6a>
      b8:	91 c2       	rjmp	.+1314   	; 0x5dc <decode_led_char+0x6a>
      ba:	90 c2       	rjmp	.+1312   	; 0x5dc <decode_led_char+0x6a>
      bc:	8f c2       	rjmp	.+1310   	; 0x5dc <decode_led_char+0x6a>
      be:	8e c2       	rjmp	.+1308   	; 0x5dc <decode_led_char+0x6a>
      c0:	8d c2       	rjmp	.+1306   	; 0x5dc <decode_led_char+0x6a>
      c2:	8c c2       	rjmp	.+1304   	; 0x5dc <decode_led_char+0x6a>
      c4:	8b c2       	rjmp	.+1302   	; 0x5dc <decode_led_char+0x6a>
      c6:	8a c2       	rjmp	.+1300   	; 0x5dc <decode_led_char+0x6a>
      c8:	89 c2       	rjmp	.+1298   	; 0x5dc <decode_led_char+0x6a>
      ca:	88 c2       	rjmp	.+1296   	; 0x5dc <decode_led_char+0x6a>
      cc:	87 c2       	rjmp	.+1294   	; 0x5dc <decode_led_char+0x6a>
      ce:	86 c2       	rjmp	.+1292   	; 0x5dc <decode_led_char+0x6a>
      d0:	85 c2       	rjmp	.+1290   	; 0x5dc <decode_led_char+0x6a>
      d2:	84 c2       	rjmp	.+1288   	; 0x5dc <decode_led_char+0x6a>
      d4:	83 c2       	rjmp	.+1286   	; 0x5dc <decode_led_char+0x6a>
      d6:	82 c2       	rjmp	.+1284   	; 0x5dc <decode_led_char+0x6a>
      d8:	81 c2       	rjmp	.+1282   	; 0x5dc <decode_led_char+0x6a>
      da:	80 c2       	rjmp	.+1280   	; 0x5dc <decode_led_char+0x6a>
      dc:	7f c2       	rjmp	.+1278   	; 0x5dc <decode_led_char+0x6a>
      de:	7e c2       	rjmp	.+1276   	; 0x5dc <decode_led_char+0x6a>
      e0:	7d c2       	rjmp	.+1274   	; 0x5dc <decode_led_char+0x6a>
      e2:	7c c2       	rjmp	.+1272   	; 0x5dc <decode_led_char+0x6a>
      e4:	7b c2       	rjmp	.+1270   	; 0x5dc <decode_led_char+0x6a>
      e6:	7a c2       	rjmp	.+1268   	; 0x5dc <decode_led_char+0x6a>
      e8:	79 c2       	rjmp	.+1266   	; 0x5dc <decode_led_char+0x6a>
      ea:	78 c2       	rjmp	.+1264   	; 0x5dc <decode_led_char+0x6a>
      ec:	77 c2       	rjmp	.+1262   	; 0x5dc <decode_led_char+0x6a>
      ee:	76 c2       	rjmp	.+1260   	; 0x5dc <decode_led_char+0x6a>
      f0:	75 c2       	rjmp	.+1258   	; 0x5dc <decode_led_char+0x6a>
      f2:	74 c2       	rjmp	.+1256   	; 0x5dc <decode_led_char+0x6a>
      f4:	73 c2       	rjmp	.+1254   	; 0x5dc <decode_led_char+0x6a>
      f6:	72 c2       	rjmp	.+1252   	; 0x5dc <decode_led_char+0x6a>
      f8:	71 c2       	rjmp	.+1250   	; 0x5dc <decode_led_char+0x6a>
      fa:	70 c2       	rjmp	.+1248   	; 0x5dc <decode_led_char+0x6a>
      fc:	6f c2       	rjmp	.+1246   	; 0x5dc <decode_led_char+0x6a>
      fe:	6e c2       	rjmp	.+1244   	; 0x5dc <decode_led_char+0x6a>
     100:	6d c2       	rjmp	.+1242   	; 0x5dc <decode_led_char+0x6a>
     102:	6c c2       	rjmp	.+1240   	; 0x5dc <decode_led_char+0x6a>
     104:	6b c2       	rjmp	.+1238   	; 0x5dc <decode_led_char+0x6a>
     106:	6a c2       	rjmp	.+1236   	; 0x5dc <decode_led_char+0x6a>
     108:	69 c2       	rjmp	.+1234   	; 0x5dc <decode_led_char+0x6a>
     10a:	68 c2       	rjmp	.+1232   	; 0x5dc <decode_led_char+0x6a>
     10c:	67 c2       	rjmp	.+1230   	; 0x5dc <decode_led_char+0x6a>
     10e:	66 c2       	rjmp	.+1228   	; 0x5dc <decode_led_char+0x6a>
     110:	65 c2       	rjmp	.+1226   	; 0x5dc <decode_led_char+0x6a>
     112:	64 c2       	rjmp	.+1224   	; 0x5dc <decode_led_char+0x6a>
     114:	63 c2       	rjmp	.+1222   	; 0x5dc <decode_led_char+0x6a>
     116:	62 c2       	rjmp	.+1220   	; 0x5dc <decode_led_char+0x6a>
     118:	61 c2       	rjmp	.+1218   	; 0x5dc <decode_led_char+0x6a>
     11a:	60 c2       	rjmp	.+1216   	; 0x5dc <decode_led_char+0x6a>
     11c:	5f c2       	rjmp	.+1214   	; 0x5dc <decode_led_char+0x6a>
     11e:	5e c2       	rjmp	.+1212   	; 0x5dc <decode_led_char+0x6a>
     120:	5d c2       	rjmp	.+1210   	; 0x5dc <decode_led_char+0x6a>
     122:	5c c2       	rjmp	.+1208   	; 0x5dc <decode_led_char+0x6a>
     124:	5b c2       	rjmp	.+1206   	; 0x5dc <decode_led_char+0x6a>
     126:	5a c2       	rjmp	.+1204   	; 0x5dc <decode_led_char+0x6a>
     128:	59 c2       	rjmp	.+1202   	; 0x5dc <decode_led_char+0x6a>
     12a:	58 c2       	rjmp	.+1200   	; 0x5dc <decode_led_char+0x6a>
     12c:	57 c2       	rjmp	.+1198   	; 0x5dc <decode_led_char+0x6a>
     12e:	56 c2       	rjmp	.+1196   	; 0x5dc <decode_led_char+0x6a>
     130:	55 c2       	rjmp	.+1194   	; 0x5dc <decode_led_char+0x6a>
     132:	54 c2       	rjmp	.+1192   	; 0x5dc <decode_led_char+0x6a>
     134:	53 c2       	rjmp	.+1190   	; 0x5dc <decode_led_char+0x6a>
     136:	52 c2       	rjmp	.+1188   	; 0x5dc <decode_led_char+0x6a>
     138:	51 c2       	rjmp	.+1186   	; 0x5dc <decode_led_char+0x6a>
     13a:	50 c2       	rjmp	.+1184   	; 0x5dc <decode_led_char+0x6a>
     13c:	4f c2       	rjmp	.+1182   	; 0x5dc <decode_led_char+0x6a>
     13e:	4e c2       	rjmp	.+1180   	; 0x5dc <decode_led_char+0x6a>
     140:	4d c2       	rjmp	.+1178   	; 0x5dc <decode_led_char+0x6a>
     142:	4c c2       	rjmp	.+1176   	; 0x5dc <decode_led_char+0x6a>
     144:	4b c2       	rjmp	.+1174   	; 0x5dc <decode_led_char+0x6a>
     146:	3b c2       	rjmp	.+1142   	; 0x5be <decode_led_char+0x4c>

00000148 <menuFunctionSet>:
     148:	01 a0 06 a3 06 d4 05 03 d0 05 44 06 71 04 02 40     ..........D.q..@
     158:	06 d7 05 c8 05 05 be 05 79 05 00 00 0b 77 04 79     ........y....w.y
     168:	05 85 04 04 be 05 26 05 00 00 0c 77 04 26 05 85     ......&....w.&..
     178:	04 06 c6 05 dc 04 00 00 09 77 04 dc 04 85 04 07     .........w......
     188:	c6 05 92 04 00 00 0a 77 04 92 04 85 04 08 8b 04     .......w........
     198:	8d 04 00 00 0d 8c 04 8d 04 00 00                    ...........

000001a3 <menuJumpSet>:
     1a3:	01 06 00 03 a8 01 00 01 02 40 01 00 02 05 28 02     .........@....(.
     1b3:	00 01 01 80 03 00 83 01 40 05 00 82 01 00 05 04     ........@.......
     1c3:	00 04 68 05 02 00 07 a8 05 00 01 0b 28 0b 00 83     ..h.........(...
     1d3:	05 28 04 00 82 01 00 04 04 00 06 68 04 02 00 05     .(.........h....
     1e3:	a8 04 00 01 0c 28 0c 00 83 04 28 06 00 82 01 00     .....(....(.....
     1f3:	06 04 00 07 68 06 02 00 04 a8 06 00 01 09 00 07     ....h...........
     203:	00 82 01 00 07 04 00 05 68 07 02 00 06 a8 07 00     ........h.......
     213:	01 0a 00 09 00 02 06 00 09 00 01 08 14 08 00 83     ................
     223:	01 00 0a 00 02 07 00 0a 00 01 0d 14 0d 00 83 01     ................
	...

00000234 <__ctors_end>:
     234:	11 24       	eor	r1, r1
     236:	1f be       	out	0x3f, r1	; 63
     238:	cf e5       	ldi	r28, 0x5F	; 95
     23a:	d4 e0       	ldi	r29, 0x04	; 4
     23c:	de bf       	out	0x3e, r29	; 62
     23e:	cd bf       	out	0x3d, r28	; 61

00000240 <__do_copy_data>:
     240:	10 e0       	ldi	r17, 0x00	; 0
     242:	a0 e6       	ldi	r26, 0x60	; 96
     244:	b0 e0       	ldi	r27, 0x00	; 0
     246:	ea e9       	ldi	r30, 0x9A	; 154
     248:	f9 e1       	ldi	r31, 0x19	; 25
     24a:	02 c0       	rjmp	.+4      	; 0x250 <__do_copy_data+0x10>
     24c:	05 90       	lpm	r0, Z+
     24e:	0d 92       	st	X+, r0
     250:	a8 3a       	cpi	r26, 0xA8	; 168
     252:	b1 07       	cpc	r27, r17
     254:	d9 f7       	brne	.-10     	; 0x24c <__do_copy_data+0xc>

00000256 <__do_clear_bss>:
     256:	20 e0       	ldi	r18, 0x00	; 0
     258:	a8 ea       	ldi	r26, 0xA8	; 168
     25a:	b0 e0       	ldi	r27, 0x00	; 0
     25c:	01 c0       	rjmp	.+2      	; 0x260 <.do_clear_bss_start>

0000025e <.do_clear_bss_loop>:
     25e:	1d 92       	st	X+, r1

00000260 <.do_clear_bss_start>:
     260:	ac 3f       	cpi	r26, 0xFC	; 252
     262:	b2 07       	cpc	r27, r18
     264:	e1 f7       	brne	.-8      	; 0x25e <.do_clear_bss_loop>
     266:	24 d7       	rcall	.+3656   	; 0x10b0 <main>
     268:	96 cb       	rjmp	.-2260   	; 0xfffff996 <__eeprom_end+0xff7ef990>

0000026a <__bad_interrupt>:
     26a:	ca ce       	rjmp	.-620    	; 0x0 <__vectors>

0000026c <conv_ADC_to_Celsius>:
{
	float k_norm = -0.4454;
	float offset_norm = 408.2037;
	
	
	return (uint16_t)((float)adc_value * k_norm + offset_norm);
     26c:	bc 01       	movw	r22, r24
     26e:	80 e0       	ldi	r24, 0x00	; 0
     270:	90 e0       	ldi	r25, 0x00	; 0
     272:	47 da       	rcall	.-2930   	; 0xfffff702 <__eeprom_end+0xff7ef6fc>
     274:	28 e7       	ldi	r18, 0x78	; 120
     276:	3b e0       	ldi	r19, 0x0B	; 11
     278:	44 ee       	ldi	r20, 0xE4	; 228
     27a:	5e eb       	ldi	r21, 0xBE	; 190
     27c:	d0 da       	rcall	.-2656   	; 0xfffff81e <__eeprom_end+0xff7ef818>
     27e:	23 e1       	ldi	r18, 0x13	; 19
     280:	3a e1       	ldi	r19, 0x1A	; 26
     282:	4c ec       	ldi	r20, 0xCC	; 204
     284:	53 e4       	ldi	r21, 0x43	; 67
     286:	ad d9       	rcall	.-3238   	; 0xfffff5e2 <__eeprom_end+0xff7ef5dc>
     288:	10 da       	rcall	.-3040   	; 0xfffff6aa <__eeprom_end+0xff7ef6a4>
}
     28a:	86 2f       	mov	r24, r22
     28c:	97 2f       	mov	r25, r23
     28e:	08 95       	ret

00000290 <update_filtered_adc>:
void update_filtered_adc()
{
	uint8_t i;
	uint16_t filtered_value = 0;
	// Disable interrupts from ADC - to save data integrity
	ACSR &= ~(1<<ACIE);	
     290:	43 98       	cbi	0x08, 3	; 8
     292:	e8 ea       	ldi	r30, 0xA8	; 168
     294:	f0 e0       	ldi	r31, 0x00	; 0
	
	return (uint16_t)((float)adc_value * k_norm + offset_norm);
}


void update_filtered_adc()
     296:	48 eb       	ldi	r20, 0xB8	; 184
     298:	50 e0       	ldi	r21, 0x00	; 0
{
	uint8_t i;
	uint16_t filtered_value = 0;
     29a:	80 e0       	ldi	r24, 0x00	; 0
     29c:	90 e0       	ldi	r25, 0x00	; 0
	// Disable interrupts from ADC - to save data integrity
	ACSR &= ~(1<<ACIE);	
	// Count up
	for(i=0;i<ADC_BUFFER_LENGTH;i++)
	{
		filtered_value += adc_sample_buffer[i];
     29e:	21 91       	ld	r18, Z+
     2a0:	31 91       	ld	r19, Z+
     2a2:	82 0f       	add	r24, r18
     2a4:	93 1f       	adc	r25, r19
	uint8_t i;
	uint16_t filtered_value = 0;
	// Disable interrupts from ADC - to save data integrity
	ACSR &= ~(1<<ACIE);	
	// Count up
	for(i=0;i<ADC_BUFFER_LENGTH;i++)
     2a6:	e4 17       	cp	r30, r20
     2a8:	f5 07       	cpc	r31, r21
     2aa:	c9 f7       	brne	.-14     	; 0x29e <update_filtered_adc+0xe>
	{
		filtered_value += adc_sample_buffer[i];
	}	
	// Enable interrupts from ADC
	ACSR |= (1<<ACIE);
     2ac:	43 9a       	sbi	0x08, 3	; 8
	filtered_value /= ADC_BUFFER_LENGTH;
     2ae:	96 95       	lsr	r25
     2b0:	87 95       	ror	r24
     2b2:	96 95       	lsr	r25
     2b4:	87 95       	ror	r24
     2b6:	96 95       	lsr	r25
     2b8:	87 95       	ror	r24
	adc_filtered_value = filtered_value;
     2ba:	90 93 d0 00 	sts	0x00D0, r25
     2be:	80 93 cf 00 	sts	0x00CF, r24
     2c2:	08 95       	ret

000002c4 <__vector_14>:




ISR(ADC_vect)
{
     2c4:	1f 92       	push	r1
     2c6:	0f 92       	push	r0
     2c8:	0f b6       	in	r0, 0x3f	; 63
     2ca:	0f 92       	push	r0
     2cc:	11 24       	eor	r1, r1
     2ce:	2f 93       	push	r18
     2d0:	8f 93       	push	r24
     2d2:	9f 93       	push	r25
     2d4:	ef 93       	push	r30
     2d6:	ff 93       	push	r31
	uint16_t new_sample = ADC;
     2d8:	84 b1       	in	r24, 0x04	; 4
     2da:	95 b1       	in	r25, 0x05	; 5
	
	if (adc_buffer_pos < 0)
     2dc:	20 91 60 00 	lds	r18, 0x0060
     2e0:	22 23       	and	r18, r18
     2e2:	fc f4       	brge	.+62     	; 0x322 <__vector_14+0x5e>
	{
		// First call to the function, fill whole buffer with current sample
		for (adc_buffer_pos = ADC_BUFFER_LENGTH-1; adc_buffer_pos > 0; adc_buffer_pos--)
		adc_sample_buffer[adc_buffer_pos] = new_sample;
     2e4:	90 93 b7 00 	sts	0x00B7, r25
     2e8:	80 93 b6 00 	sts	0x00B6, r24
     2ec:	90 93 b5 00 	sts	0x00B5, r25
     2f0:	80 93 b4 00 	sts	0x00B4, r24
     2f4:	90 93 b3 00 	sts	0x00B3, r25
     2f8:	80 93 b2 00 	sts	0x00B2, r24
     2fc:	90 93 b1 00 	sts	0x00B1, r25
     300:	80 93 b0 00 	sts	0x00B0, r24
     304:	90 93 af 00 	sts	0x00AF, r25
     308:	80 93 ae 00 	sts	0x00AE, r24
     30c:	90 93 ad 00 	sts	0x00AD, r25
     310:	80 93 ac 00 	sts	0x00AC, r24
     314:	90 93 ab 00 	sts	0x00AB, r25
     318:	80 93 aa 00 	sts	0x00AA, r24
     31c:	10 92 60 00 	sts	0x0060, r1
     320:	0e c0       	rjmp	.+28     	; 0x33e <__vector_14+0x7a>
	}
	else
	{
		// Normal call
		adc_sample_buffer[adc_buffer_pos] = new_sample;
     322:	e2 2f       	mov	r30, r18
     324:	ee 0f       	add	r30, r30
     326:	ff 0b       	sbc	r31, r31
     328:	e8 55       	subi	r30, 0x58	; 88
     32a:	ff 4f       	sbci	r31, 0xFF	; 255
     32c:	91 83       	std	Z+1, r25	; 0x01
     32e:	80 83       	st	Z, r24
		adc_buffer_pos = (adc_buffer_pos == ADC_BUFFER_LENGTH - 1) ? 0 : adc_buffer_pos + 1;
     330:	27 30       	cpi	r18, 0x07	; 7
     332:	11 f0       	breq	.+4      	; 0x338 <__vector_14+0x74>
     334:	2f 5f       	subi	r18, 0xFF	; 255
     336:	01 c0       	rjmp	.+2      	; 0x33a <__vector_14+0x76>
     338:	20 e0       	ldi	r18, 0x00	; 0
     33a:	20 93 60 00 	sts	0x0060, r18
	}		
}	
     33e:	ff 91       	pop	r31
     340:	ef 91       	pop	r30
     342:	9f 91       	pop	r25
     344:	8f 91       	pop	r24
     346:	2f 91       	pop	r18
     348:	0f 90       	pop	r0
     34a:	0f be       	out	0x3f, r0	; 63
     34c:	0f 90       	pop	r0
     34e:	1f 90       	pop	r1
     350:	18 95       	reti

00000352 <process_buttons>:
	uint8_t raw_delayed_inv;
	static uint8_t press_timer = 0;
	uint8_t long_press_mask;
	uint8_t long_press_event_mask;
	
	raw_delayed = raw_current;
     352:	30 91 be 00 	lds	r19, 0x00BE
	raw_delayed_inv = raw_current_inv;
     356:	20 91 61 00 	lds	r18, 0x0061
	raw_current = raw_button_state;
     35a:	90 91 ea 00 	lds	r25, 0x00EA
     35e:	90 93 be 00 	sts	0x00BE, r25
	raw_current_inv = ~raw_current;
     362:	49 2f       	mov	r20, r25
     364:	40 95       	com	r20
     366:	40 93 61 00 	sts	0x0061, r20
	
	// Must be before press_timer update
	long_press_mask = (press_timer >= LONG_PRESS_DELAY) ? 0xFF : 0x00;
     36a:	80 91 bf 00 	lds	r24, 0x00BF
     36e:	8c 30       	cpi	r24, 0x0C	; 12
     370:	10 f0       	brcs	.+4      	; 0x376 <process_buttons+0x24>
     372:	6f ef       	ldi	r22, 0xFF	; 255
     374:	01 c0       	rjmp	.+2      	; 0x378 <process_buttons+0x26>
     376:	60 e0       	ldi	r22, 0x00	; 0
	
	if (raw_delayed != raw_current)
     378:	39 17       	cp	r19, r25
     37a:	41 f0       	breq	.+16     	; 0x38c <process_buttons+0x3a>
	{
		press_timer = 0;
     37c:	10 92 bf 00 	sts	0x00BF, r1
	}
	
	// Must after press_timer update
	long_press_event_mask = (press_timer == LONG_PRESS_DELAY) ? 0xFF : 0x00;
			
	button_action_down = raw_current & raw_delayed_inv;
     380:	89 2f       	mov	r24, r25
     382:	82 23       	and	r24, r18
     384:	80 93 bb 00 	sts	0x00BB, r24
     388:	50 e0       	ldi	r21, 0x00	; 0
     38a:	14 c0       	rjmp	.+40     	; 0x3b4 <process_buttons+0x62>
	
	if (raw_delayed != raw_current)
	{
		press_timer = 0;
	}
	else if (press_timer <= LONG_PRESS_DELAY)
     38c:	8d 30       	cpi	r24, 0x0D	; 13
     38e:	18 f4       	brcc	.+6      	; 0x396 <process_buttons+0x44>
	{
		press_timer++;
     390:	8f 5f       	subi	r24, 0xFF	; 255
     392:	80 93 bf 00 	sts	0x00BF, r24
	}
	
	// Must after press_timer update
	long_press_event_mask = (press_timer == LONG_PRESS_DELAY) ? 0xFF : 0x00;
     396:	50 91 bf 00 	lds	r21, 0x00BF
     39a:	5c 30       	cpi	r21, 0x0C	; 12
     39c:	09 f4       	brne	.+2      	; 0x3a0 <process_buttons+0x4e>
     39e:	45 c0       	rjmp	.+138    	; 0x42a <process_buttons+0xd8>
			
	button_action_down = raw_current & raw_delayed_inv;
     3a0:	89 2f       	mov	r24, r25
     3a2:	82 23       	and	r24, r18
     3a4:	80 93 bb 00 	sts	0x00BB, r24
			
	if (press_timer > REPEAT_DELAY)
     3a8:	57 30       	cpi	r21, 0x07	; 7
     3aa:	18 f0       	brcs	.+6      	; 0x3b2 <process_buttons+0x60>
     3ac:	50 e0       	ldi	r21, 0x00	; 0
		raw_delayed_inv |= 0xFF;
     3ae:	2f ef       	ldi	r18, 0xFF	; 255
     3b0:	01 c0       	rjmp	.+2      	; 0x3b4 <process_buttons+0x62>
	// Must after press_timer update
	long_press_event_mask = (press_timer == LONG_PRESS_DELAY) ? 0xFF : 0x00;
			
	button_action_down = raw_current & raw_delayed_inv;
			
	if (press_timer > REPEAT_DELAY)
     3b2:	50 e0       	ldi	r21, 0x00	; 0
		raw_delayed_inv |= 0xFF;
	
	button_action_rep = raw_current & raw_delayed_inv;
     3b4:	29 23       	and	r18, r25
     3b6:	20 93 ba 00 	sts	0x00BA, r18
	
	button_action_up_short = raw_current_inv & raw_delayed & ~long_press_mask;
     3ba:	60 95       	com	r22
     3bc:	34 23       	and	r19, r20
     3be:	36 23       	and	r19, r22
     3c0:	30 93 b9 00 	sts	0x00B9, r19
	//button_action_up_long  = raw_current_inv & raw_delayed & long_press_mask;
	button_action_long  = raw_current & long_press_event_mask;
     3c4:	59 23       	and	r21, r25
     3c6:	50 93 b8 00 	sts	0x00B8, r21
	
	// Compose button state
	button_state = (button_action_down & (BD_MENU | BD_UP | BD_DOWN | BD_ROTFWD | BD_ROTREV | BD_HEATCTRL));
     3ca:	87 77       	andi	r24, 0x77	; 119
     3cc:	90 e0       	ldi	r25, 0x00	; 0
	if (button_action_up_short & BD_MENU)
     3ce:	30 fd       	sbrc	r19, 0
     3d0:	05 c0       	rjmp	.+10     	; 0x3dc <process_buttons+0x8a>
	button_action_up_short = raw_current_inv & raw_delayed & ~long_press_mask;
	//button_action_up_long  = raw_current_inv & raw_delayed & long_press_mask;
	button_action_long  = raw_current & long_press_event_mask;
	
	// Compose button state
	button_state = (button_action_down & (BD_MENU | BD_UP | BD_DOWN | BD_ROTFWD | BD_ROTREV | BD_HEATCTRL));
     3d2:	90 93 bd 00 	sts	0x00BD, r25
     3d6:	80 93 bc 00 	sts	0x00BC, r24
     3da:	05 c0       	rjmp	.+10     	; 0x3e6 <process_buttons+0x94>
	if (button_action_up_short & BD_MENU)
		button_state |= BS_MENU;
     3dc:	91 60       	ori	r25, 0x01	; 1
     3de:	90 93 bd 00 	sts	0x00BD, r25
     3e2:	80 93 bc 00 	sts	0x00BC, r24
	//if (button_action_up_long & BD_MENU)
	if (button_action_long & BD_MENU)
     3e6:	50 ff       	sbrs	r21, 0
     3e8:	09 c0       	rjmp	.+18     	; 0x3fc <process_buttons+0xaa>
		button_state |= BL_MENU;
     3ea:	80 91 bc 00 	lds	r24, 0x00BC
     3ee:	90 91 bd 00 	lds	r25, 0x00BD
     3f2:	92 60       	ori	r25, 0x02	; 2
     3f4:	90 93 bd 00 	sts	0x00BD, r25
     3f8:	80 93 bc 00 	sts	0x00BC, r24
	if (button_action_rep & BD_UP)
     3fc:	21 ff       	sbrs	r18, 1
     3fe:	09 c0       	rjmp	.+18     	; 0x412 <process_buttons+0xc0>
		button_state |= BR_UP;	
     400:	80 91 bc 00 	lds	r24, 0x00BC
     404:	90 91 bd 00 	lds	r25, 0x00BD
     408:	94 60       	ori	r25, 0x04	; 4
     40a:	90 93 bd 00 	sts	0x00BD, r25
     40e:	80 93 bc 00 	sts	0x00BC, r24
	if (button_action_rep & BD_DOWN)
     412:	22 ff       	sbrs	r18, 2
     414:	10 c0       	rjmp	.+32     	; 0x436 <process_buttons+0xe4>
		button_state |= BR_DOWN;
     416:	80 91 bc 00 	lds	r24, 0x00BC
     41a:	90 91 bd 00 	lds	r25, 0x00BD
     41e:	98 60       	ori	r25, 0x08	; 8
     420:	90 93 bd 00 	sts	0x00BD, r25
     424:	80 93 bc 00 	sts	0x00BC, r24
     428:	08 95       	ret
	}
	
	// Must after press_timer update
	long_press_event_mask = (press_timer == LONG_PRESS_DELAY) ? 0xFF : 0x00;
			
	button_action_down = raw_current & raw_delayed_inv;
     42a:	83 2f       	mov	r24, r19
     42c:	82 23       	and	r24, r18
     42e:	80 93 bb 00 	sts	0x00BB, r24
	{
		press_timer++;
	}
	
	// Must after press_timer update
	long_press_event_mask = (press_timer == LONG_PRESS_DELAY) ? 0xFF : 0x00;
     432:	5f ef       	ldi	r21, 0xFF	; 255
     434:	bc cf       	rjmp	.-136    	; 0x3ae <process_buttons+0x5c>
     436:	08 95       	ret

00000438 <processRollControl>:



// Function to control motor rotation
void processRollControl(void)
{	
     438:	cf 93       	push	r28
	uint8_t beepState = 0;
	
	// Control direction by buttons
	if (button_state & BD_ROTFWD)
     43a:	80 91 bc 00 	lds	r24, 0x00BC
     43e:	84 ff       	sbrs	r24, 4
     440:	04 c0       	rjmp	.+8      	; 0x44a <processRollControl+0x12>
	{
		setMotorDirection(ROLL_FWD);	
     442:	81 e0       	ldi	r24, 0x01	; 1
     444:	bb d6       	rcall	.+3446   	; 0x11bc <setMotorDirection>
		beepState |= 0x01;			// pressed FWD button
     446:	c1 e0       	ldi	r28, 0x01	; 1
     448:	07 c0       	rjmp	.+14     	; 0x458 <processRollControl+0x20>
	}		
	else if (button_state & BD_ROTREV)
     44a:	85 ff       	sbrs	r24, 5
     44c:	04 c0       	rjmp	.+8      	; 0x456 <processRollControl+0x1e>
	{
		setMotorDirection(ROLL_REV);
     44e:	82 e0       	ldi	r24, 0x02	; 2
     450:	b5 d6       	rcall	.+3434   	; 0x11bc <setMotorDirection>
		beepState |= 0x02;			// pressed REV button
     452:	c2 e0       	ldi	r28, 0x02	; 2
     454:	01 c0       	rjmp	.+2      	; 0x458 <processRollControl+0x20>


// Function to control motor rotation
void processRollControl(void)
{	
	uint8_t beepState = 0;
     456:	c0 e0       	ldi	r28, 0x00	; 0
		beepState |= 0x02;			// pressed REV button
	}		
	
	// TODO: add reset of points by long pressing of ROLL button
	
	if (button_action_down & BD_CYCLE)
     458:	80 91 bb 00 	lds	r24, 0x00BB
     45c:	88 23       	and	r24, r24
     45e:	6c f4       	brge	.+26     	; 0x47a <__stack+0x1b>
	{
		if (rollState & ROLL_CYCLE)
     460:	80 91 c7 00 	lds	r24, 0x00C7
     464:	82 ff       	sbrs	r24, 2
     466:	03 c0       	rjmp	.+6      	; 0x46e <__stack+0xf>
		{
			stopCycleRolling();
     468:	ef d6       	rcall	.+3550   	; 0x1248 <stopCycleRolling>
			beepState |= 0x20;		// stopped cycle
     46a:	c0 62       	ori	r28, 0x20	; 32
     46c:	06 c0       	rjmp	.+12     	; 0x47a <__stack+0x1b>
		}
		else if (startCycleRolling())
     46e:	c4 d6       	rcall	.+3464   	; 0x11f8 <startCycleRolling>
     470:	88 23       	and	r24, r24
     472:	11 f0       	breq	.+4      	; 0x478 <__stack+0x19>
		{
			beepState |= 0x10;		// started cycle
     474:	c0 61       	ori	r28, 0x10	; 16
     476:	01 c0       	rjmp	.+2      	; 0x47a <__stack+0x1b>
		}
		else
		{
			beepState |= 0x40;		// failed to start cycle
     478:	c0 64       	ori	r28, 0x40	; 64
		}			
	}		
	
	if (rollState & ROLL_DIR_CHANGED)
     47a:	80 91 c7 00 	lds	r24, 0x00C7
     47e:	85 ff       	sbrs	r24, 5
     480:	04 c0       	rjmp	.+8      	; 0x48a <__stack+0x2b>
	{
		rollState &= ~ROLL_DIR_CHANGED;
     482:	8f 7d       	andi	r24, 0xDF	; 223
     484:	80 93 c7 00 	sts	0x00C7, r24
		beepState |= 0x04;	
     488:	c4 60       	ori	r28, 0x04	; 4
	}
	
	if (rollState & CYCLE_ROLL_DONE)
     48a:	80 91 c7 00 	lds	r24, 0x00C7
     48e:	84 ff       	sbrs	r24, 4
     490:	04 c0       	rjmp	.+8      	; 0x49a <__stack+0x3b>
	{
		rollState &= ~CYCLE_ROLL_DONE;
     492:	8f 7e       	andi	r24, 0xEF	; 239
     494:	80 93 c7 00 	sts	0x00C7, r24
		beepState |= 0x80;	
     498:	c0 68       	ori	r28, 0x80	; 128
	}		
	
	if (beepState & 0x80)
     49a:	cc 23       	and	r28, r28
     49c:	3c f4       	brge	.+14     	; 0x4ac <__stack+0x4d>
	{
		SetBeeperFreq(1000);
     49e:	88 ee       	ldi	r24, 0xE8	; 232
     4a0:	93 e0       	ldi	r25, 0x03	; 3
     4a2:	22 d8       	rcall	.-4028   	; 0xfffff4e8 <__eeprom_end+0xff7ef4e2>
		StartBeep(200);
     4a4:	88 ec       	ldi	r24, 0xC8	; 200
     4a6:	90 e0       	ldi	r25, 0x00	; 0
     4a8:	40 d8       	rcall	.-3968   	; 0xfffff52a <__eeprom_end+0xff7ef524>
     4aa:	08 c0       	rjmp	.+16     	; 0x4bc <__stack+0x5d>
	}		
	else if (beepState & 0x40)
     4ac:	c6 ff       	sbrs	r28, 6
     4ae:	06 c0       	rjmp	.+12     	; 0x4bc <__stack+0x5d>
	{
		SetBeeperFreq(500);
     4b0:	84 ef       	ldi	r24, 0xF4	; 244
     4b2:	91 e0       	ldi	r25, 0x01	; 1
     4b4:	19 d8       	rcall	.-4046   	; 0xfffff4e8 <__eeprom_end+0xff7ef4e2>
		StartBeep(50);
     4b6:	82 e3       	ldi	r24, 0x32	; 50
     4b8:	90 e0       	ldi	r25, 0x00	; 0
     4ba:	37 d8       	rcall	.-3986   	; 0xfffff52a <__eeprom_end+0xff7ef524>
	}	
	if ( beepState & (0x01 | 0x02 | 0x10 | 0x20 | 0x04) )
     4bc:	c7 73       	andi	r28, 0x37	; 55
     4be:	31 f0       	breq	.+12     	; 0x4cc <__stack+0x6d>
	{
		SetBeeperFreq(1000);
     4c0:	88 ee       	ldi	r24, 0xE8	; 232
     4c2:	93 e0       	ldi	r25, 0x03	; 3
     4c4:	11 d8       	rcall	.-4062   	; 0xfffff4e8 <__eeprom_end+0xff7ef4e2>
		StartBeep(50);	
     4c6:	82 e3       	ldi	r24, 0x32	; 50
     4c8:	90 e0       	ldi	r25, 0x00	; 0
     4ca:	2f d8       	rcall	.-4002   	; 0xfffff52a <__eeprom_end+0xff7ef524>
		
		
	
		
	// Indicate direction by LEDs
	clearExtraLeds(LED_ROTFWD | LED_ROTREV);
     4cc:	80 e3       	ldi	r24, 0x30	; 48
     4ce:	c1 d1       	rcall	.+898    	; 0x852 <clearExtraLeds>
	if (rollState & ROLL_FWD)
     4d0:	80 91 c7 00 	lds	r24, 0x00C7
     4d4:	80 ff       	sbrs	r24, 0
     4d6:	03 c0       	rjmp	.+6      	; 0x4de <__stack+0x7f>
		setExtraLeds(LED_ROTFWD);
     4d8:	80 e1       	ldi	r24, 0x10	; 16
     4da:	b5 d1       	rcall	.+874    	; 0x846 <setExtraLeds>
     4dc:	04 c0       	rjmp	.+8      	; 0x4e6 <__stack+0x87>
	else if (rollState & ROLL_REV)
     4de:	81 ff       	sbrs	r24, 1
     4e0:	02 c0       	rjmp	.+4      	; 0x4e6 <__stack+0x87>
		setExtraLeds(LED_ROTREV);
     4e2:	80 e2       	ldi	r24, 0x20	; 32
     4e4:	b0 d1       	rcall	.+864    	; 0x846 <setExtraLeds>
		
}
     4e6:	cf 91       	pop	r28
     4e8:	08 95       	ret

000004ea <processHeaterControl>:
{
	// p_flags & HEATER_ENABLED
	static uint8_t heater_ctrl = 0;
	
	// Process heater ON/OFF control by button
	if (button_state & BD_HEATCTRL)
     4ea:	80 91 bc 00 	lds	r24, 0x00BC
     4ee:	86 ff       	sbrs	r24, 6
     4f0:	06 c0       	rjmp	.+12     	; 0x4fe <processHeaterControl+0x14>
	{
		heater_ctrl ^= 0x01;
     4f2:	90 91 c0 00 	lds	r25, 0x00C0
     4f6:	81 e0       	ldi	r24, 0x01	; 1
     4f8:	89 27       	eor	r24, r25
     4fa:	80 93 c0 00 	sts	0x00C0, r24
	}
	
	
	if (heater_ctrl)
     4fe:	80 91 c0 00 	lds	r24, 0x00C0
     502:	88 23       	and	r24, r24
     504:	29 f0       	breq	.+10     	; 0x510 <processHeaterControl+0x26>
		// Heater enabled

		//-----------------//
		// Process PID
		//// TODO!!!!
		setHeaterControl(10);
     506:	8a e0       	ldi	r24, 0x0A	; 10
     508:	49 d6       	rcall	.+3218   	; 0x119c <setHeaterControl>
		//-----------------//
		
		setExtraLeds(LED_HEATER);
     50a:	80 e4       	ldi	r24, 0x40	; 64
     50c:	9c d1       	rcall	.+824    	; 0x846 <setExtraLeds>
     50e:	08 95       	ret
	}
	else
	{
		// Heater disabled
		setHeaterControl(0);
     510:	80 e0       	ldi	r24, 0x00	; 0
     512:	44 d6       	rcall	.+3208   	; 0x119c <setHeaterControl>
		clearExtraLeds(LED_HEATER);
     514:	80 e4       	ldi	r24, 0x40	; 64
     516:	9d d1       	rcall	.+826    	; 0x852 <clearExtraLeds>
     518:	08 95       	ret

0000051a <restoreGlobalParams>:
	}
}


void restoreGlobalParams(void)
{
     51a:	cf 93       	push	r28
     51c:	df 93       	push	r29
     51e:	00 d0       	rcall	.+0      	; 0x520 <restoreGlobalParams+0x6>
     520:	00 d0       	rcall	.+0      	; 0x522 <restoreGlobalParams+0x8>
     522:	00 d0       	rcall	.+0      	; 0x524 <restoreGlobalParams+0xa>
     524:	cd b7       	in	r28, 0x3d	; 61
     526:	de b7       	in	r29, 0x3e	; 62
	 gParams_t gParams;
	 eeprom_read_block(&gParams,&nvParams,sizeof(nvParams));
     528:	46 e0       	ldi	r20, 0x06	; 6
     52a:	50 e0       	ldi	r21, 0x00	; 0
     52c:	60 e0       	ldi	r22, 0x00	; 0
     52e:	70 e0       	ldi	r23, 0x00	; 0
     530:	ce 01       	movw	r24, r28
     532:	01 96       	adiw	r24, 0x01	; 1
     534:	20 da       	rcall	.-3008   	; 0xfffff976 <__eeprom_end+0xff7ef970>
	 setup_temp_value = gParams.setup_temp_value;	// reference temperature
     536:	89 81       	ldd	r24, Y+1	; 0x01
     538:	80 93 d2 00 	sts	0x00D2, r24
     53c:	10 92 d3 00 	sts	0x00D3, r1
	 rollCycleSet = gParams.rollCycleSet;			// number of rolling cycles
     540:	8a 81       	ldd	r24, Y+2	; 0x02
     542:	80 93 d5 00 	sts	0x00D5, r24
	 sound_enable = gParams.sound_enable;			// Global sound enable
     546:	8b 81       	ldd	r24, Y+3	; 0x03
     548:	80 93 d4 00 	sts	0x00D4, r24
	 power_off_timeout = gParams.power_off_timeout;	// Auto power OFF timeout, minutes
     54c:	8c 81       	ldd	r24, Y+4	; 0x04
     54e:	80 93 d6 00 	sts	0x00D6, r24
	 cpoint1 = gParams.cpoint1;						// Calibration point 1
     552:	8d 81       	ldd	r24, Y+5	; 0x05
     554:	80 93 d1 00 	sts	0x00D1, r24
	 cpoint2 = gParams.cpoint2;						// Calibration point 2
     558:	8e 81       	ldd	r24, Y+6	; 0x06
     55a:	80 93 d7 00 	sts	0x00D7, r24
}
     55e:	26 96       	adiw	r28, 0x06	; 6
     560:	0f b6       	in	r0, 0x3f	; 63
     562:	f8 94       	cli
     564:	de bf       	out	0x3e, r29	; 62
     566:	0f be       	out	0x3f, r0	; 63
     568:	cd bf       	out	0x3d, r28	; 61
     56a:	df 91       	pop	r29
     56c:	cf 91       	pop	r28
     56e:	08 95       	ret

00000570 <exitPowerOff>:

void exitPowerOff(void)
{
     570:	08 95       	ret

00000572 <decode_led_char>:
// Decodes normal string literal to the 
//	7-segment representation
//---------------------------------------------//
static uint8_t decode_led_char(char c)
{
	switch(c)
     572:	48 2f       	mov	r20, r24
     574:	50 e0       	ldi	r21, 0x00	; 0
     576:	fa 01       	movw	r30, r20
     578:	b0 97       	sbiw	r30, 0x20	; 32
     57a:	e1 39       	cpi	r30, 0x91	; 145
     57c:	f1 05       	cpc	r31, r1
     57e:	70 f5       	brcc	.+92     	; 0x5dc <decode_led_char+0x6a>
     580:	ed 5e       	subi	r30, 0xED	; 237
     582:	ff 4f       	sbci	r31, 0xFF	; 255
     584:	09 94       	ijmp
	{
		case 'O':
		case '0': return (SEGA | SEGB | SEGC | SEGD | SEGE | SEGF);
     586:	8f e3       	ldi	r24, 0x3F	; 63
     588:	08 95       	ret
		case '1': return (SEGB | SEGC );
		case '2': return (SEGA | SEGB | SEGD | SEGE | SEGG);
     58a:	8b e5       	ldi	r24, 0x5B	; 91
     58c:	08 95       	ret
		case '3': return (SEGA | SEGB | SEGC | SEGD | SEGG);
     58e:	8f e4       	ldi	r24, 0x4F	; 79
     590:	08 95       	ret
		case '4': return (SEGB | SEGC | SEGF | SEGG);
     592:	86 e6       	ldi	r24, 0x66	; 102
     594:	08 95       	ret
		case 'S':
		case '5': return (SEGA | SEGC | SEGD | SEGF | SEGG);
     596:	8d e6       	ldi	r24, 0x6D	; 109
     598:	08 95       	ret
		case '6': return (SEGA | SEGC | SEGD | SEGE | SEGF | SEGG);
     59a:	8d e7       	ldi	r24, 0x7D	; 125
     59c:	08 95       	ret
		case '7': return (SEGA | SEGB | SEGC );
     59e:	87 e0       	ldi	r24, 0x07	; 7
     5a0:	08 95       	ret
		case '8': return (SEGA | SEGB | SEGC | SEGD | SEGE | SEGF | SEGG);
     5a2:	8f e7       	ldi	r24, 0x7F	; 127
     5a4:	08 95       	ret
		case '9': return (SEGA | SEGB | SEGC | SEGD | SEGF | SEGG);
     5a6:	8f e6       	ldi	r24, 0x6F	; 111
     5a8:	08 95       	ret
		case '.': return (SEGH);
     5aa:	80 e8       	ldi	r24, 0x80	; 128
     5ac:	08 95       	ret
		case ',': return (SEGH);
     5ae:	80 e8       	ldi	r24, 0x80	; 128
     5b0:	08 95       	ret
		case '-': return (SEGG);
     5b2:	80 e4       	ldi	r24, 0x40	; 64
     5b4:	08 95       	ret
		case '_': return (SEGD);
     5b6:	88 e0       	ldi	r24, 0x08	; 8
     5b8:	08 95       	ret
		case ' ': return 0;
     5ba:	80 e0       	ldi	r24, 0x00	; 0
     5bc:	08 95       	ret
		case 0xB0:	return (SEGA | SEGB | SEGF | SEGG);		// Degree sin
     5be:	83 e6       	ldi	r24, 0x63	; 99
     5c0:	08 95       	ret
		case 'C':	return (SEGA | SEGD | SEGE | SEGF);
     5c2:	89 e3       	ldi	r24, 0x39	; 57
     5c4:	08 95       	ret
		case 'F':	return (SEGA | SEGE | SEGF | SEGG);
     5c6:	81 e7       	ldi	r24, 0x71	; 113
     5c8:	08 95       	ret
		case 'N':	return (SEGC | SEGE | SEGG);
     5ca:	84 e5       	ldi	r24, 0x54	; 84
     5cc:	08 95       	ret
		case 'D': return (SEGB | SEGC | SEGD | SEGE | SEGG);
     5ce:	8e e5       	ldi	r24, 0x5E	; 94
     5d0:	08 95       	ret
		case 'P': return (SEGA | SEGB | SEGE | SEGF | SEGG);
     5d2:	83 e7       	ldi	r24, 0x73	; 115
     5d4:	08 95       	ret
		case 'E': return (SEGA | SEGD | SEGE | SEGF | SEGG);
     5d6:	89 e7       	ldi	r24, 0x79	; 121
     5d8:	08 95       	ret
{
	switch(c)
	{
		case 'O':
		case '0': return (SEGA | SEGB | SEGC | SEGD | SEGE | SEGF);
		case '1': return (SEGB | SEGC );
     5da:	86 e0       	ldi	r24, 0x06	; 6
		case 'D': return (SEGB | SEGC | SEGD | SEGE | SEGG);
		case 'P': return (SEGA | SEGB | SEGE | SEGF | SEGG);
		case 'E': return (SEGA | SEGD | SEGE | SEGF | SEGG);
		default:  return c;	
	}
}
     5dc:	08 95       	ret

000005de <wrap_led_buffer_index>:
//---------------------------------------------//
// Ensures that index is inside the buffer
// -128 <= index <= 127
//---------------------------------------------//
static uint8_t wrap_led_buffer_index(int8_t buf_index)
{
     5de:	98 2f       	mov	r25, r24
	uint8_t new_index_u;
	new_index_u = (uint8_t) ((buf_index < 0) ? -buf_index : buf_index);
     5e0:	87 fd       	sbrc	r24, 7
     5e2:	81 95       	neg	r24
	if (new_index_u >= LED_BUFFER_LENGTH)
     5e4:	8e 30       	cpi	r24, 0x0E	; 14
     5e6:	78 f0       	brcs	.+30     	; 0x606 <wrap_led_buffer_index+0x28>
		new_index_u = new_index_u % LED_BUFFER_LENGTH;
     5e8:	38 2f       	mov	r19, r24
     5ea:	36 95       	lsr	r19
     5ec:	23 e9       	ldi	r18, 0x93	; 147
     5ee:	32 9f       	mul	r19, r18
     5f0:	21 2d       	mov	r18, r1
     5f2:	11 24       	eor	r1, r1
     5f4:	26 95       	lsr	r18
     5f6:	26 95       	lsr	r18
     5f8:	22 0f       	add	r18, r18
     5fa:	32 2f       	mov	r19, r18
     5fc:	33 0f       	add	r19, r19
     5fe:	33 0f       	add	r19, r19
     600:	33 0f       	add	r19, r19
     602:	32 1b       	sub	r19, r18
     604:	83 1b       	sub	r24, r19
	new_index_u = ((buf_index >= 0) || (new_index_u == 0)) ? new_index_u :  LED_BUFFER_LENGTH - new_index_u ;
     606:	99 23       	and	r25, r25
     608:	2c f4       	brge	.+10     	; 0x614 <wrap_led_buffer_index+0x36>
     60a:	88 23       	and	r24, r24
     60c:	19 f0       	breq	.+6      	; 0x614 <wrap_led_buffer_index+0x36>
     60e:	9e e0       	ldi	r25, 0x0E	; 14
     610:	98 1b       	sub	r25, r24
     612:	89 2f       	mov	r24, r25
	return new_index_u;
}
     614:	08 95       	ret

00000616 <processLedIndicator>:
// Call this function N times per sec to get N/NUM_DIGITS_TOTAL display update rate, where
// NUM_DIGITS_TOTAL is number_of_digits_of_LED_display if no extra LEDs are used or
// (number_of_digits_of_LED_display + 1) otherwise.
//---------------------------------------------//
void processLedIndicator()
{
     616:	cf 93       	push	r28
	disable_led_segments();
	#endif
	
	
	// Perform regular shift
	led_clock_pulse(!LED_DIGIT_ACT_LVL);
     618:	81 e0       	ldi	r24, 0x01	; 1
     61a:	22 d1       	rcall	.+580    	; 0x860 <led_clock_pulse>
	
	switch (wActivePos)
     61c:	80 91 c2 00 	lds	r24, 0x00C2
     620:	88 23       	and	r24, r24
     622:	19 f0       	breq	.+6      	; 0x62a <processLedIndicator+0x14>
     624:	86 30       	cpi	r24, 0x06	; 6
     626:	f1 f5       	brne	.+124    	; 0x6a4 <processLedIndicator+0x8e>
     628:	12 c0       	rjmp	.+36     	; 0x64e <processLedIndicator+0x38>
	{
	case 0:
		// Get buttons
		#ifndef CLEAN_OPERATION
		disable_led_segments();
     62a:	46 d1       	rcall	.+652    	; 0x8b8 <disable_led_segments>
		#endif
		enable_led_segments_pullups();
     62c:	37 d1       	rcall	.+622    	; 0x89c <enable_led_segments_pullups>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     62e:	85 e3       	ldi	r24, 0x35	; 53
     630:	8a 95       	dec	r24
     632:	f1 f7       	brne	.-4      	; 0x630 <processLedIndicator+0x1a>
     634:	00 00       	nop
		_delay_us(PULLUP_DELAY_US);
		capture_button_state();
     636:	47 d1       	rcall	.+654    	; 0x8c6 <capture_button_state>
		#ifndef CLEAN_OPERATION
		enable_led_segments();
     638:	38 d1       	rcall	.+624    	; 0x8aa <enable_led_segments>
		#endif
		// Start new cycle with active digit level
		led_clock_pulse(LED_DIGIT_ACT_LVL);
     63a:	80 e0       	ldi	r24, 0x00	; 0
     63c:	11 d1       	rcall	.+546    	; 0x860 <led_clock_pulse>
		// Always start new cycle from specified buffer start position
		bufActivePos = wStartPos;
     63e:	80 91 d9 00 	lds	r24, 0x00D9
     642:	80 93 c1 00 	sts	0x00C1, r24
		next_wActivePos = wActivePos + 1;
     646:	c0 91 c2 00 	lds	r28, 0x00C2
     64a:	cf 5f       	subi	r28, 0xFF	; 255
		break;
     64c:	2f c0       	rjmp	.+94     	; 0x6ac <processLedIndicator+0x96>
//---------------------------------------------//
// Performs window shifting
//---------------------------------------------//
static void processWindowShifter(void)
{
	if (shifterState == LED_SHIFT_DONE)
     64e:	80 91 da 00 	lds	r24, 0x00DA
     652:	88 23       	and	r24, r24
     654:	81 f1       	breq	.+96     	; 0x6b6 <processLedIndicator+0xa0>
		return;
	
	// Process shift timer
	processSoftTimer8b(&shiftTimer);	
     656:	83 ec       	ldi	r24, 0xC3	; 195
     658:	90 e0       	ldi	r25, 0x00	; 0
     65a:	18 d7       	rcall	.+3632   	; 0x148c <processSoftTimer8b>
	
	if (shiftTimer.FTop)
     65c:	80 91 c3 00 	lds	r24, 0x00C3
     660:	85 ff       	sbrs	r24, 5
     662:	23 c0       	rjmp	.+70     	; 0x6aa <processLedIndicator+0x94>
	{
		// Check if finished
		if (wStartPos == bufStartPos)	
     664:	80 91 d9 00 	lds	r24, 0x00D9
     668:	90 91 db 00 	lds	r25, 0x00DB
     66c:	89 13       	cpse	r24, r25
     66e:	04 c0       	rjmp	.+8      	; 0x678 <processLedIndicator+0x62>
		{
			// Update state
			shifterState = LED_SHIFT_DONE;
     670:	10 92 da 00 	sts	0x00DA, r1
		// Always start new cycle from specified buffer start position
		bufActivePos = wStartPos;
		next_wActivePos = wActivePos + 1;
		break;
	case NUM_DIGITS_TOTAL-1:
		next_wActivePos = 0;
     674:	c0 e0       	ldi	r28, 0x00	; 0
     676:	1a c0       	rjmp	.+52     	; 0x6ac <processLedIndicator+0x96>
		if (wStartPos == bufStartPos)	
		{
			// Update state
			shifterState = LED_SHIFT_DONE;
		}
		else if (shifterState == LED_SHIFT_RIGHT)
     678:	90 91 da 00 	lds	r25, 0x00DA
     67c:	92 30       	cpi	r25, 0x02	; 2
     67e:	49 f4       	brne	.+18     	; 0x692 <processLedIndicator+0x7c>
// Increments index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t inc_buffer_position(uint8_t position)
{
	return (position >= LED_BUFFER_LENGTH - 1) ? 0 : position + 1;
     680:	8d 30       	cpi	r24, 0x0D	; 13
     682:	10 f4       	brcc	.+4      	; 0x688 <processLedIndicator+0x72>
     684:	8f 5f       	subi	r24, 0xFF	; 255
     686:	01 c0       	rjmp	.+2      	; 0x68a <processLedIndicator+0x74>
     688:	80 e0       	ldi	r24, 0x00	; 0
			// Update state
			shifterState = LED_SHIFT_DONE;
		}
		else if (shifterState == LED_SHIFT_RIGHT)
		{
			wStartPos = inc_buffer_position(wStartPos);	
     68a:	80 93 d9 00 	sts	0x00D9, r24
		// Always start new cycle from specified buffer start position
		bufActivePos = wStartPos;
		next_wActivePos = wActivePos + 1;
		break;
	case NUM_DIGITS_TOTAL-1:
		next_wActivePos = 0;
     68e:	c0 e0       	ldi	r28, 0x00	; 0
     690:	0d c0       	rjmp	.+26     	; 0x6ac <processLedIndicator+0x96>
// Decrements index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t dec_buffer_position(uint8_t position)
{
	return (position == 0) ? LED_BUFFER_LENGTH - 1 : position - 1;
     692:	88 23       	and	r24, r24
     694:	11 f0       	breq	.+4      	; 0x69a <processLedIndicator+0x84>
     696:	81 50       	subi	r24, 0x01	; 1
     698:	01 c0       	rjmp	.+2      	; 0x69c <processLedIndicator+0x86>
     69a:	8d e0       	ldi	r24, 0x0D	; 13
		{
			wStartPos = inc_buffer_position(wStartPos);	
		}
		else
		{
			wStartPos = dec_buffer_position(wStartPos);		
     69c:	80 93 d9 00 	sts	0x00D9, r24
		// Always start new cycle from specified buffer start position
		bufActivePos = wStartPos;
		next_wActivePos = wActivePos + 1;
		break;
	case NUM_DIGITS_TOTAL-1:
		next_wActivePos = 0;
     6a0:	c0 e0       	ldi	r28, 0x00	; 0
     6a2:	04 c0       	rjmp	.+8      	; 0x6ac <processLedIndicator+0x96>
		// Shift LED window
		processWindowShifter();	
		break;
	default:
		next_wActivePos = wActivePos + 1;
     6a4:	c8 2f       	mov	r28, r24
     6a6:	cf 5f       	subi	r28, 0xFF	; 255
		break;
     6a8:	01 c0       	rjmp	.+2      	; 0x6ac <processLedIndicator+0x96>
		// Always start new cycle from specified buffer start position
		bufActivePos = wStartPos;
		next_wActivePos = wActivePos + 1;
		break;
	case NUM_DIGITS_TOTAL-1:
		next_wActivePos = 0;
     6aa:	c0 e0       	ldi	r28, 0x00	; 0
		next_wActivePos = wActivePos + 1;
		break;
	}		
	
	#ifdef 	USE_EXTRA_LED_DIGIT
	if (wActivePos == EXTRA_DIGIT_NUM)
     6ac:	80 91 c2 00 	lds	r24, 0x00C2
     6b0:	86 30       	cpi	r24, 0x06	; 6
     6b2:	31 f4       	brne	.+12     	; 0x6c0 <processLedIndicator+0xaa>
     6b4:	01 c0       	rjmp	.+2      	; 0x6b8 <processLedIndicator+0xa2>
		// Always start new cycle from specified buffer start position
		bufActivePos = wStartPos;
		next_wActivePos = wActivePos + 1;
		break;
	case NUM_DIGITS_TOTAL-1:
		next_wActivePos = 0;
     6b6:	c0 e0       	ldi	r28, 0x00	; 0
	
	#ifdef 	USE_EXTRA_LED_DIGIT
	if (wActivePos == EXTRA_DIGIT_NUM)
	{
		// Output separate LEDs state
		set_led_segments(extra_led_state);
     6b8:	80 91 d8 00 	lds	r24, 0x00D8
     6bc:	e1 d0       	rcall	.+450    	; 0x880 <set_led_segments>
     6be:	10 c0       	rjmp	.+32     	; 0x6e0 <processLedIndicator+0xca>
	}
	else
	#endif
	{
		// Output new segment data
		set_led_segments(led_data_buffer[bufActivePos]);
     6c0:	e0 91 c1 00 	lds	r30, 0x00C1
     6c4:	f0 e0       	ldi	r31, 0x00	; 0
     6c6:	e4 52       	subi	r30, 0x24	; 36
     6c8:	ff 4f       	sbci	r31, 0xFF	; 255
     6ca:	80 81       	ld	r24, Z
     6cc:	d9 d0       	rcall	.+434    	; 0x880 <set_led_segments>
		// Wrap around buffer length
		bufActivePos = inc_buffer_position(bufActivePos );
     6ce:	90 91 c1 00 	lds	r25, 0x00C1
// Increments index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t inc_buffer_position(uint8_t position)
{
	return (position >= LED_BUFFER_LENGTH - 1) ? 0 : position + 1;
     6d2:	9d 30       	cpi	r25, 0x0D	; 13
     6d4:	10 f4       	brcc	.+4      	; 0x6da <processLedIndicator+0xc4>
     6d6:	9f 5f       	subi	r25, 0xFF	; 255
     6d8:	01 c0       	rjmp	.+2      	; 0x6dc <processLedIndicator+0xc6>
     6da:	90 e0       	ldi	r25, 0x00	; 0
	#endif
	{
		// Output new segment data
		set_led_segments(led_data_buffer[bufActivePos]);
		// Wrap around buffer length
		bufActivePos = inc_buffer_position(bufActivePos );
     6dc:	90 93 c1 00 	sts	0x00C1, r25
	}
		
	wActivePos = next_wActivePos;
     6e0:	c0 93 c2 00 	sts	0x00C2, r28
	
	#ifdef CLEAN_OPERATION
	enable_led_segments();
	#endif

}
     6e4:	cf 91       	pop	r28
     6e6:	08 95       	ret

000006e8 <fillLedBuffer>:
//---------------------------------------------//
// Fills buffer from (bufStartPos + offset) 
//	position with single char
//---------------------------------------------//
void fillLedBuffer(int8_t offset, uint8_t length, char c)
{
     6e8:	1f 93       	push	r17
     6ea:	cf 93       	push	r28
     6ec:	df 93       	push	r29
     6ee:	18 2f       	mov	r17, r24
     6f0:	c6 2f       	mov	r28, r22
     6f2:	84 2f       	mov	r24, r20
	uint8_t val = decode_led_char(c);
     6f4:	3e df       	rcall	.-388    	; 0x572 <decode_led_char>
     6f6:	d8 2f       	mov	r29, r24
	// Ensure index is inside the buffer
	uint8_t position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
     6f8:	80 91 db 00 	lds	r24, 0x00DB
     6fc:	81 0f       	add	r24, r17
     6fe:	6f df       	rcall	.-290    	; 0x5de <wrap_led_buffer_index>
// Increments index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t inc_buffer_position(uint8_t position)
{
	return (position >= LED_BUFFER_LENGTH - 1) ? 0 : position + 1;
     700:	90 e0       	ldi	r25, 0x00	; 0
void fillLedBuffer(int8_t offset, uint8_t length, char c)
{
	uint8_t val = decode_led_char(c);
	// Ensure index is inside the buffer
	uint8_t position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
	while(length--)
     702:	0a c0       	rjmp	.+20     	; 0x718 <fillLedBuffer+0x30>
	{
		led_data_buffer[position] = val;
     704:	e8 2f       	mov	r30, r24
     706:	f0 e0       	ldi	r31, 0x00	; 0
     708:	e4 52       	subi	r30, 0x24	; 36
     70a:	ff 4f       	sbci	r31, 0xFF	; 255
     70c:	d0 83       	st	Z, r29
// Increments index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t inc_buffer_position(uint8_t position)
{
	return (position >= LED_BUFFER_LENGTH - 1) ? 0 : position + 1;
     70e:	8d 30       	cpi	r24, 0x0D	; 13
     710:	10 f4       	brcc	.+4      	; 0x716 <fillLedBuffer+0x2e>
     712:	8f 5f       	subi	r24, 0xFF	; 255
     714:	01 c0       	rjmp	.+2      	; 0x718 <fillLedBuffer+0x30>
     716:	89 2f       	mov	r24, r25
void fillLedBuffer(int8_t offset, uint8_t length, char c)
{
	uint8_t val = decode_led_char(c);
	// Ensure index is inside the buffer
	uint8_t position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
	while(length--)
     718:	c1 50       	subi	r28, 0x01	; 1
     71a:	a0 f7       	brcc	.-24     	; 0x704 <fillLedBuffer+0x1c>
	{
		led_data_buffer[position] = val;
		position = inc_buffer_position(position);
	}
}
     71c:	df 91       	pop	r29
     71e:	cf 91       	pop	r28
     720:	1f 91       	pop	r17
     722:	08 95       	ret

00000724 <startShiftingWindowLeft>:
//	LED window left 
//---------------------------------------------//
void startShiftingWindowLeft(void)
{
	// Clear spaces between menu states
	fillLedBuffer(-2,2,' ');
     724:	40 e2       	ldi	r20, 0x20	; 32
     726:	62 e0       	ldi	r22, 0x02	; 2
     728:	8e ef       	ldi	r24, 0xFE	; 254
     72a:	de df       	rcall	.-68     	; 0x6e8 <fillLedBuffer>
	// Set new buffer position for writing
	bufStartPos = wrap_led_buffer_index( (int8_t)bufStartPos - (NUM_DIGITS + 2) );
     72c:	80 91 db 00 	lds	r24, 0x00DB
     730:	88 50       	subi	r24, 0x08	; 8
     732:	55 df       	rcall	.-342    	; 0x5de <wrap_led_buffer_index>
     734:	80 93 db 00 	sts	0x00DB, r24
	// Set shifter state
	shifterState = LED_SHIFT_LEFT;
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	80 93 da 00 	sts	0x00DA, r24
     73e:	08 95       	ret

00000740 <startShiftingWindowRight>:
//	LED window right 
//---------------------------------------------//
void startShiftingWindowRight(void)
{
	// Clear spaces between menu states
	fillLedBuffer(NUM_DIGITS,2,' ');
     740:	40 e2       	ldi	r20, 0x20	; 32
     742:	62 e0       	ldi	r22, 0x02	; 2
     744:	86 e0       	ldi	r24, 0x06	; 6
     746:	d0 df       	rcall	.-96     	; 0x6e8 <fillLedBuffer>
	// Set new buffer position for writing
	bufStartPos = wrap_led_buffer_index( (int8_t)bufStartPos + NUM_DIGITS + 2 );
     748:	80 91 db 00 	lds	r24, 0x00DB
     74c:	88 5f       	subi	r24, 0xF8	; 248
     74e:	47 df       	rcall	.-370    	; 0x5de <wrap_led_buffer_index>
     750:	80 93 db 00 	sts	0x00DB, r24
	// Set shifter state
	shifterState = LED_SHIFT_RIGHT;
     754:	82 e0       	ldi	r24, 0x02	; 2
     756:	80 93 da 00 	sts	0x00DA, r24
     75a:	08 95       	ret

0000075c <initLedIndicator>:
//---------------------------------------------//
//	Initialization
//	Call this function at start of your program
//---------------------------------------------//
void initLedIndicator()
{
     75c:	cf 93       	push	r28
	uint8_t i;
	// First disable outputs
	disable_led_segments();
     75e:	ac d0       	rcall	.+344    	; 0x8b8 <disable_led_segments>
     760:	c7 e0       	ldi	r28, 0x07	; 7
	// Fill shift register with non-active levels
	for (i=0;i<NUM_DIGITS_TOTAL;i++)
	{
		led_clock_pulse(!LED_DIGIT_ACT_LVL);
     762:	81 e0       	ldi	r24, 0x01	; 1
     764:	7d d0       	rcall	.+250    	; 0x860 <led_clock_pulse>
     766:	c1 50       	subi	r28, 0x01	; 1
{
	uint8_t i;
	// First disable outputs
	disable_led_segments();
	// Fill shift register with non-active levels
	for (i=0;i<NUM_DIGITS_TOTAL;i++)
     768:	e1 f7       	brne	.-8      	; 0x762 <initLedIndicator+0x6>
	{
		led_clock_pulse(!LED_DIGIT_ACT_LVL);
	}
	// Now enable outputs
	enable_led_segments();
     76a:	9f d0       	rcall	.+318    	; 0x8aa <enable_led_segments>
	
	// Reset pointers
	wStartPos = 0;
     76c:	10 92 d9 00 	sts	0x00D9, r1
	bufStartPos = 0;
     770:	10 92 db 00 	sts	0x00DB, r1
	bufActivePos = 0;
     774:	10 92 c1 00 	sts	0x00C1, r1
	wActivePos = 0;
     778:	10 92 c2 00 	sts	0x00C2, r1
	#ifdef 	USE_EXTRA_LED_DIGIT
	extra_led_state = 0;
     77c:	10 92 d8 00 	sts	0x00D8, r1
	#endif
	
	// Clear the buffer 
	fillLedBuffer(0,LED_BUFFER_LENGTH,' ');
     780:	40 e2       	ldi	r20, 0x20	; 32
     782:	6e e0       	ldi	r22, 0x0E	; 14
     784:	80 e0       	ldi	r24, 0x00	; 0
     786:	b0 df       	rcall	.-160    	; 0x6e8 <fillLedBuffer>
	
	// Initialize shift timer - always enabled, but 
	//	processed only when shifting is active
	shifterState = LED_SHIFT_DONE;
     788:	10 92 da 00 	sts	0x00DA, r1
	shiftTimer.Enabled = 1;
     78c:	e3 ec       	ldi	r30, 0xC3	; 195
     78e:	f0 e0       	ldi	r31, 0x00	; 0
     790:	80 81       	ld	r24, Z
	shiftTimer.RunOnce = 0;
     792:	81 60       	ori	r24, 0x01	; 1
     794:	8d 7f       	andi	r24, 0xFD	; 253
     796:	80 83       	st	Z, r24
	shiftTimer.Top = LED_SHIFT_INTERVAL-1;
     798:	89 e0       	ldi	r24, 0x09	; 9
     79a:	80 93 c5 00 	sts	0x00C5, r24
}
     79e:	cf 91       	pop	r28
     7a0:	08 95       	ret

000007a2 <printLedBuffer>:
//		str - null-terminated char string
// Comma and dot (".", ",") get special processing - first occurrence is added to
// a preceding char, next are displayed as a single digit
//---------------------------------------------//
void printLedBuffer(int8_t offset, char* str)
{
     7a2:	df 92       	push	r13
     7a4:	ef 92       	push	r14
     7a6:	ff 92       	push	r15
     7a8:	0f 93       	push	r16
     7aa:	1f 93       	push	r17
     7ac:	cf 93       	push	r28
     7ae:	df 93       	push	r29
     7b0:	eb 01       	movw	r28, r22
	char c;
	uint8_t decoded_sym;
	uint8_t state = 0x02;
	uint8_t comma_pos;
	// Ensure index is inside the buffer
	uint8_t buffer_position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
     7b2:	90 91 db 00 	lds	r25, 0x00DB
     7b6:	89 0f       	add	r24, r25
     7b8:	12 df       	rcall	.-476    	; 0x5de <wrap_led_buffer_index>
     7ba:	18 2f       	mov	r17, r24
	comma_pos = buffer_position;
     7bc:	d8 2e       	mov	r13, r24
//---------------------------------------------//
void printLedBuffer(int8_t offset, char* str)
{
	char c;
	uint8_t decoded_sym;
	uint8_t state = 0x02;
     7be:	02 e0       	ldi	r16, 0x02	; 2
		comma_pos = buffer_position;
		if (state != 0x01)
		{
			buffer_position = inc_buffer_position(buffer_position);
		}
		state = (state & 0x01) ? 0x03 : 0x00;		
     7c0:	f1 2c       	mov	r15, r1
     7c2:	0f 2e       	mov	r0, r31
     7c4:	f3 e0       	ldi	r31, 0x03	; 3
     7c6:	ef 2e       	mov	r14, r31
     7c8:	f0 2d       	mov	r31, r0
	uint8_t comma_pos;
	// Ensure index is inside the buffer
	uint8_t buffer_position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
	comma_pos = buffer_position;
	// Output chars
	while((c = *str++))
     7ca:	26 c0       	rjmp	.+76     	; 0x818 <printLedBuffer+0x76>
	{
		decoded_sym = decode_led_char(c);
     7cc:	d2 de       	rcall	.-604    	; 0x572 <decode_led_char>
		state = (decoded_sym == SEGH) ? (state | 0x01) : (state & ~0x01);
     7ce:	80 38       	cpi	r24, 0x80	; 128
     7d0:	19 f4       	brne	.+6      	; 0x7d8 <printLedBuffer+0x36>
     7d2:	90 2f       	mov	r25, r16
     7d4:	91 60       	ori	r25, 0x01	; 1
     7d6:	02 c0       	rjmp	.+4      	; 0x7dc <printLedBuffer+0x3a>
     7d8:	90 2f       	mov	r25, r16
     7da:	9e 7f       	andi	r25, 0xFE	; 254
		if (state == 0x01)			
     7dc:	91 30       	cpi	r25, 0x01	; 1
     7de:	51 f4       	brne	.+20     	; 0x7f4 <printLedBuffer+0x52>
		{
			led_data_buffer[comma_pos] |= decoded_sym;
     7e0:	ed 2d       	mov	r30, r13
     7e2:	f0 e0       	ldi	r31, 0x00	; 0
     7e4:	e4 52       	subi	r30, 0x24	; 36
     7e6:	ff 4f       	sbci	r31, 0xFF	; 255
     7e8:	90 81       	ld	r25, Z
     7ea:	89 2b       	or	r24, r25
     7ec:	80 83       	st	Z, r24
     7ee:	81 2f       	mov	r24, r17
		comma_pos = buffer_position;
		if (state != 0x01)
		{
			buffer_position = inc_buffer_position(buffer_position);
		}
		state = (state & 0x01) ? 0x03 : 0x00;		
     7f0:	0e 2d       	mov	r16, r14
     7f2:	10 c0       	rjmp	.+32     	; 0x814 <printLedBuffer+0x72>
		{
			led_data_buffer[comma_pos] |= decoded_sym;
		}
		else
		{
			led_data_buffer[buffer_position] = decoded_sym;	
     7f4:	e1 2f       	mov	r30, r17
     7f6:	f0 e0       	ldi	r31, 0x00	; 0
     7f8:	e4 52       	subi	r30, 0x24	; 36
     7fa:	ff 4f       	sbci	r31, 0xFF	; 255
     7fc:	80 83       	st	Z, r24
// Increments index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t inc_buffer_position(uint8_t position)
{
	return (position >= LED_BUFFER_LENGTH - 1) ? 0 : position + 1;
     7fe:	1d 30       	cpi	r17, 0x0D	; 13
     800:	18 f4       	brcc	.+6      	; 0x808 <printLedBuffer+0x66>
     802:	81 2f       	mov	r24, r17
     804:	8f 5f       	subi	r24, 0xFF	; 255
     806:	01 c0       	rjmp	.+2      	; 0x80a <printLedBuffer+0x68>
     808:	8f 2d       	mov	r24, r15
		comma_pos = buffer_position;
		if (state != 0x01)
		{
			buffer_position = inc_buffer_position(buffer_position);
		}
		state = (state & 0x01) ? 0x03 : 0x00;		
     80a:	90 ff       	sbrs	r25, 0
     80c:	02 c0       	rjmp	.+4      	; 0x812 <printLedBuffer+0x70>
     80e:	0e 2d       	mov	r16, r14
     810:	01 c0       	rjmp	.+2      	; 0x814 <printLedBuffer+0x72>
     812:	0f 2d       	mov	r16, r15
     814:	d1 2e       	mov	r13, r17
     816:	18 2f       	mov	r17, r24
	uint8_t comma_pos;
	// Ensure index is inside the buffer
	uint8_t buffer_position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
	comma_pos = buffer_position;
	// Output chars
	while((c = *str++))
     818:	89 91       	ld	r24, Y+
     81a:	81 11       	cpse	r24, r1
     81c:	d7 cf       	rjmp	.-82     	; 0x7cc <printLedBuffer+0x2a>
		{
			buffer_position = inc_buffer_position(buffer_position);
		}
		state = (state & 0x01) ? 0x03 : 0x00;		
	}
}
     81e:	df 91       	pop	r29
     820:	cf 91       	pop	r28
     822:	1f 91       	pop	r17
     824:	0f 91       	pop	r16
     826:	ff 90       	pop	r15
     828:	ef 90       	pop	r14
     82a:	df 90       	pop	r13
     82c:	08 95       	ret

0000082e <setComma>:
//	buffer cell
//---------------------------------------------//
void setComma(int8_t offset)
{
	// Ensure index is inside the buffer
	uint8_t position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
     82e:	90 91 db 00 	lds	r25, 0x00DB
     832:	89 0f       	add	r24, r25
     834:	d4 de       	rcall	.-600    	; 0x5de <wrap_led_buffer_index>
	led_data_buffer[position] |= (SEGH);
     836:	e8 2f       	mov	r30, r24
     838:	f0 e0       	ldi	r31, 0x00	; 0
     83a:	e4 52       	subi	r30, 0x24	; 36
     83c:	ff 4f       	sbci	r31, 0xFF	; 255
     83e:	80 81       	ld	r24, Z
     840:	80 68       	ori	r24, 0x80	; 128
     842:	80 83       	st	Z, r24
     844:	08 95       	ret

00000846 <setExtraLeds>:
// Argument is ORed with current LED state
//---------------------------------------------//
inline void setExtraLeds(uint8_t leds_set_value)
{
		//asm("cli");
		extra_led_state |= leds_set_value;
     846:	90 91 d8 00 	lds	r25, 0x00D8
     84a:	89 2b       	or	r24, r25
     84c:	80 93 d8 00 	sts	0x00D8, r24
     850:	08 95       	ret

00000852 <clearExtraLeds>:
// Argument is AND NOTed with current LED state
//---------------------------------------------//
inline void clearExtraLeds(uint8_t leds_clear_value)
{
		//asm("cli");
		extra_led_state &= ~leds_clear_value;
     852:	90 91 d8 00 	lds	r25, 0x00D8
     856:	80 95       	com	r24
     858:	98 23       	and	r25, r24
     85a:	90 93 d8 00 	sts	0x00D8, r25
     85e:	08 95       	ret

00000860 <led_clock_pulse>:


// Clocks in bit into the shift register
void led_clock_pulse(uint8_t bit)
{
	if (bit)
     860:	88 23       	and	r24, r24
     862:	11 f0       	breq	.+4      	; 0x868 <led_clock_pulse+0x8>
		PORTB |= (1<<PB_LED_DOUT);
     864:	c0 9a       	sbi	0x18, 0	; 24
     866:	01 c0       	rjmp	.+2      	; 0x86a <led_clock_pulse+0xa>
	else
		PORTB &= ~(1<<PB_LED_DOUT);
     868:	c0 98       	cbi	0x18, 0	; 24
     86a:	8a e1       	ldi	r24, 0x1A	; 26
     86c:	8a 95       	dec	r24
     86e:	f1 f7       	brne	.-4      	; 0x86c <led_clock_pulse+0xc>
     870:	00 c0       	rjmp	.+0      	; 0x872 <led_clock_pulse+0x12>
	_delay_us(SETUP_DELAY_US);
	PORTB |= (1<<PB_LED_CLK);
     872:	c2 9a       	sbi	0x18, 2	; 24
     874:	8a e1       	ldi	r24, 0x1A	; 26
     876:	8a 95       	dec	r24
     878:	f1 f7       	brne	.-4      	; 0x876 <led_clock_pulse+0x16>
     87a:	00 c0       	rjmp	.+0      	; 0x87c <led_clock_pulse+0x1c>
	_delay_us(SHIFT_DELAY_US);
	PORTB &= ~(1<<PB_LED_CLK);
     87c:	c2 98       	cbi	0x18, 2	; 24
     87e:	08 95       	ret

00000880 <set_led_segments>:
// Outputs decoded segment data to port bits
void set_led_segments(uint8_t seg_ch)
{
	uint8_t pdat;
	seg_ch ^= LED_SEGMENT_MASK;
	pdat = PORTC & ~( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
     880:	95 b3       	in	r25, 0x15	; 21
	pdat |= (seg_ch & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
     882:	28 2f       	mov	r18, r24
     884:	2f 71       	andi	r18, 0x1F	; 31
// Outputs decoded segment data to port bits
void set_led_segments(uint8_t seg_ch)
{
	uint8_t pdat;
	seg_ch ^= LED_SEGMENT_MASK;
	pdat = PORTC & ~( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
     886:	90 7e       	andi	r25, 0xE0	; 224
	pdat |= (seg_ch & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
     888:	92 2b       	or	r25, r18
	PORTC = pdat;
     88a:	95 bb       	out	0x15, r25	; 21
	seg_ch >>= 2;
	pdat = PORTB & ~( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     88c:	98 b3       	in	r25, 0x18	; 24
	uint8_t pdat;
	seg_ch ^= LED_SEGMENT_MASK;
	pdat = PORTC & ~( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
	pdat |= (seg_ch & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
	PORTC = pdat;
	seg_ch >>= 2;
     88e:	86 95       	lsr	r24
     890:	86 95       	lsr	r24
	pdat = PORTB & ~( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
	pdat |= (seg_ch & ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) ));
     892:	88 73       	andi	r24, 0x38	; 56
	seg_ch ^= LED_SEGMENT_MASK;
	pdat = PORTC & ~( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
	pdat |= (seg_ch & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
	PORTC = pdat;
	seg_ch >>= 2;
	pdat = PORTB & ~( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     894:	97 7c       	andi	r25, 0xC7	; 199
	pdat |= (seg_ch & ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) ));
     896:	89 2b       	or	r24, r25
	PORTB = pdat;
     898:	88 bb       	out	0x18, r24	; 24
     89a:	08 95       	ret

0000089c <enable_led_segments_pullups>:

// Turns segment port bits to HI-Z and
// enables pull-ups
void enable_led_segments_pullups()
{
	PORTC |= ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
     89c:	85 b3       	in	r24, 0x15	; 21
     89e:	8f 61       	ori	r24, 0x1F	; 31
     8a0:	85 bb       	out	0x15, r24	; 21
	PORTB |= ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     8a2:	88 b3       	in	r24, 0x18	; 24
     8a4:	88 63       	ori	r24, 0x38	; 56
     8a6:	88 bb       	out	0x18, r24	; 24
     8a8:	08 95       	ret

000008aa <enable_led_segments>:
}	

void enable_led_segments()
{
	DDRC |= ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
     8aa:	84 b3       	in	r24, 0x14	; 20
     8ac:	8f 61       	ori	r24, 0x1F	; 31
     8ae:	84 bb       	out	0x14, r24	; 20
	DDRB |= ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     8b0:	87 b3       	in	r24, 0x17	; 23
     8b2:	88 63       	ori	r24, 0x38	; 56
     8b4:	87 bb       	out	0x17, r24	; 23
     8b6:	08 95       	ret

000008b8 <disable_led_segments>:
}

void disable_led_segments()
{
	DDRC &= ~( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
     8b8:	84 b3       	in	r24, 0x14	; 20
     8ba:	80 7e       	andi	r24, 0xE0	; 224
     8bc:	84 bb       	out	0x14, r24	; 20
	DDRB &= ~( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     8be:	87 b3       	in	r24, 0x17	; 23
     8c0:	87 7c       	andi	r24, 0xC7	; 199
     8c2:	87 bb       	out	0x17, r24	; 23
     8c4:	08 95       	ret

000008c6 <capture_button_state>:


void capture_button_state()
{
	uint8_t pdat;
	pdat = PINB  & ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     8c6:	86 b3       	in	r24, 0x16	; 22
     8c8:	88 73       	andi	r24, 0x38	; 56
	pdat <<= 2;
	pdat |= (PINC & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
     8ca:	93 b3       	in	r25, 0x13	; 19

void capture_button_state()
{
	uint8_t pdat;
	pdat = PINB  & ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
	pdat <<= 2;
     8cc:	88 0f       	add	r24, r24
     8ce:	88 0f       	add	r24, r24
	pdat |= (PINC & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
     8d0:	9f 71       	andi	r25, 0x1F	; 31
     8d2:	89 2b       	or	r24, r25
	raw_button_state = pdat ^ RAW_BUTTONS_INVERSE_MASK;
     8d4:	80 95       	com	r24
     8d6:	80 93 ea 00 	sts	0x00EA, r24
     8da:	08 95       	ret

000008dc <restartMenuTimer>:
//	 Restarts menu state timeout
//	Should be used in RUN function when control buttons are pressed.
//-----------------------------------------------------------------//
static void restartMenuTimer(void)
{
	menuTimer.Timer = 0;
     8dc:	10 92 ed 00 	sts	0x00ED, r1
     8e0:	08 95       	ret

000008e2 <mf_setTempLeave>:
		clearExtraLeds(LED_TEMP);
}

void mf_setTempLeave(void)
{
	userTimer.Enabled = 0;
     8e2:	e0 ef       	ldi	r30, 0xF0	; 240
     8e4:	f0 e0       	ldi	r31, 0x00	; 0
     8e6:	80 81       	ld	r24, Z
     8e8:	8e 7f       	andi	r24, 0xFE	; 254
     8ea:	80 83       	st	Z, r24
     8ec:	08 95       	ret

000008ee <mf_leafSelectAct>:
	userTimer.FA_GE = 1;	
}

void mf_leafSelectAct(void)
{
	userTimer.Timer = 0;
     8ee:	10 92 f1 00 	sts	0x00F1, r1
	userTimer.Top = BLINK_PERIOD - 1;
     8f2:	87 e0       	ldi	r24, 0x07	; 7
     8f4:	80 93 f2 00 	sts	0x00F2, r24
	userTimer.CompA = BLINK_PERIOD / 2;
     8f8:	84 e0       	ldi	r24, 0x04	; 4
     8fa:	80 93 f3 00 	sts	0x00F3, r24
	userTimer.Enabled = 1;
     8fe:	e0 ef       	ldi	r30, 0xF0	; 240
     900:	f0 e0       	ldi	r31, 0x00	; 0
     902:	80 81       	ld	r24, Z
     904:	81 60       	ori	r24, 0x01	; 1
     906:	80 83       	st	Z, r24
     908:	08 95       	ret

0000090a <mf_leafExit>:
}

void mf_leafExit(void)
{
	userTimer.Enabled = 0;	
     90a:	e0 ef       	ldi	r30, 0xF0	; 240
     90c:	f0 e0       	ldi	r31, 0x00	; 0
     90e:	80 81       	ld	r24, Z
     910:	8e 7f       	andi	r24, 0xFE	; 254
     912:	80 83       	st	Z, r24
     914:	08 95       	ret

00000916 <mf_cdone1Select>:
}

//---------------------------------------------//

void mf_cdone1Select(void)
{
     916:	08 95       	ret

00000918 <mf_cdone2Select>:
	// Calculate new coefficient for temperature conversion
}

void mf_cdone2Select(void)
{
     918:	08 95       	ret

0000091a <mf_cdoneDo>:
	// Calculate new coefficient for temperature conversion
}

void mf_cdoneDo(void)
{
	printLedBuffer(0," DONE ");
     91a:	67 e9       	ldi	r22, 0x97	; 151
     91c:	70 e0       	ldi	r23, 0x00	; 0
     91e:	80 e0       	ldi	r24, 0x00	; 0
     920:	40 df       	rcall	.-384    	; 0x7a2 <printLedBuffer>
     922:	08 95       	ret

00000924 <mf_calib2Do>:
}

//---------------------------------------------//

void mf_calib2Do(void)
{
     924:	cf 93       	push	r28
     926:	df 93       	push	r29
     928:	cd b7       	in	r28, 0x3d	; 61
     92a:	de b7       	in	r29, 0x3e	; 62
     92c:	27 97       	sbiw	r28, 0x07	; 7
     92e:	0f b6       	in	r0, 0x3f	; 63
     930:	f8 94       	cli
     932:	de bf       	out	0x3e, r29	; 62
     934:	0f be       	out	0x3f, r0	; 63
     936:	cd bf       	out	0x3d, r28	; 61
	char str[] = {'P','2',' ',' ',' ',' ',0};
     938:	87 e0       	ldi	r24, 0x07	; 7
     93a:	ed e6       	ldi	r30, 0x6D	; 109
     93c:	f0 e0       	ldi	r31, 0x00	; 0
     93e:	de 01       	movw	r26, r28
     940:	11 96       	adiw	r26, 0x01	; 1
     942:	01 90       	ld	r0, Z+
     944:	0d 92       	st	X+, r0
     946:	8a 95       	dec	r24
     948:	e1 f7       	brne	.-8      	; 0x942 <mf_calib2Do+0x1e>
	
	
	if (button_state & (BD_UP | BR_UP))
     94a:	80 91 bc 00 	lds	r24, 0x00BC
     94e:	90 91 bd 00 	lds	r25, 0x00BD
     952:	9c 01       	movw	r18, r24
     954:	22 70       	andi	r18, 0x02	; 2
     956:	34 70       	andi	r19, 0x04	; 4
     958:	23 2b       	or	r18, r19
     95a:	41 f0       	breq	.+16     	; 0x96c <mf_calib2Do+0x48>
	{
		if (cpoint2 < MAX_CALIB_TEMP)
     95c:	80 91 d7 00 	lds	r24, 0x00D7
     960:	8a 3f       	cpi	r24, 0xFA	; 250
     962:	78 f4       	brcc	.+30     	; 0x982 <mf_calib2Do+0x5e>
		cpoint2 += 1;
     964:	8f 5f       	subi	r24, 0xFF	; 255
     966:	80 93 d7 00 	sts	0x00D7, r24
     96a:	0b c0       	rjmp	.+22     	; 0x982 <mf_calib2Do+0x5e>
	}
	else if (button_state & (BD_DOWN | BR_DOWN))
     96c:	84 70       	andi	r24, 0x04	; 4
     96e:	98 70       	andi	r25, 0x08	; 8
     970:	89 2b       	or	r24, r25
     972:	39 f0       	breq	.+14     	; 0x982 <mf_calib2Do+0x5e>
	{
		if (cpoint2 > MIN_CALIB_TEMP)
     974:	80 91 d7 00 	lds	r24, 0x00D7
     978:	8b 30       	cpi	r24, 0x0B	; 11
     97a:	18 f0       	brcs	.+6      	; 0x982 <mf_calib2Do+0x5e>
		cpoint2 -= 1;
     97c:	81 50       	subi	r24, 0x01	; 1
     97e:	80 93 d7 00 	sts	0x00D7, r24
	}
	
	if (userTimer.FA_GE)
     982:	80 91 f0 00 	lds	r24, 0x00F0
     986:	84 ff       	sbrs	r24, 4
     988:	09 c0       	rjmp	.+18     	; 0x99c <mf_calib2Do+0x78>
	{
		u16toa_align_right(cpoint2,str + 3,0x80 | 3,' ');
     98a:	20 e2       	ldi	r18, 0x20	; 32
     98c:	43 e8       	ldi	r20, 0x83	; 131
     98e:	be 01       	movw	r22, r28
     990:	6c 5f       	subi	r22, 0xFC	; 252
     992:	7f 4f       	sbci	r23, 0xFF	; 255
     994:	80 91 d7 00 	lds	r24, 0x00D7
     998:	90 e0       	ldi	r25, 0x00	; 0
     99a:	1d d3       	rcall	.+1594   	; 0xfd6 <u16toa_align_right>
	}
	
	printLedBuffer(0,str);
     99c:	be 01       	movw	r22, r28
     99e:	6f 5f       	subi	r22, 0xFF	; 255
     9a0:	7f 4f       	sbci	r23, 0xFF	; 255
     9a2:	80 e0       	ldi	r24, 0x00	; 0
     9a4:	fe de       	rcall	.-516    	; 0x7a2 <printLedBuffer>
	
}
     9a6:	27 96       	adiw	r28, 0x07	; 7
     9a8:	0f b6       	in	r0, 0x3f	; 63
     9aa:	f8 94       	cli
     9ac:	de bf       	out	0x3e, r29	; 62
     9ae:	0f be       	out	0x3f, r0	; 63
     9b0:	cd bf       	out	0x3d, r28	; 61
     9b2:	df 91       	pop	r29
     9b4:	cf 91       	pop	r28
     9b6:	08 95       	ret

000009b8 <mf_calib1Do>:
	// restore cpoint1, cpoint2
	mf_leafSelect();
}

void mf_calib1Do(void)
{
     9b8:	cf 93       	push	r28
     9ba:	df 93       	push	r29
     9bc:	cd b7       	in	r28, 0x3d	; 61
     9be:	de b7       	in	r29, 0x3e	; 62
     9c0:	27 97       	sbiw	r28, 0x07	; 7
     9c2:	0f b6       	in	r0, 0x3f	; 63
     9c4:	f8 94       	cli
     9c6:	de bf       	out	0x3e, r29	; 62
     9c8:	0f be       	out	0x3f, r0	; 63
     9ca:	cd bf       	out	0x3d, r28	; 61
	char str[] = {'P','1',' ',' ',' ',' ',0};
     9cc:	87 e0       	ldi	r24, 0x07	; 7
     9ce:	e4 e7       	ldi	r30, 0x74	; 116
     9d0:	f0 e0       	ldi	r31, 0x00	; 0
     9d2:	de 01       	movw	r26, r28
     9d4:	11 96       	adiw	r26, 0x01	; 1
     9d6:	01 90       	ld	r0, Z+
     9d8:	0d 92       	st	X+, r0
     9da:	8a 95       	dec	r24
     9dc:	e1 f7       	brne	.-8      	; 0x9d6 <mf_calib1Do+0x1e>
	
	
	if (button_state & (BD_UP | BR_UP))
     9de:	80 91 bc 00 	lds	r24, 0x00BC
     9e2:	90 91 bd 00 	lds	r25, 0x00BD
     9e6:	9c 01       	movw	r18, r24
     9e8:	22 70       	andi	r18, 0x02	; 2
     9ea:	34 70       	andi	r19, 0x04	; 4
     9ec:	23 2b       	or	r18, r19
     9ee:	41 f0       	breq	.+16     	; 0xa00 <mf_calib1Do+0x48>
	{
		if (cpoint1 < MAX_CALIB_TEMP)
     9f0:	80 91 d1 00 	lds	r24, 0x00D1
     9f4:	8a 3f       	cpi	r24, 0xFA	; 250
     9f6:	78 f4       	brcc	.+30     	; 0xa16 <mf_calib1Do+0x5e>
			cpoint1 += 1;
     9f8:	8f 5f       	subi	r24, 0xFF	; 255
     9fa:	80 93 d1 00 	sts	0x00D1, r24
     9fe:	0b c0       	rjmp	.+22     	; 0xa16 <mf_calib1Do+0x5e>
	}
	else if (button_state & (BD_DOWN | BR_DOWN))
     a00:	84 70       	andi	r24, 0x04	; 4
     a02:	98 70       	andi	r25, 0x08	; 8
     a04:	89 2b       	or	r24, r25
     a06:	39 f0       	breq	.+14     	; 0xa16 <mf_calib1Do+0x5e>
	{
		if (cpoint1 > MIN_CALIB_TEMP)
     a08:	80 91 d1 00 	lds	r24, 0x00D1
     a0c:	8b 30       	cpi	r24, 0x0B	; 11
     a0e:	18 f0       	brcs	.+6      	; 0xa16 <mf_calib1Do+0x5e>
			cpoint1 -= 1;
     a10:	81 50       	subi	r24, 0x01	; 1
     a12:	80 93 d1 00 	sts	0x00D1, r24
	}
	
	if (userTimer.FA_GE)
     a16:	80 91 f0 00 	lds	r24, 0x00F0
     a1a:	84 ff       	sbrs	r24, 4
     a1c:	09 c0       	rjmp	.+18     	; 0xa30 <mf_calib1Do+0x78>
	{
		u16toa_align_right(cpoint1,str + 3,0x80 | 3,' ');
     a1e:	20 e2       	ldi	r18, 0x20	; 32
     a20:	43 e8       	ldi	r20, 0x83	; 131
     a22:	be 01       	movw	r22, r28
     a24:	6c 5f       	subi	r22, 0xFC	; 252
     a26:	7f 4f       	sbci	r23, 0xFF	; 255
     a28:	80 91 d1 00 	lds	r24, 0x00D1
     a2c:	90 e0       	ldi	r25, 0x00	; 0
     a2e:	d3 d2       	rcall	.+1446   	; 0xfd6 <u16toa_align_right>
	}
	
	printLedBuffer(0,str);
     a30:	be 01       	movw	r22, r28
     a32:	6f 5f       	subi	r22, 0xFF	; 255
     a34:	7f 4f       	sbci	r23, 0xFF	; 255
     a36:	80 e0       	ldi	r24, 0x00	; 0
     a38:	b4 de       	rcall	.-664    	; 0x7a2 <printLedBuffer>
}
     a3a:	27 96       	adiw	r28, 0x07	; 7
     a3c:	0f b6       	in	r0, 0x3f	; 63
     a3e:	f8 94       	cli
     a40:	de bf       	out	0x3e, r29	; 62
     a42:	0f be       	out	0x3f, r0	; 63
     a44:	cd bf       	out	0x3d, r28	; 61
     a46:	df 91       	pop	r29
     a48:	cf 91       	pop	r28
     a4a:	08 95       	ret

00000a4c <mf_autopoffDo>:

//---------------------------------------------//


void mf_autopoffDo(void)
{
     a4c:	cf 93       	push	r28
     a4e:	df 93       	push	r29
     a50:	cd b7       	in	r28, 0x3d	; 61
     a52:	de b7       	in	r29, 0x3e	; 62
     a54:	27 97       	sbiw	r28, 0x07	; 7
     a56:	0f b6       	in	r0, 0x3f	; 63
     a58:	f8 94       	cli
     a5a:	de bf       	out	0x3e, r29	; 62
     a5c:	0f be       	out	0x3f, r0	; 63
     a5e:	cd bf       	out	0x3d, r28	; 61
	char str[] = {'O','F','F',' ',' ',' ',0};
     a60:	87 e0       	ldi	r24, 0x07	; 7
     a62:	eb e7       	ldi	r30, 0x7B	; 123
     a64:	f0 e0       	ldi	r31, 0x00	; 0
     a66:	de 01       	movw	r26, r28
     a68:	11 96       	adiw	r26, 0x01	; 1
     a6a:	01 90       	ld	r0, Z+
     a6c:	0d 92       	st	X+, r0
     a6e:	8a 95       	dec	r24
     a70:	e1 f7       	brne	.-8      	; 0xa6a <mf_autopoffDo+0x1e>
		
		
	if (button_state & (BD_UP | BR_UP))
     a72:	80 91 bc 00 	lds	r24, 0x00BC
     a76:	90 91 bd 00 	lds	r25, 0x00BD
     a7a:	9c 01       	movw	r18, r24
     a7c:	22 70       	andi	r18, 0x02	; 2
     a7e:	34 70       	andi	r19, 0x04	; 4
     a80:	23 2b       	or	r18, r19
     a82:	49 f0       	breq	.+18     	; 0xa96 <mf_autopoffDo+0x4a>
	{
		if (power_off_timeout < MAX_POWEROFF_TIMEOUT)
     a84:	80 91 d6 00 	lds	r24, 0x00D6
     a88:	8f 35       	cpi	r24, 0x5F	; 95
     a8a:	18 f4       	brcc	.+6      	; 0xa92 <mf_autopoffDo+0x46>
			power_off_timeout += 5;
     a8c:	8b 5f       	subi	r24, 0xFB	; 251
     a8e:	80 93 d6 00 	sts	0x00D6, r24
		restartMenuTimer();
     a92:	24 df       	rcall	.-440    	; 0x8dc <restartMenuTimer>
     a94:	0c c0       	rjmp	.+24     	; 0xaae <mf_autopoffDo+0x62>
	}
	else if (button_state & (BD_DOWN | BR_DOWN))
     a96:	84 70       	andi	r24, 0x04	; 4
     a98:	98 70       	andi	r25, 0x08	; 8
     a9a:	89 2b       	or	r24, r25
     a9c:	41 f0       	breq	.+16     	; 0xaae <mf_autopoffDo+0x62>
	{
		if (power_off_timeout > MIN_POWEROFF_TIMEOUT)
     a9e:	80 91 d6 00 	lds	r24, 0x00D6
     aa2:	86 30       	cpi	r24, 0x06	; 6
     aa4:	18 f0       	brcs	.+6      	; 0xaac <mf_autopoffDo+0x60>
			power_off_timeout -= 5;
     aa6:	85 50       	subi	r24, 0x05	; 5
     aa8:	80 93 d6 00 	sts	0x00D6, r24
		restartMenuTimer();
     aac:	17 df       	rcall	.-466    	; 0x8dc <restartMenuTimer>
	}	
		
	if (userTimer.FA_GE)
     aae:	80 91 f0 00 	lds	r24, 0x00F0
     ab2:	84 ff       	sbrs	r24, 4
     ab4:	10 c0       	rjmp	.+32     	; 0xad6 <mf_autopoffDo+0x8a>
	{
		if (power_off_timeout != MAX_POWEROFF_TIMEOUT)
     ab6:	80 91 d6 00 	lds	r24, 0x00D6
     aba:	8f 35       	cpi	r24, 0x5F	; 95
     abc:	41 f0       	breq	.+16     	; 0xace <mf_autopoffDo+0x82>
			u16toa_align_right(power_off_timeout,str + 4,0x80 | 2,' ');	
     abe:	20 e2       	ldi	r18, 0x20	; 32
     ac0:	42 e8       	ldi	r20, 0x82	; 130
     ac2:	be 01       	movw	r22, r28
     ac4:	6b 5f       	subi	r22, 0xFB	; 251
     ac6:	7f 4f       	sbci	r23, 0xFF	; 255
     ac8:	90 e0       	ldi	r25, 0x00	; 0
     aca:	85 d2       	rcall	.+1290   	; 0xfd6 <u16toa_align_right>
     acc:	04 c0       	rjmp	.+8      	; 0xad6 <mf_autopoffDo+0x8a>
		else 
		{
			str[4] = 'N';
     ace:	8e e4       	ldi	r24, 0x4E	; 78
     ad0:	8d 83       	std	Y+5, r24	; 0x05
			str[5] = 'O';
     ad2:	8f e4       	ldi	r24, 0x4F	; 79
     ad4:	8e 83       	std	Y+6, r24	; 0x06
		}			
	}		
		
	printLedBuffer(0,str);
     ad6:	be 01       	movw	r22, r28
     ad8:	6f 5f       	subi	r22, 0xFF	; 255
     ada:	7f 4f       	sbci	r23, 0xFF	; 255
     adc:	80 e0       	ldi	r24, 0x00	; 0
     ade:	61 de       	rcall	.-830    	; 0x7a2 <printLedBuffer>
}
     ae0:	27 96       	adiw	r28, 0x07	; 7
     ae2:	0f b6       	in	r0, 0x3f	; 63
     ae4:	f8 94       	cli
     ae6:	de bf       	out	0x3e, r29	; 62
     ae8:	0f be       	out	0x3f, r0	; 63
     aea:	cd bf       	out	0x3d, r28	; 61
     aec:	df 91       	pop	r29
     aee:	cf 91       	pop	r28
     af0:	08 95       	ret

00000af2 <mf_sndenDo>:

//---------------------------------------------//


void mf_sndenDo(void)
{
     af2:	cf 93       	push	r28
     af4:	df 93       	push	r29
     af6:	cd b7       	in	r28, 0x3d	; 61
     af8:	de b7       	in	r29, 0x3e	; 62
     afa:	27 97       	sbiw	r28, 0x07	; 7
     afc:	0f b6       	in	r0, 0x3f	; 63
     afe:	f8 94       	cli
     b00:	de bf       	out	0x3e, r29	; 62
     b02:	0f be       	out	0x3f, r0	; 63
     b04:	cd bf       	out	0x3d, r28	; 61
	char str[] = {'S','N','D',' ',' ',' ',0};
     b06:	87 e0       	ldi	r24, 0x07	; 7
     b08:	e2 e8       	ldi	r30, 0x82	; 130
     b0a:	f0 e0       	ldi	r31, 0x00	; 0
     b0c:	de 01       	movw	r26, r28
     b0e:	11 96       	adiw	r26, 0x01	; 1
     b10:	01 90       	ld	r0, Z+
     b12:	0d 92       	st	X+, r0
     b14:	8a 95       	dec	r24
     b16:	e1 f7       	brne	.-8      	; 0xb10 <mf_sndenDo+0x1e>
		
	if (button_state & (BD_UP | BD_DOWN))
     b18:	80 91 bc 00 	lds	r24, 0x00BC
     b1c:	90 91 bd 00 	lds	r25, 0x00BD
     b20:	86 70       	andi	r24, 0x06	; 6
     b22:	99 27       	eor	r25, r25
     b24:	89 2b       	or	r24, r25
     b26:	41 f0       	breq	.+16     	; 0xb38 <mf_sndenDo+0x46>
	{
		sound_enable = !sound_enable;
     b28:	81 e0       	ldi	r24, 0x01	; 1
     b2a:	90 91 d4 00 	lds	r25, 0x00D4
     b2e:	91 11       	cpse	r25, r1
     b30:	80 e0       	ldi	r24, 0x00	; 0
     b32:	80 93 d4 00 	sts	0x00D4, r24
		restartMenuTimer();
     b36:	d2 de       	rcall	.-604    	; 0x8dc <restartMenuTimer>
	}			
		
	if (userTimer.FA_GE)
     b38:	80 91 f0 00 	lds	r24, 0x00F0
     b3c:	84 ff       	sbrs	r24, 4
     b3e:	0e c0       	rjmp	.+28     	; 0xb5c <mf_sndenDo+0x6a>
	{
		if (sound_enable)		
     b40:	80 91 d4 00 	lds	r24, 0x00D4
     b44:	88 23       	and	r24, r24
     b46:	29 f0       	breq	.+10     	; 0xb52 <mf_sndenDo+0x60>
		{
			str[4] = 'O';
     b48:	8f e4       	ldi	r24, 0x4F	; 79
     b4a:	8d 83       	std	Y+5, r24	; 0x05
			str[5] = 'N';
     b4c:	8e e4       	ldi	r24, 0x4E	; 78
     b4e:	8e 83       	std	Y+6, r24	; 0x06
     b50:	05 c0       	rjmp	.+10     	; 0xb5c <mf_sndenDo+0x6a>
		}
		else
		{
			str[3] = 'O';
     b52:	8f e4       	ldi	r24, 0x4F	; 79
     b54:	8c 83       	std	Y+4, r24	; 0x04
			str[4] = 'F';
     b56:	86 e4       	ldi	r24, 0x46	; 70
     b58:	8d 83       	std	Y+5, r24	; 0x05
			str[5] = 'F';
     b5a:	8e 83       	std	Y+6, r24	; 0x06
		}			
	}
		
	printLedBuffer(0,str);
     b5c:	be 01       	movw	r22, r28
     b5e:	6f 5f       	subi	r22, 0xFF	; 255
     b60:	7f 4f       	sbci	r23, 0xFF	; 255
     b62:	80 e0       	ldi	r24, 0x00	; 0
     b64:	1e de       	rcall	.-964    	; 0x7a2 <printLedBuffer>
	setComma(2);
     b66:	82 e0       	ldi	r24, 0x02	; 2
     b68:	62 de       	rcall	.-828    	; 0x82e <setComma>
}
     b6a:	27 96       	adiw	r28, 0x07	; 7
     b6c:	0f b6       	in	r0, 0x3f	; 63
     b6e:	f8 94       	cli
     b70:	de bf       	out	0x3e, r29	; 62
     b72:	0f be       	out	0x3f, r0	; 63
     b74:	cd bf       	out	0x3d, r28	; 61
     b76:	df 91       	pop	r29
     b78:	cf 91       	pop	r28
     b7a:	08 95       	ret

00000b7c <mf_leafSelect>:

// Select and exit functions, common for leaf menu items 

void mf_leafSelect(void)
{
	clearExtraLeds(LED_TEMP | LED_ROLL);
     b7c:	83 e0       	ldi	r24, 0x03	; 3
     b7e:	69 de       	rcall	.-814    	; 0x852 <clearExtraLeds>
	userTimer.FA_GE = 1;	
     b80:	e0 ef       	ldi	r30, 0xF0	; 240
     b82:	f0 e0       	ldi	r31, 0x00	; 0
     b84:	80 81       	ld	r24, Z
     b86:	80 61       	ori	r24, 0x10	; 16
     b88:	80 83       	st	Z, r24
     b8a:	08 95       	ret

00000b8c <mf_calibSelect>:
//---------------------------------------------//

void mf_calibSelect(void)
{
	// restore cpoint1, cpoint2
	mf_leafSelect();
     b8c:	f7 df       	rcall	.-18     	; 0xb7c <mf_leafSelect>
     b8e:	08 95       	ret

00000b90 <mf_rollLeave>:
	printLedBuffer(0,str);
}

void mf_rollLeave(void)
{
	clearExtraLeds(LED_ROLL);
     b90:	82 e0       	ldi	r24, 0x02	; 2
     b92:	5f de       	rcall	.-834    	; 0x852 <clearExtraLeds>
	userTimer.Enabled = 0;
     b94:	e0 ef       	ldi	r30, 0xF0	; 240
     b96:	f0 e0       	ldi	r31, 0x00	; 0
     b98:	80 81       	ld	r24, Z
     b9a:	8e 7f       	andi	r24, 0xFE	; 254
     b9c:	80 83       	st	Z, r24
     b9e:	08 95       	ret

00000ba0 <mf_setTempSelect>:
//---------------------------------------------//


void mf_setTempSelect(void)
{
	clearExtraLeds(LED_TEMP);
     ba0:	81 e0       	ldi	r24, 0x01	; 1
     ba2:	57 de       	rcall	.-850    	; 0x852 <clearExtraLeds>
	mf_leafSelectAct();		// setup and start timer
     ba4:	a4 de       	rcall	.-696    	; 0x8ee <mf_leafSelectAct>
     ba6:	08 95       	ret

00000ba8 <mf_realTempLeave>:
	printLedBuffer(0,str);
}

void mf_realTempLeave(void)
{
	clearExtraLeds(LED_TEMP);
     ba8:	81 e0       	ldi	r24, 0x01	; 1
     baa:	53 de       	rcall	.-858    	; 0x852 <clearExtraLeds>
     bac:	08 95       	ret

00000bae <mf_rollDo>:
	setExtraLeds(LED_ROLL);
	mf_leafSelectAct();		// setup and start timer
}

void mf_rollDo(void)
{
     bae:	cf 93       	push	r28
     bb0:	df 93       	push	r29
     bb2:	cd b7       	in	r28, 0x3d	; 61
     bb4:	de b7       	in	r29, 0x3e	; 62
     bb6:	27 97       	sbiw	r28, 0x07	; 7
     bb8:	0f b6       	in	r0, 0x3f	; 63
     bba:	f8 94       	cli
     bbc:	de bf       	out	0x3e, r29	; 62
     bbe:	0f be       	out	0x3f, r0	; 63
     bc0:	cd bf       	out	0x3d, r28	; 61
	char str[] = {' ',' ',' ',' ',' ',' ',0};
     bc2:	87 e0       	ldi	r24, 0x07	; 7
     bc4:	e9 e8       	ldi	r30, 0x89	; 137
     bc6:	f0 e0       	ldi	r31, 0x00	; 0
     bc8:	de 01       	movw	r26, r28
     bca:	11 96       	adiw	r26, 0x01	; 1
     bcc:	01 90       	ld	r0, Z+
     bce:	0d 92       	st	X+, r0
     bd0:	8a 95       	dec	r24
     bd2:	e1 f7       	brne	.-8      	; 0xbcc <mf_rollDo+0x1e>
		
	if (button_state & (BD_UP | BR_UP))
     bd4:	80 91 bc 00 	lds	r24, 0x00BC
     bd8:	90 91 bd 00 	lds	r25, 0x00BD
     bdc:	9c 01       	movw	r18, r24
     bde:	22 70       	andi	r18, 0x02	; 2
     be0:	34 70       	andi	r19, 0x04	; 4
     be2:	23 2b       	or	r18, r19
     be4:	41 f0       	breq	.+16     	; 0xbf6 <mf_rollDo+0x48>
	{
		if (rollCycleSet < MAX_ROLL_CYCLES)
     be6:	80 91 d5 00 	lds	r24, 0x00D5
     bea:	83 36       	cpi	r24, 0x63	; 99
     bec:	78 f4       	brcc	.+30     	; 0xc0c <mf_rollDo+0x5e>
		rollCycleSet += 1;
     bee:	8f 5f       	subi	r24, 0xFF	; 255
     bf0:	80 93 d5 00 	sts	0x00D5, r24
     bf4:	0b c0       	rjmp	.+22     	; 0xc0c <mf_rollDo+0x5e>
	}
	else if (button_state & (BD_DOWN | BR_DOWN))
     bf6:	84 70       	andi	r24, 0x04	; 4
     bf8:	98 70       	andi	r25, 0x08	; 8
     bfa:	89 2b       	or	r24, r25
     bfc:	39 f0       	breq	.+14     	; 0xc0c <mf_rollDo+0x5e>
	{
		if (rollCycleSet > MIN_ROLL_CYCLES)
     bfe:	80 91 d5 00 	lds	r24, 0x00D5
     c02:	82 30       	cpi	r24, 0x02	; 2
     c04:	18 f0       	brcs	.+6      	; 0xc0c <mf_rollDo+0x5e>
		rollCycleSet -= 1;
     c06:	81 50       	subi	r24, 0x01	; 1
     c08:	80 93 d5 00 	sts	0x00D5, r24
	}	
		
	u16toa_align_right(rollCycleSet,str + 4,0x80 | 2,' ');
     c0c:	20 e2       	ldi	r18, 0x20	; 32
     c0e:	42 e8       	ldi	r20, 0x82	; 130
     c10:	be 01       	movw	r22, r28
     c12:	6b 5f       	subi	r22, 0xFB	; 251
     c14:	7f 4f       	sbci	r23, 0xFF	; 255
     c16:	80 91 d5 00 	lds	r24, 0x00D5
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	dc d1       	rcall	.+952    	; 0xfd6 <u16toa_align_right>
	
	if ((!(rollState & ROLL_CYCLE)) || (userTimer.FA_GE))
     c1e:	80 91 c7 00 	lds	r24, 0x00C7
     c22:	82 ff       	sbrs	r24, 2
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <mf_rollDo+0x80>
     c26:	80 91 f0 00 	lds	r24, 0x00F0
     c2a:	84 ff       	sbrs	r24, 4
     c2c:	09 c0       	rjmp	.+18     	; 0xc40 <mf_rollDo+0x92>
	{
		u16toa_align_right(activeRollCycle,str + 1,0x80 | 2,' ');
     c2e:	20 e2       	ldi	r18, 0x20	; 32
     c30:	42 e8       	ldi	r20, 0x82	; 130
     c32:	be 01       	movw	r22, r28
     c34:	6e 5f       	subi	r22, 0xFE	; 254
     c36:	7f 4f       	sbci	r23, 0xFF	; 255
     c38:	80 91 fb 00 	lds	r24, 0x00FB
     c3c:	90 e0       	ldi	r25, 0x00	; 0
     c3e:	cb d1       	rcall	.+918    	; 0xfd6 <u16toa_align_right>
	}
	
	str[0] = 0;
     c40:	19 82       	std	Y+1, r1	; 0x01
	if (isTopPointValid())
     c42:	0e d3       	rcall	.+1564   	; 0x1260 <isTopPointValid>
     c44:	88 23       	and	r24, r24
     c46:	19 f0       	breq	.+6      	; 0xc4e <mf_rollDo+0xa0>
		str[0] |= SEGA;
     c48:	89 81       	ldd	r24, Y+1	; 0x01
     c4a:	81 60       	ori	r24, 0x01	; 1
     c4c:	89 83       	std	Y+1, r24	; 0x01
	if (isBottomPointValid())
     c4e:	16 d3       	rcall	.+1580   	; 0x127c <isBottomPointValid>
     c50:	88 23       	and	r24, r24
     c52:	19 f0       	breq	.+6      	; 0xc5a <mf_rollDo+0xac>
		str[0] |= SEGD;
     c54:	89 81       	ldd	r24, Y+1	; 0x01
     c56:	88 60       	ori	r24, 0x08	; 8
     c58:	89 83       	std	Y+1, r24	; 0x01
	if (str[0] == 0)
     c5a:	89 81       	ldd	r24, Y+1	; 0x01
     c5c:	81 11       	cpse	r24, r1
     c5e:	02 c0       	rjmp	.+4      	; 0xc64 <mf_rollDo+0xb6>
		str[0] = ' ';
     c60:	80 e2       	ldi	r24, 0x20	; 32
     c62:	89 83       	std	Y+1, r24	; 0x01
		
	printLedBuffer(0,str);
     c64:	be 01       	movw	r22, r28
     c66:	6f 5f       	subi	r22, 0xFF	; 255
     c68:	7f 4f       	sbci	r23, 0xFF	; 255
     c6a:	80 e0       	ldi	r24, 0x00	; 0
     c6c:	9a dd       	rcall	.-1228   	; 0x7a2 <printLedBuffer>
}
     c6e:	27 96       	adiw	r28, 0x07	; 7
     c70:	0f b6       	in	r0, 0x3f	; 63
     c72:	f8 94       	cli
     c74:	de bf       	out	0x3e, r29	; 62
     c76:	0f be       	out	0x3f, r0	; 63
     c78:	cd bf       	out	0x3d, r28	; 61
     c7a:	df 91       	pop	r29
     c7c:	cf 91       	pop	r28
     c7e:	08 95       	ret

00000c80 <mf_rollSelect>:
//---------------------------------------------//
//---------------------------------------------//

void mf_rollSelect(void)
{
	setExtraLeds(LED_ROLL);
     c80:	82 e0       	ldi	r24, 0x02	; 2
     c82:	e1 dd       	rcall	.-1086   	; 0x846 <setExtraLeds>
	mf_leafSelectAct();		// setup and start timer
     c84:	34 de       	rcall	.-920    	; 0x8ee <mf_leafSelectAct>
     c86:	08 95       	ret

00000c88 <mf_setTempDo>:
	clearExtraLeds(LED_TEMP);
	mf_leafSelectAct();		// setup and start timer
}

void mf_setTempDo(void)
{
     c88:	cf 93       	push	r28
     c8a:	df 93       	push	r29
     c8c:	cd b7       	in	r28, 0x3d	; 61
     c8e:	de b7       	in	r29, 0x3e	; 62
     c90:	27 97       	sbiw	r28, 0x07	; 7
     c92:	0f b6       	in	r0, 0x3f	; 63
     c94:	f8 94       	cli
     c96:	de bf       	out	0x3e, r29	; 62
     c98:	0f be       	out	0x3f, r0	; 63
     c9a:	cd bf       	out	0x3d, r28	; 61
	char str[] = {' ',' ',' ',' ',0xB0,'C',0};
     c9c:	87 e0       	ldi	r24, 0x07	; 7
     c9e:	e0 e9       	ldi	r30, 0x90	; 144
     ca0:	f0 e0       	ldi	r31, 0x00	; 0
     ca2:	de 01       	movw	r26, r28
     ca4:	11 96       	adiw	r26, 0x01	; 1
     ca6:	01 90       	ld	r0, Z+
     ca8:	0d 92       	st	X+, r0
     caa:	8a 95       	dec	r24
     cac:	e1 f7       	brne	.-8      	; 0xca6 <mf_setTempDo+0x1e>

	
	if (button_state & (BD_UP | BR_UP))
     cae:	80 91 bc 00 	lds	r24, 0x00BC
     cb2:	90 91 bd 00 	lds	r25, 0x00BD
     cb6:	9c 01       	movw	r18, r24
     cb8:	22 70       	andi	r18, 0x02	; 2
     cba:	34 70       	andi	r19, 0x04	; 4
     cbc:	23 2b       	or	r18, r19
     cbe:	71 f0       	breq	.+28     	; 0xcdc <mf_setTempDo+0x54>
	{
		if (setup_temp_value < MAX_SET_TEMP)
     cc0:	80 91 d2 00 	lds	r24, 0x00D2
     cc4:	90 91 d3 00 	lds	r25, 0x00D3
     cc8:	82 3d       	cpi	r24, 0xD2	; 210
     cca:	91 05       	cpc	r25, r1
     ccc:	28 f4       	brcc	.+10     	; 0xcd8 <mf_setTempDo+0x50>
			setup_temp_value += 5;
     cce:	05 96       	adiw	r24, 0x05	; 5
     cd0:	90 93 d3 00 	sts	0x00D3, r25
     cd4:	80 93 d2 00 	sts	0x00D2, r24
		restartMenuTimer();
     cd8:	01 de       	rcall	.-1022   	; 0x8dc <restartMenuTimer>
     cda:	11 c0       	rjmp	.+34     	; 0xcfe <mf_setTempDo+0x76>
	}
	else if (button_state & (BD_DOWN | BR_DOWN))
     cdc:	84 70       	andi	r24, 0x04	; 4
     cde:	98 70       	andi	r25, 0x08	; 8
     ce0:	89 2b       	or	r24, r25
     ce2:	69 f0       	breq	.+26     	; 0xcfe <mf_setTempDo+0x76>
	{
		if (setup_temp_value > MIN_SET_TEMP)
     ce4:	80 91 d2 00 	lds	r24, 0x00D2
     ce8:	90 91 d3 00 	lds	r25, 0x00D3
     cec:	8f 31       	cpi	r24, 0x1F	; 31
     cee:	91 05       	cpc	r25, r1
     cf0:	28 f0       	brcs	.+10     	; 0xcfc <mf_setTempDo+0x74>
			setup_temp_value -= 5;
     cf2:	05 97       	sbiw	r24, 0x05	; 5
     cf4:	90 93 d3 00 	sts	0x00D3, r25
     cf8:	80 93 d2 00 	sts	0x00D2, r24
		restartMenuTimer();
     cfc:	ef dd       	rcall	.-1058   	; 0x8dc <restartMenuTimer>
	}					
		
	// Output ADC result to LED
	u16toa_align_right(setup_temp_value,str,0x80 | 4,' ');
     cfe:	20 e2       	ldi	r18, 0x20	; 32
     d00:	44 e8       	ldi	r20, 0x84	; 132
     d02:	be 01       	movw	r22, r28
     d04:	6f 5f       	subi	r22, 0xFF	; 255
     d06:	7f 4f       	sbci	r23, 0xFF	; 255
     d08:	80 91 d2 00 	lds	r24, 0x00D2
     d0c:	90 91 d3 00 	lds	r25, 0x00D3
     d10:	62 d1       	rcall	.+708    	; 0xfd6 <u16toa_align_right>
	printLedBuffer(0,str);
     d12:	be 01       	movw	r22, r28
     d14:	6f 5f       	subi	r22, 0xFF	; 255
     d16:	7f 4f       	sbci	r23, 0xFF	; 255
     d18:	80 e0       	ldi	r24, 0x00	; 0
     d1a:	43 dd       	rcall	.-1402   	; 0x7a2 <printLedBuffer>
	
	if (userTimer.FA_GE)
     d1c:	80 91 f0 00 	lds	r24, 0x00F0
     d20:	84 ff       	sbrs	r24, 4
     d22:	03 c0       	rjmp	.+6      	; 0xd2a <mf_setTempDo+0xa2>
		setExtraLeds(LED_TEMP);
     d24:	81 e0       	ldi	r24, 0x01	; 1
     d26:	8f dd       	rcall	.-1250   	; 0x846 <setExtraLeds>
     d28:	02 c0       	rjmp	.+4      	; 0xd2e <mf_setTempDo+0xa6>
	else
		clearExtraLeds(LED_TEMP);
     d2a:	81 e0       	ldi	r24, 0x01	; 1
     d2c:	92 dd       	rcall	.-1244   	; 0x852 <clearExtraLeds>
}
     d2e:	27 96       	adiw	r28, 0x07	; 7
     d30:	0f b6       	in	r0, 0x3f	; 63
     d32:	f8 94       	cli
     d34:	de bf       	out	0x3e, r29	; 62
     d36:	0f be       	out	0x3f, r0	; 63
     d38:	cd bf       	out	0x3d, r28	; 61
     d3a:	df 91       	pop	r29
     d3c:	cf 91       	pop	r28
     d3e:	08 95       	ret

00000d40 <mf_realTempSelect>:
//=================================================================//


void mf_realTempSelect(void)
{
	setExtraLeds(LED_TEMP);
     d40:	81 e0       	ldi	r24, 0x01	; 1
     d42:	81 dd       	rcall	.-1278   	; 0x846 <setExtraLeds>
     d44:	08 95       	ret

00000d46 <mf_realTempDo>:
}

void mf_realTempDo(void)
{
     d46:	cf 93       	push	r28
     d48:	df 93       	push	r29
     d4a:	cd b7       	in	r28, 0x3d	; 61
     d4c:	de b7       	in	r29, 0x3e	; 62
     d4e:	27 97       	sbiw	r28, 0x07	; 7
     d50:	0f b6       	in	r0, 0x3f	; 63
     d52:	f8 94       	cli
     d54:	de bf       	out	0x3e, r29	; 62
     d56:	0f be       	out	0x3f, r0	; 63
     d58:	cd bf       	out	0x3d, r28	; 61
	char str[] = {' ',' ',' ',' ',0xB0,'C',0};
     d5a:	87 e0       	ldi	r24, 0x07	; 7
     d5c:	e0 e9       	ldi	r30, 0x90	; 144
     d5e:	f0 e0       	ldi	r31, 0x00	; 0
     d60:	de 01       	movw	r26, r28
     d62:	11 96       	adiw	r26, 0x01	; 1
     d64:	01 90       	ld	r0, Z+
     d66:	0d 92       	st	X+, r0
     d68:	8a 95       	dec	r24
     d6a:	e1 f7       	brne	.-8      	; 0xd64 <mf_realTempDo+0x1e>
	// Output ADC result to LED
	uint16_t temp_celsius = conv_ADC_to_Celsius(adc_filtered_value);
     d6c:	80 91 cf 00 	lds	r24, 0x00CF
     d70:	90 91 d0 00 	lds	r25, 0x00D0
     d74:	7b da       	rcall	.-2826   	; 0x26c <conv_ADC_to_Celsius>
	u16toa_align_right(temp_celsius,str,0x80 | 4,' ');
     d76:	20 e2       	ldi	r18, 0x20	; 32
     d78:	44 e8       	ldi	r20, 0x84	; 132
     d7a:	be 01       	movw	r22, r28
     d7c:	6f 5f       	subi	r22, 0xFF	; 255
     d7e:	7f 4f       	sbci	r23, 0xFF	; 255
     d80:	2a d1       	rcall	.+596    	; 0xfd6 <u16toa_align_right>
	printLedBuffer(0,str);
     d82:	be 01       	movw	r22, r28
     d84:	6f 5f       	subi	r22, 0xFF	; 255
     d86:	7f 4f       	sbci	r23, 0xFF	; 255
     d88:	80 e0       	ldi	r24, 0x00	; 0
     d8a:	0b dd       	rcall	.-1514   	; 0x7a2 <printLedBuffer>
}
     d8c:	27 96       	adiw	r28, 0x07	; 7
     d8e:	0f b6       	in	r0, 0x3f	; 63
     d90:	f8 94       	cli
     d92:	de bf       	out	0x3e, r29	; 62
     d94:	0f be       	out	0x3f, r0	; 63
     d96:	cd bf       	out	0x3d, r28	; 61
     d98:	df 91       	pop	r29
     d9a:	cf 91       	pop	r28
     d9c:	08 95       	ret

00000d9e <InitMenu>:
//	Menu initialization
//	Call this function at start of your program before processMenu()
//-----------------------------------------------------------------//
void InitMenu(void)
{
	selectedMenuItemID = mi_REALTEMP;
     d9e:	81 e0       	ldi	r24, 0x01	; 1
     da0:	80 93 eb 00 	sts	0x00EB, r24
     da4:	20 e0       	ldi	r18, 0x00	; 0
     da6:	30 e0       	ldi	r19, 0x00	; 0
static void getMenuFunctionRecord(uint8_t menuItemID, MenuFunctionRecord* menuRecord )
{
	uint8_t i;
	for (i = 0; i < sizeof(menuFunctionSet)/sizeof(MenuFunctionRecord); i++  )
	{
		readMenuRecord(&menuFunctionSet[i], menuRecord);
     da8:	c9 01       	movw	r24, r18
     daa:	88 0f       	add	r24, r24
     dac:	99 1f       	adc	r25, r25
     dae:	88 0f       	add	r24, r24
     db0:	99 1f       	adc	r25, r25
     db2:	88 0f       	add	r24, r24
     db4:	99 1f       	adc	r25, r25
     db6:	82 1b       	sub	r24, r18
     db8:	93 0b       	sbc	r25, r19
     dba:	88 5b       	subi	r24, 0xB8	; 184
     dbc:	9e 4f       	sbci	r25, 0xFE	; 254
//		fRecPtr		- address of the function record in the FLASH
//		resPtr		- address of the record to fill in the SRAM
//-----------------------------------------------------------------//
static inline void readMenuRecord(const MenuFunctionRecord* fRecPtr, MenuFunctionRecord* resPtr )
{
	resPtr->Item = pgm_read_byte(&fRecPtr->Item);
     dbe:	fc 01       	movw	r30, r24
     dc0:	64 91       	lpm	r22, Z
	resPtr->SelectFunction = (FuncPtr)pgm_read_word(&fRecPtr->SelectFunction);
     dc2:	31 96       	adiw	r30, 0x01	; 1
     dc4:	45 91       	lpm	r20, Z+
     dc6:	54 91       	lpm	r21, Z
     dc8:	b4 2f       	mov	r27, r20
     dca:	a5 2f       	mov	r26, r21
	resPtr->RunFunction = (FuncPtr)pgm_read_word(&fRecPtr->RunFunction);
     dcc:	fc 01       	movw	r30, r24
     dce:	33 96       	adiw	r30, 0x03	; 3
     dd0:	45 91       	lpm	r20, Z+
     dd2:	54 91       	lpm	r21, Z
     dd4:	74 2f       	mov	r23, r20
     dd6:	45 2f       	mov	r20, r21
	resPtr->LeaveFunction = (FuncPtr)pgm_read_word(&fRecPtr->LeaveFunction);
     dd8:	05 96       	adiw	r24, 0x05	; 5
     dda:	fc 01       	movw	r30, r24
     ddc:	85 91       	lpm	r24, Z+
     dde:	94 91       	lpm	r25, Z
     de0:	58 2f       	mov	r21, r24
{
	uint8_t i;
	for (i = 0; i < sizeof(menuFunctionSet)/sizeof(MenuFunctionRecord); i++  )
	{
		readMenuRecord(&menuFunctionSet[i], menuRecord);
		if (menuRecord->Item == menuItemID)
     de2:	61 30       	cpi	r22, 0x01	; 1
     de4:	79 f4       	brne	.+30     	; 0xe04 <InitMenu+0x66>
     de6:	60 93 f4 00 	sts	0x00F4, r22
     dea:	e5 ef       	ldi	r30, 0xF5	; 245
     dec:	f0 e0       	ldi	r31, 0x00	; 0
     dee:	b0 83       	st	Z, r27
     df0:	a1 83       	std	Z+1, r26	; 0x01
     df2:	e7 ef       	ldi	r30, 0xF7	; 247
     df4:	f0 e0       	ldi	r31, 0x00	; 0
     df6:	70 83       	st	Z, r23
     df8:	41 83       	std	Z+1, r20	; 0x01
     dfa:	e9 ef       	ldi	r30, 0xF9	; 249
     dfc:	f0 e0       	ldi	r31, 0x00	; 0
     dfe:	50 83       	st	Z, r21
     e00:	91 83       	std	Z+1, r25	; 0x01
     e02:	14 c0       	rjmp	.+40     	; 0xe2c <InitMenu+0x8e>
     e04:	2f 5f       	subi	r18, 0xFF	; 255
     e06:	3f 4f       	sbci	r19, 0xFF	; 255
//	Output:
//-----------------------------------------------------------------//
static void getMenuFunctionRecord(uint8_t menuItemID, MenuFunctionRecord* menuRecord )
{
	uint8_t i;
	for (i = 0; i < sizeof(menuFunctionSet)/sizeof(MenuFunctionRecord); i++  )
     e08:	2d 30       	cpi	r18, 0x0D	; 13
     e0a:	31 05       	cpc	r19, r1
     e0c:	09 f0       	breq	.+2      	; 0xe10 <InitMenu+0x72>
     e0e:	cc cf       	rjmp	.-104    	; 0xda8 <InitMenu+0xa>
     e10:	60 93 f4 00 	sts	0x00F4, r22
     e14:	e5 ef       	ldi	r30, 0xF5	; 245
     e16:	f0 e0       	ldi	r31, 0x00	; 0
     e18:	b0 83       	st	Z, r27
     e1a:	a1 83       	std	Z+1, r26	; 0x01
     e1c:	e7 ef       	ldi	r30, 0xF7	; 247
     e1e:	f0 e0       	ldi	r31, 0x00	; 0
     e20:	70 83       	st	Z, r23
     e22:	41 83       	std	Z+1, r20	; 0x01
     e24:	e9 ef       	ldi	r30, 0xF9	; 249
     e26:	f0 e0       	ldi	r31, 0x00	; 0
     e28:	50 83       	st	Z, r21
     e2a:	91 83       	std	Z+1, r25	; 0x01
//-----------------------------------------------------------------//
void InitMenu(void)
{
	selectedMenuItemID = mi_REALTEMP;
	getMenuFunctionRecord(selectedMenuItemID, &selectedMenuFunctionRecord);
	processItemFunction(selectedMenuFunctionRecord.SelectFunction);
     e2c:	e0 91 f5 00 	lds	r30, 0x00F5
     e30:	f0 91 f6 00 	lds	r31, 0x00F6
//	Arguments:
//		funcAddr - address of the function to run.
//-----------------------------------------------------------------//
static inline void processItemFunction(FuncPtr funcAddr)
{
	if (funcAddr != 0)
     e34:	30 97       	sbiw	r30, 0x00	; 0
     e36:	09 f0       	breq	.+2      	; 0xe3a <InitMenu+0x9c>
		((FuncPtr)funcAddr)();
     e38:	09 95       	icall
	selectedMenuItemID = mi_REALTEMP;
	getMenuFunctionRecord(selectedMenuItemID, &selectedMenuFunctionRecord);
	processItemFunction(selectedMenuFunctionRecord.SelectFunction);
	
	// Initialize menu state timer
	menuTimer.Timer = 0;
     e3a:	10 92 ed 00 	sts	0x00ED, r1
	menuTimer.Enabled = 0;
     e3e:	ec ee       	ldi	r30, 0xEC	; 236
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	80 81       	ld	r24, Z
	menuTimer.RunOnce = 1;
     e44:	8e 7f       	andi	r24, 0xFE	; 254
     e46:	82 60       	ori	r24, 0x02	; 2
     e48:	80 83       	st	Z, r24
	
	// Initialize user timer
	userTimer.Enabled = 0;
     e4a:	e0 ef       	ldi	r30, 0xF0	; 240
     e4c:	f0 e0       	ldi	r31, 0x00	; 0
     e4e:	80 81       	ld	r24, Z
	userTimer.RunOnce = 0;
     e50:	8e 7f       	andi	r24, 0xFE	; 254
     e52:	8d 7f       	andi	r24, 0xFD	; 253
     e54:	80 83       	st	Z, r24
     e56:	08 95       	ret

00000e58 <processMenu>:
//	Main menu control, -  state function calls, jumps 
//	between menu states and indication
//	Call this function from main() with a fixed time interval.
//-----------------------------------------------------------------//
void processMenu(void)
{
     e58:	ff 92       	push	r15
     e5a:	0f 93       	push	r16
     e5c:	1f 93       	push	r17
     e5e:	cf 93       	push	r28
     e60:	df 93       	push	r29
	NextItem_t nextItem;
	uint16_t jumpCondition;
	
	processSoftTimer8b(&menuTimer);	
     e62:	8c ee       	ldi	r24, 0xEC	; 236
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	12 d3       	rcall	.+1572   	; 0x148c <processSoftTimer8b>
	
	// Compose jump condition
	jumpCondition = button_state;		
     e68:	40 91 bc 00 	lds	r20, 0x00BC
     e6c:	50 91 bd 00 	lds	r21, 0x00BD
	if (menuTimer.FTop)
     e70:	80 91 ec 00 	lds	r24, 0x00EC
     e74:	85 fd       	sbrc	r24, 5
		jumpCondition |= TMR_EXP;
     e76:	50 68       	ori	r21, 0x80	; 128
	
	// Get next menu item according to current state and jump conditions
	nextItem = getNextMenuItem(selectedMenuItemID, jumpCondition);
     e78:	b0 91 eb 00 	lds	r27, 0x00EB
     e7c:	80 e0       	ldi	r24, 0x00	; 0
     e7e:	90 e0       	ldi	r25, 0x00	; 0
	MenuJumpRecord	jRecord;
	uint8_t i;
	
	for (i = 0; i < sizeof(menuJumpSet)/sizeof(MenuJumpRecord); i++  )
	{
		readJumpRecord(&menuJumpSet[i], &jRecord);		// read full jump record
     e80:	9c 01       	movw	r18, r24
     e82:	22 0f       	add	r18, r18
     e84:	33 1f       	adc	r19, r19
     e86:	22 0f       	add	r18, r18
     e88:	33 1f       	adc	r19, r19
     e8a:	28 0f       	add	r18, r24
     e8c:	39 1f       	adc	r19, r25
     e8e:	2d 55       	subi	r18, 0x5D	; 93
     e90:	3e 4f       	sbci	r19, 0xFE	; 254
//		jRecPtr		- address of the jump record in the FLASH
//		resPtr		- address of the record to fill in the SRAM
//-----------------------------------------------------------------//
static inline void readJumpRecord(const MenuJumpRecord* jRecPtr, MenuJumpRecord* resPtr )
{
	resPtr->Item = pgm_read_byte(&jRecPtr->Item);
     e92:	f9 01       	movw	r30, r18
     e94:	a4 91       	lpm	r26, Z
	resPtr->JumpCondition = pgm_read_word(&jRecPtr->JumpCondition);
     e96:	31 96       	adiw	r30, 0x01	; 1
     e98:	65 91       	lpm	r22, Z+
     e9a:	74 91       	lpm	r23, Z
	resPtr->NextItem= pgm_read_byte(&jRecPtr->NextItem);
     e9c:	f9 01       	movw	r30, r18
     e9e:	33 96       	adiw	r30, 0x03	; 3
     ea0:	c4 91       	lpm	r28, Z
	resPtr->Flags= pgm_read_byte(&jRecPtr->Flags);
     ea2:	f9 01       	movw	r30, r18
     ea4:	34 96       	adiw	r30, 0x04	; 4
     ea6:	24 91       	lpm	r18, Z
	uint8_t i;
	
	for (i = 0; i < sizeof(menuJumpSet)/sizeof(MenuJumpRecord); i++  )
	{
		readJumpRecord(&menuJumpSet[i], &jRecord);		// read full jump record
		if (jRecord.Item == selectedItemId)				// If ID match,
     ea8:	ba 13       	cpse	r27, r26
     eaa:	15 c0       	rjmp	.+42     	; 0xed6 <processMenu+0x7e>
		{
			if ((jRecord.JumpCondition & jmpCond) != 0)		// if any of jump conditions match too,
     eac:	64 23       	and	r22, r20
     eae:	75 23       	and	r23, r21
     eb0:	67 2b       	or	r22, r23
     eb2:	89 f0       	breq	.+34     	; 0xed6 <processMenu+0x7e>
			{
				nextItem.ItemID = jRecord.NextItem;			// switch to next menu item
				nextItem.ItemTimeout = jRecord.Flags & TIMEOUT_MASK;
     eb4:	d2 2f       	mov	r29, r18
     eb6:	df 73       	andi	r29, 0x3F	; 63
				nextItem.ShiftRight = (jRecord.Flags & SHIFT_RIGHT) ? 1 : 0;
     eb8:	26 fb       	bst	r18, 6
     eba:	00 27       	eor	r16, r16
     ebc:	00 f9       	bld	r16, 0
				nextItem.ShiftLeft = (jRecord.Flags & SHIFT_LEFT) ? 1 : 0;
     ebe:	f2 2e       	mov	r15, r18
     ec0:	ff 1c       	adc	r15, r15
     ec2:	ff 24       	eor	r15, r15
     ec4:	ff 1c       	adc	r15, r15
     ec6:	10 e0       	ldi	r17, 0x00	; 0
     ec8:	f0 fa       	bst	r15, 0
     eca:	10 f9       	bld	r17, 0
     ecc:	00 fb       	bst	r16, 0
     ece:	11 f9       	bld	r17, 1
	
	// Get next menu item according to current state and jump conditions
	nextItem = getNextMenuItem(selectedMenuItemID, jumpCondition);
	
	// If next item differs from current
	if (nextItem.ItemID != selectedMenuItemID)
     ed0:	bc 13       	cpse	r27, r28
     ed2:	06 c0       	rjmp	.+12     	; 0xee0 <processMenu+0x88>
     ed4:	70 c0       	rjmp	.+224    	; 0xfb6 <processMenu+0x15e>
     ed6:	01 96       	adiw	r24, 0x01	; 1
	NextItem_t nextItem;
	nextItem.ItemID = selectedItemId;
	MenuJumpRecord	jRecord;
	uint8_t i;
	
	for (i = 0; i < sizeof(menuJumpSet)/sizeof(MenuJumpRecord); i++  )
     ed8:	8d 31       	cpi	r24, 0x1D	; 29
     eda:	91 05       	cpc	r25, r1
     edc:	89 f6       	brne	.-94     	; 0xe80 <processMenu+0x28>
     ede:	6b c0       	rjmp	.+214    	; 0xfb6 <processMenu+0x15e>
	
	// If next item differs from current
	if (nextItem.ItemID != selectedMenuItemID)
	{		
		// Call exit function for current item
		processItemFunction(selectedMenuFunctionRecord.LeaveFunction);
     ee0:	e0 91 f9 00 	lds	r30, 0x00F9
     ee4:	f0 91 fa 00 	lds	r31, 0x00FA
//	Arguments:
//		funcAddr - address of the function to run.
//-----------------------------------------------------------------//
static inline void processItemFunction(FuncPtr funcAddr)
{
	if (funcAddr != 0)
     ee8:	30 97       	sbiw	r30, 0x00	; 0
     eea:	09 f0       	breq	.+2      	; 0xeee <processMenu+0x96>
		((FuncPtr)funcAddr)();
     eec:	09 95       	icall
		// Call exit function for current item
		processItemFunction(selectedMenuFunctionRecord.LeaveFunction);
		
		// If shifting is specified, start it before calling any 
		//	new menu item functions 
		if (nextItem.ShiftRight)
     eee:	f0 fa       	bst	r15, 0
     ef0:	10 f9       	bld	r17, 0
     ef2:	00 fb       	bst	r16, 0
     ef4:	11 f9       	bld	r17, 1
     ef6:	11 ff       	sbrs	r17, 1
     ef8:	02 c0       	rjmp	.+4      	; 0xefe <processMenu+0xa6>
			startShiftingWindowRight();
     efa:	22 dc       	rcall	.-1980   	; 0x740 <startShiftingWindowRight>
     efc:	02 c0       	rjmp	.+4      	; 0xf02 <processMenu+0xaa>
		else if (nextItem.ShiftLeft)
     efe:	10 fd       	sbrc	r17, 0
			startShiftingWindowLeft();
     f00:	11 dc       	rcall	.-2014   	; 0x724 <startShiftingWindowLeft>
		
		// Select new item
		selectedMenuItemID = nextItem.ItemID;
     f02:	c0 93 eb 00 	sts	0x00EB, r28
     f06:	20 e0       	ldi	r18, 0x00	; 0
     f08:	30 e0       	ldi	r19, 0x00	; 0
static void getMenuFunctionRecord(uint8_t menuItemID, MenuFunctionRecord* menuRecord )
{
	uint8_t i;
	for (i = 0; i < sizeof(menuFunctionSet)/sizeof(MenuFunctionRecord); i++  )
	{
		readMenuRecord(&menuFunctionSet[i], menuRecord);
     f0a:	c9 01       	movw	r24, r18
     f0c:	88 0f       	add	r24, r24
     f0e:	99 1f       	adc	r25, r25
     f10:	88 0f       	add	r24, r24
     f12:	99 1f       	adc	r25, r25
     f14:	88 0f       	add	r24, r24
     f16:	99 1f       	adc	r25, r25
     f18:	82 1b       	sub	r24, r18
     f1a:	93 0b       	sbc	r25, r19
     f1c:	88 5b       	subi	r24, 0xB8	; 184
     f1e:	9e 4f       	sbci	r25, 0xFE	; 254
//		fRecPtr		- address of the function record in the FLASH
//		resPtr		- address of the record to fill in the SRAM
//-----------------------------------------------------------------//
static inline void readMenuRecord(const MenuFunctionRecord* fRecPtr, MenuFunctionRecord* resPtr )
{
	resPtr->Item = pgm_read_byte(&fRecPtr->Item);
     f20:	fc 01       	movw	r30, r24
     f22:	64 91       	lpm	r22, Z
	resPtr->SelectFunction = (FuncPtr)pgm_read_word(&fRecPtr->SelectFunction);
     f24:	31 96       	adiw	r30, 0x01	; 1
     f26:	45 91       	lpm	r20, Z+
     f28:	54 91       	lpm	r21, Z
     f2a:	b4 2f       	mov	r27, r20
     f2c:	a5 2f       	mov	r26, r21
	resPtr->RunFunction = (FuncPtr)pgm_read_word(&fRecPtr->RunFunction);
     f2e:	fc 01       	movw	r30, r24
     f30:	33 96       	adiw	r30, 0x03	; 3
     f32:	45 91       	lpm	r20, Z+
     f34:	54 91       	lpm	r21, Z
     f36:	74 2f       	mov	r23, r20
     f38:	45 2f       	mov	r20, r21
	resPtr->LeaveFunction = (FuncPtr)pgm_read_word(&fRecPtr->LeaveFunction);
     f3a:	05 96       	adiw	r24, 0x05	; 5
     f3c:	fc 01       	movw	r30, r24
     f3e:	85 91       	lpm	r24, Z+
     f40:	94 91       	lpm	r25, Z
     f42:	58 2f       	mov	r21, r24
{
	uint8_t i;
	for (i = 0; i < sizeof(menuFunctionSet)/sizeof(MenuFunctionRecord); i++  )
	{
		readMenuRecord(&menuFunctionSet[i], menuRecord);
		if (menuRecord->Item == menuItemID)
     f44:	c6 13       	cpse	r28, r22
     f46:	0f c0       	rjmp	.+30     	; 0xf66 <processMenu+0x10e>
     f48:	60 93 f4 00 	sts	0x00F4, r22
     f4c:	e5 ef       	ldi	r30, 0xF5	; 245
     f4e:	f0 e0       	ldi	r31, 0x00	; 0
     f50:	b0 83       	st	Z, r27
     f52:	a1 83       	std	Z+1, r26	; 0x01
     f54:	e7 ef       	ldi	r30, 0xF7	; 247
     f56:	f0 e0       	ldi	r31, 0x00	; 0
     f58:	70 83       	st	Z, r23
     f5a:	41 83       	std	Z+1, r20	; 0x01
     f5c:	e9 ef       	ldi	r30, 0xF9	; 249
     f5e:	f0 e0       	ldi	r31, 0x00	; 0
     f60:	50 83       	st	Z, r21
     f62:	91 83       	std	Z+1, r25	; 0x01
     f64:	14 c0       	rjmp	.+40     	; 0xf8e <processMenu+0x136>
     f66:	2f 5f       	subi	r18, 0xFF	; 255
     f68:	3f 4f       	sbci	r19, 0xFF	; 255
//	Output:
//-----------------------------------------------------------------//
static void getMenuFunctionRecord(uint8_t menuItemID, MenuFunctionRecord* menuRecord )
{
	uint8_t i;
	for (i = 0; i < sizeof(menuFunctionSet)/sizeof(MenuFunctionRecord); i++  )
     f6a:	2d 30       	cpi	r18, 0x0D	; 13
     f6c:	31 05       	cpc	r19, r1
     f6e:	09 f0       	breq	.+2      	; 0xf72 <processMenu+0x11a>
     f70:	cc cf       	rjmp	.-104    	; 0xf0a <processMenu+0xb2>
     f72:	60 93 f4 00 	sts	0x00F4, r22
     f76:	e5 ef       	ldi	r30, 0xF5	; 245
     f78:	f0 e0       	ldi	r31, 0x00	; 0
     f7a:	b0 83       	st	Z, r27
     f7c:	a1 83       	std	Z+1, r26	; 0x01
     f7e:	e7 ef       	ldi	r30, 0xF7	; 247
     f80:	f0 e0       	ldi	r31, 0x00	; 0
     f82:	70 83       	st	Z, r23
     f84:	41 83       	std	Z+1, r20	; 0x01
     f86:	e9 ef       	ldi	r30, 0xF9	; 249
     f88:	f0 e0       	ldi	r31, 0x00	; 0
     f8a:	50 83       	st	Z, r21
     f8c:	91 83       	std	Z+1, r25	; 0x01
		selectedMenuItemID = nextItem.ItemID;
		
		// Load from FLASH and save function pointers
		getMenuFunctionRecord(selectedMenuItemID, &selectedMenuFunctionRecord);
		// Call select function for next item
		processItemFunction(selectedMenuFunctionRecord.SelectFunction);
     f8e:	e0 91 f5 00 	lds	r30, 0x00F5
     f92:	f0 91 f6 00 	lds	r31, 0x00F6
//	Arguments:
//		funcAddr - address of the function to run.
//-----------------------------------------------------------------//
static inline void processItemFunction(FuncPtr funcAddr)
{
	if (funcAddr != 0)
     f96:	30 97       	sbiw	r30, 0x00	; 0
     f98:	09 f0       	breq	.+2      	; 0xf9c <processMenu+0x144>
		((FuncPtr)funcAddr)();
     f9a:	09 95       	icall
		// Load from FLASH and save function pointers
		getMenuFunctionRecord(selectedMenuItemID, &selectedMenuFunctionRecord);
		// Call select function for next item
		processItemFunction(selectedMenuFunctionRecord.SelectFunction);
		// Start timer if timeout is enabled
		if (nextItem.ItemTimeout != 0)
     f9c:	dd 23       	and	r29, r29
     f9e:	a9 f0       	breq	.+42     	; 0xfca <processMenu+0x172>
		{
			menuTimer.Top = nextItem.ItemTimeout * MENU_TIMEOUT_MULT;
     fa0:	dd 0f       	add	r29, r29
     fa2:	d0 93 ee 00 	sts	0x00EE, r29
			menuTimer.Timer = 0;
     fa6:	10 92 ed 00 	sts	0x00ED, r1
			menuTimer.Enabled = 1;	
     faa:	ec ee       	ldi	r30, 0xEC	; 236
     fac:	f0 e0       	ldi	r31, 0x00	; 0
     fae:	80 81       	ld	r24, Z
     fb0:	81 60       	ori	r24, 0x01	; 1
     fb2:	80 83       	st	Z, r24
     fb4:	0a c0       	rjmp	.+20     	; 0xfca <processMenu+0x172>
		}
		
	}
	else
	{
		processSoftTimer8b(&userTimer);
     fb6:	80 ef       	ldi	r24, 0xF0	; 240
     fb8:	90 e0       	ldi	r25, 0x00	; 0
     fba:	68 d2       	rcall	.+1232   	; 0x148c <processSoftTimer8b>
		// Stay at previous item
		processItemFunction(selectedMenuFunctionRecord.RunFunction);
     fbc:	e0 91 f7 00 	lds	r30, 0x00F7
     fc0:	f0 91 f8 00 	lds	r31, 0x00F8
//	Arguments:
//		funcAddr - address of the function to run.
//-----------------------------------------------------------------//
static inline void processItemFunction(FuncPtr funcAddr)
{
	if (funcAddr != 0)
     fc4:	30 97       	sbiw	r30, 0x00	; 0
     fc6:	09 f0       	breq	.+2      	; 0xfca <processMenu+0x172>
		((FuncPtr)funcAddr)();
     fc8:	09 95       	icall
	{
		processSoftTimer8b(&userTimer);
		// Stay at previous item
		processItemFunction(selectedMenuFunctionRecord.RunFunction);
	}	
}
     fca:	df 91       	pop	r29
     fcc:	cf 91       	pop	r28
     fce:	1f 91       	pop	r17
     fd0:	0f 91       	pop	r16
     fd2:	ff 90       	pop	r15
     fd4:	08 95       	ret

00000fd6 <u16toa_align_right>:
// Converts uint16_t value into decimal string with right alignment
// len = number of digits output (without terminating '\0')
// len[7] = 1 -> no terminating '\0' at buffer[len]
// fill_char -> char used for string padding
void u16toa_align_right(uint16_t val, char *buffer, uint8_t len,char fill_char)
{
     fd6:	cf 93       	push	r28
     fd8:	df 93       	push	r29
     fda:	fc 01       	movw	r30, r24
     fdc:	52 2f       	mov	r21, r18
	if (len & 0x80)
     fde:	44 23       	and	r20, r20
     fe0:	2c f4       	brge	.+10     	; 0xfec <u16toa_align_right+0x16>
	{
		len = len & 0x7F;
     fe2:	4f 77       	andi	r20, 0x7F	; 127
		buffer += len;	
     fe4:	eb 01       	movw	r28, r22
     fe6:	c4 0f       	add	r28, r20
     fe8:	d1 1d       	adc	r29, r1
     fea:	04 c0       	rjmp	.+8      	; 0xff4 <u16toa_align_right+0x1e>
	}
	else
	{
		buffer += len;	
     fec:	eb 01       	movw	r28, r22
     fee:	c4 0f       	add	r28, r20
     ff0:	d1 1d       	adc	r29, r1
		*buffer = 0;
     ff2:	18 82       	st	Y, r1
	}
	
	do
	{
		*--buffer = val % 10 + '0';
     ff4:	9f 01       	movw	r18, r30
     ff6:	ad ec       	ldi	r26, 0xCD	; 205
     ff8:	bc ec       	ldi	r27, 0xCC	; 204
     ffa:	8f d4       	rcall	.+2334   	; 0x191a <__umulhisi3>
     ffc:	96 95       	lsr	r25
     ffe:	87 95       	ror	r24
    1000:	96 95       	lsr	r25
    1002:	87 95       	ror	r24
    1004:	96 95       	lsr	r25
    1006:	87 95       	ror	r24
    1008:	dc 01       	movw	r26, r24
    100a:	aa 0f       	add	r26, r26
    100c:	bb 1f       	adc	r27, r27
    100e:	bc 01       	movw	r22, r24
    1010:	66 0f       	add	r22, r22
    1012:	77 1f       	adc	r23, r23
    1014:	66 0f       	add	r22, r22
    1016:	77 1f       	adc	r23, r23
    1018:	66 0f       	add	r22, r22
    101a:	77 1f       	adc	r23, r23
    101c:	6a 0f       	add	r22, r26
    101e:	7b 1f       	adc	r23, r27
    1020:	e6 1b       	sub	r30, r22
    1022:	f7 0b       	sbc	r31, r23
    1024:	e0 5d       	subi	r30, 0xD0	; 208
    1026:	ea 93       	st	-Y, r30
		val /= 10;
    1028:	fc 01       	movw	r30, r24
		len--;
    102a:	41 50       	subi	r20, 0x01	; 1
	}
	while ((val != 0) && len);
    102c:	00 97       	sbiw	r24, 0x00	; 0
    102e:	29 f4       	brne	.+10     	; 0x103a <u16toa_align_right+0x64>
	
	// Padding
	while(len--)
    1030:	84 2f       	mov	r24, r20
    1032:	81 50       	subi	r24, 0x01	; 1
    1034:	41 11       	cpse	r20, r1
    1036:	04 c0       	rjmp	.+8      	; 0x1040 <u16toa_align_right+0x6a>
    1038:	07 c0       	rjmp	.+14     	; 0x1048 <u16toa_align_right+0x72>
	{
		*--buffer = val % 10 + '0';
		val /= 10;
		len--;
	}
	while ((val != 0) && len);
    103a:	41 11       	cpse	r20, r1
    103c:	db cf       	rjmp	.-74     	; 0xff4 <u16toa_align_right+0x1e>
    103e:	04 c0       	rjmp	.+8      	; 0x1048 <u16toa_align_right+0x72>
    1040:	fe 01       	movw	r30, r28
	
	// Padding
	while(len--)
		*--buffer = fill_char;
    1042:	52 93       	st	-Z, r21
		len--;
	}
	while ((val != 0) && len);
	
	// Padding
	while(len--)
    1044:	81 50       	subi	r24, 0x01	; 1
    1046:	e8 f7       	brcc	.-6      	; 0x1042 <u16toa_align_right+0x6c>
		*--buffer = fill_char;
}
    1048:	df 91       	pop	r29
    104a:	cf 91       	pop	r28
    104c:	08 95       	ret

0000104e <init_system>:


void init_system()
{
	// Setup Port D
	PORTD = 0; //(1<<PD_SYNCA | 1<<PD_SYNCB);
    104e:	12 ba       	out	0x12, r1	; 18
	DDRD = (1<<PD_TXD | 1<<PD_M1 | 1<<PD_M2 | 1<<PD_HEATER | 1<<PD_HEAT_INDIC );
    1050:	8e e3       	ldi	r24, 0x3E	; 62
    1052:	81 bb       	out	0x11, r24	; 17
	
	// Setup Port B
	PORTB = 0;
    1054:	18 ba       	out	0x18, r1	; 24
	DDRB = (1<<PB_BEEPER | 1<<PB_LED_DOUT | 1<<PB_LED_CLK | 1<<PB_SEGF | 1<<PB_SEGG | 1<<PB_SEGH);
    1056:	8f e3       	ldi	r24, 0x3F	; 63
    1058:	87 bb       	out	0x17, r24	; 23
	
	PORTC = 0;
    105a:	15 ba       	out	0x15, r1	; 21
	DDRC = (1<<PC_SEGA | 1<<PC_SEGB | 1<<PC_SEGC | 1<<PC_SEGD | 1<<PC_SEGE);	
    105c:	8f e1       	ldi	r24, 0x1F	; 31
    105e:	84 bb       	out	0x14, r24	; 20

	// Setup timer0
	// 1/1024 prescaler, T=64us @16MHz
	TCCR0 = (1<<CS02 | 0<<CS01 | 1<<CS00);
    1060:	85 e0       	ldi	r24, 0x05	; 5
    1062:	83 bf       	out	0x33, r24	; 51
	// Start 256 * 64us = 16384us interval
	TCNT0 = 0;
    1064:	12 be       	out	0x32, r1	; 50
	// Clear interrupt flag
	TIFR |= (1<<TOV0);
    1066:	88 b7       	in	r24, 0x38	; 56
    1068:	81 60       	ori	r24, 0x01	; 1
    106a:	88 bf       	out	0x38, r24	; 56
	// Enable interrupts from timer 0
	TIMSK |= (1<<TOIE0);
    106c:	89 b7       	in	r24, 0x39	; 57
    106e:	81 60       	ori	r24, 0x01	; 1
    1070:	89 bf       	out	0x39, r24	; 57
	
	// Setup timer2 as 1ms system frequency generator
	// 1/64 prescaler, CTC mode, OC2 disconnected
	TCCR2 = (1<<CS22 | 1<<WGM21);
    1072:	8c e0       	ldi	r24, 0x0C	; 12
    1074:	85 bd       	out	0x25, r24	; 37
	OCR2 = 249;
    1076:	89 ef       	ldi	r24, 0xF9	; 249
    1078:	83 bd       	out	0x23, r24	; 35
	TIMSK |= (1<<OCIE2);
    107a:	89 b7       	in	r24, 0x39	; 57
    107c:	80 68       	ori	r24, 0x80	; 128
    107e:	89 bf       	out	0x39, r24	; 57
	
	// Setup timer1 as beeper frequency generator
	// CTC mode, 1/64 prescaler
	TCCR1A = 0;
    1080:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = (1<<WGM12 | 1<<CS11 | 1<<CS10);
    1082:	8b e0       	ldi	r24, 0x0B	; 11
    1084:	8e bd       	out	0x2e, r24	; 46
	// 1kHz beeper frequency default
	OCR1A = 127;
    1086:	8f e7       	ldi	r24, 0x7F	; 127
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	9b bd       	out	0x2b, r25	; 43
    108c:	8a bd       	out	0x2a, r24	; 42

	// Setup AC sync comparator
	// Interrupt on output toggle
	ACSR |= (1<<ACI);
    108e:	44 9a       	sbi	0x08, 4	; 8
	ACSR = (1<<ACIE | 0<<ACIS1 | 0<<ACIS0);
    1090:	88 e0       	ldi	r24, 0x08	; 8
    1092:	88 b9       	out	0x08, r24	; 8
	
	// Setup ADC
	// Internal Vref + cap, input ADC5, 
	ADMUX = (1<<REFS1 | 1<<REFS0 | 0<<MUX3 | 1<<MUX2 | 0<<MUX1 | 1<<MUX0 );
    1094:	85 ec       	ldi	r24, 0xC5	; 197
    1096:	87 b9       	out	0x07, r24	; 7
	// Prescaler = 128
	ADCSRA = (1<<ADEN |/* 1<<ADFR |*/  1<<ADIE | 1<<ADPS2 | 1<<ADPS1 | 1<<ADPS0);
    1098:	8f e8       	ldi	r24, 0x8F	; 143
    109a:	86 b9       	out	0x06, r24	; 6
	
	// Setup USART
	// Double speed
	UCSRA = (1<<U2X);
    109c:	82 e0       	ldi	r24, 0x02	; 2
    109e:	8b b9       	out	0x0b, r24	; 11
	UCSRB = (1<<RXEN | 1<<TXEN | 0<<UCSZ2);
    10a0:	88 e1       	ldi	r24, 0x18	; 24
    10a2:	8a b9       	out	0x0a, r24	; 10
	// No parity, 1 stop bit, 8 bit
	UCSRC = (1<<URSEL | 0<<UPM1 | 0<<UPM0 | 0<<USBS | 1<<UCSZ1 | 1<<UCSZ0);
    10a4:	86 e8       	ldi	r24, 0x86	; 134
    10a6:	80 bd       	out	0x20, r24	; 32
	// 57600 @16MHz, 2x
	UBRRH=0x00;
    10a8:	10 bc       	out	0x20, r1	; 32
	UBRRL=0x22;
    10aa:	82 e2       	ldi	r24, 0x22	; 34
    10ac:	89 b9       	out	0x09, r24	; 9
    10ae:	08 95       	ret

000010b0 <main>:




int main(void)
{
    10b0:	cf 93       	push	r28
    10b2:	df 93       	push	r29
    10b4:	cd b7       	in	r28, 0x3d	; 61
    10b6:	de b7       	in	r29, 0x3e	; 62
    10b8:	2a 97       	sbiw	r28, 0x0a	; 10
    10ba:	0f b6       	in	r0, 0x3f	; 63
    10bc:	f8 94       	cli
    10be:	de bf       	out	0x3e, r29	; 62
    10c0:	0f be       	out	0x3f, r0	; 63
    10c2:	cd bf       	out	0x3d, r28	; 61
	uint8_t temp8u = 0x00;
	uint8_t uart_log_timeout_counter = 0;
	uint16_t uart_log_counter = 0;
	
	// Initialize IO
	init_system();
    10c4:	c4 df       	rcall	.-120    	; 0x104e <init_system>
	
	// Restore params
	restoreGlobalParams();
    10c6:	29 da       	rcall	.-2990   	; 0x51a <restoreGlobalParams>
	
	// Initialize LED indicator
	initLedIndicator();
    10c8:	49 db       	rcall	.-2414   	; 0x75c <initLedIndicator>
	// Enable interrupts
	sei();
    10ca:	78 94       	sei
	
	// Beep
	//SetBeeperFreq(1000);
	//StartBeep(200);
	
	InitMenu();
    10cc:	68 de       	rcall	.-816    	; 0xd9e <InitMenu>

	setMotorDirection(ROLL_FWD);
    10ce:	81 e0       	ldi	r24, 0x01	; 1
    10d0:	75 d0       	rcall	.+234    	; 0x11bc <setMotorDirection>
	
	//button_state = BD_UP;
	//processMenu();
	
	printLedBuffer(0,"      ");
    10d2:	6e e9       	ldi	r22, 0x9E	; 158
    10d4:	70 e0       	ldi	r23, 0x00	; 0
    10d6:	80 e0       	ldi	r24, 0x00	; 0
    10d8:	64 db       	rcall	.-2360   	; 0x7a2 <printLedBuffer>
int main(void)
{
	char str[10];
	uint8_t temp8u = 0x00;
	uint8_t uart_log_timeout_counter = 0;
	uint16_t uart_log_counter = 0;
    10da:	e1 2c       	mov	r14, r1
    10dc:	f1 2c       	mov	r15, r1

int main(void)
{
	char str[10];
	uint8_t temp8u = 0x00;
	uint8_t uart_log_timeout_counter = 0;
    10de:	d1 2c       	mov	r13, r1
	printLedBuffer(0,"      ");
	
    while(1)
    {
		
		if (menuUpdateTimer.FOvfl)
    10e0:	09 e6       	ldi	r16, 0x69	; 105
    10e2:	10 e0       	ldi	r17, 0x00	; 0
				//---------------------------------//
				// Function is called every 100ms
				// UART message is sent every second
				if (uart_log_timeout_counter == 9)
				{
					uart_log_timeout_counter = 0;
    10e4:	c1 2c       	mov	r12, r1
	printLedBuffer(0,"      ");
	
    while(1)
    {
		
		if (menuUpdateTimer.FOvfl)
    10e6:	f8 01       	movw	r30, r16
    10e8:	80 81       	ld	r24, Z
    10ea:	86 ff       	sbrs	r24, 6
    10ec:	fc cf       	rjmp	.-8      	; 0x10e6 <main+0x36>
		{
			// Get new temperature measurement
			update_filtered_adc();
    10ee:	d0 d8       	rcall	.-3680   	; 0x290 <update_filtered_adc>
			
			// Get new button state
			process_buttons();
    10f0:	30 d9       	rcall	.-3488   	; 0x352 <process_buttons>
			
			// Give audio feedback
			if (button_state & BL_MENU)
    10f2:	20 91 bc 00 	lds	r18, 0x00BC
    10f6:	30 91 bd 00 	lds	r19, 0x00BD
    10fa:	31 ff       	sbrs	r19, 1
    10fc:	07 c0       	rjmp	.+14     	; 0x110c <main+0x5c>
			{
				SetBeeperFreq(800);
    10fe:	80 e2       	ldi	r24, 0x20	; 32
    1100:	93 e0       	ldi	r25, 0x03	; 3
    1102:	f2 d1       	rcall	.+996    	; 0x14e8 <SetBeeperFreq>
				StartBeep(40);
    1104:	88 e2       	ldi	r24, 0x28	; 40
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	10 d2       	rcall	.+1056   	; 0x152a <StartBeep>
    110a:	0a c0       	rjmp	.+20     	; 0x1120 <main+0x70>
			}
			else if (button_action_down & (BD_MENU | BD_UP | BD_DOWN | BD_HEATCTRL))
    110c:	80 91 bb 00 	lds	r24, 0x00BB
    1110:	87 74       	andi	r24, 0x47	; 71
    1112:	31 f0       	breq	.+12     	; 0x1120 <main+0x70>
			{
				SetBeeperFreq(1000);
    1114:	88 ee       	ldi	r24, 0xE8	; 232
    1116:	93 e0       	ldi	r25, 0x03	; 3
    1118:	e7 d1       	rcall	.+974    	; 0x14e8 <SetBeeperFreq>
				StartBeep(40);
    111a:	88 e2       	ldi	r24, 0x28	; 40
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	05 d2       	rcall	.+1034   	; 0x152a <StartBeep>
			}	
			

			// Process user menu states, settings and indication
			processMenu();
    1120:	9b de       	rcall	.-714    	; 0xe58 <processMenu>
			
			// Process cyclic rolling, direction control
			processRollControl();	
    1122:	8a d9       	rcall	.-3308   	; 0x438 <processRollControl>
			
			// Process heater regulation
			processHeaterControl();
    1124:	e2 d9       	rcall	.-3132   	; 0x4ea <processHeaterControl>
		


			if (menuUpdateTimer.FA_TGL)
    1126:	f8 01       	movw	r30, r16
    1128:	80 81       	ld	r24, Z
    112a:	82 ff       	sbrs	r24, 2
    112c:	32 c0       	rjmp	.+100    	; 0x1192 <main+0xe2>
				//---------------------------------//
				// Log to UART
				//---------------------------------//
				// Function is called every 100ms
				// UART message is sent every second
				if (uart_log_timeout_counter == 9)
    112e:	f9 e0       	ldi	r31, 0x09	; 9
    1130:	df 12       	cpse	r13, r31
    1132:	2e c0       	rjmp	.+92     	; 0x1190 <main+0xe0>
				{
					uart_log_timeout_counter = 0;
					
					
					u16toa_align_right(uart_log_counter,str,5,' ');
    1134:	20 e2       	ldi	r18, 0x20	; 32
    1136:	45 e0       	ldi	r20, 0x05	; 5
    1138:	be 01       	movw	r22, r28
    113a:	6f 5f       	subi	r22, 0xFF	; 255
    113c:	7f 4f       	sbci	r23, 0xFF	; 255
    113e:	c7 01       	movw	r24, r14
    1140:	4a df       	rcall	.-364    	; 0xfd6 <u16toa_align_right>
					USART_sendstr(str);
    1142:	ce 01       	movw	r24, r28
    1144:	01 96       	adiw	r24, 0x01	; 1
    1146:	38 d2       	rcall	.+1136   	; 0x15b8 <USART_sendstr>
					USART_sendstr("     ");
    1148:	8f e9       	ldi	r24, 0x9F	; 159
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	35 d2       	rcall	.+1130   	; 0x15b8 <USART_sendstr>
					
					u16toa_align_right(adc_filtered_value,str,5,' ');
    114e:	20 e2       	ldi	r18, 0x20	; 32
    1150:	45 e0       	ldi	r20, 0x05	; 5
    1152:	be 01       	movw	r22, r28
    1154:	6f 5f       	subi	r22, 0xFF	; 255
    1156:	7f 4f       	sbci	r23, 0xFF	; 255
    1158:	80 91 cf 00 	lds	r24, 0x00CF
    115c:	90 91 d0 00 	lds	r25, 0x00D0
    1160:	3a df       	rcall	.-396    	; 0xfd6 <u16toa_align_right>
					USART_sendstr(str);
    1162:	ce 01       	movw	r24, r28
    1164:	01 96       	adiw	r24, 0x01	; 1
    1166:	28 d2       	rcall	.+1104   	; 0x15b8 <USART_sendstr>
					USART_sendstr("     ");
    1168:	8f e9       	ldi	r24, 0x9F	; 159
    116a:	90 e0       	ldi	r25, 0x00	; 0
    116c:	25 d2       	rcall	.+1098   	; 0x15b8 <USART_sendstr>
					
					if (heaterState & HEATER_ENABLED)
    116e:	80 91 c8 00 	lds	r24, 0x00C8
    1172:	86 ff       	sbrs	r24, 6
    1174:	03 c0       	rjmp	.+6      	; 0x117c <main+0xcc>
					USART_send('1');
    1176:	81 e3       	ldi	r24, 0x31	; 49
    1178:	1a d2       	rcall	.+1076   	; 0x15ae <USART_send>
    117a:	02 c0       	rjmp	.+4      	; 0x1180 <main+0xd0>
					else
					USART_send('0');
    117c:	80 e3       	ldi	r24, 0x30	; 48
    117e:	17 d2       	rcall	.+1070   	; 0x15ae <USART_send>
					
					USART_sendstr("\n\r");
    1180:	85 ea       	ldi	r24, 0xA5	; 165
    1182:	90 e0       	ldi	r25, 0x00	; 0
    1184:	19 d2       	rcall	.+1074   	; 0x15b8 <USART_sendstr>
					
					uart_log_counter++;
    1186:	8f ef       	ldi	r24, 0xFF	; 255
    1188:	e8 1a       	sub	r14, r24
    118a:	f8 0a       	sbc	r15, r24
				//---------------------------------//
				// Function is called every 100ms
				// UART message is sent every second
				if (uart_log_timeout_counter == 9)
				{
					uart_log_timeout_counter = 0;
    118c:	dc 2c       	mov	r13, r12
    118e:	01 c0       	rjmp	.+2      	; 0x1192 <main+0xe2>
					uart_log_counter++;
					
				}
				else
				{
					uart_log_timeout_counter++;
    1190:	d3 94       	inc	r13
			}
			
			
			
			
			menuUpdateTimer.FOvfl = 0;	
    1192:	f8 01       	movw	r30, r16
    1194:	80 81       	ld	r24, Z
    1196:	8f 7b       	andi	r24, 0xBF	; 191
    1198:	80 83       	st	Z, r24
    119a:	a5 cf       	rjmp	.-182    	; 0x10e6 <main+0x36>

0000119c <setHeaterControl>:


// User function to control heater intensity
inline void setHeaterControl(uint8_t value)
{
	ctrl_heater = value;
    119c:	80 93 c9 00 	sts	0x00C9, r24
	heaterState &= ~READY_TO_UPDATE_HEATER;
    11a0:	90 91 c8 00 	lds	r25, 0x00C8
    11a4:	29 2f       	mov	r18, r25
    11a6:	2f 77       	andi	r18, 0x7F	; 127
	
	if (ctrl_heater)
    11a8:	88 23       	and	r24, r24
    11aa:	21 f0       	breq	.+8      	; 0x11b4 <setHeaterControl+0x18>
		heaterState |= HEATER_ENABLED;
    11ac:	20 64       	ori	r18, 0x40	; 64
    11ae:	20 93 c8 00 	sts	0x00C8, r18
    11b2:	08 95       	ret
	else
		heaterState &= ~HEATER_ENABLED;	
    11b4:	9f 73       	andi	r25, 0x3F	; 63
    11b6:	90 93 c8 00 	sts	0x00C8, r25
    11ba:	08 95       	ret

000011bc <setMotorDirection>:
	
// User function to control motor rotation
void setMotorDirection(uint8_t dir)
{
	// Disable interrupts from timer0 
	TIMSK &= ~(1<<TOIE0);
    11bc:	99 b7       	in	r25, 0x39	; 57
    11be:	9e 7f       	andi	r25, 0xFE	; 254
    11c0:	99 bf       	out	0x39, r25	; 57
		
	newDirReq = dir;	// save new direction request
    11c2:	80 93 ca 00 	sts	0x00CA, r24
	
	if (dir & ROLL_FWD)
    11c6:	80 ff       	sbrs	r24, 0
    11c8:	09 c0       	rjmp	.+18     	; 0x11dc <setMotorDirection+0x20>
		bottomPoint = rollPoint;
    11ca:	80 91 62 00 	lds	r24, 0x0062
    11ce:	90 91 63 00 	lds	r25, 0x0063
    11d2:	90 93 65 00 	sts	0x0065, r25
    11d6:	80 93 64 00 	sts	0x0064, r24
    11da:	0a c0       	rjmp	.+20     	; 0x11f0 <setMotorDirection+0x34>
	else if (dir & ROLL_REV)
    11dc:	81 ff       	sbrs	r24, 1
    11de:	08 c0       	rjmp	.+16     	; 0x11f0 <setMotorDirection+0x34>
		topPoint = rollPoint;
    11e0:	80 91 62 00 	lds	r24, 0x0062
    11e4:	90 91 63 00 	lds	r25, 0x0063
    11e8:	90 93 67 00 	sts	0x0067, r25
    11ec:	80 93 66 00 	sts	0x0066, r24
		

	// Enable interrupts from timer 0
	TIMSK |= (1<<TOIE0);	
    11f0:	89 b7       	in	r24, 0x39	; 57
    11f2:	81 60       	ori	r24, 0x01	; 1
    11f4:	89 bf       	out	0x39, r24	; 57
    11f6:	08 95       	ret

000011f8 <startCycleRolling>:


uint8_t startCycleRolling(void)
{
	// Disable interrupts from timer0 
	TIMSK &= ~(1<<TOIE0);
    11f8:	89 b7       	in	r24, 0x39	; 57
    11fa:	8e 7f       	andi	r24, 0xFE	; 254
    11fc:	89 bf       	out	0x39, r24	; 57
	
	if ( ((rollPoint + CYCLE_SAFE_MARGIN) <= topPoint) && 
    11fe:	80 91 62 00 	lds	r24, 0x0062
    1202:	90 91 63 00 	lds	r25, 0x0063
    1206:	ac 01       	movw	r20, r24
    1208:	46 5f       	subi	r20, 0xF6	; 246
    120a:	5f 4f       	sbci	r21, 0xFF	; 255
    120c:	20 91 66 00 	lds	r18, 0x0066
    1210:	30 91 67 00 	lds	r19, 0x0067
    1214:	24 17       	cp	r18, r20
    1216:	35 07       	cpc	r19, r21
    1218:	80 f0       	brcs	.+32     	; 0x123a <startCycleRolling+0x42>
		 ((rollPoint - CYCLE_SAFE_MARGIN) >= bottomPoint) )
    121a:	0a 97       	sbiw	r24, 0x0a	; 10
uint8_t startCycleRolling(void)
{
	// Disable interrupts from timer0 
	TIMSK &= ~(1<<TOIE0);
	
	if ( ((rollPoint + CYCLE_SAFE_MARGIN) <= topPoint) && 
    121c:	20 91 64 00 	lds	r18, 0x0064
    1220:	30 91 65 00 	lds	r19, 0x0065
    1224:	82 17       	cp	r24, r18
    1226:	93 07       	cpc	r25, r19
    1228:	40 f0       	brcs	.+16     	; 0x123a <startCycleRolling+0x42>
		 ((rollPoint - CYCLE_SAFE_MARGIN) >= bottomPoint) )
	{
		rollState |= ROLL_CYCLE;
    122a:	80 91 c7 00 	lds	r24, 0x00C7
    122e:	84 60       	ori	r24, 0x04	; 4
    1230:	80 93 c7 00 	sts	0x00C7, r24
		activeRollCycle = 1;
    1234:	81 e0       	ldi	r24, 0x01	; 1
    1236:	80 93 fb 00 	sts	0x00FB, r24
	}
	
	// Enable interrupts from timer 0
	TIMSK |= (1<<TOIE0);
    123a:	89 b7       	in	r24, 0x39	; 57
    123c:	81 60       	ori	r24, 0x01	; 1
    123e:	89 bf       	out	0x39, r24	; 57
	
	return (rollState & ROLL_CYCLE);
    1240:	80 91 c7 00 	lds	r24, 0x00C7
}
    1244:	84 70       	andi	r24, 0x04	; 4
    1246:	08 95       	ret

00001248 <stopCycleRolling>:

void stopCycleRolling(void)
{
	// Disable interrupts from timer0 
	TIMSK &= ~(1<<TOIE0);
    1248:	89 b7       	in	r24, 0x39	; 57
    124a:	8e 7f       	andi	r24, 0xFE	; 254
    124c:	89 bf       	out	0x39, r24	; 57
	
	rollState &= ~ROLL_CYCLE;
    124e:	80 91 c7 00 	lds	r24, 0x00C7
    1252:	8b 7f       	andi	r24, 0xFB	; 251
    1254:	80 93 c7 00 	sts	0x00C7, r24
	
	// Enable interrupts from timer 0
	TIMSK |= (1<<TOIE0);
    1258:	89 b7       	in	r24, 0x39	; 57
    125a:	81 60       	ori	r24, 0x01	; 1
    125c:	89 bf       	out	0x39, r24	; 57
    125e:	08 95       	ret

00001260 <isTopPointValid>:


// Used for indication
uint8_t isTopPointValid(void)
{
	return (	rollPoint <= topPoint	);	
    1260:	81 e0       	ldi	r24, 0x01	; 1
    1262:	40 91 62 00 	lds	r20, 0x0062
    1266:	50 91 63 00 	lds	r21, 0x0063
    126a:	20 91 66 00 	lds	r18, 0x0066
    126e:	30 91 67 00 	lds	r19, 0x0067
    1272:	24 17       	cp	r18, r20
    1274:	35 07       	cpc	r19, r21
    1276:	08 f4       	brcc	.+2      	; 0x127a <isTopPointValid+0x1a>
    1278:	80 e0       	ldi	r24, 0x00	; 0
}
    127a:	08 95       	ret

0000127c <isBottomPointValid>:

uint8_t isBottomPointValid(void)
{
	return (	rollPoint >= bottomPoint	);	
    127c:	81 e0       	ldi	r24, 0x01	; 1
    127e:	40 91 62 00 	lds	r20, 0x0062
    1282:	50 91 63 00 	lds	r21, 0x0063
    1286:	20 91 64 00 	lds	r18, 0x0064
    128a:	30 91 65 00 	lds	r19, 0x0065
    128e:	42 17       	cp	r20, r18
    1290:	53 07       	cpc	r21, r19
    1292:	08 f4       	brcc	.+2      	; 0x1296 <isBottomPointValid+0x1a>
    1294:	80 e0       	ldi	r24, 0x00	; 0
}
    1296:	08 95       	ret

00001298 <__vector_16>:




ISR(ANA_COMP_vect)
{
    1298:	1f 92       	push	r1
    129a:	0f 92       	push	r0
    129c:	0f b6       	in	r0, 0x3f	; 63
    129e:	0f 92       	push	r0
    12a0:	11 24       	eor	r1, r1
    12a2:	8f 93       	push	r24
    12a4:	9f 93       	push	r25
	// Once triggered, disable further comparator interrupt
	ACSR &= ~(1<<ACIE);
    12a6:	43 98       	cbi	0x08, 3	; 8
	// Turn on heater TRIAC
	if (heater_cnt < ctrl_heater_sync)
    12a8:	90 91 cb 00 	lds	r25, 0x00CB
    12ac:	80 91 cc 00 	lds	r24, 0x00CC
    12b0:	98 17       	cp	r25, r24
    12b2:	20 f4       	brcc	.+8      	; 0x12bc <__vector_16+0x24>
		PORTD |= (1<<PD_HEATER | 1<<PD_HEAT_INDIC);	// Direct heater indication
    12b4:	82 b3       	in	r24, 0x12	; 18
    12b6:	80 63       	ori	r24, 0x30	; 48
    12b8:	82 bb       	out	0x12, r24	; 18
    12ba:	01 c0       	rjmp	.+2      	; 0x12be <__vector_16+0x26>
	else
		PORTD &= ~(1<<PD_HEAT_INDIC);
    12bc:	95 98       	cbi	0x12, 5	; 18
	// Reprogram timer0
	TCNT0 = 256 - TRIAC_IMPULSE_TIME;		// Triac gate impulse time
    12be:	86 ef       	ldi	r24, 0xF6	; 246
    12c0:	82 bf       	out	0x32, r24	; 50
	// Modify state	
	p_state &= ~STATE_MASK;					// Start new state machine cycle
    12c2:	80 91 68 00 	lds	r24, 0x0068
    12c6:	80 7f       	andi	r24, 0xF0	; 240
	p_state ^= HALF_PERIOD_FLAG;			// Toggle flag
    12c8:	80 58       	subi	r24, 0x80	; 128
    12ca:	80 93 68 00 	sts	0x0068, r24
	
}
    12ce:	9f 91       	pop	r25
    12d0:	8f 91       	pop	r24
    12d2:	0f 90       	pop	r0
    12d4:	0f be       	out	0x3f, r0	; 63
    12d6:	0f 90       	pop	r0
    12d8:	1f 90       	pop	r1
    12da:	18 95       	reti

000012dc <__vector_9>:



ISR(TIMER0_OVF_vect)
{
    12dc:	1f 92       	push	r1
    12de:	0f 92       	push	r0
    12e0:	0f b6       	in	r0, 0x3f	; 63
    12e2:	0f 92       	push	r0
    12e4:	11 24       	eor	r1, r1
    12e6:	2f 93       	push	r18
    12e8:	3f 93       	push	r19
    12ea:	4f 93       	push	r20
    12ec:	5f 93       	push	r21
    12ee:	6f 93       	push	r22
    12f0:	7f 93       	push	r23
    12f2:	8f 93       	push	r24
    12f4:	9f 93       	push	r25
    12f6:	af 93       	push	r26
    12f8:	bf 93       	push	r27
    12fa:	ef 93       	push	r30
    12fc:	ff 93       	push	r31
	uint8_t temp;
	
	switch(p_state & STATE_MASK)
    12fe:	80 91 68 00 	lds	r24, 0x0068
    1302:	8f 70       	andi	r24, 0x0F	; 15
    1304:	81 30       	cpi	r24, 0x01	; 1
    1306:	51 f0       	breq	.+20     	; 0x131c <__vector_9+0x40>
    1308:	28 f0       	brcs	.+10     	; 0x1314 <__vector_9+0x38>
    130a:	82 30       	cpi	r24, 0x02	; 2
    130c:	51 f0       	breq	.+20     	; 0x1322 <__vector_9+0x46>
    130e:	83 30       	cpi	r24, 0x03	; 3
    1310:	71 f4       	brne	.+28     	; 0x132e <__vector_9+0x52>
    1312:	0c c0       	rjmp	.+24     	; 0x132c <__vector_9+0x50>
	{
		// TRIAC_IMPULSE_TIME finished
		case 0x00:
			// Turn off heater TRIAC
			PORTD &= ~(1<<PD_HEATER);
    1314:	94 98       	cbi	0x12, 4	; 18
			TCNT0 = 256 - (QUATER_PERIOD_TIME - TRIAC_IMPULSE_TIME);
    1316:	8c eb       	ldi	r24, 0xBC	; 188
    1318:	82 bf       	out	0x32, r24	; 50
			break;
    131a:	09 c0       	rjmp	.+18     	; 0x132e <__vector_9+0x52>
		// QUATER_PERIOD_TIME finished	
		case 0x01:	
			TCNT0 = 256 - (SYNC_IGNORE_TIME - QUATER_PERIOD_TIME);
    131c:	82 ec       	ldi	r24, 0xC2	; 194
    131e:	82 bf       	out	0x32, r24	; 50
			break;	
    1320:	06 c0       	rjmp	.+12     	; 0x132e <__vector_9+0x52>
		// SYNC_IGNORE_TIME finished	
		case 0x02:
			TCNT0 = 256 - SYNC_LOST_TIMEOUT;
    1322:	80 ee       	ldi	r24, 0xE0	; 224
    1324:	82 bf       	out	0x32, r24	; 50
			// Clear flag and enable interrupt from analog comparator
			ACSR |= (1<<ACI);
    1326:	44 9a       	sbi	0x08, 4	; 8
			ACSR |= (1<<ACIE);
    1328:	43 9a       	sbi	0x08, 3	; 8
			break;
    132a:	01 c0       	rjmp	.+2      	; 0x132e <__vector_9+0x52>
		// SYNC_LOST_TIMEOUT finished
		case 0x03:
			// Error - sync is lost. It means that device has been disconnected from AC line.
			// Disable all power-consuming devices like LEDs and save user settings to EEPROM.
			exitPowerOff();
    132c:	21 d9       	rcall	.-3518   	; 0x570 <exitPowerOff>
			// Sync is not present - TODO
			break;
	}	

	// Full period check
	if ((p_state & (HALF_PERIOD_FLAG | STATE_MASK)) == (HALF_PERIOD_FLAG | 0x01))
    132e:	80 91 68 00 	lds	r24, 0x0068
    1332:	8f 78       	andi	r24, 0x8F	; 143
    1334:	81 38       	cpi	r24, 0x81	; 129
    1336:	09 f0       	breq	.+2      	; 0x133a <__vector_9+0x5e>
    1338:	8f c0       	rjmp	.+286    	; 0x1458 <__vector_9+0x17c>
	{
		// Full AC line period is done. Update controls.
		
		temp = PORTD;
    133a:	92 b3       	in	r25, 0x12	; 18
		temp &= ~(1<<PD_M1 | 1<<PD_M2);
    133c:	93 7f       	andi	r25, 0xF3	; 243
		if ( rollState & SKIP_CURRENT_MOTOR_CTRL )
    133e:	80 91 c7 00 	lds	r24, 0x00C7
    1342:	83 ff       	sbrs	r24, 3
    1344:	05 c0       	rjmp	.+10     	; 0x1350 <__vector_9+0x74>
		{
			// Direction control changed. Skip current period to allow TRIACs fully close
			rollState &= ~SKIP_CURRENT_MOTOR_CTRL;
    1346:	87 7f       	andi	r24, 0xF7	; 247
    1348:	80 93 c7 00 	sts	0x00C7, r24
			PORTD = temp; 	
    134c:	92 bb       	out	0x12, r25	; 18
    134e:	71 c0       	rjmp	.+226    	; 0x1432 <__vector_9+0x156>
		}
		else
		{
			// Apply direction control 
			if (rollState & ROLL_FWD)
    1350:	80 ff       	sbrs	r24, 0
    1352:	02 c0       	rjmp	.+4      	; 0x1358 <__vector_9+0x7c>
				temp |= (1<<PD_M1);
    1354:	94 60       	ori	r25, 0x04	; 4
    1356:	02 c0       	rjmp	.+4      	; 0x135c <__vector_9+0x80>
			else if (rollState & ROLL_REV)
    1358:	81 fd       	sbrc	r24, 1
				temp |= (1<<PD_M2);
    135a:	98 60       	ori	r25, 0x08	; 8
			PORTD = temp; 
    135c:	92 bb       	out	0x12, r25	; 18
// Function to process rolling - sets rotation direction for next period
// Call once per each AC line period
static inline void controlRolling()
{
	// Process cycle rolling
	switch(rollState & (ROLL_FWD | ROLL_REV | ROLL_CYCLE))
    135e:	40 91 c7 00 	lds	r20, 0x00C7
    1362:	84 2f       	mov	r24, r20
    1364:	87 70       	andi	r24, 0x07	; 7
    1366:	85 30       	cpi	r24, 0x05	; 5
    1368:	19 f0       	breq	.+6      	; 0x1370 <__vector_9+0x94>
    136a:	86 30       	cpi	r24, 0x06	; 6
    136c:	d1 f5       	brne	.+116    	; 0x13e2 <__vector_9+0x106>
    136e:	1d c0       	rjmp	.+58     	; 0x13aa <__vector_9+0xce>
	{
		case (ROLL_FWD | ROLL_CYCLE):
			if (rollPoint >=  topPoint)
    1370:	20 91 62 00 	lds	r18, 0x0062
    1374:	30 91 63 00 	lds	r19, 0x0063
    1378:	80 91 66 00 	lds	r24, 0x0066
    137c:	90 91 67 00 	lds	r25, 0x0067
    1380:	28 17       	cp	r18, r24
    1382:	39 07       	cpc	r19, r25
    1384:	70 f1       	brcs	.+92     	; 0x13e2 <__vector_9+0x106>
			{
				if (activeRollCycle >= rollCycleSet)	
    1386:	80 91 fb 00 	lds	r24, 0x00FB
    138a:	90 91 d5 00 	lds	r25, 0x00D5
    138e:	89 17       	cp	r24, r25
    1390:	28 f0       	brcs	.+10     	; 0x139c <__vector_9+0xc0>
				{
					// DONE!
					rollState &= ~ROLL_CYCLE;
    1392:	4b 7f       	andi	r20, 0xFB	; 251
					rollState |= CYCLE_ROLL_DONE;
    1394:	40 61       	ori	r20, 0x10	; 16
    1396:	40 93 c7 00 	sts	0x00C7, r20
    139a:	23 c0       	rjmp	.+70     	; 0x13e2 <__vector_9+0x106>
				}
				else
				{
					activeRollCycle++;
    139c:	8f 5f       	subi	r24, 0xFF	; 255
    139e:	80 93 fb 00 	sts	0x00FB, r24
					// Change dir	
					newDirReq = ROLL_REV;
    13a2:	82 e0       	ldi	r24, 0x02	; 2
    13a4:	80 93 ca 00 	sts	0x00CA, r24
    13a8:	1c c0       	rjmp	.+56     	; 0x13e2 <__vector_9+0x106>
				}
			}
			break;
		
		case (ROLL_REV | ROLL_CYCLE):	
			if (rollPoint <=  bottomPoint)
    13aa:	20 91 62 00 	lds	r18, 0x0062
    13ae:	30 91 63 00 	lds	r19, 0x0063
    13b2:	80 91 64 00 	lds	r24, 0x0064
    13b6:	90 91 65 00 	lds	r25, 0x0065
    13ba:	82 17       	cp	r24, r18
    13bc:	93 07       	cpc	r25, r19
    13be:	88 f0       	brcs	.+34     	; 0x13e2 <__vector_9+0x106>
			{
				if (activeRollCycle >= rollCycleSet)	
    13c0:	80 91 fb 00 	lds	r24, 0x00FB
    13c4:	90 91 d5 00 	lds	r25, 0x00D5
    13c8:	89 17       	cp	r24, r25
    13ca:	28 f0       	brcs	.+10     	; 0x13d6 <__vector_9+0xfa>
				{
					// DONE!
					rollState &= ~ROLL_CYCLE;
    13cc:	4b 7f       	andi	r20, 0xFB	; 251
					rollState |= CYCLE_ROLL_DONE;
    13ce:	40 61       	ori	r20, 0x10	; 16
    13d0:	40 93 c7 00 	sts	0x00C7, r20
    13d4:	06 c0       	rjmp	.+12     	; 0x13e2 <__vector_9+0x106>
				}
				else
				{
					activeRollCycle++;
    13d6:	8f 5f       	subi	r24, 0xFF	; 255
    13d8:	80 93 fb 00 	sts	0x00FB, r24
					// Change dir	
					newDirReq = ROLL_FWD;
    13dc:	81 e0       	ldi	r24, 0x01	; 1
    13de:	80 93 ca 00 	sts	0x00CA, r24
		default:
			break;
	}
	
	// Process direction change
	if ((rollState ^ newDirReq) & (ROLL_FWD | ROLL_REV))
    13e2:	80 91 c7 00 	lds	r24, 0x00C7
    13e6:	90 91 ca 00 	lds	r25, 0x00CA
    13ea:	29 2f       	mov	r18, r25
    13ec:	28 27       	eor	r18, r24
    13ee:	23 70       	andi	r18, 0x03	; 3
    13f0:	19 f0       	breq	.+6      	; 0x13f8 <__vector_9+0x11c>
	{
		rollState |= (SKIP_CURRENT_MOTOR_CTRL | ROLL_DIR_CHANGED);
    13f2:	88 62       	ori	r24, 0x28	; 40
    13f4:	80 93 c7 00 	sts	0x00C7, r24
	}
	rollState &= ~(ROLL_FWD | ROLL_REV);
    13f8:	80 91 c7 00 	lds	r24, 0x00C7
    13fc:	8c 7f       	andi	r24, 0xFC	; 252
	rollState |= newDirReq;
    13fe:	89 2b       	or	r24, r25
    1400:	80 93 c7 00 	sts	0x00C7, r24

static inline void updateRollPoint(void)
{
	uint16_t diff;
	
	if (rollState & ROLL_FWD)
    1404:	80 ff       	sbrs	r24, 0
    1406:	0a c0       	rjmp	.+20     	; 0x141c <__vector_9+0x140>
		rollPoint++;
    1408:	80 91 62 00 	lds	r24, 0x0062
    140c:	90 91 63 00 	lds	r25, 0x0063
    1410:	01 96       	adiw	r24, 0x01	; 1
    1412:	90 93 63 00 	sts	0x0063, r25
    1416:	80 93 62 00 	sts	0x0062, r24
    141a:	0b c0       	rjmp	.+22     	; 0x1432 <__vector_9+0x156>
	else if (rollState & ROLL_REV)
    141c:	81 ff       	sbrs	r24, 1
    141e:	09 c0       	rjmp	.+18     	; 0x1432 <__vector_9+0x156>
		rollPoint--;	
    1420:	80 91 62 00 	lds	r24, 0x0062
    1424:	90 91 63 00 	lds	r25, 0x0063
    1428:	01 97       	sbiw	r24, 0x01	; 1
    142a:	90 93 63 00 	sts	0x0063, r25
    142e:	80 93 62 00 	sts	0x0062, r24
			controlRolling();
		}
			

		// Process heater control counter
		if (heater_cnt == HEATER_REGULATION_PERIODS - 1)
    1432:	80 91 cb 00 	lds	r24, 0x00CB
    1436:	89 30       	cpi	r24, 0x09	; 9
    1438:	61 f4       	brne	.+24     	; 0x1452 <__vector_9+0x176>
		{
			heater_cnt = 0;
    143a:	10 92 cb 00 	sts	0x00CB, r1
			ctrl_heater_sync = ctrl_heater;
    143e:	80 91 c9 00 	lds	r24, 0x00C9
    1442:	80 93 cc 00 	sts	0x00CC, r24
			heaterState |= READY_TO_UPDATE_HEATER;
    1446:	80 91 c8 00 	lds	r24, 0x00C8
    144a:	80 68       	ori	r24, 0x80	; 128
    144c:	80 93 c8 00 	sts	0x00C8, r24
    1450:	03 c0       	rjmp	.+6      	; 0x1458 <__vector_9+0x17c>
		}
		else
		{
			heater_cnt++;
    1452:	8f 5f       	subi	r24, 0xFF	; 255
    1454:	80 93 cb 00 	sts	0x00CB, r24
			
			
	}
	

	if ((p_state & STATE_MASK)  != 0x0F)
    1458:	80 91 68 00 	lds	r24, 0x0068
    145c:	98 2f       	mov	r25, r24
    145e:	9f 70       	andi	r25, 0x0F	; 15
    1460:	9f 30       	cpi	r25, 0x0F	; 15
    1462:	19 f0       	breq	.+6      	; 0x146a <__vector_9+0x18e>
		p_state++;
    1464:	8f 5f       	subi	r24, 0xFF	; 255
    1466:	80 93 68 00 	sts	0x0068, r24

}	
    146a:	ff 91       	pop	r31
    146c:	ef 91       	pop	r30
    146e:	bf 91       	pop	r27
    1470:	af 91       	pop	r26
    1472:	9f 91       	pop	r25
    1474:	8f 91       	pop	r24
    1476:	7f 91       	pop	r23
    1478:	6f 91       	pop	r22
    147a:	5f 91       	pop	r21
    147c:	4f 91       	pop	r20
    147e:	3f 91       	pop	r19
    1480:	2f 91       	pop	r18
    1482:	0f 90       	pop	r0
    1484:	0f be       	out	0x3f, r0	; 63
    1486:	0f 90       	pop	r0
    1488:	1f 90       	pop	r1
    148a:	18 95       	reti

0000148c <processSoftTimer8b>:
 
 
 
 
 void processSoftTimer8b(SoftTimer8b_t *tmr)
 {
    148c:	fc 01       	movw	r30, r24
	 uint8_t newTimerVal;

	 if (!tmr->Enabled)
    148e:	80 81       	ld	r24, Z
    1490:	80 ff       	sbrs	r24, 0
    1492:	29 c0       	rjmp	.+82     	; 0x14e6 <processSoftTimer8b+0x5a>
		return;
	 
	 tmr->FA_EQ = 0;
	 tmr->FA_GE = 0;
	 tmr->FTop = 0;
    1494:	87 7e       	andi	r24, 0xE7	; 231
    1496:	8f 7d       	andi	r24, 0xDF	; 223
    1498:	80 83       	st	Z, r24
	 
	 if (tmr->Timer >= tmr->Top)
    149a:	81 81       	ldd	r24, Z+1	; 0x01
    149c:	92 81       	ldd	r25, Z+2	; 0x02
    149e:	89 17       	cp	r24, r25
    14a0:	58 f0       	brcs	.+22     	; 0x14b8 <processSoftTimer8b+0x2c>
	 {
		 if (tmr->RunOnce)
    14a2:	90 81       	ld	r25, Z
    14a4:	91 ff       	sbrs	r25, 1
    14a6:	02 c0       	rjmp	.+4      	; 0x14ac <processSoftTimer8b+0x20>
		 {
			 tmr->Enabled = 0;
    14a8:	9e 7f       	andi	r25, 0xFE	; 254
    14aa:	90 83       	st	Z, r25
		 }
		 tmr->FTop = 1;
    14ac:	90 81       	ld	r25, Z
		 tmr->FOvfl = 1;
    14ae:	90 62       	ori	r25, 0x20	; 32
    14b0:	90 64       	ori	r25, 0x40	; 64
    14b2:	90 83       	st	Z, r25
		 newTimerVal = 0;
    14b4:	20 e0       	ldi	r18, 0x00	; 0
    14b6:	02 c0       	rjmp	.+4      	; 0x14bc <processSoftTimer8b+0x30>
	 }
	 else
	 {
		 newTimerVal = tmr->Timer + 1;
    14b8:	28 2f       	mov	r18, r24
    14ba:	2f 5f       	subi	r18, 0xFF	; 255
	 }
	 
	 if (tmr->Timer == tmr->CompA)
    14bc:	93 81       	ldd	r25, Z+3	; 0x03
    14be:	89 13       	cpse	r24, r25
    14c0:	0c c0       	rjmp	.+24     	; 0x14da <processSoftTimer8b+0x4e>
	 {
		 tmr->FA_EQ = 1;
    14c2:	80 81       	ld	r24, Z
		 tmr->FA_GE = 1;
    14c4:	88 60       	ori	r24, 0x08	; 8
    14c6:	80 61       	ori	r24, 0x10	; 16
		 tmr->FA_TGL = !tmr->FA_TGL;
    14c8:	82 fb       	bst	r24, 2
    14ca:	33 27       	eor	r19, r19
    14cc:	30 f9       	bld	r19, 0
    14ce:	91 e0       	ldi	r25, 0x01	; 1
    14d0:	93 27       	eor	r25, r19
    14d2:	90 fb       	bst	r25, 0
    14d4:	82 f9       	bld	r24, 2
    14d6:	80 83       	st	Z, r24
    14d8:	05 c0       	rjmp	.+10     	; 0x14e4 <processSoftTimer8b+0x58>
	 }
	 else if (tmr->Timer >= tmr->CompA)
    14da:	89 17       	cp	r24, r25
    14dc:	18 f0       	brcs	.+6      	; 0x14e4 <processSoftTimer8b+0x58>
	 {
		 tmr->FA_GE = 1;
    14de:	80 81       	ld	r24, Z
    14e0:	80 61       	ori	r24, 0x10	; 16
    14e2:	80 83       	st	Z, r24
	 }
	 
	 tmr->Timer = newTimerVal; 
    14e4:	21 83       	std	Z+1, r18	; 0x01
    14e6:	08 95       	ret

000014e8 <SetBeeperFreq>:
}

// Setup beeper frequency (Hz)
void SetBeeperFreq(uint16_t freq_hz)
{
	uint16_t period_us = 1000000 / freq_hz;
    14e8:	9c 01       	movw	r18, r24
    14ea:	40 e0       	ldi	r20, 0x00	; 0
    14ec:	50 e0       	ldi	r21, 0x00	; 0
    14ee:	60 e4       	ldi	r22, 0x40	; 64
    14f0:	72 e4       	ldi	r23, 0x42	; 66
    14f2:	8f e0       	ldi	r24, 0x0F	; 15
    14f4:	90 e0       	ldi	r25, 0x00	; 0
    14f6:	f6 d1       	rcall	.+1004   	; 0x18e4 <__divmodsi4>
	if (period_us & 0xFFF8)
    14f8:	da 01       	movw	r26, r20
    14fa:	c9 01       	movw	r24, r18
    14fc:	88 7f       	andi	r24, 0xF8	; 248
    14fe:	aa 27       	eor	r26, r26
    1500:	bb 27       	eor	r27, r27
    1502:	89 2b       	or	r24, r25
    1504:	59 f0       	breq	.+22     	; 0x151c <SetBeeperFreq+0x34>
		OCR1A = (period_us>>3) - 1;
    1506:	36 95       	lsr	r19
    1508:	27 95       	ror	r18
    150a:	36 95       	lsr	r19
    150c:	27 95       	ror	r18
    150e:	36 95       	lsr	r19
    1510:	27 95       	ror	r18
    1512:	21 50       	subi	r18, 0x01	; 1
    1514:	31 09       	sbc	r19, r1
    1516:	3b bd       	out	0x2b, r19	; 43
    1518:	2a bd       	out	0x2a, r18	; 42
    151a:	04 c0       	rjmp	.+8      	; 0x1524 <SetBeeperFreq+0x3c>
	else
		OCR1A = 0x1;
    151c:	81 e0       	ldi	r24, 0x01	; 1
    151e:	90 e0       	ldi	r25, 0x00	; 0
    1520:	9b bd       	out	0x2b, r25	; 43
    1522:	8a bd       	out	0x2a, r24	; 42
	TCNT1 = 0;
    1524:	1d bc       	out	0x2d, r1	; 45
    1526:	1c bc       	out	0x2c, r1	; 44
    1528:	08 95       	ret

0000152a <StartBeep>:
}

// Beep for some time in ms
void StartBeep(uint16_t time_ms)
{
	if (sound_enable)
    152a:	20 91 d4 00 	lds	r18, 0x00D4
    152e:	22 23       	and	r18, r18
    1530:	39 f0       	breq	.+14     	; 0x1540 <StartBeep+0x16>
	{
		beep_cnt = time_ms;
    1532:	90 93 ce 00 	sts	0x00CE, r25
    1536:	80 93 cd 00 	sts	0x00CD, r24
// Enable / disable beeper output
inline void SetBeepOutput(uint8_t val)
{
	if (val)
		// Toggle OCR1A on compare match
		TCCR1A |= (1<<COM1A0);
    153a:	8f b5       	in	r24, 0x2f	; 47
    153c:	80 64       	ori	r24, 0x40	; 64
    153e:	8f bd       	out	0x2f, r24	; 47
    1540:	08 95       	ret

00001542 <__vector_3>:
}



ISR(TIMER2_COMP_vect)
{	
    1542:	1f 92       	push	r1
    1544:	0f 92       	push	r0
    1546:	0f b6       	in	r0, 0x3f	; 63
    1548:	0f 92       	push	r0
    154a:	11 24       	eor	r1, r1
    154c:	2f 93       	push	r18
    154e:	3f 93       	push	r19
    1550:	4f 93       	push	r20
    1552:	5f 93       	push	r21
    1554:	6f 93       	push	r22
    1556:	7f 93       	push	r23
    1558:	8f 93       	push	r24
    155a:	9f 93       	push	r25
    155c:	af 93       	push	r26
    155e:	bf 93       	push	r27
    1560:	ef 93       	push	r30
    1562:	ff 93       	push	r31
	// Manage beeper
	if (beep_cnt)
    1564:	80 91 cd 00 	lds	r24, 0x00CD
    1568:	90 91 ce 00 	lds	r25, 0x00CE
    156c:	00 97       	sbiw	r24, 0x00	; 0
    156e:	31 f0       	breq	.+12     	; 0x157c <__vector_3+0x3a>
		beep_cnt--;
    1570:	01 97       	sbiw	r24, 0x01	; 1
    1572:	90 93 ce 00 	sts	0x00CE, r25
    1576:	80 93 cd 00 	sts	0x00CD, r24
    157a:	03 c0       	rjmp	.+6      	; 0x1582 <__vector_3+0x40>
	if (val)
		// Toggle OCR1A on compare match
		TCCR1A |= (1<<COM1A0);
	else
		// Disable OCR1A output
		TCCR1A &= ~(1<<COM1A0 | 1<<COM1A1);
    157c:	8f b5       	in	r24, 0x2f	; 47
    157e:	8f 73       	andi	r24, 0x3F	; 63
    1580:	8f bd       	out	0x2f, r24	; 47
		beep_cnt--;
	else
		SetBeepOutput(0);	// done
	
	// Manage LED indicator
	processLedIndicator();
    1582:	49 d8       	rcall	.-3950   	; 0x616 <processLedIndicator>
	
	// Process menu update timer
	processSoftTimer8b(&menuUpdateTimer);	
    1584:	89 e6       	ldi	r24, 0x69	; 105
    1586:	90 e0       	ldi	r25, 0x00	; 0
    1588:	81 df       	rcall	.-254    	; 0x148c <processSoftTimer8b>
	
	
	// Start ADC conversion
	ADCSRA |= (1<<ADSC);
    158a:	36 9a       	sbi	0x06, 6	; 6
	
		
}
    158c:	ff 91       	pop	r31
    158e:	ef 91       	pop	r30
    1590:	bf 91       	pop	r27
    1592:	af 91       	pop	r26
    1594:	9f 91       	pop	r25
    1596:	8f 91       	pop	r24
    1598:	7f 91       	pop	r23
    159a:	6f 91       	pop	r22
    159c:	5f 91       	pop	r21
    159e:	4f 91       	pop	r20
    15a0:	3f 91       	pop	r19
    15a2:	2f 91       	pop	r18
    15a4:	0f 90       	pop	r0
    15a6:	0f be       	out	0x3f, r0	; 63
    15a8:	0f 90       	pop	r0
    15aa:	1f 90       	pop	r1
    15ac:	18 95       	reti

000015ae <USART_send>:



void USART_send( uint8_t data )
{
	UCSRA |= (1<<TXC);                 // Clear flag
    15ae:	5e 9a       	sbi	0x0b, 6	; 11
	UDR = data;
    15b0:	8c b9       	out	0x0c, r24	; 12
	while ( !(UCSRA & (1<<TXC)) );  // Wait
    15b2:	5e 9b       	sbis	0x0b, 6	; 11
    15b4:	fe cf       	rjmp	.-4      	; 0x15b2 <USART_send+0x4>
}
    15b6:	08 95       	ret

000015b8 <USART_sendstr>:


void USART_sendstr(char* str)
{
    15b8:	1f 93       	push	r17
    15ba:	cf 93       	push	r28
    15bc:	df 93       	push	r29
    15be:	ec 01       	movw	r28, r24
	uint8_t i = 0;
	while (str[i])
    15c0:	88 81       	ld	r24, Y
    15c2:	88 23       	and	r24, r24
    15c4:	49 f0       	breq	.+18     	; 0x15d8 <USART_sendstr+0x20>
}


void USART_sendstr(char* str)
{
	uint8_t i = 0;
    15c6:	10 e0       	ldi	r17, 0x00	; 0
	while (str[i])
	{
		USART_send(str[i++]);
    15c8:	1f 5f       	subi	r17, 0xFF	; 255
    15ca:	f1 df       	rcall	.-30     	; 0x15ae <USART_send>


void USART_sendstr(char* str)
{
	uint8_t i = 0;
	while (str[i])
    15cc:	fe 01       	movw	r30, r28
    15ce:	e1 0f       	add	r30, r17
    15d0:	f1 1d       	adc	r31, r1
    15d2:	80 81       	ld	r24, Z
    15d4:	81 11       	cpse	r24, r1
    15d6:	f8 cf       	rjmp	.-16     	; 0x15c8 <USART_sendstr+0x10>
	{
		USART_send(str[i++]);
	}
}
    15d8:	df 91       	pop	r29
    15da:	cf 91       	pop	r28
    15dc:	1f 91       	pop	r17
    15de:	08 95       	ret

000015e0 <__subsf3>:
    15e0:	50 58       	subi	r21, 0x80	; 128

000015e2 <__addsf3>:
    15e2:	bb 27       	eor	r27, r27
    15e4:	aa 27       	eor	r26, r26
    15e6:	0e d0       	rcall	.+28     	; 0x1604 <__addsf3x>
    15e8:	e0 c0       	rjmp	.+448    	; 0x17aa <__fp_round>
    15ea:	d1 d0       	rcall	.+418    	; 0x178e <__fp_pscA>
    15ec:	30 f0       	brcs	.+12     	; 0x15fa <__addsf3+0x18>
    15ee:	d6 d0       	rcall	.+428    	; 0x179c <__fp_pscB>
    15f0:	20 f0       	brcs	.+8      	; 0x15fa <__addsf3+0x18>
    15f2:	31 f4       	brne	.+12     	; 0x1600 <__addsf3+0x1e>
    15f4:	9f 3f       	cpi	r25, 0xFF	; 255
    15f6:	11 f4       	brne	.+4      	; 0x15fc <__addsf3+0x1a>
    15f8:	1e f4       	brtc	.+6      	; 0x1600 <__addsf3+0x1e>
    15fa:	c6 c0       	rjmp	.+396    	; 0x1788 <__fp_nan>
    15fc:	0e f4       	brtc	.+2      	; 0x1600 <__addsf3+0x1e>
    15fe:	e0 95       	com	r30
    1600:	e7 fb       	bst	r30, 7
    1602:	bc c0       	rjmp	.+376    	; 0x177c <__fp_inf>

00001604 <__addsf3x>:
    1604:	e9 2f       	mov	r30, r25
    1606:	e2 d0       	rcall	.+452    	; 0x17cc <__fp_split3>
    1608:	80 f3       	brcs	.-32     	; 0x15ea <__addsf3+0x8>
    160a:	ba 17       	cp	r27, r26
    160c:	62 07       	cpc	r22, r18
    160e:	73 07       	cpc	r23, r19
    1610:	84 07       	cpc	r24, r20
    1612:	95 07       	cpc	r25, r21
    1614:	18 f0       	brcs	.+6      	; 0x161c <__addsf3x+0x18>
    1616:	71 f4       	brne	.+28     	; 0x1634 <__addsf3x+0x30>
    1618:	9e f5       	brtc	.+102    	; 0x1680 <__addsf3x+0x7c>
    161a:	fa c0       	rjmp	.+500    	; 0x1810 <__fp_zero>
    161c:	0e f4       	brtc	.+2      	; 0x1620 <__addsf3x+0x1c>
    161e:	e0 95       	com	r30
    1620:	0b 2e       	mov	r0, r27
    1622:	ba 2f       	mov	r27, r26
    1624:	a0 2d       	mov	r26, r0
    1626:	0b 01       	movw	r0, r22
    1628:	b9 01       	movw	r22, r18
    162a:	90 01       	movw	r18, r0
    162c:	0c 01       	movw	r0, r24
    162e:	ca 01       	movw	r24, r20
    1630:	a0 01       	movw	r20, r0
    1632:	11 24       	eor	r1, r1
    1634:	ff 27       	eor	r31, r31
    1636:	59 1b       	sub	r21, r25
    1638:	99 f0       	breq	.+38     	; 0x1660 <__addsf3x+0x5c>
    163a:	59 3f       	cpi	r21, 0xF9	; 249
    163c:	50 f4       	brcc	.+20     	; 0x1652 <__addsf3x+0x4e>
    163e:	50 3e       	cpi	r21, 0xE0	; 224
    1640:	68 f1       	brcs	.+90     	; 0x169c <__addsf3x+0x98>
    1642:	1a 16       	cp	r1, r26
    1644:	f0 40       	sbci	r31, 0x00	; 0
    1646:	a2 2f       	mov	r26, r18
    1648:	23 2f       	mov	r18, r19
    164a:	34 2f       	mov	r19, r20
    164c:	44 27       	eor	r20, r20
    164e:	58 5f       	subi	r21, 0xF8	; 248
    1650:	f3 cf       	rjmp	.-26     	; 0x1638 <__addsf3x+0x34>
    1652:	46 95       	lsr	r20
    1654:	37 95       	ror	r19
    1656:	27 95       	ror	r18
    1658:	a7 95       	ror	r26
    165a:	f0 40       	sbci	r31, 0x00	; 0
    165c:	53 95       	inc	r21
    165e:	c9 f7       	brne	.-14     	; 0x1652 <__addsf3x+0x4e>
    1660:	7e f4       	brtc	.+30     	; 0x1680 <__addsf3x+0x7c>
    1662:	1f 16       	cp	r1, r31
    1664:	ba 0b       	sbc	r27, r26
    1666:	62 0b       	sbc	r22, r18
    1668:	73 0b       	sbc	r23, r19
    166a:	84 0b       	sbc	r24, r20
    166c:	ba f0       	brmi	.+46     	; 0x169c <__addsf3x+0x98>
    166e:	91 50       	subi	r25, 0x01	; 1
    1670:	a1 f0       	breq	.+40     	; 0x169a <__addsf3x+0x96>
    1672:	ff 0f       	add	r31, r31
    1674:	bb 1f       	adc	r27, r27
    1676:	66 1f       	adc	r22, r22
    1678:	77 1f       	adc	r23, r23
    167a:	88 1f       	adc	r24, r24
    167c:	c2 f7       	brpl	.-16     	; 0x166e <__addsf3x+0x6a>
    167e:	0e c0       	rjmp	.+28     	; 0x169c <__addsf3x+0x98>
    1680:	ba 0f       	add	r27, r26
    1682:	62 1f       	adc	r22, r18
    1684:	73 1f       	adc	r23, r19
    1686:	84 1f       	adc	r24, r20
    1688:	48 f4       	brcc	.+18     	; 0x169c <__addsf3x+0x98>
    168a:	87 95       	ror	r24
    168c:	77 95       	ror	r23
    168e:	67 95       	ror	r22
    1690:	b7 95       	ror	r27
    1692:	f7 95       	ror	r31
    1694:	9e 3f       	cpi	r25, 0xFE	; 254
    1696:	08 f0       	brcs	.+2      	; 0x169a <__addsf3x+0x96>
    1698:	b3 cf       	rjmp	.-154    	; 0x1600 <__addsf3+0x1e>
    169a:	93 95       	inc	r25
    169c:	88 0f       	add	r24, r24
    169e:	08 f0       	brcs	.+2      	; 0x16a2 <__addsf3x+0x9e>
    16a0:	99 27       	eor	r25, r25
    16a2:	ee 0f       	add	r30, r30
    16a4:	97 95       	ror	r25
    16a6:	87 95       	ror	r24
    16a8:	08 95       	ret

000016aa <__fixunssfsi>:
    16aa:	98 d0       	rcall	.+304    	; 0x17dc <__fp_splitA>
    16ac:	88 f0       	brcs	.+34     	; 0x16d0 <__fixunssfsi+0x26>
    16ae:	9f 57       	subi	r25, 0x7F	; 127
    16b0:	90 f0       	brcs	.+36     	; 0x16d6 <__fixunssfsi+0x2c>
    16b2:	b9 2f       	mov	r27, r25
    16b4:	99 27       	eor	r25, r25
    16b6:	b7 51       	subi	r27, 0x17	; 23
    16b8:	a0 f0       	brcs	.+40     	; 0x16e2 <__fixunssfsi+0x38>
    16ba:	d1 f0       	breq	.+52     	; 0x16f0 <__fixunssfsi+0x46>
    16bc:	66 0f       	add	r22, r22
    16be:	77 1f       	adc	r23, r23
    16c0:	88 1f       	adc	r24, r24
    16c2:	99 1f       	adc	r25, r25
    16c4:	1a f0       	brmi	.+6      	; 0x16cc <__fixunssfsi+0x22>
    16c6:	ba 95       	dec	r27
    16c8:	c9 f7       	brne	.-14     	; 0x16bc <__fixunssfsi+0x12>
    16ca:	12 c0       	rjmp	.+36     	; 0x16f0 <__fixunssfsi+0x46>
    16cc:	b1 30       	cpi	r27, 0x01	; 1
    16ce:	81 f0       	breq	.+32     	; 0x16f0 <__fixunssfsi+0x46>
    16d0:	9f d0       	rcall	.+318    	; 0x1810 <__fp_zero>
    16d2:	b1 e0       	ldi	r27, 0x01	; 1
    16d4:	08 95       	ret
    16d6:	9c c0       	rjmp	.+312    	; 0x1810 <__fp_zero>
    16d8:	67 2f       	mov	r22, r23
    16da:	78 2f       	mov	r23, r24
    16dc:	88 27       	eor	r24, r24
    16de:	b8 5f       	subi	r27, 0xF8	; 248
    16e0:	39 f0       	breq	.+14     	; 0x16f0 <__fixunssfsi+0x46>
    16e2:	b9 3f       	cpi	r27, 0xF9	; 249
    16e4:	cc f3       	brlt	.-14     	; 0x16d8 <__fixunssfsi+0x2e>
    16e6:	86 95       	lsr	r24
    16e8:	77 95       	ror	r23
    16ea:	67 95       	ror	r22
    16ec:	b3 95       	inc	r27
    16ee:	d9 f7       	brne	.-10     	; 0x16e6 <__fixunssfsi+0x3c>
    16f0:	3e f4       	brtc	.+14     	; 0x1700 <__fixunssfsi+0x56>
    16f2:	90 95       	com	r25
    16f4:	80 95       	com	r24
    16f6:	70 95       	com	r23
    16f8:	61 95       	neg	r22
    16fa:	7f 4f       	sbci	r23, 0xFF	; 255
    16fc:	8f 4f       	sbci	r24, 0xFF	; 255
    16fe:	9f 4f       	sbci	r25, 0xFF	; 255
    1700:	08 95       	ret

00001702 <__floatunsisf>:
    1702:	e8 94       	clt
    1704:	09 c0       	rjmp	.+18     	; 0x1718 <__floatsisf+0x12>

00001706 <__floatsisf>:
    1706:	97 fb       	bst	r25, 7
    1708:	3e f4       	brtc	.+14     	; 0x1718 <__floatsisf+0x12>
    170a:	90 95       	com	r25
    170c:	80 95       	com	r24
    170e:	70 95       	com	r23
    1710:	61 95       	neg	r22
    1712:	7f 4f       	sbci	r23, 0xFF	; 255
    1714:	8f 4f       	sbci	r24, 0xFF	; 255
    1716:	9f 4f       	sbci	r25, 0xFF	; 255
    1718:	99 23       	and	r25, r25
    171a:	a9 f0       	breq	.+42     	; 0x1746 <__floatsisf+0x40>
    171c:	f9 2f       	mov	r31, r25
    171e:	96 e9       	ldi	r25, 0x96	; 150
    1720:	bb 27       	eor	r27, r27
    1722:	93 95       	inc	r25
    1724:	f6 95       	lsr	r31
    1726:	87 95       	ror	r24
    1728:	77 95       	ror	r23
    172a:	67 95       	ror	r22
    172c:	b7 95       	ror	r27
    172e:	f1 11       	cpse	r31, r1
    1730:	f8 cf       	rjmp	.-16     	; 0x1722 <__floatsisf+0x1c>
    1732:	fa f4       	brpl	.+62     	; 0x1772 <__floatsisf+0x6c>
    1734:	bb 0f       	add	r27, r27
    1736:	11 f4       	brne	.+4      	; 0x173c <__floatsisf+0x36>
    1738:	60 ff       	sbrs	r22, 0
    173a:	1b c0       	rjmp	.+54     	; 0x1772 <__floatsisf+0x6c>
    173c:	6f 5f       	subi	r22, 0xFF	; 255
    173e:	7f 4f       	sbci	r23, 0xFF	; 255
    1740:	8f 4f       	sbci	r24, 0xFF	; 255
    1742:	9f 4f       	sbci	r25, 0xFF	; 255
    1744:	16 c0       	rjmp	.+44     	; 0x1772 <__floatsisf+0x6c>
    1746:	88 23       	and	r24, r24
    1748:	11 f0       	breq	.+4      	; 0x174e <__floatsisf+0x48>
    174a:	96 e9       	ldi	r25, 0x96	; 150
    174c:	11 c0       	rjmp	.+34     	; 0x1770 <__floatsisf+0x6a>
    174e:	77 23       	and	r23, r23
    1750:	21 f0       	breq	.+8      	; 0x175a <__floatsisf+0x54>
    1752:	9e e8       	ldi	r25, 0x8E	; 142
    1754:	87 2f       	mov	r24, r23
    1756:	76 2f       	mov	r23, r22
    1758:	05 c0       	rjmp	.+10     	; 0x1764 <__floatsisf+0x5e>
    175a:	66 23       	and	r22, r22
    175c:	71 f0       	breq	.+28     	; 0x177a <__floatsisf+0x74>
    175e:	96 e8       	ldi	r25, 0x86	; 134
    1760:	86 2f       	mov	r24, r22
    1762:	70 e0       	ldi	r23, 0x00	; 0
    1764:	60 e0       	ldi	r22, 0x00	; 0
    1766:	2a f0       	brmi	.+10     	; 0x1772 <__floatsisf+0x6c>
    1768:	9a 95       	dec	r25
    176a:	66 0f       	add	r22, r22
    176c:	77 1f       	adc	r23, r23
    176e:	88 1f       	adc	r24, r24
    1770:	da f7       	brpl	.-10     	; 0x1768 <__floatsisf+0x62>
    1772:	88 0f       	add	r24, r24
    1774:	96 95       	lsr	r25
    1776:	87 95       	ror	r24
    1778:	97 f9       	bld	r25, 7
    177a:	08 95       	ret

0000177c <__fp_inf>:
    177c:	97 f9       	bld	r25, 7
    177e:	9f 67       	ori	r25, 0x7F	; 127
    1780:	80 e8       	ldi	r24, 0x80	; 128
    1782:	70 e0       	ldi	r23, 0x00	; 0
    1784:	60 e0       	ldi	r22, 0x00	; 0
    1786:	08 95       	ret

00001788 <__fp_nan>:
    1788:	9f ef       	ldi	r25, 0xFF	; 255
    178a:	80 ec       	ldi	r24, 0xC0	; 192
    178c:	08 95       	ret

0000178e <__fp_pscA>:
    178e:	00 24       	eor	r0, r0
    1790:	0a 94       	dec	r0
    1792:	16 16       	cp	r1, r22
    1794:	17 06       	cpc	r1, r23
    1796:	18 06       	cpc	r1, r24
    1798:	09 06       	cpc	r0, r25
    179a:	08 95       	ret

0000179c <__fp_pscB>:
    179c:	00 24       	eor	r0, r0
    179e:	0a 94       	dec	r0
    17a0:	12 16       	cp	r1, r18
    17a2:	13 06       	cpc	r1, r19
    17a4:	14 06       	cpc	r1, r20
    17a6:	05 06       	cpc	r0, r21
    17a8:	08 95       	ret

000017aa <__fp_round>:
    17aa:	09 2e       	mov	r0, r25
    17ac:	03 94       	inc	r0
    17ae:	00 0c       	add	r0, r0
    17b0:	11 f4       	brne	.+4      	; 0x17b6 <__fp_round+0xc>
    17b2:	88 23       	and	r24, r24
    17b4:	52 f0       	brmi	.+20     	; 0x17ca <__fp_round+0x20>
    17b6:	bb 0f       	add	r27, r27
    17b8:	40 f4       	brcc	.+16     	; 0x17ca <__fp_round+0x20>
    17ba:	bf 2b       	or	r27, r31
    17bc:	11 f4       	brne	.+4      	; 0x17c2 <__fp_round+0x18>
    17be:	60 ff       	sbrs	r22, 0
    17c0:	04 c0       	rjmp	.+8      	; 0x17ca <__fp_round+0x20>
    17c2:	6f 5f       	subi	r22, 0xFF	; 255
    17c4:	7f 4f       	sbci	r23, 0xFF	; 255
    17c6:	8f 4f       	sbci	r24, 0xFF	; 255
    17c8:	9f 4f       	sbci	r25, 0xFF	; 255
    17ca:	08 95       	ret

000017cc <__fp_split3>:
    17cc:	57 fd       	sbrc	r21, 7
    17ce:	90 58       	subi	r25, 0x80	; 128
    17d0:	44 0f       	add	r20, r20
    17d2:	55 1f       	adc	r21, r21
    17d4:	59 f0       	breq	.+22     	; 0x17ec <__fp_splitA+0x10>
    17d6:	5f 3f       	cpi	r21, 0xFF	; 255
    17d8:	71 f0       	breq	.+28     	; 0x17f6 <__fp_splitA+0x1a>
    17da:	47 95       	ror	r20

000017dc <__fp_splitA>:
    17dc:	88 0f       	add	r24, r24
    17de:	97 fb       	bst	r25, 7
    17e0:	99 1f       	adc	r25, r25
    17e2:	61 f0       	breq	.+24     	; 0x17fc <__fp_splitA+0x20>
    17e4:	9f 3f       	cpi	r25, 0xFF	; 255
    17e6:	79 f0       	breq	.+30     	; 0x1806 <__fp_splitA+0x2a>
    17e8:	87 95       	ror	r24
    17ea:	08 95       	ret
    17ec:	12 16       	cp	r1, r18
    17ee:	13 06       	cpc	r1, r19
    17f0:	14 06       	cpc	r1, r20
    17f2:	55 1f       	adc	r21, r21
    17f4:	f2 cf       	rjmp	.-28     	; 0x17da <__fp_split3+0xe>
    17f6:	46 95       	lsr	r20
    17f8:	f1 df       	rcall	.-30     	; 0x17dc <__fp_splitA>
    17fa:	08 c0       	rjmp	.+16     	; 0x180c <__fp_splitA+0x30>
    17fc:	16 16       	cp	r1, r22
    17fe:	17 06       	cpc	r1, r23
    1800:	18 06       	cpc	r1, r24
    1802:	99 1f       	adc	r25, r25
    1804:	f1 cf       	rjmp	.-30     	; 0x17e8 <__fp_splitA+0xc>
    1806:	86 95       	lsr	r24
    1808:	71 05       	cpc	r23, r1
    180a:	61 05       	cpc	r22, r1
    180c:	08 94       	sec
    180e:	08 95       	ret

00001810 <__fp_zero>:
    1810:	e8 94       	clt

00001812 <__fp_szero>:
    1812:	bb 27       	eor	r27, r27
    1814:	66 27       	eor	r22, r22
    1816:	77 27       	eor	r23, r23
    1818:	cb 01       	movw	r24, r22
    181a:	97 f9       	bld	r25, 7
    181c:	08 95       	ret

0000181e <__mulsf3>:
    181e:	0b d0       	rcall	.+22     	; 0x1836 <__mulsf3x>
    1820:	c4 cf       	rjmp	.-120    	; 0x17aa <__fp_round>
    1822:	b5 df       	rcall	.-150    	; 0x178e <__fp_pscA>
    1824:	28 f0       	brcs	.+10     	; 0x1830 <__mulsf3+0x12>
    1826:	ba df       	rcall	.-140    	; 0x179c <__fp_pscB>
    1828:	18 f0       	brcs	.+6      	; 0x1830 <__mulsf3+0x12>
    182a:	95 23       	and	r25, r21
    182c:	09 f0       	breq	.+2      	; 0x1830 <__mulsf3+0x12>
    182e:	a6 cf       	rjmp	.-180    	; 0x177c <__fp_inf>
    1830:	ab cf       	rjmp	.-170    	; 0x1788 <__fp_nan>
    1832:	11 24       	eor	r1, r1
    1834:	ee cf       	rjmp	.-36     	; 0x1812 <__fp_szero>

00001836 <__mulsf3x>:
    1836:	ca df       	rcall	.-108    	; 0x17cc <__fp_split3>
    1838:	a0 f3       	brcs	.-24     	; 0x1822 <__mulsf3+0x4>

0000183a <__mulsf3_pse>:
    183a:	95 9f       	mul	r25, r21
    183c:	d1 f3       	breq	.-12     	; 0x1832 <__mulsf3+0x14>
    183e:	95 0f       	add	r25, r21
    1840:	50 e0       	ldi	r21, 0x00	; 0
    1842:	55 1f       	adc	r21, r21
    1844:	62 9f       	mul	r22, r18
    1846:	f0 01       	movw	r30, r0
    1848:	72 9f       	mul	r23, r18
    184a:	bb 27       	eor	r27, r27
    184c:	f0 0d       	add	r31, r0
    184e:	b1 1d       	adc	r27, r1
    1850:	63 9f       	mul	r22, r19
    1852:	aa 27       	eor	r26, r26
    1854:	f0 0d       	add	r31, r0
    1856:	b1 1d       	adc	r27, r1
    1858:	aa 1f       	adc	r26, r26
    185a:	64 9f       	mul	r22, r20
    185c:	66 27       	eor	r22, r22
    185e:	b0 0d       	add	r27, r0
    1860:	a1 1d       	adc	r26, r1
    1862:	66 1f       	adc	r22, r22
    1864:	82 9f       	mul	r24, r18
    1866:	22 27       	eor	r18, r18
    1868:	b0 0d       	add	r27, r0
    186a:	a1 1d       	adc	r26, r1
    186c:	62 1f       	adc	r22, r18
    186e:	73 9f       	mul	r23, r19
    1870:	b0 0d       	add	r27, r0
    1872:	a1 1d       	adc	r26, r1
    1874:	62 1f       	adc	r22, r18
    1876:	83 9f       	mul	r24, r19
    1878:	a0 0d       	add	r26, r0
    187a:	61 1d       	adc	r22, r1
    187c:	22 1f       	adc	r18, r18
    187e:	74 9f       	mul	r23, r20
    1880:	33 27       	eor	r19, r19
    1882:	a0 0d       	add	r26, r0
    1884:	61 1d       	adc	r22, r1
    1886:	23 1f       	adc	r18, r19
    1888:	84 9f       	mul	r24, r20
    188a:	60 0d       	add	r22, r0
    188c:	21 1d       	adc	r18, r1
    188e:	82 2f       	mov	r24, r18
    1890:	76 2f       	mov	r23, r22
    1892:	6a 2f       	mov	r22, r26
    1894:	11 24       	eor	r1, r1
    1896:	9f 57       	subi	r25, 0x7F	; 127
    1898:	50 40       	sbci	r21, 0x00	; 0
    189a:	8a f0       	brmi	.+34     	; 0x18be <__mulsf3_pse+0x84>
    189c:	e1 f0       	breq	.+56     	; 0x18d6 <__mulsf3_pse+0x9c>
    189e:	88 23       	and	r24, r24
    18a0:	4a f0       	brmi	.+18     	; 0x18b4 <__mulsf3_pse+0x7a>
    18a2:	ee 0f       	add	r30, r30
    18a4:	ff 1f       	adc	r31, r31
    18a6:	bb 1f       	adc	r27, r27
    18a8:	66 1f       	adc	r22, r22
    18aa:	77 1f       	adc	r23, r23
    18ac:	88 1f       	adc	r24, r24
    18ae:	91 50       	subi	r25, 0x01	; 1
    18b0:	50 40       	sbci	r21, 0x00	; 0
    18b2:	a9 f7       	brne	.-22     	; 0x189e <__mulsf3_pse+0x64>
    18b4:	9e 3f       	cpi	r25, 0xFE	; 254
    18b6:	51 05       	cpc	r21, r1
    18b8:	70 f0       	brcs	.+28     	; 0x18d6 <__mulsf3_pse+0x9c>
    18ba:	60 cf       	rjmp	.-320    	; 0x177c <__fp_inf>
    18bc:	aa cf       	rjmp	.-172    	; 0x1812 <__fp_szero>
    18be:	5f 3f       	cpi	r21, 0xFF	; 255
    18c0:	ec f3       	brlt	.-6      	; 0x18bc <__mulsf3_pse+0x82>
    18c2:	98 3e       	cpi	r25, 0xE8	; 232
    18c4:	dc f3       	brlt	.-10     	; 0x18bc <__mulsf3_pse+0x82>
    18c6:	86 95       	lsr	r24
    18c8:	77 95       	ror	r23
    18ca:	67 95       	ror	r22
    18cc:	b7 95       	ror	r27
    18ce:	f7 95       	ror	r31
    18d0:	e7 95       	ror	r30
    18d2:	9f 5f       	subi	r25, 0xFF	; 255
    18d4:	c1 f7       	brne	.-16     	; 0x18c6 <__mulsf3_pse+0x8c>
    18d6:	fe 2b       	or	r31, r30
    18d8:	88 0f       	add	r24, r24
    18da:	91 1d       	adc	r25, r1
    18dc:	96 95       	lsr	r25
    18de:	87 95       	ror	r24
    18e0:	97 f9       	bld	r25, 7
    18e2:	08 95       	ret

000018e4 <__divmodsi4>:
    18e4:	05 2e       	mov	r0, r21
    18e6:	97 fb       	bst	r25, 7
    18e8:	16 f4       	brtc	.+4      	; 0x18ee <__divmodsi4+0xa>
    18ea:	00 94       	com	r0
    18ec:	06 d0       	rcall	.+12     	; 0x18fa <__divmodsi4_neg1>
    18ee:	57 fd       	sbrc	r21, 7
    18f0:	0c d0       	rcall	.+24     	; 0x190a <__divmodsi4_neg2>
    18f2:	1f d0       	rcall	.+62     	; 0x1932 <__udivmodsi4>
    18f4:	07 fc       	sbrc	r0, 7
    18f6:	09 d0       	rcall	.+18     	; 0x190a <__divmodsi4_neg2>
    18f8:	7e f4       	brtc	.+30     	; 0x1918 <__divmodsi4_exit>

000018fa <__divmodsi4_neg1>:
    18fa:	90 95       	com	r25
    18fc:	80 95       	com	r24
    18fe:	70 95       	com	r23
    1900:	61 95       	neg	r22
    1902:	7f 4f       	sbci	r23, 0xFF	; 255
    1904:	8f 4f       	sbci	r24, 0xFF	; 255
    1906:	9f 4f       	sbci	r25, 0xFF	; 255
    1908:	08 95       	ret

0000190a <__divmodsi4_neg2>:
    190a:	50 95       	com	r21
    190c:	40 95       	com	r20
    190e:	30 95       	com	r19
    1910:	21 95       	neg	r18
    1912:	3f 4f       	sbci	r19, 0xFF	; 255
    1914:	4f 4f       	sbci	r20, 0xFF	; 255
    1916:	5f 4f       	sbci	r21, 0xFF	; 255

00001918 <__divmodsi4_exit>:
    1918:	08 95       	ret

0000191a <__umulhisi3>:
    191a:	a2 9f       	mul	r26, r18
    191c:	b0 01       	movw	r22, r0
    191e:	b3 9f       	mul	r27, r19
    1920:	c0 01       	movw	r24, r0
    1922:	a3 9f       	mul	r26, r19
    1924:	01 d0       	rcall	.+2      	; 0x1928 <__umulhisi3+0xe>
    1926:	b2 9f       	mul	r27, r18
    1928:	70 0d       	add	r23, r0
    192a:	81 1d       	adc	r24, r1
    192c:	11 24       	eor	r1, r1
    192e:	91 1d       	adc	r25, r1
    1930:	08 95       	ret

00001932 <__udivmodsi4>:
    1932:	a1 e2       	ldi	r26, 0x21	; 33
    1934:	1a 2e       	mov	r1, r26
    1936:	aa 1b       	sub	r26, r26
    1938:	bb 1b       	sub	r27, r27
    193a:	fd 01       	movw	r30, r26
    193c:	0d c0       	rjmp	.+26     	; 0x1958 <__udivmodsi4_ep>

0000193e <__udivmodsi4_loop>:
    193e:	aa 1f       	adc	r26, r26
    1940:	bb 1f       	adc	r27, r27
    1942:	ee 1f       	adc	r30, r30
    1944:	ff 1f       	adc	r31, r31
    1946:	a2 17       	cp	r26, r18
    1948:	b3 07       	cpc	r27, r19
    194a:	e4 07       	cpc	r30, r20
    194c:	f5 07       	cpc	r31, r21
    194e:	20 f0       	brcs	.+8      	; 0x1958 <__udivmodsi4_ep>
    1950:	a2 1b       	sub	r26, r18
    1952:	b3 0b       	sbc	r27, r19
    1954:	e4 0b       	sbc	r30, r20
    1956:	f5 0b       	sbc	r31, r21

00001958 <__udivmodsi4_ep>:
    1958:	66 1f       	adc	r22, r22
    195a:	77 1f       	adc	r23, r23
    195c:	88 1f       	adc	r24, r24
    195e:	99 1f       	adc	r25, r25
    1960:	1a 94       	dec	r1
    1962:	69 f7       	brne	.-38     	; 0x193e <__udivmodsi4_loop>
    1964:	60 95       	com	r22
    1966:	70 95       	com	r23
    1968:	80 95       	com	r24
    196a:	90 95       	com	r25
    196c:	9b 01       	movw	r18, r22
    196e:	ac 01       	movw	r20, r24
    1970:	bd 01       	movw	r22, r26
    1972:	cf 01       	movw	r24, r30
    1974:	08 95       	ret

00001976 <__eerd_block_m8>:
    1976:	dc 01       	movw	r26, r24
    1978:	cb 01       	movw	r24, r22

0000197a <__eerd_blraw_m8>:
    197a:	fc 01       	movw	r30, r24
    197c:	e1 99       	sbic	0x1c, 1	; 28
    197e:	fe cf       	rjmp	.-4      	; 0x197c <__eerd_blraw_m8+0x2>
    1980:	06 c0       	rjmp	.+12     	; 0x198e <__eerd_blraw_m8+0x14>
    1982:	ff bb       	out	0x1f, r31	; 31
    1984:	ee bb       	out	0x1e, r30	; 30
    1986:	e0 9a       	sbi	0x1c, 0	; 28
    1988:	31 96       	adiw	r30, 0x01	; 1
    198a:	0d b2       	in	r0, 0x1d	; 29
    198c:	0d 92       	st	X+, r0
    198e:	41 50       	subi	r20, 0x01	; 1
    1990:	50 40       	sbci	r21, 0x00	; 0
    1992:	b8 f7       	brcc	.-18     	; 0x1982 <__eerd_blraw_m8+0x8>
    1994:	08 95       	ret

00001996 <_exit>:
    1996:	f8 94       	cli

00001998 <__stop_program>:
    1998:	ff cf       	rjmp	.-2      	; 0x1998 <__stop_program>
