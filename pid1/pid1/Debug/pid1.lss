
pid1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001a9c  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000004a  00800060  00001a9c  00001b50  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000007a  008000aa  008000aa  00001b9a  2**0
                  ALLOC
  3 .eeprom       0000000a  00810000  00810000  00001b9a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         000007d4  00000000  00000000  00001ba4  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      000000e3  00000000  00000000  00002378  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      0000002f  00000000  00000000  0000245b  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000390  00000000  00000000  0000248a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   000035a7  00000000  00000000  0000281a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000011bc  00000000  00000000  00005dc1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000169d  00000000  00000000  00006f7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000830  00000000  00000000  0000861c  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000db3  00000000  00000000  00008e4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00001c18  00000000  00000000  00009bff  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000338  00000000  00000000  0000b817  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	19 c1       	rjmp	.+562    	; 0x234 <__ctors_end>
       2:	33 c1       	rjmp	.+614    	; 0x26a <__bad_interrupt>
       4:	32 c1       	rjmp	.+612    	; 0x26a <__bad_interrupt>
       6:	6a cc       	rjmp	.-1836   	; 0xfffff8dc <__eeprom_end+0xff7ef8d2>
       8:	30 c1       	rjmp	.+608    	; 0x26a <__bad_interrupt>
       a:	2f c1       	rjmp	.+606    	; 0x26a <__bad_interrupt>
       c:	2e c1       	rjmp	.+604    	; 0x26a <__bad_interrupt>
       e:	2d c1       	rjmp	.+602    	; 0x26a <__bad_interrupt>
      10:	2c c1       	rjmp	.+600    	; 0x26a <__bad_interrupt>
      12:	28 cb       	rjmp	.-2480   	; 0xfffff664 <__eeprom_end+0xff7ef65a>
      14:	2a c1       	rjmp	.+596    	; 0x26a <__bad_interrupt>
      16:	29 c1       	rjmp	.+594    	; 0x26a <__bad_interrupt>
      18:	28 c1       	rjmp	.+592    	; 0x26a <__bad_interrupt>
      1a:	27 c1       	rjmp	.+590    	; 0x26a <__bad_interrupt>
      1c:	02 c2       	rjmp	.+1028   	; 0x422 <__vector_14>
      1e:	25 c1       	rjmp	.+586    	; 0x26a <__bad_interrupt>
      20:	ff ca       	rjmp	.-2562   	; 0xfffff620 <__eeprom_end+0xff7ef616>
      22:	23 c1       	rjmp	.+582    	; 0x26a <__bad_interrupt>
      24:	22 c1       	rjmp	.+580    	; 0x26a <__bad_interrupt>
      26:	2f c4       	rjmp	.+2142   	; 0x886 <decode_led_char+0x48>
      28:	3f c4       	rjmp	.+2174   	; 0x8a8 <decode_led_char+0x6a>
      2a:	3e c4       	rjmp	.+2172   	; 0x8a8 <decode_led_char+0x6a>
      2c:	3d c4       	rjmp	.+2170   	; 0x8a8 <decode_led_char+0x6a>
      2e:	3c c4       	rjmp	.+2168   	; 0x8a8 <decode_led_char+0x6a>
      30:	3b c4       	rjmp	.+2166   	; 0x8a8 <decode_led_char+0x6a>
      32:	3a c4       	rjmp	.+2164   	; 0x8a8 <decode_led_char+0x6a>
      34:	39 c4       	rjmp	.+2162   	; 0x8a8 <decode_led_char+0x6a>
      36:	38 c4       	rjmp	.+2160   	; 0x8a8 <decode_led_char+0x6a>
      38:	37 c4       	rjmp	.+2158   	; 0x8a8 <decode_led_char+0x6a>
      3a:	36 c4       	rjmp	.+2156   	; 0x8a8 <decode_led_char+0x6a>
      3c:	35 c4       	rjmp	.+2154   	; 0x8a8 <decode_led_char+0x6a>
      3e:	1d c4       	rjmp	.+2106   	; 0x87a <decode_led_char+0x3c>
      40:	1e c4       	rjmp	.+2108   	; 0x87e <decode_led_char+0x40>
      42:	19 c4       	rjmp	.+2098   	; 0x876 <decode_led_char+0x38>
      44:	31 c4       	rjmp	.+2146   	; 0x8a8 <decode_led_char+0x6a>
      46:	05 c4       	rjmp	.+2058   	; 0x852 <decode_led_char+0x14>
      48:	2e c4       	rjmp	.+2140   	; 0x8a6 <decode_led_char+0x68>
      4a:	05 c4       	rjmp	.+2058   	; 0x856 <decode_led_char+0x18>
      4c:	06 c4       	rjmp	.+2060   	; 0x85a <decode_led_char+0x1c>
      4e:	07 c4       	rjmp	.+2062   	; 0x85e <decode_led_char+0x20>
      50:	08 c4       	rjmp	.+2064   	; 0x862 <decode_led_char+0x24>
      52:	09 c4       	rjmp	.+2066   	; 0x866 <decode_led_char+0x28>
      54:	0a c4       	rjmp	.+2068   	; 0x86a <decode_led_char+0x2c>
      56:	0b c4       	rjmp	.+2070   	; 0x86e <decode_led_char+0x30>
      58:	0c c4       	rjmp	.+2072   	; 0x872 <decode_led_char+0x34>
      5a:	26 c4       	rjmp	.+2124   	; 0x8a8 <decode_led_char+0x6a>
      5c:	25 c4       	rjmp	.+2122   	; 0x8a8 <decode_led_char+0x6a>
      5e:	24 c4       	rjmp	.+2120   	; 0x8a8 <decode_led_char+0x6a>
      60:	23 c4       	rjmp	.+2118   	; 0x8a8 <decode_led_char+0x6a>
      62:	22 c4       	rjmp	.+2116   	; 0x8a8 <decode_led_char+0x6a>
      64:	21 c4       	rjmp	.+2114   	; 0x8a8 <decode_led_char+0x6a>
      66:	20 c4       	rjmp	.+2112   	; 0x8a8 <decode_led_char+0x6a>
      68:	1f c4       	rjmp	.+2110   	; 0x8a8 <decode_led_char+0x6a>
      6a:	1e c4       	rjmp	.+2108   	; 0x8a8 <decode_led_char+0x6a>
      6c:	10 c4       	rjmp	.+2080   	; 0x88e <decode_led_char+0x50>
      6e:	15 c4       	rjmp	.+2090   	; 0x89a <decode_led_char+0x5c>
      70:	18 c4       	rjmp	.+2096   	; 0x8a2 <decode_led_char+0x64>
      72:	0f c4       	rjmp	.+2078   	; 0x892 <decode_led_char+0x54>
      74:	19 c4       	rjmp	.+2098   	; 0x8a8 <decode_led_char+0x6a>
      76:	18 c4       	rjmp	.+2096   	; 0x8a8 <decode_led_char+0x6a>
      78:	17 c4       	rjmp	.+2094   	; 0x8a8 <decode_led_char+0x6a>
      7a:	16 c4       	rjmp	.+2092   	; 0x8a8 <decode_led_char+0x6a>
      7c:	15 c4       	rjmp	.+2090   	; 0x8a8 <decode_led_char+0x6a>
      7e:	14 c4       	rjmp	.+2088   	; 0x8a8 <decode_led_char+0x6a>
      80:	13 c4       	rjmp	.+2086   	; 0x8a8 <decode_led_char+0x6a>
      82:	09 c4       	rjmp	.+2066   	; 0x896 <decode_led_char+0x58>
      84:	e6 c3       	rjmp	.+1996   	; 0x852 <decode_led_char+0x14>
      86:	0b c4       	rjmp	.+2070   	; 0x89e <decode_led_char+0x60>
      88:	0f c4       	rjmp	.+2078   	; 0x8a8 <decode_led_char+0x6a>
      8a:	0e c4       	rjmp	.+2076   	; 0x8a8 <decode_led_char+0x6a>
      8c:	ea c3       	rjmp	.+2004   	; 0x862 <decode_led_char+0x24>
      8e:	0c c4       	rjmp	.+2072   	; 0x8a8 <decode_led_char+0x6a>
      90:	0b c4       	rjmp	.+2070   	; 0x8a8 <decode_led_char+0x6a>
      92:	0a c4       	rjmp	.+2068   	; 0x8a8 <decode_led_char+0x6a>
      94:	09 c4       	rjmp	.+2066   	; 0x8a8 <decode_led_char+0x6a>
      96:	08 c4       	rjmp	.+2064   	; 0x8a8 <decode_led_char+0x6a>
      98:	07 c4       	rjmp	.+2062   	; 0x8a8 <decode_led_char+0x6a>
      9a:	06 c4       	rjmp	.+2060   	; 0x8a8 <decode_led_char+0x6a>
      9c:	05 c4       	rjmp	.+2058   	; 0x8a8 <decode_led_char+0x6a>
      9e:	04 c4       	rjmp	.+2056   	; 0x8a8 <decode_led_char+0x6a>
      a0:	03 c4       	rjmp	.+2054   	; 0x8a8 <decode_led_char+0x6a>
      a2:	02 c4       	rjmp	.+2052   	; 0x8a8 <decode_led_char+0x6a>
      a4:	ee c3       	rjmp	.+2012   	; 0x882 <decode_led_char+0x44>
      a6:	00 c4       	rjmp	.+2048   	; 0x8a8 <decode_led_char+0x6a>
      a8:	ff c3       	rjmp	.+2046   	; 0x8a8 <decode_led_char+0x6a>
      aa:	fe c3       	rjmp	.+2044   	; 0x8a8 <decode_led_char+0x6a>
      ac:	fd c3       	rjmp	.+2042   	; 0x8a8 <decode_led_char+0x6a>
      ae:	fc c3       	rjmp	.+2040   	; 0x8a8 <decode_led_char+0x6a>
      b0:	fb c3       	rjmp	.+2038   	; 0x8a8 <decode_led_char+0x6a>
      b2:	fa c3       	rjmp	.+2036   	; 0x8a8 <decode_led_char+0x6a>
      b4:	f9 c3       	rjmp	.+2034   	; 0x8a8 <decode_led_char+0x6a>
      b6:	f8 c3       	rjmp	.+2032   	; 0x8a8 <decode_led_char+0x6a>
      b8:	f7 c3       	rjmp	.+2030   	; 0x8a8 <decode_led_char+0x6a>
      ba:	f6 c3       	rjmp	.+2028   	; 0x8a8 <decode_led_char+0x6a>
      bc:	f5 c3       	rjmp	.+2026   	; 0x8a8 <decode_led_char+0x6a>
      be:	f4 c3       	rjmp	.+2024   	; 0x8a8 <decode_led_char+0x6a>
      c0:	f3 c3       	rjmp	.+2022   	; 0x8a8 <decode_led_char+0x6a>
      c2:	f2 c3       	rjmp	.+2020   	; 0x8a8 <decode_led_char+0x6a>
      c4:	f1 c3       	rjmp	.+2018   	; 0x8a8 <decode_led_char+0x6a>
      c6:	f0 c3       	rjmp	.+2016   	; 0x8a8 <decode_led_char+0x6a>
      c8:	ef c3       	rjmp	.+2014   	; 0x8a8 <decode_led_char+0x6a>
      ca:	ee c3       	rjmp	.+2012   	; 0x8a8 <decode_led_char+0x6a>
      cc:	ed c3       	rjmp	.+2010   	; 0x8a8 <decode_led_char+0x6a>
      ce:	ec c3       	rjmp	.+2008   	; 0x8a8 <decode_led_char+0x6a>
      d0:	eb c3       	rjmp	.+2006   	; 0x8a8 <decode_led_char+0x6a>
      d2:	ea c3       	rjmp	.+2004   	; 0x8a8 <decode_led_char+0x6a>
      d4:	e9 c3       	rjmp	.+2002   	; 0x8a8 <decode_led_char+0x6a>
      d6:	e8 c3       	rjmp	.+2000   	; 0x8a8 <decode_led_char+0x6a>
      d8:	e7 c3       	rjmp	.+1998   	; 0x8a8 <decode_led_char+0x6a>
      da:	e6 c3       	rjmp	.+1996   	; 0x8a8 <decode_led_char+0x6a>
      dc:	e5 c3       	rjmp	.+1994   	; 0x8a8 <decode_led_char+0x6a>
      de:	e4 c3       	rjmp	.+1992   	; 0x8a8 <decode_led_char+0x6a>
      e0:	e3 c3       	rjmp	.+1990   	; 0x8a8 <decode_led_char+0x6a>
      e2:	e2 c3       	rjmp	.+1988   	; 0x8a8 <decode_led_char+0x6a>
      e4:	e1 c3       	rjmp	.+1986   	; 0x8a8 <decode_led_char+0x6a>
      e6:	e0 c3       	rjmp	.+1984   	; 0x8a8 <decode_led_char+0x6a>
      e8:	df c3       	rjmp	.+1982   	; 0x8a8 <decode_led_char+0x6a>
      ea:	de c3       	rjmp	.+1980   	; 0x8a8 <decode_led_char+0x6a>
      ec:	dd c3       	rjmp	.+1978   	; 0x8a8 <decode_led_char+0x6a>
      ee:	dc c3       	rjmp	.+1976   	; 0x8a8 <decode_led_char+0x6a>
      f0:	db c3       	rjmp	.+1974   	; 0x8a8 <decode_led_char+0x6a>
      f2:	da c3       	rjmp	.+1972   	; 0x8a8 <decode_led_char+0x6a>
      f4:	d9 c3       	rjmp	.+1970   	; 0x8a8 <decode_led_char+0x6a>
      f6:	d8 c3       	rjmp	.+1968   	; 0x8a8 <decode_led_char+0x6a>
      f8:	d7 c3       	rjmp	.+1966   	; 0x8a8 <decode_led_char+0x6a>
      fa:	d6 c3       	rjmp	.+1964   	; 0x8a8 <decode_led_char+0x6a>
      fc:	d5 c3       	rjmp	.+1962   	; 0x8a8 <decode_led_char+0x6a>
      fe:	d4 c3       	rjmp	.+1960   	; 0x8a8 <decode_led_char+0x6a>
     100:	d3 c3       	rjmp	.+1958   	; 0x8a8 <decode_led_char+0x6a>
     102:	d2 c3       	rjmp	.+1956   	; 0x8a8 <decode_led_char+0x6a>
     104:	d1 c3       	rjmp	.+1954   	; 0x8a8 <decode_led_char+0x6a>
     106:	d0 c3       	rjmp	.+1952   	; 0x8a8 <decode_led_char+0x6a>
     108:	cf c3       	rjmp	.+1950   	; 0x8a8 <decode_led_char+0x6a>
     10a:	ce c3       	rjmp	.+1948   	; 0x8a8 <decode_led_char+0x6a>
     10c:	cd c3       	rjmp	.+1946   	; 0x8a8 <decode_led_char+0x6a>
     10e:	cc c3       	rjmp	.+1944   	; 0x8a8 <decode_led_char+0x6a>
     110:	cb c3       	rjmp	.+1942   	; 0x8a8 <decode_led_char+0x6a>
     112:	ca c3       	rjmp	.+1940   	; 0x8a8 <decode_led_char+0x6a>
     114:	c9 c3       	rjmp	.+1938   	; 0x8a8 <decode_led_char+0x6a>
     116:	c8 c3       	rjmp	.+1936   	; 0x8a8 <decode_led_char+0x6a>
     118:	c7 c3       	rjmp	.+1934   	; 0x8a8 <decode_led_char+0x6a>
     11a:	c6 c3       	rjmp	.+1932   	; 0x8a8 <decode_led_char+0x6a>
     11c:	c5 c3       	rjmp	.+1930   	; 0x8a8 <decode_led_char+0x6a>
     11e:	c4 c3       	rjmp	.+1928   	; 0x8a8 <decode_led_char+0x6a>
     120:	c3 c3       	rjmp	.+1926   	; 0x8a8 <decode_led_char+0x6a>
     122:	c2 c3       	rjmp	.+1924   	; 0x8a8 <decode_led_char+0x6a>
     124:	c1 c3       	rjmp	.+1922   	; 0x8a8 <decode_led_char+0x6a>
     126:	c0 c3       	rjmp	.+1920   	; 0x8a8 <decode_led_char+0x6a>
     128:	bf c3       	rjmp	.+1918   	; 0x8a8 <decode_led_char+0x6a>
     12a:	be c3       	rjmp	.+1916   	; 0x8a8 <decode_led_char+0x6a>
     12c:	bd c3       	rjmp	.+1914   	; 0x8a8 <decode_led_char+0x6a>
     12e:	bc c3       	rjmp	.+1912   	; 0x8a8 <decode_led_char+0x6a>
     130:	bb c3       	rjmp	.+1910   	; 0x8a8 <decode_led_char+0x6a>
     132:	ba c3       	rjmp	.+1908   	; 0x8a8 <decode_led_char+0x6a>
     134:	b9 c3       	rjmp	.+1906   	; 0x8a8 <decode_led_char+0x6a>
     136:	b8 c3       	rjmp	.+1904   	; 0x8a8 <decode_led_char+0x6a>
     138:	b7 c3       	rjmp	.+1902   	; 0x8a8 <decode_led_char+0x6a>
     13a:	b6 c3       	rjmp	.+1900   	; 0x8a8 <decode_led_char+0x6a>
     13c:	b5 c3       	rjmp	.+1898   	; 0x8a8 <decode_led_char+0x6a>
     13e:	b4 c3       	rjmp	.+1896   	; 0x8a8 <decode_led_char+0x6a>
     140:	b3 c3       	rjmp	.+1894   	; 0x8a8 <decode_led_char+0x6a>
     142:	b2 c3       	rjmp	.+1892   	; 0x8a8 <decode_led_char+0x6a>
     144:	b1 c3       	rjmp	.+1890   	; 0x8a8 <decode_led_char+0x6a>
     146:	a1 c3       	rjmp	.+1858   	; 0x88a <decode_led_char+0x4c>

00000148 <menuFunctionSet>:
     148:	01 53 08 f9 06 87 07 03 83 07 f7 07 d7 05 02 f3     .S..............
     158:	07 8a 07 7b 07 05 69 07 24 07 00 00 0b dd 05 24     ...{..i.$......$
     168:	07 eb 05 04 69 07 a6 06 00 00 0c dd 05 a6 06 eb     ....i...........
     178:	05 06 71 07 5c 06 00 00 09 dd 05 5c 06 eb 05 07     ..q.\......\....
     188:	71 07 12 06 00 00 0a dd 05 12 06 eb 05 08 04 06     q...............
     198:	f1 05 00 00 0d f6 05 f1 05 00 00                    ...........

000001a3 <menuJumpSet>:
     1a3:	01 06 00 03 a8 01 00 01 02 40 01 00 02 05 28 02     .........@....(.
     1b3:	00 01 01 80 03 00 83 01 40 05 00 82 01 00 05 04     ........@.......
     1c3:	00 04 68 05 02 00 07 a8 05 00 01 0b 28 0b 00 83     ..h.........(...
     1d3:	05 28 04 00 82 01 00 04 04 00 06 68 04 02 00 05     .(.........h....
     1e3:	a8 04 00 01 0c 28 0c 00 83 04 28 06 00 82 01 00     .....(....(.....
     1f3:	06 04 00 07 68 06 02 00 04 a8 06 00 01 09 00 07     ....h...........
     203:	00 82 01 00 07 04 00 05 68 07 02 00 06 a8 07 00     ........h.......
     213:	01 0a 00 09 00 02 06 00 09 00 01 08 14 08 00 83     ................
     223:	01 00 0a 00 02 07 00 0a 00 01 0d 14 0d 00 83 01     ................
	...

00000234 <__ctors_end>:
     234:	11 24       	eor	r1, r1
     236:	1f be       	out	0x3f, r1	; 63
     238:	cf e5       	ldi	r28, 0x5F	; 95
     23a:	d4 e0       	ldi	r29, 0x04	; 4
     23c:	de bf       	out	0x3e, r29	; 62
     23e:	cd bf       	out	0x3d, r28	; 61

00000240 <__do_copy_data>:
     240:	10 e0       	ldi	r17, 0x00	; 0
     242:	a0 e6       	ldi	r26, 0x60	; 96
     244:	b0 e0       	ldi	r27, 0x00	; 0
     246:	ec e9       	ldi	r30, 0x9C	; 156
     248:	fa e1       	ldi	r31, 0x1A	; 26
     24a:	02 c0       	rjmp	.+4      	; 0x250 <__do_copy_data+0x10>
     24c:	05 90       	lpm	r0, Z+
     24e:	0d 92       	st	X+, r0
     250:	aa 3a       	cpi	r26, 0xAA	; 170
     252:	b1 07       	cpc	r27, r17
     254:	d9 f7       	brne	.-10     	; 0x24c <__do_copy_data+0xc>

00000256 <__do_clear_bss>:
     256:	21 e0       	ldi	r18, 0x01	; 1
     258:	aa ea       	ldi	r26, 0xAA	; 170
     25a:	b0 e0       	ldi	r27, 0x00	; 0
     25c:	01 c0       	rjmp	.+2      	; 0x260 <.do_clear_bss_start>

0000025e <.do_clear_bss_loop>:
     25e:	1d 92       	st	X+, r1

00000260 <.do_clear_bss_start>:
     260:	a4 32       	cpi	r26, 0x24	; 36
     262:	b2 07       	cpc	r27, r18
     264:	e1 f7       	brne	.-8      	; 0x25e <.do_clear_bss_loop>
     266:	ab d8       	rcall	.-3754   	; 0xfffff3be <__eeprom_end+0xff7ef3b4>
     268:	17 cc       	rjmp	.-2002   	; 0xfffffa98 <__eeprom_end+0xff7efa8e>

0000026a <__bad_interrupt>:
     26a:	ca ce       	rjmp	.-620    	; 0x0 <__vectors>

0000026c <conv_ADC_to_Celsius>:
//---------------------------------------------//
//---------------------------------------------//


uint16_t conv_ADC_to_Celsius(uint16_t adc_value)
{	
     26c:	0f 93       	push	r16
     26e:	1f 93       	push	r17
	return (uint16_t)(((int32_t)adc_value * k_norm + offset_norm) / (COEFF_SCALE));
     270:	20 91 aa 00 	lds	r18, 0x00AA
     274:	30 91 ab 00 	lds	r19, 0x00AB
     278:	40 91 ac 00 	lds	r20, 0x00AC
     27c:	50 91 ad 00 	lds	r21, 0x00AD
     280:	dc 01       	movw	r26, r24
     282:	dc db       	rcall	.-2120   	; 0xfffffa3c <__eeprom_end+0xff7efa32>
     284:	00 91 ae 00 	lds	r16, 0x00AE
     288:	10 91 af 00 	lds	r17, 0x00AF
     28c:	20 91 b0 00 	lds	r18, 0x00B0
     290:	30 91 b1 00 	lds	r19, 0x00B1
     294:	60 0f       	add	r22, r16
     296:	71 1f       	adc	r23, r17
     298:	82 1f       	adc	r24, r18
     29a:	93 1f       	adc	r25, r19
     29c:	28 ee       	ldi	r18, 0xE8	; 232
     29e:	33 e0       	ldi	r19, 0x03	; 3
     2a0:	40 e0       	ldi	r20, 0x00	; 0
     2a2:	50 e0       	ldi	r21, 0x00	; 0
     2a4:	9e db       	rcall	.-2244   	; 0xfffff9e2 <__eeprom_end+0xff7ef9d8>
}
     2a6:	82 2f       	mov	r24, r18
     2a8:	93 2f       	mov	r25, r19
     2aa:	1f 91       	pop	r17
     2ac:	0f 91       	pop	r16
     2ae:	08 95       	ret

000002b0 <conv_Celsius_to_ADC>:

uint16_t conv_Celsius_to_ADC(uint16_t degree_value)
{	
     2b0:	0f 93       	push	r16
     2b2:	1f 93       	push	r17
	return (uint16_t)(((int32_t)degree_value * COEFF_SCALE - offset_norm) / k_norm);
     2b4:	9c 01       	movw	r18, r24
     2b6:	a8 ee       	ldi	r26, 0xE8	; 232
     2b8:	b3 e0       	ldi	r27, 0x03	; 3
     2ba:	ae db       	rcall	.-2212   	; 0xfffffa18 <__eeprom_end+0xff7efa0e>
     2bc:	00 91 ae 00 	lds	r16, 0x00AE
     2c0:	10 91 af 00 	lds	r17, 0x00AF
     2c4:	20 91 b0 00 	lds	r18, 0x00B0
     2c8:	30 91 b1 00 	lds	r19, 0x00B1
     2cc:	60 1b       	sub	r22, r16
     2ce:	71 0b       	sbc	r23, r17
     2d0:	82 0b       	sbc	r24, r18
     2d2:	93 0b       	sbc	r25, r19
     2d4:	20 91 aa 00 	lds	r18, 0x00AA
     2d8:	30 91 ab 00 	lds	r19, 0x00AB
     2dc:	40 91 ac 00 	lds	r20, 0x00AC
     2e0:	50 91 ad 00 	lds	r21, 0x00AD
     2e4:	7e db       	rcall	.-2308   	; 0xfffff9e2 <__eeprom_end+0xff7ef9d8>
}
     2e6:	82 2f       	mov	r24, r18
     2e8:	93 2f       	mov	r25, r19
     2ea:	1f 91       	pop	r17
     2ec:	0f 91       	pop	r16
     2ee:	08 95       	ret

000002f0 <calculateCoeffs>:

void calculateCoeffs(void)
{
     2f0:	8f 92       	push	r8
     2f2:	9f 92       	push	r9
     2f4:	af 92       	push	r10
     2f6:	bf 92       	push	r11
     2f8:	cf 92       	push	r12
     2fa:	df 92       	push	r13
     2fc:	ef 92       	push	r14
     2fe:	ff 92       	push	r15
     300:	cf 93       	push	r28
     302:	df 93       	push	r29
	k_norm = ((int32_t)(cpoint2 - cpoint1) * COEFF_SCALE) / ((int32_t)(cpoint2_adc - cpoint1_adc));
     304:	b0 90 f2 00 	lds	r11, 0x00F2
     308:	c0 91 f8 00 	lds	r28, 0x00F8
     30c:	d0 91 f9 00 	lds	r29, 0x00F9
     310:	a0 91 fd 00 	lds	r26, 0x00FD
     314:	b0 e0       	ldi	r27, 0x00	; 0
     316:	ab 19       	sub	r26, r11
     318:	b1 09       	sbc	r27, r1
     31a:	28 ee       	ldi	r18, 0xE8	; 232
     31c:	33 e0       	ldi	r19, 0x03	; 3
     31e:	88 db       	rcall	.-2288   	; 0xfffffa30 <__eeprom_end+0xff7efa26>
     320:	20 91 fb 00 	lds	r18, 0x00FB
     324:	30 91 fc 00 	lds	r19, 0x00FC
     328:	2c 1b       	sub	r18, r28
     32a:	3d 0b       	sbc	r19, r29
     32c:	40 e0       	ldi	r20, 0x00	; 0
     32e:	50 e0       	ldi	r21, 0x00	; 0
     330:	58 db       	rcall	.-2384   	; 0xfffff9e2 <__eeprom_end+0xff7ef9d8>
     332:	69 01       	movw	r12, r18
     334:	7a 01       	movw	r14, r20
     336:	20 93 aa 00 	sts	0x00AA, r18
     33a:	30 93 ab 00 	sts	0x00AB, r19
     33e:	40 93 ac 00 	sts	0x00AC, r20
     342:	50 93 ad 00 	sts	0x00AD, r21
	offset_norm = (int32_t)cpoint1 * COEFF_SCALE - (int32_t)cpoint1_adc * k_norm;
     346:	2b 2d       	mov	r18, r11
     348:	30 e0       	ldi	r19, 0x00	; 0
     34a:	a8 ee       	ldi	r26, 0xE8	; 232
     34c:	b3 e0       	ldi	r27, 0x03	; 3
     34e:	64 db       	rcall	.-2360   	; 0xfffffa18 <__eeprom_end+0xff7efa0e>
     350:	4b 01       	movw	r8, r22
     352:	5c 01       	movw	r10, r24
     354:	de 01       	movw	r26, r28
     356:	a7 01       	movw	r20, r14
     358:	96 01       	movw	r18, r12
     35a:	70 db       	rcall	.-2336   	; 0xfffffa3c <__eeprom_end+0xff7efa32>
     35c:	86 1a       	sub	r8, r22
     35e:	97 0a       	sbc	r9, r23
     360:	a8 0a       	sbc	r10, r24
     362:	b9 0a       	sbc	r11, r25
     364:	80 92 ae 00 	sts	0x00AE, r8
     368:	90 92 af 00 	sts	0x00AF, r9
     36c:	a0 92 b0 00 	sts	0x00B0, r10
     370:	b0 92 b1 00 	sts	0x00B1, r11
}
     374:	df 91       	pop	r29
     376:	cf 91       	pop	r28
     378:	ff 90       	pop	r15
     37a:	ef 90       	pop	r14
     37c:	df 90       	pop	r13
     37e:	cf 90       	pop	r12
     380:	bf 90       	pop	r11
     382:	af 90       	pop	r10
     384:	9f 90       	pop	r9
     386:	8f 90       	pop	r8
     388:	08 95       	ret

0000038a <addToRingU16>:
//---------------------------------------------//
//---------------------------------------------//

// Ring buffer main function - add new data and update summ
void addToRingU16(RingBufU16_t* bptr, uint16_t sample)
{
     38a:	0f 93       	push	r16
     38c:	1f 93       	push	r17
     38e:	fc 01       	movw	r30, r24
     390:	cb 01       	movw	r24, r22
	if (bptr->stat == RNORM)
     392:	20 85       	ldd	r18, Z+8	; 0x08
     394:	21 11       	cpse	r18, r1
     396:	17 c0       	rjmp	.+46     	; 0x3c6 <addToRingU16+0x3c>
	{
		bptr->summ -= bptr->data[bptr->curr_pos];
     398:	a7 81       	ldd	r26, Z+7	; 0x07
     39a:	b0 e0       	ldi	r27, 0x00	; 0
     39c:	aa 0f       	add	r26, r26
     39e:	bb 1f       	adc	r27, r27
     3a0:	21 81       	ldd	r18, Z+1	; 0x01
     3a2:	32 81       	ldd	r19, Z+2	; 0x02
     3a4:	a2 0f       	add	r26, r18
     3a6:	b3 1f       	adc	r27, r19
     3a8:	2d 91       	ld	r18, X+
     3aa:	3c 91       	ld	r19, X
     3ac:	43 81       	ldd	r20, Z+3	; 0x03
     3ae:	54 81       	ldd	r21, Z+4	; 0x04
     3b0:	65 81       	ldd	r22, Z+5	; 0x05
     3b2:	76 81       	ldd	r23, Z+6	; 0x06
     3b4:	42 1b       	sub	r20, r18
     3b6:	53 0b       	sbc	r21, r19
     3b8:	61 09       	sbc	r22, r1
     3ba:	71 09       	sbc	r23, r1
     3bc:	43 83       	std	Z+3, r20	; 0x03
     3be:	54 83       	std	Z+4, r21	; 0x04
     3c0:	65 83       	std	Z+5, r22	; 0x05
     3c2:	76 83       	std	Z+6, r23	; 0x06
     3c4:	05 c0       	rjmp	.+10     	; 0x3d0 <addToRingU16+0x46>
	}
	else
	{
		bptr->curr_pos = 0;
     3c6:	17 82       	std	Z+7, r1	; 0x07
		bptr->summ = 0;
     3c8:	13 82       	std	Z+3, r1	; 0x03
     3ca:	14 82       	std	Z+4, r1	; 0x04
     3cc:	15 82       	std	Z+5, r1	; 0x05
     3ce:	16 82       	std	Z+6, r1	; 0x06
	}
	do	
	{
		bptr->data[bptr->curr_pos++] = sample;
		bptr->summ += sample;
     3d0:	8c 01       	movw	r16, r24
     3d2:	20 e0       	ldi	r18, 0x00	; 0
     3d4:	30 e0       	ldi	r19, 0x00	; 0
		bptr->curr_pos = 0;
		bptr->summ = 0;
	}
	do	
	{
		bptr->data[bptr->curr_pos++] = sample;
     3d6:	67 81       	ldd	r22, Z+7	; 0x07
     3d8:	a6 2f       	mov	r26, r22
     3da:	b0 e0       	ldi	r27, 0x00	; 0
     3dc:	aa 0f       	add	r26, r26
     3de:	bb 1f       	adc	r27, r27
     3e0:	41 81       	ldd	r20, Z+1	; 0x01
     3e2:	52 81       	ldd	r21, Z+2	; 0x02
     3e4:	a4 0f       	add	r26, r20
     3e6:	b5 1f       	adc	r27, r21
     3e8:	8d 93       	st	X+, r24
     3ea:	9c 93       	st	X, r25
     3ec:	a6 2f       	mov	r26, r22
     3ee:	af 5f       	subi	r26, 0xFF	; 255
     3f0:	a7 83       	std	Z+7, r26	; 0x07
		bptr->summ += sample;
     3f2:	43 81       	ldd	r20, Z+3	; 0x03
     3f4:	54 81       	ldd	r21, Z+4	; 0x04
     3f6:	65 81       	ldd	r22, Z+5	; 0x05
     3f8:	76 81       	ldd	r23, Z+6	; 0x06
     3fa:	40 0f       	add	r20, r16
     3fc:	51 1f       	adc	r21, r17
     3fe:	62 1f       	adc	r22, r18
     400:	73 1f       	adc	r23, r19
     402:	43 83       	std	Z+3, r20	; 0x03
     404:	54 83       	std	Z+4, r21	; 0x04
     406:	65 83       	std	Z+5, r22	; 0x05
     408:	76 83       	std	Z+6, r23	; 0x06
		if (bptr->curr_pos == bptr->length)	
     40a:	40 81       	ld	r20, Z
     40c:	a4 13       	cpse	r26, r20
     40e:	03 c0       	rjmp	.+6      	; 0x416 <addToRingU16+0x8c>
		{	
			bptr->curr_pos = 0;	
     410:	17 82       	std	Z+7, r1	; 0x07
			bptr->stat = RNORM;
     412:	10 86       	std	Z+8, r1	; 0x08
     414:	03 c0       	rjmp	.+6      	; 0x41c <addToRingU16+0x92>
		}
	} 
	while (bptr->stat != RNORM);
     416:	40 85       	ldd	r20, Z+8	; 0x08
     418:	41 11       	cpse	r20, r1
     41a:	dd cf       	rjmp	.-70     	; 0x3d6 <addToRingU16+0x4c>
}
     41c:	1f 91       	pop	r17
     41e:	0f 91       	pop	r16
     420:	08 95       	ret

00000422 <__vector_14>:




ISR(ADC_vect)
{
     422:	1f 92       	push	r1
     424:	0f 92       	push	r0
     426:	0f b6       	in	r0, 0x3f	; 63
     428:	0f 92       	push	r0
     42a:	11 24       	eor	r1, r1
     42c:	2f 93       	push	r18
     42e:	3f 93       	push	r19
     430:	4f 93       	push	r20
     432:	5f 93       	push	r21
     434:	6f 93       	push	r22
     436:	7f 93       	push	r23
     438:	8f 93       	push	r24
     43a:	9f 93       	push	r25
     43c:	af 93       	push	r26
     43e:	bf 93       	push	r27
     440:	ef 93       	push	r30
     442:	ff 93       	push	r31
	// Get new sample
	uint16_t new_sample = 1024 - ADC;	
     444:	84 b1       	in	r24, 0x04	; 4
     446:	95 b1       	in	r25, 0x05	; 5
     448:	60 e0       	ldi	r22, 0x00	; 0
     44a:	74 e0       	ldi	r23, 0x04	; 4
     44c:	68 1b       	sub	r22, r24
     44e:	79 0b       	sbc	r23, r25
	
	// Filter by mean window
	addToRingU16(&ringBufADC, new_sample);
     450:	80 e6       	ldi	r24, 0x60	; 96
     452:	90 e0       	ldi	r25, 0x00	; 0
     454:	9a df       	rcall	.-204    	; 0x38a <addToRingU16>
}	
     456:	ff 91       	pop	r31
     458:	ef 91       	pop	r30
     45a:	bf 91       	pop	r27
     45c:	af 91       	pop	r26
     45e:	9f 91       	pop	r25
     460:	8f 91       	pop	r24
     462:	7f 91       	pop	r23
     464:	6f 91       	pop	r22
     466:	5f 91       	pop	r21
     468:	4f 91       	pop	r20
     46a:	3f 91       	pop	r19
     46c:	2f 91       	pop	r18
     46e:	0f 90       	pop	r0
     470:	0f be       	out	0x3f, r0	; 63
     472:	0f 90       	pop	r0
     474:	1f 90       	pop	r1
     476:	18 95       	reti

00000478 <getNormalizedRingU16>:
}

// Get ring buffer normalized value
uint16_t getNormalizedRingU16(RingBufU16_t* bptr)
{
	return 	bptr->summ / bptr->length;
     478:	fc 01       	movw	r30, r24
     47a:	20 81       	ld	r18, Z
     47c:	30 e0       	ldi	r19, 0x00	; 0
     47e:	40 e0       	ldi	r20, 0x00	; 0
     480:	50 e0       	ldi	r21, 0x00	; 0
     482:	63 81       	ldd	r22, Z+3	; 0x03
     484:	74 81       	ldd	r23, Z+4	; 0x04
     486:	85 81       	ldd	r24, Z+5	; 0x05
     488:	96 81       	ldd	r25, Z+6	; 0x06
     48a:	89 da       	rcall	.-2798   	; 0xfffff99e <__eeprom_end+0xff7ef994>
}
     48c:	82 2f       	mov	r24, r18
     48e:	93 2f       	mov	r25, r19
     490:	08 95       	ret

00000492 <update_normalized_adc>:


void update_normalized_adc()
{
	// Disable interrupts from ADC - to save data integrity
	ACSR &= ~(1<<ACIE);	
     492:	43 98       	cbi	0x08, 3	; 8
	// Get normalized mean window summ
	adc_normalized = (uint16_t)getNormalizedRingU16(&ringBufADC);
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	ef df       	rcall	.-34     	; 0x478 <getNormalizedRingU16>
     49a:	90 93 ee 00 	sts	0x00EE, r25
     49e:	80 93 ed 00 	sts	0x00ED, r24
	// Enable interrupts from ADC
	ACSR |= (1<<ACIE);
     4a2:	43 9a       	sbi	0x08, 3	; 8
	// Convert to Celsius degree
	adc_celsius = conv_ADC_to_Celsius(adc_normalized);
     4a4:	e3 de       	rcall	.-570    	; 0x26c <conv_ADC_to_Celsius>
     4a6:	90 93 f0 00 	sts	0x00F0, r25
     4aa:	80 93 ef 00 	sts	0x00EF, r24
     4ae:	08 95       	ret

000004b0 <process_buttons>:
	uint8_t raw_delayed_inv;
	static uint8_t press_timer = 0;
	uint8_t long_press_mask;
	uint8_t long_press_event_mask;
	
	raw_delayed = raw_current;
     4b0:	30 91 b8 00 	lds	r19, 0x00B8
	raw_delayed_inv = raw_current_inv;
     4b4:	20 91 69 00 	lds	r18, 0x0069
	raw_current = raw_button_state;
     4b8:	90 91 10 01 	lds	r25, 0x0110
     4bc:	90 93 b8 00 	sts	0x00B8, r25
	raw_current_inv = ~raw_current;
     4c0:	49 2f       	mov	r20, r25
     4c2:	40 95       	com	r20
     4c4:	40 93 69 00 	sts	0x0069, r20
	
	// Must be before press_timer update
	long_press_mask = (press_timer >= LONG_PRESS_DELAY) ? 0xFF : 0x00;
     4c8:	80 91 b9 00 	lds	r24, 0x00B9
     4cc:	8c 30       	cpi	r24, 0x0C	; 12
     4ce:	10 f0       	brcs	.+4      	; 0x4d4 <process_buttons+0x24>
     4d0:	6f ef       	ldi	r22, 0xFF	; 255
     4d2:	01 c0       	rjmp	.+2      	; 0x4d6 <process_buttons+0x26>
     4d4:	60 e0       	ldi	r22, 0x00	; 0
	
	if (raw_delayed != raw_current)
     4d6:	39 17       	cp	r19, r25
     4d8:	41 f0       	breq	.+16     	; 0x4ea <process_buttons+0x3a>
	{
		press_timer = 0;
     4da:	10 92 b9 00 	sts	0x00B9, r1
	}
	
	// Must after press_timer update
	long_press_event_mask = (press_timer == LONG_PRESS_DELAY) ? 0xFF : 0x00;
			
	button_action_down = raw_current & raw_delayed_inv;
     4de:	89 2f       	mov	r24, r25
     4e0:	82 23       	and	r24, r18
     4e2:	80 93 b5 00 	sts	0x00B5, r24
     4e6:	50 e0       	ldi	r21, 0x00	; 0
     4e8:	14 c0       	rjmp	.+40     	; 0x512 <process_buttons+0x62>
	
	if (raw_delayed != raw_current)
	{
		press_timer = 0;
	}
	else if (press_timer <= LONG_PRESS_DELAY)
     4ea:	8d 30       	cpi	r24, 0x0D	; 13
     4ec:	18 f4       	brcc	.+6      	; 0x4f4 <process_buttons+0x44>
	{
		press_timer++;
     4ee:	8f 5f       	subi	r24, 0xFF	; 255
     4f0:	80 93 b9 00 	sts	0x00B9, r24
	}
	
	// Must after press_timer update
	long_press_event_mask = (press_timer == LONG_PRESS_DELAY) ? 0xFF : 0x00;
     4f4:	50 91 b9 00 	lds	r21, 0x00B9
     4f8:	5c 30       	cpi	r21, 0x0C	; 12
     4fa:	09 f4       	brne	.+2      	; 0x4fe <process_buttons+0x4e>
     4fc:	45 c0       	rjmp	.+138    	; 0x588 <process_buttons+0xd8>
			
	button_action_down = raw_current & raw_delayed_inv;
     4fe:	89 2f       	mov	r24, r25
     500:	82 23       	and	r24, r18
     502:	80 93 b5 00 	sts	0x00B5, r24
			
	if (press_timer > REPEAT_DELAY)
     506:	57 30       	cpi	r21, 0x07	; 7
     508:	18 f0       	brcs	.+6      	; 0x510 <process_buttons+0x60>
     50a:	50 e0       	ldi	r21, 0x00	; 0
		raw_delayed_inv |= 0xFF;
     50c:	2f ef       	ldi	r18, 0xFF	; 255
     50e:	01 c0       	rjmp	.+2      	; 0x512 <process_buttons+0x62>
	// Must after press_timer update
	long_press_event_mask = (press_timer == LONG_PRESS_DELAY) ? 0xFF : 0x00;
			
	button_action_down = raw_current & raw_delayed_inv;
			
	if (press_timer > REPEAT_DELAY)
     510:	50 e0       	ldi	r21, 0x00	; 0
		raw_delayed_inv |= 0xFF;
	
	button_action_rep = raw_current & raw_delayed_inv;
     512:	29 23       	and	r18, r25
     514:	20 93 b4 00 	sts	0x00B4, r18
	
	button_action_up_short = raw_current_inv & raw_delayed & ~long_press_mask;
     518:	60 95       	com	r22
     51a:	34 23       	and	r19, r20
     51c:	36 23       	and	r19, r22
     51e:	30 93 b3 00 	sts	0x00B3, r19
	//button_action_up_long  = raw_current_inv & raw_delayed & long_press_mask;
	button_action_long  = raw_current & long_press_event_mask;
     522:	59 23       	and	r21, r25
     524:	50 93 b2 00 	sts	0x00B2, r21
	
	// Compose button state
	button_state = (button_action_down & (BD_MENU | BD_UP | BD_DOWN | BD_ROTFWD | BD_ROTREV | BD_HEATCTRL));
     528:	87 77       	andi	r24, 0x77	; 119
     52a:	90 e0       	ldi	r25, 0x00	; 0
	if (button_action_up_short & BD_MENU)
     52c:	30 fd       	sbrc	r19, 0
     52e:	05 c0       	rjmp	.+10     	; 0x53a <process_buttons+0x8a>
	button_action_up_short = raw_current_inv & raw_delayed & ~long_press_mask;
	//button_action_up_long  = raw_current_inv & raw_delayed & long_press_mask;
	button_action_long  = raw_current & long_press_event_mask;
	
	// Compose button state
	button_state = (button_action_down & (BD_MENU | BD_UP | BD_DOWN | BD_ROTFWD | BD_ROTREV | BD_HEATCTRL));
     530:	90 93 b7 00 	sts	0x00B7, r25
     534:	80 93 b6 00 	sts	0x00B6, r24
     538:	05 c0       	rjmp	.+10     	; 0x544 <process_buttons+0x94>
	if (button_action_up_short & BD_MENU)
		button_state |= BS_MENU;
     53a:	91 60       	ori	r25, 0x01	; 1
     53c:	90 93 b7 00 	sts	0x00B7, r25
     540:	80 93 b6 00 	sts	0x00B6, r24
	//if (button_action_up_long & BD_MENU)
	if (button_action_long & BD_MENU)
     544:	50 ff       	sbrs	r21, 0
     546:	09 c0       	rjmp	.+18     	; 0x55a <process_buttons+0xaa>
		button_state |= BL_MENU;
     548:	80 91 b6 00 	lds	r24, 0x00B6
     54c:	90 91 b7 00 	lds	r25, 0x00B7
     550:	92 60       	ori	r25, 0x02	; 2
     552:	90 93 b7 00 	sts	0x00B7, r25
     556:	80 93 b6 00 	sts	0x00B6, r24
	if (button_action_rep & BD_UP)
     55a:	21 ff       	sbrs	r18, 1
     55c:	09 c0       	rjmp	.+18     	; 0x570 <process_buttons+0xc0>
		button_state |= BR_UP;	
     55e:	80 91 b6 00 	lds	r24, 0x00B6
     562:	90 91 b7 00 	lds	r25, 0x00B7
     566:	94 60       	ori	r25, 0x04	; 4
     568:	90 93 b7 00 	sts	0x00B7, r25
     56c:	80 93 b6 00 	sts	0x00B6, r24
	if (button_action_rep & BD_DOWN)
     570:	22 ff       	sbrs	r18, 2
     572:	10 c0       	rjmp	.+32     	; 0x594 <process_buttons+0xe4>
		button_state |= BR_DOWN;
     574:	80 91 b6 00 	lds	r24, 0x00B6
     578:	90 91 b7 00 	lds	r25, 0x00B7
     57c:	98 60       	ori	r25, 0x08	; 8
     57e:	90 93 b7 00 	sts	0x00B7, r25
     582:	80 93 b6 00 	sts	0x00B6, r24
     586:	08 95       	ret
	}
	
	// Must after press_timer update
	long_press_event_mask = (press_timer == LONG_PRESS_DELAY) ? 0xFF : 0x00;
			
	button_action_down = raw_current & raw_delayed_inv;
     588:	83 2f       	mov	r24, r19
     58a:	82 23       	and	r24, r18
     58c:	80 93 b5 00 	sts	0x00B5, r24
	{
		press_timer++;
	}
	
	// Must after press_timer update
	long_press_event_mask = (press_timer == LONG_PRESS_DELAY) ? 0xFF : 0x00;
     590:	5f ef       	ldi	r21, 0xFF	; 255
     592:	bc cf       	rjmp	.-136    	; 0x50c <process_buttons+0x5c>
     594:	08 95       	ret

00000596 <processRollControl>:



// Function to control motor rotation
void processRollControl(void)
{	
     596:	cf 93       	push	r28
	uint8_t beepState = 0;
	static uint8_t beepMask = 0x00;
	
	// Control direction by buttons
	if (button_action_down & BD_ROTFWD)
     598:	80 91 b5 00 	lds	r24, 0x00B5
     59c:	84 ff       	sbrs	r24, 4
     59e:	04 c0       	rjmp	.+8      	; 0x5a8 <processRollControl+0x12>
	{
		setMotorDirection(ROLL_FWD);	
     5a0:	81 e0       	ldi	r24, 0x01	; 1
     5a2:	cc d7       	rcall	.+3992   	; 0x153c <setMotorDirection>
		beepState |= 0x01;			// pressed FWD button
     5a4:	c1 e0       	ldi	r28, 0x01	; 1
     5a6:	0f c0       	rjmp	.+30     	; 0x5c6 <processRollControl+0x30>
	}		
	else if (button_action_down & BD_ROTREV)
     5a8:	85 ff       	sbrs	r24, 5
     5aa:	04 c0       	rjmp	.+8      	; 0x5b4 <processRollControl+0x1e>
	{
		setMotorDirection(ROLL_REV);
     5ac:	82 e0       	ldi	r24, 0x02	; 2
     5ae:	c6 d7       	rcall	.+3980   	; 0x153c <setMotorDirection>
		beepState |= 0x02;			// pressed REV button
     5b0:	c2 e0       	ldi	r28, 0x02	; 2
     5b2:	09 c0       	rjmp	.+18     	; 0x5c6 <processRollControl+0x30>
	}		
	else if (button_action_long & BD_CYCLE)
     5b4:	80 91 b2 00 	lds	r24, 0x00B2
     5b8:	88 23       	and	r24, r24
     5ba:	24 f4       	brge	.+8      	; 0x5c4 <processRollControl+0x2e>
	{
		stopCycleRolling(1);		// Reset points and disabled CYCLE mode (if was enabled)
     5bc:	81 e0       	ldi	r24, 0x01	; 1
     5be:	dc d7       	rcall	.+4024   	; 0x1578 <stopCycleRolling>
		beepState |= 0x08;			// reset of points by long pressing of ROLL button
     5c0:	c8 e0       	ldi	r28, 0x08	; 8
     5c2:	01 c0       	rjmp	.+2      	; 0x5c6 <processRollControl+0x30>


// Function to control motor rotation
void processRollControl(void)
{	
	uint8_t beepState = 0;
     5c4:	c0 e0       	ldi	r28, 0x00	; 0
		stopCycleRolling(1);		// Reset points and disabled CYCLE mode (if was enabled)
		beepState |= 0x08;			// reset of points by long pressing of ROLL button
	}
	
	
	if (button_action_up_short & BD_CYCLE)
     5c6:	80 91 b3 00 	lds	r24, 0x00B3
     5ca:	88 23       	and	r24, r24
     5cc:	74 f4       	brge	.+28     	; 0x5ea <processRollControl+0x54>
	{
		if (rollState & ROLL_CYCLE)
     5ce:	80 91 c9 00 	lds	r24, 0x00C9
     5d2:	82 ff       	sbrs	r24, 2
     5d4:	04 c0       	rjmp	.+8      	; 0x5de <processRollControl+0x48>
		{
			stopCycleRolling(0);
     5d6:	80 e0       	ldi	r24, 0x00	; 0
     5d8:	cf d7       	rcall	.+3998   	; 0x1578 <stopCycleRolling>
			beepState |= 0x20;		// stopped cycle
     5da:	c0 62       	ori	r28, 0x20	; 32
     5dc:	06 c0       	rjmp	.+12     	; 0x5ea <processRollControl+0x54>
		}
		else if (startCycleRolling())
     5de:	08 d8       	rcall	.-4080   	; 0xfffff5f0 <__eeprom_end+0xff7ef5e6>
     5e0:	88 23       	and	r24, r24
     5e2:	11 f0       	breq	.+4      	; 0x5e8 <processRollControl+0x52>
		{
			beepState |= 0x10;		// started cycle
     5e4:	c0 61       	ori	r28, 0x10	; 16
     5e6:	01 c0       	rjmp	.+2      	; 0x5ea <processRollControl+0x54>
		}
		else
		{
			beepState |= 0x40;		// failed to start cycle
     5e8:	c0 64       	ori	r28, 0x40	; 64
		}			
	}		
	
	if (rollState & ROLL_DIR_CHANGED)
     5ea:	80 91 c9 00 	lds	r24, 0x00C9
     5ee:	85 ff       	sbrs	r24, 5
     5f0:	04 c0       	rjmp	.+8      	; 0x5fa <processRollControl+0x64>
	{
		rollState &= ~ROLL_DIR_CHANGED;
     5f2:	8f 7d       	andi	r24, 0xDF	; 223
     5f4:	80 93 c9 00 	sts	0x00C9, r24
		beepState |= 0x04;	
     5f8:	c4 60       	ori	r28, 0x04	; 4
	}
	
	if (rollState & CYCLE_ROLL_DONE)
     5fa:	80 91 c9 00 	lds	r24, 0x00C9
     5fe:	84 ff       	sbrs	r24, 4
     600:	04 c0       	rjmp	.+8      	; 0x60a <processRollControl+0x74>
	{
		rollState &= ~CYCLE_ROLL_DONE;
     602:	8f 7e       	andi	r24, 0xEF	; 239
     604:	80 93 c9 00 	sts	0x00C9, r24
		beepState |= 0x80;	
     608:	c0 68       	ori	r28, 0x80	; 128
	}		
	
	beepState &= beepMask;
     60a:	80 91 ba 00 	lds	r24, 0x00BA
     60e:	c8 23       	and	r28, r24
	
	if (beepState & 0x80)		// Roll cycle done
     610:	3c f4       	brge	.+14     	; 0x620 <processRollControl+0x8a>
	{
		SetBeeperFreq(1000);
     612:	88 ee       	ldi	r24, 0xE8	; 232
     614:	93 e0       	ldi	r25, 0x03	; 3
     616:	35 d9       	rcall	.-3478   	; 0xfffff882 <__eeprom_end+0xff7ef878>
		StartBeep(200);
     618:	88 ec       	ldi	r24, 0xC8	; 200
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	53 d9       	rcall	.-3418   	; 0xfffff8c4 <__eeprom_end+0xff7ef8ba>
     61e:	1b c0       	rjmp	.+54     	; 0x656 <processRollControl+0xc0>
	}		
	else if (beepState & 0x40)	// Roll cycle start fail
     620:	c6 ff       	sbrs	r28, 6
     622:	07 c0       	rjmp	.+14     	; 0x632 <processRollControl+0x9c>
	{
		SetBeeperFreq(500);
     624:	84 ef       	ldi	r24, 0xF4	; 244
     626:	91 e0       	ldi	r25, 0x01	; 1
     628:	2c d9       	rcall	.-3496   	; 0xfffff882 <__eeprom_end+0xff7ef878>
		StartBeep(50);
     62a:	82 e3       	ldi	r24, 0x32	; 50
     62c:	90 e0       	ldi	r25, 0x00	; 0
     62e:	4a d9       	rcall	.-3436   	; 0xfffff8c4 <__eeprom_end+0xff7ef8ba>
     630:	12 c0       	rjmp	.+36     	; 0x656 <processRollControl+0xc0>
	} 
	else if (beepState & 0x08)	// Reset points
     632:	c3 ff       	sbrs	r28, 3
     634:	07 c0       	rjmp	.+14     	; 0x644 <processRollControl+0xae>
	{
		SetBeeperFreq(800);
     636:	80 e2       	ldi	r24, 0x20	; 32
     638:	93 e0       	ldi	r25, 0x03	; 3
     63a:	23 d9       	rcall	.-3514   	; 0xfffff882 <__eeprom_end+0xff7ef878>
		StartBeep(50);
     63c:	82 e3       	ldi	r24, 0x32	; 50
     63e:	90 e0       	ldi	r25, 0x00	; 0
     640:	41 d9       	rcall	.-3454   	; 0xfffff8c4 <__eeprom_end+0xff7ef8ba>
     642:	09 c0       	rjmp	.+18     	; 0x656 <processRollControl+0xc0>
	}							// Other
	else if ( beepState & (0x01 | 0x02 | 0x10 | 0x20 | 0x04) )
     644:	8c 2f       	mov	r24, r28
     646:	87 73       	andi	r24, 0x37	; 55
     648:	31 f0       	breq	.+12     	; 0x656 <processRollControl+0xc0>
	{
		SetBeeperFreq(1000);
     64a:	88 ee       	ldi	r24, 0xE8	; 232
     64c:	93 e0       	ldi	r25, 0x03	; 3
     64e:	19 d9       	rcall	.-3534   	; 0xfffff882 <__eeprom_end+0xff7ef878>
		StartBeep(50);	
     650:	82 e3       	ldi	r24, 0x32	; 50
     652:	90 e0       	ldi	r25, 0x00	; 0
     654:	37 d9       	rcall	.-3474   	; 0xfffff8c4 <__eeprom_end+0xff7ef8ba>
	}			
	
	// Apply mask to next sound events
	beepMask = 0xFF;
	// Disable beep from DIR_CHANGED on next call if direction buttons have been pressed
	if (beepState & 0x03)	
     656:	c3 70       	andi	r28, 0x03	; 3
     658:	21 f4       	brne	.+8      	; 0x662 <processRollControl+0xcc>
		SetBeeperFreq(1000);
		StartBeep(50);	
	}			
	
	// Apply mask to next sound events
	beepMask = 0xFF;
     65a:	8f ef       	ldi	r24, 0xFF	; 255
     65c:	80 93 ba 00 	sts	0x00BA, r24
     660:	03 c0       	rjmp	.+6      	; 0x668 <processRollControl+0xd2>
	// Disable beep from DIR_CHANGED on next call if direction buttons have been pressed
	if (beepState & 0x03)	
		beepMask &= ~0x04;	
     662:	8b ef       	ldi	r24, 0xFB	; 251
     664:	80 93 ba 00 	sts	0x00BA, r24
		
	
		
	// Indicate direction by LEDs
	clearExtraLeds(LED_ROTFWD | LED_ROTREV);
     668:	80 e3       	ldi	r24, 0x30	; 48
     66a:	59 d2       	rcall	.+1202   	; 0xb1e <clearExtraLeds>
	if (rollState & ROLL_FWD)
     66c:	80 91 c9 00 	lds	r24, 0x00C9
     670:	80 ff       	sbrs	r24, 0
     672:	03 c0       	rjmp	.+6      	; 0x67a <processRollControl+0xe4>
		setExtraLeds(LED_ROTFWD);
     674:	80 e1       	ldi	r24, 0x10	; 16
     676:	4d d2       	rcall	.+1178   	; 0xb12 <setExtraLeds>
     678:	04 c0       	rjmp	.+8      	; 0x682 <processRollControl+0xec>
	else if (rollState & ROLL_REV)
     67a:	81 ff       	sbrs	r24, 1
     67c:	02 c0       	rjmp	.+4      	; 0x682 <processRollControl+0xec>
		setExtraLeds(LED_ROTREV);
     67e:	80 e2       	ldi	r24, 0x20	; 32
     680:	48 d2       	rcall	.+1168   	; 0xb12 <setExtraLeds>
		
}
     682:	cf 91       	pop	r28
     684:	08 95       	ret

00000686 <processPID>:
	
	int16_t error, p_term, i_term, d_term, temp;
	static uint16_t lastProcessValue;
	static int16_t integAcc = 0;
	
	error = setPoint - processValue;
     686:	86 1b       	sub	r24, r22
     688:	97 0b       	sbc	r25, r23
	
	
	//------ Calculate P term --------//
	if (error > 500)
     68a:	85 3f       	cpi	r24, 0xF5	; 245
     68c:	21 e0       	ldi	r18, 0x01	; 1
     68e:	92 07       	cpc	r25, r18
     690:	5c f4       	brge	.+22     	; 0x6a8 <processPID+0x22>
	{
		p_term = 10000;
	}
	else if (error < -500)
     692:	8c 30       	cpi	r24, 0x0C	; 12
     694:	2e ef       	ldi	r18, 0xFE	; 254
     696:	92 07       	cpc	r25, r18
     698:	54 f0       	brlt	.+20     	; 0x6ae <processPID+0x28>
	{
		p_term = -10000;
	}
	else
	{
		p_term = error * Kp;
     69a:	44 e1       	ldi	r20, 0x14	; 20
     69c:	48 9f       	mul	r20, r24
     69e:	90 01       	movw	r18, r0
     6a0:	49 9f       	mul	r20, r25
     6a2:	30 0d       	add	r19, r0
     6a4:	11 24       	eor	r1, r1
     6a6:	05 c0       	rjmp	.+10     	; 0x6b2 <processPID+0x2c>
	
	
	//------ Calculate P term --------//
	if (error > 500)
	{
		p_term = 10000;
     6a8:	20 e1       	ldi	r18, 0x10	; 16
     6aa:	37 e2       	ldi	r19, 0x27	; 39
     6ac:	02 c0       	rjmp	.+4      	; 0x6b2 <processPID+0x2c>
	}
	else if (error < -500)
	{
		p_term = -10000;
     6ae:	20 ef       	ldi	r18, 0xF0	; 240
     6b0:	38 ed       	ldi	r19, 0xD8	; 216
		integAcc = -10;
	}
	i_term = integAcc * Ki;
*/	
	//------ Calculate D term --------//
	d_term = Kd * ((int16_t)(lastProcessValue - processValue));
     6b2:	40 91 c1 00 	lds	r20, 0x00C1
     6b6:	50 91 c2 00 	lds	r21, 0x00C2
     6ba:	46 1b       	sub	r20, r22
     6bc:	57 0b       	sbc	r21, r23
     6be:	ee e1       	ldi	r30, 0x1E	; 30
     6c0:	e4 9f       	mul	r30, r20
     6c2:	c0 01       	movw	r24, r0
     6c4:	e5 9f       	mul	r30, r21
     6c6:	90 0d       	add	r25, r0
     6c8:	11 24       	eor	r1, r1
	lastProcessValue = processValue;
     6ca:	70 93 c2 00 	sts	0x00C2, r23
     6ce:	60 93 c1 00 	sts	0x00C1, r22
	
	//--------- Summ terms -----------//
	//temp = (p_term + i_term) / SCALING_FACTOR;
	temp = (p_term + d_term) / SCALING_FACTOR;
     6d2:	82 0f       	add	r24, r18
     6d4:	93 1f       	adc	r25, r19
     6d6:	60 e5       	ldi	r22, 0x50	; 80
     6d8:	70 e0       	ldi	r23, 0x00	; 0
     6da:	4e d9       	rcall	.-3428   	; 0xfffff978 <__eeprom_end+0xff7ef96e>
     6dc:	86 2f       	mov	r24, r22
     6de:	97 2f       	mov	r25, r23
     6e0:	99 23       	and	r25, r25
     6e2:	14 f4       	brge	.+4      	; 0x6e8 <processPID+0x62>
     6e4:	80 e0       	ldi	r24, 0x00	; 0
     6e6:	90 e0       	ldi	r25, 0x00	; 0
	else if (temp < 0)
	{
		temp = 0;
	}
	
	return temp;
     6e8:	83 33       	cpi	r24, 0x33	; 51
     6ea:	91 05       	cpc	r25, r1
     6ec:	14 f0       	brlt	.+4      	; 0x6f2 <processPID+0x6c>
     6ee:	82 e3       	ldi	r24, 0x32	; 50
     6f0:	90 e0       	ldi	r25, 0x00	; 0
	
}
     6f2:	08 95       	ret

000006f4 <processHeaterControl>:




void processHeaterControl(void)
{
     6f4:	cf 93       	push	r28
	static uint16_t pid_output;
	static uint8_t pidEnableCnt;
	uint8_t getNewPidOutput;
	
	// Process heater ON/OFF control by button
	if (button_state & BD_HEATCTRL)
     6f6:	80 91 b6 00 	lds	r24, 0x00B6
     6fa:	86 ff       	sbrs	r24, 6
     6fc:	06 c0       	rjmp	.+12     	; 0x70a <processHeaterControl+0x16>
	{
		heaterEnabled ^= 0x01;
     6fe:	90 91 bb 00 	lds	r25, 0x00BB
     702:	81 e0       	ldi	r24, 0x01	; 1
     704:	89 27       	eor	r24, r25
     706:	80 93 bb 00 	sts	0x00BB, r24
	}
	
	
	// Check if new output value required
	if (pidEnableCnt == 0)
     70a:	80 91 bc 00 	lds	r24, 0x00BC
     70e:	81 11       	cpse	r24, r1
     710:	08 c0       	rjmp	.+16     	; 0x722 <processHeaterControl+0x2e>
	{
		getNewPidOutput = 1;
		pidEnableCnt = 80;		// in units of 50ms
     712:	80 e5       	ldi	r24, 0x50	; 80
     714:	80 93 bc 00 	sts	0x00BC, r24
		
		pidOutputUpdate = 1;	// debug
     718:	81 e0       	ldi	r24, 0x01	; 1
     71a:	80 93 f7 00 	sts	0x00F7, r24
	
	
	// Check if new output value required
	if (pidEnableCnt == 0)
	{
		getNewPidOutput = 1;
     71e:	c1 e0       	ldi	r28, 0x01	; 1
     720:	04 c0       	rjmp	.+8      	; 0x72a <processHeaterControl+0x36>
		
		pidOutputUpdate = 1;	// debug
	}
	else
	{
		pidEnableCnt--;	
     722:	81 50       	subi	r24, 0x01	; 1
     724:	80 93 bc 00 	sts	0x00BC, r24
		getNewPidOutput = 0;
     728:	c0 e0       	ldi	r28, 0x00	; 0
	}
	
	
	
	// Check if heater control should be updated
	if (heaterState & READY_TO_UPDATE_HEATER)
     72a:	80 91 ca 00 	lds	r24, 0x00CA
     72e:	88 23       	and	r24, r24
     730:	1c f4       	brge	.+6      	; 0x738 <processHeaterControl+0x44>
	{
		setHeaterControl(pid_output);
     732:	80 91 bd 00 	lds	r24, 0x00BD
     736:	f2 d6       	rcall	.+3556   	; 0x151c <setHeaterControl>
	}
	
	
	
	if (heaterEnabled)
     738:	80 91 bb 00 	lds	r24, 0x00BB
     73c:	88 23       	and	r24, r24
     73e:	11 f1       	breq	.+68     	; 0x784 <processHeaterControl+0x90>
	{
		if (getNewPidOutput)
     740:	cc 23       	and	r28, r28
     742:	41 f1       	breq	.+80     	; 0x794 <processHeaterControl+0xa0>
		{
			// Convert temperature setup to equal ADC value
			set_value_adc = conv_Celsius_to_ADC(setup_temp_value);
     744:	80 91 f3 00 	lds	r24, 0x00F3
     748:	90 91 f4 00 	lds	r25, 0x00F4
     74c:	b1 dd       	rcall	.-1182   	; 0x2b0 <conv_Celsius_to_ADC>
			// Scale up to ring buffer summ
			set_value_adc *= ADC_BUFFER_LENGTH;
     74e:	28 2f       	mov	r18, r24
     750:	39 2f       	mov	r19, r25
     752:	22 0f       	add	r18, r18
     754:	33 1f       	adc	r19, r19
     756:	c9 01       	movw	r24, r18
     758:	88 0f       	add	r24, r24
     75a:	99 1f       	adc	r25, r25
     75c:	88 0f       	add	r24, r24
     75e:	99 1f       	adc	r25, r25
     760:	82 0f       	add	r24, r18
     762:	93 1f       	adc	r25, r19
     764:	90 93 c0 00 	sts	0x00C0, r25
     768:	80 93 bf 00 	sts	0x00BF, r24
			
			// Get current process value
			ACSR &= ~(1<<ACIE);	
     76c:	43 98       	cbi	0x08, 3	; 8
			process_value = (uint16_t)ringBufADC.summ;
     76e:	60 91 63 00 	lds	r22, 0x0063
     772:	70 91 64 00 	lds	r23, 0x0064
			ACSR |= (1<<ACIE);
     776:	43 9a       	sbi	0x08, 3	; 8
			
			// Filter current process value
			// TODO?
			
			// Process PID
			pid_output = processPID(set_value_adc,process_value);	
     778:	86 df       	rcall	.-244    	; 0x686 <processPID>
     77a:	80 93 bd 00 	sts	0x00BD, r24
     77e:	10 92 be 00 	sts	0x00BE, r1
     782:	04 c0       	rjmp	.+8      	; 0x78c <processHeaterControl+0x98>
			
		}
	}
	else
	{	
		pid_output = 0;
     784:	10 92 be 00 	sts	0x00BE, r1
     788:	10 92 bd 00 	sts	0x00BD, r1
	}
	
	
	// Debug
	if (heaterEnabled)
     78c:	80 91 bb 00 	lds	r24, 0x00BB
     790:	88 23       	and	r24, r24
     792:	79 f0       	breq	.+30     	; 0x7b2 <processHeaterControl+0xbe>
	{
		setExtraLeds(LED_HEATER);
     794:	80 e4       	ldi	r24, 0x40	; 64
     796:	bd d1       	rcall	.+890    	; 0xb12 <setExtraLeds>
		setTempDbg = setup_temp_value;
     798:	80 91 f3 00 	lds	r24, 0x00F3
     79c:	80 93 f1 00 	sts	0x00F1, r24
		setAdcDbg = set_value_adc;
     7a0:	80 91 bf 00 	lds	r24, 0x00BF
     7a4:	90 91 c0 00 	lds	r25, 0x00C0
     7a8:	90 93 d8 00 	sts	0x00D8, r25
     7ac:	80 93 d7 00 	sts	0x00D7, r24
     7b0:	08 c0       	rjmp	.+16     	; 0x7c2 <processHeaterControl+0xce>
	}
	else
	{
		setTempDbg = 0;
     7b2:	10 92 f1 00 	sts	0x00F1, r1
		setAdcDbg = 0;
     7b6:	10 92 d8 00 	sts	0x00D8, r1
     7ba:	10 92 d7 00 	sts	0x00D7, r1
		clearExtraLeds(LED_HEATER);
     7be:	80 e4       	ldi	r24, 0x40	; 64
     7c0:	ae d1       	rcall	.+860    	; 0xb1e <clearExtraLeds>
	}
}
     7c2:	cf 91       	pop	r28
     7c4:	08 95       	ret

000007c6 <restoreGlobalParams>:




void restoreGlobalParams(void)
{
     7c6:	cf 93       	push	r28
     7c8:	df 93       	push	r29
     7ca:	cd b7       	in	r28, 0x3d	; 61
     7cc:	de b7       	in	r29, 0x3e	; 62
     7ce:	2a 97       	sbiw	r28, 0x0a	; 10
     7d0:	0f b6       	in	r0, 0x3f	; 63
     7d2:	f8 94       	cli
     7d4:	de bf       	out	0x3e, r29	; 62
     7d6:	0f be       	out	0x3f, r0	; 63
     7d8:	cd bf       	out	0x3d, r28	; 61
	 gParams_t gParams;
	 eeprom_read_block(&gParams,&nvParams,sizeof(nvParams));
     7da:	4a e0       	ldi	r20, 0x0A	; 10
     7dc:	50 e0       	ldi	r21, 0x00	; 0
     7de:	60 e0       	ldi	r22, 0x00	; 0
     7e0:	70 e0       	ldi	r23, 0x00	; 0
     7e2:	ce 01       	movw	r24, r28
     7e4:	01 96       	adiw	r24, 0x01	; 1
     7e6:	48 d9       	rcall	.-3440   	; 0xfffffa78 <__eeprom_end+0xff7efa6e>
	 setup_temp_value = gParams.setup_temp_value;	// reference temperature
     7e8:	89 81       	ldd	r24, Y+1	; 0x01
     7ea:	80 93 f3 00 	sts	0x00F3, r24
     7ee:	10 92 f4 00 	sts	0x00F4, r1
	 rollCycleSet = gParams.rollCycleSet;			// number of rolling cycles
     7f2:	8a 81       	ldd	r24, Y+2	; 0x02
     7f4:	80 93 f6 00 	sts	0x00F6, r24
	 sound_enable = gParams.sound_enable;			// Global sound enable
     7f8:	8b 81       	ldd	r24, Y+3	; 0x03
     7fa:	80 93 f5 00 	sts	0x00F5, r24
	 power_off_timeout = gParams.power_off_timeout;	// Auto power OFF timeout, minutes
     7fe:	8c 81       	ldd	r24, Y+4	; 0x04
     800:	80 93 fa 00 	sts	0x00FA, r24
	 cpoint1 = gParams.cpoint1;						// Calibration point 1
	 cpoint2 = gParams.cpoint2;						// Calibration point 2
	 cpoint1_adc = gParams.cpoint1_adc;
	 cpoint2_adc = gParams.cpoint2_adc;
	 
	 cpoint1 		= 25;		// TODO: check and remove
     804:	89 e1       	ldi	r24, 0x19	; 25
     806:	80 93 f2 00 	sts	0x00F2, r24
	 cpoint1_adc 	= 164;
     80a:	84 ea       	ldi	r24, 0xA4	; 164
     80c:	90 e0       	ldi	r25, 0x00	; 0
     80e:	90 93 f9 00 	sts	0x00F9, r25
     812:	80 93 f8 00 	sts	0x00F8, r24
	 cpoint2 		= 145;
     816:	81 e9       	ldi	r24, 0x91	; 145
     818:	80 93 fd 00 	sts	0x00FD, r24
	 cpoint2_adc 	= 433;
     81c:	81 eb       	ldi	r24, 0xB1	; 177
     81e:	91 e0       	ldi	r25, 0x01	; 1
     820:	90 93 fc 00 	sts	0x00FC, r25
     824:	80 93 fb 00 	sts	0x00FB, r24
	 
}
     828:	2a 96       	adiw	r28, 0x0a	; 10
     82a:	0f b6       	in	r0, 0x3f	; 63
     82c:	f8 94       	cli
     82e:	de bf       	out	0x3e, r29	; 62
     830:	0f be       	out	0x3f, r0	; 63
     832:	cd bf       	out	0x3d, r28	; 61
     834:	df 91       	pop	r29
     836:	cf 91       	pop	r28
     838:	08 95       	ret

0000083a <exitPowerOff>:




void exitPowerOff(void)
{
     83a:	08 95       	ret

0000083c <processAutoPowerOff>:
*/
}


void processAutoPowerOff(void)
{
     83c:	08 95       	ret

0000083e <decode_led_char>:
// Decodes normal string literal to the 
//	7-segment representation
//---------------------------------------------//
static uint8_t decode_led_char(char c)
{
	switch(c)
     83e:	48 2f       	mov	r20, r24
     840:	50 e0       	ldi	r21, 0x00	; 0
     842:	fa 01       	movw	r30, r20
     844:	b0 97       	sbiw	r30, 0x20	; 32
     846:	e1 39       	cpi	r30, 0x91	; 145
     848:	f1 05       	cpc	r31, r1
     84a:	70 f5       	brcc	.+92     	; 0x8a8 <decode_led_char+0x6a>
     84c:	ed 5e       	subi	r30, 0xED	; 237
     84e:	ff 4f       	sbci	r31, 0xFF	; 255
     850:	09 94       	ijmp
	{
		case 'O':
		case '0': return (SEGA | SEGB | SEGC | SEGD | SEGE | SEGF);
     852:	8f e3       	ldi	r24, 0x3F	; 63
     854:	08 95       	ret
		case '1': return (SEGB | SEGC );
		case '2': return (SEGA | SEGB | SEGD | SEGE | SEGG);
     856:	8b e5       	ldi	r24, 0x5B	; 91
     858:	08 95       	ret
		case '3': return (SEGA | SEGB | SEGC | SEGD | SEGG);
     85a:	8f e4       	ldi	r24, 0x4F	; 79
     85c:	08 95       	ret
		case '4': return (SEGB | SEGC | SEGF | SEGG);
     85e:	86 e6       	ldi	r24, 0x66	; 102
     860:	08 95       	ret
		case 'S':
		case '5': return (SEGA | SEGC | SEGD | SEGF | SEGG);
     862:	8d e6       	ldi	r24, 0x6D	; 109
     864:	08 95       	ret
		case '6': return (SEGA | SEGC | SEGD | SEGE | SEGF | SEGG);
     866:	8d e7       	ldi	r24, 0x7D	; 125
     868:	08 95       	ret
		case '7': return (SEGA | SEGB | SEGC );
     86a:	87 e0       	ldi	r24, 0x07	; 7
     86c:	08 95       	ret
		case '8': return (SEGA | SEGB | SEGC | SEGD | SEGE | SEGF | SEGG);
     86e:	8f e7       	ldi	r24, 0x7F	; 127
     870:	08 95       	ret
		case '9': return (SEGA | SEGB | SEGC | SEGD | SEGF | SEGG);
     872:	8f e6       	ldi	r24, 0x6F	; 111
     874:	08 95       	ret
		case '.': return (SEGH);
     876:	80 e8       	ldi	r24, 0x80	; 128
     878:	08 95       	ret
		case ',': return (SEGH);
     87a:	80 e8       	ldi	r24, 0x80	; 128
     87c:	08 95       	ret
		case '-': return (SEGG);
     87e:	80 e4       	ldi	r24, 0x40	; 64
     880:	08 95       	ret
		case '_': return (SEGD);
     882:	88 e0       	ldi	r24, 0x08	; 8
     884:	08 95       	ret
		case ' ': return 0;
     886:	80 e0       	ldi	r24, 0x00	; 0
     888:	08 95       	ret
		case 0xB0:	return (SEGA | SEGB | SEGF | SEGG);		// Degree sin
     88a:	83 e6       	ldi	r24, 0x63	; 99
     88c:	08 95       	ret
		case 'C':	return (SEGA | SEGD | SEGE | SEGF);
     88e:	89 e3       	ldi	r24, 0x39	; 57
     890:	08 95       	ret
		case 'F':	return (SEGA | SEGE | SEGF | SEGG);
     892:	81 e7       	ldi	r24, 0x71	; 113
     894:	08 95       	ret
		case 'N':	return (SEGC | SEGE | SEGG);
     896:	84 e5       	ldi	r24, 0x54	; 84
     898:	08 95       	ret
		case 'D': return (SEGB | SEGC | SEGD | SEGE | SEGG);
     89a:	8e e5       	ldi	r24, 0x5E	; 94
     89c:	08 95       	ret
		case 'P': return (SEGA | SEGB | SEGE | SEGF | SEGG);
     89e:	83 e7       	ldi	r24, 0x73	; 115
     8a0:	08 95       	ret
		case 'E': return (SEGA | SEGD | SEGE | SEGF | SEGG);
     8a2:	89 e7       	ldi	r24, 0x79	; 121
     8a4:	08 95       	ret
{
	switch(c)
	{
		case 'O':
		case '0': return (SEGA | SEGB | SEGC | SEGD | SEGE | SEGF);
		case '1': return (SEGB | SEGC );
     8a6:	86 e0       	ldi	r24, 0x06	; 6
		case 'D': return (SEGB | SEGC | SEGD | SEGE | SEGG);
		case 'P': return (SEGA | SEGB | SEGE | SEGF | SEGG);
		case 'E': return (SEGA | SEGD | SEGE | SEGF | SEGG);
		default:  return c;	
	}
}
     8a8:	08 95       	ret

000008aa <wrap_led_buffer_index>:
//---------------------------------------------//
// Ensures that index is inside the buffer
// -128 <= index <= 127
//---------------------------------------------//
static uint8_t wrap_led_buffer_index(int8_t buf_index)
{
     8aa:	98 2f       	mov	r25, r24
	uint8_t new_index_u;
	new_index_u = (uint8_t) ((buf_index < 0) ? -buf_index : buf_index);
     8ac:	87 fd       	sbrc	r24, 7
     8ae:	81 95       	neg	r24
	if (new_index_u >= LED_BUFFER_LENGTH)
     8b0:	8e 30       	cpi	r24, 0x0E	; 14
     8b2:	78 f0       	brcs	.+30     	; 0x8d2 <wrap_led_buffer_index+0x28>
		new_index_u = new_index_u % LED_BUFFER_LENGTH;
     8b4:	38 2f       	mov	r19, r24
     8b6:	36 95       	lsr	r19
     8b8:	23 e9       	ldi	r18, 0x93	; 147
     8ba:	32 9f       	mul	r19, r18
     8bc:	21 2d       	mov	r18, r1
     8be:	11 24       	eor	r1, r1
     8c0:	26 95       	lsr	r18
     8c2:	26 95       	lsr	r18
     8c4:	22 0f       	add	r18, r18
     8c6:	32 2f       	mov	r19, r18
     8c8:	33 0f       	add	r19, r19
     8ca:	33 0f       	add	r19, r19
     8cc:	33 0f       	add	r19, r19
     8ce:	32 1b       	sub	r19, r18
     8d0:	83 1b       	sub	r24, r19
	new_index_u = ((buf_index >= 0) || (new_index_u == 0)) ? new_index_u :  LED_BUFFER_LENGTH - new_index_u ;
     8d2:	99 23       	and	r25, r25
     8d4:	2c f4       	brge	.+10     	; 0x8e0 <wrap_led_buffer_index+0x36>
     8d6:	88 23       	and	r24, r24
     8d8:	19 f0       	breq	.+6      	; 0x8e0 <wrap_led_buffer_index+0x36>
     8da:	9e e0       	ldi	r25, 0x0E	; 14
     8dc:	98 1b       	sub	r25, r24
     8de:	89 2f       	mov	r24, r25
	return new_index_u;
}
     8e0:	08 95       	ret

000008e2 <processLedIndicator>:
// Call this function N times per sec to get N/NUM_DIGITS_TOTAL display update rate, where
// NUM_DIGITS_TOTAL is number_of_digits_of_LED_display if no extra LEDs are used or
// (number_of_digits_of_LED_display + 1) otherwise.
//---------------------------------------------//
void processLedIndicator()
{
     8e2:	cf 93       	push	r28
	disable_led_segments();
	#endif
	
	
	// Perform regular shift
	led_clock_pulse(!LED_DIGIT_ACT_LVL);
     8e4:	81 e0       	ldi	r24, 0x01	; 1
     8e6:	22 d1       	rcall	.+580    	; 0xb2c <led_clock_pulse>
	
	switch (wActivePos)
     8e8:	80 91 c4 00 	lds	r24, 0x00C4
     8ec:	88 23       	and	r24, r24
     8ee:	19 f0       	breq	.+6      	; 0x8f6 <processLedIndicator+0x14>
     8f0:	86 30       	cpi	r24, 0x06	; 6
     8f2:	f1 f5       	brne	.+124    	; 0x970 <processLedIndicator+0x8e>
     8f4:	12 c0       	rjmp	.+36     	; 0x91a <processLedIndicator+0x38>
	{
	case 0:
		// Get buttons
		#ifndef CLEAN_OPERATION
		disable_led_segments();
     8f6:	46 d1       	rcall	.+652    	; 0xb84 <disable_led_segments>
		#endif
		enable_led_segments_pullups();
     8f8:	37 d1       	rcall	.+622    	; 0xb68 <enable_led_segments_pullups>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     8fa:	85 e3       	ldi	r24, 0x35	; 53
     8fc:	8a 95       	dec	r24
     8fe:	f1 f7       	brne	.-4      	; 0x8fc <processLedIndicator+0x1a>
     900:	00 00       	nop
		_delay_us(PULLUP_DELAY_US);
		capture_button_state();
     902:	47 d1       	rcall	.+654    	; 0xb92 <capture_button_state>
		#ifndef CLEAN_OPERATION
		enable_led_segments();
     904:	38 d1       	rcall	.+624    	; 0xb76 <enable_led_segments>
		#endif
		// Start new cycle with active digit level
		led_clock_pulse(LED_DIGIT_ACT_LVL);
     906:	80 e0       	ldi	r24, 0x00	; 0
     908:	11 d1       	rcall	.+546    	; 0xb2c <led_clock_pulse>
		// Always start new cycle from specified buffer start position
		bufActivePos = wStartPos;
     90a:	80 91 ff 00 	lds	r24, 0x00FF
     90e:	80 93 c3 00 	sts	0x00C3, r24
		next_wActivePos = wActivePos + 1;
     912:	c0 91 c4 00 	lds	r28, 0x00C4
     916:	cf 5f       	subi	r28, 0xFF	; 255
		break;
     918:	2f c0       	rjmp	.+94     	; 0x978 <processLedIndicator+0x96>
//---------------------------------------------//
// Performs window shifting
//---------------------------------------------//
static void processWindowShifter(void)
{
	if (shifterState == LED_SHIFT_DONE)
     91a:	80 91 00 01 	lds	r24, 0x0100
     91e:	88 23       	and	r24, r24
     920:	81 f1       	breq	.+96     	; 0x982 <processLedIndicator+0xa0>
		return;
	
	// Process shift timer
	processSoftTimer8b(&shiftTimer);	
     922:	85 ec       	ldi	r24, 0xC5	; 197
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	7f d7       	rcall	.+3838   	; 0x1826 <processSoftTimer8b>
	
	if (shiftTimer.FTop)
     928:	80 91 c5 00 	lds	r24, 0x00C5
     92c:	85 ff       	sbrs	r24, 5
     92e:	23 c0       	rjmp	.+70     	; 0x976 <processLedIndicator+0x94>
	{
		// Check if finished
		if (wStartPos == bufStartPos)	
     930:	80 91 ff 00 	lds	r24, 0x00FF
     934:	90 91 01 01 	lds	r25, 0x0101
     938:	89 13       	cpse	r24, r25
     93a:	04 c0       	rjmp	.+8      	; 0x944 <processLedIndicator+0x62>
		{
			// Update state
			shifterState = LED_SHIFT_DONE;
     93c:	10 92 00 01 	sts	0x0100, r1
		// Always start new cycle from specified buffer start position
		bufActivePos = wStartPos;
		next_wActivePos = wActivePos + 1;
		break;
	case NUM_DIGITS_TOTAL-1:
		next_wActivePos = 0;
     940:	c0 e0       	ldi	r28, 0x00	; 0
     942:	1a c0       	rjmp	.+52     	; 0x978 <processLedIndicator+0x96>
		if (wStartPos == bufStartPos)	
		{
			// Update state
			shifterState = LED_SHIFT_DONE;
		}
		else if (shifterState == LED_SHIFT_RIGHT)
     944:	90 91 00 01 	lds	r25, 0x0100
     948:	92 30       	cpi	r25, 0x02	; 2
     94a:	49 f4       	brne	.+18     	; 0x95e <processLedIndicator+0x7c>
// Increments index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t inc_buffer_position(uint8_t position)
{
	return (position >= LED_BUFFER_LENGTH - 1) ? 0 : position + 1;
     94c:	8d 30       	cpi	r24, 0x0D	; 13
     94e:	10 f4       	brcc	.+4      	; 0x954 <processLedIndicator+0x72>
     950:	8f 5f       	subi	r24, 0xFF	; 255
     952:	01 c0       	rjmp	.+2      	; 0x956 <processLedIndicator+0x74>
     954:	80 e0       	ldi	r24, 0x00	; 0
			// Update state
			shifterState = LED_SHIFT_DONE;
		}
		else if (shifterState == LED_SHIFT_RIGHT)
		{
			wStartPos = inc_buffer_position(wStartPos);	
     956:	80 93 ff 00 	sts	0x00FF, r24
		// Always start new cycle from specified buffer start position
		bufActivePos = wStartPos;
		next_wActivePos = wActivePos + 1;
		break;
	case NUM_DIGITS_TOTAL-1:
		next_wActivePos = 0;
     95a:	c0 e0       	ldi	r28, 0x00	; 0
     95c:	0d c0       	rjmp	.+26     	; 0x978 <processLedIndicator+0x96>
// Decrements index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t dec_buffer_position(uint8_t position)
{
	return (position == 0) ? LED_BUFFER_LENGTH - 1 : position - 1;
     95e:	88 23       	and	r24, r24
     960:	11 f0       	breq	.+4      	; 0x966 <processLedIndicator+0x84>
     962:	81 50       	subi	r24, 0x01	; 1
     964:	01 c0       	rjmp	.+2      	; 0x968 <processLedIndicator+0x86>
     966:	8d e0       	ldi	r24, 0x0D	; 13
		{
			wStartPos = inc_buffer_position(wStartPos);	
		}
		else
		{
			wStartPos = dec_buffer_position(wStartPos);		
     968:	80 93 ff 00 	sts	0x00FF, r24
		// Always start new cycle from specified buffer start position
		bufActivePos = wStartPos;
		next_wActivePos = wActivePos + 1;
		break;
	case NUM_DIGITS_TOTAL-1:
		next_wActivePos = 0;
     96c:	c0 e0       	ldi	r28, 0x00	; 0
     96e:	04 c0       	rjmp	.+8      	; 0x978 <processLedIndicator+0x96>
		// Shift LED window
		processWindowShifter();	
		break;
	default:
		next_wActivePos = wActivePos + 1;
     970:	c8 2f       	mov	r28, r24
     972:	cf 5f       	subi	r28, 0xFF	; 255
		break;
     974:	01 c0       	rjmp	.+2      	; 0x978 <processLedIndicator+0x96>
		// Always start new cycle from specified buffer start position
		bufActivePos = wStartPos;
		next_wActivePos = wActivePos + 1;
		break;
	case NUM_DIGITS_TOTAL-1:
		next_wActivePos = 0;
     976:	c0 e0       	ldi	r28, 0x00	; 0
		next_wActivePos = wActivePos + 1;
		break;
	}		
	
	#ifdef 	USE_EXTRA_LED_DIGIT
	if (wActivePos == EXTRA_DIGIT_NUM)
     978:	80 91 c4 00 	lds	r24, 0x00C4
     97c:	86 30       	cpi	r24, 0x06	; 6
     97e:	31 f4       	brne	.+12     	; 0x98c <processLedIndicator+0xaa>
     980:	01 c0       	rjmp	.+2      	; 0x984 <processLedIndicator+0xa2>
		// Always start new cycle from specified buffer start position
		bufActivePos = wStartPos;
		next_wActivePos = wActivePos + 1;
		break;
	case NUM_DIGITS_TOTAL-1:
		next_wActivePos = 0;
     982:	c0 e0       	ldi	r28, 0x00	; 0
	
	#ifdef 	USE_EXTRA_LED_DIGIT
	if (wActivePos == EXTRA_DIGIT_NUM)
	{
		// Output separate LEDs state
		set_led_segments(extra_led_state);
     984:	80 91 fe 00 	lds	r24, 0x00FE
     988:	e1 d0       	rcall	.+450    	; 0xb4c <set_led_segments>
     98a:	10 c0       	rjmp	.+32     	; 0x9ac <processLedIndicator+0xca>
	}
	else
	#endif
	{
		// Output new segment data
		set_led_segments(led_data_buffer[bufActivePos]);
     98c:	e0 91 c3 00 	lds	r30, 0x00C3
     990:	f0 e0       	ldi	r31, 0x00	; 0
     992:	ee 5f       	subi	r30, 0xFE	; 254
     994:	fe 4f       	sbci	r31, 0xFE	; 254
     996:	80 81       	ld	r24, Z
     998:	d9 d0       	rcall	.+434    	; 0xb4c <set_led_segments>
		// Wrap around buffer length
		bufActivePos = inc_buffer_position(bufActivePos );
     99a:	90 91 c3 00 	lds	r25, 0x00C3
// Increments index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t inc_buffer_position(uint8_t position)
{
	return (position >= LED_BUFFER_LENGTH - 1) ? 0 : position + 1;
     99e:	9d 30       	cpi	r25, 0x0D	; 13
     9a0:	10 f4       	brcc	.+4      	; 0x9a6 <processLedIndicator+0xc4>
     9a2:	9f 5f       	subi	r25, 0xFF	; 255
     9a4:	01 c0       	rjmp	.+2      	; 0x9a8 <processLedIndicator+0xc6>
     9a6:	90 e0       	ldi	r25, 0x00	; 0
	#endif
	{
		// Output new segment data
		set_led_segments(led_data_buffer[bufActivePos]);
		// Wrap around buffer length
		bufActivePos = inc_buffer_position(bufActivePos );
     9a8:	90 93 c3 00 	sts	0x00C3, r25
	}
		
	wActivePos = next_wActivePos;
     9ac:	c0 93 c4 00 	sts	0x00C4, r28
	
	#ifdef CLEAN_OPERATION
	enable_led_segments();
	#endif

}
     9b0:	cf 91       	pop	r28
     9b2:	08 95       	ret

000009b4 <fillLedBuffer>:
//---------------------------------------------//
// Fills buffer from (bufStartPos + offset) 
//	position with single char
//---------------------------------------------//
void fillLedBuffer(int8_t offset, uint8_t length, char c)
{
     9b4:	1f 93       	push	r17
     9b6:	cf 93       	push	r28
     9b8:	df 93       	push	r29
     9ba:	18 2f       	mov	r17, r24
     9bc:	c6 2f       	mov	r28, r22
     9be:	84 2f       	mov	r24, r20
	uint8_t val = decode_led_char(c);
     9c0:	3e df       	rcall	.-388    	; 0x83e <decode_led_char>
     9c2:	d8 2f       	mov	r29, r24
	// Ensure index is inside the buffer
	uint8_t position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
     9c4:	80 91 01 01 	lds	r24, 0x0101
     9c8:	81 0f       	add	r24, r17
     9ca:	6f df       	rcall	.-290    	; 0x8aa <wrap_led_buffer_index>
// Increments index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t inc_buffer_position(uint8_t position)
{
	return (position >= LED_BUFFER_LENGTH - 1) ? 0 : position + 1;
     9cc:	90 e0       	ldi	r25, 0x00	; 0
void fillLedBuffer(int8_t offset, uint8_t length, char c)
{
	uint8_t val = decode_led_char(c);
	// Ensure index is inside the buffer
	uint8_t position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
	while(length--)
     9ce:	0a c0       	rjmp	.+20     	; 0x9e4 <fillLedBuffer+0x30>
	{
		led_data_buffer[position] = val;
     9d0:	e8 2f       	mov	r30, r24
     9d2:	f0 e0       	ldi	r31, 0x00	; 0
     9d4:	ee 5f       	subi	r30, 0xFE	; 254
     9d6:	fe 4f       	sbci	r31, 0xFE	; 254
     9d8:	d0 83       	st	Z, r29
// Increments index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t inc_buffer_position(uint8_t position)
{
	return (position >= LED_BUFFER_LENGTH - 1) ? 0 : position + 1;
     9da:	8d 30       	cpi	r24, 0x0D	; 13
     9dc:	10 f4       	brcc	.+4      	; 0x9e2 <fillLedBuffer+0x2e>
     9de:	8f 5f       	subi	r24, 0xFF	; 255
     9e0:	01 c0       	rjmp	.+2      	; 0x9e4 <fillLedBuffer+0x30>
     9e2:	89 2f       	mov	r24, r25
void fillLedBuffer(int8_t offset, uint8_t length, char c)
{
	uint8_t val = decode_led_char(c);
	// Ensure index is inside the buffer
	uint8_t position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
	while(length--)
     9e4:	c1 50       	subi	r28, 0x01	; 1
     9e6:	a0 f7       	brcc	.-24     	; 0x9d0 <fillLedBuffer+0x1c>
	{
		led_data_buffer[position] = val;
		position = inc_buffer_position(position);
	}
}
     9e8:	df 91       	pop	r29
     9ea:	cf 91       	pop	r28
     9ec:	1f 91       	pop	r17
     9ee:	08 95       	ret

000009f0 <startShiftingWindowLeft>:
//	LED window left 
//---------------------------------------------//
void startShiftingWindowLeft(void)
{
	// Clear spaces between menu states
	fillLedBuffer(-2,2,' ');
     9f0:	40 e2       	ldi	r20, 0x20	; 32
     9f2:	62 e0       	ldi	r22, 0x02	; 2
     9f4:	8e ef       	ldi	r24, 0xFE	; 254
     9f6:	de df       	rcall	.-68     	; 0x9b4 <fillLedBuffer>
	// Set new buffer position for writing
	bufStartPos = wrap_led_buffer_index( (int8_t)bufStartPos - (NUM_DIGITS + 2) );
     9f8:	80 91 01 01 	lds	r24, 0x0101
     9fc:	88 50       	subi	r24, 0x08	; 8
     9fe:	55 df       	rcall	.-342    	; 0x8aa <wrap_led_buffer_index>
     a00:	80 93 01 01 	sts	0x0101, r24
	// Set shifter state
	shifterState = LED_SHIFT_LEFT;
     a04:	81 e0       	ldi	r24, 0x01	; 1
     a06:	80 93 00 01 	sts	0x0100, r24
     a0a:	08 95       	ret

00000a0c <startShiftingWindowRight>:
//	LED window right 
//---------------------------------------------//
void startShiftingWindowRight(void)
{
	// Clear spaces between menu states
	fillLedBuffer(NUM_DIGITS,2,' ');
     a0c:	40 e2       	ldi	r20, 0x20	; 32
     a0e:	62 e0       	ldi	r22, 0x02	; 2
     a10:	86 e0       	ldi	r24, 0x06	; 6
     a12:	d0 df       	rcall	.-96     	; 0x9b4 <fillLedBuffer>
	// Set new buffer position for writing
	bufStartPos = wrap_led_buffer_index( (int8_t)bufStartPos + NUM_DIGITS + 2 );
     a14:	80 91 01 01 	lds	r24, 0x0101
     a18:	88 5f       	subi	r24, 0xF8	; 248
     a1a:	47 df       	rcall	.-370    	; 0x8aa <wrap_led_buffer_index>
     a1c:	80 93 01 01 	sts	0x0101, r24
	// Set shifter state
	shifterState = LED_SHIFT_RIGHT;
     a20:	82 e0       	ldi	r24, 0x02	; 2
     a22:	80 93 00 01 	sts	0x0100, r24
     a26:	08 95       	ret

00000a28 <initLedIndicator>:
//---------------------------------------------//
//	Initialization
//	Call this function at start of your program
//---------------------------------------------//
void initLedIndicator()
{
     a28:	cf 93       	push	r28
	uint8_t i;
	// First disable outputs
	disable_led_segments();
     a2a:	ac d0       	rcall	.+344    	; 0xb84 <disable_led_segments>
     a2c:	c7 e0       	ldi	r28, 0x07	; 7
	// Fill shift register with non-active levels
	for (i=0;i<NUM_DIGITS_TOTAL;i++)
	{
		led_clock_pulse(!LED_DIGIT_ACT_LVL);
     a2e:	81 e0       	ldi	r24, 0x01	; 1
     a30:	7d d0       	rcall	.+250    	; 0xb2c <led_clock_pulse>
     a32:	c1 50       	subi	r28, 0x01	; 1
{
	uint8_t i;
	// First disable outputs
	disable_led_segments();
	// Fill shift register with non-active levels
	for (i=0;i<NUM_DIGITS_TOTAL;i++)
     a34:	e1 f7       	brne	.-8      	; 0xa2e <initLedIndicator+0x6>
	{
		led_clock_pulse(!LED_DIGIT_ACT_LVL);
	}
	// Now enable outputs
	enable_led_segments();
     a36:	9f d0       	rcall	.+318    	; 0xb76 <enable_led_segments>
	
	// Reset pointers
	wStartPos = 0;
     a38:	10 92 ff 00 	sts	0x00FF, r1
	bufStartPos = 0;
     a3c:	10 92 01 01 	sts	0x0101, r1
	bufActivePos = 0;
     a40:	10 92 c3 00 	sts	0x00C3, r1
	wActivePos = 0;
     a44:	10 92 c4 00 	sts	0x00C4, r1
	#ifdef 	USE_EXTRA_LED_DIGIT
	extra_led_state = 0;
     a48:	10 92 fe 00 	sts	0x00FE, r1
	#endif
	
	// Clear the buffer 
	fillLedBuffer(0,LED_BUFFER_LENGTH,' ');
     a4c:	40 e2       	ldi	r20, 0x20	; 32
     a4e:	6e e0       	ldi	r22, 0x0E	; 14
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	b0 df       	rcall	.-160    	; 0x9b4 <fillLedBuffer>
	
	// Initialize shift timer - always enabled, but 
	//	processed only when shifting is active
	shifterState = LED_SHIFT_DONE;
     a54:	10 92 00 01 	sts	0x0100, r1
	shiftTimer.Enabled = 1;
     a58:	e5 ec       	ldi	r30, 0xC5	; 197
     a5a:	f0 e0       	ldi	r31, 0x00	; 0
     a5c:	80 81       	ld	r24, Z
	shiftTimer.RunOnce = 0;
     a5e:	81 60       	ori	r24, 0x01	; 1
     a60:	8d 7f       	andi	r24, 0xFD	; 253
     a62:	80 83       	st	Z, r24
	shiftTimer.Top = LED_SHIFT_INTERVAL-1;
     a64:	89 e0       	ldi	r24, 0x09	; 9
     a66:	80 93 c7 00 	sts	0x00C7, r24
}
     a6a:	cf 91       	pop	r28
     a6c:	08 95       	ret

00000a6e <printLedBuffer>:
//		str - null-terminated char string
// Comma and dot (".", ",") get special processing - first occurrence is added to
// a preceding char, next are displayed as a single digit
//---------------------------------------------//
void printLedBuffer(int8_t offset, char* str)
{
     a6e:	df 92       	push	r13
     a70:	ef 92       	push	r14
     a72:	ff 92       	push	r15
     a74:	0f 93       	push	r16
     a76:	1f 93       	push	r17
     a78:	cf 93       	push	r28
     a7a:	df 93       	push	r29
     a7c:	eb 01       	movw	r28, r22
	char c;
	uint8_t decoded_sym;
	uint8_t state = 0x02;
	uint8_t comma_pos;
	// Ensure index is inside the buffer
	uint8_t buffer_position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
     a7e:	90 91 01 01 	lds	r25, 0x0101
     a82:	89 0f       	add	r24, r25
     a84:	12 df       	rcall	.-476    	; 0x8aa <wrap_led_buffer_index>
     a86:	18 2f       	mov	r17, r24
	comma_pos = buffer_position;
     a88:	d8 2e       	mov	r13, r24
//---------------------------------------------//
void printLedBuffer(int8_t offset, char* str)
{
	char c;
	uint8_t decoded_sym;
	uint8_t state = 0x02;
     a8a:	02 e0       	ldi	r16, 0x02	; 2
		comma_pos = buffer_position;
		if (state != 0x01)
		{
			buffer_position = inc_buffer_position(buffer_position);
		}
		state = (state & 0x01) ? 0x03 : 0x00;		
     a8c:	f1 2c       	mov	r15, r1
     a8e:	0f 2e       	mov	r0, r31
     a90:	f3 e0       	ldi	r31, 0x03	; 3
     a92:	ef 2e       	mov	r14, r31
     a94:	f0 2d       	mov	r31, r0
	uint8_t comma_pos;
	// Ensure index is inside the buffer
	uint8_t buffer_position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
	comma_pos = buffer_position;
	// Output chars
	while((c = *str++))
     a96:	26 c0       	rjmp	.+76     	; 0xae4 <printLedBuffer+0x76>
	{
		decoded_sym = decode_led_char(c);
     a98:	d2 de       	rcall	.-604    	; 0x83e <decode_led_char>
		state = (decoded_sym == SEGH) ? (state | 0x01) : (state & ~0x01);
     a9a:	80 38       	cpi	r24, 0x80	; 128
     a9c:	19 f4       	brne	.+6      	; 0xaa4 <printLedBuffer+0x36>
     a9e:	90 2f       	mov	r25, r16
     aa0:	91 60       	ori	r25, 0x01	; 1
     aa2:	02 c0       	rjmp	.+4      	; 0xaa8 <printLedBuffer+0x3a>
     aa4:	90 2f       	mov	r25, r16
     aa6:	9e 7f       	andi	r25, 0xFE	; 254
		if (state == 0x01)			
     aa8:	91 30       	cpi	r25, 0x01	; 1
     aaa:	51 f4       	brne	.+20     	; 0xac0 <printLedBuffer+0x52>
		{
			led_data_buffer[comma_pos] |= decoded_sym;
     aac:	ed 2d       	mov	r30, r13
     aae:	f0 e0       	ldi	r31, 0x00	; 0
     ab0:	ee 5f       	subi	r30, 0xFE	; 254
     ab2:	fe 4f       	sbci	r31, 0xFE	; 254
     ab4:	90 81       	ld	r25, Z
     ab6:	89 2b       	or	r24, r25
     ab8:	80 83       	st	Z, r24
     aba:	81 2f       	mov	r24, r17
		comma_pos = buffer_position;
		if (state != 0x01)
		{
			buffer_position = inc_buffer_position(buffer_position);
		}
		state = (state & 0x01) ? 0x03 : 0x00;		
     abc:	0e 2d       	mov	r16, r14
     abe:	10 c0       	rjmp	.+32     	; 0xae0 <printLedBuffer+0x72>
		{
			led_data_buffer[comma_pos] |= decoded_sym;
		}
		else
		{
			led_data_buffer[buffer_position] = decoded_sym;	
     ac0:	e1 2f       	mov	r30, r17
     ac2:	f0 e0       	ldi	r31, 0x00	; 0
     ac4:	ee 5f       	subi	r30, 0xFE	; 254
     ac6:	fe 4f       	sbci	r31, 0xFE	; 254
     ac8:	80 83       	st	Z, r24
// Increments index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t inc_buffer_position(uint8_t position)
{
	return (position >= LED_BUFFER_LENGTH - 1) ? 0 : position + 1;
     aca:	1d 30       	cpi	r17, 0x0D	; 13
     acc:	18 f4       	brcc	.+6      	; 0xad4 <printLedBuffer+0x66>
     ace:	81 2f       	mov	r24, r17
     ad0:	8f 5f       	subi	r24, 0xFF	; 255
     ad2:	01 c0       	rjmp	.+2      	; 0xad6 <printLedBuffer+0x68>
     ad4:	8f 2d       	mov	r24, r15
		comma_pos = buffer_position;
		if (state != 0x01)
		{
			buffer_position = inc_buffer_position(buffer_position);
		}
		state = (state & 0x01) ? 0x03 : 0x00;		
     ad6:	90 ff       	sbrs	r25, 0
     ad8:	02 c0       	rjmp	.+4      	; 0xade <printLedBuffer+0x70>
     ada:	0e 2d       	mov	r16, r14
     adc:	01 c0       	rjmp	.+2      	; 0xae0 <printLedBuffer+0x72>
     ade:	0f 2d       	mov	r16, r15
     ae0:	d1 2e       	mov	r13, r17
     ae2:	18 2f       	mov	r17, r24
	uint8_t comma_pos;
	// Ensure index is inside the buffer
	uint8_t buffer_position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
	comma_pos = buffer_position;
	// Output chars
	while((c = *str++))
     ae4:	89 91       	ld	r24, Y+
     ae6:	81 11       	cpse	r24, r1
     ae8:	d7 cf       	rjmp	.-82     	; 0xa98 <printLedBuffer+0x2a>
		{
			buffer_position = inc_buffer_position(buffer_position);
		}
		state = (state & 0x01) ? 0x03 : 0x00;		
	}
}
     aea:	df 91       	pop	r29
     aec:	cf 91       	pop	r28
     aee:	1f 91       	pop	r17
     af0:	0f 91       	pop	r16
     af2:	ff 90       	pop	r15
     af4:	ef 90       	pop	r14
     af6:	df 90       	pop	r13
     af8:	08 95       	ret

00000afa <setComma>:
//	buffer cell
//---------------------------------------------//
void setComma(int8_t offset)
{
	// Ensure index is inside the buffer
	uint8_t position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
     afa:	90 91 01 01 	lds	r25, 0x0101
     afe:	89 0f       	add	r24, r25
     b00:	d4 de       	rcall	.-600    	; 0x8aa <wrap_led_buffer_index>
	led_data_buffer[position] |= (SEGH);
     b02:	e8 2f       	mov	r30, r24
     b04:	f0 e0       	ldi	r31, 0x00	; 0
     b06:	ee 5f       	subi	r30, 0xFE	; 254
     b08:	fe 4f       	sbci	r31, 0xFE	; 254
     b0a:	80 81       	ld	r24, Z
     b0c:	80 68       	ori	r24, 0x80	; 128
     b0e:	80 83       	st	Z, r24
     b10:	08 95       	ret

00000b12 <setExtraLeds>:
// Argument is ORed with current LED state
//---------------------------------------------//
inline void setExtraLeds(uint8_t leds_set_value)
{
		//asm("cli");
		extra_led_state |= leds_set_value;
     b12:	90 91 fe 00 	lds	r25, 0x00FE
     b16:	89 2b       	or	r24, r25
     b18:	80 93 fe 00 	sts	0x00FE, r24
     b1c:	08 95       	ret

00000b1e <clearExtraLeds>:
// Argument is AND NOTed with current LED state
//---------------------------------------------//
inline void clearExtraLeds(uint8_t leds_clear_value)
{
		//asm("cli");
		extra_led_state &= ~leds_clear_value;
     b1e:	90 91 fe 00 	lds	r25, 0x00FE
     b22:	80 95       	com	r24
     b24:	98 23       	and	r25, r24
     b26:	90 93 fe 00 	sts	0x00FE, r25
     b2a:	08 95       	ret

00000b2c <led_clock_pulse>:


// Clocks in bit into the shift register
void led_clock_pulse(uint8_t bit)
{
	if (bit)
     b2c:	88 23       	and	r24, r24
     b2e:	11 f0       	breq	.+4      	; 0xb34 <led_clock_pulse+0x8>
		PORTB |= (1<<PB_LED_DOUT);
     b30:	c0 9a       	sbi	0x18, 0	; 24
     b32:	01 c0       	rjmp	.+2      	; 0xb36 <led_clock_pulse+0xa>
	else
		PORTB &= ~(1<<PB_LED_DOUT);
     b34:	c0 98       	cbi	0x18, 0	; 24
     b36:	8a e1       	ldi	r24, 0x1A	; 26
     b38:	8a 95       	dec	r24
     b3a:	f1 f7       	brne	.-4      	; 0xb38 <led_clock_pulse+0xc>
     b3c:	00 c0       	rjmp	.+0      	; 0xb3e <led_clock_pulse+0x12>
	_delay_us(SETUP_DELAY_US);
	PORTB |= (1<<PB_LED_CLK);
     b3e:	c2 9a       	sbi	0x18, 2	; 24
     b40:	8a e1       	ldi	r24, 0x1A	; 26
     b42:	8a 95       	dec	r24
     b44:	f1 f7       	brne	.-4      	; 0xb42 <led_clock_pulse+0x16>
     b46:	00 c0       	rjmp	.+0      	; 0xb48 <led_clock_pulse+0x1c>
	_delay_us(SHIFT_DELAY_US);
	PORTB &= ~(1<<PB_LED_CLK);
     b48:	c2 98       	cbi	0x18, 2	; 24
     b4a:	08 95       	ret

00000b4c <set_led_segments>:
// Outputs decoded segment data to port bits
void set_led_segments(uint8_t seg_ch)
{
	uint8_t pdat;
	seg_ch ^= LED_SEGMENT_MASK;
	pdat = PORTC & ~( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
     b4c:	95 b3       	in	r25, 0x15	; 21
	pdat |= (seg_ch & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
     b4e:	28 2f       	mov	r18, r24
     b50:	2f 71       	andi	r18, 0x1F	; 31
// Outputs decoded segment data to port bits
void set_led_segments(uint8_t seg_ch)
{
	uint8_t pdat;
	seg_ch ^= LED_SEGMENT_MASK;
	pdat = PORTC & ~( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
     b52:	90 7e       	andi	r25, 0xE0	; 224
	pdat |= (seg_ch & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
     b54:	92 2b       	or	r25, r18
	PORTC = pdat;
     b56:	95 bb       	out	0x15, r25	; 21
	seg_ch >>= 2;
	pdat = PORTB & ~( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     b58:	98 b3       	in	r25, 0x18	; 24
	uint8_t pdat;
	seg_ch ^= LED_SEGMENT_MASK;
	pdat = PORTC & ~( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
	pdat |= (seg_ch & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
	PORTC = pdat;
	seg_ch >>= 2;
     b5a:	86 95       	lsr	r24
     b5c:	86 95       	lsr	r24
	pdat = PORTB & ~( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
	pdat |= (seg_ch & ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) ));
     b5e:	88 73       	andi	r24, 0x38	; 56
	seg_ch ^= LED_SEGMENT_MASK;
	pdat = PORTC & ~( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
	pdat |= (seg_ch & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
	PORTC = pdat;
	seg_ch >>= 2;
	pdat = PORTB & ~( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     b60:	97 7c       	andi	r25, 0xC7	; 199
	pdat |= (seg_ch & ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) ));
     b62:	89 2b       	or	r24, r25
	PORTB = pdat;
     b64:	88 bb       	out	0x18, r24	; 24
     b66:	08 95       	ret

00000b68 <enable_led_segments_pullups>:

// Turns segment port bits to HI-Z and
// enables pull-ups
void enable_led_segments_pullups()
{
	PORTC |= ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
     b68:	85 b3       	in	r24, 0x15	; 21
     b6a:	8f 61       	ori	r24, 0x1F	; 31
     b6c:	85 bb       	out	0x15, r24	; 21
	PORTB |= ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     b6e:	88 b3       	in	r24, 0x18	; 24
     b70:	88 63       	ori	r24, 0x38	; 56
     b72:	88 bb       	out	0x18, r24	; 24
     b74:	08 95       	ret

00000b76 <enable_led_segments>:
}	

void enable_led_segments()
{
	DDRC |= ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
     b76:	84 b3       	in	r24, 0x14	; 20
     b78:	8f 61       	ori	r24, 0x1F	; 31
     b7a:	84 bb       	out	0x14, r24	; 20
	DDRB |= ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     b7c:	87 b3       	in	r24, 0x17	; 23
     b7e:	88 63       	ori	r24, 0x38	; 56
     b80:	87 bb       	out	0x17, r24	; 23
     b82:	08 95       	ret

00000b84 <disable_led_segments>:
}

void disable_led_segments()
{
	DDRC &= ~( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
     b84:	84 b3       	in	r24, 0x14	; 20
     b86:	80 7e       	andi	r24, 0xE0	; 224
     b88:	84 bb       	out	0x14, r24	; 20
	DDRB &= ~( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     b8a:	87 b3       	in	r24, 0x17	; 23
     b8c:	87 7c       	andi	r24, 0xC7	; 199
     b8e:	87 bb       	out	0x17, r24	; 23
     b90:	08 95       	ret

00000b92 <capture_button_state>:


void capture_button_state()
{
	uint8_t pdat;
	pdat = PINB  & ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     b92:	86 b3       	in	r24, 0x16	; 22
     b94:	88 73       	andi	r24, 0x38	; 56
	pdat <<= 2;
	pdat |= (PINC & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
     b96:	93 b3       	in	r25, 0x13	; 19

void capture_button_state()
{
	uint8_t pdat;
	pdat = PINB  & ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
	pdat <<= 2;
     b98:	88 0f       	add	r24, r24
     b9a:	88 0f       	add	r24, r24
	pdat |= (PINC & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
     b9c:	9f 71       	andi	r25, 0x1F	; 31
     b9e:	89 2b       	or	r24, r25
	raw_button_state = pdat ^ RAW_BUTTONS_INVERSE_MASK;
     ba0:	80 95       	com	r24
     ba2:	80 93 10 01 	sts	0x0110, r24
     ba6:	08 95       	ret

00000ba8 <restartMenuTimer>:
//	 Restarts menu state timeout
//	Should be used in RUN function when control buttons are pressed.
//-----------------------------------------------------------------//
static void restartMenuTimer(void)
{
	menuTimer.Timer = 0;
     ba8:	10 92 13 01 	sts	0x0113, r1
     bac:	08 95       	ret

00000bae <mf_setTempLeave>:
		clearExtraLeds(LED_TEMP);
}

void mf_setTempLeave(void)
{
	userTimer.Enabled = 0;
     bae:	e8 e1       	ldi	r30, 0x18	; 24
     bb0:	f1 e0       	ldi	r31, 0x01	; 1
     bb2:	80 81       	ld	r24, Z
     bb4:	8e 7f       	andi	r24, 0xFE	; 254
     bb6:	80 83       	st	Z, r24
     bb8:	08 95       	ret

00000bba <mf_leafSelectAct>:
	userTimer.FA_GE = 1;	
}

void mf_leafSelectAct(void)
{
	userTimer.Timer = 0;
     bba:	10 92 19 01 	sts	0x0119, r1
	userTimer.Top = BLINK_PERIOD - 1;
     bbe:	87 e0       	ldi	r24, 0x07	; 7
     bc0:	80 93 1a 01 	sts	0x011A, r24
	userTimer.CompA = BLINK_PERIOD / 2;
     bc4:	84 e0       	ldi	r24, 0x04	; 4
     bc6:	80 93 1b 01 	sts	0x011B, r24
	userTimer.Enabled = 1;
     bca:	e8 e1       	ldi	r30, 0x18	; 24
     bcc:	f1 e0       	ldi	r31, 0x01	; 1
     bce:	80 81       	ld	r24, Z
     bd0:	81 60       	ori	r24, 0x01	; 1
     bd2:	80 83       	st	Z, r24
     bd4:	08 95       	ret

00000bd6 <mf_leafExit>:
}

void mf_leafExit(void)
{
	userTimer.Enabled = 0;	
     bd6:	e8 e1       	ldi	r30, 0x18	; 24
     bd8:	f1 e0       	ldi	r31, 0x01	; 1
     bda:	80 81       	ld	r24, Z
     bdc:	8e 7f       	andi	r24, 0xFE	; 254
     bde:	80 83       	st	Z, r24
     be0:	08 95       	ret

00000be2 <mf_cdoneDo>:
	calculateCoeffs();
}

void mf_cdoneDo(void)
{
	printLedBuffer(0," DONE ");
     be2:	69 e9       	ldi	r22, 0x99	; 153
     be4:	70 e0       	ldi	r23, 0x00	; 0
     be6:	80 e0       	ldi	r24, 0x00	; 0
     be8:	42 df       	rcall	.-380    	; 0xa6e <printLedBuffer>
     bea:	08 95       	ret

00000bec <mf_cdone2Select>:
}

void mf_cdone2Select(void)
{
	// Save current ADC as calibrating point
	cpoint2_adc = adc_normalized;
     bec:	80 91 ed 00 	lds	r24, 0x00ED
     bf0:	90 91 ee 00 	lds	r25, 0x00EE
     bf4:	90 93 fc 00 	sts	0x00FC, r25
     bf8:	80 93 fb 00 	sts	0x00FB, r24
	// Save current Celsius degree
	cpoint2 = cpoint2_copy;
     bfc:	80 91 17 01 	lds	r24, 0x0117
     c00:	80 93 fd 00 	sts	0x00FD, r24
	// Calculate new coefficient for temperature conversion
	calculateCoeffs();
     c04:	75 db       	rcall	.-2326   	; 0x2f0 <calculateCoeffs>
     c06:	08 95       	ret

00000c08 <mf_cdone1Select>:
//---------------------------------------------//

void mf_cdone1Select(void)
{
	// Save current ADC as calibrating point
	cpoint1_adc = adc_normalized;
     c08:	80 91 ed 00 	lds	r24, 0x00ED
     c0c:	90 91 ee 00 	lds	r25, 0x00EE
     c10:	90 93 f9 00 	sts	0x00F9, r25
     c14:	80 93 f8 00 	sts	0x00F8, r24
	// Save current Celsius degree
	cpoint1 = cpoint1_copy;
     c18:	80 91 16 01 	lds	r24, 0x0116
     c1c:	80 93 f2 00 	sts	0x00F2, r24
	// Calculate new coefficient for temperature conversion
	calculateCoeffs();
     c20:	67 db       	rcall	.-2354   	; 0x2f0 <calculateCoeffs>
     c22:	08 95       	ret

00000c24 <mf_calib2Do>:
}

//---------------------------------------------//

void mf_calib2Do(void)
{
     c24:	cf 93       	push	r28
     c26:	df 93       	push	r29
     c28:	cd b7       	in	r28, 0x3d	; 61
     c2a:	de b7       	in	r29, 0x3e	; 62
     c2c:	27 97       	sbiw	r28, 0x07	; 7
     c2e:	0f b6       	in	r0, 0x3f	; 63
     c30:	f8 94       	cli
     c32:	de bf       	out	0x3e, r29	; 62
     c34:	0f be       	out	0x3f, r0	; 63
     c36:	cd bf       	out	0x3d, r28	; 61
	char str[] = {'P','2',' ',' ',' ',' ',0};
     c38:	87 e0       	ldi	r24, 0x07	; 7
     c3a:	ef e6       	ldi	r30, 0x6F	; 111
     c3c:	f0 e0       	ldi	r31, 0x00	; 0
     c3e:	de 01       	movw	r26, r28
     c40:	11 96       	adiw	r26, 0x01	; 1
     c42:	01 90       	ld	r0, Z+
     c44:	0d 92       	st	X+, r0
     c46:	8a 95       	dec	r24
     c48:	e1 f7       	brne	.-8      	; 0xc42 <mf_calib2Do+0x1e>
	
	
	if (button_state & (BD_UP | BR_UP))
     c4a:	80 91 b6 00 	lds	r24, 0x00B6
     c4e:	90 91 b7 00 	lds	r25, 0x00B7
     c52:	9c 01       	movw	r18, r24
     c54:	22 70       	andi	r18, 0x02	; 2
     c56:	34 70       	andi	r19, 0x04	; 4
     c58:	23 2b       	or	r18, r19
     c5a:	41 f0       	breq	.+16     	; 0xc6c <mf_calib2Do+0x48>
	{
		if (cpoint2_copy < MAX_CALIB_TEMP)
     c5c:	80 91 17 01 	lds	r24, 0x0117
     c60:	8a 3f       	cpi	r24, 0xFA	; 250
     c62:	78 f4       	brcc	.+30     	; 0xc82 <mf_calib2Do+0x5e>
		cpoint2_copy += 1;
     c64:	8f 5f       	subi	r24, 0xFF	; 255
     c66:	80 93 17 01 	sts	0x0117, r24
     c6a:	0b c0       	rjmp	.+22     	; 0xc82 <mf_calib2Do+0x5e>
	}
	else if (button_state & (BD_DOWN | BR_DOWN))
     c6c:	84 70       	andi	r24, 0x04	; 4
     c6e:	98 70       	andi	r25, 0x08	; 8
     c70:	89 2b       	or	r24, r25
     c72:	39 f0       	breq	.+14     	; 0xc82 <mf_calib2Do+0x5e>
	{
		if (cpoint2_copy > MIN_CALIB_TEMP)
     c74:	80 91 17 01 	lds	r24, 0x0117
     c78:	8b 30       	cpi	r24, 0x0B	; 11
     c7a:	18 f0       	brcs	.+6      	; 0xc82 <mf_calib2Do+0x5e>
		cpoint2_copy -= 1;
     c7c:	81 50       	subi	r24, 0x01	; 1
     c7e:	80 93 17 01 	sts	0x0117, r24
	}
	
	if (userTimer.FA_GE)
     c82:	80 91 18 01 	lds	r24, 0x0118
     c86:	84 ff       	sbrs	r24, 4
     c88:	09 c0       	rjmp	.+18     	; 0xc9c <mf_calib2Do+0x78>
	{
		u16toa_align_right(cpoint2_copy,str + 3,0x80 | 3,' ');
     c8a:	20 e2       	ldi	r18, 0x20	; 32
     c8c:	43 e8       	ldi	r20, 0x83	; 131
     c8e:	be 01       	movw	r22, r28
     c90:	6c 5f       	subi	r22, 0xFC	; 252
     c92:	7f 4f       	sbci	r23, 0xFF	; 255
     c94:	80 91 17 01 	lds	r24, 0x0117
     c98:	90 e0       	ldi	r25, 0x00	; 0
     c9a:	24 d3       	rcall	.+1608   	; 0x12e4 <u16toa_align_right>
	}
	
	printLedBuffer(0,str);
     c9c:	be 01       	movw	r22, r28
     c9e:	6f 5f       	subi	r22, 0xFF	; 255
     ca0:	7f 4f       	sbci	r23, 0xFF	; 255
     ca2:	80 e0       	ldi	r24, 0x00	; 0
     ca4:	e4 de       	rcall	.-568    	; 0xa6e <printLedBuffer>
	
}
     ca6:	27 96       	adiw	r28, 0x07	; 7
     ca8:	0f b6       	in	r0, 0x3f	; 63
     caa:	f8 94       	cli
     cac:	de bf       	out	0x3e, r29	; 62
     cae:	0f be       	out	0x3f, r0	; 63
     cb0:	cd bf       	out	0x3d, r28	; 61
     cb2:	df 91       	pop	r29
     cb4:	cf 91       	pop	r28
     cb6:	08 95       	ret

00000cb8 <mf_calib1Do>:
	cpoint1_copy = cpoint1;
	cpoint2_copy = cpoint2;
}

void mf_calib1Do(void)
{
     cb8:	cf 93       	push	r28
     cba:	df 93       	push	r29
     cbc:	cd b7       	in	r28, 0x3d	; 61
     cbe:	de b7       	in	r29, 0x3e	; 62
     cc0:	27 97       	sbiw	r28, 0x07	; 7
     cc2:	0f b6       	in	r0, 0x3f	; 63
     cc4:	f8 94       	cli
     cc6:	de bf       	out	0x3e, r29	; 62
     cc8:	0f be       	out	0x3f, r0	; 63
     cca:	cd bf       	out	0x3d, r28	; 61
	char str[] = {'P','1',' ',' ',' ',' ',0};
     ccc:	87 e0       	ldi	r24, 0x07	; 7
     cce:	e6 e7       	ldi	r30, 0x76	; 118
     cd0:	f0 e0       	ldi	r31, 0x00	; 0
     cd2:	de 01       	movw	r26, r28
     cd4:	11 96       	adiw	r26, 0x01	; 1
     cd6:	01 90       	ld	r0, Z+
     cd8:	0d 92       	st	X+, r0
     cda:	8a 95       	dec	r24
     cdc:	e1 f7       	brne	.-8      	; 0xcd6 <mf_calib1Do+0x1e>
	
	
	if (button_state & (BD_UP | BR_UP))
     cde:	80 91 b6 00 	lds	r24, 0x00B6
     ce2:	90 91 b7 00 	lds	r25, 0x00B7
     ce6:	9c 01       	movw	r18, r24
     ce8:	22 70       	andi	r18, 0x02	; 2
     cea:	34 70       	andi	r19, 0x04	; 4
     cec:	23 2b       	or	r18, r19
     cee:	41 f0       	breq	.+16     	; 0xd00 <mf_calib1Do+0x48>
	{
		if (cpoint1_copy < MAX_CALIB_TEMP)
     cf0:	80 91 16 01 	lds	r24, 0x0116
     cf4:	8a 3f       	cpi	r24, 0xFA	; 250
     cf6:	78 f4       	brcc	.+30     	; 0xd16 <mf_calib1Do+0x5e>
			cpoint1_copy += 1;
     cf8:	8f 5f       	subi	r24, 0xFF	; 255
     cfa:	80 93 16 01 	sts	0x0116, r24
     cfe:	0b c0       	rjmp	.+22     	; 0xd16 <mf_calib1Do+0x5e>
	}
	else if (button_state & (BD_DOWN | BR_DOWN))
     d00:	84 70       	andi	r24, 0x04	; 4
     d02:	98 70       	andi	r25, 0x08	; 8
     d04:	89 2b       	or	r24, r25
     d06:	39 f0       	breq	.+14     	; 0xd16 <mf_calib1Do+0x5e>
	{
		if (cpoint1_copy > MIN_CALIB_TEMP)
     d08:	80 91 16 01 	lds	r24, 0x0116
     d0c:	8b 30       	cpi	r24, 0x0B	; 11
     d0e:	18 f0       	brcs	.+6      	; 0xd16 <mf_calib1Do+0x5e>
			cpoint1_copy -= 1;
     d10:	81 50       	subi	r24, 0x01	; 1
     d12:	80 93 16 01 	sts	0x0116, r24
	}
	
	if (userTimer.FA_GE)
     d16:	80 91 18 01 	lds	r24, 0x0118
     d1a:	84 ff       	sbrs	r24, 4
     d1c:	09 c0       	rjmp	.+18     	; 0xd30 <mf_calib1Do+0x78>
	{
		u16toa_align_right(cpoint1_copy,str + 3,0x80 | 3,' ');
     d1e:	20 e2       	ldi	r18, 0x20	; 32
     d20:	43 e8       	ldi	r20, 0x83	; 131
     d22:	be 01       	movw	r22, r28
     d24:	6c 5f       	subi	r22, 0xFC	; 252
     d26:	7f 4f       	sbci	r23, 0xFF	; 255
     d28:	80 91 16 01 	lds	r24, 0x0116
     d2c:	90 e0       	ldi	r25, 0x00	; 0
     d2e:	da d2       	rcall	.+1460   	; 0x12e4 <u16toa_align_right>
	}
	
	printLedBuffer(0,str);
     d30:	be 01       	movw	r22, r28
     d32:	6f 5f       	subi	r22, 0xFF	; 255
     d34:	7f 4f       	sbci	r23, 0xFF	; 255
     d36:	80 e0       	ldi	r24, 0x00	; 0
     d38:	9a de       	rcall	.-716    	; 0xa6e <printLedBuffer>
}
     d3a:	27 96       	adiw	r28, 0x07	; 7
     d3c:	0f b6       	in	r0, 0x3f	; 63
     d3e:	f8 94       	cli
     d40:	de bf       	out	0x3e, r29	; 62
     d42:	0f be       	out	0x3f, r0	; 63
     d44:	cd bf       	out	0x3d, r28	; 61
     d46:	df 91       	pop	r29
     d48:	cf 91       	pop	r28
     d4a:	08 95       	ret

00000d4c <mf_autopoffDo>:

//---------------------------------------------//


void mf_autopoffDo(void)
{
     d4c:	cf 93       	push	r28
     d4e:	df 93       	push	r29
     d50:	cd b7       	in	r28, 0x3d	; 61
     d52:	de b7       	in	r29, 0x3e	; 62
     d54:	27 97       	sbiw	r28, 0x07	; 7
     d56:	0f b6       	in	r0, 0x3f	; 63
     d58:	f8 94       	cli
     d5a:	de bf       	out	0x3e, r29	; 62
     d5c:	0f be       	out	0x3f, r0	; 63
     d5e:	cd bf       	out	0x3d, r28	; 61
	char str[] = {'O','F','F',' ',' ',' ',0};
     d60:	87 e0       	ldi	r24, 0x07	; 7
     d62:	ed e7       	ldi	r30, 0x7D	; 125
     d64:	f0 e0       	ldi	r31, 0x00	; 0
     d66:	de 01       	movw	r26, r28
     d68:	11 96       	adiw	r26, 0x01	; 1
     d6a:	01 90       	ld	r0, Z+
     d6c:	0d 92       	st	X+, r0
     d6e:	8a 95       	dec	r24
     d70:	e1 f7       	brne	.-8      	; 0xd6a <mf_autopoffDo+0x1e>
		
		
	if (button_state & (BD_UP | BR_UP))
     d72:	80 91 b6 00 	lds	r24, 0x00B6
     d76:	90 91 b7 00 	lds	r25, 0x00B7
     d7a:	9c 01       	movw	r18, r24
     d7c:	22 70       	andi	r18, 0x02	; 2
     d7e:	34 70       	andi	r19, 0x04	; 4
     d80:	23 2b       	or	r18, r19
     d82:	49 f0       	breq	.+18     	; 0xd96 <mf_autopoffDo+0x4a>
	{
		if (power_off_timeout < MAX_POWEROFF_TIMEOUT)
     d84:	80 91 fa 00 	lds	r24, 0x00FA
     d88:	8f 35       	cpi	r24, 0x5F	; 95
     d8a:	18 f4       	brcc	.+6      	; 0xd92 <mf_autopoffDo+0x46>
			power_off_timeout += 5;
     d8c:	8b 5f       	subi	r24, 0xFB	; 251
     d8e:	80 93 fa 00 	sts	0x00FA, r24
		restartMenuTimer();
     d92:	0a df       	rcall	.-492    	; 0xba8 <restartMenuTimer>
     d94:	0c c0       	rjmp	.+24     	; 0xdae <mf_autopoffDo+0x62>
	}
	else if (button_state & (BD_DOWN | BR_DOWN))
     d96:	84 70       	andi	r24, 0x04	; 4
     d98:	98 70       	andi	r25, 0x08	; 8
     d9a:	89 2b       	or	r24, r25
     d9c:	41 f0       	breq	.+16     	; 0xdae <mf_autopoffDo+0x62>
	{
		if (power_off_timeout > MIN_POWEROFF_TIMEOUT)
     d9e:	80 91 fa 00 	lds	r24, 0x00FA
     da2:	86 30       	cpi	r24, 0x06	; 6
     da4:	18 f0       	brcs	.+6      	; 0xdac <mf_autopoffDo+0x60>
			power_off_timeout -= 5;
     da6:	85 50       	subi	r24, 0x05	; 5
     da8:	80 93 fa 00 	sts	0x00FA, r24
		restartMenuTimer();
     dac:	fd de       	rcall	.-518    	; 0xba8 <restartMenuTimer>
	}	
		
	if (userTimer.FA_GE)
     dae:	80 91 18 01 	lds	r24, 0x0118
     db2:	84 ff       	sbrs	r24, 4
     db4:	10 c0       	rjmp	.+32     	; 0xdd6 <mf_autopoffDo+0x8a>
	{
		if (power_off_timeout != MAX_POWEROFF_TIMEOUT)
     db6:	80 91 fa 00 	lds	r24, 0x00FA
     dba:	8f 35       	cpi	r24, 0x5F	; 95
     dbc:	41 f0       	breq	.+16     	; 0xdce <mf_autopoffDo+0x82>
			u16toa_align_right(power_off_timeout,str + 4,0x80 | 2,' ');	
     dbe:	20 e2       	ldi	r18, 0x20	; 32
     dc0:	42 e8       	ldi	r20, 0x82	; 130
     dc2:	be 01       	movw	r22, r28
     dc4:	6b 5f       	subi	r22, 0xFB	; 251
     dc6:	7f 4f       	sbci	r23, 0xFF	; 255
     dc8:	90 e0       	ldi	r25, 0x00	; 0
     dca:	8c d2       	rcall	.+1304   	; 0x12e4 <u16toa_align_right>
     dcc:	04 c0       	rjmp	.+8      	; 0xdd6 <mf_autopoffDo+0x8a>
		else 
		{
			str[4] = 'N';
     dce:	8e e4       	ldi	r24, 0x4E	; 78
     dd0:	8d 83       	std	Y+5, r24	; 0x05
			str[5] = 'O';
     dd2:	8f e4       	ldi	r24, 0x4F	; 79
     dd4:	8e 83       	std	Y+6, r24	; 0x06
		}			
	}		
		
	printLedBuffer(0,str);
     dd6:	be 01       	movw	r22, r28
     dd8:	6f 5f       	subi	r22, 0xFF	; 255
     dda:	7f 4f       	sbci	r23, 0xFF	; 255
     ddc:	80 e0       	ldi	r24, 0x00	; 0
     dde:	47 de       	rcall	.-882    	; 0xa6e <printLedBuffer>
}
     de0:	27 96       	adiw	r28, 0x07	; 7
     de2:	0f b6       	in	r0, 0x3f	; 63
     de4:	f8 94       	cli
     de6:	de bf       	out	0x3e, r29	; 62
     de8:	0f be       	out	0x3f, r0	; 63
     dea:	cd bf       	out	0x3d, r28	; 61
     dec:	df 91       	pop	r29
     dee:	cf 91       	pop	r28
     df0:	08 95       	ret

00000df2 <mf_realTempDo>:
{
	setExtraLeds(LED_TEMP);
}

void mf_realTempDo(void)
{
     df2:	cf 93       	push	r28
     df4:	df 93       	push	r29
     df6:	cd b7       	in	r28, 0x3d	; 61
     df8:	de b7       	in	r29, 0x3e	; 62
     dfa:	27 97       	sbiw	r28, 0x07	; 7
     dfc:	0f b6       	in	r0, 0x3f	; 63
     dfe:	f8 94       	cli
     e00:	de bf       	out	0x3e, r29	; 62
     e02:	0f be       	out	0x3f, r0	; 63
     e04:	cd bf       	out	0x3d, r28	; 61
	char str[] = {' ',' ',' ',' ',0xB0,'C',0};
     e06:	87 e0       	ldi	r24, 0x07	; 7
     e08:	e4 e8       	ldi	r30, 0x84	; 132
     e0a:	f0 e0       	ldi	r31, 0x00	; 0
     e0c:	de 01       	movw	r26, r28
     e0e:	11 96       	adiw	r26, 0x01	; 1
     e10:	01 90       	ld	r0, Z+
     e12:	0d 92       	st	X+, r0
     e14:	8a 95       	dec	r24
     e16:	e1 f7       	brne	.-8      	; 0xe10 <mf_realTempDo+0x1e>
	// Output ADC result to LED
	u16toa_align_right(adc_celsius,str,0x80 | 4,' ');
     e18:	20 e2       	ldi	r18, 0x20	; 32
     e1a:	44 e8       	ldi	r20, 0x84	; 132
     e1c:	be 01       	movw	r22, r28
     e1e:	6f 5f       	subi	r22, 0xFF	; 255
     e20:	7f 4f       	sbci	r23, 0xFF	; 255
     e22:	80 91 ef 00 	lds	r24, 0x00EF
     e26:	90 91 f0 00 	lds	r25, 0x00F0
     e2a:	5c d2       	rcall	.+1208   	; 0x12e4 <u16toa_align_right>
	printLedBuffer(0,str);
     e2c:	be 01       	movw	r22, r28
     e2e:	6f 5f       	subi	r22, 0xFF	; 255
     e30:	7f 4f       	sbci	r23, 0xFF	; 255
     e32:	80 e0       	ldi	r24, 0x00	; 0
     e34:	1c de       	rcall	.-968    	; 0xa6e <printLedBuffer>
}
     e36:	27 96       	adiw	r28, 0x07	; 7
     e38:	0f b6       	in	r0, 0x3f	; 63
     e3a:	f8 94       	cli
     e3c:	de bf       	out	0x3e, r29	; 62
     e3e:	0f be       	out	0x3f, r0	; 63
     e40:	cd bf       	out	0x3d, r28	; 61
     e42:	df 91       	pop	r29
     e44:	cf 91       	pop	r28
     e46:	08 95       	ret

00000e48 <mf_sndenDo>:

//---------------------------------------------//


void mf_sndenDo(void)
{
     e48:	cf 93       	push	r28
     e4a:	df 93       	push	r29
     e4c:	cd b7       	in	r28, 0x3d	; 61
     e4e:	de b7       	in	r29, 0x3e	; 62
     e50:	27 97       	sbiw	r28, 0x07	; 7
     e52:	0f b6       	in	r0, 0x3f	; 63
     e54:	f8 94       	cli
     e56:	de bf       	out	0x3e, r29	; 62
     e58:	0f be       	out	0x3f, r0	; 63
     e5a:	cd bf       	out	0x3d, r28	; 61
	char str[] = {'S','N','D',' ',' ',' ',0};
     e5c:	87 e0       	ldi	r24, 0x07	; 7
     e5e:	eb e8       	ldi	r30, 0x8B	; 139
     e60:	f0 e0       	ldi	r31, 0x00	; 0
     e62:	de 01       	movw	r26, r28
     e64:	11 96       	adiw	r26, 0x01	; 1
     e66:	01 90       	ld	r0, Z+
     e68:	0d 92       	st	X+, r0
     e6a:	8a 95       	dec	r24
     e6c:	e1 f7       	brne	.-8      	; 0xe66 <mf_sndenDo+0x1e>
		
	if (button_state & (BD_UP | BD_DOWN))
     e6e:	80 91 b6 00 	lds	r24, 0x00B6
     e72:	90 91 b7 00 	lds	r25, 0x00B7
     e76:	86 70       	andi	r24, 0x06	; 6
     e78:	99 27       	eor	r25, r25
     e7a:	89 2b       	or	r24, r25
     e7c:	41 f0       	breq	.+16     	; 0xe8e <mf_sndenDo+0x46>
	{
		sound_enable = !sound_enable;
     e7e:	81 e0       	ldi	r24, 0x01	; 1
     e80:	90 91 f5 00 	lds	r25, 0x00F5
     e84:	91 11       	cpse	r25, r1
     e86:	80 e0       	ldi	r24, 0x00	; 0
     e88:	80 93 f5 00 	sts	0x00F5, r24
		restartMenuTimer();
     e8c:	8d de       	rcall	.-742    	; 0xba8 <restartMenuTimer>
	}			
		
	if (userTimer.FA_GE)
     e8e:	80 91 18 01 	lds	r24, 0x0118
     e92:	84 ff       	sbrs	r24, 4
     e94:	0e c0       	rjmp	.+28     	; 0xeb2 <mf_sndenDo+0x6a>
	{
		if (sound_enable)		
     e96:	80 91 f5 00 	lds	r24, 0x00F5
     e9a:	88 23       	and	r24, r24
     e9c:	29 f0       	breq	.+10     	; 0xea8 <mf_sndenDo+0x60>
		{
			str[4] = 'O';
     e9e:	8f e4       	ldi	r24, 0x4F	; 79
     ea0:	8d 83       	std	Y+5, r24	; 0x05
			str[5] = 'N';
     ea2:	8e e4       	ldi	r24, 0x4E	; 78
     ea4:	8e 83       	std	Y+6, r24	; 0x06
     ea6:	05 c0       	rjmp	.+10     	; 0xeb2 <mf_sndenDo+0x6a>
		}
		else
		{
			str[3] = 'O';
     ea8:	8f e4       	ldi	r24, 0x4F	; 79
     eaa:	8c 83       	std	Y+4, r24	; 0x04
			str[4] = 'F';
     eac:	86 e4       	ldi	r24, 0x46	; 70
     eae:	8d 83       	std	Y+5, r24	; 0x05
			str[5] = 'F';
     eb0:	8e 83       	std	Y+6, r24	; 0x06
		}			
	}
		
	printLedBuffer(0,str);
     eb2:	be 01       	movw	r22, r28
     eb4:	6f 5f       	subi	r22, 0xFF	; 255
     eb6:	7f 4f       	sbci	r23, 0xFF	; 255
     eb8:	80 e0       	ldi	r24, 0x00	; 0
     eba:	d9 dd       	rcall	.-1102   	; 0xa6e <printLedBuffer>
	setComma(2);
     ebc:	82 e0       	ldi	r24, 0x02	; 2
     ebe:	1d de       	rcall	.-966    	; 0xafa <setComma>
}
     ec0:	27 96       	adiw	r28, 0x07	; 7
     ec2:	0f b6       	in	r0, 0x3f	; 63
     ec4:	f8 94       	cli
     ec6:	de bf       	out	0x3e, r29	; 62
     ec8:	0f be       	out	0x3f, r0	; 63
     eca:	cd bf       	out	0x3d, r28	; 61
     ecc:	df 91       	pop	r29
     ece:	cf 91       	pop	r28
     ed0:	08 95       	ret

00000ed2 <mf_leafSelect>:

// Select and exit functions, common for leaf menu items 

void mf_leafSelect(void)
{
	clearExtraLeds(LED_TEMP | LED_ROLL);
     ed2:	83 e0       	ldi	r24, 0x03	; 3
     ed4:	24 de       	rcall	.-952    	; 0xb1e <clearExtraLeds>
	userTimer.FA_GE = 1;	
     ed6:	e8 e1       	ldi	r30, 0x18	; 24
     ed8:	f1 e0       	ldi	r31, 0x01	; 1
     eda:	80 81       	ld	r24, Z
     edc:	80 61       	ori	r24, 0x10	; 16
     ede:	80 83       	st	Z, r24
     ee0:	08 95       	ret

00000ee2 <mf_calibSelect>:

//---------------------------------------------//

void mf_calibSelect(void)
{
	mf_leafSelect();
     ee2:	f7 df       	rcall	.-18     	; 0xed2 <mf_leafSelect>
	cpoint1_copy = cpoint1;
     ee4:	80 91 f2 00 	lds	r24, 0x00F2
     ee8:	80 93 16 01 	sts	0x0116, r24
	cpoint2_copy = cpoint2;
     eec:	80 91 fd 00 	lds	r24, 0x00FD
     ef0:	80 93 17 01 	sts	0x0117, r24
     ef4:	08 95       	ret

00000ef6 <mf_rollLeave>:
	printLedBuffer(0,str);
}

void mf_rollLeave(void)
{
	clearExtraLeds(LED_ROLL);
     ef6:	82 e0       	ldi	r24, 0x02	; 2
     ef8:	12 de       	rcall	.-988    	; 0xb1e <clearExtraLeds>
	userTimer.Enabled = 0;
     efa:	e8 e1       	ldi	r30, 0x18	; 24
     efc:	f1 e0       	ldi	r31, 0x01	; 1
     efe:	80 81       	ld	r24, Z
     f00:	8e 7f       	andi	r24, 0xFE	; 254
     f02:	80 83       	st	Z, r24
     f04:	08 95       	ret

00000f06 <mf_setTempSelect>:
//---------------------------------------------//


void mf_setTempSelect(void)
{
	clearExtraLeds(LED_TEMP);
     f06:	81 e0       	ldi	r24, 0x01	; 1
     f08:	0a de       	rcall	.-1004   	; 0xb1e <clearExtraLeds>
	mf_leafSelectAct();		// setup and start timer
     f0a:	57 de       	rcall	.-850    	; 0xbba <mf_leafSelectAct>
     f0c:	08 95       	ret

00000f0e <mf_realTempLeave>:
	printLedBuffer(0,str);
}

void mf_realTempLeave(void)
{
	clearExtraLeds(LED_TEMP);
     f0e:	81 e0       	ldi	r24, 0x01	; 1
     f10:	06 de       	rcall	.-1012   	; 0xb1e <clearExtraLeds>
     f12:	08 95       	ret

00000f14 <mf_rollDo>:
	setExtraLeds(LED_ROLL);
	mf_leafSelectAct();		// setup and start timer
}

void mf_rollDo(void)
{
     f14:	cf 93       	push	r28
     f16:	df 93       	push	r29
     f18:	cd b7       	in	r28, 0x3d	; 61
     f1a:	de b7       	in	r29, 0x3e	; 62
     f1c:	27 97       	sbiw	r28, 0x07	; 7
     f1e:	0f b6       	in	r0, 0x3f	; 63
     f20:	f8 94       	cli
     f22:	de bf       	out	0x3e, r29	; 62
     f24:	0f be       	out	0x3f, r0	; 63
     f26:	cd bf       	out	0x3d, r28	; 61
	char str[] = {' ',' ',' ',' ',' ',' ',0};
     f28:	87 e0       	ldi	r24, 0x07	; 7
     f2a:	e2 e9       	ldi	r30, 0x92	; 146
     f2c:	f0 e0       	ldi	r31, 0x00	; 0
     f2e:	de 01       	movw	r26, r28
     f30:	11 96       	adiw	r26, 0x01	; 1
     f32:	01 90       	ld	r0, Z+
     f34:	0d 92       	st	X+, r0
     f36:	8a 95       	dec	r24
     f38:	e1 f7       	brne	.-8      	; 0xf32 <mf_rollDo+0x1e>
		
	if (button_state & (BD_UP | BR_UP))
     f3a:	80 91 b6 00 	lds	r24, 0x00B6
     f3e:	90 91 b7 00 	lds	r25, 0x00B7
     f42:	9c 01       	movw	r18, r24
     f44:	22 70       	andi	r18, 0x02	; 2
     f46:	34 70       	andi	r19, 0x04	; 4
     f48:	23 2b       	or	r18, r19
     f4a:	41 f0       	breq	.+16     	; 0xf5c <mf_rollDo+0x48>
	{
		if (rollCycleSet < MAX_ROLL_CYCLES)
     f4c:	80 91 f6 00 	lds	r24, 0x00F6
     f50:	83 36       	cpi	r24, 0x63	; 99
     f52:	78 f4       	brcc	.+30     	; 0xf72 <mf_rollDo+0x5e>
		rollCycleSet += 1;
     f54:	8f 5f       	subi	r24, 0xFF	; 255
     f56:	80 93 f6 00 	sts	0x00F6, r24
     f5a:	0b c0       	rjmp	.+22     	; 0xf72 <mf_rollDo+0x5e>
	}
	else if (button_state & (BD_DOWN | BR_DOWN))
     f5c:	84 70       	andi	r24, 0x04	; 4
     f5e:	98 70       	andi	r25, 0x08	; 8
     f60:	89 2b       	or	r24, r25
     f62:	39 f0       	breq	.+14     	; 0xf72 <mf_rollDo+0x5e>
	{
		if (rollCycleSet > MIN_ROLL_CYCLES)
     f64:	80 91 f6 00 	lds	r24, 0x00F6
     f68:	82 30       	cpi	r24, 0x02	; 2
     f6a:	18 f0       	brcs	.+6      	; 0xf72 <mf_rollDo+0x5e>
		rollCycleSet -= 1;
     f6c:	81 50       	subi	r24, 0x01	; 1
     f6e:	80 93 f6 00 	sts	0x00F6, r24
	}	
		
	u16toa_align_right(rollCycleSet,str + 4,0x80 | 2,' ');
     f72:	20 e2       	ldi	r18, 0x20	; 32
     f74:	42 e8       	ldi	r20, 0x82	; 130
     f76:	be 01       	movw	r22, r28
     f78:	6b 5f       	subi	r22, 0xFB	; 251
     f7a:	7f 4f       	sbci	r23, 0xFF	; 255
     f7c:	80 91 f6 00 	lds	r24, 0x00F6
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	b0 d1       	rcall	.+864    	; 0x12e4 <u16toa_align_right>
	
	if ((!(rollState & ROLL_CYCLE)) || (userTimer.FA_GE))
     f84:	80 91 c9 00 	lds	r24, 0x00C9
     f88:	82 ff       	sbrs	r24, 2
     f8a:	04 c0       	rjmp	.+8      	; 0xf94 <mf_rollDo+0x80>
     f8c:	80 91 18 01 	lds	r24, 0x0118
     f90:	84 ff       	sbrs	r24, 4
     f92:	09 c0       	rjmp	.+18     	; 0xfa6 <mf_rollDo+0x92>
	{
		u16toa_align_right(activeRollCycle,str + 1,0x80 | 2,' ');
     f94:	20 e2       	ldi	r18, 0x20	; 32
     f96:	42 e8       	ldi	r20, 0x82	; 130
     f98:	be 01       	movw	r22, r28
     f9a:	6e 5f       	subi	r22, 0xFE	; 254
     f9c:	7f 4f       	sbci	r23, 0xFF	; 255
     f9e:	80 91 23 01 	lds	r24, 0x0123
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	9f d1       	rcall	.+830    	; 0x12e4 <u16toa_align_right>
	}
	
	str[0] = 0;
     fa6:	19 82       	std	Y+1, r1	; 0x01
	if (isTopPointValid())
     fa8:	03 d3       	rcall	.+1542   	; 0x15b0 <isTopPointValid>
     faa:	88 23       	and	r24, r24
     fac:	19 f0       	breq	.+6      	; 0xfb4 <mf_rollDo+0xa0>
		str[0] |= SEGA;
     fae:	89 81       	ldd	r24, Y+1	; 0x01
     fb0:	81 60       	ori	r24, 0x01	; 1
     fb2:	89 83       	std	Y+1, r24	; 0x01
	if (isBottomPointValid())
     fb4:	0d d3       	rcall	.+1562   	; 0x15d0 <isBottomPointValid>
     fb6:	88 23       	and	r24, r24
     fb8:	19 f0       	breq	.+6      	; 0xfc0 <mf_rollDo+0xac>
		str[0] |= SEGD;
     fba:	89 81       	ldd	r24, Y+1	; 0x01
     fbc:	88 60       	ori	r24, 0x08	; 8
     fbe:	89 83       	std	Y+1, r24	; 0x01
	if (str[0] == 0)
     fc0:	89 81       	ldd	r24, Y+1	; 0x01
     fc2:	81 11       	cpse	r24, r1
     fc4:	02 c0       	rjmp	.+4      	; 0xfca <mf_rollDo+0xb6>
		str[0] = ' ';
     fc6:	80 e2       	ldi	r24, 0x20	; 32
     fc8:	89 83       	std	Y+1, r24	; 0x01
		
	printLedBuffer(0,str);
     fca:	be 01       	movw	r22, r28
     fcc:	6f 5f       	subi	r22, 0xFF	; 255
     fce:	7f 4f       	sbci	r23, 0xFF	; 255
     fd0:	80 e0       	ldi	r24, 0x00	; 0
     fd2:	4d dd       	rcall	.-1382   	; 0xa6e <printLedBuffer>
}
     fd4:	27 96       	adiw	r28, 0x07	; 7
     fd6:	0f b6       	in	r0, 0x3f	; 63
     fd8:	f8 94       	cli
     fda:	de bf       	out	0x3e, r29	; 62
     fdc:	0f be       	out	0x3f, r0	; 63
     fde:	cd bf       	out	0x3d, r28	; 61
     fe0:	df 91       	pop	r29
     fe2:	cf 91       	pop	r28
     fe4:	08 95       	ret

00000fe6 <mf_rollSelect>:
//---------------------------------------------//
//---------------------------------------------//

void mf_rollSelect(void)
{
	setExtraLeds(LED_ROLL);
     fe6:	82 e0       	ldi	r24, 0x02	; 2
     fe8:	94 dd       	rcall	.-1240   	; 0xb12 <setExtraLeds>
	mf_leafSelectAct();		// setup and start timer
     fea:	e7 dd       	rcall	.-1074   	; 0xbba <mf_leafSelectAct>
     fec:	08 95       	ret

00000fee <mf_setTempDo>:
	clearExtraLeds(LED_TEMP);
	mf_leafSelectAct();		// setup and start timer
}

void mf_setTempDo(void)
{
     fee:	cf 93       	push	r28
     ff0:	df 93       	push	r29
     ff2:	cd b7       	in	r28, 0x3d	; 61
     ff4:	de b7       	in	r29, 0x3e	; 62
     ff6:	27 97       	sbiw	r28, 0x07	; 7
     ff8:	0f b6       	in	r0, 0x3f	; 63
     ffa:	f8 94       	cli
     ffc:	de bf       	out	0x3e, r29	; 62
     ffe:	0f be       	out	0x3f, r0	; 63
    1000:	cd bf       	out	0x3d, r28	; 61
	char str[] = {' ',' ',' ',' ',0xB0,'C',0};
    1002:	87 e0       	ldi	r24, 0x07	; 7
    1004:	e4 e8       	ldi	r30, 0x84	; 132
    1006:	f0 e0       	ldi	r31, 0x00	; 0
    1008:	de 01       	movw	r26, r28
    100a:	11 96       	adiw	r26, 0x01	; 1
    100c:	01 90       	ld	r0, Z+
    100e:	0d 92       	st	X+, r0
    1010:	8a 95       	dec	r24
    1012:	e1 f7       	brne	.-8      	; 0x100c <mf_setTempDo+0x1e>

	
	if (button_state & (BD_UP | BR_UP))
    1014:	80 91 b6 00 	lds	r24, 0x00B6
    1018:	90 91 b7 00 	lds	r25, 0x00B7
    101c:	9c 01       	movw	r18, r24
    101e:	22 70       	andi	r18, 0x02	; 2
    1020:	34 70       	andi	r19, 0x04	; 4
    1022:	23 2b       	or	r18, r19
    1024:	71 f0       	breq	.+28     	; 0x1042 <mf_setTempDo+0x54>
	{
		if (setup_temp_value < MAX_SET_TEMP)
    1026:	80 91 f3 00 	lds	r24, 0x00F3
    102a:	90 91 f4 00 	lds	r25, 0x00F4
    102e:	82 3d       	cpi	r24, 0xD2	; 210
    1030:	91 05       	cpc	r25, r1
    1032:	28 f4       	brcc	.+10     	; 0x103e <mf_setTempDo+0x50>
			setup_temp_value += 5;
    1034:	05 96       	adiw	r24, 0x05	; 5
    1036:	90 93 f4 00 	sts	0x00F4, r25
    103a:	80 93 f3 00 	sts	0x00F3, r24
		restartMenuTimer();
    103e:	b4 dd       	rcall	.-1176   	; 0xba8 <restartMenuTimer>
    1040:	11 c0       	rjmp	.+34     	; 0x1064 <mf_setTempDo+0x76>
	}
	else if (button_state & (BD_DOWN | BR_DOWN))
    1042:	84 70       	andi	r24, 0x04	; 4
    1044:	98 70       	andi	r25, 0x08	; 8
    1046:	89 2b       	or	r24, r25
    1048:	69 f0       	breq	.+26     	; 0x1064 <mf_setTempDo+0x76>
	{
		if (setup_temp_value > MIN_SET_TEMP)
    104a:	80 91 f3 00 	lds	r24, 0x00F3
    104e:	90 91 f4 00 	lds	r25, 0x00F4
    1052:	8f 31       	cpi	r24, 0x1F	; 31
    1054:	91 05       	cpc	r25, r1
    1056:	28 f0       	brcs	.+10     	; 0x1062 <mf_setTempDo+0x74>
			setup_temp_value -= 5;
    1058:	05 97       	sbiw	r24, 0x05	; 5
    105a:	90 93 f4 00 	sts	0x00F4, r25
    105e:	80 93 f3 00 	sts	0x00F3, r24
		restartMenuTimer();
    1062:	a2 dd       	rcall	.-1212   	; 0xba8 <restartMenuTimer>
	}					
		
	// Output ADC result to LED
	u16toa_align_right(setup_temp_value,str,0x80 | 4,' ');
    1064:	20 e2       	ldi	r18, 0x20	; 32
    1066:	44 e8       	ldi	r20, 0x84	; 132
    1068:	be 01       	movw	r22, r28
    106a:	6f 5f       	subi	r22, 0xFF	; 255
    106c:	7f 4f       	sbci	r23, 0xFF	; 255
    106e:	80 91 f3 00 	lds	r24, 0x00F3
    1072:	90 91 f4 00 	lds	r25, 0x00F4
    1076:	36 d1       	rcall	.+620    	; 0x12e4 <u16toa_align_right>
	printLedBuffer(0,str);
    1078:	be 01       	movw	r22, r28
    107a:	6f 5f       	subi	r22, 0xFF	; 255
    107c:	7f 4f       	sbci	r23, 0xFF	; 255
    107e:	80 e0       	ldi	r24, 0x00	; 0
    1080:	f6 dc       	rcall	.-1556   	; 0xa6e <printLedBuffer>
	
	if (userTimer.FA_GE)
    1082:	80 91 18 01 	lds	r24, 0x0118
    1086:	84 ff       	sbrs	r24, 4
    1088:	03 c0       	rjmp	.+6      	; 0x1090 <mf_setTempDo+0xa2>
		setExtraLeds(LED_TEMP);
    108a:	81 e0       	ldi	r24, 0x01	; 1
    108c:	42 dd       	rcall	.-1404   	; 0xb12 <setExtraLeds>
    108e:	02 c0       	rjmp	.+4      	; 0x1094 <mf_setTempDo+0xa6>
	else
		clearExtraLeds(LED_TEMP);
    1090:	81 e0       	ldi	r24, 0x01	; 1
    1092:	45 dd       	rcall	.-1398   	; 0xb1e <clearExtraLeds>
}
    1094:	27 96       	adiw	r28, 0x07	; 7
    1096:	0f b6       	in	r0, 0x3f	; 63
    1098:	f8 94       	cli
    109a:	de bf       	out	0x3e, r29	; 62
    109c:	0f be       	out	0x3f, r0	; 63
    109e:	cd bf       	out	0x3d, r28	; 61
    10a0:	df 91       	pop	r29
    10a2:	cf 91       	pop	r28
    10a4:	08 95       	ret

000010a6 <mf_realTempSelect>:
//=================================================================//


void mf_realTempSelect(void)
{
	setExtraLeds(LED_TEMP);
    10a6:	81 e0       	ldi	r24, 0x01	; 1
    10a8:	34 dd       	rcall	.-1432   	; 0xb12 <setExtraLeds>
    10aa:	08 95       	ret

000010ac <InitMenu>:
//	Menu initialization
//	Call this function at start of your program before processMenu()
//-----------------------------------------------------------------//
void InitMenu(void)
{
	selectedMenuItemID = mi_REALTEMP;
    10ac:	81 e0       	ldi	r24, 0x01	; 1
    10ae:	80 93 11 01 	sts	0x0111, r24
    10b2:	20 e0       	ldi	r18, 0x00	; 0
    10b4:	30 e0       	ldi	r19, 0x00	; 0
static void getMenuFunctionRecord(uint8_t menuItemID, MenuFunctionRecord* menuRecord )
{
	uint8_t i;
	for (i = 0; i < sizeof(menuFunctionSet)/sizeof(MenuFunctionRecord); i++  )
	{
		readMenuRecord(&menuFunctionSet[i], menuRecord);
    10b6:	c9 01       	movw	r24, r18
    10b8:	88 0f       	add	r24, r24
    10ba:	99 1f       	adc	r25, r25
    10bc:	88 0f       	add	r24, r24
    10be:	99 1f       	adc	r25, r25
    10c0:	88 0f       	add	r24, r24
    10c2:	99 1f       	adc	r25, r25
    10c4:	82 1b       	sub	r24, r18
    10c6:	93 0b       	sbc	r25, r19
    10c8:	88 5b       	subi	r24, 0xB8	; 184
    10ca:	9e 4f       	sbci	r25, 0xFE	; 254
//		fRecPtr		- address of the function record in the FLASH
//		resPtr		- address of the record to fill in the SRAM
//-----------------------------------------------------------------//
static inline void readMenuRecord(const MenuFunctionRecord* fRecPtr, MenuFunctionRecord* resPtr )
{
	resPtr->Item = pgm_read_byte(&fRecPtr->Item);
    10cc:	fc 01       	movw	r30, r24
    10ce:	64 91       	lpm	r22, Z
	resPtr->SelectFunction = (FuncPtr)pgm_read_word(&fRecPtr->SelectFunction);
    10d0:	31 96       	adiw	r30, 0x01	; 1
    10d2:	45 91       	lpm	r20, Z+
    10d4:	54 91       	lpm	r21, Z
    10d6:	b4 2f       	mov	r27, r20
    10d8:	a5 2f       	mov	r26, r21
	resPtr->RunFunction = (FuncPtr)pgm_read_word(&fRecPtr->RunFunction);
    10da:	fc 01       	movw	r30, r24
    10dc:	33 96       	adiw	r30, 0x03	; 3
    10de:	45 91       	lpm	r20, Z+
    10e0:	54 91       	lpm	r21, Z
    10e2:	74 2f       	mov	r23, r20
    10e4:	45 2f       	mov	r20, r21
	resPtr->LeaveFunction = (FuncPtr)pgm_read_word(&fRecPtr->LeaveFunction);
    10e6:	05 96       	adiw	r24, 0x05	; 5
    10e8:	fc 01       	movw	r30, r24
    10ea:	85 91       	lpm	r24, Z+
    10ec:	94 91       	lpm	r25, Z
    10ee:	58 2f       	mov	r21, r24
{
	uint8_t i;
	for (i = 0; i < sizeof(menuFunctionSet)/sizeof(MenuFunctionRecord); i++  )
	{
		readMenuRecord(&menuFunctionSet[i], menuRecord);
		if (menuRecord->Item == menuItemID)
    10f0:	61 30       	cpi	r22, 0x01	; 1
    10f2:	79 f4       	brne	.+30     	; 0x1112 <InitMenu+0x66>
    10f4:	60 93 1c 01 	sts	0x011C, r22
    10f8:	ed e1       	ldi	r30, 0x1D	; 29
    10fa:	f1 e0       	ldi	r31, 0x01	; 1
    10fc:	b0 83       	st	Z, r27
    10fe:	a1 83       	std	Z+1, r26	; 0x01
    1100:	ef e1       	ldi	r30, 0x1F	; 31
    1102:	f1 e0       	ldi	r31, 0x01	; 1
    1104:	70 83       	st	Z, r23
    1106:	41 83       	std	Z+1, r20	; 0x01
    1108:	e1 e2       	ldi	r30, 0x21	; 33
    110a:	f1 e0       	ldi	r31, 0x01	; 1
    110c:	50 83       	st	Z, r21
    110e:	91 83       	std	Z+1, r25	; 0x01
    1110:	14 c0       	rjmp	.+40     	; 0x113a <InitMenu+0x8e>
    1112:	2f 5f       	subi	r18, 0xFF	; 255
    1114:	3f 4f       	sbci	r19, 0xFF	; 255
//	Output:
//-----------------------------------------------------------------//
static void getMenuFunctionRecord(uint8_t menuItemID, MenuFunctionRecord* menuRecord )
{
	uint8_t i;
	for (i = 0; i < sizeof(menuFunctionSet)/sizeof(MenuFunctionRecord); i++  )
    1116:	2d 30       	cpi	r18, 0x0D	; 13
    1118:	31 05       	cpc	r19, r1
    111a:	09 f0       	breq	.+2      	; 0x111e <InitMenu+0x72>
    111c:	cc cf       	rjmp	.-104    	; 0x10b6 <InitMenu+0xa>
    111e:	60 93 1c 01 	sts	0x011C, r22
    1122:	ed e1       	ldi	r30, 0x1D	; 29
    1124:	f1 e0       	ldi	r31, 0x01	; 1
    1126:	b0 83       	st	Z, r27
    1128:	a1 83       	std	Z+1, r26	; 0x01
    112a:	ef e1       	ldi	r30, 0x1F	; 31
    112c:	f1 e0       	ldi	r31, 0x01	; 1
    112e:	70 83       	st	Z, r23
    1130:	41 83       	std	Z+1, r20	; 0x01
    1132:	e1 e2       	ldi	r30, 0x21	; 33
    1134:	f1 e0       	ldi	r31, 0x01	; 1
    1136:	50 83       	st	Z, r21
    1138:	91 83       	std	Z+1, r25	; 0x01
//-----------------------------------------------------------------//
void InitMenu(void)
{
	selectedMenuItemID = mi_REALTEMP;
	getMenuFunctionRecord(selectedMenuItemID, &selectedMenuFunctionRecord);
	processItemFunction(selectedMenuFunctionRecord.SelectFunction);
    113a:	e0 91 1d 01 	lds	r30, 0x011D
    113e:	f0 91 1e 01 	lds	r31, 0x011E
//	Arguments:
//		funcAddr - address of the function to run.
//-----------------------------------------------------------------//
static inline void processItemFunction(FuncPtr funcAddr)
{
	if (funcAddr != 0)
    1142:	30 97       	sbiw	r30, 0x00	; 0
    1144:	09 f0       	breq	.+2      	; 0x1148 <InitMenu+0x9c>
		((FuncPtr)funcAddr)();
    1146:	09 95       	icall
	selectedMenuItemID = mi_REALTEMP;
	getMenuFunctionRecord(selectedMenuItemID, &selectedMenuFunctionRecord);
	processItemFunction(selectedMenuFunctionRecord.SelectFunction);
	
	// Initialize menu state timer
	menuTimer.Timer = 0;
    1148:	10 92 13 01 	sts	0x0113, r1
	menuTimer.Enabled = 0;
    114c:	e2 e1       	ldi	r30, 0x12	; 18
    114e:	f1 e0       	ldi	r31, 0x01	; 1
    1150:	80 81       	ld	r24, Z
	menuTimer.RunOnce = 1;
    1152:	8e 7f       	andi	r24, 0xFE	; 254
    1154:	82 60       	ori	r24, 0x02	; 2
    1156:	80 83       	st	Z, r24
	
	// Initialize user timer
	userTimer.Enabled = 0;
    1158:	e8 e1       	ldi	r30, 0x18	; 24
    115a:	f1 e0       	ldi	r31, 0x01	; 1
    115c:	80 81       	ld	r24, Z
	userTimer.RunOnce = 0;
    115e:	8e 7f       	andi	r24, 0xFE	; 254
    1160:	8d 7f       	andi	r24, 0xFD	; 253
    1162:	80 83       	st	Z, r24
    1164:	08 95       	ret

00001166 <processMenu>:
//	Main menu control, -  state function calls, jumps 
//	between menu states and indication
//	Call this function from main() with a fixed time interval.
//-----------------------------------------------------------------//
void processMenu(void)
{
    1166:	ff 92       	push	r15
    1168:	0f 93       	push	r16
    116a:	1f 93       	push	r17
    116c:	cf 93       	push	r28
    116e:	df 93       	push	r29
	NextItem_t nextItem;
	uint16_t jumpCondition;
	
	processSoftTimer8b(&menuTimer);	
    1170:	82 e1       	ldi	r24, 0x12	; 18
    1172:	91 e0       	ldi	r25, 0x01	; 1
    1174:	58 d3       	rcall	.+1712   	; 0x1826 <processSoftTimer8b>
	
	// Compose jump condition
	jumpCondition = button_state;		
    1176:	40 91 b6 00 	lds	r20, 0x00B6
    117a:	50 91 b7 00 	lds	r21, 0x00B7
	if (menuTimer.FTop)
    117e:	80 91 12 01 	lds	r24, 0x0112
    1182:	85 fd       	sbrc	r24, 5
		jumpCondition |= TMR_EXP;
    1184:	50 68       	ori	r21, 0x80	; 128
	
	// Get next menu item according to current state and jump conditions
	nextItem = getNextMenuItem(selectedMenuItemID, jumpCondition);
    1186:	b0 91 11 01 	lds	r27, 0x0111
    118a:	80 e0       	ldi	r24, 0x00	; 0
    118c:	90 e0       	ldi	r25, 0x00	; 0
	MenuJumpRecord	jRecord;
	uint8_t i;
	
	for (i = 0; i < sizeof(menuJumpSet)/sizeof(MenuJumpRecord); i++  )
	{
		readJumpRecord(&menuJumpSet[i], &jRecord);		// read full jump record
    118e:	9c 01       	movw	r18, r24
    1190:	22 0f       	add	r18, r18
    1192:	33 1f       	adc	r19, r19
    1194:	22 0f       	add	r18, r18
    1196:	33 1f       	adc	r19, r19
    1198:	28 0f       	add	r18, r24
    119a:	39 1f       	adc	r19, r25
    119c:	2d 55       	subi	r18, 0x5D	; 93
    119e:	3e 4f       	sbci	r19, 0xFE	; 254
//		jRecPtr		- address of the jump record in the FLASH
//		resPtr		- address of the record to fill in the SRAM
//-----------------------------------------------------------------//
static inline void readJumpRecord(const MenuJumpRecord* jRecPtr, MenuJumpRecord* resPtr )
{
	resPtr->Item = pgm_read_byte(&jRecPtr->Item);
    11a0:	f9 01       	movw	r30, r18
    11a2:	a4 91       	lpm	r26, Z
	resPtr->JumpCondition = pgm_read_word(&jRecPtr->JumpCondition);
    11a4:	31 96       	adiw	r30, 0x01	; 1
    11a6:	65 91       	lpm	r22, Z+
    11a8:	74 91       	lpm	r23, Z
	resPtr->NextItem= pgm_read_byte(&jRecPtr->NextItem);
    11aa:	f9 01       	movw	r30, r18
    11ac:	33 96       	adiw	r30, 0x03	; 3
    11ae:	c4 91       	lpm	r28, Z
	resPtr->Flags= pgm_read_byte(&jRecPtr->Flags);
    11b0:	f9 01       	movw	r30, r18
    11b2:	34 96       	adiw	r30, 0x04	; 4
    11b4:	24 91       	lpm	r18, Z
	uint8_t i;
	
	for (i = 0; i < sizeof(menuJumpSet)/sizeof(MenuJumpRecord); i++  )
	{
		readJumpRecord(&menuJumpSet[i], &jRecord);		// read full jump record
		if (jRecord.Item == selectedItemId)				// If ID match,
    11b6:	ba 13       	cpse	r27, r26
    11b8:	15 c0       	rjmp	.+42     	; 0x11e4 <processMenu+0x7e>
		{
			if ((jRecord.JumpCondition & jmpCond) != 0)		// if any of jump conditions match too,
    11ba:	64 23       	and	r22, r20
    11bc:	75 23       	and	r23, r21
    11be:	67 2b       	or	r22, r23
    11c0:	89 f0       	breq	.+34     	; 0x11e4 <processMenu+0x7e>
			{
				nextItem.ItemID = jRecord.NextItem;			// switch to next menu item
				nextItem.ItemTimeout = jRecord.Flags & TIMEOUT_MASK;
    11c2:	d2 2f       	mov	r29, r18
    11c4:	df 73       	andi	r29, 0x3F	; 63
				nextItem.ShiftRight = (jRecord.Flags & SHIFT_RIGHT) ? 1 : 0;
    11c6:	26 fb       	bst	r18, 6
    11c8:	00 27       	eor	r16, r16
    11ca:	00 f9       	bld	r16, 0
				nextItem.ShiftLeft = (jRecord.Flags & SHIFT_LEFT) ? 1 : 0;
    11cc:	f2 2e       	mov	r15, r18
    11ce:	ff 1c       	adc	r15, r15
    11d0:	ff 24       	eor	r15, r15
    11d2:	ff 1c       	adc	r15, r15
    11d4:	10 e0       	ldi	r17, 0x00	; 0
    11d6:	f0 fa       	bst	r15, 0
    11d8:	10 f9       	bld	r17, 0
    11da:	00 fb       	bst	r16, 0
    11dc:	11 f9       	bld	r17, 1
	
	// Get next menu item according to current state and jump conditions
	nextItem = getNextMenuItem(selectedMenuItemID, jumpCondition);
	
	// If next item differs from current
	if (nextItem.ItemID != selectedMenuItemID)
    11de:	bc 13       	cpse	r27, r28
    11e0:	06 c0       	rjmp	.+12     	; 0x11ee <processMenu+0x88>
    11e2:	70 c0       	rjmp	.+224    	; 0x12c4 <processMenu+0x15e>
    11e4:	01 96       	adiw	r24, 0x01	; 1
	NextItem_t nextItem;
	nextItem.ItemID = selectedItemId;
	MenuJumpRecord	jRecord;
	uint8_t i;
	
	for (i = 0; i < sizeof(menuJumpSet)/sizeof(MenuJumpRecord); i++  )
    11e6:	8d 31       	cpi	r24, 0x1D	; 29
    11e8:	91 05       	cpc	r25, r1
    11ea:	89 f6       	brne	.-94     	; 0x118e <processMenu+0x28>
    11ec:	6b c0       	rjmp	.+214    	; 0x12c4 <processMenu+0x15e>
	
	// If next item differs from current
	if (nextItem.ItemID != selectedMenuItemID)
	{		
		// Call exit function for current item
		processItemFunction(selectedMenuFunctionRecord.LeaveFunction);
    11ee:	e0 91 21 01 	lds	r30, 0x0121
    11f2:	f0 91 22 01 	lds	r31, 0x0122
//	Arguments:
//		funcAddr - address of the function to run.
//-----------------------------------------------------------------//
static inline void processItemFunction(FuncPtr funcAddr)
{
	if (funcAddr != 0)
    11f6:	30 97       	sbiw	r30, 0x00	; 0
    11f8:	09 f0       	breq	.+2      	; 0x11fc <processMenu+0x96>
		((FuncPtr)funcAddr)();
    11fa:	09 95       	icall
		// Call exit function for current item
		processItemFunction(selectedMenuFunctionRecord.LeaveFunction);
		
		// If shifting is specified, start it before calling any 
		//	new menu item functions 
		if (nextItem.ShiftRight)
    11fc:	f0 fa       	bst	r15, 0
    11fe:	10 f9       	bld	r17, 0
    1200:	00 fb       	bst	r16, 0
    1202:	11 f9       	bld	r17, 1
    1204:	11 ff       	sbrs	r17, 1
    1206:	02 c0       	rjmp	.+4      	; 0x120c <processMenu+0xa6>
			startShiftingWindowRight();
    1208:	01 dc       	rcall	.-2046   	; 0xa0c <startShiftingWindowRight>
    120a:	02 c0       	rjmp	.+4      	; 0x1210 <processMenu+0xaa>
		else if (nextItem.ShiftLeft)
    120c:	10 fd       	sbrc	r17, 0
			startShiftingWindowLeft();
    120e:	f0 db       	rcall	.-2080   	; 0x9f0 <startShiftingWindowLeft>
		
		// Select new item
		selectedMenuItemID = nextItem.ItemID;
    1210:	c0 93 11 01 	sts	0x0111, r28
    1214:	20 e0       	ldi	r18, 0x00	; 0
    1216:	30 e0       	ldi	r19, 0x00	; 0
static void getMenuFunctionRecord(uint8_t menuItemID, MenuFunctionRecord* menuRecord )
{
	uint8_t i;
	for (i = 0; i < sizeof(menuFunctionSet)/sizeof(MenuFunctionRecord); i++  )
	{
		readMenuRecord(&menuFunctionSet[i], menuRecord);
    1218:	c9 01       	movw	r24, r18
    121a:	88 0f       	add	r24, r24
    121c:	99 1f       	adc	r25, r25
    121e:	88 0f       	add	r24, r24
    1220:	99 1f       	adc	r25, r25
    1222:	88 0f       	add	r24, r24
    1224:	99 1f       	adc	r25, r25
    1226:	82 1b       	sub	r24, r18
    1228:	93 0b       	sbc	r25, r19
    122a:	88 5b       	subi	r24, 0xB8	; 184
    122c:	9e 4f       	sbci	r25, 0xFE	; 254
//		fRecPtr		- address of the function record in the FLASH
//		resPtr		- address of the record to fill in the SRAM
//-----------------------------------------------------------------//
static inline void readMenuRecord(const MenuFunctionRecord* fRecPtr, MenuFunctionRecord* resPtr )
{
	resPtr->Item = pgm_read_byte(&fRecPtr->Item);
    122e:	fc 01       	movw	r30, r24
    1230:	64 91       	lpm	r22, Z
	resPtr->SelectFunction = (FuncPtr)pgm_read_word(&fRecPtr->SelectFunction);
    1232:	31 96       	adiw	r30, 0x01	; 1
    1234:	45 91       	lpm	r20, Z+
    1236:	54 91       	lpm	r21, Z
    1238:	b4 2f       	mov	r27, r20
    123a:	a5 2f       	mov	r26, r21
	resPtr->RunFunction = (FuncPtr)pgm_read_word(&fRecPtr->RunFunction);
    123c:	fc 01       	movw	r30, r24
    123e:	33 96       	adiw	r30, 0x03	; 3
    1240:	45 91       	lpm	r20, Z+
    1242:	54 91       	lpm	r21, Z
    1244:	74 2f       	mov	r23, r20
    1246:	45 2f       	mov	r20, r21
	resPtr->LeaveFunction = (FuncPtr)pgm_read_word(&fRecPtr->LeaveFunction);
    1248:	05 96       	adiw	r24, 0x05	; 5
    124a:	fc 01       	movw	r30, r24
    124c:	85 91       	lpm	r24, Z+
    124e:	94 91       	lpm	r25, Z
    1250:	58 2f       	mov	r21, r24
{
	uint8_t i;
	for (i = 0; i < sizeof(menuFunctionSet)/sizeof(MenuFunctionRecord); i++  )
	{
		readMenuRecord(&menuFunctionSet[i], menuRecord);
		if (menuRecord->Item == menuItemID)
    1252:	c6 13       	cpse	r28, r22
    1254:	0f c0       	rjmp	.+30     	; 0x1274 <processMenu+0x10e>
    1256:	60 93 1c 01 	sts	0x011C, r22
    125a:	ed e1       	ldi	r30, 0x1D	; 29
    125c:	f1 e0       	ldi	r31, 0x01	; 1
    125e:	b0 83       	st	Z, r27
    1260:	a1 83       	std	Z+1, r26	; 0x01
    1262:	ef e1       	ldi	r30, 0x1F	; 31
    1264:	f1 e0       	ldi	r31, 0x01	; 1
    1266:	70 83       	st	Z, r23
    1268:	41 83       	std	Z+1, r20	; 0x01
    126a:	e1 e2       	ldi	r30, 0x21	; 33
    126c:	f1 e0       	ldi	r31, 0x01	; 1
    126e:	50 83       	st	Z, r21
    1270:	91 83       	std	Z+1, r25	; 0x01
    1272:	14 c0       	rjmp	.+40     	; 0x129c <processMenu+0x136>
    1274:	2f 5f       	subi	r18, 0xFF	; 255
    1276:	3f 4f       	sbci	r19, 0xFF	; 255
//	Output:
//-----------------------------------------------------------------//
static void getMenuFunctionRecord(uint8_t menuItemID, MenuFunctionRecord* menuRecord )
{
	uint8_t i;
	for (i = 0; i < sizeof(menuFunctionSet)/sizeof(MenuFunctionRecord); i++  )
    1278:	2d 30       	cpi	r18, 0x0D	; 13
    127a:	31 05       	cpc	r19, r1
    127c:	09 f0       	breq	.+2      	; 0x1280 <processMenu+0x11a>
    127e:	cc cf       	rjmp	.-104    	; 0x1218 <processMenu+0xb2>
    1280:	60 93 1c 01 	sts	0x011C, r22
    1284:	ed e1       	ldi	r30, 0x1D	; 29
    1286:	f1 e0       	ldi	r31, 0x01	; 1
    1288:	b0 83       	st	Z, r27
    128a:	a1 83       	std	Z+1, r26	; 0x01
    128c:	ef e1       	ldi	r30, 0x1F	; 31
    128e:	f1 e0       	ldi	r31, 0x01	; 1
    1290:	70 83       	st	Z, r23
    1292:	41 83       	std	Z+1, r20	; 0x01
    1294:	e1 e2       	ldi	r30, 0x21	; 33
    1296:	f1 e0       	ldi	r31, 0x01	; 1
    1298:	50 83       	st	Z, r21
    129a:	91 83       	std	Z+1, r25	; 0x01
		selectedMenuItemID = nextItem.ItemID;
		
		// Load from FLASH and save function pointers
		getMenuFunctionRecord(selectedMenuItemID, &selectedMenuFunctionRecord);
		// Call select function for next item
		processItemFunction(selectedMenuFunctionRecord.SelectFunction);
    129c:	e0 91 1d 01 	lds	r30, 0x011D
    12a0:	f0 91 1e 01 	lds	r31, 0x011E
//	Arguments:
//		funcAddr - address of the function to run.
//-----------------------------------------------------------------//
static inline void processItemFunction(FuncPtr funcAddr)
{
	if (funcAddr != 0)
    12a4:	30 97       	sbiw	r30, 0x00	; 0
    12a6:	09 f0       	breq	.+2      	; 0x12aa <processMenu+0x144>
		((FuncPtr)funcAddr)();
    12a8:	09 95       	icall
		// Load from FLASH and save function pointers
		getMenuFunctionRecord(selectedMenuItemID, &selectedMenuFunctionRecord);
		// Call select function for next item
		processItemFunction(selectedMenuFunctionRecord.SelectFunction);
		// Start timer if timeout is enabled
		if (nextItem.ItemTimeout != 0)
    12aa:	dd 23       	and	r29, r29
    12ac:	a9 f0       	breq	.+42     	; 0x12d8 <processMenu+0x172>
		{
			menuTimer.Top = nextItem.ItemTimeout * MENU_TIMEOUT_MULT;
    12ae:	dd 0f       	add	r29, r29
    12b0:	d0 93 14 01 	sts	0x0114, r29
			menuTimer.Timer = 0;
    12b4:	10 92 13 01 	sts	0x0113, r1
			menuTimer.Enabled = 1;	
    12b8:	e2 e1       	ldi	r30, 0x12	; 18
    12ba:	f1 e0       	ldi	r31, 0x01	; 1
    12bc:	80 81       	ld	r24, Z
    12be:	81 60       	ori	r24, 0x01	; 1
    12c0:	80 83       	st	Z, r24
    12c2:	0a c0       	rjmp	.+20     	; 0x12d8 <processMenu+0x172>
		}
		
	}
	else
	{
		processSoftTimer8b(&userTimer);
    12c4:	88 e1       	ldi	r24, 0x18	; 24
    12c6:	91 e0       	ldi	r25, 0x01	; 1
    12c8:	ae d2       	rcall	.+1372   	; 0x1826 <processSoftTimer8b>
		// Stay at previous item
		processItemFunction(selectedMenuFunctionRecord.RunFunction);
    12ca:	e0 91 1f 01 	lds	r30, 0x011F
    12ce:	f0 91 20 01 	lds	r31, 0x0120
//	Arguments:
//		funcAddr - address of the function to run.
//-----------------------------------------------------------------//
static inline void processItemFunction(FuncPtr funcAddr)
{
	if (funcAddr != 0)
    12d2:	30 97       	sbiw	r30, 0x00	; 0
    12d4:	09 f0       	breq	.+2      	; 0x12d8 <processMenu+0x172>
		((FuncPtr)funcAddr)();
    12d6:	09 95       	icall
	{
		processSoftTimer8b(&userTimer);
		// Stay at previous item
		processItemFunction(selectedMenuFunctionRecord.RunFunction);
	}	
}
    12d8:	df 91       	pop	r29
    12da:	cf 91       	pop	r28
    12dc:	1f 91       	pop	r17
    12de:	0f 91       	pop	r16
    12e0:	ff 90       	pop	r15
    12e2:	08 95       	ret

000012e4 <u16toa_align_right>:
// Converts uint16_t value into decimal string with right alignment
// len = number of digits output (without terminating '\0')
// len[7] = 1 -> no terminating '\0' at buffer[len]
// fill_char -> char used for string padding
void u16toa_align_right(uint16_t val, char *buffer, uint8_t len,char fill_char)
{
    12e4:	cf 93       	push	r28
    12e6:	df 93       	push	r29
    12e8:	fc 01       	movw	r30, r24
    12ea:	52 2f       	mov	r21, r18
	if (len & 0x80)
    12ec:	44 23       	and	r20, r20
    12ee:	2c f4       	brge	.+10     	; 0x12fa <u16toa_align_right+0x16>
	{
		len = len & 0x7F;
    12f0:	4f 77       	andi	r20, 0x7F	; 127
		buffer += len;	
    12f2:	eb 01       	movw	r28, r22
    12f4:	c4 0f       	add	r28, r20
    12f6:	d1 1d       	adc	r29, r1
    12f8:	04 c0       	rjmp	.+8      	; 0x1302 <u16toa_align_right+0x1e>
	}
	else
	{
		buffer += len;	
    12fa:	eb 01       	movw	r28, r22
    12fc:	c4 0f       	add	r28, r20
    12fe:	d1 1d       	adc	r29, r1
		*buffer = 0;
    1300:	18 82       	st	Y, r1
	}
	
	do
	{
		*--buffer = val % 10 + '0';
    1302:	9f 01       	movw	r18, r30
    1304:	ad ec       	ldi	r26, 0xCD	; 205
    1306:	bc ec       	ldi	r27, 0xCC	; 204
    1308:	87 d3       	rcall	.+1806   	; 0x1a18 <__umulhisi3>
    130a:	96 95       	lsr	r25
    130c:	87 95       	ror	r24
    130e:	96 95       	lsr	r25
    1310:	87 95       	ror	r24
    1312:	96 95       	lsr	r25
    1314:	87 95       	ror	r24
    1316:	dc 01       	movw	r26, r24
    1318:	aa 0f       	add	r26, r26
    131a:	bb 1f       	adc	r27, r27
    131c:	bc 01       	movw	r22, r24
    131e:	66 0f       	add	r22, r22
    1320:	77 1f       	adc	r23, r23
    1322:	66 0f       	add	r22, r22
    1324:	77 1f       	adc	r23, r23
    1326:	66 0f       	add	r22, r22
    1328:	77 1f       	adc	r23, r23
    132a:	6a 0f       	add	r22, r26
    132c:	7b 1f       	adc	r23, r27
    132e:	e6 1b       	sub	r30, r22
    1330:	f7 0b       	sbc	r31, r23
    1332:	e0 5d       	subi	r30, 0xD0	; 208
    1334:	ea 93       	st	-Y, r30
		val /= 10;
    1336:	fc 01       	movw	r30, r24
		len--;
    1338:	41 50       	subi	r20, 0x01	; 1
	}
	while ((val != 0) && len);
    133a:	00 97       	sbiw	r24, 0x00	; 0
    133c:	29 f4       	brne	.+10     	; 0x1348 <u16toa_align_right+0x64>
	
	// Padding
	while(len--)
    133e:	84 2f       	mov	r24, r20
    1340:	81 50       	subi	r24, 0x01	; 1
    1342:	41 11       	cpse	r20, r1
    1344:	04 c0       	rjmp	.+8      	; 0x134e <u16toa_align_right+0x6a>
    1346:	07 c0       	rjmp	.+14     	; 0x1356 <u16toa_align_right+0x72>
	{
		*--buffer = val % 10 + '0';
		val /= 10;
		len--;
	}
	while ((val != 0) && len);
    1348:	41 11       	cpse	r20, r1
    134a:	db cf       	rjmp	.-74     	; 0x1302 <u16toa_align_right+0x1e>
    134c:	04 c0       	rjmp	.+8      	; 0x1356 <u16toa_align_right+0x72>
    134e:	fe 01       	movw	r30, r28
	
	// Padding
	while(len--)
		*--buffer = fill_char;
    1350:	52 93       	st	-Z, r21
		len--;
	}
	while ((val != 0) && len);
	
	// Padding
	while(len--)
    1352:	81 50       	subi	r24, 0x01	; 1
    1354:	e8 f7       	brcc	.-6      	; 0x1350 <u16toa_align_right+0x6c>
		*--buffer = fill_char;
}
    1356:	df 91       	pop	r29
    1358:	cf 91       	pop	r28
    135a:	08 95       	ret

0000135c <init_system>:
//extern void powTest(void);

void init_system()
{
	// Setup Port D
	PORTD = 0; //(1<<PD_SYNCA | 1<<PD_SYNCB);
    135c:	12 ba       	out	0x12, r1	; 18
	DDRD = (1<<PD_TXD | 1<<PD_M1 | 1<<PD_M2 | 1<<PD_HEATER | 1<<PD_HEAT_INDIC );
    135e:	8e e3       	ldi	r24, 0x3E	; 62
    1360:	81 bb       	out	0x11, r24	; 17
	
	// Setup Port B
	PORTB = 0;
    1362:	18 ba       	out	0x18, r1	; 24
	DDRB = (1<<PB_BEEPER | 1<<PB_LED_DOUT | 1<<PB_LED_CLK | 1<<PB_SEGF | 1<<PB_SEGG | 1<<PB_SEGH);
    1364:	8f e3       	ldi	r24, 0x3F	; 63
    1366:	87 bb       	out	0x17, r24	; 23
	
	PORTC = 0;
    1368:	15 ba       	out	0x15, r1	; 21
	DDRC = (1<<PC_SEGA | 1<<PC_SEGB | 1<<PC_SEGC | 1<<PC_SEGD | 1<<PC_SEGE);	
    136a:	8f e1       	ldi	r24, 0x1F	; 31
    136c:	84 bb       	out	0x14, r24	; 20

	// Setup timer0
	// 1/1024 prescaler, T=64us @16MHz
	TCCR0 = (1<<CS02 | 0<<CS01 | 1<<CS00);
    136e:	85 e0       	ldi	r24, 0x05	; 5
    1370:	83 bf       	out	0x33, r24	; 51
	// Start 256 * 64us = 16384us interval
	TCNT0 = 0;
    1372:	12 be       	out	0x32, r1	; 50
	// Clear interrupt flag
	TIFR |= (1<<TOV0);
    1374:	88 b7       	in	r24, 0x38	; 56
    1376:	81 60       	ori	r24, 0x01	; 1
    1378:	88 bf       	out	0x38, r24	; 56
	// Enable interrupts from timer 0
	TIMSK |= (1<<TOIE0);
    137a:	89 b7       	in	r24, 0x39	; 57
    137c:	81 60       	ori	r24, 0x01	; 1
    137e:	89 bf       	out	0x39, r24	; 57
	
	// Setup timer2 as 1ms system frequency generator
	// 1/64 prescaler, CTC mode, OC2 disconnected
	TCCR2 = (1<<CS22 | 1<<WGM21);
    1380:	8c e0       	ldi	r24, 0x0C	; 12
    1382:	85 bd       	out	0x25, r24	; 37
	OCR2 = 249;
    1384:	89 ef       	ldi	r24, 0xF9	; 249
    1386:	83 bd       	out	0x23, r24	; 35
	TIMSK |= (1<<OCIE2);
    1388:	89 b7       	in	r24, 0x39	; 57
    138a:	80 68       	ori	r24, 0x80	; 128
    138c:	89 bf       	out	0x39, r24	; 57
	
	// Setup timer1 as beeper frequency generator
	// CTC mode, 1/64 prescaler
	TCCR1A = 0;
    138e:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = (1<<WGM12 | 1<<CS11 | 1<<CS10);
    1390:	8b e0       	ldi	r24, 0x0B	; 11
    1392:	8e bd       	out	0x2e, r24	; 46
	// 1kHz beeper frequency default
	OCR1A = 127;
    1394:	8f e7       	ldi	r24, 0x7F	; 127
    1396:	90 e0       	ldi	r25, 0x00	; 0
    1398:	9b bd       	out	0x2b, r25	; 43
    139a:	8a bd       	out	0x2a, r24	; 42

	// Setup AC sync comparator
	// Interrupt on output toggle
	ACSR |= (1<<ACI);
    139c:	44 9a       	sbi	0x08, 4	; 8
	ACSR = (1<<ACIE | 0<<ACIS1 | 0<<ACIS0);
    139e:	88 e0       	ldi	r24, 0x08	; 8
    13a0:	88 b9       	out	0x08, r24	; 8
	
	// Setup ADC
	// Internal Vref + cap, input ADC5, 
	ADMUX = (1<<REFS1 | 1<<REFS0 | 0<<MUX3 | 1<<MUX2 | 0<<MUX1 | 1<<MUX0 );
    13a2:	85 ec       	ldi	r24, 0xC5	; 197
    13a4:	87 b9       	out	0x07, r24	; 7
	// Prescaler = 128
	ADCSRA = (1<<ADEN |/* 1<<ADFR |*/  1<<ADIE | 1<<ADPS2 | 1<<ADPS1 | 1<<ADPS0);
    13a6:	8f e8       	ldi	r24, 0x8F	; 143
    13a8:	86 b9       	out	0x06, r24	; 6
	
	// Setup USART
	// Double speed
	UCSRA = (1<<U2X);
    13aa:	82 e0       	ldi	r24, 0x02	; 2
    13ac:	8b b9       	out	0x0b, r24	; 11
	UCSRB = (1<<RXEN | 1<<TXEN | 0<<UCSZ2);
    13ae:	88 e1       	ldi	r24, 0x18	; 24
    13b0:	8a b9       	out	0x0a, r24	; 10
	// No parity, 1 stop bit, 8 bit
	UCSRC = (1<<URSEL | 0<<UPM1 | 0<<UPM0 | 0<<USBS | 1<<UCSZ1 | 1<<UCSZ0);
    13b2:	86 e8       	ldi	r24, 0x86	; 134
    13b4:	80 bd       	out	0x20, r24	; 32
	// 57600 @16MHz, 2x
	UBRRH=0x00;
    13b6:	10 bc       	out	0x20, r1	; 32
	UBRRL=0x22;
    13b8:	82 e2       	ldi	r24, 0x22	; 34
    13ba:	89 b9       	out	0x09, r24	; 9
    13bc:	08 95       	ret

000013be <main>:




int main(void)
{
    13be:	cf 93       	push	r28
    13c0:	df 93       	push	r29
    13c2:	cd b7       	in	r28, 0x3d	; 61
    13c4:	de b7       	in	r29, 0x3e	; 62
    13c6:	2a 97       	sbiw	r28, 0x0a	; 10
    13c8:	0f b6       	in	r0, 0x3f	; 63
    13ca:	f8 94       	cli
    13cc:	de bf       	out	0x3e, r29	; 62
    13ce:	0f be       	out	0x3f, r0	; 63
    13d0:	cd bf       	out	0x3d, r28	; 61
	volatile uint16_t temp16u;
	
	//powTest();
	
	// Initialize IO
	init_system();
    13d2:	c4 df       	rcall	.-120    	; 0x135c <init_system>
	
	// Restore params
	restoreGlobalParams();
    13d4:	f8 d9       	rcall	.-3088   	; 0x7c6 <restoreGlobalParams>
	
	// Calibrate ADC coefficients using restored params
	calculateCoeffs();
    13d6:	8c d7       	rcall	.+3864   	; 0x22f0 <__data_load_end+0x80a>
	
	// Initialize LED indicator
	initLedIndicator();
    13d8:	27 db       	rcall	.-2482   	; 0xa28 <initLedIndicator>
	
	// Enable interrupts
	sei();
    13da:	78 94       	sei
	
	// Beep
	SetBeeperFreq(1000);
    13dc:	88 ee       	ldi	r24, 0xE8	; 232
    13de:	93 e0       	ldi	r25, 0x03	; 3
    13e0:	50 d2       	rcall	.+1184   	; 0x1882 <SetBeeperFreq>
	StartBeep(200);
    13e2:	88 ec       	ldi	r24, 0xC8	; 200
    13e4:	90 e0       	ldi	r25, 0x00	; 0
    13e6:	6e d2       	rcall	.+1244   	; 0x18c4 <StartBeep>
	
	InitMenu();
    13e8:	61 de       	rcall	.-830    	; 0x10ac <InitMenu>

	setMotorDirection(ROLL_FWD);
    13ea:	81 e0       	ldi	r24, 0x01	; 1
    13ec:	a7 d0       	rcall	.+334    	; 0x153c <setMotorDirection>
	
	//button_state = BD_UP;
	//processMenu();
	
	printLedBuffer(0,"      ");
    13ee:	60 ea       	ldi	r22, 0xA0	; 160
    13f0:	70 e0       	ldi	r23, 0x00	; 0
    13f2:	80 e0       	ldi	r24, 0x00	; 0
    13f4:	3c db       	rcall	.-2440   	; 0xa6e <printLedBuffer>
	//temp16u = conv_ADC_to_Celsius(464);
	
    while(1)
    {
		
		if (menuUpdateTimer.FOvfl)
    13f6:	0b e6       	ldi	r16, 0x6B	; 107
    13f8:	10 e0       	ldi	r17, 0x00	; 0
				
				u16toa_align_right(setAdcDbg,str,6,' ');				// Temp setting, as input to PID
				USART_sendstr(str);
				
				ACSR &= ~(1<<ACIE);	
				u16toa_align_right((uint16_t)ringBufADC.summ,str,8,' ');	// ADC ring buffer summ
    13fa:	0f 2e       	mov	r0, r31
    13fc:	f3 e6       	ldi	r31, 0x63	; 99
    13fe:	ef 2e       	mov	r14, r31
    1400:	f0 e0       	ldi	r31, 0x00	; 0
    1402:	ff 2e       	mov	r15, r31
    1404:	f0 2d       	mov	r31, r0
	//temp16u = conv_ADC_to_Celsius(464);
	
    while(1)
    {
		
		if (menuUpdateTimer.FOvfl)
    1406:	f8 01       	movw	r30, r16
    1408:	80 81       	ld	r24, Z
    140a:	86 ff       	sbrs	r24, 6
    140c:	fc cf       	rjmp	.-8      	; 0x1406 <main+0x48>
		{
			// Get new temperature measurement - new value is pushed into ring buffer
			// once every AC line period
			update_normalized_adc();			// TODO: slow down temperature change (say once per 200-400ms)
    140e:	41 d8       	rcall	.-3966   	; 0x492 <update_normalized_adc>
			
			// Get new button state
			process_buttons();
    1410:	4f d8       	rcall	.-3938   	; 0x4b0 <process_buttons>
			
			// Give audio feedback
			if (button_state & BL_MENU)
    1412:	80 91 b6 00 	lds	r24, 0x00B6
    1416:	90 91 b7 00 	lds	r25, 0x00B7
    141a:	91 ff       	sbrs	r25, 1
    141c:	07 c0       	rjmp	.+14     	; 0x142c <main+0x6e>
			{
				SetBeeperFreq(800);
    141e:	80 e2       	ldi	r24, 0x20	; 32
    1420:	93 e0       	ldi	r25, 0x03	; 3
    1422:	2f d2       	rcall	.+1118   	; 0x1882 <SetBeeperFreq>
				StartBeep(40);
    1424:	88 e2       	ldi	r24, 0x28	; 40
    1426:	90 e0       	ldi	r25, 0x00	; 0
    1428:	4d d2       	rcall	.+1178   	; 0x18c4 <StartBeep>
    142a:	0a c0       	rjmp	.+20     	; 0x1440 <main+0x82>
			}
			else if (button_action_down & (BD_MENU | BD_UP | BD_DOWN | BD_HEATCTRL))
    142c:	80 91 b5 00 	lds	r24, 0x00B5
    1430:	87 74       	andi	r24, 0x47	; 71
    1432:	31 f0       	breq	.+12     	; 0x1440 <main+0x82>
			{
				SetBeeperFreq(1000);
    1434:	88 ee       	ldi	r24, 0xE8	; 232
    1436:	93 e0       	ldi	r25, 0x03	; 3
    1438:	24 d2       	rcall	.+1096   	; 0x1882 <SetBeeperFreq>
				StartBeep(40);
    143a:	88 e2       	ldi	r24, 0x28	; 40
    143c:	90 e0       	ldi	r25, 0x00	; 0
    143e:	42 d2       	rcall	.+1156   	; 0x18c4 <StartBeep>
			}	
			

			// Process user menu states, settings and indication
			processMenu();
    1440:	92 de       	rcall	.-732    	; 0x1166 <processMenu>
			
			// Process cyclic rolling, direction control
			processRollControl();	
    1442:	a9 d8       	rcall	.-3758   	; 0x596 <processRollControl>
			
			// Process heater regulation
			processHeaterControl();
    1444:	57 d9       	rcall	.-3410   	; 0x6f4 <processHeaterControl>
		


			if (menuUpdateTimer.FA_TGL)
    1446:	f8 01       	movw	r30, r16
    1448:	80 81       	ld	r24, Z
    144a:	82 ff       	sbrs	r24, 2
    144c:	61 c0       	rjmp	.+194    	; 0x1510 <main+0x152>
				//---------------------------------//
				// Function is called every 50ms
				// UART message is sent every second call (once per 100ms)
				
				
				u16toa_align_right(setTempDbg,str,6,' ');				// Temp setting
    144e:	20 e2       	ldi	r18, 0x20	; 32
    1450:	46 e0       	ldi	r20, 0x06	; 6
    1452:	be 01       	movw	r22, r28
    1454:	6f 5f       	subi	r22, 0xFF	; 255
    1456:	7f 4f       	sbci	r23, 0xFF	; 255
    1458:	80 91 f1 00 	lds	r24, 0x00F1
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	42 df       	rcall	.-380    	; 0x12e4 <u16toa_align_right>
				USART_sendstr(str);
    1460:	ce 01       	movw	r24, r28
    1462:	01 96       	adiw	r24, 0x01	; 1
    1464:	75 d2       	rcall	.+1258   	; 0x1950 <USART_sendstr>
				
				u16toa_align_right(setAdcDbg,str,6,' ');				// Temp setting, as input to PID
    1466:	20 e2       	ldi	r18, 0x20	; 32
    1468:	46 e0       	ldi	r20, 0x06	; 6
    146a:	be 01       	movw	r22, r28
    146c:	6f 5f       	subi	r22, 0xFF	; 255
    146e:	7f 4f       	sbci	r23, 0xFF	; 255
    1470:	80 91 d7 00 	lds	r24, 0x00D7
    1474:	90 91 d8 00 	lds	r25, 0x00D8
    1478:	35 df       	rcall	.-406    	; 0x12e4 <u16toa_align_right>
				USART_sendstr(str);
    147a:	ce 01       	movw	r24, r28
    147c:	01 96       	adiw	r24, 0x01	; 1
    147e:	68 d2       	rcall	.+1232   	; 0x1950 <USART_sendstr>
				
				ACSR &= ~(1<<ACIE);	
    1480:	43 98       	cbi	0x08, 3	; 8
				u16toa_align_right((uint16_t)ringBufADC.summ,str,8,' ');	// ADC ring buffer summ
    1482:	20 e2       	ldi	r18, 0x20	; 32
    1484:	48 e0       	ldi	r20, 0x08	; 8
    1486:	be 01       	movw	r22, r28
    1488:	6f 5f       	subi	r22, 0xFF	; 255
    148a:	7f 4f       	sbci	r23, 0xFF	; 255
    148c:	f7 01       	movw	r30, r14
    148e:	80 81       	ld	r24, Z
    1490:	91 81       	ldd	r25, Z+1	; 0x01
    1492:	28 df       	rcall	.-432    	; 0x12e4 <u16toa_align_right>
				ACSR |= (1<<ACIE);
    1494:	43 9a       	sbi	0x08, 3	; 8
				USART_sendstr(str);
    1496:	ce 01       	movw	r24, r28
    1498:	01 96       	adiw	r24, 0x01	; 1
    149a:	5a d2       	rcall	.+1204   	; 0x1950 <USART_sendstr>
				
				u16toa_align_right(adc_normalized,str,8,' ');			// ADC filtered value
    149c:	20 e2       	ldi	r18, 0x20	; 32
    149e:	48 e0       	ldi	r20, 0x08	; 8
    14a0:	be 01       	movw	r22, r28
    14a2:	6f 5f       	subi	r22, 0xFF	; 255
    14a4:	7f 4f       	sbci	r23, 0xFF	; 255
    14a6:	80 91 ed 00 	lds	r24, 0x00ED
    14aa:	90 91 ee 00 	lds	r25, 0x00EE
    14ae:	1a df       	rcall	.-460    	; 0x12e4 <u16toa_align_right>
				USART_sendstr(str);
    14b0:	ce 01       	movw	r24, r28
    14b2:	01 96       	adiw	r24, 0x01	; 1
    14b4:	4d d2       	rcall	.+1178   	; 0x1950 <USART_sendstr>
				
				u16toa_align_right(adc_celsius,str,6,' ');				// Celsius degree
    14b6:	20 e2       	ldi	r18, 0x20	; 32
    14b8:	46 e0       	ldi	r20, 0x06	; 6
    14ba:	be 01       	movw	r22, r28
    14bc:	6f 5f       	subi	r22, 0xFF	; 255
    14be:	7f 4f       	sbci	r23, 0xFF	; 255
    14c0:	80 91 ef 00 	lds	r24, 0x00EF
    14c4:	90 91 f0 00 	lds	r25, 0x00F0
    14c8:	0d df       	rcall	.-486    	; 0x12e4 <u16toa_align_right>
				USART_sendstr(str);
    14ca:	ce 01       	movw	r24, r28
    14cc:	01 96       	adiw	r24, 0x01	; 1
    14ce:	40 d2       	rcall	.+1152   	; 0x1950 <USART_sendstr>
				
				u16toa_align_right(pidOutputUpdate,str,4,' ');			// PID update 
    14d0:	20 e2       	ldi	r18, 0x20	; 32
    14d2:	44 e0       	ldi	r20, 0x04	; 4
    14d4:	be 01       	movw	r22, r28
    14d6:	6f 5f       	subi	r22, 0xFF	; 255
    14d8:	7f 4f       	sbci	r23, 0xFF	; 255
    14da:	80 91 f7 00 	lds	r24, 0x00F7
    14de:	90 e0       	ldi	r25, 0x00	; 0
    14e0:	01 df       	rcall	.-510    	; 0x12e4 <u16toa_align_right>
				USART_sendstr(str);
    14e2:	ce 01       	movw	r24, r28
    14e4:	01 96       	adiw	r24, 0x01	; 1
    14e6:	34 d2       	rcall	.+1128   	; 0x1950 <USART_sendstr>
				if (pidOutputUpdate) pidOutputUpdate = 0;
    14e8:	80 91 f7 00 	lds	r24, 0x00F7
    14ec:	81 11       	cpse	r24, r1
    14ee:	10 92 f7 00 	sts	0x00F7, r1
				
				u16toa_align_right(ctrl_heater,str,6,' ');				// Heater control (0 to 10)
    14f2:	20 e2       	ldi	r18, 0x20	; 32
    14f4:	46 e0       	ldi	r20, 0x06	; 6
    14f6:	be 01       	movw	r22, r28
    14f8:	6f 5f       	subi	r22, 0xFF	; 255
    14fa:	7f 4f       	sbci	r23, 0xFF	; 255
    14fc:	80 91 cb 00 	lds	r24, 0x00CB
    1500:	90 e0       	ldi	r25, 0x00	; 0
    1502:	f0 de       	rcall	.-544    	; 0x12e4 <u16toa_align_right>
				USART_sendstr(str);
    1504:	ce 01       	movw	r24, r28
    1506:	01 96       	adiw	r24, 0x01	; 1
    1508:	23 d2       	rcall	.+1094   	; 0x1950 <USART_sendstr>
				
				
				USART_sendstr("\n\r");
    150a:	87 ea       	ldi	r24, 0xA7	; 167
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	20 d2       	rcall	.+1088   	; 0x1950 <USART_sendstr>
				//---------------------------------//
				
			}
			
			
			processAutoPowerOff();	// TODO
    1510:	95 d9       	rcall	.-3286   	; 0x83c <processAutoPowerOff>
			
			
			
			menuUpdateTimer.FOvfl = 0;	
    1512:	f8 01       	movw	r30, r16
    1514:	80 81       	ld	r24, Z
    1516:	8f 7b       	andi	r24, 0xBF	; 191
    1518:	80 83       	st	Z, r24
    151a:	75 cf       	rjmp	.-278    	; 0x1406 <main+0x48>

0000151c <setHeaterControl>:


// User function to control heater intensity
void setHeaterControl(uint8_t value)
{
	ctrl_heater = value;
    151c:	80 93 cb 00 	sts	0x00CB, r24
	heaterState &= ~READY_TO_UPDATE_HEATER;
    1520:	90 91 ca 00 	lds	r25, 0x00CA
    1524:	29 2f       	mov	r18, r25
    1526:	2f 77       	andi	r18, 0x7F	; 127
	
	if (ctrl_heater)
    1528:	88 23       	and	r24, r24
    152a:	21 f0       	breq	.+8      	; 0x1534 <setHeaterControl+0x18>
		heaterState |= HEATER_ENABLED;
    152c:	20 64       	ori	r18, 0x40	; 64
    152e:	20 93 ca 00 	sts	0x00CA, r18
    1532:	08 95       	ret
	else
		heaterState &= ~HEATER_ENABLED;	
    1534:	9f 73       	andi	r25, 0x3F	; 63
    1536:	90 93 ca 00 	sts	0x00CA, r25
    153a:	08 95       	ret

0000153c <setMotorDirection>:
	
// User function to control motor rotation
void setMotorDirection(uint8_t dir)
{
	// Disable interrupts from timer0 
	TIMSK &= ~(1<<TOIE0);
    153c:	99 b7       	in	r25, 0x39	; 57
    153e:	9e 7f       	andi	r25, 0xFE	; 254
    1540:	99 bf       	out	0x39, r25	; 57
		
	newDirReq = dir;	// save new direction request
    1542:	80 93 cc 00 	sts	0x00CC, r24
	
	if (dir & ROLL_FWD)
    1546:	80 ff       	sbrs	r24, 0
    1548:	09 c0       	rjmp	.+18     	; 0x155c <setMotorDirection+0x20>
		bottomPoint = rollPoint;
    154a:	80 91 cd 00 	lds	r24, 0x00CD
    154e:	90 91 ce 00 	lds	r25, 0x00CE
    1552:	90 93 d0 00 	sts	0x00D0, r25
    1556:	80 93 cf 00 	sts	0x00CF, r24
    155a:	0a c0       	rjmp	.+20     	; 0x1570 <setMotorDirection+0x34>
	else if (dir & ROLL_REV)
    155c:	81 ff       	sbrs	r24, 1
    155e:	08 c0       	rjmp	.+16     	; 0x1570 <setMotorDirection+0x34>
		topPoint = rollPoint;
    1560:	80 91 cd 00 	lds	r24, 0x00CD
    1564:	90 91 ce 00 	lds	r25, 0x00CE
    1568:	90 93 d2 00 	sts	0x00D2, r25
    156c:	80 93 d1 00 	sts	0x00D1, r24
		

	// Enable interrupts from timer 0
	TIMSK |= (1<<TOIE0);	
    1570:	89 b7       	in	r24, 0x39	; 57
    1572:	81 60       	ori	r24, 0x01	; 1
    1574:	89 bf       	out	0x39, r24	; 57
    1576:	08 95       	ret

00001578 <stopCycleRolling>:
}

void stopCycleRolling(uint8_t doResetPoints)
{
	// Disable interrupts from timer0 
	TIMSK &= ~(1<<TOIE0);
    1578:	99 b7       	in	r25, 0x39	; 57
    157a:	9e 7f       	andi	r25, 0xFE	; 254
    157c:	99 bf       	out	0x39, r25	; 57
	
	rollState &= ~ROLL_CYCLE;
    157e:	90 91 c9 00 	lds	r25, 0x00C9
    1582:	9b 7f       	andi	r25, 0xFB	; 251
    1584:	90 93 c9 00 	sts	0x00C9, r25
	if (doResetPoints)
    1588:	88 23       	and	r24, r24
    158a:	71 f0       	breq	.+28     	; 0x15a8 <stopCycleRolling+0x30>
	{
		topPoint = bottomPoint = rollPoint;
    158c:	80 91 cd 00 	lds	r24, 0x00CD
    1590:	90 91 ce 00 	lds	r25, 0x00CE
    1594:	90 93 d0 00 	sts	0x00D0, r25
    1598:	80 93 cf 00 	sts	0x00CF, r24
    159c:	90 93 d2 00 	sts	0x00D2, r25
    15a0:	80 93 d1 00 	sts	0x00D1, r24
		activeRollCycle = 0;	
    15a4:	10 92 23 01 	sts	0x0123, r1
	}		
	
	// Enable interrupts from timer 0
	TIMSK |= (1<<TOIE0);
    15a8:	89 b7       	in	r24, 0x39	; 57
    15aa:	81 60       	ori	r24, 0x01	; 1
    15ac:	89 bf       	out	0x39, r24	; 57
    15ae:	08 95       	ret

000015b0 <isTopPointValid>:
}
*/

uint8_t isTopPointValid(void)
{
	return (	(int16_t)(topPoint - rollPoint) >= 0 );
    15b0:	80 91 d1 00 	lds	r24, 0x00D1
    15b4:	90 91 d2 00 	lds	r25, 0x00D2
    15b8:	20 91 cd 00 	lds	r18, 0x00CD
    15bc:	30 91 ce 00 	lds	r19, 0x00CE
    15c0:	82 1b       	sub	r24, r18
    15c2:	93 0b       	sbc	r25, r19
    15c4:	89 2f       	mov	r24, r25
    15c6:	80 95       	com	r24
}
    15c8:	88 1f       	adc	r24, r24
    15ca:	88 27       	eor	r24, r24
    15cc:	88 1f       	adc	r24, r24
    15ce:	08 95       	ret

000015d0 <isBottomPointValid>:

uint8_t isBottomPointValid(void)
{
	return (	(int16_t)(rollPoint - bottomPoint) >= 0	);
    15d0:	80 91 cd 00 	lds	r24, 0x00CD
    15d4:	90 91 ce 00 	lds	r25, 0x00CE
    15d8:	20 91 cf 00 	lds	r18, 0x00CF
    15dc:	30 91 d0 00 	lds	r19, 0x00D0
    15e0:	82 1b       	sub	r24, r18
    15e2:	93 0b       	sbc	r25, r19
    15e4:	89 2f       	mov	r24, r25
    15e6:	80 95       	com	r24
}
    15e8:	88 1f       	adc	r24, r24
    15ea:	88 27       	eor	r24, r24
    15ec:	88 1f       	adc	r24, r24
    15ee:	08 95       	ret

000015f0 <startCycleRolling>:


uint8_t startCycleRolling(void)
{
	// Disable interrupts from timer0 
	TIMSK &= ~(1<<TOIE0);
    15f0:	89 b7       	in	r24, 0x39	; 57
    15f2:	8e 7f       	andi	r24, 0xFE	; 254
    15f4:	89 bf       	out	0x39, r24	; 57
	
	if ( isTopPointValid() && isBottomPointValid() )
    15f6:	dc df       	rcall	.-72     	; 0x15b0 <isTopPointValid>
    15f8:	88 23       	and	r24, r24
    15fa:	59 f0       	breq	.+22     	; 0x1612 <startCycleRolling+0x22>
    15fc:	e9 df       	rcall	.-46     	; 0x15d0 <isBottomPointValid>
    15fe:	88 23       	and	r24, r24
    1600:	41 f0       	breq	.+16     	; 0x1612 <startCycleRolling+0x22>
	{
		rollState |= ROLL_CYCLE;
    1602:	80 91 c9 00 	lds	r24, 0x00C9
    1606:	84 60       	ori	r24, 0x04	; 4
    1608:	80 93 c9 00 	sts	0x00C9, r24
		activeRollCycle = 1;
    160c:	81 e0       	ldi	r24, 0x01	; 1
    160e:	80 93 23 01 	sts	0x0123, r24
	}
	
	// Enable interrupts from timer 0
	TIMSK |= (1<<TOIE0);
    1612:	89 b7       	in	r24, 0x39	; 57
    1614:	81 60       	ori	r24, 0x01	; 1
    1616:	89 bf       	out	0x39, r24	; 57
	
	return (rollState & ROLL_CYCLE);
    1618:	80 91 c9 00 	lds	r24, 0x00C9
}
    161c:	84 70       	andi	r24, 0x04	; 4
    161e:	08 95       	ret

00001620 <__vector_16>:




ISR(ANA_COMP_vect)
{
    1620:	1f 92       	push	r1
    1622:	0f 92       	push	r0
    1624:	0f b6       	in	r0, 0x3f	; 63
    1626:	0f 92       	push	r0
    1628:	11 24       	eor	r1, r1
    162a:	8f 93       	push	r24
    162c:	9f 93       	push	r25
	// Once triggered, disable further comparator interrupt
	ACSR &= ~(1<<ACIE);
    162e:	43 98       	cbi	0x08, 3	; 8
	// Turn on heater TRIAC
	if (heater_cnt < ctrl_heater_sync)
    1630:	90 91 d3 00 	lds	r25, 0x00D3
    1634:	80 91 d4 00 	lds	r24, 0x00D4
    1638:	98 17       	cp	r25, r24
    163a:	20 f4       	brcc	.+8      	; 0x1644 <__vector_16+0x24>
		PORTD |= (1<<PD_HEATER | 1<<PD_HEAT_INDIC);	// Direct heater indication
    163c:	82 b3       	in	r24, 0x12	; 18
    163e:	80 63       	ori	r24, 0x30	; 48
    1640:	82 bb       	out	0x12, r24	; 18
    1642:	01 c0       	rjmp	.+2      	; 0x1646 <__vector_16+0x26>
	else
		PORTD &= ~(1<<PD_HEAT_INDIC);
    1644:	95 98       	cbi	0x12, 5	; 18
	// Reprogram timer0
	TCNT0 = 256 - TRIAC_IMPULSE_TIME;		// Triac gate impulse time
    1646:	86 ef       	ldi	r24, 0xF6	; 246
    1648:	82 bf       	out	0x32, r24	; 50
	// Modify state	
	p_state &= ~STATE_MASK;					// Start new state machine cycle
    164a:	80 91 6a 00 	lds	r24, 0x006A
    164e:	80 7f       	andi	r24, 0xF0	; 240
	p_state ^= HALF_PERIOD_FLAG;			// Toggle flag
    1650:	80 58       	subi	r24, 0x80	; 128
    1652:	80 93 6a 00 	sts	0x006A, r24
	
}
    1656:	9f 91       	pop	r25
    1658:	8f 91       	pop	r24
    165a:	0f 90       	pop	r0
    165c:	0f be       	out	0x3f, r0	; 63
    165e:	0f 90       	pop	r0
    1660:	1f 90       	pop	r1
    1662:	18 95       	reti

00001664 <__vector_9>:



ISR(TIMER0_OVF_vect)
{
    1664:	1f 92       	push	r1
    1666:	0f 92       	push	r0
    1668:	0f b6       	in	r0, 0x3f	; 63
    166a:	0f 92       	push	r0
    166c:	11 24       	eor	r1, r1
    166e:	2f 93       	push	r18
    1670:	3f 93       	push	r19
    1672:	4f 93       	push	r20
    1674:	5f 93       	push	r21
    1676:	6f 93       	push	r22
    1678:	7f 93       	push	r23
    167a:	8f 93       	push	r24
    167c:	9f 93       	push	r25
    167e:	af 93       	push	r26
    1680:	bf 93       	push	r27
    1682:	ef 93       	push	r30
    1684:	ff 93       	push	r31
	uint8_t temp;
	
	switch(p_state & STATE_MASK)
    1686:	80 91 6a 00 	lds	r24, 0x006A
    168a:	8f 70       	andi	r24, 0x0F	; 15
    168c:	81 30       	cpi	r24, 0x01	; 1
    168e:	51 f0       	breq	.+20     	; 0x16a4 <__vector_9+0x40>
    1690:	28 f0       	brcs	.+10     	; 0x169c <__vector_9+0x38>
    1692:	82 30       	cpi	r24, 0x02	; 2
    1694:	79 f0       	breq	.+30     	; 0x16b4 <__vector_9+0x50>
    1696:	83 30       	cpi	r24, 0x03	; 3
    1698:	99 f4       	brne	.+38     	; 0x16c0 <__vector_9+0x5c>
    169a:	11 c0       	rjmp	.+34     	; 0x16be <__vector_9+0x5a>
	{
		// TRIAC_IMPULSE_TIME finished
		case 0x00:
			// Turn off heater TRIAC
			PORTD &= ~(1<<PD_HEATER);
    169c:	94 98       	cbi	0x12, 4	; 18
			TCNT0 = 256 - (QUATER_PERIOD_TIME - TRIAC_IMPULSE_TIME);
    169e:	8c eb       	ldi	r24, 0xBC	; 188
    16a0:	82 bf       	out	0x32, r24	; 50
			break;
    16a2:	0e c0       	rjmp	.+28     	; 0x16c0 <__vector_9+0x5c>
		// QUATER_PERIOD_TIME finished	
		case 0x01:	
			TCNT0 = 256 - (SYNC_IGNORE_TIME - QUATER_PERIOD_TIME);
    16a4:	82 ec       	ldi	r24, 0xC2	; 194
    16a6:	82 bf       	out	0x32, r24	; 50
			// Start ADC conversion once every AC line period
			if (!(p_state & HALF_PERIOD_FLAG))
    16a8:	80 91 6a 00 	lds	r24, 0x006A
    16ac:	88 23       	and	r24, r24
    16ae:	44 f0       	brlt	.+16     	; 0x16c0 <__vector_9+0x5c>
				ADCSRA |= (1<<ADSC);
    16b0:	36 9a       	sbi	0x06, 6	; 6
    16b2:	06 c0       	rjmp	.+12     	; 0x16c0 <__vector_9+0x5c>
			break;	
		// SYNC_IGNORE_TIME finished	
		case 0x02:
			TCNT0 = 256 - SYNC_LOST_TIMEOUT;
    16b4:	80 ee       	ldi	r24, 0xE0	; 224
    16b6:	82 bf       	out	0x32, r24	; 50
			// Clear flag and enable interrupt from analog comparator
			ACSR |= (1<<ACI);
    16b8:	44 9a       	sbi	0x08, 4	; 8
			ACSR |= (1<<ACIE);
    16ba:	43 9a       	sbi	0x08, 3	; 8
			break;
    16bc:	01 c0       	rjmp	.+2      	; 0x16c0 <__vector_9+0x5c>
		// SYNC_LOST_TIMEOUT finished
		case 0x03:
			// Error - sync is lost. It means that device has been disconnected from AC line.
			// Disable all power-consuming devices like LEDs and save user settings to EEPROM.
			exitPowerOff();
    16be:	bd d8       	rcall	.-3718   	; 0x83a <exitPowerOff>
			// Sync is not present - TODO
			break;
	}	

	// Full period check
	if ((p_state & (HALF_PERIOD_FLAG | STATE_MASK)) == (HALF_PERIOD_FLAG | 0x01))
    16c0:	80 91 6a 00 	lds	r24, 0x006A
    16c4:	8f 78       	andi	r24, 0x8F	; 143
    16c6:	81 38       	cpi	r24, 0x81	; 129
    16c8:	09 f0       	breq	.+2      	; 0x16cc <__vector_9+0x68>
    16ca:	93 c0       	rjmp	.+294    	; 0x17f2 <__vector_9+0x18e>
	{
		// Full AC line period is done. Update controls.
		
		temp = PORTD;
    16cc:	92 b3       	in	r25, 0x12	; 18
		temp &= ~(1<<PD_M1 | 1<<PD_M2);
    16ce:	93 7f       	andi	r25, 0xF3	; 243
		if ( rollState & SKIP_CURRENT_MOTOR_CTRL )
    16d0:	80 91 c9 00 	lds	r24, 0x00C9
    16d4:	83 ff       	sbrs	r24, 3
    16d6:	05 c0       	rjmp	.+10     	; 0x16e2 <__vector_9+0x7e>
		{
			// Direction control changed. Skip current period to allow TRIACs fully close
			rollState &= ~SKIP_CURRENT_MOTOR_CTRL;
    16d8:	87 7f       	andi	r24, 0xF7	; 247
    16da:	80 93 c9 00 	sts	0x00C9, r24
			PORTD = temp; 	
    16de:	92 bb       	out	0x12, r25	; 18
    16e0:	75 c0       	rjmp	.+234    	; 0x17cc <__vector_9+0x168>
		}
		else
		{
			// Apply direction control 
			if (rollState & ROLL_FWD)
    16e2:	80 ff       	sbrs	r24, 0
    16e4:	02 c0       	rjmp	.+4      	; 0x16ea <__vector_9+0x86>
				temp |= (1<<PD_M1);
    16e6:	94 60       	ori	r25, 0x04	; 4
    16e8:	02 c0       	rjmp	.+4      	; 0x16ee <__vector_9+0x8a>
			else if (rollState & ROLL_REV)
    16ea:	81 fd       	sbrc	r24, 1
				temp |= (1<<PD_M2);
    16ec:	98 60       	ori	r25, 0x08	; 8
			PORTD = temp; 
    16ee:	92 bb       	out	0x12, r25	; 18
// Function to process rolling - sets rotation direction for next period
// Call once per each AC line period
static inline void controlRolling()
{
	// Process cycle rolling
	switch(rollState & (ROLL_FWD | ROLL_REV | ROLL_CYCLE))
    16f0:	40 91 c9 00 	lds	r20, 0x00C9
    16f4:	84 2f       	mov	r24, r20
    16f6:	87 70       	andi	r24, 0x07	; 7
    16f8:	85 30       	cpi	r24, 0x05	; 5
    16fa:	19 f0       	breq	.+6      	; 0x1702 <__vector_9+0x9e>
    16fc:	86 30       	cpi	r24, 0x06	; 6
    16fe:	f1 f5       	brne	.+124    	; 0x177c <__vector_9+0x118>
    1700:	1f c0       	rjmp	.+62     	; 0x1740 <__vector_9+0xdc>
//---------------------------------------------//
//---------------------------------------------//

static inline uint8_t reachedTopPoint(void)
{
	return (	(int16_t)(topPoint - rollPoint) <= 0 );
    1702:	80 91 d1 00 	lds	r24, 0x00D1
    1706:	90 91 d2 00 	lds	r25, 0x00D2
    170a:	20 91 cd 00 	lds	r18, 0x00CD
    170e:	30 91 ce 00 	lds	r19, 0x00CE
    1712:	82 1b       	sub	r24, r18
    1714:	93 0b       	sbc	r25, r19
{
	// Process cycle rolling
	switch(rollState & (ROLL_FWD | ROLL_REV | ROLL_CYCLE))
	{
		case (ROLL_FWD | ROLL_CYCLE):
			if (reachedTopPoint())
    1716:	18 16       	cp	r1, r24
    1718:	19 06       	cpc	r1, r25
    171a:	84 f1       	brlt	.+96     	; 0x177c <__vector_9+0x118>
			{
				if (activeRollCycle >= rollCycleSet)	
    171c:	80 91 23 01 	lds	r24, 0x0123
    1720:	90 91 f6 00 	lds	r25, 0x00F6
    1724:	89 17       	cp	r24, r25
    1726:	28 f0       	brcs	.+10     	; 0x1732 <__vector_9+0xce>
				{
					// DONE!
					rollState &= ~ROLL_CYCLE;
    1728:	4b 7f       	andi	r20, 0xFB	; 251
					rollState |= CYCLE_ROLL_DONE;
    172a:	40 61       	ori	r20, 0x10	; 16
    172c:	40 93 c9 00 	sts	0x00C9, r20
    1730:	25 c0       	rjmp	.+74     	; 0x177c <__vector_9+0x118>
				}
				else
				{
					activeRollCycle++;
    1732:	8f 5f       	subi	r24, 0xFF	; 255
    1734:	80 93 23 01 	sts	0x0123, r24
					// Change dir	
					newDirReq = ROLL_REV;				
    1738:	82 e0       	ldi	r24, 0x02	; 2
    173a:	80 93 cc 00 	sts	0x00CC, r24
    173e:	1e c0       	rjmp	.+60     	; 0x177c <__vector_9+0x118>
	return (	(int16_t)(topPoint - rollPoint) <= 0 );
}

static inline uint8_t reachedBottomPoint(void)
{
	return (	(int16_t)(rollPoint - bottomPoint) <= 0 );
    1740:	80 91 cd 00 	lds	r24, 0x00CD
    1744:	90 91 ce 00 	lds	r25, 0x00CE
    1748:	20 91 cf 00 	lds	r18, 0x00CF
    174c:	30 91 d0 00 	lds	r19, 0x00D0
    1750:	82 1b       	sub	r24, r18
    1752:	93 0b       	sbc	r25, r19
				}
			}
			break;
		
		case (ROLL_REV | ROLL_CYCLE):	
			if (reachedBottomPoint())
    1754:	18 16       	cp	r1, r24
    1756:	19 06       	cpc	r1, r25
    1758:	8c f0       	brlt	.+34     	; 0x177c <__vector_9+0x118>
			{
				if (activeRollCycle >= rollCycleSet)	
    175a:	80 91 23 01 	lds	r24, 0x0123
    175e:	90 91 f6 00 	lds	r25, 0x00F6
    1762:	89 17       	cp	r24, r25
    1764:	28 f0       	brcs	.+10     	; 0x1770 <__vector_9+0x10c>
				{
					// DONE!
					rollState &= ~ROLL_CYCLE;
    1766:	4b 7f       	andi	r20, 0xFB	; 251
					rollState |= CYCLE_ROLL_DONE;
    1768:	40 61       	ori	r20, 0x10	; 16
    176a:	40 93 c9 00 	sts	0x00C9, r20
    176e:	06 c0       	rjmp	.+12     	; 0x177c <__vector_9+0x118>
				}
				else
				{
					activeRollCycle++;
    1770:	8f 5f       	subi	r24, 0xFF	; 255
    1772:	80 93 23 01 	sts	0x0123, r24
					// Change dir	
					newDirReq = ROLL_FWD;
    1776:	81 e0       	ldi	r24, 0x01	; 1
    1778:	80 93 cc 00 	sts	0x00CC, r24
		default:
			break;
	}
	
	// Process direction change
	if ((rollState ^ newDirReq) & (ROLL_FWD | ROLL_REV))
    177c:	80 91 c9 00 	lds	r24, 0x00C9
    1780:	90 91 cc 00 	lds	r25, 0x00CC
    1784:	29 2f       	mov	r18, r25
    1786:	28 27       	eor	r18, r24
    1788:	23 70       	andi	r18, 0x03	; 3
    178a:	19 f0       	breq	.+6      	; 0x1792 <__vector_9+0x12e>
	{
		rollState |= (SKIP_CURRENT_MOTOR_CTRL | ROLL_DIR_CHANGED);
    178c:	88 62       	ori	r24, 0x28	; 40
    178e:	80 93 c9 00 	sts	0x00C9, r24
	}
	rollState &= ~(ROLL_FWD | ROLL_REV);
    1792:	80 91 c9 00 	lds	r24, 0x00C9
    1796:	8c 7f       	andi	r24, 0xFC	; 252
	rollState |= newDirReq;
    1798:	89 2b       	or	r24, r25
    179a:	80 93 c9 00 	sts	0x00C9, r24
	return (	(int16_t)(rollPoint - bottomPoint) <= 0 );
}

static inline void updateRollPoint(void)
{	
	if (rollState & ROLL_FWD)
    179e:	80 ff       	sbrs	r24, 0
    17a0:	0a c0       	rjmp	.+20     	; 0x17b6 <__vector_9+0x152>
		rollPoint++;
    17a2:	80 91 cd 00 	lds	r24, 0x00CD
    17a6:	90 91 ce 00 	lds	r25, 0x00CE
    17aa:	01 96       	adiw	r24, 0x01	; 1
    17ac:	90 93 ce 00 	sts	0x00CE, r25
    17b0:	80 93 cd 00 	sts	0x00CD, r24
    17b4:	0b c0       	rjmp	.+22     	; 0x17cc <__vector_9+0x168>
	else if (rollState & ROLL_REV)
    17b6:	81 ff       	sbrs	r24, 1
    17b8:	09 c0       	rjmp	.+18     	; 0x17cc <__vector_9+0x168>
		rollPoint--;	
    17ba:	80 91 cd 00 	lds	r24, 0x00CD
    17be:	90 91 ce 00 	lds	r25, 0x00CE
    17c2:	01 97       	sbiw	r24, 0x01	; 1
    17c4:	90 93 ce 00 	sts	0x00CE, r25
    17c8:	80 93 cd 00 	sts	0x00CD, r24
			controlRolling();
		}
			

		// Process heater control counter
		if (heater_cnt == HEATER_REGULATION_PERIODS - 1)
    17cc:	80 91 d3 00 	lds	r24, 0x00D3
    17d0:	81 33       	cpi	r24, 0x31	; 49
    17d2:	61 f4       	brne	.+24     	; 0x17ec <__vector_9+0x188>
		{
			heater_cnt = 0;
    17d4:	10 92 d3 00 	sts	0x00D3, r1
			ctrl_heater_sync = ctrl_heater;
    17d8:	80 91 cb 00 	lds	r24, 0x00CB
    17dc:	80 93 d4 00 	sts	0x00D4, r24
			heaterState |= READY_TO_UPDATE_HEATER;
    17e0:	80 91 ca 00 	lds	r24, 0x00CA
    17e4:	80 68       	ori	r24, 0x80	; 128
    17e6:	80 93 ca 00 	sts	0x00CA, r24
    17ea:	03 c0       	rjmp	.+6      	; 0x17f2 <__vector_9+0x18e>
		}
		else
		{
			heater_cnt++;
    17ec:	8f 5f       	subi	r24, 0xFF	; 255
    17ee:	80 93 d3 00 	sts	0x00D3, r24
			
			
	}
	

	if ((p_state & STATE_MASK)  != 0x0F)
    17f2:	80 91 6a 00 	lds	r24, 0x006A
    17f6:	98 2f       	mov	r25, r24
    17f8:	9f 70       	andi	r25, 0x0F	; 15
    17fa:	9f 30       	cpi	r25, 0x0F	; 15
    17fc:	19 f0       	breq	.+6      	; 0x1804 <__vector_9+0x1a0>
		p_state++;
    17fe:	8f 5f       	subi	r24, 0xFF	; 255
    1800:	80 93 6a 00 	sts	0x006A, r24

}	
    1804:	ff 91       	pop	r31
    1806:	ef 91       	pop	r30
    1808:	bf 91       	pop	r27
    180a:	af 91       	pop	r26
    180c:	9f 91       	pop	r25
    180e:	8f 91       	pop	r24
    1810:	7f 91       	pop	r23
    1812:	6f 91       	pop	r22
    1814:	5f 91       	pop	r21
    1816:	4f 91       	pop	r20
    1818:	3f 91       	pop	r19
    181a:	2f 91       	pop	r18
    181c:	0f 90       	pop	r0
    181e:	0f be       	out	0x3f, r0	; 63
    1820:	0f 90       	pop	r0
    1822:	1f 90       	pop	r1
    1824:	18 95       	reti

00001826 <processSoftTimer8b>:
 
 
 
 
 void processSoftTimer8b(SoftTimer8b_t *tmr)
 {
    1826:	fc 01       	movw	r30, r24
	 uint8_t newTimerVal;

	 if (!tmr->Enabled)
    1828:	80 81       	ld	r24, Z
    182a:	80 ff       	sbrs	r24, 0
    182c:	29 c0       	rjmp	.+82     	; 0x1880 <processSoftTimer8b+0x5a>
		return;
	 
	 tmr->FA_EQ = 0;
	 tmr->FA_GE = 0;
	 tmr->FTop = 0;
    182e:	87 7e       	andi	r24, 0xE7	; 231
    1830:	8f 7d       	andi	r24, 0xDF	; 223
    1832:	80 83       	st	Z, r24
	 
	 if (tmr->Timer >= tmr->Top)
    1834:	81 81       	ldd	r24, Z+1	; 0x01
    1836:	92 81       	ldd	r25, Z+2	; 0x02
    1838:	89 17       	cp	r24, r25
    183a:	58 f0       	brcs	.+22     	; 0x1852 <processSoftTimer8b+0x2c>
	 {
		 if (tmr->RunOnce)
    183c:	90 81       	ld	r25, Z
    183e:	91 ff       	sbrs	r25, 1
    1840:	02 c0       	rjmp	.+4      	; 0x1846 <processSoftTimer8b+0x20>
		 {
			 tmr->Enabled = 0;
    1842:	9e 7f       	andi	r25, 0xFE	; 254
    1844:	90 83       	st	Z, r25
		 }
		 tmr->FTop = 1;
    1846:	90 81       	ld	r25, Z
		 tmr->FOvfl = 1;
    1848:	90 62       	ori	r25, 0x20	; 32
    184a:	90 64       	ori	r25, 0x40	; 64
    184c:	90 83       	st	Z, r25
		 newTimerVal = 0;
    184e:	20 e0       	ldi	r18, 0x00	; 0
    1850:	02 c0       	rjmp	.+4      	; 0x1856 <processSoftTimer8b+0x30>
	 }
	 else
	 {
		 newTimerVal = tmr->Timer + 1;
    1852:	28 2f       	mov	r18, r24
    1854:	2f 5f       	subi	r18, 0xFF	; 255
	 }
	 
	 if (tmr->Timer == tmr->CompA)
    1856:	93 81       	ldd	r25, Z+3	; 0x03
    1858:	89 13       	cpse	r24, r25
    185a:	0c c0       	rjmp	.+24     	; 0x1874 <processSoftTimer8b+0x4e>
	 {
		 tmr->FA_EQ = 1;
    185c:	80 81       	ld	r24, Z
		 tmr->FA_GE = 1;
    185e:	88 60       	ori	r24, 0x08	; 8
    1860:	80 61       	ori	r24, 0x10	; 16
		 tmr->FA_TGL = !tmr->FA_TGL;
    1862:	82 fb       	bst	r24, 2
    1864:	33 27       	eor	r19, r19
    1866:	30 f9       	bld	r19, 0
    1868:	91 e0       	ldi	r25, 0x01	; 1
    186a:	93 27       	eor	r25, r19
    186c:	90 fb       	bst	r25, 0
    186e:	82 f9       	bld	r24, 2
    1870:	80 83       	st	Z, r24
    1872:	05 c0       	rjmp	.+10     	; 0x187e <processSoftTimer8b+0x58>
	 }
	 else if (tmr->Timer >= tmr->CompA)
    1874:	89 17       	cp	r24, r25
    1876:	18 f0       	brcs	.+6      	; 0x187e <processSoftTimer8b+0x58>
	 {
		 tmr->FA_GE = 1;
    1878:	80 81       	ld	r24, Z
    187a:	80 61       	ori	r24, 0x10	; 16
    187c:	80 83       	st	Z, r24
	 }
	 
	 tmr->Timer = newTimerVal; 
    187e:	21 83       	std	Z+1, r18	; 0x01
    1880:	08 95       	ret

00001882 <SetBeeperFreq>:
}

// Setup beeper frequency (Hz)
void SetBeeperFreq(uint16_t freq_hz)
{
	uint16_t period_us = 1000000 / freq_hz;
    1882:	9c 01       	movw	r18, r24
    1884:	40 e0       	ldi	r20, 0x00	; 0
    1886:	50 e0       	ldi	r21, 0x00	; 0
    1888:	60 e4       	ldi	r22, 0x40	; 64
    188a:	72 e4       	ldi	r23, 0x42	; 66
    188c:	8f e0       	ldi	r24, 0x0F	; 15
    188e:	90 e0       	ldi	r25, 0x00	; 0
    1890:	a8 d0       	rcall	.+336    	; 0x19e2 <__divmodsi4>
	if (period_us & 0xFFF8)
    1892:	da 01       	movw	r26, r20
    1894:	c9 01       	movw	r24, r18
    1896:	88 7f       	andi	r24, 0xF8	; 248
    1898:	aa 27       	eor	r26, r26
    189a:	bb 27       	eor	r27, r27
    189c:	89 2b       	or	r24, r25
    189e:	59 f0       	breq	.+22     	; 0x18b6 <SetBeeperFreq+0x34>
		OCR1A = (period_us>>3) - 1;
    18a0:	36 95       	lsr	r19
    18a2:	27 95       	ror	r18
    18a4:	36 95       	lsr	r19
    18a6:	27 95       	ror	r18
    18a8:	36 95       	lsr	r19
    18aa:	27 95       	ror	r18
    18ac:	21 50       	subi	r18, 0x01	; 1
    18ae:	31 09       	sbc	r19, r1
    18b0:	3b bd       	out	0x2b, r19	; 43
    18b2:	2a bd       	out	0x2a, r18	; 42
    18b4:	04 c0       	rjmp	.+8      	; 0x18be <SetBeeperFreq+0x3c>
	else
		OCR1A = 0x1;
    18b6:	81 e0       	ldi	r24, 0x01	; 1
    18b8:	90 e0       	ldi	r25, 0x00	; 0
    18ba:	9b bd       	out	0x2b, r25	; 43
    18bc:	8a bd       	out	0x2a, r24	; 42
	TCNT1 = 0;
    18be:	1d bc       	out	0x2d, r1	; 45
    18c0:	1c bc       	out	0x2c, r1	; 44
    18c2:	08 95       	ret

000018c4 <StartBeep>:
}

// Beep for some time in ms
void StartBeep(uint16_t time_ms)
{
	if (sound_enable)
    18c4:	20 91 f5 00 	lds	r18, 0x00F5
    18c8:	22 23       	and	r18, r18
    18ca:	39 f0       	breq	.+14     	; 0x18da <StartBeep+0x16>
	{
		beep_cnt = time_ms;
    18cc:	90 93 d6 00 	sts	0x00D6, r25
    18d0:	80 93 d5 00 	sts	0x00D5, r24
// Enable / disable beeper output
inline void SetBeepOutput(uint8_t val)
{
	if (val)
		// Toggle OCR1A on compare match
		TCCR1A |= (1<<COM1A0);
    18d4:	8f b5       	in	r24, 0x2f	; 47
    18d6:	80 64       	ori	r24, 0x40	; 64
    18d8:	8f bd       	out	0x2f, r24	; 47
    18da:	08 95       	ret

000018dc <__vector_3>:
}



ISR(TIMER2_COMP_vect)
{	
    18dc:	1f 92       	push	r1
    18de:	0f 92       	push	r0
    18e0:	0f b6       	in	r0, 0x3f	; 63
    18e2:	0f 92       	push	r0
    18e4:	11 24       	eor	r1, r1
    18e6:	2f 93       	push	r18
    18e8:	3f 93       	push	r19
    18ea:	4f 93       	push	r20
    18ec:	5f 93       	push	r21
    18ee:	6f 93       	push	r22
    18f0:	7f 93       	push	r23
    18f2:	8f 93       	push	r24
    18f4:	9f 93       	push	r25
    18f6:	af 93       	push	r26
    18f8:	bf 93       	push	r27
    18fa:	ef 93       	push	r30
    18fc:	ff 93       	push	r31
	// Manage beeper
	if (beep_cnt)
    18fe:	80 91 d5 00 	lds	r24, 0x00D5
    1902:	90 91 d6 00 	lds	r25, 0x00D6
    1906:	00 97       	sbiw	r24, 0x00	; 0
    1908:	31 f0       	breq	.+12     	; 0x1916 <__vector_3+0x3a>
		beep_cnt--;
    190a:	01 97       	sbiw	r24, 0x01	; 1
    190c:	90 93 d6 00 	sts	0x00D6, r25
    1910:	80 93 d5 00 	sts	0x00D5, r24
    1914:	03 c0       	rjmp	.+6      	; 0x191c <__vector_3+0x40>
	if (val)
		// Toggle OCR1A on compare match
		TCCR1A |= (1<<COM1A0);
	else
		// Disable OCR1A output
		TCCR1A &= ~(1<<COM1A0 | 1<<COM1A1);
    1916:	8f b5       	in	r24, 0x2f	; 47
    1918:	8f 73       	andi	r24, 0x3F	; 63
    191a:	8f bd       	out	0x2f, r24	; 47
		beep_cnt--;
	else
		SetBeepOutput(0);	// done
	
	// Manage LED indicator
	processLedIndicator();
    191c:	e2 d7       	rcall	.+4036   	; 0x28e2 <__data_load_end+0xdfc>
	
	// Process menu update timer
	processSoftTimer8b(&menuUpdateTimer);	
    191e:	8b e6       	ldi	r24, 0x6B	; 107
    1920:	90 e0       	ldi	r25, 0x00	; 0
    1922:	81 df       	rcall	.-254    	; 0x1826 <processSoftTimer8b>
	
}
    1924:	ff 91       	pop	r31
    1926:	ef 91       	pop	r30
    1928:	bf 91       	pop	r27
    192a:	af 91       	pop	r26
    192c:	9f 91       	pop	r25
    192e:	8f 91       	pop	r24
    1930:	7f 91       	pop	r23
    1932:	6f 91       	pop	r22
    1934:	5f 91       	pop	r21
    1936:	4f 91       	pop	r20
    1938:	3f 91       	pop	r19
    193a:	2f 91       	pop	r18
    193c:	0f 90       	pop	r0
    193e:	0f be       	out	0x3f, r0	; 63
    1940:	0f 90       	pop	r0
    1942:	1f 90       	pop	r1
    1944:	18 95       	reti

00001946 <USART_send>:



void USART_send( uint8_t data )
{
	UCSRA |= (1<<TXC);                 // Clear flag
    1946:	5e 9a       	sbi	0x0b, 6	; 11
	UDR = data;
    1948:	8c b9       	out	0x0c, r24	; 12
	while ( !(UCSRA & (1<<TXC)) );  // Wait
    194a:	5e 9b       	sbis	0x0b, 6	; 11
    194c:	fe cf       	rjmp	.-4      	; 0x194a <USART_send+0x4>
}
    194e:	08 95       	ret

00001950 <USART_sendstr>:


void USART_sendstr(char* str)
{
    1950:	1f 93       	push	r17
    1952:	cf 93       	push	r28
    1954:	df 93       	push	r29
    1956:	ec 01       	movw	r28, r24
	uint8_t i = 0;
	while (str[i])
    1958:	88 81       	ld	r24, Y
    195a:	88 23       	and	r24, r24
    195c:	49 f0       	breq	.+18     	; 0x1970 <USART_sendstr+0x20>
}


void USART_sendstr(char* str)
{
	uint8_t i = 0;
    195e:	10 e0       	ldi	r17, 0x00	; 0
	while (str[i])
	{
		USART_send(str[i++]);
    1960:	1f 5f       	subi	r17, 0xFF	; 255
    1962:	f1 df       	rcall	.-30     	; 0x1946 <USART_send>


void USART_sendstr(char* str)
{
	uint8_t i = 0;
	while (str[i])
    1964:	fe 01       	movw	r30, r28
    1966:	e1 0f       	add	r30, r17
    1968:	f1 1d       	adc	r31, r1
    196a:	80 81       	ld	r24, Z
    196c:	81 11       	cpse	r24, r1
    196e:	f8 cf       	rjmp	.-16     	; 0x1960 <USART_sendstr+0x10>
	{
		USART_send(str[i++]);
	}
}
    1970:	df 91       	pop	r29
    1972:	cf 91       	pop	r28
    1974:	1f 91       	pop	r17
    1976:	08 95       	ret

00001978 <__divmodhi4>:
    1978:	97 fb       	bst	r25, 7
    197a:	07 2e       	mov	r0, r23
    197c:	16 f4       	brtc	.+4      	; 0x1982 <__divmodhi4+0xa>
    197e:	00 94       	com	r0
    1980:	06 d0       	rcall	.+12     	; 0x198e <__divmodhi4_neg1>
    1982:	77 fd       	sbrc	r23, 7
    1984:	08 d0       	rcall	.+16     	; 0x1996 <__divmodhi4_neg2>
    1986:	64 d0       	rcall	.+200    	; 0x1a50 <__udivmodhi4>
    1988:	07 fc       	sbrc	r0, 7
    198a:	05 d0       	rcall	.+10     	; 0x1996 <__divmodhi4_neg2>
    198c:	3e f4       	brtc	.+14     	; 0x199c <__divmodhi4_exit>

0000198e <__divmodhi4_neg1>:
    198e:	90 95       	com	r25
    1990:	81 95       	neg	r24
    1992:	9f 4f       	sbci	r25, 0xFF	; 255
    1994:	08 95       	ret

00001996 <__divmodhi4_neg2>:
    1996:	70 95       	com	r23
    1998:	61 95       	neg	r22
    199a:	7f 4f       	sbci	r23, 0xFF	; 255

0000199c <__divmodhi4_exit>:
    199c:	08 95       	ret

0000199e <__udivmodsi4>:
    199e:	a1 e2       	ldi	r26, 0x21	; 33
    19a0:	1a 2e       	mov	r1, r26
    19a2:	aa 1b       	sub	r26, r26
    19a4:	bb 1b       	sub	r27, r27
    19a6:	fd 01       	movw	r30, r26
    19a8:	0d c0       	rjmp	.+26     	; 0x19c4 <__udivmodsi4_ep>

000019aa <__udivmodsi4_loop>:
    19aa:	aa 1f       	adc	r26, r26
    19ac:	bb 1f       	adc	r27, r27
    19ae:	ee 1f       	adc	r30, r30
    19b0:	ff 1f       	adc	r31, r31
    19b2:	a2 17       	cp	r26, r18
    19b4:	b3 07       	cpc	r27, r19
    19b6:	e4 07       	cpc	r30, r20
    19b8:	f5 07       	cpc	r31, r21
    19ba:	20 f0       	brcs	.+8      	; 0x19c4 <__udivmodsi4_ep>
    19bc:	a2 1b       	sub	r26, r18
    19be:	b3 0b       	sbc	r27, r19
    19c0:	e4 0b       	sbc	r30, r20
    19c2:	f5 0b       	sbc	r31, r21

000019c4 <__udivmodsi4_ep>:
    19c4:	66 1f       	adc	r22, r22
    19c6:	77 1f       	adc	r23, r23
    19c8:	88 1f       	adc	r24, r24
    19ca:	99 1f       	adc	r25, r25
    19cc:	1a 94       	dec	r1
    19ce:	69 f7       	brne	.-38     	; 0x19aa <__udivmodsi4_loop>
    19d0:	60 95       	com	r22
    19d2:	70 95       	com	r23
    19d4:	80 95       	com	r24
    19d6:	90 95       	com	r25
    19d8:	9b 01       	movw	r18, r22
    19da:	ac 01       	movw	r20, r24
    19dc:	bd 01       	movw	r22, r26
    19de:	cf 01       	movw	r24, r30
    19e0:	08 95       	ret

000019e2 <__divmodsi4>:
    19e2:	05 2e       	mov	r0, r21
    19e4:	97 fb       	bst	r25, 7
    19e6:	16 f4       	brtc	.+4      	; 0x19ec <__divmodsi4+0xa>
    19e8:	00 94       	com	r0
    19ea:	06 d0       	rcall	.+12     	; 0x19f8 <__divmodsi4_neg1>
    19ec:	57 fd       	sbrc	r21, 7
    19ee:	0c d0       	rcall	.+24     	; 0x1a08 <__divmodsi4_neg2>
    19f0:	d6 df       	rcall	.-84     	; 0x199e <__udivmodsi4>
    19f2:	07 fc       	sbrc	r0, 7
    19f4:	09 d0       	rcall	.+18     	; 0x1a08 <__divmodsi4_neg2>
    19f6:	7e f4       	brtc	.+30     	; 0x1a16 <__divmodsi4_exit>

000019f8 <__divmodsi4_neg1>:
    19f8:	90 95       	com	r25
    19fa:	80 95       	com	r24
    19fc:	70 95       	com	r23
    19fe:	61 95       	neg	r22
    1a00:	7f 4f       	sbci	r23, 0xFF	; 255
    1a02:	8f 4f       	sbci	r24, 0xFF	; 255
    1a04:	9f 4f       	sbci	r25, 0xFF	; 255
    1a06:	08 95       	ret

00001a08 <__divmodsi4_neg2>:
    1a08:	50 95       	com	r21
    1a0a:	40 95       	com	r20
    1a0c:	30 95       	com	r19
    1a0e:	21 95       	neg	r18
    1a10:	3f 4f       	sbci	r19, 0xFF	; 255
    1a12:	4f 4f       	sbci	r20, 0xFF	; 255
    1a14:	5f 4f       	sbci	r21, 0xFF	; 255

00001a16 <__divmodsi4_exit>:
    1a16:	08 95       	ret

00001a18 <__umulhisi3>:
    1a18:	a2 9f       	mul	r26, r18
    1a1a:	b0 01       	movw	r22, r0
    1a1c:	b3 9f       	mul	r27, r19
    1a1e:	c0 01       	movw	r24, r0
    1a20:	a3 9f       	mul	r26, r19
    1a22:	01 d0       	rcall	.+2      	; 0x1a26 <__umulhisi3+0xe>
    1a24:	b2 9f       	mul	r27, r18
    1a26:	70 0d       	add	r23, r0
    1a28:	81 1d       	adc	r24, r1
    1a2a:	11 24       	eor	r1, r1
    1a2c:	91 1d       	adc	r25, r1
    1a2e:	08 95       	ret

00001a30 <__usmulhisi3>:
    1a30:	f3 df       	rcall	.-26     	; 0x1a18 <__umulhisi3>

00001a32 <__usmulhisi3_tail>:
    1a32:	b7 ff       	sbrs	r27, 7
    1a34:	08 95       	ret
    1a36:	82 1b       	sub	r24, r18
    1a38:	93 0b       	sbc	r25, r19
    1a3a:	08 95       	ret

00001a3c <__muluhisi3>:
    1a3c:	ed df       	rcall	.-38     	; 0x1a18 <__umulhisi3>
    1a3e:	a5 9f       	mul	r26, r21
    1a40:	90 0d       	add	r25, r0
    1a42:	b4 9f       	mul	r27, r20
    1a44:	90 0d       	add	r25, r0
    1a46:	a4 9f       	mul	r26, r20
    1a48:	80 0d       	add	r24, r0
    1a4a:	91 1d       	adc	r25, r1
    1a4c:	11 24       	eor	r1, r1
    1a4e:	08 95       	ret

00001a50 <__udivmodhi4>:
    1a50:	aa 1b       	sub	r26, r26
    1a52:	bb 1b       	sub	r27, r27
    1a54:	51 e1       	ldi	r21, 0x11	; 17
    1a56:	07 c0       	rjmp	.+14     	; 0x1a66 <__udivmodhi4_ep>

00001a58 <__udivmodhi4_loop>:
    1a58:	aa 1f       	adc	r26, r26
    1a5a:	bb 1f       	adc	r27, r27
    1a5c:	a6 17       	cp	r26, r22
    1a5e:	b7 07       	cpc	r27, r23
    1a60:	10 f0       	brcs	.+4      	; 0x1a66 <__udivmodhi4_ep>
    1a62:	a6 1b       	sub	r26, r22
    1a64:	b7 0b       	sbc	r27, r23

00001a66 <__udivmodhi4_ep>:
    1a66:	88 1f       	adc	r24, r24
    1a68:	99 1f       	adc	r25, r25
    1a6a:	5a 95       	dec	r21
    1a6c:	a9 f7       	brne	.-22     	; 0x1a58 <__udivmodhi4_loop>
    1a6e:	80 95       	com	r24
    1a70:	90 95       	com	r25
    1a72:	bc 01       	movw	r22, r24
    1a74:	cd 01       	movw	r24, r26
    1a76:	08 95       	ret

00001a78 <__eerd_block_m8>:
    1a78:	dc 01       	movw	r26, r24
    1a7a:	cb 01       	movw	r24, r22

00001a7c <__eerd_blraw_m8>:
    1a7c:	fc 01       	movw	r30, r24
    1a7e:	e1 99       	sbic	0x1c, 1	; 28
    1a80:	fe cf       	rjmp	.-4      	; 0x1a7e <__eerd_blraw_m8+0x2>
    1a82:	06 c0       	rjmp	.+12     	; 0x1a90 <__eerd_blraw_m8+0x14>
    1a84:	ff bb       	out	0x1f, r31	; 31
    1a86:	ee bb       	out	0x1e, r30	; 30
    1a88:	e0 9a       	sbi	0x1c, 0	; 28
    1a8a:	31 96       	adiw	r30, 0x01	; 1
    1a8c:	0d b2       	in	r0, 0x1d	; 29
    1a8e:	0d 92       	st	X+, r0
    1a90:	41 50       	subi	r20, 0x01	; 1
    1a92:	50 40       	sbci	r21, 0x00	; 0
    1a94:	b8 f7       	brcc	.-18     	; 0x1a84 <__eerd_blraw_m8+0x8>
    1a96:	08 95       	ret

00001a98 <_exit>:
    1a98:	f8 94       	cli

00001a9a <__stop_program>:
    1a9a:	ff cf       	rjmp	.-2      	; 0x1a9a <__stop_program>
