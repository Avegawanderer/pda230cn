
pid1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001d12  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000092  00800060  00001d12  00001dc6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000e6  008000f2  008000f2  00001e58  2**0
                  ALLOC
  3 .eeprom       00000046  00810000  00810000  00001e58  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         00000a50  00000000  00000000  00001ea0  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      00000206  00000000  00000000  000028f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      0000002f  00000000  00000000  00002af6  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000458  00000000  00000000  00002b25  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00004554  00000000  00000000  00002f7d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00001772  00000000  00000000  000074d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00001d91  00000000  00000000  00008c43  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000a0c  00000000  00000000  0000a9d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00001204  00000000  00000000  0000b3e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00001db2  00000000  00000000  0000c5e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000368  00000000  00000000  0000e396  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	b4 c0       	rjmp	.+360    	; 0x16a <__ctors_end>
       2:	ce c0       	rjmp	.+412    	; 0x1a0 <__bad_interrupt>
       4:	cd c0       	rjmp	.+410    	; 0x1a0 <__bad_interrupt>
       6:	0a cd       	rjmp	.-1516   	; 0xfffffa1c <__eeprom_end+0xff7ef9d6>
       8:	cb c0       	rjmp	.+406    	; 0x1a0 <__bad_interrupt>
       a:	ca c0       	rjmp	.+404    	; 0x1a0 <__bad_interrupt>
       c:	c9 c0       	rjmp	.+402    	; 0x1a0 <__bad_interrupt>
       e:	c8 c0       	rjmp	.+400    	; 0x1a0 <__bad_interrupt>
      10:	c7 c0       	rjmp	.+398    	; 0x1a0 <__bad_interrupt>
      12:	97 cb       	rjmp	.-2258   	; 0xfffff742 <__eeprom_end+0xff7ef6fc>
      14:	c5 c0       	rjmp	.+394    	; 0x1a0 <__bad_interrupt>
      16:	c4 c0       	rjmp	.+392    	; 0x1a0 <__bad_interrupt>
      18:	c3 c0       	rjmp	.+390    	; 0x1a0 <__bad_interrupt>
      1a:	c2 c0       	rjmp	.+388    	; 0x1a0 <__bad_interrupt>
      1c:	96 c1       	rjmp	.+812    	; 0x34a <__vector_14>
      1e:	c0 c0       	rjmp	.+384    	; 0x1a0 <__bad_interrupt>
      20:	52 cb       	rjmp	.-2396   	; 0xfffff6c6 <__eeprom_end+0xff7ef680>
      22:	be c0       	rjmp	.+380    	; 0x1a0 <__bad_interrupt>
      24:	bd c0       	rjmp	.+378    	; 0x1a0 <__bad_interrupt>

00000026 <pmCalibrationDefaults>:
      26:	19 91 bf 00 b1 01                                   ......

0000002c <pmGlobalDefaults>:
      2c:	32 0a 01 1e                                         2...

00000030 <led_encode_table>:
      30:	30 3f 4f 3f 31 06 32 5b 33 4f 34 66 53 6d 35 6d     0?O?1.2[3O4fSm5m
      40:	36 7d 37 07 38 7f 39 6f 2e 80 2c 80 2d 40 5f 08     6}7.8.9o..,.-@_.
      50:	20 00 b0 63 41 77 43 39 46 71 4e 54 44 5e 50 73      ..cAwC9FqNTD^Ps
      60:	45 79 55 3e 47 3d 52 50                             EyU>G=RP

00000068 <menuFunctionSet>:
      68:	01 b7 07 b9 07 06 06 03 03 06 64 07 a5 05 02 61     ..........d....a
      78:	07 fc 06 fb 05 05 db 05 b7 06 00 00 0b ab 05 b7     ................
      88:	06 b9 05 04 db 05 21 06 00 00 0c ab 05 21 06 b9     ......!......!..
      98:	05 06 ef 05 71 06 00 00 09 ab 05 71 06 c2 05 07     ....q......q....
      a8:	e3 05 71 06 00 00 0a ab 05 71 06 c2 05 08 08 06     ..q......q......
      b8:	d1 05 00 00 0d 08 06 d1 05 00 00 0e d5 05 cd 05     ................
      c8:	bf 05                                               ..

000000ca <menuJumpSet>:
      ca:	01 c0 00 03 a8 01 00 01 02 40 01 00 02 05 28 02     .........@....(.
      da:	00 01 01 80 03 00 83 01 40 05 00 82 01 00 05 80     ........@.......
      ea:	00 04 68 05 40 00 07 a8 05 00 01 0b 28 0b 00 83     ..h.@.......(...
      fa:	05 28 04 00 82 01 00 04 80 00 06 68 04 40 00 05     .(.........h.@..
     10a:	a8 04 00 01 0c 28 0c 00 83 04 28 06 00 82 01 00     .....(....(.....
     11a:	06 80 00 07 68 06 40 00 04 a8 06 00 01 09 00 07     ....h.@.........
     12a:	00 82 01 00 07 80 00 05 68 07 40 00 06 a8 07 00     ........h.@.....
     13a:	01 0a 00 09 00 02 06 28 09 00 01 08 14 08 00 83     .......(........
     14a:	01 00 0a 00 02 07 28 0a 00 01 0d 14 0d 00 83 01     ......(.........
     15a:	00 01 00 40 0e 00 02 00 40 0e 00 0e d5 01 01 00     ...@....@.......

0000016a <__ctors_end>:
     16a:	11 24       	eor	r1, r1
     16c:	1f be       	out	0x3f, r1	; 63
     16e:	cf e5       	ldi	r28, 0x5F	; 95
     170:	d4 e0       	ldi	r29, 0x04	; 4
     172:	de bf       	out	0x3e, r29	; 62
     174:	cd bf       	out	0x3d, r28	; 61

00000176 <__do_copy_data>:
     176:	10 e0       	ldi	r17, 0x00	; 0
     178:	a0 e6       	ldi	r26, 0x60	; 96
     17a:	b0 e0       	ldi	r27, 0x00	; 0
     17c:	e2 e1       	ldi	r30, 0x12	; 18
     17e:	fd e1       	ldi	r31, 0x1D	; 29
     180:	02 c0       	rjmp	.+4      	; 0x186 <__do_copy_data+0x10>
     182:	05 90       	lpm	r0, Z+
     184:	0d 92       	st	X+, r0
     186:	a2 3f       	cpi	r26, 0xF2	; 242
     188:	b1 07       	cpc	r27, r17
     18a:	d9 f7       	brne	.-10     	; 0x182 <__do_copy_data+0xc>

0000018c <__do_clear_bss>:
     18c:	21 e0       	ldi	r18, 0x01	; 1
     18e:	a2 ef       	ldi	r26, 0xF2	; 242
     190:	b0 e0       	ldi	r27, 0x00	; 0
     192:	01 c0       	rjmp	.+2      	; 0x196 <.do_clear_bss_start>

00000194 <.do_clear_bss_loop>:
     194:	1d 92       	st	X+, r1

00000196 <.do_clear_bss_start>:
     196:	a8 3d       	cpi	r26, 0xD8	; 216
     198:	b2 07       	cpc	r27, r18
     19a:	e1 f7       	brne	.-8      	; 0x194 <.do_clear_bss_loop>
     19c:	59 d8       	rcall	.-3918   	; 0xfffff250 <__eeprom_end+0xff7ef20a>
     19e:	b7 cd       	rjmp	.-1170   	; 0xfffffd0e <__eeprom_end+0xff7efcc8>

000001a0 <__bad_interrupt>:
     1a0:	2f cf       	rjmp	.-418    	; 0x0 <__vectors>

000001a2 <conv_ADC_to_Celsius>:
//---------------------------------------------//
//---------------------------------------------//


int16_t conv_ADC_to_Celsius(uint16_t adc_value)
{	
     1a2:	0f 93       	push	r16
     1a4:	1f 93       	push	r17
	return (int16_t)(((int32_t)adc_value * k_norm + offset_norm) / (COEFF_SCALE));
     1a6:	20 91 f2 00 	lds	r18, 0x00F2
     1aa:	30 91 f3 00 	lds	r19, 0x00F3
     1ae:	40 91 f4 00 	lds	r20, 0x00F4
     1b2:	50 91 f5 00 	lds	r21, 0x00F5
     1b6:	dc 01       	movw	r26, r24
     1b8:	32 dd       	rcall	.-1436   	; 0xfffffc1e <__eeprom_end+0xff7efbd8>
     1ba:	00 91 f6 00 	lds	r16, 0x00F6
     1be:	10 91 f7 00 	lds	r17, 0x00F7
     1c2:	20 91 f8 00 	lds	r18, 0x00F8
     1c6:	30 91 f9 00 	lds	r19, 0x00F9
     1ca:	60 0f       	add	r22, r16
     1cc:	71 1f       	adc	r23, r17
     1ce:	82 1f       	adc	r24, r18
     1d0:	93 1f       	adc	r25, r19
     1d2:	28 ee       	ldi	r18, 0xE8	; 232
     1d4:	33 e0       	ldi	r19, 0x03	; 3
     1d6:	40 e0       	ldi	r20, 0x00	; 0
     1d8:	50 e0       	ldi	r21, 0x00	; 0
     1da:	ee dc       	rcall	.-1572   	; 0xfffffbb8 <__eeprom_end+0xff7efb72>
}
     1dc:	c9 01       	movw	r24, r18
     1de:	1f 91       	pop	r17
     1e0:	0f 91       	pop	r16
     1e2:	08 95       	ret

000001e4 <conv_Celsius_to_ADC>:

uint16_t conv_Celsius_to_ADC(int16_t degree_value)
{
     1e4:	0f 93       	push	r16
     1e6:	1f 93       	push	r17
	degree_value += 1;
     1e8:	dc 01       	movw	r26, r24
     1ea:	11 96       	adiw	r26, 0x01	; 1
	return (uint16_t)(((int32_t)degree_value * COEFF_SCALE - offset_norm) / k_norm);
     1ec:	28 ee       	ldi	r18, 0xE8	; 232
     1ee:	33 e0       	ldi	r19, 0x03	; 3
     1f0:	10 dd       	rcall	.-1504   	; 0xfffffc12 <__eeprom_end+0xff7efbcc>
     1f2:	00 91 f6 00 	lds	r16, 0x00F6
     1f6:	10 91 f7 00 	lds	r17, 0x00F7
     1fa:	20 91 f8 00 	lds	r18, 0x00F8
     1fe:	30 91 f9 00 	lds	r19, 0x00F9
     202:	60 1b       	sub	r22, r16
     204:	71 0b       	sbc	r23, r17
     206:	82 0b       	sbc	r24, r18
     208:	93 0b       	sbc	r25, r19
     20a:	20 91 f2 00 	lds	r18, 0x00F2
     20e:	30 91 f3 00 	lds	r19, 0x00F3
     212:	40 91 f4 00 	lds	r20, 0x00F4
     216:	50 91 f5 00 	lds	r21, 0x00F5
     21a:	ce dc       	rcall	.-1636   	; 0xfffffbb8 <__eeprom_end+0xff7efb72>
}
     21c:	c9 01       	movw	r24, r18
     21e:	1f 91       	pop	r17
     220:	0f 91       	pop	r16
     222:	08 95       	ret

00000224 <calculateCoeffs>:

void calculateCoeffs(void)
{
     224:	8f 92       	push	r8
     226:	9f 92       	push	r9
     228:	af 92       	push	r10
     22a:	bf 92       	push	r11
     22c:	cf 92       	push	r12
     22e:	df 92       	push	r13
     230:	ef 92       	push	r14
     232:	ff 92       	push	r15
     234:	cf 93       	push	r28
     236:	df 93       	push	r29
	k_norm = ((int32_t)(cp.cpoint2 - cp.cpoint1) * COEFF_SCALE) / ((int32_t)(cp.cpoint2_adc - cp.cpoint1_adc));
     238:	f0 90 ae 01 	lds	r15, 0x01AE
     23c:	a0 91 af 01 	lds	r26, 0x01AF
     240:	b0 e0       	ldi	r27, 0x00	; 0
     242:	af 19       	sub	r26, r15
     244:	b1 09       	sbc	r27, r1
     246:	c0 91 b0 01 	lds	r28, 0x01B0
     24a:	d0 91 b1 01 	lds	r29, 0x01B1
     24e:	28 ee       	ldi	r18, 0xE8	; 232
     250:	33 e0       	ldi	r19, 0x03	; 3
     252:	df dc       	rcall	.-1602   	; 0xfffffc12 <__eeprom_end+0xff7efbcc>
     254:	20 91 b2 01 	lds	r18, 0x01B2
     258:	30 91 b3 01 	lds	r19, 0x01B3
     25c:	2c 1b       	sub	r18, r28
     25e:	3d 0b       	sbc	r19, r29
     260:	40 e0       	ldi	r20, 0x00	; 0
     262:	50 e0       	ldi	r21, 0x00	; 0
     264:	a9 dc       	rcall	.-1710   	; 0xfffffbb8 <__eeprom_end+0xff7efb72>
     266:	49 01       	movw	r8, r18
     268:	5a 01       	movw	r10, r20
     26a:	20 93 f2 00 	sts	0x00F2, r18
     26e:	30 93 f3 00 	sts	0x00F3, r19
     272:	40 93 f4 00 	sts	0x00F4, r20
     276:	50 93 f5 00 	sts	0x00F5, r21
	offset_norm = (int32_t)cp.cpoint1 * COEFF_SCALE - (int32_t)cp.cpoint1_adc * k_norm;
     27a:	2f 2d       	mov	r18, r15
     27c:	30 e0       	ldi	r19, 0x00	; 0
     27e:	a8 ee       	ldi	r26, 0xE8	; 232
     280:	b3 e0       	ldi	r27, 0x03	; 3
     282:	bb dc       	rcall	.-1674   	; 0xfffffbfa <__eeprom_end+0xff7efbb4>
     284:	6b 01       	movw	r12, r22
     286:	7c 01       	movw	r14, r24
     288:	de 01       	movw	r26, r28
     28a:	a5 01       	movw	r20, r10
     28c:	94 01       	movw	r18, r8
     28e:	c7 dc       	rcall	.-1650   	; 0xfffffc1e <__eeprom_end+0xff7efbd8>
     290:	c6 1a       	sub	r12, r22
     292:	d7 0a       	sbc	r13, r23
     294:	e8 0a       	sbc	r14, r24
     296:	f9 0a       	sbc	r15, r25
     298:	c0 92 f6 00 	sts	0x00F6, r12
     29c:	d0 92 f7 00 	sts	0x00F7, r13
     2a0:	e0 92 f8 00 	sts	0x00F8, r14
     2a4:	f0 92 f9 00 	sts	0x00F9, r15
}
     2a8:	df 91       	pop	r29
     2aa:	cf 91       	pop	r28
     2ac:	ff 90       	pop	r15
     2ae:	ef 90       	pop	r14
     2b0:	df 90       	pop	r13
     2b2:	cf 90       	pop	r12
     2b4:	bf 90       	pop	r11
     2b6:	af 90       	pop	r10
     2b8:	9f 90       	pop	r9
     2ba:	8f 90       	pop	r8
     2bc:	08 95       	ret

000002be <update_normalized_adc>:
void update_normalized_adc()
{
	uint8_t i;
	uint16_t adc_raw_summ = 0;
	// Disable interrupts from ADC - to save data integrity
	ADCSRA &= ~(1<<ADIE);	
     2be:	33 98       	cbi	0x06, 3	; 6
     2c0:	e0 e4       	ldi	r30, 0x40	; 64
     2c2:	f1 e0       	ldi	r31, 0x01	; 1


void update_normalized_adc()
{
	uint8_t i;
	uint16_t adc_raw_summ = 0;
     2c4:	80 e0       	ldi	r24, 0x00	; 0
     2c6:	90 e0       	ldi	r25, 0x00	; 0
	// Disable interrupts from ADC - to save data integrity
	ADCSRA &= ~(1<<ADIE);	
	// Get normalized mean window summ
	for (i=0;i<ADC_BUFFER_LENGTH;i++)
		adc_raw_summ += raw_adc_buffer[i];
     2c8:	21 91       	ld	r18, Z+
     2ca:	31 91       	ld	r19, Z+
     2cc:	82 0f       	add	r24, r18
     2ce:	93 1f       	adc	r25, r19
	uint8_t i;
	uint16_t adc_raw_summ = 0;
	// Disable interrupts from ADC - to save data integrity
	ADCSRA &= ~(1<<ADIE);	
	// Get normalized mean window summ
	for (i=0;i<ADC_BUFFER_LENGTH;i++)
     2d0:	21 e0       	ldi	r18, 0x01	; 1
     2d2:	e0 38       	cpi	r30, 0x80	; 128
     2d4:	f2 07       	cpc	r31, r18
     2d6:	c1 f7       	brne	.-16     	; 0x2c8 <update_normalized_adc+0xa>
		adc_raw_summ += raw_adc_buffer[i];
	// Enable interrupts from ADC
	ADCSRA |= (1<<ADIE);
     2d8:	33 9a       	sbi	0x06, 3	; 6
	
	adc_normalized = adc_raw_summ >> 5;		// ADC_BUFFER_LENGTH = 32 !
     2da:	9c 01       	movw	r18, r24
     2dc:	45 e0       	ldi	r20, 0x05	; 5
     2de:	36 95       	lsr	r19
     2e0:	27 95       	ror	r18
     2e2:	4a 95       	dec	r20
     2e4:	e1 f7       	brne	.-8      	; 0x2de <update_normalized_adc+0x20>
     2e6:	30 93 81 01 	sts	0x0181, r19
     2ea:	20 93 80 01 	sts	0x0180, r18
	adc_oversampled = adc_raw_summ >> 3;	// adc_oversampled is 4 times greater than adc_normalized
     2ee:	53 e0       	ldi	r21, 0x03	; 3
     2f0:	96 95       	lsr	r25
     2f2:	87 95       	ror	r24
     2f4:	5a 95       	dec	r21
     2f6:	e1 f7       	brne	.-8      	; 0x2f0 <update_normalized_adc+0x32>
     2f8:	90 93 3f 01 	sts	0x013F, r25
     2fc:	80 93 3e 01 	sts	0x013E, r24
	// Filter
	adc_filtered = fir_i16_i8(adc_oversampled, filter_buffer, &fir_filter_rect);	
     300:	40 e6       	ldi	r20, 0x60	; 96
     302:	50 e0       	ldi	r21, 0x00	; 0
     304:	65 e8       	ldi	r22, 0x85	; 133
     306:	71 e0       	ldi	r23, 0x01	; 1
     308:	76 d2       	rcall	.+1260   	; 0x7f6 <fir_i16_i8>
     30a:	90 93 3d 01 	sts	0x013D, r25
     30e:	80 93 3c 01 	sts	0x013C, r24
	// Check sensor
	adc_status = 0;
     312:	10 92 82 01 	sts	0x0182, r1
	if (adc_normalized < 50)
     316:	80 91 80 01 	lds	r24, 0x0180
     31a:	90 91 81 01 	lds	r25, 0x0181
     31e:	82 33       	cpi	r24, 0x32	; 50
     320:	91 05       	cpc	r25, r1
     322:	10 f4       	brcc	.+4      	; 0x328 <update_normalized_adc+0x6a>
		adc_status |= SENSOR_ERROR_NO_PRESENT;
     324:	81 e0       	ldi	r24, 0x01	; 1
     326:	04 c0       	rjmp	.+8      	; 0x330 <update_normalized_adc+0x72>
	else if (adc_normalized > 1000)
     328:	89 3e       	cpi	r24, 0xE9	; 233
     32a:	93 40       	sbci	r25, 0x03	; 3
     32c:	18 f0       	brcs	.+6      	; 0x334 <update_normalized_adc+0x76>
		adc_status |= SENSOR_ERROR_SHORTED;
     32e:	82 e0       	ldi	r24, 0x02	; 2
     330:	80 93 82 01 	sts	0x0182, r24
     334:	08 95       	ret

00000336 <update_Celsius>:
}

void update_Celsius(void)
{
	// Convert to Celsius degree
	adc_celsius = conv_ADC_to_Celsius(adc_normalized);
     336:	80 91 80 01 	lds	r24, 0x0180
     33a:	90 91 81 01 	lds	r25, 0x0181
     33e:	31 df       	rcall	.-414    	; 0x1a2 <conv_ADC_to_Celsius>
     340:	90 93 84 01 	sts	0x0184, r25
     344:	80 93 83 01 	sts	0x0183, r24
     348:	08 95       	ret

0000034a <__vector_14>:



// ADC conversion is started by system timer (Timer2 ISR) every 1 ms
ISR(ADC_vect)
{
     34a:	1f 92       	push	r1
     34c:	0f 92       	push	r0
     34e:	0f b6       	in	r0, 0x3f	; 63
     350:	0f 92       	push	r0
     352:	11 24       	eor	r1, r1
     354:	2f 93       	push	r18
     356:	3f 93       	push	r19
     358:	4f 93       	push	r20
     35a:	8f 93       	push	r24
     35c:	9f 93       	push	r25
     35e:	ef 93       	push	r30
     360:	ff 93       	push	r31
	static uint8_t adc_buffer_pointer = ADC_BUFFER_LENGTH;
	// Get new sample
	uint16_t new_sample = 1024 - ADC;	
     362:	24 b1       	in	r18, 0x04	; 4
     364:	35 b1       	in	r19, 0x05	; 5
	// Add new sample to the buffer
	raw_adc_buffer[--adc_buffer_pointer] = new_sample;
     366:	40 91 77 00 	lds	r20, 0x0077
     36a:	41 50       	subi	r20, 0x01	; 1
     36c:	40 93 77 00 	sts	0x0077, r20
     370:	e4 2f       	mov	r30, r20
     372:	f0 e0       	ldi	r31, 0x00	; 0
     374:	ee 0f       	add	r30, r30
     376:	ff 1f       	adc	r31, r31
     378:	e0 5c       	subi	r30, 0xC0	; 192
     37a:	fe 4f       	sbci	r31, 0xFE	; 254
// ADC conversion is started by system timer (Timer2 ISR) every 1 ms
ISR(ADC_vect)
{
	static uint8_t adc_buffer_pointer = ADC_BUFFER_LENGTH;
	// Get new sample
	uint16_t new_sample = 1024 - ADC;	
     37c:	80 e0       	ldi	r24, 0x00	; 0
     37e:	94 e0       	ldi	r25, 0x04	; 4
     380:	82 1b       	sub	r24, r18
     382:	93 0b       	sbc	r25, r19
	// Add new sample to the buffer
	raw_adc_buffer[--adc_buffer_pointer] = new_sample;
     384:	91 83       	std	Z+1, r25	; 0x01
     386:	80 83       	st	Z, r24
	if (adc_buffer_pointer == 0)
     388:	41 11       	cpse	r20, r1
     38a:	03 c0       	rjmp	.+6      	; 0x392 <__vector_14+0x48>
		adc_buffer_pointer = ADC_BUFFER_LENGTH;
     38c:	80 e2       	ldi	r24, 0x20	; 32
     38e:	80 93 77 00 	sts	0x0077, r24
}	
     392:	ff 91       	pop	r31
     394:	ef 91       	pop	r30
     396:	9f 91       	pop	r25
     398:	8f 91       	pop	r24
     39a:	4f 91       	pop	r20
     39c:	3f 91       	pop	r19
     39e:	2f 91       	pop	r18
     3a0:	0f 90       	pop	r0
     3a2:	0f be       	out	0x3f, r0	; 63
     3a4:	0f 90       	pop	r0
     3a6:	1f 90       	pop	r1
     3a8:	18 95       	reti

000003aa <process_buttons>:
	uint8_t long_press_mask;
	uint8_t long_press_event_mask;
	
	uint16_t composed_state;
	
	raw_delayed = raw_current;
     3aa:	50 91 00 01 	lds	r21, 0x0100
	raw_delayed_inv = raw_current_inv;
     3ae:	30 91 78 00 	lds	r19, 0x0078
	raw_current = raw_button_state;
     3b2:	90 91 cf 01 	lds	r25, 0x01CF
     3b6:	90 93 00 01 	sts	0x0100, r25
	raw_current_inv = ~raw_current;
     3ba:	69 2f       	mov	r22, r25
     3bc:	60 95       	com	r22
     3be:	60 93 78 00 	sts	0x0078, r22
	
	// Must be before press_timer update
	long_press_mask = (press_timer >= LONG_PRESS_DELAY) ? 0xFF : 0x00;
     3c2:	80 91 01 01 	lds	r24, 0x0101
     3c6:	8c 30       	cpi	r24, 0x0C	; 12
     3c8:	10 f0       	brcs	.+4      	; 0x3ce <process_buttons+0x24>
     3ca:	2f ef       	ldi	r18, 0xFF	; 255
     3cc:	01 c0       	rjmp	.+2      	; 0x3d0 <process_buttons+0x26>
     3ce:	20 e0       	ldi	r18, 0x00	; 0
	
	if (raw_delayed != raw_current)
     3d0:	59 17       	cp	r21, r25
     3d2:	19 f0       	breq	.+6      	; 0x3da <process_buttons+0x30>
	{
		press_timer = 0;
     3d4:	10 92 01 01 	sts	0x0101, r1
     3d8:	05 c0       	rjmp	.+10     	; 0x3e4 <process_buttons+0x3a>
	}
	else if (press_timer <= LONG_PRESS_DELAY)
     3da:	8d 30       	cpi	r24, 0x0D	; 13
     3dc:	18 f4       	brcc	.+6      	; 0x3e4 <process_buttons+0x3a>
	{
		press_timer++;
     3de:	8f 5f       	subi	r24, 0xFF	; 255
     3e0:	80 93 01 01 	sts	0x0101, r24
	}
	
	// Must after press_timer update
	long_press_event_mask = (press_timer == LONG_PRESS_DELAY) ? 0xFF : 0x00;
     3e4:	70 91 01 01 	lds	r23, 0x0101
     3e8:	7c 30       	cpi	r23, 0x0C	; 12
     3ea:	11 f4       	brne	.+4      	; 0x3f0 <process_buttons+0x46>
     3ec:	4f ef       	ldi	r20, 0xFF	; 255
     3ee:	01 c0       	rjmp	.+2      	; 0x3f2 <process_buttons+0x48>
     3f0:	40 e0       	ldi	r20, 0x00	; 0
			
	button_action_down = raw_current & raw_delayed_inv;
     3f2:	89 2f       	mov	r24, r25
     3f4:	83 23       	and	r24, r19
     3f6:	80 93 fd 00 	sts	0x00FD, r24
			
	if (press_timer > REPEAT_DELAY)
     3fa:	77 30       	cpi	r23, 0x07	; 7
     3fc:	08 f0       	brcs	.+2      	; 0x400 <process_buttons+0x56>
		raw_delayed_inv |= 0xFF;
     3fe:	3f ef       	ldi	r19, 0xFF	; 255
	
	button_action_rep = raw_current & raw_delayed_inv;
     400:	39 23       	and	r19, r25
     402:	30 93 fc 00 	sts	0x00FC, r19
	
	button_action_up_short = raw_current_inv & raw_delayed & ~long_press_mask;
     406:	20 95       	com	r18
     408:	56 23       	and	r21, r22
     40a:	25 23       	and	r18, r21
     40c:	20 93 fb 00 	sts	0x00FB, r18
	//button_action_up_long  = raw_current_inv & raw_delayed & long_press_mask;
	button_action_long  = raw_current & long_press_event_mask;
     410:	49 23       	and	r20, r25
     412:	40 93 fa 00 	sts	0x00FA, r20
	
	// Compose button state
	composed_state = (button_action_down & (BD_MENU | BD_UP | BD_DOWN | BD_ROTFWD | BD_ROTREV | BD_HEATCTRL | BD_CYCLE));
     416:	8d 7f       	andi	r24, 0xFD	; 253
     418:	90 e0       	ldi	r25, 0x00	; 0
	if (button_action_up_short & BD_MENU)
     41a:	25 fd       	sbrc	r18, 5
		composed_state |= BS_MENU;
     41c:	91 60       	ori	r25, 0x01	; 1
	//if (button_action_up_long & BD_MENU)
	if (button_action_long & BD_MENU)
     41e:	45 fd       	sbrc	r20, 5
		composed_state |= BL_MENU;
     420:	92 60       	ori	r25, 0x02	; 2
	if (button_action_rep & BD_UP)
     422:	36 fd       	sbrc	r19, 6
		composed_state |= BR_UP;	
     424:	94 60       	ori	r25, 0x04	; 4
	if (button_action_rep & BD_DOWN)
     426:	37 fd       	sbrc	r19, 7
		composed_state |= BR_DOWN;
     428:	98 60       	ori	r25, 0x08	; 8

	button_state = composed_state;
     42a:	90 93 ff 00 	sts	0x00FF, r25
     42e:	80 93 fe 00 	sts	0x00FE, r24
     432:	08 95       	ret

00000434 <getDataCRC>:

}


static uint8_t getDataCRC(void *p,uint8_t byte_count)
{
     434:	fc 01       	movw	r30, r24
	uint8_t crc_byte = 0;
     436:	80 e0       	ldi	r24, 0x00	; 0
	while(byte_count--)
     438:	09 c0       	rjmp	.+18     	; 0x44c <getDataCRC+0x18>
	{
		// Using ibutton CRC function for reason of 8-bit output CRC
		crc_byte = _crc_ibutton_update (crc_byte, *(uint8_t*)p++);	
     43a:	91 91       	ld	r25, Z+

static __inline__ uint8_t
_crc_ibutton_update(uint8_t __crc, uint8_t __data)
{
	uint8_t __i, __pattern;
	__asm__ __volatile__ (
     43c:	89 27       	eor	r24, r25
     43e:	98 e0       	ldi	r25, 0x08	; 8
     440:	2c e8       	ldi	r18, 0x8C	; 140
     442:	86 95       	lsr	r24
     444:	08 f4       	brcc	.+2      	; 0x448 <getDataCRC+0x14>
     446:	82 27       	eor	r24, r18
     448:	9a 95       	dec	r25
     44a:	d9 f7       	brne	.-10     	; 0x442 <getDataCRC+0xe>


static uint8_t getDataCRC(void *p,uint8_t byte_count)
{
	uint8_t crc_byte = 0;
	while(byte_count--)
     44c:	61 50       	subi	r22, 0x01	; 1
     44e:	a8 f7       	brcc	.-22     	; 0x43a <getDataCRC+0x6>
	{
		// Using ibutton CRC function for reason of 8-bit output CRC
		crc_byte = _crc_ibutton_update (crc_byte, *(uint8_t*)p++);	
	}
	return crc_byte;
}
     450:	08 95       	ret

00000452 <processRollControl>:



// Function to control motor rotation
void processRollControl(void)
{	
     452:	cf 93       	push	r28
	uint8_t beepState = 0;
	static uint8_t force_rotate = 0;
	
	// Process auto power off control
	if (autoPowerOffState & AUTO_POFF_ACTIVE)
     454:	80 91 02 01 	lds	r24, 0x0102
     458:	80 ff       	sbrs	r24, 0
     45a:	25 c0       	rjmp	.+74     	; 0x4a6 <__stack+0x47>
	{
		stopCycleRolling(RESET_POINTS);	
     45c:	81 e0       	ldi	r24, 0x01	; 1
     45e:	df d8       	rcall	.-3650   	; 0xfffff61e <__eeprom_end+0xff7ef5d8>
		if ( (adc_status & (SENSOR_ERROR_NO_PRESENT | SENSOR_ERROR_SHORTED)) ||
     460:	80 91 82 01 	lds	r24, 0x0182
     464:	83 70       	andi	r24, 0x03	; 3
     466:	39 f4       	brne	.+14     	; 0x476 <__stack+0x17>
			 (adc_celsius > (POFF_MOTOR_TRESHOLD + POFF_MOTOR_HYST)) )
     468:	80 91 83 01 	lds	r24, 0x0183
     46c:	90 91 84 01 	lds	r25, 0x0184
	
	// Process auto power off control
	if (autoPowerOffState & AUTO_POFF_ACTIVE)
	{
		stopCycleRolling(RESET_POINTS);	
		if ( (adc_status & (SENSOR_ERROR_NO_PRESENT | SENSOR_ERROR_SHORTED)) ||
     470:	88 33       	cpi	r24, 0x38	; 56
     472:	91 05       	cpc	r25, r1
     474:	54 f0       	brlt	.+20     	; 0x48a <__stack+0x2b>
			 (adc_celsius > (POFF_MOTOR_TRESHOLD + POFF_MOTOR_HYST)) )
		{
			// If there is any sensor error, or
			// if temperature is greater than (threshold + some hysteresis) 
			if (!(rollState & (ROLL_FWD | ROLL_REV)))
     476:	80 91 26 01 	lds	r24, 0x0126
     47a:	83 70       	andi	r24, 0x03	; 3
     47c:	09 f0       	breq	.+2      	; 0x480 <__stack+0x21>
     47e:	73 c0       	rjmp	.+230    	; 0x566 <__stack+0x107>
			{
				// If motor is stopped
				setMotorDirection(ROLL_FWD);		// Start rotating in order to prevent rollers damage
     480:	81 e0       	ldi	r24, 0x01	; 1
     482:	ac d8       	rcall	.-3752   	; 0xfffff5dc <__eeprom_end+0xff7ef596>
				force_rotate = 0;					// Do not start motor on power off exit
     484:	10 92 04 01 	sts	0x0104, r1
     488:	6e c0       	rjmp	.+220    	; 0x566 <__stack+0x107>
			}
		}
		else if (adc_celsius <= POFF_MOTOR_TRESHOLD)
     48a:	c3 97       	sbiw	r24, 0x33	; 51
     48c:	0c f0       	brlt	.+2      	; 0x490 <__stack+0x31>
     48e:	6b c0       	rjmp	.+214    	; 0x566 <__stack+0x107>
		{
			if (rollState & (ROLL_FWD | ROLL_REV))
     490:	80 91 26 01 	lds	r24, 0x0126
     494:	83 70       	andi	r24, 0x03	; 3
     496:	09 f4       	brne	.+2      	; 0x49a <__stack+0x3b>
     498:	66 c0       	rjmp	.+204    	; 0x566 <__stack+0x107>
			{	
				// If temperature is below threshold and motor is rotating
				setMotorDirection(0);			// Stop the motor
     49a:	80 e0       	ldi	r24, 0x00	; 0
     49c:	9f d8       	rcall	.-3778   	; 0xfffff5dc <__eeprom_end+0xff7ef596>
				force_rotate = ROLL_FWD;		// Start motor on power-off mode exit
     49e:	81 e0       	ldi	r24, 0x01	; 1
     4a0:	80 93 04 01 	sts	0x0104, r24
     4a4:	60 c0       	rjmp	.+192    	; 0x566 <__stack+0x107>
		}
	}
	else
	{
		// Control direction by buttons
		if ((raw_button_state & (BD_ROTFWD | BD_ROTREV)) == (BD_ROTFWD | BD_ROTREV))
     4a6:	80 91 cf 01 	lds	r24, 0x01CF
     4aa:	84 71       	andi	r24, 0x14	; 20
     4ac:	84 31       	cpi	r24, 0x14	; 20
     4ae:	11 f4       	brne	.+4      	; 0x4b4 <__stack+0x55>
		{
			// Both Forward and Reverse buttons are pressed - stop
			// Attention - stopping motor when rollers are hot can possibly damage them
			setMotorDirection(0);
     4b0:	80 e0       	ldi	r24, 0x00	; 0
     4b2:	19 c0       	rjmp	.+50     	; 0x4e6 <__stack+0x87>
		}
		else if (button_action_down & BD_ROTFWD)
     4b4:	80 91 fd 00 	lds	r24, 0x00FD
     4b8:	82 ff       	sbrs	r24, 2
     4ba:	04 c0       	rjmp	.+8      	; 0x4c4 <__stack+0x65>
		{
			setMotorDirection(ROLL_FWD);	
     4bc:	81 e0       	ldi	r24, 0x01	; 1
     4be:	8e d8       	rcall	.-3812   	; 0xfffff5dc <__eeprom_end+0xff7ef596>
			beepState |= 0x01;			// pressed FWD button
     4c0:	c1 e0       	ldi	r28, 0x01	; 1
     4c2:	13 c0       	rjmp	.+38     	; 0x4ea <__stack+0x8b>
		}		
		else if (button_action_down & BD_ROTREV)
     4c4:	84 ff       	sbrs	r24, 4
     4c6:	04 c0       	rjmp	.+8      	; 0x4d0 <__stack+0x71>
		{
			setMotorDirection(ROLL_REV);
     4c8:	82 e0       	ldi	r24, 0x02	; 2
     4ca:	88 d8       	rcall	.-3824   	; 0xfffff5dc <__eeprom_end+0xff7ef596>
			beepState |= 0x02;			// pressed REV button
     4cc:	c2 e0       	ldi	r28, 0x02	; 2
     4ce:	0d c0       	rjmp	.+26     	; 0x4ea <__stack+0x8b>
		}		
		else if (button_action_long & BD_CYCLE)
     4d0:	80 91 fa 00 	lds	r24, 0x00FA
     4d4:	83 ff       	sbrs	r24, 3
     4d6:	04 c0       	rjmp	.+8      	; 0x4e0 <__stack+0x81>
		{
			stopCycleRolling(RESET_POINTS);		// Reset points and disable CYCLE mode (if was enabled)
     4d8:	81 e0       	ldi	r24, 0x01	; 1
     4da:	a1 d8       	rcall	.-3774   	; 0xfffff61e <__eeprom_end+0xff7ef5d8>
			beepState |= 0x08;					// reset of points by long pressing of ROLL button
     4dc:	c8 e0       	ldi	r28, 0x08	; 8
     4de:	05 c0       	rjmp	.+10     	; 0x4ea <__stack+0x8b>
		}
		else if (force_rotate)
     4e0:	80 91 04 01 	lds	r24, 0x0104
     4e4:	81 11       	cpse	r24, r1
		{
			// Auto power off mode was exited by pressing some other button, not direction buttons
			// Start roll, but do not beep in this case
			setMotorDirection(force_rotate);
     4e6:	7a d8       	rcall	.-3852   	; 0xfffff5dc <__eeprom_end+0xff7ef596>


// Function to control motor rotation
void processRollControl(void)
{	
	uint8_t beepState = 0;
     4e8:	c0 e0       	ldi	r28, 0x00	; 0
		{
			// Auto power off mode was exited by pressing some other button, not direction buttons
			// Start roll, but do not beep in this case
			setMotorDirection(force_rotate);
		}
		force_rotate = 0;		// First normal pass will clear 
     4ea:	10 92 04 01 	sts	0x0104, r1
			
		if (button_action_up_short & BD_CYCLE)
     4ee:	80 91 fb 00 	lds	r24, 0x00FB
     4f2:	83 ff       	sbrs	r24, 3
     4f4:	0e c0       	rjmp	.+28     	; 0x512 <__stack+0xb3>
		{
			if (rollState & ROLL_CYCLE)
     4f6:	80 91 26 01 	lds	r24, 0x0126
     4fa:	82 ff       	sbrs	r24, 2
     4fc:	04 c0       	rjmp	.+8      	; 0x506 <__stack+0xa7>
			{
				stopCycleRolling(DO_NOT_RESET_POINTS);
     4fe:	80 e0       	ldi	r24, 0x00	; 0
     500:	8e d8       	rcall	.-3812   	; 0xfffff61e <__eeprom_end+0xff7ef5d8>
				beepState |= 0x20;		// stopped cycle
     502:	c0 62       	ori	r28, 0x20	; 32
     504:	06 c0       	rjmp	.+12     	; 0x512 <__stack+0xb3>
			}
			else if (startCycleRolling())
     506:	c7 d8       	rcall	.-3698   	; 0xfffff696 <__eeprom_end+0xff7ef650>
     508:	88 23       	and	r24, r24
     50a:	11 f0       	breq	.+4      	; 0x510 <__stack+0xb1>
			{
				beepState |= 0x10;		// started cycle
     50c:	c0 61       	ori	r28, 0x10	; 16
     50e:	01 c0       	rjmp	.+2      	; 0x512 <__stack+0xb3>
			}
			else
			{
				beepState |= 0x40;		// failed to start cycle
     510:	c0 64       	ori	r28, 0x40	; 64
			}			
		}		
		
		// ROLL_DIR_CHANGED is set only when direction is changed automatically,
		// not when changed by calling setMotorDirection() function
		if (rollState & ROLL_DIR_CHANGED)
     512:	80 91 26 01 	lds	r24, 0x0126
     516:	85 ff       	sbrs	r24, 5
     518:	04 c0       	rjmp	.+8      	; 0x522 <__stack+0xc3>
		{
			rollState &= ~ROLL_DIR_CHANGED;
     51a:	8f 7d       	andi	r24, 0xDF	; 223
     51c:	80 93 26 01 	sts	0x0126, r24
			beepState |= 0x04;	
     520:	c4 60       	ori	r28, 0x04	; 4
		}
		if (rollState & CYCLE_ROLL_DONE)
     522:	80 91 26 01 	lds	r24, 0x0126
     526:	84 ff       	sbrs	r24, 4
     528:	04 c0       	rjmp	.+8      	; 0x532 <__stack+0xd3>
		{
			rollState &= ~CYCLE_ROLL_DONE;
     52a:	8f 7e       	andi	r24, 0xEF	; 239
     52c:	80 93 26 01 	sts	0x0126, r24
			beepState |= 0x80;	
     530:	c0 68       	ori	r28, 0x80	; 128
		}		
			
		//-----------//
			
		if (beepState & 0x80)		// Roll cycle done
     532:	c7 ff       	sbrs	r28, 7
     534:	06 c0       	rjmp	.+12     	; 0x542 <__stack+0xe3>
		{
			SetBeeperFreq(1000);
     536:	88 ee       	ldi	r24, 0xE8	; 232
     538:	93 e0       	ldi	r25, 0x03	; 3
     53a:	6d da       	rcall	.-2854   	; 0xfffffa16 <__eeprom_end+0xff7ef9d0>
			StartBeep(200);
     53c:	88 ec       	ldi	r24, 0xC8	; 200
     53e:	90 e0       	ldi	r25, 0x00	; 0
     540:	11 c0       	rjmp	.+34     	; 0x564 <__stack+0x105>
		}		
		else if (beepState & 0x40)	// Roll cycle start fail
     542:	c6 ff       	sbrs	r28, 6
     544:	03 c0       	rjmp	.+6      	; 0x54c <__stack+0xed>
		{
			SetBeeperFreq(500);
     546:	84 ef       	ldi	r24, 0xF4	; 244
     548:	91 e0       	ldi	r25, 0x01	; 1
     54a:	09 c0       	rjmp	.+18     	; 0x55e <__stack+0xff>
			StartBeep(50);
		} 
		else if (beepState & 0x08)	// Reset points
     54c:	c3 ff       	sbrs	r28, 3
     54e:	03 c0       	rjmp	.+6      	; 0x556 <__stack+0xf7>
		{
			SetBeeperFreq(800);
     550:	80 e2       	ldi	r24, 0x20	; 32
     552:	93 e0       	ldi	r25, 0x03	; 3
     554:	04 c0       	rjmp	.+8      	; 0x55e <__stack+0xff>
			StartBeep(50);
		}							// Other
		else if ( beepState & (0x01 | 0x02 | 0x10 | 0x20 | 0x04) )
     556:	c7 73       	andi	r28, 0x37	; 55
     558:	31 f0       	breq	.+12     	; 0x566 <__stack+0x107>
		{
			SetBeeperFreq(1000);
     55a:	88 ee       	ldi	r24, 0xE8	; 232
     55c:	93 e0       	ldi	r25, 0x03	; 3
     55e:	5b da       	rcall	.-2890   	; 0xfffffa16 <__eeprom_end+0xff7ef9d0>
			StartBeep(50);	
     560:	82 e3       	ldi	r24, 0x32	; 50
     562:	90 e0       	ldi	r25, 0x00	; 0
     564:	59 da       	rcall	.-2894   	; 0xfffffa18 <__eeprom_end+0xff7ef9d2>
		}			
			
	}

	//----- LED indication ------//
	clearExtraLeds(LED_ROTFWD | LED_ROTREV);
     566:	88 e1       	ldi	r24, 0x18	; 24
     568:	a6 d2       	rcall	.+1356   	; 0xab6 <clearExtraLeds>
	if (rollState & ROLL_FWD)
     56a:	80 91 26 01 	lds	r24, 0x0126
     56e:	80 ff       	sbrs	r24, 0
     570:	02 c0       	rjmp	.+4      	; 0x576 <__stack+0x117>
		setExtraLeds(LED_ROTFWD);
     572:	88 e0       	ldi	r24, 0x08	; 8
     574:	03 c0       	rjmp	.+6      	; 0x57c <__stack+0x11d>
	else if (rollState & ROLL_REV)
     576:	81 ff       	sbrs	r24, 1
     578:	03 c0       	rjmp	.+6      	; 0x580 <__stack+0x121>
		setExtraLeds(LED_ROTREV);
     57a:	80 e1       	ldi	r24, 0x10	; 16
}
     57c:	cf 91       	pop	r28
	//----- LED indication ------//
	clearExtraLeds(LED_ROTFWD | LED_ROTREV);
	if (rollState & ROLL_FWD)
		setExtraLeds(LED_ROTFWD);
	else if (rollState & ROLL_REV)
		setExtraLeds(LED_ROTREV);
     57e:	95 c2       	rjmp	.+1322   	; 0xaaa <setExtraLeds>
}
     580:	cf 91       	pop	r28
     582:	08 95       	ret

00000584 <heaterInit>:


void heaterInit(void)
{
	// FIXME
	initPID(adc_filtered >> 1);
     584:	80 91 3c 01 	lds	r24, 0x013C
     588:	90 91 3d 01 	lds	r25, 0x013D
     58c:	96 95       	lsr	r25
     58e:	87 95       	ror	r24
     590:	7a c7       	rjmp	.+3828   	; 0x1486 <initPID>

00000592 <processHeaterControl>:
}


void processHeaterControl(void)
{
     592:	0f 93       	push	r16
     594:	1f 93       	push	r17
     596:	cf 93       	push	r28
     598:	df 93       	push	r29
	uint16_t setPoint;
	uint16_t processValue;
	uint16_t pid_output;
	
	// Process heater ON/OFF control by button
	if (button_state & BD_HEATCTRL)
     59a:	80 91 fe 00 	lds	r24, 0x00FE
     59e:	80 ff       	sbrs	r24, 0
     5a0:	0b c0       	rjmp	.+22     	; 0x5b8 <processHeaterControl+0x26>
	{
		heaterState ^= HEATER_ENABLED;
     5a2:	80 91 03 01 	lds	r24, 0x0103
     5a6:	91 e0       	ldi	r25, 0x01	; 1
     5a8:	89 27       	eor	r24, r25
     5aa:	80 93 03 01 	sts	0x0103, r24
		// Force update heater power
		sys_timers.flags |= UPDATE_PID;		// Not very good approach if UPDATE_PID flag is used somewhere else
     5ae:	80 91 8f 00 	lds	r24, 0x008F
     5b2:	80 64       	ori	r24, 0x40	; 64
     5b4:	80 93 8f 00 	sts	0x008F, r24
	}
	
	// Process auto power off control and sensor errors
	if ((autoPowerOffState & AUTO_POFF_ACTIVE) || (adc_status & (SENSOR_ERROR_NO_PRESENT | SENSOR_ERROR_SHORTED)))
     5b8:	80 91 02 01 	lds	r24, 0x0102
     5bc:	80 fd       	sbrc	r24, 0
     5be:	04 c0       	rjmp	.+8      	; 0x5c8 <processHeaterControl+0x36>
     5c0:	80 91 82 01 	lds	r24, 0x0182
     5c4:	83 70       	andi	r24, 0x03	; 3
     5c6:	29 f0       	breq	.+10     	; 0x5d2 <processHeaterControl+0x40>
	{
		heaterState &= ~HEATER_ENABLED;
     5c8:	80 91 03 01 	lds	r24, 0x0103
     5cc:	8e 7f       	andi	r24, 0xFE	; 254
     5ce:	80 93 03 01 	sts	0x0103, r24
	}		
	
	// Check if heater control should be updated
	// PID call interval is a multiple of Celsius update interval. 
	if (sys_timers.flags & UPDATE_PID)
     5d2:	80 91 8f 00 	lds	r24, 0x008F
     5d6:	86 ff       	sbrs	r24, 6
     5d8:	40 c0       	rjmp	.+128    	; 0x65a <processHeaterControl+0xc8>
	{
		// Convert temperature setup to equal ADC value
		set_value_adc = conv_Celsius_to_ADC(p.setup_temp_value);					
     5da:	80 91 b4 01 	lds	r24, 0x01B4
     5de:	90 e0       	ldi	r25, 0x00	; 0
     5e0:	01 de       	rcall	.-1022   	; 0x1e4 <conv_Celsius_to_ADC>

		setPoint = set_value_adc * 4;		
     5e2:	ec 01       	movw	r28, r24
     5e4:	cc 0f       	add	r28, r28
     5e6:	dd 1f       	adc	r29, r29
     5e8:	cc 0f       	add	r28, r28
     5ea:	dd 1f       	adc	r29, r29
		setPoint >>= 1;
     5ec:	d6 95       	lsr	r29
     5ee:	c7 95       	ror	r28
		processValue = adc_filtered >> 1;	// normal PID control
     5f0:	00 91 3c 01 	lds	r16, 0x013C
     5f4:	10 91 3d 01 	lds	r17, 0x013D
     5f8:	16 95       	lsr	r17
     5fa:	07 95       	ror	r16
		
		// Process PID
		// Possibly hold PID in reset while disabled ?
		// Reset when setting is changed ?
		pid_output = processPID(setPoint, processValue);		
     5fc:	b8 01       	movw	r22, r16
     5fe:	ce 01       	movw	r24, r28
     600:	5b d7       	rcall	.+3766   	; 0x14b8 <processPID>
					
					
		// If heater is disabled, override output
		if (!(heaterState & HEATER_ENABLED))
     602:	90 91 03 01 	lds	r25, 0x0103
     606:	90 ff       	sbrs	r25, 0
     608:	06 c0       	rjmp	.+12     	; 0x616 <processHeaterControl+0x84>
			pid_output = 0;
		// If unregulated mode is selected, set full power
		else if (p.setup_temp_value >= MAX_SET_TEMP)
     60a:	90 91 b4 01 	lds	r25, 0x01B4
     60e:	9f 3f       	cpi	r25, 0xFF	; 255
     610:	29 f0       	breq	.+10     	; 0x61c <processHeaterControl+0x8a>
		processValue = adc_filtered >> 1;	// normal PID control
		
		// Process PID
		// Possibly hold PID in reset while disabled ?
		// Reset when setting is changed ?
		pid_output = processPID(setPoint, processValue);		
     612:	90 e0       	ldi	r25, 0x00	; 0
     614:	05 c0       	rjmp	.+10     	; 0x620 <processHeaterControl+0x8e>
					
					
		// If heater is disabled, override output
		if (!(heaterState & HEATER_ENABLED))
			pid_output = 0;
     616:	80 e0       	ldi	r24, 0x00	; 0
     618:	90 e0       	ldi	r25, 0x00	; 0
     61a:	02 c0       	rjmp	.+4      	; 0x620 <processHeaterControl+0x8e>
		// If unregulated mode is selected, set full power
		else if (p.setup_temp_value >= MAX_SET_TEMP)
			pid_output = HEATER_MAX_POWER;		// This mode must be used with care for calibration only
     61c:	84 e6       	ldi	r24, 0x64	; 100
     61e:	90 e0       	ldi	r25, 0x00	; 0
			
		// Set new heater power value	
		setHeaterPower(pid_output);	
     620:	d0 d7       	rcall	.+4000   	; 0x15c2 <setHeaterPower>
		
		
		//------- Debug --------//		
		// PID input:
		dbg_SetPointCelsius = (heaterState & HEATER_ENABLED) ? p.setup_temp_value : 0;
     622:	80 91 03 01 	lds	r24, 0x0103
     626:	98 2f       	mov	r25, r24
     628:	91 70       	andi	r25, 0x01	; 1
     62a:	80 ff       	sbrs	r24, 0
     62c:	03 c0       	rjmp	.+6      	; 0x634 <processHeaterControl+0xa2>
     62e:	80 91 b4 01 	lds	r24, 0x01B4
     632:	01 c0       	rjmp	.+2      	; 0x636 <processHeaterControl+0xa4>
     634:	80 e0       	ldi	r24, 0x00	; 0
     636:	80 93 ad 01 	sts	0x01AD, r24
		dbg_SetPointPID = (heaterState & HEATER_ENABLED) ? setPoint : 0;
     63a:	91 11       	cpse	r25, r1
     63c:	02 c0       	rjmp	.+4      	; 0x642 <processHeaterControl+0xb0>
     63e:	c0 e0       	ldi	r28, 0x00	; 0
     640:	d0 e0       	ldi	r29, 0x00	; 0
     642:	d0 93 bb 01 	sts	0x01BB, r29
     646:	c0 93 ba 01 	sts	0x01BA, r28
		dbg_RealTempCelsius = adc_filtered;
     64a:	80 91 3c 01 	lds	r24, 0x013C
     64e:	80 93 bc 01 	sts	0x01BC, r24
		dbg_RealTempPID = processValue;
     652:	10 93 b9 01 	sts	0x01B9, r17
     656:	00 93 b8 01 	sts	0x01B8, r16
		
	}	
		
	
	//----- LED indication ------//
	if (heaterState & HEATER_ENABLED)
     65a:	80 91 03 01 	lds	r24, 0x0103
     65e:	80 ff       	sbrs	r24, 0
     660:	06 c0       	rjmp	.+12     	; 0x66e <processHeaterControl+0xdc>
		setExtraLeds(LED_HEATER);
     662:	84 e0       	ldi	r24, 0x04	; 4
	else
		clearExtraLeds(LED_HEATER);
	
}
     664:	df 91       	pop	r29
     666:	cf 91       	pop	r28
     668:	1f 91       	pop	r17
     66a:	0f 91       	pop	r16
	}	
		
	
	//----- LED indication ------//
	if (heaterState & HEATER_ENABLED)
		setExtraLeds(LED_HEATER);
     66c:	1e c2       	rjmp	.+1084   	; 0xaaa <setExtraLeds>
	else
		clearExtraLeds(LED_HEATER);
     66e:	84 e0       	ldi	r24, 0x04	; 4
	
}
     670:	df 91       	pop	r29
     672:	cf 91       	pop	r28
     674:	1f 91       	pop	r17
     676:	0f 91       	pop	r16
	
	//----- LED indication ------//
	if (heaterState & HEATER_ENABLED)
		setExtraLeds(LED_HEATER);
	else
		clearExtraLeds(LED_HEATER);
     678:	1e c2       	rjmp	.+1084   	; 0xab6 <clearExtraLeds>

0000067a <processHeaterAlerts>:
// Function to process all heater alerts:
//	- sensor errors
//	- getting near to desired temperature
//	- continuous heating when disabled
void processHeaterAlerts(void)
{
     67a:	cf 93       	push	r28
     67c:	df 93       	push	r29
	static uint8_t tempAlertRange = TEMP_ALERT_RANGE;
	static int16_t refCapturedTemp = INT16_MAX;
	int16_t currentTemperature = adc_celsius;
     67e:	c0 91 83 01 	lds	r28, 0x0183
     682:	d0 91 84 01 	lds	r29, 0x0184
	
	// ADC sensor errors alert
	if (adc_status & (SENSOR_ERROR_NO_PRESENT | SENSOR_ERROR_SHORTED))
     686:	80 91 82 01 	lds	r24, 0x0182
     68a:	83 70       	andi	r24, 0x03	; 3
     68c:	59 f0       	breq	.+22     	; 0x6a4 <processHeaterAlerts+0x2a>
	{
		if (sys_timers.flags & EXPIRED_10SEC)
     68e:	80 91 8f 00 	lds	r24, 0x008F
     692:	81 ff       	sbrs	r24, 1
     694:	4c c0       	rjmp	.+152    	; 0x72e <processHeaterAlerts+0xb4>
		{
			// Enable beeper output regardless of menu setting
			OverrideSoundDisable();
     696:	c1 d9       	rcall	.-3198   	; 0xfffffa1a <__eeprom_end+0xff7ef9d4>
			SetBeeperFreq(800);
     698:	80 e2       	ldi	r24, 0x20	; 32
     69a:	93 e0       	ldi	r25, 0x03	; 3
     69c:	bc d9       	rcall	.-3208   	; 0xfffffa16 <__eeprom_end+0xff7ef9d0>
			StartBeep(2000);	
     69e:	80 ed       	ldi	r24, 0xD0	; 208
     6a0:	97 e0       	ldi	r25, 0x07	; 7
     6a2:	42 c0       	rjmp	.+132    	; 0x728 <processHeaterAlerts+0xae>
		return;
	}
	
	
	// Indicate reaching of desired temperature
	if ( (currentTemperature > p.setup_temp_value - tempAlertRange) && (currentTemperature < p.setup_temp_value + tempAlertRange) )
     6a4:	20 91 b4 01 	lds	r18, 0x01B4
     6a8:	30 e0       	ldi	r19, 0x00	; 0
     6aa:	60 91 79 00 	lds	r22, 0x0079
     6ae:	86 2f       	mov	r24, r22
     6b0:	90 e0       	ldi	r25, 0x00	; 0
     6b2:	a9 01       	movw	r20, r18
     6b4:	48 1b       	sub	r20, r24
     6b6:	59 0b       	sbc	r21, r25
     6b8:	4c 17       	cp	r20, r28
     6ba:	5d 07       	cpc	r21, r29
     6bc:	9c f4       	brge	.+38     	; 0x6e4 <processHeaterAlerts+0x6a>
     6be:	82 0f       	add	r24, r18
     6c0:	93 1f       	adc	r25, r19
     6c2:	c8 17       	cp	r28, r24
     6c4:	d9 07       	cpc	r29, r25
     6c6:	74 f4       	brge	.+28     	; 0x6e4 <processHeaterAlerts+0x6a>
	{
		if ((tempAlertRange == TEMP_ALERT_RANGE) && (heaterState & HEATER_ENABLED))
     6c8:	65 30       	cpi	r22, 0x05	; 5
     6ca:	51 f4       	brne	.+20     	; 0x6e0 <processHeaterAlerts+0x66>
     6cc:	80 91 03 01 	lds	r24, 0x0103
     6d0:	80 ff       	sbrs	r24, 0
     6d2:	06 c0       	rjmp	.+12     	; 0x6e0 <processHeaterAlerts+0x66>
		{
			SetBeeperFreq(1000);
     6d4:	88 ee       	ldi	r24, 0xE8	; 232
     6d6:	93 e0       	ldi	r25, 0x03	; 3
     6d8:	9e d9       	rcall	.-3268   	; 0xfffffa16 <__eeprom_end+0xff7ef9d0>
			StartBeep(400);
     6da:	80 e9       	ldi	r24, 0x90	; 144
     6dc:	91 e0       	ldi	r25, 0x01	; 1
     6de:	9c d9       	rcall	.-3272   	; 0xfffffa18 <__eeprom_end+0xff7ef9d2>
		}
		// Add some hysteresis
		tempAlertRange = TEMP_ALERT_RANGE + TEMP_ALERT_HYST;
     6e0:	8a e0       	ldi	r24, 0x0A	; 10
     6e2:	01 c0       	rjmp	.+2      	; 0x6e6 <processHeaterAlerts+0x6c>
	}			
	else
	{
		tempAlertRange = TEMP_ALERT_RANGE;
     6e4:	85 e0       	ldi	r24, 0x05	; 5
     6e6:	80 93 79 00 	sts	0x0079, r24
	// Growing temperature with heater disabled alert 
	// This alert is done regardless of global sound enable
	// A false triggering may occur if ambient temperature grows.
	// To reset the warning in this case just turn on heater for at least one systimer tick (50ms)
	// If heater is enabled, it is implied that user controls heating process
	if (heaterState & (HEATER_ENABLED | CALIBRATION_ACTIVE))
     6ea:	80 91 03 01 	lds	r24, 0x0103
     6ee:	83 70       	andi	r24, 0x03	; 3
     6f0:	09 f0       	breq	.+2      	; 0x6f4 <processHeaterAlerts+0x7a>
     6f2:	0b c0       	rjmp	.+22     	; 0x70a <processHeaterAlerts+0x90>
	{
		// Heater enabled, just save current temperature as reference
		// Same if calibration in progress, even if heater is disabled
		refCapturedTemp = currentTemperature;
	}
	else if (sys_timers.flags & EXPIRED_10SEC)
     6f4:	80 91 8f 00 	lds	r24, 0x008F
     6f8:	81 ff       	sbrs	r24, 1
     6fa:	19 c0       	rjmp	.+50     	; 0x72e <processHeaterAlerts+0xb4>
	{
		// Heater disabled. If temperature is falling,
		if (currentTemperature < refCapturedTemp)
     6fc:	80 91 7a 00 	lds	r24, 0x007A
     700:	90 91 7b 00 	lds	r25, 0x007B
     704:	c8 17       	cp	r28, r24
     706:	d9 07       	cpc	r29, r25
     708:	2c f4       	brge	.+10     	; 0x714 <processHeaterAlerts+0x9a>
		{
			// save current temperature as reference
			refCapturedTemp = currentTemperature;
     70a:	d0 93 7b 00 	sts	0x007B, r29
     70e:	c0 93 7a 00 	sts	0x007A, r28
     712:	0d c0       	rjmp	.+26     	; 0x72e <processHeaterAlerts+0xb4>
		else
		{
			// Heater is disabled. If current temperature is higher than reference + some safe interval,
			// there might be a hardware failure - short circuit, etc
			// BEEP like a devil  }:-(
			if (currentTemperature >= (refCapturedTemp + SAFE_TEMP_INTERVAL))
     714:	43 96       	adiw	r24, 0x13	; 19
     716:	8c 17       	cp	r24, r28
     718:	9d 07       	cpc	r25, r29
     71a:	4c f4       	brge	.+18     	; 0x72e <processHeaterAlerts+0xb4>
			{
				// Enable beeper output regardless of menu setting
				OverrideSoundDisable();
     71c:	7e d9       	rcall	.-3332   	; 0xfffffa1a <__eeprom_end+0xff7ef9d4>
				SetBeeperFreq(1500);
     71e:	8c ed       	ldi	r24, 0xDC	; 220
     720:	95 e0       	ldi	r25, 0x05	; 5
     722:	79 d9       	rcall	.-3342   	; 0xfffffa16 <__eeprom_end+0xff7ef9d0>
				StartBeep(5000);	
     724:	88 e8       	ldi	r24, 0x88	; 136
     726:	93 e1       	ldi	r25, 0x13	; 19
			}
		}
	}
	

}
     728:	df 91       	pop	r29
     72a:	cf 91       	pop	r28
			if (currentTemperature >= (refCapturedTemp + SAFE_TEMP_INTERVAL))
			{
				// Enable beeper output regardless of menu setting
				OverrideSoundDisable();
				SetBeeperFreq(1500);
				StartBeep(5000);	
     72c:	75 c9       	rjmp	.-3350   	; 0xfffffa18 <__eeprom_end+0xff7ef9d2>
			}
		}
	}
	

}
     72e:	df 91       	pop	r29
     730:	cf 91       	pop	r28
     732:	08 95       	ret

00000734 <saveCalibrationToEEPROM>:


void saveCalibrationToEEPROM(void)
{
	// Calibration parameters normally are only saved after calibrating 
	eeprom_update_block(&cp,&eeCalibrationParams,sizeof(cParams_t));	
     734:	46 e0       	ldi	r20, 0x06	; 6
     736:	50 e0       	ldi	r21, 0x00	; 0
     738:	61 e0       	ldi	r22, 0x01	; 1
     73a:	70 e0       	ldi	r23, 0x00	; 0
     73c:	8e ea       	ldi	r24, 0xAE	; 174
     73e:	91 e0       	ldi	r25, 0x01	; 1
     740:	c6 da       	rcall	.-2676   	; 0xfffffcce <__eeprom_end+0xff7efc88>
	#ifdef USE_EEPROM_CRC
	uint8_t new_crc_byte = getDataCRC(&cp,sizeof(cParams_t));
     742:	66 e0       	ldi	r22, 0x06	; 6
     744:	8e ea       	ldi	r24, 0xAE	; 174
     746:	91 e0       	ldi	r25, 0x01	; 1
     748:	75 de       	rcall	.-790    	; 0x434 <getDataCRC>
	eeprom_update_byte(&ee_cParamsCRC,new_crc_byte);
     74a:	68 2f       	mov	r22, r24
     74c:	80 e0       	ldi	r24, 0x00	; 0
     74e:	90 e0       	ldi	r25, 0x00	; 0
     750:	cd ca       	rjmp	.-2662   	; 0xfffffcec <__eeprom_end+0xff7efca6>

00000752 <saveGlobalParamsToEEPROM>:

void saveGlobalParamsToEEPROM(void)
{
	// Save global parameters to EEPROM
	// eeprom_update_block() updates only bytes that were changed
	eeprom_update_block(&p,&eeGlobalParams,sizeof(gParams_t));
     752:	44 e0       	ldi	r20, 0x04	; 4
     754:	50 e0       	ldi	r21, 0x00	; 0
     756:	68 e0       	ldi	r22, 0x08	; 8
     758:	70 e0       	ldi	r23, 0x00	; 0
     75a:	84 eb       	ldi	r24, 0xB4	; 180
     75c:	91 e0       	ldi	r25, 0x01	; 1
     75e:	b7 da       	rcall	.-2706   	; 0xfffffcce <__eeprom_end+0xff7efc88>
	#ifdef USE_EEPROM_CRC
	uint8_t new_crc_byte = getDataCRC(&p,sizeof(gParams_t));
     760:	64 e0       	ldi	r22, 0x04	; 4
     762:	84 eb       	ldi	r24, 0xB4	; 180
     764:	91 e0       	ldi	r25, 0x01	; 1
     766:	66 de       	rcall	.-820    	; 0x434 <getDataCRC>
	eeprom_update_byte(&ee_gParamsCRC,new_crc_byte);
     768:	68 2f       	mov	r22, r24
     76a:	87 e0       	ldi	r24, 0x07	; 7
     76c:	90 e0       	ldi	r25, 0x00	; 0
     76e:	be ca       	rjmp	.-2692   	; 0xfffffcec <__eeprom_end+0xff7efca6>

00000770 <restoreGlobalParams>:
	return crc_byte;
}


uint8_t restoreGlobalParams(void)
{	
     770:	cf 93       	push	r28
     772:	df 93       	push	r29
	uint8_t defaults_used = 0;
	
	// Restore global parameters - temperature setting, sound enable, etc.
	eeprom_read_block(&p,&eeGlobalParams,sizeof(gParams_t));
     774:	44 e0       	ldi	r20, 0x04	; 4
     776:	50 e0       	ldi	r21, 0x00	; 0
     778:	68 e0       	ldi	r22, 0x08	; 8
     77a:	70 e0       	ldi	r23, 0x00	; 0
     77c:	84 eb       	ldi	r24, 0xB4	; 180
     77e:	91 e0       	ldi	r25, 0x01	; 1
     780:	8e da       	rcall	.-2788   	; 0xfffffc9e <__eeprom_end+0xff7efc58>
	// Restore ADC calibration parameters
	eeprom_read_block(&cp,&eeCalibrationParams,sizeof(cParams_t));
     782:	46 e0       	ldi	r20, 0x06	; 6
     784:	50 e0       	ldi	r21, 0x00	; 0
     786:	61 e0       	ldi	r22, 0x01	; 1
     788:	70 e0       	ldi	r23, 0x00	; 0
     78a:	8e ea       	ldi	r24, 0xAE	; 174
     78c:	91 e0       	ldi	r25, 0x01	; 1
     78e:	87 da       	rcall	.-2802   	; 0xfffffc9e <__eeprom_end+0xff7efc58>
	#ifdef USE_EEPROM_CRC
	uint8_t crc_byte;
	uint8_t temp8u;
	
	//------- Check global params -------//
	crc_byte = getDataCRC(&p,sizeof(gParams_t));
     790:	64 e0       	ldi	r22, 0x04	; 4
     792:	84 eb       	ldi	r24, 0xB4	; 180
     794:	91 e0       	ldi	r25, 0x01	; 1
     796:	4e de       	rcall	.-868    	; 0x434 <getDataCRC>
     798:	c8 2f       	mov	r28, r24
	temp8u = eeprom_read_byte(&ee_gParamsCRC);
     79a:	87 e0       	ldi	r24, 0x07	; 7
     79c:	90 e0       	ldi	r25, 0x00	; 0
     79e:	8f da       	rcall	.-2786   	; 0xfffffcbe <__eeprom_end+0xff7efc78>
	// Restore global defaults if corrupted
	if (temp8u != crc_byte)
     7a0:	8c 17       	cp	r24, r28
     7a2:	49 f0       	breq	.+18     	; 0x7b6 <restoreGlobalParams+0x46>
	{
		PGM_read_block(&p,&pmGlobalDefaults,sizeof(gParams_t));
     7a4:	44 e0       	ldi	r20, 0x04	; 4
     7a6:	6c e2       	ldi	r22, 0x2C	; 44
     7a8:	70 e0       	ldi	r23, 0x00	; 0
     7aa:	84 eb       	ldi	r24, 0xB4	; 180
     7ac:	91 e0       	ldi	r25, 0x01	; 1
     7ae:	92 d8       	rcall	.-3804   	; 0xfffff8d4 <__eeprom_end+0xff7ef88e>
		// Save restored default values with correct CRC
		saveGlobalParamsToEEPROM();
     7b0:	d0 df       	rcall	.-96     	; 0x752 <saveGlobalParamsToEEPROM>
		defaults_used |= 0x01;
     7b2:	c1 e0       	ldi	r28, 0x01	; 1
     7b4:	01 c0       	rjmp	.+2      	; 0x7b8 <restoreGlobalParams+0x48>
}


uint8_t restoreGlobalParams(void)
{	
	uint8_t defaults_used = 0;
     7b6:	c0 e0       	ldi	r28, 0x00	; 0
		saveGlobalParamsToEEPROM();
		defaults_used |= 0x01;
	}
	
	//----- Check calibration params -----//
	crc_byte = getDataCRC(&cp,sizeof(cParams_t));
     7b8:	66 e0       	ldi	r22, 0x06	; 6
     7ba:	8e ea       	ldi	r24, 0xAE	; 174
     7bc:	91 e0       	ldi	r25, 0x01	; 1
     7be:	3a de       	rcall	.-908    	; 0x434 <getDataCRC>
     7c0:	d8 2f       	mov	r29, r24
	temp8u = eeprom_read_byte(&ee_cParamsCRC);
     7c2:	80 e0       	ldi	r24, 0x00	; 0
     7c4:	90 e0       	ldi	r25, 0x00	; 0
     7c6:	7b da       	rcall	.-2826   	; 0xfffffcbe <__eeprom_end+0xff7efc78>
	// Restore calibration defaults if corrupted
	if (temp8u != crc_byte)
     7c8:	8d 17       	cp	r24, r29
     7ca:	41 f0       	breq	.+16     	; 0x7dc <restoreGlobalParams+0x6c>
	{
		PGM_read_block(&cp,&pmCalibrationDefaults,sizeof(cParams_t));
     7cc:	46 e0       	ldi	r20, 0x06	; 6
     7ce:	66 e2       	ldi	r22, 0x26	; 38
     7d0:	70 e0       	ldi	r23, 0x00	; 0
     7d2:	8e ea       	ldi	r24, 0xAE	; 174
     7d4:	91 e0       	ldi	r25, 0x01	; 1
     7d6:	7e d8       	rcall	.-3844   	; 0xfffff8d4 <__eeprom_end+0xff7ef88e>
		// Save restored default values with correct CRC
		saveCalibrationToEEPROM();
     7d8:	ad df       	rcall	.-166    	; 0x734 <saveCalibrationToEEPROM>
		defaults_used |= 0x02;	
     7da:	c2 60       	ori	r28, 0x02	; 2
	}
	#endif
	
	return defaults_used;
}
     7dc:	8c 2f       	mov	r24, r28
     7de:	df 91       	pop	r29
     7e0:	cf 91       	pop	r28
     7e2:	08 95       	ret

000007e4 <exitPowerOff>:
}

void exitPowerOff(void)
{
	// Put all ports into HI-Z
	DDRB = 0x00;
     7e4:	17 ba       	out	0x17, r1	; 23
	PORTB = 0x00;
     7e6:	18 ba       	out	0x18, r1	; 24
	DDRC = 0x00;
     7e8:	14 ba       	out	0x14, r1	; 20
	PORTC = 0x00;
     7ea:	15 ba       	out	0x15, r1	; 21
	DDRD = 0x00;
     7ec:	11 ba       	out	0x11, r1	; 17
	PORTD = 0x00;
     7ee:	12 ba       	out	0x12, r1	; 18
	
	// Disable all interrupts
	cli();
     7f0:	f8 94       	cli
	
	saveGlobalParamsToEEPROM();
     7f2:	af df       	rcall	.-162    	; 0x752 <saveGlobalParamsToEEPROM>
     7f4:	ff cf       	rjmp	.-2      	; 0x7f4 <exitPowerOff+0x10>

000007f6 <fir_i16_i8>:
// FIR digital filter
// Samples: signed, 16-bit
// Coeffs:  signed, 8-bit
//---------------------------------------------//
int16_t fir_i16_i8(int16_t new_sample, int16_t *samples, filter8bit_core_t* iir_core)
{
     7f6:	cf 92       	push	r12
     7f8:	df 92       	push	r13
     7fa:	ef 92       	push	r14
     7fc:	ff 92       	push	r15
     7fe:	0f 93       	push	r16
     800:	1f 93       	push	r17
     802:	cf 93       	push	r28
     804:	df 93       	push	r29
     806:	8c 01       	movw	r16, r24
     808:	eb 01       	movw	r28, r22
     80a:	fa 01       	movw	r30, r20
	int32_t summ;
	uint8_t i;
	
	summ = new_sample * iir_core->coeffs[0];
     80c:	23 81       	ldd	r18, Z+3	; 0x03
     80e:	20 03       	mulsu	r18, r16
     810:	60 01       	movw	r12, r0
     812:	21 9f       	mul	r18, r17
     814:	d0 0c       	add	r13, r0
     816:	11 24       	eor	r1, r1
     818:	ee 24       	eor	r14, r14
     81a:	d7 fc       	sbrc	r13, 7
     81c:	e0 94       	com	r14
     81e:	fe 2c       	mov	r15, r14
	for (i=iir_core->n-1; i>0; i--)
     820:	40 81       	ld	r20, Z
     822:	1e c0       	rjmp	.+60     	; 0x860 <fir_i16_i8+0x6a>
	{
		samples[i] = samples[i-1];
     824:	84 2f       	mov	r24, r20
     826:	90 e0       	ldi	r25, 0x00	; 0
     828:	dc 01       	movw	r26, r24
     82a:	11 97       	sbiw	r26, 0x01	; 1
     82c:	aa 0f       	add	r26, r26
     82e:	bb 1f       	adc	r27, r27
     830:	ac 0f       	add	r26, r28
     832:	bd 1f       	adc	r27, r29
     834:	2d 91       	ld	r18, X+
     836:	3c 91       	ld	r19, X
     838:	dc 01       	movw	r26, r24
     83a:	aa 0f       	add	r26, r26
     83c:	bb 1f       	adc	r27, r27
     83e:	ac 0f       	add	r26, r28
     840:	bd 1f       	adc	r27, r29
     842:	2d 93       	st	X+, r18
     844:	3c 93       	st	X, r19
		summ += (int32_t)samples[i] * iir_core->coeffs[i];
     846:	df 01       	movw	r26, r30
     848:	a8 0f       	add	r26, r24
     84a:	b9 1f       	adc	r27, r25
     84c:	13 96       	adiw	r26, 0x03	; 3
     84e:	ac 91       	ld	r26, X
     850:	bb 27       	eor	r27, r27
     852:	a7 fd       	sbrc	r26, 7
     854:	b0 95       	com	r27
     856:	cb d9       	rcall	.-3178   	; 0xfffffbee <__eeprom_end+0xff7efba8>
     858:	c6 0e       	add	r12, r22
     85a:	d7 1e       	adc	r13, r23
     85c:	e8 1e       	adc	r14, r24
     85e:	f9 1e       	adc	r15, r25
{
	int32_t summ;
	uint8_t i;
	
	summ = new_sample * iir_core->coeffs[0];
	for (i=iir_core->n-1; i>0; i--)
     860:	41 50       	subi	r20, 0x01	; 1
     862:	01 f7       	brne	.-64     	; 0x824 <fir_i16_i8+0x2e>
	{
		samples[i] = samples[i-1];
		summ += (int32_t)samples[i] * iir_core->coeffs[i];
	}
	samples[0] = new_sample;
     864:	19 83       	std	Y+1, r17	; 0x01
     866:	08 83       	st	Y, r16
	return (int16_t)(summ / iir_core->dc_gain);
     868:	21 81       	ldd	r18, Z+1	; 0x01
     86a:	32 81       	ldd	r19, Z+2	; 0x02
     86c:	40 e0       	ldi	r20, 0x00	; 0
     86e:	50 e0       	ldi	r21, 0x00	; 0
     870:	c7 01       	movw	r24, r14
     872:	b6 01       	movw	r22, r12
     874:	a1 d9       	rcall	.-3262   	; 0xfffffbb8 <__eeprom_end+0xff7efb72>
}
     876:	c9 01       	movw	r24, r18
     878:	df 91       	pop	r29
     87a:	cf 91       	pop	r28
     87c:	1f 91       	pop	r17
     87e:	0f 91       	pop	r16
     880:	ff 90       	pop	r15
     882:	ef 90       	pop	r14
     884:	df 90       	pop	r13
     886:	cf 90       	pop	r12
     888:	08 95       	ret

0000088a <decode_led_char>:
//---------------------------------------------//
// Decodes normal string literal to the
//	7-segment representation
//---------------------------------------------//
static uint8_t decode_led_char(char c)
{
     88a:	20 e0       	ldi	r18, 0x00	; 0
     88c:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t i;
	encode_7seg_pair encode_pair;
	for (i = 0; i < sizeof(led_encode_table)/sizeof(encode_7seg_pair); i++  )
	{
		encode_pair.code = pgm_read_byte(&led_encode_table[i].code);
     88e:	a9 01       	movw	r20, r18
     890:	44 0f       	add	r20, r20
     892:	55 1f       	adc	r21, r21
     894:	fa 01       	movw	r30, r20
     896:	e0 5d       	subi	r30, 0xD0	; 208
     898:	ff 4f       	sbci	r31, 0xFF	; 255
     89a:	e4 91       	lpm	r30, Z
		if (encode_pair.code == c)
     89c:	e8 13       	cpse	r30, r24
     89e:	05 c0       	rjmp	.+10     	; 0x8aa <decode_led_char+0x20>
		{
			i = pgm_read_byte(&led_encode_table[i].segdata);
     8a0:	fa 01       	movw	r30, r20
     8a2:	ef 5c       	subi	r30, 0xCF	; 207
     8a4:	ff 4f       	sbci	r31, 0xFF	; 255
     8a6:	84 91       	lpm	r24, Z
     8a8:	08 95       	ret
     8aa:	2f 5f       	subi	r18, 0xFF	; 255
     8ac:	3f 4f       	sbci	r19, 0xFF	; 255
//---------------------------------------------//
static uint8_t decode_led_char(char c)
{
	uint8_t i;
	encode_7seg_pair encode_pair;
	for (i = 0; i < sizeof(led_encode_table)/sizeof(encode_7seg_pair); i++  )
     8ae:	2c 31       	cpi	r18, 0x1C	; 28
     8b0:	31 05       	cpc	r19, r1
     8b2:	69 f7       	brne	.-38     	; 0x88e <decode_led_char+0x4>
			return i;
		}		
	}			
	// No item was found - return argument value
	return  c;
}
     8b4:	08 95       	ret

000008b6 <wrap_led_buffer_index>:
//---------------------------------------------//
// Ensures that index is inside the buffer
// -128 <= index <= 127
//---------------------------------------------//
static uint8_t wrap_led_buffer_index(int8_t buf_index)
{
     8b6:	28 2f       	mov	r18, r24
	uint8_t new_index_u;
	new_index_u = (uint8_t) ((buf_index < 0) ? -buf_index : buf_index);
     8b8:	87 fd       	sbrc	r24, 7
     8ba:	81 95       	neg	r24
	if (new_index_u >= LED_BUFFER_LENGTH)
     8bc:	8e 30       	cpi	r24, 0x0E	; 14
     8be:	18 f0       	brcs	.+6      	; 0x8c6 <wrap_led_buffer_index+0x10>
		new_index_u = new_index_u % LED_BUFFER_LENGTH;
     8c0:	6e e0       	ldi	r22, 0x0E	; 14
     8c2:	5b d9       	rcall	.-3402   	; 0xfffffb7a <__eeprom_end+0xff7efb34>
     8c4:	89 2f       	mov	r24, r25
	new_index_u = ((buf_index >= 0) || (new_index_u == 0)) ? new_index_u :  LED_BUFFER_LENGTH - new_index_u ;
     8c6:	27 ff       	sbrs	r18, 7
     8c8:	05 c0       	rjmp	.+10     	; 0x8d4 <wrap_led_buffer_index+0x1e>
     8ca:	88 23       	and	r24, r24
     8cc:	19 f0       	breq	.+6      	; 0x8d4 <wrap_led_buffer_index+0x1e>
     8ce:	9e e0       	ldi	r25, 0x0E	; 14
     8d0:	98 1b       	sub	r25, r24
     8d2:	89 2f       	mov	r24, r25
	return new_index_u;
}
     8d4:	08 95       	ret

000008d6 <processLedIndicator>:
// Call this function N times per sec to get N/NUM_DIGITS_TOTAL display update rate, where
// NUM_DIGITS_TOTAL is number_of_digits_of_LED_display if no extra LEDs are used or
// (number_of_digits_of_LED_display + 1) otherwise.
//---------------------------------------------//
void processLedIndicator()
{
     8d6:	cf 93       	push	r28
	uint8_t next_wActivePos;
	
	// Turn off segments
	#ifdef CLEAN_OPERATION
	disable_led_segments();
     8d8:	21 d1       	rcall	.+578    	; 0xb1c <disable_led_segments>
	#endif
	
	
	// Perform regular shift
	led_clock_pulse(!LED_DIGIT_ACT_LVL);
     8da:	81 e0       	ldi	r24, 0x01	; 1
     8dc:	f3 d0       	rcall	.+486    	; 0xac4 <led_clock_pulse>
	
	// Switch on active window item position
	switch (wActivePos)
     8de:	c0 91 06 01 	lds	r28, 0x0106
     8e2:	cc 23       	and	r28, r28
     8e4:	19 f0       	breq	.+6      	; 0x8ec <processLedIndicator+0x16>
     8e6:	c6 30       	cpi	r28, 0x06	; 6
     8e8:	c1 f5       	brne	.+112    	; 0x95a <processLedIndicator+0x84>
     8ea:	0f c0       	rjmp	.+30     	; 0x90a <processLedIndicator+0x34>
	case 0:
		// Get buttons
		#ifndef CLEAN_OPERATION
		disable_led_segments();
		#endif
		enable_led_segments_pullups();
     8ec:	09 d1       	rcall	.+530    	; 0xb00 <enable_led_segments_pullups>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     8ee:	85 e3       	ldi	r24, 0x35	; 53
     8f0:	8a 95       	dec	r24
     8f2:	f1 f7       	brne	.-4      	; 0x8f0 <processLedIndicator+0x1a>
     8f4:	00 00       	nop
		_delay_us(PULLUP_DELAY_US);
		capture_button_state();
     8f6:	19 d1       	rcall	.+562    	; 0xb2a <capture_button_state>
		#ifndef CLEAN_OPERATION
		enable_led_segments();
		#endif
		// Start new cycle with active digit level
		led_clock_pulse(LED_DIGIT_ACT_LVL);
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	e4 d0       	rcall	.+456    	; 0xac4 <led_clock_pulse>
		// Always start new cycle from specified buffer start position
		bufActivePos = wStartPos;
     8fc:	80 91 be 01 	lds	r24, 0x01BE
     900:	80 93 05 01 	sts	0x0105, r24
		next_wActivePos = wActivePos + 1;
     904:	c0 91 06 01 	lds	r28, 0x0106
     908:	28 c0       	rjmp	.+80     	; 0x95a <processLedIndicator+0x84>
//---------------------------------------------//
// Performs window shifting
//---------------------------------------------//
static void processWindowShifter(void)
{
	if (shifterState == LED_SHIFT_DONE)
     90a:	80 91 bf 01 	lds	r24, 0x01BF
     90e:	81 11       	cpse	r24, r1
     910:	01 c0       	rjmp	.+2      	; 0x914 <processLedIndicator+0x3e>
     912:	1b c0       	rjmp	.+54     	; 0x94a <processLedIndicator+0x74>
		return;
	
	// Process shift timer
	processSoftTimer8b(&shiftTimer);	
     914:	87 e0       	ldi	r24, 0x07	; 7
     916:	91 e0       	ldi	r25, 0x01	; 1
     918:	e8 d7       	rcall	.+4048   	; 0x18ea <processSoftTimer8b>
	
	if (shiftTimer.FTop)
     91a:	80 91 07 01 	lds	r24, 0x0107
     91e:	85 ff       	sbrs	r24, 5
     920:	14 c0       	rjmp	.+40     	; 0x94a <processLedIndicator+0x74>
	{
		// Check if finished
		if (wStartPos == bufStartPos)	
     922:	80 91 be 01 	lds	r24, 0x01BE
     926:	90 91 c0 01 	lds	r25, 0x01C0
     92a:	89 13       	cpse	r24, r25
     92c:	03 c0       	rjmp	.+6      	; 0x934 <processLedIndicator+0x5e>
		{
			// Update state
			shifterState = LED_SHIFT_DONE;
     92e:	10 92 bf 01 	sts	0x01BF, r1
     932:	0b c0       	rjmp	.+22     	; 0x94a <processLedIndicator+0x74>
		}
		else if (shifterState == LED_SHIFT_RIGHT)
     934:	90 91 bf 01 	lds	r25, 0x01BF
     938:	92 30       	cpi	r25, 0x02	; 2
     93a:	49 f4       	brne	.+18     	; 0x94e <processLedIndicator+0x78>
// Increments index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t inc_buffer_position(uint8_t position)
{
	return (position >= LED_BUFFER_LENGTH - 1) ? 0 : position + 1;
     93c:	8d 30       	cpi	r24, 0x0D	; 13
     93e:	10 f4       	brcc	.+4      	; 0x944 <processLedIndicator+0x6e>
     940:	8f 5f       	subi	r24, 0xFF	; 255
     942:	01 c0       	rjmp	.+2      	; 0x946 <processLedIndicator+0x70>
     944:	80 e0       	ldi	r24, 0x00	; 0
			// Update state
			shifterState = LED_SHIFT_DONE;
		}
		else if (shifterState == LED_SHIFT_RIGHT)
		{
			wStartPos = inc_buffer_position(wStartPos);	
     946:	80 93 be 01 	sts	0x01BE, r24
		// Always start new cycle from specified buffer start position
		bufActivePos = wStartPos;
		next_wActivePos = wActivePos + 1;
		break;
	case NUM_DIGITS_TOTAL-1:
		next_wActivePos = 0;
     94a:	c0 e0       	ldi	r28, 0x00	; 0
     94c:	07 c0       	rjmp	.+14     	; 0x95c <processLedIndicator+0x86>
// Decrements index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t dec_buffer_position(uint8_t position)
{
	return (position == 0) ? LED_BUFFER_LENGTH - 1 : position - 1;
     94e:	88 23       	and	r24, r24
     950:	11 f0       	breq	.+4      	; 0x956 <processLedIndicator+0x80>
     952:	81 50       	subi	r24, 0x01	; 1
     954:	f8 cf       	rjmp	.-16     	; 0x946 <processLedIndicator+0x70>
     956:	8d e0       	ldi	r24, 0x0D	; 13
     958:	f6 cf       	rjmp	.-20     	; 0x946 <processLedIndicator+0x70>
		next_wActivePos = 0;
		// Shift LED window
		processWindowShifter();	
		break;
	default:
		next_wActivePos = wActivePos + 1;
     95a:	cf 5f       	subi	r28, 0xFF	; 255
		break;
	}		
	
	#ifdef 	USE_EXTRA_LED_DIGIT
	if (wActivePos == EXTRA_DIGIT_NUM)
     95c:	80 91 06 01 	lds	r24, 0x0106
     960:	86 30       	cpi	r24, 0x06	; 6
     962:	21 f4       	brne	.+8      	; 0x96c <processLedIndicator+0x96>
	{
		// Output separate LEDs state
		set_led_segments(extra_led_state);
     964:	80 91 bd 01 	lds	r24, 0x01BD
     968:	bd d0       	rcall	.+378    	; 0xae4 <set_led_segments>
     96a:	10 c0       	rjmp	.+32     	; 0x98c <processLedIndicator+0xb6>
	}
	else
	#endif
	{
		// Output new segment data
		set_led_segments(led_data_buffer[bufActivePos]);
     96c:	e0 91 05 01 	lds	r30, 0x0105
     970:	f0 e0       	ldi	r31, 0x00	; 0
     972:	ef 53       	subi	r30, 0x3F	; 63
     974:	fe 4f       	sbci	r31, 0xFE	; 254
     976:	80 81       	ld	r24, Z
     978:	b5 d0       	rcall	.+362    	; 0xae4 <set_led_segments>
		// Wrap around buffer length
		bufActivePos = inc_buffer_position(bufActivePos );
     97a:	80 91 05 01 	lds	r24, 0x0105
// Increments index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t inc_buffer_position(uint8_t position)
{
	return (position >= LED_BUFFER_LENGTH - 1) ? 0 : position + 1;
     97e:	8d 30       	cpi	r24, 0x0D	; 13
     980:	10 f4       	brcc	.+4      	; 0x986 <processLedIndicator+0xb0>
     982:	8f 5f       	subi	r24, 0xFF	; 255
     984:	01 c0       	rjmp	.+2      	; 0x988 <processLedIndicator+0xb2>
     986:	80 e0       	ldi	r24, 0x00	; 0
	#endif
	{
		// Output new segment data
		set_led_segments(led_data_buffer[bufActivePos]);
		// Wrap around buffer length
		bufActivePos = inc_buffer_position(bufActivePos );
     988:	80 93 05 01 	sts	0x0105, r24
	}
		
	wActivePos = next_wActivePos;
     98c:	c0 93 06 01 	sts	0x0106, r28
	
	#ifdef CLEAN_OPERATION
	enable_led_segments();
	#endif

}
     990:	cf 91       	pop	r28
	}
		
	wActivePos = next_wActivePos;
	
	#ifdef CLEAN_OPERATION
	enable_led_segments();
     992:	bd c0       	rjmp	.+378    	; 0xb0e <enable_led_segments>

00000994 <fillLedBuffer>:
//---------------------------------------------//
// Fills buffer from (bufStartPos + offset) 
//	position with single char
//---------------------------------------------//
void fillLedBuffer(int8_t offset, uint8_t length, char c)
{
     994:	0f 93       	push	r16
     996:	1f 93       	push	r17
     998:	cf 93       	push	r28
     99a:	df 93       	push	r29
     99c:	1f 92       	push	r1
     99e:	cd b7       	in	r28, 0x3d	; 61
     9a0:	de b7       	in	r29, 0x3e	; 62
     9a2:	18 2f       	mov	r17, r24
     9a4:	84 2f       	mov	r24, r20
	uint8_t val = decode_led_char(c);
     9a6:	69 83       	std	Y+1, r22	; 0x01
     9a8:	70 df       	rcall	.-288    	; 0x88a <decode_led_char>
     9aa:	08 2f       	mov	r16, r24
	// Ensure index is inside the buffer
	uint8_t position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
     9ac:	80 91 c0 01 	lds	r24, 0x01C0
     9b0:	81 0f       	add	r24, r17
     9b2:	81 df       	rcall	.-254    	; 0x8b6 <wrap_led_buffer_index>
	while(length--)
     9b4:	69 81       	ldd	r22, Y+1	; 0x01
     9b6:	0a c0       	rjmp	.+20     	; 0x9cc <fillLedBuffer+0x38>
	{
		led_data_buffer[position] = val;
     9b8:	e8 2f       	mov	r30, r24
     9ba:	f0 e0       	ldi	r31, 0x00	; 0
     9bc:	ef 53       	subi	r30, 0x3F	; 63
     9be:	fe 4f       	sbci	r31, 0xFE	; 254
     9c0:	00 83       	st	Z, r16
// Increments index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t inc_buffer_position(uint8_t position)
{
	return (position >= LED_BUFFER_LENGTH - 1) ? 0 : position + 1;
     9c2:	8d 30       	cpi	r24, 0x0D	; 13
     9c4:	10 f4       	brcc	.+4      	; 0x9ca <fillLedBuffer+0x36>
     9c6:	8f 5f       	subi	r24, 0xFF	; 255
     9c8:	01 c0       	rjmp	.+2      	; 0x9cc <fillLedBuffer+0x38>
     9ca:	80 e0       	ldi	r24, 0x00	; 0
void fillLedBuffer(int8_t offset, uint8_t length, char c)
{
	uint8_t val = decode_led_char(c);
	// Ensure index is inside the buffer
	uint8_t position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
	while(length--)
     9cc:	61 50       	subi	r22, 0x01	; 1
     9ce:	a0 f7       	brcc	.-24     	; 0x9b8 <fillLedBuffer+0x24>
	{
		led_data_buffer[position] = val;
		position = inc_buffer_position(position);
	}
}
     9d0:	0f 90       	pop	r0
     9d2:	df 91       	pop	r29
     9d4:	cf 91       	pop	r28
     9d6:	1f 91       	pop	r17
     9d8:	0f 91       	pop	r16
     9da:	08 95       	ret

000009dc <startShiftingWindowLeft>:
//	LED window left 
//---------------------------------------------//
void startShiftingWindowLeft(void)
{
	// Clear spaces between menu states
	fillLedBuffer(-2,2,' ');
     9dc:	40 e2       	ldi	r20, 0x20	; 32
     9de:	62 e0       	ldi	r22, 0x02	; 2
     9e0:	8e ef       	ldi	r24, 0xFE	; 254
     9e2:	d8 df       	rcall	.-80     	; 0x994 <fillLedBuffer>
	// Set new buffer position for writing
	bufStartPos = wrap_led_buffer_index( (int8_t)bufStartPos - (NUM_DIGITS + 2) );
     9e4:	80 91 c0 01 	lds	r24, 0x01C0
     9e8:	88 50       	subi	r24, 0x08	; 8
     9ea:	65 df       	rcall	.-310    	; 0x8b6 <wrap_led_buffer_index>
     9ec:	80 93 c0 01 	sts	0x01C0, r24
	// Set shifter state
	shifterState = LED_SHIFT_LEFT;
     9f0:	81 e0       	ldi	r24, 0x01	; 1
     9f2:	80 93 bf 01 	sts	0x01BF, r24
     9f6:	08 95       	ret

000009f8 <startShiftingWindowRight>:
//	LED window right 
//---------------------------------------------//
void startShiftingWindowRight(void)
{
	// Clear spaces between menu states
	fillLedBuffer(NUM_DIGITS,2,' ');
     9f8:	40 e2       	ldi	r20, 0x20	; 32
     9fa:	62 e0       	ldi	r22, 0x02	; 2
     9fc:	86 e0       	ldi	r24, 0x06	; 6
     9fe:	ca df       	rcall	.-108    	; 0x994 <fillLedBuffer>
	// Set new buffer position for writing
	bufStartPos = wrap_led_buffer_index( (int8_t)bufStartPos + NUM_DIGITS + 2 );
     a00:	80 91 c0 01 	lds	r24, 0x01C0
     a04:	88 5f       	subi	r24, 0xF8	; 248
     a06:	57 df       	rcall	.-338    	; 0x8b6 <wrap_led_buffer_index>
     a08:	80 93 c0 01 	sts	0x01C0, r24
	// Set shifter state
	shifterState = LED_SHIFT_RIGHT;
     a0c:	82 e0       	ldi	r24, 0x02	; 2
     a0e:	80 93 bf 01 	sts	0x01BF, r24
     a12:	08 95       	ret

00000a14 <initLedIndicator>:
//---------------------------------------------//
//	Initialization
//	Call this function at start of your program
//---------------------------------------------//
void initLedIndicator()
{
     a14:	cf 93       	push	r28
	uint8_t i;
	// First disable outputs
	disable_led_segments();
     a16:	82 d0       	rcall	.+260    	; 0xb1c <disable_led_segments>
     a18:	c7 e0       	ldi	r28, 0x07	; 7
	// Fill shift register with non-active levels
	for (i=0;i<NUM_DIGITS_TOTAL;i++)
	{
		led_clock_pulse(!LED_DIGIT_ACT_LVL);
     a1a:	81 e0       	ldi	r24, 0x01	; 1
     a1c:	53 d0       	rcall	.+166    	; 0xac4 <led_clock_pulse>
     a1e:	c1 50       	subi	r28, 0x01	; 1
{
	uint8_t i;
	// First disable outputs
	disable_led_segments();
	// Fill shift register with non-active levels
	for (i=0;i<NUM_DIGITS_TOTAL;i++)
     a20:	e1 f7       	brne	.-8      	; 0xa1a <initLedIndicator+0x6>
	{
		led_clock_pulse(!LED_DIGIT_ACT_LVL);
	}
	// Now enable outputs
	enable_led_segments();
     a22:	75 d0       	rcall	.+234    	; 0xb0e <enable_led_segments>
	
	// Reset pointers
	wStartPos = 0;
     a24:	10 92 be 01 	sts	0x01BE, r1
	bufStartPos = 0;
     a28:	10 92 c0 01 	sts	0x01C0, r1
	bufActivePos = 0;
     a2c:	10 92 05 01 	sts	0x0105, r1
	wActivePos = 0;
     a30:	10 92 06 01 	sts	0x0106, r1
	#ifdef 	USE_EXTRA_LED_DIGIT
	extra_led_state = 0;
     a34:	10 92 bd 01 	sts	0x01BD, r1
	#endif
	
	// Clear the buffer 
	fillLedBuffer(0,LED_BUFFER_LENGTH,' ');
     a38:	40 e2       	ldi	r20, 0x20	; 32
     a3a:	6e e0       	ldi	r22, 0x0E	; 14
     a3c:	80 e0       	ldi	r24, 0x00	; 0
     a3e:	aa df       	rcall	.-172    	; 0x994 <fillLedBuffer>
	
	// Initialize shift timer - always enabled, but 
	//	processed only when shifting is active
	shifterState = LED_SHIFT_DONE;
     a40:	10 92 bf 01 	sts	0x01BF, r1
	shiftTimer.Enabled = 1;
     a44:	80 91 07 01 	lds	r24, 0x0107
	shiftTimer.RunOnce = 0;
     a48:	81 60       	ori	r24, 0x01	; 1
     a4a:	8d 7f       	andi	r24, 0xFD	; 253
     a4c:	80 93 07 01 	sts	0x0107, r24
	shiftTimer.Top = LED_SHIFT_INTERVAL-1;
     a50:	89 e0       	ldi	r24, 0x09	; 9
     a52:	80 93 09 01 	sts	0x0109, r24
}
     a56:	cf 91       	pop	r28
     a58:	08 95       	ret

00000a5a <printLedBuffer>:
// Arguments:
//		offset	- buffer index to start with (with respect to bufStartPos)
//		str - null-terminated char string
//---------------------------------------------//		
void printLedBuffer(int8_t offset, char* str)
{
     a5a:	1f 93       	push	r17
     a5c:	cf 93       	push	r28
     a5e:	df 93       	push	r29
     a60:	eb 01       	movw	r28, r22
	char c;
	uint8_t decoded_sym;
	// Ensure index is inside the buffer
	uint8_t buffer_position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
     a62:	90 91 c0 01 	lds	r25, 0x01C0
     a66:	89 0f       	add	r24, r25
     a68:	26 df       	rcall	.-436    	; 0x8b6 <wrap_led_buffer_index>
     a6a:	18 2f       	mov	r17, r24
	// Output chars
	while((c = *str++))
     a6c:	0b c0       	rjmp	.+22     	; 0xa84 <printLedBuffer+0x2a>
	{
		decoded_sym = decode_led_char(c);
     a6e:	0d df       	rcall	.-486    	; 0x88a <decode_led_char>
		led_data_buffer[buffer_position] = decoded_sym;
     a70:	e1 2f       	mov	r30, r17
     a72:	f0 e0       	ldi	r31, 0x00	; 0
     a74:	ef 53       	subi	r30, 0x3F	; 63
     a76:	fe 4f       	sbci	r31, 0xFE	; 254
     a78:	80 83       	st	Z, r24
// Increments index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t inc_buffer_position(uint8_t position)
{
	return (position >= LED_BUFFER_LENGTH - 1) ? 0 : position + 1;
     a7a:	1d 30       	cpi	r17, 0x0D	; 13
     a7c:	10 f4       	brcc	.+4      	; 0xa82 <printLedBuffer+0x28>
     a7e:	1f 5f       	subi	r17, 0xFF	; 255
     a80:	01 c0       	rjmp	.+2      	; 0xa84 <printLedBuffer+0x2a>
     a82:	10 e0       	ldi	r17, 0x00	; 0
	char c;
	uint8_t decoded_sym;
	// Ensure index is inside the buffer
	uint8_t buffer_position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
	// Output chars
	while((c = *str++))
     a84:	89 91       	ld	r24, Y+
     a86:	81 11       	cpse	r24, r1
     a88:	f2 cf       	rjmp	.-28     	; 0xa6e <printLedBuffer+0x14>
	{
		decoded_sym = decode_led_char(c);
		led_data_buffer[buffer_position] = decoded_sym;
		buffer_position = inc_buffer_position(buffer_position);
	}
}
     a8a:	df 91       	pop	r29
     a8c:	cf 91       	pop	r28
     a8e:	1f 91       	pop	r17
     a90:	08 95       	ret

00000a92 <setComma>:
//	buffer cell
//---------------------------------------------//
void setComma(int8_t offset)
{
	// Ensure index is inside the buffer
	uint8_t position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
     a92:	90 91 c0 01 	lds	r25, 0x01C0
     a96:	89 0f       	add	r24, r25
     a98:	0e df       	rcall	.-484    	; 0x8b6 <wrap_led_buffer_index>
	led_data_buffer[position] |= (SEGH);
     a9a:	e8 2f       	mov	r30, r24
     a9c:	f0 e0       	ldi	r31, 0x00	; 0
     a9e:	ef 53       	subi	r30, 0x3F	; 63
     aa0:	fe 4f       	sbci	r31, 0xFE	; 254
     aa2:	80 81       	ld	r24, Z
     aa4:	80 68       	ori	r24, 0x80	; 128
     aa6:	80 83       	st	Z, r24
     aa8:	08 95       	ret

00000aaa <setExtraLeds>:
// Argument is ORed with current LED state
//---------------------------------------------//
inline void setExtraLeds(uint8_t leds_set_value)
{
		//asm("cli");
		extra_led_state |= leds_set_value;
     aaa:	90 91 bd 01 	lds	r25, 0x01BD
     aae:	98 2b       	or	r25, r24
     ab0:	90 93 bd 01 	sts	0x01BD, r25
     ab4:	08 95       	ret

00000ab6 <clearExtraLeds>:
// Argument is AND NOTed with current LED state
//---------------------------------------------//
inline void clearExtraLeds(uint8_t leds_clear_value)
{
		//asm("cli");
		extra_led_state &= ~leds_clear_value;
     ab6:	90 91 bd 01 	lds	r25, 0x01BD
     aba:	80 95       	com	r24
     abc:	89 23       	and	r24, r25
     abe:	80 93 bd 01 	sts	0x01BD, r24
     ac2:	08 95       	ret

00000ac4 <led_clock_pulse>:


// Clocks in bit into the shift register
void led_clock_pulse(uint8_t bit)
{
	if (bit)
     ac4:	88 23       	and	r24, r24
     ac6:	11 f0       	breq	.+4      	; 0xacc <led_clock_pulse+0x8>
		PORTB |= (1<<PB_LED_DOUT);
     ac8:	c0 9a       	sbi	0x18, 0	; 24
     aca:	01 c0       	rjmp	.+2      	; 0xace <led_clock_pulse+0xa>
	else
		PORTB &= ~(1<<PB_LED_DOUT);
     acc:	c0 98       	cbi	0x18, 0	; 24
     ace:	8a e1       	ldi	r24, 0x1A	; 26
     ad0:	8a 95       	dec	r24
     ad2:	f1 f7       	brne	.-4      	; 0xad0 <led_clock_pulse+0xc>
     ad4:	00 c0       	rjmp	.+0      	; 0xad6 <led_clock_pulse+0x12>
	_delay_us(SETUP_DELAY_US);
	PORTB |= (1<<PB_LED_CLK);
     ad6:	c2 9a       	sbi	0x18, 2	; 24
     ad8:	8a e1       	ldi	r24, 0x1A	; 26
     ada:	8a 95       	dec	r24
     adc:	f1 f7       	brne	.-4      	; 0xada <led_clock_pulse+0x16>
     ade:	00 c0       	rjmp	.+0      	; 0xae0 <led_clock_pulse+0x1c>
	_delay_us(SHIFT_DELAY_US);
	PORTB &= ~(1<<PB_LED_CLK);
     ae0:	c2 98       	cbi	0x18, 2	; 24
     ae2:	08 95       	ret

00000ae4 <set_led_segments>:
// Outputs decoded segment data to port bits
void set_led_segments(uint8_t seg_ch)
{
	uint8_t pdat;
	seg_ch ^= LED_SEGMENT_MASK;
	pdat = PORTC & ~( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
     ae4:	25 b3       	in	r18, 0x15	; 21
	pdat |= (seg_ch & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
     ae6:	98 2f       	mov	r25, r24
     ae8:	9f 71       	andi	r25, 0x1F	; 31
// Outputs decoded segment data to port bits
void set_led_segments(uint8_t seg_ch)
{
	uint8_t pdat;
	seg_ch ^= LED_SEGMENT_MASK;
	pdat = PORTC & ~( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
     aea:	20 7e       	andi	r18, 0xE0	; 224
	pdat |= (seg_ch & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
     aec:	92 2b       	or	r25, r18
	PORTC = pdat;
     aee:	95 bb       	out	0x15, r25	; 21
	seg_ch >>= 2;
	pdat = PORTB & ~( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     af0:	98 b3       	in	r25, 0x18	; 24
	uint8_t pdat;
	seg_ch ^= LED_SEGMENT_MASK;
	pdat = PORTC & ~( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
	pdat |= (seg_ch & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
	PORTC = pdat;
	seg_ch >>= 2;
     af2:	86 95       	lsr	r24
     af4:	86 95       	lsr	r24
	pdat = PORTB & ~( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
	pdat |= (seg_ch & ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) ));
     af6:	88 73       	andi	r24, 0x38	; 56
	seg_ch ^= LED_SEGMENT_MASK;
	pdat = PORTC & ~( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
	pdat |= (seg_ch & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
	PORTC = pdat;
	seg_ch >>= 2;
	pdat = PORTB & ~( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     af8:	97 7c       	andi	r25, 0xC7	; 199
	pdat |= (seg_ch & ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) ));
     afa:	89 2b       	or	r24, r25
	PORTB = pdat;
     afc:	88 bb       	out	0x18, r24	; 24
     afe:	08 95       	ret

00000b00 <enable_led_segments_pullups>:

// Turns segment port bits to HI-Z and
// enables pull-ups
void enable_led_segments_pullups()
{
	PORTC |= ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
     b00:	85 b3       	in	r24, 0x15	; 21
     b02:	8f 61       	ori	r24, 0x1F	; 31
     b04:	85 bb       	out	0x15, r24	; 21
	PORTB |= ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     b06:	88 b3       	in	r24, 0x18	; 24
     b08:	88 63       	ori	r24, 0x38	; 56
     b0a:	88 bb       	out	0x18, r24	; 24
     b0c:	08 95       	ret

00000b0e <enable_led_segments>:
}	

void enable_led_segments()
{
	DDRC |= ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
     b0e:	84 b3       	in	r24, 0x14	; 20
     b10:	8f 61       	ori	r24, 0x1F	; 31
     b12:	84 bb       	out	0x14, r24	; 20
	DDRB |= ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     b14:	87 b3       	in	r24, 0x17	; 23
     b16:	88 63       	ori	r24, 0x38	; 56
     b18:	87 bb       	out	0x17, r24	; 23
     b1a:	08 95       	ret

00000b1c <disable_led_segments>:
}

void disable_led_segments()
{
	DDRC &= ~( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
     b1c:	84 b3       	in	r24, 0x14	; 20
     b1e:	80 7e       	andi	r24, 0xE0	; 224
     b20:	84 bb       	out	0x14, r24	; 20
	DDRB &= ~( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     b22:	87 b3       	in	r24, 0x17	; 23
     b24:	87 7c       	andi	r24, 0xC7	; 199
     b26:	87 bb       	out	0x17, r24	; 23
     b28:	08 95       	ret

00000b2a <capture_button_state>:


void capture_button_state()
{
	uint8_t pdat;
	pdat = PINB  & ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     b2a:	86 b3       	in	r24, 0x16	; 22
     b2c:	88 73       	andi	r24, 0x38	; 56
	pdat <<= 2;
	pdat |= (PINC & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
     b2e:	93 b3       	in	r25, 0x13	; 19

void capture_button_state()
{
	uint8_t pdat;
	pdat = PINB  & ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
	pdat <<= 2;
     b30:	88 0f       	add	r24, r24
     b32:	88 0f       	add	r24, r24
	pdat |= (PINC & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
     b34:	9f 71       	andi	r25, 0x1F	; 31
     b36:	89 2b       	or	r24, r25
	raw_button_state = pdat ^ RAW_BUTTONS_INVERSE_MASK;
     b38:	80 95       	com	r24
     b3a:	80 93 cf 01 	sts	0x01CF, r24
     b3e:	08 95       	ret

00000b40 <processItemFunction>:
//	Arguments:
//		funcAddr - address of the function to run.
//-----------------------------------------------------------------//
static inline void processItemFunction(FuncPtr funcAddr)
{
	if (funcAddr != 0)
     b40:	00 97       	sbiw	r24, 0x00	; 0
     b42:	11 f0       	breq	.+4      	; 0xb48 <processItemFunction+0x8>
		((FuncPtr)funcAddr)();
     b44:	fc 01       	movw	r30, r24
     b46:	09 94       	ijmp
     b48:	08 95       	ret

00000b4a <mf_setTempLeave>:
		clearExtraLeds(LED_TEMP);
}

void mf_setTempLeave(void)
{
	userTimer.Enabled = 0;
     b4a:	e5 e1       	ldi	r30, 0x15	; 21
     b4c:	f1 e0       	ldi	r31, 0x01	; 1
     b4e:	80 81       	ld	r24, Z
     b50:	8e 7f       	andi	r24, 0xFE	; 254
     b52:	80 83       	st	Z, r24
     b54:	08 95       	ret

00000b56 <mf_leafSelectAct>:
	userTimer.FA_GE = 1;	
}

void mf_leafSelectAct(void)
{
	userTimer.Timer = 0;
     b56:	10 92 16 01 	sts	0x0116, r1
	userTimer.Top = BLINK_PERIOD - 1;
     b5a:	87 e0       	ldi	r24, 0x07	; 7
     b5c:	80 93 17 01 	sts	0x0117, r24
	userTimer.CompA = BLINK_PERIOD / 2;
     b60:	84 e0       	ldi	r24, 0x04	; 4
     b62:	80 93 18 01 	sts	0x0118, r24
	userTimer.Enabled = 1;
     b66:	e5 e1       	ldi	r30, 0x15	; 21
     b68:	f1 e0       	ldi	r31, 0x01	; 1
     b6a:	80 81       	ld	r24, Z
     b6c:	81 60       	ori	r24, 0x01	; 1
     b6e:	80 83       	st	Z, r24
     b70:	08 95       	ret

00000b72 <mf_leafExit>:
}

void mf_leafExit(void)
{
	userTimer.Enabled = 0;	
     b72:	e5 e1       	ldi	r30, 0x15	; 21
     b74:	f1 e0       	ldi	r31, 0x01	; 1
     b76:	80 81       	ld	r24, Z
     b78:	8e 7f       	andi	r24, 0xFE	; 254
     b7a:	80 83       	st	Z, r24
     b7c:	08 95       	ret

00000b7e <mf_actpoffLeave>:
	printLedBuffer(0,"   OFF");
}

void mf_actpoffLeave(void)
{
	autoPowerOffState = 0;	
     b7e:	10 92 02 01 	sts	0x0102, r1
     b82:	08 95       	ret

00000b84 <mf_calibDoExit>:
	userTimer.Enabled = 1;
}

void mf_leafExit(void)
{
	userTimer.Enabled = 0;	
     b84:	e5 e1       	ldi	r30, 0x15	; 21
     b86:	f1 e0       	ldi	r31, 0x01	; 1
     b88:	80 81       	ld	r24, Z
     b8a:	8e 7f       	andi	r24, 0xFE	; 254
     b8c:	80 83       	st	Z, r24


void mf_calibDoExit(void)
{
	mf_leafExit();
	heaterState &= ~CALIBRATION_ACTIVE;
     b8e:	80 91 03 01 	lds	r24, 0x0103
     b92:	8d 7f       	andi	r24, 0xFD	; 253
     b94:	80 93 03 01 	sts	0x0103, r24
     b98:	08 95       	ret

00000b9a <mf_actpoffDo>:
}

// Indication of power off mode
void mf_actpoffDo(void)
{
	printLedBuffer(0,"   OFF");
     b9a:	60 eb       	ldi	r22, 0xB0	; 176
     b9c:	70 e0       	ldi	r23, 0x00	; 0
     b9e:	80 e0       	ldi	r24, 0x00	; 0
     ba0:	5c cf       	rjmp	.-328    	; 0xa5a <printLedBuffer>

00000ba2 <mf_cdoneDo>:
}


void mf_cdoneDo(void)
{
	printLedBuffer(0," DONE ");
     ba2:	67 eb       	ldi	r22, 0xB7	; 183
     ba4:	70 e0       	ldi	r23, 0x00	; 0
     ba6:	80 e0       	ldi	r24, 0x00	; 0
     ba8:	58 cf       	rjmp	.-336    	; 0xa5a <printLedBuffer>

00000baa <mf_actpoffSelect>:



void mf_actpoffSelect(void)
{
	clearExtraLeds(LED_TEMP | LED_ROLL);
     baa:	80 ec       	ldi	r24, 0xC0	; 192
     bac:	84 df       	rcall	.-248    	; 0xab6 <clearExtraLeds>
	autoPowerOffState = AUTO_POFF_ACTIVE;	// Set global flag
     bae:	81 e0       	ldi	r24, 0x01	; 1
     bb0:	80 93 02 01 	sts	0x0102, r24
     bb4:	08 95       	ret

00000bb6 <mf_leafSelect>:

// Select and exit functions, common for leaf menu items 

void mf_leafSelect(void)
{
	clearExtraLeds(LED_TEMP | LED_ROLL);
     bb6:	80 ec       	ldi	r24, 0xC0	; 192
     bb8:	7e df       	rcall	.-260    	; 0xab6 <clearExtraLeds>
	userTimer.FA_GE = 1;	
     bba:	e5 e1       	ldi	r30, 0x15	; 21
     bbc:	f1 e0       	ldi	r31, 0x01	; 1
     bbe:	80 81       	ld	r24, Z
     bc0:	80 61       	ori	r24, 0x10	; 16
     bc2:	80 83       	st	Z, r24
     bc4:	08 95       	ret

00000bc6 <mf_calibP2Select>:
	printLedBuffer(0,"P1    ");
}

void mf_calibP2Select(void)
{
	mf_leafSelect();
     bc6:	f7 df       	rcall	.-18     	; 0xbb6 <mf_leafSelect>
	cpoint_user_val = cp.cpoint2;	// determine which point to use at select func
     bc8:	80 91 af 01 	lds	r24, 0x01AF
     bcc:	80 93 13 01 	sts	0x0113, r24
	cpointNum = 2;
     bd0:	82 e0       	ldi	r24, 0x02	; 2
     bd2:	80 93 14 01 	sts	0x0114, r24
	printLedBuffer(0,"P2    ");
     bd6:	6e eb       	ldi	r22, 0xBE	; 190
     bd8:	70 e0       	ldi	r23, 0x00	; 0
     bda:	80 e0       	ldi	r24, 0x00	; 0
     bdc:	3e cf       	rjmp	.-388    	; 0xa5a <printLedBuffer>

00000bde <mf_calibP1Select>:
//---------------------------------------------//


void mf_calibP1Select(void)
{
	mf_leafSelect();
     bde:	eb df       	rcall	.-42     	; 0xbb6 <mf_leafSelect>
	cpoint_user_val = cp.cpoint1;	// determine which point to use at select func
     be0:	80 91 ae 01 	lds	r24, 0x01AE
     be4:	80 93 13 01 	sts	0x0113, r24
	cpointNum = 1;
     be8:	81 e0       	ldi	r24, 0x01	; 1
     bea:	80 93 14 01 	sts	0x0114, r24
	printLedBuffer(0,"P1    ");
     bee:	65 ec       	ldi	r22, 0xC5	; 197
     bf0:	70 e0       	ldi	r23, 0x00	; 0
     bf2:	80 e0       	ldi	r24, 0x00	; 0
     bf4:	32 cf       	rjmp	.-412    	; 0xa5a <printLedBuffer>

00000bf6 <mf_rollLeave>:
	printLedBuffer(0,str);
}

void mf_rollLeave(void)
{
	clearExtraLeds(LED_ROLL);
     bf6:	80 e4       	ldi	r24, 0x40	; 64
     bf8:	5e df       	rcall	.-324    	; 0xab6 <clearExtraLeds>
	userTimer.Enabled = 0;
     bfa:	e5 e1       	ldi	r30, 0x15	; 21
     bfc:	f1 e0       	ldi	r31, 0x01	; 1
     bfe:	80 81       	ld	r24, Z
     c00:	8e 7f       	andi	r24, 0xFE	; 254
     c02:	80 83       	st	Z, r24
     c04:	08 95       	ret

00000c06 <mf_setTempSelect>:
//---------------------------------------------//


void mf_setTempSelect(void)
{
	clearExtraLeds(LED_TEMP);
     c06:	80 e8       	ldi	r24, 0x80	; 128
     c08:	56 df       	rcall	.-340    	; 0xab6 <clearExtraLeds>
	mf_leafSelectAct();		// setup and start timer
     c0a:	a5 cf       	rjmp	.-182    	; 0xb56 <mf_leafSelectAct>

00000c0c <mf_realTempLeave>:
	}
}

void mf_realTempLeave(void)
{
	clearExtraLeds(LED_TEMP);
     c0c:	80 e8       	ldi	r24, 0x80	; 128
     c0e:	53 cf       	rjmp	.-346    	; 0xab6 <clearExtraLeds>

00000c10 <mf_cdoneSelect>:

//---------------------------------------------//

void mf_cdoneSelect(void)
{
	applyCalibrationPoint(cpointNum,cpoint_user_val);
     c10:	20 91 13 01 	lds	r18, 0x0113
}


void applyCalibrationPoint(uint8_t cpointNum, uint8_t cpointVal)
{
	if (cpointNum == 1)
     c14:	30 91 14 01 	lds	r19, 0x0114
     c18:	80 91 80 01 	lds	r24, 0x0180
     c1c:	90 91 81 01 	lds	r25, 0x0181
     c20:	31 30       	cpi	r19, 0x01	; 1
     c22:	39 f4       	brne	.+14     	; 0xc32 <mf_cdoneSelect+0x22>
	{
		cp.cpoint1_adc = adc_normalized;
     c24:	90 93 b1 01 	sts	0x01B1, r25
     c28:	80 93 b0 01 	sts	0x01B0, r24
		cp.cpoint1 = cpointVal;
     c2c:	20 93 ae 01 	sts	0x01AE, r18
     c30:	06 c0       	rjmp	.+12     	; 0xc3e <mf_cdoneSelect+0x2e>
	}
	else
	{
		cp.cpoint2_adc = adc_normalized;
     c32:	90 93 b3 01 	sts	0x01B3, r25
     c36:	80 93 b2 01 	sts	0x01B2, r24
		cp.cpoint2 = cpointVal;
     c3a:	20 93 af 01 	sts	0x01AF, r18
	}
	calculateCoeffs();
     c3e:	f2 da       	rcall	.-2588   	; 0x224 <calculateCoeffs>
	saveCalibrationToEEPROM();
     c40:	79 cd       	rjmp	.-1294   	; 0x734 <saveCalibrationToEEPROM>

00000c42 <mf_autopoffDo>:

//---------------------------------------------//


void mf_autopoffDo(void)
{
     c42:	cf 93       	push	r28
     c44:	df 93       	push	r29
     c46:	cd b7       	in	r28, 0x3d	; 61
     c48:	de b7       	in	r29, 0x3e	; 62
     c4a:	27 97       	sbiw	r28, 0x07	; 7
     c4c:	0f b6       	in	r0, 0x3f	; 63
     c4e:	f8 94       	cli
     c50:	de bf       	out	0x3e, r29	; 62
     c52:	0f be       	out	0x3f, r0	; 63
     c54:	cd bf       	out	0x3d, r28	; 61
	char str[] = {'O','F','F',' ',' ',' ',0};
     c56:	87 e0       	ldi	r24, 0x07	; 7
     c58:	e4 e9       	ldi	r30, 0x94	; 148
     c5a:	f0 e0       	ldi	r31, 0x00	; 0
     c5c:	de 01       	movw	r26, r28
     c5e:	11 96       	adiw	r26, 0x01	; 1
     c60:	01 90       	ld	r0, Z+
     c62:	0d 92       	st	X+, r0
     c64:	8a 95       	dec	r24
     c66:	e1 f7       	brne	.-8      	; 0xc60 <mf_autopoffDo+0x1e>
		
	if (button_state & (BD_UP | BR_UP))
     c68:	80 91 fe 00 	lds	r24, 0x00FE
     c6c:	90 91 ff 00 	lds	r25, 0x00FF
     c70:	9c 01       	movw	r18, r24
     c72:	20 74       	andi	r18, 0x40	; 64
     c74:	34 70       	andi	r19, 0x04	; 4
     c76:	23 2b       	or	r18, r19
     c78:	31 f0       	breq	.+12     	; 0xc86 <mf_autopoffDo+0x44>
	{
		if (p.power_off_timeout < MAX_POWEROFF_TIMEOUT)
     c7a:	80 91 b7 01 	lds	r24, 0x01B7
     c7e:	8f 35       	cpi	r24, 0x5F	; 95
     c80:	68 f4       	brcc	.+26     	; 0xc9c <mf_autopoffDo+0x5a>
			p.power_off_timeout += POWEROFF_SET_STEP;
     c82:	8b 5f       	subi	r24, 0xFB	; 251
     c84:	09 c0       	rjmp	.+18     	; 0xc98 <mf_autopoffDo+0x56>
		restartMenuTimer();
	}
	else if (button_state & (BD_DOWN | BR_DOWN))
     c86:	80 78       	andi	r24, 0x80	; 128
     c88:	98 70       	andi	r25, 0x08	; 8
     c8a:	89 2b       	or	r24, r25
     c8c:	49 f0       	breq	.+18     	; 0xca0 <mf_autopoffDo+0x5e>
	{
		if (p.power_off_timeout > MIN_POWEROFF_TIMEOUT)
     c8e:	80 91 b7 01 	lds	r24, 0x01B7
     c92:	86 30       	cpi	r24, 0x06	; 6
     c94:	18 f0       	brcs	.+6      	; 0xc9c <mf_autopoffDo+0x5a>
			p.power_off_timeout -= POWEROFF_SET_STEP;
     c96:	85 50       	subi	r24, 0x05	; 5
     c98:	80 93 b7 01 	sts	0x01B7, r24
//	 Restarts menu state timeout
//	Should be used in RUN function when control buttons are pressed.
//-----------------------------------------------------------------//
static void restartMenuTimer(void)
{
	menuTimer.Timer = 0;
     c9c:	10 92 7d 00 	sts	0x007D, r1
		if (p.power_off_timeout > MIN_POWEROFF_TIMEOUT)
			p.power_off_timeout -= POWEROFF_SET_STEP;
		restartMenuTimer();
	}	
		
	if (userTimer.FA_GE)
     ca0:	80 91 15 01 	lds	r24, 0x0115
     ca4:	84 ff       	sbrs	r24, 4
     ca6:	0f c0       	rjmp	.+30     	; 0xcc6 <mf_autopoffDo+0x84>
	{
		if (p.power_off_timeout < MAX_POWEROFF_TIMEOUT)
     ca8:	80 91 b7 01 	lds	r24, 0x01B7
     cac:	8f 35       	cpi	r24, 0x5F	; 95
     cae:	38 f4       	brcc	.+14     	; 0xcbe <mf_autopoffDo+0x7c>
		{
			u16toa_align_right(p.power_off_timeout,str + 4,NO_TERMINATING_ZERO | 2);	
     cb0:	42 e8       	ldi	r20, 0x82	; 130
     cb2:	be 01       	movw	r22, r28
     cb4:	6b 5f       	subi	r22, 0xFB	; 251
     cb6:	7f 4f       	sbci	r23, 0xFF	; 255
     cb8:	90 e0       	ldi	r25, 0x00	; 0
     cba:	90 d2       	rcall	.+1312   	; 0x11dc <u16toa_align_right>
     cbc:	04 c0       	rjmp	.+8      	; 0xcc6 <mf_autopoffDo+0x84>
		}			
		else 
		{
			str[4] = 'N';
     cbe:	8e e4       	ldi	r24, 0x4E	; 78
     cc0:	8d 83       	std	Y+5, r24	; 0x05
			str[5] = 'O';
     cc2:	8f e4       	ldi	r24, 0x4F	; 79
     cc4:	8e 83       	std	Y+6, r24	; 0x06
		}			
	}		
		
	printLedBuffer(0,str);
     cc6:	be 01       	movw	r22, r28
     cc8:	6f 5f       	subi	r22, 0xFF	; 255
     cca:	7f 4f       	sbci	r23, 0xFF	; 255
     ccc:	80 e0       	ldi	r24, 0x00	; 0
     cce:	c5 de       	rcall	.-630    	; 0xa5a <printLedBuffer>
}
     cd0:	27 96       	adiw	r28, 0x07	; 7
     cd2:	0f b6       	in	r0, 0x3f	; 63
     cd4:	f8 94       	cli
     cd6:	de bf       	out	0x3e, r29	; 62
     cd8:	0f be       	out	0x3f, r0	; 63
     cda:	cd bf       	out	0x3d, r28	; 61
     cdc:	df 91       	pop	r29
     cde:	cf 91       	pop	r28
     ce0:	08 95       	ret

00000ce2 <mf_calibDo>:
	cpointNum = 2;
	printLedBuffer(0,"P2    ");
}

void mf_calibDo(void)
{
     ce2:	cf 93       	push	r28
     ce4:	df 93       	push	r29
     ce6:	00 d0       	rcall	.+0      	; 0xce8 <mf_calibDo+0x6>
     ce8:	00 d0       	rcall	.+0      	; 0xcea <mf_calibDo+0x8>
     cea:	cd b7       	in	r28, 0x3d	; 61
     cec:	de b7       	in	r29, 0x3e	; 62
	char str[] = "   ";
     cee:	80 e2       	ldi	r24, 0x20	; 32
     cf0:	90 e2       	ldi	r25, 0x20	; 32
     cf2:	a0 e2       	ldi	r26, 0x20	; 32
     cf4:	b0 e0       	ldi	r27, 0x00	; 0
     cf6:	89 83       	std	Y+1, r24	; 0x01
     cf8:	9a 83       	std	Y+2, r25	; 0x02
     cfa:	ab 83       	std	Y+3, r26	; 0x03
     cfc:	bc 83       	std	Y+4, r27	; 0x04
	
	if (button_state & (BD_UP | BR_UP))
     cfe:	80 91 fe 00 	lds	r24, 0x00FE
     d02:	90 91 ff 00 	lds	r25, 0x00FF
     d06:	9c 01       	movw	r18, r24
     d08:	20 74       	andi	r18, 0x40	; 64
     d0a:	34 70       	andi	r19, 0x04	; 4
     d0c:	23 2b       	or	r18, r19
     d0e:	31 f0       	breq	.+12     	; 0xd1c <mf_calibDo+0x3a>
	{
		if (cpoint_user_val < MAX_CALIB_TEMP)
     d10:	80 91 13 01 	lds	r24, 0x0113
     d14:	8a 3f       	cpi	r24, 0xFA	; 250
     d16:	68 f4       	brcc	.+26     	; 0xd32 <mf_calibDo+0x50>
		cpoint_user_val += CALIB_TEMP_STEP;
     d18:	8f 5f       	subi	r24, 0xFF	; 255
     d1a:	09 c0       	rjmp	.+18     	; 0xd2e <mf_calibDo+0x4c>
	}
	else if (button_state & (BD_DOWN | BR_DOWN))
     d1c:	80 78       	andi	r24, 0x80	; 128
     d1e:	98 70       	andi	r25, 0x08	; 8
     d20:	89 2b       	or	r24, r25
     d22:	39 f0       	breq	.+14     	; 0xd32 <mf_calibDo+0x50>
	{
		if (cpoint_user_val > MIN_CALIB_TEMP)
     d24:	80 91 13 01 	lds	r24, 0x0113
     d28:	8b 30       	cpi	r24, 0x0B	; 11
     d2a:	18 f0       	brcs	.+6      	; 0xd32 <mf_calibDo+0x50>
		cpoint_user_val -= CALIB_TEMP_STEP;
     d2c:	81 50       	subi	r24, 0x01	; 1
     d2e:	80 93 13 01 	sts	0x0113, r24
	}
	
	if (userTimer.FA_GE)
     d32:	80 91 15 01 	lds	r24, 0x0115
     d36:	84 ff       	sbrs	r24, 4
     d38:	0e c0       	rjmp	.+28     	; 0xd56 <mf_calibDo+0x74>
	{
		u16toa_align_right(cpoint_user_val,str,3);
     d3a:	43 e0       	ldi	r20, 0x03	; 3
     d3c:	be 01       	movw	r22, r28
     d3e:	6f 5f       	subi	r22, 0xFF	; 255
     d40:	7f 4f       	sbci	r23, 0xFF	; 255
     d42:	80 91 13 01 	lds	r24, 0x0113
     d46:	90 e0       	ldi	r25, 0x00	; 0
     d48:	49 d2       	rcall	.+1170   	; 0x11dc <u16toa_align_right>
		resetAutoPowerOffCounter();
     d4a:	62 d6       	rcall	.+3268   	; 0x1a10 <resetAutoPowerOffCounter>
		heaterState |= CALIBRATION_ACTIVE;
     d4c:	80 91 03 01 	lds	r24, 0x0103
     d50:	82 60       	ori	r24, 0x02	; 2
     d52:	80 93 03 01 	sts	0x0103, r24
	}
	
	printLedBuffer(3,str);
     d56:	be 01       	movw	r22, r28
     d58:	6f 5f       	subi	r22, 0xFF	; 255
     d5a:	7f 4f       	sbci	r23, 0xFF	; 255
     d5c:	83 e0       	ldi	r24, 0x03	; 3
     d5e:	7d de       	rcall	.-774    	; 0xa5a <printLedBuffer>
}
     d60:	0f 90       	pop	r0
     d62:	0f 90       	pop	r0
     d64:	0f 90       	pop	r0
     d66:	0f 90       	pop	r0
     d68:	df 91       	pop	r29
     d6a:	cf 91       	pop	r28
     d6c:	08 95       	ret

00000d6e <mf_sndenDo>:

//---------------------------------------------//


void mf_sndenDo(void)
{
     d6e:	cf 93       	push	r28
     d70:	df 93       	push	r29
     d72:	cd b7       	in	r28, 0x3d	; 61
     d74:	de b7       	in	r29, 0x3e	; 62
     d76:	27 97       	sbiw	r28, 0x07	; 7
     d78:	0f b6       	in	r0, 0x3f	; 63
     d7a:	f8 94       	cli
     d7c:	de bf       	out	0x3e, r29	; 62
     d7e:	0f be       	out	0x3f, r0	; 63
     d80:	cd bf       	out	0x3d, r28	; 61
	char str[] = {'S','N','D',' ',' ',' ',0};
     d82:	87 e0       	ldi	r24, 0x07	; 7
     d84:	eb e9       	ldi	r30, 0x9B	; 155
     d86:	f0 e0       	ldi	r31, 0x00	; 0
     d88:	de 01       	movw	r26, r28
     d8a:	11 96       	adiw	r26, 0x01	; 1
     d8c:	01 90       	ld	r0, Z+
     d8e:	0d 92       	st	X+, r0
     d90:	8a 95       	dec	r24
     d92:	e1 f7       	brne	.-8      	; 0xd8c <mf_sndenDo+0x1e>
		
	if (button_state & (BD_UP | BD_DOWN))
     d94:	80 91 fe 00 	lds	r24, 0x00FE
     d98:	90 91 ff 00 	lds	r25, 0x00FF
     d9c:	80 7c       	andi	r24, 0xC0	; 192
     d9e:	99 27       	eor	r25, r25
     da0:	89 2b       	or	r24, r25
     da2:	49 f0       	breq	.+18     	; 0xdb6 <mf_sndenDo+0x48>
	{
		p.sound_enable = !p.sound_enable;
     da4:	81 e0       	ldi	r24, 0x01	; 1
     da6:	90 91 b6 01 	lds	r25, 0x01B6
     daa:	91 11       	cpse	r25, r1
     dac:	80 e0       	ldi	r24, 0x00	; 0
     dae:	80 93 b6 01 	sts	0x01B6, r24
//	 Restarts menu state timeout
//	Should be used in RUN function when control buttons are pressed.
//-----------------------------------------------------------------//
static void restartMenuTimer(void)
{
	menuTimer.Timer = 0;
     db2:	10 92 7d 00 	sts	0x007D, r1
	{
		p.sound_enable = !p.sound_enable;
		restartMenuTimer();
	}			
		
	if (userTimer.FA_GE)
     db6:	80 91 15 01 	lds	r24, 0x0115
     dba:	84 ff       	sbrs	r24, 4
     dbc:	0d c0       	rjmp	.+26     	; 0xdd8 <mf_sndenDo+0x6a>
	{
		if (p.sound_enable)		
     dbe:	80 91 b6 01 	lds	r24, 0x01B6
     dc2:	88 23       	and	r24, r24
     dc4:	21 f0       	breq	.+8      	; 0xdce <mf_sndenDo+0x60>
		{
			str[4] = 'O';
     dc6:	8f e4       	ldi	r24, 0x4F	; 79
     dc8:	8d 83       	std	Y+5, r24	; 0x05
			str[5] = 'N';
     dca:	8e e4       	ldi	r24, 0x4E	; 78
     dcc:	04 c0       	rjmp	.+8      	; 0xdd6 <mf_sndenDo+0x68>
		}
		else
		{
			str[3] = 'O';
     dce:	8f e4       	ldi	r24, 0x4F	; 79
     dd0:	8c 83       	std	Y+4, r24	; 0x04
			str[4] = 'F';
     dd2:	86 e4       	ldi	r24, 0x46	; 70
     dd4:	8d 83       	std	Y+5, r24	; 0x05
			str[5] = 'F';
     dd6:	8e 83       	std	Y+6, r24	; 0x06
		}			
	}
		
	printLedBuffer(0,str);
     dd8:	be 01       	movw	r22, r28
     dda:	6f 5f       	subi	r22, 0xFF	; 255
     ddc:	7f 4f       	sbci	r23, 0xFF	; 255
     dde:	80 e0       	ldi	r24, 0x00	; 0
     de0:	3c de       	rcall	.-904    	; 0xa5a <printLedBuffer>
	setComma(2);
     de2:	82 e0       	ldi	r24, 0x02	; 2
     de4:	56 de       	rcall	.-852    	; 0xa92 <setComma>
}
     de6:	27 96       	adiw	r28, 0x07	; 7
     de8:	0f b6       	in	r0, 0x3f	; 63
     dea:	f8 94       	cli
     dec:	de bf       	out	0x3e, r29	; 62
     dee:	0f be       	out	0x3f, r0	; 63
     df0:	cd bf       	out	0x3d, r28	; 61
     df2:	df 91       	pop	r29
     df4:	cf 91       	pop	r28
     df6:	08 95       	ret

00000df8 <mf_rollDo>:
	setExtraLeds(LED_ROLL);
	mf_leafSelectAct();		// setup and start timer
}

void mf_rollDo(void)
{
     df8:	cf 93       	push	r28
     dfa:	df 93       	push	r29
     dfc:	cd b7       	in	r28, 0x3d	; 61
     dfe:	de b7       	in	r29, 0x3e	; 62
     e00:	27 97       	sbiw	r28, 0x07	; 7
     e02:	0f b6       	in	r0, 0x3f	; 63
     e04:	f8 94       	cli
     e06:	de bf       	out	0x3e, r29	; 62
     e08:	0f be       	out	0x3f, r0	; 63
     e0a:	cd bf       	out	0x3d, r28	; 61
	char str[] = {' ',' ',' ',' ',' ',' ',0};
     e0c:	87 e0       	ldi	r24, 0x07	; 7
     e0e:	e2 ea       	ldi	r30, 0xA2	; 162
     e10:	f0 e0       	ldi	r31, 0x00	; 0
     e12:	de 01       	movw	r26, r28
     e14:	11 96       	adiw	r26, 0x01	; 1
     e16:	01 90       	ld	r0, Z+
     e18:	0d 92       	st	X+, r0
     e1a:	8a 95       	dec	r24
     e1c:	e1 f7       	brne	.-8      	; 0xe16 <mf_rollDo+0x1e>
		
	if (button_state & (BD_UP | BR_UP))
     e1e:	80 91 fe 00 	lds	r24, 0x00FE
     e22:	90 91 ff 00 	lds	r25, 0x00FF
     e26:	9c 01       	movw	r18, r24
     e28:	20 74       	andi	r18, 0x40	; 64
     e2a:	34 70       	andi	r19, 0x04	; 4
     e2c:	23 2b       	or	r18, r19
     e2e:	31 f0       	breq	.+12     	; 0xe3c <mf_rollDo+0x44>
	{
		if (p.rollCycleSet < MAX_ROLL_CYCLES)
     e30:	80 91 b5 01 	lds	r24, 0x01B5
     e34:	83 36       	cpi	r24, 0x63	; 99
     e36:	68 f4       	brcc	.+26     	; 0xe52 <mf_rollDo+0x5a>
			p.rollCycleSet += ROLL_CYCLES_STEP;
     e38:	8f 5f       	subi	r24, 0xFF	; 255
     e3a:	09 c0       	rjmp	.+18     	; 0xe4e <mf_rollDo+0x56>
	}
	else if (button_state & (BD_DOWN | BR_DOWN))
     e3c:	80 78       	andi	r24, 0x80	; 128
     e3e:	98 70       	andi	r25, 0x08	; 8
     e40:	89 2b       	or	r24, r25
     e42:	39 f0       	breq	.+14     	; 0xe52 <mf_rollDo+0x5a>
	{
		if (p.rollCycleSet > MIN_ROLL_CYCLES)
     e44:	80 91 b5 01 	lds	r24, 0x01B5
     e48:	82 30       	cpi	r24, 0x02	; 2
     e4a:	18 f0       	brcs	.+6      	; 0xe52 <mf_rollDo+0x5a>
			p.rollCycleSet -= ROLL_CYCLES_STEP;
     e4c:	81 50       	subi	r24, 0x01	; 1
     e4e:	80 93 b5 01 	sts	0x01B5, r24
	}	
		
	u16toa_align_right(p.rollCycleSet,str + 4,NO_TERMINATING_ZERO | 2);
     e52:	42 e8       	ldi	r20, 0x82	; 130
     e54:	be 01       	movw	r22, r28
     e56:	6b 5f       	subi	r22, 0xFB	; 251
     e58:	7f 4f       	sbci	r23, 0xFF	; 255
     e5a:	80 91 b5 01 	lds	r24, 0x01B5
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	bd d1       	rcall	.+890    	; 0x11dc <u16toa_align_right>
	
	if ((!(rollState & ROLL_CYCLE)) || (userTimer.FA_GE))
     e62:	80 91 26 01 	lds	r24, 0x0126
     e66:	82 ff       	sbrs	r24, 2
     e68:	04 c0       	rjmp	.+8      	; 0xe72 <mf_rollDo+0x7a>
     e6a:	80 91 15 01 	lds	r24, 0x0115
     e6e:	84 ff       	sbrs	r24, 4
     e70:	08 c0       	rjmp	.+16     	; 0xe82 <mf_rollDo+0x8a>
	{
		u16toa_align_right(activeRollCycle,str + 1,NO_TERMINATING_ZERO | 2);
     e72:	42 e8       	ldi	r20, 0x82	; 130
     e74:	be 01       	movw	r22, r28
     e76:	6e 5f       	subi	r22, 0xFE	; 254
     e78:	7f 4f       	sbci	r23, 0xFF	; 255
     e7a:	80 91 25 01 	lds	r24, 0x0125
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	ad d1       	rcall	.+858    	; 0x11dc <u16toa_align_right>
	}
	
	str[0] = 0;
     e82:	19 82       	std	Y+1, r1	; 0x01
	if (isTopPointValid())
     e84:	e8 d3       	rcall	.+2000   	; 0x1656 <isTopPointValid>
     e86:	88 23       	and	r24, r24
     e88:	19 f0       	breq	.+6      	; 0xe90 <mf_rollDo+0x98>
		str[0] |= SEGA;
     e8a:	89 81       	ldd	r24, Y+1	; 0x01
     e8c:	81 60       	ori	r24, 0x01	; 1
     e8e:	89 83       	std	Y+1, r24	; 0x01
	if (isBottomPointValid())
     e90:	f2 d3       	rcall	.+2020   	; 0x1676 <isBottomPointValid>
     e92:	88 23       	and	r24, r24
     e94:	19 f0       	breq	.+6      	; 0xe9c <mf_rollDo+0xa4>
		str[0] |= SEGD;
     e96:	89 81       	ldd	r24, Y+1	; 0x01
     e98:	88 60       	ori	r24, 0x08	; 8
     e9a:	89 83       	std	Y+1, r24	; 0x01
	if (str[0] == 0)
     e9c:	89 81       	ldd	r24, Y+1	; 0x01
     e9e:	81 11       	cpse	r24, r1
     ea0:	02 c0       	rjmp	.+4      	; 0xea6 <mf_rollDo+0xae>
		str[0] = ' ';
     ea2:	80 e2       	ldi	r24, 0x20	; 32
     ea4:	89 83       	std	Y+1, r24	; 0x01
		
	printLedBuffer(0,str);
     ea6:	be 01       	movw	r22, r28
     ea8:	6f 5f       	subi	r22, 0xFF	; 255
     eaa:	7f 4f       	sbci	r23, 0xFF	; 255
     eac:	80 e0       	ldi	r24, 0x00	; 0
     eae:	d5 dd       	rcall	.-1110   	; 0xa5a <printLedBuffer>
}
     eb0:	27 96       	adiw	r28, 0x07	; 7
     eb2:	0f b6       	in	r0, 0x3f	; 63
     eb4:	f8 94       	cli
     eb6:	de bf       	out	0x3e, r29	; 62
     eb8:	0f be       	out	0x3f, r0	; 63
     eba:	cd bf       	out	0x3d, r28	; 61
     ebc:	df 91       	pop	r29
     ebe:	cf 91       	pop	r28
     ec0:	08 95       	ret

00000ec2 <mf_rollSelect>:
//---------------------------------------------//
//---------------------------------------------//

void mf_rollSelect(void)
{
	setExtraLeds(LED_ROLL);
     ec2:	80 e4       	ldi	r24, 0x40	; 64
     ec4:	f2 dd       	rcall	.-1052   	; 0xaaa <setExtraLeds>
	mf_leafSelectAct();		// setup and start timer
     ec6:	47 ce       	rjmp	.-882    	; 0xb56 <mf_leafSelectAct>

00000ec8 <mf_setTempDo>:

//PROGMEM const char ms_setTempDo[] =  {' ',' ',' ',' ',0xB0,'C',0};
//PROGMEM const char ms_setTempUnreg[] = " UNREG";

void mf_setTempDo(void)
{
     ec8:	cf 93       	push	r28
     eca:	df 93       	push	r29
     ecc:	cd b7       	in	r28, 0x3d	; 61
     ece:	de b7       	in	r29, 0x3e	; 62
     ed0:	27 97       	sbiw	r28, 0x07	; 7
     ed2:	0f b6       	in	r0, 0x3f	; 63
     ed4:	f8 94       	cli
     ed6:	de bf       	out	0x3e, r29	; 62
     ed8:	0f be       	out	0x3f, r0	; 63
     eda:	cd bf       	out	0x3d, r28	; 61
	char str[] = {' ',' ',' ',' ',0xB0,'C',0};
     edc:	87 e0       	ldi	r24, 0x07	; 7
     ede:	e9 ea       	ldi	r30, 0xA9	; 169
     ee0:	f0 e0       	ldi	r31, 0x00	; 0
     ee2:	de 01       	movw	r26, r28
     ee4:	11 96       	adiw	r26, 0x01	; 1
     ee6:	01 90       	ld	r0, Z+
     ee8:	0d 92       	st	X+, r0
     eea:	8a 95       	dec	r24
     eec:	e1 f7       	brne	.-8      	; 0xee6 <mf_setTempDo+0x1e>
	//char str[7];
	//strcpy_P(str,str1_PM);
	
	if (button_state & (BD_UP | BR_UP))
     eee:	80 91 fe 00 	lds	r24, 0x00FE
     ef2:	90 91 ff 00 	lds	r25, 0x00FF
     ef6:	9c 01       	movw	r18, r24
     ef8:	20 74       	andi	r18, 0x40	; 64
     efa:	34 70       	andi	r19, 0x04	; 4
     efc:	23 2b       	or	r18, r19
     efe:	31 f0       	breq	.+12     	; 0xf0c <mf_setTempDo+0x44>
	{
		if (p.setup_temp_value < MAX_SET_TEMP)
     f00:	80 91 b4 01 	lds	r24, 0x01B4
     f04:	8f 3f       	cpi	r24, 0xFF	; 255
     f06:	69 f0       	breq	.+26     	; 0xf22 <mf_setTempDo+0x5a>
			p.setup_temp_value += TEMP_SET_STEP;
     f08:	8b 5f       	subi	r24, 0xFB	; 251
     f0a:	09 c0       	rjmp	.+18     	; 0xf1e <mf_setTempDo+0x56>
		restartMenuTimer();
	}
	else if (button_state & (BD_DOWN | BR_DOWN))
     f0c:	80 78       	andi	r24, 0x80	; 128
     f0e:	98 70       	andi	r25, 0x08	; 8
     f10:	89 2b       	or	r24, r25
     f12:	49 f0       	breq	.+18     	; 0xf26 <mf_setTempDo+0x5e>
	{
		if (p.setup_temp_value > MIN_SET_TEMP)
     f14:	80 91 b4 01 	lds	r24, 0x01B4
     f18:	8f 31       	cpi	r24, 0x1F	; 31
     f1a:	18 f0       	brcs	.+6      	; 0xf22 <mf_setTempDo+0x5a>
			p.setup_temp_value -= TEMP_SET_STEP;
     f1c:	85 50       	subi	r24, 0x05	; 5
     f1e:	80 93 b4 01 	sts	0x01B4, r24
//	 Restarts menu state timeout
//	Should be used in RUN function when control buttons are pressed.
//-----------------------------------------------------------------//
static void restartMenuTimer(void)
{
	menuTimer.Timer = 0;
     f22:	10 92 7d 00 	sts	0x007D, r1
			p.setup_temp_value -= TEMP_SET_STEP;
		restartMenuTimer();
	}					
		
	// Output setting to LED
	if (p.setup_temp_value < MAX_SET_TEMP)
     f26:	80 91 b4 01 	lds	r24, 0x01B4
     f2a:	8f 3f       	cpi	r24, 0xFF	; 255
     f2c:	51 f0       	breq	.+20     	; 0xf42 <mf_setTempDo+0x7a>
	{
		u16toa_align_right(p.setup_temp_value,str,NO_TERMINATING_ZERO | 4);
     f2e:	44 e8       	ldi	r20, 0x84	; 132
     f30:	be 01       	movw	r22, r28
     f32:	6f 5f       	subi	r22, 0xFF	; 255
     f34:	7f 4f       	sbci	r23, 0xFF	; 255
     f36:	90 e0       	ldi	r25, 0x00	; 0
     f38:	51 d1       	rcall	.+674    	; 0x11dc <u16toa_align_right>
		printLedBuffer(0,str);
     f3a:	be 01       	movw	r22, r28
     f3c:	6f 5f       	subi	r22, 0xFF	; 255
     f3e:	7f 4f       	sbci	r23, 0xFF	; 255
     f40:	02 c0       	rjmp	.+4      	; 0xf46 <mf_setTempDo+0x7e>
	}		
	else
	{
		printLedBuffer(0," UNREG");
     f42:	6c ec       	ldi	r22, 0xCC	; 204
     f44:	70 e0       	ldi	r23, 0x00	; 0
     f46:	80 e0       	ldi	r24, 0x00	; 0
     f48:	88 dd       	rcall	.-1264   	; 0xa5a <printLedBuffer>
	}
	
	
	if (userTimer.FA_GE)
     f4a:	80 91 15 01 	lds	r24, 0x0115
     f4e:	84 ff       	sbrs	r24, 4
     f50:	03 c0       	rjmp	.+6      	; 0xf58 <mf_setTempDo+0x90>
		setExtraLeds(LED_TEMP);
     f52:	80 e8       	ldi	r24, 0x80	; 128
     f54:	aa dd       	rcall	.-1196   	; 0xaaa <setExtraLeds>
     f56:	02 c0       	rjmp	.+4      	; 0xf5c <mf_setTempDo+0x94>
	else
		clearExtraLeds(LED_TEMP);
     f58:	80 e8       	ldi	r24, 0x80	; 128
     f5a:	ad dd       	rcall	.-1190   	; 0xab6 <clearExtraLeds>
}
     f5c:	27 96       	adiw	r28, 0x07	; 7
     f5e:	0f b6       	in	r0, 0x3f	; 63
     f60:	f8 94       	cli
     f62:	de bf       	out	0x3e, r29	; 62
     f64:	0f be       	out	0x3f, r0	; 63
     f66:	cd bf       	out	0x3d, r28	; 61
     f68:	df 91       	pop	r29
     f6a:	cf 91       	pop	r28
     f6c:	08 95       	ret

00000f6e <mf_realTempSelect>:
//=================================================================//


void mf_realTempSelect(void)
{
	setExtraLeds(LED_TEMP);
     f6e:	80 e8       	ldi	r24, 0x80	; 128
     f70:	9c cd       	rjmp	.-1224   	; 0xaaa <setExtraLeds>

00000f72 <mf_realTempDo>:
}

void mf_realTempDo(void)
{
     f72:	cf 93       	push	r28
     f74:	df 93       	push	r29
     f76:	cd b7       	in	r28, 0x3d	; 61
     f78:	de b7       	in	r29, 0x3e	; 62
     f7a:	27 97       	sbiw	r28, 0x07	; 7
     f7c:	0f b6       	in	r0, 0x3f	; 63
     f7e:	f8 94       	cli
     f80:	de bf       	out	0x3e, r29	; 62
     f82:	0f be       	out	0x3f, r0	; 63
     f84:	cd bf       	out	0x3d, r28	; 61
	char str[] = {' ',' ',' ',' ',0xB0,'C',0};
     f86:	87 e0       	ldi	r24, 0x07	; 7
     f88:	e9 ea       	ldi	r30, 0xA9	; 169
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	de 01       	movw	r26, r28
     f8e:	11 96       	adiw	r26, 0x01	; 1
     f90:	01 90       	ld	r0, Z+
     f92:	0d 92       	st	X+, r0
     f94:	8a 95       	dec	r24
     f96:	e1 f7       	brne	.-8      	; 0xf90 <mf_realTempDo+0x1e>

	if (adc_status & (SENSOR_ERROR_NO_PRESENT))
     f98:	80 91 82 01 	lds	r24, 0x0182
     f9c:	80 ff       	sbrs	r24, 0
     f9e:	03 c0       	rjmp	.+6      	; 0xfa6 <mf_realTempDo+0x34>
	{
		printLedBuffer(0,"ERR 01");
     fa0:	63 ed       	ldi	r22, 0xD3	; 211
     fa2:	70 e0       	ldi	r23, 0x00	; 0
     fa4:	15 c0       	rjmp	.+42     	; 0xfd0 <mf_realTempDo+0x5e>
	}
	else if (adc_status & (SENSOR_ERROR_SHORTED))
     fa6:	81 ff       	sbrs	r24, 1
     fa8:	03 c0       	rjmp	.+6      	; 0xfb0 <mf_realTempDo+0x3e>
	{
		printLedBuffer(0,"ERR 02");
     faa:	6a ed       	ldi	r22, 0xDA	; 218
     fac:	70 e0       	ldi	r23, 0x00	; 0
     fae:	10 c0       	rjmp	.+32     	; 0xfd0 <mf_realTempDo+0x5e>
	}
	else
	{
		// Output ADC result to LED
		//u16toa_align_right(adc_celsius,str,NO_TERMINATING_ZERO | 4);
		i32toa_align_right((int32_t)adc_celsius,str,NO_TERMINATING_ZERO | 4);
     fb0:	60 91 83 01 	lds	r22, 0x0183
     fb4:	70 91 84 01 	lds	r23, 0x0184
     fb8:	88 27       	eor	r24, r24
     fba:	77 fd       	sbrc	r23, 7
     fbc:	80 95       	com	r24
     fbe:	98 2f       	mov	r25, r24
     fc0:	24 e8       	ldi	r18, 0x84	; 132
     fc2:	ae 01       	movw	r20, r28
     fc4:	4f 5f       	subi	r20, 0xFF	; 255
     fc6:	5f 4f       	sbci	r21, 0xFF	; 255
     fc8:	bc d0       	rcall	.+376    	; 0x1142 <i32toa_align_right>
		printLedBuffer(0,str);
     fca:	be 01       	movw	r22, r28
     fcc:	6f 5f       	subi	r22, 0xFF	; 255
     fce:	7f 4f       	sbci	r23, 0xFF	; 255
     fd0:	80 e0       	ldi	r24, 0x00	; 0
     fd2:	43 dd       	rcall	.-1402   	; 0xa5a <printLedBuffer>
	}
}
     fd4:	27 96       	adiw	r28, 0x07	; 7
     fd6:	0f b6       	in	r0, 0x3f	; 63
     fd8:	f8 94       	cli
     fda:	de bf       	out	0x3e, r29	; 62
     fdc:	0f be       	out	0x3f, r0	; 63
     fde:	cd bf       	out	0x3d, r28	; 61
     fe0:	df 91       	pop	r29
     fe2:	cf 91       	pop	r28
     fe4:	08 95       	ret

00000fe6 <getMenuFunctionRecord.constprop.1>:
//	Arguments:
//		menuItemID - ID of an item
//		menuRecord - pointer to function structure to fill
//	Output:
//-----------------------------------------------------------------//
static void getMenuFunctionRecord(uint8_t menuItemID, MenuFunctionRecord* menuRecord )
     fe6:	0f 93       	push	r16
     fe8:	1f 93       	push	r17
     fea:	cf 93       	push	r28
     fec:	df 93       	push	r29
     fee:	18 2f       	mov	r17, r24
     ff0:	c0 e0       	ldi	r28, 0x00	; 0
     ff2:	d0 e0       	ldi	r29, 0x00	; 0
{
	uint8_t i;
	for (i = 0; i < sizeof(menuFunctionSet)/sizeof(MenuFunctionRecord); i++  )
	{
		//readMenuRecord(&menuFunctionSet[i], menuRecord);
		PGM_read_block(menuRecord,&menuFunctionSet[i],sizeof(MenuFunctionRecord));
     ff4:	07 e0       	ldi	r16, 0x07	; 7
     ff6:	0c 9f       	mul	r16, r28
     ff8:	b0 01       	movw	r22, r0
     ffa:	0d 9f       	mul	r16, r29
     ffc:	70 0d       	add	r23, r0
     ffe:	11 24       	eor	r1, r1
    1000:	68 59       	subi	r22, 0x98	; 152
    1002:	7f 4f       	sbci	r23, 0xFF	; 255
    1004:	47 e0       	ldi	r20, 0x07	; 7
    1006:	8c e0       	ldi	r24, 0x0C	; 12
    1008:	91 e0       	ldi	r25, 0x01	; 1
    100a:	64 d4       	rcall	.+2248   	; 0x18d4 <PGM_read_block>
		if (menuRecord->Item == menuItemID)
    100c:	80 91 0c 01 	lds	r24, 0x010C
    1010:	81 17       	cp	r24, r17
    1012:	21 f0       	breq	.+8      	; 0x101c <getMenuFunctionRecord.constprop.1+0x36>
    1014:	21 96       	adiw	r28, 0x01	; 1
//	Output:
//-----------------------------------------------------------------//
static void getMenuFunctionRecord(uint8_t menuItemID, MenuFunctionRecord* menuRecord )
{
	uint8_t i;
	for (i = 0; i < sizeof(menuFunctionSet)/sizeof(MenuFunctionRecord); i++  )
    1016:	ce 30       	cpi	r28, 0x0E	; 14
    1018:	d1 05       	cpc	r29, r1
    101a:	69 f7       	brne	.-38     	; 0xff6 <getMenuFunctionRecord.constprop.1+0x10>
		//readMenuRecord(&menuFunctionSet[i], menuRecord);
		PGM_read_block(menuRecord,&menuFunctionSet[i],sizeof(MenuFunctionRecord));
		if (menuRecord->Item == menuItemID)
			break;
	}
}
    101c:	df 91       	pop	r29
    101e:	cf 91       	pop	r28
    1020:	1f 91       	pop	r17
    1022:	0f 91       	pop	r16
    1024:	08 95       	ret

00001026 <InitMenu>:
//	Menu initialization
//	Call this function at start of your program before processMenu()
//-----------------------------------------------------------------//
void InitMenu(void)
{
	selectedMenuItemID = mi_REALTEMP;
    1026:	81 e0       	ldi	r24, 0x01	; 1
    1028:	80 93 0b 01 	sts	0x010B, r24
	getMenuFunctionRecord(selectedMenuItemID, &selectedMenuFunctionRecord);
    102c:	dc df       	rcall	.-72     	; 0xfe6 <getMenuFunctionRecord.constprop.1>
	processItemFunction(selectedMenuFunctionRecord.SelectFunction);
    102e:	80 91 0d 01 	lds	r24, 0x010D
    1032:	90 91 0e 01 	lds	r25, 0x010E
    1036:	84 cd       	rjmp	.-1272   	; 0xb40 <processItemFunction>

00001038 <processMenu>:
//	Main menu control, -  state function calls, jumps 
//	between menu states and indication
//	Call this function from main() with a fixed time interval.
//-----------------------------------------------------------------//
void processMenu(void)
{
    1038:	af 92       	push	r10
    103a:	bf 92       	push	r11
    103c:	cf 92       	push	r12
    103e:	df 92       	push	r13
    1040:	ef 92       	push	r14
    1042:	ff 92       	push	r15
    1044:	0f 93       	push	r16
    1046:	1f 93       	push	r17
    1048:	cf 93       	push	r28
    104a:	df 93       	push	r29
    104c:	00 d0       	rcall	.+0      	; 0x104e <processMenu+0x16>
    104e:	00 d0       	rcall	.+0      	; 0x1050 <processMenu+0x18>
    1050:	1f 92       	push	r1
    1052:	cd b7       	in	r28, 0x3d	; 61
    1054:	de b7       	in	r29, 0x3e	; 62
	NextItem_t nextItem;
	uint16_t jumpCondition;
	
	processSoftTimer8b(&menuTimer);	
    1056:	8c e7       	ldi	r24, 0x7C	; 124
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	47 d4       	rcall	.+2190   	; 0x18ea <processSoftTimer8b>
	
	// Compose jump condition
	jumpCondition = button_state;		
    105c:	00 91 fe 00 	lds	r16, 0x00FE
    1060:	10 91 ff 00 	lds	r17, 0x00FF
	if (menuTimer.FTop)
    1064:	80 91 7c 00 	lds	r24, 0x007C
    1068:	85 fd       	sbrc	r24, 5
		jumpCondition |= TMR_EXP;
    106a:	10 68       	ori	r17, 0x80	; 128
	if (sys_timers.flags & AUTOPOFF_EXPIRED)
    106c:	80 91 8f 00 	lds	r24, 0x008F
    1070:	84 fd       	sbrc	r24, 4
		jumpCondition |= GOTO_POFF;
    1072:	10 64       	ori	r17, 0x40	; 64
	
	// Get next menu item according to current state and jump conditions
	nextItem = getNextMenuItem(selectedMenuItemID, jumpCondition);
    1074:	d0 90 0b 01 	lds	r13, 0x010B
    1078:	e1 2c       	mov	r14, r1
    107a:	f1 2c       	mov	r15, r1
	uint8_t i;
	
	for (i = 0; i < sizeof(menuJumpSet)/sizeof(MenuJumpRecord); i++  )
	{
		//readJumpRecord(&menuJumpSet[i], &jRecord);		// read full jump record
		PGM_read_block(&jRecord,&menuJumpSet[i],sizeof(MenuJumpRecord));
    107c:	35 e0       	ldi	r19, 0x05	; 5
    107e:	a3 2e       	mov	r10, r19
    1080:	ae 9c       	mul	r10, r14
    1082:	b0 01       	movw	r22, r0
    1084:	af 9c       	mul	r10, r15
    1086:	70 0d       	add	r23, r0
    1088:	11 24       	eor	r1, r1
    108a:	66 53       	subi	r22, 0x36	; 54
    108c:	7f 4f       	sbci	r23, 0xFF	; 255
    108e:	45 e0       	ldi	r20, 0x05	; 5
    1090:	ce 01       	movw	r24, r28
    1092:	01 96       	adiw	r24, 0x01	; 1
    1094:	1f d4       	rcall	.+2110   	; 0x18d4 <PGM_read_block>
		if (jRecord.Item == selectedItemId)				// If ID match,
    1096:	89 81       	ldd	r24, Y+1	; 0x01
    1098:	8d 11       	cpse	r24, r13
    109a:	0f c0       	rjmp	.+30     	; 0x10ba <processMenu+0x82>
		{
			if ((jRecord.JumpCondition & jmpCond) != 0)		// if any of jump conditions match too,
    109c:	2a 81       	ldd	r18, Y+2	; 0x02
    109e:	3b 81       	ldd	r19, Y+3	; 0x03
    10a0:	20 23       	and	r18, r16
    10a2:	31 23       	and	r19, r17
    10a4:	23 2b       	or	r18, r19
    10a6:	49 f0       	breq	.+18     	; 0x10ba <processMenu+0x82>
			{
				nextItem.ItemID = jRecord.NextItem;			// switch to next menu item
    10a8:	dc 80       	ldd	r13, Y+4	; 0x04
				nextItem.ItemTimeout = jRecord.Flags & TIMEOUT_MASK;
    10aa:	8d 81       	ldd	r24, Y+5	; 0x05
    10ac:	9f e3       	ldi	r25, 0x3F	; 63
    10ae:	c9 2e       	mov	r12, r25
    10b0:	c8 22       	and	r12, r24
				nextItem.ShiftFlags = (jRecord.Flags & (SHIFT_LEFT | SHIFT_RIGHT));
    10b2:	20 ec       	ldi	r18, 0xC0	; 192
    10b4:	b2 2e       	mov	r11, r18
    10b6:	b8 22       	and	r11, r24
    10b8:	07 c0       	rjmp	.+14     	; 0x10c8 <processMenu+0x90>
    10ba:	8f ef       	ldi	r24, 0xFF	; 255
    10bc:	e8 1a       	sub	r14, r24
    10be:	f8 0a       	sbc	r15, r24
	NextItem_t nextItem;
	nextItem.ItemID = selectedItemId;
	MenuJumpRecord	jRecord;
	uint8_t i;
	
	for (i = 0; i < sizeof(menuJumpSet)/sizeof(MenuJumpRecord); i++  )
    10c0:	80 e2       	ldi	r24, 0x20	; 32
    10c2:	e8 16       	cp	r14, r24
    10c4:	f1 04       	cpc	r15, r1
    10c6:	e1 f6       	brne	.-72     	; 0x1080 <processMenu+0x48>
	
	// Get next menu item according to current state and jump conditions
	nextItem = getNextMenuItem(selectedMenuItemID, jumpCondition);
	
	// If next item differs from current
	if (nextItem.ItemID != selectedMenuItemID)
    10c8:	80 91 0b 01 	lds	r24, 0x010B
    10cc:	d8 16       	cp	r13, r24
    10ce:	09 f1       	breq	.+66     	; 0x1112 <processMenu+0xda>
	{		
		// Call exit function for current item
		processItemFunction(selectedMenuFunctionRecord.LeaveFunction);
    10d0:	80 91 11 01 	lds	r24, 0x0111
    10d4:	90 91 12 01 	lds	r25, 0x0112
    10d8:	33 dd       	rcall	.-1434   	; 0xb40 <processItemFunction>
		
		// If shifting is specified, start it before calling any 
		//	new menu item functions 
		if (nextItem.ShiftFlags & SHIFT_RIGHT)
    10da:	b6 fe       	sbrs	r11, 6
    10dc:	02 c0       	rjmp	.+4      	; 0x10e2 <processMenu+0xaa>
			startShiftingWindowRight();
    10de:	8c dc       	rcall	.-1768   	; 0x9f8 <startShiftingWindowRight>
    10e0:	02 c0       	rjmp	.+4      	; 0x10e6 <processMenu+0xae>
		else if (nextItem.ShiftFlags & SHIFT_LEFT)
    10e2:	b7 fc       	sbrc	r11, 7
			startShiftingWindowLeft();
    10e4:	7b dc       	rcall	.-1802   	; 0x9dc <startShiftingWindowLeft>
		
		// Select new item
		selectedMenuItemID = nextItem.ItemID;
    10e6:	d0 92 0b 01 	sts	0x010B, r13
		
		// Load from FLASH and save function pointers
		getMenuFunctionRecord(selectedMenuItemID, &selectedMenuFunctionRecord);
    10ea:	8d 2d       	mov	r24, r13
    10ec:	7c df       	rcall	.-264    	; 0xfe6 <getMenuFunctionRecord.constprop.1>
		// Call select function for next item
		processItemFunction(selectedMenuFunctionRecord.SelectFunction);
    10ee:	80 91 0d 01 	lds	r24, 0x010D
    10f2:	90 91 0e 01 	lds	r25, 0x010E
    10f6:	24 dd       	rcall	.-1464   	; 0xb40 <processItemFunction>
		// Start timer if timeout is enabled
		if (nextItem.ItemTimeout != 0)
    10f8:	cc 20       	and	r12, r12
    10fa:	99 f0       	breq	.+38     	; 0x1122 <processMenu+0xea>
		{
			menuTimer.Top = nextItem.ItemTimeout * MENU_TIMEOUT_MULT;
    10fc:	cc 0c       	add	r12, r12
    10fe:	c0 92 7e 00 	sts	0x007E, r12
			menuTimer.Timer = 0;
    1102:	10 92 7d 00 	sts	0x007D, r1
			menuTimer.Enabled = 1;	
    1106:	80 91 7c 00 	lds	r24, 0x007C
    110a:	81 60       	ori	r24, 0x01	; 1
    110c:	80 93 7c 00 	sts	0x007C, r24
    1110:	08 c0       	rjmp	.+16     	; 0x1122 <processMenu+0xea>
		}
		
	}
	else
	{
		processSoftTimer8b(&userTimer);
    1112:	85 e1       	ldi	r24, 0x15	; 21
    1114:	91 e0       	ldi	r25, 0x01	; 1
    1116:	e9 d3       	rcall	.+2002   	; 0x18ea <processSoftTimer8b>
		// Stay at previous item
		processItemFunction(selectedMenuFunctionRecord.RunFunction);
    1118:	80 91 0f 01 	lds	r24, 0x010F
    111c:	90 91 10 01 	lds	r25, 0x0110
    1120:	0f dd       	rcall	.-1506   	; 0xb40 <processItemFunction>
	}	
}
    1122:	0f 90       	pop	r0
    1124:	0f 90       	pop	r0
    1126:	0f 90       	pop	r0
    1128:	0f 90       	pop	r0
    112a:	0f 90       	pop	r0
    112c:	df 91       	pop	r29
    112e:	cf 91       	pop	r28
    1130:	1f 91       	pop	r17
    1132:	0f 91       	pop	r16
    1134:	ff 90       	pop	r15
    1136:	ef 90       	pop	r14
    1138:	df 90       	pop	r13
    113a:	cf 90       	pop	r12
    113c:	bf 90       	pop	r11
    113e:	af 90       	pop	r10
    1140:	08 95       	ret

00001142 <i32toa_align_right>:
}



void i32toa_align_right(int32_t val, char *buffer, uint8_t len)
{
    1142:	cf 92       	push	r12
    1144:	df 92       	push	r13
    1146:	ef 92       	push	r14
    1148:	ff 92       	push	r15
    114a:	0f 93       	push	r16
    114c:	1f 93       	push	r17
    114e:	cf 93       	push	r28
    1150:	df 93       	push	r29
    1152:	12 2f       	mov	r17, r18
	uint8_t is_negative = 0;
	if (!len)	return;
    1154:	22 23       	and	r18, r18
    1156:	c9 f1       	breq	.+114    	; 0x11ca <i32toa_align_right+0x88>
	
	if (val < 0)
    1158:	97 ff       	sbrs	r25, 7
    115a:	09 c0       	rjmp	.+18     	; 0x116e <i32toa_align_right+0x2c>
	{
		val = -val;
    115c:	90 95       	com	r25
    115e:	80 95       	com	r24
    1160:	70 95       	com	r23
    1162:	61 95       	neg	r22
    1164:	7f 4f       	sbci	r23, 0xFF	; 255
    1166:	8f 4f       	sbci	r24, 0xFF	; 255
    1168:	9f 4f       	sbci	r25, 0xFF	; 255
		is_negative = 1;
    116a:	01 e0       	ldi	r16, 0x01	; 1
    116c:	01 c0       	rjmp	.+2      	; 0x1170 <i32toa_align_right+0x2e>



void i32toa_align_right(int32_t val, char *buffer, uint8_t len)
{
	uint8_t is_negative = 0;
    116e:	00 e0       	ldi	r16, 0x00	; 0
	{
		val = -val;
		is_negative = 1;
	}
	
	if (len & NO_TERMINATING_ZERO)
    1170:	17 ff       	sbrs	r17, 7
    1172:	05 c0       	rjmp	.+10     	; 0x117e <i32toa_align_right+0x3c>
	{
		len = len & ~NO_TERMINATING_ZERO;
    1174:	1f 77       	andi	r17, 0x7F	; 127
		buffer += len;	
    1176:	ea 01       	movw	r28, r20
    1178:	c1 0f       	add	r28, r17
    117a:	d1 1d       	adc	r29, r1
    117c:	04 c0       	rjmp	.+8      	; 0x1186 <i32toa_align_right+0x44>
	}
	else
	{
		buffer += len;	
    117e:	ea 01       	movw	r28, r20
    1180:	c1 0f       	add	r28, r17
    1182:	d1 1d       	adc	r29, r1
		*buffer = 0;
    1184:	18 82       	st	Y, r1
	}
	
	do
	{
		*--buffer = val % 10 + '0';
    1186:	2a e0       	ldi	r18, 0x0A	; 10
    1188:	c2 2e       	mov	r12, r18
    118a:	d1 2c       	mov	r13, r1
    118c:	e1 2c       	mov	r14, r1
    118e:	f1 2c       	mov	r15, r1
    1190:	a7 01       	movw	r20, r14
    1192:	96 01       	movw	r18, r12
    1194:	11 d5       	rcall	.+2594   	; 0x1bb8 <__divmodsi4>
    1196:	60 5d       	subi	r22, 0xD0	; 208
    1198:	6a 93       	st	-Y, r22
		val /= 10;
    119a:	b9 01       	movw	r22, r18
    119c:	ca 01       	movw	r24, r20
		len--;
    119e:	11 50       	subi	r17, 0x01	; 1
	}
	while ((val != 0) && len);
    11a0:	61 15       	cp	r22, r1
    11a2:	71 05       	cpc	r23, r1
    11a4:	81 05       	cpc	r24, r1
    11a6:	91 05       	cpc	r25, r1
    11a8:	19 f0       	breq	.+6      	; 0x11b0 <i32toa_align_right+0x6e>
    11aa:	11 11       	cpse	r17, r1
    11ac:	f1 cf       	rjmp	.-30     	; 0x1190 <i32toa_align_right+0x4e>
    11ae:	08 c0       	rjmp	.+16     	; 0x11c0 <i32toa_align_right+0x7e>
	
	if ( (len) && (is_negative) )
    11b0:	11 23       	and	r17, r17
    11b2:	31 f0       	breq	.+12     	; 0x11c0 <i32toa_align_right+0x7e>
    11b4:	00 23       	and	r16, r16
    11b6:	21 f0       	breq	.+8      	; 0x11c0 <i32toa_align_right+0x7e>
	{
		*--buffer = '-';
    11b8:	21 97       	sbiw	r28, 0x01	; 1
    11ba:	8d e2       	ldi	r24, 0x2D	; 45
    11bc:	88 83       	st	Y, r24
		len--;	
    11be:	11 50       	subi	r17, 0x01	; 1
	}	
	
	// Padding
	while(len--)
		*--buffer = ' ';
    11c0:	80 e2       	ldi	r24, 0x20	; 32
    11c2:	01 c0       	rjmp	.+2      	; 0x11c6 <i32toa_align_right+0x84>
    11c4:	8a 93       	st	-Y, r24
		*--buffer = '-';
		len--;	
	}	
	
	// Padding
	while(len--)
    11c6:	11 50       	subi	r17, 0x01	; 1
    11c8:	e8 f7       	brcc	.-6      	; 0x11c4 <i32toa_align_right+0x82>
		*--buffer = ' ';
}
    11ca:	df 91       	pop	r29
    11cc:	cf 91       	pop	r28
    11ce:	1f 91       	pop	r17
    11d0:	0f 91       	pop	r16
    11d2:	ff 90       	pop	r15
    11d4:	ef 90       	pop	r14
    11d6:	df 90       	pop	r13
    11d8:	cf 90       	pop	r12
    11da:	08 95       	ret

000011dc <u16toa_align_right>:




void u16toa_align_right(uint16_t val, char *buffer, uint8_t len)
{
    11dc:	fb 01       	movw	r30, r22
    11de:	24 2f       	mov	r18, r20
	i32toa_align_right((int32_t)val, buffer, len);
    11e0:	bc 01       	movw	r22, r24
    11e2:	80 e0       	ldi	r24, 0x00	; 0
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	af 01       	movw	r20, r30
    11e8:	ac cf       	rjmp	.-168    	; 0x1142 <i32toa_align_right>

000011ea <logI32p>:
	u16toa_align_right(val,str,6);
	USART_sendstr(str);
}

static void logI32p(int32_t val)
{
    11ea:	cf 93       	push	r28
    11ec:	df 93       	push	r29
    11ee:	cd b7       	in	r28, 0x3d	; 61
    11f0:	de b7       	in	r29, 0x3e	; 62
    11f2:	2c 97       	sbiw	r28, 0x0c	; 12
    11f4:	0f b6       	in	r0, 0x3f	; 63
    11f6:	f8 94       	cli
    11f8:	de bf       	out	0x3e, r29	; 62
    11fa:	0f be       	out	0x3f, r0	; 63
    11fc:	cd bf       	out	0x3d, r28	; 61
	char str[12];
	i32toa_align_right(val,str,12);
    11fe:	2c e0       	ldi	r18, 0x0C	; 12
    1200:	ae 01       	movw	r20, r28
    1202:	4f 5f       	subi	r20, 0xFF	; 255
    1204:	5f 4f       	sbci	r21, 0xFF	; 255
    1206:	9d df       	rcall	.-198    	; 0x1142 <i32toa_align_right>
	USART_sendstr(str);
    1208:	ce 01       	movw	r24, r28
    120a:	01 96       	adiw	r24, 0x01	; 1
    120c:	a4 d4       	rcall	.+2376   	; 0x1b56 <USART_sendstr>
}
    120e:	2c 96       	adiw	r28, 0x0c	; 12
    1210:	0f b6       	in	r0, 0x3f	; 63
    1212:	f8 94       	cli
    1214:	de bf       	out	0x3e, r29	; 62
    1216:	0f be       	out	0x3f, r0	; 63
    1218:	cd bf       	out	0x3d, r28	; 61
    121a:	df 91       	pop	r29
    121c:	cf 91       	pop	r28
    121e:	08 95       	ret

00001220 <logU16p>:
    }
}


static void logU16p(uint16_t val)
{
    1220:	cf 93       	push	r28
    1222:	df 93       	push	r29
    1224:	00 d0       	rcall	.+0      	; 0x1226 <logU16p+0x6>
    1226:	00 d0       	rcall	.+0      	; 0x1228 <logU16p+0x8>
    1228:	00 d0       	rcall	.+0      	; 0x122a <logU16p+0xa>
    122a:	cd b7       	in	r28, 0x3d	; 61
    122c:	de b7       	in	r29, 0x3e	; 62
	char str[6];
	u16toa_align_right(val,str,6);
    122e:	46 e0       	ldi	r20, 0x06	; 6
    1230:	be 01       	movw	r22, r28
    1232:	6f 5f       	subi	r22, 0xFF	; 255
    1234:	7f 4f       	sbci	r23, 0xFF	; 255
    1236:	d2 df       	rcall	.-92     	; 0x11dc <u16toa_align_right>
	USART_sendstr(str);
    1238:	ce 01       	movw	r24, r28
    123a:	01 96       	adiw	r24, 0x01	; 1
    123c:	8c d4       	rcall	.+2328   	; 0x1b56 <USART_sendstr>
}
    123e:	26 96       	adiw	r28, 0x06	; 6
    1240:	0f b6       	in	r0, 0x3f	; 63
    1242:	f8 94       	cli
    1244:	de bf       	out	0x3e, r29	; 62
    1246:	0f be       	out	0x3f, r0	; 63
    1248:	cd bf       	out	0x3d, r28	; 61
    124a:	df 91       	pop	r29
    124c:	cf 91       	pop	r28
    124e:	08 95       	ret

00001250 <main>:
}



int main(void)
{
    1250:	cf 93       	push	r28
    1252:	df 93       	push	r29
    1254:	1f 92       	push	r1
    1256:	cd b7       	in	r28, 0x3d	; 61
    1258:	de b7       	in	r29, 0x3e	; 62
	volatile char str[12];
	volatile uint8_t temp8u = 0x00;
    125a:	19 82       	std	Y+1, r1	; 0x01


static void init_system_io()
{
	// Setup Port D
	PORTD = 0;//(1<<PD_SYNCA | 1<<PD_SYNCB);
    125c:	12 ba       	out	0x12, r1	; 18
	DDRD = (1<<PD_TXD | 1<<PD_M1 | 1<<PD_M2 | 1<<PD_HEATER | 1<<PD_HEAT_INDIC );
    125e:	8e e3       	ldi	r24, 0x3E	; 62
    1260:	81 bb       	out	0x11, r24	; 17
	
	// Setup Port B
	PORTB = 0;
    1262:	18 ba       	out	0x18, r1	; 24
	DDRB = (1<<PB_BEEPER | 1<<PB_LED_DOUT | 1<<PB_LED_CLK | 1<<PB_SEGF | 1<<PB_SEGG | 1<<PB_SEGH);
    1264:	8f e3       	ldi	r24, 0x3F	; 63
    1266:	87 bb       	out	0x17, r24	; 23
	
	PORTC = 0;
    1268:	15 ba       	out	0x15, r1	; 21
	DDRC = (1<<PC_SEGA | 1<<PC_SEGB | 1<<PC_SEGC | 1<<PC_SEGD | 1<<PC_SEGE);	
    126a:	8f e1       	ldi	r24, 0x1F	; 31
    126c:	84 bb       	out	0x14, r24	; 20

	// Setup timer0
	// 1/1024 prescaler, T=64us @16MHz
	TCCR0 = (1<<CS02 | 0<<CS01 | 1<<CS00);
    126e:	85 e0       	ldi	r24, 0x05	; 5
    1270:	83 bf       	out	0x33, r24	; 51
	TCNT0 = 0;
    1272:	12 be       	out	0x32, r1	; 50
	// Clear interrupt flag
	TIFR |= (1<<TOV0);
    1274:	88 b7       	in	r24, 0x38	; 56
    1276:	81 60       	ori	r24, 0x01	; 1
    1278:	88 bf       	out	0x38, r24	; 56
	// Enable interrupts from timer 0
	TIMSK |= (1<<TOIE0);
    127a:	89 b7       	in	r24, 0x39	; 57
    127c:	81 60       	ori	r24, 0x01	; 1
    127e:	89 bf       	out	0x39, r24	; 57
	
	// Setup timer2 as 1ms system frequency generator
	// 1/64 prescaler, CTC mode, OC2 disconnected
	TCCR2 = (1<<CS22 | 1<<WGM21);
    1280:	8c e0       	ldi	r24, 0x0C	; 12
    1282:	85 bd       	out	0x25, r24	; 37
	OCR2 = 249;						// 1ms @ 16MHz
    1284:	89 ef       	ldi	r24, 0xF9	; 249
    1286:	83 bd       	out	0x23, r24	; 35
	TIMSK |= (1<<OCIE2);
    1288:	89 b7       	in	r24, 0x39	; 57
    128a:	80 68       	ori	r24, 0x80	; 128
    128c:	89 bf       	out	0x39, r24	; 57
	
	// Setup timer1 as beeper frequency generator
	// CTC mode, 1/64 prescaler
	TCCR1A = 0;
    128e:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = (1<<WGM12 | 1<<CS11 | 1<<CS10);
    1290:	8b e0       	ldi	r24, 0x0B	; 11
    1292:	8e bd       	out	0x2e, r24	; 46
	// 1kHz beeper frequency default
	OCR1A = 127;
    1294:	8f e7       	ldi	r24, 0x7F	; 127
    1296:	90 e0       	ldi	r25, 0x00	; 0
    1298:	9b bd       	out	0x2b, r25	; 43
    129a:	8a bd       	out	0x2a, r24	; 42

	// Setup AC sync comparator
	// Interrupt on output toggle
	ACSR = (1<<ACIE | 0<<ACIS1 | 0<<ACIS0);
    129c:	88 e0       	ldi	r24, 0x08	; 8
    129e:	88 b9       	out	0x08, r24	; 8
	
	// Setup ADC
	// Internal Vref + cap, input ADC5, 
	ADMUX = (1<<REFS1 | 1<<REFS0 | 0<<MUX3 | 1<<MUX2 | 0<<MUX1 | 1<<MUX0 );
    12a0:	85 ec       	ldi	r24, 0xC5	; 197
    12a2:	87 b9       	out	0x07, r24	; 7
	// Prescaler = 128
	ADCSRA = (1<<ADEN |/* 1<<ADFR |*/  1<<ADIE | 1<<ADPS2 | 1<<ADPS1 | 1<<ADPS0);
    12a4:	8f e8       	ldi	r24, 0x8F	; 143
    12a6:	86 b9       	out	0x06, r24	; 6
	
	// Setup USART
	// Double speed
	UCSRA = (1<<U2X);
    12a8:	82 e0       	ldi	r24, 0x02	; 2
    12aa:	8b b9       	out	0x0b, r24	; 11
	UCSRB = (1<<RXEN | 1<<TXEN | 0<<UCSZ2);
    12ac:	88 e1       	ldi	r24, 0x18	; 24
    12ae:	8a b9       	out	0x0a, r24	; 10
	// No parity, 1 stop bit, 8 bit
	UCSRC = (1<<URSEL | 0<<UPM1 | 0<<UPM0 | 0<<USBS | 1<<UCSZ1 | 1<<UCSZ0);
    12b0:	86 e8       	ldi	r24, 0x86	; 134
    12b2:	80 bd       	out	0x20, r24	; 32
	// 57600 @16MHz, 2x
	UBRRH=0x00;
    12b4:	10 bc       	out	0x20, r1	; 32
	UBRRL=0x22;
    12b6:	82 e2       	ldi	r24, 0x22	; 34
    12b8:	89 b9       	out	0x09, r24	; 9
	// Initialize MCU IO
	init_system_io();

	// Restore params from EEPROM
	// If some values are corrupted, settings or/and calibration are loaded with default configuration.
	temp8u = restoreGlobalParams();
    12ba:	5a da       	rcall	.-2892   	; 0x770 <restoreGlobalParams>
    12bc:	89 83       	std	Y+1, r24	; 0x01
	// Calibrate ADC coefficients using restored params
	calculateCoeffs();
    12be:	b2 d7       	rcall	.+3940   	; 0x2224 <__data_load_end+0x480>
	// Initialize LED indicator
	initLedIndicator();
    12c0:	a9 db       	rcall	.-2222   	; 0xa14 <initLedIndicator>
	// Clear comparator interrupt flag to prevent false triggering
	ACSR |= (1<<ACI);
    12c2:	44 9a       	sbi	0x08, 4	; 8
	sei();
    12c4:	78 94       	sei
	// If default values were loaded from EEPROM, inform user
	#ifdef USE_EEPROM_CRC
	if (temp8u)
    12c6:	89 81       	ldd	r24, Y+1	; 0x01
    12c8:	88 23       	and	r24, r24
    12ca:	c1 f0       	breq	.+48     	; 0x12fc <main+0xac>
	{
		printLedBuffer(0,"ERR E");
    12cc:	61 ee       	ldi	r22, 0xE1	; 225
    12ce:	70 e0       	ldi	r23, 0x00	; 0
    12d0:	80 e0       	ldi	r24, 0x00	; 0
    12d2:	c3 db       	rcall	.-2170   	; 0xa5a <printLedBuffer>
		fillLedBuffer(5,1,temp8u + 0x30);	// error code: E1 - CRC error in global params, E2 - CRC error in calibration, E3 - both
    12d4:	49 81       	ldd	r20, Y+1	; 0x01
    12d6:	40 5d       	subi	r20, 0xD0	; 208
    12d8:	61 e0       	ldi	r22, 0x01	; 1
    12da:	85 e0       	ldi	r24, 0x05	; 5
    12dc:	5b db       	rcall	.-2378   	; 0x994 <fillLedBuffer>
		// Beep
		SetBeeperFreq(700);
    12de:	8c eb       	ldi	r24, 0xBC	; 188
    12e0:	92 e0       	ldi	r25, 0x02	; 2
    12e2:	99 d3       	rcall	.+1842   	; 0x1a16 <SetBeeperFreq>
		StartBeep(500);
    12e4:	84 ef       	ldi	r24, 0xF4	; 244
    12e6:	91 e0       	ldi	r25, 0x01	; 1
    12e8:	97 d3       	rcall	.+1838   	; 0x1a18 <StartBeep>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    12ea:	2f ef       	ldi	r18, 0xFF	; 255
    12ec:	83 ed       	ldi	r24, 0xD3	; 211
    12ee:	90 e3       	ldi	r25, 0x30	; 48
    12f0:	21 50       	subi	r18, 0x01	; 1
    12f2:	80 40       	sbci	r24, 0x00	; 0
    12f4:	90 40       	sbci	r25, 0x00	; 0
    12f6:	e1 f7       	brne	.-8      	; 0x12f0 <main+0xa0>
    12f8:	00 c0       	rjmp	.+0      	; 0x12fa <main+0xaa>
    12fa:	00 00       	nop
		_delay_ms(1000);
	} 
	#endif
	// Dump calibration data over UART - might be useful
	logU16p(cp.cpoint1);
    12fc:	80 91 ae 01 	lds	r24, 0x01AE
    1300:	90 e0       	ldi	r25, 0x00	; 0
    1302:	8e df       	rcall	.-228    	; 0x1220 <logU16p>
	logU16p(cp.cpoint1_adc);
    1304:	80 91 b0 01 	lds	r24, 0x01B0
    1308:	90 91 b1 01 	lds	r25, 0x01B1
    130c:	89 df       	rcall	.-238    	; 0x1220 <logU16p>
	logU16p(cp.cpoint2);
    130e:	80 91 af 01 	lds	r24, 0x01AF
    1312:	90 e0       	ldi	r25, 0x00	; 0
    1314:	85 df       	rcall	.-246    	; 0x1220 <logU16p>
	logU16p(cp.cpoint2_adc);
    1316:	80 91 b2 01 	lds	r24, 0x01B2
    131a:	90 91 b3 01 	lds	r25, 0x01B3
    131e:	80 df       	rcall	.-256    	; 0x1220 <logU16p>
	USART_sendstr("\n\r");
    1320:	87 ee       	ldi	r24, 0xE7	; 231
    1322:	90 e0       	ldi	r25, 0x00	; 0
    1324:	18 d4       	rcall	.+2096   	; 0x1b56 <USART_sendstr>
    1326:	2f ef       	ldi	r18, 0xFF	; 255
    1328:	81 ee       	ldi	r24, 0xE1	; 225
    132a:	94 e0       	ldi	r25, 0x04	; 4
    132c:	21 50       	subi	r18, 0x01	; 1
    132e:	80 40       	sbci	r24, 0x00	; 0
    1330:	90 40       	sbci	r25, 0x00	; 0
    1332:	e1 f7       	brne	.-8      	; 0x132c <main+0xdc>
    1334:	00 c0       	rjmp	.+0      	; 0x1336 <main+0xe6>
    1336:	00 00       	nop
	
	// Safety delay for power part and ADC buffer
	_delay_ms(100);
	// Check AC line
	if(p_state == 0x0F) 	
    1338:	80 91 87 00 	lds	r24, 0x0087
    133c:	8f 30       	cpi	r24, 0x0F	; 15
    133e:	69 f4       	brne	.+26     	; 0x135a <main+0x10a>
	{
		// Power control state machine has not changed - sync has not been detected
		printLedBuffer(0,"ERR AC");
    1340:	6a ee       	ldi	r22, 0xEA	; 234
    1342:	70 e0       	ldi	r23, 0x00	; 0
    1344:	80 e0       	ldi	r24, 0x00	; 0
    1346:	89 db       	rcall	.-2286   	; 0xa5a <printLedBuffer>
    1348:	2f ef       	ldi	r18, 0xFF	; 255
    134a:	83 ed       	ldi	r24, 0xD3	; 211
    134c:	90 e3       	ldi	r25, 0x30	; 48
    134e:	21 50       	subi	r18, 0x01	; 1
    1350:	80 40       	sbci	r24, 0x00	; 0
    1352:	90 40       	sbci	r25, 0x00	; 0
    1354:	e1 f7       	brne	.-8      	; 0x134e <main+0xfe>
    1356:	00 c0       	rjmp	.+0      	; 0x1358 <main+0x108>
    1358:	00 00       	nop
		_delay_ms(1000);
	}
	// Initialize menu
	InitMenu();
    135a:	65 de       	rcall	.-822    	; 0x1026 <InitMenu>
	// Beep
	SetBeeperFreq(1000);
    135c:	88 ee       	ldi	r24, 0xE8	; 232
    135e:	93 e0       	ldi	r25, 0x03	; 3
    1360:	5a d3       	rcall	.+1716   	; 0x1a16 <SetBeeperFreq>
//	StartBeep(200);

	Sound_Play(m_siren2);
    1362:	8c e0       	ldi	r24, 0x0C	; 12
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	e0 d3       	rcall	.+1984   	; 0x1b28 <Sound_Play>

	// When we get here, full ADC buffer have been sampled
	// Get oversampled and filtered ADC for PID controller
	update_normalized_adc();
    1368:	aa d7       	rcall	.+3924   	; 0x22be <__data_load_end+0x51a>
	// Call PID controller function in order to initialize it's internal structures
	heaterInit();
    136a:	0c d9       	rcall	.-3560   	; 0x584 <heaterInit>
	// Start rotating
	setMotorDirection(ROLL_FWD);
    136c:	81 e0       	ldi	r24, 0x01	; 1
    136e:	36 d1       	rcall	.+620    	; 0x15dc <setMotorDirection>
	// Clear timer
	menuUpdateTimer.FOvfl = 0;
    1370:	80 91 90 00 	lds	r24, 0x0090
    1374:	8f 7b       	andi	r24, 0xBF	; 191
    1376:	80 93 90 00 	sts	0x0090, r24
	// Enable watchdog
	wdt_enable(WDTO_1S);
    137a:	2e e0       	ldi	r18, 0x0E	; 14
    137c:	88 e1       	ldi	r24, 0x18	; 24
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	0f b6       	in	r0, 0x3f	; 63
    1382:	f8 94       	cli
    1384:	a8 95       	wdr
    1386:	81 bd       	out	0x21, r24	; 33
    1388:	0f be       	out	0x3f, r0	; 63
    138a:	21 bd       	out	0x21, r18	; 33

    while(1)
    {
		
		if (menuUpdateTimer.FOvfl)
    138c:	80 91 90 00 	lds	r24, 0x0090
    1390:	86 ff       	sbrs	r24, 6
    1392:	fc cf       	rjmp	.-8      	; 0x138c <main+0x13c>
		{
			// Reset watchdog timer
			wdt_reset();
    1394:	a8 95       	wdr
			
			//--------- BUTTONS ----------//
			
			// Get new button state
			process_buttons();
    1396:	09 d8       	rcall	.-4078   	; 0x3aa <process_buttons>
			
			// Give sound feedback
			if (button_state & BL_MENU)
    1398:	80 91 fe 00 	lds	r24, 0x00FE
    139c:	90 91 ff 00 	lds	r25, 0x00FF
    13a0:	91 ff       	sbrs	r25, 1
    13a2:	03 c0       	rjmp	.+6      	; 0x13aa <main+0x15a>
			{
				SetBeeperFreq(800);
    13a4:	80 e2       	ldi	r24, 0x20	; 32
    13a6:	93 e0       	ldi	r25, 0x03	; 3
    13a8:	06 c0       	rjmp	.+12     	; 0x13b6 <main+0x166>
				StartBeep(40);
			}
			else if (button_action_down & (BD_MENU | BD_UP | BD_DOWN | BD_HEATCTRL))
    13aa:	80 91 fd 00 	lds	r24, 0x00FD
    13ae:	81 7e       	andi	r24, 0xE1	; 225
    13b0:	31 f0       	breq	.+12     	; 0x13be <main+0x16e>
			{
				SetBeeperFreq(1000);
    13b2:	88 ee       	ldi	r24, 0xE8	; 232
    13b4:	93 e0       	ldi	r25, 0x03	; 3
    13b6:	2f d3       	rcall	.+1630   	; 0x1a16 <SetBeeperFreq>
				StartBeep(40);
    13b8:	88 e2       	ldi	r24, 0x28	; 40
    13ba:	90 e0       	ldi	r25, 0x00	; 0
    13bc:	2d d3       	rcall	.+1626   	; 0x1a18 <StartBeep>
			}	
			// Direction control buttons sounds get special processing at processRollControl()
			
			// If any button is pressed, restart power off interval
			if (button_action_down)
    13be:	80 91 fd 00 	lds	r24, 0x00FD
    13c2:	81 11       	cpse	r24, r1
				resetAutoPowerOffCounter();
    13c4:	25 d3       	rcall	.+1610   	; 0x1a10 <resetAutoPowerOffCounter>
			
			//---------- TIMERS ----------//
			
			// Process timers and time counters - it is important to call
			// this function before menu and power controls processing
			processSystemTimers();
    13c6:	bd d2       	rcall	.+1402   	; 0x1942 <processSystemTimers>

			// Warn user about soon auto powering off
			if (sys_timers.flags & AUTOPOFF_SOON)
    13c8:	80 91 8f 00 	lds	r24, 0x008F
    13cc:	83 ff       	sbrs	r24, 3
    13ce:	06 c0       	rjmp	.+12     	; 0x13dc <main+0x18c>
			{
				SetBeeperFreq(1200);
    13d0:	80 eb       	ldi	r24, 0xB0	; 176
    13d2:	94 e0       	ldi	r25, 0x04	; 4
    13d4:	20 d3       	rcall	.+1600   	; 0x1a16 <SetBeeperFreq>
				StartBeep(200);
    13d6:	88 ec       	ldi	r24, 0xC8	; 200
    13d8:	90 e0       	ldi	r25, 0x00	; 0
    13da:	1e d3       	rcall	.+1596   	; 0x1a18 <StartBeep>
			}		
			
			//----------- ADC ------------//
			
			// Get new temperature measurement
			update_normalized_adc();			
    13dc:	70 d7       	rcall	.+3808   	; 0x22be <__data_load_end+0x51a>
		
			// Update indicated Celsius degree
			if (sys_timers.flags & EXPIRED_CELSIUS)
    13de:	80 91 8f 00 	lds	r24, 0x008F
    13e2:	80 fd       	sbrc	r24, 0
				update_Celsius();		
    13e4:	a8 d7       	rcall	.+3920   	; 0x2336 <__data_load_end+0x592>
			
			//----------- MENU -----------//		
				
			// Process user menu states, settings and indication
			processMenu();
    13e6:	28 de       	rcall	.-944    	; 0x1038 <processMenu>
			
			//--------- CONTROLS ---------//		
			
			// Process cyclic rolling, direction control
			processRollControl();	
    13e8:	34 d8       	rcall	.-3992   	; 0x452 <processRollControl>
			
			// Process heater regulation
			processHeaterControl();
    13ea:	d3 d8       	rcall	.-3674   	; 0x592 <processHeaterControl>
		
			// Process heater events and warnings
			processHeaterAlerts();
    13ec:	46 d9       	rcall	.-3444   	; 0x67a <processHeaterAlerts>
			
			
			
			//------- LOG to UART --------//	
			if (sys_timers.flags & EXPIRED_LOG)
    13ee:	80 91 8f 00 	lds	r24, 0x008F
    13f2:	85 ff       	sbrs	r24, 5
    13f4:	42 c0       	rjmp	.+132    	; 0x147a <main+0x22a>
			{
				
				logU16p(adc_celsius);					// Actual temp Celsius
    13f6:	80 91 83 01 	lds	r24, 0x0183
    13fa:	90 91 84 01 	lds	r25, 0x0184
    13fe:	10 df       	rcall	.-480    	; 0x1220 <logU16p>
				logU16p(adc_oversampled);				// Actual temp (ADC), oversampled
    1400:	80 91 3e 01 	lds	r24, 0x013E
    1404:	90 91 3f 01 	lds	r25, 0x013F
    1408:	0b df       	rcall	.-490    	; 0x1220 <logU16p>
				logU16p(adc_filtered);					// Actual temp (ADC), oversampled, filtered
    140a:	80 91 3c 01 	lds	r24, 0x013C
    140e:	90 91 3d 01 	lds	r25, 0x013D
    1412:	06 df       	rcall	.-500    	; 0x1220 <logU16p>
				USART_sendstr("    ");
    1414:	87 ec       	ldi	r24, 0xC7	; 199
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	9e d3       	rcall	.+1852   	; 0x1b56 <USART_sendstr>
				
				logU16p(dbg_SetPointPID);				// Temp setting, as input to PID
    141a:	80 91 ba 01 	lds	r24, 0x01BA
    141e:	90 91 bb 01 	lds	r25, 0x01BB
    1422:	fe de       	rcall	.-516    	; 0x1220 <logU16p>
				logU16p(dbg_RealTempPID);				// Real temp, sampled for PID input
    1424:	80 91 b8 01 	lds	r24, 0x01B8
    1428:	90 91 b9 01 	lds	r25, 0x01B9
    142c:	f9 de       	rcall	.-526    	; 0x1220 <logU16p>
				
				logI32p(dbg_PID_p_term);				// p term
    142e:	60 91 d2 01 	lds	r22, 0x01D2
    1432:	70 91 d3 01 	lds	r23, 0x01D3
    1436:	88 27       	eor	r24, r24
    1438:	77 fd       	sbrc	r23, 7
    143a:	80 95       	com	r24
    143c:	98 2f       	mov	r25, r24
    143e:	d5 de       	rcall	.-598    	; 0x11ea <logI32p>
				logI32p(dbg_PID_d_term);				// d term
    1440:	60 91 d6 01 	lds	r22, 0x01D6
    1444:	70 91 d7 01 	lds	r23, 0x01D7
    1448:	88 27       	eor	r24, r24
    144a:	77 fd       	sbrc	r23, 7
    144c:	80 95       	com	r24
    144e:	98 2f       	mov	r25, r24
    1450:	cc de       	rcall	.-616    	; 0x11ea <logI32p>
				logI32p(dbg_PID_i_term);				// i term
    1452:	60 91 d4 01 	lds	r22, 0x01D4
    1456:	70 91 d5 01 	lds	r23, 0x01D5
    145a:	88 27       	eor	r24, r24
    145c:	77 fd       	sbrc	r23, 7
    145e:	80 95       	com	r24
    1460:	98 2f       	mov	r25, r24
    1462:	c3 de       	rcall	.-634    	; 0x11ea <logI32p>
				USART_sendstr("    ");
    1464:	87 ec       	ldi	r24, 0xC7	; 199
    1466:	90 e0       	ldi	r25, 0x00	; 0
    1468:	76 d3       	rcall	.+1772   	; 0x1b56 <USART_sendstr>
				
				logU16p(dbg_PID_output);				// PID output
    146a:	80 91 d0 01 	lds	r24, 0x01D0
    146e:	90 91 d1 01 	lds	r25, 0x01D1
    1472:	d6 de       	rcall	.-596    	; 0x1220 <logU16p>
			
				USART_sendstr("\n\r");
    1474:	87 ee       	ldi	r24, 0xE7	; 231
    1476:	90 e0       	ldi	r25, 0x00	; 0
    1478:	6e d3       	rcall	.+1756   	; 0x1b56 <USART_sendstr>
				//---------------------------------//
				
			}
			
			
			menuUpdateTimer.FOvfl = 0;	
    147a:	80 91 90 00 	lds	r24, 0x0090
    147e:	8f 7b       	andi	r24, 0xBF	; 191
    1480:	80 93 90 00 	sts	0x0090, r24
    1484:	83 cf       	rjmp	.-250    	; 0x138c <main+0x13c>

00001486 <initPID>:
	//dterm_filter_core.n = 8;
	//dterm_filter_core.dc_gain = 512;
//	dterm_filter_core.coeffs = dterm_coeffs;
	for (i=0;i<4;i++)
	{
		pid_dterm_buffer[i] = 0;
    1486:	10 92 1a 01 	sts	0x011A, r1
    148a:	10 92 19 01 	sts	0x0119, r1
    148e:	10 92 1c 01 	sts	0x011C, r1
    1492:	10 92 1b 01 	sts	0x011B, r1
    1496:	10 92 1e 01 	sts	0x011E, r1
    149a:	10 92 1d 01 	sts	0x011D, r1
    149e:	10 92 20 01 	sts	0x0120, r1
    14a2:	10 92 1f 01 	sts	0x011F, r1
	}
	lastProcessValue = processValue;
    14a6:	90 93 22 01 	sts	0x0122, r25
    14aa:	80 93 21 01 	sts	0x0121, r24
	integAcc = 0;
    14ae:	10 92 24 01 	sts	0x0124, r1
    14b2:	10 92 23 01 	sts	0x0123, r1
    14b6:	08 95       	ret

000014b8 <processPID>:
}						
 
uint8_t processPID(uint16_t setPoint, uint16_t processValue)
{
    14b8:	ef 92       	push	r14
    14ba:	ff 92       	push	r15
    14bc:	0f 93       	push	r16
    14be:	1f 93       	push	r17
    14c0:	cf 93       	push	r28
    14c2:	df 93       	push	r29
    14c4:	8b 01       	movw	r16, r22
	int16_t error, p_term, i_term, d_term, temp;
	
	// Get the error
	error = setPoint - processValue;
    14c6:	86 1b       	sub	r24, r22
    14c8:	97 0b       	sbc	r25, r23
	
	//------ Calculate P term --------//
	if (error > (PROP_MAX / Kp))			// Compare before multiplication to avoid overflow
    14ca:	86 38       	cpi	r24, 0x86	; 134
    14cc:	91 05       	cpc	r25, r1
    14ce:	5c f4       	brge	.+22     	; 0x14e6 <processPID+0x2e>
	{
		p_term = PROP_MAX;	
	}
	else if (error < (PROP_MIN / Kp))
    14d0:	8b 37       	cpi	r24, 0x7B	; 123
    14d2:	2f ef       	ldi	r18, 0xFF	; 255
    14d4:	92 07       	cpc	r25, r18
    14d6:	54 f0       	brlt	.+20     	; 0x14ec <processPID+0x34>
	{
		p_term = PROP_MIN;	
	}
	else
	{
		p_term = error * Kp;
    14d8:	2f e0       	ldi	r18, 0x0F	; 15
    14da:	28 9f       	mul	r18, r24
    14dc:	e0 01       	movw	r28, r0
    14de:	29 9f       	mul	r18, r25
    14e0:	d0 0d       	add	r29, r0
    14e2:	11 24       	eor	r1, r1
    14e4:	05 c0       	rjmp	.+10     	; 0x14f0 <processPID+0x38>
	error = setPoint - processValue;
	
	//------ Calculate P term --------//
	if (error > (PROP_MAX / Kp))			// Compare before multiplication to avoid overflow
	{
		p_term = PROP_MAX;	
    14e6:	c0 ed       	ldi	r28, 0xD0	; 208
    14e8:	d7 e0       	ldi	r29, 0x07	; 7
    14ea:	02 c0       	rjmp	.+4      	; 0x14f0 <processPID+0x38>
	}
	else if (error < (PROP_MIN / Kp))
	{
		p_term = PROP_MIN;	
    14ec:	c0 e3       	ldi	r28, 0x30	; 48
    14ee:	d8 ef       	ldi	r29, 0xF8	; 248
	{
		p_term = error * Kp;
	}
	
	//------ Calculate I term --------//
	integAcc += error * Ki;	
    14f0:	45 e0       	ldi	r20, 0x05	; 5
    14f2:	48 9f       	mul	r20, r24
    14f4:	90 01       	movw	r18, r0
    14f6:	49 9f       	mul	r20, r25
    14f8:	30 0d       	add	r19, r0
    14fa:	11 24       	eor	r1, r1
    14fc:	80 91 23 01 	lds	r24, 0x0123
    1500:	90 91 24 01 	lds	r25, 0x0124
    1504:	28 0f       	add	r18, r24
    1506:	39 1f       	adc	r19, r25
	if (integAcc > INTEGRATOR_MAX )
    1508:	21 32       	cpi	r18, 0x21	; 33
    150a:	8e e4       	ldi	r24, 0x4E	; 78
    150c:	38 07       	cpc	r19, r24
    150e:	3c f0       	brlt	.+14     	; 0x151e <processPID+0x66>
	{
		integAcc = INTEGRATOR_MAX;
    1510:	80 e2       	ldi	r24, 0x20	; 32
    1512:	9e e4       	ldi	r25, 0x4E	; 78
    1514:	90 93 24 01 	sts	0x0124, r25
    1518:	80 93 23 01 	sts	0x0123, r24
    151c:	0b c0       	rjmp	.+22     	; 0x1534 <processPID+0x7c>
	}
	else if (integAcc < INTEGRATOR_MIN)
    151e:	37 fd       	sbrc	r19, 7
    1520:	05 c0       	rjmp	.+10     	; 0x152c <processPID+0x74>
	{
		p_term = error * Kp;
	}
	
	//------ Calculate I term --------//
	integAcc += error * Ki;	
    1522:	30 93 24 01 	sts	0x0124, r19
    1526:	20 93 23 01 	sts	0x0123, r18
    152a:	04 c0       	rjmp	.+8      	; 0x1534 <processPID+0x7c>
	{
		integAcc = INTEGRATOR_MAX;
	}
	else if (integAcc < INTEGRATOR_MIN)
	{
		integAcc = INTEGRATOR_MIN;
    152c:	10 92 24 01 	sts	0x0124, r1
    1530:	10 92 23 01 	sts	0x0123, r1
	}
	i_term = integAcc / INTEGRATOR_SCALE;
    1534:	80 91 23 01 	lds	r24, 0x0123
    1538:	90 91 24 01 	lds	r25, 0x0124
    153c:	68 e2       	ldi	r22, 0x28	; 40
    153e:	70 e0       	ldi	r23, 0x00	; 0
    1540:	28 d3       	rcall	.+1616   	; 0x1b92 <__divmodhi4>
    1542:	7b 01       	movw	r14, r22

	//------ Calculate D term --------//
	d_term = fir_i16_i8((lastProcessValue - processValue), pid_dterm_buffer, &dterm_filter_core);
    1544:	80 91 21 01 	lds	r24, 0x0121
    1548:	90 91 22 01 	lds	r25, 0x0122
    154c:	40 e8       	ldi	r20, 0x80	; 128
    154e:	50 e0       	ldi	r21, 0x00	; 0
    1550:	69 e1       	ldi	r22, 0x19	; 25
    1552:	71 e0       	ldi	r23, 0x01	; 1
    1554:	80 1b       	sub	r24, r16
    1556:	91 0b       	sbc	r25, r17
    1558:	4e d9       	rcall	.-3428   	; 0x7f6 <fir_i16_i8>
	d_term = Kd * d_term;
    155a:	22 e3       	ldi	r18, 0x32	; 50
    155c:	28 9f       	mul	r18, r24
    155e:	f0 01       	movw	r30, r0
    1560:	29 9f       	mul	r18, r25
    1562:	f0 0d       	add	r31, r0
    1564:	11 24       	eor	r1, r1

	lastProcessValue = processValue;
    1566:	10 93 22 01 	sts	0x0122, r17
    156a:	00 93 21 01 	sts	0x0121, r16
	
	//--------- Summ terms -----------//
	temp = (p_term + i_term + d_term) / SCALING_FACTOR;
    156e:	ce 01       	movw	r24, r28
    1570:	8e 0d       	add	r24, r14
    1572:	9f 1d       	adc	r25, r15
    1574:	8e 0f       	add	r24, r30
    1576:	9f 1f       	adc	r25, r31
    1578:	65 e0       	ldi	r22, 0x05	; 5
    157a:	70 e0       	ldi	r23, 0x00	; 0
    157c:	0a d3       	rcall	.+1556   	; 0x1b92 <__divmodhi4>
    157e:	9b 01       	movw	r18, r22
    1580:	77 ff       	sbrs	r23, 7
    1582:	02 c0       	rjmp	.+4      	; 0x1588 <processPID+0xd0>
    1584:	20 e0       	ldi	r18, 0x00	; 0
    1586:	30 e0       	ldi	r19, 0x00	; 0
    1588:	c9 01       	movw	r24, r18
    158a:	25 36       	cpi	r18, 0x65	; 101
    158c:	31 05       	cpc	r19, r1
    158e:	14 f0       	brlt	.+4      	; 0x1594 <processPID+0xdc>
    1590:	84 e6       	ldi	r24, 0x64	; 100
    1592:	90 e0       	ldi	r25, 0x00	; 0
		temp = PID_OUTPUT_MIN;
	}
	
	
	//------- Debug --------//
	dbg_PID_p_term = p_term;
    1594:	d0 93 d3 01 	sts	0x01D3, r29
    1598:	c0 93 d2 01 	sts	0x01D2, r28
	dbg_PID_d_term = d_term;
    159c:	f0 93 d7 01 	sts	0x01D7, r31
    15a0:	e0 93 d6 01 	sts	0x01D6, r30
	dbg_PID_i_term = i_term;
    15a4:	f0 92 d5 01 	sts	0x01D5, r15
    15a8:	e0 92 d4 01 	sts	0x01D4, r14
	dbg_PID_output = temp;
    15ac:	90 93 d1 01 	sts	0x01D1, r25
    15b0:	80 93 d0 01 	sts	0x01D0, r24
	
	
	return temp;
	
}
    15b4:	df 91       	pop	r29
    15b6:	cf 91       	pop	r28
    15b8:	1f 91       	pop	r17
    15ba:	0f 91       	pop	r16
    15bc:	ff 90       	pop	r15
    15be:	ef 90       	pop	r14
    15c0:	08 95       	ret

000015c2 <setHeaterPower>:

// User function to control heater intensity
void setHeaterPower(uint16_t value)
{
	// Disable interrupts from analog comparator
	ACSR &= ~(1<<ACIE);
    15c2:	43 98       	cbi	0x08, 3	; 8
	// Update value
	heaterPower = (value > HEATER_MAX_POWER) ? HEATER_MAX_POWER : value;
    15c4:	9c 01       	movw	r18, r24
    15c6:	85 36       	cpi	r24, 0x65	; 101
    15c8:	91 05       	cpc	r25, r1
    15ca:	10 f0       	brcs	.+4      	; 0x15d0 <setHeaterPower+0xe>
    15cc:	24 e6       	ldi	r18, 0x64	; 100
    15ce:	30 e0       	ldi	r19, 0x00	; 0
    15d0:	30 93 28 01 	sts	0x0128, r19
    15d4:	20 93 27 01 	sts	0x0127, r18
	// Reenable interrupts
	ACSR |= (1<<ACIE);
    15d8:	43 9a       	sbi	0x08, 3	; 8
    15da:	08 95       	ret

000015dc <setMotorDirection>:

// User function to control motor rotation
void setMotorDirection(uint8_t dir)
{
	// Disable interrupts from timer0 
	TIMSK &= ~(1<<TOIE0);
    15dc:	99 b7       	in	r25, 0x39	; 57
    15de:	9e 7f       	andi	r25, 0xFE	; 254
    15e0:	99 bf       	out	0x39, r25	; 57
		
	newDirReq = dir;	// save new direction request
    15e2:	80 93 29 01 	sts	0x0129, r24
	dirChangedMask = ~ROLL_DIR_CHANGED;
    15e6:	9f ed       	ldi	r25, 0xDF	; 223
    15e8:	90 93 88 00 	sts	0x0088, r25
	
	if (dir & ROLL_FWD)
    15ec:	80 ff       	sbrs	r24, 0
    15ee:	09 c0       	rjmp	.+18     	; 0x1602 <setMotorDirection+0x26>
		bottomPoint = rollPoint;  
    15f0:	80 91 2a 01 	lds	r24, 0x012A
    15f4:	90 91 2b 01 	lds	r25, 0x012B
    15f8:	90 93 2d 01 	sts	0x012D, r25
    15fc:	80 93 2c 01 	sts	0x012C, r24
    1600:	0a c0       	rjmp	.+20     	; 0x1616 <setMotorDirection+0x3a>
	else if (dir & ROLL_REV)
    1602:	81 ff       	sbrs	r24, 1
    1604:	08 c0       	rjmp	.+16     	; 0x1616 <setMotorDirection+0x3a>
		topPoint = rollPoint;
    1606:	80 91 2a 01 	lds	r24, 0x012A
    160a:	90 91 2b 01 	lds	r25, 0x012B
    160e:	90 93 2f 01 	sts	0x012F, r25
    1612:	80 93 2e 01 	sts	0x012E, r24

	// Enable interrupts from timer 0
	TIMSK |= (1<<TOIE0);	
    1616:	89 b7       	in	r24, 0x39	; 57
    1618:	81 60       	ori	r24, 0x01	; 1
    161a:	89 bf       	out	0x39, r24	; 57
    161c:	08 95       	ret

0000161e <stopCycleRolling>:
}

void stopCycleRolling(uint8_t doResetPoints)
{
	// Disable interrupts from timer0 
	TIMSK &= ~(1<<TOIE0);
    161e:	99 b7       	in	r25, 0x39	; 57
    1620:	9e 7f       	andi	r25, 0xFE	; 254
    1622:	99 bf       	out	0x39, r25	; 57
	
	rollState &= ~ROLL_CYCLE;
    1624:	90 91 26 01 	lds	r25, 0x0126
    1628:	9b 7f       	andi	r25, 0xFB	; 251
    162a:	90 93 26 01 	sts	0x0126, r25
	if (doResetPoints)
    162e:	88 23       	and	r24, r24
    1630:	71 f0       	breq	.+28     	; 0x164e <stopCycleRolling+0x30>
	{
		topPoint = bottomPoint = rollPoint;
    1632:	80 91 2a 01 	lds	r24, 0x012A
    1636:	90 91 2b 01 	lds	r25, 0x012B
    163a:	90 93 2d 01 	sts	0x012D, r25
    163e:	80 93 2c 01 	sts	0x012C, r24
    1642:	90 93 2f 01 	sts	0x012F, r25
    1646:	80 93 2e 01 	sts	0x012E, r24
		activeRollCycle = 0;	
    164a:	10 92 25 01 	sts	0x0125, r1
	}		
	
	// Enable interrupts from timer 0
	TIMSK |= (1<<TOIE0);
    164e:	89 b7       	in	r24, 0x39	; 57
    1650:	81 60       	ori	r24, 0x01	; 1
    1652:	89 bf       	out	0x39, r24	; 57
    1654:	08 95       	ret

00001656 <isTopPointValid>:



uint8_t isTopPointValid(void)
{
	return (	(int16_t)(topPoint - rollPoint) >= 0 );
    1656:	80 91 2e 01 	lds	r24, 0x012E
    165a:	90 91 2f 01 	lds	r25, 0x012F
    165e:	20 91 2a 01 	lds	r18, 0x012A
    1662:	30 91 2b 01 	lds	r19, 0x012B
    1666:	82 1b       	sub	r24, r18
    1668:	93 0b       	sbc	r25, r19
    166a:	89 2f       	mov	r24, r25
    166c:	80 95       	com	r24
}
    166e:	88 1f       	adc	r24, r24
    1670:	88 27       	eor	r24, r24
    1672:	88 1f       	adc	r24, r24
    1674:	08 95       	ret

00001676 <isBottomPointValid>:

uint8_t isBottomPointValid(void)
{
	return (	(int16_t)(rollPoint - bottomPoint) >= 0	);
    1676:	80 91 2a 01 	lds	r24, 0x012A
    167a:	90 91 2b 01 	lds	r25, 0x012B
    167e:	20 91 2c 01 	lds	r18, 0x012C
    1682:	30 91 2d 01 	lds	r19, 0x012D
    1686:	82 1b       	sub	r24, r18
    1688:	93 0b       	sbc	r25, r19
    168a:	89 2f       	mov	r24, r25
    168c:	80 95       	com	r24
}
    168e:	88 1f       	adc	r24, r24
    1690:	88 27       	eor	r24, r24
    1692:	88 1f       	adc	r24, r24
    1694:	08 95       	ret

00001696 <startCycleRolling>:


uint8_t startCycleRolling(void)
{
	// Disable interrupts from timer0 
	TIMSK &= ~(1<<TOIE0);
    1696:	89 b7       	in	r24, 0x39	; 57
    1698:	8e 7f       	andi	r24, 0xFE	; 254
    169a:	89 bf       	out	0x39, r24	; 57
	
	if ( isTopPointValid() && isBottomPointValid() )
    169c:	dc df       	rcall	.-72     	; 0x1656 <isTopPointValid>
    169e:	88 23       	and	r24, r24
    16a0:	59 f0       	breq	.+22     	; 0x16b8 <startCycleRolling+0x22>
    16a2:	e9 df       	rcall	.-46     	; 0x1676 <isBottomPointValid>
    16a4:	88 23       	and	r24, r24
    16a6:	41 f0       	breq	.+16     	; 0x16b8 <startCycleRolling+0x22>
	{
		rollState |= ROLL_CYCLE;
    16a8:	80 91 26 01 	lds	r24, 0x0126
    16ac:	84 60       	ori	r24, 0x04	; 4
    16ae:	80 93 26 01 	sts	0x0126, r24
		activeRollCycle = 1;
    16b2:	81 e0       	ldi	r24, 0x01	; 1
    16b4:	80 93 25 01 	sts	0x0125, r24
	}
	
	// Enable interrupts from timer 0
	TIMSK |= (1<<TOIE0);
    16b8:	89 b7       	in	r24, 0x39	; 57
    16ba:	81 60       	ori	r24, 0x01	; 1
    16bc:	89 bf       	out	0x39, r24	; 57
	
	return (rollState & ROLL_CYCLE);
    16be:	80 91 26 01 	lds	r24, 0x0126
}
    16c2:	84 70       	andi	r24, 0x04	; 4
    16c4:	08 95       	ret

000016c6 <__vector_16>:




ISR(ANA_COMP_vect)
{
    16c6:	1f 92       	push	r1
    16c8:	0f 92       	push	r0
    16ca:	0f b6       	in	r0, 0x3f	; 63
    16cc:	0f 92       	push	r0
    16ce:	11 24       	eor	r1, r1
    16d0:	2f 93       	push	r18
    16d2:	3f 93       	push	r19
    16d4:	4f 93       	push	r20
    16d6:	5f 93       	push	r21
    16d8:	8f 93       	push	r24
    16da:	9f 93       	push	r25
	static uint16_t sigma = 0;
	uint16_t delta;
	
	// Once triggered, disable further comparator interrupt
	ACSR &= ~(1<<ACIE);
    16dc:	43 98       	cbi	0x08, 3	; 8
	
	// Process heater delta-sigma modulator
	if (sigma >= HEATER_MAX_POWER)
    16de:	40 91 30 01 	lds	r20, 0x0130
    16e2:	50 91 31 01 	lds	r21, 0x0131
    16e6:	44 36       	cpi	r20, 0x64	; 100
    16e8:	51 05       	cpc	r21, r1
    16ea:	30 f0       	brcs	.+12     	; 0x16f8 <__vector_16+0x32>
	{
		PORTD |= (1<<PD_HEATER | 1<<PD_HEAT_INDIC);
    16ec:	82 b3       	in	r24, 0x12	; 18
    16ee:	80 63       	ori	r24, 0x30	; 48
    16f0:	82 bb       	out	0x12, r24	; 18
		delta = -HEATER_MAX_POWER;	
    16f2:	2c e9       	ldi	r18, 0x9C	; 156
    16f4:	3f ef       	ldi	r19, 0xFF	; 255
    16f6:	03 c0       	rjmp	.+6      	; 0x16fe <__vector_16+0x38>
	}		
	else
	{
		PORTD &= ~(1<<PD_HEAT_INDIC);
    16f8:	95 98       	cbi	0x12, 5	; 18
		delta = 0;
    16fa:	20 e0       	ldi	r18, 0x00	; 0
    16fc:	30 e0       	ldi	r19, 0x00	; 0
	}
	sigma += delta + heaterPower;	
    16fe:	80 91 27 01 	lds	r24, 0x0127
    1702:	90 91 28 01 	lds	r25, 0x0128
    1706:	84 0f       	add	r24, r20
    1708:	95 1f       	adc	r25, r21
    170a:	82 0f       	add	r24, r18
    170c:	93 1f       	adc	r25, r19
    170e:	90 93 31 01 	sts	0x0131, r25
    1712:	80 93 30 01 	sts	0x0130, r24
	
	// Reprogram timer0
	TCNT0 = 256 - TRIAC_IMPULSE_TIME;		// Triac gate impulse time
    1716:	86 ef       	ldi	r24, 0xF6	; 246
    1718:	82 bf       	out	0x32, r24	; 50
	TIFR |= (1<<TOV0);						// Clear interrupt flag
    171a:	88 b7       	in	r24, 0x38	; 56
    171c:	81 60       	ori	r24, 0x01	; 1
    171e:	88 bf       	out	0x38, r24	; 56
	// Modify state	
	p_state &= ~STATE_MASK;					// Start new state machine cycle
    1720:	80 91 87 00 	lds	r24, 0x0087
    1724:	80 7f       	andi	r24, 0xF0	; 240
	p_state ^= HALF_PERIOD_FLAG;			// Toggle flag
    1726:	80 58       	subi	r24, 0x80	; 128
    1728:	80 93 87 00 	sts	0x0087, r24
	
}
    172c:	9f 91       	pop	r25
    172e:	8f 91       	pop	r24
    1730:	5f 91       	pop	r21
    1732:	4f 91       	pop	r20
    1734:	3f 91       	pop	r19
    1736:	2f 91       	pop	r18
    1738:	0f 90       	pop	r0
    173a:	0f be       	out	0x3f, r0	; 63
    173c:	0f 90       	pop	r0
    173e:	1f 90       	pop	r1
    1740:	18 95       	reti

00001742 <__vector_9>:



ISR(TIMER0_OVF_vect)
{
    1742:	1f 92       	push	r1
    1744:	0f 92       	push	r0
    1746:	0f b6       	in	r0, 0x3f	; 63
    1748:	0f 92       	push	r0
    174a:	11 24       	eor	r1, r1
    174c:	2f 93       	push	r18
    174e:	3f 93       	push	r19
    1750:	4f 93       	push	r20
    1752:	5f 93       	push	r21
    1754:	6f 93       	push	r22
    1756:	7f 93       	push	r23
    1758:	8f 93       	push	r24
    175a:	9f 93       	push	r25
    175c:	af 93       	push	r26
    175e:	bf 93       	push	r27
    1760:	ef 93       	push	r30
    1762:	ff 93       	push	r31
	uint8_t temp;
	
	switch(p_state & STATE_MASK)
    1764:	80 91 87 00 	lds	r24, 0x0087
    1768:	8f 70       	andi	r24, 0x0F	; 15
    176a:	81 30       	cpi	r24, 0x01	; 1
    176c:	49 f0       	breq	.+18     	; 0x1780 <__vector_9+0x3e>
    176e:	28 f0       	brcs	.+10     	; 0x177a <__vector_9+0x38>
    1770:	82 30       	cpi	r24, 0x02	; 2
    1772:	49 f0       	breq	.+18     	; 0x1786 <__vector_9+0x44>
    1774:	83 30       	cpi	r24, 0x03	; 3
    1776:	69 f4       	brne	.+26     	; 0x1792 <__vector_9+0x50>
    1778:	0b c0       	rjmp	.+22     	; 0x1790 <__vector_9+0x4e>
	{
		// TRIAC_IMPULSE_TIME finished
		case 0x00:
			// Turn off heater TRIAC
			PORTD &= ~(1<<PD_HEATER);
    177a:	94 98       	cbi	0x12, 4	; 18
			TCNT0 = 256 - (QUATER_PERIOD_TIME - TRIAC_IMPULSE_TIME);
    177c:	8c eb       	ldi	r24, 0xBC	; 188
    177e:	01 c0       	rjmp	.+2      	; 0x1782 <__vector_9+0x40>
			break;
		// QUATER_PERIOD_TIME finished	
		case 0x01:	
			TCNT0 = 256 - (SYNC_IGNORE_TIME - QUATER_PERIOD_TIME);
    1780:	81 ed       	ldi	r24, 0xD1	; 209
    1782:	82 bf       	out	0x32, r24	; 50
			break;	
    1784:	06 c0       	rjmp	.+12     	; 0x1792 <__vector_9+0x50>
		// SYNC_IGNORE_TIME finished	
		case 0x02:
			TCNT0 = 256 - SYNC_LOST_TIMEOUT;
    1786:	82 ec       	ldi	r24, 0xC2	; 194
    1788:	82 bf       	out	0x32, r24	; 50
			// Clear flag and enable interrupt from analog comparator
			ACSR |= (1<<ACI);
    178a:	44 9a       	sbi	0x08, 4	; 8
			ACSR |= (1<<ACIE);
    178c:	43 9a       	sbi	0x08, 3	; 8
			break;
    178e:	01 c0       	rjmp	.+2      	; 0x1792 <__vector_9+0x50>
		// SYNC_LOST_TIMEOUT finished
		case 0x03:
			// Error - sync is lost. It means that device has been disconnected from AC line.
			// Disable all power-consuming devices like LEDs and save user settings to EEPROM.
			exitPowerOff();
    1790:	29 d8       	rcall	.-4014   	; 0x7e4 <exitPowerOff>
			// Sync is not present - do nothing
			break;
	}	

	// Full period check
	if ((p_state & (HALF_PERIOD_FLAG | STATE_MASK)) == (HALF_PERIOD_FLAG | 0x01))
    1792:	80 91 87 00 	lds	r24, 0x0087
    1796:	8f 78       	andi	r24, 0x8F	; 143
    1798:	81 38       	cpi	r24, 0x81	; 129
    179a:	09 f0       	breq	.+2      	; 0x179e <__vector_9+0x5c>
    179c:	81 c0       	rjmp	.+258    	; 0x18a0 <__vector_9+0x15e>
	{
		// Quarter AC line period is done. Update motor controls.
		temp = PORTD;
    179e:	82 b3       	in	r24, 0x12	; 18
		temp &= ~(1<<PD_M1 | 1<<PD_M2);
    17a0:	83 7f       	andi	r24, 0xF3	; 243
		if ( rollState & SKIP_CURRENT_MOTOR_CTRL )
    17a2:	90 91 26 01 	lds	r25, 0x0126
    17a6:	93 ff       	sbrs	r25, 3
    17a8:	05 c0       	rjmp	.+10     	; 0x17b4 <__vector_9+0x72>
		{
			// Direction control changed. Skip current period to allow TRIACs fully close
			rollState &= ~SKIP_CURRENT_MOTOR_CTRL;
    17aa:	97 7f       	andi	r25, 0xF7	; 247
    17ac:	90 93 26 01 	sts	0x0126, r25
			PORTD = temp; 	
    17b0:	82 bb       	out	0x12, r24	; 18
    17b2:	76 c0       	rjmp	.+236    	; 0x18a0 <__vector_9+0x15e>
		}
		else
		{
			// Apply direction control 
			if (rollState & ROLL_FWD)
    17b4:	90 ff       	sbrs	r25, 0
    17b6:	02 c0       	rjmp	.+4      	; 0x17bc <__vector_9+0x7a>
				temp |= (1<<PD_M1);
    17b8:	84 60       	ori	r24, 0x04	; 4
    17ba:	02 c0       	rjmp	.+4      	; 0x17c0 <__vector_9+0x7e>
			else if (rollState & ROLL_REV)
    17bc:	91 fd       	sbrc	r25, 1
				temp |= (1<<PD_M2);
    17be:	88 60       	ori	r24, 0x08	; 8
			PORTD = temp; 
    17c0:	82 bb       	out	0x12, r24	; 18
// Function to process rolling - sets rotation direction for next period
// Call once per each AC line period
static inline void controlRolling()
{
	// Process cycle rolling
	switch(rollState & (ROLL_FWD | ROLL_REV | ROLL_CYCLE))
    17c2:	40 91 26 01 	lds	r20, 0x0126
    17c6:	84 2f       	mov	r24, r20
    17c8:	87 70       	andi	r24, 0x07	; 7
    17ca:	85 30       	cpi	r24, 0x05	; 5
    17cc:	19 f0       	breq	.+6      	; 0x17d4 <__vector_9+0x92>
    17ce:	86 30       	cpi	r24, 0x06	; 6
    17d0:	e9 f5       	brne	.+122    	; 0x184c <__vector_9+0x10a>
    17d2:	1d c0       	rjmp	.+58     	; 0x180e <__vector_9+0xcc>
//---------------------------------------------//
//---------------------------------------------//

static inline uint8_t reachedTopPoint(void)
{
	return (	(int16_t)(topPoint - rollPoint) <= 0 );
    17d4:	80 91 2e 01 	lds	r24, 0x012E
    17d8:	90 91 2f 01 	lds	r25, 0x012F
    17dc:	20 91 2a 01 	lds	r18, 0x012A
    17e0:	30 91 2b 01 	lds	r19, 0x012B
    17e4:	82 1b       	sub	r24, r18
    17e6:	93 0b       	sbc	r25, r19
{
	// Process cycle rolling
	switch(rollState & (ROLL_FWD | ROLL_REV | ROLL_CYCLE))
	{
		case (ROLL_FWD | ROLL_CYCLE):
			if (reachedTopPoint())
    17e8:	18 16       	cp	r1, r24
    17ea:	19 06       	cpc	r1, r25
    17ec:	7c f1       	brlt	.+94     	; 0x184c <__vector_9+0x10a>
			{
				if (activeRollCycle >= p.rollCycleSet)	
    17ee:	80 91 25 01 	lds	r24, 0x0125
    17f2:	90 91 b5 01 	lds	r25, 0x01B5
    17f6:	89 17       	cp	r24, r25
    17f8:	28 f0       	brcs	.+10     	; 0x1804 <__vector_9+0xc2>
				{
					// DONE!
					rollState &= ~ROLL_CYCLE;
    17fa:	4b 7f       	andi	r20, 0xFB	; 251
					rollState |= CYCLE_ROLL_DONE;
    17fc:	40 61       	ori	r20, 0x10	; 16
    17fe:	40 93 26 01 	sts	0x0126, r20
    1802:	24 c0       	rjmp	.+72     	; 0x184c <__vector_9+0x10a>
				}
				else
				{
					activeRollCycle++;
    1804:	8f 5f       	subi	r24, 0xFF	; 255
    1806:	80 93 25 01 	sts	0x0125, r24
					// Change dir	
					newDirReq = ROLL_REV;				
    180a:	82 e0       	ldi	r24, 0x02	; 2
    180c:	1d c0       	rjmp	.+58     	; 0x1848 <__vector_9+0x106>
	return (	(int16_t)(topPoint - rollPoint) <= 0 );
}

static inline uint8_t reachedBottomPoint(void)
{
	return (	(int16_t)(rollPoint - bottomPoint) <= 0 );
    180e:	80 91 2a 01 	lds	r24, 0x012A
    1812:	90 91 2b 01 	lds	r25, 0x012B
    1816:	20 91 2c 01 	lds	r18, 0x012C
    181a:	30 91 2d 01 	lds	r19, 0x012D
    181e:	82 1b       	sub	r24, r18
    1820:	93 0b       	sbc	r25, r19
				}
			}
			break;
		
		case (ROLL_REV | ROLL_CYCLE):	
			if (reachedBottomPoint())
    1822:	18 16       	cp	r1, r24
    1824:	19 06       	cpc	r1, r25
    1826:	94 f0       	brlt	.+36     	; 0x184c <__vector_9+0x10a>
			{
				if (activeRollCycle >= p.rollCycleSet)	
    1828:	80 91 25 01 	lds	r24, 0x0125
    182c:	90 91 b5 01 	lds	r25, 0x01B5
    1830:	89 17       	cp	r24, r25
    1832:	30 f0       	brcs	.+12     	; 0x1840 <__vector_9+0xfe>
				{
					// DONE!
					rollState &= ~ROLL_CYCLE;
    1834:	84 2f       	mov	r24, r20
    1836:	8b 7f       	andi	r24, 0xFB	; 251
					rollState |= CYCLE_ROLL_DONE;
    1838:	80 61       	ori	r24, 0x10	; 16
    183a:	80 93 26 01 	sts	0x0126, r24
    183e:	06 c0       	rjmp	.+12     	; 0x184c <__vector_9+0x10a>
				}
				else
				{
					activeRollCycle++;
    1840:	8f 5f       	subi	r24, 0xFF	; 255
    1842:	80 93 25 01 	sts	0x0125, r24
					// Change dir	
					newDirReq = ROLL_FWD;
    1846:	81 e0       	ldi	r24, 0x01	; 1
    1848:	80 93 29 01 	sts	0x0129, r24
		default:
			break;
	}
	
	// Process direction change
	if ((rollState ^ newDirReq) & (ROLL_FWD | ROLL_REV))
    184c:	20 91 26 01 	lds	r18, 0x0126
    1850:	90 91 29 01 	lds	r25, 0x0129
    1854:	89 2f       	mov	r24, r25
    1856:	82 27       	eor	r24, r18
    1858:	83 70       	andi	r24, 0x03	; 3
    185a:	19 f0       	breq	.+6      	; 0x1862 <__vector_9+0x120>
	{
		// ROLL_DIR_CHANGED is used for sound beep
		rollState |= (SKIP_CURRENT_MOTOR_CTRL | ROLL_DIR_CHANGED);
    185c:	28 62       	ori	r18, 0x28	; 40
    185e:	20 93 26 01 	sts	0x0126, r18
	}
	
	rollState &= ~(ROLL_FWD | ROLL_REV);
    1862:	80 91 26 01 	lds	r24, 0x0126
    1866:	8c 7f       	andi	r24, 0xFC	; 252
	rollState |= newDirReq;
    1868:	89 2b       	or	r24, r25
	rollState &= dirChangedMask;
    186a:	90 91 88 00 	lds	r25, 0x0088
    186e:	89 23       	and	r24, r25
    1870:	80 93 26 01 	sts	0x0126, r24
	dirChangedMask = 0xFF;
    1874:	9f ef       	ldi	r25, 0xFF	; 255
    1876:	90 93 88 00 	sts	0x0088, r25
	return (	(int16_t)(rollPoint - bottomPoint) <= 0 );
}

static inline void updateRollPoint(void)
{	
	if (rollState & ROLL_FWD)
    187a:	80 ff       	sbrs	r24, 0
    187c:	06 c0       	rjmp	.+12     	; 0x188a <__vector_9+0x148>
		rollPoint++;
    187e:	80 91 2a 01 	lds	r24, 0x012A
    1882:	90 91 2b 01 	lds	r25, 0x012B
    1886:	01 96       	adiw	r24, 0x01	; 1
    1888:	07 c0       	rjmp	.+14     	; 0x1898 <__vector_9+0x156>
	else if (rollState & ROLL_REV)
    188a:	81 ff       	sbrs	r24, 1
    188c:	09 c0       	rjmp	.+18     	; 0x18a0 <__vector_9+0x15e>
		rollPoint--;	
    188e:	80 91 2a 01 	lds	r24, 0x012A
    1892:	90 91 2b 01 	lds	r25, 0x012B
    1896:	01 97       	sbiw	r24, 0x01	; 1
    1898:	90 93 2b 01 	sts	0x012B, r25
    189c:	80 93 2a 01 	sts	0x012A, r24
			controlRolling();
		}
	}
	
	
	if ((p_state & STATE_MASK)  != 0x0F)
    18a0:	80 91 87 00 	lds	r24, 0x0087
    18a4:	98 2f       	mov	r25, r24
    18a6:	9f 70       	andi	r25, 0x0F	; 15
    18a8:	9f 30       	cpi	r25, 0x0F	; 15
    18aa:	19 f0       	breq	.+6      	; 0x18b2 <__vector_9+0x170>
		p_state++;
    18ac:	8f 5f       	subi	r24, 0xFF	; 255
    18ae:	80 93 87 00 	sts	0x0087, r24
}	
    18b2:	ff 91       	pop	r31
    18b4:	ef 91       	pop	r30
    18b6:	bf 91       	pop	r27
    18b8:	af 91       	pop	r26
    18ba:	9f 91       	pop	r25
    18bc:	8f 91       	pop	r24
    18be:	7f 91       	pop	r23
    18c0:	6f 91       	pop	r22
    18c2:	5f 91       	pop	r21
    18c4:	4f 91       	pop	r20
    18c6:	3f 91       	pop	r19
    18c8:	2f 91       	pop	r18
    18ca:	0f 90       	pop	r0
    18cc:	0f be       	out	0x3f, r0	; 63
    18ce:	0f 90       	pop	r0
    18d0:	1f 90       	pop	r1
    18d2:	18 95       	reti

000018d4 <PGM_read_block>:
#include "progmem_func.h"

// Reads specified number of bytes from FLASH memory into SRAM
void PGM_read_block(void *dst, const void *src, uint8_t count)
{
	while(count--)
    18d4:	07 c0       	rjmp	.+14     	; 0x18e4 <PGM_read_block+0x10>
	{
		*(uint8_t*)dst++ = pgm_read_byte((const PROGMEM uint8_t*)src++);
    18d6:	fb 01       	movw	r30, r22
    18d8:	6f 5f       	subi	r22, 0xFF	; 255
    18da:	7f 4f       	sbci	r23, 0xFF	; 255
    18dc:	e4 91       	lpm	r30, Z
    18de:	dc 01       	movw	r26, r24
    18e0:	ed 93       	st	X+, r30
    18e2:	cd 01       	movw	r24, r26
#include "progmem_func.h"

// Reads specified number of bytes from FLASH memory into SRAM
void PGM_read_block(void *dst, const void *src, uint8_t count)
{
	while(count--)
    18e4:	41 50       	subi	r20, 0x01	; 1
    18e6:	b8 f7       	brcc	.-18     	; 0x18d6 <PGM_read_block+0x2>
	{
		*(uint8_t*)dst++ = pgm_read_byte((const PROGMEM uint8_t*)src++);
	}
}
    18e8:	08 95       	ret

000018ea <processSoftTimer8b>:
 
 
 
 
 void processSoftTimer8b(SoftTimer8b_t *tmr)
 {
    18ea:	fc 01       	movw	r30, r24
	 uint8_t newTimerVal;

	 if (!tmr->Enabled)
    18ec:	90 81       	ld	r25, Z
    18ee:	90 ff       	sbrs	r25, 0
    18f0:	27 c0       	rjmp	.+78     	; 0x1940 <processSoftTimer8b+0x56>
		return;
	 
	 tmr->FA_EQ = 0;
	 tmr->FA_GE = 0;
	 tmr->FTop = 0;
    18f2:	97 7e       	andi	r25, 0xE7	; 231
    18f4:	9f 7d       	andi	r25, 0xDF	; 223
    18f6:	90 83       	st	Z, r25
	 
	 if (tmr->Timer >= tmr->Top)
    18f8:	81 81       	ldd	r24, Z+1	; 0x01
    18fa:	22 81       	ldd	r18, Z+2	; 0x02
    18fc:	82 17       	cp	r24, r18
    18fe:	50 f0       	brcs	.+20     	; 0x1914 <processSoftTimer8b+0x2a>
	 {
		 if (tmr->RunOnce)
    1900:	91 ff       	sbrs	r25, 1
    1902:	02 c0       	rjmp	.+4      	; 0x1908 <processSoftTimer8b+0x1e>
		 {
			 tmr->Enabled = 0;
    1904:	9e 7f       	andi	r25, 0xFE	; 254
    1906:	90 83       	st	Z, r25
		 }
		 tmr->FTop = 1;
    1908:	90 81       	ld	r25, Z
		 tmr->FOvfl = 1;
    190a:	90 62       	ori	r25, 0x20	; 32
    190c:	90 64       	ori	r25, 0x40	; 64
    190e:	90 83       	st	Z, r25
		 newTimerVal = 0;
    1910:	20 e0       	ldi	r18, 0x00	; 0
    1912:	02 c0       	rjmp	.+4      	; 0x1918 <processSoftTimer8b+0x2e>
	 }
	 else
	 {
		 newTimerVal = tmr->Timer + 1;
    1914:	28 2f       	mov	r18, r24
    1916:	2f 5f       	subi	r18, 0xFF	; 255
	 }
	 
	 if (tmr->Timer == tmr->CompA)
    1918:	93 81       	ldd	r25, Z+3	; 0x03
    191a:	89 13       	cpse	r24, r25
    191c:	0b c0       	rjmp	.+22     	; 0x1934 <processSoftTimer8b+0x4a>
	 {
		 tmr->FA_EQ = 1;
    191e:	80 81       	ld	r24, Z
		 tmr->FA_GE = 1;
    1920:	88 60       	ori	r24, 0x08	; 8
    1922:	80 61       	ori	r24, 0x10	; 16
		 tmr->FA_TGL = !tmr->FA_TGL;
    1924:	82 fb       	bst	r24, 2
    1926:	99 27       	eor	r25, r25
    1928:	90 f9       	bld	r25, 0
    192a:	31 e0       	ldi	r19, 0x01	; 1
    192c:	93 27       	eor	r25, r19
    192e:	90 fb       	bst	r25, 0
    1930:	82 f9       	bld	r24, 2
    1932:	04 c0       	rjmp	.+8      	; 0x193c <processSoftTimer8b+0x52>
	 }
	 else if (tmr->Timer >= tmr->CompA)
    1934:	89 17       	cp	r24, r25
    1936:	18 f0       	brcs	.+6      	; 0x193e <processSoftTimer8b+0x54>
	 {
		 tmr->FA_GE = 1;
    1938:	80 81       	ld	r24, Z
    193a:	80 61       	ori	r24, 0x10	; 16
    193c:	80 83       	st	Z, r24
	 }
	 
	 tmr->Timer = newTimerVal; 
    193e:	21 83       	std	Z+1, r18	; 0x01
    1940:	08 95       	ret

00001942 <processSystemTimers>:
static uint8_t enableOverride = 0;


void processSystemTimers(void)
{
	sys_timers.flags = 0x00;
    1942:	10 92 8f 00 	sts	0x008F, r1
	
	// Process Celsius counter
	if (--sys_timers.celsius_upd_counter == 0)
    1946:	80 91 89 00 	lds	r24, 0x0089
    194a:	81 50       	subi	r24, 0x01	; 1
    194c:	80 93 89 00 	sts	0x0089, r24
    1950:	81 11       	cpse	r24, r1
    1952:	13 c0       	rjmp	.+38     	; 0x197a <processSystemTimers+0x38>
	{
		sys_timers.celsius_upd_counter = CELSIUS_UDPATE_INTERVAL;
    1954:	84 e0       	ldi	r24, 0x04	; 4
    1956:	80 93 89 00 	sts	0x0089, r24
		sys_timers.flags |= EXPIRED_CELSIUS;
    195a:	81 e0       	ldi	r24, 0x01	; 1
    195c:	80 93 8f 00 	sts	0x008F, r24
		
		// Process PID update counter
		if (--sys_timers.pid_update_counter == 0)
    1960:	80 91 8e 00 	lds	r24, 0x008E
    1964:	81 50       	subi	r24, 0x01	; 1
    1966:	80 93 8e 00 	sts	0x008E, r24
    196a:	81 11       	cpse	r24, r1
    196c:	06 c0       	rjmp	.+12     	; 0x197a <processSystemTimers+0x38>
		{
			sys_timers.pid_update_counter = PID_UPDATE_INTERVAL;
    196e:	8a e0       	ldi	r24, 0x0A	; 10
    1970:	80 93 8e 00 	sts	0x008E, r24
			sys_timers.flags |= UPDATE_PID;
    1974:	81 e4       	ldi	r24, 0x41	; 65
    1976:	80 93 8f 00 	sts	0x008F, r24
		}
	}
	
	// Process log counter
	if (--sys_timers.log_counter == 0)
    197a:	80 91 8d 00 	lds	r24, 0x008D
    197e:	81 50       	subi	r24, 0x01	; 1
    1980:	19 f0       	breq	.+6      	; 0x1988 <processSystemTimers+0x46>
    1982:	80 93 8d 00 	sts	0x008D, r24
    1986:	08 c0       	rjmp	.+16     	; 0x1998 <processSystemTimers+0x56>
	{
		sys_timers.log_counter = LOG_INTERVAL;
    1988:	82 e0       	ldi	r24, 0x02	; 2
    198a:	80 93 8d 00 	sts	0x008D, r24
		sys_timers.flags |= EXPIRED_LOG;
    198e:	80 91 8f 00 	lds	r24, 0x008F
    1992:	80 62       	ori	r24, 0x20	; 32
    1994:	80 93 8f 00 	sts	0x008F, r24
	}
	
	// Process 10 seconds counter
	if (--sys_timers.counter_10sec == 0)
    1998:	80 91 8a 00 	lds	r24, 0x008A
    199c:	81 50       	subi	r24, 0x01	; 1
    199e:	80 93 8a 00 	sts	0x008A, r24
    19a2:	81 11       	cpse	r24, r1
    19a4:	34 c0       	rjmp	.+104    	; 0x1a0e <processSystemTimers+0xcc>
	{
		sys_timers.counter_10sec = COUNTER_10SEC_INTERVAL;
    19a6:	88 ec       	ldi	r24, 0xC8	; 200
    19a8:	80 93 8a 00 	sts	0x008A, r24
		sys_timers.flags |= EXPIRED_10SEC;
    19ac:	40 91 8f 00 	lds	r20, 0x008F
    19b0:	84 2f       	mov	r24, r20
    19b2:	82 60       	ori	r24, 0x02	; 2
    19b4:	80 93 8f 00 	sts	0x008F, r24
		
		// Process 1 minute counter
		if (--sys_timers.counter_1min == 0)
    19b8:	80 91 8b 00 	lds	r24, 0x008B
    19bc:	81 50       	subi	r24, 0x01	; 1
    19be:	80 93 8b 00 	sts	0x008B, r24
    19c2:	81 11       	cpse	r24, r1
    19c4:	24 c0       	rjmp	.+72     	; 0x1a0e <processSystemTimers+0xcc>
		{
			sys_timers.counter_1min = COUNTER_1MIN_INTERVAL;
    19c6:	86 e0       	ldi	r24, 0x06	; 6
    19c8:	80 93 8b 00 	sts	0x008B, r24
			sys_timers.flags |= EXPIRED_1MIN;
    19cc:	84 2f       	mov	r24, r20
    19ce:	86 60       	ori	r24, 0x06	; 6
    19d0:	80 93 8f 00 	sts	0x008F, r24
			
			// Process auto power off counter
			if (sys_timers.poff_counter != MAX_POWEROFF_TIMEOUT - 1)
    19d4:	80 91 8c 00 	lds	r24, 0x008C
    19d8:	8e 35       	cpi	r24, 0x5E	; 94
    19da:	19 f0       	breq	.+6      	; 0x19e2 <processSystemTimers+0xa0>
				sys_timers.poff_counter++;
    19dc:	8f 5f       	subi	r24, 0xFF	; 255
    19de:	80 93 8c 00 	sts	0x008C, r24
			if (sys_timers.poff_counter == p.power_off_timeout - 1)
    19e2:	60 91 8c 00 	lds	r22, 0x008C
    19e6:	50 91 b7 01 	lds	r21, 0x01B7
    19ea:	26 2f       	mov	r18, r22
    19ec:	30 e0       	ldi	r19, 0x00	; 0
    19ee:	85 2f       	mov	r24, r21
    19f0:	90 e0       	ldi	r25, 0x00	; 0
    19f2:	01 97       	sbiw	r24, 0x01	; 1
    19f4:	28 17       	cp	r18, r24
    19f6:	39 07       	cpc	r19, r25
    19f8:	19 f4       	brne	.+6      	; 0x1a00 <processSystemTimers+0xbe>
				sys_timers.flags |= AUTOPOFF_SOON;
    19fa:	4e 60       	ori	r20, 0x0E	; 14
    19fc:	40 93 8f 00 	sts	0x008F, r20
			if (sys_timers.poff_counter == p.power_off_timeout)
    1a00:	65 13       	cpse	r22, r21
    1a02:	05 c0       	rjmp	.+10     	; 0x1a0e <processSystemTimers+0xcc>
				sys_timers.flags |= AUTOPOFF_EXPIRED;			
    1a04:	80 91 8f 00 	lds	r24, 0x008F
    1a08:	80 61       	ori	r24, 0x10	; 16
    1a0a:	80 93 8f 00 	sts	0x008F, r24
    1a0e:	08 95       	ret

00001a10 <resetAutoPowerOffCounter>:
}


void resetAutoPowerOffCounter(void)
{
	sys_timers.poff_counter = 0;
    1a10:	10 92 8c 00 	sts	0x008C, r1
    1a14:	08 95       	ret

00001a16 <SetBeeperFreq>:
}

*/

void SetBeeperFreq(uint16_t freq_hz)
{
    1a16:	08 95       	ret

00001a18 <StartBeep>:
}
	
void StartBeep(uint16_t time_ms)
{
    1a18:	08 95       	ret

00001a1a <OverrideSoundDisable>:
}		

void OverrideSoundDisable(void)
{
    1a1a:	08 95       	ret

00001a1c <__vector_3>:
}

// Period is 1ms @ 16MHz
ISR(TIMER2_COMP_vect)
{	
    1a1c:	1f 92       	push	r1
    1a1e:	0f 92       	push	r0
    1a20:	0f b6       	in	r0, 0x3f	; 63
    1a22:	0f 92       	push	r0
    1a24:	11 24       	eor	r1, r1
    1a26:	2f 93       	push	r18
    1a28:	3f 93       	push	r19
    1a2a:	4f 93       	push	r20
    1a2c:	5f 93       	push	r21
    1a2e:	6f 93       	push	r22
    1a30:	7f 93       	push	r23
    1a32:	8f 93       	push	r24
    1a34:	9f 93       	push	r25
    1a36:	af 93       	push	r26
    1a38:	bf 93       	push	r27
    1a3a:	ef 93       	push	r30
    1a3c:	ff 93       	push	r31
		beep_cnt--;
	else
		SetBeepOutput(0);	// done
*/	
	// Manage LED indicator
	processLedIndicator();
    1a3e:	4b d7       	rcall	.+3734   	; 0x28d6 <__data_load_end+0xb32>
static inline void Sound_Process(void)
{
	static uint16_t note_time_counter;
	static tone_t tone;
	static const tone_t* p_melody;
	uint8_t new_state = sound_state;
    1a40:	20 91 32 01 	lds	r18, 0x0132
	
	switch (sound_state)
    1a44:	22 30       	cpi	r18, 0x02	; 2
    1a46:	89 f1       	breq	.+98     	; 0x1aaa <__vector_3+0x8e>
    1a48:	20 f4       	brcc	.+8      	; 0x1a52 <__vector_3+0x36>
    1a4a:	21 30       	cpi	r18, 0x01	; 1
    1a4c:	09 f0       	breq	.+2      	; 0x1a50 <__vector_3+0x34>
    1a4e:	4e c0       	rjmp	.+156    	; 0x1aec <__vector_3+0xd0>
    1a50:	0f c0       	rjmp	.+30     	; 0x1a70 <__vector_3+0x54>
    1a52:	23 30       	cpi	r18, 0x03	; 3
    1a54:	21 f0       	breq	.+8      	; 0x1a5e <__vector_3+0x42>
    1a56:	25 30       	cpi	r18, 0x05	; 5
    1a58:	09 f0       	breq	.+2      	; 0x1a5c <__vector_3+0x40>
    1a5a:	48 c0       	rjmp	.+144    	; 0x1aec <__vector_3+0xd0>
    1a5c:	15 c0       	rjmp	.+42     	; 0x1a88 <__vector_3+0x6c>
	{
		case SOUND_START_NEW:
			p_melody = new_melody;
    1a5e:	80 91 33 01 	lds	r24, 0x0133
    1a62:	90 91 34 01 	lds	r25, 0x0134
    1a66:	90 93 36 01 	sts	0x0136, r25
    1a6a:	80 93 35 01 	sts	0x0135, r24
    1a6e:	42 c0       	rjmp	.+132    	; 0x1af4 <__vector_3+0xd8>
			new_state = SOUND_APPLY_TONE;
			p_melody = NULL;				// Beeper mode
			break; 
		#endif
		case SOUND_PLAY:
			if (--note_time_counter == 0)
    1a70:	80 91 37 01 	lds	r24, 0x0137
    1a74:	90 91 38 01 	lds	r25, 0x0138
    1a78:	01 97       	sbiw	r24, 0x01	; 1
    1a7a:	90 93 38 01 	sts	0x0138, r25
    1a7e:	80 93 37 01 	sts	0x0137, r24
    1a82:	89 2b       	or	r24, r25
    1a84:	b9 f1       	breq	.+110    	; 0x1af4 <__vector_3+0xd8>
    1a86:	39 c0       	rjmp	.+114    	; 0x1afa <__vector_3+0xde>
		case SOUND_GET_NEXT_TONE:
			#ifdef USE_BEEP_FUNCTION
			if (p_melody != NULL)			// If driver is playing melody, not beeping
			{
			#endif
				eeprom_read_block(&tone,p_melody++,sizeof(tone_t));	
    1a88:	60 91 35 01 	lds	r22, 0x0135
    1a8c:	70 91 36 01 	lds	r23, 0x0136
    1a90:	cb 01       	movw	r24, r22
    1a92:	02 96       	adiw	r24, 0x02	; 2
    1a94:	90 93 36 01 	sts	0x0136, r25
    1a98:	80 93 35 01 	sts	0x0135, r24
    1a9c:	42 e0       	ldi	r20, 0x02	; 2
    1a9e:	50 e0       	ldi	r21, 0x00	; 0
    1aa0:	89 e3       	ldi	r24, 0x39	; 57
    1aa2:	91 e0       	ldi	r25, 0x01	; 1
    1aa4:	fc d0       	rcall	.+504    	; 0x1c9e <__eerd_block_m8>
				new_state = SOUND_APPLY_TONE;
    1aa6:	22 e0       	ldi	r18, 0x02	; 2
    1aa8:	28 c0       	rjmp	.+80     	; 0x1afa <__vector_3+0xde>
				new_state = SOUND_OFF;
			}
			#endif
			break;
		case SOUND_APPLY_TONE:
			if (tone.duration == 0)
    1aaa:	80 91 3a 01 	lds	r24, 0x013A
    1aae:	88 23       	and	r24, r24
    1ab0:	19 f1       	breq	.+70     	; 0x1af8 <__vector_3+0xdc>
				new_state = SOUND_OFF;
			}
			else
			{
				// Setup period
				if (tone.tone_period != 0)
    1ab2:	80 91 39 01 	lds	r24, 0x0139
    1ab6:	88 23       	and	r24, r24
    1ab8:	49 f0       	breq	.+18     	; 0x1acc <__vector_3+0xb0>
				{
					// Timer runs at 250kHz (T = 4us), tone_period is set in units of 8us
					// Output toggles on compare match
					OCR1A = tone.tone_period - 1;
    1aba:	90 e0       	ldi	r25, 0x00	; 0
    1abc:	01 97       	sbiw	r24, 0x01	; 1
    1abe:	9b bd       	out	0x2b, r25	; 43
    1ac0:	8a bd       	out	0x2a, r24	; 42
					TCNT1 = 0;
    1ac2:	1d bc       	out	0x2d, r1	; 45
    1ac4:	1c bc       	out	0x2c, r1	; 44
					// Toggle OCR1A on compare match
					TCCR1A |= (1<<COM1A0);
    1ac6:	8f b5       	in	r24, 0x2f	; 47
    1ac8:	80 64       	ori	r24, 0x40	; 64
    1aca:	02 c0       	rjmp	.+4      	; 0x1ad0 <__vector_3+0xb4>
				}
				else
				{
					// Disable OCR1A output
					TCCR1A &= ~(1<<COM1A0 | 1<<COM1A1);
    1acc:	8f b5       	in	r24, 0x2f	; 47
    1ace:	8f 73       	andi	r24, 0x3F	; 63
    1ad0:	8f bd       	out	0x2f, r24	; 47
				}
				note_time_counter = (uint16_t)tone.duration * TONE_DURATION_SCALE - 2;
    1ad2:	80 91 3a 01 	lds	r24, 0x013A
    1ad6:	2a e0       	ldi	r18, 0x0A	; 10
    1ad8:	82 9f       	mul	r24, r18
    1ada:	c0 01       	movw	r24, r0
    1adc:	11 24       	eor	r1, r1
    1ade:	02 97       	sbiw	r24, 0x02	; 2
    1ae0:	90 93 38 01 	sts	0x0138, r25
    1ae4:	80 93 37 01 	sts	0x0137, r24
				new_state = SOUND_PLAY;
    1ae8:	21 e0       	ldi	r18, 0x01	; 1
    1aea:	07 c0       	rjmp	.+14     	; 0x1afa <__vector_3+0xde>
			}
			break;
		default:
			// Disable OCR1A output
			TCCR1A &= ~(1<<COM1A0 | 1<<COM1A1);
    1aec:	8f b5       	in	r24, 0x2f	; 47
    1aee:	8f 73       	andi	r24, 0x3F	; 63
    1af0:	8f bd       	out	0x2f, r24	; 47
    1af2:	03 c0       	rjmp	.+6      	; 0x1afa <__vector_3+0xde>
			p_melody = NULL;				// Beeper mode
			break; 
		#endif
		case SOUND_PLAY:
			if (--note_time_counter == 0)
				new_state = SOUND_GET_NEXT_TONE;
    1af4:	25 e0       	ldi	r18, 0x05	; 5
    1af6:	01 c0       	rjmp	.+2      	; 0x1afa <__vector_3+0xde>
			break;
		case SOUND_APPLY_TONE:
			if (tone.duration == 0)
			{
				// Finished
				new_state = SOUND_OFF;
    1af8:	20 e0       	ldi	r18, 0x00	; 0
		default:
			// Disable OCR1A output
			TCCR1A &= ~(1<<COM1A0 | 1<<COM1A1);
			break;
	}
	sound_state = new_state;
    1afa:	20 93 32 01 	sts	0x0132, r18
	
	// Do sound stuff
	Sound_Process();
	
	// Process menu update timer
	processSoftTimer8b(&menuUpdateTimer);	
    1afe:	80 e9       	ldi	r24, 0x90	; 144
    1b00:	90 e0       	ldi	r25, 0x00	; 0
    1b02:	f3 de       	rcall	.-538    	; 0x18ea <processSoftTimer8b>
	
	// Start ADC conversion 
	ADCSRA |= (1<<ADSC);
    1b04:	36 9a       	sbi	0x06, 6	; 6
	
}
    1b06:	ff 91       	pop	r31
    1b08:	ef 91       	pop	r30
    1b0a:	bf 91       	pop	r27
    1b0c:	af 91       	pop	r26
    1b0e:	9f 91       	pop	r25
    1b10:	8f 91       	pop	r24
    1b12:	7f 91       	pop	r23
    1b14:	6f 91       	pop	r22
    1b16:	5f 91       	pop	r21
    1b18:	4f 91       	pop	r20
    1b1a:	3f 91       	pop	r19
    1b1c:	2f 91       	pop	r18
    1b1e:	0f 90       	pop	r0
    1b20:	0f be       	out	0x3f, r0	; 63
    1b22:	0f 90       	pop	r0
    1b24:	1f 90       	pop	r1
    1b26:	18 95       	reti

00001b28 <Sound_Play>:
}
#endif

void Sound_Play(const tone_t* p_melody)
{
	if ((p.sound_enable) || (SoundEnable_override))
    1b28:	20 91 b6 01 	lds	r18, 0x01B6
    1b2c:	21 11       	cpse	r18, r1
    1b2e:	04 c0       	rjmp	.+8      	; 0x1b38 <Sound_Play+0x10>
    1b30:	20 91 3b 01 	lds	r18, 0x013B
    1b34:	22 23       	and	r18, r18
    1b36:	49 f0       	breq	.+18     	; 0x1b4a <Sound_Play+0x22>
	{
		new_melody =  p_melody;
    1b38:	90 93 34 01 	sts	0x0134, r25
    1b3c:	80 93 33 01 	sts	0x0133, r24
		sound_state = SOUND_START_NEW;		// No need to disable interrupts - atomic operation
    1b40:	83 e0       	ldi	r24, 0x03	; 3
    1b42:	80 93 32 01 	sts	0x0132, r24
		SoundEnable_override = 0;
    1b46:	10 92 3b 01 	sts	0x013B, r1
    1b4a:	08 95       	ret

00001b4c <USART_send>:



void USART_send( uint8_t data )
{
	UCSRA |= (1<<TXC);                 // Clear flag
    1b4c:	5e 9a       	sbi	0x0b, 6	; 11
	UDR = data;
    1b4e:	8c b9       	out	0x0c, r24	; 12
	while ( !(UCSRA & (1<<TXC)) );  // Wait
    1b50:	5e 9b       	sbis	0x0b, 6	; 11
    1b52:	fe cf       	rjmp	.-4      	; 0x1b50 <USART_send+0x4>
}
    1b54:	08 95       	ret

00001b56 <USART_sendstr>:


void USART_sendstr(char* str)
{
    1b56:	1f 93       	push	r17
    1b58:	cf 93       	push	r28
    1b5a:	df 93       	push	r29
    1b5c:	ec 01       	movw	r28, r24
	uint8_t i = 0;
    1b5e:	10 e0       	ldi	r17, 0x00	; 0
	while (str[i])
    1b60:	02 c0       	rjmp	.+4      	; 0x1b66 <USART_sendstr+0x10>
	{
		USART_send(str[i++]);
    1b62:	1f 5f       	subi	r17, 0xFF	; 255
    1b64:	f3 df       	rcall	.-26     	; 0x1b4c <USART_send>


void USART_sendstr(char* str)
{
	uint8_t i = 0;
	while (str[i])
    1b66:	fe 01       	movw	r30, r28
    1b68:	e1 0f       	add	r30, r17
    1b6a:	f1 1d       	adc	r31, r1
    1b6c:	80 81       	ld	r24, Z
    1b6e:	81 11       	cpse	r24, r1
    1b70:	f8 cf       	rjmp	.-16     	; 0x1b62 <USART_sendstr+0xc>
	{
		USART_send(str[i++]);
	}
}
    1b72:	df 91       	pop	r29
    1b74:	cf 91       	pop	r28
    1b76:	1f 91       	pop	r17
    1b78:	08 95       	ret

00001b7a <__udivmodqi4>:
    1b7a:	99 1b       	sub	r25, r25
    1b7c:	79 e0       	ldi	r23, 0x09	; 9
    1b7e:	04 c0       	rjmp	.+8      	; 0x1b88 <__udivmodqi4_ep>

00001b80 <__udivmodqi4_loop>:
    1b80:	99 1f       	adc	r25, r25
    1b82:	96 17       	cp	r25, r22
    1b84:	08 f0       	brcs	.+2      	; 0x1b88 <__udivmodqi4_ep>
    1b86:	96 1b       	sub	r25, r22

00001b88 <__udivmodqi4_ep>:
    1b88:	88 1f       	adc	r24, r24
    1b8a:	7a 95       	dec	r23
    1b8c:	c9 f7       	brne	.-14     	; 0x1b80 <__udivmodqi4_loop>
    1b8e:	80 95       	com	r24
    1b90:	08 95       	ret

00001b92 <__divmodhi4>:
    1b92:	97 fb       	bst	r25, 7
    1b94:	07 2e       	mov	r0, r23
    1b96:	16 f4       	brtc	.+4      	; 0x1b9c <__divmodhi4+0xa>
    1b98:	00 94       	com	r0
    1b9a:	06 d0       	rcall	.+12     	; 0x1ba8 <__divmodhi4_neg1>
    1b9c:	77 fd       	sbrc	r23, 7
    1b9e:	08 d0       	rcall	.+16     	; 0x1bb0 <__divmodhi4_neg2>
    1ba0:	48 d0       	rcall	.+144    	; 0x1c32 <__udivmodhi4>
    1ba2:	07 fc       	sbrc	r0, 7
    1ba4:	05 d0       	rcall	.+10     	; 0x1bb0 <__divmodhi4_neg2>
    1ba6:	3e f4       	brtc	.+14     	; 0x1bb6 <__divmodhi4_exit>

00001ba8 <__divmodhi4_neg1>:
    1ba8:	90 95       	com	r25
    1baa:	81 95       	neg	r24
    1bac:	9f 4f       	sbci	r25, 0xFF	; 255
    1bae:	08 95       	ret

00001bb0 <__divmodhi4_neg2>:
    1bb0:	70 95       	com	r23
    1bb2:	61 95       	neg	r22
    1bb4:	7f 4f       	sbci	r23, 0xFF	; 255

00001bb6 <__divmodhi4_exit>:
    1bb6:	08 95       	ret

00001bb8 <__divmodsi4>:
    1bb8:	05 2e       	mov	r0, r21
    1bba:	97 fb       	bst	r25, 7
    1bbc:	16 f4       	brtc	.+4      	; 0x1bc2 <__divmodsi4+0xa>
    1bbe:	00 94       	com	r0
    1bc0:	06 d0       	rcall	.+12     	; 0x1bce <__divmodsi4_neg1>
    1bc2:	57 fd       	sbrc	r21, 7
    1bc4:	0c d0       	rcall	.+24     	; 0x1bde <__divmodsi4_neg2>
    1bc6:	49 d0       	rcall	.+146    	; 0x1c5a <__udivmodsi4>
    1bc8:	07 fc       	sbrc	r0, 7
    1bca:	09 d0       	rcall	.+18     	; 0x1bde <__divmodsi4_neg2>
    1bcc:	7e f4       	brtc	.+30     	; 0x1bec <__divmodsi4_exit>

00001bce <__divmodsi4_neg1>:
    1bce:	90 95       	com	r25
    1bd0:	80 95       	com	r24
    1bd2:	70 95       	com	r23
    1bd4:	61 95       	neg	r22
    1bd6:	7f 4f       	sbci	r23, 0xFF	; 255
    1bd8:	8f 4f       	sbci	r24, 0xFF	; 255
    1bda:	9f 4f       	sbci	r25, 0xFF	; 255
    1bdc:	08 95       	ret

00001bde <__divmodsi4_neg2>:
    1bde:	50 95       	com	r21
    1be0:	40 95       	com	r20
    1be2:	30 95       	com	r19
    1be4:	21 95       	neg	r18
    1be6:	3f 4f       	sbci	r19, 0xFF	; 255
    1be8:	4f 4f       	sbci	r20, 0xFF	; 255
    1bea:	5f 4f       	sbci	r21, 0xFF	; 255

00001bec <__divmodsi4_exit>:
    1bec:	08 95       	ret

00001bee <__mulhisi3>:
    1bee:	05 d0       	rcall	.+10     	; 0x1bfa <__umulhisi3>
    1bf0:	33 23       	and	r19, r19
    1bf2:	12 f4       	brpl	.+4      	; 0x1bf8 <__mulhisi3+0xa>
    1bf4:	8a 1b       	sub	r24, r26
    1bf6:	9b 0b       	sbc	r25, r27
    1bf8:	0d c0       	rjmp	.+26     	; 0x1c14 <__usmulhisi3_tail>

00001bfa <__umulhisi3>:
    1bfa:	a2 9f       	mul	r26, r18
    1bfc:	b0 01       	movw	r22, r0
    1bfe:	b3 9f       	mul	r27, r19
    1c00:	c0 01       	movw	r24, r0
    1c02:	a3 9f       	mul	r26, r19
    1c04:	01 d0       	rcall	.+2      	; 0x1c08 <__umulhisi3+0xe>
    1c06:	b2 9f       	mul	r27, r18
    1c08:	70 0d       	add	r23, r0
    1c0a:	81 1d       	adc	r24, r1
    1c0c:	11 24       	eor	r1, r1
    1c0e:	91 1d       	adc	r25, r1
    1c10:	08 95       	ret

00001c12 <__usmulhisi3>:
    1c12:	f3 df       	rcall	.-26     	; 0x1bfa <__umulhisi3>

00001c14 <__usmulhisi3_tail>:
    1c14:	b7 ff       	sbrs	r27, 7
    1c16:	08 95       	ret
    1c18:	82 1b       	sub	r24, r18
    1c1a:	93 0b       	sbc	r25, r19
    1c1c:	08 95       	ret

00001c1e <__muluhisi3>:
    1c1e:	ed df       	rcall	.-38     	; 0x1bfa <__umulhisi3>
    1c20:	a5 9f       	mul	r26, r21
    1c22:	90 0d       	add	r25, r0
    1c24:	b4 9f       	mul	r27, r20
    1c26:	90 0d       	add	r25, r0
    1c28:	a4 9f       	mul	r26, r20
    1c2a:	80 0d       	add	r24, r0
    1c2c:	91 1d       	adc	r25, r1
    1c2e:	11 24       	eor	r1, r1
    1c30:	08 95       	ret

00001c32 <__udivmodhi4>:
    1c32:	aa 1b       	sub	r26, r26
    1c34:	bb 1b       	sub	r27, r27
    1c36:	51 e1       	ldi	r21, 0x11	; 17
    1c38:	07 c0       	rjmp	.+14     	; 0x1c48 <__udivmodhi4_ep>

00001c3a <__udivmodhi4_loop>:
    1c3a:	aa 1f       	adc	r26, r26
    1c3c:	bb 1f       	adc	r27, r27
    1c3e:	a6 17       	cp	r26, r22
    1c40:	b7 07       	cpc	r27, r23
    1c42:	10 f0       	brcs	.+4      	; 0x1c48 <__udivmodhi4_ep>
    1c44:	a6 1b       	sub	r26, r22
    1c46:	b7 0b       	sbc	r27, r23

00001c48 <__udivmodhi4_ep>:
    1c48:	88 1f       	adc	r24, r24
    1c4a:	99 1f       	adc	r25, r25
    1c4c:	5a 95       	dec	r21
    1c4e:	a9 f7       	brne	.-22     	; 0x1c3a <__udivmodhi4_loop>
    1c50:	80 95       	com	r24
    1c52:	90 95       	com	r25
    1c54:	bc 01       	movw	r22, r24
    1c56:	cd 01       	movw	r24, r26
    1c58:	08 95       	ret

00001c5a <__udivmodsi4>:
    1c5a:	a1 e2       	ldi	r26, 0x21	; 33
    1c5c:	1a 2e       	mov	r1, r26
    1c5e:	aa 1b       	sub	r26, r26
    1c60:	bb 1b       	sub	r27, r27
    1c62:	fd 01       	movw	r30, r26
    1c64:	0d c0       	rjmp	.+26     	; 0x1c80 <__udivmodsi4_ep>

00001c66 <__udivmodsi4_loop>:
    1c66:	aa 1f       	adc	r26, r26
    1c68:	bb 1f       	adc	r27, r27
    1c6a:	ee 1f       	adc	r30, r30
    1c6c:	ff 1f       	adc	r31, r31
    1c6e:	a2 17       	cp	r26, r18
    1c70:	b3 07       	cpc	r27, r19
    1c72:	e4 07       	cpc	r30, r20
    1c74:	f5 07       	cpc	r31, r21
    1c76:	20 f0       	brcs	.+8      	; 0x1c80 <__udivmodsi4_ep>
    1c78:	a2 1b       	sub	r26, r18
    1c7a:	b3 0b       	sbc	r27, r19
    1c7c:	e4 0b       	sbc	r30, r20
    1c7e:	f5 0b       	sbc	r31, r21

00001c80 <__udivmodsi4_ep>:
    1c80:	66 1f       	adc	r22, r22
    1c82:	77 1f       	adc	r23, r23
    1c84:	88 1f       	adc	r24, r24
    1c86:	99 1f       	adc	r25, r25
    1c88:	1a 94       	dec	r1
    1c8a:	69 f7       	brne	.-38     	; 0x1c66 <__udivmodsi4_loop>
    1c8c:	60 95       	com	r22
    1c8e:	70 95       	com	r23
    1c90:	80 95       	com	r24
    1c92:	90 95       	com	r25
    1c94:	9b 01       	movw	r18, r22
    1c96:	ac 01       	movw	r20, r24
    1c98:	bd 01       	movw	r22, r26
    1c9a:	cf 01       	movw	r24, r30
    1c9c:	08 95       	ret

00001c9e <__eerd_block_m8>:
    1c9e:	dc 01       	movw	r26, r24
    1ca0:	cb 01       	movw	r24, r22

00001ca2 <__eerd_blraw_m8>:
    1ca2:	fc 01       	movw	r30, r24
    1ca4:	e1 99       	sbic	0x1c, 1	; 28
    1ca6:	fe cf       	rjmp	.-4      	; 0x1ca4 <__eerd_blraw_m8+0x2>
    1ca8:	06 c0       	rjmp	.+12     	; 0x1cb6 <__eerd_blraw_m8+0x14>
    1caa:	ff bb       	out	0x1f, r31	; 31
    1cac:	ee bb       	out	0x1e, r30	; 30
    1cae:	e0 9a       	sbi	0x1c, 0	; 28
    1cb0:	31 96       	adiw	r30, 0x01	; 1
    1cb2:	0d b2       	in	r0, 0x1d	; 29
    1cb4:	0d 92       	st	X+, r0
    1cb6:	41 50       	subi	r20, 0x01	; 1
    1cb8:	50 40       	sbci	r21, 0x00	; 0
    1cba:	b8 f7       	brcc	.-18     	; 0x1caa <__eerd_blraw_m8+0x8>
    1cbc:	08 95       	ret

00001cbe <__eerd_byte_m8>:
    1cbe:	e1 99       	sbic	0x1c, 1	; 28
    1cc0:	fe cf       	rjmp	.-4      	; 0x1cbe <__eerd_byte_m8>
    1cc2:	9f bb       	out	0x1f, r25	; 31
    1cc4:	8e bb       	out	0x1e, r24	; 30
    1cc6:	e0 9a       	sbi	0x1c, 0	; 28
    1cc8:	99 27       	eor	r25, r25
    1cca:	8d b3       	in	r24, 0x1d	; 29
    1ccc:	08 95       	ret

00001cce <__eeupd_block_m8>:
    1cce:	dc 01       	movw	r26, r24
    1cd0:	a4 0f       	add	r26, r20
    1cd2:	b5 1f       	adc	r27, r21
    1cd4:	41 50       	subi	r20, 0x01	; 1
    1cd6:	50 40       	sbci	r21, 0x00	; 0
    1cd8:	40 f0       	brcs	.+16     	; 0x1cea <__eeupd_block_m8+0x1c>
    1cda:	cb 01       	movw	r24, r22
    1cdc:	84 0f       	add	r24, r20
    1cde:	95 1f       	adc	r25, r21
    1ce0:	2e 91       	ld	r18, -X
    1ce2:	05 d0       	rcall	.+10     	; 0x1cee <__eeupd_r18_m8>
    1ce4:	41 50       	subi	r20, 0x01	; 1
    1ce6:	50 40       	sbci	r21, 0x00	; 0
    1ce8:	d8 f7       	brcc	.-10     	; 0x1ce0 <__eeupd_block_m8+0x12>
    1cea:	08 95       	ret

00001cec <__eeupd_byte_m8>:
    1cec:	26 2f       	mov	r18, r22

00001cee <__eeupd_r18_m8>:
    1cee:	e1 99       	sbic	0x1c, 1	; 28
    1cf0:	fe cf       	rjmp	.-4      	; 0x1cee <__eeupd_r18_m8>
    1cf2:	9f bb       	out	0x1f, r25	; 31
    1cf4:	8e bb       	out	0x1e, r24	; 30
    1cf6:	e0 9a       	sbi	0x1c, 0	; 28
    1cf8:	01 97       	sbiw	r24, 0x01	; 1
    1cfa:	0d b2       	in	r0, 0x1d	; 29
    1cfc:	02 16       	cp	r0, r18
    1cfe:	31 f0       	breq	.+12     	; 0x1d0c <__eeupd_r18_m8+0x1e>
    1d00:	2d bb       	out	0x1d, r18	; 29
    1d02:	0f b6       	in	r0, 0x3f	; 63
    1d04:	f8 94       	cli
    1d06:	e2 9a       	sbi	0x1c, 2	; 28
    1d08:	e1 9a       	sbi	0x1c, 1	; 28
    1d0a:	0f be       	out	0x3f, r0	; 63
    1d0c:	08 95       	ret

00001d0e <_exit>:
    1d0e:	f8 94       	cli

00001d10 <__stop_program>:
    1d10:	ff cf       	rjmp	.-2      	; 0x1d10 <__stop_program>
