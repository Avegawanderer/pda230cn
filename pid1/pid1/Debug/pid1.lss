
pid1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001b5e  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000006e  00800060  00001b5e  00001c12  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000a2  008000ce  008000ce  00001c80  2**0
                  ALLOC
  3 .eeprom       0000000a  00810000  00810000  00001c80  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         000009c0  00000000  00000000  00001c8c  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      000001a6  00000000  00000000  0000264c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      0000002f  00000000  00000000  000027f2  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 000003f0  00000000  00000000  00002821  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00003e5e  00000000  00000000  00002c11  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000139a  00000000  00000000  00006a6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00001842  00000000  00000000  00007e09  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000930  00000000  00000000  0000964c  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00001009  00000000  00000000  00009f7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00001a9b  00000000  00000000  0000af85  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000330  00000000  00000000  0000ca20  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	ad c0       	rjmp	.+346    	; 0x15c <__ctors_end>
       2:	c7 c0       	rjmp	.+398    	; 0x192 <__bad_interrupt>
       4:	c6 c0       	rjmp	.+396    	; 0x192 <__bad_interrupt>
       6:	a0 cc       	rjmp	.-1728   	; 0xfffff948 <__eeprom_end+0xff7ef93e>
       8:	c4 c0       	rjmp	.+392    	; 0x192 <__bad_interrupt>
       a:	c3 c0       	rjmp	.+390    	; 0x192 <__bad_interrupt>
       c:	c2 c0       	rjmp	.+388    	; 0x192 <__bad_interrupt>
       e:	c1 c0       	rjmp	.+386    	; 0x192 <__bad_interrupt>
      10:	c0 c0       	rjmp	.+384    	; 0x192 <__bad_interrupt>
      12:	f0 ca       	rjmp	.-2592   	; 0xfffff5f4 <__eeprom_end+0xff7ef5ea>
      14:	be c0       	rjmp	.+380    	; 0x192 <__bad_interrupt>
      16:	bd c0       	rjmp	.+378    	; 0x192 <__bad_interrupt>
      18:	bc c0       	rjmp	.+376    	; 0x192 <__bad_interrupt>
      1a:	bb c0       	rjmp	.+374    	; 0x192 <__bad_interrupt>
      1c:	cf c1       	rjmp	.+926    	; 0x3bc <__vector_14>
      1e:	b9 c0       	rjmp	.+370    	; 0x192 <__bad_interrupt>
      20:	c4 ca       	rjmp	.-2680   	; 0xfffff5aa <__eeprom_end+0xff7ef5a0>
      22:	b7 c0       	rjmp	.+366    	; 0x192 <__bad_interrupt>
      24:	b6 c0       	rjmp	.+364    	; 0x192 <__bad_interrupt>

00000026 <led_encode_table>:
      26:	30 3f 4f 3f 31 06 32 5b 33 4f 34 66 53 6d 35 6d     0?O?1.2[3O4fSm5m
      36:	36 7d 37 07 38 7f 39 6f 2e 80 2c 80 2d 40 5f 08     6}7.8.9o..,.-@_.
      46:	20 00 b0 63 41 77 43 39 46 71 4e 54 44 5e 50 73      ..cAwC9FqNTD^Ps
      56:	45 79 52 50                                         EyRP

0000005a <menuFunctionSet>:
      5a:	01 29 08 3f 06 29 07 03 26 07 da 07 a4 05 02 d7     .).?.)..&.......
      6a:	07 70 07 1e 07 05 0c 07 2b 07 00 00 0b aa 05 2b     .p......+......+
      7a:	07 b8 05 04 0c 07 ee 05 00 00 0c aa 05 ee 05 b8     ................
      8a:	05 06 14 07 b8 06 00 00 09 aa 05 b8 06 c1 05 07     ................
      9a:	14 07 6a 06 00 00 0a aa 05 6a 06 c1 05 08 e1 05     ..j......j......
      aa:	cc 05 00 00 0d d4 05 cc 05 00 00 0e 06 07 d0 05     ................
      ba:	be 05                                               ..

000000bc <menuJumpSet>:
      bc:	01 06 00 03 a8 01 00 01 02 40 01 00 02 05 28 02     .........@....(.
      cc:	00 01 01 80 03 00 83 01 40 05 00 82 01 00 05 04     ........@.......
      dc:	00 04 68 05 02 00 07 a8 05 00 01 0b 28 0b 00 83     ..h.........(...
      ec:	05 28 04 00 82 01 00 04 04 00 06 68 04 02 00 05     .(.........h....
      fc:	a8 04 00 01 0c 28 0c 00 83 04 28 06 00 82 01 00     .....(....(.....
     10c:	06 04 00 07 68 06 02 00 04 a8 06 00 01 09 00 07     ....h...........
     11c:	00 82 01 00 07 04 00 05 68 07 02 00 06 a8 07 00     ........h.......
     12c:	01 0a 00 09 00 02 06 28 09 00 01 08 14 08 00 83     .......(........
     13c:	01 00 0a 00 02 07 28 0a 00 01 0d 14 0d 00 83 01     ......(.........
     14c:	00 01 00 40 0e 00 02 00 40 0e 00 0e 76 01 01 00     ...@....@...v...

0000015c <__ctors_end>:
     15c:	11 24       	eor	r1, r1
     15e:	1f be       	out	0x3f, r1	; 63
     160:	cf e5       	ldi	r28, 0x5F	; 95
     162:	d4 e0       	ldi	r29, 0x04	; 4
     164:	de bf       	out	0x3e, r29	; 62
     166:	cd bf       	out	0x3d, r28	; 61

00000168 <__do_copy_data>:
     168:	10 e0       	ldi	r17, 0x00	; 0
     16a:	a0 e6       	ldi	r26, 0x60	; 96
     16c:	b0 e0       	ldi	r27, 0x00	; 0
     16e:	ee e5       	ldi	r30, 0x5E	; 94
     170:	fb e1       	ldi	r31, 0x1B	; 27
     172:	02 c0       	rjmp	.+4      	; 0x178 <__do_copy_data+0x10>
     174:	05 90       	lpm	r0, Z+
     176:	0d 92       	st	X+, r0
     178:	ae 3c       	cpi	r26, 0xCE	; 206
     17a:	b1 07       	cpc	r27, r17
     17c:	d9 f7       	brne	.-10     	; 0x174 <__do_copy_data+0xc>

0000017e <__do_clear_bss>:
     17e:	21 e0       	ldi	r18, 0x01	; 1
     180:	ae ec       	ldi	r26, 0xCE	; 206
     182:	b0 e0       	ldi	r27, 0x00	; 0
     184:	01 c0       	rjmp	.+2      	; 0x188 <.do_clear_bss_start>

00000186 <.do_clear_bss_loop>:
     186:	1d 92       	st	X+, r1

00000188 <.do_clear_bss_start>:
     188:	a0 37       	cpi	r26, 0x70	; 112
     18a:	b2 07       	cpc	r27, r18
     18c:	e1 f7       	brne	.-8      	; 0x186 <.do_clear_bss_loop>
     18e:	6e d8       	rcall	.-3876   	; 0xfffff26c <__eeprom_end+0xff7ef262>
     190:	e4 cc       	rjmp	.-1592   	; 0xfffffb5a <__eeprom_end+0xff7efb50>

00000192 <__bad_interrupt>:
     192:	36 cf       	rjmp	.-404    	; 0x0 <__vectors>

00000194 <conv_ADC_to_Celsius>:
		25 Celsius	->	765
*/


uint16_t conv_ADC_to_Celsius(uint16_t adc_value)
{	
     194:	0f 93       	push	r16
     196:	1f 93       	push	r17
	return (uint16_t)(((int32_t)adc_value * k_norm + offset_norm) / (COEFF_SCALE));
     198:	20 91 ce 00 	lds	r18, 0x00CE
     19c:	30 91 cf 00 	lds	r19, 0x00CF
     1a0:	40 91 d0 00 	lds	r20, 0x00D0
     1a4:	50 91 d1 00 	lds	r21, 0x00D1
     1a8:	dc 01       	movw	r26, r24
     1aa:	9d dc       	rcall	.-1734   	; 0xfffffae6 <__eeprom_end+0xff7efadc>
     1ac:	00 91 d2 00 	lds	r16, 0x00D2
     1b0:	10 91 d3 00 	lds	r17, 0x00D3
     1b4:	20 91 d4 00 	lds	r18, 0x00D4
     1b8:	30 91 d5 00 	lds	r19, 0x00D5
     1bc:	60 0f       	add	r22, r16
     1be:	71 1f       	adc	r23, r17
     1c0:	82 1f       	adc	r24, r18
     1c2:	93 1f       	adc	r25, r19
     1c4:	28 ee       	ldi	r18, 0xE8	; 232
     1c6:	33 e0       	ldi	r19, 0x03	; 3
     1c8:	40 e0       	ldi	r20, 0x00	; 0
     1ca:	50 e0       	ldi	r21, 0x00	; 0
     1cc:	5f dc       	rcall	.-1858   	; 0xfffffa8c <__eeprom_end+0xff7efa82>
}
     1ce:	c9 01       	movw	r24, r18
     1d0:	1f 91       	pop	r17
     1d2:	0f 91       	pop	r16
     1d4:	08 95       	ret

000001d6 <conv_Celsius_to_ADC>:

uint16_t conv_Celsius_to_ADC(uint16_t degree_value)
{
     1d6:	0f 93       	push	r16
     1d8:	1f 93       	push	r17
	degree_value += 1;
     1da:	9c 01       	movw	r18, r24
     1dc:	2f 5f       	subi	r18, 0xFF	; 255
     1de:	3f 4f       	sbci	r19, 0xFF	; 255
	return (uint16_t)(((int32_t)degree_value * COEFF_SCALE - offset_norm) / k_norm);
     1e0:	a8 ee       	ldi	r26, 0xE8	; 232
     1e2:	b3 e0       	ldi	r27, 0x03	; 3
     1e4:	6e dc       	rcall	.-1828   	; 0xfffffac2 <__eeprom_end+0xff7efab8>
     1e6:	00 91 d2 00 	lds	r16, 0x00D2
     1ea:	10 91 d3 00 	lds	r17, 0x00D3
     1ee:	20 91 d4 00 	lds	r18, 0x00D4
     1f2:	30 91 d5 00 	lds	r19, 0x00D5
     1f6:	60 1b       	sub	r22, r16
     1f8:	71 0b       	sbc	r23, r17
     1fa:	82 0b       	sbc	r24, r18
     1fc:	93 0b       	sbc	r25, r19
     1fe:	20 91 ce 00 	lds	r18, 0x00CE
     202:	30 91 cf 00 	lds	r19, 0x00CF
     206:	40 91 d0 00 	lds	r20, 0x00D0
     20a:	50 91 d1 00 	lds	r21, 0x00D1
     20e:	3e dc       	rcall	.-1924   	; 0xfffffa8c <__eeprom_end+0xff7efa82>
}
     210:	c9 01       	movw	r24, r18
     212:	1f 91       	pop	r17
     214:	0f 91       	pop	r16
     216:	08 95       	ret

00000218 <calculateCoeffs>:

void calculateCoeffs(void)
{
     218:	8f 92       	push	r8
     21a:	9f 92       	push	r9
     21c:	af 92       	push	r10
     21e:	bf 92       	push	r11
     220:	cf 92       	push	r12
     222:	df 92       	push	r13
     224:	ef 92       	push	r14
     226:	ff 92       	push	r15
     228:	cf 93       	push	r28
     22a:	df 93       	push	r29
	k_norm = ((int32_t)(p.cpoint2 - p.cpoint1) * COEFF_SCALE) / ((int32_t)(p.cpoint2_adc - p.cpoint1_adc));
     22c:	f0 90 41 01 	lds	r15, 0x0141
     230:	a0 91 42 01 	lds	r26, 0x0142
     234:	b0 e0       	ldi	r27, 0x00	; 0
     236:	af 19       	sub	r26, r15
     238:	b1 09       	sbc	r27, r1
     23a:	c0 91 43 01 	lds	r28, 0x0143
     23e:	d0 91 44 01 	lds	r29, 0x0144
     242:	28 ee       	ldi	r18, 0xE8	; 232
     244:	33 e0       	ldi	r19, 0x03	; 3
     246:	49 dc       	rcall	.-1902   	; 0xfffffada <__eeprom_end+0xff7efad0>
     248:	20 91 45 01 	lds	r18, 0x0145
     24c:	30 91 46 01 	lds	r19, 0x0146
     250:	2c 1b       	sub	r18, r28
     252:	3d 0b       	sbc	r19, r29
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	19 dc       	rcall	.-1998   	; 0xfffffa8c <__eeprom_end+0xff7efa82>
     25a:	49 01       	movw	r8, r18
     25c:	5a 01       	movw	r10, r20
     25e:	20 93 ce 00 	sts	0x00CE, r18
     262:	30 93 cf 00 	sts	0x00CF, r19
     266:	40 93 d0 00 	sts	0x00D0, r20
     26a:	50 93 d1 00 	sts	0x00D1, r21
	offset_norm = (int32_t)p.cpoint1 * COEFF_SCALE - (int32_t)p.cpoint1_adc * k_norm;
     26e:	2f 2d       	mov	r18, r15
     270:	30 e0       	ldi	r19, 0x00	; 0
     272:	a8 ee       	ldi	r26, 0xE8	; 232
     274:	b3 e0       	ldi	r27, 0x03	; 3
     276:	25 dc       	rcall	.-1974   	; 0xfffffac2 <__eeprom_end+0xff7efab8>
     278:	6b 01       	movw	r12, r22
     27a:	7c 01       	movw	r14, r24
     27c:	de 01       	movw	r26, r28
     27e:	a5 01       	movw	r20, r10
     280:	94 01       	movw	r18, r8
     282:	31 dc       	rcall	.-1950   	; 0xfffffae6 <__eeprom_end+0xff7efadc>
     284:	c6 1a       	sub	r12, r22
     286:	d7 0a       	sbc	r13, r23
     288:	e8 0a       	sbc	r14, r24
     28a:	f9 0a       	sbc	r15, r25
     28c:	c0 92 d2 00 	sts	0x00D2, r12
     290:	d0 92 d3 00 	sts	0x00D3, r13
     294:	e0 92 d4 00 	sts	0x00D4, r14
     298:	f0 92 d5 00 	sts	0x00D5, r15
}
     29c:	df 91       	pop	r29
     29e:	cf 91       	pop	r28
     2a0:	ff 90       	pop	r15
     2a2:	ef 90       	pop	r14
     2a4:	df 90       	pop	r13
     2a6:	cf 90       	pop	r12
     2a8:	bf 90       	pop	r11
     2aa:	af 90       	pop	r10
     2ac:	9f 90       	pop	r9
     2ae:	8f 90       	pop	r8
     2b0:	08 95       	ret

000002b2 <update_normalized_adc>:


void update_normalized_adc()
{
     2b2:	cf 92       	push	r12
     2b4:	df 92       	push	r13
     2b6:	ef 92       	push	r14
     2b8:	ff 92       	push	r15
	// Disable interrupts from ADC - to save data integrity
	ADCSRA &= ~(1<<ADIE);	
     2ba:	33 98       	cbi	0x06, 3	; 6
}

// Get ring buffer normalized value
uint16_t getNormalizedRingU16(RingBufU16_t* bptr)
{
	return 	bptr->summ / bptr->length;
     2bc:	c0 90 63 00 	lds	r12, 0x0063
     2c0:	d0 90 64 00 	lds	r13, 0x0064
     2c4:	e0 90 65 00 	lds	r14, 0x0065
     2c8:	f0 90 66 00 	lds	r15, 0x0066
     2cc:	20 91 60 00 	lds	r18, 0x0060
     2d0:	30 e0       	ldi	r19, 0x00	; 0
     2d2:	40 e0       	ldi	r20, 0x00	; 0
     2d4:	50 e0       	ldi	r21, 0x00	; 0
     2d6:	c7 01       	movw	r24, r14
     2d8:	b6 01       	movw	r22, r12
     2da:	b6 db       	rcall	.-2196   	; 0xfffffa48 <__eeprom_end+0xff7efa3e>
     2dc:	30 93 3a 01 	sts	0x013A, r19
     2e0:	20 93 39 01 	sts	0x0139, r18
{
	// Disable interrupts from ADC - to save data integrity
	ADCSRA &= ~(1<<ADIE);	
	// Get normalized mean window summ
	adc_normalized = (uint16_t)getNormalizedRingU16(&ringBufADC);
	adc_oversampled = ringBufADC.summ >> 2;
     2e4:	82 e0       	ldi	r24, 0x02	; 2
     2e6:	f6 94       	lsr	r15
     2e8:	e7 94       	ror	r14
     2ea:	d7 94       	ror	r13
     2ec:	c7 94       	ror	r12
     2ee:	8a 95       	dec	r24
     2f0:	d1 f7       	brne	.-12     	; 0x2e6 <update_normalized_adc+0x34>
     2f2:	d0 92 10 01 	sts	0x0110, r13
     2f6:	c0 92 0f 01 	sts	0x010F, r12
	//adc_normalized = ringBufADC.summ >> 2;
	// Enable interrupts from ADC
	ADCSRA |= (1<<ADIE);
     2fa:	33 9a       	sbi	0x06, 3	; 6
}
     2fc:	ff 90       	pop	r15
     2fe:	ef 90       	pop	r14
     300:	df 90       	pop	r13
     302:	cf 90       	pop	r12
     304:	08 95       	ret

00000306 <update_Celsius>:

void update_Celsius(void)
{
	// Convert to Celsius degree
	adc_celsius = conv_ADC_to_Celsius(adc_normalized);
     306:	80 91 39 01 	lds	r24, 0x0139
     30a:	90 91 3a 01 	lds	r25, 0x013A
     30e:	42 df       	rcall	.-380    	; 0x194 <conv_ADC_to_Celsius>
     310:	90 93 3c 01 	sts	0x013C, r25
     314:	80 93 3b 01 	sts	0x013B, r24
     318:	08 95       	ret

0000031a <addToRingU16>:
//---------------------------------------------//
//---------------------------------------------//

// Ring buffer main function - add new data and update summ
void addToRingU16(RingBufU16_t* bptr, uint16_t sample)
{
     31a:	ff 92       	push	r15
     31c:	0f 93       	push	r16
     31e:	1f 93       	push	r17
     320:	cf 93       	push	r28
     322:	df 93       	push	r29
     324:	fc 01       	movw	r30, r24
     326:	cb 01       	movw	r24, r22
	if (bptr->stat == RNORM)
     328:	20 85       	ldd	r18, Z+8	; 0x08
     32a:	21 11       	cpse	r18, r1
     32c:	18 c0       	rjmp	.+48     	; 0x35e <addToRingU16+0x44>
	{
		bptr->summ -= bptr->data[bptr->curr_pos];
     32e:	27 81       	ldd	r18, Z+7	; 0x07
     330:	41 81       	ldd	r20, Z+1	; 0x01
     332:	32 81       	ldd	r19, Z+2	; 0x02
     334:	a4 2f       	mov	r26, r20
     336:	b3 2f       	mov	r27, r19
     338:	a2 0f       	add	r26, r18
     33a:	b1 1d       	adc	r27, r1
     33c:	a2 0f       	add	r26, r18
     33e:	b1 1d       	adc	r27, r1
     340:	2d 91       	ld	r18, X+
     342:	3c 91       	ld	r19, X
     344:	43 81       	ldd	r20, Z+3	; 0x03
     346:	54 81       	ldd	r21, Z+4	; 0x04
     348:	65 81       	ldd	r22, Z+5	; 0x05
     34a:	76 81       	ldd	r23, Z+6	; 0x06
     34c:	42 1b       	sub	r20, r18
     34e:	53 0b       	sbc	r21, r19
     350:	61 09       	sbc	r22, r1
     352:	71 09       	sbc	r23, r1
     354:	43 83       	std	Z+3, r20	; 0x03
     356:	54 83       	std	Z+4, r21	; 0x04
     358:	65 83       	std	Z+5, r22	; 0x05
     35a:	76 83       	std	Z+6, r23	; 0x06
     35c:	05 c0       	rjmp	.+10     	; 0x368 <addToRingU16+0x4e>
	}
	else
	{
		bptr->curr_pos = 0;
     35e:	17 82       	std	Z+7, r1	; 0x07
		bptr->summ = 0;
     360:	13 82       	std	Z+3, r1	; 0x03
     362:	14 82       	std	Z+4, r1	; 0x04
     364:	15 82       	std	Z+5, r1	; 0x05
     366:	16 82       	std	Z+6, r1	; 0x06
	}
	do	
	{
		bptr->data[bptr->curr_pos++] = sample;
     368:	d1 81       	ldd	r29, Z+1	; 0x01
     36a:	f2 80       	ldd	r15, Z+2	; 0x02
     36c:	43 81       	ldd	r20, Z+3	; 0x03
     36e:	54 81       	ldd	r21, Z+4	; 0x04
     370:	65 81       	ldd	r22, Z+5	; 0x05
     372:	76 81       	ldd	r23, Z+6	; 0x06
		bptr->summ += sample;
     374:	8c 01       	movw	r16, r24
     376:	20 e0       	ldi	r18, 0x00	; 0
     378:	30 e0       	ldi	r19, 0x00	; 0
		bptr->curr_pos = 0;
		bptr->summ = 0;
	}
	do	
	{
		bptr->data[bptr->curr_pos++] = sample;
     37a:	c7 81       	ldd	r28, Z+7	; 0x07
     37c:	ad 2f       	mov	r26, r29
     37e:	bf 2d       	mov	r27, r15
     380:	ac 0f       	add	r26, r28
     382:	b1 1d       	adc	r27, r1
     384:	ac 0f       	add	r26, r28
     386:	b1 1d       	adc	r27, r1
     388:	8d 93       	st	X+, r24
     38a:	9c 93       	st	X, r25
     38c:	cf 5f       	subi	r28, 0xFF	; 255
     38e:	c7 83       	std	Z+7, r28	; 0x07
//---------------------------------------------//
//---------------------------------------------//
//---------------------------------------------//

// Ring buffer main function - add new data and update summ
void addToRingU16(RingBufU16_t* bptr, uint16_t sample)
     390:	40 0f       	add	r20, r16
     392:	51 1f       	adc	r21, r17
     394:	62 1f       	adc	r22, r18
     396:	73 1f       	adc	r23, r19
	}
	do	
	{
		bptr->data[bptr->curr_pos++] = sample;
		bptr->summ += sample;
		if (bptr->curr_pos == bptr->length)	
     398:	a0 81       	ld	r26, Z
     39a:	ca 13       	cpse	r28, r26
     39c:	02 c0       	rjmp	.+4      	; 0x3a2 <addToRingU16+0x88>
		{	
			bptr->curr_pos = 0;	
     39e:	17 82       	std	Z+7, r1	; 0x07
			bptr->stat = RNORM;
     3a0:	10 86       	std	Z+8, r1	; 0x08
		}
	} 
	while (bptr->stat != RNORM);
     3a2:	a0 85       	ldd	r26, Z+8	; 0x08
     3a4:	a1 11       	cpse	r26, r1
     3a6:	e9 cf       	rjmp	.-46     	; 0x37a <addToRingU16+0x60>
     3a8:	43 83       	std	Z+3, r20	; 0x03
     3aa:	54 83       	std	Z+4, r21	; 0x04
     3ac:	65 83       	std	Z+5, r22	; 0x05
     3ae:	76 83       	std	Z+6, r23	; 0x06
}
     3b0:	df 91       	pop	r29
     3b2:	cf 91       	pop	r28
     3b4:	1f 91       	pop	r17
     3b6:	0f 91       	pop	r16
     3b8:	ff 90       	pop	r15
     3ba:	08 95       	ret

000003bc <__vector_14>:




ISR(ADC_vect)
{
     3bc:	1f 92       	push	r1
     3be:	0f 92       	push	r0
     3c0:	0f b6       	in	r0, 0x3f	; 63
     3c2:	0f 92       	push	r0
     3c4:	11 24       	eor	r1, r1
     3c6:	2f 93       	push	r18
     3c8:	3f 93       	push	r19
     3ca:	4f 93       	push	r20
     3cc:	5f 93       	push	r21
     3ce:	6f 93       	push	r22
     3d0:	7f 93       	push	r23
     3d2:	8f 93       	push	r24
     3d4:	9f 93       	push	r25
     3d6:	af 93       	push	r26
     3d8:	bf 93       	push	r27
     3da:	ef 93       	push	r30
     3dc:	ff 93       	push	r31
	// Get new sample
	uint16_t new_sample = 1024 - ADC;	
     3de:	84 b1       	in	r24, 0x04	; 4
     3e0:	95 b1       	in	r25, 0x05	; 5
     3e2:	60 e0       	ldi	r22, 0x00	; 0
     3e4:	74 e0       	ldi	r23, 0x04	; 4
     3e6:	68 1b       	sub	r22, r24
     3e8:	79 0b       	sbc	r23, r25
	// Add new sample to the ring buffer
	addToRingU16(&ringBufADC, new_sample);
     3ea:	80 e6       	ldi	r24, 0x60	; 96
     3ec:	90 e0       	ldi	r25, 0x00	; 0
     3ee:	95 df       	rcall	.-214    	; 0x31a <addToRingU16>
}	
     3f0:	ff 91       	pop	r31
     3f2:	ef 91       	pop	r30
     3f4:	bf 91       	pop	r27
     3f6:	af 91       	pop	r26
     3f8:	9f 91       	pop	r25
     3fa:	8f 91       	pop	r24
     3fc:	7f 91       	pop	r23
     3fe:	6f 91       	pop	r22
     400:	5f 91       	pop	r21
     402:	4f 91       	pop	r20
     404:	3f 91       	pop	r19
     406:	2f 91       	pop	r18
     408:	0f 90       	pop	r0
     40a:	0f be       	out	0x3f, r0	; 63
     40c:	0f 90       	pop	r0
     40e:	1f 90       	pop	r1
     410:	18 95       	reti

00000412 <getNormalizedRingU16>:
}

// Get ring buffer normalized value
uint16_t getNormalizedRingU16(RingBufU16_t* bptr)
{
	return 	bptr->summ / bptr->length;
     412:	fc 01       	movw	r30, r24
     414:	20 81       	ld	r18, Z
     416:	30 e0       	ldi	r19, 0x00	; 0
     418:	40 e0       	ldi	r20, 0x00	; 0
     41a:	50 e0       	ldi	r21, 0x00	; 0
     41c:	63 81       	ldd	r22, Z+3	; 0x03
     41e:	74 81       	ldd	r23, Z+4	; 0x04
     420:	85 81       	ldd	r24, Z+5	; 0x05
     422:	96 81       	ldd	r25, Z+6	; 0x06
     424:	11 db       	rcall	.-2526   	; 0xfffffa48 <__eeprom_end+0xff7efa3e>
}
     426:	c9 01       	movw	r24, r18
     428:	08 95       	ret

0000042a <process_buttons>:
	uint8_t long_press_mask;
	uint8_t long_press_event_mask;
	
	uint16_t composed_state;
	
	raw_delayed = raw_current;
     42a:	50 91 dc 00 	lds	r21, 0x00DC
	raw_delayed_inv = raw_current_inv;
     42e:	30 91 69 00 	lds	r19, 0x0069
	raw_current = raw_button_state;
     432:	90 91 6f 01 	lds	r25, 0x016F
     436:	90 93 dc 00 	sts	0x00DC, r25
	raw_current_inv = ~raw_current;
     43a:	69 2f       	mov	r22, r25
     43c:	60 95       	com	r22
     43e:	60 93 69 00 	sts	0x0069, r22
	
	// Must be before press_timer update
	long_press_mask = (press_timer >= LONG_PRESS_DELAY) ? 0xFF : 0x00;
     442:	80 91 dd 00 	lds	r24, 0x00DD
     446:	8c 30       	cpi	r24, 0x0C	; 12
     448:	10 f0       	brcs	.+4      	; 0x44e <process_buttons+0x24>
     44a:	2f ef       	ldi	r18, 0xFF	; 255
     44c:	01 c0       	rjmp	.+2      	; 0x450 <process_buttons+0x26>
     44e:	20 e0       	ldi	r18, 0x00	; 0
	
	if (raw_delayed != raw_current)
     450:	59 17       	cp	r21, r25
     452:	19 f0       	breq	.+6      	; 0x45a <process_buttons+0x30>
	{
		press_timer = 0;
     454:	10 92 dd 00 	sts	0x00DD, r1
     458:	05 c0       	rjmp	.+10     	; 0x464 <__stack+0x5>
	}
	else if (press_timer <= LONG_PRESS_DELAY)
     45a:	8d 30       	cpi	r24, 0x0D	; 13
     45c:	18 f4       	brcc	.+6      	; 0x464 <__stack+0x5>
	{
		press_timer++;
     45e:	8f 5f       	subi	r24, 0xFF	; 255
     460:	80 93 dd 00 	sts	0x00DD, r24
	}
	
	// Must after press_timer update
	long_press_event_mask = (press_timer == LONG_PRESS_DELAY) ? 0xFF : 0x00;
     464:	70 91 dd 00 	lds	r23, 0x00DD
     468:	7c 30       	cpi	r23, 0x0C	; 12
     46a:	11 f4       	brne	.+4      	; 0x470 <__stack+0x11>
     46c:	4f ef       	ldi	r20, 0xFF	; 255
     46e:	01 c0       	rjmp	.+2      	; 0x472 <__stack+0x13>
     470:	40 e0       	ldi	r20, 0x00	; 0
			
	button_action_down = raw_current & raw_delayed_inv;
     472:	89 2f       	mov	r24, r25
     474:	83 23       	and	r24, r19
     476:	80 93 d9 00 	sts	0x00D9, r24
			
	if (press_timer > REPEAT_DELAY)
     47a:	77 30       	cpi	r23, 0x07	; 7
     47c:	08 f0       	brcs	.+2      	; 0x480 <__stack+0x21>
		raw_delayed_inv |= 0xFF;
     47e:	3f ef       	ldi	r19, 0xFF	; 255
	
	button_action_rep = raw_current & raw_delayed_inv;
     480:	39 23       	and	r19, r25
     482:	30 93 d8 00 	sts	0x00D8, r19
	
	button_action_up_short = raw_current_inv & raw_delayed & ~long_press_mask;
     486:	20 95       	com	r18
     488:	56 23       	and	r21, r22
     48a:	25 23       	and	r18, r21
     48c:	20 93 d7 00 	sts	0x00D7, r18
	//button_action_up_long  = raw_current_inv & raw_delayed & long_press_mask;
	button_action_long  = raw_current & long_press_event_mask;
     490:	49 23       	and	r20, r25
     492:	40 93 d6 00 	sts	0x00D6, r20
	
	// Compose button state
	composed_state = (button_action_down & (BD_MENU | BD_UP | BD_DOWN | BD_ROTFWD | BD_ROTREV | BD_HEATCTRL | BD_CYCLE));
     496:	87 7f       	andi	r24, 0xF7	; 247
     498:	90 e0       	ldi	r25, 0x00	; 0
	if (button_action_up_short & BD_MENU)
     49a:	20 fd       	sbrc	r18, 0
		composed_state |= BS_MENU;
     49c:	91 60       	ori	r25, 0x01	; 1
	//if (button_action_up_long & BD_MENU)
	if (button_action_long & BD_MENU)
     49e:	40 fd       	sbrc	r20, 0
		composed_state |= BL_MENU;
     4a0:	92 60       	ori	r25, 0x02	; 2
	if (button_action_rep & BD_UP)
     4a2:	31 fd       	sbrc	r19, 1
		composed_state |= BR_UP;	
     4a4:	94 60       	ori	r25, 0x04	; 4
	if (button_action_rep & BD_DOWN)
     4a6:	32 fd       	sbrc	r19, 2
		composed_state |= BR_DOWN;
     4a8:	98 60       	ori	r25, 0x08	; 8

	button_state = composed_state;
     4aa:	90 93 db 00 	sts	0x00DB, r25
     4ae:	80 93 da 00 	sts	0x00DA, r24
     4b2:	08 95       	ret

000004b4 <processRollControl>:
int16_t dbg_PID_output;


// Function to control motor rotation
void processRollControl(void)
{	
     4b4:	cf 93       	push	r28
//	static uint8_t beepMask = 0x00;
//	uint8_t nextBeepMask = 0xFF;
	static uint8_t force_rotate = 0;
	
	// Process auto power off control
	if (autoPowerOffState & AUTO_POFF_ACTIVE)
     4b6:	80 91 de 00 	lds	r24, 0x00DE
     4ba:	80 ff       	sbrs	r24, 0
     4bc:	0f c0       	rjmp	.+30     	; 0x4dc <processRollControl+0x28>
	{
		stopCycleRolling(1);	
     4be:	81 e0       	ldi	r24, 0x01	; 1
     4c0:	20 d8       	rcall	.-4032   	; 0xfffff502 <__eeprom_end+0xff7ef4f8>
		if (adc_celsius <= POFF_MOTOR_TRESHOLD)
     4c2:	80 91 3b 01 	lds	r24, 0x013B
     4c6:	90 91 3c 01 	lds	r25, 0x013C
     4ca:	c3 97       	sbiw	r24, 0x33	; 51
     4cc:	08 f0       	brcs	.+2      	; 0x4d0 <processRollControl+0x1c>
     4ce:	5f c0       	rjmp	.+190    	; 0x58e <processRollControl+0xda>
		{
			force_rotate = ROLL_FWD;		// Default direction
     4d0:	81 e0       	ldi	r24, 0x01	; 1
     4d2:	80 93 df 00 	sts	0x00DF, r24
			setMotorDirection(0);			// Stop the motor
     4d6:	80 e0       	ldi	r24, 0x00	; 0
     4d8:	f3 d7       	rcall	.+4070   	; 0x14c0 <setMotorDirection>
     4da:	59 c0       	rjmp	.+178    	; 0x58e <processRollControl+0xda>
		}
	}
	else
	{
		// Control direction by buttons
		if (button_action_down & BD_ROTFWD)
     4dc:	80 91 d9 00 	lds	r24, 0x00D9
     4e0:	84 ff       	sbrs	r24, 4
     4e2:	04 c0       	rjmp	.+8      	; 0x4ec <processRollControl+0x38>
		{
			setMotorDirection(ROLL_FWD);	
     4e4:	81 e0       	ldi	r24, 0x01	; 1
     4e6:	ec d7       	rcall	.+4056   	; 0x14c0 <setMotorDirection>
			beepState |= 0x01;			// pressed FWD button
     4e8:	c1 e0       	ldi	r28, 0x01	; 1
     4ea:	13 c0       	rjmp	.+38     	; 0x512 <processRollControl+0x5e>
		}		
		else if (button_action_down & BD_ROTREV)
     4ec:	85 ff       	sbrs	r24, 5
     4ee:	04 c0       	rjmp	.+8      	; 0x4f8 <processRollControl+0x44>
		{
			setMotorDirection(ROLL_REV);
     4f0:	82 e0       	ldi	r24, 0x02	; 2
     4f2:	e6 d7       	rcall	.+4044   	; 0x14c0 <setMotorDirection>
			beepState |= 0x02;			// pressed REV button
     4f4:	c2 e0       	ldi	r28, 0x02	; 2
     4f6:	0d c0       	rjmp	.+26     	; 0x512 <processRollControl+0x5e>
		}		
		else if (button_action_long & BD_CYCLE)
     4f8:	80 91 d6 00 	lds	r24, 0x00D6
     4fc:	87 ff       	sbrs	r24, 7
     4fe:	04 c0       	rjmp	.+8      	; 0x508 <processRollControl+0x54>
		{
			stopCycleRolling(1);		// Reset points and disable CYCLE mode (if was enabled)
     500:	81 e0       	ldi	r24, 0x01	; 1
     502:	ff d7       	rcall	.+4094   	; 0x1502 <stopCycleRolling>
			beepState |= 0x08;			// reset of points by long pressing of ROLL button
     504:	c8 e0       	ldi	r28, 0x08	; 8
     506:	05 c0       	rjmp	.+10     	; 0x512 <processRollControl+0x5e>
		}
		else if (force_rotate)
     508:	80 91 df 00 	lds	r24, 0x00DF
     50c:	81 11       	cpse	r24, r1
		{
			// Auto power off mode was exited by pressing some other button, not direction buttons
			// Start roll, but do not beep in this case
			setMotorDirection(force_rotate);
     50e:	d8 d7       	rcall	.+4016   	; 0x14c0 <setMotorDirection>


// Function to control motor rotation
void processRollControl(void)
{	
	uint8_t beepState = 0;
     510:	c0 e0       	ldi	r28, 0x00	; 0
		{
			// Auto power off mode was exited by pressing some other button, not direction buttons
			// Start roll, but do not beep in this case
			setMotorDirection(force_rotate);
		}
		force_rotate = 0;		// First normal pass will clear 
     512:	10 92 df 00 	sts	0x00DF, r1
			
		if (button_action_up_short & BD_CYCLE)
     516:	80 91 d7 00 	lds	r24, 0x00D7
     51a:	87 ff       	sbrs	r24, 7
     51c:	0e c0       	rjmp	.+28     	; 0x53a <processRollControl+0x86>
		{
			if (rollState & ROLL_CYCLE)
     51e:	80 91 fd 00 	lds	r24, 0x00FD
     522:	82 ff       	sbrs	r24, 2
     524:	04 c0       	rjmp	.+8      	; 0x52e <processRollControl+0x7a>
			{
				stopCycleRolling(0);
     526:	80 e0       	ldi	r24, 0x00	; 0
     528:	ec d7       	rcall	.+4056   	; 0x1502 <stopCycleRolling>
				beepState |= 0x20;		// stopped cycle
     52a:	c0 62       	ori	r28, 0x20	; 32
     52c:	06 c0       	rjmp	.+12     	; 0x53a <processRollControl+0x86>
			}
			else if (startCycleRolling())
     52e:	25 d8       	rcall	.-4022   	; 0xfffff57a <__eeprom_end+0xff7ef570>
     530:	88 23       	and	r24, r24
     532:	11 f0       	breq	.+4      	; 0x538 <processRollControl+0x84>
			{
				beepState |= 0x10;		// started cycle
     534:	c0 61       	ori	r28, 0x10	; 16
     536:	01 c0       	rjmp	.+2      	; 0x53a <processRollControl+0x86>
			}
			else
			{
				beepState |= 0x40;		// failed to start cycle
     538:	c0 64       	ori	r28, 0x40	; 64
			}			
		}		
			
		if (rollState & ROLL_DIR_CHANGED)
     53a:	80 91 fd 00 	lds	r24, 0x00FD
     53e:	85 ff       	sbrs	r24, 5
     540:	04 c0       	rjmp	.+8      	; 0x54a <processRollControl+0x96>
		{
			rollState &= ~ROLL_DIR_CHANGED;
     542:	8f 7d       	andi	r24, 0xDF	; 223
     544:	80 93 fd 00 	sts	0x00FD, r24
			beepState |= 0x04;	
     548:	c4 60       	ori	r28, 0x04	; 4
		}
			
		if (rollState & CYCLE_ROLL_DONE)
     54a:	80 91 fd 00 	lds	r24, 0x00FD
     54e:	84 ff       	sbrs	r24, 4
     550:	04 c0       	rjmp	.+8      	; 0x55a <processRollControl+0xa6>
		{
			rollState &= ~CYCLE_ROLL_DONE;
     552:	8f 7e       	andi	r24, 0xEF	; 239
     554:	80 93 fd 00 	sts	0x00FD, r24
			beepState |= 0x80;	
     558:	c0 68       	ori	r28, 0x80	; 128
		}		
			
		//-----------//
			
		if (beepState & 0x80)		// Roll cycle done
     55a:	c7 ff       	sbrs	r28, 7
     55c:	06 c0       	rjmp	.+12     	; 0x56a <processRollControl+0xb6>
		{
			SetBeeperFreq(1000);
     55e:	88 ee       	ldi	r24, 0xE8	; 232
     560:	93 e0       	ldi	r25, 0x03	; 3
     562:	bc d9       	rcall	.-3208   	; 0xfffff8dc <__eeprom_end+0xff7ef8d2>
			StartBeep(200);
     564:	88 ec       	ldi	r24, 0xC8	; 200
     566:	90 e0       	ldi	r25, 0x00	; 0
     568:	11 c0       	rjmp	.+34     	; 0x58c <processRollControl+0xd8>
		}		
		else if (beepState & 0x40)	// Roll cycle start fail
     56a:	c6 ff       	sbrs	r28, 6
     56c:	03 c0       	rjmp	.+6      	; 0x574 <processRollControl+0xc0>
		{
			SetBeeperFreq(500);
     56e:	84 ef       	ldi	r24, 0xF4	; 244
     570:	91 e0       	ldi	r25, 0x01	; 1
     572:	09 c0       	rjmp	.+18     	; 0x586 <processRollControl+0xd2>
			StartBeep(50);
		} 
		else if (beepState & 0x08)	// Reset points
     574:	c3 ff       	sbrs	r28, 3
     576:	03 c0       	rjmp	.+6      	; 0x57e <processRollControl+0xca>
		{
			SetBeeperFreq(800);
     578:	80 e2       	ldi	r24, 0x20	; 32
     57a:	93 e0       	ldi	r25, 0x03	; 3
     57c:	04 c0       	rjmp	.+8      	; 0x586 <processRollControl+0xd2>
			StartBeep(50);
		}							// Other
		else if ( beepState & (0x01 | 0x02 | 0x10 | 0x20 | 0x04) )
     57e:	c7 73       	andi	r28, 0x37	; 55
     580:	31 f0       	breq	.+12     	; 0x58e <processRollControl+0xda>
		{
			SetBeeperFreq(1000);
     582:	88 ee       	ldi	r24, 0xE8	; 232
     584:	93 e0       	ldi	r25, 0x03	; 3
     586:	aa d9       	rcall	.-3244   	; 0xfffff8dc <__eeprom_end+0xff7ef8d2>
			StartBeep(50);	
     588:	82 e3       	ldi	r24, 0x32	; 50
     58a:	90 e0       	ldi	r25, 0x00	; 0
     58c:	c7 d9       	rcall	.-3186   	; 0xfffff91c <__eeprom_end+0xff7ef912>
		}			
			
	}

	// Indicate direction by LEDs
	clearExtraLeds(LED_ROTFWD | LED_ROTREV);
     58e:	80 e3       	ldi	r24, 0x30	; 48
     590:	91 d2       	rcall	.+1314   	; 0xab4 <clearExtraLeds>
	if (rollState & ROLL_FWD)
     592:	80 91 fd 00 	lds	r24, 0x00FD
     596:	80 ff       	sbrs	r24, 0
     598:	02 c0       	rjmp	.+4      	; 0x59e <processRollControl+0xea>
		setExtraLeds(LED_ROTFWD);
     59a:	80 e1       	ldi	r24, 0x10	; 16
     59c:	03 c0       	rjmp	.+6      	; 0x5a4 <processRollControl+0xf0>
	else if (rollState & ROLL_REV)
     59e:	81 ff       	sbrs	r24, 1
     5a0:	03 c0       	rjmp	.+6      	; 0x5a8 <processRollControl+0xf4>
		setExtraLeds(LED_ROTREV);
     5a2:	80 e2       	ldi	r24, 0x20	; 32
}
     5a4:	cf 91       	pop	r28
	// Indicate direction by LEDs
	clearExtraLeds(LED_ROTFWD | LED_ROTREV);
	if (rollState & ROLL_FWD)
		setExtraLeds(LED_ROTFWD);
	else if (rollState & ROLL_REV)
		setExtraLeds(LED_ROTREV);
     5a6:	80 c2       	rjmp	.+1280   	; 0xaa8 <setExtraLeds>
}
     5a8:	cf 91       	pop	r28
     5aa:	08 95       	ret

000005ac <samplePIDProcessValue>:



void samplePIDProcessValue(void)
{
	PIDsampledADC = getNormalizedRingU16(&ringBufADC);
     5ac:	80 e6       	ldi	r24, 0x60	; 96
     5ae:	90 e0       	ldi	r25, 0x00	; 0
     5b0:	30 df       	rcall	.-416    	; 0x412 <getNormalizedRingU16>
     5b2:	90 93 0e 01 	sts	0x010E, r25
     5b6:	80 93 0d 01 	sts	0x010D, r24
     5ba:	08 95       	ret

000005bc <processPID>:




uint8_t processPID(uint16_t setPoint, uint16_t processValue)
{
     5bc:	0f 93       	push	r16
     5be:	1f 93       	push	r17
     5c0:	cf 93       	push	r28
     5c2:	df 93       	push	r29
	int16_t error, p_term, i_term, d_term, temp;
	static uint16_t lastProcessValue;
	static int16_t integAcc = 0;
	
	error = setPoint - processValue;
     5c4:	86 1b       	sub	r24, r22
     5c6:	97 0b       	sbc	r25, r23
	
	
	//------ Calculate P term --------//
	if (error > 20 /*100*/)
     5c8:	85 31       	cpi	r24, 0x15	; 21
     5ca:	91 05       	cpc	r25, r1
     5cc:	5c f4       	brge	.+22     	; 0x5e4 <processPID+0x28>
	{
		p_term = 1000 /*2000*/;
	}
	else if (error < -20 /*100*/)
     5ce:	8c 3e       	cpi	r24, 0xEC	; 236
     5d0:	2f ef       	ldi	r18, 0xFF	; 255
     5d2:	92 07       	cpc	r25, r18
     5d4:	54 f0       	brlt	.+20     	; 0x5ea <processPID+0x2e>
	{
		p_term = -1000 /*-2000*/;
	}
	else
	{
		p_term = error * Kp;
     5d6:	2f e0       	ldi	r18, 0x0F	; 15
     5d8:	28 9f       	mul	r18, r24
     5da:	e0 01       	movw	r28, r0
     5dc:	29 9f       	mul	r18, r25
     5de:	d0 0d       	add	r29, r0
     5e0:	11 24       	eor	r1, r1
     5e2:	05 c0       	rjmp	.+10     	; 0x5ee <processPID+0x32>
	
	
	//------ Calculate P term --------//
	if (error > 20 /*100*/)
	{
		p_term = 1000 /*2000*/;
     5e4:	c8 ee       	ldi	r28, 0xE8	; 232
     5e6:	d3 e0       	ldi	r29, 0x03	; 3
     5e8:	02 c0       	rjmp	.+4      	; 0x5ee <processPID+0x32>
	}
	else if (error < -20 /*100*/)
	{
		p_term = -1000 /*-2000*/;
     5ea:	c8 e1       	ldi	r28, 0x18	; 24
     5ec:	dc ef       	ldi	r29, 0xFC	; 252
	{
		p_term = error * Kp;
	}
	
	//------ Calculate I term --------//
	integAcc += error;
     5ee:	20 91 e4 00 	lds	r18, 0x00E4
     5f2:	30 91 e5 00 	lds	r19, 0x00E5
	if (error <= 0)
     5f6:	18 16       	cp	r1, r24
     5f8:	19 06       	cpc	r1, r25
     5fa:	0c f0       	brlt	.+2      	; 0x5fe <processPID+0x42>
     5fc:	0f c0       	rjmp	.+30     	; 0x61c <processPID+0x60>
	{
		p_term = error * Kp;
	}
	
	//------ Calculate I term --------//
	integAcc += error;
     5fe:	82 0f       	add	r24, r18
     600:	93 1f       	adc	r25, r19
	if (error <= 0)
	{
		integAcc = 0;
	}
	else if (integAcc > 10 /*200*/)
     602:	8b 30       	cpi	r24, 0x0B	; 11
     604:	91 05       	cpc	r25, r1
     606:	1c f0       	brlt	.+6      	; 0x60e <processPID+0x52>
	{
		integAcc = 10 /*200*/;
     608:	8a e0       	ldi	r24, 0x0A	; 10
     60a:	90 e0       	ldi	r25, 0x00	; 0
     60c:	02 c0       	rjmp	.+4      	; 0x612 <processPID+0x56>
	}
	else if (integAcc < 0)
     60e:	97 fd       	sbrc	r25, 7
     610:	05 c0       	rjmp	.+10     	; 0x61c <processPID+0x60>
	{
		p_term = error * Kp;
	}
	
	//------ Calculate I term --------//
	integAcc += error;
     612:	90 93 e5 00 	sts	0x00E5, r25
     616:	80 93 e4 00 	sts	0x00E4, r24
     61a:	04 c0       	rjmp	.+8      	; 0x624 <processPID+0x68>
	{
		integAcc = 10 /*200*/;
	}
	else if (integAcc < 0)
	{
		integAcc = 0;
     61c:	10 92 e5 00 	sts	0x00E5, r1
     620:	10 92 e4 00 	sts	0x00E4, r1
	}
	i_term = integAcc * Ki;
     624:	80 91 e4 00 	lds	r24, 0x00E4
     628:	90 91 e5 00 	lds	r25, 0x00E5
     62c:	2f e0       	ldi	r18, 0x0F	; 15
     62e:	28 9f       	mul	r18, r24
     630:	80 01       	movw	r16, r0
     632:	29 9f       	mul	r18, r25
     634:	10 0d       	add	r17, r0
     636:	11 24       	eor	r1, r1

	
	//------ Calculate D term --------//	
	lastProcessValue = ringBufDterm.summ;
     638:	80 91 6d 00 	lds	r24, 0x006D
     63c:	90 91 6e 00 	lds	r25, 0x006E
     640:	90 93 e7 00 	sts	0x00E7, r25
     644:	80 93 e6 00 	sts	0x00E6, r24
	addToRingU16(&ringBufDterm, processValue);
     648:	8a e6       	ldi	r24, 0x6A	; 106
     64a:	90 e0       	ldi	r25, 0x00	; 0
     64c:	66 de       	rcall	.-820    	; 0x31a <addToRingU16>
	processValue = ringBufDterm.summ;
	d_term = Kd * ((int16_t)(lastProcessValue - processValue));
     64e:	80 91 e6 00 	lds	r24, 0x00E6
     652:	90 91 e7 00 	lds	r25, 0x00E7
     656:	20 91 6d 00 	lds	r18, 0x006D
     65a:	30 91 6e 00 	lds	r19, 0x006E
     65e:	82 1b       	sub	r24, r18
     660:	93 0b       	sbc	r25, r19
     662:	40 e5       	ldi	r20, 0x50	; 80
     664:	48 9f       	mul	r20, r24
     666:	90 01       	movw	r18, r0
     668:	49 9f       	mul	r20, r25
     66a:	30 0d       	add	r19, r0
     66c:	11 24       	eor	r1, r1
	
	//--------- Summ terms -----------//
	temp = (p_term + i_term + d_term) / SCALING_FACTOR;
     66e:	ce 01       	movw	r24, r28
     670:	80 0f       	add	r24, r16
     672:	91 1f       	adc	r25, r17
     674:	82 0f       	add	r24, r18
     676:	93 1f       	adc	r25, r19
     678:	65 e0       	ldi	r22, 0x05	; 5
     67a:	70 e0       	ldi	r23, 0x00	; 0
     67c:	d2 d9       	rcall	.-3164   	; 0xfffffa22 <__eeprom_end+0xff7efa18>
     67e:	cb 01       	movw	r24, r22
     680:	77 ff       	sbrs	r23, 7
     682:	02 c0       	rjmp	.+4      	; 0x688 <processPID+0xcc>
     684:	80 e0       	ldi	r24, 0x00	; 0
     686:	90 e0       	ldi	r25, 0x00	; 0
     688:	83 33       	cpi	r24, 0x33	; 51
     68a:	91 05       	cpc	r25, r1
     68c:	14 f0       	brlt	.+4      	; 0x692 <processPID+0xd6>
     68e:	82 e3       	ldi	r24, 0x32	; 50
     690:	90 e0       	ldi	r25, 0x00	; 0
		temp = 0;
	}
	
	
	//------- Debug --------//
	dbg_PID_p_term = p_term;
     692:	d0 93 4b 01 	sts	0x014B, r29
     696:	c0 93 4a 01 	sts	0x014A, r28
	dbg_PID_d_term = d_term;
     69a:	30 93 59 01 	sts	0x0159, r19
     69e:	20 93 58 01 	sts	0x0158, r18
	dbg_PID_i_term = i_term;
     6a2:	10 93 4f 01 	sts	0x014F, r17
     6a6:	00 93 4e 01 	sts	0x014E, r16
	dbg_PID_output = temp;
     6aa:	90 93 48 01 	sts	0x0148, r25
     6ae:	80 93 47 01 	sts	0x0147, r24
	
	
	return temp;
	
}
     6b2:	df 91       	pop	r29
     6b4:	cf 91       	pop	r28
     6b6:	1f 91       	pop	r17
     6b8:	0f 91       	pop	r16
     6ba:	08 95       	ret

000006bc <processHeaterControl>:
	static uint16_t set_value_adc;		// static for debug
	static uint16_t pid_output;			// static for debug
	
	
	// Process heater ON/OFF control by button
	if (button_state & BD_HEATCTRL)
     6bc:	80 91 da 00 	lds	r24, 0x00DA
     6c0:	86 ff       	sbrs	r24, 6
     6c2:	07 c0       	rjmp	.+14     	; 0x6d2 <processHeaterControl+0x16>
	{
		heaterState ^= HEATER_ENABLED;
     6c4:	80 91 ff 00 	lds	r24, 0x00FF
     6c8:	91 e0       	ldi	r25, 0x01	; 1
     6ca:	89 27       	eor	r24, r25
     6cc:	80 93 ff 00 	sts	0x00FF, r24
		// Make heater controller set update_flag on next call
		forceHeaterControlUpdate();
     6d0:	ea d6       	rcall	.+3540   	; 0x14a6 <forceHeaterControlUpdate>
	}
	
	// Process auto power off control
	if (autoPowerOffState & AUTO_POFF_ACTIVE)
     6d2:	80 91 de 00 	lds	r24, 0x00DE
     6d6:	80 ff       	sbrs	r24, 0
     6d8:	05 c0       	rjmp	.+10     	; 0x6e4 <processHeaterControl+0x28>
	{
		heaterState &= ~HEATER_ENABLED;
     6da:	80 91 ff 00 	lds	r24, 0x00FF
     6de:	8e 7f       	andi	r24, 0xFE	; 254
     6e0:	80 93 ff 00 	sts	0x00FF, r24
	}		
	
	
	// Check if heater control should be updated
	// PID call interval is a multiple of AC line periods, computed as HEATER_REGULATION_PERIODS * 20ms * HEATER_PID_CALL_INTERVAL
	if (heaterState & READY_TO_UPDATE_HEATER)
     6e4:	80 91 ff 00 	lds	r24, 0x00FF
     6e8:	87 ff       	sbrs	r24, 7
     6ea:	17 c0       	rjmp	.+46     	; 0x71a <processHeaterControl+0x5e>
	{
		// Convert temperature setup to equal ADC value
		set_value_adc = conv_Celsius_to_ADC(p.setup_temp_value);					
     6ec:	80 91 3d 01 	lds	r24, 0x013D
     6f0:	90 e0       	ldi	r25, 0x00	; 0
     6f2:	71 dd       	rcall	.-1310   	; 0x1d6 <conv_Celsius_to_ADC>
     6f4:	90 93 e1 00 	sts	0x00E1, r25
     6f8:	80 93 e0 00 	sts	0x00E0, r24
		// Process PID
		pid_output = processPID(set_value_adc,PIDsampledADC);
     6fc:	60 91 0d 01 	lds	r22, 0x010D
     700:	70 91 0e 01 	lds	r23, 0x010E
     704:	5b df       	rcall	.-330    	; 0x5bc <processPID>
     706:	80 93 e2 00 	sts	0x00E2, r24
     70a:	10 92 e3 00 	sts	0x00E3, r1
			
		// Heater control is updated only when flag is set, even if heater must be powered OFF
		if (heaterState & HEATER_ENABLED)
     70e:	90 91 ff 00 	lds	r25, 0x00FF
     712:	90 fd       	sbrc	r25, 0
     714:	01 c0       	rjmp	.+2      	; 0x718 <processHeaterControl+0x5c>
			setHeaterControl(pid_output);	// Flag is cleared automatically
		else
			setHeaterControl(0);
     716:	80 e0       	ldi	r24, 0x00	; 0
     718:	b8 d6       	rcall	.+3440   	; 0x148a <setHeaterControl>
	}	
		
	
	//------- Debug --------//
	if (heaterState & HEATER_ENABLED)
     71a:	80 91 ff 00 	lds	r24, 0x00FF
     71e:	80 ff       	sbrs	r24, 0
     720:	0f c0       	rjmp	.+30     	; 0x740 <processHeaterControl+0x84>
	{
		setExtraLeds(LED_HEATER);
     722:	80 e4       	ldi	r24, 0x40	; 64
     724:	c1 d1       	rcall	.+898    	; 0xaa8 <setExtraLeds>
		dbg_SetTempCelsius = p.setup_temp_value;
     726:	80 91 3d 01 	lds	r24, 0x013D
     72a:	80 93 49 01 	sts	0x0149, r24
		dbg_SetTempPID = set_value_adc;
     72e:	80 91 e0 00 	lds	r24, 0x00E0
     732:	90 91 e1 00 	lds	r25, 0x00E1
     736:	90 93 5c 01 	sts	0x015C, r25
     73a:	80 93 5b 01 	sts	0x015B, r24
     73e:	08 c0       	rjmp	.+16     	; 0x750 <processHeaterControl+0x94>
	}
	else
	{
		dbg_SetTempCelsius = 0;
     740:	10 92 49 01 	sts	0x0149, r1
		dbg_SetTempPID = 0;
     744:	10 92 5c 01 	sts	0x015C, r1
     748:	10 92 5b 01 	sts	0x015B, r1
		clearExtraLeds(LED_HEATER);
     74c:	80 e4       	ldi	r24, 0x40	; 64
     74e:	b2 d1       	rcall	.+868    	; 0xab4 <clearExtraLeds>
	}
	
	dbg_RealTempCelsius = conv_ADC_to_Celsius(PIDsampledADC);
     750:	80 91 0d 01 	lds	r24, 0x010D
     754:	90 91 0e 01 	lds	r25, 0x010E
     758:	1d dd       	rcall	.-1478   	; 0x194 <conv_ADC_to_Celsius>
     75a:	80 93 5a 01 	sts	0x015A, r24
	dbg_RealTempPID = PIDsampledADC;
     75e:	80 91 0d 01 	lds	r24, 0x010D
     762:	90 91 0e 01 	lds	r25, 0x010E
     766:	90 93 4d 01 	sts	0x014D, r25
     76a:	80 93 4c 01 	sts	0x014C, r24
     76e:	08 95       	ret

00000770 <heaterInit>:
	//PIDsampledADC = ringBufADC.summ >> 2;
}

void heaterInit(void)
{
	samplePIDProcessValue();
     770:	1d df       	rcall	.-454    	; 0x5ac <samplePIDProcessValue>
	processPID(0,PIDsampledADC);
     772:	60 91 0d 01 	lds	r22, 0x010D
     776:	70 91 0e 01 	lds	r23, 0x010E
     77a:	80 e0       	ldi	r24, 0x00	; 0
     77c:	90 e0       	ldi	r25, 0x00	; 0
     77e:	1e cf       	rjmp	.-452    	; 0x5bc <processPID>

00000780 <processHeaterAlerts>:

// Function to process all heater alerts:
//	- getting near to desired temperature
//	- continuous heating when disabled
void processHeaterAlerts(void)
{
     780:	cf 93       	push	r28
     782:	df 93       	push	r29
	static uint8_t tempAlertRange = TEMP_ALERT_RANGE;
	static uint16_t refCapturedTemp = 0xFFFF;
	uint16_t currentTemperature = adc_celsius;
     784:	c0 91 3b 01 	lds	r28, 0x013B
     788:	d0 91 3c 01 	lds	r29, 0x013C
	
	
	// Indicate reaching of desired temperature
	if ( (currentTemperature > p.setup_temp_value - tempAlertRange) && (currentTemperature < p.setup_temp_value + tempAlertRange) )
     78c:	20 91 3d 01 	lds	r18, 0x013D
     790:	30 e0       	ldi	r19, 0x00	; 0
     792:	60 91 73 00 	lds	r22, 0x0073
     796:	86 2f       	mov	r24, r22
     798:	90 e0       	ldi	r25, 0x00	; 0
     79a:	a9 01       	movw	r20, r18
     79c:	48 1b       	sub	r20, r24
     79e:	59 0b       	sbc	r21, r25
     7a0:	4c 17       	cp	r20, r28
     7a2:	5d 07       	cpc	r21, r29
     7a4:	98 f4       	brcc	.+38     	; 0x7cc <processHeaterAlerts+0x4c>
     7a6:	82 0f       	add	r24, r18
     7a8:	93 1f       	adc	r25, r19
     7aa:	c8 17       	cp	r28, r24
     7ac:	d9 07       	cpc	r29, r25
     7ae:	70 f4       	brcc	.+28     	; 0x7cc <processHeaterAlerts+0x4c>
	{
		if ((tempAlertRange == TEMP_ALERT_RANGE) && (heaterState & HEATER_ENABLED))
     7b0:	65 30       	cpi	r22, 0x05	; 5
     7b2:	51 f4       	brne	.+20     	; 0x7c8 <processHeaterAlerts+0x48>
     7b4:	80 91 ff 00 	lds	r24, 0x00FF
     7b8:	80 ff       	sbrs	r24, 0
     7ba:	06 c0       	rjmp	.+12     	; 0x7c8 <processHeaterAlerts+0x48>
		{
			SetBeeperFreq(1000);
     7bc:	88 ee       	ldi	r24, 0xE8	; 232
     7be:	93 e0       	ldi	r25, 0x03	; 3
     7c0:	8d d8       	rcall	.-3814   	; 0xfffff8dc <__eeprom_end+0xff7ef8d2>
			StartBeep(400);
     7c2:	80 e9       	ldi	r24, 0x90	; 144
     7c4:	91 e0       	ldi	r25, 0x01	; 1
     7c6:	aa d8       	rcall	.-3756   	; 0xfffff91c <__eeprom_end+0xff7ef912>
		}
		// Add some hysteresis
		tempAlertRange = TEMP_ALERT_RANGE + TEMP_ALERT_HYST;
     7c8:	8a e0       	ldi	r24, 0x0A	; 10
     7ca:	01 c0       	rjmp	.+2      	; 0x7ce <processHeaterAlerts+0x4e>
	}			
	else
	{
		tempAlertRange = TEMP_ALERT_RANGE;
     7cc:	85 e0       	ldi	r24, 0x05	; 5
     7ce:	80 93 73 00 	sts	0x0073, r24
	// Growing temperature with heater disabled alert 
	// This alert is done regardless of global sound enable
	// A false triggering may occur if ambient temperature grows.
	// To reset the warning in this case just turn on heater for at least one systimer tick (50ms)
	// If heater is enabled, it is implied that user controls heating process
	if (heaterState & (HEATER_ENABLED | CALIBRATION_ACTIVE))
     7d2:	80 91 ff 00 	lds	r24, 0x00FF
     7d6:	83 70       	andi	r24, 0x03	; 3
     7d8:	09 f0       	breq	.+2      	; 0x7dc <processHeaterAlerts+0x5c>
     7da:	0b c0       	rjmp	.+22     	; 0x7f2 <processHeaterAlerts+0x72>
	{
		// Heater enabled, just save current temperature as reference
		// Same if calibration in progress, even if heater is disabled
		refCapturedTemp = currentTemperature;
	}
	else if (sys_timers.flags & EXPIRED_10SEC)
     7dc:	80 91 81 00 	lds	r24, 0x0081
     7e0:	81 ff       	sbrs	r24, 1
     7e2:	19 c0       	rjmp	.+50     	; 0x816 <processHeaterAlerts+0x96>
	{
		// Heater disabled. If temperature is falling,
		if (currentTemperature < refCapturedTemp)
     7e4:	80 91 74 00 	lds	r24, 0x0074
     7e8:	90 91 75 00 	lds	r25, 0x0075
     7ec:	c8 17       	cp	r28, r24
     7ee:	d9 07       	cpc	r29, r25
     7f0:	28 f4       	brcc	.+10     	; 0x7fc <processHeaterAlerts+0x7c>
		{
			// save current temperature as reference
			refCapturedTemp = currentTemperature;
     7f2:	d0 93 75 00 	sts	0x0075, r29
     7f6:	c0 93 74 00 	sts	0x0074, r28
     7fa:	0d c0       	rjmp	.+26     	; 0x816 <processHeaterAlerts+0x96>
		else
		{
			// Heater is disabled. If current temperature is higher than reference + some safe interval,
			// there might be a hardware failure - short circuit, etc
			// BEEP like a devil  }:-(
			if (currentTemperature >= (refCapturedTemp + SAFE_TEMP_INTERVAL))
     7fc:	0a 96       	adiw	r24, 0x0a	; 10
     7fe:	c8 17       	cp	r28, r24
     800:	d9 07       	cpc	r29, r25
     802:	48 f0       	brcs	.+18     	; 0x816 <processHeaterAlerts+0x96>
			{
				// Enable beeper output regardless of menu setting
				OverrideSoundDisable();
     804:	9d d8       	rcall	.-3782   	; 0xfffff940 <__eeprom_end+0xff7ef936>
				SetBeeperFreq(1500);
     806:	8c ed       	ldi	r24, 0xDC	; 220
     808:	95 e0       	ldi	r25, 0x05	; 5
     80a:	68 d8       	rcall	.-3888   	; 0xfffff8dc <__eeprom_end+0xff7ef8d2>
				StartBeep(5000);	
     80c:	88 e8       	ldi	r24, 0x88	; 136
     80e:	93 e1       	ldi	r25, 0x13	; 19
			}
		}
	}
	

}
     810:	df 91       	pop	r29
     812:	cf 91       	pop	r28
			if (currentTemperature >= (refCapturedTemp + SAFE_TEMP_INTERVAL))
			{
				// Enable beeper output regardless of menu setting
				OverrideSoundDisable();
				SetBeeperFreq(1500);
				StartBeep(5000);	
     814:	83 c8       	rjmp	.-3834   	; 0xfffff91c <__eeprom_end+0xff7ef912>
			}
		}
	}
	

}
     816:	df 91       	pop	r29
     818:	cf 91       	pop	r28
     81a:	08 95       	ret

0000081c <restoreGlobalParams>:


void restoreGlobalParams(void)
{
	 eeprom_read_block(&p,&nvParams,sizeof(nvParams));
     81c:	4a e0       	ldi	r20, 0x0A	; 10
     81e:	50 e0       	ldi	r21, 0x00	; 0
     820:	60 e0       	ldi	r22, 0x00	; 0
     822:	70 e0       	ldi	r23, 0x00	; 0
     824:	8d e3       	ldi	r24, 0x3D	; 61
     826:	91 e0       	ldi	r25, 0x01	; 1
     828:	68 c9       	rjmp	.-3376   	; 0xfffffafa <__eeprom_end+0xff7efaf0>

0000082a <exitPowerOff>:

void exitPowerOff(void)
{

	// Put all ports into HI-Z
	DDRB = 0x00;
     82a:	17 ba       	out	0x17, r1	; 23
	PORTB = 0x00;
     82c:	18 ba       	out	0x18, r1	; 24
	DDRC = 0x00;
     82e:	14 ba       	out	0x14, r1	; 20
	PORTC = 0x00;
     830:	15 ba       	out	0x15, r1	; 21
	DDRD = 0x00;
     832:	11 ba       	out	0x11, r1	; 17
	PORTD = 0x00;
     834:	12 ba       	out	0x12, r1	; 18
	
	// Disable all interrupts
	cli();
     836:	f8 94       	cli
	
	// Save parameters to EEPROM
	eeprom_update_block(&p,&nvParams,sizeof(nvParams));	
     838:	4a e0       	ldi	r20, 0x0A	; 10
     83a:	50 e0       	ldi	r21, 0x00	; 0
     83c:	60 e0       	ldi	r22, 0x00	; 0
     83e:	70 e0       	ldi	r23, 0x00	; 0
     840:	8d e3       	ldi	r24, 0x3D	; 61
     842:	91 e0       	ldi	r25, 0x01	; 1
     844:	6a d9       	rcall	.-3372   	; 0xfffffb1a <__eeprom_end+0xff7efb10>
     846:	ff cf       	rjmp	.-2      	; 0x846 <exitPowerOff+0x1c>

00000848 <decode_led_char>:
//---------------------------------------------//
// Decodes normal string literal to the
//	7-segment representation
//---------------------------------------------//
static uint8_t decode_led_char(char c)
{
     848:	20 e0       	ldi	r18, 0x00	; 0
     84a:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t i;
	encode_7seg_pair encode_pair;
	for (i = 0; i < sizeof(led_encode_table)/sizeof(encode_7seg_pair); i++  )
	{
		encode_pair.code = pgm_read_byte(&led_encode_table[i].code);
     84c:	a9 01       	movw	r20, r18
     84e:	44 0f       	add	r20, r20
     850:	55 1f       	adc	r21, r21
     852:	fa 01       	movw	r30, r20
     854:	ea 5d       	subi	r30, 0xDA	; 218
     856:	ff 4f       	sbci	r31, 0xFF	; 255
     858:	e4 91       	lpm	r30, Z
		if (encode_pair.code == c)
     85a:	e8 13       	cpse	r30, r24
     85c:	05 c0       	rjmp	.+10     	; 0x868 <decode_led_char+0x20>
		{
			i = pgm_read_byte(&led_encode_table[i].segdata);
     85e:	fa 01       	movw	r30, r20
     860:	e9 5d       	subi	r30, 0xD9	; 217
     862:	ff 4f       	sbci	r31, 0xFF	; 255
     864:	84 91       	lpm	r24, Z
     866:	08 95       	ret
     868:	2f 5f       	subi	r18, 0xFF	; 255
     86a:	3f 4f       	sbci	r19, 0xFF	; 255
//---------------------------------------------//
static uint8_t decode_led_char(char c)
{
	uint8_t i;
	encode_7seg_pair encode_pair;
	for (i = 0; i < sizeof(led_encode_table)/sizeof(encode_7seg_pair); i++  )
     86c:	2a 31       	cpi	r18, 0x1A	; 26
     86e:	31 05       	cpc	r19, r1
     870:	69 f7       	brne	.-38     	; 0x84c <decode_led_char+0x4>
			i = pgm_read_byte(&led_encode_table[i].segdata);
			return i;
		}		
	}			
	// No item was found - return default value
	return  (SEGA | SEGG );
     872:	81 e4       	ldi	r24, 0x41	; 65
}
     874:	08 95       	ret

00000876 <wrap_led_buffer_index>:
//---------------------------------------------//
// Ensures that index is inside the buffer
// -128 <= index <= 127
//---------------------------------------------//
static uint8_t wrap_led_buffer_index(int8_t buf_index)
{
     876:	28 2f       	mov	r18, r24
	uint8_t new_index_u;
	new_index_u = (uint8_t) ((buf_index < 0) ? -buf_index : buf_index);
     878:	87 fd       	sbrc	r24, 7
     87a:	81 95       	neg	r24
	if (new_index_u >= LED_BUFFER_LENGTH)
     87c:	8e 30       	cpi	r24, 0x0E	; 14
     87e:	18 f0       	brcs	.+6      	; 0x886 <wrap_led_buffer_index+0x10>
		new_index_u = new_index_u % LED_BUFFER_LENGTH;
     880:	6e e0       	ldi	r22, 0x0E	; 14
     882:	af d8       	rcall	.-3746   	; 0xfffff9e2 <__eeprom_end+0xff7ef9d8>
     884:	89 2f       	mov	r24, r25
	new_index_u = ((buf_index >= 0) || (new_index_u == 0)) ? new_index_u :  LED_BUFFER_LENGTH - new_index_u ;
     886:	27 ff       	sbrs	r18, 7
     888:	05 c0       	rjmp	.+10     	; 0x894 <wrap_led_buffer_index+0x1e>
     88a:	88 23       	and	r24, r24
     88c:	19 f0       	breq	.+6      	; 0x894 <wrap_led_buffer_index+0x1e>
     88e:	9e e0       	ldi	r25, 0x0E	; 14
     890:	98 1b       	sub	r25, r24
     892:	89 2f       	mov	r24, r25
	return new_index_u;
}
     894:	08 95       	ret

00000896 <processLedIndicator>:
// Call this function N times per sec to get N/NUM_DIGITS_TOTAL display update rate, where
// NUM_DIGITS_TOTAL is number_of_digits_of_LED_display if no extra LEDs are used or
// (number_of_digits_of_LED_display + 1) otherwise.
//---------------------------------------------//
void processLedIndicator()
{
     896:	cf 93       	push	r28
	disable_led_segments();
	#endif
	
	
	// Perform regular shift
	led_clock_pulse(!LED_DIGIT_ACT_LVL);
     898:	81 e0       	ldi	r24, 0x01	; 1
     89a:	13 d1       	rcall	.+550    	; 0xac2 <led_clock_pulse>
	
	switch (wActivePos)
     89c:	c0 91 e9 00 	lds	r28, 0x00E9
     8a0:	cc 23       	and	r28, r28
     8a2:	19 f0       	breq	.+6      	; 0x8aa <processLedIndicator+0x14>
     8a4:	c6 30       	cpi	r28, 0x06	; 6
     8a6:	d1 f5       	brne	.+116    	; 0x91c <processLedIndicator+0x86>
     8a8:	11 c0       	rjmp	.+34     	; 0x8cc <processLedIndicator+0x36>
	{
	case 0:
		// Get buttons
		#ifndef CLEAN_OPERATION
		disable_led_segments();
     8aa:	37 d1       	rcall	.+622    	; 0xb1a <disable_led_segments>
		#endif
		enable_led_segments_pullups();
     8ac:	28 d1       	rcall	.+592    	; 0xafe <enable_led_segments_pullups>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     8ae:	85 e3       	ldi	r24, 0x35	; 53
     8b0:	8a 95       	dec	r24
     8b2:	f1 f7       	brne	.-4      	; 0x8b0 <processLedIndicator+0x1a>
     8b4:	00 00       	nop
		_delay_us(PULLUP_DELAY_US);
		capture_button_state();
     8b6:	38 d1       	rcall	.+624    	; 0xb28 <capture_button_state>
		#ifndef CLEAN_OPERATION
		enable_led_segments();
     8b8:	29 d1       	rcall	.+594    	; 0xb0c <enable_led_segments>
		#endif
		// Start new cycle with active digit level
		led_clock_pulse(LED_DIGIT_ACT_LVL);
     8ba:	80 e0       	ldi	r24, 0x00	; 0
     8bc:	02 d1       	rcall	.+516    	; 0xac2 <led_clock_pulse>
		// Always start new cycle from specified buffer start position
		bufActivePos = wStartPos;
     8be:	80 91 5e 01 	lds	r24, 0x015E
     8c2:	80 93 e8 00 	sts	0x00E8, r24
		next_wActivePos = wActivePos + 1;
     8c6:	c0 91 e9 00 	lds	r28, 0x00E9
     8ca:	28 c0       	rjmp	.+80     	; 0x91c <processLedIndicator+0x86>
//---------------------------------------------//
// Performs window shifting
//---------------------------------------------//
static void processWindowShifter(void)
{
	if (shifterState == LED_SHIFT_DONE)
     8cc:	80 91 5f 01 	lds	r24, 0x015F
     8d0:	81 11       	cpse	r24, r1
     8d2:	01 c0       	rjmp	.+2      	; 0x8d6 <processLedIndicator+0x40>
     8d4:	1b c0       	rjmp	.+54     	; 0x90c <processLedIndicator+0x76>
		return;
	
	// Process shift timer
	processSoftTimer8b(&shiftTimer);	
     8d6:	8a ee       	ldi	r24, 0xEA	; 234
     8d8:	90 e0       	ldi	r25, 0x00	; 0
     8da:	77 d7       	rcall	.+3822   	; 0x17ca <processSoftTimer8b>
	
	if (shiftTimer.FTop)
     8dc:	80 91 ea 00 	lds	r24, 0x00EA
     8e0:	85 ff       	sbrs	r24, 5
     8e2:	14 c0       	rjmp	.+40     	; 0x90c <processLedIndicator+0x76>
	{
		// Check if finished
		if (wStartPos == bufStartPos)	
     8e4:	80 91 5e 01 	lds	r24, 0x015E
     8e8:	90 91 60 01 	lds	r25, 0x0160
     8ec:	89 13       	cpse	r24, r25
     8ee:	03 c0       	rjmp	.+6      	; 0x8f6 <processLedIndicator+0x60>
		{
			// Update state
			shifterState = LED_SHIFT_DONE;
     8f0:	10 92 5f 01 	sts	0x015F, r1
     8f4:	0b c0       	rjmp	.+22     	; 0x90c <processLedIndicator+0x76>
		}
		else if (shifterState == LED_SHIFT_RIGHT)
     8f6:	90 91 5f 01 	lds	r25, 0x015F
     8fa:	92 30       	cpi	r25, 0x02	; 2
     8fc:	49 f4       	brne	.+18     	; 0x910 <processLedIndicator+0x7a>
// Increments index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t inc_buffer_position(uint8_t position)
{
	return (position >= LED_BUFFER_LENGTH - 1) ? 0 : position + 1;
     8fe:	8d 30       	cpi	r24, 0x0D	; 13
     900:	10 f4       	brcc	.+4      	; 0x906 <processLedIndicator+0x70>
     902:	8f 5f       	subi	r24, 0xFF	; 255
     904:	01 c0       	rjmp	.+2      	; 0x908 <processLedIndicator+0x72>
     906:	80 e0       	ldi	r24, 0x00	; 0
			// Update state
			shifterState = LED_SHIFT_DONE;
		}
		else if (shifterState == LED_SHIFT_RIGHT)
		{
			wStartPos = inc_buffer_position(wStartPos);	
     908:	80 93 5e 01 	sts	0x015E, r24
		// Always start new cycle from specified buffer start position
		bufActivePos = wStartPos;
		next_wActivePos = wActivePos + 1;
		break;
	case NUM_DIGITS_TOTAL-1:
		next_wActivePos = 0;
     90c:	c0 e0       	ldi	r28, 0x00	; 0
     90e:	07 c0       	rjmp	.+14     	; 0x91e <processLedIndicator+0x88>
// Decrements index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t dec_buffer_position(uint8_t position)
{
	return (position == 0) ? LED_BUFFER_LENGTH - 1 : position - 1;
     910:	88 23       	and	r24, r24
     912:	11 f0       	breq	.+4      	; 0x918 <processLedIndicator+0x82>
     914:	81 50       	subi	r24, 0x01	; 1
     916:	f8 cf       	rjmp	.-16     	; 0x908 <processLedIndicator+0x72>
     918:	8d e0       	ldi	r24, 0x0D	; 13
     91a:	f6 cf       	rjmp	.-20     	; 0x908 <processLedIndicator+0x72>
		next_wActivePos = 0;
		// Shift LED window
		processWindowShifter();	
		break;
	default:
		next_wActivePos = wActivePos + 1;
     91c:	cf 5f       	subi	r28, 0xFF	; 255
		break;
	}		
	
	#ifdef 	USE_EXTRA_LED_DIGIT
	if (wActivePos == EXTRA_DIGIT_NUM)
     91e:	80 91 e9 00 	lds	r24, 0x00E9
     922:	86 30       	cpi	r24, 0x06	; 6
     924:	21 f4       	brne	.+8      	; 0x92e <processLedIndicator+0x98>
	{
		// Output separate LEDs state
		set_led_segments(extra_led_state);
     926:	80 91 5d 01 	lds	r24, 0x015D
     92a:	db d0       	rcall	.+438    	; 0xae2 <set_led_segments>
     92c:	10 c0       	rjmp	.+32     	; 0x94e <processLedIndicator+0xb8>
	}
	else
	#endif
	{
		// Output new segment data
		set_led_segments(led_data_buffer[bufActivePos]);
     92e:	e0 91 e8 00 	lds	r30, 0x00E8
     932:	f0 e0       	ldi	r31, 0x00	; 0
     934:	ef 59       	subi	r30, 0x9F	; 159
     936:	fe 4f       	sbci	r31, 0xFE	; 254
     938:	80 81       	ld	r24, Z
     93a:	d3 d0       	rcall	.+422    	; 0xae2 <set_led_segments>
		// Wrap around buffer length
		bufActivePos = inc_buffer_position(bufActivePos );
     93c:	80 91 e8 00 	lds	r24, 0x00E8
// Increments index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t inc_buffer_position(uint8_t position)
{
	return (position >= LED_BUFFER_LENGTH - 1) ? 0 : position + 1;
     940:	8d 30       	cpi	r24, 0x0D	; 13
     942:	10 f4       	brcc	.+4      	; 0x948 <processLedIndicator+0xb2>
     944:	8f 5f       	subi	r24, 0xFF	; 255
     946:	01 c0       	rjmp	.+2      	; 0x94a <processLedIndicator+0xb4>
     948:	80 e0       	ldi	r24, 0x00	; 0
	#endif
	{
		// Output new segment data
		set_led_segments(led_data_buffer[bufActivePos]);
		// Wrap around buffer length
		bufActivePos = inc_buffer_position(bufActivePos );
     94a:	80 93 e8 00 	sts	0x00E8, r24
	}
		
	wActivePos = next_wActivePos;
     94e:	c0 93 e9 00 	sts	0x00E9, r28
	
	#ifdef CLEAN_OPERATION
	enable_led_segments();
	#endif

}
     952:	cf 91       	pop	r28
     954:	08 95       	ret

00000956 <fillLedBuffer>:
//---------------------------------------------//
// Fills buffer from (bufStartPos + offset) 
//	position with single char
//---------------------------------------------//
void fillLedBuffer(int8_t offset, uint8_t length, char c)
{
     956:	0f 93       	push	r16
     958:	1f 93       	push	r17
     95a:	cf 93       	push	r28
     95c:	df 93       	push	r29
     95e:	1f 92       	push	r1
     960:	cd b7       	in	r28, 0x3d	; 61
     962:	de b7       	in	r29, 0x3e	; 62
     964:	18 2f       	mov	r17, r24
     966:	84 2f       	mov	r24, r20
	uint8_t val = decode_led_char(c);
     968:	69 83       	std	Y+1, r22	; 0x01
     96a:	6e df       	rcall	.-292    	; 0x848 <decode_led_char>
     96c:	08 2f       	mov	r16, r24
	// Ensure index is inside the buffer
	uint8_t position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
     96e:	80 91 60 01 	lds	r24, 0x0160
     972:	81 0f       	add	r24, r17
     974:	80 df       	rcall	.-256    	; 0x876 <wrap_led_buffer_index>
	while(length--)
     976:	69 81       	ldd	r22, Y+1	; 0x01
     978:	0a c0       	rjmp	.+20     	; 0x98e <fillLedBuffer+0x38>
	{
		led_data_buffer[position] = val;
     97a:	e8 2f       	mov	r30, r24
     97c:	f0 e0       	ldi	r31, 0x00	; 0
     97e:	ef 59       	subi	r30, 0x9F	; 159
     980:	fe 4f       	sbci	r31, 0xFE	; 254
     982:	00 83       	st	Z, r16
// Increments index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t inc_buffer_position(uint8_t position)
{
	return (position >= LED_BUFFER_LENGTH - 1) ? 0 : position + 1;
     984:	8d 30       	cpi	r24, 0x0D	; 13
     986:	10 f4       	brcc	.+4      	; 0x98c <fillLedBuffer+0x36>
     988:	8f 5f       	subi	r24, 0xFF	; 255
     98a:	01 c0       	rjmp	.+2      	; 0x98e <fillLedBuffer+0x38>
     98c:	80 e0       	ldi	r24, 0x00	; 0
void fillLedBuffer(int8_t offset, uint8_t length, char c)
{
	uint8_t val = decode_led_char(c);
	// Ensure index is inside the buffer
	uint8_t position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
	while(length--)
     98e:	61 50       	subi	r22, 0x01	; 1
     990:	a0 f7       	brcc	.-24     	; 0x97a <fillLedBuffer+0x24>
	{
		led_data_buffer[position] = val;
		position = inc_buffer_position(position);
	}
}
     992:	0f 90       	pop	r0
     994:	df 91       	pop	r29
     996:	cf 91       	pop	r28
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	08 95       	ret

0000099e <startShiftingWindowLeft>:
//	LED window left 
//---------------------------------------------//
void startShiftingWindowLeft(void)
{
	// Clear spaces between menu states
	fillLedBuffer(-2,2,' ');
     99e:	40 e2       	ldi	r20, 0x20	; 32
     9a0:	62 e0       	ldi	r22, 0x02	; 2
     9a2:	8e ef       	ldi	r24, 0xFE	; 254
     9a4:	d8 df       	rcall	.-80     	; 0x956 <fillLedBuffer>
	// Set new buffer position for writing
	bufStartPos = wrap_led_buffer_index( (int8_t)bufStartPos - (NUM_DIGITS + 2) );
     9a6:	80 91 60 01 	lds	r24, 0x0160
     9aa:	88 50       	subi	r24, 0x08	; 8
     9ac:	64 df       	rcall	.-312    	; 0x876 <wrap_led_buffer_index>
     9ae:	80 93 60 01 	sts	0x0160, r24
	// Set shifter state
	shifterState = LED_SHIFT_LEFT;
     9b2:	81 e0       	ldi	r24, 0x01	; 1
     9b4:	80 93 5f 01 	sts	0x015F, r24
     9b8:	08 95       	ret

000009ba <startShiftingWindowRight>:
//	LED window right 
//---------------------------------------------//
void startShiftingWindowRight(void)
{
	// Clear spaces between menu states
	fillLedBuffer(NUM_DIGITS,2,' ');
     9ba:	40 e2       	ldi	r20, 0x20	; 32
     9bc:	62 e0       	ldi	r22, 0x02	; 2
     9be:	86 e0       	ldi	r24, 0x06	; 6
     9c0:	ca df       	rcall	.-108    	; 0x956 <fillLedBuffer>
	// Set new buffer position for writing
	bufStartPos = wrap_led_buffer_index( (int8_t)bufStartPos + NUM_DIGITS + 2 );
     9c2:	80 91 60 01 	lds	r24, 0x0160
     9c6:	88 5f       	subi	r24, 0xF8	; 248
     9c8:	56 df       	rcall	.-340    	; 0x876 <wrap_led_buffer_index>
     9ca:	80 93 60 01 	sts	0x0160, r24
	// Set shifter state
	shifterState = LED_SHIFT_RIGHT;
     9ce:	82 e0       	ldi	r24, 0x02	; 2
     9d0:	80 93 5f 01 	sts	0x015F, r24
     9d4:	08 95       	ret

000009d6 <initLedIndicator>:
//---------------------------------------------//
//	Initialization
//	Call this function at start of your program
//---------------------------------------------//
void initLedIndicator()
{
     9d6:	cf 93       	push	r28
	uint8_t i;
	// First disable outputs
	disable_led_segments();
     9d8:	a0 d0       	rcall	.+320    	; 0xb1a <disable_led_segments>
     9da:	c7 e0       	ldi	r28, 0x07	; 7
	// Fill shift register with non-active levels
	for (i=0;i<NUM_DIGITS_TOTAL;i++)
	{
		led_clock_pulse(!LED_DIGIT_ACT_LVL);
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	71 d0       	rcall	.+226    	; 0xac2 <led_clock_pulse>
     9e0:	c1 50       	subi	r28, 0x01	; 1
{
	uint8_t i;
	// First disable outputs
	disable_led_segments();
	// Fill shift register with non-active levels
	for (i=0;i<NUM_DIGITS_TOTAL;i++)
     9e2:	e1 f7       	brne	.-8      	; 0x9dc <initLedIndicator+0x6>
	{
		led_clock_pulse(!LED_DIGIT_ACT_LVL);
	}
	// Now enable outputs
	enable_led_segments();
     9e4:	93 d0       	rcall	.+294    	; 0xb0c <enable_led_segments>
	
	// Reset pointers
	wStartPos = 0;
     9e6:	10 92 5e 01 	sts	0x015E, r1
	bufStartPos = 0;
     9ea:	10 92 60 01 	sts	0x0160, r1
	bufActivePos = 0;
     9ee:	10 92 e8 00 	sts	0x00E8, r1
	wActivePos = 0;
     9f2:	10 92 e9 00 	sts	0x00E9, r1
	#ifdef 	USE_EXTRA_LED_DIGIT
	extra_led_state = 0;
     9f6:	10 92 5d 01 	sts	0x015D, r1
	#endif
	
	// Clear the buffer 
	fillLedBuffer(0,LED_BUFFER_LENGTH,' ');
     9fa:	40 e2       	ldi	r20, 0x20	; 32
     9fc:	6e e0       	ldi	r22, 0x0E	; 14
     9fe:	80 e0       	ldi	r24, 0x00	; 0
     a00:	aa df       	rcall	.-172    	; 0x956 <fillLedBuffer>
	
	// Initialize shift timer - always enabled, but 
	//	processed only when shifting is active
	shifterState = LED_SHIFT_DONE;
     a02:	10 92 5f 01 	sts	0x015F, r1
	shiftTimer.Enabled = 1;
     a06:	80 91 ea 00 	lds	r24, 0x00EA
	shiftTimer.RunOnce = 0;
     a0a:	81 60       	ori	r24, 0x01	; 1
     a0c:	8d 7f       	andi	r24, 0xFD	; 253
     a0e:	80 93 ea 00 	sts	0x00EA, r24
	shiftTimer.Top = LED_SHIFT_INTERVAL-1;
     a12:	89 e0       	ldi	r24, 0x09	; 9
     a14:	80 93 ec 00 	sts	0x00EC, r24
}
     a18:	cf 91       	pop	r28
     a1a:	08 95       	ret

00000a1c <printLedBuffer>:
//		str - null-terminated char string
// Comma and dot (".", ",") get special processing - first occurrence is added to
// a preceding char, next are displayed as a single digit
//---------------------------------------------//
void printLedBuffer(int8_t offset, char* str)
{
     a1c:	ff 92       	push	r15
     a1e:	0f 93       	push	r16
     a20:	1f 93       	push	r17
     a22:	cf 93       	push	r28
     a24:	df 93       	push	r29
     a26:	eb 01       	movw	r28, r22
	char c;
	uint8_t decoded_sym;
	uint8_t state = 0x02;
	uint8_t comma_pos;
	// Ensure index is inside the buffer
	uint8_t buffer_position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
     a28:	90 91 60 01 	lds	r25, 0x0160
     a2c:	89 0f       	add	r24, r25
     a2e:	23 df       	rcall	.-442    	; 0x876 <wrap_led_buffer_index>
     a30:	18 2f       	mov	r17, r24
	comma_pos = buffer_position;
     a32:	f8 2e       	mov	r15, r24
//---------------------------------------------//
void printLedBuffer(int8_t offset, char* str)
{
	char c;
	uint8_t decoded_sym;
	uint8_t state = 0x02;
     a34:	02 e0       	ldi	r16, 0x02	; 2
	uint8_t comma_pos;
	// Ensure index is inside the buffer
	uint8_t buffer_position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
	comma_pos = buffer_position;
	// Output chars
	while((c = *str++))
     a36:	23 c0       	rjmp	.+70     	; 0xa7e <printLedBuffer+0x62>
	{
		decoded_sym = decode_led_char(c);
     a38:	07 df       	rcall	.-498    	; 0x848 <decode_led_char>
		state = (decoded_sym == SEGH) ? (state | 0x01) : (state & ~0x01);
     a3a:	80 38       	cpi	r24, 0x80	; 128
     a3c:	11 f4       	brne	.+4      	; 0xa42 <printLedBuffer+0x26>
     a3e:	01 60       	ori	r16, 0x01	; 1
     a40:	01 c0       	rjmp	.+2      	; 0xa44 <printLedBuffer+0x28>
     a42:	0e 7f       	andi	r16, 0xFE	; 254
		if (state == 0x01)			
     a44:	01 30       	cpi	r16, 0x01	; 1
     a46:	49 f4       	brne	.+18     	; 0xa5a <printLedBuffer+0x3e>
		{
			led_data_buffer[comma_pos] |= decoded_sym;
     a48:	ef 2d       	mov	r30, r15
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	ef 59       	subi	r30, 0x9F	; 159
     a4e:	fe 4f       	sbci	r31, 0xFE	; 254
     a50:	90 81       	ld	r25, Z
     a52:	98 2b       	or	r25, r24
     a54:	90 83       	st	Z, r25
     a56:	81 2f       	mov	r24, r17
     a58:	0b c0       	rjmp	.+22     	; 0xa70 <printLedBuffer+0x54>
		}
		else
		{
			led_data_buffer[buffer_position] = decoded_sym;	
     a5a:	e1 2f       	mov	r30, r17
     a5c:	f0 e0       	ldi	r31, 0x00	; 0
     a5e:	ef 59       	subi	r30, 0x9F	; 159
     a60:	fe 4f       	sbci	r31, 0xFE	; 254
     a62:	80 83       	st	Z, r24
// Increments index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t inc_buffer_position(uint8_t position)
{
	return (position >= LED_BUFFER_LENGTH - 1) ? 0 : position + 1;
     a64:	1d 30       	cpi	r17, 0x0D	; 13
     a66:	18 f4       	brcc	.+6      	; 0xa6e <printLedBuffer+0x52>
     a68:	81 2f       	mov	r24, r17
     a6a:	8f 5f       	subi	r24, 0xFF	; 255
     a6c:	01 c0       	rjmp	.+2      	; 0xa70 <printLedBuffer+0x54>
     a6e:	80 e0       	ldi	r24, 0x00	; 0
		comma_pos = buffer_position;
		if (state != 0x01)
		{
			buffer_position = inc_buffer_position(buffer_position);
		}
		state = (state & 0x01) ? 0x03 : 0x00;		
     a70:	00 ff       	sbrs	r16, 0
     a72:	02 c0       	rjmp	.+4      	; 0xa78 <printLedBuffer+0x5c>
     a74:	03 e0       	ldi	r16, 0x03	; 3
     a76:	01 c0       	rjmp	.+2      	; 0xa7a <printLedBuffer+0x5e>
     a78:	00 e0       	ldi	r16, 0x00	; 0
     a7a:	f1 2e       	mov	r15, r17
     a7c:	18 2f       	mov	r17, r24
	uint8_t comma_pos;
	// Ensure index is inside the buffer
	uint8_t buffer_position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
	comma_pos = buffer_position;
	// Output chars
	while((c = *str++))
     a7e:	89 91       	ld	r24, Y+
     a80:	81 11       	cpse	r24, r1
     a82:	da cf       	rjmp	.-76     	; 0xa38 <printLedBuffer+0x1c>
		{
			buffer_position = inc_buffer_position(buffer_position);
		}
		state = (state & 0x01) ? 0x03 : 0x00;		
	}
}
     a84:	df 91       	pop	r29
     a86:	cf 91       	pop	r28
     a88:	1f 91       	pop	r17
     a8a:	0f 91       	pop	r16
     a8c:	ff 90       	pop	r15
     a8e:	08 95       	ret

00000a90 <setComma>:
//	buffer cell
//---------------------------------------------//
void setComma(int8_t offset)
{
	// Ensure index is inside the buffer
	uint8_t position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
     a90:	90 91 60 01 	lds	r25, 0x0160
     a94:	89 0f       	add	r24, r25
     a96:	ef de       	rcall	.-546    	; 0x876 <wrap_led_buffer_index>
	led_data_buffer[position] |= (SEGH);
     a98:	e8 2f       	mov	r30, r24
     a9a:	f0 e0       	ldi	r31, 0x00	; 0
     a9c:	ef 59       	subi	r30, 0x9F	; 159
     a9e:	fe 4f       	sbci	r31, 0xFE	; 254
     aa0:	80 81       	ld	r24, Z
     aa2:	80 68       	ori	r24, 0x80	; 128
     aa4:	80 83       	st	Z, r24
     aa6:	08 95       	ret

00000aa8 <setExtraLeds>:
// Argument is ORed with current LED state
//---------------------------------------------//
inline void setExtraLeds(uint8_t leds_set_value)
{
		//asm("cli");
		extra_led_state |= leds_set_value;
     aa8:	90 91 5d 01 	lds	r25, 0x015D
     aac:	98 2b       	or	r25, r24
     aae:	90 93 5d 01 	sts	0x015D, r25
     ab2:	08 95       	ret

00000ab4 <clearExtraLeds>:
// Argument is AND NOTed with current LED state
//---------------------------------------------//
inline void clearExtraLeds(uint8_t leds_clear_value)
{
		//asm("cli");
		extra_led_state &= ~leds_clear_value;
     ab4:	90 91 5d 01 	lds	r25, 0x015D
     ab8:	80 95       	com	r24
     aba:	89 23       	and	r24, r25
     abc:	80 93 5d 01 	sts	0x015D, r24
     ac0:	08 95       	ret

00000ac2 <led_clock_pulse>:


// Clocks in bit into the shift register
void led_clock_pulse(uint8_t bit)
{
	if (bit)
     ac2:	88 23       	and	r24, r24
     ac4:	11 f0       	breq	.+4      	; 0xaca <led_clock_pulse+0x8>
		PORTB |= (1<<PB_LED_DOUT);
     ac6:	c0 9a       	sbi	0x18, 0	; 24
     ac8:	01 c0       	rjmp	.+2      	; 0xacc <led_clock_pulse+0xa>
	else
		PORTB &= ~(1<<PB_LED_DOUT);
     aca:	c0 98       	cbi	0x18, 0	; 24
     acc:	8a e1       	ldi	r24, 0x1A	; 26
     ace:	8a 95       	dec	r24
     ad0:	f1 f7       	brne	.-4      	; 0xace <led_clock_pulse+0xc>
     ad2:	00 c0       	rjmp	.+0      	; 0xad4 <led_clock_pulse+0x12>
	_delay_us(SETUP_DELAY_US);
	PORTB |= (1<<PB_LED_CLK);
     ad4:	c2 9a       	sbi	0x18, 2	; 24
     ad6:	8a e1       	ldi	r24, 0x1A	; 26
     ad8:	8a 95       	dec	r24
     ada:	f1 f7       	brne	.-4      	; 0xad8 <led_clock_pulse+0x16>
     adc:	00 c0       	rjmp	.+0      	; 0xade <led_clock_pulse+0x1c>
	_delay_us(SHIFT_DELAY_US);
	PORTB &= ~(1<<PB_LED_CLK);
     ade:	c2 98       	cbi	0x18, 2	; 24
     ae0:	08 95       	ret

00000ae2 <set_led_segments>:
// Outputs decoded segment data to port bits
void set_led_segments(uint8_t seg_ch)
{
	uint8_t pdat;
	seg_ch ^= LED_SEGMENT_MASK;
	pdat = PORTC & ~( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
     ae2:	25 b3       	in	r18, 0x15	; 21
	pdat |= (seg_ch & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
     ae4:	98 2f       	mov	r25, r24
     ae6:	9f 71       	andi	r25, 0x1F	; 31
// Outputs decoded segment data to port bits
void set_led_segments(uint8_t seg_ch)
{
	uint8_t pdat;
	seg_ch ^= LED_SEGMENT_MASK;
	pdat = PORTC & ~( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
     ae8:	20 7e       	andi	r18, 0xE0	; 224
	pdat |= (seg_ch & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
     aea:	92 2b       	or	r25, r18
	PORTC = pdat;
     aec:	95 bb       	out	0x15, r25	; 21
	seg_ch >>= 2;
	pdat = PORTB & ~( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     aee:	98 b3       	in	r25, 0x18	; 24
	uint8_t pdat;
	seg_ch ^= LED_SEGMENT_MASK;
	pdat = PORTC & ~( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
	pdat |= (seg_ch & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
	PORTC = pdat;
	seg_ch >>= 2;
     af0:	86 95       	lsr	r24
     af2:	86 95       	lsr	r24
	pdat = PORTB & ~( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
	pdat |= (seg_ch & ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) ));
     af4:	88 73       	andi	r24, 0x38	; 56
	seg_ch ^= LED_SEGMENT_MASK;
	pdat = PORTC & ~( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
	pdat |= (seg_ch & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
	PORTC = pdat;
	seg_ch >>= 2;
	pdat = PORTB & ~( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     af6:	97 7c       	andi	r25, 0xC7	; 199
	pdat |= (seg_ch & ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) ));
     af8:	89 2b       	or	r24, r25
	PORTB = pdat;
     afa:	88 bb       	out	0x18, r24	; 24
     afc:	08 95       	ret

00000afe <enable_led_segments_pullups>:

// Turns segment port bits to HI-Z and
// enables pull-ups
void enable_led_segments_pullups()
{
	PORTC |= ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
     afe:	85 b3       	in	r24, 0x15	; 21
     b00:	8f 61       	ori	r24, 0x1F	; 31
     b02:	85 bb       	out	0x15, r24	; 21
	PORTB |= ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     b04:	88 b3       	in	r24, 0x18	; 24
     b06:	88 63       	ori	r24, 0x38	; 56
     b08:	88 bb       	out	0x18, r24	; 24
     b0a:	08 95       	ret

00000b0c <enable_led_segments>:
}	

void enable_led_segments()
{
	DDRC |= ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
     b0c:	84 b3       	in	r24, 0x14	; 20
     b0e:	8f 61       	ori	r24, 0x1F	; 31
     b10:	84 bb       	out	0x14, r24	; 20
	DDRB |= ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     b12:	87 b3       	in	r24, 0x17	; 23
     b14:	88 63       	ori	r24, 0x38	; 56
     b16:	87 bb       	out	0x17, r24	; 23
     b18:	08 95       	ret

00000b1a <disable_led_segments>:
}

void disable_led_segments()
{
	DDRC &= ~( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
     b1a:	84 b3       	in	r24, 0x14	; 20
     b1c:	80 7e       	andi	r24, 0xE0	; 224
     b1e:	84 bb       	out	0x14, r24	; 20
	DDRB &= ~( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     b20:	87 b3       	in	r24, 0x17	; 23
     b22:	87 7c       	andi	r24, 0xC7	; 199
     b24:	87 bb       	out	0x17, r24	; 23
     b26:	08 95       	ret

00000b28 <capture_button_state>:


void capture_button_state()
{
	uint8_t pdat;
	pdat = PINB  & ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     b28:	86 b3       	in	r24, 0x16	; 22
     b2a:	88 73       	andi	r24, 0x38	; 56
	pdat <<= 2;
	pdat |= (PINC & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
     b2c:	93 b3       	in	r25, 0x13	; 19

void capture_button_state()
{
	uint8_t pdat;
	pdat = PINB  & ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
	pdat <<= 2;
     b2e:	88 0f       	add	r24, r24
     b30:	88 0f       	add	r24, r24
	pdat |= (PINC & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
     b32:	9f 71       	andi	r25, 0x1F	; 31
     b34:	89 2b       	or	r24, r25
	raw_button_state = pdat ^ RAW_BUTTONS_INVERSE_MASK;
     b36:	80 95       	com	r24
     b38:	80 93 6f 01 	sts	0x016F, r24
     b3c:	08 95       	ret

00000b3e <processItemFunction>:
//	Arguments:
//		funcAddr - address of the function to run.
//-----------------------------------------------------------------//
static inline void processItemFunction(FuncPtr funcAddr)
{
	if (funcAddr != 0)
     b3e:	00 97       	sbiw	r24, 0x00	; 0
     b40:	11 f0       	breq	.+4      	; 0xb46 <processItemFunction+0x8>
		((FuncPtr)funcAddr)();
     b42:	fc 01       	movw	r30, r24
     b44:	09 94       	ijmp
     b46:	08 95       	ret

00000b48 <mf_setTempLeave>:
		clearExtraLeds(LED_TEMP);
}

void mf_setTempLeave(void)
{
	userTimer.Enabled = 0;
     b48:	e6 ef       	ldi	r30, 0xF6	; 246
     b4a:	f0 e0       	ldi	r31, 0x00	; 0
     b4c:	80 81       	ld	r24, Z
     b4e:	8e 7f       	andi	r24, 0xFE	; 254
     b50:	80 83       	st	Z, r24
     b52:	08 95       	ret

00000b54 <mf_leafSelectAct>:
	userTimer.FA_GE = 1;	
}

void mf_leafSelectAct(void)
{
	userTimer.Timer = 0;
     b54:	10 92 f7 00 	sts	0x00F7, r1
	userTimer.Top = BLINK_PERIOD - 1;
     b58:	87 e0       	ldi	r24, 0x07	; 7
     b5a:	80 93 f8 00 	sts	0x00F8, r24
	userTimer.CompA = BLINK_PERIOD / 2;
     b5e:	84 e0       	ldi	r24, 0x04	; 4
     b60:	80 93 f9 00 	sts	0x00F9, r24
	userTimer.Enabled = 1;
     b64:	e6 ef       	ldi	r30, 0xF6	; 246
     b66:	f0 e0       	ldi	r31, 0x00	; 0
     b68:	80 81       	ld	r24, Z
     b6a:	81 60       	ori	r24, 0x01	; 1
     b6c:	80 83       	st	Z, r24
     b6e:	08 95       	ret

00000b70 <mf_leafExit>:
}

void mf_leafExit(void)
{
	userTimer.Enabled = 0;	
     b70:	e6 ef       	ldi	r30, 0xF6	; 246
     b72:	f0 e0       	ldi	r31, 0x00	; 0
     b74:	80 81       	ld	r24, Z
     b76:	8e 7f       	andi	r24, 0xFE	; 254
     b78:	80 83       	st	Z, r24
     b7a:	08 95       	ret

00000b7c <mf_actpoffLeave>:
	printLedBuffer(0,"   OFF");
}

void mf_actpoffLeave(void)
{
	autoPowerOffState = 0;	
     b7c:	10 92 de 00 	sts	0x00DE, r1
     b80:	08 95       	ret

00000b82 <mf_calibDoExit>:
	userTimer.Enabled = 1;
}

void mf_leafExit(void)
{
	userTimer.Enabled = 0;	
     b82:	e6 ef       	ldi	r30, 0xF6	; 246
     b84:	f0 e0       	ldi	r31, 0x00	; 0
     b86:	80 81       	ld	r24, Z
     b88:	8e 7f       	andi	r24, 0xFE	; 254
     b8a:	80 83       	st	Z, r24
}

void mf_calibDoExit(void)
{
	mf_leafExit();
	heaterState &= ~CALIBRATION_ACTIVE;
     b8c:	80 91 ff 00 	lds	r24, 0x00FF
     b90:	8d 7f       	andi	r24, 0xFD	; 253
     b92:	80 93 ff 00 	sts	0x00FF, r24
     b96:	08 95       	ret

00000b98 <mf_cdoneDo>:
	calculateCoeffs();
}

void mf_cdoneDo(void)
{
	printLedBuffer(0," DONE ");
     b98:	60 eb       	ldi	r22, 0xB0	; 176
     b9a:	70 e0       	ldi	r23, 0x00	; 0
     b9c:	80 e0       	ldi	r24, 0x00	; 0
     b9e:	3e cf       	rjmp	.-388    	; 0xa1c <printLedBuffer>

00000ba0 <mf_actpoffDo>:
}

// Indication of power off mode
void mf_actpoffDo(void)
{
	printLedBuffer(0,"   OFF");
     ba0:	67 eb       	ldi	r22, 0xB7	; 183
     ba2:	70 e0       	ldi	r23, 0x00	; 0
     ba4:	80 e0       	ldi	r24, 0x00	; 0
     ba6:	3a cf       	rjmp	.-396    	; 0xa1c <printLedBuffer>

00000ba8 <mf_cdone2Select>:
}

void mf_cdone2Select(void)
{
	// Save current ADC as calibrating point
	p.cpoint2_adc = adc_normalized;
     ba8:	80 91 39 01 	lds	r24, 0x0139
     bac:	90 91 3a 01 	lds	r25, 0x013A
     bb0:	90 93 46 01 	sts	0x0146, r25
     bb4:	80 93 45 01 	sts	0x0145, r24
	// Save current Celsius degree
	p.cpoint2 = cpoint2_copy;
     bb8:	80 91 fb 00 	lds	r24, 0x00FB
     bbc:	80 93 42 01 	sts	0x0142, r24
	// Calculate new coefficient for temperature conversion
	calculateCoeffs();
     bc0:	2b cb       	rjmp	.-2474   	; 0x218 <calculateCoeffs>

00000bc2 <mf_cdone1Select>:
//---------------------------------------------//

void mf_cdone1Select(void)
{
	// Save current ADC as calibrating point
	p.cpoint1_adc = adc_normalized;
     bc2:	80 91 39 01 	lds	r24, 0x0139
     bc6:	90 91 3a 01 	lds	r25, 0x013A
     bca:	90 93 44 01 	sts	0x0144, r25
     bce:	80 93 43 01 	sts	0x0143, r24
	// Save current Celsius degree
	p.cpoint1 = cpoint1_copy;
     bd2:	80 91 fa 00 	lds	r24, 0x00FA
     bd6:	80 93 41 01 	sts	0x0141, r24
	// Calculate new coefficient for temperature conversion
	calculateCoeffs();
     bda:	1e cb       	rjmp	.-2500   	; 0x218 <calculateCoeffs>

00000bdc <mf_autopoffDo>:

//---------------------------------------------//


void mf_autopoffDo(void)
{
     bdc:	cf 93       	push	r28
     bde:	df 93       	push	r29
     be0:	cd b7       	in	r28, 0x3d	; 61
     be2:	de b7       	in	r29, 0x3e	; 62
     be4:	27 97       	sbiw	r28, 0x07	; 7
     be6:	0f b6       	in	r0, 0x3f	; 63
     be8:	f8 94       	cli
     bea:	de bf       	out	0x3e, r29	; 62
     bec:	0f be       	out	0x3f, r0	; 63
     bee:	cd bf       	out	0x3d, r28	; 61
	char str[] = {'O','F','F',' ',' ',' ',0};
     bf0:	87 e0       	ldi	r24, 0x07	; 7
     bf2:	e6 e8       	ldi	r30, 0x86	; 134
     bf4:	f0 e0       	ldi	r31, 0x00	; 0
     bf6:	de 01       	movw	r26, r28
     bf8:	11 96       	adiw	r26, 0x01	; 1
     bfa:	01 90       	ld	r0, Z+
     bfc:	0d 92       	st	X+, r0
     bfe:	8a 95       	dec	r24
     c00:	e1 f7       	brne	.-8      	; 0xbfa <mf_autopoffDo+0x1e>
		
		
	if (button_state & (BD_UP | BR_UP))
     c02:	80 91 da 00 	lds	r24, 0x00DA
     c06:	90 91 db 00 	lds	r25, 0x00DB
     c0a:	9c 01       	movw	r18, r24
     c0c:	22 70       	andi	r18, 0x02	; 2
     c0e:	34 70       	andi	r19, 0x04	; 4
     c10:	23 2b       	or	r18, r19
     c12:	31 f0       	breq	.+12     	; 0xc20 <mf_autopoffDo+0x44>
	{
		if (p.power_off_timeout < MAX_POWEROFF_TIMEOUT)
     c14:	80 91 40 01 	lds	r24, 0x0140
     c18:	8f 35       	cpi	r24, 0x5F	; 95
     c1a:	68 f4       	brcc	.+26     	; 0xc36 <mf_autopoffDo+0x5a>
			p.power_off_timeout += 5;
     c1c:	8b 5f       	subi	r24, 0xFB	; 251
     c1e:	09 c0       	rjmp	.+18     	; 0xc32 <mf_autopoffDo+0x56>
		restartMenuTimer();
	}
	else if (button_state & (BD_DOWN | BR_DOWN))
     c20:	84 70       	andi	r24, 0x04	; 4
     c22:	98 70       	andi	r25, 0x08	; 8
     c24:	89 2b       	or	r24, r25
     c26:	49 f0       	breq	.+18     	; 0xc3a <mf_autopoffDo+0x5e>
	{
		if (p.power_off_timeout > MIN_POWEROFF_TIMEOUT)
     c28:	80 91 40 01 	lds	r24, 0x0140
     c2c:	86 30       	cpi	r24, 0x06	; 6
     c2e:	18 f0       	brcs	.+6      	; 0xc36 <mf_autopoffDo+0x5a>
			p.power_off_timeout -= 5;
     c30:	85 50       	subi	r24, 0x05	; 5
     c32:	80 93 40 01 	sts	0x0140, r24
//	 Restarts menu state timeout
//	Should be used in RUN function when control buttons are pressed.
//-----------------------------------------------------------------//
static void restartMenuTimer(void)
{
	menuTimer.Timer = 0;
     c36:	10 92 77 00 	sts	0x0077, r1
		if (p.power_off_timeout > MIN_POWEROFF_TIMEOUT)
			p.power_off_timeout -= 5;
		restartMenuTimer();
	}	
		
	if (userTimer.FA_GE)
     c3a:	80 91 f6 00 	lds	r24, 0x00F6
     c3e:	84 ff       	sbrs	r24, 4
     c40:	10 c0       	rjmp	.+32     	; 0xc62 <mf_autopoffDo+0x86>
	{
		if (p.power_off_timeout != MAX_POWEROFF_TIMEOUT)
     c42:	80 91 40 01 	lds	r24, 0x0140
     c46:	8f 35       	cpi	r24, 0x5F	; 95
     c48:	41 f0       	breq	.+16     	; 0xc5a <mf_autopoffDo+0x7e>
			u16toa_align_right(p.power_off_timeout,str + 4,0x80 | 2,' ');	
     c4a:	20 e2       	ldi	r18, 0x20	; 32
     c4c:	42 e8       	ldi	r20, 0x82	; 130
     c4e:	be 01       	movw	r22, r28
     c50:	6b 5f       	subi	r22, 0xFB	; 251
     c52:	7f 4f       	sbci	r23, 0xFF	; 255
     c54:	90 e0       	ldi	r25, 0x00	; 0
     c56:	ba d2       	rcall	.+1396   	; 0x11cc <u16toa_align_right>
     c58:	04 c0       	rjmp	.+8      	; 0xc62 <mf_autopoffDo+0x86>
		else 
		{
			str[4] = 'N';
     c5a:	8e e4       	ldi	r24, 0x4E	; 78
     c5c:	8d 83       	std	Y+5, r24	; 0x05
			str[5] = 'O';
     c5e:	8f e4       	ldi	r24, 0x4F	; 79
     c60:	8e 83       	std	Y+6, r24	; 0x06
		}			
	}		
		
	printLedBuffer(0,str);
     c62:	be 01       	movw	r22, r28
     c64:	6f 5f       	subi	r22, 0xFF	; 255
     c66:	7f 4f       	sbci	r23, 0xFF	; 255
     c68:	80 e0       	ldi	r24, 0x00	; 0
     c6a:	d8 de       	rcall	.-592    	; 0xa1c <printLedBuffer>
}
     c6c:	27 96       	adiw	r28, 0x07	; 7
     c6e:	0f b6       	in	r0, 0x3f	; 63
     c70:	f8 94       	cli
     c72:	de bf       	out	0x3e, r29	; 62
     c74:	0f be       	out	0x3f, r0	; 63
     c76:	cd bf       	out	0x3d, r28	; 61
     c78:	df 91       	pop	r29
     c7a:	cf 91       	pop	r28
     c7c:	08 95       	ret

00000c7e <mf_realTempDo>:
{
	setExtraLeds(LED_TEMP);
}

void mf_realTempDo(void)
{
     c7e:	cf 93       	push	r28
     c80:	df 93       	push	r29
     c82:	cd b7       	in	r28, 0x3d	; 61
     c84:	de b7       	in	r29, 0x3e	; 62
     c86:	27 97       	sbiw	r28, 0x07	; 7
     c88:	0f b6       	in	r0, 0x3f	; 63
     c8a:	f8 94       	cli
     c8c:	de bf       	out	0x3e, r29	; 62
     c8e:	0f be       	out	0x3f, r0	; 63
     c90:	cd bf       	out	0x3d, r28	; 61
	char str[] = {' ',' ',' ',' ',0xB0,'C',0};
     c92:	87 e0       	ldi	r24, 0x07	; 7
     c94:	ed e8       	ldi	r30, 0x8D	; 141
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	de 01       	movw	r26, r28
     c9a:	11 96       	adiw	r26, 0x01	; 1
     c9c:	01 90       	ld	r0, Z+
     c9e:	0d 92       	st	X+, r0
     ca0:	8a 95       	dec	r24
     ca2:	e1 f7       	brne	.-8      	; 0xc9c <mf_realTempDo+0x1e>
	// Output ADC result to LED
	u16toa_align_right(adc_celsius,str,0x80 | 4,' ');
     ca4:	20 e2       	ldi	r18, 0x20	; 32
     ca6:	44 e8       	ldi	r20, 0x84	; 132
     ca8:	be 01       	movw	r22, r28
     caa:	6f 5f       	subi	r22, 0xFF	; 255
     cac:	7f 4f       	sbci	r23, 0xFF	; 255
     cae:	80 91 3b 01 	lds	r24, 0x013B
     cb2:	90 91 3c 01 	lds	r25, 0x013C
     cb6:	8a d2       	rcall	.+1300   	; 0x11cc <u16toa_align_right>
	printLedBuffer(0,str);
     cb8:	be 01       	movw	r22, r28
     cba:	6f 5f       	subi	r22, 0xFF	; 255
     cbc:	7f 4f       	sbci	r23, 0xFF	; 255
     cbe:	80 e0       	ldi	r24, 0x00	; 0
     cc0:	ad de       	rcall	.-678    	; 0xa1c <printLedBuffer>
}
     cc2:	27 96       	adiw	r28, 0x07	; 7
     cc4:	0f b6       	in	r0, 0x3f	; 63
     cc6:	f8 94       	cli
     cc8:	de bf       	out	0x3e, r29	; 62
     cca:	0f be       	out	0x3f, r0	; 63
     ccc:	cd bf       	out	0x3d, r28	; 61
     cce:	df 91       	pop	r29
     cd0:	cf 91       	pop	r28
     cd2:	08 95       	ret

00000cd4 <mf_calib2Do>:
}

//---------------------------------------------//

void mf_calib2Do(void)
{
     cd4:	cf 93       	push	r28
     cd6:	df 93       	push	r29
     cd8:	cd b7       	in	r28, 0x3d	; 61
     cda:	de b7       	in	r29, 0x3e	; 62
     cdc:	27 97       	sbiw	r28, 0x07	; 7
     cde:	0f b6       	in	r0, 0x3f	; 63
     ce0:	f8 94       	cli
     ce2:	de bf       	out	0x3e, r29	; 62
     ce4:	0f be       	out	0x3f, r0	; 63
     ce6:	cd bf       	out	0x3d, r28	; 61
	char str[] = {'P','2',' ',' ',' ',' ',0};
     ce8:	87 e0       	ldi	r24, 0x07	; 7
     cea:	e4 e9       	ldi	r30, 0x94	; 148
     cec:	f0 e0       	ldi	r31, 0x00	; 0
     cee:	de 01       	movw	r26, r28
     cf0:	11 96       	adiw	r26, 0x01	; 1
     cf2:	01 90       	ld	r0, Z+
     cf4:	0d 92       	st	X+, r0
     cf6:	8a 95       	dec	r24
     cf8:	e1 f7       	brne	.-8      	; 0xcf2 <mf_calib2Do+0x1e>
	
	
	if (button_state & (BD_UP | BR_UP))
     cfa:	80 91 da 00 	lds	r24, 0x00DA
     cfe:	90 91 db 00 	lds	r25, 0x00DB
     d02:	9c 01       	movw	r18, r24
     d04:	22 70       	andi	r18, 0x02	; 2
     d06:	34 70       	andi	r19, 0x04	; 4
     d08:	23 2b       	or	r18, r19
     d0a:	31 f0       	breq	.+12     	; 0xd18 <mf_calib2Do+0x44>
	{
		if (cpoint2_copy < MAX_CALIB_TEMP)
     d0c:	80 91 fb 00 	lds	r24, 0x00FB
     d10:	8a 3f       	cpi	r24, 0xFA	; 250
     d12:	68 f4       	brcc	.+26     	; 0xd2e <mf_calib2Do+0x5a>
		cpoint2_copy += 1;
     d14:	8f 5f       	subi	r24, 0xFF	; 255
     d16:	09 c0       	rjmp	.+18     	; 0xd2a <mf_calib2Do+0x56>
	}
	else if (button_state & (BD_DOWN | BR_DOWN))
     d18:	84 70       	andi	r24, 0x04	; 4
     d1a:	98 70       	andi	r25, 0x08	; 8
     d1c:	89 2b       	or	r24, r25
     d1e:	39 f0       	breq	.+14     	; 0xd2e <mf_calib2Do+0x5a>
	{
		if (cpoint2_copy > MIN_CALIB_TEMP)
     d20:	80 91 fb 00 	lds	r24, 0x00FB
     d24:	8b 30       	cpi	r24, 0x0B	; 11
     d26:	18 f0       	brcs	.+6      	; 0xd2e <mf_calib2Do+0x5a>
		cpoint2_copy -= 1;
     d28:	81 50       	subi	r24, 0x01	; 1
     d2a:	80 93 fb 00 	sts	0x00FB, r24
	}
	
	if (userTimer.FA_GE)
     d2e:	80 91 f6 00 	lds	r24, 0x00F6
     d32:	84 ff       	sbrs	r24, 4
     d34:	0f c0       	rjmp	.+30     	; 0xd54 <mf_calib2Do+0x80>
	{
		u16toa_align_right(cpoint2_copy,str + 3,0x80 | 3,' ');
     d36:	20 e2       	ldi	r18, 0x20	; 32
     d38:	43 e8       	ldi	r20, 0x83	; 131
     d3a:	be 01       	movw	r22, r28
     d3c:	6c 5f       	subi	r22, 0xFC	; 252
     d3e:	7f 4f       	sbci	r23, 0xFF	; 255
     d40:	80 91 fb 00 	lds	r24, 0x00FB
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	42 d2       	rcall	.+1156   	; 0x11cc <u16toa_align_right>
		resetAutoPowerOffCounter();
     d48:	c6 d5       	rcall	.+2956   	; 0x18d6 <resetAutoPowerOffCounter>
		heaterState |= CALIBRATION_ACTIVE;
     d4a:	80 91 ff 00 	lds	r24, 0x00FF
     d4e:	82 60       	ori	r24, 0x02	; 2
     d50:	80 93 ff 00 	sts	0x00FF, r24
	}
	
	printLedBuffer(0,str);
     d54:	be 01       	movw	r22, r28
     d56:	6f 5f       	subi	r22, 0xFF	; 255
     d58:	7f 4f       	sbci	r23, 0xFF	; 255
     d5a:	80 e0       	ldi	r24, 0x00	; 0
     d5c:	5f de       	rcall	.-834    	; 0xa1c <printLedBuffer>
	
}
     d5e:	27 96       	adiw	r28, 0x07	; 7
     d60:	0f b6       	in	r0, 0x3f	; 63
     d62:	f8 94       	cli
     d64:	de bf       	out	0x3e, r29	; 62
     d66:	0f be       	out	0x3f, r0	; 63
     d68:	cd bf       	out	0x3d, r28	; 61
     d6a:	df 91       	pop	r29
     d6c:	cf 91       	pop	r28
     d6e:	08 95       	ret

00000d70 <mf_calib1Do>:
	cpoint1_copy = p.cpoint1;
	cpoint2_copy = p.cpoint2;
}

void mf_calib1Do(void)
{
     d70:	cf 93       	push	r28
     d72:	df 93       	push	r29
     d74:	cd b7       	in	r28, 0x3d	; 61
     d76:	de b7       	in	r29, 0x3e	; 62
     d78:	27 97       	sbiw	r28, 0x07	; 7
     d7a:	0f b6       	in	r0, 0x3f	; 63
     d7c:	f8 94       	cli
     d7e:	de bf       	out	0x3e, r29	; 62
     d80:	0f be       	out	0x3f, r0	; 63
     d82:	cd bf       	out	0x3d, r28	; 61
	char str[] = {'P','1',' ',' ',' ',' ',0};
     d84:	87 e0       	ldi	r24, 0x07	; 7
     d86:	eb e9       	ldi	r30, 0x9B	; 155
     d88:	f0 e0       	ldi	r31, 0x00	; 0
     d8a:	de 01       	movw	r26, r28
     d8c:	11 96       	adiw	r26, 0x01	; 1
     d8e:	01 90       	ld	r0, Z+
     d90:	0d 92       	st	X+, r0
     d92:	8a 95       	dec	r24
     d94:	e1 f7       	brne	.-8      	; 0xd8e <mf_calib1Do+0x1e>
	
	
	if (button_state & (BD_UP | BR_UP))
     d96:	80 91 da 00 	lds	r24, 0x00DA
     d9a:	90 91 db 00 	lds	r25, 0x00DB
     d9e:	9c 01       	movw	r18, r24
     da0:	22 70       	andi	r18, 0x02	; 2
     da2:	34 70       	andi	r19, 0x04	; 4
     da4:	23 2b       	or	r18, r19
     da6:	31 f0       	breq	.+12     	; 0xdb4 <mf_calib1Do+0x44>
	{
		if (cpoint1_copy < MAX_CALIB_TEMP)
     da8:	80 91 fa 00 	lds	r24, 0x00FA
     dac:	8a 3f       	cpi	r24, 0xFA	; 250
     dae:	68 f4       	brcc	.+26     	; 0xdca <mf_calib1Do+0x5a>
			cpoint1_copy += 1;
     db0:	8f 5f       	subi	r24, 0xFF	; 255
     db2:	09 c0       	rjmp	.+18     	; 0xdc6 <mf_calib1Do+0x56>
	}
	else if (button_state & (BD_DOWN | BR_DOWN))
     db4:	84 70       	andi	r24, 0x04	; 4
     db6:	98 70       	andi	r25, 0x08	; 8
     db8:	89 2b       	or	r24, r25
     dba:	39 f0       	breq	.+14     	; 0xdca <mf_calib1Do+0x5a>
	{
		if (cpoint1_copy > MIN_CALIB_TEMP)
     dbc:	80 91 fa 00 	lds	r24, 0x00FA
     dc0:	8b 30       	cpi	r24, 0x0B	; 11
     dc2:	18 f0       	brcs	.+6      	; 0xdca <mf_calib1Do+0x5a>
			cpoint1_copy -= 1;
     dc4:	81 50       	subi	r24, 0x01	; 1
     dc6:	80 93 fa 00 	sts	0x00FA, r24
	}
	
	if (userTimer.FA_GE)
     dca:	80 91 f6 00 	lds	r24, 0x00F6
     dce:	84 ff       	sbrs	r24, 4
     dd0:	0f c0       	rjmp	.+30     	; 0xdf0 <mf_calib1Do+0x80>
	{
		u16toa_align_right(cpoint1_copy,str + 3,0x80 | 3,' ');
     dd2:	20 e2       	ldi	r18, 0x20	; 32
     dd4:	43 e8       	ldi	r20, 0x83	; 131
     dd6:	be 01       	movw	r22, r28
     dd8:	6c 5f       	subi	r22, 0xFC	; 252
     dda:	7f 4f       	sbci	r23, 0xFF	; 255
     ddc:	80 91 fa 00 	lds	r24, 0x00FA
     de0:	90 e0       	ldi	r25, 0x00	; 0
     de2:	f4 d1       	rcall	.+1000   	; 0x11cc <u16toa_align_right>
		resetAutoPowerOffCounter();
     de4:	78 d5       	rcall	.+2800   	; 0x18d6 <resetAutoPowerOffCounter>
		heaterState |= CALIBRATION_ACTIVE;
     de6:	80 91 ff 00 	lds	r24, 0x00FF
     dea:	82 60       	ori	r24, 0x02	; 2
     dec:	80 93 ff 00 	sts	0x00FF, r24
	}
	
	printLedBuffer(0,str);
     df0:	be 01       	movw	r22, r28
     df2:	6f 5f       	subi	r22, 0xFF	; 255
     df4:	7f 4f       	sbci	r23, 0xFF	; 255
     df6:	80 e0       	ldi	r24, 0x00	; 0
     df8:	11 de       	rcall	.-990    	; 0xa1c <printLedBuffer>
	
}
     dfa:	27 96       	adiw	r28, 0x07	; 7
     dfc:	0f b6       	in	r0, 0x3f	; 63
     dfe:	f8 94       	cli
     e00:	de bf       	out	0x3e, r29	; 62
     e02:	0f be       	out	0x3f, r0	; 63
     e04:	cd bf       	out	0x3d, r28	; 61
     e06:	df 91       	pop	r29
     e08:	cf 91       	pop	r28
     e0a:	08 95       	ret

00000e0c <mf_actpoffSelect>:



void mf_actpoffSelect(void)
{
	clearExtraLeds(LED_TEMP | LED_ROLL);
     e0c:	83 e0       	ldi	r24, 0x03	; 3
     e0e:	52 de       	rcall	.-860    	; 0xab4 <clearExtraLeds>
	autoPowerOffState = AUTO_POFF_ACTIVE;
     e10:	81 e0       	ldi	r24, 0x01	; 1
     e12:	80 93 de 00 	sts	0x00DE, r24
     e16:	08 95       	ret

00000e18 <mf_leafSelect>:

// Select and exit functions, common for leaf menu items 

void mf_leafSelect(void)
{
	clearExtraLeds(LED_TEMP | LED_ROLL);
     e18:	83 e0       	ldi	r24, 0x03	; 3
     e1a:	4c de       	rcall	.-872    	; 0xab4 <clearExtraLeds>
	userTimer.FA_GE = 1;	
     e1c:	e6 ef       	ldi	r30, 0xF6	; 246
     e1e:	f0 e0       	ldi	r31, 0x00	; 0
     e20:	80 81       	ld	r24, Z
     e22:	80 61       	ori	r24, 0x10	; 16
     e24:	80 83       	st	Z, r24
     e26:	08 95       	ret

00000e28 <mf_calibSelect>:

//---------------------------------------------//

void mf_calibSelect(void)
{
	mf_leafSelect();
     e28:	f7 df       	rcall	.-18     	; 0xe18 <mf_leafSelect>
	cpoint1_copy = p.cpoint1;
     e2a:	80 91 41 01 	lds	r24, 0x0141
     e2e:	80 93 fa 00 	sts	0x00FA, r24
	cpoint2_copy = p.cpoint2;
     e32:	80 91 42 01 	lds	r24, 0x0142
     e36:	80 93 fb 00 	sts	0x00FB, r24
     e3a:	08 95       	ret

00000e3c <mf_rollLeave>:
	printLedBuffer(0,str);
}

void mf_rollLeave(void)
{
	clearExtraLeds(LED_ROLL);
     e3c:	82 e0       	ldi	r24, 0x02	; 2
     e3e:	3a de       	rcall	.-908    	; 0xab4 <clearExtraLeds>
	userTimer.Enabled = 0;
     e40:	e6 ef       	ldi	r30, 0xF6	; 246
     e42:	f0 e0       	ldi	r31, 0x00	; 0
     e44:	80 81       	ld	r24, Z
     e46:	8e 7f       	andi	r24, 0xFE	; 254
     e48:	80 83       	st	Z, r24
     e4a:	08 95       	ret

00000e4c <mf_setTempSelect>:
//---------------------------------------------//


void mf_setTempSelect(void)
{
	clearExtraLeds(LED_TEMP);
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	32 de       	rcall	.-924    	; 0xab4 <clearExtraLeds>
	mf_leafSelectAct();		// setup and start timer
     e50:	81 ce       	rjmp	.-766    	; 0xb54 <mf_leafSelectAct>

00000e52 <mf_realTempLeave>:
	printLedBuffer(0,str);
}

void mf_realTempLeave(void)
{
	clearExtraLeds(LED_TEMP);
     e52:	81 e0       	ldi	r24, 0x01	; 1
     e54:	2f ce       	rjmp	.-930    	; 0xab4 <clearExtraLeds>

00000e56 <mf_sndenDo>:

//---------------------------------------------//


void mf_sndenDo(void)
{
     e56:	cf 93       	push	r28
     e58:	df 93       	push	r29
     e5a:	cd b7       	in	r28, 0x3d	; 61
     e5c:	de b7       	in	r29, 0x3e	; 62
     e5e:	27 97       	sbiw	r28, 0x07	; 7
     e60:	0f b6       	in	r0, 0x3f	; 63
     e62:	f8 94       	cli
     e64:	de bf       	out	0x3e, r29	; 62
     e66:	0f be       	out	0x3f, r0	; 63
     e68:	cd bf       	out	0x3d, r28	; 61
	char str[] = {'S','N','D',' ',' ',' ',0};
     e6a:	87 e0       	ldi	r24, 0x07	; 7
     e6c:	e2 ea       	ldi	r30, 0xA2	; 162
     e6e:	f0 e0       	ldi	r31, 0x00	; 0
     e70:	de 01       	movw	r26, r28
     e72:	11 96       	adiw	r26, 0x01	; 1
     e74:	01 90       	ld	r0, Z+
     e76:	0d 92       	st	X+, r0
     e78:	8a 95       	dec	r24
     e7a:	e1 f7       	brne	.-8      	; 0xe74 <mf_sndenDo+0x1e>
		
	if (button_state & (BD_UP | BD_DOWN))
     e7c:	80 91 da 00 	lds	r24, 0x00DA
     e80:	90 91 db 00 	lds	r25, 0x00DB
     e84:	86 70       	andi	r24, 0x06	; 6
     e86:	99 27       	eor	r25, r25
     e88:	89 2b       	or	r24, r25
     e8a:	49 f0       	breq	.+18     	; 0xe9e <mf_sndenDo+0x48>
	{
		p.sound_enable = !p.sound_enable;
     e8c:	81 e0       	ldi	r24, 0x01	; 1
     e8e:	90 91 3f 01 	lds	r25, 0x013F
     e92:	91 11       	cpse	r25, r1
     e94:	80 e0       	ldi	r24, 0x00	; 0
     e96:	80 93 3f 01 	sts	0x013F, r24
//	 Restarts menu state timeout
//	Should be used in RUN function when control buttons are pressed.
//-----------------------------------------------------------------//
static void restartMenuTimer(void)
{
	menuTimer.Timer = 0;
     e9a:	10 92 77 00 	sts	0x0077, r1
	{
		p.sound_enable = !p.sound_enable;
		restartMenuTimer();
	}			
		
	if (userTimer.FA_GE)
     e9e:	80 91 f6 00 	lds	r24, 0x00F6
     ea2:	84 ff       	sbrs	r24, 4
     ea4:	0d c0       	rjmp	.+26     	; 0xec0 <mf_sndenDo+0x6a>
	{
		if (p.sound_enable)		
     ea6:	80 91 3f 01 	lds	r24, 0x013F
     eaa:	88 23       	and	r24, r24
     eac:	21 f0       	breq	.+8      	; 0xeb6 <mf_sndenDo+0x60>
		{
			str[4] = 'O';
     eae:	8f e4       	ldi	r24, 0x4F	; 79
     eb0:	8d 83       	std	Y+5, r24	; 0x05
			str[5] = 'N';
     eb2:	8e e4       	ldi	r24, 0x4E	; 78
     eb4:	04 c0       	rjmp	.+8      	; 0xebe <mf_sndenDo+0x68>
		}
		else
		{
			str[3] = 'O';
     eb6:	8f e4       	ldi	r24, 0x4F	; 79
     eb8:	8c 83       	std	Y+4, r24	; 0x04
			str[4] = 'F';
     eba:	86 e4       	ldi	r24, 0x46	; 70
     ebc:	8d 83       	std	Y+5, r24	; 0x05
			str[5] = 'F';
     ebe:	8e 83       	std	Y+6, r24	; 0x06
		}			
	}
		
	printLedBuffer(0,str);
     ec0:	be 01       	movw	r22, r28
     ec2:	6f 5f       	subi	r22, 0xFF	; 255
     ec4:	7f 4f       	sbci	r23, 0xFF	; 255
     ec6:	80 e0       	ldi	r24, 0x00	; 0
     ec8:	a9 dd       	rcall	.-1198   	; 0xa1c <printLedBuffer>
	setComma(2);
     eca:	82 e0       	ldi	r24, 0x02	; 2
     ecc:	e1 dd       	rcall	.-1086   	; 0xa90 <setComma>
}
     ece:	27 96       	adiw	r28, 0x07	; 7
     ed0:	0f b6       	in	r0, 0x3f	; 63
     ed2:	f8 94       	cli
     ed4:	de bf       	out	0x3e, r29	; 62
     ed6:	0f be       	out	0x3f, r0	; 63
     ed8:	cd bf       	out	0x3d, r28	; 61
     eda:	df 91       	pop	r29
     edc:	cf 91       	pop	r28
     ede:	08 95       	ret

00000ee0 <mf_rollDo>:
	setExtraLeds(LED_ROLL);
	mf_leafSelectAct();		// setup and start timer
}

void mf_rollDo(void)
{
     ee0:	cf 93       	push	r28
     ee2:	df 93       	push	r29
     ee4:	cd b7       	in	r28, 0x3d	; 61
     ee6:	de b7       	in	r29, 0x3e	; 62
     ee8:	27 97       	sbiw	r28, 0x07	; 7
     eea:	0f b6       	in	r0, 0x3f	; 63
     eec:	f8 94       	cli
     eee:	de bf       	out	0x3e, r29	; 62
     ef0:	0f be       	out	0x3f, r0	; 63
     ef2:	cd bf       	out	0x3d, r28	; 61
	char str[] = {' ',' ',' ',' ',' ',' ',0};
     ef4:	87 e0       	ldi	r24, 0x07	; 7
     ef6:	e9 ea       	ldi	r30, 0xA9	; 169
     ef8:	f0 e0       	ldi	r31, 0x00	; 0
     efa:	de 01       	movw	r26, r28
     efc:	11 96       	adiw	r26, 0x01	; 1
     efe:	01 90       	ld	r0, Z+
     f00:	0d 92       	st	X+, r0
     f02:	8a 95       	dec	r24
     f04:	e1 f7       	brne	.-8      	; 0xefe <mf_rollDo+0x1e>
		
	if (button_state & (BD_UP | BR_UP))
     f06:	80 91 da 00 	lds	r24, 0x00DA
     f0a:	90 91 db 00 	lds	r25, 0x00DB
     f0e:	9c 01       	movw	r18, r24
     f10:	22 70       	andi	r18, 0x02	; 2
     f12:	34 70       	andi	r19, 0x04	; 4
     f14:	23 2b       	or	r18, r19
     f16:	31 f0       	breq	.+12     	; 0xf24 <mf_rollDo+0x44>
	{
		if (p.rollCycleSet < MAX_ROLL_CYCLES)
     f18:	80 91 3e 01 	lds	r24, 0x013E
     f1c:	83 36       	cpi	r24, 0x63	; 99
     f1e:	68 f4       	brcc	.+26     	; 0xf3a <mf_rollDo+0x5a>
			p.rollCycleSet += 1;
     f20:	8f 5f       	subi	r24, 0xFF	; 255
     f22:	09 c0       	rjmp	.+18     	; 0xf36 <mf_rollDo+0x56>
	}
	else if (button_state & (BD_DOWN | BR_DOWN))
     f24:	84 70       	andi	r24, 0x04	; 4
     f26:	98 70       	andi	r25, 0x08	; 8
     f28:	89 2b       	or	r24, r25
     f2a:	39 f0       	breq	.+14     	; 0xf3a <mf_rollDo+0x5a>
	{
		if (p.rollCycleSet > MIN_ROLL_CYCLES)
     f2c:	80 91 3e 01 	lds	r24, 0x013E
     f30:	82 30       	cpi	r24, 0x02	; 2
     f32:	18 f0       	brcs	.+6      	; 0xf3a <mf_rollDo+0x5a>
			p.rollCycleSet -= 1;
     f34:	81 50       	subi	r24, 0x01	; 1
     f36:	80 93 3e 01 	sts	0x013E, r24
	}	
		
	u16toa_align_right(p.rollCycleSet,str + 4,0x80 | 2,' ');
     f3a:	20 e2       	ldi	r18, 0x20	; 32
     f3c:	42 e8       	ldi	r20, 0x82	; 130
     f3e:	be 01       	movw	r22, r28
     f40:	6b 5f       	subi	r22, 0xFB	; 251
     f42:	7f 4f       	sbci	r23, 0xFF	; 255
     f44:	80 91 3e 01 	lds	r24, 0x013E
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	40 d1       	rcall	.+640    	; 0x11cc <u16toa_align_right>
	
	if ((!(rollState & ROLL_CYCLE)) || (userTimer.FA_GE))
     f4c:	80 91 fd 00 	lds	r24, 0x00FD
     f50:	82 ff       	sbrs	r24, 2
     f52:	04 c0       	rjmp	.+8      	; 0xf5c <mf_rollDo+0x7c>
     f54:	80 91 f6 00 	lds	r24, 0x00F6
     f58:	84 ff       	sbrs	r24, 4
     f5a:	09 c0       	rjmp	.+18     	; 0xf6e <mf_rollDo+0x8e>
	{
		u16toa_align_right(activeRollCycle,str + 1,0x80 | 2,' ');
     f5c:	20 e2       	ldi	r18, 0x20	; 32
     f5e:	42 e8       	ldi	r20, 0x82	; 130
     f60:	be 01       	movw	r22, r28
     f62:	6e 5f       	subi	r22, 0xFE	; 254
     f64:	7f 4f       	sbci	r23, 0xFF	; 255
     f66:	80 91 fc 00 	lds	r24, 0x00FC
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	2f d1       	rcall	.+606    	; 0x11cc <u16toa_align_right>
	}
	
	str[0] = 0;
     f6e:	19 82       	std	Y+1, r1	; 0x01
	if (isTopPointValid())
     f70:	e4 d2       	rcall	.+1480   	; 0x153a <isTopPointValid>
     f72:	88 23       	and	r24, r24
     f74:	19 f0       	breq	.+6      	; 0xf7c <mf_rollDo+0x9c>
		str[0] |= SEGA;
     f76:	89 81       	ldd	r24, Y+1	; 0x01
     f78:	81 60       	ori	r24, 0x01	; 1
     f7a:	89 83       	std	Y+1, r24	; 0x01
	if (isBottomPointValid())
     f7c:	ee d2       	rcall	.+1500   	; 0x155a <isBottomPointValid>
     f7e:	88 23       	and	r24, r24
     f80:	19 f0       	breq	.+6      	; 0xf88 <mf_rollDo+0xa8>
		str[0] |= SEGD;
     f82:	89 81       	ldd	r24, Y+1	; 0x01
     f84:	88 60       	ori	r24, 0x08	; 8
     f86:	89 83       	std	Y+1, r24	; 0x01
	if (str[0] == 0)
     f88:	89 81       	ldd	r24, Y+1	; 0x01
     f8a:	81 11       	cpse	r24, r1
     f8c:	02 c0       	rjmp	.+4      	; 0xf92 <mf_rollDo+0xb2>
		str[0] = ' ';
     f8e:	80 e2       	ldi	r24, 0x20	; 32
     f90:	89 83       	std	Y+1, r24	; 0x01
		
	printLedBuffer(0,str);
     f92:	be 01       	movw	r22, r28
     f94:	6f 5f       	subi	r22, 0xFF	; 255
     f96:	7f 4f       	sbci	r23, 0xFF	; 255
     f98:	80 e0       	ldi	r24, 0x00	; 0
     f9a:	40 dd       	rcall	.-1408   	; 0xa1c <printLedBuffer>
}
     f9c:	27 96       	adiw	r28, 0x07	; 7
     f9e:	0f b6       	in	r0, 0x3f	; 63
     fa0:	f8 94       	cli
     fa2:	de bf       	out	0x3e, r29	; 62
     fa4:	0f be       	out	0x3f, r0	; 63
     fa6:	cd bf       	out	0x3d, r28	; 61
     fa8:	df 91       	pop	r29
     faa:	cf 91       	pop	r28
     fac:	08 95       	ret

00000fae <mf_rollSelect>:
//---------------------------------------------//
//---------------------------------------------//

void mf_rollSelect(void)
{
	setExtraLeds(LED_ROLL);
     fae:	82 e0       	ldi	r24, 0x02	; 2
     fb0:	7b dd       	rcall	.-1290   	; 0xaa8 <setExtraLeds>
	mf_leafSelectAct();		// setup and start timer
     fb2:	d0 cd       	rjmp	.-1120   	; 0xb54 <mf_leafSelectAct>

00000fb4 <mf_setTempDo>:
	clearExtraLeds(LED_TEMP);
	mf_leafSelectAct();		// setup and start timer
}

void mf_setTempDo(void)
{
     fb4:	cf 93       	push	r28
     fb6:	df 93       	push	r29
     fb8:	cd b7       	in	r28, 0x3d	; 61
     fba:	de b7       	in	r29, 0x3e	; 62
     fbc:	27 97       	sbiw	r28, 0x07	; 7
     fbe:	0f b6       	in	r0, 0x3f	; 63
     fc0:	f8 94       	cli
     fc2:	de bf       	out	0x3e, r29	; 62
     fc4:	0f be       	out	0x3f, r0	; 63
     fc6:	cd bf       	out	0x3d, r28	; 61
	char str[] = {' ',' ',' ',' ',0xB0,'C',0};
     fc8:	87 e0       	ldi	r24, 0x07	; 7
     fca:	ed e8       	ldi	r30, 0x8D	; 141
     fcc:	f0 e0       	ldi	r31, 0x00	; 0
     fce:	de 01       	movw	r26, r28
     fd0:	11 96       	adiw	r26, 0x01	; 1
     fd2:	01 90       	ld	r0, Z+
     fd4:	0d 92       	st	X+, r0
     fd6:	8a 95       	dec	r24
     fd8:	e1 f7       	brne	.-8      	; 0xfd2 <mf_setTempDo+0x1e>

	
	if (button_state & (BD_UP | BR_UP))
     fda:	80 91 da 00 	lds	r24, 0x00DA
     fde:	90 91 db 00 	lds	r25, 0x00DB
     fe2:	9c 01       	movw	r18, r24
     fe4:	22 70       	andi	r18, 0x02	; 2
     fe6:	34 70       	andi	r19, 0x04	; 4
     fe8:	23 2b       	or	r18, r19
     fea:	31 f0       	breq	.+12     	; 0xff8 <mf_setTempDo+0x44>
	{
		if (p.setup_temp_value < MAX_SET_TEMP)
     fec:	80 91 3d 01 	lds	r24, 0x013D
     ff0:	8a 3f       	cpi	r24, 0xFA	; 250
     ff2:	68 f4       	brcc	.+26     	; 0x100e <mf_setTempDo+0x5a>
			p.setup_temp_value += 5;
     ff4:	8b 5f       	subi	r24, 0xFB	; 251
     ff6:	09 c0       	rjmp	.+18     	; 0x100a <mf_setTempDo+0x56>
		restartMenuTimer();
	}
	else if (button_state & (BD_DOWN | BR_DOWN))
     ff8:	84 70       	andi	r24, 0x04	; 4
     ffa:	98 70       	andi	r25, 0x08	; 8
     ffc:	89 2b       	or	r24, r25
     ffe:	49 f0       	breq	.+18     	; 0x1012 <mf_setTempDo+0x5e>
	{
		if (p.setup_temp_value > MIN_SET_TEMP)
    1000:	80 91 3d 01 	lds	r24, 0x013D
    1004:	8f 31       	cpi	r24, 0x1F	; 31
    1006:	18 f0       	brcs	.+6      	; 0x100e <mf_setTempDo+0x5a>
			p.setup_temp_value -= 5;
    1008:	85 50       	subi	r24, 0x05	; 5
    100a:	80 93 3d 01 	sts	0x013D, r24
//	 Restarts menu state timeout
//	Should be used in RUN function when control buttons are pressed.
//-----------------------------------------------------------------//
static void restartMenuTimer(void)
{
	menuTimer.Timer = 0;
    100e:	10 92 77 00 	sts	0x0077, r1
			p.setup_temp_value -= 5;
		restartMenuTimer();
	}					
		
	// Output ADC result to LED
	u16toa_align_right(p.setup_temp_value,str,0x80 | 4,' ');
    1012:	20 e2       	ldi	r18, 0x20	; 32
    1014:	44 e8       	ldi	r20, 0x84	; 132
    1016:	be 01       	movw	r22, r28
    1018:	6f 5f       	subi	r22, 0xFF	; 255
    101a:	7f 4f       	sbci	r23, 0xFF	; 255
    101c:	80 91 3d 01 	lds	r24, 0x013D
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	d4 d0       	rcall	.+424    	; 0x11cc <u16toa_align_right>
	printLedBuffer(0,str);
    1024:	be 01       	movw	r22, r28
    1026:	6f 5f       	subi	r22, 0xFF	; 255
    1028:	7f 4f       	sbci	r23, 0xFF	; 255
    102a:	80 e0       	ldi	r24, 0x00	; 0
    102c:	f7 dc       	rcall	.-1554   	; 0xa1c <printLedBuffer>
	
	if (userTimer.FA_GE)
    102e:	80 91 f6 00 	lds	r24, 0x00F6
    1032:	84 ff       	sbrs	r24, 4
    1034:	03 c0       	rjmp	.+6      	; 0x103c <mf_setTempDo+0x88>
		setExtraLeds(LED_TEMP);
    1036:	81 e0       	ldi	r24, 0x01	; 1
    1038:	37 dd       	rcall	.-1426   	; 0xaa8 <setExtraLeds>
    103a:	02 c0       	rjmp	.+4      	; 0x1040 <mf_setTempDo+0x8c>
	else
		clearExtraLeds(LED_TEMP);
    103c:	81 e0       	ldi	r24, 0x01	; 1
    103e:	3a dd       	rcall	.-1420   	; 0xab4 <clearExtraLeds>
}
    1040:	27 96       	adiw	r28, 0x07	; 7
    1042:	0f b6       	in	r0, 0x3f	; 63
    1044:	f8 94       	cli
    1046:	de bf       	out	0x3e, r29	; 62
    1048:	0f be       	out	0x3f, r0	; 63
    104a:	cd bf       	out	0x3d, r28	; 61
    104c:	df 91       	pop	r29
    104e:	cf 91       	pop	r28
    1050:	08 95       	ret

00001052 <mf_realTempSelect>:
//=================================================================//


void mf_realTempSelect(void)
{
	setExtraLeds(LED_TEMP);
    1052:	81 e0       	ldi	r24, 0x01	; 1
    1054:	29 cd       	rjmp	.-1454   	; 0xaa8 <setExtraLeds>

00001056 <getMenuFunctionRecord.constprop.0>:
//	Arguments:
//		menuItemID - ID of an item
//		menuRecord - pointer to function structure to fill
//	Output:
//-----------------------------------------------------------------//
static void getMenuFunctionRecord(uint8_t menuItemID, MenuFunctionRecord* menuRecord )
    1056:	1f 93       	push	r17
    1058:	cf 93       	push	r28
    105a:	df 93       	push	r29
    105c:	c0 e0       	ldi	r28, 0x00	; 0
    105e:	d0 e0       	ldi	r29, 0x00	; 0
{
	uint8_t i;
	for (i = 0; i < sizeof(menuFunctionSet)/sizeof(MenuFunctionRecord); i++  )
	{
		readMenuRecord(&menuFunctionSet[i], menuRecord);
    1060:	17 e0       	ldi	r17, 0x07	; 7
    1062:	1c 9f       	mul	r17, r28
    1064:	90 01       	movw	r18, r0
    1066:	1d 9f       	mul	r17, r29
    1068:	30 0d       	add	r19, r0
    106a:	11 24       	eor	r1, r1
    106c:	26 5a       	subi	r18, 0xA6	; 166
    106e:	3f 4f       	sbci	r19, 0xFF	; 255
//		fRecPtr		- address of the function record in the FLASH
//		resPtr		- address of the record to fill in the SRAM
//-----------------------------------------------------------------//
static inline void readMenuRecord(const MenuFunctionRecord* fRecPtr, MenuFunctionRecord* resPtr )
{
	resPtr->Item = pgm_read_byte(&fRecPtr->Item);
    1070:	f9 01       	movw	r30, r18
    1072:	94 91       	lpm	r25, Z
	resPtr->SelectFunction = (FuncPtr)pgm_read_word(&fRecPtr->SelectFunction);
    1074:	31 96       	adiw	r30, 0x01	; 1
    1076:	a5 91       	lpm	r26, Z+
    1078:	b4 91       	lpm	r27, Z
	resPtr->RunFunction = (FuncPtr)pgm_read_word(&fRecPtr->RunFunction);
    107a:	f9 01       	movw	r30, r18
    107c:	33 96       	adiw	r30, 0x03	; 3
    107e:	65 91       	lpm	r22, Z+
    1080:	74 91       	lpm	r23, Z
	resPtr->LeaveFunction = (FuncPtr)pgm_read_word(&fRecPtr->LeaveFunction);
    1082:	2b 5f       	subi	r18, 0xFB	; 251
    1084:	3f 4f       	sbci	r19, 0xFF	; 255
    1086:	f9 01       	movw	r30, r18
    1088:	45 91       	lpm	r20, Z+
    108a:	54 91       	lpm	r21, Z
{
	uint8_t i;
	for (i = 0; i < sizeof(menuFunctionSet)/sizeof(MenuFunctionRecord); i++  )
	{
		readMenuRecord(&menuFunctionSet[i], menuRecord);
		if (menuRecord->Item == menuItemID)
    108c:	98 13       	cpse	r25, r24
    108e:	03 c0       	rjmp	.+6      	; 0x1096 <getMenuFunctionRecord.constprop.0+0x40>
    1090:	80 93 ef 00 	sts	0x00EF, r24
    1094:	06 c0       	rjmp	.+12     	; 0x10a2 <getMenuFunctionRecord.constprop.0+0x4c>
    1096:	21 96       	adiw	r28, 0x01	; 1
//	Output:
//-----------------------------------------------------------------//
static void getMenuFunctionRecord(uint8_t menuItemID, MenuFunctionRecord* menuRecord )
{
	uint8_t i;
	for (i = 0; i < sizeof(menuFunctionSet)/sizeof(MenuFunctionRecord); i++  )
    1098:	ce 30       	cpi	r28, 0x0E	; 14
    109a:	d1 05       	cpc	r29, r1
    109c:	11 f7       	brne	.-60     	; 0x1062 <getMenuFunctionRecord.constprop.0+0xc>
    109e:	90 93 ef 00 	sts	0x00EF, r25
    10a2:	a0 93 f0 00 	sts	0x00F0, r26
    10a6:	b0 93 f1 00 	sts	0x00F1, r27
    10aa:	60 93 f2 00 	sts	0x00F2, r22
    10ae:	70 93 f3 00 	sts	0x00F3, r23
    10b2:	40 93 f4 00 	sts	0x00F4, r20
    10b6:	50 93 f5 00 	sts	0x00F5, r21
	{
		readMenuRecord(&menuFunctionSet[i], menuRecord);
		if (menuRecord->Item == menuItemID)
			break;
	}
}
    10ba:	df 91       	pop	r29
    10bc:	cf 91       	pop	r28
    10be:	1f 91       	pop	r17
    10c0:	08 95       	ret

000010c2 <InitMenu>:
//	Menu initialization
//	Call this function at start of your program before processMenu()
//-----------------------------------------------------------------//
void InitMenu(void)
{
	selectedMenuItemID = mi_REALTEMP;
    10c2:	81 e0       	ldi	r24, 0x01	; 1
    10c4:	80 93 ee 00 	sts	0x00EE, r24
	getMenuFunctionRecord(selectedMenuItemID, &selectedMenuFunctionRecord);
    10c8:	c6 df       	rcall	.-116    	; 0x1056 <getMenuFunctionRecord.constprop.0>
	processItemFunction(selectedMenuFunctionRecord.SelectFunction);
    10ca:	80 91 f0 00 	lds	r24, 0x00F0
    10ce:	90 91 f1 00 	lds	r25, 0x00F1
    10d2:	35 cd       	rjmp	.-1430   	; 0xb3e <processItemFunction>

000010d4 <processMenu>:
//	Main menu control, -  state function calls, jumps 
//	between menu states and indication
//	Call this function from main() with a fixed time interval.
//-----------------------------------------------------------------//
void processMenu(void)
{
    10d4:	ff 92       	push	r15
    10d6:	0f 93       	push	r16
    10d8:	1f 93       	push	r17
    10da:	cf 93       	push	r28
    10dc:	df 93       	push	r29
	NextItem_t nextItem;
	uint16_t jumpCondition;
	
	processSoftTimer8b(&menuTimer);	
    10de:	86 e7       	ldi	r24, 0x76	; 118
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	73 d3       	rcall	.+1766   	; 0x17ca <processSoftTimer8b>
	
	// Compose jump condition
	jumpCondition = button_state;		
    10e4:	40 91 da 00 	lds	r20, 0x00DA
    10e8:	50 91 db 00 	lds	r21, 0x00DB
	if (menuTimer.FTop)
    10ec:	80 91 76 00 	lds	r24, 0x0076
    10f0:	85 fd       	sbrc	r24, 5
		jumpCondition |= TMR_EXP;
    10f2:	50 68       	ori	r21, 0x80	; 128
	if (sys_timers.flags & AUTOPOFF_EXPIRED)
    10f4:	80 91 81 00 	lds	r24, 0x0081
    10f8:	84 fd       	sbrc	r24, 4
		jumpCondition |= GOTO_POFF;
    10fa:	50 64       	ori	r21, 0x40	; 64
	
	// Get next menu item according to current state and jump conditions
	nextItem = getNextMenuItem(selectedMenuItemID, jumpCondition);
    10fc:	80 91 ee 00 	lds	r24, 0x00EE
    1100:	60 e0       	ldi	r22, 0x00	; 0
    1102:	70 e0       	ldi	r23, 0x00	; 0
	MenuJumpRecord	jRecord;
	uint8_t i;
	
	for (i = 0; i < sizeof(menuJumpSet)/sizeof(MenuJumpRecord); i++  )
	{
		readJumpRecord(&menuJumpSet[i], &jRecord);		// read full jump record
    1104:	95 e0       	ldi	r25, 0x05	; 5
    1106:	96 9f       	mul	r25, r22
    1108:	90 01       	movw	r18, r0
    110a:	97 9f       	mul	r25, r23
    110c:	30 0d       	add	r19, r0
    110e:	11 24       	eor	r1, r1
    1110:	24 54       	subi	r18, 0x44	; 68
    1112:	3f 4f       	sbci	r19, 0xFF	; 255
//		jRecPtr		- address of the jump record in the FLASH
//		resPtr		- address of the record to fill in the SRAM
//-----------------------------------------------------------------//
static inline void readJumpRecord(const MenuJumpRecord* jRecPtr, MenuJumpRecord* resPtr )
{
	resPtr->Item = pgm_read_byte(&jRecPtr->Item);
    1114:	f9 01       	movw	r30, r18
    1116:	14 91       	lpm	r17, Z
	resPtr->JumpCondition = pgm_read_word(&jRecPtr->JumpCondition);
    1118:	31 96       	adiw	r30, 0x01	; 1
    111a:	a5 91       	lpm	r26, Z+
    111c:	b4 91       	lpm	r27, Z
	resPtr->NextItem= pgm_read_byte(&jRecPtr->NextItem);
    111e:	f9 01       	movw	r30, r18
    1120:	33 96       	adiw	r30, 0x03	; 3
    1122:	d4 91       	lpm	r29, Z
	resPtr->Flags= pgm_read_byte(&jRecPtr->Flags);
    1124:	f9 01       	movw	r30, r18
    1126:	34 96       	adiw	r30, 0x04	; 4
    1128:	24 91       	lpm	r18, Z
	uint8_t i;
	
	for (i = 0; i < sizeof(menuJumpSet)/sizeof(MenuJumpRecord); i++  )
	{
		readJumpRecord(&menuJumpSet[i], &jRecord);		// read full jump record
		if (jRecord.Item == selectedItemId)				// If ID match,
    112a:	18 13       	cpse	r17, r24
    112c:	0e c0       	rjmp	.+28     	; 0x114a <processMenu+0x76>
		{
			if ((jRecord.JumpCondition & jmpCond) != 0)		// if any of jump conditions match too,
    112e:	a4 23       	and	r26, r20
    1130:	b5 23       	and	r27, r21
    1132:	ab 2b       	or	r26, r27
    1134:	51 f0       	breq	.+20     	; 0x114a <processMenu+0x76>
			{
				nextItem.ItemID = jRecord.NextItem;			// switch to next menu item
				nextItem.ItemTimeout = jRecord.Flags & TIMEOUT_MASK;
    1136:	c2 2f       	mov	r28, r18
    1138:	cf 73       	andi	r28, 0x3F	; 63
				nextItem.ShiftRight = (jRecord.Flags & SHIFT_RIGHT) ? 1 : 0;
    113a:	26 fb       	bst	r18, 6
    113c:	00 27       	eor	r16, r16
    113e:	00 f9       	bld	r16, 0
				nextItem.ShiftLeft = (jRecord.Flags & SHIFT_LEFT) ? 1 : 0;
    1140:	f2 2e       	mov	r15, r18
    1142:	ff 1c       	adc	r15, r15
    1144:	ff 24       	eor	r15, r15
    1146:	ff 1c       	adc	r15, r15
    1148:	06 c0       	rjmp	.+12     	; 0x1156 <processMenu+0x82>
    114a:	6f 5f       	subi	r22, 0xFF	; 255
    114c:	7f 4f       	sbci	r23, 0xFF	; 255
	NextItem_t nextItem;
	nextItem.ItemID = selectedItemId;
	MenuJumpRecord	jRecord;
	uint8_t i;
	
	for (i = 0; i < sizeof(menuJumpSet)/sizeof(MenuJumpRecord); i++  )
    114e:	60 32       	cpi	r22, 0x20	; 32
    1150:	71 05       	cpc	r23, r1
    1152:	c9 f6       	brne	.-78     	; 0x1106 <processMenu+0x32>
		jumpCondition |= TMR_EXP;
	if (sys_timers.flags & AUTOPOFF_EXPIRED)
		jumpCondition |= GOTO_POFF;
	
	// Get next menu item according to current state and jump conditions
	nextItem = getNextMenuItem(selectedMenuItemID, jumpCondition);
    1154:	d8 2f       	mov	r29, r24
    1156:	10 e0       	ldi	r17, 0x00	; 0
    1158:	f0 fa       	bst	r15, 0
    115a:	10 f9       	bld	r17, 0
    115c:	00 fb       	bst	r16, 0
    115e:	11 f9       	bld	r17, 1
	
	// If next item differs from current
	if (nextItem.ItemID != selectedMenuItemID)
    1160:	d8 17       	cp	r29, r24
    1162:	09 f1       	breq	.+66     	; 0x11a6 <processMenu+0xd2>
	{		
		// Call exit function for current item
		processItemFunction(selectedMenuFunctionRecord.LeaveFunction);
    1164:	80 91 f4 00 	lds	r24, 0x00F4
    1168:	90 91 f5 00 	lds	r25, 0x00F5
    116c:	e8 dc       	rcall	.-1584   	; 0xb3e <processItemFunction>
		
		// If shifting is specified, start it before calling any 
		//	new menu item functions 
		if (nextItem.ShiftRight)
    116e:	11 ff       	sbrs	r17, 1
    1170:	02 c0       	rjmp	.+4      	; 0x1176 <processMenu+0xa2>
			startShiftingWindowRight();
    1172:	23 dc       	rcall	.-1978   	; 0x9ba <startShiftingWindowRight>
    1174:	02 c0       	rjmp	.+4      	; 0x117a <processMenu+0xa6>
		else if (nextItem.ShiftLeft)
    1176:	10 fd       	sbrc	r17, 0
			startShiftingWindowLeft();
    1178:	12 dc       	rcall	.-2012   	; 0x99e <startShiftingWindowLeft>
		
		// Select new item
		selectedMenuItemID = nextItem.ItemID;
    117a:	d0 93 ee 00 	sts	0x00EE, r29
		
		// Load from FLASH and save function pointers
		getMenuFunctionRecord(selectedMenuItemID, &selectedMenuFunctionRecord);
    117e:	8d 2f       	mov	r24, r29
    1180:	6a df       	rcall	.-300    	; 0x1056 <getMenuFunctionRecord.constprop.0>
		// Call select function for next item
		processItemFunction(selectedMenuFunctionRecord.SelectFunction);
    1182:	80 91 f0 00 	lds	r24, 0x00F0
    1186:	90 91 f1 00 	lds	r25, 0x00F1
    118a:	d9 dc       	rcall	.-1614   	; 0xb3e <processItemFunction>
		// Start timer if timeout is enabled
		if (nextItem.ItemTimeout != 0)
    118c:	cc 23       	and	r28, r28
    118e:	c1 f0       	breq	.+48     	; 0x11c0 <processMenu+0xec>
		{
			menuTimer.Top = nextItem.ItemTimeout * MENU_TIMEOUT_MULT;
    1190:	cc 0f       	add	r28, r28
    1192:	c0 93 78 00 	sts	0x0078, r28
			menuTimer.Timer = 0;
    1196:	10 92 77 00 	sts	0x0077, r1
			menuTimer.Enabled = 1;	
    119a:	80 91 76 00 	lds	r24, 0x0076
    119e:	81 60       	ori	r24, 0x01	; 1
    11a0:	80 93 76 00 	sts	0x0076, r24
    11a4:	0d c0       	rjmp	.+26     	; 0x11c0 <processMenu+0xec>
		}
		
	}
	else
	{
		processSoftTimer8b(&userTimer);
    11a6:	86 ef       	ldi	r24, 0xF6	; 246
    11a8:	90 e0       	ldi	r25, 0x00	; 0
    11aa:	0f d3       	rcall	.+1566   	; 0x17ca <processSoftTimer8b>
		// Stay at previous item
		processItemFunction(selectedMenuFunctionRecord.RunFunction);
    11ac:	80 91 f2 00 	lds	r24, 0x00F2
    11b0:	90 91 f3 00 	lds	r25, 0x00F3
	}	
}
    11b4:	df 91       	pop	r29
    11b6:	cf 91       	pop	r28
    11b8:	1f 91       	pop	r17
    11ba:	0f 91       	pop	r16
    11bc:	ff 90       	pop	r15
	}
	else
	{
		processSoftTimer8b(&userTimer);
		// Stay at previous item
		processItemFunction(selectedMenuFunctionRecord.RunFunction);
    11be:	bf cc       	rjmp	.-1666   	; 0xb3e <processItemFunction>
	}	
}
    11c0:	df 91       	pop	r29
    11c2:	cf 91       	pop	r28
    11c4:	1f 91       	pop	r17
    11c6:	0f 91       	pop	r16
    11c8:	ff 90       	pop	r15
    11ca:	08 95       	ret

000011cc <u16toa_align_right>:
// Converts uint16_t value into decimal string with right alignment
// len = number of digits output (without terminating '\0')
// len[7] = 1 -> no terminating '\0' at buffer[len]
// fill_char -> char used for string padding
void u16toa_align_right(uint16_t val, char *buffer, uint8_t len,char fill_char)
{
    11cc:	cf 93       	push	r28
    11ce:	df 93       	push	r29
	if (len & 0x80)
    11d0:	47 ff       	sbrs	r20, 7
    11d2:	05 c0       	rjmp	.+10     	; 0x11de <u16toa_align_right+0x12>
	{
		len = len & 0x7F;
    11d4:	4f 77       	andi	r20, 0x7F	; 127
		buffer += len;	
    11d6:	fb 01       	movw	r30, r22
    11d8:	e4 0f       	add	r30, r20
    11da:	f1 1d       	adc	r31, r1
    11dc:	04 c0       	rjmp	.+8      	; 0x11e6 <u16toa_align_right+0x1a>
	}
	else
	{
		buffer += len;	
    11de:	fb 01       	movw	r30, r22
    11e0:	e4 0f       	add	r30, r20
    11e2:	f1 1d       	adc	r31, r1
		*buffer = 0;
    11e4:	10 82       	st	Z, r1
	}
	
	do
	{
		*--buffer = val % 10 + '0';
    11e6:	ca e0       	ldi	r28, 0x0A	; 10
    11e8:	d0 e0       	ldi	r29, 0x00	; 0
    11ea:	be 01       	movw	r22, r28
    11ec:	06 d4       	rcall	.+2060   	; 0x19fa <__udivmodhi4>
    11ee:	80 5d       	subi	r24, 0xD0	; 208
    11f0:	82 93       	st	-Z, r24
		val /= 10;
    11f2:	cb 01       	movw	r24, r22
		len--;
    11f4:	41 50       	subi	r20, 0x01	; 1
	}
	while ((val != 0) && len);
    11f6:	00 97       	sbiw	r24, 0x00	; 0
    11f8:	21 f0       	breq	.+8      	; 0x1202 <u16toa_align_right+0x36>
    11fa:	41 11       	cpse	r20, r1
    11fc:	f6 cf       	rjmp	.-20     	; 0x11ea <u16toa_align_right+0x1e>
    11fe:	01 c0       	rjmp	.+2      	; 0x1202 <u16toa_align_right+0x36>
	
	// Padding
	while(len--)
		*--buffer = fill_char;
    1200:	22 93       	st	-Z, r18
		len--;
	}
	while ((val != 0) && len);
	
	// Padding
	while(len--)
    1202:	41 50       	subi	r20, 0x01	; 1
    1204:	e8 f7       	brcc	.-6      	; 0x1200 <u16toa_align_right+0x34>
		*--buffer = fill_char;
}
    1206:	df 91       	pop	r29
    1208:	cf 91       	pop	r28
    120a:	08 95       	ret

0000120c <init_system_io>:
//extern void powTest(void);

void init_system_io()
{
	// Setup Port D
	PORTD = 0;//(1<<PD_SYNCA | 1<<PD_SYNCB);
    120c:	12 ba       	out	0x12, r1	; 18
	DDRD = (1<<PD_TXD | 1<<PD_M1 | 1<<PD_M2 | 1<<PD_HEATER | 1<<PD_HEAT_INDIC );
    120e:	8e e3       	ldi	r24, 0x3E	; 62
    1210:	81 bb       	out	0x11, r24	; 17
	
	// Setup Port B
	PORTB = 0;
    1212:	18 ba       	out	0x18, r1	; 24
	DDRB = (1<<PB_BEEPER | 1<<PB_LED_DOUT | 1<<PB_LED_CLK | 1<<PB_SEGF | 1<<PB_SEGG | 1<<PB_SEGH);
    1214:	8f e3       	ldi	r24, 0x3F	; 63
    1216:	87 bb       	out	0x17, r24	; 23
	
	PORTC = 0;
    1218:	15 ba       	out	0x15, r1	; 21
	DDRC = (1<<PC_SEGA | 1<<PC_SEGB | 1<<PC_SEGC | 1<<PC_SEGD | 1<<PC_SEGE);	
    121a:	8f e1       	ldi	r24, 0x1F	; 31
    121c:	84 bb       	out	0x14, r24	; 20

	// Setup timer0
	// 1/1024 prescaler, T=64us @16MHz
	TCCR0 = (1<<CS02 | 0<<CS01 | 1<<CS00);
    121e:	85 e0       	ldi	r24, 0x05	; 5
    1220:	83 bf       	out	0x33, r24	; 51
	TCNT0 = 0;
    1222:	12 be       	out	0x32, r1	; 50
	// Clear interrupt flag
	TIFR |= (1<<TOV0);
    1224:	88 b7       	in	r24, 0x38	; 56
    1226:	81 60       	ori	r24, 0x01	; 1
    1228:	88 bf       	out	0x38, r24	; 56
	// Enable interrupts from timer 0
	TIMSK |= (1<<TOIE0);
    122a:	89 b7       	in	r24, 0x39	; 57
    122c:	81 60       	ori	r24, 0x01	; 1
    122e:	89 bf       	out	0x39, r24	; 57
	
	// Setup timer2 as 1ms system frequency generator
	// 1/64 prescaler, CTC mode, OC2 disconnected
	TCCR2 = (1<<CS22 | 1<<WGM21);
    1230:	8c e0       	ldi	r24, 0x0C	; 12
    1232:	85 bd       	out	0x25, r24	; 37
	OCR2 = 249;
    1234:	89 ef       	ldi	r24, 0xF9	; 249
    1236:	83 bd       	out	0x23, r24	; 35
	TIMSK |= (1<<OCIE2);
    1238:	89 b7       	in	r24, 0x39	; 57
    123a:	80 68       	ori	r24, 0x80	; 128
    123c:	89 bf       	out	0x39, r24	; 57
	
	// Setup timer1 as beeper frequency generator
	// CTC mode, 1/64 prescaler
	TCCR1A = 0;
    123e:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = (1<<WGM12 | 1<<CS11 | 1<<CS10);
    1240:	8b e0       	ldi	r24, 0x0B	; 11
    1242:	8e bd       	out	0x2e, r24	; 46
	// 1kHz beeper frequency default
	OCR1A = 127;
    1244:	8f e7       	ldi	r24, 0x7F	; 127
    1246:	90 e0       	ldi	r25, 0x00	; 0
    1248:	9b bd       	out	0x2b, r25	; 43
    124a:	8a bd       	out	0x2a, r24	; 42

	// Setup AC sync comparator
	// Interrupt on output toggle
	ACSR = (1<<ACIE | 0<<ACIS1 | 0<<ACIS0);
    124c:	88 e0       	ldi	r24, 0x08	; 8
    124e:	88 b9       	out	0x08, r24	; 8
	
	// Setup ADC
	// Internal Vref + cap, input ADC5, 
	ADMUX = (1<<REFS1 | 1<<REFS0 | 0<<MUX3 | 1<<MUX2 | 0<<MUX1 | 1<<MUX0 );
    1250:	85 ec       	ldi	r24, 0xC5	; 197
    1252:	87 b9       	out	0x07, r24	; 7
	// Prescaler = 128
	ADCSRA = (1<<ADEN |/* 1<<ADFR |*/  1<<ADIE | 1<<ADPS2 | 1<<ADPS1 | 1<<ADPS0);
    1254:	8f e8       	ldi	r24, 0x8F	; 143
    1256:	86 b9       	out	0x06, r24	; 6
	
	// Setup USART
	// Double speed
	UCSRA = (1<<U2X);
    1258:	82 e0       	ldi	r24, 0x02	; 2
    125a:	8b b9       	out	0x0b, r24	; 11
	UCSRB = (1<<RXEN | 1<<TXEN | 0<<UCSZ2);
    125c:	88 e1       	ldi	r24, 0x18	; 24
    125e:	8a b9       	out	0x0a, r24	; 10
	// No parity, 1 stop bit, 8 bit
	UCSRC = (1<<URSEL | 0<<UPM1 | 0<<UPM0 | 0<<USBS | 1<<UCSZ1 | 1<<UCSZ0);
    1260:	86 e8       	ldi	r24, 0x86	; 134
    1262:	80 bd       	out	0x20, r24	; 32
	// 57600 @16MHz, 2x
	UBRRH=0x00;
    1264:	10 bc       	out	0x20, r1	; 32
	UBRRL=0x22;
    1266:	82 e2       	ldi	r24, 0x22	; 34
    1268:	89 b9       	out	0x09, r24	; 9
    126a:	08 95       	ret

0000126c <main>:




int main(void)
{
    126c:	cf 93       	push	r28
    126e:	df 93       	push	r29
    1270:	cd b7       	in	r28, 0x3d	; 61
    1272:	de b7       	in	r29, 0x3e	; 62
    1274:	2b 97       	sbiw	r28, 0x0b	; 11
    1276:	0f b6       	in	r0, 0x3f	; 63
    1278:	f8 94       	cli
    127a:	de bf       	out	0x3e, r29	; 62
    127c:	0f be       	out	0x3f, r0	; 63
    127e:	cd bf       	out	0x3d, r28	; 61
	char str[10];
	volatile uint8_t temp8u = 0x00;
    1280:	1b 86       	std	Y+11, r1	; 0x0b
	volatile uint16_t temp16u;
	
	// Initialize MCU IO
	init_system_io();
    1282:	c4 df       	rcall	.-120    	; 0x120c <init_system_io>
	// Restore params from EEPROM
	restoreGlobalParams();
    1284:	cb da       	rcall	.-2666   	; 0x81c <restoreGlobalParams>
	// Calibrate ADC coefficients using restored params
	calculateCoeffs();
    1286:	c8 d7       	rcall	.+3984   	; 0x2218 <__data_load_end+0x64c>
	// Initialize LED indicator
	initLedIndicator();
    1288:	a6 db       	rcall	.-2228   	; 0x9d6 <initLedIndicator>
	// Clear comparator interrupt flag to prevent false triggering
	ACSR |= (1<<ACI);
    128a:	44 9a       	sbi	0x08, 4	; 8
	sei();
    128c:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    128e:	2f ef       	ldi	r18, 0xFF	; 255
    1290:	80 e7       	ldi	r24, 0x70	; 112
    1292:	92 e0       	ldi	r25, 0x02	; 2
    1294:	21 50       	subi	r18, 0x01	; 1
    1296:	80 40       	sbci	r24, 0x00	; 0
    1298:	90 40       	sbci	r25, 0x00	; 0
    129a:	e1 f7       	brne	.-8      	; 0x1294 <main+0x28>
    129c:	00 c0       	rjmp	.+0      	; 0x129e <main+0x32>
    129e:	00 00       	nop
	// Safety delay for power part
	_delay_ms(50);
	// Check AC line
	if(p_state == 0x0F) 	
    12a0:	80 91 7a 00 	lds	r24, 0x007A
    12a4:	8f 30       	cpi	r24, 0x0F	; 15
    12a6:	69 f4       	brne	.+26     	; 0x12c2 <main+0x56>
	{
		// Power control state machine has not changed - sync has not been detected
		printLedBuffer(0,"AC ERR");
    12a8:	6e eb       	ldi	r22, 0xBE	; 190
    12aa:	70 e0       	ldi	r23, 0x00	; 0
    12ac:	80 e0       	ldi	r24, 0x00	; 0
    12ae:	b6 db       	rcall	.-2196   	; 0xa1c <printLedBuffer>
    12b0:	2f ef       	ldi	r18, 0xFF	; 255
    12b2:	83 ed       	ldi	r24, 0xD3	; 211
    12b4:	90 e3       	ldi	r25, 0x30	; 48
    12b6:	21 50       	subi	r18, 0x01	; 1
    12b8:	80 40       	sbci	r24, 0x00	; 0
    12ba:	90 40       	sbci	r25, 0x00	; 0
    12bc:	e1 f7       	brne	.-8      	; 0x12b6 <main+0x4a>
    12be:	00 c0       	rjmp	.+0      	; 0x12c0 <main+0x54>
    12c0:	00 00       	nop
		_delay_ms(1000);
	}
	// Initialize menu
	InitMenu();
    12c2:	ff de       	rcall	.-514    	; 0x10c2 <InitMenu>
	// Beep
	SetBeeperFreq(1000);
    12c4:	88 ee       	ldi	r24, 0xE8	; 232
    12c6:	93 e0       	ldi	r25, 0x03	; 3
    12c8:	09 d3       	rcall	.+1554   	; 0x18dc <SetBeeperFreq>
	StartBeep(200);
    12ca:	88 ec       	ldi	r24, 0xC8	; 200
    12cc:	90 e0       	ldi	r25, 0x00	; 0
    12ce:	26 d3       	rcall	.+1612   	; 0x191c <StartBeep>
	// When we get here, few ADC counts have been sampled.
	// Call PID controller function in order to initialize it's internal structures
	heaterInit();
    12d0:	4f da       	rcall	.-2914   	; 0x770 <heaterInit>
	// Start rotating
	setMotorDirection(ROLL_FWD);
    12d2:	81 e0       	ldi	r24, 0x01	; 1
    12d4:	f5 d0       	rcall	.+490    	; 0x14c0 <setMotorDirection>
	// Clear timer
	menuUpdateTimer.FOvfl = 0;
    12d6:	80 91 82 00 	lds	r24, 0x0082
    12da:	8f 7b       	andi	r24, 0xBF	; 191
    12dc:	80 93 82 00 	sts	0x0082, r24

    while(1)
    {
		
		if (menuUpdateTimer.FOvfl)
    12e0:	80 91 82 00 	lds	r24, 0x0082
    12e4:	86 ff       	sbrs	r24, 6
    12e6:	fc cf       	rjmp	.-8      	; 0x12e0 <main+0x74>
		{
			//--------- BUTTONS ----------//
			
			// Get new button state
			process_buttons();
    12e8:	a0 d8       	rcall	.-3776   	; 0x42a <process_buttons>
			
			// Give sound feedback
			if (button_state & BL_MENU)
    12ea:	80 91 da 00 	lds	r24, 0x00DA
    12ee:	90 91 db 00 	lds	r25, 0x00DB
    12f2:	91 ff       	sbrs	r25, 1
    12f4:	03 c0       	rjmp	.+6      	; 0x12fc <main+0x90>
			{
				SetBeeperFreq(800);
    12f6:	80 e2       	ldi	r24, 0x20	; 32
    12f8:	93 e0       	ldi	r25, 0x03	; 3
    12fa:	06 c0       	rjmp	.+12     	; 0x1308 <main+0x9c>
				StartBeep(40);
			}
			else if (button_action_down & (BD_MENU | BD_UP | BD_DOWN | BD_HEATCTRL))
    12fc:	80 91 d9 00 	lds	r24, 0x00D9
    1300:	87 74       	andi	r24, 0x47	; 71
    1302:	31 f0       	breq	.+12     	; 0x1310 <main+0xa4>
			{
				SetBeeperFreq(1000);
    1304:	88 ee       	ldi	r24, 0xE8	; 232
    1306:	93 e0       	ldi	r25, 0x03	; 3
    1308:	e9 d2       	rcall	.+1490   	; 0x18dc <SetBeeperFreq>
				StartBeep(40);
    130a:	88 e2       	ldi	r24, 0x28	; 40
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	06 d3       	rcall	.+1548   	; 0x191c <StartBeep>
			}	
			// Direction control buttons sounds get special processing at processRollControl()
			
			// If any button is pressed, restart power off interval
			if (button_action_down)
    1310:	80 91 d9 00 	lds	r24, 0x00D9
    1314:	81 11       	cpse	r24, r1
				resetAutoPowerOffCounter();
    1316:	df d2       	rcall	.+1470   	; 0x18d6 <resetAutoPowerOffCounter>
			
			//---------- TIMERS ----------//
			
			// Process timers and time counters - it is important to call
			// this function before menu and power controls processing
			processSystemTimers();
    1318:	84 d2       	rcall	.+1288   	; 0x1822 <processSystemTimers>

			// Warn user about near auto powering off
			if (sys_timers.flags & AUTOPOFF_SOON)
    131a:	80 91 81 00 	lds	r24, 0x0081
    131e:	83 ff       	sbrs	r24, 3
    1320:	06 c0       	rjmp	.+12     	; 0x132e <main+0xc2>
			{
				SetBeeperFreq(1200);
    1322:	80 eb       	ldi	r24, 0xB0	; 176
    1324:	94 e0       	ldi	r25, 0x04	; 4
    1326:	da d2       	rcall	.+1460   	; 0x18dc <SetBeeperFreq>
				StartBeep(200);
    1328:	88 ec       	ldi	r24, 0xC8	; 200
    132a:	90 e0       	ldi	r25, 0x00	; 0
    132c:	f7 d2       	rcall	.+1518   	; 0x191c <StartBeep>
			}		
			
			//----------- ADC ------------//
			
			// Get new temperature measurement
			update_normalized_adc();			
    132e:	c1 d7       	rcall	.+3970   	; 0x22b2 <__data_load_end+0x6e6>
		
			// Update indicated Celsius degree
			if (sys_timers.flags & EXPIRED_CELSIUS)
    1330:	80 91 81 00 	lds	r24, 0x0081
    1334:	80 fd       	sbrc	r24, 0
				update_Celsius();		
    1336:	e7 d7       	rcall	.+4046   	; 0x2306 <__data_load_end+0x73a>
			
			//----------- MENU -----------//		
				
			// Process user menu states, settings and indication
			processMenu();
    1338:	cd de       	rcall	.-614    	; 0x10d4 <processMenu>
			
			//--------- CONTROLS ---------//		
			
			// Process cyclic rolling, direction control
			processRollControl();	
    133a:	bc d8       	rcall	.-3720   	; 0x4b4 <processRollControl>
			
			// Process heater regulation
			processHeaterControl();
    133c:	bf d9       	rcall	.-3202   	; 0x6bc <processHeaterControl>
		
			// Process heater events and warnings
			processHeaterAlerts();
    133e:	20 da       	rcall	.-3008   	; 0x780 <processHeaterAlerts>
			
			
			
			//------- LOG to UART --------//	
			if (sys_timers.flags & EXPIRED_LOG)
    1340:	80 91 81 00 	lds	r24, 0x0081
    1344:	85 ff       	sbrs	r24, 5
    1346:	c7 cf       	rjmp	.-114    	; 0x12d6 <main+0x6a>
			{
				
				
				u16toa_align_right(adc_normalized,str,6,' ');			// Actual temp (ADC)
    1348:	20 e2       	ldi	r18, 0x20	; 32
    134a:	46 e0       	ldi	r20, 0x06	; 6
    134c:	be 01       	movw	r22, r28
    134e:	6f 5f       	subi	r22, 0xFF	; 255
    1350:	7f 4f       	sbci	r23, 0xFF	; 255
    1352:	80 91 39 01 	lds	r24, 0x0139
    1356:	90 91 3a 01 	lds	r25, 0x013A
    135a:	38 df       	rcall	.-400    	; 0x11cc <u16toa_align_right>
				USART_sendstr(str);
    135c:	ce 01       	movw	r24, r28
    135e:	01 96       	adiw	r24, 0x01	; 1
    1360:	2e d3       	rcall	.+1628   	; 0x19be <USART_sendstr>
				
				USART_sendstr("    ");
    1362:	85 ec       	ldi	r24, 0xC5	; 197
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	2b d3       	rcall	.+1622   	; 0x19be <USART_sendstr>
				
				u16toa_align_right(dbg_SetTempPID,str,6,' ');			// Temp setting, as input to PID
    1368:	20 e2       	ldi	r18, 0x20	; 32
    136a:	46 e0       	ldi	r20, 0x06	; 6
    136c:	be 01       	movw	r22, r28
    136e:	6f 5f       	subi	r22, 0xFF	; 255
    1370:	7f 4f       	sbci	r23, 0xFF	; 255
    1372:	80 91 5b 01 	lds	r24, 0x015B
    1376:	90 91 5c 01 	lds	r25, 0x015C
    137a:	28 df       	rcall	.-432    	; 0x11cc <u16toa_align_right>
				USART_sendstr(str);
    137c:	ce 01       	movw	r24, r28
    137e:	01 96       	adiw	r24, 0x01	; 1
    1380:	1e d3       	rcall	.+1596   	; 0x19be <USART_sendstr>
				
				u16toa_align_right(dbg_RealTempPID,str,6,' ');			// Real temp, sampled for PID input
    1382:	20 e2       	ldi	r18, 0x20	; 32
    1384:	46 e0       	ldi	r20, 0x06	; 6
    1386:	be 01       	movw	r22, r28
    1388:	6f 5f       	subi	r22, 0xFF	; 255
    138a:	7f 4f       	sbci	r23, 0xFF	; 255
    138c:	80 91 4c 01 	lds	r24, 0x014C
    1390:	90 91 4d 01 	lds	r25, 0x014D
    1394:	1b df       	rcall	.-458    	; 0x11cc <u16toa_align_right>
				USART_sendstr(str);
    1396:	ce 01       	movw	r24, r28
    1398:	01 96       	adiw	r24, 0x01	; 1
    139a:	11 d3       	rcall	.+1570   	; 0x19be <USART_sendstr>
				
				u16toa_align_right(dbg_RealTempCelsius,str,6,' ');		// Real temp, sampled for PID input, Celsius
    139c:	20 e2       	ldi	r18, 0x20	; 32
    139e:	46 e0       	ldi	r20, 0x06	; 6
    13a0:	be 01       	movw	r22, r28
    13a2:	6f 5f       	subi	r22, 0xFF	; 255
    13a4:	7f 4f       	sbci	r23, 0xFF	; 255
    13a6:	80 91 5a 01 	lds	r24, 0x015A
    13aa:	90 e0       	ldi	r25, 0x00	; 0
    13ac:	0f df       	rcall	.-482    	; 0x11cc <u16toa_align_right>
				USART_sendstr(str);
    13ae:	ce 01       	movw	r24, r28
    13b0:	01 96       	adiw	r24, 0x01	; 1
    13b2:	05 d3       	rcall	.+1546   	; 0x19be <USART_sendstr>
				
				USART_sendstr("    ");
    13b4:	85 ec       	ldi	r24, 0xC5	; 197
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	02 d3       	rcall	.+1540   	; 0x19be <USART_sendstr>
				
				if (dbg_PID_p_term >= 0)
    13ba:	80 91 4a 01 	lds	r24, 0x014A
    13be:	90 91 4b 01 	lds	r25, 0x014B
				{
					u16toa_align_right(dbg_PID_p_term,str,6,'0');		// p term
    13c2:	20 e3       	ldi	r18, 0x30	; 48
    13c4:	46 e0       	ldi	r20, 0x06	; 6
    13c6:	be 01       	movw	r22, r28
    13c8:	6f 5f       	subi	r22, 0xFF	; 255
    13ca:	7f 4f       	sbci	r23, 0xFF	; 255
				u16toa_align_right(dbg_RealTempCelsius,str,6,' ');		// Real temp, sampled for PID input, Celsius
				USART_sendstr(str);
				
				USART_sendstr("    ");
				
				if (dbg_PID_p_term >= 0)
    13cc:	97 fd       	sbrc	r25, 7
    13ce:	02 c0       	rjmp	.+4      	; 0x13d4 <main+0x168>
				{
					u16toa_align_right(dbg_PID_p_term,str,6,'0');		// p term
    13d0:	fd de       	rcall	.-518    	; 0x11cc <u16toa_align_right>
    13d2:	06 c0       	rjmp	.+12     	; 0x13e0 <main+0x174>
					USART_sendstr(str);	
				}
				else
				{
					u16toa_align_right(-dbg_PID_p_term,str,6,'0');		
    13d4:	91 95       	neg	r25
    13d6:	81 95       	neg	r24
    13d8:	91 09       	sbc	r25, r1
    13da:	f8 de       	rcall	.-528    	; 0x11cc <u16toa_align_right>
					USART_send('-');
    13dc:	8d e2       	ldi	r24, 0x2D	; 45
    13de:	ea d2       	rcall	.+1492   	; 0x19b4 <USART_send>
					USART_sendstr(str);
    13e0:	ce 01       	movw	r24, r28
    13e2:	01 96       	adiw	r24, 0x01	; 1
    13e4:	ec d2       	rcall	.+1496   	; 0x19be <USART_sendstr>
				}
				
				USART_sendstr("    ");
    13e6:	85 ec       	ldi	r24, 0xC5	; 197
    13e8:	90 e0       	ldi	r25, 0x00	; 0
    13ea:	e9 d2       	rcall	.+1490   	; 0x19be <USART_sendstr>
				
				if (dbg_PID_d_term >= 0)
    13ec:	80 91 58 01 	lds	r24, 0x0158
    13f0:	90 91 59 01 	lds	r25, 0x0159
				{
					u16toa_align_right(dbg_PID_d_term,str,6,'0');		// d term
    13f4:	20 e3       	ldi	r18, 0x30	; 48
    13f6:	46 e0       	ldi	r20, 0x06	; 6
    13f8:	be 01       	movw	r22, r28
    13fa:	6f 5f       	subi	r22, 0xFF	; 255
    13fc:	7f 4f       	sbci	r23, 0xFF	; 255
					USART_sendstr(str);
				}
				
				USART_sendstr("    ");
				
				if (dbg_PID_d_term >= 0)
    13fe:	97 fd       	sbrc	r25, 7
    1400:	02 c0       	rjmp	.+4      	; 0x1406 <main+0x19a>
				{
					u16toa_align_right(dbg_PID_d_term,str,6,'0');		// d term
    1402:	e4 de       	rcall	.-568    	; 0x11cc <u16toa_align_right>
    1404:	06 c0       	rjmp	.+12     	; 0x1412 <main+0x1a6>
					USART_sendstr(str);
				}
				else
				{
					u16toa_align_right(-dbg_PID_d_term,str,6,'0');
    1406:	91 95       	neg	r25
    1408:	81 95       	neg	r24
    140a:	91 09       	sbc	r25, r1
    140c:	df de       	rcall	.-578    	; 0x11cc <u16toa_align_right>
					USART_send('-');
    140e:	8d e2       	ldi	r24, 0x2D	; 45
    1410:	d1 d2       	rcall	.+1442   	; 0x19b4 <USART_send>
					USART_sendstr(str);
    1412:	ce 01       	movw	r24, r28
    1414:	01 96       	adiw	r24, 0x01	; 1
    1416:	d3 d2       	rcall	.+1446   	; 0x19be <USART_sendstr>
				}
				
				USART_sendstr("    ");
    1418:	85 ec       	ldi	r24, 0xC5	; 197
    141a:	90 e0       	ldi	r25, 0x00	; 0
    141c:	d0 d2       	rcall	.+1440   	; 0x19be <USART_sendstr>
				
				if (dbg_PID_i_term >= 0)
    141e:	80 91 4e 01 	lds	r24, 0x014E
    1422:	90 91 4f 01 	lds	r25, 0x014F
				{
					u16toa_align_right(dbg_PID_i_term,str,6,'0');		// i term
    1426:	20 e3       	ldi	r18, 0x30	; 48
    1428:	46 e0       	ldi	r20, 0x06	; 6
    142a:	be 01       	movw	r22, r28
    142c:	6f 5f       	subi	r22, 0xFF	; 255
    142e:	7f 4f       	sbci	r23, 0xFF	; 255
					USART_sendstr(str);
				}
				
				USART_sendstr("    ");
				
				if (dbg_PID_i_term >= 0)
    1430:	97 fd       	sbrc	r25, 7
    1432:	02 c0       	rjmp	.+4      	; 0x1438 <main+0x1cc>
				{
					u16toa_align_right(dbg_PID_i_term,str,6,'0');		// i term
    1434:	cb de       	rcall	.-618    	; 0x11cc <u16toa_align_right>
    1436:	06 c0       	rjmp	.+12     	; 0x1444 <main+0x1d8>
					USART_sendstr(str);
				}
				else
				{
					u16toa_align_right(-dbg_PID_i_term,str,6,'0');
    1438:	91 95       	neg	r25
    143a:	81 95       	neg	r24
    143c:	91 09       	sbc	r25, r1
    143e:	c6 de       	rcall	.-628    	; 0x11cc <u16toa_align_right>
					USART_send('-');
    1440:	8d e2       	ldi	r24, 0x2D	; 45
    1442:	b8 d2       	rcall	.+1392   	; 0x19b4 <USART_send>
					USART_sendstr(str);
    1444:	ce 01       	movw	r24, r28
    1446:	01 96       	adiw	r24, 0x01	; 1
    1448:	ba d2       	rcall	.+1396   	; 0x19be <USART_sendstr>
				}
				
				USART_sendstr("    ");
    144a:	85 ec       	ldi	r24, 0xC5	; 197
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	b7 d2       	rcall	.+1390   	; 0x19be <USART_sendstr>
				
				u16toa_align_right(dbg_PID_output,str,6,' ');			// PID output
    1450:	20 e2       	ldi	r18, 0x20	; 32
    1452:	46 e0       	ldi	r20, 0x06	; 6
    1454:	be 01       	movw	r22, r28
    1456:	6f 5f       	subi	r22, 0xFF	; 255
    1458:	7f 4f       	sbci	r23, 0xFF	; 255
    145a:	80 91 47 01 	lds	r24, 0x0147
    145e:	90 91 48 01 	lds	r25, 0x0148
    1462:	b4 de       	rcall	.-664    	; 0x11cc <u16toa_align_right>
				USART_sendstr(str);
    1464:	ce 01       	movw	r24, r28
    1466:	01 96       	adiw	r24, 0x01	; 1
    1468:	aa d2       	rcall	.+1364   	; 0x19be <USART_sendstr>
				
				
				u16toa_align_right(ctrl_heater,str,6,' ');				// Heater control (PID output, synchronized)
    146a:	20 e2       	ldi	r18, 0x20	; 32
    146c:	46 e0       	ldi	r20, 0x06	; 6
    146e:	be 01       	movw	r22, r28
    1470:	6f 5f       	subi	r22, 0xFF	; 255
    1472:	7f 4f       	sbci	r23, 0xFF	; 255
    1474:	80 91 00 01 	lds	r24, 0x0100
    1478:	90 e0       	ldi	r25, 0x00	; 0
    147a:	a8 de       	rcall	.-688    	; 0x11cc <u16toa_align_right>
				USART_sendstr(str);
    147c:	ce 01       	movw	r24, r28
    147e:	01 96       	adiw	r24, 0x01	; 1
    1480:	9e d2       	rcall	.+1340   	; 0x19be <USART_sendstr>
				
			
				USART_sendstr("\n\r");
    1482:	8a ec       	ldi	r24, 0xCA	; 202
    1484:	90 e0       	ldi	r25, 0x00	; 0
    1486:	9b d2       	rcall	.+1334   	; 0x19be <USART_sendstr>
    1488:	26 cf       	rjmp	.-436    	; 0x12d6 <main+0x6a>

0000148a <setHeaterControl>:

// User function to control heater intensity
void setHeaterControl(uint8_t value)
{
	// Disable interrupts from timer0 
	TIMSK &= ~(1<<TOIE0);
    148a:	99 b7       	in	r25, 0x39	; 57
    148c:	9e 7f       	andi	r25, 0xFE	; 254
    148e:	99 bf       	out	0x39, r25	; 57
	
	ctrl_heater = value;
    1490:	80 93 00 01 	sts	0x0100, r24
	heaterState &= ~READY_TO_UPDATE_HEATER;
    1494:	80 91 ff 00 	lds	r24, 0x00FF
    1498:	8f 77       	andi	r24, 0x7F	; 127
    149a:	80 93 ff 00 	sts	0x00FF, r24
	
	// Enable interrupts from timer 0
	TIMSK |= (1<<TOIE0);	
    149e:	89 b7       	in	r24, 0x39	; 57
    14a0:	81 60       	ori	r24, 0x01	; 1
    14a2:	89 bf       	out	0x39, r24	; 57
    14a4:	08 95       	ret

000014a6 <forceHeaterControlUpdate>:


void forceHeaterControlUpdate(void)
{
	// Disable interrupts from timer0 
	TIMSK &= ~(1<<TOIE0);
    14a6:	89 b7       	in	r24, 0x39	; 57
    14a8:	8e 7f       	andi	r24, 0xFE	; 254
    14aa:	89 bf       	out	0x39, r24	; 57
	
	// Flag READY_TO_UPDATE_HEATER will be set on next on next AC line period
	heater_cnt = HEATER_REGULATION_PERIODS - 6;
    14ac:	8c e2       	ldi	r24, 0x2C	; 44
    14ae:	80 93 01 01 	sts	0x0101, r24
	heater_reg_cnt = HEATER_PID_CALL_INTERVAL - 1;
    14b2:	83 e0       	ldi	r24, 0x03	; 3
    14b4:	80 93 fe 00 	sts	0x00FE, r24
	
	// Enable interrupts from timer 0
	TIMSK |= (1<<TOIE0);	
    14b8:	89 b7       	in	r24, 0x39	; 57
    14ba:	81 60       	ori	r24, 0x01	; 1
    14bc:	89 bf       	out	0x39, r24	; 57
    14be:	08 95       	ret

000014c0 <setMotorDirection>:
	
// User function to control motor rotation
void setMotorDirection(uint8_t dir)
{
	// Disable interrupts from timer0 
	TIMSK &= ~(1<<TOIE0);
    14c0:	99 b7       	in	r25, 0x39	; 57
    14c2:	9e 7f       	andi	r25, 0xFE	; 254
    14c4:	99 bf       	out	0x39, r25	; 57
		
	newDirReq = dir;	// save new direction request
    14c6:	80 93 02 01 	sts	0x0102, r24
	dirChangedMask = ~ROLL_DIR_CHANGED;
    14ca:	9f ed       	ldi	r25, 0xDF	; 223
    14cc:	90 93 7b 00 	sts	0x007B, r25
	
	if (dir & ROLL_FWD)
    14d0:	80 ff       	sbrs	r24, 0
    14d2:	09 c0       	rjmp	.+18     	; 0x14e6 <setMotorDirection+0x26>
		bottomPoint = rollPoint;
    14d4:	80 91 03 01 	lds	r24, 0x0103
    14d8:	90 91 04 01 	lds	r25, 0x0104
    14dc:	90 93 06 01 	sts	0x0106, r25
    14e0:	80 93 05 01 	sts	0x0105, r24
    14e4:	0a c0       	rjmp	.+20     	; 0x14fa <setMotorDirection+0x3a>
	else if (dir & ROLL_REV)
    14e6:	81 ff       	sbrs	r24, 1
    14e8:	08 c0       	rjmp	.+16     	; 0x14fa <setMotorDirection+0x3a>
		topPoint = rollPoint;
    14ea:	80 91 03 01 	lds	r24, 0x0103
    14ee:	90 91 04 01 	lds	r25, 0x0104
    14f2:	90 93 08 01 	sts	0x0108, r25
    14f6:	80 93 07 01 	sts	0x0107, r24

	// Enable interrupts from timer 0
	TIMSK |= (1<<TOIE0);	
    14fa:	89 b7       	in	r24, 0x39	; 57
    14fc:	81 60       	ori	r24, 0x01	; 1
    14fe:	89 bf       	out	0x39, r24	; 57
    1500:	08 95       	ret

00001502 <stopCycleRolling>:
}

void stopCycleRolling(uint8_t doResetPoints)
{
	// Disable interrupts from timer0 
	TIMSK &= ~(1<<TOIE0);
    1502:	99 b7       	in	r25, 0x39	; 57
    1504:	9e 7f       	andi	r25, 0xFE	; 254
    1506:	99 bf       	out	0x39, r25	; 57
	
	rollState &= ~ROLL_CYCLE;
    1508:	90 91 fd 00 	lds	r25, 0x00FD
    150c:	9b 7f       	andi	r25, 0xFB	; 251
    150e:	90 93 fd 00 	sts	0x00FD, r25
	if (doResetPoints)
    1512:	88 23       	and	r24, r24
    1514:	71 f0       	breq	.+28     	; 0x1532 <stopCycleRolling+0x30>
	{
		topPoint = bottomPoint = rollPoint;
    1516:	80 91 03 01 	lds	r24, 0x0103
    151a:	90 91 04 01 	lds	r25, 0x0104
    151e:	90 93 06 01 	sts	0x0106, r25
    1522:	80 93 05 01 	sts	0x0105, r24
    1526:	90 93 08 01 	sts	0x0108, r25
    152a:	80 93 07 01 	sts	0x0107, r24
		activeRollCycle = 0;	
    152e:	10 92 fc 00 	sts	0x00FC, r1
	}		
	
	// Enable interrupts from timer 0
	TIMSK |= (1<<TOIE0);
    1532:	89 b7       	in	r24, 0x39	; 57
    1534:	81 60       	ori	r24, 0x01	; 1
    1536:	89 bf       	out	0x39, r24	; 57
    1538:	08 95       	ret

0000153a <isTopPointValid>:



uint8_t isTopPointValid(void)
{
	return (	(int16_t)(topPoint - rollPoint) >= 0 );
    153a:	80 91 07 01 	lds	r24, 0x0107
    153e:	90 91 08 01 	lds	r25, 0x0108
    1542:	20 91 03 01 	lds	r18, 0x0103
    1546:	30 91 04 01 	lds	r19, 0x0104
    154a:	82 1b       	sub	r24, r18
    154c:	93 0b       	sbc	r25, r19
    154e:	89 2f       	mov	r24, r25
    1550:	80 95       	com	r24
}
    1552:	88 1f       	adc	r24, r24
    1554:	88 27       	eor	r24, r24
    1556:	88 1f       	adc	r24, r24
    1558:	08 95       	ret

0000155a <isBottomPointValid>:

uint8_t isBottomPointValid(void)
{
	return (	(int16_t)(rollPoint - bottomPoint) >= 0	);
    155a:	80 91 03 01 	lds	r24, 0x0103
    155e:	90 91 04 01 	lds	r25, 0x0104
    1562:	20 91 05 01 	lds	r18, 0x0105
    1566:	30 91 06 01 	lds	r19, 0x0106
    156a:	82 1b       	sub	r24, r18
    156c:	93 0b       	sbc	r25, r19
    156e:	89 2f       	mov	r24, r25
    1570:	80 95       	com	r24
}
    1572:	88 1f       	adc	r24, r24
    1574:	88 27       	eor	r24, r24
    1576:	88 1f       	adc	r24, r24
    1578:	08 95       	ret

0000157a <startCycleRolling>:


uint8_t startCycleRolling(void)
{
	// Disable interrupts from timer0 
	TIMSK &= ~(1<<TOIE0);
    157a:	89 b7       	in	r24, 0x39	; 57
    157c:	8e 7f       	andi	r24, 0xFE	; 254
    157e:	89 bf       	out	0x39, r24	; 57
	
	if ( isTopPointValid() && isBottomPointValid() )
    1580:	dc df       	rcall	.-72     	; 0x153a <isTopPointValid>
    1582:	88 23       	and	r24, r24
    1584:	59 f0       	breq	.+22     	; 0x159c <startCycleRolling+0x22>
    1586:	e9 df       	rcall	.-46     	; 0x155a <isBottomPointValid>
    1588:	88 23       	and	r24, r24
    158a:	41 f0       	breq	.+16     	; 0x159c <startCycleRolling+0x22>
	{
		rollState |= ROLL_CYCLE;
    158c:	80 91 fd 00 	lds	r24, 0x00FD
    1590:	84 60       	ori	r24, 0x04	; 4
    1592:	80 93 fd 00 	sts	0x00FD, r24
		activeRollCycle = 1;
    1596:	81 e0       	ldi	r24, 0x01	; 1
    1598:	80 93 fc 00 	sts	0x00FC, r24
	}
	
	// Enable interrupts from timer 0
	TIMSK |= (1<<TOIE0);
    159c:	89 b7       	in	r24, 0x39	; 57
    159e:	81 60       	ori	r24, 0x01	; 1
    15a0:	89 bf       	out	0x39, r24	; 57
	
	return (rollState & ROLL_CYCLE);
    15a2:	80 91 fd 00 	lds	r24, 0x00FD
}
    15a6:	84 70       	andi	r24, 0x04	; 4
    15a8:	08 95       	ret

000015aa <__vector_16>:




ISR(ANA_COMP_vect)
{
    15aa:	1f 92       	push	r1
    15ac:	0f 92       	push	r0
    15ae:	0f b6       	in	r0, 0x3f	; 63
    15b0:	0f 92       	push	r0
    15b2:	11 24       	eor	r1, r1
    15b4:	8f 93       	push	r24
    15b6:	9f 93       	push	r25
	// Once triggered, disable further comparator interrupt
	ACSR &= ~(1<<ACIE);
    15b8:	43 98       	cbi	0x08, 3	; 8
	// Turn on heater TRIAC
	if (heater_cnt < ctrl_heater_sync)
    15ba:	90 91 01 01 	lds	r25, 0x0101
    15be:	80 91 09 01 	lds	r24, 0x0109
    15c2:	98 17       	cp	r25, r24
    15c4:	20 f4       	brcc	.+8      	; 0x15ce <__vector_16+0x24>
		PORTD |= (1<<PD_HEATER | 1<<PD_HEAT_INDIC);	// Direct heater indication
    15c6:	82 b3       	in	r24, 0x12	; 18
    15c8:	80 63       	ori	r24, 0x30	; 48
    15ca:	82 bb       	out	0x12, r24	; 18
    15cc:	01 c0       	rjmp	.+2      	; 0x15d0 <__vector_16+0x26>
	else
		PORTD &= ~(1<<PD_HEAT_INDIC);
    15ce:	95 98       	cbi	0x12, 5	; 18
	// Reprogram timer0
	TCNT0 = 256 - TRIAC_IMPULSE_TIME;		// Triac gate impulse time
    15d0:	86 ef       	ldi	r24, 0xF6	; 246
    15d2:	82 bf       	out	0x32, r24	; 50
	TIFR |= (1<<TOV0);						// Clear interrupt flag
    15d4:	88 b7       	in	r24, 0x38	; 56
    15d6:	81 60       	ori	r24, 0x01	; 1
    15d8:	88 bf       	out	0x38, r24	; 56
	// Modify state	
	p_state &= ~STATE_MASK;					// Start new state machine cycle
    15da:	80 91 7a 00 	lds	r24, 0x007A
    15de:	80 7f       	andi	r24, 0xF0	; 240
	p_state ^= HALF_PERIOD_FLAG;			// Toggle flag
    15e0:	80 58       	subi	r24, 0x80	; 128
    15e2:	80 93 7a 00 	sts	0x007A, r24
	
}
    15e6:	9f 91       	pop	r25
    15e8:	8f 91       	pop	r24
    15ea:	0f 90       	pop	r0
    15ec:	0f be       	out	0x3f, r0	; 63
    15ee:	0f 90       	pop	r0
    15f0:	1f 90       	pop	r1
    15f2:	18 95       	reti

000015f4 <__vector_9>:



ISR(TIMER0_OVF_vect)
{
    15f4:	1f 92       	push	r1
    15f6:	0f 92       	push	r0
    15f8:	0f b6       	in	r0, 0x3f	; 63
    15fa:	0f 92       	push	r0
    15fc:	11 24       	eor	r1, r1
    15fe:	2f 93       	push	r18
    1600:	3f 93       	push	r19
    1602:	4f 93       	push	r20
    1604:	5f 93       	push	r21
    1606:	6f 93       	push	r22
    1608:	7f 93       	push	r23
    160a:	8f 93       	push	r24
    160c:	9f 93       	push	r25
    160e:	af 93       	push	r26
    1610:	bf 93       	push	r27
    1612:	ef 93       	push	r30
    1614:	ff 93       	push	r31
	uint8_t temp;
	
	switch(p_state & STATE_MASK)
    1616:	80 91 7a 00 	lds	r24, 0x007A
    161a:	8f 70       	andi	r24, 0x0F	; 15
    161c:	81 30       	cpi	r24, 0x01	; 1
    161e:	49 f0       	breq	.+18     	; 0x1632 <__vector_9+0x3e>
    1620:	28 f0       	brcs	.+10     	; 0x162c <__vector_9+0x38>
    1622:	82 30       	cpi	r24, 0x02	; 2
    1624:	49 f0       	breq	.+18     	; 0x1638 <__vector_9+0x44>
    1626:	83 30       	cpi	r24, 0x03	; 3
    1628:	69 f4       	brne	.+26     	; 0x1644 <__vector_9+0x50>
    162a:	0b c0       	rjmp	.+22     	; 0x1642 <__vector_9+0x4e>
	{
		// TRIAC_IMPULSE_TIME finished
		case 0x00:
			// Turn off heater TRIAC
			PORTD &= ~(1<<PD_HEATER);
    162c:	94 98       	cbi	0x12, 4	; 18
			TCNT0 = 256 - (QUATER_PERIOD_TIME - TRIAC_IMPULSE_TIME);
    162e:	8c eb       	ldi	r24, 0xBC	; 188
    1630:	01 c0       	rjmp	.+2      	; 0x1634 <__vector_9+0x40>
			break;
		// QUATER_PERIOD_TIME finished	
		case 0x01:	
			TCNT0 = 256 - (SYNC_IGNORE_TIME - QUATER_PERIOD_TIME);
    1632:	82 ec       	ldi	r24, 0xC2	; 194
    1634:	82 bf       	out	0x32, r24	; 50
			break;	
    1636:	06 c0       	rjmp	.+12     	; 0x1644 <__vector_9+0x50>
		// SYNC_IGNORE_TIME finished	
		case 0x02:
			TCNT0 = 256 - SYNC_LOST_TIMEOUT;
    1638:	80 ee       	ldi	r24, 0xE0	; 224
    163a:	82 bf       	out	0x32, r24	; 50
			// Clear flag and enable interrupt from analog comparator
			ACSR |= (1<<ACI);
    163c:	44 9a       	sbi	0x08, 4	; 8
			ACSR |= (1<<ACIE);
    163e:	43 9a       	sbi	0x08, 3	; 8
			break;
    1640:	01 c0       	rjmp	.+2      	; 0x1644 <__vector_9+0x50>
		// SYNC_LOST_TIMEOUT finished
		case 0x03:
			// Error - sync is lost. It means that device has been disconnected from AC line.
			// Disable all power-consuming devices like LEDs and save user settings to EEPROM.
			exitPowerOff();
    1642:	f3 d8       	rcall	.-3610   	; 0x82a <exitPowerOff>
			// Sync is not present - do nothing
			break;
	}	

	// Full period check
	if ((p_state & (HALF_PERIOD_FLAG | STATE_MASK)) == (HALF_PERIOD_FLAG | 0x01))
    1644:	80 91 7a 00 	lds	r24, 0x007A
    1648:	8f 78       	andi	r24, 0x8F	; 143
    164a:	81 38       	cpi	r24, 0x81	; 129
    164c:	09 f0       	breq	.+2      	; 0x1650 <__vector_9+0x5c>
    164e:	a3 c0       	rjmp	.+326    	; 0x1796 <__vector_9+0x1a2>
	{
		// Full AC line period is done. Update controls.
		
		temp = PORTD;
    1650:	82 b3       	in	r24, 0x12	; 18
		temp &= ~(1<<PD_M1 | 1<<PD_M2);
    1652:	83 7f       	andi	r24, 0xF3	; 243
		if ( rollState & SKIP_CURRENT_MOTOR_CTRL )
    1654:	90 91 fd 00 	lds	r25, 0x00FD
    1658:	93 ff       	sbrs	r25, 3
    165a:	05 c0       	rjmp	.+10     	; 0x1666 <__vector_9+0x72>
		{
			// Direction control changed. Skip current period to allow TRIACs fully close
			rollState &= ~SKIP_CURRENT_MOTOR_CTRL;
    165c:	97 7f       	andi	r25, 0xF7	; 247
    165e:	90 93 fd 00 	sts	0x00FD, r25
			PORTD = temp; 	
    1662:	82 bb       	out	0x12, r24	; 18
    1664:	76 c0       	rjmp	.+236    	; 0x1752 <__vector_9+0x15e>
		}
		else
		{
			// Apply direction control 
			if (rollState & ROLL_FWD)
    1666:	90 ff       	sbrs	r25, 0
    1668:	02 c0       	rjmp	.+4      	; 0x166e <__vector_9+0x7a>
				temp |= (1<<PD_M1);
    166a:	84 60       	ori	r24, 0x04	; 4
    166c:	02 c0       	rjmp	.+4      	; 0x1672 <__vector_9+0x7e>
			else if (rollState & ROLL_REV)
    166e:	91 fd       	sbrc	r25, 1
				temp |= (1<<PD_M2);
    1670:	88 60       	ori	r24, 0x08	; 8
			PORTD = temp; 
    1672:	82 bb       	out	0x12, r24	; 18
// Function to process rolling - sets rotation direction for next period
// Call once per each AC line period
static inline void controlRolling()
{
	// Process cycle rolling
	switch(rollState & (ROLL_FWD | ROLL_REV | ROLL_CYCLE))
    1674:	40 91 fd 00 	lds	r20, 0x00FD
    1678:	84 2f       	mov	r24, r20
    167a:	87 70       	andi	r24, 0x07	; 7
    167c:	85 30       	cpi	r24, 0x05	; 5
    167e:	19 f0       	breq	.+6      	; 0x1686 <__vector_9+0x92>
    1680:	86 30       	cpi	r24, 0x06	; 6
    1682:	e9 f5       	brne	.+122    	; 0x16fe <__vector_9+0x10a>
    1684:	1d c0       	rjmp	.+58     	; 0x16c0 <__vector_9+0xcc>
//---------------------------------------------//
//---------------------------------------------//

static inline uint8_t reachedTopPoint(void)
{
	return (	(int16_t)(topPoint - rollPoint) <= 0 );
    1686:	80 91 07 01 	lds	r24, 0x0107
    168a:	90 91 08 01 	lds	r25, 0x0108
    168e:	20 91 03 01 	lds	r18, 0x0103
    1692:	30 91 04 01 	lds	r19, 0x0104
    1696:	82 1b       	sub	r24, r18
    1698:	93 0b       	sbc	r25, r19
{
	// Process cycle rolling
	switch(rollState & (ROLL_FWD | ROLL_REV | ROLL_CYCLE))
	{
		case (ROLL_FWD | ROLL_CYCLE):
			if (reachedTopPoint())
    169a:	18 16       	cp	r1, r24
    169c:	19 06       	cpc	r1, r25
    169e:	7c f1       	brlt	.+94     	; 0x16fe <__vector_9+0x10a>
			{
				if (activeRollCycle >= p.rollCycleSet)	
    16a0:	80 91 fc 00 	lds	r24, 0x00FC
    16a4:	90 91 3e 01 	lds	r25, 0x013E
    16a8:	89 17       	cp	r24, r25
    16aa:	28 f0       	brcs	.+10     	; 0x16b6 <__vector_9+0xc2>
				{
					// DONE!
					rollState &= ~ROLL_CYCLE;
    16ac:	4b 7f       	andi	r20, 0xFB	; 251
					rollState |= CYCLE_ROLL_DONE;
    16ae:	40 61       	ori	r20, 0x10	; 16
    16b0:	40 93 fd 00 	sts	0x00FD, r20
    16b4:	24 c0       	rjmp	.+72     	; 0x16fe <__vector_9+0x10a>
				}
				else
				{
					activeRollCycle++;
    16b6:	8f 5f       	subi	r24, 0xFF	; 255
    16b8:	80 93 fc 00 	sts	0x00FC, r24
					// Change dir	
					newDirReq = ROLL_REV;				
    16bc:	82 e0       	ldi	r24, 0x02	; 2
    16be:	1d c0       	rjmp	.+58     	; 0x16fa <__vector_9+0x106>
	return (	(int16_t)(topPoint - rollPoint) <= 0 );
}

static inline uint8_t reachedBottomPoint(void)
{
	return (	(int16_t)(rollPoint - bottomPoint) <= 0 );
    16c0:	80 91 03 01 	lds	r24, 0x0103
    16c4:	90 91 04 01 	lds	r25, 0x0104
    16c8:	20 91 05 01 	lds	r18, 0x0105
    16cc:	30 91 06 01 	lds	r19, 0x0106
    16d0:	82 1b       	sub	r24, r18
    16d2:	93 0b       	sbc	r25, r19
				}
			}
			break;
		
		case (ROLL_REV | ROLL_CYCLE):	
			if (reachedBottomPoint())
    16d4:	18 16       	cp	r1, r24
    16d6:	19 06       	cpc	r1, r25
    16d8:	94 f0       	brlt	.+36     	; 0x16fe <__vector_9+0x10a>
			{
				if (activeRollCycle >= p.rollCycleSet)	
    16da:	80 91 fc 00 	lds	r24, 0x00FC
    16de:	90 91 3e 01 	lds	r25, 0x013E
    16e2:	89 17       	cp	r24, r25
    16e4:	30 f0       	brcs	.+12     	; 0x16f2 <__vector_9+0xfe>
				{
					// DONE!
					rollState &= ~ROLL_CYCLE;
    16e6:	84 2f       	mov	r24, r20
    16e8:	8b 7f       	andi	r24, 0xFB	; 251
					rollState |= CYCLE_ROLL_DONE;
    16ea:	80 61       	ori	r24, 0x10	; 16
    16ec:	80 93 fd 00 	sts	0x00FD, r24
    16f0:	06 c0       	rjmp	.+12     	; 0x16fe <__vector_9+0x10a>
				}
				else
				{
					activeRollCycle++;
    16f2:	8f 5f       	subi	r24, 0xFF	; 255
    16f4:	80 93 fc 00 	sts	0x00FC, r24
					// Change dir	
					newDirReq = ROLL_FWD;
    16f8:	81 e0       	ldi	r24, 0x01	; 1
    16fa:	80 93 02 01 	sts	0x0102, r24
		default:
			break;
	}
	
	// Process direction change
	if ((rollState ^ newDirReq) & (ROLL_FWD | ROLL_REV))
    16fe:	20 91 fd 00 	lds	r18, 0x00FD
    1702:	90 91 02 01 	lds	r25, 0x0102
    1706:	89 2f       	mov	r24, r25
    1708:	82 27       	eor	r24, r18
    170a:	83 70       	andi	r24, 0x03	; 3
    170c:	19 f0       	breq	.+6      	; 0x1714 <__vector_9+0x120>
	{
		// ROLL_DIR_CHANGED is used for sound beep
		rollState |= (SKIP_CURRENT_MOTOR_CTRL | ROLL_DIR_CHANGED);
    170e:	28 62       	ori	r18, 0x28	; 40
    1710:	20 93 fd 00 	sts	0x00FD, r18
	}
	
	rollState &= ~(ROLL_FWD | ROLL_REV);
    1714:	80 91 fd 00 	lds	r24, 0x00FD
    1718:	8c 7f       	andi	r24, 0xFC	; 252
	rollState |= newDirReq;
    171a:	89 2b       	or	r24, r25
	rollState &= dirChangedMask;
    171c:	90 91 7b 00 	lds	r25, 0x007B
    1720:	89 23       	and	r24, r25
    1722:	80 93 fd 00 	sts	0x00FD, r24
	dirChangedMask = 0xFF;
    1726:	9f ef       	ldi	r25, 0xFF	; 255
    1728:	90 93 7b 00 	sts	0x007B, r25
	return (	(int16_t)(rollPoint - bottomPoint) <= 0 );
}

static inline void updateRollPoint(void)
{	
	if (rollState & ROLL_FWD)
    172c:	80 ff       	sbrs	r24, 0
    172e:	06 c0       	rjmp	.+12     	; 0x173c <__vector_9+0x148>
		rollPoint++;
    1730:	80 91 03 01 	lds	r24, 0x0103
    1734:	90 91 04 01 	lds	r25, 0x0104
    1738:	01 96       	adiw	r24, 0x01	; 1
    173a:	07 c0       	rjmp	.+14     	; 0x174a <__vector_9+0x156>
	else if (rollState & ROLL_REV)
    173c:	81 ff       	sbrs	r24, 1
    173e:	09 c0       	rjmp	.+18     	; 0x1752 <__vector_9+0x15e>
		rollPoint--;	
    1740:	80 91 03 01 	lds	r24, 0x0103
    1744:	90 91 04 01 	lds	r25, 0x0104
    1748:	01 97       	sbiw	r24, 0x01	; 1
    174a:	90 93 04 01 	sts	0x0104, r25
    174e:	80 93 03 01 	sts	0x0103, r24
			controlRolling();
		}
			

		// Process heater control 
		if (heater_cnt == HEATER_REGULATION_PERIODS - 6)
    1752:	80 91 01 01 	lds	r24, 0x0101
    1756:	8c 32       	cpi	r24, 0x2C	; 44
    1758:	81 f4       	brne	.+32     	; 0x177a <__vector_9+0x186>
		{
			 if (heater_reg_cnt == HEATER_PID_CALL_INTERVAL - 1)
    175a:	80 91 fe 00 	lds	r24, 0x00FE
    175e:	83 30       	cpi	r24, 0x03	; 3
    1760:	49 f4       	brne	.+18     	; 0x1774 <__vector_9+0x180>
			 {
				 heater_reg_cnt = 0;
    1762:	10 92 fe 00 	sts	0x00FE, r1
				 // Set flag for PID control
				 heaterState |= READY_TO_UPDATE_HEATER;
    1766:	80 91 ff 00 	lds	r24, 0x00FF
    176a:	80 68       	ori	r24, 0x80	; 128
    176c:	80 93 ff 00 	sts	0x00FF, r24
				 // Save temperature measure at current time
				 samplePIDProcessValue();
    1770:	1d d7       	rcall	.+3642   	; 0x25ac <__data_load_end+0x9e0>
    1772:	03 c0       	rjmp	.+6      	; 0x177a <__vector_9+0x186>
			 }
			 else
			 {
				 heater_reg_cnt++;
    1774:	8f 5f       	subi	r24, 0xFF	; 255
    1776:	80 93 fe 00 	sts	0x00FE, r24
			 }
		}			 
		
		
		if (heater_cnt == HEATER_REGULATION_PERIODS - 1)
    177a:	80 91 01 01 	lds	r24, 0x0101
    177e:	81 33       	cpi	r24, 0x31	; 49
    1780:	39 f4       	brne	.+14     	; 0x1790 <__vector_9+0x19c>
		{
			heater_cnt = 0;
    1782:	10 92 01 01 	sts	0x0101, r1
			// Copy new output value
			ctrl_heater_sync = ctrl_heater;
    1786:	80 91 00 01 	lds	r24, 0x0100
    178a:	80 93 09 01 	sts	0x0109, r24
    178e:	03 c0       	rjmp	.+6      	; 0x1796 <__vector_9+0x1a2>
		}
		else
		{
			heater_cnt++;
    1790:	8f 5f       	subi	r24, 0xFF	; 255
    1792:	80 93 01 01 	sts	0x0101, r24
			
			
	}
	

	if ((p_state & STATE_MASK)  != 0x0F)
    1796:	80 91 7a 00 	lds	r24, 0x007A
    179a:	98 2f       	mov	r25, r24
    179c:	9f 70       	andi	r25, 0x0F	; 15
    179e:	9f 30       	cpi	r25, 0x0F	; 15
    17a0:	19 f0       	breq	.+6      	; 0x17a8 <__vector_9+0x1b4>
		p_state++;
    17a2:	8f 5f       	subi	r24, 0xFF	; 255
    17a4:	80 93 7a 00 	sts	0x007A, r24

}	
    17a8:	ff 91       	pop	r31
    17aa:	ef 91       	pop	r30
    17ac:	bf 91       	pop	r27
    17ae:	af 91       	pop	r26
    17b0:	9f 91       	pop	r25
    17b2:	8f 91       	pop	r24
    17b4:	7f 91       	pop	r23
    17b6:	6f 91       	pop	r22
    17b8:	5f 91       	pop	r21
    17ba:	4f 91       	pop	r20
    17bc:	3f 91       	pop	r19
    17be:	2f 91       	pop	r18
    17c0:	0f 90       	pop	r0
    17c2:	0f be       	out	0x3f, r0	; 63
    17c4:	0f 90       	pop	r0
    17c6:	1f 90       	pop	r1
    17c8:	18 95       	reti

000017ca <processSoftTimer8b>:
 
 
 
 
 void processSoftTimer8b(SoftTimer8b_t *tmr)
 {
    17ca:	fc 01       	movw	r30, r24
	 uint8_t newTimerVal;

	 if (!tmr->Enabled)
    17cc:	90 81       	ld	r25, Z
    17ce:	90 ff       	sbrs	r25, 0
    17d0:	27 c0       	rjmp	.+78     	; 0x1820 <processSoftTimer8b+0x56>
		return;
	 
	 tmr->FA_EQ = 0;
	 tmr->FA_GE = 0;
	 tmr->FTop = 0;
    17d2:	97 7e       	andi	r25, 0xE7	; 231
    17d4:	9f 7d       	andi	r25, 0xDF	; 223
    17d6:	90 83       	st	Z, r25
	 
	 if (tmr->Timer >= tmr->Top)
    17d8:	81 81       	ldd	r24, Z+1	; 0x01
    17da:	22 81       	ldd	r18, Z+2	; 0x02
    17dc:	82 17       	cp	r24, r18
    17de:	50 f0       	brcs	.+20     	; 0x17f4 <processSoftTimer8b+0x2a>
	 {
		 if (tmr->RunOnce)
    17e0:	91 ff       	sbrs	r25, 1
    17e2:	02 c0       	rjmp	.+4      	; 0x17e8 <processSoftTimer8b+0x1e>
		 {
			 tmr->Enabled = 0;
    17e4:	9e 7f       	andi	r25, 0xFE	; 254
    17e6:	90 83       	st	Z, r25
		 }
		 tmr->FTop = 1;
    17e8:	90 81       	ld	r25, Z
		 tmr->FOvfl = 1;
    17ea:	90 62       	ori	r25, 0x20	; 32
    17ec:	90 64       	ori	r25, 0x40	; 64
    17ee:	90 83       	st	Z, r25
		 newTimerVal = 0;
    17f0:	20 e0       	ldi	r18, 0x00	; 0
    17f2:	02 c0       	rjmp	.+4      	; 0x17f8 <processSoftTimer8b+0x2e>
	 }
	 else
	 {
		 newTimerVal = tmr->Timer + 1;
    17f4:	28 2f       	mov	r18, r24
    17f6:	2f 5f       	subi	r18, 0xFF	; 255
	 }
	 
	 if (tmr->Timer == tmr->CompA)
    17f8:	93 81       	ldd	r25, Z+3	; 0x03
    17fa:	89 13       	cpse	r24, r25
    17fc:	0b c0       	rjmp	.+22     	; 0x1814 <processSoftTimer8b+0x4a>
	 {
		 tmr->FA_EQ = 1;
    17fe:	80 81       	ld	r24, Z
		 tmr->FA_GE = 1;
    1800:	88 60       	ori	r24, 0x08	; 8
    1802:	80 61       	ori	r24, 0x10	; 16
		 tmr->FA_TGL = !tmr->FA_TGL;
    1804:	82 fb       	bst	r24, 2
    1806:	99 27       	eor	r25, r25
    1808:	90 f9       	bld	r25, 0
    180a:	31 e0       	ldi	r19, 0x01	; 1
    180c:	93 27       	eor	r25, r19
    180e:	90 fb       	bst	r25, 0
    1810:	82 f9       	bld	r24, 2
    1812:	04 c0       	rjmp	.+8      	; 0x181c <processSoftTimer8b+0x52>
	 }
	 else if (tmr->Timer >= tmr->CompA)
    1814:	89 17       	cp	r24, r25
    1816:	18 f0       	brcs	.+6      	; 0x181e <processSoftTimer8b+0x54>
	 {
		 tmr->FA_GE = 1;
    1818:	80 81       	ld	r24, Z
    181a:	80 61       	ori	r24, 0x10	; 16
    181c:	80 83       	st	Z, r24
	 }
	 
	 tmr->Timer = newTimerVal; 
    181e:	21 83       	std	Z+1, r18	; 0x01
    1820:	08 95       	ret

00001822 <processSystemTimers>:



void processSystemTimers(void)
{
	sys_timers.flags = 0x00;
    1822:	10 92 81 00 	sts	0x0081, r1
	
	// Process Celsius counter
	if (--sys_timers.celsius_upd_counter == 0)
    1826:	80 91 7c 00 	lds	r24, 0x007C
    182a:	81 50       	subi	r24, 0x01	; 1
    182c:	19 f0       	breq	.+6      	; 0x1834 <processSystemTimers+0x12>
    182e:	80 93 7c 00 	sts	0x007C, r24
    1832:	06 c0       	rjmp	.+12     	; 0x1840 <processSystemTimers+0x1e>
	{
		sys_timers.celsius_upd_counter = CELSIUS_UDPATE_INTERVAL;
    1834:	84 e0       	ldi	r24, 0x04	; 4
    1836:	80 93 7c 00 	sts	0x007C, r24
		sys_timers.flags |= EXPIRED_CELSIUS;
    183a:	81 e0       	ldi	r24, 0x01	; 1
    183c:	80 93 81 00 	sts	0x0081, r24
	}
	
	// Process log counter
	if (--sys_timers.log_counter == 0)
    1840:	80 91 80 00 	lds	r24, 0x0080
    1844:	81 50       	subi	r24, 0x01	; 1
    1846:	19 f0       	breq	.+6      	; 0x184e <processSystemTimers+0x2c>
    1848:	80 93 80 00 	sts	0x0080, r24
    184c:	08 c0       	rjmp	.+16     	; 0x185e <processSystemTimers+0x3c>
	{
		sys_timers.log_counter = LOG_INTERVAL;
    184e:	82 e0       	ldi	r24, 0x02	; 2
    1850:	80 93 80 00 	sts	0x0080, r24
		sys_timers.flags |= EXPIRED_LOG;
    1854:	80 91 81 00 	lds	r24, 0x0081
    1858:	80 62       	ori	r24, 0x20	; 32
    185a:	80 93 81 00 	sts	0x0081, r24
	}
	
	// Process 10 seconds counter
	if (--sys_timers.counter_10sec == 0)
    185e:	80 91 7d 00 	lds	r24, 0x007D
    1862:	81 50       	subi	r24, 0x01	; 1
    1864:	80 93 7d 00 	sts	0x007D, r24
    1868:	81 11       	cpse	r24, r1
    186a:	34 c0       	rjmp	.+104    	; 0x18d4 <processSystemTimers+0xb2>
	{
		sys_timers.counter_10sec = COUNTER_10SEC_INTERVAL;
    186c:	88 ec       	ldi	r24, 0xC8	; 200
    186e:	80 93 7d 00 	sts	0x007D, r24
		sys_timers.flags |= EXPIRED_10SEC;
    1872:	40 91 81 00 	lds	r20, 0x0081
    1876:	84 2f       	mov	r24, r20
    1878:	82 60       	ori	r24, 0x02	; 2
    187a:	80 93 81 00 	sts	0x0081, r24
		
		// Process 1 minute counter
		if (--sys_timers.counter_1min == 0)
    187e:	80 91 7e 00 	lds	r24, 0x007E
    1882:	81 50       	subi	r24, 0x01	; 1
    1884:	80 93 7e 00 	sts	0x007E, r24
    1888:	81 11       	cpse	r24, r1
    188a:	24 c0       	rjmp	.+72     	; 0x18d4 <processSystemTimers+0xb2>
		{
			sys_timers.counter_1min = COUNTER_1MIN_INTERVAL;
    188c:	86 e0       	ldi	r24, 0x06	; 6
    188e:	80 93 7e 00 	sts	0x007E, r24
			sys_timers.flags |= EXPIRED_1MIN;
    1892:	84 2f       	mov	r24, r20
    1894:	86 60       	ori	r24, 0x06	; 6
    1896:	80 93 81 00 	sts	0x0081, r24
			
			// Process auto power off counter
			if (sys_timers.poff_counter != MAX_POWEROFF_TIMEOUT - 1)
    189a:	80 91 7f 00 	lds	r24, 0x007F
    189e:	8e 35       	cpi	r24, 0x5E	; 94
    18a0:	19 f0       	breq	.+6      	; 0x18a8 <processSystemTimers+0x86>
				sys_timers.poff_counter++;
    18a2:	8f 5f       	subi	r24, 0xFF	; 255
    18a4:	80 93 7f 00 	sts	0x007F, r24
			if (sys_timers.poff_counter == p.power_off_timeout - 1)
    18a8:	60 91 7f 00 	lds	r22, 0x007F
    18ac:	50 91 40 01 	lds	r21, 0x0140
    18b0:	26 2f       	mov	r18, r22
    18b2:	30 e0       	ldi	r19, 0x00	; 0
    18b4:	85 2f       	mov	r24, r21
    18b6:	90 e0       	ldi	r25, 0x00	; 0
    18b8:	01 97       	sbiw	r24, 0x01	; 1
    18ba:	28 17       	cp	r18, r24
    18bc:	39 07       	cpc	r19, r25
    18be:	19 f4       	brne	.+6      	; 0x18c6 <processSystemTimers+0xa4>
				sys_timers.flags |= AUTOPOFF_SOON;
    18c0:	4e 60       	ori	r20, 0x0E	; 14
    18c2:	40 93 81 00 	sts	0x0081, r20
			if (sys_timers.poff_counter == p.power_off_timeout)
    18c6:	65 13       	cpse	r22, r21
    18c8:	05 c0       	rjmp	.+10     	; 0x18d4 <processSystemTimers+0xb2>
				sys_timers.flags |= AUTOPOFF_EXPIRED;			
    18ca:	80 91 81 00 	lds	r24, 0x0081
    18ce:	80 61       	ori	r24, 0x10	; 16
    18d0:	80 93 81 00 	sts	0x0081, r24
    18d4:	08 95       	ret

000018d6 <resetAutoPowerOffCounter>:
}


void resetAutoPowerOffCounter(void)
{
	sys_timers.poff_counter = 0;
    18d6:	10 92 7f 00 	sts	0x007F, r1
    18da:	08 95       	ret

000018dc <SetBeeperFreq>:
}

// Setup beeper frequency (Hz)
void SetBeeperFreq(uint16_t freq_hz)
{
	uint16_t period_us = 1000000 / freq_hz;
    18dc:	9c 01       	movw	r18, r24
    18de:	40 e0       	ldi	r20, 0x00	; 0
    18e0:	50 e0       	ldi	r21, 0x00	; 0
    18e2:	60 e4       	ldi	r22, 0x40	; 64
    18e4:	72 e4       	ldi	r23, 0x42	; 66
    18e6:	8f e0       	ldi	r24, 0x0F	; 15
    18e8:	90 e0       	ldi	r25, 0x00	; 0
    18ea:	d0 d0       	rcall	.+416    	; 0x1a8c <__divmodsi4>
	if (period_us & 0xFFF8)
    18ec:	da 01       	movw	r26, r20
    18ee:	c9 01       	movw	r24, r18
    18f0:	88 7f       	andi	r24, 0xF8	; 248
    18f2:	aa 27       	eor	r26, r26
    18f4:	bb 27       	eor	r27, r27
    18f6:	89 2b       	or	r24, r25
    18f8:	51 f0       	breq	.+20     	; 0x190e <SetBeeperFreq+0x32>
		OCR1A = (period_us>>3) - 1;
    18fa:	43 e0       	ldi	r20, 0x03	; 3
    18fc:	36 95       	lsr	r19
    18fe:	27 95       	ror	r18
    1900:	4a 95       	dec	r20
    1902:	e1 f7       	brne	.-8      	; 0x18fc <SetBeeperFreq+0x20>
    1904:	21 50       	subi	r18, 0x01	; 1
    1906:	31 09       	sbc	r19, r1
    1908:	3b bd       	out	0x2b, r19	; 43
    190a:	2a bd       	out	0x2a, r18	; 42
    190c:	04 c0       	rjmp	.+8      	; 0x1916 <SetBeeperFreq+0x3a>
	else
		OCR1A = 0x1;
    190e:	81 e0       	ldi	r24, 0x01	; 1
    1910:	90 e0       	ldi	r25, 0x00	; 0
    1912:	9b bd       	out	0x2b, r25	; 43
    1914:	8a bd       	out	0x2a, r24	; 42
	TCNT1 = 0;
    1916:	1d bc       	out	0x2d, r1	; 45
    1918:	1c bc       	out	0x2c, r1	; 44
    191a:	08 95       	ret

0000191c <StartBeep>:
}

// Beep for some time in ms
void StartBeep(uint16_t time_ms)
{
	if ( (p.sound_enable) || (enableOverride) )
    191c:	20 91 3f 01 	lds	r18, 0x013F
    1920:	21 11       	cpse	r18, r1
    1922:	04 c0       	rjmp	.+8      	; 0x192c <StartBeep+0x10>
    1924:	20 91 0a 01 	lds	r18, 0x010A
    1928:	22 23       	and	r18, r18
    192a:	39 f0       	breq	.+14     	; 0x193a <StartBeep+0x1e>
	{
		beep_cnt = time_ms;
    192c:	90 93 0c 01 	sts	0x010C, r25
    1930:	80 93 0b 01 	sts	0x010B, r24
// Enable / disable beeper output
inline void SetBeepOutput(uint8_t val)
{
	if (val)
		// Toggle OCR1A on compare match
		TCCR1A |= (1<<COM1A0);
    1934:	8f b5       	in	r24, 0x2f	; 47
    1936:	80 64       	ori	r24, 0x40	; 64
    1938:	8f bd       	out	0x2f, r24	; 47
	if ( (p.sound_enable) || (enableOverride) )
	{
		beep_cnt = time_ms;
		SetBeepOutput(1);		
	}
	enableOverride = 0;
    193a:	10 92 0a 01 	sts	0x010A, r1
    193e:	08 95       	ret

00001940 <OverrideSoundDisable>:
}

void OverrideSoundDisable(void)
{
	enableOverride = 1;
    1940:	81 e0       	ldi	r24, 0x01	; 1
    1942:	80 93 0a 01 	sts	0x010A, r24
    1946:	08 95       	ret

00001948 <__vector_3>:




ISR(TIMER2_COMP_vect)
{	
    1948:	1f 92       	push	r1
    194a:	0f 92       	push	r0
    194c:	0f b6       	in	r0, 0x3f	; 63
    194e:	0f 92       	push	r0
    1950:	11 24       	eor	r1, r1
    1952:	2f 93       	push	r18
    1954:	3f 93       	push	r19
    1956:	4f 93       	push	r20
    1958:	5f 93       	push	r21
    195a:	6f 93       	push	r22
    195c:	7f 93       	push	r23
    195e:	8f 93       	push	r24
    1960:	9f 93       	push	r25
    1962:	af 93       	push	r26
    1964:	bf 93       	push	r27
    1966:	ef 93       	push	r30
    1968:	ff 93       	push	r31
	
	// Manage beeper
	if (beep_cnt)
    196a:	80 91 0b 01 	lds	r24, 0x010B
    196e:	90 91 0c 01 	lds	r25, 0x010C
    1972:	00 97       	sbiw	r24, 0x00	; 0
    1974:	31 f0       	breq	.+12     	; 0x1982 <__vector_3+0x3a>
		beep_cnt--;
    1976:	01 97       	sbiw	r24, 0x01	; 1
    1978:	90 93 0c 01 	sts	0x010C, r25
    197c:	80 93 0b 01 	sts	0x010B, r24
    1980:	03 c0       	rjmp	.+6      	; 0x1988 <__vector_3+0x40>
	if (val)
		// Toggle OCR1A on compare match
		TCCR1A |= (1<<COM1A0);
	else
		// Disable OCR1A output
		TCCR1A &= ~(1<<COM1A0 | 1<<COM1A1);
    1982:	8f b5       	in	r24, 0x2f	; 47
    1984:	8f 73       	andi	r24, 0x3F	; 63
    1986:	8f bd       	out	0x2f, r24	; 47
		beep_cnt--;
	else
		SetBeepOutput(0);	// done
	
	// Manage LED indicator
	processLedIndicator();
    1988:	86 d7       	rcall	.+3852   	; 0x2896 <__data_load_end+0xcca>
	
	// Process menu update timer
	processSoftTimer8b(&menuUpdateTimer);	
    198a:	82 e8       	ldi	r24, 0x82	; 130
    198c:	90 e0       	ldi	r25, 0x00	; 0
    198e:	1d df       	rcall	.-454    	; 0x17ca <processSoftTimer8b>
	
	// Start ADC conversion 
	ADCSRA |= (1<<ADSC);
    1990:	36 9a       	sbi	0x06, 6	; 6
	
}
    1992:	ff 91       	pop	r31
    1994:	ef 91       	pop	r30
    1996:	bf 91       	pop	r27
    1998:	af 91       	pop	r26
    199a:	9f 91       	pop	r25
    199c:	8f 91       	pop	r24
    199e:	7f 91       	pop	r23
    19a0:	6f 91       	pop	r22
    19a2:	5f 91       	pop	r21
    19a4:	4f 91       	pop	r20
    19a6:	3f 91       	pop	r19
    19a8:	2f 91       	pop	r18
    19aa:	0f 90       	pop	r0
    19ac:	0f be       	out	0x3f, r0	; 63
    19ae:	0f 90       	pop	r0
    19b0:	1f 90       	pop	r1
    19b2:	18 95       	reti

000019b4 <USART_send>:



void USART_send( uint8_t data )
{
	UCSRA |= (1<<TXC);                 // Clear flag
    19b4:	5e 9a       	sbi	0x0b, 6	; 11
	UDR = data;
    19b6:	8c b9       	out	0x0c, r24	; 12
	while ( !(UCSRA & (1<<TXC)) );  // Wait
    19b8:	5e 9b       	sbis	0x0b, 6	; 11
    19ba:	fe cf       	rjmp	.-4      	; 0x19b8 <USART_send+0x4>
}
    19bc:	08 95       	ret

000019be <USART_sendstr>:


void USART_sendstr(char* str)
{
    19be:	1f 93       	push	r17
    19c0:	cf 93       	push	r28
    19c2:	df 93       	push	r29
    19c4:	ec 01       	movw	r28, r24
	uint8_t i = 0;
    19c6:	10 e0       	ldi	r17, 0x00	; 0
	while (str[i])
    19c8:	02 c0       	rjmp	.+4      	; 0x19ce <USART_sendstr+0x10>
	{
		USART_send(str[i++]);
    19ca:	1f 5f       	subi	r17, 0xFF	; 255
    19cc:	f3 df       	rcall	.-26     	; 0x19b4 <USART_send>


void USART_sendstr(char* str)
{
	uint8_t i = 0;
	while (str[i])
    19ce:	fe 01       	movw	r30, r28
    19d0:	e1 0f       	add	r30, r17
    19d2:	f1 1d       	adc	r31, r1
    19d4:	80 81       	ld	r24, Z
    19d6:	81 11       	cpse	r24, r1
    19d8:	f8 cf       	rjmp	.-16     	; 0x19ca <USART_sendstr+0xc>
	{
		USART_send(str[i++]);
	}
}
    19da:	df 91       	pop	r29
    19dc:	cf 91       	pop	r28
    19de:	1f 91       	pop	r17
    19e0:	08 95       	ret

000019e2 <__udivmodqi4>:
    19e2:	99 1b       	sub	r25, r25
    19e4:	79 e0       	ldi	r23, 0x09	; 9
    19e6:	04 c0       	rjmp	.+8      	; 0x19f0 <__udivmodqi4_ep>

000019e8 <__udivmodqi4_loop>:
    19e8:	99 1f       	adc	r25, r25
    19ea:	96 17       	cp	r25, r22
    19ec:	08 f0       	brcs	.+2      	; 0x19f0 <__udivmodqi4_ep>
    19ee:	96 1b       	sub	r25, r22

000019f0 <__udivmodqi4_ep>:
    19f0:	88 1f       	adc	r24, r24
    19f2:	7a 95       	dec	r23
    19f4:	c9 f7       	brne	.-14     	; 0x19e8 <__udivmodqi4_loop>
    19f6:	80 95       	com	r24
    19f8:	08 95       	ret

000019fa <__udivmodhi4>:
    19fa:	aa 1b       	sub	r26, r26
    19fc:	bb 1b       	sub	r27, r27
    19fe:	51 e1       	ldi	r21, 0x11	; 17
    1a00:	07 c0       	rjmp	.+14     	; 0x1a10 <__udivmodhi4_ep>

00001a02 <__udivmodhi4_loop>:
    1a02:	aa 1f       	adc	r26, r26
    1a04:	bb 1f       	adc	r27, r27
    1a06:	a6 17       	cp	r26, r22
    1a08:	b7 07       	cpc	r27, r23
    1a0a:	10 f0       	brcs	.+4      	; 0x1a10 <__udivmodhi4_ep>
    1a0c:	a6 1b       	sub	r26, r22
    1a0e:	b7 0b       	sbc	r27, r23

00001a10 <__udivmodhi4_ep>:
    1a10:	88 1f       	adc	r24, r24
    1a12:	99 1f       	adc	r25, r25
    1a14:	5a 95       	dec	r21
    1a16:	a9 f7       	brne	.-22     	; 0x1a02 <__udivmodhi4_loop>
    1a18:	80 95       	com	r24
    1a1a:	90 95       	com	r25
    1a1c:	bc 01       	movw	r22, r24
    1a1e:	cd 01       	movw	r24, r26
    1a20:	08 95       	ret

00001a22 <__divmodhi4>:
    1a22:	97 fb       	bst	r25, 7
    1a24:	07 2e       	mov	r0, r23
    1a26:	16 f4       	brtc	.+4      	; 0x1a2c <__divmodhi4+0xa>
    1a28:	00 94       	com	r0
    1a2a:	06 d0       	rcall	.+12     	; 0x1a38 <__divmodhi4_neg1>
    1a2c:	77 fd       	sbrc	r23, 7
    1a2e:	08 d0       	rcall	.+16     	; 0x1a40 <__divmodhi4_neg2>
    1a30:	e4 df       	rcall	.-56     	; 0x19fa <__udivmodhi4>
    1a32:	07 fc       	sbrc	r0, 7
    1a34:	05 d0       	rcall	.+10     	; 0x1a40 <__divmodhi4_neg2>
    1a36:	3e f4       	brtc	.+14     	; 0x1a46 <__divmodhi4_exit>

00001a38 <__divmodhi4_neg1>:
    1a38:	90 95       	com	r25
    1a3a:	81 95       	neg	r24
    1a3c:	9f 4f       	sbci	r25, 0xFF	; 255
    1a3e:	08 95       	ret

00001a40 <__divmodhi4_neg2>:
    1a40:	70 95       	com	r23
    1a42:	61 95       	neg	r22
    1a44:	7f 4f       	sbci	r23, 0xFF	; 255

00001a46 <__divmodhi4_exit>:
    1a46:	08 95       	ret

00001a48 <__udivmodsi4>:
    1a48:	a1 e2       	ldi	r26, 0x21	; 33
    1a4a:	1a 2e       	mov	r1, r26
    1a4c:	aa 1b       	sub	r26, r26
    1a4e:	bb 1b       	sub	r27, r27
    1a50:	fd 01       	movw	r30, r26
    1a52:	0d c0       	rjmp	.+26     	; 0x1a6e <__udivmodsi4_ep>

00001a54 <__udivmodsi4_loop>:
    1a54:	aa 1f       	adc	r26, r26
    1a56:	bb 1f       	adc	r27, r27
    1a58:	ee 1f       	adc	r30, r30
    1a5a:	ff 1f       	adc	r31, r31
    1a5c:	a2 17       	cp	r26, r18
    1a5e:	b3 07       	cpc	r27, r19
    1a60:	e4 07       	cpc	r30, r20
    1a62:	f5 07       	cpc	r31, r21
    1a64:	20 f0       	brcs	.+8      	; 0x1a6e <__udivmodsi4_ep>
    1a66:	a2 1b       	sub	r26, r18
    1a68:	b3 0b       	sbc	r27, r19
    1a6a:	e4 0b       	sbc	r30, r20
    1a6c:	f5 0b       	sbc	r31, r21

00001a6e <__udivmodsi4_ep>:
    1a6e:	66 1f       	adc	r22, r22
    1a70:	77 1f       	adc	r23, r23
    1a72:	88 1f       	adc	r24, r24
    1a74:	99 1f       	adc	r25, r25
    1a76:	1a 94       	dec	r1
    1a78:	69 f7       	brne	.-38     	; 0x1a54 <__udivmodsi4_loop>
    1a7a:	60 95       	com	r22
    1a7c:	70 95       	com	r23
    1a7e:	80 95       	com	r24
    1a80:	90 95       	com	r25
    1a82:	9b 01       	movw	r18, r22
    1a84:	ac 01       	movw	r20, r24
    1a86:	bd 01       	movw	r22, r26
    1a88:	cf 01       	movw	r24, r30
    1a8a:	08 95       	ret

00001a8c <__divmodsi4>:
    1a8c:	05 2e       	mov	r0, r21
    1a8e:	97 fb       	bst	r25, 7
    1a90:	16 f4       	brtc	.+4      	; 0x1a96 <__divmodsi4+0xa>
    1a92:	00 94       	com	r0
    1a94:	06 d0       	rcall	.+12     	; 0x1aa2 <__divmodsi4_neg1>
    1a96:	57 fd       	sbrc	r21, 7
    1a98:	0c d0       	rcall	.+24     	; 0x1ab2 <__divmodsi4_neg2>
    1a9a:	d6 df       	rcall	.-84     	; 0x1a48 <__udivmodsi4>
    1a9c:	07 fc       	sbrc	r0, 7
    1a9e:	09 d0       	rcall	.+18     	; 0x1ab2 <__divmodsi4_neg2>
    1aa0:	7e f4       	brtc	.+30     	; 0x1ac0 <__divmodsi4_exit>

00001aa2 <__divmodsi4_neg1>:
    1aa2:	90 95       	com	r25
    1aa4:	80 95       	com	r24
    1aa6:	70 95       	com	r23
    1aa8:	61 95       	neg	r22
    1aaa:	7f 4f       	sbci	r23, 0xFF	; 255
    1aac:	8f 4f       	sbci	r24, 0xFF	; 255
    1aae:	9f 4f       	sbci	r25, 0xFF	; 255
    1ab0:	08 95       	ret

00001ab2 <__divmodsi4_neg2>:
    1ab2:	50 95       	com	r21
    1ab4:	40 95       	com	r20
    1ab6:	30 95       	com	r19
    1ab8:	21 95       	neg	r18
    1aba:	3f 4f       	sbci	r19, 0xFF	; 255
    1abc:	4f 4f       	sbci	r20, 0xFF	; 255
    1abe:	5f 4f       	sbci	r21, 0xFF	; 255

00001ac0 <__divmodsi4_exit>:
    1ac0:	08 95       	ret

00001ac2 <__umulhisi3>:
    1ac2:	a2 9f       	mul	r26, r18
    1ac4:	b0 01       	movw	r22, r0
    1ac6:	b3 9f       	mul	r27, r19
    1ac8:	c0 01       	movw	r24, r0
    1aca:	a3 9f       	mul	r26, r19
    1acc:	01 d0       	rcall	.+2      	; 0x1ad0 <__umulhisi3+0xe>
    1ace:	b2 9f       	mul	r27, r18
    1ad0:	70 0d       	add	r23, r0
    1ad2:	81 1d       	adc	r24, r1
    1ad4:	11 24       	eor	r1, r1
    1ad6:	91 1d       	adc	r25, r1
    1ad8:	08 95       	ret

00001ada <__usmulhisi3>:
    1ada:	f3 df       	rcall	.-26     	; 0x1ac2 <__umulhisi3>

00001adc <__usmulhisi3_tail>:
    1adc:	b7 ff       	sbrs	r27, 7
    1ade:	08 95       	ret
    1ae0:	82 1b       	sub	r24, r18
    1ae2:	93 0b       	sbc	r25, r19
    1ae4:	08 95       	ret

00001ae6 <__muluhisi3>:
    1ae6:	ed df       	rcall	.-38     	; 0x1ac2 <__umulhisi3>
    1ae8:	a5 9f       	mul	r26, r21
    1aea:	90 0d       	add	r25, r0
    1aec:	b4 9f       	mul	r27, r20
    1aee:	90 0d       	add	r25, r0
    1af0:	a4 9f       	mul	r26, r20
    1af2:	80 0d       	add	r24, r0
    1af4:	91 1d       	adc	r25, r1
    1af6:	11 24       	eor	r1, r1
    1af8:	08 95       	ret

00001afa <__eerd_block_m8>:
    1afa:	dc 01       	movw	r26, r24
    1afc:	cb 01       	movw	r24, r22

00001afe <__eerd_blraw_m8>:
    1afe:	fc 01       	movw	r30, r24
    1b00:	e1 99       	sbic	0x1c, 1	; 28
    1b02:	fe cf       	rjmp	.-4      	; 0x1b00 <__eerd_blraw_m8+0x2>
    1b04:	06 c0       	rjmp	.+12     	; 0x1b12 <__eerd_blraw_m8+0x14>
    1b06:	ff bb       	out	0x1f, r31	; 31
    1b08:	ee bb       	out	0x1e, r30	; 30
    1b0a:	e0 9a       	sbi	0x1c, 0	; 28
    1b0c:	31 96       	adiw	r30, 0x01	; 1
    1b0e:	0d b2       	in	r0, 0x1d	; 29
    1b10:	0d 92       	st	X+, r0
    1b12:	41 50       	subi	r20, 0x01	; 1
    1b14:	50 40       	sbci	r21, 0x00	; 0
    1b16:	b8 f7       	brcc	.-18     	; 0x1b06 <__eerd_blraw_m8+0x8>
    1b18:	08 95       	ret

00001b1a <__eeupd_block_m8>:
    1b1a:	dc 01       	movw	r26, r24
    1b1c:	a4 0f       	add	r26, r20
    1b1e:	b5 1f       	adc	r27, r21
    1b20:	41 50       	subi	r20, 0x01	; 1
    1b22:	50 40       	sbci	r21, 0x00	; 0
    1b24:	40 f0       	brcs	.+16     	; 0x1b36 <__eeupd_block_m8+0x1c>
    1b26:	cb 01       	movw	r24, r22
    1b28:	84 0f       	add	r24, r20
    1b2a:	95 1f       	adc	r25, r21
    1b2c:	2e 91       	ld	r18, -X
    1b2e:	05 d0       	rcall	.+10     	; 0x1b3a <__eeupd_r18_m8>
    1b30:	41 50       	subi	r20, 0x01	; 1
    1b32:	50 40       	sbci	r21, 0x00	; 0
    1b34:	d8 f7       	brcc	.-10     	; 0x1b2c <__eeupd_block_m8+0x12>
    1b36:	08 95       	ret

00001b38 <__eeupd_byte_m8>:
    1b38:	26 2f       	mov	r18, r22

00001b3a <__eeupd_r18_m8>:
    1b3a:	e1 99       	sbic	0x1c, 1	; 28
    1b3c:	fe cf       	rjmp	.-4      	; 0x1b3a <__eeupd_r18_m8>
    1b3e:	9f bb       	out	0x1f, r25	; 31
    1b40:	8e bb       	out	0x1e, r24	; 30
    1b42:	e0 9a       	sbi	0x1c, 0	; 28
    1b44:	01 97       	sbiw	r24, 0x01	; 1
    1b46:	0d b2       	in	r0, 0x1d	; 29
    1b48:	02 16       	cp	r0, r18
    1b4a:	31 f0       	breq	.+12     	; 0x1b58 <__eeupd_r18_m8+0x1e>
    1b4c:	2d bb       	out	0x1d, r18	; 29
    1b4e:	0f b6       	in	r0, 0x3f	; 63
    1b50:	f8 94       	cli
    1b52:	e2 9a       	sbi	0x1c, 2	; 28
    1b54:	e1 9a       	sbi	0x1c, 1	; 28
    1b56:	0f be       	out	0x3f, r0	; 63
    1b58:	08 95       	ret

00001b5a <_exit>:
    1b5a:	f8 94       	cli

00001b5c <__stop_program>:
    1b5c:	ff cf       	rjmp	.-2      	; 0x1b5c <__stop_program>
