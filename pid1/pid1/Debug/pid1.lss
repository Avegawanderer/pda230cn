
pid1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001bfc  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000056  00800060  00001bfc  00001cb0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000008e  008000b6  008000b6  00001d06  2**0
                  ALLOC
  3 .eeprom       0000000a  00810000  00810000  00001d06  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         000007d4  00000000  00000000  00001d10  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      000000e3  00000000  00000000  000024e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      0000002f  00000000  00000000  000025c7  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 000003a0  00000000  00000000  000025f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00003974  00000000  00000000  00002996  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000012bd  00000000  00000000  0000630a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00001773  00000000  00000000  000075c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  0000087c  00000000  00000000  00008d3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000e5a  00000000  00000000  000095b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00001abc  00000000  00000000  0000a412  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000348  00000000  00000000  0000bece  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	19 c1       	rjmp	.+562    	; 0x234 <__ctors_end>
       2:	33 c1       	rjmp	.+614    	; 0x26a <__bad_interrupt>
       4:	32 c1       	rjmp	.+612    	; 0x26a <__bad_interrupt>
       6:	1a cd       	rjmp	.-1484   	; 0xfffffa3c <__eeprom_end+0xff7efa32>
       8:	30 c1       	rjmp	.+608    	; 0x26a <__bad_interrupt>
       a:	2f c1       	rjmp	.+606    	; 0x26a <__bad_interrupt>
       c:	2e c1       	rjmp	.+604    	; 0x26a <__bad_interrupt>
       e:	2d c1       	rjmp	.+602    	; 0x26a <__bad_interrupt>
      10:	2c c1       	rjmp	.+600    	; 0x26a <__bad_interrupt>
      12:	c3 cb       	rjmp	.-2170   	; 0xfffff79a <__eeprom_end+0xff7ef790>
      14:	2a c1       	rjmp	.+596    	; 0x26a <__bad_interrupt>
      16:	29 c1       	rjmp	.+594    	; 0x26a <__bad_interrupt>
      18:	28 c1       	rjmp	.+592    	; 0x26a <__bad_interrupt>
      1a:	27 c1       	rjmp	.+590    	; 0x26a <__bad_interrupt>
      1c:	04 c2       	rjmp	.+1032   	; 0x426 <__vector_14>
      1e:	25 c1       	rjmp	.+586    	; 0x26a <__bad_interrupt>
      20:	9a cb       	rjmp	.-2252   	; 0xfffff756 <__eeprom_end+0xff7ef74c>
      22:	23 c1       	rjmp	.+582    	; 0x26a <__bad_interrupt>
      24:	22 c1       	rjmp	.+580    	; 0x26a <__bad_interrupt>
      26:	a9 c4       	rjmp	.+2386   	; 0x97a <decode_led_char+0x48>
      28:	b9 c4       	rjmp	.+2418   	; 0x99c <decode_led_char+0x6a>
      2a:	b8 c4       	rjmp	.+2416   	; 0x99c <decode_led_char+0x6a>
      2c:	b7 c4       	rjmp	.+2414   	; 0x99c <decode_led_char+0x6a>
      2e:	b6 c4       	rjmp	.+2412   	; 0x99c <decode_led_char+0x6a>
      30:	b5 c4       	rjmp	.+2410   	; 0x99c <decode_led_char+0x6a>
      32:	b4 c4       	rjmp	.+2408   	; 0x99c <decode_led_char+0x6a>
      34:	b3 c4       	rjmp	.+2406   	; 0x99c <decode_led_char+0x6a>
      36:	b2 c4       	rjmp	.+2404   	; 0x99c <decode_led_char+0x6a>
      38:	b1 c4       	rjmp	.+2402   	; 0x99c <decode_led_char+0x6a>
      3a:	b0 c4       	rjmp	.+2400   	; 0x99c <decode_led_char+0x6a>
      3c:	af c4       	rjmp	.+2398   	; 0x99c <decode_led_char+0x6a>
      3e:	97 c4       	rjmp	.+2350   	; 0x96e <decode_led_char+0x3c>
      40:	98 c4       	rjmp	.+2352   	; 0x972 <decode_led_char+0x40>
      42:	93 c4       	rjmp	.+2342   	; 0x96a <decode_led_char+0x38>
      44:	ab c4       	rjmp	.+2390   	; 0x99c <decode_led_char+0x6a>
      46:	7f c4       	rjmp	.+2302   	; 0x946 <decode_led_char+0x14>
      48:	a8 c4       	rjmp	.+2384   	; 0x99a <decode_led_char+0x68>
      4a:	7f c4       	rjmp	.+2302   	; 0x94a <decode_led_char+0x18>
      4c:	80 c4       	rjmp	.+2304   	; 0x94e <decode_led_char+0x1c>
      4e:	81 c4       	rjmp	.+2306   	; 0x952 <decode_led_char+0x20>
      50:	82 c4       	rjmp	.+2308   	; 0x956 <decode_led_char+0x24>
      52:	83 c4       	rjmp	.+2310   	; 0x95a <decode_led_char+0x28>
      54:	84 c4       	rjmp	.+2312   	; 0x95e <decode_led_char+0x2c>
      56:	85 c4       	rjmp	.+2314   	; 0x962 <decode_led_char+0x30>
      58:	86 c4       	rjmp	.+2316   	; 0x966 <decode_led_char+0x34>
      5a:	a0 c4       	rjmp	.+2368   	; 0x99c <decode_led_char+0x6a>
      5c:	9f c4       	rjmp	.+2366   	; 0x99c <decode_led_char+0x6a>
      5e:	9e c4       	rjmp	.+2364   	; 0x99c <decode_led_char+0x6a>
      60:	9d c4       	rjmp	.+2362   	; 0x99c <decode_led_char+0x6a>
      62:	9c c4       	rjmp	.+2360   	; 0x99c <decode_led_char+0x6a>
      64:	9b c4       	rjmp	.+2358   	; 0x99c <decode_led_char+0x6a>
      66:	9a c4       	rjmp	.+2356   	; 0x99c <decode_led_char+0x6a>
      68:	99 c4       	rjmp	.+2354   	; 0x99c <decode_led_char+0x6a>
      6a:	98 c4       	rjmp	.+2352   	; 0x99c <decode_led_char+0x6a>
      6c:	8a c4       	rjmp	.+2324   	; 0x982 <decode_led_char+0x50>
      6e:	8f c4       	rjmp	.+2334   	; 0x98e <decode_led_char+0x5c>
      70:	92 c4       	rjmp	.+2340   	; 0x996 <decode_led_char+0x64>
      72:	89 c4       	rjmp	.+2322   	; 0x986 <decode_led_char+0x54>
      74:	93 c4       	rjmp	.+2342   	; 0x99c <decode_led_char+0x6a>
      76:	92 c4       	rjmp	.+2340   	; 0x99c <decode_led_char+0x6a>
      78:	91 c4       	rjmp	.+2338   	; 0x99c <decode_led_char+0x6a>
      7a:	90 c4       	rjmp	.+2336   	; 0x99c <decode_led_char+0x6a>
      7c:	8f c4       	rjmp	.+2334   	; 0x99c <decode_led_char+0x6a>
      7e:	8e c4       	rjmp	.+2332   	; 0x99c <decode_led_char+0x6a>
      80:	8d c4       	rjmp	.+2330   	; 0x99c <decode_led_char+0x6a>
      82:	83 c4       	rjmp	.+2310   	; 0x98a <decode_led_char+0x58>
      84:	60 c4       	rjmp	.+2240   	; 0x946 <decode_led_char+0x14>
      86:	85 c4       	rjmp	.+2314   	; 0x992 <decode_led_char+0x60>
      88:	89 c4       	rjmp	.+2322   	; 0x99c <decode_led_char+0x6a>
      8a:	88 c4       	rjmp	.+2320   	; 0x99c <decode_led_char+0x6a>
      8c:	64 c4       	rjmp	.+2248   	; 0x956 <decode_led_char+0x24>
      8e:	86 c4       	rjmp	.+2316   	; 0x99c <decode_led_char+0x6a>
      90:	85 c4       	rjmp	.+2314   	; 0x99c <decode_led_char+0x6a>
      92:	84 c4       	rjmp	.+2312   	; 0x99c <decode_led_char+0x6a>
      94:	83 c4       	rjmp	.+2310   	; 0x99c <decode_led_char+0x6a>
      96:	82 c4       	rjmp	.+2308   	; 0x99c <decode_led_char+0x6a>
      98:	81 c4       	rjmp	.+2306   	; 0x99c <decode_led_char+0x6a>
      9a:	80 c4       	rjmp	.+2304   	; 0x99c <decode_led_char+0x6a>
      9c:	7f c4       	rjmp	.+2302   	; 0x99c <decode_led_char+0x6a>
      9e:	7e c4       	rjmp	.+2300   	; 0x99c <decode_led_char+0x6a>
      a0:	7d c4       	rjmp	.+2298   	; 0x99c <decode_led_char+0x6a>
      a2:	7c c4       	rjmp	.+2296   	; 0x99c <decode_led_char+0x6a>
      a4:	68 c4       	rjmp	.+2256   	; 0x976 <decode_led_char+0x44>
      a6:	7a c4       	rjmp	.+2292   	; 0x99c <decode_led_char+0x6a>
      a8:	79 c4       	rjmp	.+2290   	; 0x99c <decode_led_char+0x6a>
      aa:	78 c4       	rjmp	.+2288   	; 0x99c <decode_led_char+0x6a>
      ac:	77 c4       	rjmp	.+2286   	; 0x99c <decode_led_char+0x6a>
      ae:	76 c4       	rjmp	.+2284   	; 0x99c <decode_led_char+0x6a>
      b0:	75 c4       	rjmp	.+2282   	; 0x99c <decode_led_char+0x6a>
      b2:	74 c4       	rjmp	.+2280   	; 0x99c <decode_led_char+0x6a>
      b4:	73 c4       	rjmp	.+2278   	; 0x99c <decode_led_char+0x6a>
      b6:	72 c4       	rjmp	.+2276   	; 0x99c <decode_led_char+0x6a>
      b8:	71 c4       	rjmp	.+2274   	; 0x99c <decode_led_char+0x6a>
      ba:	70 c4       	rjmp	.+2272   	; 0x99c <decode_led_char+0x6a>
      bc:	6f c4       	rjmp	.+2270   	; 0x99c <decode_led_char+0x6a>
      be:	6e c4       	rjmp	.+2268   	; 0x99c <decode_led_char+0x6a>
      c0:	6d c4       	rjmp	.+2266   	; 0x99c <decode_led_char+0x6a>
      c2:	6c c4       	rjmp	.+2264   	; 0x99c <decode_led_char+0x6a>
      c4:	6b c4       	rjmp	.+2262   	; 0x99c <decode_led_char+0x6a>
      c6:	6a c4       	rjmp	.+2260   	; 0x99c <decode_led_char+0x6a>
      c8:	69 c4       	rjmp	.+2258   	; 0x99c <decode_led_char+0x6a>
      ca:	68 c4       	rjmp	.+2256   	; 0x99c <decode_led_char+0x6a>
      cc:	67 c4       	rjmp	.+2254   	; 0x99c <decode_led_char+0x6a>
      ce:	66 c4       	rjmp	.+2252   	; 0x99c <decode_led_char+0x6a>
      d0:	65 c4       	rjmp	.+2250   	; 0x99c <decode_led_char+0x6a>
      d2:	64 c4       	rjmp	.+2248   	; 0x99c <decode_led_char+0x6a>
      d4:	63 c4       	rjmp	.+2246   	; 0x99c <decode_led_char+0x6a>
      d6:	62 c4       	rjmp	.+2244   	; 0x99c <decode_led_char+0x6a>
      d8:	61 c4       	rjmp	.+2242   	; 0x99c <decode_led_char+0x6a>
      da:	60 c4       	rjmp	.+2240   	; 0x99c <decode_led_char+0x6a>
      dc:	5f c4       	rjmp	.+2238   	; 0x99c <decode_led_char+0x6a>
      de:	5e c4       	rjmp	.+2236   	; 0x99c <decode_led_char+0x6a>
      e0:	5d c4       	rjmp	.+2234   	; 0x99c <decode_led_char+0x6a>
      e2:	5c c4       	rjmp	.+2232   	; 0x99c <decode_led_char+0x6a>
      e4:	5b c4       	rjmp	.+2230   	; 0x99c <decode_led_char+0x6a>
      e6:	5a c4       	rjmp	.+2228   	; 0x99c <decode_led_char+0x6a>
      e8:	59 c4       	rjmp	.+2226   	; 0x99c <decode_led_char+0x6a>
      ea:	58 c4       	rjmp	.+2224   	; 0x99c <decode_led_char+0x6a>
      ec:	57 c4       	rjmp	.+2222   	; 0x99c <decode_led_char+0x6a>
      ee:	56 c4       	rjmp	.+2220   	; 0x99c <decode_led_char+0x6a>
      f0:	55 c4       	rjmp	.+2218   	; 0x99c <decode_led_char+0x6a>
      f2:	54 c4       	rjmp	.+2216   	; 0x99c <decode_led_char+0x6a>
      f4:	53 c4       	rjmp	.+2214   	; 0x99c <decode_led_char+0x6a>
      f6:	52 c4       	rjmp	.+2212   	; 0x99c <decode_led_char+0x6a>
      f8:	51 c4       	rjmp	.+2210   	; 0x99c <decode_led_char+0x6a>
      fa:	50 c4       	rjmp	.+2208   	; 0x99c <decode_led_char+0x6a>
      fc:	4f c4       	rjmp	.+2206   	; 0x99c <decode_led_char+0x6a>
      fe:	4e c4       	rjmp	.+2204   	; 0x99c <decode_led_char+0x6a>
     100:	4d c4       	rjmp	.+2202   	; 0x99c <decode_led_char+0x6a>
     102:	4c c4       	rjmp	.+2200   	; 0x99c <decode_led_char+0x6a>
     104:	4b c4       	rjmp	.+2198   	; 0x99c <decode_led_char+0x6a>
     106:	4a c4       	rjmp	.+2196   	; 0x99c <decode_led_char+0x6a>
     108:	49 c4       	rjmp	.+2194   	; 0x99c <decode_led_char+0x6a>
     10a:	48 c4       	rjmp	.+2192   	; 0x99c <decode_led_char+0x6a>
     10c:	47 c4       	rjmp	.+2190   	; 0x99c <decode_led_char+0x6a>
     10e:	46 c4       	rjmp	.+2188   	; 0x99c <decode_led_char+0x6a>
     110:	45 c4       	rjmp	.+2186   	; 0x99c <decode_led_char+0x6a>
     112:	44 c4       	rjmp	.+2184   	; 0x99c <decode_led_char+0x6a>
     114:	43 c4       	rjmp	.+2182   	; 0x99c <decode_led_char+0x6a>
     116:	42 c4       	rjmp	.+2180   	; 0x99c <decode_led_char+0x6a>
     118:	41 c4       	rjmp	.+2178   	; 0x99c <decode_led_char+0x6a>
     11a:	40 c4       	rjmp	.+2176   	; 0x99c <decode_led_char+0x6a>
     11c:	3f c4       	rjmp	.+2174   	; 0x99c <decode_led_char+0x6a>
     11e:	3e c4       	rjmp	.+2172   	; 0x99c <decode_led_char+0x6a>
     120:	3d c4       	rjmp	.+2170   	; 0x99c <decode_led_char+0x6a>
     122:	3c c4       	rjmp	.+2168   	; 0x99c <decode_led_char+0x6a>
     124:	3b c4       	rjmp	.+2166   	; 0x99c <decode_led_char+0x6a>
     126:	3a c4       	rjmp	.+2164   	; 0x99c <decode_led_char+0x6a>
     128:	39 c4       	rjmp	.+2162   	; 0x99c <decode_led_char+0x6a>
     12a:	38 c4       	rjmp	.+2160   	; 0x99c <decode_led_char+0x6a>
     12c:	37 c4       	rjmp	.+2158   	; 0x99c <decode_led_char+0x6a>
     12e:	36 c4       	rjmp	.+2156   	; 0x99c <decode_led_char+0x6a>
     130:	35 c4       	rjmp	.+2154   	; 0x99c <decode_led_char+0x6a>
     132:	34 c4       	rjmp	.+2152   	; 0x99c <decode_led_char+0x6a>
     134:	33 c4       	rjmp	.+2150   	; 0x99c <decode_led_char+0x6a>
     136:	32 c4       	rjmp	.+2148   	; 0x99c <decode_led_char+0x6a>
     138:	31 c4       	rjmp	.+2146   	; 0x99c <decode_led_char+0x6a>
     13a:	30 c4       	rjmp	.+2144   	; 0x99c <decode_led_char+0x6a>
     13c:	2f c4       	rjmp	.+2142   	; 0x99c <decode_led_char+0x6a>
     13e:	2e c4       	rjmp	.+2140   	; 0x99c <decode_led_char+0x6a>
     140:	2d c4       	rjmp	.+2138   	; 0x99c <decode_led_char+0x6a>
     142:	2c c4       	rjmp	.+2136   	; 0x99c <decode_led_char+0x6a>
     144:	2b c4       	rjmp	.+2134   	; 0x99c <decode_led_char+0x6a>
     146:	1b c4       	rjmp	.+2102   	; 0x97e <decode_led_char+0x4c>

00000148 <menuFunctionSet>:
     148:	01 0b 09 b1 07 3f 08 03 3b 08 af 08 8f 06 02 ab     .....?..;.......
     158:	08 42 08 33 08 05 21 08 dc 07 00 00 0b 95 06 dc     .B.3..!.........
     168:	07 a3 06 04 21 08 5e 07 00 00 0c 95 06 5e 07 a3     ....!.^......^..
     178:	06 06 29 08 14 07 00 00 09 95 06 14 07 a3 06 07     ..).............
     188:	29 08 ca 06 00 00 0a 95 06 ca 06 a3 06 08 bc 06     )...............
     198:	a9 06 00 00 0d ae 06 a9 06 00 00                    ...........

000001a3 <menuJumpSet>:
     1a3:	01 06 00 03 a8 01 00 01 02 40 01 00 02 05 28 02     .........@....(.
     1b3:	00 01 01 80 03 00 83 01 40 05 00 82 01 00 05 04     ........@.......
     1c3:	00 04 68 05 02 00 07 a8 05 00 01 0b 28 0b 00 83     ..h.........(...
     1d3:	05 28 04 00 82 01 00 04 04 00 06 68 04 02 00 05     .(.........h....
     1e3:	a8 04 00 01 0c 28 0c 00 83 04 28 06 00 82 01 00     .....(....(.....
     1f3:	06 04 00 07 68 06 02 00 04 a8 06 00 01 09 00 07     ....h...........
     203:	00 82 01 00 07 04 00 05 68 07 02 00 06 a8 07 00     ........h.......
     213:	01 0a 00 09 00 02 06 00 09 00 01 08 14 08 00 83     ................
     223:	01 00 0a 00 02 07 00 0a 00 01 0d 14 0d 00 83 01     ................
	...

00000234 <__ctors_end>:
     234:	11 24       	eor	r1, r1
     236:	1f be       	out	0x3f, r1	; 63
     238:	cf e5       	ldi	r28, 0x5F	; 95
     23a:	d4 e0       	ldi	r29, 0x04	; 4
     23c:	de bf       	out	0x3e, r29	; 62
     23e:	cd bf       	out	0x3d, r28	; 61

00000240 <__do_copy_data>:
     240:	10 e0       	ldi	r17, 0x00	; 0
     242:	a0 e6       	ldi	r26, 0x60	; 96
     244:	b0 e0       	ldi	r27, 0x00	; 0
     246:	ec ef       	ldi	r30, 0xFC	; 252
     248:	fb e1       	ldi	r31, 0x1B	; 27
     24a:	02 c0       	rjmp	.+4      	; 0x250 <__do_copy_data+0x10>
     24c:	05 90       	lpm	r0, Z+
     24e:	0d 92       	st	X+, r0
     250:	a6 3b       	cpi	r26, 0xB6	; 182
     252:	b1 07       	cpc	r27, r17
     254:	d9 f7       	brne	.-10     	; 0x24c <__do_copy_data+0xc>

00000256 <__do_clear_bss>:
     256:	21 e0       	ldi	r18, 0x01	; 1
     258:	a6 eb       	ldi	r26, 0xB6	; 182
     25a:	b0 e0       	ldi	r27, 0x00	; 0
     25c:	01 c0       	rjmp	.+2      	; 0x260 <.do_clear_bss_start>

0000025e <.do_clear_bss_loop>:
     25e:	1d 92       	st	X+, r1

00000260 <.do_clear_bss_start>:
     260:	a4 34       	cpi	r26, 0x44	; 68
     262:	b2 07       	cpc	r27, r18
     264:	e1 f7       	brne	.-8      	; 0x25e <.do_clear_bss_loop>
     266:	d5 d8       	rcall	.-3670   	; 0xfffff412 <__eeprom_end+0xff7ef408>
     268:	c7 cc       	rjmp	.-1650   	; 0xfffffbf8 <__eeprom_end+0xff7efbee>

0000026a <__bad_interrupt>:
     26a:	ca ce       	rjmp	.-620    	; 0x0 <__vectors>

0000026c <conv_ADC_to_Celsius>:
//---------------------------------------------//
//---------------------------------------------//


uint16_t conv_ADC_to_Celsius(uint16_t adc_value)
{	
     26c:	0f 93       	push	r16
     26e:	1f 93       	push	r17
	return (uint16_t)(((int32_t)adc_value * k_norm + offset_norm) / (COEFF_SCALE));
     270:	20 91 b6 00 	lds	r18, 0x00B6
     274:	30 91 b7 00 	lds	r19, 0x00B7
     278:	40 91 b8 00 	lds	r20, 0x00B8
     27c:	50 91 b9 00 	lds	r21, 0x00B9
     280:	dc 01       	movw	r26, r24
     282:	8c dc       	rcall	.-1768   	; 0xfffffb9c <__eeprom_end+0xff7efb92>
     284:	00 91 ba 00 	lds	r16, 0x00BA
     288:	10 91 bb 00 	lds	r17, 0x00BB
     28c:	20 91 bc 00 	lds	r18, 0x00BC
     290:	30 91 bd 00 	lds	r19, 0x00BD
     294:	60 0f       	add	r22, r16
     296:	71 1f       	adc	r23, r17
     298:	82 1f       	adc	r24, r18
     29a:	93 1f       	adc	r25, r19
     29c:	28 ee       	ldi	r18, 0xE8	; 232
     29e:	33 e0       	ldi	r19, 0x03	; 3
     2a0:	40 e0       	ldi	r20, 0x00	; 0
     2a2:	50 e0       	ldi	r21, 0x00	; 0
     2a4:	4e dc       	rcall	.-1892   	; 0xfffffb42 <__eeprom_end+0xff7efb38>
}
     2a6:	82 2f       	mov	r24, r18
     2a8:	93 2f       	mov	r25, r19
     2aa:	1f 91       	pop	r17
     2ac:	0f 91       	pop	r16
     2ae:	08 95       	ret

000002b0 <conv_Celsius_to_ADC>:

uint16_t conv_Celsius_to_ADC(uint16_t degree_value)
{
     2b0:	0f 93       	push	r16
     2b2:	1f 93       	push	r17
	degree_value += 1;
     2b4:	9c 01       	movw	r18, r24
     2b6:	2f 5f       	subi	r18, 0xFF	; 255
     2b8:	3f 4f       	sbci	r19, 0xFF	; 255
	return (uint16_t)(((int32_t)degree_value * COEFF_SCALE - offset_norm) / k_norm);
     2ba:	a8 ee       	ldi	r26, 0xE8	; 232
     2bc:	b3 e0       	ldi	r27, 0x03	; 3
     2be:	5c dc       	rcall	.-1864   	; 0xfffffb78 <__eeprom_end+0xff7efb6e>
     2c0:	00 91 ba 00 	lds	r16, 0x00BA
     2c4:	10 91 bb 00 	lds	r17, 0x00BB
     2c8:	20 91 bc 00 	lds	r18, 0x00BC
     2cc:	30 91 bd 00 	lds	r19, 0x00BD
     2d0:	60 1b       	sub	r22, r16
     2d2:	71 0b       	sbc	r23, r17
     2d4:	82 0b       	sbc	r24, r18
     2d6:	93 0b       	sbc	r25, r19
     2d8:	20 91 b6 00 	lds	r18, 0x00B6
     2dc:	30 91 b7 00 	lds	r19, 0x00B7
     2e0:	40 91 b8 00 	lds	r20, 0x00B8
     2e4:	50 91 b9 00 	lds	r21, 0x00B9
     2e8:	2c dc       	rcall	.-1960   	; 0xfffffb42 <__eeprom_end+0xff7efb38>
}
     2ea:	82 2f       	mov	r24, r18
     2ec:	93 2f       	mov	r25, r19
     2ee:	1f 91       	pop	r17
     2f0:	0f 91       	pop	r16
     2f2:	08 95       	ret

000002f4 <calculateCoeffs>:

void calculateCoeffs(void)
{
     2f4:	8f 92       	push	r8
     2f6:	9f 92       	push	r9
     2f8:	af 92       	push	r10
     2fa:	bf 92       	push	r11
     2fc:	cf 92       	push	r12
     2fe:	df 92       	push	r13
     300:	ef 92       	push	r14
     302:	ff 92       	push	r15
     304:	cf 93       	push	r28
     306:	df 93       	push	r29
	k_norm = ((int32_t)(cpoint2 - cpoint1) * COEFF_SCALE) / ((int32_t)(cpoint2_adc - cpoint1_adc));
     308:	b0 90 10 01 	lds	r11, 0x0110
     30c:	c0 91 28 01 	lds	r28, 0x0128
     310:	d0 91 29 01 	lds	r29, 0x0129
     314:	a0 91 30 01 	lds	r26, 0x0130
     318:	b0 e0       	ldi	r27, 0x00	; 0
     31a:	ab 19       	sub	r26, r11
     31c:	b1 09       	sbc	r27, r1
     31e:	28 ee       	ldi	r18, 0xE8	; 232
     320:	33 e0       	ldi	r19, 0x03	; 3
     322:	36 dc       	rcall	.-1940   	; 0xfffffb90 <__eeprom_end+0xff7efb86>
     324:	20 91 2c 01 	lds	r18, 0x012C
     328:	30 91 2d 01 	lds	r19, 0x012D
     32c:	2c 1b       	sub	r18, r28
     32e:	3d 0b       	sbc	r19, r29
     330:	40 e0       	ldi	r20, 0x00	; 0
     332:	50 e0       	ldi	r21, 0x00	; 0
     334:	06 dc       	rcall	.-2036   	; 0xfffffb42 <__eeprom_end+0xff7efb38>
     336:	69 01       	movw	r12, r18
     338:	7a 01       	movw	r14, r20
     33a:	20 93 b6 00 	sts	0x00B6, r18
     33e:	30 93 b7 00 	sts	0x00B7, r19
     342:	40 93 b8 00 	sts	0x00B8, r20
     346:	50 93 b9 00 	sts	0x00B9, r21
	offset_norm = (int32_t)cpoint1 * COEFF_SCALE - (int32_t)cpoint1_adc * k_norm;
     34a:	2b 2d       	mov	r18, r11
     34c:	30 e0       	ldi	r19, 0x00	; 0
     34e:	a8 ee       	ldi	r26, 0xE8	; 232
     350:	b3 e0       	ldi	r27, 0x03	; 3
     352:	12 dc       	rcall	.-2012   	; 0xfffffb78 <__eeprom_end+0xff7efb6e>
     354:	4b 01       	movw	r8, r22
     356:	5c 01       	movw	r10, r24
     358:	de 01       	movw	r26, r28
     35a:	a7 01       	movw	r20, r14
     35c:	96 01       	movw	r18, r12
     35e:	1e dc       	rcall	.-1988   	; 0xfffffb9c <__eeprom_end+0xff7efb92>
     360:	86 1a       	sub	r8, r22
     362:	97 0a       	sbc	r9, r23
     364:	a8 0a       	sbc	r10, r24
     366:	b9 0a       	sbc	r11, r25
     368:	80 92 ba 00 	sts	0x00BA, r8
     36c:	90 92 bb 00 	sts	0x00BB, r9
     370:	a0 92 bc 00 	sts	0x00BC, r10
     374:	b0 92 bd 00 	sts	0x00BD, r11
}
     378:	df 91       	pop	r29
     37a:	cf 91       	pop	r28
     37c:	ff 90       	pop	r15
     37e:	ef 90       	pop	r14
     380:	df 90       	pop	r13
     382:	cf 90       	pop	r12
     384:	bf 90       	pop	r11
     386:	af 90       	pop	r10
     388:	9f 90       	pop	r9
     38a:	8f 90       	pop	r8
     38c:	08 95       	ret

0000038e <addToRingU16>:
//---------------------------------------------//
//---------------------------------------------//

// Ring buffer main function - add new data and update summ
void addToRingU16(RingBufU16_t* bptr, uint16_t sample)
{
     38e:	0f 93       	push	r16
     390:	1f 93       	push	r17
     392:	fc 01       	movw	r30, r24
     394:	cb 01       	movw	r24, r22
	if (bptr->stat == RNORM)
     396:	20 85       	ldd	r18, Z+8	; 0x08
     398:	21 11       	cpse	r18, r1
     39a:	17 c0       	rjmp	.+46     	; 0x3ca <addToRingU16+0x3c>
	{
		bptr->summ -= bptr->data[bptr->curr_pos];
     39c:	a7 81       	ldd	r26, Z+7	; 0x07
     39e:	b0 e0       	ldi	r27, 0x00	; 0
     3a0:	aa 0f       	add	r26, r26
     3a2:	bb 1f       	adc	r27, r27
     3a4:	21 81       	ldd	r18, Z+1	; 0x01
     3a6:	32 81       	ldd	r19, Z+2	; 0x02
     3a8:	a2 0f       	add	r26, r18
     3aa:	b3 1f       	adc	r27, r19
     3ac:	2d 91       	ld	r18, X+
     3ae:	3c 91       	ld	r19, X
     3b0:	43 81       	ldd	r20, Z+3	; 0x03
     3b2:	54 81       	ldd	r21, Z+4	; 0x04
     3b4:	65 81       	ldd	r22, Z+5	; 0x05
     3b6:	76 81       	ldd	r23, Z+6	; 0x06
     3b8:	42 1b       	sub	r20, r18
     3ba:	53 0b       	sbc	r21, r19
     3bc:	61 09       	sbc	r22, r1
     3be:	71 09       	sbc	r23, r1
     3c0:	43 83       	std	Z+3, r20	; 0x03
     3c2:	54 83       	std	Z+4, r21	; 0x04
     3c4:	65 83       	std	Z+5, r22	; 0x05
     3c6:	76 83       	std	Z+6, r23	; 0x06
     3c8:	05 c0       	rjmp	.+10     	; 0x3d4 <addToRingU16+0x46>
	}
	else
	{
		bptr->curr_pos = 0;
     3ca:	17 82       	std	Z+7, r1	; 0x07
		bptr->summ = 0;
     3cc:	13 82       	std	Z+3, r1	; 0x03
     3ce:	14 82       	std	Z+4, r1	; 0x04
     3d0:	15 82       	std	Z+5, r1	; 0x05
     3d2:	16 82       	std	Z+6, r1	; 0x06
	}
	do	
	{
		bptr->data[bptr->curr_pos++] = sample;
		bptr->summ += sample;
     3d4:	8c 01       	movw	r16, r24
     3d6:	20 e0       	ldi	r18, 0x00	; 0
     3d8:	30 e0       	ldi	r19, 0x00	; 0
		bptr->curr_pos = 0;
		bptr->summ = 0;
	}
	do	
	{
		bptr->data[bptr->curr_pos++] = sample;
     3da:	67 81       	ldd	r22, Z+7	; 0x07
     3dc:	a6 2f       	mov	r26, r22
     3de:	b0 e0       	ldi	r27, 0x00	; 0
     3e0:	aa 0f       	add	r26, r26
     3e2:	bb 1f       	adc	r27, r27
     3e4:	41 81       	ldd	r20, Z+1	; 0x01
     3e6:	52 81       	ldd	r21, Z+2	; 0x02
     3e8:	a4 0f       	add	r26, r20
     3ea:	b5 1f       	adc	r27, r21
     3ec:	8d 93       	st	X+, r24
     3ee:	9c 93       	st	X, r25
     3f0:	a6 2f       	mov	r26, r22
     3f2:	af 5f       	subi	r26, 0xFF	; 255
     3f4:	a7 83       	std	Z+7, r26	; 0x07
		bptr->summ += sample;
     3f6:	43 81       	ldd	r20, Z+3	; 0x03
     3f8:	54 81       	ldd	r21, Z+4	; 0x04
     3fa:	65 81       	ldd	r22, Z+5	; 0x05
     3fc:	76 81       	ldd	r23, Z+6	; 0x06
     3fe:	40 0f       	add	r20, r16
     400:	51 1f       	adc	r21, r17
     402:	62 1f       	adc	r22, r18
     404:	73 1f       	adc	r23, r19
     406:	43 83       	std	Z+3, r20	; 0x03
     408:	54 83       	std	Z+4, r21	; 0x04
     40a:	65 83       	std	Z+5, r22	; 0x05
     40c:	76 83       	std	Z+6, r23	; 0x06
		if (bptr->curr_pos == bptr->length)	
     40e:	40 81       	ld	r20, Z
     410:	a4 13       	cpse	r26, r20
     412:	03 c0       	rjmp	.+6      	; 0x41a <addToRingU16+0x8c>
		{	
			bptr->curr_pos = 0;	
     414:	17 82       	std	Z+7, r1	; 0x07
			bptr->stat = RNORM;
     416:	10 86       	std	Z+8, r1	; 0x08
     418:	03 c0       	rjmp	.+6      	; 0x420 <addToRingU16+0x92>
		}
	} 
	while (bptr->stat != RNORM);
     41a:	40 85       	ldd	r20, Z+8	; 0x08
     41c:	41 11       	cpse	r20, r1
     41e:	dd cf       	rjmp	.-70     	; 0x3da <addToRingU16+0x4c>
}
     420:	1f 91       	pop	r17
     422:	0f 91       	pop	r16
     424:	08 95       	ret

00000426 <__vector_14>:




ISR(ADC_vect)
{
     426:	1f 92       	push	r1
     428:	0f 92       	push	r0
     42a:	0f b6       	in	r0, 0x3f	; 63
     42c:	0f 92       	push	r0
     42e:	11 24       	eor	r1, r1
     430:	2f 93       	push	r18
     432:	3f 93       	push	r19
     434:	4f 93       	push	r20
     436:	5f 93       	push	r21
     438:	6f 93       	push	r22
     43a:	7f 93       	push	r23
     43c:	8f 93       	push	r24
     43e:	9f 93       	push	r25
     440:	af 93       	push	r26
     442:	bf 93       	push	r27
     444:	ef 93       	push	r30
     446:	ff 93       	push	r31
	// Get new sample
	uint16_t new_sample = 1024 - ADC;	
     448:	84 b1       	in	r24, 0x04	; 4
     44a:	95 b1       	in	r25, 0x05	; 5
     44c:	60 e0       	ldi	r22, 0x00	; 0
     44e:	74 e0       	ldi	r23, 0x04	; 4
     450:	68 1b       	sub	r22, r24
     452:	79 0b       	sbc	r23, r25
	// Add new sample to the ring buffer
	addToRingU16(&ringBufADC, new_sample);
     454:	80 e6       	ldi	r24, 0x60	; 96
     456:	90 e0       	ldi	r25, 0x00	; 0
     458:	9a df       	rcall	.-204    	; 0x38e <addToRingU16>
}	
     45a:	ff 91       	pop	r31
     45c:	ef 91       	pop	r30
     45e:	bf 91       	pop	r27
     460:	af 91       	pop	r26
     462:	9f 91       	pop	r25
     464:	8f 91       	pop	r24
     466:	7f 91       	pop	r23
     468:	6f 91       	pop	r22
     46a:	5f 91       	pop	r21
     46c:	4f 91       	pop	r20
     46e:	3f 91       	pop	r19
     470:	2f 91       	pop	r18
     472:	0f 90       	pop	r0
     474:	0f be       	out	0x3f, r0	; 63
     476:	0f 90       	pop	r0
     478:	1f 90       	pop	r1
     47a:	18 95       	reti

0000047c <getNormalizedRingU16>:
}

// Get ring buffer normalized value
uint16_t getNormalizedRingU16(RingBufU16_t* bptr)
{
	return 	bptr->summ / bptr->length;
     47c:	fc 01       	movw	r30, r24
     47e:	20 81       	ld	r18, Z
     480:	30 e0       	ldi	r19, 0x00	; 0
     482:	40 e0       	ldi	r20, 0x00	; 0
     484:	50 e0       	ldi	r21, 0x00	; 0
     486:	63 81       	ldd	r22, Z+3	; 0x03
     488:	74 81       	ldd	r23, Z+4	; 0x04
     48a:	85 81       	ldd	r24, Z+5	; 0x05
     48c:	96 81       	ldd	r25, Z+6	; 0x06
     48e:	37 db       	rcall	.-2450   	; 0xfffffafe <__eeprom_end+0xff7efaf4>
}
     490:	82 2f       	mov	r24, r18
     492:	93 2f       	mov	r25, r19
     494:	08 95       	ret

00000496 <update_normalized_adc>:


void update_normalized_adc()
{
	// Disable interrupts from ADC - to save data integrity
	ACSR &= ~(1<<ACIE);	
     496:	43 98       	cbi	0x08, 3	; 8
	// Get normalized mean window summ
	adc_normalized = (uint16_t)getNormalizedRingU16(&ringBufADC);
     498:	80 e6       	ldi	r24, 0x60	; 96
     49a:	90 e0       	ldi	r25, 0x00	; 0
     49c:	ef df       	rcall	.-34     	; 0x47c <getNormalizedRingU16>
     49e:	90 93 0d 01 	sts	0x010D, r25
     4a2:	80 93 0c 01 	sts	0x010C, r24
	// Enable interrupts from ADC
	ACSR |= (1<<ACIE);
     4a6:	43 9a       	sbi	0x08, 3	; 8
	// Convert to Celsius degree
	adc_celsius = conv_ADC_to_Celsius(adc_normalized);
     4a8:	e1 de       	rcall	.-574    	; 0x26c <conv_ADC_to_Celsius>
     4aa:	90 93 0f 01 	sts	0x010F, r25
     4ae:	80 93 0e 01 	sts	0x010E, r24
     4b2:	08 95       	ret

000004b4 <process_buttons>:
	uint8_t raw_delayed_inv;
	static uint8_t press_timer = 0;
	uint8_t long_press_mask;
	uint8_t long_press_event_mask;
	
	raw_delayed = raw_current;
     4b4:	30 91 c4 00 	lds	r19, 0x00C4
	raw_delayed_inv = raw_current_inv;
     4b8:	20 91 69 00 	lds	r18, 0x0069
	raw_current = raw_button_state;
     4bc:	90 91 43 01 	lds	r25, 0x0143
     4c0:	90 93 c4 00 	sts	0x00C4, r25
	raw_current_inv = ~raw_current;
     4c4:	49 2f       	mov	r20, r25
     4c6:	40 95       	com	r20
     4c8:	40 93 69 00 	sts	0x0069, r20
	
	// Must be before press_timer update
	long_press_mask = (press_timer >= LONG_PRESS_DELAY) ? 0xFF : 0x00;
     4cc:	80 91 c5 00 	lds	r24, 0x00C5
     4d0:	8c 30       	cpi	r24, 0x0C	; 12
     4d2:	10 f0       	brcs	.+4      	; 0x4d8 <process_buttons+0x24>
     4d4:	6f ef       	ldi	r22, 0xFF	; 255
     4d6:	01 c0       	rjmp	.+2      	; 0x4da <process_buttons+0x26>
     4d8:	60 e0       	ldi	r22, 0x00	; 0
	
	if (raw_delayed != raw_current)
     4da:	39 17       	cp	r19, r25
     4dc:	41 f0       	breq	.+16     	; 0x4ee <process_buttons+0x3a>
	{
		press_timer = 0;
     4de:	10 92 c5 00 	sts	0x00C5, r1
	}
	
	// Must after press_timer update
	long_press_event_mask = (press_timer == LONG_PRESS_DELAY) ? 0xFF : 0x00;
			
	button_action_down = raw_current & raw_delayed_inv;
     4e2:	89 2f       	mov	r24, r25
     4e4:	82 23       	and	r24, r18
     4e6:	80 93 c1 00 	sts	0x00C1, r24
     4ea:	50 e0       	ldi	r21, 0x00	; 0
     4ec:	14 c0       	rjmp	.+40     	; 0x516 <process_buttons+0x62>
	
	if (raw_delayed != raw_current)
	{
		press_timer = 0;
	}
	else if (press_timer <= LONG_PRESS_DELAY)
     4ee:	8d 30       	cpi	r24, 0x0D	; 13
     4f0:	18 f4       	brcc	.+6      	; 0x4f8 <process_buttons+0x44>
	{
		press_timer++;
     4f2:	8f 5f       	subi	r24, 0xFF	; 255
     4f4:	80 93 c5 00 	sts	0x00C5, r24
	}
	
	// Must after press_timer update
	long_press_event_mask = (press_timer == LONG_PRESS_DELAY) ? 0xFF : 0x00;
     4f8:	50 91 c5 00 	lds	r21, 0x00C5
     4fc:	5c 30       	cpi	r21, 0x0C	; 12
     4fe:	09 f4       	brne	.+2      	; 0x502 <process_buttons+0x4e>
     500:	45 c0       	rjmp	.+138    	; 0x58c <process_buttons+0xd8>
			
	button_action_down = raw_current & raw_delayed_inv;
     502:	89 2f       	mov	r24, r25
     504:	82 23       	and	r24, r18
     506:	80 93 c1 00 	sts	0x00C1, r24
			
	if (press_timer > REPEAT_DELAY)
     50a:	57 30       	cpi	r21, 0x07	; 7
     50c:	18 f0       	brcs	.+6      	; 0x514 <process_buttons+0x60>
     50e:	50 e0       	ldi	r21, 0x00	; 0
		raw_delayed_inv |= 0xFF;
     510:	2f ef       	ldi	r18, 0xFF	; 255
     512:	01 c0       	rjmp	.+2      	; 0x516 <process_buttons+0x62>
	// Must after press_timer update
	long_press_event_mask = (press_timer == LONG_PRESS_DELAY) ? 0xFF : 0x00;
			
	button_action_down = raw_current & raw_delayed_inv;
			
	if (press_timer > REPEAT_DELAY)
     514:	50 e0       	ldi	r21, 0x00	; 0
		raw_delayed_inv |= 0xFF;
	
	button_action_rep = raw_current & raw_delayed_inv;
     516:	29 23       	and	r18, r25
     518:	20 93 c0 00 	sts	0x00C0, r18
	
	button_action_up_short = raw_current_inv & raw_delayed & ~long_press_mask;
     51c:	60 95       	com	r22
     51e:	34 23       	and	r19, r20
     520:	36 23       	and	r19, r22
     522:	30 93 bf 00 	sts	0x00BF, r19
	//button_action_up_long  = raw_current_inv & raw_delayed & long_press_mask;
	button_action_long  = raw_current & long_press_event_mask;
     526:	59 23       	and	r21, r25
     528:	50 93 be 00 	sts	0x00BE, r21
	
	// Compose button state
	button_state = (button_action_down & (BD_MENU | BD_UP | BD_DOWN | BD_ROTFWD | BD_ROTREV | BD_HEATCTRL));
     52c:	87 77       	andi	r24, 0x77	; 119
     52e:	90 e0       	ldi	r25, 0x00	; 0
	if (button_action_up_short & BD_MENU)
     530:	30 fd       	sbrc	r19, 0
     532:	05 c0       	rjmp	.+10     	; 0x53e <process_buttons+0x8a>
	button_action_up_short = raw_current_inv & raw_delayed & ~long_press_mask;
	//button_action_up_long  = raw_current_inv & raw_delayed & long_press_mask;
	button_action_long  = raw_current & long_press_event_mask;
	
	// Compose button state
	button_state = (button_action_down & (BD_MENU | BD_UP | BD_DOWN | BD_ROTFWD | BD_ROTREV | BD_HEATCTRL));
     534:	90 93 c3 00 	sts	0x00C3, r25
     538:	80 93 c2 00 	sts	0x00C2, r24
     53c:	05 c0       	rjmp	.+10     	; 0x548 <process_buttons+0x94>
	if (button_action_up_short & BD_MENU)
		button_state |= BS_MENU;
     53e:	91 60       	ori	r25, 0x01	; 1
     540:	90 93 c3 00 	sts	0x00C3, r25
     544:	80 93 c2 00 	sts	0x00C2, r24
	//if (button_action_up_long & BD_MENU)
	if (button_action_long & BD_MENU)
     548:	50 ff       	sbrs	r21, 0
     54a:	09 c0       	rjmp	.+18     	; 0x55e <process_buttons+0xaa>
		button_state |= BL_MENU;
     54c:	80 91 c2 00 	lds	r24, 0x00C2
     550:	90 91 c3 00 	lds	r25, 0x00C3
     554:	92 60       	ori	r25, 0x02	; 2
     556:	90 93 c3 00 	sts	0x00C3, r25
     55a:	80 93 c2 00 	sts	0x00C2, r24
	if (button_action_rep & BD_UP)
     55e:	21 ff       	sbrs	r18, 1
     560:	09 c0       	rjmp	.+18     	; 0x574 <process_buttons+0xc0>
		button_state |= BR_UP;	
     562:	80 91 c2 00 	lds	r24, 0x00C2
     566:	90 91 c3 00 	lds	r25, 0x00C3
     56a:	94 60       	ori	r25, 0x04	; 4
     56c:	90 93 c3 00 	sts	0x00C3, r25
     570:	80 93 c2 00 	sts	0x00C2, r24
	if (button_action_rep & BD_DOWN)
     574:	22 ff       	sbrs	r18, 2
     576:	10 c0       	rjmp	.+32     	; 0x598 <process_buttons+0xe4>
		button_state |= BR_DOWN;
     578:	80 91 c2 00 	lds	r24, 0x00C2
     57c:	90 91 c3 00 	lds	r25, 0x00C3
     580:	98 60       	ori	r25, 0x08	; 8
     582:	90 93 c3 00 	sts	0x00C3, r25
     586:	80 93 c2 00 	sts	0x00C2, r24
     58a:	08 95       	ret
	}
	
	// Must after press_timer update
	long_press_event_mask = (press_timer == LONG_PRESS_DELAY) ? 0xFF : 0x00;
			
	button_action_down = raw_current & raw_delayed_inv;
     58c:	83 2f       	mov	r24, r19
     58e:	82 23       	and	r24, r18
     590:	80 93 c1 00 	sts	0x00C1, r24
	{
		press_timer++;
	}
	
	// Must after press_timer update
	long_press_event_mask = (press_timer == LONG_PRESS_DELAY) ? 0xFF : 0x00;
     594:	5f ef       	ldi	r21, 0xFF	; 255
     596:	bc cf       	rjmp	.-136    	; 0x510 <process_buttons+0x5c>
     598:	08 95       	ret

0000059a <processRollControl>:



// Function to control motor rotation
void processRollControl(void)
{	
     59a:	cf 93       	push	r28
	uint8_t beepState = 0;
	static uint8_t beepMask = 0x00;
	
	// Control direction by buttons
	if (button_action_down & BD_ROTFWD)
     59c:	80 91 c1 00 	lds	r24, 0x00C1
     5a0:	84 ff       	sbrs	r24, 4
     5a2:	04 c0       	rjmp	.+8      	; 0x5ac <processRollControl+0x12>
	{
		setMotorDirection(ROLL_FWD);	
     5a4:	81 e0       	ldi	r24, 0x01	; 1
     5a6:	65 d8       	rcall	.-3894   	; 0xfffff672 <__eeprom_end+0xff7ef668>
		beepState |= 0x01;			// pressed FWD button
     5a8:	c1 e0       	ldi	r28, 0x01	; 1
     5aa:	0f c0       	rjmp	.+30     	; 0x5ca <processRollControl+0x30>
	}		
	else if (button_action_down & BD_ROTREV)
     5ac:	85 ff       	sbrs	r24, 5
     5ae:	04 c0       	rjmp	.+8      	; 0x5b8 <processRollControl+0x1e>
	{
		setMotorDirection(ROLL_REV);
     5b0:	82 e0       	ldi	r24, 0x02	; 2
     5b2:	5f d8       	rcall	.-3906   	; 0xfffff672 <__eeprom_end+0xff7ef668>
		beepState |= 0x02;			// pressed REV button
     5b4:	c2 e0       	ldi	r28, 0x02	; 2
     5b6:	09 c0       	rjmp	.+18     	; 0x5ca <processRollControl+0x30>
	}		
	else if (button_action_long & BD_CYCLE)
     5b8:	80 91 be 00 	lds	r24, 0x00BE
     5bc:	88 23       	and	r24, r24
     5be:	24 f4       	brge	.+8      	; 0x5c8 <processRollControl+0x2e>
	{
		stopCycleRolling(1);		// Reset points and disabled CYCLE mode (if was enabled)
     5c0:	81 e0       	ldi	r24, 0x01	; 1
     5c2:	75 d8       	rcall	.-3862   	; 0xfffff6ae <__eeprom_end+0xff7ef6a4>
		beepState |= 0x08;			// reset of points by long pressing of ROLL button
     5c4:	c8 e0       	ldi	r28, 0x08	; 8
     5c6:	01 c0       	rjmp	.+2      	; 0x5ca <processRollControl+0x30>


// Function to control motor rotation
void processRollControl(void)
{	
	uint8_t beepState = 0;
     5c8:	c0 e0       	ldi	r28, 0x00	; 0
		stopCycleRolling(1);		// Reset points and disabled CYCLE mode (if was enabled)
		beepState |= 0x08;			// reset of points by long pressing of ROLL button
	}
	
	
	if (button_action_up_short & BD_CYCLE)
     5ca:	80 91 bf 00 	lds	r24, 0x00BF
     5ce:	88 23       	and	r24, r24
     5d0:	74 f4       	brge	.+28     	; 0x5ee <processRollControl+0x54>
	{
		if (rollState & ROLL_CYCLE)
     5d2:	80 91 e7 00 	lds	r24, 0x00E7
     5d6:	82 ff       	sbrs	r24, 2
     5d8:	04 c0       	rjmp	.+8      	; 0x5e2 <processRollControl+0x48>
		{
			stopCycleRolling(0);
     5da:	80 e0       	ldi	r24, 0x00	; 0
     5dc:	68 d8       	rcall	.-3888   	; 0xfffff6ae <__eeprom_end+0xff7ef6a4>
			beepState |= 0x20;		// stopped cycle
     5de:	c0 62       	ori	r28, 0x20	; 32
     5e0:	06 c0       	rjmp	.+12     	; 0x5ee <processRollControl+0x54>
		}
		else if (startCycleRolling())
     5e2:	a1 d8       	rcall	.-3774   	; 0xfffff726 <__eeprom_end+0xff7ef71c>
     5e4:	88 23       	and	r24, r24
     5e6:	11 f0       	breq	.+4      	; 0x5ec <processRollControl+0x52>
		{
			beepState |= 0x10;		// started cycle
     5e8:	c0 61       	ori	r28, 0x10	; 16
     5ea:	01 c0       	rjmp	.+2      	; 0x5ee <processRollControl+0x54>
		}
		else
		{
			beepState |= 0x40;		// failed to start cycle
     5ec:	c0 64       	ori	r28, 0x40	; 64
		}			
	}		
	
	if (rollState & ROLL_DIR_CHANGED)
     5ee:	80 91 e7 00 	lds	r24, 0x00E7
     5f2:	85 ff       	sbrs	r24, 5
     5f4:	04 c0       	rjmp	.+8      	; 0x5fe <processRollControl+0x64>
	{
		rollState &= ~ROLL_DIR_CHANGED;
     5f6:	8f 7d       	andi	r24, 0xDF	; 223
     5f8:	80 93 e7 00 	sts	0x00E7, r24
		beepState |= 0x04;	
     5fc:	c4 60       	ori	r28, 0x04	; 4
	}
	
	if (rollState & CYCLE_ROLL_DONE)
     5fe:	80 91 e7 00 	lds	r24, 0x00E7
     602:	84 ff       	sbrs	r24, 4
     604:	04 c0       	rjmp	.+8      	; 0x60e <processRollControl+0x74>
	{
		rollState &= ~CYCLE_ROLL_DONE;
     606:	8f 7e       	andi	r24, 0xEF	; 239
     608:	80 93 e7 00 	sts	0x00E7, r24
		beepState |= 0x80;	
     60c:	c0 68       	ori	r28, 0x80	; 128
	}		
	
	beepState &= beepMask;
     60e:	80 91 c7 00 	lds	r24, 0x00C7
     612:	c8 23       	and	r28, r24
	
	if (beepState & 0x80)		// Roll cycle done
     614:	3c f4       	brge	.+14     	; 0x624 <processRollControl+0x8a>
	{
		SetBeeperFreq(1000);
     616:	88 ee       	ldi	r24, 0xE8	; 232
     618:	93 e0       	ldi	r25, 0x03	; 3
     61a:	e3 d9       	rcall	.-3130   	; 0xfffff9e2 <__eeprom_end+0xff7ef9d8>
		StartBeep(200);
     61c:	88 ec       	ldi	r24, 0xC8	; 200
     61e:	90 e0       	ldi	r25, 0x00	; 0
     620:	01 da       	rcall	.-3070   	; 0xfffffa24 <__eeprom_end+0xff7efa1a>
     622:	1b c0       	rjmp	.+54     	; 0x65a <processRollControl+0xc0>
	}		
	else if (beepState & 0x40)	// Roll cycle start fail
     624:	c6 ff       	sbrs	r28, 6
     626:	07 c0       	rjmp	.+14     	; 0x636 <processRollControl+0x9c>
	{
		SetBeeperFreq(500);
     628:	84 ef       	ldi	r24, 0xF4	; 244
     62a:	91 e0       	ldi	r25, 0x01	; 1
     62c:	da d9       	rcall	.-3148   	; 0xfffff9e2 <__eeprom_end+0xff7ef9d8>
		StartBeep(50);
     62e:	82 e3       	ldi	r24, 0x32	; 50
     630:	90 e0       	ldi	r25, 0x00	; 0
     632:	f8 d9       	rcall	.-3088   	; 0xfffffa24 <__eeprom_end+0xff7efa1a>
     634:	12 c0       	rjmp	.+36     	; 0x65a <processRollControl+0xc0>
	} 
	else if (beepState & 0x08)	// Reset points
     636:	c3 ff       	sbrs	r28, 3
     638:	07 c0       	rjmp	.+14     	; 0x648 <processRollControl+0xae>
	{
		SetBeeperFreq(800);
     63a:	80 e2       	ldi	r24, 0x20	; 32
     63c:	93 e0       	ldi	r25, 0x03	; 3
     63e:	d1 d9       	rcall	.-3166   	; 0xfffff9e2 <__eeprom_end+0xff7ef9d8>
		StartBeep(50);
     640:	82 e3       	ldi	r24, 0x32	; 50
     642:	90 e0       	ldi	r25, 0x00	; 0
     644:	ef d9       	rcall	.-3106   	; 0xfffffa24 <__eeprom_end+0xff7efa1a>
     646:	09 c0       	rjmp	.+18     	; 0x65a <processRollControl+0xc0>
	}							// Other
	else if ( beepState & (0x01 | 0x02 | 0x10 | 0x20 | 0x04) )
     648:	8c 2f       	mov	r24, r28
     64a:	87 73       	andi	r24, 0x37	; 55
     64c:	31 f0       	breq	.+12     	; 0x65a <processRollControl+0xc0>
	{
		SetBeeperFreq(1000);
     64e:	88 ee       	ldi	r24, 0xE8	; 232
     650:	93 e0       	ldi	r25, 0x03	; 3
     652:	c7 d9       	rcall	.-3186   	; 0xfffff9e2 <__eeprom_end+0xff7ef9d8>
		StartBeep(50);	
     654:	82 e3       	ldi	r24, 0x32	; 50
     656:	90 e0       	ldi	r25, 0x00	; 0
     658:	e5 d9       	rcall	.-3126   	; 0xfffffa24 <__eeprom_end+0xff7efa1a>
	}			
	
	// Apply mask to next sound events
	beepMask = 0xFF;
	// Disable beep from DIR_CHANGED on next call if direction buttons have been pressed
	if (beepState & 0x03)	
     65a:	c3 70       	andi	r28, 0x03	; 3
     65c:	21 f4       	brne	.+8      	; 0x666 <processRollControl+0xcc>
		SetBeeperFreq(1000);
		StartBeep(50);	
	}			
	
	// Apply mask to next sound events
	beepMask = 0xFF;
     65e:	8f ef       	ldi	r24, 0xFF	; 255
     660:	80 93 c7 00 	sts	0x00C7, r24
     664:	03 c0       	rjmp	.+6      	; 0x66c <processRollControl+0xd2>
	// Disable beep from DIR_CHANGED on next call if direction buttons have been pressed
	if (beepState & 0x03)	
		beepMask &= ~0x04;	
     666:	8b ef       	ldi	r24, 0xFB	; 251
     668:	80 93 c7 00 	sts	0x00C7, r24
		
	
		
	// Indicate direction by LEDs
	clearExtraLeds(LED_ROTFWD | LED_ROTREV);
     66c:	80 e3       	ldi	r24, 0x30	; 48
     66e:	d1 d2       	rcall	.+1442   	; 0xc12 <clearExtraLeds>
	if (rollState & ROLL_FWD)
     670:	80 91 e7 00 	lds	r24, 0x00E7
     674:	80 ff       	sbrs	r24, 0
     676:	03 c0       	rjmp	.+6      	; 0x67e <processRollControl+0xe4>
		setExtraLeds(LED_ROTFWD);
     678:	80 e1       	ldi	r24, 0x10	; 16
     67a:	c5 d2       	rcall	.+1418   	; 0xc06 <setExtraLeds>
     67c:	04 c0       	rjmp	.+8      	; 0x686 <processRollControl+0xec>
	else if (rollState & ROLL_REV)
     67e:	81 ff       	sbrs	r24, 1
     680:	02 c0       	rjmp	.+4      	; 0x686 <processRollControl+0xec>
		setExtraLeds(LED_ROTREV);
     682:	80 e2       	ldi	r24, 0x20	; 32
     684:	c0 d2       	rcall	.+1408   	; 0xc06 <setExtraLeds>
		
}
     686:	cf 91       	pop	r28
     688:	08 95       	ret

0000068a <processPID>:




uint8_t processPID(uint16_t setPoint, uint16_t processValue)
{
     68a:	ef 92       	push	r14
     68c:	ff 92       	push	r15
     68e:	0f 93       	push	r16
     690:	1f 93       	push	r17
     692:	cf 93       	push	r28
     694:	df 93       	push	r29
	int16_t error, p_term, i_term, d_term, temp;
	static uint16_t lastProcessValue;
	static int16_t integAcc = 0;
	
	error = setPoint - processValue;
     696:	86 1b       	sub	r24, r22
     698:	97 0b       	sbc	r25, r23
	
	
	//------ Calculate P term --------//
	if (error > 20)
     69a:	85 31       	cpi	r24, 0x15	; 21
     69c:	91 05       	cpc	r25, r1
     69e:	5c f4       	brge	.+22     	; 0x6b6 <processPID+0x2c>
	{
		p_term = 1000;
	}
	else if (error < -20)
     6a0:	8c 3e       	cpi	r24, 0xEC	; 236
     6a2:	2f ef       	ldi	r18, 0xFF	; 255
     6a4:	92 07       	cpc	r25, r18
     6a6:	74 f0       	brlt	.+28     	; 0x6c4 <processPID+0x3a>
	{
		p_term = -1000;
	}
	else
	{
		p_term = error * Kp;
     6a8:	2f e0       	ldi	r18, 0x0F	; 15
     6aa:	28 9f       	mul	r18, r24
     6ac:	70 01       	movw	r14, r0
     6ae:	29 9f       	mul	r18, r25
     6b0:	f0 0c       	add	r15, r0
     6b2:	11 24       	eor	r1, r1
     6b4:	0d c0       	rjmp	.+26     	; 0x6d0 <processPID+0x46>
	
	
	//------ Calculate P term --------//
	if (error > 20)
	{
		p_term = 1000;
     6b6:	0f 2e       	mov	r0, r31
     6b8:	f8 ee       	ldi	r31, 0xE8	; 232
     6ba:	ef 2e       	mov	r14, r31
     6bc:	f3 e0       	ldi	r31, 0x03	; 3
     6be:	ff 2e       	mov	r15, r31
     6c0:	f0 2d       	mov	r31, r0
     6c2:	06 c0       	rjmp	.+12     	; 0x6d0 <processPID+0x46>
	}
	else if (error < -20)
	{
		p_term = -1000;
     6c4:	0f 2e       	mov	r0, r31
     6c6:	f8 e1       	ldi	r31, 0x18	; 24
     6c8:	ef 2e       	mov	r14, r31
     6ca:	fc ef       	ldi	r31, 0xFC	; 252
     6cc:	ff 2e       	mov	r15, r31
     6ce:	f0 2d       	mov	r31, r0
	{
		p_term = error * Kp;
	}
	
	//------ Calculate I term --------//
	integAcc += error;
     6d0:	20 91 ce 00 	lds	r18, 0x00CE
     6d4:	30 91 cf 00 	lds	r19, 0x00CF
	if (error <= 0)
     6d8:	18 16       	cp	r1, r24
     6da:	19 06       	cpc	r1, r25
     6dc:	2c f0       	brlt	.+10     	; 0x6e8 <processPID+0x5e>
	{
		integAcc = 0;
     6de:	10 92 cf 00 	sts	0x00CF, r1
     6e2:	10 92 ce 00 	sts	0x00CE, r1
     6e6:	17 c0       	rjmp	.+46     	; 0x716 <processPID+0x8c>
	{
		p_term = error * Kp;
	}
	
	//------ Calculate I term --------//
	integAcc += error;
     6e8:	82 0f       	add	r24, r18
     6ea:	93 1f       	adc	r25, r19
	if (error <= 0)
	{
		integAcc = 0;
	}
	else if (integAcc > 10)
     6ec:	8b 30       	cpi	r24, 0x0B	; 11
     6ee:	91 05       	cpc	r25, r1
     6f0:	3c f0       	brlt	.+14     	; 0x700 <processPID+0x76>
	{
		integAcc = 10;
     6f2:	8a e0       	ldi	r24, 0x0A	; 10
     6f4:	90 e0       	ldi	r25, 0x00	; 0
     6f6:	90 93 cf 00 	sts	0x00CF, r25
     6fa:	80 93 ce 00 	sts	0x00CE, r24
     6fe:	0b c0       	rjmp	.+22     	; 0x716 <processPID+0x8c>
	}
	else if (integAcc < 0)
     700:	99 23       	and	r25, r25
     702:	2c f0       	brlt	.+10     	; 0x70e <processPID+0x84>
	{
		p_term = error * Kp;
	}
	
	//------ Calculate I term --------//
	integAcc += error;
     704:	90 93 cf 00 	sts	0x00CF, r25
     708:	80 93 ce 00 	sts	0x00CE, r24
     70c:	04 c0       	rjmp	.+8      	; 0x716 <processPID+0x8c>
	{
		integAcc = 10;
	}
	else if (integAcc < 0)
	{
		integAcc = 0;
     70e:	10 92 cf 00 	sts	0x00CF, r1
     712:	10 92 ce 00 	sts	0x00CE, r1
	}
	i_term = integAcc * Ki;
     716:	80 91 ce 00 	lds	r24, 0x00CE
     71a:	90 91 cf 00 	lds	r25, 0x00CF
     71e:	2f e0       	ldi	r18, 0x0F	; 15
     720:	28 9f       	mul	r18, r24
     722:	80 01       	movw	r16, r0
     724:	29 9f       	mul	r18, r25
     726:	10 0d       	add	r17, r0
     728:	11 24       	eor	r1, r1
	//------ Calculate D term --------//
	//lastProcessValue = getNormalizedRingU16(&ringBufDterm);
	//addToRingU16(&ringBufDterm, processValue);
	//d_term = Kd * ((int16_t)(lastProcessValue - processValue));
	
	lastProcessValue = ringBufDterm.summ;
     72a:	cd e6       	ldi	r28, 0x6D	; 109
     72c:	d0 e0       	ldi	r29, 0x00	; 0
     72e:	88 81       	ld	r24, Y
     730:	99 81       	ldd	r25, Y+1	; 0x01
     732:	90 93 d1 00 	sts	0x00D1, r25
     736:	80 93 d0 00 	sts	0x00D0, r24
	addToRingU16(&ringBufDterm, processValue);
     73a:	8a e6       	ldi	r24, 0x6A	; 106
     73c:	90 e0       	ldi	r25, 0x00	; 0
     73e:	27 de       	rcall	.-946    	; 0x38e <addToRingU16>
	processValue = ringBufDterm.summ;
	d_term = Kd * ((int16_t)(lastProcessValue - processValue));
     740:	80 91 d0 00 	lds	r24, 0x00D0
     744:	90 91 d1 00 	lds	r25, 0x00D1
     748:	28 81       	ld	r18, Y
     74a:	39 81       	ldd	r19, Y+1	; 0x01
     74c:	82 1b       	sub	r24, r18
     74e:	93 0b       	sbc	r25, r19
     750:	40 e5       	ldi	r20, 0x50	; 80
     752:	48 9f       	mul	r20, r24
     754:	90 01       	movw	r18, r0
     756:	49 9f       	mul	r20, r25
     758:	30 0d       	add	r19, r0
     75a:	11 24       	eor	r1, r1
	
	//--------- Summ terms -----------//
	temp = (p_term + i_term + d_term) / SCALING_FACTOR;
     75c:	c7 01       	movw	r24, r14
     75e:	80 0f       	add	r24, r16
     760:	91 1f       	adc	r25, r17
     762:	82 0f       	add	r24, r18
     764:	93 1f       	adc	r25, r19
     766:	65 e0       	ldi	r22, 0x05	; 5
     768:	70 e0       	ldi	r23, 0x00	; 0
     76a:	b6 d9       	rcall	.-3220   	; 0xfffffad8 <__eeprom_end+0xff7eface>
     76c:	86 2f       	mov	r24, r22
     76e:	97 2f       	mov	r25, r23
     770:	99 23       	and	r25, r25
     772:	14 f4       	brge	.+4      	; 0x778 <processPID+0xee>
     774:	80 e0       	ldi	r24, 0x00	; 0
     776:	90 e0       	ldi	r25, 0x00	; 0
     778:	83 33       	cpi	r24, 0x33	; 51
     77a:	91 05       	cpc	r25, r1
     77c:	14 f0       	brlt	.+4      	; 0x782 <processPID+0xf8>
     77e:	82 e3       	ldi	r24, 0x32	; 50
     780:	90 e0       	ldi	r25, 0x00	; 0
		temp = 0;
	}
	
	
	//------- Debug --------//
	dbg_PID_p_term = p_term;
     782:	f0 92 15 01 	sts	0x0115, r15
     786:	e0 92 14 01 	sts	0x0114, r14
	dbg_PID_d_term = d_term;
     78a:	30 93 27 01 	sts	0x0127, r19
     78e:	20 93 26 01 	sts	0x0126, r18
	dbg_PID_i_term = i_term;
     792:	10 93 1c 01 	sts	0x011C, r17
     796:	00 93 1b 01 	sts	0x011B, r16
	dbg_PID_output = temp;
     79a:	90 93 12 01 	sts	0x0112, r25
     79e:	80 93 11 01 	sts	0x0111, r24
	
	
	return temp;
	
}
     7a2:	df 91       	pop	r29
     7a4:	cf 91       	pop	r28
     7a6:	1f 91       	pop	r17
     7a8:	0f 91       	pop	r16
     7aa:	ff 90       	pop	r15
     7ac:	ef 90       	pop	r14
     7ae:	08 95       	ret

000007b0 <processHeaterControl>:
	static uint16_t set_value_adc;		// static for debug
	static uint16_t pid_output;			// static for debug
	
	
	// Process heater ON/OFF control by button
	if (button_state & BD_HEATCTRL)
     7b0:	80 91 c2 00 	lds	r24, 0x00C2
     7b4:	86 ff       	sbrs	r24, 6
     7b6:	07 c0       	rjmp	.+14     	; 0x7c6 <processHeaterControl+0x16>
	{
		heaterEnabled ^= 0x01;
     7b8:	90 91 c8 00 	lds	r25, 0x00C8
     7bc:	81 e0       	ldi	r24, 0x01	; 1
     7be:	89 27       	eor	r24, r25
     7c0:	80 93 c8 00 	sts	0x00C8, r24
		// Make heater controller set update flag on next call
		forceHeaterControlUpdate();
     7c4:	4f d7       	rcall	.+3742   	; 0x1664 <forceHeaterControlUpdate>
	}
	
	// Process auto power off control
	if (autoPowerOffState & AUTO_POFF_ACTIVE)
     7c6:	80 91 c6 00 	lds	r24, 0x00C6
     7ca:	80 fd       	sbrc	r24, 0
	{
		heaterEnabled = 0;
     7cc:	10 92 c8 00 	sts	0x00C8, r1
	}		
	
	// Indicate reaching of desired temperature
	if ( (adc_celsius > setup_temp_value - TEMP_ALERT_RANGE) || (adc_celsius < setup_temp_value + TEMP_ALERT_RANGE) )
     7d0:	20 91 18 01 	lds	r18, 0x0118
     7d4:	30 91 19 01 	lds	r19, 0x0119
     7d8:	80 91 0e 01 	lds	r24, 0x010E
     7dc:	90 91 0f 01 	lds	r25, 0x010F
     7e0:	a9 01       	movw	r20, r18
     7e2:	4a 50       	subi	r20, 0x0A	; 10
     7e4:	51 09       	sbc	r21, r1
     7e6:	48 17       	cp	r20, r24
     7e8:	59 07       	cpc	r21, r25
     7ea:	28 f0       	brcs	.+10     	; 0x7f6 <processHeaterControl+0x46>
     7ec:	26 5f       	subi	r18, 0xF6	; 246
     7ee:	3f 4f       	sbci	r19, 0xFF	; 255
     7f0:	82 17       	cp	r24, r18
     7f2:	93 07       	cpc	r25, r19
     7f4:	40 f4       	brcc	.+16     	; 0x806 <processHeaterControl+0x56>
	{
		if (tempAlertRangeCnt < TEMP_ALERT_DELAY + 1)
     7f6:	80 91 c9 00 	lds	r24, 0x00C9
     7fa:	8b 30       	cpi	r24, 0x0B	; 11
     7fc:	38 f4       	brcc	.+14     	; 0x80c <processHeaterControl+0x5c>
			tempAlertRangeCnt++;
     7fe:	8f 5f       	subi	r24, 0xFF	; 255
     800:	80 93 c9 00 	sts	0x00C9, r24
     804:	03 c0       	rjmp	.+6      	; 0x80c <processHeaterControl+0x5c>
	}			
	else
	{
		tempAlertRangeCnt = 0;
     806:	10 92 c9 00 	sts	0x00C9, r1
     80a:	0e c0       	rjmp	.+28     	; 0x828 <processHeaterControl+0x78>
	}		
	if ((tempAlertRangeCnt == TEMP_ALERT_DELAY) && (heaterEnabled))
     80c:	80 91 c9 00 	lds	r24, 0x00C9
     810:	8a 30       	cpi	r24, 0x0A	; 10
     812:	51 f4       	brne	.+20     	; 0x828 <processHeaterControl+0x78>
     814:	80 91 c8 00 	lds	r24, 0x00C8
     818:	88 23       	and	r24, r24
     81a:	31 f0       	breq	.+12     	; 0x828 <processHeaterControl+0x78>
	{
		SetBeeperFreq(1000);
     81c:	88 ee       	ldi	r24, 0xE8	; 232
     81e:	93 e0       	ldi	r25, 0x03	; 3
     820:	e0 d8       	rcall	.-3648   	; 0xfffff9e2 <__eeprom_end+0xff7ef9d8>
		StartBeep(400);
     822:	80 e9       	ldi	r24, 0x90	; 144
     824:	91 e0       	ldi	r25, 0x01	; 1
     826:	fe d8       	rcall	.-3588   	; 0xfffffa24 <__eeprom_end+0xff7efa1a>
	}

	// Check if heater control should be updated
	// PID call interval is a multiple of AC line periods, computed as HEATER_REGULATION_PERIODS * 20ms
	if (heaterState & READY_TO_UPDATE_HEATER)
     828:	80 91 e9 00 	lds	r24, 0x00E9
     82c:	88 23       	and	r24, r24
     82e:	d4 f4       	brge	.+52     	; 0x864 <processHeaterControl+0xb4>
	{
		// Convert temperature setup to equal ADC value
		set_value_adc = conv_Celsius_to_ADC(setup_temp_value);					
     830:	80 91 18 01 	lds	r24, 0x0118
     834:	90 91 19 01 	lds	r25, 0x0119
     838:	3b dd       	rcall	.-1418   	; 0x2b0 <conv_Celsius_to_ADC>
     83a:	90 93 cb 00 	sts	0x00CB, r25
     83e:	80 93 ca 00 	sts	0x00CA, r24
		// Process PID
		pid_output = processPID(set_value_adc,PIDsampledADC);
     842:	60 91 f6 00 	lds	r22, 0x00F6
     846:	70 91 f7 00 	lds	r23, 0x00F7
     84a:	1f df       	rcall	.-450    	; 0x68a <processPID>
     84c:	80 93 cc 00 	sts	0x00CC, r24
     850:	10 92 cd 00 	sts	0x00CD, r1
			
		// Heater control is updated only when flag is set, even if heater must be powered OFF
		if (heaterEnabled)
     854:	90 91 c8 00 	lds	r25, 0x00C8
     858:	99 23       	and	r25, r25
     85a:	11 f0       	breq	.+4      	; 0x860 <processHeaterControl+0xb0>
			setHeaterControl(pid_output);	// Flag is cleared automatically
     85c:	f3 d6       	rcall	.+3558   	; 0x1644 <setHeaterControl>
     85e:	02 c0       	rjmp	.+4      	; 0x864 <processHeaterControl+0xb4>
		else
			setHeaterControl(0);
     860:	80 e0       	ldi	r24, 0x00	; 0
     862:	f0 d6       	rcall	.+3552   	; 0x1644 <setHeaterControl>
	}	
		
	
	//------- Debug --------//
	if (heaterEnabled)
     864:	80 91 c8 00 	lds	r24, 0x00C8
     868:	88 23       	and	r24, r24
     86a:	79 f0       	breq	.+30     	; 0x88a <processHeaterControl+0xda>
	{
		setExtraLeds(LED_HEATER);
     86c:	80 e4       	ldi	r24, 0x40	; 64
     86e:	cb d1       	rcall	.+918    	; 0xc06 <setExtraLeds>
		dbg_SetTempCelsius = setup_temp_value;
     870:	80 91 18 01 	lds	r24, 0x0118
     874:	80 93 13 01 	sts	0x0113, r24
		dbg_SetTempPID = set_value_adc;
     878:	80 91 ca 00 	lds	r24, 0x00CA
     87c:	90 91 cb 00 	lds	r25, 0x00CB
     880:	90 93 2f 01 	sts	0x012F, r25
     884:	80 93 2e 01 	sts	0x012E, r24
     888:	08 c0       	rjmp	.+16     	; 0x89a <processHeaterControl+0xea>
	}
	else
	{
		dbg_SetTempCelsius = 0;
     88a:	10 92 13 01 	sts	0x0113, r1
		dbg_SetTempPID = 0;
     88e:	10 92 2f 01 	sts	0x012F, r1
     892:	10 92 2e 01 	sts	0x012E, r1
		clearExtraLeds(LED_HEATER);
     896:	80 e4       	ldi	r24, 0x40	; 64
     898:	bc d1       	rcall	.+888    	; 0xc12 <clearExtraLeds>
	}
	
	dbg_RealTempCelsius = conv_ADC_to_Celsius(PIDsampledADC);
     89a:	80 91 f6 00 	lds	r24, 0x00F6
     89e:	90 91 f7 00 	lds	r25, 0x00F7
     8a2:	e4 dc       	rcall	.-1592   	; 0x26c <conv_ADC_to_Celsius>
     8a4:	80 93 2b 01 	sts	0x012B, r24
	dbg_RealTempPID = PIDsampledADC;
     8a8:	80 91 f6 00 	lds	r24, 0x00F6
     8ac:	90 91 f7 00 	lds	r25, 0x00F7
     8b0:	90 93 17 01 	sts	0x0117, r25
     8b4:	80 93 16 01 	sts	0x0116, r24
     8b8:	08 95       	ret

000008ba <restoreGlobalParams>:




void restoreGlobalParams(void)
{
     8ba:	cf 93       	push	r28
     8bc:	df 93       	push	r29
     8be:	cd b7       	in	r28, 0x3d	; 61
     8c0:	de b7       	in	r29, 0x3e	; 62
     8c2:	2a 97       	sbiw	r28, 0x0a	; 10
     8c4:	0f b6       	in	r0, 0x3f	; 63
     8c6:	f8 94       	cli
     8c8:	de bf       	out	0x3e, r29	; 62
     8ca:	0f be       	out	0x3f, r0	; 63
     8cc:	cd bf       	out	0x3d, r28	; 61
	 gParams_t gParams;
	 eeprom_read_block(&gParams,&nvParams,sizeof(nvParams));
     8ce:	4a e0       	ldi	r20, 0x0A	; 10
     8d0:	50 e0       	ldi	r21, 0x00	; 0
     8d2:	60 e0       	ldi	r22, 0x00	; 0
     8d4:	70 e0       	ldi	r23, 0x00	; 0
     8d6:	ce 01       	movw	r24, r28
     8d8:	01 96       	adiw	r24, 0x01	; 1
     8da:	7e d9       	rcall	.-3332   	; 0xfffffbd8 <__eeprom_end+0xff7efbce>
	 setup_temp_value = gParams.setup_temp_value;	// reference temperature
     8dc:	89 81       	ldd	r24, Y+1	; 0x01
     8de:	80 93 18 01 	sts	0x0118, r24
     8e2:	10 92 19 01 	sts	0x0119, r1
	 rollCycleSet = gParams.rollCycleSet;			// number of rolling cycles
     8e6:	8a 81       	ldd	r24, Y+2	; 0x02
     8e8:	80 93 1d 01 	sts	0x011D, r24
	 sound_enable = gParams.sound_enable;			// Global sound enable
     8ec:	8b 81       	ldd	r24, Y+3	; 0x03
     8ee:	80 93 1a 01 	sts	0x011A, r24
	 power_off_timeout = gParams.power_off_timeout;	// Auto power OFF timeout, minutes
     8f2:	8c 81       	ldd	r24, Y+4	; 0x04
     8f4:	80 93 2a 01 	sts	0x012A, r24
	 cpoint1 = gParams.cpoint1;						// Calibration point 1
     8f8:	8d 81       	ldd	r24, Y+5	; 0x05
     8fa:	80 93 10 01 	sts	0x0110, r24
	 cpoint2 = gParams.cpoint2;						// Calibration point 2
     8fe:	8e 81       	ldd	r24, Y+6	; 0x06
     900:	80 93 30 01 	sts	0x0130, r24
	 cpoint1_adc = gParams.cpoint1_adc;
     904:	8f 81       	ldd	r24, Y+7	; 0x07
     906:	98 85       	ldd	r25, Y+8	; 0x08
     908:	90 93 29 01 	sts	0x0129, r25
     90c:	80 93 28 01 	sts	0x0128, r24
	 cpoint2_adc = gParams.cpoint2_adc;
     910:	89 85       	ldd	r24, Y+9	; 0x09
     912:	9a 85       	ldd	r25, Y+10	; 0x0a
     914:	90 93 2d 01 	sts	0x012D, r25
     918:	80 93 2c 01 	sts	0x012C, r24
//	 cpoint1 		= 25;		// TODO: check and remove
//	 cpoint1_adc 	= 164;
//	 cpoint2 		= 145;
//	 cpoint2_adc 	= 433;
	 
}
     91c:	2a 96       	adiw	r28, 0x0a	; 10
     91e:	0f b6       	in	r0, 0x3f	; 63
     920:	f8 94       	cli
     922:	de bf       	out	0x3e, r29	; 62
     924:	0f be       	out	0x3f, r0	; 63
     926:	cd bf       	out	0x3d, r28	; 61
     928:	df 91       	pop	r29
     92a:	cf 91       	pop	r28
     92c:	08 95       	ret

0000092e <exitPowerOff>:




void exitPowerOff(void)
{
     92e:	08 95       	ret

00000930 <processAutoPowerOff>:
*/
}


void processAutoPowerOff(void)
{
     930:	08 95       	ret

00000932 <decode_led_char>:
// Decodes normal string literal to the 
//	7-segment representation
//---------------------------------------------//
static uint8_t decode_led_char(char c)
{
	switch(c)
     932:	48 2f       	mov	r20, r24
     934:	50 e0       	ldi	r21, 0x00	; 0
     936:	fa 01       	movw	r30, r20
     938:	b0 97       	sbiw	r30, 0x20	; 32
     93a:	e1 39       	cpi	r30, 0x91	; 145
     93c:	f1 05       	cpc	r31, r1
     93e:	70 f5       	brcc	.+92     	; 0x99c <decode_led_char+0x6a>
     940:	ed 5e       	subi	r30, 0xED	; 237
     942:	ff 4f       	sbci	r31, 0xFF	; 255
     944:	09 94       	ijmp
	{
		case 'O':
		case '0': return (SEGA | SEGB | SEGC | SEGD | SEGE | SEGF);
     946:	8f e3       	ldi	r24, 0x3F	; 63
     948:	08 95       	ret
		case '1': return (SEGB | SEGC );
		case '2': return (SEGA | SEGB | SEGD | SEGE | SEGG);
     94a:	8b e5       	ldi	r24, 0x5B	; 91
     94c:	08 95       	ret
		case '3': return (SEGA | SEGB | SEGC | SEGD | SEGG);
     94e:	8f e4       	ldi	r24, 0x4F	; 79
     950:	08 95       	ret
		case '4': return (SEGB | SEGC | SEGF | SEGG);
     952:	86 e6       	ldi	r24, 0x66	; 102
     954:	08 95       	ret
		case 'S':
		case '5': return (SEGA | SEGC | SEGD | SEGF | SEGG);
     956:	8d e6       	ldi	r24, 0x6D	; 109
     958:	08 95       	ret
		case '6': return (SEGA | SEGC | SEGD | SEGE | SEGF | SEGG);
     95a:	8d e7       	ldi	r24, 0x7D	; 125
     95c:	08 95       	ret
		case '7': return (SEGA | SEGB | SEGC );
     95e:	87 e0       	ldi	r24, 0x07	; 7
     960:	08 95       	ret
		case '8': return (SEGA | SEGB | SEGC | SEGD | SEGE | SEGF | SEGG);
     962:	8f e7       	ldi	r24, 0x7F	; 127
     964:	08 95       	ret
		case '9': return (SEGA | SEGB | SEGC | SEGD | SEGF | SEGG);
     966:	8f e6       	ldi	r24, 0x6F	; 111
     968:	08 95       	ret
		case '.': return (SEGH);
     96a:	80 e8       	ldi	r24, 0x80	; 128
     96c:	08 95       	ret
		case ',': return (SEGH);
     96e:	80 e8       	ldi	r24, 0x80	; 128
     970:	08 95       	ret
		case '-': return (SEGG);
     972:	80 e4       	ldi	r24, 0x40	; 64
     974:	08 95       	ret
		case '_': return (SEGD);
     976:	88 e0       	ldi	r24, 0x08	; 8
     978:	08 95       	ret
		case ' ': return 0;
     97a:	80 e0       	ldi	r24, 0x00	; 0
     97c:	08 95       	ret
		case 0xB0:	return (SEGA | SEGB | SEGF | SEGG);		// Degree sin
     97e:	83 e6       	ldi	r24, 0x63	; 99
     980:	08 95       	ret
		case 'C':	return (SEGA | SEGD | SEGE | SEGF);
     982:	89 e3       	ldi	r24, 0x39	; 57
     984:	08 95       	ret
		case 'F':	return (SEGA | SEGE | SEGF | SEGG);
     986:	81 e7       	ldi	r24, 0x71	; 113
     988:	08 95       	ret
		case 'N':	return (SEGC | SEGE | SEGG);
     98a:	84 e5       	ldi	r24, 0x54	; 84
     98c:	08 95       	ret
		case 'D': return (SEGB | SEGC | SEGD | SEGE | SEGG);
     98e:	8e e5       	ldi	r24, 0x5E	; 94
     990:	08 95       	ret
		case 'P': return (SEGA | SEGB | SEGE | SEGF | SEGG);
     992:	83 e7       	ldi	r24, 0x73	; 115
     994:	08 95       	ret
		case 'E': return (SEGA | SEGD | SEGE | SEGF | SEGG);
     996:	89 e7       	ldi	r24, 0x79	; 121
     998:	08 95       	ret
{
	switch(c)
	{
		case 'O':
		case '0': return (SEGA | SEGB | SEGC | SEGD | SEGE | SEGF);
		case '1': return (SEGB | SEGC );
     99a:	86 e0       	ldi	r24, 0x06	; 6
		case 'D': return (SEGB | SEGC | SEGD | SEGE | SEGG);
		case 'P': return (SEGA | SEGB | SEGE | SEGF | SEGG);
		case 'E': return (SEGA | SEGD | SEGE | SEGF | SEGG);
		default:  return c;	
	}
}
     99c:	08 95       	ret

0000099e <wrap_led_buffer_index>:
//---------------------------------------------//
// Ensures that index is inside the buffer
// -128 <= index <= 127
//---------------------------------------------//
static uint8_t wrap_led_buffer_index(int8_t buf_index)
{
     99e:	98 2f       	mov	r25, r24
	uint8_t new_index_u;
	new_index_u = (uint8_t) ((buf_index < 0) ? -buf_index : buf_index);
     9a0:	87 fd       	sbrc	r24, 7
     9a2:	81 95       	neg	r24
	if (new_index_u >= LED_BUFFER_LENGTH)
     9a4:	8e 30       	cpi	r24, 0x0E	; 14
     9a6:	78 f0       	brcs	.+30     	; 0x9c6 <wrap_led_buffer_index+0x28>
		new_index_u = new_index_u % LED_BUFFER_LENGTH;
     9a8:	38 2f       	mov	r19, r24
     9aa:	36 95       	lsr	r19
     9ac:	23 e9       	ldi	r18, 0x93	; 147
     9ae:	32 9f       	mul	r19, r18
     9b0:	21 2d       	mov	r18, r1
     9b2:	11 24       	eor	r1, r1
     9b4:	26 95       	lsr	r18
     9b6:	26 95       	lsr	r18
     9b8:	22 0f       	add	r18, r18
     9ba:	32 2f       	mov	r19, r18
     9bc:	33 0f       	add	r19, r19
     9be:	33 0f       	add	r19, r19
     9c0:	33 0f       	add	r19, r19
     9c2:	32 1b       	sub	r19, r18
     9c4:	83 1b       	sub	r24, r19
	new_index_u = ((buf_index >= 0) || (new_index_u == 0)) ? new_index_u :  LED_BUFFER_LENGTH - new_index_u ;
     9c6:	99 23       	and	r25, r25
     9c8:	2c f4       	brge	.+10     	; 0x9d4 <wrap_led_buffer_index+0x36>
     9ca:	88 23       	and	r24, r24
     9cc:	19 f0       	breq	.+6      	; 0x9d4 <wrap_led_buffer_index+0x36>
     9ce:	9e e0       	ldi	r25, 0x0E	; 14
     9d0:	98 1b       	sub	r25, r24
     9d2:	89 2f       	mov	r24, r25
	return new_index_u;
}
     9d4:	08 95       	ret

000009d6 <processLedIndicator>:
// Call this function N times per sec to get N/NUM_DIGITS_TOTAL display update rate, where
// NUM_DIGITS_TOTAL is number_of_digits_of_LED_display if no extra LEDs are used or
// (number_of_digits_of_LED_display + 1) otherwise.
//---------------------------------------------//
void processLedIndicator()
{
     9d6:	cf 93       	push	r28
	disable_led_segments();
	#endif
	
	
	// Perform regular shift
	led_clock_pulse(!LED_DIGIT_ACT_LVL);
     9d8:	81 e0       	ldi	r24, 0x01	; 1
     9da:	22 d1       	rcall	.+580    	; 0xc20 <led_clock_pulse>
	
	switch (wActivePos)
     9dc:	80 91 d3 00 	lds	r24, 0x00D3
     9e0:	88 23       	and	r24, r24
     9e2:	19 f0       	breq	.+6      	; 0x9ea <processLedIndicator+0x14>
     9e4:	86 30       	cpi	r24, 0x06	; 6
     9e6:	f1 f5       	brne	.+124    	; 0xa64 <processLedIndicator+0x8e>
     9e8:	12 c0       	rjmp	.+36     	; 0xa0e <processLedIndicator+0x38>
	{
	case 0:
		// Get buttons
		#ifndef CLEAN_OPERATION
		disable_led_segments();
     9ea:	46 d1       	rcall	.+652    	; 0xc78 <disable_led_segments>
		#endif
		enable_led_segments_pullups();
     9ec:	37 d1       	rcall	.+622    	; 0xc5c <enable_led_segments_pullups>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     9ee:	85 e3       	ldi	r24, 0x35	; 53
     9f0:	8a 95       	dec	r24
     9f2:	f1 f7       	brne	.-4      	; 0x9f0 <processLedIndicator+0x1a>
     9f4:	00 00       	nop
		_delay_us(PULLUP_DELAY_US);
		capture_button_state();
     9f6:	47 d1       	rcall	.+654    	; 0xc86 <capture_button_state>
		#ifndef CLEAN_OPERATION
		enable_led_segments();
     9f8:	38 d1       	rcall	.+624    	; 0xc6a <enable_led_segments>
		#endif
		// Start new cycle with active digit level
		led_clock_pulse(LED_DIGIT_ACT_LVL);
     9fa:	80 e0       	ldi	r24, 0x00	; 0
     9fc:	11 d1       	rcall	.+546    	; 0xc20 <led_clock_pulse>
		// Always start new cycle from specified buffer start position
		bufActivePos = wStartPos;
     9fe:	80 91 32 01 	lds	r24, 0x0132
     a02:	80 93 d2 00 	sts	0x00D2, r24
		next_wActivePos = wActivePos + 1;
     a06:	c0 91 d3 00 	lds	r28, 0x00D3
     a0a:	cf 5f       	subi	r28, 0xFF	; 255
		break;
     a0c:	2f c0       	rjmp	.+94     	; 0xa6c <processLedIndicator+0x96>
//---------------------------------------------//
// Performs window shifting
//---------------------------------------------//
static void processWindowShifter(void)
{
	if (shifterState == LED_SHIFT_DONE)
     a0e:	80 91 33 01 	lds	r24, 0x0133
     a12:	88 23       	and	r24, r24
     a14:	81 f1       	breq	.+96     	; 0xa76 <processLedIndicator+0xa0>
		return;
	
	// Process shift timer
	processSoftTimer8b(&shiftTimer);	
     a16:	84 ed       	ldi	r24, 0xD4	; 212
     a18:	90 e0       	ldi	r25, 0x00	; 0
     a1a:	b5 d7       	rcall	.+3946   	; 0x1986 <processSoftTimer8b>
	
	if (shiftTimer.FTop)
     a1c:	80 91 d4 00 	lds	r24, 0x00D4
     a20:	85 ff       	sbrs	r24, 5
     a22:	23 c0       	rjmp	.+70     	; 0xa6a <processLedIndicator+0x94>
	{
		// Check if finished
		if (wStartPos == bufStartPos)	
     a24:	80 91 32 01 	lds	r24, 0x0132
     a28:	90 91 34 01 	lds	r25, 0x0134
     a2c:	89 13       	cpse	r24, r25
     a2e:	04 c0       	rjmp	.+8      	; 0xa38 <processLedIndicator+0x62>
		{
			// Update state
			shifterState = LED_SHIFT_DONE;
     a30:	10 92 33 01 	sts	0x0133, r1
		// Always start new cycle from specified buffer start position
		bufActivePos = wStartPos;
		next_wActivePos = wActivePos + 1;
		break;
	case NUM_DIGITS_TOTAL-1:
		next_wActivePos = 0;
     a34:	c0 e0       	ldi	r28, 0x00	; 0
     a36:	1a c0       	rjmp	.+52     	; 0xa6c <processLedIndicator+0x96>
		if (wStartPos == bufStartPos)	
		{
			// Update state
			shifterState = LED_SHIFT_DONE;
		}
		else if (shifterState == LED_SHIFT_RIGHT)
     a38:	90 91 33 01 	lds	r25, 0x0133
     a3c:	92 30       	cpi	r25, 0x02	; 2
     a3e:	49 f4       	brne	.+18     	; 0xa52 <processLedIndicator+0x7c>
// Increments index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t inc_buffer_position(uint8_t position)
{
	return (position >= LED_BUFFER_LENGTH - 1) ? 0 : position + 1;
     a40:	8d 30       	cpi	r24, 0x0D	; 13
     a42:	10 f4       	brcc	.+4      	; 0xa48 <processLedIndicator+0x72>
     a44:	8f 5f       	subi	r24, 0xFF	; 255
     a46:	01 c0       	rjmp	.+2      	; 0xa4a <processLedIndicator+0x74>
     a48:	80 e0       	ldi	r24, 0x00	; 0
			// Update state
			shifterState = LED_SHIFT_DONE;
		}
		else if (shifterState == LED_SHIFT_RIGHT)
		{
			wStartPos = inc_buffer_position(wStartPos);	
     a4a:	80 93 32 01 	sts	0x0132, r24
		// Always start new cycle from specified buffer start position
		bufActivePos = wStartPos;
		next_wActivePos = wActivePos + 1;
		break;
	case NUM_DIGITS_TOTAL-1:
		next_wActivePos = 0;
     a4e:	c0 e0       	ldi	r28, 0x00	; 0
     a50:	0d c0       	rjmp	.+26     	; 0xa6c <processLedIndicator+0x96>
// Decrements index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t dec_buffer_position(uint8_t position)
{
	return (position == 0) ? LED_BUFFER_LENGTH - 1 : position - 1;
     a52:	88 23       	and	r24, r24
     a54:	11 f0       	breq	.+4      	; 0xa5a <processLedIndicator+0x84>
     a56:	81 50       	subi	r24, 0x01	; 1
     a58:	01 c0       	rjmp	.+2      	; 0xa5c <processLedIndicator+0x86>
     a5a:	8d e0       	ldi	r24, 0x0D	; 13
		{
			wStartPos = inc_buffer_position(wStartPos);	
		}
		else
		{
			wStartPos = dec_buffer_position(wStartPos);		
     a5c:	80 93 32 01 	sts	0x0132, r24
		// Always start new cycle from specified buffer start position
		bufActivePos = wStartPos;
		next_wActivePos = wActivePos + 1;
		break;
	case NUM_DIGITS_TOTAL-1:
		next_wActivePos = 0;
     a60:	c0 e0       	ldi	r28, 0x00	; 0
     a62:	04 c0       	rjmp	.+8      	; 0xa6c <processLedIndicator+0x96>
		// Shift LED window
		processWindowShifter();	
		break;
	default:
		next_wActivePos = wActivePos + 1;
     a64:	c8 2f       	mov	r28, r24
     a66:	cf 5f       	subi	r28, 0xFF	; 255
		break;
     a68:	01 c0       	rjmp	.+2      	; 0xa6c <processLedIndicator+0x96>
		// Always start new cycle from specified buffer start position
		bufActivePos = wStartPos;
		next_wActivePos = wActivePos + 1;
		break;
	case NUM_DIGITS_TOTAL-1:
		next_wActivePos = 0;
     a6a:	c0 e0       	ldi	r28, 0x00	; 0
		next_wActivePos = wActivePos + 1;
		break;
	}		
	
	#ifdef 	USE_EXTRA_LED_DIGIT
	if (wActivePos == EXTRA_DIGIT_NUM)
     a6c:	80 91 d3 00 	lds	r24, 0x00D3
     a70:	86 30       	cpi	r24, 0x06	; 6
     a72:	31 f4       	brne	.+12     	; 0xa80 <processLedIndicator+0xaa>
     a74:	01 c0       	rjmp	.+2      	; 0xa78 <processLedIndicator+0xa2>
		// Always start new cycle from specified buffer start position
		bufActivePos = wStartPos;
		next_wActivePos = wActivePos + 1;
		break;
	case NUM_DIGITS_TOTAL-1:
		next_wActivePos = 0;
     a76:	c0 e0       	ldi	r28, 0x00	; 0
	
	#ifdef 	USE_EXTRA_LED_DIGIT
	if (wActivePos == EXTRA_DIGIT_NUM)
	{
		// Output separate LEDs state
		set_led_segments(extra_led_state);
     a78:	80 91 31 01 	lds	r24, 0x0131
     a7c:	e1 d0       	rcall	.+450    	; 0xc40 <set_led_segments>
     a7e:	10 c0       	rjmp	.+32     	; 0xaa0 <processLedIndicator+0xca>
	}
	else
	#endif
	{
		// Output new segment data
		set_led_segments(led_data_buffer[bufActivePos]);
     a80:	e0 91 d2 00 	lds	r30, 0x00D2
     a84:	f0 e0       	ldi	r31, 0x00	; 0
     a86:	eb 5c       	subi	r30, 0xCB	; 203
     a88:	fe 4f       	sbci	r31, 0xFE	; 254
     a8a:	80 81       	ld	r24, Z
     a8c:	d9 d0       	rcall	.+434    	; 0xc40 <set_led_segments>
		// Wrap around buffer length
		bufActivePos = inc_buffer_position(bufActivePos );
     a8e:	90 91 d2 00 	lds	r25, 0x00D2
// Increments index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t inc_buffer_position(uint8_t position)
{
	return (position >= LED_BUFFER_LENGTH - 1) ? 0 : position + 1;
     a92:	9d 30       	cpi	r25, 0x0D	; 13
     a94:	10 f4       	brcc	.+4      	; 0xa9a <processLedIndicator+0xc4>
     a96:	9f 5f       	subi	r25, 0xFF	; 255
     a98:	01 c0       	rjmp	.+2      	; 0xa9c <processLedIndicator+0xc6>
     a9a:	90 e0       	ldi	r25, 0x00	; 0
	#endif
	{
		// Output new segment data
		set_led_segments(led_data_buffer[bufActivePos]);
		// Wrap around buffer length
		bufActivePos = inc_buffer_position(bufActivePos );
     a9c:	90 93 d2 00 	sts	0x00D2, r25
	}
		
	wActivePos = next_wActivePos;
     aa0:	c0 93 d3 00 	sts	0x00D3, r28
	
	#ifdef CLEAN_OPERATION
	enable_led_segments();
	#endif

}
     aa4:	cf 91       	pop	r28
     aa6:	08 95       	ret

00000aa8 <fillLedBuffer>:
//---------------------------------------------//
// Fills buffer from (bufStartPos + offset) 
//	position with single char
//---------------------------------------------//
void fillLedBuffer(int8_t offset, uint8_t length, char c)
{
     aa8:	1f 93       	push	r17
     aaa:	cf 93       	push	r28
     aac:	df 93       	push	r29
     aae:	18 2f       	mov	r17, r24
     ab0:	c6 2f       	mov	r28, r22
     ab2:	84 2f       	mov	r24, r20
	uint8_t val = decode_led_char(c);
     ab4:	3e df       	rcall	.-388    	; 0x932 <decode_led_char>
     ab6:	d8 2f       	mov	r29, r24
	// Ensure index is inside the buffer
	uint8_t position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
     ab8:	80 91 34 01 	lds	r24, 0x0134
     abc:	81 0f       	add	r24, r17
     abe:	6f df       	rcall	.-290    	; 0x99e <wrap_led_buffer_index>
// Increments index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t inc_buffer_position(uint8_t position)
{
	return (position >= LED_BUFFER_LENGTH - 1) ? 0 : position + 1;
     ac0:	90 e0       	ldi	r25, 0x00	; 0
void fillLedBuffer(int8_t offset, uint8_t length, char c)
{
	uint8_t val = decode_led_char(c);
	// Ensure index is inside the buffer
	uint8_t position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
	while(length--)
     ac2:	0a c0       	rjmp	.+20     	; 0xad8 <fillLedBuffer+0x30>
	{
		led_data_buffer[position] = val;
     ac4:	e8 2f       	mov	r30, r24
     ac6:	f0 e0       	ldi	r31, 0x00	; 0
     ac8:	eb 5c       	subi	r30, 0xCB	; 203
     aca:	fe 4f       	sbci	r31, 0xFE	; 254
     acc:	d0 83       	st	Z, r29
// Increments index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t inc_buffer_position(uint8_t position)
{
	return (position >= LED_BUFFER_LENGTH - 1) ? 0 : position + 1;
     ace:	8d 30       	cpi	r24, 0x0D	; 13
     ad0:	10 f4       	brcc	.+4      	; 0xad6 <fillLedBuffer+0x2e>
     ad2:	8f 5f       	subi	r24, 0xFF	; 255
     ad4:	01 c0       	rjmp	.+2      	; 0xad8 <fillLedBuffer+0x30>
     ad6:	89 2f       	mov	r24, r25
void fillLedBuffer(int8_t offset, uint8_t length, char c)
{
	uint8_t val = decode_led_char(c);
	// Ensure index is inside the buffer
	uint8_t position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
	while(length--)
     ad8:	c1 50       	subi	r28, 0x01	; 1
     ada:	a0 f7       	brcc	.-24     	; 0xac4 <fillLedBuffer+0x1c>
	{
		led_data_buffer[position] = val;
		position = inc_buffer_position(position);
	}
}
     adc:	df 91       	pop	r29
     ade:	cf 91       	pop	r28
     ae0:	1f 91       	pop	r17
     ae2:	08 95       	ret

00000ae4 <startShiftingWindowLeft>:
//	LED window left 
//---------------------------------------------//
void startShiftingWindowLeft(void)
{
	// Clear spaces between menu states
	fillLedBuffer(-2,2,' ');
     ae4:	40 e2       	ldi	r20, 0x20	; 32
     ae6:	62 e0       	ldi	r22, 0x02	; 2
     ae8:	8e ef       	ldi	r24, 0xFE	; 254
     aea:	de df       	rcall	.-68     	; 0xaa8 <fillLedBuffer>
	// Set new buffer position for writing
	bufStartPos = wrap_led_buffer_index( (int8_t)bufStartPos - (NUM_DIGITS + 2) );
     aec:	80 91 34 01 	lds	r24, 0x0134
     af0:	88 50       	subi	r24, 0x08	; 8
     af2:	55 df       	rcall	.-342    	; 0x99e <wrap_led_buffer_index>
     af4:	80 93 34 01 	sts	0x0134, r24
	// Set shifter state
	shifterState = LED_SHIFT_LEFT;
     af8:	81 e0       	ldi	r24, 0x01	; 1
     afa:	80 93 33 01 	sts	0x0133, r24
     afe:	08 95       	ret

00000b00 <startShiftingWindowRight>:
//	LED window right 
//---------------------------------------------//
void startShiftingWindowRight(void)
{
	// Clear spaces between menu states
	fillLedBuffer(NUM_DIGITS,2,' ');
     b00:	40 e2       	ldi	r20, 0x20	; 32
     b02:	62 e0       	ldi	r22, 0x02	; 2
     b04:	86 e0       	ldi	r24, 0x06	; 6
     b06:	d0 df       	rcall	.-96     	; 0xaa8 <fillLedBuffer>
	// Set new buffer position for writing
	bufStartPos = wrap_led_buffer_index( (int8_t)bufStartPos + NUM_DIGITS + 2 );
     b08:	80 91 34 01 	lds	r24, 0x0134
     b0c:	88 5f       	subi	r24, 0xF8	; 248
     b0e:	47 df       	rcall	.-370    	; 0x99e <wrap_led_buffer_index>
     b10:	80 93 34 01 	sts	0x0134, r24
	// Set shifter state
	shifterState = LED_SHIFT_RIGHT;
     b14:	82 e0       	ldi	r24, 0x02	; 2
     b16:	80 93 33 01 	sts	0x0133, r24
     b1a:	08 95       	ret

00000b1c <initLedIndicator>:
//---------------------------------------------//
//	Initialization
//	Call this function at start of your program
//---------------------------------------------//
void initLedIndicator()
{
     b1c:	cf 93       	push	r28
	uint8_t i;
	// First disable outputs
	disable_led_segments();
     b1e:	ac d0       	rcall	.+344    	; 0xc78 <disable_led_segments>
     b20:	c7 e0       	ldi	r28, 0x07	; 7
	// Fill shift register with non-active levels
	for (i=0;i<NUM_DIGITS_TOTAL;i++)
	{
		led_clock_pulse(!LED_DIGIT_ACT_LVL);
     b22:	81 e0       	ldi	r24, 0x01	; 1
     b24:	7d d0       	rcall	.+250    	; 0xc20 <led_clock_pulse>
     b26:	c1 50       	subi	r28, 0x01	; 1
{
	uint8_t i;
	// First disable outputs
	disable_led_segments();
	// Fill shift register with non-active levels
	for (i=0;i<NUM_DIGITS_TOTAL;i++)
     b28:	e1 f7       	brne	.-8      	; 0xb22 <initLedIndicator+0x6>
	{
		led_clock_pulse(!LED_DIGIT_ACT_LVL);
	}
	// Now enable outputs
	enable_led_segments();
     b2a:	9f d0       	rcall	.+318    	; 0xc6a <enable_led_segments>
	
	// Reset pointers
	wStartPos = 0;
     b2c:	10 92 32 01 	sts	0x0132, r1
	bufStartPos = 0;
     b30:	10 92 34 01 	sts	0x0134, r1
	bufActivePos = 0;
     b34:	10 92 d2 00 	sts	0x00D2, r1
	wActivePos = 0;
     b38:	10 92 d3 00 	sts	0x00D3, r1
	#ifdef 	USE_EXTRA_LED_DIGIT
	extra_led_state = 0;
     b3c:	10 92 31 01 	sts	0x0131, r1
	#endif
	
	// Clear the buffer 
	fillLedBuffer(0,LED_BUFFER_LENGTH,' ');
     b40:	40 e2       	ldi	r20, 0x20	; 32
     b42:	6e e0       	ldi	r22, 0x0E	; 14
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	b0 df       	rcall	.-160    	; 0xaa8 <fillLedBuffer>
	
	// Initialize shift timer - always enabled, but 
	//	processed only when shifting is active
	shifterState = LED_SHIFT_DONE;
     b48:	10 92 33 01 	sts	0x0133, r1
	shiftTimer.Enabled = 1;
     b4c:	e4 ed       	ldi	r30, 0xD4	; 212
     b4e:	f0 e0       	ldi	r31, 0x00	; 0
     b50:	80 81       	ld	r24, Z
	shiftTimer.RunOnce = 0;
     b52:	81 60       	ori	r24, 0x01	; 1
     b54:	8d 7f       	andi	r24, 0xFD	; 253
     b56:	80 83       	st	Z, r24
	shiftTimer.Top = LED_SHIFT_INTERVAL-1;
     b58:	89 e0       	ldi	r24, 0x09	; 9
     b5a:	80 93 d6 00 	sts	0x00D6, r24
}
     b5e:	cf 91       	pop	r28
     b60:	08 95       	ret

00000b62 <printLedBuffer>:
//		str - null-terminated char string
// Comma and dot (".", ",") get special processing - first occurrence is added to
// a preceding char, next are displayed as a single digit
//---------------------------------------------//
void printLedBuffer(int8_t offset, char* str)
{
     b62:	df 92       	push	r13
     b64:	ef 92       	push	r14
     b66:	ff 92       	push	r15
     b68:	0f 93       	push	r16
     b6a:	1f 93       	push	r17
     b6c:	cf 93       	push	r28
     b6e:	df 93       	push	r29
     b70:	eb 01       	movw	r28, r22
	char c;
	uint8_t decoded_sym;
	uint8_t state = 0x02;
	uint8_t comma_pos;
	// Ensure index is inside the buffer
	uint8_t buffer_position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
     b72:	90 91 34 01 	lds	r25, 0x0134
     b76:	89 0f       	add	r24, r25
     b78:	12 df       	rcall	.-476    	; 0x99e <wrap_led_buffer_index>
     b7a:	18 2f       	mov	r17, r24
	comma_pos = buffer_position;
     b7c:	d8 2e       	mov	r13, r24
//---------------------------------------------//
void printLedBuffer(int8_t offset, char* str)
{
	char c;
	uint8_t decoded_sym;
	uint8_t state = 0x02;
     b7e:	02 e0       	ldi	r16, 0x02	; 2
		comma_pos = buffer_position;
		if (state != 0x01)
		{
			buffer_position = inc_buffer_position(buffer_position);
		}
		state = (state & 0x01) ? 0x03 : 0x00;		
     b80:	f1 2c       	mov	r15, r1
     b82:	0f 2e       	mov	r0, r31
     b84:	f3 e0       	ldi	r31, 0x03	; 3
     b86:	ef 2e       	mov	r14, r31
     b88:	f0 2d       	mov	r31, r0
	uint8_t comma_pos;
	// Ensure index is inside the buffer
	uint8_t buffer_position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
	comma_pos = buffer_position;
	// Output chars
	while((c = *str++))
     b8a:	26 c0       	rjmp	.+76     	; 0xbd8 <printLedBuffer+0x76>
	{
		decoded_sym = decode_led_char(c);
     b8c:	d2 de       	rcall	.-604    	; 0x932 <decode_led_char>
		state = (decoded_sym == SEGH) ? (state | 0x01) : (state & ~0x01);
     b8e:	80 38       	cpi	r24, 0x80	; 128
     b90:	19 f4       	brne	.+6      	; 0xb98 <printLedBuffer+0x36>
     b92:	90 2f       	mov	r25, r16
     b94:	91 60       	ori	r25, 0x01	; 1
     b96:	02 c0       	rjmp	.+4      	; 0xb9c <printLedBuffer+0x3a>
     b98:	90 2f       	mov	r25, r16
     b9a:	9e 7f       	andi	r25, 0xFE	; 254
		if (state == 0x01)			
     b9c:	91 30       	cpi	r25, 0x01	; 1
     b9e:	51 f4       	brne	.+20     	; 0xbb4 <printLedBuffer+0x52>
		{
			led_data_buffer[comma_pos] |= decoded_sym;
     ba0:	ed 2d       	mov	r30, r13
     ba2:	f0 e0       	ldi	r31, 0x00	; 0
     ba4:	eb 5c       	subi	r30, 0xCB	; 203
     ba6:	fe 4f       	sbci	r31, 0xFE	; 254
     ba8:	90 81       	ld	r25, Z
     baa:	89 2b       	or	r24, r25
     bac:	80 83       	st	Z, r24
     bae:	81 2f       	mov	r24, r17
		comma_pos = buffer_position;
		if (state != 0x01)
		{
			buffer_position = inc_buffer_position(buffer_position);
		}
		state = (state & 0x01) ? 0x03 : 0x00;		
     bb0:	0e 2d       	mov	r16, r14
     bb2:	10 c0       	rjmp	.+32     	; 0xbd4 <printLedBuffer+0x72>
		{
			led_data_buffer[comma_pos] |= decoded_sym;
		}
		else
		{
			led_data_buffer[buffer_position] = decoded_sym;	
     bb4:	e1 2f       	mov	r30, r17
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
     bb8:	eb 5c       	subi	r30, 0xCB	; 203
     bba:	fe 4f       	sbci	r31, 0xFE	; 254
     bbc:	80 83       	st	Z, r24
// Increments index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t inc_buffer_position(uint8_t position)
{
	return (position >= LED_BUFFER_LENGTH - 1) ? 0 : position + 1;
     bbe:	1d 30       	cpi	r17, 0x0D	; 13
     bc0:	18 f4       	brcc	.+6      	; 0xbc8 <printLedBuffer+0x66>
     bc2:	81 2f       	mov	r24, r17
     bc4:	8f 5f       	subi	r24, 0xFF	; 255
     bc6:	01 c0       	rjmp	.+2      	; 0xbca <printLedBuffer+0x68>
     bc8:	8f 2d       	mov	r24, r15
		comma_pos = buffer_position;
		if (state != 0x01)
		{
			buffer_position = inc_buffer_position(buffer_position);
		}
		state = (state & 0x01) ? 0x03 : 0x00;		
     bca:	90 ff       	sbrs	r25, 0
     bcc:	02 c0       	rjmp	.+4      	; 0xbd2 <printLedBuffer+0x70>
     bce:	0e 2d       	mov	r16, r14
     bd0:	01 c0       	rjmp	.+2      	; 0xbd4 <printLedBuffer+0x72>
     bd2:	0f 2d       	mov	r16, r15
     bd4:	d1 2e       	mov	r13, r17
     bd6:	18 2f       	mov	r17, r24
	uint8_t comma_pos;
	// Ensure index is inside the buffer
	uint8_t buffer_position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
	comma_pos = buffer_position;
	// Output chars
	while((c = *str++))
     bd8:	89 91       	ld	r24, Y+
     bda:	81 11       	cpse	r24, r1
     bdc:	d7 cf       	rjmp	.-82     	; 0xb8c <printLedBuffer+0x2a>
		{
			buffer_position = inc_buffer_position(buffer_position);
		}
		state = (state & 0x01) ? 0x03 : 0x00;		
	}
}
     bde:	df 91       	pop	r29
     be0:	cf 91       	pop	r28
     be2:	1f 91       	pop	r17
     be4:	0f 91       	pop	r16
     be6:	ff 90       	pop	r15
     be8:	ef 90       	pop	r14
     bea:	df 90       	pop	r13
     bec:	08 95       	ret

00000bee <setComma>:
//	buffer cell
//---------------------------------------------//
void setComma(int8_t offset)
{
	// Ensure index is inside the buffer
	uint8_t position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
     bee:	90 91 34 01 	lds	r25, 0x0134
     bf2:	89 0f       	add	r24, r25
     bf4:	d4 de       	rcall	.-600    	; 0x99e <wrap_led_buffer_index>
	led_data_buffer[position] |= (SEGH);
     bf6:	e8 2f       	mov	r30, r24
     bf8:	f0 e0       	ldi	r31, 0x00	; 0
     bfa:	eb 5c       	subi	r30, 0xCB	; 203
     bfc:	fe 4f       	sbci	r31, 0xFE	; 254
     bfe:	80 81       	ld	r24, Z
     c00:	80 68       	ori	r24, 0x80	; 128
     c02:	80 83       	st	Z, r24
     c04:	08 95       	ret

00000c06 <setExtraLeds>:
// Argument is ORed with current LED state
//---------------------------------------------//
inline void setExtraLeds(uint8_t leds_set_value)
{
		//asm("cli");
		extra_led_state |= leds_set_value;
     c06:	90 91 31 01 	lds	r25, 0x0131
     c0a:	89 2b       	or	r24, r25
     c0c:	80 93 31 01 	sts	0x0131, r24
     c10:	08 95       	ret

00000c12 <clearExtraLeds>:
// Argument is AND NOTed with current LED state
//---------------------------------------------//
inline void clearExtraLeds(uint8_t leds_clear_value)
{
		//asm("cli");
		extra_led_state &= ~leds_clear_value;
     c12:	90 91 31 01 	lds	r25, 0x0131
     c16:	80 95       	com	r24
     c18:	98 23       	and	r25, r24
     c1a:	90 93 31 01 	sts	0x0131, r25
     c1e:	08 95       	ret

00000c20 <led_clock_pulse>:


// Clocks in bit into the shift register
void led_clock_pulse(uint8_t bit)
{
	if (bit)
     c20:	88 23       	and	r24, r24
     c22:	11 f0       	breq	.+4      	; 0xc28 <led_clock_pulse+0x8>
		PORTB |= (1<<PB_LED_DOUT);
     c24:	c0 9a       	sbi	0x18, 0	; 24
     c26:	01 c0       	rjmp	.+2      	; 0xc2a <led_clock_pulse+0xa>
	else
		PORTB &= ~(1<<PB_LED_DOUT);
     c28:	c0 98       	cbi	0x18, 0	; 24
     c2a:	8a e1       	ldi	r24, 0x1A	; 26
     c2c:	8a 95       	dec	r24
     c2e:	f1 f7       	brne	.-4      	; 0xc2c <led_clock_pulse+0xc>
     c30:	00 c0       	rjmp	.+0      	; 0xc32 <led_clock_pulse+0x12>
	_delay_us(SETUP_DELAY_US);
	PORTB |= (1<<PB_LED_CLK);
     c32:	c2 9a       	sbi	0x18, 2	; 24
     c34:	8a e1       	ldi	r24, 0x1A	; 26
     c36:	8a 95       	dec	r24
     c38:	f1 f7       	brne	.-4      	; 0xc36 <led_clock_pulse+0x16>
     c3a:	00 c0       	rjmp	.+0      	; 0xc3c <led_clock_pulse+0x1c>
	_delay_us(SHIFT_DELAY_US);
	PORTB &= ~(1<<PB_LED_CLK);
     c3c:	c2 98       	cbi	0x18, 2	; 24
     c3e:	08 95       	ret

00000c40 <set_led_segments>:
// Outputs decoded segment data to port bits
void set_led_segments(uint8_t seg_ch)
{
	uint8_t pdat;
	seg_ch ^= LED_SEGMENT_MASK;
	pdat = PORTC & ~( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
     c40:	95 b3       	in	r25, 0x15	; 21
	pdat |= (seg_ch & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
     c42:	28 2f       	mov	r18, r24
     c44:	2f 71       	andi	r18, 0x1F	; 31
// Outputs decoded segment data to port bits
void set_led_segments(uint8_t seg_ch)
{
	uint8_t pdat;
	seg_ch ^= LED_SEGMENT_MASK;
	pdat = PORTC & ~( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
     c46:	90 7e       	andi	r25, 0xE0	; 224
	pdat |= (seg_ch & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
     c48:	92 2b       	or	r25, r18
	PORTC = pdat;
     c4a:	95 bb       	out	0x15, r25	; 21
	seg_ch >>= 2;
	pdat = PORTB & ~( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     c4c:	98 b3       	in	r25, 0x18	; 24
	uint8_t pdat;
	seg_ch ^= LED_SEGMENT_MASK;
	pdat = PORTC & ~( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
	pdat |= (seg_ch & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
	PORTC = pdat;
	seg_ch >>= 2;
     c4e:	86 95       	lsr	r24
     c50:	86 95       	lsr	r24
	pdat = PORTB & ~( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
	pdat |= (seg_ch & ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) ));
     c52:	88 73       	andi	r24, 0x38	; 56
	seg_ch ^= LED_SEGMENT_MASK;
	pdat = PORTC & ~( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
	pdat |= (seg_ch & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
	PORTC = pdat;
	seg_ch >>= 2;
	pdat = PORTB & ~( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     c54:	97 7c       	andi	r25, 0xC7	; 199
	pdat |= (seg_ch & ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) ));
     c56:	89 2b       	or	r24, r25
	PORTB = pdat;
     c58:	88 bb       	out	0x18, r24	; 24
     c5a:	08 95       	ret

00000c5c <enable_led_segments_pullups>:

// Turns segment port bits to HI-Z and
// enables pull-ups
void enable_led_segments_pullups()
{
	PORTC |= ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
     c5c:	85 b3       	in	r24, 0x15	; 21
     c5e:	8f 61       	ori	r24, 0x1F	; 31
     c60:	85 bb       	out	0x15, r24	; 21
	PORTB |= ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     c62:	88 b3       	in	r24, 0x18	; 24
     c64:	88 63       	ori	r24, 0x38	; 56
     c66:	88 bb       	out	0x18, r24	; 24
     c68:	08 95       	ret

00000c6a <enable_led_segments>:
}	

void enable_led_segments()
{
	DDRC |= ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
     c6a:	84 b3       	in	r24, 0x14	; 20
     c6c:	8f 61       	ori	r24, 0x1F	; 31
     c6e:	84 bb       	out	0x14, r24	; 20
	DDRB |= ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     c70:	87 b3       	in	r24, 0x17	; 23
     c72:	88 63       	ori	r24, 0x38	; 56
     c74:	87 bb       	out	0x17, r24	; 23
     c76:	08 95       	ret

00000c78 <disable_led_segments>:
}

void disable_led_segments()
{
	DDRC &= ~( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
     c78:	84 b3       	in	r24, 0x14	; 20
     c7a:	80 7e       	andi	r24, 0xE0	; 224
     c7c:	84 bb       	out	0x14, r24	; 20
	DDRB &= ~( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     c7e:	87 b3       	in	r24, 0x17	; 23
     c80:	87 7c       	andi	r24, 0xC7	; 199
     c82:	87 bb       	out	0x17, r24	; 23
     c84:	08 95       	ret

00000c86 <capture_button_state>:


void capture_button_state()
{
	uint8_t pdat;
	pdat = PINB  & ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     c86:	86 b3       	in	r24, 0x16	; 22
     c88:	88 73       	andi	r24, 0x38	; 56
	pdat <<= 2;
	pdat |= (PINC & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
     c8a:	93 b3       	in	r25, 0x13	; 19

void capture_button_state()
{
	uint8_t pdat;
	pdat = PINB  & ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
	pdat <<= 2;
     c8c:	88 0f       	add	r24, r24
     c8e:	88 0f       	add	r24, r24
	pdat |= (PINC & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
     c90:	9f 71       	andi	r25, 0x1F	; 31
     c92:	89 2b       	or	r24, r25
	raw_button_state = pdat ^ RAW_BUTTONS_INVERSE_MASK;
     c94:	80 95       	com	r24
     c96:	80 93 43 01 	sts	0x0143, r24
     c9a:	08 95       	ret

00000c9c <getMenuFunctionRecord>:
//		menuItemID - ID of an item
//		menuRecord - pointer to function structure to fill
//	Output:
//-----------------------------------------------------------------//
static void getMenuFunctionRecord(uint8_t menuItemID, MenuFunctionRecord* menuRecord )
{
     c9c:	0f 93       	push	r16
     c9e:	1f 93       	push	r17
     ca0:	cf 93       	push	r28
     ca2:	df 93       	push	r29
     ca4:	eb 01       	movw	r28, r22
     ca6:	40 e0       	ldi	r20, 0x00	; 0
     ca8:	50 e0       	ldi	r21, 0x00	; 0
	uint8_t i;
	for (i = 0; i < sizeof(menuFunctionSet)/sizeof(MenuFunctionRecord); i++  )
	{
		readMenuRecord(&menuFunctionSet[i], menuRecord);
     caa:	9a 01       	movw	r18, r20
     cac:	22 0f       	add	r18, r18
     cae:	33 1f       	adc	r19, r19
     cb0:	22 0f       	add	r18, r18
     cb2:	33 1f       	adc	r19, r19
     cb4:	22 0f       	add	r18, r18
     cb6:	33 1f       	adc	r19, r19
     cb8:	24 1b       	sub	r18, r20
     cba:	35 0b       	sbc	r19, r21
     cbc:	28 5b       	subi	r18, 0xB8	; 184
     cbe:	3e 4f       	sbci	r19, 0xFE	; 254
//		fRecPtr		- address of the function record in the FLASH
//		resPtr		- address of the record to fill in the SRAM
//-----------------------------------------------------------------//
static inline void readMenuRecord(const MenuFunctionRecord* fRecPtr, MenuFunctionRecord* resPtr )
{
	resPtr->Item = pgm_read_byte(&fRecPtr->Item);
     cc0:	f9 01       	movw	r30, r18
     cc2:	94 91       	lpm	r25, Z
	resPtr->SelectFunction = (FuncPtr)pgm_read_word(&fRecPtr->SelectFunction);
     cc4:	31 96       	adiw	r30, 0x01	; 1
     cc6:	a5 91       	lpm	r26, Z+
     cc8:	b4 91       	lpm	r27, Z
     cca:	0a 2f       	mov	r16, r26
     ccc:	1b 2f       	mov	r17, r27
	resPtr->RunFunction = (FuncPtr)pgm_read_word(&fRecPtr->RunFunction);
     cce:	f9 01       	movw	r30, r18
     cd0:	33 96       	adiw	r30, 0x03	; 3
     cd2:	a5 91       	lpm	r26, Z+
     cd4:	b4 91       	lpm	r27, Z
	resPtr->LeaveFunction = (FuncPtr)pgm_read_word(&fRecPtr->LeaveFunction);
     cd6:	2b 5f       	subi	r18, 0xFB	; 251
     cd8:	3f 4f       	sbci	r19, 0xFF	; 255
     cda:	f9 01       	movw	r30, r18
     cdc:	25 91       	lpm	r18, Z+
     cde:	34 91       	lpm	r19, Z
     ce0:	e2 2f       	mov	r30, r18
{
	uint8_t i;
	for (i = 0; i < sizeof(menuFunctionSet)/sizeof(MenuFunctionRecord); i++  )
	{
		readMenuRecord(&menuFunctionSet[i], menuRecord);
		if (menuRecord->Item == menuItemID)
     ce2:	89 13       	cpse	r24, r25
     ce4:	08 c0       	rjmp	.+16     	; 0xcf6 <getMenuFunctionRecord+0x5a>
     ce6:	98 83       	st	Y, r25
     ce8:	09 83       	std	Y+1, r16	; 0x01
     cea:	1a 83       	std	Y+2, r17	; 0x02
     cec:	ab 83       	std	Y+3, r26	; 0x03
     cee:	bc 83       	std	Y+4, r27	; 0x04
     cf0:	ed 83       	std	Y+5, r30	; 0x05
     cf2:	3e 83       	std	Y+6, r19	; 0x06
     cf4:	0c c0       	rjmp	.+24     	; 0xd0e <getMenuFunctionRecord+0x72>
     cf6:	4f 5f       	subi	r20, 0xFF	; 255
     cf8:	5f 4f       	sbci	r21, 0xFF	; 255
//	Output:
//-----------------------------------------------------------------//
static void getMenuFunctionRecord(uint8_t menuItemID, MenuFunctionRecord* menuRecord )
{
	uint8_t i;
	for (i = 0; i < sizeof(menuFunctionSet)/sizeof(MenuFunctionRecord); i++  )
     cfa:	4d 30       	cpi	r20, 0x0D	; 13
     cfc:	51 05       	cpc	r21, r1
     cfe:	a9 f6       	brne	.-86     	; 0xcaa <getMenuFunctionRecord+0xe>
     d00:	98 83       	st	Y, r25
     d02:	09 83       	std	Y+1, r16	; 0x01
     d04:	1a 83       	std	Y+2, r17	; 0x02
     d06:	ab 83       	std	Y+3, r26	; 0x03
     d08:	bc 83       	std	Y+4, r27	; 0x04
     d0a:	ed 83       	std	Y+5, r30	; 0x05
     d0c:	3e 83       	std	Y+6, r19	; 0x06
	{
		readMenuRecord(&menuFunctionSet[i], menuRecord);
		if (menuRecord->Item == menuItemID)
			break;
	}
}
     d0e:	df 91       	pop	r29
     d10:	cf 91       	pop	r28
     d12:	1f 91       	pop	r17
     d14:	0f 91       	pop	r16
     d16:	08 95       	ret

00000d18 <restartMenuTimer>:
//	 Restarts menu state timeout
//	Should be used in RUN function when control buttons are pressed.
//-----------------------------------------------------------------//
static void restartMenuTimer(void)
{
	menuTimer.Timer = 0;
     d18:	10 92 74 00 	sts	0x0074, r1
     d1c:	08 95       	ret

00000d1e <mf_setTempLeave>:
		clearExtraLeds(LED_TEMP);
}

void mf_setTempLeave(void)
{
	userTimer.Enabled = 0;
     d1e:	e0 ee       	ldi	r30, 0xE0	; 224
     d20:	f0 e0       	ldi	r31, 0x00	; 0
     d22:	80 81       	ld	r24, Z
     d24:	8e 7f       	andi	r24, 0xFE	; 254
     d26:	80 83       	st	Z, r24
     d28:	08 95       	ret

00000d2a <mf_leafSelectAct>:
	userTimer.FA_GE = 1;	
}

void mf_leafSelectAct(void)
{
	userTimer.Timer = 0;
     d2a:	10 92 e1 00 	sts	0x00E1, r1
	userTimer.Top = BLINK_PERIOD - 1;
     d2e:	87 e0       	ldi	r24, 0x07	; 7
     d30:	80 93 e2 00 	sts	0x00E2, r24
	userTimer.CompA = BLINK_PERIOD / 2;
     d34:	84 e0       	ldi	r24, 0x04	; 4
     d36:	80 93 e3 00 	sts	0x00E3, r24
	userTimer.Enabled = 1;
     d3a:	e0 ee       	ldi	r30, 0xE0	; 224
     d3c:	f0 e0       	ldi	r31, 0x00	; 0
     d3e:	80 81       	ld	r24, Z
     d40:	81 60       	ori	r24, 0x01	; 1
     d42:	80 83       	st	Z, r24
     d44:	08 95       	ret

00000d46 <mf_leafExit>:
}

void mf_leafExit(void)
{
	userTimer.Enabled = 0;	
     d46:	e0 ee       	ldi	r30, 0xE0	; 224
     d48:	f0 e0       	ldi	r31, 0x00	; 0
     d4a:	80 81       	ld	r24, Z
     d4c:	8e 7f       	andi	r24, 0xFE	; 254
     d4e:	80 83       	st	Z, r24
     d50:	08 95       	ret

00000d52 <mf_cdoneDo>:
	calculateCoeffs();
}

void mf_cdoneDo(void)
{
	printLedBuffer(0," DONE ");
     d52:	66 ea       	ldi	r22, 0xA6	; 166
     d54:	70 e0       	ldi	r23, 0x00	; 0
     d56:	80 e0       	ldi	r24, 0x00	; 0
     d58:	04 df       	rcall	.-504    	; 0xb62 <printLedBuffer>
     d5a:	08 95       	ret

00000d5c <mf_cdone2Select>:
}

void mf_cdone2Select(void)
{
	// Save current ADC as calibrating point
	cpoint2_adc = adc_normalized;
     d5c:	80 91 0c 01 	lds	r24, 0x010C
     d60:	90 91 0d 01 	lds	r25, 0x010D
     d64:	90 93 2d 01 	sts	0x012D, r25
     d68:	80 93 2c 01 	sts	0x012C, r24
	// Save current Celsius degree
	cpoint2 = cpoint2_copy;
     d6c:	80 91 e5 00 	lds	r24, 0x00E5
     d70:	80 93 30 01 	sts	0x0130, r24
	// Calculate new coefficient for temperature conversion
	calculateCoeffs();
     d74:	bf da       	rcall	.-2690   	; 0x2f4 <calculateCoeffs>
     d76:	08 95       	ret

00000d78 <mf_cdone1Select>:
//---------------------------------------------//

void mf_cdone1Select(void)
{
	// Save current ADC as calibrating point
	cpoint1_adc = adc_normalized;
     d78:	80 91 0c 01 	lds	r24, 0x010C
     d7c:	90 91 0d 01 	lds	r25, 0x010D
     d80:	90 93 29 01 	sts	0x0129, r25
     d84:	80 93 28 01 	sts	0x0128, r24
	// Save current Celsius degree
	cpoint1 = cpoint1_copy;
     d88:	80 91 e4 00 	lds	r24, 0x00E4
     d8c:	80 93 10 01 	sts	0x0110, r24
	// Calculate new coefficient for temperature conversion
	calculateCoeffs();
     d90:	b1 da       	rcall	.-2718   	; 0x2f4 <calculateCoeffs>
     d92:	08 95       	ret

00000d94 <mf_calib2Do>:
}

//---------------------------------------------//

void mf_calib2Do(void)
{
     d94:	cf 93       	push	r28
     d96:	df 93       	push	r29
     d98:	cd b7       	in	r28, 0x3d	; 61
     d9a:	de b7       	in	r29, 0x3e	; 62
     d9c:	27 97       	sbiw	r28, 0x07	; 7
     d9e:	0f b6       	in	r0, 0x3f	; 63
     da0:	f8 94       	cli
     da2:	de bf       	out	0x3e, r29	; 62
     da4:	0f be       	out	0x3f, r0	; 63
     da6:	cd bf       	out	0x3d, r28	; 61
	char str[] = {'P','2',' ',' ',' ',' ',0};
     da8:	87 e0       	ldi	r24, 0x07	; 7
     daa:	ec e7       	ldi	r30, 0x7C	; 124
     dac:	f0 e0       	ldi	r31, 0x00	; 0
     dae:	de 01       	movw	r26, r28
     db0:	11 96       	adiw	r26, 0x01	; 1
     db2:	01 90       	ld	r0, Z+
     db4:	0d 92       	st	X+, r0
     db6:	8a 95       	dec	r24
     db8:	e1 f7       	brne	.-8      	; 0xdb2 <mf_calib2Do+0x1e>
	
	
	if (button_state & (BD_UP | BR_UP))
     dba:	80 91 c2 00 	lds	r24, 0x00C2
     dbe:	90 91 c3 00 	lds	r25, 0x00C3
     dc2:	9c 01       	movw	r18, r24
     dc4:	22 70       	andi	r18, 0x02	; 2
     dc6:	34 70       	andi	r19, 0x04	; 4
     dc8:	23 2b       	or	r18, r19
     dca:	41 f0       	breq	.+16     	; 0xddc <mf_calib2Do+0x48>
	{
		if (cpoint2_copy < MAX_CALIB_TEMP)
     dcc:	80 91 e5 00 	lds	r24, 0x00E5
     dd0:	8a 3f       	cpi	r24, 0xFA	; 250
     dd2:	78 f4       	brcc	.+30     	; 0xdf2 <mf_calib2Do+0x5e>
		cpoint2_copy += 1;
     dd4:	8f 5f       	subi	r24, 0xFF	; 255
     dd6:	80 93 e5 00 	sts	0x00E5, r24
     dda:	0b c0       	rjmp	.+22     	; 0xdf2 <mf_calib2Do+0x5e>
	}
	else if (button_state & (BD_DOWN | BR_DOWN))
     ddc:	84 70       	andi	r24, 0x04	; 4
     dde:	98 70       	andi	r25, 0x08	; 8
     de0:	89 2b       	or	r24, r25
     de2:	39 f0       	breq	.+14     	; 0xdf2 <mf_calib2Do+0x5e>
	{
		if (cpoint2_copy > MIN_CALIB_TEMP)
     de4:	80 91 e5 00 	lds	r24, 0x00E5
     de8:	8b 30       	cpi	r24, 0x0B	; 11
     dea:	18 f0       	brcs	.+6      	; 0xdf2 <mf_calib2Do+0x5e>
		cpoint2_copy -= 1;
     dec:	81 50       	subi	r24, 0x01	; 1
     dee:	80 93 e5 00 	sts	0x00E5, r24
	}
	
	if (userTimer.FA_GE)
     df2:	80 91 e0 00 	lds	r24, 0x00E0
     df6:	84 ff       	sbrs	r24, 4
     df8:	09 c0       	rjmp	.+18     	; 0xe0c <mf_calib2Do+0x78>
	{
		u16toa_align_right(cpoint2_copy,str + 3,0x80 | 3,' ');
     dfa:	20 e2       	ldi	r18, 0x20	; 32
     dfc:	43 e8       	ldi	r20, 0x83	; 131
     dfe:	be 01       	movw	r22, r28
     e00:	6c 5f       	subi	r22, 0xFC	; 252
     e02:	7f 4f       	sbci	r23, 0xFF	; 255
     e04:	80 91 e5 00 	lds	r24, 0x00E5
     e08:	90 e0       	ldi	r25, 0x00	; 0
     e0a:	96 d2       	rcall	.+1324   	; 0x1338 <u16toa_align_right>
	}
	
	printLedBuffer(0,str);
     e0c:	be 01       	movw	r22, r28
     e0e:	6f 5f       	subi	r22, 0xFF	; 255
     e10:	7f 4f       	sbci	r23, 0xFF	; 255
     e12:	80 e0       	ldi	r24, 0x00	; 0
     e14:	a6 de       	rcall	.-692    	; 0xb62 <printLedBuffer>
	
}
     e16:	27 96       	adiw	r28, 0x07	; 7
     e18:	0f b6       	in	r0, 0x3f	; 63
     e1a:	f8 94       	cli
     e1c:	de bf       	out	0x3e, r29	; 62
     e1e:	0f be       	out	0x3f, r0	; 63
     e20:	cd bf       	out	0x3d, r28	; 61
     e22:	df 91       	pop	r29
     e24:	cf 91       	pop	r28
     e26:	08 95       	ret

00000e28 <mf_calib1Do>:
	cpoint1_copy = cpoint1;
	cpoint2_copy = cpoint2;
}

void mf_calib1Do(void)
{
     e28:	cf 93       	push	r28
     e2a:	df 93       	push	r29
     e2c:	cd b7       	in	r28, 0x3d	; 61
     e2e:	de b7       	in	r29, 0x3e	; 62
     e30:	27 97       	sbiw	r28, 0x07	; 7
     e32:	0f b6       	in	r0, 0x3f	; 63
     e34:	f8 94       	cli
     e36:	de bf       	out	0x3e, r29	; 62
     e38:	0f be       	out	0x3f, r0	; 63
     e3a:	cd bf       	out	0x3d, r28	; 61
	char str[] = {'P','1',' ',' ',' ',' ',0};
     e3c:	87 e0       	ldi	r24, 0x07	; 7
     e3e:	e3 e8       	ldi	r30, 0x83	; 131
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	de 01       	movw	r26, r28
     e44:	11 96       	adiw	r26, 0x01	; 1
     e46:	01 90       	ld	r0, Z+
     e48:	0d 92       	st	X+, r0
     e4a:	8a 95       	dec	r24
     e4c:	e1 f7       	brne	.-8      	; 0xe46 <mf_calib1Do+0x1e>
	
	
	if (button_state & (BD_UP | BR_UP))
     e4e:	80 91 c2 00 	lds	r24, 0x00C2
     e52:	90 91 c3 00 	lds	r25, 0x00C3
     e56:	9c 01       	movw	r18, r24
     e58:	22 70       	andi	r18, 0x02	; 2
     e5a:	34 70       	andi	r19, 0x04	; 4
     e5c:	23 2b       	or	r18, r19
     e5e:	41 f0       	breq	.+16     	; 0xe70 <mf_calib1Do+0x48>
	{
		if (cpoint1_copy < MAX_CALIB_TEMP)
     e60:	80 91 e4 00 	lds	r24, 0x00E4
     e64:	8a 3f       	cpi	r24, 0xFA	; 250
     e66:	78 f4       	brcc	.+30     	; 0xe86 <mf_calib1Do+0x5e>
			cpoint1_copy += 1;
     e68:	8f 5f       	subi	r24, 0xFF	; 255
     e6a:	80 93 e4 00 	sts	0x00E4, r24
     e6e:	0b c0       	rjmp	.+22     	; 0xe86 <mf_calib1Do+0x5e>
	}
	else if (button_state & (BD_DOWN | BR_DOWN))
     e70:	84 70       	andi	r24, 0x04	; 4
     e72:	98 70       	andi	r25, 0x08	; 8
     e74:	89 2b       	or	r24, r25
     e76:	39 f0       	breq	.+14     	; 0xe86 <mf_calib1Do+0x5e>
	{
		if (cpoint1_copy > MIN_CALIB_TEMP)
     e78:	80 91 e4 00 	lds	r24, 0x00E4
     e7c:	8b 30       	cpi	r24, 0x0B	; 11
     e7e:	18 f0       	brcs	.+6      	; 0xe86 <mf_calib1Do+0x5e>
			cpoint1_copy -= 1;
     e80:	81 50       	subi	r24, 0x01	; 1
     e82:	80 93 e4 00 	sts	0x00E4, r24
	}
	
	if (userTimer.FA_GE)
     e86:	80 91 e0 00 	lds	r24, 0x00E0
     e8a:	84 ff       	sbrs	r24, 4
     e8c:	09 c0       	rjmp	.+18     	; 0xea0 <mf_calib1Do+0x78>
	{
		u16toa_align_right(cpoint1_copy,str + 3,0x80 | 3,' ');
     e8e:	20 e2       	ldi	r18, 0x20	; 32
     e90:	43 e8       	ldi	r20, 0x83	; 131
     e92:	be 01       	movw	r22, r28
     e94:	6c 5f       	subi	r22, 0xFC	; 252
     e96:	7f 4f       	sbci	r23, 0xFF	; 255
     e98:	80 91 e4 00 	lds	r24, 0x00E4
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	4c d2       	rcall	.+1176   	; 0x1338 <u16toa_align_right>
	}
	
	printLedBuffer(0,str);
     ea0:	be 01       	movw	r22, r28
     ea2:	6f 5f       	subi	r22, 0xFF	; 255
     ea4:	7f 4f       	sbci	r23, 0xFF	; 255
     ea6:	80 e0       	ldi	r24, 0x00	; 0
     ea8:	5c de       	rcall	.-840    	; 0xb62 <printLedBuffer>
}
     eaa:	27 96       	adiw	r28, 0x07	; 7
     eac:	0f b6       	in	r0, 0x3f	; 63
     eae:	f8 94       	cli
     eb0:	de bf       	out	0x3e, r29	; 62
     eb2:	0f be       	out	0x3f, r0	; 63
     eb4:	cd bf       	out	0x3d, r28	; 61
     eb6:	df 91       	pop	r29
     eb8:	cf 91       	pop	r28
     eba:	08 95       	ret

00000ebc <mf_autopoffDo>:

//---------------------------------------------//


void mf_autopoffDo(void)
{
     ebc:	cf 93       	push	r28
     ebe:	df 93       	push	r29
     ec0:	cd b7       	in	r28, 0x3d	; 61
     ec2:	de b7       	in	r29, 0x3e	; 62
     ec4:	27 97       	sbiw	r28, 0x07	; 7
     ec6:	0f b6       	in	r0, 0x3f	; 63
     ec8:	f8 94       	cli
     eca:	de bf       	out	0x3e, r29	; 62
     ecc:	0f be       	out	0x3f, r0	; 63
     ece:	cd bf       	out	0x3d, r28	; 61
	char str[] = {'O','F','F',' ',' ',' ',0};
     ed0:	87 e0       	ldi	r24, 0x07	; 7
     ed2:	ea e8       	ldi	r30, 0x8A	; 138
     ed4:	f0 e0       	ldi	r31, 0x00	; 0
     ed6:	de 01       	movw	r26, r28
     ed8:	11 96       	adiw	r26, 0x01	; 1
     eda:	01 90       	ld	r0, Z+
     edc:	0d 92       	st	X+, r0
     ede:	8a 95       	dec	r24
     ee0:	e1 f7       	brne	.-8      	; 0xeda <mf_autopoffDo+0x1e>
		
		
	if (button_state & (BD_UP | BR_UP))
     ee2:	80 91 c2 00 	lds	r24, 0x00C2
     ee6:	90 91 c3 00 	lds	r25, 0x00C3
     eea:	9c 01       	movw	r18, r24
     eec:	22 70       	andi	r18, 0x02	; 2
     eee:	34 70       	andi	r19, 0x04	; 4
     ef0:	23 2b       	or	r18, r19
     ef2:	49 f0       	breq	.+18     	; 0xf06 <mf_autopoffDo+0x4a>
	{
		if (power_off_timeout < MAX_POWEROFF_TIMEOUT)
     ef4:	80 91 2a 01 	lds	r24, 0x012A
     ef8:	8f 35       	cpi	r24, 0x5F	; 95
     efa:	18 f4       	brcc	.+6      	; 0xf02 <mf_autopoffDo+0x46>
			power_off_timeout += 5;
     efc:	8b 5f       	subi	r24, 0xFB	; 251
     efe:	80 93 2a 01 	sts	0x012A, r24
		restartMenuTimer();
     f02:	0a df       	rcall	.-492    	; 0xd18 <restartMenuTimer>
     f04:	0c c0       	rjmp	.+24     	; 0xf1e <mf_autopoffDo+0x62>
	}
	else if (button_state & (BD_DOWN | BR_DOWN))
     f06:	84 70       	andi	r24, 0x04	; 4
     f08:	98 70       	andi	r25, 0x08	; 8
     f0a:	89 2b       	or	r24, r25
     f0c:	41 f0       	breq	.+16     	; 0xf1e <mf_autopoffDo+0x62>
	{
		if (power_off_timeout > MIN_POWEROFF_TIMEOUT)
     f0e:	80 91 2a 01 	lds	r24, 0x012A
     f12:	86 30       	cpi	r24, 0x06	; 6
     f14:	18 f0       	brcs	.+6      	; 0xf1c <mf_autopoffDo+0x60>
			power_off_timeout -= 5;
     f16:	85 50       	subi	r24, 0x05	; 5
     f18:	80 93 2a 01 	sts	0x012A, r24
		restartMenuTimer();
     f1c:	fd de       	rcall	.-518    	; 0xd18 <restartMenuTimer>
	}	
		
	if (userTimer.FA_GE)
     f1e:	80 91 e0 00 	lds	r24, 0x00E0
     f22:	84 ff       	sbrs	r24, 4
     f24:	10 c0       	rjmp	.+32     	; 0xf46 <mf_autopoffDo+0x8a>
	{
		if (power_off_timeout != MAX_POWEROFF_TIMEOUT)
     f26:	80 91 2a 01 	lds	r24, 0x012A
     f2a:	8f 35       	cpi	r24, 0x5F	; 95
     f2c:	41 f0       	breq	.+16     	; 0xf3e <mf_autopoffDo+0x82>
			u16toa_align_right(power_off_timeout,str + 4,0x80 | 2,' ');	
     f2e:	20 e2       	ldi	r18, 0x20	; 32
     f30:	42 e8       	ldi	r20, 0x82	; 130
     f32:	be 01       	movw	r22, r28
     f34:	6b 5f       	subi	r22, 0xFB	; 251
     f36:	7f 4f       	sbci	r23, 0xFF	; 255
     f38:	90 e0       	ldi	r25, 0x00	; 0
     f3a:	fe d1       	rcall	.+1020   	; 0x1338 <u16toa_align_right>
     f3c:	04 c0       	rjmp	.+8      	; 0xf46 <mf_autopoffDo+0x8a>
		else 
		{
			str[4] = 'N';
     f3e:	8e e4       	ldi	r24, 0x4E	; 78
     f40:	8d 83       	std	Y+5, r24	; 0x05
			str[5] = 'O';
     f42:	8f e4       	ldi	r24, 0x4F	; 79
     f44:	8e 83       	std	Y+6, r24	; 0x06
		}			
	}		
		
	printLedBuffer(0,str);
     f46:	be 01       	movw	r22, r28
     f48:	6f 5f       	subi	r22, 0xFF	; 255
     f4a:	7f 4f       	sbci	r23, 0xFF	; 255
     f4c:	80 e0       	ldi	r24, 0x00	; 0
     f4e:	09 de       	rcall	.-1006   	; 0xb62 <printLedBuffer>
}
     f50:	27 96       	adiw	r28, 0x07	; 7
     f52:	0f b6       	in	r0, 0x3f	; 63
     f54:	f8 94       	cli
     f56:	de bf       	out	0x3e, r29	; 62
     f58:	0f be       	out	0x3f, r0	; 63
     f5a:	cd bf       	out	0x3d, r28	; 61
     f5c:	df 91       	pop	r29
     f5e:	cf 91       	pop	r28
     f60:	08 95       	ret

00000f62 <mf_realTempDo>:
{
	setExtraLeds(LED_TEMP);
}

void mf_realTempDo(void)
{
     f62:	cf 93       	push	r28
     f64:	df 93       	push	r29
     f66:	cd b7       	in	r28, 0x3d	; 61
     f68:	de b7       	in	r29, 0x3e	; 62
     f6a:	27 97       	sbiw	r28, 0x07	; 7
     f6c:	0f b6       	in	r0, 0x3f	; 63
     f6e:	f8 94       	cli
     f70:	de bf       	out	0x3e, r29	; 62
     f72:	0f be       	out	0x3f, r0	; 63
     f74:	cd bf       	out	0x3d, r28	; 61
	char str[] = {' ',' ',' ',' ',0xB0,'C',0};
     f76:	87 e0       	ldi	r24, 0x07	; 7
     f78:	e1 e9       	ldi	r30, 0x91	; 145
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	de 01       	movw	r26, r28
     f7e:	11 96       	adiw	r26, 0x01	; 1
     f80:	01 90       	ld	r0, Z+
     f82:	0d 92       	st	X+, r0
     f84:	8a 95       	dec	r24
     f86:	e1 f7       	brne	.-8      	; 0xf80 <mf_realTempDo+0x1e>
	// Output ADC result to LED
	u16toa_align_right(adc_celsius,str,0x80 | 4,' ');
     f88:	20 e2       	ldi	r18, 0x20	; 32
     f8a:	44 e8       	ldi	r20, 0x84	; 132
     f8c:	be 01       	movw	r22, r28
     f8e:	6f 5f       	subi	r22, 0xFF	; 255
     f90:	7f 4f       	sbci	r23, 0xFF	; 255
     f92:	80 91 0e 01 	lds	r24, 0x010E
     f96:	90 91 0f 01 	lds	r25, 0x010F
     f9a:	ce d1       	rcall	.+924    	; 0x1338 <u16toa_align_right>
	printLedBuffer(0,str);
     f9c:	be 01       	movw	r22, r28
     f9e:	6f 5f       	subi	r22, 0xFF	; 255
     fa0:	7f 4f       	sbci	r23, 0xFF	; 255
     fa2:	80 e0       	ldi	r24, 0x00	; 0
     fa4:	de dd       	rcall	.-1092   	; 0xb62 <printLedBuffer>
}
     fa6:	27 96       	adiw	r28, 0x07	; 7
     fa8:	0f b6       	in	r0, 0x3f	; 63
     faa:	f8 94       	cli
     fac:	de bf       	out	0x3e, r29	; 62
     fae:	0f be       	out	0x3f, r0	; 63
     fb0:	cd bf       	out	0x3d, r28	; 61
     fb2:	df 91       	pop	r29
     fb4:	cf 91       	pop	r28
     fb6:	08 95       	ret

00000fb8 <mf_sndenDo>:

//---------------------------------------------//


void mf_sndenDo(void)
{
     fb8:	cf 93       	push	r28
     fba:	df 93       	push	r29
     fbc:	cd b7       	in	r28, 0x3d	; 61
     fbe:	de b7       	in	r29, 0x3e	; 62
     fc0:	27 97       	sbiw	r28, 0x07	; 7
     fc2:	0f b6       	in	r0, 0x3f	; 63
     fc4:	f8 94       	cli
     fc6:	de bf       	out	0x3e, r29	; 62
     fc8:	0f be       	out	0x3f, r0	; 63
     fca:	cd bf       	out	0x3d, r28	; 61
	char str[] = {'S','N','D',' ',' ',' ',0};
     fcc:	87 e0       	ldi	r24, 0x07	; 7
     fce:	e8 e9       	ldi	r30, 0x98	; 152
     fd0:	f0 e0       	ldi	r31, 0x00	; 0
     fd2:	de 01       	movw	r26, r28
     fd4:	11 96       	adiw	r26, 0x01	; 1
     fd6:	01 90       	ld	r0, Z+
     fd8:	0d 92       	st	X+, r0
     fda:	8a 95       	dec	r24
     fdc:	e1 f7       	brne	.-8      	; 0xfd6 <mf_sndenDo+0x1e>
		
	if (button_state & (BD_UP | BD_DOWN))
     fde:	80 91 c2 00 	lds	r24, 0x00C2
     fe2:	90 91 c3 00 	lds	r25, 0x00C3
     fe6:	86 70       	andi	r24, 0x06	; 6
     fe8:	99 27       	eor	r25, r25
     fea:	89 2b       	or	r24, r25
     fec:	41 f0       	breq	.+16     	; 0xffe <mf_sndenDo+0x46>
	{
		sound_enable = !sound_enable;
     fee:	81 e0       	ldi	r24, 0x01	; 1
     ff0:	90 91 1a 01 	lds	r25, 0x011A
     ff4:	91 11       	cpse	r25, r1
     ff6:	80 e0       	ldi	r24, 0x00	; 0
     ff8:	80 93 1a 01 	sts	0x011A, r24
		restartMenuTimer();
     ffc:	8d de       	rcall	.-742    	; 0xd18 <restartMenuTimer>
	}			
		
	if (userTimer.FA_GE)
     ffe:	80 91 e0 00 	lds	r24, 0x00E0
    1002:	84 ff       	sbrs	r24, 4
    1004:	0e c0       	rjmp	.+28     	; 0x1022 <mf_sndenDo+0x6a>
	{
		if (sound_enable)		
    1006:	80 91 1a 01 	lds	r24, 0x011A
    100a:	88 23       	and	r24, r24
    100c:	29 f0       	breq	.+10     	; 0x1018 <mf_sndenDo+0x60>
		{
			str[4] = 'O';
    100e:	8f e4       	ldi	r24, 0x4F	; 79
    1010:	8d 83       	std	Y+5, r24	; 0x05
			str[5] = 'N';
    1012:	8e e4       	ldi	r24, 0x4E	; 78
    1014:	8e 83       	std	Y+6, r24	; 0x06
    1016:	05 c0       	rjmp	.+10     	; 0x1022 <mf_sndenDo+0x6a>
		}
		else
		{
			str[3] = 'O';
    1018:	8f e4       	ldi	r24, 0x4F	; 79
    101a:	8c 83       	std	Y+4, r24	; 0x04
			str[4] = 'F';
    101c:	86 e4       	ldi	r24, 0x46	; 70
    101e:	8d 83       	std	Y+5, r24	; 0x05
			str[5] = 'F';
    1020:	8e 83       	std	Y+6, r24	; 0x06
		}			
	}
		
	printLedBuffer(0,str);
    1022:	be 01       	movw	r22, r28
    1024:	6f 5f       	subi	r22, 0xFF	; 255
    1026:	7f 4f       	sbci	r23, 0xFF	; 255
    1028:	80 e0       	ldi	r24, 0x00	; 0
    102a:	9b dd       	rcall	.-1226   	; 0xb62 <printLedBuffer>
	setComma(2);
    102c:	82 e0       	ldi	r24, 0x02	; 2
    102e:	df dd       	rcall	.-1090   	; 0xbee <setComma>
}
    1030:	27 96       	adiw	r28, 0x07	; 7
    1032:	0f b6       	in	r0, 0x3f	; 63
    1034:	f8 94       	cli
    1036:	de bf       	out	0x3e, r29	; 62
    1038:	0f be       	out	0x3f, r0	; 63
    103a:	cd bf       	out	0x3d, r28	; 61
    103c:	df 91       	pop	r29
    103e:	cf 91       	pop	r28
    1040:	08 95       	ret

00001042 <mf_leafSelect>:

// Select and exit functions, common for leaf menu items 

void mf_leafSelect(void)
{
	clearExtraLeds(LED_TEMP | LED_ROLL);
    1042:	83 e0       	ldi	r24, 0x03	; 3
    1044:	e6 dd       	rcall	.-1076   	; 0xc12 <clearExtraLeds>
	userTimer.FA_GE = 1;	
    1046:	e0 ee       	ldi	r30, 0xE0	; 224
    1048:	f0 e0       	ldi	r31, 0x00	; 0
    104a:	80 81       	ld	r24, Z
    104c:	80 61       	ori	r24, 0x10	; 16
    104e:	80 83       	st	Z, r24
    1050:	08 95       	ret

00001052 <mf_calibSelect>:

//---------------------------------------------//

void mf_calibSelect(void)
{
	mf_leafSelect();
    1052:	f7 df       	rcall	.-18     	; 0x1042 <mf_leafSelect>
	cpoint1_copy = cpoint1;
    1054:	80 91 10 01 	lds	r24, 0x0110
    1058:	80 93 e4 00 	sts	0x00E4, r24
	cpoint2_copy = cpoint2;
    105c:	80 91 30 01 	lds	r24, 0x0130
    1060:	80 93 e5 00 	sts	0x00E5, r24
    1064:	08 95       	ret

00001066 <mf_rollLeave>:
	printLedBuffer(0,str);
}

void mf_rollLeave(void)
{
	clearExtraLeds(LED_ROLL);
    1066:	82 e0       	ldi	r24, 0x02	; 2
    1068:	d4 dd       	rcall	.-1112   	; 0xc12 <clearExtraLeds>
	userTimer.Enabled = 0;
    106a:	e0 ee       	ldi	r30, 0xE0	; 224
    106c:	f0 e0       	ldi	r31, 0x00	; 0
    106e:	80 81       	ld	r24, Z
    1070:	8e 7f       	andi	r24, 0xFE	; 254
    1072:	80 83       	st	Z, r24
    1074:	08 95       	ret

00001076 <mf_setTempSelect>:
//---------------------------------------------//


void mf_setTempSelect(void)
{
	clearExtraLeds(LED_TEMP);
    1076:	81 e0       	ldi	r24, 0x01	; 1
    1078:	cc dd       	rcall	.-1128   	; 0xc12 <clearExtraLeds>
	mf_leafSelectAct();		// setup and start timer
    107a:	57 de       	rcall	.-850    	; 0xd2a <mf_leafSelectAct>
    107c:	08 95       	ret

0000107e <mf_realTempLeave>:
	printLedBuffer(0,str);
}

void mf_realTempLeave(void)
{
	clearExtraLeds(LED_TEMP);
    107e:	81 e0       	ldi	r24, 0x01	; 1
    1080:	c8 dd       	rcall	.-1136   	; 0xc12 <clearExtraLeds>
    1082:	08 95       	ret

00001084 <mf_rollDo>:
	setExtraLeds(LED_ROLL);
	mf_leafSelectAct();		// setup and start timer
}

void mf_rollDo(void)
{
    1084:	cf 93       	push	r28
    1086:	df 93       	push	r29
    1088:	cd b7       	in	r28, 0x3d	; 61
    108a:	de b7       	in	r29, 0x3e	; 62
    108c:	27 97       	sbiw	r28, 0x07	; 7
    108e:	0f b6       	in	r0, 0x3f	; 63
    1090:	f8 94       	cli
    1092:	de bf       	out	0x3e, r29	; 62
    1094:	0f be       	out	0x3f, r0	; 63
    1096:	cd bf       	out	0x3d, r28	; 61
	char str[] = {' ',' ',' ',' ',' ',' ',0};
    1098:	87 e0       	ldi	r24, 0x07	; 7
    109a:	ef e9       	ldi	r30, 0x9F	; 159
    109c:	f0 e0       	ldi	r31, 0x00	; 0
    109e:	de 01       	movw	r26, r28
    10a0:	11 96       	adiw	r26, 0x01	; 1
    10a2:	01 90       	ld	r0, Z+
    10a4:	0d 92       	st	X+, r0
    10a6:	8a 95       	dec	r24
    10a8:	e1 f7       	brne	.-8      	; 0x10a2 <mf_rollDo+0x1e>
		
	if (button_state & (BD_UP | BR_UP))
    10aa:	80 91 c2 00 	lds	r24, 0x00C2
    10ae:	90 91 c3 00 	lds	r25, 0x00C3
    10b2:	9c 01       	movw	r18, r24
    10b4:	22 70       	andi	r18, 0x02	; 2
    10b6:	34 70       	andi	r19, 0x04	; 4
    10b8:	23 2b       	or	r18, r19
    10ba:	41 f0       	breq	.+16     	; 0x10cc <mf_rollDo+0x48>
	{
		if (rollCycleSet < MAX_ROLL_CYCLES)
    10bc:	80 91 1d 01 	lds	r24, 0x011D
    10c0:	83 36       	cpi	r24, 0x63	; 99
    10c2:	78 f4       	brcc	.+30     	; 0x10e2 <mf_rollDo+0x5e>
		rollCycleSet += 1;
    10c4:	8f 5f       	subi	r24, 0xFF	; 255
    10c6:	80 93 1d 01 	sts	0x011D, r24
    10ca:	0b c0       	rjmp	.+22     	; 0x10e2 <mf_rollDo+0x5e>
	}
	else if (button_state & (BD_DOWN | BR_DOWN))
    10cc:	84 70       	andi	r24, 0x04	; 4
    10ce:	98 70       	andi	r25, 0x08	; 8
    10d0:	89 2b       	or	r24, r25
    10d2:	39 f0       	breq	.+14     	; 0x10e2 <mf_rollDo+0x5e>
	{
		if (rollCycleSet > MIN_ROLL_CYCLES)
    10d4:	80 91 1d 01 	lds	r24, 0x011D
    10d8:	82 30       	cpi	r24, 0x02	; 2
    10da:	18 f0       	brcs	.+6      	; 0x10e2 <mf_rollDo+0x5e>
		rollCycleSet -= 1;
    10dc:	81 50       	subi	r24, 0x01	; 1
    10de:	80 93 1d 01 	sts	0x011D, r24
	}	
		
	u16toa_align_right(rollCycleSet,str + 4,0x80 | 2,' ');
    10e2:	20 e2       	ldi	r18, 0x20	; 32
    10e4:	42 e8       	ldi	r20, 0x82	; 130
    10e6:	be 01       	movw	r22, r28
    10e8:	6b 5f       	subi	r22, 0xFB	; 251
    10ea:	7f 4f       	sbci	r23, 0xFF	; 255
    10ec:	80 91 1d 01 	lds	r24, 0x011D
    10f0:	90 e0       	ldi	r25, 0x00	; 0
    10f2:	22 d1       	rcall	.+580    	; 0x1338 <u16toa_align_right>
	
	if ((!(rollState & ROLL_CYCLE)) || (userTimer.FA_GE))
    10f4:	80 91 e7 00 	lds	r24, 0x00E7
    10f8:	82 ff       	sbrs	r24, 2
    10fa:	04 c0       	rjmp	.+8      	; 0x1104 <mf_rollDo+0x80>
    10fc:	80 91 e0 00 	lds	r24, 0x00E0
    1100:	84 ff       	sbrs	r24, 4
    1102:	09 c0       	rjmp	.+18     	; 0x1116 <mf_rollDo+0x92>
	{
		u16toa_align_right(activeRollCycle,str + 1,0x80 | 2,' ');
    1104:	20 e2       	ldi	r18, 0x20	; 32
    1106:	42 e8       	ldi	r20, 0x82	; 130
    1108:	be 01       	movw	r22, r28
    110a:	6e 5f       	subi	r22, 0xFE	; 254
    110c:	7f 4f       	sbci	r23, 0xFF	; 255
    110e:	80 91 e6 00 	lds	r24, 0x00E6
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	11 d1       	rcall	.+546    	; 0x1338 <u16toa_align_right>
	}
	
	str[0] = 0;
    1116:	19 82       	std	Y+1, r1	; 0x01
	if (isTopPointValid())
    1118:	e6 d2       	rcall	.+1484   	; 0x16e6 <isTopPointValid>
    111a:	88 23       	and	r24, r24
    111c:	19 f0       	breq	.+6      	; 0x1124 <mf_rollDo+0xa0>
		str[0] |= SEGA;
    111e:	89 81       	ldd	r24, Y+1	; 0x01
    1120:	81 60       	ori	r24, 0x01	; 1
    1122:	89 83       	std	Y+1, r24	; 0x01
	if (isBottomPointValid())
    1124:	f0 d2       	rcall	.+1504   	; 0x1706 <isBottomPointValid>
    1126:	88 23       	and	r24, r24
    1128:	19 f0       	breq	.+6      	; 0x1130 <mf_rollDo+0xac>
		str[0] |= SEGD;
    112a:	89 81       	ldd	r24, Y+1	; 0x01
    112c:	88 60       	ori	r24, 0x08	; 8
    112e:	89 83       	std	Y+1, r24	; 0x01
	if (str[0] == 0)
    1130:	89 81       	ldd	r24, Y+1	; 0x01
    1132:	81 11       	cpse	r24, r1
    1134:	02 c0       	rjmp	.+4      	; 0x113a <mf_rollDo+0xb6>
		str[0] = ' ';
    1136:	80 e2       	ldi	r24, 0x20	; 32
    1138:	89 83       	std	Y+1, r24	; 0x01
		
	printLedBuffer(0,str);
    113a:	be 01       	movw	r22, r28
    113c:	6f 5f       	subi	r22, 0xFF	; 255
    113e:	7f 4f       	sbci	r23, 0xFF	; 255
    1140:	80 e0       	ldi	r24, 0x00	; 0
    1142:	0f dd       	rcall	.-1506   	; 0xb62 <printLedBuffer>
}
    1144:	27 96       	adiw	r28, 0x07	; 7
    1146:	0f b6       	in	r0, 0x3f	; 63
    1148:	f8 94       	cli
    114a:	de bf       	out	0x3e, r29	; 62
    114c:	0f be       	out	0x3f, r0	; 63
    114e:	cd bf       	out	0x3d, r28	; 61
    1150:	df 91       	pop	r29
    1152:	cf 91       	pop	r28
    1154:	08 95       	ret

00001156 <mf_rollSelect>:
//---------------------------------------------//
//---------------------------------------------//

void mf_rollSelect(void)
{
	setExtraLeds(LED_ROLL);
    1156:	82 e0       	ldi	r24, 0x02	; 2
    1158:	56 dd       	rcall	.-1364   	; 0xc06 <setExtraLeds>
	mf_leafSelectAct();		// setup and start timer
    115a:	e7 dd       	rcall	.-1074   	; 0xd2a <mf_leafSelectAct>
    115c:	08 95       	ret

0000115e <mf_setTempDo>:
	clearExtraLeds(LED_TEMP);
	mf_leafSelectAct();		// setup and start timer
}

void mf_setTempDo(void)
{
    115e:	cf 93       	push	r28
    1160:	df 93       	push	r29
    1162:	cd b7       	in	r28, 0x3d	; 61
    1164:	de b7       	in	r29, 0x3e	; 62
    1166:	27 97       	sbiw	r28, 0x07	; 7
    1168:	0f b6       	in	r0, 0x3f	; 63
    116a:	f8 94       	cli
    116c:	de bf       	out	0x3e, r29	; 62
    116e:	0f be       	out	0x3f, r0	; 63
    1170:	cd bf       	out	0x3d, r28	; 61
	char str[] = {' ',' ',' ',' ',0xB0,'C',0};
    1172:	87 e0       	ldi	r24, 0x07	; 7
    1174:	e1 e9       	ldi	r30, 0x91	; 145
    1176:	f0 e0       	ldi	r31, 0x00	; 0
    1178:	de 01       	movw	r26, r28
    117a:	11 96       	adiw	r26, 0x01	; 1
    117c:	01 90       	ld	r0, Z+
    117e:	0d 92       	st	X+, r0
    1180:	8a 95       	dec	r24
    1182:	e1 f7       	brne	.-8      	; 0x117c <mf_setTempDo+0x1e>

	
	if (button_state & (BD_UP | BR_UP))
    1184:	80 91 c2 00 	lds	r24, 0x00C2
    1188:	90 91 c3 00 	lds	r25, 0x00C3
    118c:	9c 01       	movw	r18, r24
    118e:	22 70       	andi	r18, 0x02	; 2
    1190:	34 70       	andi	r19, 0x04	; 4
    1192:	23 2b       	or	r18, r19
    1194:	71 f0       	breq	.+28     	; 0x11b2 <mf_setTempDo+0x54>
	{
		if (setup_temp_value < MAX_SET_TEMP)
    1196:	80 91 18 01 	lds	r24, 0x0118
    119a:	90 91 19 01 	lds	r25, 0x0119
    119e:	82 3d       	cpi	r24, 0xD2	; 210
    11a0:	91 05       	cpc	r25, r1
    11a2:	28 f4       	brcc	.+10     	; 0x11ae <mf_setTempDo+0x50>
			setup_temp_value += 5;
    11a4:	05 96       	adiw	r24, 0x05	; 5
    11a6:	90 93 19 01 	sts	0x0119, r25
    11aa:	80 93 18 01 	sts	0x0118, r24
		restartMenuTimer();
    11ae:	b4 dd       	rcall	.-1176   	; 0xd18 <restartMenuTimer>
    11b0:	11 c0       	rjmp	.+34     	; 0x11d4 <mf_setTempDo+0x76>
	}
	else if (button_state & (BD_DOWN | BR_DOWN))
    11b2:	84 70       	andi	r24, 0x04	; 4
    11b4:	98 70       	andi	r25, 0x08	; 8
    11b6:	89 2b       	or	r24, r25
    11b8:	69 f0       	breq	.+26     	; 0x11d4 <mf_setTempDo+0x76>
	{
		if (setup_temp_value > MIN_SET_TEMP)
    11ba:	80 91 18 01 	lds	r24, 0x0118
    11be:	90 91 19 01 	lds	r25, 0x0119
    11c2:	8f 31       	cpi	r24, 0x1F	; 31
    11c4:	91 05       	cpc	r25, r1
    11c6:	28 f0       	brcs	.+10     	; 0x11d2 <mf_setTempDo+0x74>
			setup_temp_value -= 5;
    11c8:	05 97       	sbiw	r24, 0x05	; 5
    11ca:	90 93 19 01 	sts	0x0119, r25
    11ce:	80 93 18 01 	sts	0x0118, r24
		restartMenuTimer();
    11d2:	a2 dd       	rcall	.-1212   	; 0xd18 <restartMenuTimer>
	}					
		
	// Output ADC result to LED
	u16toa_align_right(setup_temp_value,str,0x80 | 4,' ');
    11d4:	20 e2       	ldi	r18, 0x20	; 32
    11d6:	44 e8       	ldi	r20, 0x84	; 132
    11d8:	be 01       	movw	r22, r28
    11da:	6f 5f       	subi	r22, 0xFF	; 255
    11dc:	7f 4f       	sbci	r23, 0xFF	; 255
    11de:	80 91 18 01 	lds	r24, 0x0118
    11e2:	90 91 19 01 	lds	r25, 0x0119
    11e6:	a8 d0       	rcall	.+336    	; 0x1338 <u16toa_align_right>
	printLedBuffer(0,str);
    11e8:	be 01       	movw	r22, r28
    11ea:	6f 5f       	subi	r22, 0xFF	; 255
    11ec:	7f 4f       	sbci	r23, 0xFF	; 255
    11ee:	80 e0       	ldi	r24, 0x00	; 0
    11f0:	b8 dc       	rcall	.-1680   	; 0xb62 <printLedBuffer>
	
	if (userTimer.FA_GE)
    11f2:	80 91 e0 00 	lds	r24, 0x00E0
    11f6:	84 ff       	sbrs	r24, 4
    11f8:	03 c0       	rjmp	.+6      	; 0x1200 <mf_setTempDo+0xa2>
		setExtraLeds(LED_TEMP);
    11fa:	81 e0       	ldi	r24, 0x01	; 1
    11fc:	04 dd       	rcall	.-1528   	; 0xc06 <setExtraLeds>
    11fe:	02 c0       	rjmp	.+4      	; 0x1204 <mf_setTempDo+0xa6>
	else
		clearExtraLeds(LED_TEMP);
    1200:	81 e0       	ldi	r24, 0x01	; 1
    1202:	07 dd       	rcall	.-1522   	; 0xc12 <clearExtraLeds>
}
    1204:	27 96       	adiw	r28, 0x07	; 7
    1206:	0f b6       	in	r0, 0x3f	; 63
    1208:	f8 94       	cli
    120a:	de bf       	out	0x3e, r29	; 62
    120c:	0f be       	out	0x3f, r0	; 63
    120e:	cd bf       	out	0x3d, r28	; 61
    1210:	df 91       	pop	r29
    1212:	cf 91       	pop	r28
    1214:	08 95       	ret

00001216 <mf_realTempSelect>:
//=================================================================//


void mf_realTempSelect(void)
{
	setExtraLeds(LED_TEMP);
    1216:	81 e0       	ldi	r24, 0x01	; 1
    1218:	f6 dc       	rcall	.-1556   	; 0xc06 <setExtraLeds>
    121a:	08 95       	ret

0000121c <InitMenu>:
//	Menu initialization
//	Call this function at start of your program before processMenu()
//-----------------------------------------------------------------//
void InitMenu(void)
{
	selectedMenuItemID = mi_REALTEMP;
    121c:	81 e0       	ldi	r24, 0x01	; 1
    121e:	80 93 d8 00 	sts	0x00D8, r24
	getMenuFunctionRecord(selectedMenuItemID, &selectedMenuFunctionRecord);
    1222:	69 ed       	ldi	r22, 0xD9	; 217
    1224:	70 e0       	ldi	r23, 0x00	; 0
    1226:	3a dd       	rcall	.-1420   	; 0xc9c <getMenuFunctionRecord>
	processItemFunction(selectedMenuFunctionRecord.SelectFunction);
    1228:	e0 91 da 00 	lds	r30, 0x00DA
    122c:	f0 91 db 00 	lds	r31, 0x00DB
//	Arguments:
//		funcAddr - address of the function to run.
//-----------------------------------------------------------------//
static inline void processItemFunction(FuncPtr funcAddr)
{
	if (funcAddr != 0)
    1230:	30 97       	sbiw	r30, 0x00	; 0
    1232:	09 f0       	breq	.+2      	; 0x1236 <InitMenu+0x1a>
		((FuncPtr)funcAddr)();
    1234:	09 95       	icall
    1236:	08 95       	ret

00001238 <processMenu>:
//	Main menu control, -  state function calls, jumps 
//	between menu states and indication
//	Call this function from main() with a fixed time interval.
//-----------------------------------------------------------------//
void processMenu(void)
{
    1238:	ff 92       	push	r15
    123a:	0f 93       	push	r16
    123c:	1f 93       	push	r17
    123e:	cf 93       	push	r28
    1240:	df 93       	push	r29
	NextItem_t nextItem;
	uint16_t jumpCondition;
	
	processSoftTimer8b(&menuTimer);	
    1242:	83 e7       	ldi	r24, 0x73	; 115
    1244:	90 e0       	ldi	r25, 0x00	; 0
    1246:	9f d3       	rcall	.+1854   	; 0x1986 <processSoftTimer8b>
	
	// Compose jump condition
	jumpCondition = button_state;		
    1248:	60 91 c2 00 	lds	r22, 0x00C2
    124c:	70 91 c3 00 	lds	r23, 0x00C3
	if (menuTimer.FTop)
    1250:	80 91 73 00 	lds	r24, 0x0073
    1254:	85 fd       	sbrc	r24, 5
		jumpCondition |= TMR_EXP;
    1256:	70 68       	ori	r23, 0x80	; 128
	
	// Get next menu item according to current state and jump conditions
	nextItem = getNextMenuItem(selectedMenuItemID, jumpCondition);
    1258:	80 91 d8 00 	lds	r24, 0x00D8
    125c:	20 e0       	ldi	r18, 0x00	; 0
    125e:	30 e0       	ldi	r19, 0x00	; 0
	MenuJumpRecord	jRecord;
	uint8_t i;
	
	for (i = 0; i < sizeof(menuJumpSet)/sizeof(MenuJumpRecord); i++  )
	{
		readJumpRecord(&menuJumpSet[i], &jRecord);		// read full jump record
    1260:	a9 01       	movw	r20, r18
    1262:	44 0f       	add	r20, r20
    1264:	55 1f       	adc	r21, r21
    1266:	44 0f       	add	r20, r20
    1268:	55 1f       	adc	r21, r21
    126a:	42 0f       	add	r20, r18
    126c:	53 1f       	adc	r21, r19
    126e:	4d 55       	subi	r20, 0x5D	; 93
    1270:	5e 4f       	sbci	r21, 0xFE	; 254
//		jRecPtr		- address of the jump record in the FLASH
//		resPtr		- address of the record to fill in the SRAM
//-----------------------------------------------------------------//
static inline void readJumpRecord(const MenuJumpRecord* jRecPtr, MenuJumpRecord* resPtr )
{
	resPtr->Item = pgm_read_byte(&jRecPtr->Item);
    1272:	fa 01       	movw	r30, r20
    1274:	94 91       	lpm	r25, Z
	resPtr->JumpCondition = pgm_read_word(&jRecPtr->JumpCondition);
    1276:	31 96       	adiw	r30, 0x01	; 1
    1278:	a5 91       	lpm	r26, Z+
    127a:	b4 91       	lpm	r27, Z
	resPtr->NextItem= pgm_read_byte(&jRecPtr->NextItem);
    127c:	fa 01       	movw	r30, r20
    127e:	33 96       	adiw	r30, 0x03	; 3
    1280:	c4 91       	lpm	r28, Z
	resPtr->Flags= pgm_read_byte(&jRecPtr->Flags);
    1282:	fa 01       	movw	r30, r20
    1284:	34 96       	adiw	r30, 0x04	; 4
    1286:	44 91       	lpm	r20, Z
	uint8_t i;
	
	for (i = 0; i < sizeof(menuJumpSet)/sizeof(MenuJumpRecord); i++  )
	{
		readJumpRecord(&menuJumpSet[i], &jRecord);		// read full jump record
		if (jRecord.Item == selectedItemId)				// If ID match,
    1288:	89 13       	cpse	r24, r25
    128a:	15 c0       	rjmp	.+42     	; 0x12b6 <processMenu+0x7e>
		{
			if ((jRecord.JumpCondition & jmpCond) != 0)		// if any of jump conditions match too,
    128c:	a6 23       	and	r26, r22
    128e:	b7 23       	and	r27, r23
    1290:	ab 2b       	or	r26, r27
    1292:	89 f0       	breq	.+34     	; 0x12b6 <processMenu+0x7e>
			{
				nextItem.ItemID = jRecord.NextItem;			// switch to next menu item
				nextItem.ItemTimeout = jRecord.Flags & TIMEOUT_MASK;
    1294:	14 2f       	mov	r17, r20
    1296:	1f 73       	andi	r17, 0x3F	; 63
				nextItem.ShiftRight = (jRecord.Flags & SHIFT_RIGHT) ? 1 : 0;
    1298:	46 fb       	bst	r20, 6
    129a:	00 27       	eor	r16, r16
    129c:	00 f9       	bld	r16, 0
				nextItem.ShiftLeft = (jRecord.Flags & SHIFT_LEFT) ? 1 : 0;
    129e:	f4 2e       	mov	r15, r20
    12a0:	ff 1c       	adc	r15, r15
    12a2:	ff 24       	eor	r15, r15
    12a4:	ff 1c       	adc	r15, r15
    12a6:	d0 e0       	ldi	r29, 0x00	; 0
    12a8:	f0 fa       	bst	r15, 0
    12aa:	d0 f9       	bld	r29, 0
    12ac:	00 fb       	bst	r16, 0
    12ae:	d1 f9       	bld	r29, 1
	
	// Get next menu item according to current state and jump conditions
	nextItem = getNextMenuItem(selectedMenuItemID, jumpCondition);
	
	// If next item differs from current
	if (nextItem.ItemID != selectedMenuItemID)
    12b0:	8c 13       	cpse	r24, r28
    12b2:	07 c0       	rjmp	.+14     	; 0x12c2 <processMenu+0x8a>
    12b4:	31 c0       	rjmp	.+98     	; 0x1318 <processMenu+0xe0>
    12b6:	2f 5f       	subi	r18, 0xFF	; 255
    12b8:	3f 4f       	sbci	r19, 0xFF	; 255
	NextItem_t nextItem;
	nextItem.ItemID = selectedItemId;
	MenuJumpRecord	jRecord;
	uint8_t i;
	
	for (i = 0; i < sizeof(menuJumpSet)/sizeof(MenuJumpRecord); i++  )
    12ba:	2d 31       	cpi	r18, 0x1D	; 29
    12bc:	31 05       	cpc	r19, r1
    12be:	81 f6       	brne	.-96     	; 0x1260 <processMenu+0x28>
    12c0:	2b c0       	rjmp	.+86     	; 0x1318 <processMenu+0xe0>
	
	// If next item differs from current
	if (nextItem.ItemID != selectedMenuItemID)
	{		
		// Call exit function for current item
		processItemFunction(selectedMenuFunctionRecord.LeaveFunction);
    12c2:	e0 91 de 00 	lds	r30, 0x00DE
    12c6:	f0 91 df 00 	lds	r31, 0x00DF
//	Arguments:
//		funcAddr - address of the function to run.
//-----------------------------------------------------------------//
static inline void processItemFunction(FuncPtr funcAddr)
{
	if (funcAddr != 0)
    12ca:	30 97       	sbiw	r30, 0x00	; 0
    12cc:	09 f0       	breq	.+2      	; 0x12d0 <processMenu+0x98>
		((FuncPtr)funcAddr)();
    12ce:	09 95       	icall
		// Call exit function for current item
		processItemFunction(selectedMenuFunctionRecord.LeaveFunction);
		
		// If shifting is specified, start it before calling any 
		//	new menu item functions 
		if (nextItem.ShiftRight)
    12d0:	f0 fa       	bst	r15, 0
    12d2:	d0 f9       	bld	r29, 0
    12d4:	00 fb       	bst	r16, 0
    12d6:	d1 f9       	bld	r29, 1
    12d8:	d1 ff       	sbrs	r29, 1
    12da:	02 c0       	rjmp	.+4      	; 0x12e0 <processMenu+0xa8>
			startShiftingWindowRight();
    12dc:	11 dc       	rcall	.-2014   	; 0xb00 <startShiftingWindowRight>
    12de:	02 c0       	rjmp	.+4      	; 0x12e4 <processMenu+0xac>
		else if (nextItem.ShiftLeft)
    12e0:	d0 fd       	sbrc	r29, 0
			startShiftingWindowLeft();
    12e2:	00 dc       	rcall	.-2048   	; 0xae4 <startShiftingWindowLeft>
		
		// Select new item
		selectedMenuItemID = nextItem.ItemID;
    12e4:	c0 93 d8 00 	sts	0x00D8, r28
		
		// Load from FLASH and save function pointers
		getMenuFunctionRecord(selectedMenuItemID, &selectedMenuFunctionRecord);
    12e8:	69 ed       	ldi	r22, 0xD9	; 217
    12ea:	70 e0       	ldi	r23, 0x00	; 0
    12ec:	8c 2f       	mov	r24, r28
    12ee:	d6 dc       	rcall	.-1620   	; 0xc9c <getMenuFunctionRecord>
		// Call select function for next item
		processItemFunction(selectedMenuFunctionRecord.SelectFunction);
    12f0:	e0 91 da 00 	lds	r30, 0x00DA
    12f4:	f0 91 db 00 	lds	r31, 0x00DB
//	Arguments:
//		funcAddr - address of the function to run.
//-----------------------------------------------------------------//
static inline void processItemFunction(FuncPtr funcAddr)
{
	if (funcAddr != 0)
    12f8:	30 97       	sbiw	r30, 0x00	; 0
    12fa:	09 f0       	breq	.+2      	; 0x12fe <processMenu+0xc6>
		((FuncPtr)funcAddr)();
    12fc:	09 95       	icall
		// Load from FLASH and save function pointers
		getMenuFunctionRecord(selectedMenuItemID, &selectedMenuFunctionRecord);
		// Call select function for next item
		processItemFunction(selectedMenuFunctionRecord.SelectFunction);
		// Start timer if timeout is enabled
		if (nextItem.ItemTimeout != 0)
    12fe:	11 23       	and	r17, r17
    1300:	a9 f0       	breq	.+42     	; 0x132c <processMenu+0xf4>
		{
			menuTimer.Top = nextItem.ItemTimeout * MENU_TIMEOUT_MULT;
    1302:	11 0f       	add	r17, r17
    1304:	10 93 75 00 	sts	0x0075, r17
			menuTimer.Timer = 0;
    1308:	10 92 74 00 	sts	0x0074, r1
			menuTimer.Enabled = 1;	
    130c:	e3 e7       	ldi	r30, 0x73	; 115
    130e:	f0 e0       	ldi	r31, 0x00	; 0
    1310:	80 81       	ld	r24, Z
    1312:	81 60       	ori	r24, 0x01	; 1
    1314:	80 83       	st	Z, r24
    1316:	0a c0       	rjmp	.+20     	; 0x132c <processMenu+0xf4>
		}
		
	}
	else
	{
		processSoftTimer8b(&userTimer);
    1318:	80 ee       	ldi	r24, 0xE0	; 224
    131a:	90 e0       	ldi	r25, 0x00	; 0
    131c:	34 d3       	rcall	.+1640   	; 0x1986 <processSoftTimer8b>
		// Stay at previous item
		processItemFunction(selectedMenuFunctionRecord.RunFunction);
    131e:	e0 91 dc 00 	lds	r30, 0x00DC
    1322:	f0 91 dd 00 	lds	r31, 0x00DD
//	Arguments:
//		funcAddr - address of the function to run.
//-----------------------------------------------------------------//
static inline void processItemFunction(FuncPtr funcAddr)
{
	if (funcAddr != 0)
    1326:	30 97       	sbiw	r30, 0x00	; 0
    1328:	09 f0       	breq	.+2      	; 0x132c <processMenu+0xf4>
		((FuncPtr)funcAddr)();
    132a:	09 95       	icall
	{
		processSoftTimer8b(&userTimer);
		// Stay at previous item
		processItemFunction(selectedMenuFunctionRecord.RunFunction);
	}	
}
    132c:	df 91       	pop	r29
    132e:	cf 91       	pop	r28
    1330:	1f 91       	pop	r17
    1332:	0f 91       	pop	r16
    1334:	ff 90       	pop	r15
    1336:	08 95       	ret

00001338 <u16toa_align_right>:
// Converts uint16_t value into decimal string with right alignment
// len = number of digits output (without terminating '\0')
// len[7] = 1 -> no terminating '\0' at buffer[len]
// fill_char -> char used for string padding
void u16toa_align_right(uint16_t val, char *buffer, uint8_t len,char fill_char)
{
    1338:	cf 93       	push	r28
    133a:	df 93       	push	r29
    133c:	fc 01       	movw	r30, r24
    133e:	52 2f       	mov	r21, r18
	if (len & 0x80)
    1340:	44 23       	and	r20, r20
    1342:	2c f4       	brge	.+10     	; 0x134e <u16toa_align_right+0x16>
	{
		len = len & 0x7F;
    1344:	4f 77       	andi	r20, 0x7F	; 127
		buffer += len;	
    1346:	eb 01       	movw	r28, r22
    1348:	c4 0f       	add	r28, r20
    134a:	d1 1d       	adc	r29, r1
    134c:	04 c0       	rjmp	.+8      	; 0x1356 <u16toa_align_right+0x1e>
	}
	else
	{
		buffer += len;	
    134e:	eb 01       	movw	r28, r22
    1350:	c4 0f       	add	r28, r20
    1352:	d1 1d       	adc	r29, r1
		*buffer = 0;
    1354:	18 82       	st	Y, r1
	}
	
	do
	{
		*--buffer = val % 10 + '0';
    1356:	9f 01       	movw	r18, r30
    1358:	ad ec       	ldi	r26, 0xCD	; 205
    135a:	bc ec       	ldi	r27, 0xCC	; 204
    135c:	0d d4       	rcall	.+2074   	; 0x1b78 <__umulhisi3>
    135e:	96 95       	lsr	r25
    1360:	87 95       	ror	r24
    1362:	96 95       	lsr	r25
    1364:	87 95       	ror	r24
    1366:	96 95       	lsr	r25
    1368:	87 95       	ror	r24
    136a:	dc 01       	movw	r26, r24
    136c:	aa 0f       	add	r26, r26
    136e:	bb 1f       	adc	r27, r27
    1370:	bc 01       	movw	r22, r24
    1372:	66 0f       	add	r22, r22
    1374:	77 1f       	adc	r23, r23
    1376:	66 0f       	add	r22, r22
    1378:	77 1f       	adc	r23, r23
    137a:	66 0f       	add	r22, r22
    137c:	77 1f       	adc	r23, r23
    137e:	6a 0f       	add	r22, r26
    1380:	7b 1f       	adc	r23, r27
    1382:	e6 1b       	sub	r30, r22
    1384:	f7 0b       	sbc	r31, r23
    1386:	e0 5d       	subi	r30, 0xD0	; 208
    1388:	ea 93       	st	-Y, r30
		val /= 10;
    138a:	fc 01       	movw	r30, r24
		len--;
    138c:	41 50       	subi	r20, 0x01	; 1
	}
	while ((val != 0) && len);
    138e:	00 97       	sbiw	r24, 0x00	; 0
    1390:	29 f4       	brne	.+10     	; 0x139c <u16toa_align_right+0x64>
	
	// Padding
	while(len--)
    1392:	84 2f       	mov	r24, r20
    1394:	81 50       	subi	r24, 0x01	; 1
    1396:	41 11       	cpse	r20, r1
    1398:	04 c0       	rjmp	.+8      	; 0x13a2 <u16toa_align_right+0x6a>
    139a:	07 c0       	rjmp	.+14     	; 0x13aa <u16toa_align_right+0x72>
	{
		*--buffer = val % 10 + '0';
		val /= 10;
		len--;
	}
	while ((val != 0) && len);
    139c:	41 11       	cpse	r20, r1
    139e:	db cf       	rjmp	.-74     	; 0x1356 <u16toa_align_right+0x1e>
    13a0:	04 c0       	rjmp	.+8      	; 0x13aa <u16toa_align_right+0x72>
    13a2:	fe 01       	movw	r30, r28
	
	// Padding
	while(len--)
		*--buffer = fill_char;
    13a4:	52 93       	st	-Z, r21
		len--;
	}
	while ((val != 0) && len);
	
	// Padding
	while(len--)
    13a6:	81 50       	subi	r24, 0x01	; 1
    13a8:	e8 f7       	brcc	.-6      	; 0x13a4 <u16toa_align_right+0x6c>
		*--buffer = fill_char;
}
    13aa:	df 91       	pop	r29
    13ac:	cf 91       	pop	r28
    13ae:	08 95       	ret

000013b0 <init_system_io>:
//extern void powTest(void);

void init_system_io()
{
	// Setup Port D
	PORTD = 0; //(1<<PD_SYNCA | 1<<PD_SYNCB);
    13b0:	12 ba       	out	0x12, r1	; 18
	DDRD = (1<<PD_TXD | 1<<PD_M1 | 1<<PD_M2 | 1<<PD_HEATER | 1<<PD_HEAT_INDIC );
    13b2:	8e e3       	ldi	r24, 0x3E	; 62
    13b4:	81 bb       	out	0x11, r24	; 17
	
	// Setup Port B
	PORTB = 0;
    13b6:	18 ba       	out	0x18, r1	; 24
	DDRB = (1<<PB_BEEPER | 1<<PB_LED_DOUT | 1<<PB_LED_CLK | 1<<PB_SEGF | 1<<PB_SEGG | 1<<PB_SEGH);
    13b8:	8f e3       	ldi	r24, 0x3F	; 63
    13ba:	87 bb       	out	0x17, r24	; 23
	
	PORTC = 0;
    13bc:	15 ba       	out	0x15, r1	; 21
	DDRC = (1<<PC_SEGA | 1<<PC_SEGB | 1<<PC_SEGC | 1<<PC_SEGD | 1<<PC_SEGE);	
    13be:	8f e1       	ldi	r24, 0x1F	; 31
    13c0:	84 bb       	out	0x14, r24	; 20

	// Setup timer0
	// 1/1024 prescaler, T=64us @16MHz
	TCCR0 = (1<<CS02 | 0<<CS01 | 1<<CS00);
    13c2:	85 e0       	ldi	r24, 0x05	; 5
    13c4:	83 bf       	out	0x33, r24	; 51
	// Start 256 * 64us = 16384us interval
	TCNT0 = 0;
    13c6:	12 be       	out	0x32, r1	; 50
	// Clear interrupt flag
	TIFR |= (1<<TOV0);
    13c8:	88 b7       	in	r24, 0x38	; 56
    13ca:	81 60       	ori	r24, 0x01	; 1
    13cc:	88 bf       	out	0x38, r24	; 56
	// Enable interrupts from timer 0
	TIMSK |= (1<<TOIE0);
    13ce:	89 b7       	in	r24, 0x39	; 57
    13d0:	81 60       	ori	r24, 0x01	; 1
    13d2:	89 bf       	out	0x39, r24	; 57
	
	// Setup timer2 as 1ms system frequency generator
	// 1/64 prescaler, CTC mode, OC2 disconnected
	TCCR2 = (1<<CS22 | 1<<WGM21);
    13d4:	8c e0       	ldi	r24, 0x0C	; 12
    13d6:	85 bd       	out	0x25, r24	; 37
	OCR2 = 249;
    13d8:	89 ef       	ldi	r24, 0xF9	; 249
    13da:	83 bd       	out	0x23, r24	; 35
	TIMSK |= (1<<OCIE2);
    13dc:	89 b7       	in	r24, 0x39	; 57
    13de:	80 68       	ori	r24, 0x80	; 128
    13e0:	89 bf       	out	0x39, r24	; 57
	
	// Setup timer1 as beeper frequency generator
	// CTC mode, 1/64 prescaler
	TCCR1A = 0;
    13e2:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = (1<<WGM12 | 1<<CS11 | 1<<CS10);
    13e4:	8b e0       	ldi	r24, 0x0B	; 11
    13e6:	8e bd       	out	0x2e, r24	; 46
	// 1kHz beeper frequency default
	OCR1A = 127;
    13e8:	8f e7       	ldi	r24, 0x7F	; 127
    13ea:	90 e0       	ldi	r25, 0x00	; 0
    13ec:	9b bd       	out	0x2b, r25	; 43
    13ee:	8a bd       	out	0x2a, r24	; 42

	// Setup AC sync comparator
	// Interrupt on output toggle
	ACSR |= (1<<ACI);
    13f0:	44 9a       	sbi	0x08, 4	; 8
	ACSR = (1<<ACIE | 0<<ACIS1 | 0<<ACIS0);
    13f2:	88 e0       	ldi	r24, 0x08	; 8
    13f4:	88 b9       	out	0x08, r24	; 8
	
	// Setup ADC
	// Internal Vref + cap, input ADC5, 
	ADMUX = (1<<REFS1 | 1<<REFS0 | 0<<MUX3 | 1<<MUX2 | 0<<MUX1 | 1<<MUX0 );
    13f6:	85 ec       	ldi	r24, 0xC5	; 197
    13f8:	87 b9       	out	0x07, r24	; 7
	// Prescaler = 128
	ADCSRA = (1<<ADEN |/* 1<<ADFR |*/  1<<ADIE | 1<<ADPS2 | 1<<ADPS1 | 1<<ADPS0);
    13fa:	8f e8       	ldi	r24, 0x8F	; 143
    13fc:	86 b9       	out	0x06, r24	; 6
	
	// Setup USART
	// Double speed
	UCSRA = (1<<U2X);
    13fe:	82 e0       	ldi	r24, 0x02	; 2
    1400:	8b b9       	out	0x0b, r24	; 11
	UCSRB = (1<<RXEN | 1<<TXEN | 0<<UCSZ2);
    1402:	88 e1       	ldi	r24, 0x18	; 24
    1404:	8a b9       	out	0x0a, r24	; 10
	// No parity, 1 stop bit, 8 bit
	UCSRC = (1<<URSEL | 0<<UPM1 | 0<<UPM0 | 0<<USBS | 1<<UCSZ1 | 1<<UCSZ0);
    1406:	86 e8       	ldi	r24, 0x86	; 134
    1408:	80 bd       	out	0x20, r24	; 32
	// 57600 @16MHz, 2x
	UBRRH=0x00;
    140a:	10 bc       	out	0x20, r1	; 32
	UBRRL=0x22;
    140c:	82 e2       	ldi	r24, 0x22	; 34
    140e:	89 b9       	out	0x09, r24	; 9
    1410:	08 95       	ret

00001412 <main>:




int main(void)
{
    1412:	cf 93       	push	r28
    1414:	df 93       	push	r29
    1416:	cd b7       	in	r28, 0x3d	; 61
    1418:	de b7       	in	r29, 0x3e	; 62
    141a:	2b 97       	sbiw	r28, 0x0b	; 11
    141c:	0f b6       	in	r0, 0x3f	; 63
    141e:	f8 94       	cli
    1420:	de bf       	out	0x3e, r29	; 62
    1422:	0f be       	out	0x3f, r0	; 63
    1424:	cd bf       	out	0x3d, r28	; 61
	char str[10];
	volatile uint8_t temp8u = 0x00;
    1426:	1b 86       	std	Y+11, r1	; 0x0b
	volatile uint16_t temp16u;
	
	// Initialize IO
	init_system_io();
    1428:	c3 df       	rcall	.-122    	; 0x13b0 <init_system_io>
	// Restore params
	restoreGlobalParams();
    142a:	47 da       	rcall	.-2930   	; 0x8ba <restoreGlobalParams>
	// Calibrate ADC coefficients using restored params
	calculateCoeffs();
    142c:	63 d7       	rcall	.+3782   	; 0x22f4 <__data_load_end+0x6a2>
	// Initialize LED indicator
	initLedIndicator();
    142e:	76 db       	rcall	.-2324   	; 0xb1c <initLedIndicator>
	// Initialize menu
	InitMenu();
    1430:	f5 de       	rcall	.-534    	; 0x121c <InitMenu>
	// Enable interrupts
	sei();
    1432:	78 94       	sei
	// Beep
	SetBeeperFreq(1000);
    1434:	88 ee       	ldi	r24, 0xE8	; 232
    1436:	93 e0       	ldi	r25, 0x03	; 3
    1438:	d4 d2       	rcall	.+1448   	; 0x19e2 <SetBeeperFreq>
	StartBeep(200);
    143a:	88 ec       	ldi	r24, 0xC8	; 200
    143c:	90 e0       	ldi	r25, 0x00	; 0
    143e:	f2 d2       	rcall	.+1508   	; 0x1a24 <StartBeep>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1440:	2f ef       	ldi	r18, 0xFF	; 255
    1442:	81 ee       	ldi	r24, 0xE1	; 225
    1444:	94 e0       	ldi	r25, 0x04	; 4
    1446:	21 50       	subi	r18, 0x01	; 1
    1448:	80 40       	sbci	r24, 0x00	; 0
    144a:	90 40       	sbci	r25, 0x00	; 0
    144c:	e1 f7       	brne	.-8      	; 0x1446 <main+0x34>
    144e:	00 c0       	rjmp	.+0      	; 0x1450 <main+0x3e>
    1450:	00 00       	nop
	// Safety delay for power part
	_delay_ms(100);
	// Start rotating
	setMotorDirection(ROLL_FWD);
    1452:	81 e0       	ldi	r24, 0x01	; 1
    1454:	0e d1       	rcall	.+540    	; 0x1672 <setMotorDirection>


    while(1)
    {
		
		if (menuUpdateTimer.FOvfl)
    1456:	08 e7       	ldi	r16, 0x78	; 120
    1458:	10 e0       	ldi	r17, 0x00	; 0
    145a:	f8 01       	movw	r30, r16
    145c:	80 81       	ld	r24, Z
    145e:	86 ff       	sbrs	r24, 6
    1460:	fc cf       	rjmp	.-8      	; 0x145a <main+0x48>
		{
			// Get new temperature measurement - new value is pushed into ring buffer
			// once every AC line period
			update_normalized_adc();			// TODO: slow down temperature change (say once per 200-400ms)
    1462:	19 d8       	rcall	.-4046   	; 0x496 <update_normalized_adc>
			
			// Get new button state
			process_buttons();
    1464:	27 d8       	rcall	.-4018   	; 0x4b4 <process_buttons>
			
			// Give sound feedback
			if (button_state & BL_MENU)
    1466:	80 91 c2 00 	lds	r24, 0x00C2
    146a:	90 91 c3 00 	lds	r25, 0x00C3
    146e:	91 ff       	sbrs	r25, 1
    1470:	07 c0       	rjmp	.+14     	; 0x1480 <main+0x6e>
			{
				SetBeeperFreq(800);
    1472:	80 e2       	ldi	r24, 0x20	; 32
    1474:	93 e0       	ldi	r25, 0x03	; 3
    1476:	b5 d2       	rcall	.+1386   	; 0x19e2 <SetBeeperFreq>
				StartBeep(40);
    1478:	88 e2       	ldi	r24, 0x28	; 40
    147a:	90 e0       	ldi	r25, 0x00	; 0
    147c:	d3 d2       	rcall	.+1446   	; 0x1a24 <StartBeep>
    147e:	0a c0       	rjmp	.+20     	; 0x1494 <main+0x82>
			}
			else if (button_action_down & (BD_MENU | BD_UP | BD_DOWN | BD_HEATCTRL))
    1480:	80 91 c1 00 	lds	r24, 0x00C1
    1484:	87 74       	andi	r24, 0x47	; 71
    1486:	31 f0       	breq	.+12     	; 0x1494 <main+0x82>
			{
				SetBeeperFreq(1000);
    1488:	88 ee       	ldi	r24, 0xE8	; 232
    148a:	93 e0       	ldi	r25, 0x03	; 3
    148c:	aa d2       	rcall	.+1364   	; 0x19e2 <SetBeeperFreq>
				StartBeep(40);
    148e:	88 e2       	ldi	r24, 0x28	; 40
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	c8 d2       	rcall	.+1424   	; 0x1a24 <StartBeep>
			}	
			

			// Process user menu states, settings and indication
			processMenu();
    1494:	d1 de       	rcall	.-606    	; 0x1238 <processMenu>
			
			// Process cyclic rolling, direction control
			processRollControl();	
    1496:	81 d8       	rcall	.-3838   	; 0x59a <processRollControl>
			
			// Process heater regulation
			processHeaterControl();
    1498:	8b d9       	rcall	.-3306   	; 0x7b0 <processHeaterControl>
		

			// Process log
			if (menuUpdateTimer.FA_TGL)
    149a:	f8 01       	movw	r30, r16
    149c:	80 81       	ld	r24, Z
    149e:	82 ff       	sbrs	r24, 2
    14a0:	cb c0       	rjmp	.+406    	; 0x1638 <main+0x226>
				// Log to UART
				//---------------------------------//
				// Function is called every 50ms
				// UART message is sent every second call (once per 100ms)
				
				u16toa_align_right(adc_celsius,str,6,' ');				// Displayed temp, Celsius
    14a2:	20 e2       	ldi	r18, 0x20	; 32
    14a4:	46 e0       	ldi	r20, 0x06	; 6
    14a6:	be 01       	movw	r22, r28
    14a8:	6f 5f       	subi	r22, 0xFF	; 255
    14aa:	7f 4f       	sbci	r23, 0xFF	; 255
    14ac:	80 91 0e 01 	lds	r24, 0x010E
    14b0:	90 91 0f 01 	lds	r25, 0x010F
    14b4:	41 df       	rcall	.-382    	; 0x1338 <u16toa_align_right>
				USART_sendstr(str);
    14b6:	ce 01       	movw	r24, r28
    14b8:	01 96       	adiw	r24, 0x01	; 1
    14ba:	fa d2       	rcall	.+1524   	; 0x1ab0 <USART_sendstr>
				
				u16toa_align_right(adc_normalized,str,6,' ');			// Displayed temp
    14bc:	20 e2       	ldi	r18, 0x20	; 32
    14be:	46 e0       	ldi	r20, 0x06	; 6
    14c0:	be 01       	movw	r22, r28
    14c2:	6f 5f       	subi	r22, 0xFF	; 255
    14c4:	7f 4f       	sbci	r23, 0xFF	; 255
    14c6:	80 91 0c 01 	lds	r24, 0x010C
    14ca:	90 91 0d 01 	lds	r25, 0x010D
    14ce:	34 df       	rcall	.-408    	; 0x1338 <u16toa_align_right>
				USART_sendstr(str);
    14d0:	ce 01       	movw	r24, r28
    14d2:	01 96       	adiw	r24, 0x01	; 1
    14d4:	ed d2       	rcall	.+1498   	; 0x1ab0 <USART_sendstr>
				
				u16toa_align_right(dbg_SetTempCelsius,str,6,' ');		// Temp setting, Celsius
    14d6:	20 e2       	ldi	r18, 0x20	; 32
    14d8:	46 e0       	ldi	r20, 0x06	; 6
    14da:	be 01       	movw	r22, r28
    14dc:	6f 5f       	subi	r22, 0xFF	; 255
    14de:	7f 4f       	sbci	r23, 0xFF	; 255
    14e0:	80 91 13 01 	lds	r24, 0x0113
    14e4:	90 e0       	ldi	r25, 0x00	; 0
    14e6:	28 df       	rcall	.-432    	; 0x1338 <u16toa_align_right>
				USART_sendstr(str);
    14e8:	ce 01       	movw	r24, r28
    14ea:	01 96       	adiw	r24, 0x01	; 1
    14ec:	e1 d2       	rcall	.+1474   	; 0x1ab0 <USART_sendstr>
				
				u16toa_align_right(dbg_SetTempPID,str,6,' ');			// Temp setting, as input to PID
    14ee:	20 e2       	ldi	r18, 0x20	; 32
    14f0:	46 e0       	ldi	r20, 0x06	; 6
    14f2:	be 01       	movw	r22, r28
    14f4:	6f 5f       	subi	r22, 0xFF	; 255
    14f6:	7f 4f       	sbci	r23, 0xFF	; 255
    14f8:	80 91 2e 01 	lds	r24, 0x012E
    14fc:	90 91 2f 01 	lds	r25, 0x012F
    1500:	1b df       	rcall	.-458    	; 0x1338 <u16toa_align_right>
				USART_sendstr(str);
    1502:	ce 01       	movw	r24, r28
    1504:	01 96       	adiw	r24, 0x01	; 1
    1506:	d4 d2       	rcall	.+1448   	; 0x1ab0 <USART_sendstr>
				
				u16toa_align_right(dbg_RealTempCelsius,str,8,' ');		// Real temp, sampled for PID input, Celsius
    1508:	20 e2       	ldi	r18, 0x20	; 32
    150a:	48 e0       	ldi	r20, 0x08	; 8
    150c:	be 01       	movw	r22, r28
    150e:	6f 5f       	subi	r22, 0xFF	; 255
    1510:	7f 4f       	sbci	r23, 0xFF	; 255
    1512:	80 91 2b 01 	lds	r24, 0x012B
    1516:	90 e0       	ldi	r25, 0x00	; 0
    1518:	0f df       	rcall	.-482    	; 0x1338 <u16toa_align_right>
				USART_sendstr(str);
    151a:	ce 01       	movw	r24, r28
    151c:	01 96       	adiw	r24, 0x01	; 1
    151e:	c8 d2       	rcall	.+1424   	; 0x1ab0 <USART_sendstr>
				
				u16toa_align_right(dbg_RealTempPID,str,6,' ');			// Real temp, sampled for PID input
    1520:	20 e2       	ldi	r18, 0x20	; 32
    1522:	46 e0       	ldi	r20, 0x06	; 6
    1524:	be 01       	movw	r22, r28
    1526:	6f 5f       	subi	r22, 0xFF	; 255
    1528:	7f 4f       	sbci	r23, 0xFF	; 255
    152a:	80 91 16 01 	lds	r24, 0x0116
    152e:	90 91 17 01 	lds	r25, 0x0117
    1532:	02 df       	rcall	.-508    	; 0x1338 <u16toa_align_right>
				USART_sendstr(str);
    1534:	ce 01       	movw	r24, r28
    1536:	01 96       	adiw	r24, 0x01	; 1
    1538:	bb d2       	rcall	.+1398   	; 0x1ab0 <USART_sendstr>
				
				//u16toa_align_right(dbg_RealTempPIDfiltered,str,6,' ');			// Real temp, sampled for PID input, filtered
				//USART_sendstr(str);
				
				USART_sendstr("    ");
    153a:	8d ea       	ldi	r24, 0xAD	; 173
    153c:	90 e0       	ldi	r25, 0x00	; 0
    153e:	b8 d2       	rcall	.+1392   	; 0x1ab0 <USART_sendstr>
				
				if (dbg_PID_p_term >= 0)
    1540:	80 91 14 01 	lds	r24, 0x0114
    1544:	90 91 15 01 	lds	r25, 0x0115
    1548:	99 23       	and	r25, r25
    154a:	54 f0       	brlt	.+20     	; 0x1560 <main+0x14e>
				{
					u16toa_align_right(dbg_PID_p_term,str,6,'0');		// p term
    154c:	20 e3       	ldi	r18, 0x30	; 48
    154e:	46 e0       	ldi	r20, 0x06	; 6
    1550:	be 01       	movw	r22, r28
    1552:	6f 5f       	subi	r22, 0xFF	; 255
    1554:	7f 4f       	sbci	r23, 0xFF	; 255
    1556:	f0 de       	rcall	.-544    	; 0x1338 <u16toa_align_right>
					USART_sendstr(str);	
    1558:	ce 01       	movw	r24, r28
    155a:	01 96       	adiw	r24, 0x01	; 1
    155c:	a9 d2       	rcall	.+1362   	; 0x1ab0 <USART_sendstr>
    155e:	0e c0       	rjmp	.+28     	; 0x157c <main+0x16a>
				}
				else
				{
					u16toa_align_right(-dbg_PID_p_term,str,6,'0');		
    1560:	20 e3       	ldi	r18, 0x30	; 48
    1562:	46 e0       	ldi	r20, 0x06	; 6
    1564:	be 01       	movw	r22, r28
    1566:	6f 5f       	subi	r22, 0xFF	; 255
    1568:	7f 4f       	sbci	r23, 0xFF	; 255
    156a:	91 95       	neg	r25
    156c:	81 95       	neg	r24
    156e:	91 09       	sbc	r25, r1
    1570:	e3 de       	rcall	.-570    	; 0x1338 <u16toa_align_right>
					USART_send('-');
    1572:	8d e2       	ldi	r24, 0x2D	; 45
    1574:	98 d2       	rcall	.+1328   	; 0x1aa6 <USART_send>
					USART_sendstr(str);
    1576:	ce 01       	movw	r24, r28
    1578:	01 96       	adiw	r24, 0x01	; 1
    157a:	9a d2       	rcall	.+1332   	; 0x1ab0 <USART_sendstr>
				}
				
				USART_sendstr("    ");
    157c:	8d ea       	ldi	r24, 0xAD	; 173
    157e:	90 e0       	ldi	r25, 0x00	; 0
    1580:	97 d2       	rcall	.+1326   	; 0x1ab0 <USART_sendstr>
				
				if (dbg_PID_d_term >= 0)
    1582:	80 91 26 01 	lds	r24, 0x0126
    1586:	90 91 27 01 	lds	r25, 0x0127
    158a:	99 23       	and	r25, r25
    158c:	54 f0       	brlt	.+20     	; 0x15a2 <main+0x190>
				{
					u16toa_align_right(dbg_PID_d_term,str,6,'0');		// d term
    158e:	20 e3       	ldi	r18, 0x30	; 48
    1590:	46 e0       	ldi	r20, 0x06	; 6
    1592:	be 01       	movw	r22, r28
    1594:	6f 5f       	subi	r22, 0xFF	; 255
    1596:	7f 4f       	sbci	r23, 0xFF	; 255
    1598:	cf de       	rcall	.-610    	; 0x1338 <u16toa_align_right>
					USART_sendstr(str);
    159a:	ce 01       	movw	r24, r28
    159c:	01 96       	adiw	r24, 0x01	; 1
    159e:	88 d2       	rcall	.+1296   	; 0x1ab0 <USART_sendstr>
    15a0:	0e c0       	rjmp	.+28     	; 0x15be <main+0x1ac>
				}
				else
				{
					u16toa_align_right(-dbg_PID_d_term,str,6,'0');
    15a2:	20 e3       	ldi	r18, 0x30	; 48
    15a4:	46 e0       	ldi	r20, 0x06	; 6
    15a6:	be 01       	movw	r22, r28
    15a8:	6f 5f       	subi	r22, 0xFF	; 255
    15aa:	7f 4f       	sbci	r23, 0xFF	; 255
    15ac:	91 95       	neg	r25
    15ae:	81 95       	neg	r24
    15b0:	91 09       	sbc	r25, r1
    15b2:	c2 de       	rcall	.-636    	; 0x1338 <u16toa_align_right>
					USART_send('-');
    15b4:	8d e2       	ldi	r24, 0x2D	; 45
    15b6:	77 d2       	rcall	.+1262   	; 0x1aa6 <USART_send>
					USART_sendstr(str);
    15b8:	ce 01       	movw	r24, r28
    15ba:	01 96       	adiw	r24, 0x01	; 1
    15bc:	79 d2       	rcall	.+1266   	; 0x1ab0 <USART_sendstr>
				}
				
				USART_sendstr("    ");
    15be:	8d ea       	ldi	r24, 0xAD	; 173
    15c0:	90 e0       	ldi	r25, 0x00	; 0
    15c2:	76 d2       	rcall	.+1260   	; 0x1ab0 <USART_sendstr>
				
				if (dbg_PID_i_term >= 0)
    15c4:	80 91 1b 01 	lds	r24, 0x011B
    15c8:	90 91 1c 01 	lds	r25, 0x011C
    15cc:	99 23       	and	r25, r25
    15ce:	54 f0       	brlt	.+20     	; 0x15e4 <main+0x1d2>
				{
					u16toa_align_right(dbg_PID_i_term,str,6,'0');		// i term
    15d0:	20 e3       	ldi	r18, 0x30	; 48
    15d2:	46 e0       	ldi	r20, 0x06	; 6
    15d4:	be 01       	movw	r22, r28
    15d6:	6f 5f       	subi	r22, 0xFF	; 255
    15d8:	7f 4f       	sbci	r23, 0xFF	; 255
    15da:	ae de       	rcall	.-676    	; 0x1338 <u16toa_align_right>
					USART_sendstr(str);
    15dc:	ce 01       	movw	r24, r28
    15de:	01 96       	adiw	r24, 0x01	; 1
    15e0:	67 d2       	rcall	.+1230   	; 0x1ab0 <USART_sendstr>
    15e2:	0e c0       	rjmp	.+28     	; 0x1600 <main+0x1ee>
				}
				else
				{
					u16toa_align_right(-dbg_PID_i_term,str,6,'0');
    15e4:	20 e3       	ldi	r18, 0x30	; 48
    15e6:	46 e0       	ldi	r20, 0x06	; 6
    15e8:	be 01       	movw	r22, r28
    15ea:	6f 5f       	subi	r22, 0xFF	; 255
    15ec:	7f 4f       	sbci	r23, 0xFF	; 255
    15ee:	91 95       	neg	r25
    15f0:	81 95       	neg	r24
    15f2:	91 09       	sbc	r25, r1
    15f4:	a1 de       	rcall	.-702    	; 0x1338 <u16toa_align_right>
					USART_send('-');
    15f6:	8d e2       	ldi	r24, 0x2D	; 45
    15f8:	56 d2       	rcall	.+1196   	; 0x1aa6 <USART_send>
					USART_sendstr(str);
    15fa:	ce 01       	movw	r24, r28
    15fc:	01 96       	adiw	r24, 0x01	; 1
    15fe:	58 d2       	rcall	.+1200   	; 0x1ab0 <USART_sendstr>
				}
				
				u16toa_align_right(dbg_PID_output,str,6,' ');			// PID output
    1600:	20 e2       	ldi	r18, 0x20	; 32
    1602:	46 e0       	ldi	r20, 0x06	; 6
    1604:	be 01       	movw	r22, r28
    1606:	6f 5f       	subi	r22, 0xFF	; 255
    1608:	7f 4f       	sbci	r23, 0xFF	; 255
    160a:	80 91 11 01 	lds	r24, 0x0111
    160e:	90 91 12 01 	lds	r25, 0x0112
    1612:	92 de       	rcall	.-732    	; 0x1338 <u16toa_align_right>
				USART_sendstr(str);
    1614:	ce 01       	movw	r24, r28
    1616:	01 96       	adiw	r24, 0x01	; 1
    1618:	4b d2       	rcall	.+1174   	; 0x1ab0 <USART_sendstr>
				
				
				u16toa_align_right(ctrl_heater,str,6,' ');				// Heater control (PID output, synchronized)
    161a:	20 e2       	ldi	r18, 0x20	; 32
    161c:	46 e0       	ldi	r20, 0x06	; 6
    161e:	be 01       	movw	r22, r28
    1620:	6f 5f       	subi	r22, 0xFF	; 255
    1622:	7f 4f       	sbci	r23, 0xFF	; 255
    1624:	80 91 ea 00 	lds	r24, 0x00EA
    1628:	90 e0       	ldi	r25, 0x00	; 0
    162a:	86 de       	rcall	.-756    	; 0x1338 <u16toa_align_right>
				USART_sendstr(str);
    162c:	ce 01       	movw	r24, r28
    162e:	01 96       	adiw	r24, 0x01	; 1
    1630:	3f d2       	rcall	.+1150   	; 0x1ab0 <USART_sendstr>
				
				
				USART_sendstr("\n\r");
    1632:	82 eb       	ldi	r24, 0xB2	; 178
    1634:	90 e0       	ldi	r25, 0x00	; 0
    1636:	3c d2       	rcall	.+1144   	; 0x1ab0 <USART_sendstr>
				//---------------------------------//
				
			}
			
			
			processAutoPowerOff();	// TODO
    1638:	7b d9       	rcall	.-3338   	; 0x930 <processAutoPowerOff>
			
			
			
			menuUpdateTimer.FOvfl = 0;	
    163a:	f8 01       	movw	r30, r16
    163c:	80 81       	ld	r24, Z
    163e:	8f 7b       	andi	r24, 0xBF	; 191
    1640:	80 83       	st	Z, r24
    1642:	0b cf       	rjmp	.-490    	; 0x145a <main+0x48>

00001644 <setHeaterControl>:


// User function to control heater intensity
void setHeaterControl(uint8_t value)
{
	ctrl_heater = value;
    1644:	80 93 ea 00 	sts	0x00EA, r24
	heaterState &= ~READY_TO_UPDATE_HEATER;
    1648:	90 91 e9 00 	lds	r25, 0x00E9
    164c:	29 2f       	mov	r18, r25
    164e:	2f 77       	andi	r18, 0x7F	; 127
	
	if (ctrl_heater)
    1650:	88 23       	and	r24, r24
    1652:	21 f0       	breq	.+8      	; 0x165c <setHeaterControl+0x18>
		heaterState |= HEATER_ENABLED;
    1654:	20 64       	ori	r18, 0x40	; 64
    1656:	20 93 e9 00 	sts	0x00E9, r18
    165a:	08 95       	ret
	else
		heaterState &= ~HEATER_ENABLED;	
    165c:	9f 73       	andi	r25, 0x3F	; 63
    165e:	90 93 e9 00 	sts	0x00E9, r25
    1662:	08 95       	ret

00001664 <forceHeaterControlUpdate>:


void forceHeaterControlUpdate(void)
{
	// Flag READY_TO_UPDATE_HEATER will be set on next on next AC line period
	heater_cnt = HEATER_REGULATION_PERIODS - 6;
    1664:	8c e2       	ldi	r24, 0x2C	; 44
    1666:	80 93 eb 00 	sts	0x00EB, r24
	heater_reg_cnt = HEATER_PID_CALL_INTERVAL - 1;
    166a:	83 e0       	ldi	r24, 0x03	; 3
    166c:	80 93 e8 00 	sts	0x00E8, r24
    1670:	08 95       	ret

00001672 <setMotorDirection>:
	
// User function to control motor rotation
void setMotorDirection(uint8_t dir)
{
	// Disable interrupts from timer0 
	TIMSK &= ~(1<<TOIE0);
    1672:	99 b7       	in	r25, 0x39	; 57
    1674:	9e 7f       	andi	r25, 0xFE	; 254
    1676:	99 bf       	out	0x39, r25	; 57
		
	newDirReq = dir;	// save new direction request
    1678:	80 93 ec 00 	sts	0x00EC, r24
	
	if (dir & ROLL_FWD)
    167c:	80 ff       	sbrs	r24, 0
    167e:	09 c0       	rjmp	.+18     	; 0x1692 <setMotorDirection+0x20>
		bottomPoint = rollPoint;
    1680:	80 91 ed 00 	lds	r24, 0x00ED
    1684:	90 91 ee 00 	lds	r25, 0x00EE
    1688:	90 93 f0 00 	sts	0x00F0, r25
    168c:	80 93 ef 00 	sts	0x00EF, r24
    1690:	0a c0       	rjmp	.+20     	; 0x16a6 <setMotorDirection+0x34>
	else if (dir & ROLL_REV)
    1692:	81 ff       	sbrs	r24, 1
    1694:	08 c0       	rjmp	.+16     	; 0x16a6 <setMotorDirection+0x34>
		topPoint = rollPoint;
    1696:	80 91 ed 00 	lds	r24, 0x00ED
    169a:	90 91 ee 00 	lds	r25, 0x00EE
    169e:	90 93 f2 00 	sts	0x00F2, r25
    16a2:	80 93 f1 00 	sts	0x00F1, r24

	// Enable interrupts from timer 0
	TIMSK |= (1<<TOIE0);	
    16a6:	89 b7       	in	r24, 0x39	; 57
    16a8:	81 60       	ori	r24, 0x01	; 1
    16aa:	89 bf       	out	0x39, r24	; 57
    16ac:	08 95       	ret

000016ae <stopCycleRolling>:
}

void stopCycleRolling(uint8_t doResetPoints)
{
	// Disable interrupts from timer0 
	TIMSK &= ~(1<<TOIE0);
    16ae:	99 b7       	in	r25, 0x39	; 57
    16b0:	9e 7f       	andi	r25, 0xFE	; 254
    16b2:	99 bf       	out	0x39, r25	; 57
	
	rollState &= ~ROLL_CYCLE;
    16b4:	90 91 e7 00 	lds	r25, 0x00E7
    16b8:	9b 7f       	andi	r25, 0xFB	; 251
    16ba:	90 93 e7 00 	sts	0x00E7, r25
	if (doResetPoints)
    16be:	88 23       	and	r24, r24
    16c0:	71 f0       	breq	.+28     	; 0x16de <stopCycleRolling+0x30>
	{
		topPoint = bottomPoint = rollPoint;
    16c2:	80 91 ed 00 	lds	r24, 0x00ED
    16c6:	90 91 ee 00 	lds	r25, 0x00EE
    16ca:	90 93 f0 00 	sts	0x00F0, r25
    16ce:	80 93 ef 00 	sts	0x00EF, r24
    16d2:	90 93 f2 00 	sts	0x00F2, r25
    16d6:	80 93 f1 00 	sts	0x00F1, r24
		activeRollCycle = 0;	
    16da:	10 92 e6 00 	sts	0x00E6, r1
	}		
	
	// Enable interrupts from timer 0
	TIMSK |= (1<<TOIE0);
    16de:	89 b7       	in	r24, 0x39	; 57
    16e0:	81 60       	ori	r24, 0x01	; 1
    16e2:	89 bf       	out	0x39, r24	; 57
    16e4:	08 95       	ret

000016e6 <isTopPointValid>:



uint8_t isTopPointValid(void)
{
	return (	(int16_t)(topPoint - rollPoint) >= 0 );
    16e6:	80 91 f1 00 	lds	r24, 0x00F1
    16ea:	90 91 f2 00 	lds	r25, 0x00F2
    16ee:	20 91 ed 00 	lds	r18, 0x00ED
    16f2:	30 91 ee 00 	lds	r19, 0x00EE
    16f6:	82 1b       	sub	r24, r18
    16f8:	93 0b       	sbc	r25, r19
    16fa:	89 2f       	mov	r24, r25
    16fc:	80 95       	com	r24
}
    16fe:	88 1f       	adc	r24, r24
    1700:	88 27       	eor	r24, r24
    1702:	88 1f       	adc	r24, r24
    1704:	08 95       	ret

00001706 <isBottomPointValid>:

uint8_t isBottomPointValid(void)
{
	return (	(int16_t)(rollPoint - bottomPoint) >= 0	);
    1706:	80 91 ed 00 	lds	r24, 0x00ED
    170a:	90 91 ee 00 	lds	r25, 0x00EE
    170e:	20 91 ef 00 	lds	r18, 0x00EF
    1712:	30 91 f0 00 	lds	r19, 0x00F0
    1716:	82 1b       	sub	r24, r18
    1718:	93 0b       	sbc	r25, r19
    171a:	89 2f       	mov	r24, r25
    171c:	80 95       	com	r24
}
    171e:	88 1f       	adc	r24, r24
    1720:	88 27       	eor	r24, r24
    1722:	88 1f       	adc	r24, r24
    1724:	08 95       	ret

00001726 <startCycleRolling>:


uint8_t startCycleRolling(void)
{
	// Disable interrupts from timer0 
	TIMSK &= ~(1<<TOIE0);
    1726:	89 b7       	in	r24, 0x39	; 57
    1728:	8e 7f       	andi	r24, 0xFE	; 254
    172a:	89 bf       	out	0x39, r24	; 57
	
	if ( isTopPointValid() && isBottomPointValid() )
    172c:	dc df       	rcall	.-72     	; 0x16e6 <isTopPointValid>
    172e:	88 23       	and	r24, r24
    1730:	59 f0       	breq	.+22     	; 0x1748 <startCycleRolling+0x22>
    1732:	e9 df       	rcall	.-46     	; 0x1706 <isBottomPointValid>
    1734:	88 23       	and	r24, r24
    1736:	41 f0       	breq	.+16     	; 0x1748 <startCycleRolling+0x22>
	{
		rollState |= ROLL_CYCLE;
    1738:	80 91 e7 00 	lds	r24, 0x00E7
    173c:	84 60       	ori	r24, 0x04	; 4
    173e:	80 93 e7 00 	sts	0x00E7, r24
		activeRollCycle = 1;
    1742:	81 e0       	ldi	r24, 0x01	; 1
    1744:	80 93 e6 00 	sts	0x00E6, r24
	}
	
	// Enable interrupts from timer 0
	TIMSK |= (1<<TOIE0);
    1748:	89 b7       	in	r24, 0x39	; 57
    174a:	81 60       	ori	r24, 0x01	; 1
    174c:	89 bf       	out	0x39, r24	; 57
	
	return (rollState & ROLL_CYCLE);
    174e:	80 91 e7 00 	lds	r24, 0x00E7
}
    1752:	84 70       	andi	r24, 0x04	; 4
    1754:	08 95       	ret

00001756 <__vector_16>:




ISR(ANA_COMP_vect)
{
    1756:	1f 92       	push	r1
    1758:	0f 92       	push	r0
    175a:	0f b6       	in	r0, 0x3f	; 63
    175c:	0f 92       	push	r0
    175e:	11 24       	eor	r1, r1
    1760:	8f 93       	push	r24
    1762:	9f 93       	push	r25
	// Once triggered, disable further comparator interrupt
	ACSR &= ~(1<<ACIE);
    1764:	43 98       	cbi	0x08, 3	; 8
	// Turn on heater TRIAC
	if (heater_cnt < ctrl_heater_sync)
    1766:	90 91 eb 00 	lds	r25, 0x00EB
    176a:	80 91 f3 00 	lds	r24, 0x00F3
    176e:	98 17       	cp	r25, r24
    1770:	20 f4       	brcc	.+8      	; 0x177a <__vector_16+0x24>
		PORTD |= (1<<PD_HEATER | 1<<PD_HEAT_INDIC);	// Direct heater indication
    1772:	82 b3       	in	r24, 0x12	; 18
    1774:	80 63       	ori	r24, 0x30	; 48
    1776:	82 bb       	out	0x12, r24	; 18
    1778:	01 c0       	rjmp	.+2      	; 0x177c <__vector_16+0x26>
	else
		PORTD &= ~(1<<PD_HEAT_INDIC);
    177a:	95 98       	cbi	0x12, 5	; 18
	// Reprogram timer0
	TCNT0 = 256 - TRIAC_IMPULSE_TIME;		// Triac gate impulse time
    177c:	86 ef       	ldi	r24, 0xF6	; 246
    177e:	82 bf       	out	0x32, r24	; 50
	// Modify state	
	p_state &= ~STATE_MASK;					// Start new state machine cycle
    1780:	80 91 77 00 	lds	r24, 0x0077
    1784:	80 7f       	andi	r24, 0xF0	; 240
	p_state ^= HALF_PERIOD_FLAG;			// Toggle flag
    1786:	80 58       	subi	r24, 0x80	; 128
    1788:	80 93 77 00 	sts	0x0077, r24
	
}
    178c:	9f 91       	pop	r25
    178e:	8f 91       	pop	r24
    1790:	0f 90       	pop	r0
    1792:	0f be       	out	0x3f, r0	; 63
    1794:	0f 90       	pop	r0
    1796:	1f 90       	pop	r1
    1798:	18 95       	reti

0000179a <__vector_9>:



ISR(TIMER0_OVF_vect)
{
    179a:	1f 92       	push	r1
    179c:	0f 92       	push	r0
    179e:	0f b6       	in	r0, 0x3f	; 63
    17a0:	0f 92       	push	r0
    17a2:	11 24       	eor	r1, r1
    17a4:	2f 93       	push	r18
    17a6:	3f 93       	push	r19
    17a8:	4f 93       	push	r20
    17aa:	5f 93       	push	r21
    17ac:	6f 93       	push	r22
    17ae:	7f 93       	push	r23
    17b0:	8f 93       	push	r24
    17b2:	9f 93       	push	r25
    17b4:	af 93       	push	r26
    17b6:	bf 93       	push	r27
    17b8:	ef 93       	push	r30
    17ba:	ff 93       	push	r31
	uint8_t temp;
	
	switch(p_state & STATE_MASK)
    17bc:	80 91 77 00 	lds	r24, 0x0077
    17c0:	8f 70       	andi	r24, 0x0F	; 15
    17c2:	81 30       	cpi	r24, 0x01	; 1
    17c4:	51 f0       	breq	.+20     	; 0x17da <__vector_9+0x40>
    17c6:	28 f0       	brcs	.+10     	; 0x17d2 <__vector_9+0x38>
    17c8:	82 30       	cpi	r24, 0x02	; 2
    17ca:	79 f0       	breq	.+30     	; 0x17ea <__vector_9+0x50>
    17cc:	83 30       	cpi	r24, 0x03	; 3
    17ce:	99 f4       	brne	.+38     	; 0x17f6 <__vector_9+0x5c>
    17d0:	11 c0       	rjmp	.+34     	; 0x17f4 <__vector_9+0x5a>
	{
		// TRIAC_IMPULSE_TIME finished
		case 0x00:
			// Turn off heater TRIAC
			PORTD &= ~(1<<PD_HEATER);
    17d2:	94 98       	cbi	0x12, 4	; 18
			TCNT0 = 256 - (QUATER_PERIOD_TIME - TRIAC_IMPULSE_TIME);
    17d4:	8c eb       	ldi	r24, 0xBC	; 188
    17d6:	82 bf       	out	0x32, r24	; 50
			break;
    17d8:	0e c0       	rjmp	.+28     	; 0x17f6 <__vector_9+0x5c>
		// QUATER_PERIOD_TIME finished	
		case 0x01:	
			TCNT0 = 256 - (SYNC_IGNORE_TIME - QUATER_PERIOD_TIME);
    17da:	82 ec       	ldi	r24, 0xC2	; 194
    17dc:	82 bf       	out	0x32, r24	; 50
			// Start ADC conversion once every AC line period
			if (!(p_state & HALF_PERIOD_FLAG))
    17de:	80 91 77 00 	lds	r24, 0x0077
    17e2:	88 23       	and	r24, r24
    17e4:	44 f0       	brlt	.+16     	; 0x17f6 <__vector_9+0x5c>
				ADCSRA |= (1<<ADSC);
    17e6:	36 9a       	sbi	0x06, 6	; 6
    17e8:	06 c0       	rjmp	.+12     	; 0x17f6 <__vector_9+0x5c>
			break;	
		// SYNC_IGNORE_TIME finished	
		case 0x02:
			TCNT0 = 256 - SYNC_LOST_TIMEOUT;
    17ea:	80 ee       	ldi	r24, 0xE0	; 224
    17ec:	82 bf       	out	0x32, r24	; 50
			// Clear flag and enable interrupt from analog comparator
			ACSR |= (1<<ACI);
    17ee:	44 9a       	sbi	0x08, 4	; 8
			ACSR |= (1<<ACIE);
    17f0:	43 9a       	sbi	0x08, 3	; 8
			break;
    17f2:	01 c0       	rjmp	.+2      	; 0x17f6 <__vector_9+0x5c>
		// SYNC_LOST_TIMEOUT finished
		case 0x03:
			// Error - sync is lost. It means that device has been disconnected from AC line.
			// Disable all power-consuming devices like LEDs and save user settings to EEPROM.
			exitPowerOff();
    17f4:	9c d8       	rcall	.-3784   	; 0x92e <exitPowerOff>
			// Sync is not present - TODO
			break;
	}	

	// Full period check
	if ((p_state & (HALF_PERIOD_FLAG | STATE_MASK)) == (HALF_PERIOD_FLAG | 0x01))
    17f6:	80 91 77 00 	lds	r24, 0x0077
    17fa:	8f 78       	andi	r24, 0x8F	; 143
    17fc:	81 38       	cpi	r24, 0x81	; 129
    17fe:	09 f0       	breq	.+2      	; 0x1802 <__vector_9+0x68>
    1800:	a8 c0       	rjmp	.+336    	; 0x1952 <__vector_9+0x1b8>
	{
		// Full AC line period is done. Update controls.
		
		temp = PORTD;
    1802:	92 b3       	in	r25, 0x12	; 18
		temp &= ~(1<<PD_M1 | 1<<PD_M2);
    1804:	93 7f       	andi	r25, 0xF3	; 243
		if ( rollState & SKIP_CURRENT_MOTOR_CTRL )
    1806:	80 91 e7 00 	lds	r24, 0x00E7
    180a:	83 ff       	sbrs	r24, 3
    180c:	05 c0       	rjmp	.+10     	; 0x1818 <__vector_9+0x7e>
		{
			// Direction control changed. Skip current period to allow TRIACs fully close
			rollState &= ~SKIP_CURRENT_MOTOR_CTRL;
    180e:	87 7f       	andi	r24, 0xF7	; 247
    1810:	80 93 e7 00 	sts	0x00E7, r24
			PORTD = temp; 	
    1814:	92 bb       	out	0x12, r25	; 18
    1816:	75 c0       	rjmp	.+234    	; 0x1902 <__vector_9+0x168>
		}
		else
		{
			// Apply direction control 
			if (rollState & ROLL_FWD)
    1818:	80 ff       	sbrs	r24, 0
    181a:	02 c0       	rjmp	.+4      	; 0x1820 <__vector_9+0x86>
				temp |= (1<<PD_M1);
    181c:	94 60       	ori	r25, 0x04	; 4
    181e:	02 c0       	rjmp	.+4      	; 0x1824 <__vector_9+0x8a>
			else if (rollState & ROLL_REV)
    1820:	81 fd       	sbrc	r24, 1
				temp |= (1<<PD_M2);
    1822:	98 60       	ori	r25, 0x08	; 8
			PORTD = temp; 
    1824:	92 bb       	out	0x12, r25	; 18
// Function to process rolling - sets rotation direction for next period
// Call once per each AC line period
static inline void controlRolling()
{
	// Process cycle rolling
	switch(rollState & (ROLL_FWD | ROLL_REV | ROLL_CYCLE))
    1826:	40 91 e7 00 	lds	r20, 0x00E7
    182a:	84 2f       	mov	r24, r20
    182c:	87 70       	andi	r24, 0x07	; 7
    182e:	85 30       	cpi	r24, 0x05	; 5
    1830:	19 f0       	breq	.+6      	; 0x1838 <__vector_9+0x9e>
    1832:	86 30       	cpi	r24, 0x06	; 6
    1834:	f1 f5       	brne	.+124    	; 0x18b2 <__vector_9+0x118>
    1836:	1f c0       	rjmp	.+62     	; 0x1876 <__vector_9+0xdc>
//---------------------------------------------//
//---------------------------------------------//

static inline uint8_t reachedTopPoint(void)
{
	return (	(int16_t)(topPoint - rollPoint) <= 0 );
    1838:	80 91 f1 00 	lds	r24, 0x00F1
    183c:	90 91 f2 00 	lds	r25, 0x00F2
    1840:	20 91 ed 00 	lds	r18, 0x00ED
    1844:	30 91 ee 00 	lds	r19, 0x00EE
    1848:	82 1b       	sub	r24, r18
    184a:	93 0b       	sbc	r25, r19
{
	// Process cycle rolling
	switch(rollState & (ROLL_FWD | ROLL_REV | ROLL_CYCLE))
	{
		case (ROLL_FWD | ROLL_CYCLE):
			if (reachedTopPoint())
    184c:	18 16       	cp	r1, r24
    184e:	19 06       	cpc	r1, r25
    1850:	84 f1       	brlt	.+96     	; 0x18b2 <__vector_9+0x118>
			{
				if (activeRollCycle >= rollCycleSet)	
    1852:	80 91 e6 00 	lds	r24, 0x00E6
    1856:	90 91 1d 01 	lds	r25, 0x011D
    185a:	89 17       	cp	r24, r25
    185c:	28 f0       	brcs	.+10     	; 0x1868 <__vector_9+0xce>
				{
					// DONE!
					rollState &= ~ROLL_CYCLE;
    185e:	4b 7f       	andi	r20, 0xFB	; 251
					rollState |= CYCLE_ROLL_DONE;
    1860:	40 61       	ori	r20, 0x10	; 16
    1862:	40 93 e7 00 	sts	0x00E7, r20
    1866:	25 c0       	rjmp	.+74     	; 0x18b2 <__vector_9+0x118>
				}
				else
				{
					activeRollCycle++;
    1868:	8f 5f       	subi	r24, 0xFF	; 255
    186a:	80 93 e6 00 	sts	0x00E6, r24
					// Change dir	
					newDirReq = ROLL_REV;				
    186e:	82 e0       	ldi	r24, 0x02	; 2
    1870:	80 93 ec 00 	sts	0x00EC, r24
    1874:	1e c0       	rjmp	.+60     	; 0x18b2 <__vector_9+0x118>
	return (	(int16_t)(topPoint - rollPoint) <= 0 );
}

static inline uint8_t reachedBottomPoint(void)
{
	return (	(int16_t)(rollPoint - bottomPoint) <= 0 );
    1876:	80 91 ed 00 	lds	r24, 0x00ED
    187a:	90 91 ee 00 	lds	r25, 0x00EE
    187e:	20 91 ef 00 	lds	r18, 0x00EF
    1882:	30 91 f0 00 	lds	r19, 0x00F0
    1886:	82 1b       	sub	r24, r18
    1888:	93 0b       	sbc	r25, r19
				}
			}
			break;
		
		case (ROLL_REV | ROLL_CYCLE):	
			if (reachedBottomPoint())
    188a:	18 16       	cp	r1, r24
    188c:	19 06       	cpc	r1, r25
    188e:	8c f0       	brlt	.+34     	; 0x18b2 <__vector_9+0x118>
			{
				if (activeRollCycle >= rollCycleSet)	
    1890:	80 91 e6 00 	lds	r24, 0x00E6
    1894:	90 91 1d 01 	lds	r25, 0x011D
    1898:	89 17       	cp	r24, r25
    189a:	28 f0       	brcs	.+10     	; 0x18a6 <__vector_9+0x10c>
				{
					// DONE!
					rollState &= ~ROLL_CYCLE;
    189c:	4b 7f       	andi	r20, 0xFB	; 251
					rollState |= CYCLE_ROLL_DONE;
    189e:	40 61       	ori	r20, 0x10	; 16
    18a0:	40 93 e7 00 	sts	0x00E7, r20
    18a4:	06 c0       	rjmp	.+12     	; 0x18b2 <__vector_9+0x118>
				}
				else
				{
					activeRollCycle++;
    18a6:	8f 5f       	subi	r24, 0xFF	; 255
    18a8:	80 93 e6 00 	sts	0x00E6, r24
					// Change dir	
					newDirReq = ROLL_FWD;
    18ac:	81 e0       	ldi	r24, 0x01	; 1
    18ae:	80 93 ec 00 	sts	0x00EC, r24
		default:
			break;
	}
	
	// Process direction change
	if ((rollState ^ newDirReq) & (ROLL_FWD | ROLL_REV))
    18b2:	80 91 e7 00 	lds	r24, 0x00E7
    18b6:	90 91 ec 00 	lds	r25, 0x00EC
    18ba:	29 2f       	mov	r18, r25
    18bc:	28 27       	eor	r18, r24
    18be:	23 70       	andi	r18, 0x03	; 3
    18c0:	19 f0       	breq	.+6      	; 0x18c8 <__vector_9+0x12e>
	{
		// ROLL_DIR_CHANGED used for sound beep
		rollState |= (SKIP_CURRENT_MOTOR_CTRL | ROLL_DIR_CHANGED);
    18c2:	88 62       	ori	r24, 0x28	; 40
    18c4:	80 93 e7 00 	sts	0x00E7, r24
	}
	rollState &= ~(ROLL_FWD | ROLL_REV);
    18c8:	80 91 e7 00 	lds	r24, 0x00E7
    18cc:	8c 7f       	andi	r24, 0xFC	; 252
	rollState |= newDirReq;
    18ce:	89 2b       	or	r24, r25
    18d0:	80 93 e7 00 	sts	0x00E7, r24
	return (	(int16_t)(rollPoint - bottomPoint) <= 0 );
}

static inline void updateRollPoint(void)
{	
	if (rollState & ROLL_FWD)
    18d4:	80 ff       	sbrs	r24, 0
    18d6:	0a c0       	rjmp	.+20     	; 0x18ec <__vector_9+0x152>
		rollPoint++;
    18d8:	80 91 ed 00 	lds	r24, 0x00ED
    18dc:	90 91 ee 00 	lds	r25, 0x00EE
    18e0:	01 96       	adiw	r24, 0x01	; 1
    18e2:	90 93 ee 00 	sts	0x00EE, r25
    18e6:	80 93 ed 00 	sts	0x00ED, r24
    18ea:	0b c0       	rjmp	.+22     	; 0x1902 <__vector_9+0x168>
	else if (rollState & ROLL_REV)
    18ec:	81 ff       	sbrs	r24, 1
    18ee:	09 c0       	rjmp	.+18     	; 0x1902 <__vector_9+0x168>
		rollPoint--;	
    18f0:	80 91 ed 00 	lds	r24, 0x00ED
    18f4:	90 91 ee 00 	lds	r25, 0x00EE
    18f8:	01 97       	sbiw	r24, 0x01	; 1
    18fa:	90 93 ee 00 	sts	0x00EE, r25
    18fe:	80 93 ed 00 	sts	0x00ED, r24
			controlRolling();
		}
			

		// Process heater control 
		if (heater_cnt == HEATER_REGULATION_PERIODS - 6)
    1902:	80 91 eb 00 	lds	r24, 0x00EB
    1906:	8c 32       	cpi	r24, 0x2C	; 44
    1908:	b1 f4       	brne	.+44     	; 0x1936 <__vector_9+0x19c>
		{
			 if (heater_reg_cnt == HEATER_PID_CALL_INTERVAL - 1)
    190a:	80 91 e8 00 	lds	r24, 0x00E8
    190e:	83 30       	cpi	r24, 0x03	; 3
    1910:	79 f4       	brne	.+30     	; 0x1930 <__vector_9+0x196>
			 {
				 heater_reg_cnt = 0;
    1912:	10 92 e8 00 	sts	0x00E8, r1
				 // Set flag for PID control
				 heaterState |= READY_TO_UPDATE_HEATER;
    1916:	80 91 e9 00 	lds	r24, 0x00E9
    191a:	80 68       	ori	r24, 0x80	; 128
    191c:	80 93 e9 00 	sts	0x00E9, r24
				 // Save temperature measure at current time
				 PIDsampledADC = getNormalizedRingU16(&ringBufADC);
    1920:	80 e6       	ldi	r24, 0x60	; 96
    1922:	90 e0       	ldi	r25, 0x00	; 0
    1924:	ab d5       	rcall	.+2902   	; 0x247c <__data_load_end+0x82a>
    1926:	90 93 f7 00 	sts	0x00F7, r25
    192a:	80 93 f6 00 	sts	0x00F6, r24
    192e:	03 c0       	rjmp	.+6      	; 0x1936 <__vector_9+0x19c>
			 }
			 else
			 {
				 heater_reg_cnt++;
    1930:	8f 5f       	subi	r24, 0xFF	; 255
    1932:	80 93 e8 00 	sts	0x00E8, r24
			 }
		}			 
		
		
		if (heater_cnt == HEATER_REGULATION_PERIODS - 1)
    1936:	80 91 eb 00 	lds	r24, 0x00EB
    193a:	81 33       	cpi	r24, 0x31	; 49
    193c:	39 f4       	brne	.+14     	; 0x194c <__vector_9+0x1b2>
		{
			heater_cnt = 0;
    193e:	10 92 eb 00 	sts	0x00EB, r1
			// Copy new output value
			ctrl_heater_sync = ctrl_heater;
    1942:	80 91 ea 00 	lds	r24, 0x00EA
    1946:	80 93 f3 00 	sts	0x00F3, r24
    194a:	03 c0       	rjmp	.+6      	; 0x1952 <__vector_9+0x1b8>
		}
		else
		{
			heater_cnt++;
    194c:	8f 5f       	subi	r24, 0xFF	; 255
    194e:	80 93 eb 00 	sts	0x00EB, r24
			
			
	}
	

	if ((p_state & STATE_MASK)  != 0x0F)
    1952:	80 91 77 00 	lds	r24, 0x0077
    1956:	98 2f       	mov	r25, r24
    1958:	9f 70       	andi	r25, 0x0F	; 15
    195a:	9f 30       	cpi	r25, 0x0F	; 15
    195c:	19 f0       	breq	.+6      	; 0x1964 <__vector_9+0x1ca>
		p_state++;
    195e:	8f 5f       	subi	r24, 0xFF	; 255
    1960:	80 93 77 00 	sts	0x0077, r24

}	
    1964:	ff 91       	pop	r31
    1966:	ef 91       	pop	r30
    1968:	bf 91       	pop	r27
    196a:	af 91       	pop	r26
    196c:	9f 91       	pop	r25
    196e:	8f 91       	pop	r24
    1970:	7f 91       	pop	r23
    1972:	6f 91       	pop	r22
    1974:	5f 91       	pop	r21
    1976:	4f 91       	pop	r20
    1978:	3f 91       	pop	r19
    197a:	2f 91       	pop	r18
    197c:	0f 90       	pop	r0
    197e:	0f be       	out	0x3f, r0	; 63
    1980:	0f 90       	pop	r0
    1982:	1f 90       	pop	r1
    1984:	18 95       	reti

00001986 <processSoftTimer8b>:
 
 
 
 
 void processSoftTimer8b(SoftTimer8b_t *tmr)
 {
    1986:	fc 01       	movw	r30, r24
	 uint8_t newTimerVal;

	 if (!tmr->Enabled)
    1988:	80 81       	ld	r24, Z
    198a:	80 ff       	sbrs	r24, 0
    198c:	29 c0       	rjmp	.+82     	; 0x19e0 <processSoftTimer8b+0x5a>
		return;
	 
	 tmr->FA_EQ = 0;
	 tmr->FA_GE = 0;
	 tmr->FTop = 0;
    198e:	87 7e       	andi	r24, 0xE7	; 231
    1990:	8f 7d       	andi	r24, 0xDF	; 223
    1992:	80 83       	st	Z, r24
	 
	 if (tmr->Timer >= tmr->Top)
    1994:	81 81       	ldd	r24, Z+1	; 0x01
    1996:	92 81       	ldd	r25, Z+2	; 0x02
    1998:	89 17       	cp	r24, r25
    199a:	58 f0       	brcs	.+22     	; 0x19b2 <processSoftTimer8b+0x2c>
	 {
		 if (tmr->RunOnce)
    199c:	90 81       	ld	r25, Z
    199e:	91 ff       	sbrs	r25, 1
    19a0:	02 c0       	rjmp	.+4      	; 0x19a6 <processSoftTimer8b+0x20>
		 {
			 tmr->Enabled = 0;
    19a2:	9e 7f       	andi	r25, 0xFE	; 254
    19a4:	90 83       	st	Z, r25
		 }
		 tmr->FTop = 1;
    19a6:	90 81       	ld	r25, Z
		 tmr->FOvfl = 1;
    19a8:	90 62       	ori	r25, 0x20	; 32
    19aa:	90 64       	ori	r25, 0x40	; 64
    19ac:	90 83       	st	Z, r25
		 newTimerVal = 0;
    19ae:	20 e0       	ldi	r18, 0x00	; 0
    19b0:	02 c0       	rjmp	.+4      	; 0x19b6 <processSoftTimer8b+0x30>
	 }
	 else
	 {
		 newTimerVal = tmr->Timer + 1;
    19b2:	28 2f       	mov	r18, r24
    19b4:	2f 5f       	subi	r18, 0xFF	; 255
	 }
	 
	 if (tmr->Timer == tmr->CompA)
    19b6:	93 81       	ldd	r25, Z+3	; 0x03
    19b8:	89 13       	cpse	r24, r25
    19ba:	0c c0       	rjmp	.+24     	; 0x19d4 <processSoftTimer8b+0x4e>
	 {
		 tmr->FA_EQ = 1;
    19bc:	80 81       	ld	r24, Z
		 tmr->FA_GE = 1;
    19be:	88 60       	ori	r24, 0x08	; 8
    19c0:	80 61       	ori	r24, 0x10	; 16
		 tmr->FA_TGL = !tmr->FA_TGL;
    19c2:	82 fb       	bst	r24, 2
    19c4:	33 27       	eor	r19, r19
    19c6:	30 f9       	bld	r19, 0
    19c8:	91 e0       	ldi	r25, 0x01	; 1
    19ca:	93 27       	eor	r25, r19
    19cc:	90 fb       	bst	r25, 0
    19ce:	82 f9       	bld	r24, 2
    19d0:	80 83       	st	Z, r24
    19d2:	05 c0       	rjmp	.+10     	; 0x19de <processSoftTimer8b+0x58>
	 }
	 else if (tmr->Timer >= tmr->CompA)
    19d4:	89 17       	cp	r24, r25
    19d6:	18 f0       	brcs	.+6      	; 0x19de <processSoftTimer8b+0x58>
	 {
		 tmr->FA_GE = 1;
    19d8:	80 81       	ld	r24, Z
    19da:	80 61       	ori	r24, 0x10	; 16
    19dc:	80 83       	st	Z, r24
	 }
	 
	 tmr->Timer = newTimerVal; 
    19de:	21 83       	std	Z+1, r18	; 0x01
    19e0:	08 95       	ret

000019e2 <SetBeeperFreq>:
}

// Setup beeper frequency (Hz)
void SetBeeperFreq(uint16_t freq_hz)
{
	uint16_t period_us = 1000000 / freq_hz;
    19e2:	9c 01       	movw	r18, r24
    19e4:	40 e0       	ldi	r20, 0x00	; 0
    19e6:	50 e0       	ldi	r21, 0x00	; 0
    19e8:	60 e4       	ldi	r22, 0x40	; 64
    19ea:	72 e4       	ldi	r23, 0x42	; 66
    19ec:	8f e0       	ldi	r24, 0x0F	; 15
    19ee:	90 e0       	ldi	r25, 0x00	; 0
    19f0:	a8 d0       	rcall	.+336    	; 0x1b42 <__divmodsi4>
	if (period_us & 0xFFF8)
    19f2:	da 01       	movw	r26, r20
    19f4:	c9 01       	movw	r24, r18
    19f6:	88 7f       	andi	r24, 0xF8	; 248
    19f8:	aa 27       	eor	r26, r26
    19fa:	bb 27       	eor	r27, r27
    19fc:	89 2b       	or	r24, r25
    19fe:	59 f0       	breq	.+22     	; 0x1a16 <SetBeeperFreq+0x34>
		OCR1A = (period_us>>3) - 1;
    1a00:	36 95       	lsr	r19
    1a02:	27 95       	ror	r18
    1a04:	36 95       	lsr	r19
    1a06:	27 95       	ror	r18
    1a08:	36 95       	lsr	r19
    1a0a:	27 95       	ror	r18
    1a0c:	21 50       	subi	r18, 0x01	; 1
    1a0e:	31 09       	sbc	r19, r1
    1a10:	3b bd       	out	0x2b, r19	; 43
    1a12:	2a bd       	out	0x2a, r18	; 42
    1a14:	04 c0       	rjmp	.+8      	; 0x1a1e <SetBeeperFreq+0x3c>
	else
		OCR1A = 0x1;
    1a16:	81 e0       	ldi	r24, 0x01	; 1
    1a18:	90 e0       	ldi	r25, 0x00	; 0
    1a1a:	9b bd       	out	0x2b, r25	; 43
    1a1c:	8a bd       	out	0x2a, r24	; 42
	TCNT1 = 0;
    1a1e:	1d bc       	out	0x2d, r1	; 45
    1a20:	1c bc       	out	0x2c, r1	; 44
    1a22:	08 95       	ret

00001a24 <StartBeep>:
}

// Beep for some time in ms
void StartBeep(uint16_t time_ms)
{
	if (sound_enable)
    1a24:	20 91 1a 01 	lds	r18, 0x011A
    1a28:	22 23       	and	r18, r18
    1a2a:	39 f0       	breq	.+14     	; 0x1a3a <StartBeep+0x16>
	{
		beep_cnt = time_ms;
    1a2c:	90 93 f5 00 	sts	0x00F5, r25
    1a30:	80 93 f4 00 	sts	0x00F4, r24
// Enable / disable beeper output
inline void SetBeepOutput(uint8_t val)
{
	if (val)
		// Toggle OCR1A on compare match
		TCCR1A |= (1<<COM1A0);
    1a34:	8f b5       	in	r24, 0x2f	; 47
    1a36:	80 64       	ori	r24, 0x40	; 64
    1a38:	8f bd       	out	0x2f, r24	; 47
    1a3a:	08 95       	ret

00001a3c <__vector_3>:
}



ISR(TIMER2_COMP_vect)
{	
    1a3c:	1f 92       	push	r1
    1a3e:	0f 92       	push	r0
    1a40:	0f b6       	in	r0, 0x3f	; 63
    1a42:	0f 92       	push	r0
    1a44:	11 24       	eor	r1, r1
    1a46:	2f 93       	push	r18
    1a48:	3f 93       	push	r19
    1a4a:	4f 93       	push	r20
    1a4c:	5f 93       	push	r21
    1a4e:	6f 93       	push	r22
    1a50:	7f 93       	push	r23
    1a52:	8f 93       	push	r24
    1a54:	9f 93       	push	r25
    1a56:	af 93       	push	r26
    1a58:	bf 93       	push	r27
    1a5a:	ef 93       	push	r30
    1a5c:	ff 93       	push	r31
	// Manage beeper
	if (beep_cnt)
    1a5e:	80 91 f4 00 	lds	r24, 0x00F4
    1a62:	90 91 f5 00 	lds	r25, 0x00F5
    1a66:	00 97       	sbiw	r24, 0x00	; 0
    1a68:	31 f0       	breq	.+12     	; 0x1a76 <__vector_3+0x3a>
		beep_cnt--;
    1a6a:	01 97       	sbiw	r24, 0x01	; 1
    1a6c:	90 93 f5 00 	sts	0x00F5, r25
    1a70:	80 93 f4 00 	sts	0x00F4, r24
    1a74:	03 c0       	rjmp	.+6      	; 0x1a7c <__vector_3+0x40>
	if (val)
		// Toggle OCR1A on compare match
		TCCR1A |= (1<<COM1A0);
	else
		// Disable OCR1A output
		TCCR1A &= ~(1<<COM1A0 | 1<<COM1A1);
    1a76:	8f b5       	in	r24, 0x2f	; 47
    1a78:	8f 73       	andi	r24, 0x3F	; 63
    1a7a:	8f bd       	out	0x2f, r24	; 47
		beep_cnt--;
	else
		SetBeepOutput(0);	// done
	
	// Manage LED indicator
	processLedIndicator();
    1a7c:	ac d7       	rcall	.+3928   	; 0x29d6 <__data_load_end+0xd84>
	
	// Process menu update timer
	processSoftTimer8b(&menuUpdateTimer);	
    1a7e:	88 e7       	ldi	r24, 0x78	; 120
    1a80:	90 e0       	ldi	r25, 0x00	; 0
    1a82:	81 df       	rcall	.-254    	; 0x1986 <processSoftTimer8b>
	
}
    1a84:	ff 91       	pop	r31
    1a86:	ef 91       	pop	r30
    1a88:	bf 91       	pop	r27
    1a8a:	af 91       	pop	r26
    1a8c:	9f 91       	pop	r25
    1a8e:	8f 91       	pop	r24
    1a90:	7f 91       	pop	r23
    1a92:	6f 91       	pop	r22
    1a94:	5f 91       	pop	r21
    1a96:	4f 91       	pop	r20
    1a98:	3f 91       	pop	r19
    1a9a:	2f 91       	pop	r18
    1a9c:	0f 90       	pop	r0
    1a9e:	0f be       	out	0x3f, r0	; 63
    1aa0:	0f 90       	pop	r0
    1aa2:	1f 90       	pop	r1
    1aa4:	18 95       	reti

00001aa6 <USART_send>:



void USART_send( uint8_t data )
{
	UCSRA |= (1<<TXC);                 // Clear flag
    1aa6:	5e 9a       	sbi	0x0b, 6	; 11
	UDR = data;
    1aa8:	8c b9       	out	0x0c, r24	; 12
	while ( !(UCSRA & (1<<TXC)) );  // Wait
    1aaa:	5e 9b       	sbis	0x0b, 6	; 11
    1aac:	fe cf       	rjmp	.-4      	; 0x1aaa <USART_send+0x4>
}
    1aae:	08 95       	ret

00001ab0 <USART_sendstr>:


void USART_sendstr(char* str)
{
    1ab0:	1f 93       	push	r17
    1ab2:	cf 93       	push	r28
    1ab4:	df 93       	push	r29
    1ab6:	ec 01       	movw	r28, r24
	uint8_t i = 0;
	while (str[i])
    1ab8:	88 81       	ld	r24, Y
    1aba:	88 23       	and	r24, r24
    1abc:	49 f0       	breq	.+18     	; 0x1ad0 <USART_sendstr+0x20>
}


void USART_sendstr(char* str)
{
	uint8_t i = 0;
    1abe:	10 e0       	ldi	r17, 0x00	; 0
	while (str[i])
	{
		USART_send(str[i++]);
    1ac0:	1f 5f       	subi	r17, 0xFF	; 255
    1ac2:	f1 df       	rcall	.-30     	; 0x1aa6 <USART_send>


void USART_sendstr(char* str)
{
	uint8_t i = 0;
	while (str[i])
    1ac4:	fe 01       	movw	r30, r28
    1ac6:	e1 0f       	add	r30, r17
    1ac8:	f1 1d       	adc	r31, r1
    1aca:	80 81       	ld	r24, Z
    1acc:	81 11       	cpse	r24, r1
    1ace:	f8 cf       	rjmp	.-16     	; 0x1ac0 <USART_sendstr+0x10>
	{
		USART_send(str[i++]);
	}
}
    1ad0:	df 91       	pop	r29
    1ad2:	cf 91       	pop	r28
    1ad4:	1f 91       	pop	r17
    1ad6:	08 95       	ret

00001ad8 <__divmodhi4>:
    1ad8:	97 fb       	bst	r25, 7
    1ada:	07 2e       	mov	r0, r23
    1adc:	16 f4       	brtc	.+4      	; 0x1ae2 <__divmodhi4+0xa>
    1ade:	00 94       	com	r0
    1ae0:	06 d0       	rcall	.+12     	; 0x1aee <__divmodhi4_neg1>
    1ae2:	77 fd       	sbrc	r23, 7
    1ae4:	08 d0       	rcall	.+16     	; 0x1af6 <__divmodhi4_neg2>
    1ae6:	64 d0       	rcall	.+200    	; 0x1bb0 <__udivmodhi4>
    1ae8:	07 fc       	sbrc	r0, 7
    1aea:	05 d0       	rcall	.+10     	; 0x1af6 <__divmodhi4_neg2>
    1aec:	3e f4       	brtc	.+14     	; 0x1afc <__divmodhi4_exit>

00001aee <__divmodhi4_neg1>:
    1aee:	90 95       	com	r25
    1af0:	81 95       	neg	r24
    1af2:	9f 4f       	sbci	r25, 0xFF	; 255
    1af4:	08 95       	ret

00001af6 <__divmodhi4_neg2>:
    1af6:	70 95       	com	r23
    1af8:	61 95       	neg	r22
    1afa:	7f 4f       	sbci	r23, 0xFF	; 255

00001afc <__divmodhi4_exit>:
    1afc:	08 95       	ret

00001afe <__udivmodsi4>:
    1afe:	a1 e2       	ldi	r26, 0x21	; 33
    1b00:	1a 2e       	mov	r1, r26
    1b02:	aa 1b       	sub	r26, r26
    1b04:	bb 1b       	sub	r27, r27
    1b06:	fd 01       	movw	r30, r26
    1b08:	0d c0       	rjmp	.+26     	; 0x1b24 <__udivmodsi4_ep>

00001b0a <__udivmodsi4_loop>:
    1b0a:	aa 1f       	adc	r26, r26
    1b0c:	bb 1f       	adc	r27, r27
    1b0e:	ee 1f       	adc	r30, r30
    1b10:	ff 1f       	adc	r31, r31
    1b12:	a2 17       	cp	r26, r18
    1b14:	b3 07       	cpc	r27, r19
    1b16:	e4 07       	cpc	r30, r20
    1b18:	f5 07       	cpc	r31, r21
    1b1a:	20 f0       	brcs	.+8      	; 0x1b24 <__udivmodsi4_ep>
    1b1c:	a2 1b       	sub	r26, r18
    1b1e:	b3 0b       	sbc	r27, r19
    1b20:	e4 0b       	sbc	r30, r20
    1b22:	f5 0b       	sbc	r31, r21

00001b24 <__udivmodsi4_ep>:
    1b24:	66 1f       	adc	r22, r22
    1b26:	77 1f       	adc	r23, r23
    1b28:	88 1f       	adc	r24, r24
    1b2a:	99 1f       	adc	r25, r25
    1b2c:	1a 94       	dec	r1
    1b2e:	69 f7       	brne	.-38     	; 0x1b0a <__udivmodsi4_loop>
    1b30:	60 95       	com	r22
    1b32:	70 95       	com	r23
    1b34:	80 95       	com	r24
    1b36:	90 95       	com	r25
    1b38:	9b 01       	movw	r18, r22
    1b3a:	ac 01       	movw	r20, r24
    1b3c:	bd 01       	movw	r22, r26
    1b3e:	cf 01       	movw	r24, r30
    1b40:	08 95       	ret

00001b42 <__divmodsi4>:
    1b42:	05 2e       	mov	r0, r21
    1b44:	97 fb       	bst	r25, 7
    1b46:	16 f4       	brtc	.+4      	; 0x1b4c <__divmodsi4+0xa>
    1b48:	00 94       	com	r0
    1b4a:	06 d0       	rcall	.+12     	; 0x1b58 <__divmodsi4_neg1>
    1b4c:	57 fd       	sbrc	r21, 7
    1b4e:	0c d0       	rcall	.+24     	; 0x1b68 <__divmodsi4_neg2>
    1b50:	d6 df       	rcall	.-84     	; 0x1afe <__udivmodsi4>
    1b52:	07 fc       	sbrc	r0, 7
    1b54:	09 d0       	rcall	.+18     	; 0x1b68 <__divmodsi4_neg2>
    1b56:	7e f4       	brtc	.+30     	; 0x1b76 <__divmodsi4_exit>

00001b58 <__divmodsi4_neg1>:
    1b58:	90 95       	com	r25
    1b5a:	80 95       	com	r24
    1b5c:	70 95       	com	r23
    1b5e:	61 95       	neg	r22
    1b60:	7f 4f       	sbci	r23, 0xFF	; 255
    1b62:	8f 4f       	sbci	r24, 0xFF	; 255
    1b64:	9f 4f       	sbci	r25, 0xFF	; 255
    1b66:	08 95       	ret

00001b68 <__divmodsi4_neg2>:
    1b68:	50 95       	com	r21
    1b6a:	40 95       	com	r20
    1b6c:	30 95       	com	r19
    1b6e:	21 95       	neg	r18
    1b70:	3f 4f       	sbci	r19, 0xFF	; 255
    1b72:	4f 4f       	sbci	r20, 0xFF	; 255
    1b74:	5f 4f       	sbci	r21, 0xFF	; 255

00001b76 <__divmodsi4_exit>:
    1b76:	08 95       	ret

00001b78 <__umulhisi3>:
    1b78:	a2 9f       	mul	r26, r18
    1b7a:	b0 01       	movw	r22, r0
    1b7c:	b3 9f       	mul	r27, r19
    1b7e:	c0 01       	movw	r24, r0
    1b80:	a3 9f       	mul	r26, r19
    1b82:	01 d0       	rcall	.+2      	; 0x1b86 <__umulhisi3+0xe>
    1b84:	b2 9f       	mul	r27, r18
    1b86:	70 0d       	add	r23, r0
    1b88:	81 1d       	adc	r24, r1
    1b8a:	11 24       	eor	r1, r1
    1b8c:	91 1d       	adc	r25, r1
    1b8e:	08 95       	ret

00001b90 <__usmulhisi3>:
    1b90:	f3 df       	rcall	.-26     	; 0x1b78 <__umulhisi3>

00001b92 <__usmulhisi3_tail>:
    1b92:	b7 ff       	sbrs	r27, 7
    1b94:	08 95       	ret
    1b96:	82 1b       	sub	r24, r18
    1b98:	93 0b       	sbc	r25, r19
    1b9a:	08 95       	ret

00001b9c <__muluhisi3>:
    1b9c:	ed df       	rcall	.-38     	; 0x1b78 <__umulhisi3>
    1b9e:	a5 9f       	mul	r26, r21
    1ba0:	90 0d       	add	r25, r0
    1ba2:	b4 9f       	mul	r27, r20
    1ba4:	90 0d       	add	r25, r0
    1ba6:	a4 9f       	mul	r26, r20
    1ba8:	80 0d       	add	r24, r0
    1baa:	91 1d       	adc	r25, r1
    1bac:	11 24       	eor	r1, r1
    1bae:	08 95       	ret

00001bb0 <__udivmodhi4>:
    1bb0:	aa 1b       	sub	r26, r26
    1bb2:	bb 1b       	sub	r27, r27
    1bb4:	51 e1       	ldi	r21, 0x11	; 17
    1bb6:	07 c0       	rjmp	.+14     	; 0x1bc6 <__udivmodhi4_ep>

00001bb8 <__udivmodhi4_loop>:
    1bb8:	aa 1f       	adc	r26, r26
    1bba:	bb 1f       	adc	r27, r27
    1bbc:	a6 17       	cp	r26, r22
    1bbe:	b7 07       	cpc	r27, r23
    1bc0:	10 f0       	brcs	.+4      	; 0x1bc6 <__udivmodhi4_ep>
    1bc2:	a6 1b       	sub	r26, r22
    1bc4:	b7 0b       	sbc	r27, r23

00001bc6 <__udivmodhi4_ep>:
    1bc6:	88 1f       	adc	r24, r24
    1bc8:	99 1f       	adc	r25, r25
    1bca:	5a 95       	dec	r21
    1bcc:	a9 f7       	brne	.-22     	; 0x1bb8 <__udivmodhi4_loop>
    1bce:	80 95       	com	r24
    1bd0:	90 95       	com	r25
    1bd2:	bc 01       	movw	r22, r24
    1bd4:	cd 01       	movw	r24, r26
    1bd6:	08 95       	ret

00001bd8 <__eerd_block_m8>:
    1bd8:	dc 01       	movw	r26, r24
    1bda:	cb 01       	movw	r24, r22

00001bdc <__eerd_blraw_m8>:
    1bdc:	fc 01       	movw	r30, r24
    1bde:	e1 99       	sbic	0x1c, 1	; 28
    1be0:	fe cf       	rjmp	.-4      	; 0x1bde <__eerd_blraw_m8+0x2>
    1be2:	06 c0       	rjmp	.+12     	; 0x1bf0 <__eerd_blraw_m8+0x14>
    1be4:	ff bb       	out	0x1f, r31	; 31
    1be6:	ee bb       	out	0x1e, r30	; 30
    1be8:	e0 9a       	sbi	0x1c, 0	; 28
    1bea:	31 96       	adiw	r30, 0x01	; 1
    1bec:	0d b2       	in	r0, 0x1d	; 29
    1bee:	0d 92       	st	X+, r0
    1bf0:	41 50       	subi	r20, 0x01	; 1
    1bf2:	50 40       	sbci	r21, 0x00	; 0
    1bf4:	b8 f7       	brcc	.-18     	; 0x1be4 <__eerd_blraw_m8+0x8>
    1bf6:	08 95       	ret

00001bf8 <_exit>:
    1bf8:	f8 94       	cli

00001bfa <__stop_program>:
    1bfa:	ff cf       	rjmp	.-2      	; 0x1bfa <__stop_program>
