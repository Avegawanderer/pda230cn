
pid1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001c24  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000008c  00800060  00001c24  00001cd8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000f6  008000ec  008000ec  00001d64  2**0
                  ALLOC
  3 .eeprom       00000070  00810000  00810000  00001d64  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         00000ad4  00000000  00000000  00001dd4  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      00000269  00000000  00000000  000028a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      0000002f  00000000  00000000  00002b11  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000450  00000000  00000000  00002b40  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   000046c9  00000000  00000000  00002f90  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00001634  00000000  00000000  00007659  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00001e2f  00000000  00000000  00008c8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  000009b4  00000000  00000000  0000aabc  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0000128d  00000000  00000000  0000b470  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00001cdf  00000000  00000000  0000c6fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000370  00000000  00000000  0000e3dc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	ce c0       	rjmp	.+412    	; 0x19e <__ctors_end>
       2:	e8 c0       	rjmp	.+464    	; 0x1d4 <__bad_interrupt>
       4:	e7 c0       	rjmp	.+462    	; 0x1d4 <__bad_interrupt>
       6:	ab cc       	rjmp	.-1706   	; 0xfffff95e <__eeprom_end+0xff7ef8ee>
       8:	e5 c0       	rjmp	.+458    	; 0x1d4 <__bad_interrupt>
       a:	e4 c0       	rjmp	.+456    	; 0x1d4 <__bad_interrupt>
       c:	e3 c0       	rjmp	.+454    	; 0x1d4 <__bad_interrupt>
       e:	e2 c0       	rjmp	.+452    	; 0x1d4 <__bad_interrupt>
      10:	e1 c0       	rjmp	.+450    	; 0x1d4 <__bad_interrupt>
      12:	5c cb       	rjmp	.-2376   	; 0xfffff6cc <__eeprom_end+0xff7ef65c>
      14:	df c0       	rjmp	.+446    	; 0x1d4 <__bad_interrupt>
      16:	de c0       	rjmp	.+444    	; 0x1d4 <__bad_interrupt>
      18:	dd c0       	rjmp	.+442    	; 0x1d4 <__bad_interrupt>
      1a:	dc c0       	rjmp	.+440    	; 0x1d4 <__bad_interrupt>
      1c:	ed c1       	rjmp	.+986    	; 0x3f8 <__vector_14>
      1e:	da c0       	rjmp	.+436    	; 0x1d4 <__bad_interrupt>
      20:	17 cb       	rjmp	.-2514   	; 0xfffff650 <__eeprom_end+0xff7ef5e0>
      22:	d8 c0       	rjmp	.+432    	; 0x1d4 <__bad_interrupt>
      24:	d7 c0       	rjmp	.+430    	; 0x1d4 <__bad_interrupt>

00000026 <pmCalibrationDefaults>:
      26:	18 82 1c 03 88 06                                   ......

0000002c <pmGlobalDefaults>:
      2c:	32 0a 01 1e                                         2...

00000030 <led_encode_table>:
      30:	30 3f 4f 3f 31 06 32 5b 33 4f 34 66 53 6d 35 6d     0?O?1.2[3O4fSm5m
      40:	36 7d 37 07 38 7f 39 6f 2e 80 2c 80 2d 40 5f 08     6}7.8.9o..,.-@_.
      50:	20 00 b0 63 41 77 43 39 46 71 4e 54 44 5e 50 73      ..cAwC9FqNTD^Ps
      60:	45 79 55 3e 47 3d 52 50                             EyU>G=RP

00000068 <ms_calibDo>:
      68:	20 20 20 00                                            .

0000006c <ms_autoPoffDo>:
      6c:	4f 46 46 20 20 20 00                                OFF   .

00000073 <ms_soundEnDo>:
      73:	53 4e 44 20 20 20 00                                SND   .

0000007a <ms_rollDo>:
      7a:	20 20 20 20 20 20 00                                      .

00000081 <ms_realTempDo>:
      81:	20 20 20 20 b0 43 00                                    .C.

00000088 <menuFunctionSet>:
      88:	01 42 07 44 07 2a 06 03 22 06 10 07 a5 05 02 0d     .B.D.*..".......
      98:	07 c2 06 1b 06 05 15 06 93 06 00 00 0b b3 05 93     ................
      a8:	06 bb 05 04 0f 06 33 06 00 00 0c b3 05 33 06 c9     ......3......3..
      b8:	05 06 03 06 67 06 00 00 09 b3 05 67 06 db 05 07     ....g......g....
      c8:	f7 05 67 06 00 00 0a b3 05 67 06 db 05 08 2c 06     ..g......g....,.
      d8:	e9 05 00 00 0d 2c 06 e9 05 00 00 0e ed 05 e2 05     .....,..........
      e8:	d7 05                                               ..

000000ea <menuJumpSet>:
      ea:	01 c0 00 03 8a 01 00 01 02 40 01 00 02 05 0a 02     .........@......
      fa:	00 01 01 80 02 00 02 05 0a 03 00 81 01 40 03 00     .............@..
     10a:	02 01 60 05 00 82 01 00 05 80 00 04 4a 05 40 00     ..`.........J.@.
     11a:	07 8a 05 00 01 0b 0a 0b 00 81 05 0a 0b 00 02 05     ................
     12a:	2a 04 00 82 01 00 04 80 00 06 4a 04 40 00 05 8a     *.........J.@...
     13a:	04 00 01 0c 0a 0c 00 81 04 0a 0c 00 02 04 2a 06     ..............*.
     14a:	00 82 01 00 06 80 00 07 4a 06 40 00 04 8a 06 00     ........J.@.....
     15a:	01 09 00 07 00 82 01 00 07 80 00 05 4a 07 40 00     ............J.@.
     16a:	06 8a 07 00 01 0a 00 09 00 02 06 0a 09 00 01 08     ................
     17a:	05 08 00 83 01 00 0a 00 02 07 0a 0a 00 01 0d 05     ................
     18a:	0d 00 83 01 00 01 00 40 0e 00 02 00 40 0e 00 0e     .......@....@...
     19a:	d5 03 01 00                                         ....

0000019e <__ctors_end>:
     19e:	11 24       	eor	r1, r1
     1a0:	1f be       	out	0x3f, r1	; 63
     1a2:	cf e5       	ldi	r28, 0x5F	; 95
     1a4:	d4 e0       	ldi	r29, 0x04	; 4
     1a6:	de bf       	out	0x3e, r29	; 62
     1a8:	cd bf       	out	0x3d, r28	; 61

000001aa <__do_copy_data>:
     1aa:	10 e0       	ldi	r17, 0x00	; 0
     1ac:	a0 e6       	ldi	r26, 0x60	; 96
     1ae:	b0 e0       	ldi	r27, 0x00	; 0
     1b0:	e4 e2       	ldi	r30, 0x24	; 36
     1b2:	fc e1       	ldi	r31, 0x1C	; 28
     1b4:	02 c0       	rjmp	.+4      	; 0x1ba <__do_copy_data+0x10>
     1b6:	05 90       	lpm	r0, Z+
     1b8:	0d 92       	st	X+, r0
     1ba:	ac 3e       	cpi	r26, 0xEC	; 236
     1bc:	b1 07       	cpc	r27, r17
     1be:	d9 f7       	brne	.-10     	; 0x1b6 <__do_copy_data+0xc>

000001c0 <__do_clear_bss>:
     1c0:	21 e0       	ldi	r18, 0x01	; 1
     1c2:	ac ee       	ldi	r26, 0xEC	; 236
     1c4:	b0 e0       	ldi	r27, 0x00	; 0
     1c6:	01 c0       	rjmp	.+2      	; 0x1ca <.do_clear_bss_start>

000001c8 <.do_clear_bss_loop>:
     1c8:	1d 92       	st	X+, r1

000001ca <.do_clear_bss_start>:
     1ca:	a2 3e       	cpi	r26, 0xE2	; 226
     1cc:	b2 07       	cpc	r27, r18
     1ce:	e1 f7       	brne	.-8      	; 0x1c8 <.do_clear_bss_loop>
     1d0:	9b d7       	rcall	.+3894   	; 0x1108 <main>
     1d2:	26 cd       	rjmp	.-1460   	; 0xfffffc20 <__eeprom_end+0xff7efbb0>

000001d4 <__bad_interrupt>:
     1d4:	15 cf       	rjmp	.-470    	; 0x0 <__vectors>

000001d6 <conv_ADC_to_Celsius>:
//---------------------------------------------//
//---------------------------------------------//


int16_t conv_ADC_to_Celsius(uint16_t adc_value)
{	
     1d6:	0f 93       	push	r16
     1d8:	1f 93       	push	r17
	//return (int16_t)(((int32_t)adc_value * k_norm + offset_norm) / (COEFF_SCALE));					// Truncate
	return (int16_t)(((int32_t)adc_value * k_norm + offset_norm + (COEFF_SCALE>>1)) / (COEFF_SCALE));	// Round
     1da:	20 91 ec 00 	lds	r18, 0x00EC
     1de:	30 91 ed 00 	lds	r19, 0x00ED
     1e2:	40 91 ee 00 	lds	r20, 0x00EE
     1e6:	50 91 ef 00 	lds	r21, 0x00EF
     1ea:	dc 01       	movw	r26, r24
     1ec:	ac dc       	rcall	.-1704   	; 0xfffffb46 <__eeprom_end+0xff7efad6>
     1ee:	00 91 f0 00 	lds	r16, 0x00F0
     1f2:	10 91 f1 00 	lds	r17, 0x00F1
     1f6:	20 91 f2 00 	lds	r18, 0x00F2
     1fa:	30 91 f3 00 	lds	r19, 0x00F3
     1fe:	60 0f       	add	r22, r16
     200:	71 1f       	adc	r23, r17
     202:	82 1f       	adc	r24, r18
     204:	93 1f       	adc	r25, r19
     206:	68 57       	subi	r22, 0x78	; 120
     208:	7c 4e       	sbci	r23, 0xEC	; 236
     20a:	8f 4f       	sbci	r24, 0xFF	; 255
     20c:	9f 4f       	sbci	r25, 0xFF	; 255
     20e:	20 e1       	ldi	r18, 0x10	; 16
     210:	37 e2       	ldi	r19, 0x27	; 39
     212:	40 e0       	ldi	r20, 0x00	; 0
     214:	50 e0       	ldi	r21, 0x00	; 0
     216:	64 dc       	rcall	.-1848   	; 0xfffffae0 <__eeprom_end+0xff7efa70>
}
     218:	c9 01       	movw	r24, r18
     21a:	1f 91       	pop	r17
     21c:	0f 91       	pop	r16
     21e:	08 95       	ret

00000220 <conv_Celsius_to_ADC>:

uint16_t conv_Celsius_to_ADC(int16_t degree_value)
{
     220:	cf 92       	push	r12
     222:	df 92       	push	r13
     224:	ef 92       	push	r14
     226:	ff 92       	push	r15
     228:	0f 93       	push	r16
     22a:	1f 93       	push	r17
	//degree_value += 1;
	//return (uint16_t)(((int32_t)degree_value * COEFF_SCALE - offset_norm) / k_norm);				// Truncate
	return (uint16_t)(((int32_t)degree_value * COEFF_SCALE - offset_norm + (k_norm>>1)) / k_norm);	// Round
     22c:	c0 90 ec 00 	lds	r12, 0x00EC
     230:	d0 90 ed 00 	lds	r13, 0x00ED
     234:	e0 90 ee 00 	lds	r14, 0x00EE
     238:	f0 90 ef 00 	lds	r15, 0x00EF
     23c:	20 e1       	ldi	r18, 0x10	; 16
     23e:	37 e2       	ldi	r19, 0x27	; 39
     240:	dc 01       	movw	r26, r24
     242:	7b dc       	rcall	.-1802   	; 0xfffffb3a <__eeprom_end+0xff7efaca>
     244:	00 91 f0 00 	lds	r16, 0x00F0
     248:	10 91 f1 00 	lds	r17, 0x00F1
     24c:	20 91 f2 00 	lds	r18, 0x00F2
     250:	30 91 f3 00 	lds	r19, 0x00F3
     254:	60 1b       	sub	r22, r16
     256:	71 0b       	sbc	r23, r17
     258:	82 0b       	sbc	r24, r18
     25a:	93 0b       	sbc	r25, r19
     25c:	97 01       	movw	r18, r14
     25e:	86 01       	movw	r16, r12
     260:	35 95       	asr	r19
     262:	27 95       	ror	r18
     264:	17 95       	ror	r17
     266:	07 95       	ror	r16
     268:	60 0f       	add	r22, r16
     26a:	71 1f       	adc	r23, r17
     26c:	82 1f       	adc	r24, r18
     26e:	93 1f       	adc	r25, r19
     270:	a7 01       	movw	r20, r14
     272:	96 01       	movw	r18, r12
     274:	35 dc       	rcall	.-1942   	; 0xfffffae0 <__eeprom_end+0xff7efa70>
}
     276:	c9 01       	movw	r24, r18
     278:	1f 91       	pop	r17
     27a:	0f 91       	pop	r16
     27c:	ff 90       	pop	r15
     27e:	ef 90       	pop	r14
     280:	df 90       	pop	r13
     282:	cf 90       	pop	r12
     284:	08 95       	ret

00000286 <calculateCoeffs>:

void calculateCoeffs(void)
{
     286:	8f 92       	push	r8
     288:	9f 92       	push	r9
     28a:	af 92       	push	r10
     28c:	bf 92       	push	r11
     28e:	cf 92       	push	r12
     290:	df 92       	push	r13
     292:	ef 92       	push	r14
     294:	ff 92       	push	r15
     296:	cf 93       	push	r28
     298:	df 93       	push	r29
	//k_norm = ((int32_t)(cp.cpoint2 - cp.cpoint1) * COEFF_SCALE) / ((int32_t)(cp.cpoint2_adc - cp.cpoint1_adc));	// Truncate
	int16_t temp = cp.cpoint2_adc - cp.cpoint1_adc;
     29a:	c0 91 b1 01 	lds	r28, 0x01B1
     29e:	d0 91 b2 01 	lds	r29, 0x01B2
     2a2:	40 91 b3 01 	lds	r20, 0x01B3
     2a6:	50 91 b4 01 	lds	r21, 0x01B4
     2aa:	4c 1b       	sub	r20, r28
     2ac:	5d 0b       	sbc	r21, r29
	k_norm = ((int32_t)(cp.cpoint2 - cp.cpoint1) * COEFF_SCALE + (int32_t)(temp>>1)) / ((int32_t)temp);				// Round
     2ae:	f0 90 af 01 	lds	r15, 0x01AF
     2b2:	a0 91 b0 01 	lds	r26, 0x01B0
     2b6:	b0 e0       	ldi	r27, 0x00	; 0
     2b8:	af 19       	sub	r26, r15
     2ba:	b1 09       	sbc	r27, r1
     2bc:	20 e1       	ldi	r18, 0x10	; 16
     2be:	37 e2       	ldi	r19, 0x27	; 39
     2c0:	3c dc       	rcall	.-1928   	; 0xfffffb3a <__eeprom_end+0xff7efaca>
     2c2:	4a 01       	movw	r8, r20
     2c4:	95 94       	asr	r9
     2c6:	87 94       	ror	r8
     2c8:	aa 24       	eor	r10, r10
     2ca:	97 fc       	sbrc	r9, 7
     2cc:	a0 94       	com	r10
     2ce:	ba 2c       	mov	r11, r10
     2d0:	68 0d       	add	r22, r8
     2d2:	79 1d       	adc	r23, r9
     2d4:	8a 1d       	adc	r24, r10
     2d6:	9b 1d       	adc	r25, r11
     2d8:	9a 01       	movw	r18, r20
     2da:	44 27       	eor	r20, r20
     2dc:	37 fd       	sbrc	r19, 7
     2de:	40 95       	com	r20
     2e0:	54 2f       	mov	r21, r20
     2e2:	fe db       	rcall	.-2052   	; 0xfffffae0 <__eeprom_end+0xff7efa70>
     2e4:	49 01       	movw	r8, r18
     2e6:	5a 01       	movw	r10, r20
     2e8:	20 93 ec 00 	sts	0x00EC, r18
     2ec:	30 93 ed 00 	sts	0x00ED, r19
     2f0:	40 93 ee 00 	sts	0x00EE, r20
     2f4:	50 93 ef 00 	sts	0x00EF, r21
	offset_norm = (int32_t)cp.cpoint1 * COEFF_SCALE - (int32_t)cp.cpoint1_adc * k_norm;
     2f8:	2f 2d       	mov	r18, r15
     2fa:	30 e0       	ldi	r19, 0x00	; 0
     2fc:	a0 e1       	ldi	r26, 0x10	; 16
     2fe:	b7 e2       	ldi	r27, 0x27	; 39
     300:	10 dc       	rcall	.-2016   	; 0xfffffb22 <__eeprom_end+0xff7efab2>
     302:	6b 01       	movw	r12, r22
     304:	7c 01       	movw	r14, r24
     306:	de 01       	movw	r26, r28
     308:	a5 01       	movw	r20, r10
     30a:	94 01       	movw	r18, r8
     30c:	1c dc       	rcall	.-1992   	; 0xfffffb46 <__eeprom_end+0xff7efad6>
     30e:	c6 1a       	sub	r12, r22
     310:	d7 0a       	sbc	r13, r23
     312:	e8 0a       	sbc	r14, r24
     314:	f9 0a       	sbc	r15, r25
     316:	c0 92 f0 00 	sts	0x00F0, r12
     31a:	d0 92 f1 00 	sts	0x00F1, r13
     31e:	e0 92 f2 00 	sts	0x00F2, r14
     322:	f0 92 f3 00 	sts	0x00F3, r15
}
     326:	df 91       	pop	r29
     328:	cf 91       	pop	r28
     32a:	ff 90       	pop	r15
     32c:	ef 90       	pop	r14
     32e:	df 90       	pop	r13
     330:	cf 90       	pop	r12
     332:	bf 90       	pop	r11
     334:	af 90       	pop	r10
     336:	9f 90       	pop	r9
     338:	8f 90       	pop	r8
     33a:	08 95       	ret

0000033c <update_normalized_adc>:
	uint8_t i;
	uint16_t adc_raw_summ = 0;
	uint16_t adc_oversampled;
	
	// Disable interrupts from ADC - to save data integrity
	ADCSRA = (1<<ADEN | 1<<ADPS2 | 1<<ADPS1 | 1<<ADPS0);
     33c:	87 e8       	ldi	r24, 0x87	; 135
     33e:	86 b9       	out	0x06, r24	; 6
     340:	e4 ef       	ldi	r30, 0xF4	; 244
     342:	f0 e0       	ldi	r31, 0x00	; 0
// 	simple ADCSRA write with ADIE bit set or cleared is used instead.

void update_normalized_adc()
{
	uint8_t i;
	uint16_t adc_raw_summ = 0;
     344:	80 e0       	ldi	r24, 0x00	; 0
     346:	90 e0       	ldi	r25, 0x00	; 0
	// Disable interrupts from ADC - to save data integrity
	ADCSRA = (1<<ADEN | 1<<ADPS2 | 1<<ADPS1 | 1<<ADPS0);
	
	// Get normalized mean window summ
	for (i=0;i<ADC_BUFFER_LENGTH;i++)
		adc_raw_summ += raw_adc_buffer[i];
     348:	21 91       	ld	r18, Z+
     34a:	31 91       	ld	r19, Z+
     34c:	82 0f       	add	r24, r18
     34e:	93 1f       	adc	r25, r19
	
	// Disable interrupts from ADC - to save data integrity
	ADCSRA = (1<<ADEN | 1<<ADPS2 | 1<<ADPS1 | 1<<ADPS0);
	
	// Get normalized mean window summ
	for (i=0;i<ADC_BUFFER_LENGTH;i++)
     350:	21 e0       	ldi	r18, 0x01	; 1
     352:	e4 33       	cpi	r30, 0x34	; 52
     354:	f2 07       	cpc	r31, r18
     356:	c1 f7       	brne	.-16     	; 0x348 <update_normalized_adc+0xc>
		adc_raw_summ += raw_adc_buffer[i];
	
	// Enable interrupts from ADC
	ADCSRA = (1<<ADEN | 1<<ADIE | 1<<ADPS2 | 1<<ADPS1 | 1<<ADPS0);
     358:	2f e8       	ldi	r18, 0x8F	; 143
     35a:	26 b9       	out	0x06, r18	; 6
	
	adc_normalized = adc_raw_summ >> 5;		// ADC_BUFFER_LENGTH = 32 !
     35c:	9c 01       	movw	r18, r24
     35e:	f5 e0       	ldi	r31, 0x05	; 5
     360:	36 95       	lsr	r19
     362:	27 95       	ror	r18
     364:	fa 95       	dec	r31
     366:	e1 f7       	brne	.-8      	; 0x360 <update_normalized_adc+0x24>
     368:	30 93 a6 01 	sts	0x01A6, r19
     36c:	20 93 a5 01 	sts	0x01A5, r18
	adc_oversampled = adc_raw_summ >> 3;	// adc_oversampled is 4 times greater than adc_normalized
	// Filter
	adc_filtered = fir_i16_i8(adc_oversampled, filter_buffer, &fir_filter_rect);	
     370:	40 e6       	ldi	r20, 0x60	; 96
     372:	50 e0       	ldi	r21, 0x00	; 0
     374:	64 e3       	ldi	r22, 0x34	; 52
     376:	71 e0       	ldi	r23, 0x01	; 1
     378:	a3 e0       	ldi	r26, 0x03	; 3
     37a:	96 95       	lsr	r25
     37c:	87 95       	ror	r24
     37e:	aa 95       	dec	r26
     380:	e1 f7       	brne	.-8      	; 0x37a <update_normalized_adc+0x3e>
     382:	39 d2       	rcall	.+1138   	; 0x7f6 <fir_i16_i8>
     384:	90 93 a4 01 	sts	0x01A4, r25
     388:	80 93 a3 01 	sts	0x01A3, r24
	// Check sensor
	adc_status = 0;
     38c:	10 92 a7 01 	sts	0x01A7, r1
	if (adc_normalized < ADC_LOW_CORRECT)
     390:	80 91 a5 01 	lds	r24, 0x01A5
     394:	90 91 a6 01 	lds	r25, 0x01A6
     398:	82 33       	cpi	r24, 0x32	; 50
     39a:	91 05       	cpc	r25, r1
     39c:	10 f4       	brcc	.+4      	; 0x3a2 <update_normalized_adc+0x66>
		adc_status |= SENSOR_ERROR_NO_PRESENT;
     39e:	81 e0       	ldi	r24, 0x01	; 1
     3a0:	04 c0       	rjmp	.+8      	; 0x3aa <update_normalized_adc+0x6e>
	else if (adc_normalized > ADC_HIGH_CORRECT)
     3a2:	89 3e       	cpi	r24, 0xE9	; 233
     3a4:	93 40       	sbci	r25, 0x03	; 3
     3a6:	18 f0       	brcs	.+6      	; 0x3ae <update_normalized_adc+0x72>
		adc_status |= SENSOR_ERROR_SHORTED;
     3a8:	82 e0       	ldi	r24, 0x02	; 2
     3aa:	80 93 a7 01 	sts	0x01A7, r24
     3ae:	08 95       	ret

000003b0 <update_Celsius>:
}

void update_Celsius(void)
{
	// Convert to Celsius degree
	adc_celsius = conv_ADC_to_Celsius(adc_filtered);
     3b0:	80 91 a3 01 	lds	r24, 0x01A3
     3b4:	90 91 a4 01 	lds	r25, 0x01A4
     3b8:	0e df       	rcall	.-484    	; 0x1d6 <conv_ADC_to_Celsius>
     3ba:	90 93 a9 01 	sts	0x01A9, r25
     3be:	80 93 a8 01 	sts	0x01A8, r24
     3c2:	08 95       	ret

000003c4 <update_CalibrationPoint>:
}

void update_CalibrationPoint(uint8_t point_number, uint8_t new_val_celsius)
{
	if (point_number == 1)
     3c4:	81 30       	cpi	r24, 0x01	; 1
     3c6:	59 f4       	brne	.+22     	; 0x3de <update_CalibrationPoint+0x1a>
	{
		cp.cpoint1 = new_val_celsius;
     3c8:	60 93 af 01 	sts	0x01AF, r22
		cp.cpoint1_adc = adc_filtered;
     3cc:	80 91 a3 01 	lds	r24, 0x01A3
     3d0:	90 91 a4 01 	lds	r25, 0x01A4
     3d4:	90 93 b2 01 	sts	0x01B2, r25
     3d8:	80 93 b1 01 	sts	0x01B1, r24
     3dc:	08 95       	ret
	}
	else if (point_number == 2)
     3de:	82 30       	cpi	r24, 0x02	; 2
     3e0:	51 f4       	brne	.+20     	; 0x3f6 <update_CalibrationPoint+0x32>
	{
		cp.cpoint2 = new_val_celsius;
     3e2:	60 93 b0 01 	sts	0x01B0, r22
		cp.cpoint2_adc = adc_filtered;
     3e6:	80 91 a3 01 	lds	r24, 0x01A3
     3ea:	90 91 a4 01 	lds	r25, 0x01A4
     3ee:	90 93 b4 01 	sts	0x01B4, r25
     3f2:	80 93 b3 01 	sts	0x01B3, r24
     3f6:	08 95       	ret

000003f8 <__vector_14>:
}


// ADC conversion is started by system timer (Timer2 ISR) every 1 ms
ISR(ADC_vect)
{
     3f8:	1f 92       	push	r1
     3fa:	0f 92       	push	r0
     3fc:	0f b6       	in	r0, 0x3f	; 63
     3fe:	0f 92       	push	r0
     400:	11 24       	eor	r1, r1
     402:	2f 93       	push	r18
     404:	3f 93       	push	r19
     406:	4f 93       	push	r20
     408:	8f 93       	push	r24
     40a:	9f 93       	push	r25
     40c:	ef 93       	push	r30
     40e:	ff 93       	push	r31
	static uint8_t adc_buffer_pointer = ADC_BUFFER_LENGTH;
	// Get new sample
	uint16_t new_sample = 1024 - ADC;	
     410:	24 b1       	in	r18, 0x04	; 4
     412:	35 b1       	in	r19, 0x05	; 5
	// Add new sample to the buffer
	raw_adc_buffer[--adc_buffer_pointer] = new_sample;
     414:	40 91 77 00 	lds	r20, 0x0077
     418:	41 50       	subi	r20, 0x01	; 1
     41a:	40 93 77 00 	sts	0x0077, r20
     41e:	e4 2f       	mov	r30, r20
     420:	f0 e0       	ldi	r31, 0x00	; 0
     422:	ee 0f       	add	r30, r30
     424:	ff 1f       	adc	r31, r31
     426:	ec 50       	subi	r30, 0x0C	; 12
     428:	ff 4f       	sbci	r31, 0xFF	; 255
// ADC conversion is started by system timer (Timer2 ISR) every 1 ms
ISR(ADC_vect)
{
	static uint8_t adc_buffer_pointer = ADC_BUFFER_LENGTH;
	// Get new sample
	uint16_t new_sample = 1024 - ADC;	
     42a:	80 e0       	ldi	r24, 0x00	; 0
     42c:	94 e0       	ldi	r25, 0x04	; 4
     42e:	82 1b       	sub	r24, r18
     430:	93 0b       	sbc	r25, r19
	// Add new sample to the buffer
	raw_adc_buffer[--adc_buffer_pointer] = new_sample;
     432:	91 83       	std	Z+1, r25	; 0x01
     434:	80 83       	st	Z, r24
	if (adc_buffer_pointer == 0)
     436:	41 11       	cpse	r20, r1
     438:	03 c0       	rjmp	.+6      	; 0x440 <__vector_14+0x48>
		adc_buffer_pointer = ADC_BUFFER_LENGTH;
     43a:	80 e2       	ldi	r24, 0x20	; 32
     43c:	80 93 77 00 	sts	0x0077, r24
}	
     440:	ff 91       	pop	r31
     442:	ef 91       	pop	r30
     444:	9f 91       	pop	r25
     446:	8f 91       	pop	r24
     448:	4f 91       	pop	r20
     44a:	3f 91       	pop	r19
     44c:	2f 91       	pop	r18
     44e:	0f 90       	pop	r0
     450:	0f be       	out	0x3f, r0	; 63
     452:	0f 90       	pop	r0
     454:	1f 90       	pop	r1
     456:	18 95       	reti

00000458 <process_buttons>:
	uint8_t event_hold = 0x00;
	buttons_t *buttons_p = &buttons;
	
	
	// Get the delayed versions of raw button state
	raw_delayed = raw_current;
     458:	40 91 5c 01 	lds	r20, 0x015C
	raw_delayed_inv = ~raw_current;
     45c:	54 2f       	mov	r21, r20
     45e:	50 95       	com	r21
	// Update current
	raw_current = raw_button_state;
     460:	80 91 cb 01 	lds	r24, 0x01CB
     464:	80 93 5c 01 	sts	0x015C, r24
	raw_current_inv = ~raw_current;
     468:	68 2f       	mov	r22, r24
     46a:	60 95       	com	r22
     46c:	90 91 5d 01 	lds	r25, 0x015D
	
	
	// If some button is pressed or released
	if (raw_delayed != raw_current)
     470:	48 17       	cp	r20, r24
     472:	51 f0       	breq	.+20     	; 0x488 <__stack+0x29>
	{
		if (press_timer < LONG_PRESS_DELAY)
     474:	9c 30       	cpi	r25, 0x0C	; 12
     476:	10 f0       	brcs	.+4      	; 0x47c <__stack+0x1d>
	static uint8_t raw_current = 0;
	uint8_t raw_current_inv;
	uint8_t raw_delayed;
	uint8_t raw_delayed_inv;
	static uint8_t press_timer = 0;		
	uint8_t event_release_short = 0x00;
     478:	90 e0       	ldi	r25, 0x00	; 0
     47a:	01 c0       	rjmp	.+2      	; 0x47e <__stack+0x1f>
	
	// If some button is pressed or released
	if (raw_delayed != raw_current)
	{
		if (press_timer < LONG_PRESS_DELAY)
			event_release_short = 0xFF;			// Button release short
     47c:	9f ef       	ldi	r25, 0xFF	; 255
		//else
			//event_release_long = 0xFF;			// Button release long
			
		// Reset timer	
		press_timer = 0;
     47e:	10 92 5d 01 	sts	0x015D, r1
	uint8_t raw_delayed_inv;
	static uint8_t press_timer = 0;		
	uint8_t event_release_short = 0x00;
	//uint8_t event_release_long = 0x00;
	uint8_t state_repeat = 0x00;
	uint8_t event_hold = 0x00;
     482:	20 e0       	ldi	r18, 0x00	; 0
	uint8_t raw_delayed;
	uint8_t raw_delayed_inv;
	static uint8_t press_timer = 0;		
	uint8_t event_release_short = 0x00;
	//uint8_t event_release_long = 0x00;
	uint8_t state_repeat = 0x00;
     484:	30 e0       	ldi	r19, 0x00	; 0
     486:	13 c0       	rjmp	.+38     	; 0x4ae <__stack+0x4f>
		press_timer = 0;
	}
	else
	{	
		// Increment timer
		if (press_timer != (LONG_PRESS_DELAY + 1))
     488:	9d 30       	cpi	r25, 0x0D	; 13
     48a:	19 f0       	breq	.+6      	; 0x492 <__stack+0x33>
		{
			press_timer++;
     48c:	9f 5f       	subi	r25, 0xFF	; 255
     48e:	90 93 5d 01 	sts	0x015D, r25
		}
		
		if (press_timer >= REPEAT_DELAY)
     492:	90 91 5d 01 	lds	r25, 0x015D
     496:	96 30       	cpi	r25, 0x06	; 6
     498:	20 f0       	brcs	.+8      	; 0x4a2 <__stack+0x43>
		{
			state_repeat = 0xFF;
		}
		if (press_timer == LONG_PRESS_DELAY)
     49a:	9c 30       	cpi	r25, 0x0C	; 12
     49c:	29 f0       	breq	.+10     	; 0x4a8 <__stack+0x49>
	uint8_t raw_delayed_inv;
	static uint8_t press_timer = 0;		
	uint8_t event_release_short = 0x00;
	//uint8_t event_release_long = 0x00;
	uint8_t state_repeat = 0x00;
	uint8_t event_hold = 0x00;
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	04 c0       	rjmp	.+8      	; 0x4aa <__stack+0x4b>
     4a2:	20 e0       	ldi	r18, 0x00	; 0
	uint8_t raw_delayed;
	uint8_t raw_delayed_inv;
	static uint8_t press_timer = 0;		
	uint8_t event_release_short = 0x00;
	//uint8_t event_release_long = 0x00;
	uint8_t state_repeat = 0x00;
     4a4:	30 e0       	ldi	r19, 0x00	; 0
     4a6:	02 c0       	rjmp	.+4      	; 0x4ac <__stack+0x4d>
		{
			state_repeat = 0xFF;
		}
		if (press_timer == LONG_PRESS_DELAY)
		{
			event_hold = 0xFF;
     4a8:	2f ef       	ldi	r18, 0xFF	; 255
			press_timer++;
		}
		
		if (press_timer >= REPEAT_DELAY)
		{
			state_repeat = 0xFF;
     4aa:	3f ef       	ldi	r19, 0xFF	; 255
	static uint8_t raw_current = 0;
	uint8_t raw_current_inv;
	uint8_t raw_delayed;
	uint8_t raw_delayed_inv;
	static uint8_t press_timer = 0;		
	uint8_t event_release_short = 0x00;
     4ac:	90 e0       	ldi	r25, 0x00	; 0
			event_hold = 0xFF;
		}
	}
	
	
	PRELOAD("z",buttons_p);
     4ae:	ea ea       	ldi	r30, 0xAA	; 170
     4b0:	f1 e0       	ldi	r31, 0x01	; 1
	buttons_p->raw_state = raw_current;
     4b2:	80 83       	st	Z, r24
	buttons_p->action_down = raw_current & raw_delayed_inv;
     4b4:	75 2f       	mov	r23, r21
     4b6:	78 23       	and	r23, r24
     4b8:	71 83       	std	Z+1, r23	; 0x01
	buttons_p->action_rep = raw_current & (raw_delayed_inv | state_repeat);
     4ba:	35 2b       	or	r19, r21
     4bc:	38 23       	and	r19, r24
     4be:	32 83       	std	Z+2, r19	; 0x02
	buttons_p->action_up_short = raw_current_inv & raw_delayed & event_release_short;
     4c0:	46 23       	and	r20, r22
     4c2:	49 23       	and	r20, r25
     4c4:	43 83       	std	Z+3, r20	; 0x03
	//buttons_p->action_up_long = raw_current_inv & raw_delayed & event_release_long;
	buttons_p->action_long = raw_current & event_hold;
     4c6:	82 23       	and	r24, r18
     4c8:	84 83       	std	Z+4, r24	; 0x04
     4ca:	08 95       	ret

000004cc <getDataCRC>:
//		uint8_t byte_count	<- number of bytes to use
//	returns:
//		8-bit CRC computed using _crc_ibutton_update() AVR_GCC function
//-------------------------------------------------------//
static uint8_t getDataCRC(void *p,uint8_t byte_count)
{
     4cc:	fc 01       	movw	r30, r24
	uint8_t crc_byte = 0;
     4ce:	80 e0       	ldi	r24, 0x00	; 0
	while(byte_count--)
     4d0:	09 c0       	rjmp	.+18     	; 0x4e4 <getDataCRC+0x18>
	{
		// Using ibutton CRC function for reason of 8-bit output CRC
		crc_byte = _crc_ibutton_update (crc_byte, *(uint8_t*)p++);	
     4d2:	91 91       	ld	r25, Z+

static __inline__ uint8_t
_crc_ibutton_update(uint8_t __crc, uint8_t __data)
{
	uint8_t __i, __pattern;
	__asm__ __volatile__ (
     4d4:	89 27       	eor	r24, r25
     4d6:	98 e0       	ldi	r25, 0x08	; 8
     4d8:	2c e8       	ldi	r18, 0x8C	; 140
     4da:	86 95       	lsr	r24
     4dc:	08 f4       	brcc	.+2      	; 0x4e0 <getDataCRC+0x14>
     4de:	82 27       	eor	r24, r18
     4e0:	9a 95       	dec	r25
     4e2:	d9 f7       	brne	.-10     	; 0x4da <getDataCRC+0xe>
//		8-bit CRC computed using _crc_ibutton_update() AVR_GCC function
//-------------------------------------------------------//
static uint8_t getDataCRC(void *p,uint8_t byte_count)
{
	uint8_t crc_byte = 0;
	while(byte_count--)
     4e4:	61 50       	subi	r22, 0x01	; 1
     4e6:	a8 f7       	brcc	.-22     	; 0x4d2 <getDataCRC+0x6>
	{
		// Using ibutton CRC function for reason of 8-bit output CRC
		crc_byte = _crc_ibutton_update (crc_byte, *(uint8_t*)p++);	
	}
	return crc_byte;
}
     4e8:	08 95       	ret

000004ea <processRollControl>:

//-------------------------------------------------------//
// Function to control motor rotation
//-------------------------------------------------------//
void processRollControl(void)
{	
     4ea:	cf 93       	push	r28
	uint8_t beepState = 0;
	
	// Process auto power off control
	if (autoPowerOffState & AUTO_POFF_ACTIVE)
     4ec:	90 91 5e 01 	lds	r25, 0x015E
     4f0:	90 ff       	sbrs	r25, 0
     4f2:	1a c0       	rjmp	.+52     	; 0x528 <processRollControl+0x3e>
	{
		stopCycleRolling(RESET_POINTS);	
     4f4:	81 e0       	ldi	r24, 0x01	; 1
     4f6:	42 d8       	rcall	.-3964   	; 0xfffff57c <__eeprom_end+0xff7ef50c>
		if ( (adc_status & (SENSOR_ERROR_NO_PRESENT | SENSOR_ERROR_SHORTED)) ||
     4f8:	80 91 a7 01 	lds	r24, 0x01A7
     4fc:	83 70       	andi	r24, 0x03	; 3
     4fe:	39 f4       	brne	.+14     	; 0x50e <processRollControl+0x24>
			 (adc_celsius > (POFF_MOTOR_TRESHOLD + POFF_MOTOR_HYST)) )
     500:	80 91 a8 01 	lds	r24, 0x01A8
     504:	90 91 a9 01 	lds	r25, 0x01A9
	
	// Process auto power off control
	if (autoPowerOffState & AUTO_POFF_ACTIVE)
	{
		stopCycleRolling(RESET_POINTS);	
		if ( (adc_status & (SENSOR_ERROR_NO_PRESENT | SENSOR_ERROR_SHORTED)) ||
     508:	88 33       	cpi	r24, 0x38	; 56
     50a:	91 05       	cpc	r25, r1
     50c:	3c f0       	brlt	.+14     	; 0x51c <processRollControl+0x32>
			 (adc_celsius > (POFF_MOTOR_TRESHOLD + POFF_MOTOR_HYST)) )
		{
			// If there is any sensor error, or
			// if temperature is greater than (threshold + some hysteresis) 
			if (!(rollState & (ROLL_FWD | ROLL_REV)))
     50e:	80 91 8d 01 	lds	r24, 0x018D
     512:	83 70       	andi	r24, 0x03	; 3
     514:	09 f0       	breq	.+2      	; 0x518 <processRollControl+0x2e>
     516:	64 c0       	rjmp	.+200    	; 0x5e0 <processRollControl+0xf6>
			{
				// If motor is stopped
				setMotorDirection(ROLL_FWD);		// Start rotating in order to prevent rollers damage
     518:	81 e0       	ldi	r24, 0x01	; 1
     51a:	04 c0       	rjmp	.+8      	; 0x524 <processRollControl+0x3a>
			}
		}
		else if (adc_celsius <= POFF_MOTOR_TRESHOLD)
     51c:	c3 97       	sbiw	r24, 0x33	; 51
     51e:	0c f0       	brlt	.+2      	; 0x522 <processRollControl+0x38>
     520:	5f c0       	rjmp	.+190    	; 0x5e0 <processRollControl+0xf6>
		{
			setMotorDirection(0);			// Stop the motor
     522:	80 e0       	ldi	r24, 0x00	; 0
     524:	0c d8       	rcall	.-4072   	; 0xfffff53e <__eeprom_end+0xff7ef4ce>
     526:	5c c0       	rjmp	.+184    	; 0x5e0 <processRollControl+0xf6>
	}
	else
	{
		//-------------------------------------//
		// Control direction by buttons
		if ((buttons.raw_state & (BD_ROTFWD | BD_ROTREV)) == (BD_ROTFWD | BD_ROTREV))
     528:	80 91 aa 01 	lds	r24, 0x01AA
     52c:	84 71       	andi	r24, 0x14	; 20
     52e:	84 31       	cpi	r24, 0x14	; 20
     530:	11 f4       	brne	.+4      	; 0x536 <processRollControl+0x4c>
		{
			// Both Forward and Reverse buttons are pressed - stop
			// Attention - stopping motor when rollers are hot can possibly damage them
			setMotorDirection(0);
     532:	80 e0       	ldi	r24, 0x00	; 0
     534:	15 c0       	rjmp	.+42     	; 0x560 <processRollControl+0x76>
		}
		else if (buttons.action_down & BD_ROTFWD)
     536:	80 91 ab 01 	lds	r24, 0x01AB
     53a:	82 ff       	sbrs	r24, 2
     53c:	04 c0       	rjmp	.+8      	; 0x546 <processRollControl+0x5c>
		{
			setMotorDirection(ROLL_FWD);	
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	fe d7       	rcall	.+4092   	; 0x153e <setMotorDirection>
			beepState |= 0x01;			// pressed FWD button
     542:	c1 e0       	ldi	r28, 0x01	; 1
     544:	0f c0       	rjmp	.+30     	; 0x564 <processRollControl+0x7a>
		}		
		else if (buttons.action_down & BD_ROTREV)
     546:	84 ff       	sbrs	r24, 4
     548:	04 c0       	rjmp	.+8      	; 0x552 <processRollControl+0x68>
		{
			setMotorDirection(ROLL_REV);
     54a:	82 e0       	ldi	r24, 0x02	; 2
     54c:	f8 d7       	rcall	.+4080   	; 0x153e <setMotorDirection>
			beepState |= 0x02;			// pressed REV button
     54e:	c2 e0       	ldi	r28, 0x02	; 2
     550:	09 c0       	rjmp	.+18     	; 0x564 <processRollControl+0x7a>
		}		
		else if (autoPowerOffState & AUTO_POFF_LEAVE)
     552:	91 ff       	sbrs	r25, 1
     554:	06 c0       	rjmp	.+12     	; 0x562 <processRollControl+0x78>
		{
			// Exiting auto power off mode
			if (!(rollState & (ROLL_FWD | ROLL_REV)))
     556:	80 91 8d 01 	lds	r24, 0x018D
     55a:	83 70       	andi	r24, 0x03	; 3
     55c:	11 f4       	brne	.+4      	; 0x562 <processRollControl+0x78>
			{
				// Start rotating if motor is stopped
				setMotorDirection(ROLL_FWD);		
     55e:	81 e0       	ldi	r24, 0x01	; 1
     560:	ee d7       	rcall	.+4060   	; 0x153e <setMotorDirection>
//-------------------------------------------------------//
// Function to control motor rotation
//-------------------------------------------------------//
void processRollControl(void)
{	
	uint8_t beepState = 0;
     562:	c0 e0       	ldi	r28, 0x00	; 0
			}
		}
			
		//-------------------------------------//
		// Control cycle rolling
		if (buttons.action_long & BD_CYCLE)
     564:	80 91 ae 01 	lds	r24, 0x01AE
     568:	83 ff       	sbrs	r24, 3
     56a:	04 c0       	rjmp	.+8      	; 0x574 <processRollControl+0x8a>
		{
			stopCycleRolling(RESET_POINTS);		// Reset points and disable CYCLE mode (if was enabled)
     56c:	81 e0       	ldi	r24, 0x01	; 1
     56e:	06 d8       	rcall	.-4084   	; 0xfffff57c <__eeprom_end+0xff7ef50c>
			beepState |= 0x08;					// reset of points by long pressing of ROLL button
     570:	c8 60       	ori	r28, 0x08	; 8
     572:	14 c0       	rjmp	.+40     	; 0x59c <processRollControl+0xb2>
		}
		else if (buttons.action_up_short & BD_CYCLE)
     574:	80 91 ad 01 	lds	r24, 0x01AD
     578:	83 ff       	sbrs	r24, 3
     57a:	10 c0       	rjmp	.+32     	; 0x59c <processRollControl+0xb2>
		{
			// Disable interrupts from timer0
			//	to prevent rollState from changes - not very beautiful approach
			// Interrupts from Timer0 will be reenabled in either stopCycleRolling() or startCycleRolling()
			TIMSK = (1<<OCIE2);
     57c:	80 e8       	ldi	r24, 0x80	; 128
     57e:	89 bf       	out	0x39, r24	; 57
			if (rollState & ROLL_CYCLE)
     580:	80 91 8d 01 	lds	r24, 0x018D
     584:	82 ff       	sbrs	r24, 2
     586:	04 c0       	rjmp	.+8      	; 0x590 <processRollControl+0xa6>
			{
				stopCycleRolling(DO_NOT_RESET_POINTS);
     588:	80 e0       	ldi	r24, 0x00	; 0
     58a:	f8 d7       	rcall	.+4080   	; 0x157c <stopCycleRolling>
				beepState |= 0x20;		// stopped cycle
     58c:	c0 62       	ori	r28, 0x20	; 32
     58e:	06 c0       	rjmp	.+12     	; 0x59c <processRollControl+0xb2>
			}
			else if (startCycleRolling())
     590:	42 d8       	rcall	.-3964   	; 0xfffff616 <__eeprom_end+0xff7ef5a6>
     592:	88 23       	and	r24, r24
     594:	11 f0       	breq	.+4      	; 0x59a <processRollControl+0xb0>
			{
				beepState |= 0x10;		// started cycle
     596:	c0 61       	ori	r28, 0x10	; 16
     598:	01 c0       	rjmp	.+2      	; 0x59c <processRollControl+0xb2>
			}
			else
			{
				beepState |= 0x40;		// failed to start cycle
     59a:	c0 64       	ori	r28, 0x40	; 64
		}		
		
		// ROLL_DIR_CHANGED is set only when direction is changed automatically,
		// not when changed by calling setMotorDirection() function
		// ROLL_DIR_CHANGED and CYCLE_ROLL_DONE flags are sticky
		if (rollState & ROLL_DIR_CHANGED)
     59c:	80 91 8d 01 	lds	r24, 0x018D
     5a0:	85 ff       	sbrs	r24, 5
     5a2:	03 c0       	rjmp	.+6      	; 0x5aa <processRollControl+0xc0>
		{
			clearRollFlags(ROLL_DIR_CHANGED);
     5a4:	80 e2       	ldi	r24, 0x20	; 32
     5a6:	04 d8       	rcall	.-4088   	; 0xfffff5b0 <__eeprom_end+0xff7ef540>
			beepState |= 0x04;	
     5a8:	c4 60       	ori	r28, 0x04	; 4
		}
		if (rollState & CYCLE_ROLL_DONE)
     5aa:	80 91 8d 01 	lds	r24, 0x018D
     5ae:	84 ff       	sbrs	r24, 4
     5b0:	03 c0       	rjmp	.+6      	; 0x5b8 <processRollControl+0xce>
		{
			clearRollFlags(CYCLE_ROLL_DONE);
     5b2:	80 e1       	ldi	r24, 0x10	; 16
     5b4:	fd d7       	rcall	.+4090   	; 0x15b0 <clearRollFlags>
			beepState |= 0x80;	
     5b6:	c0 68       	ori	r28, 0x80	; 128
		}		
			
		//-------------------------------------//
		// Process sound events
		if (beepState & 0x80)		// Roll cycle done
     5b8:	c7 ff       	sbrs	r28, 7
     5ba:	03 c0       	rjmp	.+6      	; 0x5c2 <processRollControl+0xd8>
		{
			Sound_Play(m_siren4);	
     5bc:	8c e0       	ldi	r24, 0x0C	; 12
     5be:	90 e0       	ldi	r25, 0x00	; 0
     5c0:	0e c0       	rjmp	.+28     	; 0x5de <processRollControl+0xf4>
		}		
		else if (beepState & 0x40)	// Roll cycle start fail
     5c2:	c6 ff       	sbrs	r28, 6
     5c4:	03 c0       	rjmp	.+6      	; 0x5cc <processRollControl+0xe2>
		{
			Sound_Play(m_beep_500Hz_40ms);	
     5c6:	8c e5       	ldi	r24, 0x5C	; 92
     5c8:	90 e0       	ldi	r25, 0x00	; 0
     5ca:	09 c0       	rjmp	.+18     	; 0x5de <processRollControl+0xf4>
		} 
		else if (beepState & 0x08)	// Reset points
     5cc:	c3 ff       	sbrs	r28, 3
     5ce:	03 c0       	rjmp	.+6      	; 0x5d6 <processRollControl+0xec>
		{
			Sound_Play(m_beep_800Hz_40ms);	
     5d0:	80 e6       	ldi	r24, 0x60	; 96
     5d2:	90 e0       	ldi	r25, 0x00	; 0
     5d4:	04 c0       	rjmp	.+8      	; 0x5de <processRollControl+0xf4>
		}							// Other
		else if ( beepState & (0x01 | 0x02 | 0x10 | 0x20 | 0x04) )
     5d6:	c7 73       	andi	r28, 0x37	; 55
     5d8:	19 f0       	breq	.+6      	; 0x5e0 <processRollControl+0xf6>
		{
			Sound_Play(m_beep_1000Hz_40ms);	
     5da:	84 e6       	ldi	r24, 0x64	; 100
     5dc:	90 e0       	ldi	r25, 0x00	; 0
     5de:	47 da       	rcall	.-2930   	; 0xfffffa6e <__eeprom_end+0xff7ef9fe>
		}			
			
	}

	//----- LED indication ------//
	clearExtraLeds(LED_ROTFWD | LED_ROTREV);
     5e0:	88 e1       	ldi	r24, 0x18	; 24
     5e2:	69 d2       	rcall	.+1234   	; 0xab6 <clearExtraLeds>
	if (rollState & ROLL_FWD)
     5e4:	80 91 8d 01 	lds	r24, 0x018D
     5e8:	80 ff       	sbrs	r24, 0
     5ea:	02 c0       	rjmp	.+4      	; 0x5f0 <processRollControl+0x106>
		setExtraLeds(LED_ROTFWD);
     5ec:	88 e0       	ldi	r24, 0x08	; 8
     5ee:	03 c0       	rjmp	.+6      	; 0x5f6 <processRollControl+0x10c>
	else if (rollState & ROLL_REV)
     5f0:	81 ff       	sbrs	r24, 1
     5f2:	03 c0       	rjmp	.+6      	; 0x5fa <processRollControl+0x110>
		setExtraLeds(LED_ROTREV);
     5f4:	80 e1       	ldi	r24, 0x10	; 16
}
     5f6:	cf 91       	pop	r28
	//----- LED indication ------//
	clearExtraLeds(LED_ROTFWD | LED_ROTREV);
	if (rollState & ROLL_FWD)
		setExtraLeds(LED_ROTFWD);
	else if (rollState & ROLL_REV)
		setExtraLeds(LED_ROTREV);
     5f8:	58 c2       	rjmp	.+1200   	; 0xaaa <setExtraLeds>
}
     5fa:	cf 91       	pop	r28
     5fc:	08 95       	ret

000005fe <processHeaterControl>:
	uint16_t setPoint;
	uint16_t processValue;
	uint16_t pid_output;
	
	// Process heater ON/OFF control by button
	if (buttons.action_up_short & BD_HEATCTRL)
     5fe:	80 91 ad 01 	lds	r24, 0x01AD
     602:	80 ff       	sbrs	r24, 0
     604:	05 c0       	rjmp	.+10     	; 0x610 <processHeaterControl+0x12>
	{
		heaterState ^= HEATER_ENABLED;
     606:	80 b1       	in	r24, 0x00	; 0
     608:	91 e0       	ldi	r25, 0x01	; 1
     60a:	89 27       	eor	r24, r25
     60c:	80 b9       	out	0x00, r24	; 0
		// Force update heater power
		sys_timers_flags |= UPDATE_PID;		// Not very good approach if UPDATE_PID flag is used outside this function
     60e:	16 9a       	sbi	0x02, 6	; 2
	}
	
	// Process PID controller reset
	if (buttons.action_long & BD_HEATCTRL)
     610:	80 91 ae 01 	lds	r24, 0x01AE
     614:	80 ff       	sbrs	r24, 0
     616:	03 c0       	rjmp	.+6      	; 0x61e <processHeaterControl+0x20>
	{
		heaterState |= RESET_PID;
     618:	02 9a       	sbi	0x00, 2	; 0
		// Force update heater power
		sys_timers_flags |= UPDATE_PID;
     61a:	16 9a       	sbi	0x02, 6	; 2
     61c:	01 c0       	rjmp	.+2      	; 0x620 <processHeaterControl+0x22>
	}
	else
	{
		heaterState &= ~RESET_PID;
     61e:	02 98       	cbi	0x00, 2	; 0
	}
	
	// Process auto power off control and sensor errors
	if ((autoPowerOffState & AUTO_POFF_ACTIVE) || (adc_status & (SENSOR_ERROR_NO_PRESENT | SENSOR_ERROR_SHORTED)))
     620:	80 91 5e 01 	lds	r24, 0x015E
     624:	80 fd       	sbrc	r24, 0
     626:	04 c0       	rjmp	.+8      	; 0x630 <processHeaterControl+0x32>
     628:	80 91 a7 01 	lds	r24, 0x01A7
     62c:	83 70       	andi	r24, 0x03	; 3
     62e:	09 f0       	breq	.+2      	; 0x632 <processHeaterControl+0x34>
	{
		heaterState &= ~HEATER_ENABLED;
     630:	00 98       	cbi	0x00, 0	; 0
	}	

	// Update integrator limits if set point is changed
	if (heaterState & SETPOINT_CHANGED)
     632:	03 9b       	sbis	0x00, 3	; 0
     634:	04 c0       	rjmp	.+8      	; 0x63e <processHeaterControl+0x40>
	{
		setPIDIntegratorLimit(p.setup_temp_value);
     636:	80 91 b5 01 	lds	r24, 0x01B5
     63a:	63 d6       	rcall	.+3270   	; 0x1302 <setPIDIntegratorLimit>
		// Force update heater power
		sys_timers_flags |= UPDATE_PID;
     63c:	16 9a       	sbi	0x02, 6	; 2
	}

	
	// Check if heater control should be updated
	// PID call interval is a multiple of Celsius update interval. 
	if (sys_timers_flags & UPDATE_PID)
     63e:	16 9b       	sbis	0x02, 6	; 2
     640:	13 c0       	rjmp	.+38     	; 0x668 <processHeaterControl+0x6a>
	{
		// PID input: 1 count ~ 0.125 Celsius degree (see adc.c)
		setPoint = conv_Celsius_to_ADC(p.setup_temp_value);
     642:	80 91 b5 01 	lds	r24, 0x01B5
     646:	90 e0       	ldi	r25, 0x00	; 0
     648:	eb dd       	rcall	.-1066   	; 0x220 <conv_Celsius_to_ADC>
		processValue = adc_filtered;
		
		// Process PID
		// If heater is disabled, output will be 0
		pid_output = processPID(setPoint, processValue, heaterState);		
     64a:	40 b1       	in	r20, 0x00	; 0
     64c:	60 91 a3 01 	lds	r22, 0x01A3
     650:	70 91 a4 01 	lds	r23, 0x01A4
     654:	63 d6       	rcall	.+3270   	; 0x131c <processPID>
		
		// If unregulated mode is selected, override PID output 
		// This mode must be used with care for calibration only
		if ((heaterState & HEATER_ENABLED) && (p.setup_temp_value >= MAX_SET_TEMP))
     656:	00 9b       	sbis	0x00, 0	; 0
     658:	06 c0       	rjmp	.+12     	; 0x666 <processHeaterControl+0x68>
     65a:	20 91 b5 01 	lds	r18, 0x01B5
     65e:	2f 3f       	cpi	r18, 0xFF	; 255
     660:	11 f4       	brne	.+4      	; 0x666 <processHeaterControl+0x68>
			pid_output = HEATER_MAX_POWER;		
     662:	84 ef       	ldi	r24, 0xF4	; 244
     664:	91 e0       	ldi	r25, 0x01	; 1
			
		// Apply new heater power value	
		setHeaterPower(pid_output);			
     666:	5d d7       	rcall	.+3770   	; 0x1522 <setHeaterPower>
	}	
		
	
	//----- LED indication ------//
	if (heaterState & HEATER_ENABLED)
		setExtraLeds(LED_HEATER);
     668:	84 e0       	ldi	r24, 0x04	; 4
		setHeaterPower(pid_output);			
	}	
		
	
	//----- LED indication ------//
	if (heaterState & HEATER_ENABLED)
     66a:	00 99       	sbic	0x00, 0	; 0
		setExtraLeds(LED_HEATER);
     66c:	1e c2       	rjmp	.+1084   	; 0xaaa <setExtraLeds>
	else
		clearExtraLeds(LED_HEATER);
     66e:	23 c2       	rjmp	.+1094   	; 0xab6 <clearExtraLeds>

00000670 <processHeaterEvents>:
void processHeaterEvents(void)
{
	static uint8_t setPoint_prev = MIN_SET_TEMP + 1;	// Init with value that can never be set
	
	// Generate temperature changed event
	if (setPoint_prev != p.setup_temp_value)
     670:	90 91 78 00 	lds	r25, 0x0078
     674:	80 91 b5 01 	lds	r24, 0x01B5
     678:	98 17       	cp	r25, r24
     67a:	21 f0       	breq	.+8      	; 0x684 <processHeaterEvents+0x14>
	{
		heaterState |= SETPOINT_CHANGED;
     67c:	03 9a       	sbi	0x00, 3	; 0
		setPoint_prev = p.setup_temp_value;
     67e:	80 93 78 00 	sts	0x0078, r24
     682:	08 95       	ret
	}
	else
	{
		heaterState &= ~SETPOINT_CHANGED;
     684:	03 98       	cbi	0x00, 3	; 0
     686:	08 95       	ret

00000688 <processHeaterAlerts>:
//	- sensor errors
//	- getting close to desired temperature
//	- continuous heating when disabled
//-------------------------------------------------------//
void processHeaterAlerts(void)
{
     688:	cf 93       	push	r28
     68a:	df 93       	push	r29
	static uint8_t tempAlertRange = TEMP_ALERT_RANGE;
	static int16_t refCapturedTemp = INT16_MAX;
	int16_t currentTemperature = adc_celsius;
     68c:	c0 91 a8 01 	lds	r28, 0x01A8
     690:	d0 91 a9 01 	lds	r29, 0x01A9
	
	// ADC sensor errors alert
	if (adc_status & (SENSOR_ERROR_NO_PRESENT | SENSOR_ERROR_SHORTED))
     694:	80 91 a7 01 	lds	r24, 0x01A7
     698:	83 70       	andi	r24, 0x03	; 3
     69a:	31 f0       	breq	.+12     	; 0x6a8 <processHeaterAlerts+0x20>
	{
		if (sys_timers_flags & EXPIRED_10SEC)
     69c:	11 9b       	sbis	0x02, 1	; 2
     69e:	3e c0       	rjmp	.+124    	; 0x71c <processHeaterAlerts+0x94>
		{
			// Enable beeper output regardless of menu setting
			Sound_OverrideDisable();
     6a0:	f8 d9       	rcall	.-3088   	; 0xfffffa92 <__eeprom_end+0xff7efa22>
			Sound_Play(m_siren3);
     6a2:	84 e1       	ldi	r24, 0x14	; 20
     6a4:	90 e0       	ldi	r25, 0x00	; 0
     6a6:	37 c0       	rjmp	.+110    	; 0x716 <processHeaterAlerts+0x8e>
		return;
	}
	
	
	// Indicate reaching of desired temperature
	if ( (currentTemperature > p.setup_temp_value - tempAlertRange) && (currentTemperature < p.setup_temp_value + tempAlertRange) )
     6a8:	20 91 b5 01 	lds	r18, 0x01B5
     6ac:	30 e0       	ldi	r19, 0x00	; 0
     6ae:	60 91 79 00 	lds	r22, 0x0079
     6b2:	86 2f       	mov	r24, r22
     6b4:	90 e0       	ldi	r25, 0x00	; 0
     6b6:	a9 01       	movw	r20, r18
     6b8:	48 1b       	sub	r20, r24
     6ba:	59 0b       	sbc	r21, r25
     6bc:	4c 17       	cp	r20, r28
     6be:	5d 07       	cpc	r21, r29
     6c0:	74 f4       	brge	.+28     	; 0x6de <processHeaterAlerts+0x56>
     6c2:	82 0f       	add	r24, r18
     6c4:	93 1f       	adc	r25, r19
     6c6:	c8 17       	cp	r28, r24
     6c8:	d9 07       	cpc	r29, r25
     6ca:	4c f4       	brge	.+18     	; 0x6de <processHeaterAlerts+0x56>
	{
		if ((tempAlertRange == TEMP_ALERT_RANGE) && (heaterState & HEATER_ENABLED))
     6cc:	65 30       	cpi	r22, 0x05	; 5
     6ce:	29 f4       	brne	.+10     	; 0x6da <processHeaterAlerts+0x52>
     6d0:	00 9b       	sbis	0x00, 0	; 0
     6d2:	03 c0       	rjmp	.+6      	; 0x6da <processHeaterAlerts+0x52>
		{
			Sound_Play(m_siren1);
     6d4:	84 e3       	ldi	r24, 0x34	; 52
     6d6:	90 e0       	ldi	r25, 0x00	; 0
     6d8:	ca d9       	rcall	.-3180   	; 0xfffffa6e <__eeprom_end+0xff7ef9fe>
		}
		// Add some hysteresis
		tempAlertRange = TEMP_ALERT_RANGE + TEMP_ALERT_HYST;
     6da:	8a e0       	ldi	r24, 0x0A	; 10
     6dc:	01 c0       	rjmp	.+2      	; 0x6e0 <processHeaterAlerts+0x58>
	}			
	else
	{
		tempAlertRange = TEMP_ALERT_RANGE;
     6de:	85 e0       	ldi	r24, 0x05	; 5
     6e0:	80 93 79 00 	sts	0x0079, r24
	// Growing temperature with heater disabled alert 
	// This alert is done regardless of global sound enable
	// A false triggering may occur if ambient temperature grows.
	// To reset the warning in this case just turn on heater for at least one systimer tick (50ms)
	// If heater is enabled, it is implied that user controls heating process
	if (heaterState & (HEATER_ENABLED | CALIBRATION_ACTIVE))
     6e4:	80 b1       	in	r24, 0x00	; 0
     6e6:	83 70       	andi	r24, 0x03	; 3
     6e8:	09 f0       	breq	.+2      	; 0x6ec <processHeaterAlerts+0x64>
     6ea:	09 c0       	rjmp	.+18     	; 0x6fe <processHeaterAlerts+0x76>
	{
		// Heater enabled, just save current temperature as reference
		// Same if calibration in progress, even if heater is disabled
		refCapturedTemp = currentTemperature;
	}
	else if (sys_timers_flags & EXPIRED_10SEC)
     6ec:	11 9b       	sbis	0x02, 1	; 2
     6ee:	16 c0       	rjmp	.+44     	; 0x71c <processHeaterAlerts+0x94>
	{
		// Heater disabled. If temperature is falling,
		if (currentTemperature < refCapturedTemp)
     6f0:	80 91 7a 00 	lds	r24, 0x007A
     6f4:	90 91 7b 00 	lds	r25, 0x007B
     6f8:	c8 17       	cp	r28, r24
     6fa:	d9 07       	cpc	r29, r25
     6fc:	2c f4       	brge	.+10     	; 0x708 <processHeaterAlerts+0x80>
		{
			// save current temperature as reference
			refCapturedTemp = currentTemperature;
     6fe:	d0 93 7b 00 	sts	0x007B, r29
     702:	c0 93 7a 00 	sts	0x007A, r28
     706:	0a c0       	rjmp	.+20     	; 0x71c <processHeaterAlerts+0x94>
		else
		{
			// Heater is disabled. If current temperature is higher than reference + some safe interval,
			// there might be a hardware failure - short circuit, etc
			// BEEP like a devil  }:-(
			if (currentTemperature >= (refCapturedTemp + SAFE_TEMP_INTERVAL))
     708:	43 96       	adiw	r24, 0x13	; 19
     70a:	8c 17       	cp	r24, r28
     70c:	9d 07       	cpc	r25, r29
     70e:	34 f4       	brge	.+12     	; 0x71c <processHeaterAlerts+0x94>
			{
				// Enable beeper output regardless of menu setting
				Sound_OverrideDisable();
     710:	c0 d9       	rcall	.-3200   	; 0xfffffa92 <__eeprom_end+0xff7efa22>
				Sound_Play(m_siren2);
     712:	8a e1       	ldi	r24, 0x1A	; 26
     714:	90 e0       	ldi	r25, 0x00	; 0
			}
		}
	}
}
     716:	df 91       	pop	r29
     718:	cf 91       	pop	r28
			// BEEP like a devil  }:-(
			if (currentTemperature >= (refCapturedTemp + SAFE_TEMP_INTERVAL))
			{
				// Enable beeper output regardless of menu setting
				Sound_OverrideDisable();
				Sound_Play(m_siren2);
     71a:	a9 c9       	rjmp	.-3246   	; 0xfffffa6e <__eeprom_end+0xff7ef9fe>
			}
		}
	}
}
     71c:	df 91       	pop	r29
     71e:	cf 91       	pop	r28
     720:	08 95       	ret

00000722 <saveCalibrationToEEPROM>:
//  if USE_EEPROM_CRC is defined, CRC is calculated and stored as well
//-------------------------------------------------------//
void saveCalibrationToEEPROM(void)
{
	// Calibration parameters normally are only saved after calibrating 
	eeprom_update_block(&cp,&eeCalibrationParams,sizeof(cParams_t));	
     722:	46 e0       	ldi	r20, 0x06	; 6
     724:	50 e0       	ldi	r21, 0x00	; 0
     726:	62 e0       	ldi	r22, 0x02	; 2
     728:	70 e0       	ldi	r23, 0x00	; 0
     72a:	8f ea       	ldi	r24, 0xAF	; 175
     72c:	91 e0       	ldi	r25, 0x01	; 1
     72e:	58 da       	rcall	.-2896   	; 0xfffffbe0 <__eeprom_end+0xff7efb70>
	#ifdef USE_EEPROM_CRC
	uint8_t new_crc_byte = getDataCRC(&cp,sizeof(cParams_t));
     730:	66 e0       	ldi	r22, 0x06	; 6
     732:	8f ea       	ldi	r24, 0xAF	; 175
     734:	91 e0       	ldi	r25, 0x01	; 1
     736:	ca de       	rcall	.-620    	; 0x4cc <getDataCRC>
	eeprom_update_byte(&ee_cParamsCRC,new_crc_byte);
     738:	68 2f       	mov	r22, r24
     73a:	80 e0       	ldi	r24, 0x00	; 0
     73c:	90 e0       	ldi	r25, 0x00	; 0
     73e:	5f ca       	rjmp	.-2882   	; 0xfffffbfe <__eeprom_end+0xff7efb8e>

00000740 <saveGlobalParamsToEEPROM>:
//-------------------------------------------------------//
void saveGlobalParamsToEEPROM(void)
{
	// Save global parameters to EEPROM
	// eeprom_update_block() updates only bytes that were changed
	eeprom_update_block(&p,&eeGlobalParams,sizeof(gParams_t));
     740:	44 e0       	ldi	r20, 0x04	; 4
     742:	50 e0       	ldi	r21, 0x00	; 0
     744:	68 e0       	ldi	r22, 0x08	; 8
     746:	70 e0       	ldi	r23, 0x00	; 0
     748:	85 eb       	ldi	r24, 0xB5	; 181
     74a:	91 e0       	ldi	r25, 0x01	; 1
     74c:	49 da       	rcall	.-2926   	; 0xfffffbe0 <__eeprom_end+0xff7efb70>
	#ifdef USE_EEPROM_CRC
	uint8_t new_crc_byte = getDataCRC(&p,sizeof(gParams_t));
     74e:	64 e0       	ldi	r22, 0x04	; 4
     750:	85 eb       	ldi	r24, 0xB5	; 181
     752:	91 e0       	ldi	r25, 0x01	; 1
     754:	bb de       	rcall	.-650    	; 0x4cc <getDataCRC>
	eeprom_update_byte(&ee_gParamsCRC,new_crc_byte);
     756:	68 2f       	mov	r22, r24
     758:	81 e0       	ldi	r24, 0x01	; 1
     75a:	90 e0       	ldi	r25, 0x00	; 0
     75c:	50 ca       	rjmp	.-2912   	; 0xfffffbfe <__eeprom_end+0xff7efb8e>

0000075e <restoreGlobalParams>:
//		1 if control parameters were corrupted and restored from defaults stored in FLASH
//		2 if calibration parameters were corrupted and restored
//		3 if both were corrupted and restored.
//-------------------------------------------------------//
uint8_t restoreGlobalParams(void)
{	
     75e:	cf 93       	push	r28
     760:	df 93       	push	r29
	uint8_t defaults_used = 0;
	
	// Restore global parameters - temperature setting, sound enable, etc.
	eeprom_read_block(&p,&eeGlobalParams,sizeof(gParams_t));
     762:	44 e0       	ldi	r20, 0x04	; 4
     764:	50 e0       	ldi	r21, 0x00	; 0
     766:	68 e0       	ldi	r22, 0x08	; 8
     768:	70 e0       	ldi	r23, 0x00	; 0
     76a:	85 eb       	ldi	r24, 0xB5	; 181
     76c:	91 e0       	ldi	r25, 0x01	; 1
     76e:	20 da       	rcall	.-3008   	; 0xfffffbb0 <__eeprom_end+0xff7efb40>
	// Restore ADC calibration parameters
	eeprom_read_block(&cp,&eeCalibrationParams,sizeof(cParams_t));
     770:	46 e0       	ldi	r20, 0x06	; 6
     772:	50 e0       	ldi	r21, 0x00	; 0
     774:	62 e0       	ldi	r22, 0x02	; 2
     776:	70 e0       	ldi	r23, 0x00	; 0
     778:	8f ea       	ldi	r24, 0xAF	; 175
     77a:	91 e0       	ldi	r25, 0x01	; 1
     77c:	19 da       	rcall	.-3022   	; 0xfffffbb0 <__eeprom_end+0xff7efb40>
	#ifdef USE_EEPROM_CRC
	uint8_t crc_byte;
	uint8_t temp8u;
	
	//------- Check global params -------//
	crc_byte = getDataCRC(&p,sizeof(gParams_t));
     77e:	64 e0       	ldi	r22, 0x04	; 4
     780:	85 eb       	ldi	r24, 0xB5	; 181
     782:	91 e0       	ldi	r25, 0x01	; 1
     784:	a3 de       	rcall	.-698    	; 0x4cc <getDataCRC>
     786:	c8 2f       	mov	r28, r24
	temp8u = eeprom_read_byte(&ee_gParamsCRC);
     788:	81 e0       	ldi	r24, 0x01	; 1
     78a:	90 e0       	ldi	r25, 0x00	; 0
     78c:	21 da       	rcall	.-3006   	; 0xfffffbd0 <__eeprom_end+0xff7efb60>
	// Restore global defaults if corrupted
	if (temp8u != crc_byte)
     78e:	8c 17       	cp	r24, r28
     790:	51 f0       	breq	.+20     	; 0x7a6 <restoreGlobalParams+0x48>
	{
		//PGM_read_block(&p,&pmGlobalDefaults,sizeof(gParams_t));
		memcpy_P(&p,&pmGlobalDefaults,sizeof(gParams_t));
     792:	44 e0       	ldi	r20, 0x04	; 4
     794:	50 e0       	ldi	r21, 0x00	; 0
     796:	6c e2       	ldi	r22, 0x2C	; 44
     798:	70 e0       	ldi	r23, 0x00	; 0
     79a:	85 eb       	ldi	r24, 0xB5	; 181
     79c:	91 e0       	ldi	r25, 0x01	; 1
     79e:	ff d9       	rcall	.-3074   	; 0xfffffb9e <__eeprom_end+0xff7efb2e>
		// Save restored default values with correct CRC
		saveGlobalParamsToEEPROM();
     7a0:	cf df       	rcall	.-98     	; 0x740 <saveGlobalParamsToEEPROM>
		defaults_used |= 0x01;
     7a2:	c1 e0       	ldi	r28, 0x01	; 1
     7a4:	01 c0       	rjmp	.+2      	; 0x7a8 <restoreGlobalParams+0x4a>
//		2 if calibration parameters were corrupted and restored
//		3 if both were corrupted and restored.
//-------------------------------------------------------//
uint8_t restoreGlobalParams(void)
{	
	uint8_t defaults_used = 0;
     7a6:	c0 e0       	ldi	r28, 0x00	; 0
		saveGlobalParamsToEEPROM();
		defaults_used |= 0x01;
	}
	
	//----- Check calibration params -----//
	crc_byte = getDataCRC(&cp,sizeof(cParams_t));
     7a8:	66 e0       	ldi	r22, 0x06	; 6
     7aa:	8f ea       	ldi	r24, 0xAF	; 175
     7ac:	91 e0       	ldi	r25, 0x01	; 1
     7ae:	8e de       	rcall	.-740    	; 0x4cc <getDataCRC>
     7b0:	d8 2f       	mov	r29, r24
	temp8u = eeprom_read_byte(&ee_cParamsCRC);
     7b2:	80 e0       	ldi	r24, 0x00	; 0
     7b4:	90 e0       	ldi	r25, 0x00	; 0
     7b6:	0c da       	rcall	.-3048   	; 0xfffffbd0 <__eeprom_end+0xff7efb60>
	// Restore calibration defaults if corrupted
	if (temp8u != crc_byte)
     7b8:	8d 17       	cp	r24, r29
     7ba:	49 f0       	breq	.+18     	; 0x7ce <restoreGlobalParams+0x70>
	{
		//PGM_read_block(&cp,&pmCalibrationDefaults,sizeof(cParams_t));
		memcpy_P(&cp,&pmCalibrationDefaults,sizeof(cParams_t));
     7bc:	46 e0       	ldi	r20, 0x06	; 6
     7be:	50 e0       	ldi	r21, 0x00	; 0
     7c0:	66 e2       	ldi	r22, 0x26	; 38
     7c2:	70 e0       	ldi	r23, 0x00	; 0
     7c4:	8f ea       	ldi	r24, 0xAF	; 175
     7c6:	91 e0       	ldi	r25, 0x01	; 1
     7c8:	ea d9       	rcall	.-3116   	; 0xfffffb9e <__eeprom_end+0xff7efb2e>
		// Save restored default values with correct CRC
		saveCalibrationToEEPROM();
     7ca:	ab df       	rcall	.-170    	; 0x722 <saveCalibrationToEEPROM>
		defaults_used |= 0x02;	
     7cc:	c2 60       	ori	r28, 0x02	; 2
	}
	#endif
	
	return defaults_used;
}
     7ce:	8c 2f       	mov	r24, r28
     7d0:	df 91       	pop	r29
     7d2:	cf 91       	pop	r28
     7d4:	08 95       	ret

000007d6 <exitPowerOff>:
//	are switched off, and global control parameters are saved to EEPROM
//-------------------------------------------------------//
void exitPowerOff(void)
{
	// Disable all interrupts
	cli();
     7d6:	f8 94       	cli
	
	// Put all ports into HI-Z
	DDRB = 0x00;
     7d8:	17 ba       	out	0x17, r1	; 23
	PORTB = 0x00;
     7da:	18 ba       	out	0x18, r1	; 24
	DDRC = 0x00;
     7dc:	14 ba       	out	0x14, r1	; 20
	PORTC = 0x00;
     7de:	15 ba       	out	0x15, r1	; 21
	
	//DDRD = 0x00;
	DDRD = (1<<PD_TXD);
     7e0:	82 e0       	ldi	r24, 0x02	; 2
     7e2:	81 bb       	out	0x11, r24	; 17
	USART_sendstr("\n\rAC sync lost");
     7e4:	80 e9       	ldi	r24, 0x90	; 144
     7e6:	90 e0       	ldi	r25, 0x00	; 0
     7e8:	5d d9       	rcall	.-3398   	; 0xfffffaa4 <__eeprom_end+0xff7efa34>
	
	saveGlobalParamsToEEPROM();
     7ea:	aa df       	rcall	.-172    	; 0x740 <saveGlobalParamsToEEPROM>
	
	USART_sendstr("\n\rTurn OFF");
     7ec:	8f e9       	ldi	r24, 0x9F	; 159
     7ee:	90 e0       	ldi	r25, 0x00	; 0
     7f0:	59 d9       	rcall	.-3406   	; 0xfffffaa4 <__eeprom_end+0xff7efa34>
	PORTD = 0x00;
     7f2:	12 ba       	out	0x12, r1	; 18
     7f4:	ff cf       	rjmp	.-2      	; 0x7f4 <exitPowerOff+0x1e>

000007f6 <fir_i16_i8>:
// FIR digital filter
// Samples: signed, 16-bit
// Coeffs:  signed, 8-bit
//---------------------------------------------//
int16_t fir_i16_i8(int16_t new_sample, int16_t *samples, filter8bit_core_t* iir_core)
{
     7f6:	cf 92       	push	r12
     7f8:	df 92       	push	r13
     7fa:	ef 92       	push	r14
     7fc:	ff 92       	push	r15
     7fe:	0f 93       	push	r16
     800:	1f 93       	push	r17
     802:	cf 93       	push	r28
     804:	df 93       	push	r29
     806:	8c 01       	movw	r16, r24
     808:	eb 01       	movw	r28, r22
     80a:	fa 01       	movw	r30, r20
	int32_t summ;
	uint8_t i;
	
	summ = new_sample * iir_core->coeffs[0];
     80c:	23 81       	ldd	r18, Z+3	; 0x03
     80e:	20 03       	mulsu	r18, r16
     810:	60 01       	movw	r12, r0
     812:	21 9f       	mul	r18, r17
     814:	d0 0c       	add	r13, r0
     816:	11 24       	eor	r1, r1
     818:	ee 24       	eor	r14, r14
     81a:	d7 fc       	sbrc	r13, 7
     81c:	e0 94       	com	r14
     81e:	fe 2c       	mov	r15, r14
	for (i=iir_core->n-1; i>0; i--)
     820:	40 81       	ld	r20, Z
     822:	1e c0       	rjmp	.+60     	; 0x860 <fir_i16_i8+0x6a>
	{
		samples[i] = samples[i-1];
     824:	84 2f       	mov	r24, r20
     826:	90 e0       	ldi	r25, 0x00	; 0
     828:	dc 01       	movw	r26, r24
     82a:	11 97       	sbiw	r26, 0x01	; 1
     82c:	aa 0f       	add	r26, r26
     82e:	bb 1f       	adc	r27, r27
     830:	ac 0f       	add	r26, r28
     832:	bd 1f       	adc	r27, r29
     834:	2d 91       	ld	r18, X+
     836:	3c 91       	ld	r19, X
     838:	dc 01       	movw	r26, r24
     83a:	aa 0f       	add	r26, r26
     83c:	bb 1f       	adc	r27, r27
     83e:	ac 0f       	add	r26, r28
     840:	bd 1f       	adc	r27, r29
     842:	2d 93       	st	X+, r18
     844:	3c 93       	st	X, r19
		summ += (int32_t)samples[i] * iir_core->coeffs[i];
     846:	df 01       	movw	r26, r30
     848:	a8 0f       	add	r26, r24
     84a:	b9 1f       	adc	r27, r25
     84c:	13 96       	adiw	r26, 0x03	; 3
     84e:	ac 91       	ld	r26, X
     850:	bb 27       	eor	r27, r27
     852:	a7 fd       	sbrc	r26, 7
     854:	b0 95       	com	r27
     856:	5f d9       	rcall	.-3394   	; 0xfffffb16 <__eeprom_end+0xff7efaa6>
     858:	c6 0e       	add	r12, r22
     85a:	d7 1e       	adc	r13, r23
     85c:	e8 1e       	adc	r14, r24
     85e:	f9 1e       	adc	r15, r25
{
	int32_t summ;
	uint8_t i;
	
	summ = new_sample * iir_core->coeffs[0];
	for (i=iir_core->n-1; i>0; i--)
     860:	41 50       	subi	r20, 0x01	; 1
     862:	01 f7       	brne	.-64     	; 0x824 <fir_i16_i8+0x2e>
	{
		samples[i] = samples[i-1];
		summ += (int32_t)samples[i] * iir_core->coeffs[i];
	}
	samples[0] = new_sample;
     864:	19 83       	std	Y+1, r17	; 0x01
     866:	08 83       	st	Y, r16
	return (int16_t)(summ / iir_core->dc_gain);
     868:	21 81       	ldd	r18, Z+1	; 0x01
     86a:	32 81       	ldd	r19, Z+2	; 0x02
     86c:	40 e0       	ldi	r20, 0x00	; 0
     86e:	50 e0       	ldi	r21, 0x00	; 0
     870:	c7 01       	movw	r24, r14
     872:	b6 01       	movw	r22, r12
     874:	35 d9       	rcall	.-3478   	; 0xfffffae0 <__eeprom_end+0xff7efa70>
}
     876:	c9 01       	movw	r24, r18
     878:	df 91       	pop	r29
     87a:	cf 91       	pop	r28
     87c:	1f 91       	pop	r17
     87e:	0f 91       	pop	r16
     880:	ff 90       	pop	r15
     882:	ef 90       	pop	r14
     884:	df 90       	pop	r13
     886:	cf 90       	pop	r12
     888:	08 95       	ret

0000088a <decode_led_char>:
//---------------------------------------------//
// Decodes normal string literal to the
//	7-segment representation
//---------------------------------------------//
static uint8_t decode_led_char(char c)
{
     88a:	20 e0       	ldi	r18, 0x00	; 0
     88c:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t i;
	encode_7seg_pair encode_pair;
	for (i = 0; i < sizeof(led_encode_table)/sizeof(encode_7seg_pair); i++  )
	{
		encode_pair.code = pgm_read_byte(&led_encode_table[i].code);
     88e:	a9 01       	movw	r20, r18
     890:	44 0f       	add	r20, r20
     892:	55 1f       	adc	r21, r21
     894:	fa 01       	movw	r30, r20
     896:	e0 5d       	subi	r30, 0xD0	; 208
     898:	ff 4f       	sbci	r31, 0xFF	; 255
     89a:	e4 91       	lpm	r30, Z
		if (encode_pair.code == c)
     89c:	e8 13       	cpse	r30, r24
     89e:	05 c0       	rjmp	.+10     	; 0x8aa <decode_led_char+0x20>
		{
			i = pgm_read_byte(&led_encode_table[i].segdata);
     8a0:	fa 01       	movw	r30, r20
     8a2:	ef 5c       	subi	r30, 0xCF	; 207
     8a4:	ff 4f       	sbci	r31, 0xFF	; 255
     8a6:	84 91       	lpm	r24, Z
     8a8:	08 95       	ret
     8aa:	2f 5f       	subi	r18, 0xFF	; 255
     8ac:	3f 4f       	sbci	r19, 0xFF	; 255
//---------------------------------------------//
static uint8_t decode_led_char(char c)
{
	uint8_t i;
	encode_7seg_pair encode_pair;
	for (i = 0; i < sizeof(led_encode_table)/sizeof(encode_7seg_pair); i++  )
     8ae:	2c 31       	cpi	r18, 0x1C	; 28
     8b0:	31 05       	cpc	r19, r1
     8b2:	69 f7       	brne	.-38     	; 0x88e <decode_led_char+0x4>
			return i;
		}		
	}			
	// No item was found - return argument value
	return  c;
}
     8b4:	08 95       	ret

000008b6 <wrap_led_buffer_index>:
//---------------------------------------------//
// Ensures that index is inside the buffer
// -128 <= index <= 127
//---------------------------------------------//
static uint8_t wrap_led_buffer_index(int8_t buf_index)
{
     8b6:	28 2f       	mov	r18, r24
	uint8_t new_index_u;
	new_index_u = (uint8_t) ((buf_index < 0) ? -buf_index : buf_index);
     8b8:	87 fd       	sbrc	r24, 7
     8ba:	81 95       	neg	r24
	if (new_index_u >= LED_BUFFER_LENGTH)
     8bc:	8e 30       	cpi	r24, 0x0E	; 14
     8be:	18 f0       	brcs	.+6      	; 0x8c6 <wrap_led_buffer_index+0x10>
		new_index_u = new_index_u % LED_BUFFER_LENGTH;
     8c0:	6e e0       	ldi	r22, 0x0E	; 14
     8c2:	02 d9       	rcall	.-3580   	; 0xfffffac8 <__eeprom_end+0xff7efa58>
     8c4:	89 2f       	mov	r24, r25
	new_index_u = ((buf_index >= 0) || (new_index_u == 0)) ? new_index_u :  LED_BUFFER_LENGTH - new_index_u ;
     8c6:	27 ff       	sbrs	r18, 7
     8c8:	05 c0       	rjmp	.+10     	; 0x8d4 <wrap_led_buffer_index+0x1e>
     8ca:	88 23       	and	r24, r24
     8cc:	19 f0       	breq	.+6      	; 0x8d4 <wrap_led_buffer_index+0x1e>
     8ce:	9e e0       	ldi	r25, 0x0E	; 14
     8d0:	98 1b       	sub	r25, r24
     8d2:	89 2f       	mov	r24, r25
	return new_index_u;
}
     8d4:	08 95       	ret

000008d6 <processLedIndicator>:
// Call this function N times per sec to get N/NUM_DIGITS_TOTAL display update rate, where
// NUM_DIGITS_TOTAL is number_of_digits_of_LED_display if no extra LEDs are used or
// (number_of_digits_of_LED_display + 1) otherwise.
//---------------------------------------------//
void processLedIndicator()
{
     8d6:	cf 93       	push	r28
	uint8_t next_wActivePos;
	
	// Turn off segments
	#ifdef CLEAN_OPERATION
	disable_led_segments();
     8d8:	21 d1       	rcall	.+578    	; 0xb1c <disable_led_segments>
	#endif
	
	
	// Perform regular shift
	led_clock_pulse(!LED_DIGIT_ACT_LVL);
     8da:	81 e0       	ldi	r24, 0x01	; 1
     8dc:	f3 d0       	rcall	.+486    	; 0xac4 <led_clock_pulse>
	
	// Switch on active window item position
	switch (wActivePos)
     8de:	c0 91 60 01 	lds	r28, 0x0160
     8e2:	cc 23       	and	r28, r28
     8e4:	19 f0       	breq	.+6      	; 0x8ec <processLedIndicator+0x16>
     8e6:	c6 30       	cpi	r28, 0x06	; 6
     8e8:	c1 f5       	brne	.+112    	; 0x95a <processLedIndicator+0x84>
     8ea:	0f c0       	rjmp	.+30     	; 0x90a <processLedIndicator+0x34>
	case 0:
		// Get buttons
		#ifndef CLEAN_OPERATION
		disable_led_segments();
		#endif
		enable_led_segments_pullups();
     8ec:	09 d1       	rcall	.+530    	; 0xb00 <enable_led_segments_pullups>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     8ee:	85 e3       	ldi	r24, 0x35	; 53
     8f0:	8a 95       	dec	r24
     8f2:	f1 f7       	brne	.-4      	; 0x8f0 <processLedIndicator+0x1a>
     8f4:	00 00       	nop
		_delay_us(PULLUP_DELAY_US);
		capture_button_state();
     8f6:	19 d1       	rcall	.+562    	; 0xb2a <capture_button_state>
		#ifndef CLEAN_OPERATION
		enable_led_segments();
		#endif
		// Start new cycle with active digit level
		led_clock_pulse(LED_DIGIT_ACT_LVL);
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	e4 d0       	rcall	.+456    	; 0xac4 <led_clock_pulse>
		// Always start new cycle from specified buffer start position
		bufActivePos = wStartPos;
     8fc:	80 91 ba 01 	lds	r24, 0x01BA
     900:	80 93 5f 01 	sts	0x015F, r24
		next_wActivePos = wActivePos + 1;
     904:	c0 91 60 01 	lds	r28, 0x0160
     908:	28 c0       	rjmp	.+80     	; 0x95a <processLedIndicator+0x84>
//---------------------------------------------//
// Performs window shifting
//---------------------------------------------//
static void processWindowShifter(void)
{
	if (shifterState == LED_SHIFT_DONE)
     90a:	80 91 bb 01 	lds	r24, 0x01BB
     90e:	81 11       	cpse	r24, r1
     910:	01 c0       	rjmp	.+2      	; 0x914 <processLedIndicator+0x3e>
     912:	1b c0       	rjmp	.+54     	; 0x94a <processLedIndicator+0x74>
		return;
	
	// Process shift timer
	processSoftTimer8b(&shiftTimer);	
     914:	81 e6       	ldi	r24, 0x61	; 97
     916:	91 e0       	ldi	r25, 0x01	; 1
     918:	a2 d7       	rcall	.+3908   	; 0x185e <processSoftTimer8b>
	
	if (shiftTimer.FTop)
     91a:	80 91 61 01 	lds	r24, 0x0161
     91e:	85 ff       	sbrs	r24, 5
     920:	14 c0       	rjmp	.+40     	; 0x94a <processLedIndicator+0x74>
	{
		// Check if finished
		if (wStartPos == bufStartPos)	
     922:	80 91 ba 01 	lds	r24, 0x01BA
     926:	90 91 bc 01 	lds	r25, 0x01BC
     92a:	89 13       	cpse	r24, r25
     92c:	03 c0       	rjmp	.+6      	; 0x934 <processLedIndicator+0x5e>
		{
			// Update state
			shifterState = LED_SHIFT_DONE;
     92e:	10 92 bb 01 	sts	0x01BB, r1
     932:	0b c0       	rjmp	.+22     	; 0x94a <processLedIndicator+0x74>
		}
		else if (shifterState == LED_SHIFT_RIGHT)
     934:	90 91 bb 01 	lds	r25, 0x01BB
     938:	92 30       	cpi	r25, 0x02	; 2
     93a:	49 f4       	brne	.+18     	; 0x94e <processLedIndicator+0x78>
// Increments index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t inc_buffer_position(uint8_t position)
{
	return (position >= LED_BUFFER_LENGTH - 1) ? 0 : position + 1;
     93c:	8d 30       	cpi	r24, 0x0D	; 13
     93e:	10 f4       	brcc	.+4      	; 0x944 <processLedIndicator+0x6e>
     940:	8f 5f       	subi	r24, 0xFF	; 255
     942:	01 c0       	rjmp	.+2      	; 0x946 <processLedIndicator+0x70>
     944:	80 e0       	ldi	r24, 0x00	; 0
			// Update state
			shifterState = LED_SHIFT_DONE;
		}
		else if (shifterState == LED_SHIFT_RIGHT)
		{
			wStartPos = inc_buffer_position(wStartPos);	
     946:	80 93 ba 01 	sts	0x01BA, r24
		// Always start new cycle from specified buffer start position
		bufActivePos = wStartPos;
		next_wActivePos = wActivePos + 1;
		break;
	case NUM_DIGITS_TOTAL-1:
		next_wActivePos = 0;
     94a:	c0 e0       	ldi	r28, 0x00	; 0
     94c:	07 c0       	rjmp	.+14     	; 0x95c <processLedIndicator+0x86>
// Decrements index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t dec_buffer_position(uint8_t position)
{
	return (position == 0) ? LED_BUFFER_LENGTH - 1 : position - 1;
     94e:	88 23       	and	r24, r24
     950:	11 f0       	breq	.+4      	; 0x956 <processLedIndicator+0x80>
     952:	81 50       	subi	r24, 0x01	; 1
     954:	f8 cf       	rjmp	.-16     	; 0x946 <processLedIndicator+0x70>
     956:	8d e0       	ldi	r24, 0x0D	; 13
     958:	f6 cf       	rjmp	.-20     	; 0x946 <processLedIndicator+0x70>
		next_wActivePos = 0;
		// Shift LED window
		processWindowShifter();	
		break;
	default:
		next_wActivePos = wActivePos + 1;
     95a:	cf 5f       	subi	r28, 0xFF	; 255
		break;
	}		
	
	#ifdef 	USE_EXTRA_LED_DIGIT
	if (wActivePos == EXTRA_DIGIT_NUM)
     95c:	80 91 60 01 	lds	r24, 0x0160
     960:	86 30       	cpi	r24, 0x06	; 6
     962:	21 f4       	brne	.+8      	; 0x96c <processLedIndicator+0x96>
	{
		// Output separate LEDs state
		set_led_segments(extra_led_state);
     964:	80 91 b9 01 	lds	r24, 0x01B9
     968:	bd d0       	rcall	.+378    	; 0xae4 <set_led_segments>
     96a:	10 c0       	rjmp	.+32     	; 0x98c <processLedIndicator+0xb6>
	}
	else
	#endif
	{
		// Output new segment data
		set_led_segments(led_data_buffer[bufActivePos]);
     96c:	e0 91 5f 01 	lds	r30, 0x015F
     970:	f0 e0       	ldi	r31, 0x00	; 0
     972:	e3 54       	subi	r30, 0x43	; 67
     974:	fe 4f       	sbci	r31, 0xFE	; 254
     976:	80 81       	ld	r24, Z
     978:	b5 d0       	rcall	.+362    	; 0xae4 <set_led_segments>
		// Wrap around buffer length
		bufActivePos = inc_buffer_position(bufActivePos );
     97a:	80 91 5f 01 	lds	r24, 0x015F
// Increments index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t inc_buffer_position(uint8_t position)
{
	return (position >= LED_BUFFER_LENGTH - 1) ? 0 : position + 1;
     97e:	8d 30       	cpi	r24, 0x0D	; 13
     980:	10 f4       	brcc	.+4      	; 0x986 <processLedIndicator+0xb0>
     982:	8f 5f       	subi	r24, 0xFF	; 255
     984:	01 c0       	rjmp	.+2      	; 0x988 <processLedIndicator+0xb2>
     986:	80 e0       	ldi	r24, 0x00	; 0
	#endif
	{
		// Output new segment data
		set_led_segments(led_data_buffer[bufActivePos]);
		// Wrap around buffer length
		bufActivePos = inc_buffer_position(bufActivePos );
     988:	80 93 5f 01 	sts	0x015F, r24
	}
		
	wActivePos = next_wActivePos;
     98c:	c0 93 60 01 	sts	0x0160, r28
	
	#ifdef CLEAN_OPERATION
	enable_led_segments();
	#endif

}
     990:	cf 91       	pop	r28
	}
		
	wActivePos = next_wActivePos;
	
	#ifdef CLEAN_OPERATION
	enable_led_segments();
     992:	bd c0       	rjmp	.+378    	; 0xb0e <enable_led_segments>

00000994 <fillLedBuffer>:
//---------------------------------------------//
// Fills buffer from (bufStartPos + offset) 
//	position with single char
//---------------------------------------------//
void fillLedBuffer(int8_t offset, uint8_t length, char c)
{
     994:	0f 93       	push	r16
     996:	1f 93       	push	r17
     998:	cf 93       	push	r28
     99a:	df 93       	push	r29
     99c:	1f 92       	push	r1
     99e:	cd b7       	in	r28, 0x3d	; 61
     9a0:	de b7       	in	r29, 0x3e	; 62
     9a2:	18 2f       	mov	r17, r24
     9a4:	84 2f       	mov	r24, r20
	uint8_t val = decode_led_char(c);
     9a6:	69 83       	std	Y+1, r22	; 0x01
     9a8:	70 df       	rcall	.-288    	; 0x88a <decode_led_char>
     9aa:	08 2f       	mov	r16, r24
	// Ensure index is inside the buffer
	uint8_t position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
     9ac:	80 91 bc 01 	lds	r24, 0x01BC
     9b0:	81 0f       	add	r24, r17
     9b2:	81 df       	rcall	.-254    	; 0x8b6 <wrap_led_buffer_index>
	while(length--)
     9b4:	69 81       	ldd	r22, Y+1	; 0x01
     9b6:	0a c0       	rjmp	.+20     	; 0x9cc <fillLedBuffer+0x38>
	{
		led_data_buffer[position] = val;
     9b8:	e8 2f       	mov	r30, r24
     9ba:	f0 e0       	ldi	r31, 0x00	; 0
     9bc:	e3 54       	subi	r30, 0x43	; 67
     9be:	fe 4f       	sbci	r31, 0xFE	; 254
     9c0:	00 83       	st	Z, r16
// Increments index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t inc_buffer_position(uint8_t position)
{
	return (position >= LED_BUFFER_LENGTH - 1) ? 0 : position + 1;
     9c2:	8d 30       	cpi	r24, 0x0D	; 13
     9c4:	10 f4       	brcc	.+4      	; 0x9ca <fillLedBuffer+0x36>
     9c6:	8f 5f       	subi	r24, 0xFF	; 255
     9c8:	01 c0       	rjmp	.+2      	; 0x9cc <fillLedBuffer+0x38>
     9ca:	80 e0       	ldi	r24, 0x00	; 0
void fillLedBuffer(int8_t offset, uint8_t length, char c)
{
	uint8_t val = decode_led_char(c);
	// Ensure index is inside the buffer
	uint8_t position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
	while(length--)
     9cc:	61 50       	subi	r22, 0x01	; 1
     9ce:	a0 f7       	brcc	.-24     	; 0x9b8 <fillLedBuffer+0x24>
	{
		led_data_buffer[position] = val;
		position = inc_buffer_position(position);
	}
}
     9d0:	0f 90       	pop	r0
     9d2:	df 91       	pop	r29
     9d4:	cf 91       	pop	r28
     9d6:	1f 91       	pop	r17
     9d8:	0f 91       	pop	r16
     9da:	08 95       	ret

000009dc <startShiftingWindowLeft>:
//	LED window left 
//---------------------------------------------//
void startShiftingWindowLeft(void)
{
	// Clear spaces between menu states
	fillLedBuffer(-2,2,' ');
     9dc:	40 e2       	ldi	r20, 0x20	; 32
     9de:	62 e0       	ldi	r22, 0x02	; 2
     9e0:	8e ef       	ldi	r24, 0xFE	; 254
     9e2:	d8 df       	rcall	.-80     	; 0x994 <fillLedBuffer>
	// Set new buffer position for writing
	bufStartPos = wrap_led_buffer_index( (int8_t)bufStartPos - (NUM_DIGITS + 2) );
     9e4:	80 91 bc 01 	lds	r24, 0x01BC
     9e8:	88 50       	subi	r24, 0x08	; 8
     9ea:	65 df       	rcall	.-310    	; 0x8b6 <wrap_led_buffer_index>
     9ec:	80 93 bc 01 	sts	0x01BC, r24
	// Set shifter state
	shifterState = LED_SHIFT_LEFT;
     9f0:	81 e0       	ldi	r24, 0x01	; 1
     9f2:	80 93 bb 01 	sts	0x01BB, r24
     9f6:	08 95       	ret

000009f8 <startShiftingWindowRight>:
//	LED window right 
//---------------------------------------------//
void startShiftingWindowRight(void)
{
	// Clear spaces between menu states
	fillLedBuffer(NUM_DIGITS,2,' ');
     9f8:	40 e2       	ldi	r20, 0x20	; 32
     9fa:	62 e0       	ldi	r22, 0x02	; 2
     9fc:	86 e0       	ldi	r24, 0x06	; 6
     9fe:	ca df       	rcall	.-108    	; 0x994 <fillLedBuffer>
	// Set new buffer position for writing
	bufStartPos = wrap_led_buffer_index( (int8_t)bufStartPos + NUM_DIGITS + 2 );
     a00:	80 91 bc 01 	lds	r24, 0x01BC
     a04:	88 5f       	subi	r24, 0xF8	; 248
     a06:	57 df       	rcall	.-338    	; 0x8b6 <wrap_led_buffer_index>
     a08:	80 93 bc 01 	sts	0x01BC, r24
	// Set shifter state
	shifterState = LED_SHIFT_RIGHT;
     a0c:	82 e0       	ldi	r24, 0x02	; 2
     a0e:	80 93 bb 01 	sts	0x01BB, r24
     a12:	08 95       	ret

00000a14 <initLedIndicator>:
//---------------------------------------------//
//	Initialization
//	Call this function at start of your program
//---------------------------------------------//
void initLedIndicator()
{
     a14:	cf 93       	push	r28
	uint8_t i;
	// First disable outputs
	disable_led_segments();
     a16:	82 d0       	rcall	.+260    	; 0xb1c <disable_led_segments>
     a18:	c7 e0       	ldi	r28, 0x07	; 7
	// Fill shift register with non-active levels
	for (i=0;i<NUM_DIGITS_TOTAL;i++)
	{
		led_clock_pulse(!LED_DIGIT_ACT_LVL);
     a1a:	81 e0       	ldi	r24, 0x01	; 1
     a1c:	53 d0       	rcall	.+166    	; 0xac4 <led_clock_pulse>
     a1e:	c1 50       	subi	r28, 0x01	; 1
{
	uint8_t i;
	// First disable outputs
	disable_led_segments();
	// Fill shift register with non-active levels
	for (i=0;i<NUM_DIGITS_TOTAL;i++)
     a20:	e1 f7       	brne	.-8      	; 0xa1a <initLedIndicator+0x6>
	{
		led_clock_pulse(!LED_DIGIT_ACT_LVL);
	}
	// Now enable outputs
	enable_led_segments();
     a22:	75 d0       	rcall	.+234    	; 0xb0e <enable_led_segments>
	
	// Reset pointers
	wStartPos = 0;
     a24:	10 92 ba 01 	sts	0x01BA, r1
	bufStartPos = 0;
     a28:	10 92 bc 01 	sts	0x01BC, r1
	bufActivePos = 0;
     a2c:	10 92 5f 01 	sts	0x015F, r1
	wActivePos = 0;
     a30:	10 92 60 01 	sts	0x0160, r1
	#ifdef 	USE_EXTRA_LED_DIGIT
	extra_led_state = 0;
     a34:	10 92 b9 01 	sts	0x01B9, r1
	#endif
	
	// Clear the buffer 
	fillLedBuffer(0,LED_BUFFER_LENGTH,' ');
     a38:	40 e2       	ldi	r20, 0x20	; 32
     a3a:	6e e0       	ldi	r22, 0x0E	; 14
     a3c:	80 e0       	ldi	r24, 0x00	; 0
     a3e:	aa df       	rcall	.-172    	; 0x994 <fillLedBuffer>
	
	// Initialize shift timer - always enabled, but 
	//	processed only when shifting is active
	shifterState = LED_SHIFT_DONE;
     a40:	10 92 bb 01 	sts	0x01BB, r1
	shiftTimer.Enabled = 1;
     a44:	80 91 61 01 	lds	r24, 0x0161
	shiftTimer.RunOnce = 0;
     a48:	81 60       	ori	r24, 0x01	; 1
     a4a:	8d 7f       	andi	r24, 0xFD	; 253
     a4c:	80 93 61 01 	sts	0x0161, r24
	shiftTimer.Top = LED_SHIFT_INTERVAL-1;
     a50:	89 e0       	ldi	r24, 0x09	; 9
     a52:	80 93 63 01 	sts	0x0163, r24
}
     a56:	cf 91       	pop	r28
     a58:	08 95       	ret

00000a5a <printLedBuffer>:
// Arguments:
//		offset	- buffer index to start with (with respect to bufStartPos)
//		str - null-terminated char string
//---------------------------------------------//		
void printLedBuffer(int8_t offset, char* str)
{
     a5a:	1f 93       	push	r17
     a5c:	cf 93       	push	r28
     a5e:	df 93       	push	r29
     a60:	eb 01       	movw	r28, r22
	char c;
	uint8_t decoded_sym;
	// Ensure index is inside the buffer
	uint8_t buffer_position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
     a62:	90 91 bc 01 	lds	r25, 0x01BC
     a66:	89 0f       	add	r24, r25
     a68:	26 df       	rcall	.-436    	; 0x8b6 <wrap_led_buffer_index>
     a6a:	18 2f       	mov	r17, r24
	// Output chars
	while((c = *str++))
     a6c:	0b c0       	rjmp	.+22     	; 0xa84 <printLedBuffer+0x2a>
	{
		decoded_sym = decode_led_char(c);
     a6e:	0d df       	rcall	.-486    	; 0x88a <decode_led_char>
		led_data_buffer[buffer_position] = decoded_sym;
     a70:	e1 2f       	mov	r30, r17
     a72:	f0 e0       	ldi	r31, 0x00	; 0
     a74:	e3 54       	subi	r30, 0x43	; 67
     a76:	fe 4f       	sbci	r31, 0xFE	; 254
     a78:	80 83       	st	Z, r24
// Increments index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t inc_buffer_position(uint8_t position)
{
	return (position >= LED_BUFFER_LENGTH - 1) ? 0 : position + 1;
     a7a:	1d 30       	cpi	r17, 0x0D	; 13
     a7c:	10 f4       	brcc	.+4      	; 0xa82 <printLedBuffer+0x28>
     a7e:	1f 5f       	subi	r17, 0xFF	; 255
     a80:	01 c0       	rjmp	.+2      	; 0xa84 <printLedBuffer+0x2a>
     a82:	10 e0       	ldi	r17, 0x00	; 0
	char c;
	uint8_t decoded_sym;
	// Ensure index is inside the buffer
	uint8_t buffer_position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
	// Output chars
	while((c = *str++))
     a84:	89 91       	ld	r24, Y+
     a86:	81 11       	cpse	r24, r1
     a88:	f2 cf       	rjmp	.-28     	; 0xa6e <printLedBuffer+0x14>
	{
		decoded_sym = decode_led_char(c);
		led_data_buffer[buffer_position] = decoded_sym;
		buffer_position = inc_buffer_position(buffer_position);
	}
}
     a8a:	df 91       	pop	r29
     a8c:	cf 91       	pop	r28
     a8e:	1f 91       	pop	r17
     a90:	08 95       	ret

00000a92 <setComma>:
//	buffer cell
//---------------------------------------------//
void setComma(int8_t offset)
{
	// Ensure index is inside the buffer
	uint8_t position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
     a92:	90 91 bc 01 	lds	r25, 0x01BC
     a96:	89 0f       	add	r24, r25
     a98:	0e df       	rcall	.-484    	; 0x8b6 <wrap_led_buffer_index>
	led_data_buffer[position] |= (SEGH);
     a9a:	e8 2f       	mov	r30, r24
     a9c:	f0 e0       	ldi	r31, 0x00	; 0
     a9e:	e3 54       	subi	r30, 0x43	; 67
     aa0:	fe 4f       	sbci	r31, 0xFE	; 254
     aa2:	80 81       	ld	r24, Z
     aa4:	80 68       	ori	r24, 0x80	; 128
     aa6:	80 83       	st	Z, r24
     aa8:	08 95       	ret

00000aaa <setExtraLeds>:
// Argument is ORed with current LED state
//---------------------------------------------//
inline void setExtraLeds(uint8_t leds_set_value)
{
		//asm("cli");
		extra_led_state |= leds_set_value;
     aaa:	90 91 b9 01 	lds	r25, 0x01B9
     aae:	98 2b       	or	r25, r24
     ab0:	90 93 b9 01 	sts	0x01B9, r25
     ab4:	08 95       	ret

00000ab6 <clearExtraLeds>:
// Argument is AND NOTed with current LED state
//---------------------------------------------//
inline void clearExtraLeds(uint8_t leds_clear_value)
{
		//asm("cli");
		extra_led_state &= ~leds_clear_value;
     ab6:	90 91 b9 01 	lds	r25, 0x01B9
     aba:	80 95       	com	r24
     abc:	89 23       	and	r24, r25
     abe:	80 93 b9 01 	sts	0x01B9, r24
     ac2:	08 95       	ret

00000ac4 <led_clock_pulse>:


// Clocks in bit into the shift register
void led_clock_pulse(uint8_t bit)
{
	if (bit)
     ac4:	88 23       	and	r24, r24
     ac6:	11 f0       	breq	.+4      	; 0xacc <led_clock_pulse+0x8>
		PORTB |= (1<<PB_LED_DOUT);
     ac8:	c0 9a       	sbi	0x18, 0	; 24
     aca:	01 c0       	rjmp	.+2      	; 0xace <led_clock_pulse+0xa>
	else
		PORTB &= ~(1<<PB_LED_DOUT);
     acc:	c0 98       	cbi	0x18, 0	; 24
     ace:	8a e1       	ldi	r24, 0x1A	; 26
     ad0:	8a 95       	dec	r24
     ad2:	f1 f7       	brne	.-4      	; 0xad0 <led_clock_pulse+0xc>
     ad4:	00 c0       	rjmp	.+0      	; 0xad6 <led_clock_pulse+0x12>
	_delay_us(SETUP_DELAY_US);
	PORTB |= (1<<PB_LED_CLK);
     ad6:	c2 9a       	sbi	0x18, 2	; 24
     ad8:	8a e1       	ldi	r24, 0x1A	; 26
     ada:	8a 95       	dec	r24
     adc:	f1 f7       	brne	.-4      	; 0xada <led_clock_pulse+0x16>
     ade:	00 c0       	rjmp	.+0      	; 0xae0 <led_clock_pulse+0x1c>
	_delay_us(SHIFT_DELAY_US);
	PORTB &= ~(1<<PB_LED_CLK);
     ae0:	c2 98       	cbi	0x18, 2	; 24
     ae2:	08 95       	ret

00000ae4 <set_led_segments>:
// Outputs decoded segment data to port bits
void set_led_segments(uint8_t seg_ch)
{
	uint8_t pdat;
	seg_ch ^= LED_SEGMENT_MASK;
	pdat = PORTC & ~( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
     ae4:	25 b3       	in	r18, 0x15	; 21
	pdat |= (seg_ch & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
     ae6:	98 2f       	mov	r25, r24
     ae8:	9f 71       	andi	r25, 0x1F	; 31
// Outputs decoded segment data to port bits
void set_led_segments(uint8_t seg_ch)
{
	uint8_t pdat;
	seg_ch ^= LED_SEGMENT_MASK;
	pdat = PORTC & ~( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
     aea:	20 7e       	andi	r18, 0xE0	; 224
	pdat |= (seg_ch & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
     aec:	92 2b       	or	r25, r18
	PORTC = pdat;
     aee:	95 bb       	out	0x15, r25	; 21
	seg_ch >>= 2;
	pdat = PORTB & ~( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     af0:	98 b3       	in	r25, 0x18	; 24
	uint8_t pdat;
	seg_ch ^= LED_SEGMENT_MASK;
	pdat = PORTC & ~( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
	pdat |= (seg_ch & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
	PORTC = pdat;
	seg_ch >>= 2;
     af2:	86 95       	lsr	r24
     af4:	86 95       	lsr	r24
	pdat = PORTB & ~( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
	pdat |= (seg_ch & ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) ));
     af6:	88 73       	andi	r24, 0x38	; 56
	seg_ch ^= LED_SEGMENT_MASK;
	pdat = PORTC & ~( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
	pdat |= (seg_ch & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
	PORTC = pdat;
	seg_ch >>= 2;
	pdat = PORTB & ~( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     af8:	97 7c       	andi	r25, 0xC7	; 199
	pdat |= (seg_ch & ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) ));
     afa:	89 2b       	or	r24, r25
	PORTB = pdat;
     afc:	88 bb       	out	0x18, r24	; 24
     afe:	08 95       	ret

00000b00 <enable_led_segments_pullups>:

// Turns segment port bits to HI-Z and
// enables pull-ups
void enable_led_segments_pullups()
{
	PORTC |= ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
     b00:	85 b3       	in	r24, 0x15	; 21
     b02:	8f 61       	ori	r24, 0x1F	; 31
     b04:	85 bb       	out	0x15, r24	; 21
	PORTB |= ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     b06:	88 b3       	in	r24, 0x18	; 24
     b08:	88 63       	ori	r24, 0x38	; 56
     b0a:	88 bb       	out	0x18, r24	; 24
     b0c:	08 95       	ret

00000b0e <enable_led_segments>:
}	

void enable_led_segments()
{
	DDRC |= ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
     b0e:	84 b3       	in	r24, 0x14	; 20
     b10:	8f 61       	ori	r24, 0x1F	; 31
     b12:	84 bb       	out	0x14, r24	; 20
	DDRB |= ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     b14:	87 b3       	in	r24, 0x17	; 23
     b16:	88 63       	ori	r24, 0x38	; 56
     b18:	87 bb       	out	0x17, r24	; 23
     b1a:	08 95       	ret

00000b1c <disable_led_segments>:
}

void disable_led_segments()
{
	DDRC &= ~( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
     b1c:	84 b3       	in	r24, 0x14	; 20
     b1e:	80 7e       	andi	r24, 0xE0	; 224
     b20:	84 bb       	out	0x14, r24	; 20
	DDRB &= ~( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     b22:	87 b3       	in	r24, 0x17	; 23
     b24:	87 7c       	andi	r24, 0xC7	; 199
     b26:	87 bb       	out	0x17, r24	; 23
     b28:	08 95       	ret

00000b2a <capture_button_state>:


void capture_button_state()
{
	uint8_t pdat;
	pdat = PINB  & ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     b2a:	86 b3       	in	r24, 0x16	; 22
     b2c:	88 73       	andi	r24, 0x38	; 56
	pdat <<= 2;
	pdat |= (PINC & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
     b2e:	93 b3       	in	r25, 0x13	; 19

void capture_button_state()
{
	uint8_t pdat;
	pdat = PINB  & ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
	pdat <<= 2;
     b30:	88 0f       	add	r24, r24
     b32:	88 0f       	add	r24, r24
	pdat |= (PINC & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
     b34:	9f 71       	andi	r25, 0x1F	; 31
     b36:	89 2b       	or	r24, r25
	raw_button_state = pdat ^ RAW_BUTTONS_INVERSE_MASK;
     b38:	80 95       	com	r24
     b3a:	80 93 cb 01 	sts	0x01CB, r24
     b3e:	08 95       	ret

00000b40 <processItemFunction>:
//	Arguments:
//		funcAddr - address of the function to run.
//-----------------------------------------------------------------//
static inline void processItemFunction(FuncPtr funcAddr)
{
	if (funcAddr != 0)
     b40:	00 97       	sbiw	r24, 0x00	; 0
     b42:	11 f0       	breq	.+4      	; 0xb48 <processItemFunction+0x8>
		((FuncPtr)funcAddr)();
     b44:	fc 01       	movw	r30, r24
     b46:	09 94       	ijmp
     b48:	08 95       	ret

00000b4a <mf_setTempLeave>:
	userTimer.Enabled = 1;
}

void mf_leafExit(void)
{
	userTimer.Enabled = 0;	
     b4a:	80 91 7c 00 	lds	r24, 0x007C
     b4e:	8e 7f       	andi	r24, 0xFE	; 254
     b50:	80 93 7c 00 	sts	0x007C, r24
}

void mf_setTempLeave(void)
{
	mf_leafExit();
	if (!(jumpFlags & DISCARD_CHANGES))
     b54:	80 91 6f 01 	lds	r24, 0x016F
     b58:	85 fd       	sbrc	r24, 5
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <mf_setTempLeave+0x1a>
	{
		p.setup_temp_value = setupValue_u8;		// Apply changes		
     b5c:	80 91 6d 01 	lds	r24, 0x016D
     b60:	80 93 b5 01 	sts	0x01B5, r24
     b64:	08 95       	ret

00000b66 <mf_leafSelectAct>:
	userTimer.FA_GE = 1;	
}

void mf_leafSelectAct(void)
{
	userTimer.Timer = 0;
     b66:	10 92 7d 00 	sts	0x007D, r1
	userTimer.Enabled = 1;
     b6a:	ec e7       	ldi	r30, 0x7C	; 124
     b6c:	f0 e0       	ldi	r31, 0x00	; 0
     b6e:	80 81       	ld	r24, Z
     b70:	81 60       	ori	r24, 0x01	; 1
     b72:	80 83       	st	Z, r24
     b74:	08 95       	ret

00000b76 <mf_sndenLeave>:
}

void mf_leafExit(void)
{
	userTimer.Enabled = 0;	
     b76:	80 91 7c 00 	lds	r24, 0x007C
     b7a:	8e 7f       	andi	r24, 0xFE	; 254
     b7c:	80 93 7c 00 	sts	0x007C, r24
}

void mf_sndenLeave(void)
{
	mf_leafExit();
	if (!(jumpFlags & DISCARD_CHANGES))
     b80:	80 91 6f 01 	lds	r24, 0x016F
     b84:	85 fd       	sbrc	r24, 5
     b86:	04 c0       	rjmp	.+8      	; 0xb90 <mf_sndenLeave+0x1a>
	{
		p.sound_enable = setupValue_u8;		// Apply changes
     b88:	80 91 6d 01 	lds	r24, 0x016D
     b8c:	80 93 b7 01 	sts	0x01B7, r24
     b90:	08 95       	ret

00000b92 <mf_autopoffLeave>:
	userTimer.Enabled = 1;
}

void mf_leafExit(void)
{
	userTimer.Enabled = 0;	
     b92:	80 91 7c 00 	lds	r24, 0x007C
     b96:	8e 7f       	andi	r24, 0xFE	; 254
     b98:	80 93 7c 00 	sts	0x007C, r24
}

void mf_autopoffLeave(void)
{
	mf_leafExit();
	if (!(jumpFlags & DISCARD_CHANGES))
     b9c:	80 91 6f 01 	lds	r24, 0x016F
     ba0:	85 fd       	sbrc	r24, 5
     ba2:	04 c0       	rjmp	.+8      	; 0xbac <mf_autopoffLeave+0x1a>
	{
		p.power_off_timeout = setupValue_u8;		// Apply changes
     ba4:	80 91 6d 01 	lds	r24, 0x016D
     ba8:	80 93 b8 01 	sts	0x01B8, r24
     bac:	08 95       	ret

00000bae <mf_actpoffLeave>:
	printLedBuffer(0,"   OFF");
}

void mf_actpoffLeave(void)
{
	autoPowerOffState = AUTO_POFF_LEAVE;		// Set global flag
     bae:	82 e0       	ldi	r24, 0x02	; 2
     bb0:	80 93 5e 01 	sts	0x015E, r24
     bb4:	08 95       	ret

00000bb6 <mf_calibDoExit>:
	userTimer.Enabled = 1;
}

void mf_leafExit(void)
{
	userTimer.Enabled = 0;	
     bb6:	ec e7       	ldi	r30, 0x7C	; 124
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	80 81       	ld	r24, Z
     bbc:	8e 7f       	andi	r24, 0xFE	; 254
     bbe:	80 83       	st	Z, r24


void mf_calibDoExit(void)
{
	mf_leafExit();
	heaterState &= ~CALIBRATION_ACTIVE;
     bc0:	01 98       	cbi	0x00, 1	; 0
     bc2:	08 95       	ret

00000bc4 <mf_actpoffDo>:
}

// Indication of power off mode
void mf_actpoffDo(void)
{
	autoPowerOffState = AUTO_POFF_ACTIVE;		// Set global flag
     bc4:	81 e0       	ldi	r24, 0x01	; 1
     bc6:	80 93 5e 01 	sts	0x015E, r24
	printLedBuffer(0,"   OFF");
     bca:	6a ea       	ldi	r22, 0xAA	; 170
     bcc:	70 e0       	ldi	r23, 0x00	; 0
     bce:	80 e0       	ldi	r24, 0x00	; 0
     bd0:	44 cf       	rjmp	.-376    	; 0xa5a <printLedBuffer>

00000bd2 <mf_cdoneDo>:
}


void mf_cdoneDo(void)
{
	printLedBuffer(0," DONE ");
     bd2:	61 eb       	ldi	r22, 0xB1	; 177
     bd4:	70 e0       	ldi	r23, 0x00	; 0
     bd6:	80 e0       	ldi	r24, 0x00	; 0
     bd8:	40 cf       	rjmp	.-384    	; 0xa5a <printLedBuffer>

00000bda <mf_actpoffSelect>:
// Menu item "Active power off"
// Specific menu item - used as indicator of system state
//------------------------------------------------//
void mf_actpoffSelect(void)
{
	clearExtraLeds(LED_TEMP | LED_ROLL);
     bda:	80 ec       	ldi	r24, 0xC0	; 192
     bdc:	6c cf       	rjmp	.-296    	; 0xab6 <clearExtraLeds>

00000bde <mf_leafSelect>:

// Select and exit functions, common for leaf menu items 

void mf_leafSelect(void)
{
	clearExtraLeds(LED_TEMP | LED_ROLL);
     bde:	80 ec       	ldi	r24, 0xC0	; 192
     be0:	6a df       	rcall	.-300    	; 0xab6 <clearExtraLeds>
	userTimer.FA_GE = 1;	
     be2:	ec e7       	ldi	r30, 0x7C	; 124
     be4:	f0 e0       	ldi	r31, 0x00	; 0
     be6:	80 81       	ld	r24, Z
     be8:	80 61       	ori	r24, 0x10	; 16
     bea:	80 83       	st	Z, r24
     bec:	08 95       	ret

00000bee <mf_calibP2Select>:
	printLedBuffer(0,"P1    ");
}

void mf_calibP2Select(void)
{
	mf_leafSelect();
     bee:	f7 df       	rcall	.-18     	; 0xbde <mf_leafSelect>
	setupValue_u8 = cp.cpoint2;	// determine which point to use at select func
     bf0:	80 91 b0 01 	lds	r24, 0x01B0
     bf4:	80 93 6d 01 	sts	0x016D, r24
	cpointNum = 2;
     bf8:	82 e0       	ldi	r24, 0x02	; 2
     bfa:	80 93 6e 01 	sts	0x016E, r24
	printLedBuffer(0,"P2    ");
     bfe:	68 eb       	ldi	r22, 0xB8	; 184
     c00:	70 e0       	ldi	r23, 0x00	; 0
     c02:	80 e0       	ldi	r24, 0x00	; 0
     c04:	2a cf       	rjmp	.-428    	; 0xa5a <printLedBuffer>

00000c06 <mf_calibP1Select>:
// There are two calibration points - the menu item is 
// same for both.
//------------------------------------------------//
void mf_calibP1Select(void)
{
	mf_leafSelect();
     c06:	eb df       	rcall	.-42     	; 0xbde <mf_leafSelect>
	setupValue_u8 = cp.cpoint1;	// determine which point to use at select func
     c08:	80 91 af 01 	lds	r24, 0x01AF
     c0c:	80 93 6d 01 	sts	0x016D, r24
	cpointNum = 1;
     c10:	81 e0       	ldi	r24, 0x01	; 1
     c12:	80 93 6e 01 	sts	0x016E, r24
	printLedBuffer(0,"P1    ");
     c16:	6f eb       	ldi	r22, 0xBF	; 191
     c18:	70 e0       	ldi	r23, 0x00	; 0
     c1a:	80 e0       	ldi	r24, 0x00	; 0
     c1c:	1e cf       	rjmp	.-452    	; 0xa5a <printLedBuffer>

00000c1e <mf_autopoffSelect>:
//------------------------------------------------//
// Menu item "Auto power off setup"
//------------------------------------------------//
void mf_autopoffSelect(void)
{
	mf_leafSelect();						
     c1e:	df df       	rcall	.-66     	; 0xbde <mf_leafSelect>
	setupValue_u8 = p.power_off_timeout;	// Make a copy of parameter being changed
     c20:	80 91 b8 01 	lds	r24, 0x01B8
     c24:	80 93 6d 01 	sts	0x016D, r24
     c28:	08 95       	ret

00000c2a <mf_sndenSelect>:
//------------------------------------------------//
// Menu item "Sound enable/disable"
//------------------------------------------------//
void mf_sndenSelect(void)
{
	mf_leafSelect();					
     c2a:	d9 df       	rcall	.-78     	; 0xbde <mf_leafSelect>
	setupValue_u8 = p.sound_enable;		// Make a copy of parameter being changed
     c2c:	80 91 b7 01 	lds	r24, 0x01B7
     c30:	80 93 6d 01 	sts	0x016D, r24
     c34:	08 95       	ret

00000c36 <mf_rollLeave>:
	userTimer.Enabled = 1;
}

void mf_leafExit(void)
{
	userTimer.Enabled = 0;	
     c36:	ec e7       	ldi	r30, 0x7C	; 124
     c38:	f0 e0       	ldi	r31, 0x00	; 0
     c3a:	80 81       	ld	r24, Z
     c3c:	8e 7f       	andi	r24, 0xFE	; 254
     c3e:	80 83       	st	Z, r24
}

void mf_rollLeave(void)
{
	mf_leafExit();
	clearExtraLeds(LED_ROLL);
     c40:	80 e4       	ldi	r24, 0x40	; 64
     c42:	39 cf       	rjmp	.-398    	; 0xab6 <clearExtraLeds>

00000c44 <mf_setTempSelect>:
// Menu item "Temperature setting"
// TOP level
//------------------------------------------------//
void mf_setTempSelect(void)
{
	clearExtraLeds(LED_TEMP);
     c44:	80 e8       	ldi	r24, 0x80	; 128
     c46:	37 df       	rcall	.-402    	; 0xab6 <clearExtraLeds>
	mf_leafSelectAct();						// setup and start timer
     c48:	8e df       	rcall	.-228    	; 0xb66 <mf_leafSelectAct>
	setupValue_u8 = p.setup_temp_value;		// Make a copy of parameter being changed
     c4a:	80 91 b5 01 	lds	r24, 0x01B5
     c4e:	80 93 6d 01 	sts	0x016D, r24
     c52:	08 95       	ret

00000c54 <mf_realTempLeave>:
	}
}

void mf_realTempLeave(void)
{
	clearExtraLeds(LED_TEMP);
     c54:	80 e8       	ldi	r24, 0x80	; 128
     c56:	2f cf       	rjmp	.-418    	; 0xab6 <clearExtraLeds>

00000c58 <mf_cdoneSelect>:
// There are two calibration points - the menu item is
// same for both.
//------------------------------------------------//
void mf_cdoneSelect(void)
{
	update_CalibrationPoint(cpointNum,setupValue_u8);
     c58:	60 91 6d 01 	lds	r22, 0x016D
     c5c:	80 91 6e 01 	lds	r24, 0x016E
     c60:	b1 db       	rcall	.-2206   	; 0x3c4 <update_CalibrationPoint>
	calculateCoeffs();
     c62:	11 db       	rcall	.-2526   	; 0x286 <calculateCoeffs>
	saveCalibrationToEEPROM();
     c64:	5e cd       	rjmp	.-1348   	; 0x722 <saveCalibrationToEEPROM>

00000c66 <mf_autopoffDo>:
}

void mf_autopoffDo(void)
{
	char *str = (char *)&temp_str;
	memcpy_P(str,&ms_autoPoffDo,7);	
     c66:	47 e0       	ldi	r20, 0x07	; 7
     c68:	50 e0       	ldi	r21, 0x00	; 0
     c6a:	6c e6       	ldi	r22, 0x6C	; 108
     c6c:	70 e0       	ldi	r23, 0x00	; 0
     c6e:	8c ec       	ldi	r24, 0xCC	; 204
     c70:	91 e0       	ldi	r25, 0x01	; 1
     c72:	95 d7       	rcall	.+3882   	; 0x1b9e <memcpy_P>
		
	if (buttons.action_rep & BD_UP)
     c74:	80 91 ac 01 	lds	r24, 0x01AC
     c78:	86 ff       	sbrs	r24, 6
     c7a:	06 c0       	rjmp	.+12     	; 0xc88 <mf_autopoffDo+0x22>
	{
		if (setupValue_u8 < MAX_POWEROFF_TIMEOUT)
     c7c:	80 91 6d 01 	lds	r24, 0x016D
     c80:	8f 35       	cpi	r24, 0x5F	; 95
     c82:	58 f4       	brcc	.+22     	; 0xc9a <mf_autopoffDo+0x34>
			setupValue_u8 += POWEROFF_SET_STEP;
     c84:	8b 5f       	subi	r24, 0xFB	; 251
     c86:	07 c0       	rjmp	.+14     	; 0xc96 <mf_autopoffDo+0x30>
		restartMenuTimer();
	}
	else if (buttons.action_rep & BD_DOWN)
     c88:	87 ff       	sbrs	r24, 7
     c8a:	09 c0       	rjmp	.+18     	; 0xc9e <mf_autopoffDo+0x38>
	{
		if (setupValue_u8 > MIN_POWEROFF_TIMEOUT)
     c8c:	80 91 6d 01 	lds	r24, 0x016D
     c90:	86 30       	cpi	r24, 0x06	; 6
     c92:	18 f0       	brcs	.+6      	; 0xc9a <mf_autopoffDo+0x34>
			setupValue_u8 -= POWEROFF_SET_STEP;
     c94:	85 50       	subi	r24, 0x05	; 5
     c96:	80 93 6d 01 	sts	0x016D, r24
//	 Restarts menu state timeout
//	Should be used in RUN function when control buttons are pressed.
//-----------------------------------------------------------------//
static void restartMenuTimer(void)
{
	menuTimer.Timer = 0;
     c9a:	10 92 81 00 	sts	0x0081, r1
		if (setupValue_u8 > MIN_POWEROFF_TIMEOUT)
			setupValue_u8 -= POWEROFF_SET_STEP;
		restartMenuTimer();
	}	
		
	if (userTimer.FA_GE)
     c9e:	80 91 7c 00 	lds	r24, 0x007C
     ca2:	84 ff       	sbrs	r24, 4
     ca4:	10 c0       	rjmp	.+32     	; 0xcc6 <mf_autopoffDo+0x60>
	{
		if (setupValue_u8 < MAX_POWEROFF_TIMEOUT)
     ca6:	80 91 6d 01 	lds	r24, 0x016D
     caa:	8f 35       	cpi	r24, 0x5F	; 95
     cac:	30 f4       	brcc	.+12     	; 0xcba <mf_autopoffDo+0x54>
		{
			u16toa_align_right(setupValue_u8,str + 4,NO_TERMINATING_ZERO | 2);	
     cae:	42 e8       	ldi	r20, 0x82	; 130
     cb0:	60 ed       	ldi	r22, 0xD0	; 208
     cb2:	71 e0       	ldi	r23, 0x01	; 1
     cb4:	90 e0       	ldi	r25, 0x00	; 0
     cb6:	13 d2       	rcall	.+1062   	; 0x10de <u16toa_align_right>
     cb8:	06 c0       	rjmp	.+12     	; 0xcc6 <mf_autopoffDo+0x60>
		}			
		else 
		{
			str[4] = 'N';
     cba:	8e e4       	ldi	r24, 0x4E	; 78
     cbc:	80 93 d0 01 	sts	0x01D0, r24
			str[5] = 'O';
     cc0:	8f e4       	ldi	r24, 0x4F	; 79
     cc2:	80 93 d1 01 	sts	0x01D1, r24
		}			
	}		
		
	printLedBuffer(0,str);
     cc6:	6c ec       	ldi	r22, 0xCC	; 204
     cc8:	71 e0       	ldi	r23, 0x01	; 1
     cca:	80 e0       	ldi	r24, 0x00	; 0
     ccc:	c6 ce       	rjmp	.-628    	; 0xa5a <printLedBuffer>

00000cce <mf_calibDo>:
}

void mf_calibDo(void)
{
	char *str = (char *)&temp_str;
	memcpy_P(str,&ms_calibDo,4);
     cce:	44 e0       	ldi	r20, 0x04	; 4
     cd0:	50 e0       	ldi	r21, 0x00	; 0
     cd2:	68 e6       	ldi	r22, 0x68	; 104
     cd4:	70 e0       	ldi	r23, 0x00	; 0
     cd6:	8c ec       	ldi	r24, 0xCC	; 204
     cd8:	91 e0       	ldi	r25, 0x01	; 1
     cda:	61 d7       	rcall	.+3778   	; 0x1b9e <memcpy_P>
	
	if (buttons.action_rep & BD_UP)
     cdc:	80 91 ac 01 	lds	r24, 0x01AC
     ce0:	86 ff       	sbrs	r24, 6
     ce2:	06 c0       	rjmp	.+12     	; 0xcf0 <mf_calibDo+0x22>
	{
		if (setupValue_u8 < MAX_CALIB_TEMP)
     ce4:	80 91 6d 01 	lds	r24, 0x016D
     ce8:	8a 3f       	cpi	r24, 0xFA	; 250
     cea:	58 f4       	brcc	.+22     	; 0xd02 <mf_calibDo+0x34>
		setupValue_u8 += CALIB_TEMP_STEP;
     cec:	8f 5f       	subi	r24, 0xFF	; 255
     cee:	07 c0       	rjmp	.+14     	; 0xcfe <mf_calibDo+0x30>
	}
	else if (buttons.action_rep & BD_DOWN)
     cf0:	87 ff       	sbrs	r24, 7
     cf2:	07 c0       	rjmp	.+14     	; 0xd02 <mf_calibDo+0x34>
	{
		if (setupValue_u8 > MIN_CALIB_TEMP)
     cf4:	80 91 6d 01 	lds	r24, 0x016D
     cf8:	8b 30       	cpi	r24, 0x0B	; 11
     cfa:	18 f0       	brcs	.+6      	; 0xd02 <mf_calibDo+0x34>
		setupValue_u8 -= CALIB_TEMP_STEP;
     cfc:	81 50       	subi	r24, 0x01	; 1
     cfe:	80 93 6d 01 	sts	0x016D, r24
	}
	
	if (userTimer.FA_GE)
     d02:	80 91 7c 00 	lds	r24, 0x007C
     d06:	84 ff       	sbrs	r24, 4
     d08:	08 c0       	rjmp	.+16     	; 0xd1a <mf_calibDo+0x4c>
	{	
		// Blinking setup value
		u16toa_align_right(setupValue_u8,str,3);	
     d0a:	43 e0       	ldi	r20, 0x03	; 3
     d0c:	6c ec       	ldi	r22, 0xCC	; 204
     d0e:	71 e0       	ldi	r23, 0x01	; 1
     d10:	80 91 6d 01 	lds	r24, 0x016D
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	e3 d1       	rcall	.+966    	; 0x10de <u16toa_align_right>
     d18:	02 c0       	rjmp	.+4      	; 0xd1e <mf_calibDo+0x50>
	}
	else
	{
		// This is executed only when calibration is active and setup value is blinking
		resetAutoPowerOffCounter();
     d1a:	1e d6       	rcall	.+3132   	; 0x1958 <resetAutoPowerOffCounter>
		heaterState |= CALIBRATION_ACTIVE; 
     d1c:	01 9a       	sbi	0x00, 1	; 0
	}
	
	printLedBuffer(3,str);
     d1e:	6c ec       	ldi	r22, 0xCC	; 204
     d20:	71 e0       	ldi	r23, 0x01	; 1
     d22:	83 e0       	ldi	r24, 0x03	; 3
     d24:	9a ce       	rjmp	.-716    	; 0xa5a <printLedBuffer>

00000d26 <mf_sndenDo>:
}

void mf_sndenDo(void)
{
	char *str = (char *)&temp_str;
	memcpy_P(str,&ms_soundEnDo,7);	
     d26:	47 e0       	ldi	r20, 0x07	; 7
     d28:	50 e0       	ldi	r21, 0x00	; 0
     d2a:	63 e7       	ldi	r22, 0x73	; 115
     d2c:	70 e0       	ldi	r23, 0x00	; 0
     d2e:	8c ec       	ldi	r24, 0xCC	; 204
     d30:	91 e0       	ldi	r25, 0x01	; 1
     d32:	35 d7       	rcall	.+3690   	; 0x1b9e <memcpy_P>
		
	if (buttons.action_rep & (BD_DOWN | BD_UP))
     d34:	80 91 ac 01 	lds	r24, 0x01AC
     d38:	80 7c       	andi	r24, 0xC0	; 192
     d3a:	49 f0       	breq	.+18     	; 0xd4e <mf_sndenDo+0x28>
	{
		setupValue_u8 = !setupValue_u8;
     d3c:	81 e0       	ldi	r24, 0x01	; 1
     d3e:	90 91 6d 01 	lds	r25, 0x016D
     d42:	91 11       	cpse	r25, r1
     d44:	80 e0       	ldi	r24, 0x00	; 0
     d46:	80 93 6d 01 	sts	0x016D, r24
//	 Restarts menu state timeout
//	Should be used in RUN function when control buttons are pressed.
//-----------------------------------------------------------------//
static void restartMenuTimer(void)
{
	menuTimer.Timer = 0;
     d4a:	10 92 81 00 	sts	0x0081, r1
	{
		setupValue_u8 = !setupValue_u8;
		restartMenuTimer();
	}			
		
	if (userTimer.FA_GE)
     d4e:	80 91 7c 00 	lds	r24, 0x007C
     d52:	84 ff       	sbrs	r24, 4
     d54:	11 c0       	rjmp	.+34     	; 0xd78 <mf_sndenDo+0x52>
	{
		if (setupValue_u8)		
     d56:	80 91 6d 01 	lds	r24, 0x016D
     d5a:	88 23       	and	r24, r24
     d5c:	29 f0       	breq	.+10     	; 0xd68 <mf_sndenDo+0x42>
		{
			str[4] = 'O';
     d5e:	8f e4       	ldi	r24, 0x4F	; 79
     d60:	80 93 d0 01 	sts	0x01D0, r24
			str[5] = 'N';
     d64:	8e e4       	ldi	r24, 0x4E	; 78
     d66:	06 c0       	rjmp	.+12     	; 0xd74 <mf_sndenDo+0x4e>
		}
		else
		{
			str[3] = 'O';
     d68:	8f e4       	ldi	r24, 0x4F	; 79
     d6a:	80 93 cf 01 	sts	0x01CF, r24
			str[4] = 'F';
     d6e:	86 e4       	ldi	r24, 0x46	; 70
     d70:	80 93 d0 01 	sts	0x01D0, r24
			str[5] = 'F';
     d74:	80 93 d1 01 	sts	0x01D1, r24
		}			
	}
		
	printLedBuffer(0,str);
     d78:	6c ec       	ldi	r22, 0xCC	; 204
     d7a:	71 e0       	ldi	r23, 0x01	; 1
     d7c:	80 e0       	ldi	r24, 0x00	; 0
     d7e:	6d de       	rcall	.-806    	; 0xa5a <printLedBuffer>
	setComma(2);
     d80:	82 e0       	ldi	r24, 0x02	; 2
     d82:	87 ce       	rjmp	.-754    	; 0xa92 <setComma>

00000d84 <mf_rollDo>:
}

void mf_rollDo(void)
{
	char *str = (char *)&temp_str;
	memcpy_P(str,&ms_rollDo,7);
     d84:	47 e0       	ldi	r20, 0x07	; 7
     d86:	50 e0       	ldi	r21, 0x00	; 0
     d88:	6a e7       	ldi	r22, 0x7A	; 122
     d8a:	70 e0       	ldi	r23, 0x00	; 0
     d8c:	8c ec       	ldi	r24, 0xCC	; 204
     d8e:	91 e0       	ldi	r25, 0x01	; 1
     d90:	06 d7       	rcall	.+3596   	; 0x1b9e <memcpy_P>
		
	if (buttons.action_rep & BD_UP)
     d92:	90 91 ac 01 	lds	r25, 0x01AC
     d96:	80 91 b6 01 	lds	r24, 0x01B6
     d9a:	96 ff       	sbrs	r25, 6
     d9c:	04 c0       	rjmp	.+8      	; 0xda6 <mf_rollDo+0x22>
	{
		if (p.rollCycleSet < MAX_ROLL_CYCLES)
     d9e:	83 36       	cpi	r24, 0x63	; 99
     da0:	48 f4       	brcc	.+18     	; 0xdb4 <mf_rollDo+0x30>
			p.rollCycleSet += ROLL_CYCLES_STEP;
     da2:	8f 5f       	subi	r24, 0xFF	; 255
     da4:	05 c0       	rjmp	.+10     	; 0xdb0 <mf_rollDo+0x2c>
	}
	else if (buttons.action_rep & BD_DOWN)
     da6:	97 ff       	sbrs	r25, 7
     da8:	05 c0       	rjmp	.+10     	; 0xdb4 <mf_rollDo+0x30>
	{
		if (p.rollCycleSet > MIN_ROLL_CYCLES)
     daa:	82 30       	cpi	r24, 0x02	; 2
     dac:	18 f0       	brcs	.+6      	; 0xdb4 <mf_rollDo+0x30>
			p.rollCycleSet -= ROLL_CYCLES_STEP;
     dae:	81 50       	subi	r24, 0x01	; 1
     db0:	80 93 b6 01 	sts	0x01B6, r24
	}	
		
	u16toa_align_right(p.rollCycleSet,str + 4,NO_TERMINATING_ZERO | 2);
     db4:	42 e8       	ldi	r20, 0x82	; 130
     db6:	60 ed       	ldi	r22, 0xD0	; 208
     db8:	71 e0       	ldi	r23, 0x01	; 1
     dba:	80 91 b6 01 	lds	r24, 0x01B6
     dbe:	90 e0       	ldi	r25, 0x00	; 0
     dc0:	8e d1       	rcall	.+796    	; 0x10de <u16toa_align_right>
	
	if ((!(rollState & ROLL_CYCLE)) || (userTimer.FA_GE))
     dc2:	80 91 8d 01 	lds	r24, 0x018D
     dc6:	82 ff       	sbrs	r24, 2
     dc8:	04 c0       	rjmp	.+8      	; 0xdd2 <mf_rollDo+0x4e>
     dca:	80 91 7c 00 	lds	r24, 0x007C
     dce:	84 ff       	sbrs	r24, 4
     dd0:	07 c0       	rjmp	.+14     	; 0xde0 <mf_rollDo+0x5c>
	{
		u16toa_align_right(activeRollCycle,str + 1,NO_TERMINATING_ZERO | 2);
     dd2:	42 e8       	ldi	r20, 0x82	; 130
     dd4:	6d ec       	ldi	r22, 0xCD	; 205
     dd6:	71 e0       	ldi	r23, 0x01	; 1
     dd8:	80 91 8c 01 	lds	r24, 0x018C
     ddc:	90 e0       	ldi	r25, 0x00	; 0
     dde:	7f d1       	rcall	.+766    	; 0x10de <u16toa_align_right>
	}
	
	str[0] = 0;
     de0:	10 92 cc 01 	sts	0x01CC, r1
	if (isTopPointValid())
     de4:	f0 d3       	rcall	.+2016   	; 0x15c6 <isTopPointValid>
     de6:	88 23       	and	r24, r24
     de8:	29 f0       	breq	.+10     	; 0xdf4 <mf_rollDo+0x70>
		str[0] |= SEGA;
     dea:	80 91 cc 01 	lds	r24, 0x01CC
     dee:	81 60       	ori	r24, 0x01	; 1
     df0:	80 93 cc 01 	sts	0x01CC, r24
	if (isBottomPointValid())
     df4:	fc d3       	rcall	.+2040   	; 0x15ee <isBottomPointValid>
     df6:	88 23       	and	r24, r24
     df8:	29 f0       	breq	.+10     	; 0xe04 <mf_rollDo+0x80>
		str[0] |= SEGD;
     dfa:	80 91 cc 01 	lds	r24, 0x01CC
     dfe:	88 60       	ori	r24, 0x08	; 8
     e00:	80 93 cc 01 	sts	0x01CC, r24
	if (str[0] == 0)
     e04:	80 91 cc 01 	lds	r24, 0x01CC
     e08:	81 11       	cpse	r24, r1
     e0a:	03 c0       	rjmp	.+6      	; 0xe12 <mf_rollDo+0x8e>
		str[0] = ' ';
     e0c:	80 e2       	ldi	r24, 0x20	; 32
     e0e:	80 93 cc 01 	sts	0x01CC, r24
		
	printLedBuffer(0,str);
     e12:	6c ec       	ldi	r22, 0xCC	; 204
     e14:	71 e0       	ldi	r23, 0x01	; 1
     e16:	80 e0       	ldi	r24, 0x00	; 0
     e18:	20 ce       	rjmp	.-960    	; 0xa5a <printLedBuffer>

00000e1a <mf_rollSelect>:
// TOP level
//------------------------------------------------//

void mf_rollSelect(void)
{
	mf_leafSelectAct();		// setup and start timer
     e1a:	a5 de       	rcall	.-694    	; 0xb66 <mf_leafSelectAct>
	setExtraLeds(LED_ROLL);
     e1c:	80 e4       	ldi	r24, 0x40	; 64
     e1e:	45 ce       	rjmp	.-886    	; 0xaaa <setExtraLeds>

00000e20 <mf_setTempDo>:
}

void mf_setTempDo(void)
{
	char *str = (char *)&temp_str;
	memcpy_P(str,&ms_realTempDo,7);
     e20:	47 e0       	ldi	r20, 0x07	; 7
     e22:	50 e0       	ldi	r21, 0x00	; 0
     e24:	61 e8       	ldi	r22, 0x81	; 129
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	8c ec       	ldi	r24, 0xCC	; 204
     e2a:	91 e0       	ldi	r25, 0x01	; 1
     e2c:	b8 d6       	rcall	.+3440   	; 0x1b9e <memcpy_P>
	
	if (buttons.action_rep & BD_UP)
     e2e:	90 91 ac 01 	lds	r25, 0x01AC
     e32:	80 91 6d 01 	lds	r24, 0x016D
     e36:	96 ff       	sbrs	r25, 6
     e38:	04 c0       	rjmp	.+8      	; 0xe42 <mf_setTempDo+0x22>
	{
		if (setupValue_u8 < MAX_SET_TEMP)
     e3a:	8f 3f       	cpi	r24, 0xFF	; 255
     e3c:	49 f0       	breq	.+18     	; 0xe50 <mf_setTempDo+0x30>
			setupValue_u8 += TEMP_SET_STEP;
     e3e:	8b 5f       	subi	r24, 0xFB	; 251
     e40:	05 c0       	rjmp	.+10     	; 0xe4c <mf_setTempDo+0x2c>
		restartMenuTimer();
	}
	else if (buttons.action_rep & BD_DOWN)
     e42:	97 ff       	sbrs	r25, 7
     e44:	07 c0       	rjmp	.+14     	; 0xe54 <mf_setTempDo+0x34>
	{
		if (setupValue_u8 > MIN_SET_TEMP)
     e46:	8f 31       	cpi	r24, 0x1F	; 31
     e48:	18 f0       	brcs	.+6      	; 0xe50 <mf_setTempDo+0x30>
			setupValue_u8 -= TEMP_SET_STEP;
     e4a:	85 50       	subi	r24, 0x05	; 5
     e4c:	80 93 6d 01 	sts	0x016D, r24
//	 Restarts menu state timeout
//	Should be used in RUN function when control buttons are pressed.
//-----------------------------------------------------------------//
static void restartMenuTimer(void)
{
	menuTimer.Timer = 0;
     e50:	10 92 81 00 	sts	0x0081, r1
			setupValue_u8 -= TEMP_SET_STEP;
		restartMenuTimer();
	}					
		
	// Output setting to LED
	if (setupValue_u8 < MAX_SET_TEMP)
     e54:	80 91 6d 01 	lds	r24, 0x016D
     e58:	8f 3f       	cpi	r24, 0xFF	; 255
     e5a:	41 f0       	breq	.+16     	; 0xe6c <mf_setTempDo+0x4c>
	{
		u16toa_align_right(setupValue_u8,str,NO_TERMINATING_ZERO | 4);
     e5c:	44 e8       	ldi	r20, 0x84	; 132
     e5e:	6c ec       	ldi	r22, 0xCC	; 204
     e60:	71 e0       	ldi	r23, 0x01	; 1
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	3c d1       	rcall	.+632    	; 0x10de <u16toa_align_right>
		printLedBuffer(0,str);
     e66:	6c ec       	ldi	r22, 0xCC	; 204
     e68:	71 e0       	ldi	r23, 0x01	; 1
     e6a:	02 c0       	rjmp	.+4      	; 0xe70 <mf_setTempDo+0x50>
	}		
	else
	{
		printLedBuffer(0," UNREG");
     e6c:	66 ec       	ldi	r22, 0xC6	; 198
     e6e:	70 e0       	ldi	r23, 0x00	; 0
     e70:	80 e0       	ldi	r24, 0x00	; 0
     e72:	f3 dd       	rcall	.-1050   	; 0xa5a <printLedBuffer>
	}
	
	if (userTimer.FA_GE)
     e74:	80 91 7c 00 	lds	r24, 0x007C
     e78:	84 ff       	sbrs	r24, 4
     e7a:	02 c0       	rjmp	.+4      	; 0xe80 <mf_setTempDo+0x60>
		setExtraLeds(LED_TEMP);
     e7c:	80 e8       	ldi	r24, 0x80	; 128
     e7e:	15 ce       	rjmp	.-982    	; 0xaaa <setExtraLeds>
	else
		clearExtraLeds(LED_TEMP);
     e80:	80 e8       	ldi	r24, 0x80	; 128
     e82:	19 ce       	rjmp	.-974    	; 0xab6 <clearExtraLeds>

00000e84 <mf_realTempSelect>:
// Menu item "Real temperature indication"
// TOP level
//------------------------------------------------//
void mf_realTempSelect(void)
{
	setExtraLeds(LED_TEMP);
     e84:	80 e8       	ldi	r24, 0x80	; 128
     e86:	11 ce       	rjmp	.-990    	; 0xaaa <setExtraLeds>

00000e88 <mf_realTempDo>:
}

void mf_realTempDo(void)
{
	char *str = (char *)&temp_str;
	memcpy_P(str,&ms_realTempDo,7);
     e88:	47 e0       	ldi	r20, 0x07	; 7
     e8a:	50 e0       	ldi	r21, 0x00	; 0
     e8c:	61 e8       	ldi	r22, 0x81	; 129
     e8e:	70 e0       	ldi	r23, 0x00	; 0
     e90:	8c ec       	ldi	r24, 0xCC	; 204
     e92:	91 e0       	ldi	r25, 0x01	; 1
     e94:	84 d6       	rcall	.+3336   	; 0x1b9e <memcpy_P>
	
	if (adc_status & (SENSOR_ERROR_NO_PRESENT))
     e96:	80 91 a7 01 	lds	r24, 0x01A7
     e9a:	80 ff       	sbrs	r24, 0
     e9c:	03 c0       	rjmp	.+6      	; 0xea4 <mf_realTempDo+0x1c>
	{
		printLedBuffer(0,"ERR 01");
     e9e:	6d ec       	ldi	r22, 0xCD	; 205
     ea0:	70 e0       	ldi	r23, 0x00	; 0
     ea2:	13 c0       	rjmp	.+38     	; 0xeca <mf_realTempDo+0x42>
	}
	else if (adc_status & (SENSOR_ERROR_SHORTED))
     ea4:	81 ff       	sbrs	r24, 1
     ea6:	03 c0       	rjmp	.+6      	; 0xeae <mf_realTempDo+0x26>
	{
		printLedBuffer(0,"ERR 02");
     ea8:	64 ed       	ldi	r22, 0xD4	; 212
     eaa:	70 e0       	ldi	r23, 0x00	; 0
     eac:	0e c0       	rjmp	.+28     	; 0xeca <mf_realTempDo+0x42>
	}
	else
	{
		// Output ADC result to LED
		i32toa_align_right((int32_t)adc_celsius,str,NO_TERMINATING_ZERO | 4);
     eae:	60 91 a8 01 	lds	r22, 0x01A8
     eb2:	70 91 a9 01 	lds	r23, 0x01A9
     eb6:	88 27       	eor	r24, r24
     eb8:	77 fd       	sbrc	r23, 7
     eba:	80 95       	com	r24
     ebc:	98 2f       	mov	r25, r24
     ebe:	24 e8       	ldi	r18, 0x84	; 132
     ec0:	4c ec       	ldi	r20, 0xCC	; 204
     ec2:	51 e0       	ldi	r21, 0x01	; 1
     ec4:	bf d0       	rcall	.+382    	; 0x1044 <i32toa_align_right>
		printLedBuffer(0,str);
     ec6:	6c ec       	ldi	r22, 0xCC	; 204
     ec8:	71 e0       	ldi	r23, 0x01	; 1
     eca:	80 e0       	ldi	r24, 0x00	; 0
     ecc:	c6 cd       	rjmp	.-1140   	; 0xa5a <printLedBuffer>

00000ece <getMenuFunctionRecord.constprop.1>:
//	Arguments:
//		menuItemID - ID of an item
//		menuRecord - pointer to function structure to fill
//	Output:
//-----------------------------------------------------------------//
static void getMenuFunctionRecord(uint8_t menuItemID, MenuFunctionRecord* menuRecord )
     ece:	0f 93       	push	r16
     ed0:	1f 93       	push	r17
     ed2:	cf 93       	push	r28
     ed4:	df 93       	push	r29
     ed6:	18 2f       	mov	r17, r24
     ed8:	c0 e0       	ldi	r28, 0x00	; 0
     eda:	d0 e0       	ldi	r29, 0x00	; 0
{
	uint8_t i;
	for (i = 0; i < sizeof(menuFunctionSet)/sizeof(MenuFunctionRecord); i++  )
	{
		memcpy_P(menuRecord,&menuFunctionSet[i],sizeof(MenuFunctionRecord));
     edc:	07 e0       	ldi	r16, 0x07	; 7
     ede:	0c 9f       	mul	r16, r28
     ee0:	b0 01       	movw	r22, r0
     ee2:	0d 9f       	mul	r16, r29
     ee4:	70 0d       	add	r23, r0
     ee6:	11 24       	eor	r1, r1
     ee8:	68 57       	subi	r22, 0x78	; 120
     eea:	7f 4f       	sbci	r23, 0xFF	; 255
     eec:	47 e0       	ldi	r20, 0x07	; 7
     eee:	50 e0       	ldi	r21, 0x00	; 0
     ef0:	86 e6       	ldi	r24, 0x66	; 102
     ef2:	91 e0       	ldi	r25, 0x01	; 1
     ef4:	54 d6       	rcall	.+3240   	; 0x1b9e <memcpy_P>
		if (menuRecord->Item == menuItemID)
     ef6:	80 91 66 01 	lds	r24, 0x0166
     efa:	81 17       	cp	r24, r17
     efc:	21 f0       	breq	.+8      	; 0xf06 <getMenuFunctionRecord.constprop.1+0x38>
     efe:	21 96       	adiw	r28, 0x01	; 1
//	Output:
//-----------------------------------------------------------------//
static void getMenuFunctionRecord(uint8_t menuItemID, MenuFunctionRecord* menuRecord )
{
	uint8_t i;
	for (i = 0; i < sizeof(menuFunctionSet)/sizeof(MenuFunctionRecord); i++  )
     f00:	ce 30       	cpi	r28, 0x0E	; 14
     f02:	d1 05       	cpc	r29, r1
     f04:	61 f7       	brne	.-40     	; 0xede <getMenuFunctionRecord.constprop.1+0x10>
	{
		memcpy_P(menuRecord,&menuFunctionSet[i],sizeof(MenuFunctionRecord));
		if (menuRecord->Item == menuItemID)
			break;
	}
}
     f06:	df 91       	pop	r29
     f08:	cf 91       	pop	r28
     f0a:	1f 91       	pop	r17
     f0c:	0f 91       	pop	r16
     f0e:	08 95       	ret

00000f10 <InitMenu>:
//	Menu initialization
//	Call this function at start of your program before processMenu()
//-----------------------------------------------------------------//
void InitMenu(void)
{
	selectedMenuItemID = mi_REALTEMP;
     f10:	81 e0       	ldi	r24, 0x01	; 1
     f12:	80 93 65 01 	sts	0x0165, r24
	getMenuFunctionRecord(selectedMenuItemID, &selectedMenuFunctionRecord);
     f16:	db df       	rcall	.-74     	; 0xece <getMenuFunctionRecord.constprop.1>
	processItemFunction(selectedMenuFunctionRecord.SelectFunction);
     f18:	80 91 67 01 	lds	r24, 0x0167
     f1c:	90 91 68 01 	lds	r25, 0x0168
     f20:	0f ce       	rjmp	.-994    	; 0xb40 <processItemFunction>

00000f22 <processMenu>:
//	Main menu control, -  state function calls, jumps 
//	between menu states and indication
//	Call this function from main() with a fixed time interval.
//-----------------------------------------------------------------//
void processMenu(void)
{
     f22:	af 92       	push	r10
     f24:	bf 92       	push	r11
     f26:	cf 92       	push	r12
     f28:	df 92       	push	r13
     f2a:	ef 92       	push	r14
     f2c:	ff 92       	push	r15
     f2e:	0f 93       	push	r16
     f30:	1f 93       	push	r17
     f32:	cf 93       	push	r28
     f34:	df 93       	push	r29
     f36:	00 d0       	rcall	.+0      	; 0xf38 <processMenu+0x16>
     f38:	00 d0       	rcall	.+0      	; 0xf3a <processMenu+0x18>
     f3a:	1f 92       	push	r1
     f3c:	cd b7       	in	r28, 0x3d	; 61
     f3e:	de b7       	in	r29, 0x3e	; 62
	NextItem_t nextItem;
	uint16_t jumpCondition;
	
	processSoftTimer8b(&menuTimer);	
     f40:	80 e8       	ldi	r24, 0x80	; 128
     f42:	90 e0       	ldi	r25, 0x00	; 0
     f44:	8c d4       	rcall	.+2328   	; 0x185e <processSoftTimer8b>
	
	// Compose jump condition
	jumpCondition = (uint16_t)buttons.action_down;
     f46:	00 91 ab 01 	lds	r16, 0x01AB
     f4a:	10 e0       	ldi	r17, 0x00	; 0
	if (buttons.action_up_short & BD_MENU)	
     f4c:	80 91 ad 01 	lds	r24, 0x01AD
     f50:	85 fd       	sbrc	r24, 5
		jumpCondition |= BS_MENU;
     f52:	11 60       	ori	r17, 0x01	; 1
	if (buttons.action_long & BD_MENU)	
     f54:	80 91 ae 01 	lds	r24, 0x01AE
     f58:	85 fd       	sbrc	r24, 5
		jumpCondition |= BL_MENU;
     f5a:	12 60       	ori	r17, 0x02	; 2
	if (menuTimer.FTop)	
     f5c:	80 91 80 00 	lds	r24, 0x0080
     f60:	85 fd       	sbrc	r24, 5
		jumpCondition |= TMR_EXP;
     f62:	10 68       	ori	r17, 0x80	; 128
	if (sys_timers_flags & AUTOPOFF_EXPIRED)
     f64:	14 99       	sbic	0x02, 4	; 2
		jumpCondition |= GOTO_POFF;
     f66:	10 64       	ori	r17, 0x40	; 64
	
	autoPowerOffState = 0;	// ACTIVE or LEAVE flags are set in the Run or Leave functions
     f68:	10 92 5e 01 	sts	0x015E, r1
	
	// Get next menu item according to current state and jump conditions
	nextItem = getNextMenuItem(selectedMenuItemID, jumpCondition);
     f6c:	d0 90 65 01 	lds	r13, 0x0165
     f70:	e1 2c       	mov	r14, r1
     f72:	f1 2c       	mov	r15, r1
	MenuJumpRecord	jRecord;
	uint8_t i;
	
	for (i = 0; i < sizeof(menuJumpSet)/sizeof(MenuJumpRecord); i++  )
	{
		memcpy_P(&jRecord,&menuJumpSet[i],sizeof(MenuJumpRecord));
     f74:	35 e0       	ldi	r19, 0x05	; 5
     f76:	a3 2e       	mov	r10, r19
     f78:	ae 9c       	mul	r10, r14
     f7a:	b0 01       	movw	r22, r0
     f7c:	af 9c       	mul	r10, r15
     f7e:	70 0d       	add	r23, r0
     f80:	11 24       	eor	r1, r1
     f82:	66 51       	subi	r22, 0x16	; 22
     f84:	7f 4f       	sbci	r23, 0xFF	; 255
     f86:	45 e0       	ldi	r20, 0x05	; 5
     f88:	50 e0       	ldi	r21, 0x00	; 0
     f8a:	ce 01       	movw	r24, r28
     f8c:	01 96       	adiw	r24, 0x01	; 1
     f8e:	07 d6       	rcall	.+3086   	; 0x1b9e <memcpy_P>
		if (jRecord.Item == selectedItemId)				// If ID match,
     f90:	89 81       	ldd	r24, Y+1	; 0x01
     f92:	8d 11       	cpse	r24, r13
     f94:	0f c0       	rjmp	.+30     	; 0xfb4 <processMenu+0x92>
		{
			if ((jRecord.JumpCondition & jmpCond) != 0)		// if any of jump conditions match too,
     f96:	2a 81       	ldd	r18, Y+2	; 0x02
     f98:	3b 81       	ldd	r19, Y+3	; 0x03
     f9a:	20 23       	and	r18, r16
     f9c:	31 23       	and	r19, r17
     f9e:	23 2b       	or	r18, r19
     fa0:	49 f0       	breq	.+18     	; 0xfb4 <processMenu+0x92>
			{
				nextItem.ItemID = jRecord.NextItem;			// switch to next menu item
     fa2:	dc 80       	ldd	r13, Y+4	; 0x04
				nextItem.ItemTimeout = jRecord.Flags & TIMEOUT_MASK;
     fa4:	8d 81       	ldd	r24, Y+5	; 0x05
     fa6:	9f e0       	ldi	r25, 0x0F	; 15
     fa8:	b9 2e       	mov	r11, r25
     faa:	b8 22       	and	r11, r24
				nextItem.Flags = jRecord.Flags & ~TIMEOUT_MASK;
     fac:	20 ef       	ldi	r18, 0xF0	; 240
     fae:	c2 2e       	mov	r12, r18
     fb0:	c8 22       	and	r12, r24
     fb2:	07 c0       	rjmp	.+14     	; 0xfc2 <processMenu+0xa0>
     fb4:	8f ef       	ldi	r24, 0xFF	; 255
     fb6:	e8 1a       	sub	r14, r24
     fb8:	f8 0a       	sbc	r15, r24
	NextItem_t nextItem;
	nextItem.ItemID = selectedItemId;
	MenuJumpRecord	jRecord;
	uint8_t i;
	
	for (i = 0; i < sizeof(menuJumpSet)/sizeof(MenuJumpRecord); i++  )
     fba:	84 e2       	ldi	r24, 0x24	; 36
     fbc:	e8 16       	cp	r14, r24
     fbe:	f1 04       	cpc	r15, r1
     fc0:	d9 f6       	brne	.-74     	; 0xf78 <processMenu+0x56>
	
	// Get next menu item according to current state and jump conditions
	nextItem = getNextMenuItem(selectedMenuItemID, jumpCondition);
	
	// If next item differs from current
	if (nextItem.ItemID != selectedMenuItemID)
     fc2:	80 91 65 01 	lds	r24, 0x0165
     fc6:	d8 16       	cp	r13, r24
     fc8:	29 f1       	breq	.+74     	; 0x1014 <processMenu+0xf2>
	{		
		jumpFlags = nextItem.Flags;
     fca:	c0 92 6f 01 	sts	0x016F, r12
		// Call exit function for current item
		processItemFunction(selectedMenuFunctionRecord.LeaveFunction);
     fce:	80 91 6b 01 	lds	r24, 0x016B
     fd2:	90 91 6c 01 	lds	r25, 0x016C
     fd6:	b4 dd       	rcall	.-1176   	; 0xb40 <processItemFunction>
		
		// If shifting is specified, start it before calling any 
		//	new menu item functions 
		if (nextItem.Flags & SHIFT_RIGHT)
     fd8:	c6 fe       	sbrs	r12, 6
     fda:	02 c0       	rjmp	.+4      	; 0xfe0 <processMenu+0xbe>
			startShiftingWindowRight();
     fdc:	0d dd       	rcall	.-1510   	; 0x9f8 <startShiftingWindowRight>
     fde:	02 c0       	rjmp	.+4      	; 0xfe4 <processMenu+0xc2>
		else if (nextItem.Flags & SHIFT_LEFT)
     fe0:	c7 fc       	sbrc	r12, 7
			startShiftingWindowLeft();
     fe2:	fc dc       	rcall	.-1544   	; 0x9dc <startShiftingWindowLeft>
		
		// Select new item
		selectedMenuItemID = nextItem.ItemID;
     fe4:	d0 92 65 01 	sts	0x0165, r13
		
		// Load from FLASH and save function pointers
		getMenuFunctionRecord(selectedMenuItemID, &selectedMenuFunctionRecord);
     fe8:	8d 2d       	mov	r24, r13
     fea:	71 df       	rcall	.-286    	; 0xece <getMenuFunctionRecord.constprop.1>
		// Call select function for next item
		processItemFunction(selectedMenuFunctionRecord.SelectFunction);
     fec:	80 91 67 01 	lds	r24, 0x0167
     ff0:	90 91 68 01 	lds	r25, 0x0168
     ff4:	a5 dd       	rcall	.-1206   	; 0xb40 <processItemFunction>
		// Start timer if timeout is enabled
		if (nextItem.ItemTimeout != 0)
     ff6:	bb 20       	and	r11, r11
     ff8:	a9 f0       	breq	.+42     	; 0x1024 <processMenu+0x102>
		{
			menuTimer.Top = nextItem.ItemTimeout * MENU_TIMEOUT_MULT;
     ffa:	bb 0c       	add	r11, r11
     ffc:	bb 0c       	add	r11, r11
     ffe:	bb 0c       	add	r11, r11
    1000:	b0 92 82 00 	sts	0x0082, r11
			menuTimer.Timer = 0;
    1004:	10 92 81 00 	sts	0x0081, r1
			menuTimer.Enabled = 1;	
    1008:	80 91 80 00 	lds	r24, 0x0080
    100c:	81 60       	ori	r24, 0x01	; 1
    100e:	80 93 80 00 	sts	0x0080, r24
    1012:	08 c0       	rjmp	.+16     	; 0x1024 <processMenu+0x102>
		}	
	}
	else
	{
		processSoftTimer8b(&userTimer);
    1014:	8c e7       	ldi	r24, 0x7C	; 124
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	22 d4       	rcall	.+2116   	; 0x185e <processSoftTimer8b>
		// Stay at previous item
		processItemFunction(selectedMenuFunctionRecord.RunFunction);
    101a:	80 91 69 01 	lds	r24, 0x0169
    101e:	90 91 6a 01 	lds	r25, 0x016A
    1022:	8e dd       	rcall	.-1252   	; 0xb40 <processItemFunction>
	}	
}
    1024:	0f 90       	pop	r0
    1026:	0f 90       	pop	r0
    1028:	0f 90       	pop	r0
    102a:	0f 90       	pop	r0
    102c:	0f 90       	pop	r0
    102e:	df 91       	pop	r29
    1030:	cf 91       	pop	r28
    1032:	1f 91       	pop	r17
    1034:	0f 91       	pop	r16
    1036:	ff 90       	pop	r15
    1038:	ef 90       	pop	r14
    103a:	df 90       	pop	r13
    103c:	cf 90       	pop	r12
    103e:	bf 90       	pop	r11
    1040:	af 90       	pop	r10
    1042:	08 95       	ret

00001044 <i32toa_align_right>:
}



void i32toa_align_right(int32_t val, char *buffer, uint8_t len)
{
    1044:	cf 92       	push	r12
    1046:	df 92       	push	r13
    1048:	ef 92       	push	r14
    104a:	ff 92       	push	r15
    104c:	0f 93       	push	r16
    104e:	1f 93       	push	r17
    1050:	cf 93       	push	r28
    1052:	df 93       	push	r29
    1054:	12 2f       	mov	r17, r18
	uint8_t is_negative = 0;
	if (!len)	return;
    1056:	22 23       	and	r18, r18
    1058:	c9 f1       	breq	.+114    	; 0x10cc <i32toa_align_right+0x88>
	
	if (val < 0)
    105a:	97 ff       	sbrs	r25, 7
    105c:	09 c0       	rjmp	.+18     	; 0x1070 <i32toa_align_right+0x2c>
	{
		val = -val;
    105e:	90 95       	com	r25
    1060:	80 95       	com	r24
    1062:	70 95       	com	r23
    1064:	61 95       	neg	r22
    1066:	7f 4f       	sbci	r23, 0xFF	; 255
    1068:	8f 4f       	sbci	r24, 0xFF	; 255
    106a:	9f 4f       	sbci	r25, 0xFF	; 255
		is_negative = 1;
    106c:	01 e0       	ldi	r16, 0x01	; 1
    106e:	01 c0       	rjmp	.+2      	; 0x1072 <i32toa_align_right+0x2e>



void i32toa_align_right(int32_t val, char *buffer, uint8_t len)
{
	uint8_t is_negative = 0;
    1070:	00 e0       	ldi	r16, 0x00	; 0
	{
		val = -val;
		is_negative = 1;
	}
	
	if (len & NO_TERMINATING_ZERO)
    1072:	17 ff       	sbrs	r17, 7
    1074:	05 c0       	rjmp	.+10     	; 0x1080 <i32toa_align_right+0x3c>
	{
		len = len & ~NO_TERMINATING_ZERO;
    1076:	1f 77       	andi	r17, 0x7F	; 127
		buffer += len;	
    1078:	ea 01       	movw	r28, r20
    107a:	c1 0f       	add	r28, r17
    107c:	d1 1d       	adc	r29, r1
    107e:	04 c0       	rjmp	.+8      	; 0x1088 <i32toa_align_right+0x44>
	}
	else
	{
		buffer += len;	
    1080:	ea 01       	movw	r28, r20
    1082:	c1 0f       	add	r28, r17
    1084:	d1 1d       	adc	r29, r1
		*buffer = 0;
    1086:	18 82       	st	Y, r1
	}
	
	do
	{
		*--buffer = val % 10 + '0';
    1088:	2a e0       	ldi	r18, 0x0A	; 10
    108a:	c2 2e       	mov	r12, r18
    108c:	d1 2c       	mov	r13, r1
    108e:	e1 2c       	mov	r14, r1
    1090:	f1 2c       	mov	r15, r1
    1092:	a7 01       	movw	r20, r14
    1094:	96 01       	movw	r18, r12
    1096:	24 d5       	rcall	.+2632   	; 0x1ae0 <__divmodsi4>
    1098:	60 5d       	subi	r22, 0xD0	; 208
    109a:	6a 93       	st	-Y, r22
		val /= 10;
    109c:	b9 01       	movw	r22, r18
    109e:	ca 01       	movw	r24, r20
		len--;
    10a0:	11 50       	subi	r17, 0x01	; 1
	}
	while ((val != 0) && len);
    10a2:	61 15       	cp	r22, r1
    10a4:	71 05       	cpc	r23, r1
    10a6:	81 05       	cpc	r24, r1
    10a8:	91 05       	cpc	r25, r1
    10aa:	19 f0       	breq	.+6      	; 0x10b2 <i32toa_align_right+0x6e>
    10ac:	11 11       	cpse	r17, r1
    10ae:	f1 cf       	rjmp	.-30     	; 0x1092 <i32toa_align_right+0x4e>
    10b0:	08 c0       	rjmp	.+16     	; 0x10c2 <i32toa_align_right+0x7e>
	
	if ( (len) && (is_negative) )
    10b2:	11 23       	and	r17, r17
    10b4:	31 f0       	breq	.+12     	; 0x10c2 <i32toa_align_right+0x7e>
    10b6:	00 23       	and	r16, r16
    10b8:	21 f0       	breq	.+8      	; 0x10c2 <i32toa_align_right+0x7e>
	{
		*--buffer = '-';
    10ba:	21 97       	sbiw	r28, 0x01	; 1
    10bc:	8d e2       	ldi	r24, 0x2D	; 45
    10be:	88 83       	st	Y, r24
		len--;	
    10c0:	11 50       	subi	r17, 0x01	; 1
	}	
	
	// Padding
	while(len--)
		*--buffer = ' ';
    10c2:	80 e2       	ldi	r24, 0x20	; 32
    10c4:	01 c0       	rjmp	.+2      	; 0x10c8 <i32toa_align_right+0x84>
    10c6:	8a 93       	st	-Y, r24
		*--buffer = '-';
		len--;	
	}	
	
	// Padding
	while(len--)
    10c8:	11 50       	subi	r17, 0x01	; 1
    10ca:	e8 f7       	brcc	.-6      	; 0x10c6 <i32toa_align_right+0x82>
		*--buffer = ' ';
}
    10cc:	df 91       	pop	r29
    10ce:	cf 91       	pop	r28
    10d0:	1f 91       	pop	r17
    10d2:	0f 91       	pop	r16
    10d4:	ff 90       	pop	r15
    10d6:	ef 90       	pop	r14
    10d8:	df 90       	pop	r13
    10da:	cf 90       	pop	r12
    10dc:	08 95       	ret

000010de <u16toa_align_right>:




void u16toa_align_right(uint16_t val, char *buffer, uint8_t len)
{
    10de:	fb 01       	movw	r30, r22
    10e0:	24 2f       	mov	r18, r20
	i32toa_align_right((int32_t)val, buffer, len);
    10e2:	bc 01       	movw	r22, r24
    10e4:	80 e0       	ldi	r24, 0x00	; 0
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	af 01       	movw	r20, r30
    10ea:	ac cf       	rjmp	.-168    	; 0x1044 <i32toa_align_right>

000010ec <logI32p>:
	USART_sendstr(str);
}

static void logI32p(int32_t val)
{
	i32toa_align_right(val,str,12);
    10ec:	2c e0       	ldi	r18, 0x0C	; 12
    10ee:	40 e7       	ldi	r20, 0x70	; 112
    10f0:	51 e0       	ldi	r21, 0x01	; 1
    10f2:	a8 df       	rcall	.-176    	; 0x1044 <i32toa_align_right>
	USART_sendstr(str);
    10f4:	80 e7       	ldi	r24, 0x70	; 112
    10f6:	91 e0       	ldi	r25, 0x01	; 1
    10f8:	d5 c4       	rjmp	.+2474   	; 0x1aa4 <USART_sendstr>

000010fa <logU16p>:
}


static void logU16p(uint16_t val)
{
	u16toa_align_right(val,str,6);
    10fa:	46 e0       	ldi	r20, 0x06	; 6
    10fc:	60 e7       	ldi	r22, 0x70	; 112
    10fe:	71 e0       	ldi	r23, 0x01	; 1
    1100:	ee df       	rcall	.-36     	; 0x10de <u16toa_align_right>
	USART_sendstr(str);
    1102:	80 e7       	ldi	r24, 0x70	; 112
    1104:	91 e0       	ldi	r25, 0x01	; 1
    1106:	ce c4       	rjmp	.+2460   	; 0x1aa4 <USART_sendstr>

00001108 <main>:


static void init_system_io()
{
	// Setup Ports
	PORTD = 0;//(1<<PD_SYNCA | 1<<PD_SYNCB);
    1108:	12 ba       	out	0x12, r1	; 18
	DDRD = (1<<PD_TXD | 1<<PD_M1 | 1<<PD_M2 | 1<<PD_HEATER | 1<<PD_HEAT_INDIC );
    110a:	8e e3       	ldi	r24, 0x3E	; 62
    110c:	81 bb       	out	0x11, r24	; 17
	
	PORTB = 0;
    110e:	18 ba       	out	0x18, r1	; 24
	DDRB = (1<<PB_BEEPER | 1<<PB_LED_DOUT | 1<<PB_LED_CLK | 1<<PB_SEGF | 1<<PB_SEGG | 1<<PB_SEGH);
    1110:	8f e3       	ldi	r24, 0x3F	; 63
    1112:	87 bb       	out	0x17, r24	; 23
	
	PORTC = 0;
    1114:	15 ba       	out	0x15, r1	; 21
	DDRC = (1<<PC_SEGA | 1<<PC_SEGB | 1<<PC_SEGC | 1<<PC_SEGD | 1<<PC_SEGE);	
    1116:	8f e1       	ldi	r24, 0x1F	; 31
    1118:	84 bb       	out	0x14, r24	; 20

	// Setup timer0
	// 1/1024 prescaler, T=64us @16MHz
	TCCR0 = (1<<CS02 | 0<<CS01 | 1<<CS00);
    111a:	85 e0       	ldi	r24, 0x05	; 5
    111c:	83 bf       	out	0x33, r24	; 51
	TCNT0 = 0;
    111e:	12 be       	out	0x32, r1	; 50
	// Clear interrupt flag
	TIFR = (1<<TOV0);
    1120:	81 e0       	ldi	r24, 0x01	; 1
    1122:	88 bf       	out	0x38, r24	; 56
	
	// Setup timer2 as 1ms system frequency generator
	// 1/64 prescaler, CTC mode, OC2 disconnected
	TCCR2 = (1<<CS22 | 1<<WGM21);
    1124:	8c e0       	ldi	r24, 0x0C	; 12
    1126:	85 bd       	out	0x25, r24	; 37
	OCR2 = 249;						// 1ms @ 16MHz
    1128:	89 ef       	ldi	r24, 0xF9	; 249
    112a:	83 bd       	out	0x23, r24	; 35
	
	// Enable interrupts from timers 0 and 2
	TIMSK = (1<<TOIE0 | 1<<OCIE2);
    112c:	81 e8       	ldi	r24, 0x81	; 129
    112e:	89 bf       	out	0x39, r24	; 57
	
	// Setup timer1 as beeper frequency generator
	// CTC mode, 1/64 prescaler
	TCCR1A = 0;
    1130:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = (1<<WGM12 | 1<<CS11 | 1<<CS10);
    1132:	8b e0       	ldi	r24, 0x0B	; 11
    1134:	8e bd       	out	0x2e, r24	; 46
	// 1kHz beeper frequency default
	OCR1A = 127;
    1136:	8f e7       	ldi	r24, 0x7F	; 127
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	9b bd       	out	0x2b, r25	; 43
    113c:	8a bd       	out	0x2a, r24	; 42

	// Setup AC sync comparator
	// Interrupt on output toggle
	ACSR = (1<<ACIE | 0<<ACIS1 | 0<<ACIS0);
    113e:	88 e0       	ldi	r24, 0x08	; 8
    1140:	88 b9       	out	0x08, r24	; 8
	
	// Setup ADC
	// Internal Vref + cap, input ADC5, 
	ADMUX = (1<<REFS1 | 1<<REFS0 | 0<<MUX3 | 1<<MUX2 | 0<<MUX1 | 1<<MUX0 );
    1142:	85 ec       	ldi	r24, 0xC5	; 197
    1144:	87 b9       	out	0x07, r24	; 7
	// Prescaler = 128
	ADCSRA = (1<<ADEN | 1<<ADIE | 1<<ADPS2 | 1<<ADPS1 | 1<<ADPS0);
    1146:	8f e8       	ldi	r24, 0x8F	; 143
    1148:	86 b9       	out	0x06, r24	; 6
	
	// Setup USART
	// Double speed
	UCSRA = (1<<U2X);
    114a:	82 e0       	ldi	r24, 0x02	; 2
    114c:	8b b9       	out	0x0b, r24	; 11
	UCSRB = (1<<RXEN | 1<<TXEN | 0<<UCSZ2);
    114e:	88 e1       	ldi	r24, 0x18	; 24
    1150:	8a b9       	out	0x0a, r24	; 10
	// No parity, 1 stop bit, 8 bit
	UCSRC = (1<<URSEL | 0<<UPM1 | 0<<UPM0 | 0<<USBS | 1<<UCSZ1 | 1<<UCSZ0);
    1152:	86 e8       	ldi	r24, 0x86	; 134
    1154:	80 bd       	out	0x20, r24	; 32
	// 57600 @16MHz, 2x
	UBRRH=0x00;
    1156:	10 bc       	out	0x20, r1	; 32
	UBRRL=0x22;
    1158:	82 e2       	ldi	r24, 0x22	; 34
    115a:	89 b9       	out	0x09, r24	; 9
	
	
	// Init IO locations which are used as globals
	TWBR = 0x00;	// heaterState
    115c:	10 b8       	out	0x00, r1	; 0
	TWAR = 0x00;	// sys_timers_flags
    115e:	12 b8       	out	0x02, r1	; 2
	
	// Initialize MCU IO
	init_system_io();
	// Restore params from EEPROM
	// If some values are corrupted, settings or/and calibration are loaded with default configuration.
	temp8u = restoreGlobalParams();
    1160:	fe da       	rcall	.-2564   	; 0x75e <restoreGlobalParams>
    1162:	c8 2f       	mov	r28, r24
	// Calibrate ADC coefficients using restored params
	calculateCoeffs();
    1164:	90 d8       	rcall	.-3808   	; 0x286 <calculateCoeffs>
	// Initialize LED indicator
	initLedIndicator();
    1166:	56 dc       	rcall	.-1876   	; 0xa14 <initLedIndicator>
	// Clear comparator interrupt flag to prevent false triggering
	ACSR |= (1<<ACI);
    1168:	44 9a       	sbi	0x08, 4	; 8
	sei();
    116a:	78 94       	sei
	// If default values were loaded from EEPROM, inform user
	#ifdef USE_EEPROM_CRC
	if (temp8u)
    116c:	cc 23       	and	r28, r28
    116e:	a9 f0       	breq	.+42     	; 0x119a <main+0x92>
	{
		printLedBuffer(0,"ERR E");
    1170:	6b ed       	ldi	r22, 0xDB	; 219
    1172:	70 e0       	ldi	r23, 0x00	; 0
    1174:	80 e0       	ldi	r24, 0x00	; 0
    1176:	71 dc       	rcall	.-1822   	; 0xa5a <printLedBuffer>
		fillLedBuffer(5,1,temp8u + 0x30);	// error code: E1 - CRC error in global params, E2 - CRC error in calibration, E3 - both
    1178:	4c 2f       	mov	r20, r28
    117a:	40 5d       	subi	r20, 0xD0	; 208
    117c:	61 e0       	ldi	r22, 0x01	; 1
    117e:	85 e0       	ldi	r24, 0x05	; 5
    1180:	09 dc       	rcall	.-2030   	; 0x994 <fillLedBuffer>
		Sound_Play(m_beep_err1);
    1182:	84 e5       	ldi	r24, 0x54	; 84
    1184:	90 e0       	ldi	r25, 0x00	; 0
    1186:	73 d4       	rcall	.+2278   	; 0x1a6e <Sound_Play>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1188:	2f ef       	ldi	r18, 0xFF	; 255
    118a:	83 ed       	ldi	r24, 0xD3	; 211
    118c:	90 e3       	ldi	r25, 0x30	; 48
    118e:	21 50       	subi	r18, 0x01	; 1
    1190:	80 40       	sbci	r24, 0x00	; 0
    1192:	90 40       	sbci	r25, 0x00	; 0
    1194:	e1 f7       	brne	.-8      	; 0x118e <main+0x86>
    1196:	00 c0       	rjmp	.+0      	; 0x1198 <main+0x90>
    1198:	00 00       	nop
		_delay_ms(1000);
	} 
	#endif
	// Dump calibration data over UART - might be useful for debug
	USART_sendstr("\n\r");
    119a:	81 ee       	ldi	r24, 0xE1	; 225
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	82 d4       	rcall	.+2308   	; 0x1aa4 <USART_sendstr>
	logU16p(cp.cpoint1);
    11a0:	80 91 af 01 	lds	r24, 0x01AF
    11a4:	90 e0       	ldi	r25, 0x00	; 0
    11a6:	a9 df       	rcall	.-174    	; 0x10fa <logU16p>
	logU16p(cp.cpoint1_adc);
    11a8:	80 91 b1 01 	lds	r24, 0x01B1
    11ac:	90 91 b2 01 	lds	r25, 0x01B2
    11b0:	a4 df       	rcall	.-184    	; 0x10fa <logU16p>
	logU16p(cp.cpoint2);
    11b2:	80 91 b0 01 	lds	r24, 0x01B0
    11b6:	90 e0       	ldi	r25, 0x00	; 0
    11b8:	a0 df       	rcall	.-192    	; 0x10fa <logU16p>
	logU16p(cp.cpoint2_adc);
    11ba:	80 91 b3 01 	lds	r24, 0x01B3
    11be:	90 91 b4 01 	lds	r25, 0x01B4
    11c2:	9b df       	rcall	.-202    	; 0x10fa <logU16p>
	USART_sendstr("\n\r");
    11c4:	81 ee       	ldi	r24, 0xE1	; 225
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	6d d4       	rcall	.+2266   	; 0x1aa4 <USART_sendstr>
    11ca:	2f ef       	ldi	r18, 0xFF	; 255
    11cc:	81 ee       	ldi	r24, 0xE1	; 225
    11ce:	94 e0       	ldi	r25, 0x04	; 4
    11d0:	21 50       	subi	r18, 0x01	; 1
    11d2:	80 40       	sbci	r24, 0x00	; 0
    11d4:	90 40       	sbci	r25, 0x00	; 0
    11d6:	e1 f7       	brne	.-8      	; 0x11d0 <main+0xc8>
    11d8:	00 c0       	rjmp	.+0      	; 0x11da <main+0xd2>
    11da:	00 00       	nop
	// Safety delay for power part and ADC buffer
	_delay_ms(100);
	// Check AC line
	if(isACSyncPresent()) 	
    11dc:	32 d2       	rcall	.+1124   	; 0x1642 <isACSyncPresent>
    11de:	88 23       	and	r24, r24
    11e0:	69 f0       	breq	.+26     	; 0x11fc <main+0xf4>
	{
		// Power control state machine has not changed - sync has not been detected
		printLedBuffer(0,"ERR AC");
    11e2:	64 ee       	ldi	r22, 0xE4	; 228
    11e4:	70 e0       	ldi	r23, 0x00	; 0
    11e6:	80 e0       	ldi	r24, 0x00	; 0
    11e8:	38 dc       	rcall	.-1936   	; 0xa5a <printLedBuffer>
    11ea:	2f ef       	ldi	r18, 0xFF	; 255
    11ec:	83 ed       	ldi	r24, 0xD3	; 211
    11ee:	90 e3       	ldi	r25, 0x30	; 48
    11f0:	21 50       	subi	r18, 0x01	; 1
    11f2:	80 40       	sbci	r24, 0x00	; 0
    11f4:	90 40       	sbci	r25, 0x00	; 0
    11f6:	e1 f7       	brne	.-8      	; 0x11f0 <main+0xe8>
    11f8:	00 c0       	rjmp	.+0      	; 0x11fa <main+0xf2>
    11fa:	00 00       	nop
		_delay_ms(1000);
	}
	// Initialize menu
	InitMenu();
    11fc:	89 de       	rcall	.-750    	; 0xf10 <InitMenu>
	// Beep
	Sound_Play(m_beep_1000Hz_100ms);
    11fe:	88 e6       	ldi	r24, 0x68	; 104
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	35 d4       	rcall	.+2154   	; 0x1a6e <Sound_Play>
	
	// When we get here, full ADC buffer have been sampled
	// Initialize ADC filter
	temp8u = 20;				// depth of ADC filter sample buffer
	while(--temp8u)
    1204:	c4 e1       	ldi	r28, 0x14	; 20
    1206:	01 c0       	rjmp	.+2      	; 0x120a <main+0x102>
		update_normalized_adc();	
    1208:	99 d8       	rcall	.-3790   	; 0x33c <update_normalized_adc>
    120a:	c1 50       	subi	r28, 0x01	; 1
	Sound_Play(m_beep_1000Hz_100ms);
	
	// When we get here, full ADC buffer have been sampled
	// Initialize ADC filter
	temp8u = 20;				// depth of ADC filter sample buffer
	while(--temp8u)
    120c:	e9 f7       	brne	.-6      	; 0x1208 <main+0x100>
		update_normalized_adc();	
	
	// Start rotating
	setMotorDirection(ROLL_FWD);
    120e:	81 e0       	ldi	r24, 0x01	; 1
    1210:	96 d1       	rcall	.+812    	; 0x153e <setMotorDirection>
	// Clear timer
	cli();
    1212:	f8 94       	cli
	menuUpdateTimer.FOvfl = 0;
    1214:	80 91 8c 00 	lds	r24, 0x008C
    1218:	8f 7b       	andi	r24, 0xBF	; 191
    121a:	80 93 8c 00 	sts	0x008C, r24
	sei();
    121e:	78 94       	sei
	// Enable watchdog
	wdt_enable(WDTO_1S);
    1220:	2e e0       	ldi	r18, 0x0E	; 14
    1222:	88 e1       	ldi	r24, 0x18	; 24
    1224:	90 e0       	ldi	r25, 0x00	; 0
    1226:	0f b6       	in	r0, 0x3f	; 63
    1228:	f8 94       	cli
    122a:	a8 95       	wdr
    122c:	81 bd       	out	0x21, r24	; 33
    122e:	0f be       	out	0x3f, r0	; 63
    1230:	21 bd       	out	0x21, r18	; 33


int main(void)
{
	uint8_t temp8u = 0x00;
	dbg_PID_t* dbg_p = &dbg_PID_struct;
    1232:	c6 ed       	ldi	r28, 0xD6	; 214
    1234:	d1 e0       	ldi	r29, 0x01	; 1
	// Enable watchdog
	wdt_enable(WDTO_1S);

    while(1)
    {
		if (menuUpdateTimer.FOvfl)
    1236:	80 91 8c 00 	lds	r24, 0x008C
    123a:	86 ff       	sbrs	r24, 6
    123c:	fc cf       	rjmp	.-8      	; 0x1236 <main+0x12e>
		{
			// Reset watchdog timer
			wdt_reset();
    123e:	a8 95       	wdr
			
			//--------- BUTTONS ----------//
			
			// Get new button state
			process_buttons();
    1240:	0b d9       	rcall	.-3562   	; 0x458 <process_buttons>
			
			// Give sound feedback
			if (buttons.action_long & (BD_MENU | BD_HEATCTRL))
    1242:	80 91 ae 01 	lds	r24, 0x01AE
    1246:	81 72       	andi	r24, 0x21	; 33
    1248:	19 f0       	breq	.+6      	; 0x1250 <main+0x148>
			{
				Sound_Play(m_beep_800Hz_40ms);
    124a:	80 e6       	ldi	r24, 0x60	; 96
    124c:	90 e0       	ldi	r25, 0x00	; 0
    124e:	06 c0       	rjmp	.+12     	; 0x125c <main+0x154>
			}
			else if (buttons.action_down & (BD_MENU | BD_UP | BD_DOWN | BD_HEATCTRL))
    1250:	80 91 ab 01 	lds	r24, 0x01AB
    1254:	81 7e       	andi	r24, 0xE1	; 225
    1256:	19 f0       	breq	.+6      	; 0x125e <main+0x156>
			{
				Sound_Play(m_beep_1000Hz_40ms);
    1258:	84 e6       	ldi	r24, 0x64	; 100
    125a:	90 e0       	ldi	r25, 0x00	; 0
    125c:	08 d4       	rcall	.+2064   	; 0x1a6e <Sound_Play>
			}	
			// Direction control buttons sounds get special processing at processRollControl()
			
			// If any button is pressed, restart power off interval
			if (buttons.action_down)
    125e:	80 91 ab 01 	lds	r24, 0x01AB
    1262:	81 11       	cpse	r24, r1
			{
				resetAutoPowerOffCounter();
    1264:	79 d3       	rcall	.+1778   	; 0x1958 <resetAutoPowerOffCounter>
			
			//---------- TIMERS ----------//
			
			// Process timers and time counters - it is important to call
			// this function before menu and power controls processing
			processSystemTimers();
    1266:	27 d3       	rcall	.+1614   	; 0x18b6 <processSystemTimers>

			// Warn user about soon auto powering off
			if (sys_timers_flags & AUTOPOFF_SOON)
    1268:	13 9b       	sbis	0x02, 3	; 2
    126a:	03 c0       	rjmp	.+6      	; 0x1272 <main+0x16a>
			{
				Sound_Play(m_beep_warn_poff);
    126c:	80 e4       	ldi	r24, 0x40	; 64
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	fe d3       	rcall	.+2044   	; 0x1a6e <Sound_Play>
			}		
			
			//----------- ADC ------------//
			
			// Get new temperature measurement
			update_normalized_adc();			
    1272:	64 d8       	rcall	.-3896   	; 0x33c <update_normalized_adc>
		
			// Update indicated Celsius degree
			if (sys_timers_flags & EXPIRED_CELSIUS)
    1274:	10 99       	sbic	0x02, 0	; 2
			{
				update_Celsius();		
    1276:	9c d8       	rcall	.-3784   	; 0x3b0 <update_Celsius>
			}
			
			//----------- MENU -----------//		
				
			// Process user menu states, settings and indication
			processMenu();
    1278:	54 de       	rcall	.-856    	; 0xf22 <processMenu>
			
			//--------- CONTROLS ---------//		
			
			// Process cyclic rolling, direction control
			processRollControl();	
    127a:	37 d9       	rcall	.-3474   	; 0x4ea <processRollControl>
			
			// Process heater events monitoring
			// Must be called before processHeaterControl()
			processHeaterEvents();
    127c:	f9 d9       	rcall	.-3086   	; 0x670 <processHeaterEvents>
			
			// Process heater regulation
			processHeaterControl();
    127e:	bf d9       	rcall	.-3202   	; 0x5fe <processHeaterControl>
			//setHeaterPower(0);		// bug test
		
			// Process heater warnings
			processHeaterAlerts();
    1280:	03 da       	rcall	.-3066   	; 0x688 <processHeaterAlerts>
			
			
			
			//------- LOG to UART --------//	
			if (sys_timers_flags & EXPIRED_LOG)
    1282:	15 9b       	sbis	0x02, 5	; 2
    1284:	36 c0       	rjmp	.+108    	; 0x12f2 <main+0x1ea>
			{
				PRELOAD("y",dbg_p);
				
				logU16p(adc_celsius);					// Actual temp Celsius
    1286:	80 91 a8 01 	lds	r24, 0x01A8
    128a:	90 91 a9 01 	lds	r25, 0x01A9
    128e:	35 df       	rcall	.-406    	; 0x10fa <logU16p>
				logU16p(adc_normalized);				// ADC, normalized (adc_normalized = 1024 - adc_raw)
    1290:	80 91 a5 01 	lds	r24, 0x01A5
    1294:	90 91 a6 01 	lds	r25, 0x01A6
    1298:	30 df       	rcall	.-416    	; 0x10fa <logU16p>
				logU16p(adc_filtered);					// ADC, oversampled and filtered
    129a:	80 91 a3 01 	lds	r24, 0x01A3
    129e:	90 91 a4 01 	lds	r25, 0x01A4
    12a2:	2b df       	rcall	.-426    	; 0x10fa <logU16p>
				USART_sendstr("    ");
    12a4:	81 ec       	ldi	r24, 0xC1	; 193
    12a6:	90 e0       	ldi	r25, 0x00	; 0
    12a8:	fd d3       	rcall	.+2042   	; 0x1aa4 <USART_sendstr>

				logU16p(dbg_p->PID_SetPoint);
    12aa:	88 81       	ld	r24, Y
    12ac:	99 81       	ldd	r25, Y+1	; 0x01
    12ae:	25 df       	rcall	.-438    	; 0x10fa <logU16p>
				logU16p(dbg_p->PID_ProcessValue);
    12b0:	8a 81       	ldd	r24, Y+2	; 0x02
    12b2:	9b 81       	ldd	r25, Y+3	; 0x03
    12b4:	22 df       	rcall	.-444    	; 0x10fa <logU16p>

				logI32p(dbg_p->PID_p_term);
    12b6:	6c 81       	ldd	r22, Y+4	; 0x04
    12b8:	7d 81       	ldd	r23, Y+5	; 0x05
    12ba:	88 27       	eor	r24, r24
    12bc:	77 fd       	sbrc	r23, 7
    12be:	80 95       	com	r24
    12c0:	98 2f       	mov	r25, r24
    12c2:	14 df       	rcall	.-472    	; 0x10ec <logI32p>
				logI32p(dbg_p->PID_d_term);
    12c4:	68 85       	ldd	r22, Y+8	; 0x08
    12c6:	79 85       	ldd	r23, Y+9	; 0x09
    12c8:	88 27       	eor	r24, r24
    12ca:	77 fd       	sbrc	r23, 7
    12cc:	80 95       	com	r24
    12ce:	98 2f       	mov	r25, r24
    12d0:	0d df       	rcall	.-486    	; 0x10ec <logI32p>
				logI32p(dbg_p->PID_i_term);
    12d2:	6e 81       	ldd	r22, Y+6	; 0x06
    12d4:	7f 81       	ldd	r23, Y+7	; 0x07
    12d6:	88 27       	eor	r24, r24
    12d8:	77 fd       	sbrc	r23, 7
    12da:	80 95       	com	r24
    12dc:	98 2f       	mov	r25, r24
    12de:	06 df       	rcall	.-500    	; 0x10ec <logI32p>
				
				USART_sendstr("    ");
    12e0:	81 ec       	ldi	r24, 0xC1	; 193
    12e2:	90 e0       	ldi	r25, 0x00	; 0
    12e4:	df d3       	rcall	.+1982   	; 0x1aa4 <USART_sendstr>
				
				logU16p(dbg_p->PID_output);
    12e6:	8a 85       	ldd	r24, Y+10	; 0x0a
    12e8:	9b 85       	ldd	r25, Y+11	; 0x0b
    12ea:	07 df       	rcall	.-498    	; 0x10fa <logU16p>
				
				//USART_sendstr("    ");
				//logU16p(menuUpdateTimer.Timer);			// Main loop time (ms)
			
				USART_sendstr("\n\r");
    12ec:	81 ee       	ldi	r24, 0xE1	; 225
    12ee:	90 e0       	ldi	r25, 0x00	; 0
    12f0:	d9 d3       	rcall	.+1970   	; 0x1aa4 <USART_sendstr>

				//---------------------------------//
			}
			
			cli();
    12f2:	f8 94       	cli
			menuUpdateTimer.FOvfl = 0;	
    12f4:	80 91 8c 00 	lds	r24, 0x008C
    12f8:	8f 7b       	andi	r24, 0xBF	; 191
    12fa:	80 93 8c 00 	sts	0x008C, r24
			sei();
    12fe:	78 94       	sei
    1300:	9a cf       	rjmp	.-204    	; 0x1236 <main+0x12e>

00001302 <setPIDIntegratorLimit>:
	// When error = 0, maximum is simply integ_soft_k * INTEGRATOR_SOFT_RANGE
	// integ_soft_k is chosen for desired maximum
	// For example, we want integrator maximum of about 30% at 90C. Then integ_soft_k = 300_000 / INTEGRATOR_SOFT_RANGE = 862
	// The "magic" coefficient in the integ_soft_k expression should be 862 / (90 - 15) = 11.49 => 12
	
	if (set_temp < 50)
    1302:	82 33       	cpi	r24, 0x32	; 50
    1304:	08 f4       	brcc	.+2      	; 0x1308 <setPIDIntegratorLimit+0x6>
		set_temp = 50;
    1306:	82 e3       	ldi	r24, 0x32	; 50
	set_temp -= 15;
    1308:	8f 50       	subi	r24, 0x0F	; 15
	integ_soft_k = (uint16_t)set_temp * 12;
    130a:	2c e0       	ldi	r18, 0x0C	; 12
    130c:	82 9f       	mul	r24, r18
    130e:	c0 01       	movw	r24, r0
    1310:	11 24       	eor	r1, r1
    1312:	90 93 85 01 	sts	0x0185, r25
    1316:	80 93 84 01 	sts	0x0184, r24
    131a:	08 95       	ret

0000131c <processPID>:
//	setPoint - desired process value
//	processValue - actual process value
//	mode - enable/disable controller - 
//	  terms are calculated anyway, but output is set to 0 when disabled
uint16_t processPID(uint16_t setPoint, uint16_t processValue, uint8_t mode)
{
    131c:	4f 92       	push	r4
    131e:	5f 92       	push	r5
    1320:	6f 92       	push	r6
    1322:	7f 92       	push	r7
    1324:	9f 92       	push	r9
    1326:	af 92       	push	r10
    1328:	bf 92       	push	r11
    132a:	cf 92       	push	r12
    132c:	df 92       	push	r13
    132e:	ef 92       	push	r14
    1330:	ff 92       	push	r15
    1332:	0f 93       	push	r16
    1334:	1f 93       	push	r17
    1336:	cf 93       	push	r28
    1338:	df 93       	push	r29
    133a:	5c 01       	movw	r10, r24
    133c:	7b 01       	movw	r14, r22
    133e:	94 2e       	mov	r9, r20
	int16_t error, p_term, i_term, d_term, temp;
	int32_t integ_max;
	dbg_PID_t* dbg_p = &dbg_PID_struct;
	
	// Get the error
	error = setPoint - processValue;
    1340:	9c 01       	movw	r18, r24
    1342:	26 1b       	sub	r18, r22
    1344:	37 0b       	sbc	r19, r23
	
	//------ Calculate P term --------//
	if (error > (PROP_MAX / Kp))			// Compare before multiplication to avoid overflow
    1346:	2d 35       	cpi	r18, 0x5D	; 93
    1348:	81 e0       	ldi	r24, 0x01	; 1
    134a:	38 07       	cpc	r19, r24
    134c:	5c f4       	brge	.+22     	; 0x1364 <processPID+0x48>
	{
		p_term = PROP_MAX;	
	}
	else if (error < (PROP_MIN / Kp))
    134e:	24 3a       	cpi	r18, 0xA4	; 164
    1350:	8e ef       	ldi	r24, 0xFE	; 254
    1352:	38 07       	cpc	r19, r24
    1354:	54 f0       	brlt	.+20     	; 0x136a <processPID+0x4e>
	{
		p_term = PROP_MIN;	
	}
	else
	{
		p_term = error * Kp;
    1356:	8b e2       	ldi	r24, 0x2B	; 43
    1358:	82 9f       	mul	r24, r18
    135a:	80 01       	movw	r16, r0
    135c:	83 9f       	mul	r24, r19
    135e:	10 0d       	add	r17, r0
    1360:	11 24       	eor	r1, r1
    1362:	05 c0       	rjmp	.+10     	; 0x136e <processPID+0x52>
	error = setPoint - processValue;
	
	//------ Calculate P term --------//
	if (error > (PROP_MAX / Kp))			// Compare before multiplication to avoid overflow
	{
		p_term = PROP_MAX;	
    1364:	08 e9       	ldi	r16, 0x98	; 152
    1366:	1a e3       	ldi	r17, 0x3A	; 58
    1368:	02 c0       	rjmp	.+4      	; 0x136e <processPID+0x52>
	}
	else if (error < (PROP_MIN / Kp))
	{
		p_term = PROP_MIN;	
    136a:	08 e6       	ldi	r16, 0x68	; 104
    136c:	15 ec       	ldi	r17, 0xC5	; 197
	{
		p_term = error * Kp;
	}
	
	//------ Calculate I term --------//
	if (!(mode & PID_RESET_INTEGRATOR))
    136e:	92 fc       	sbrc	r9, 2
    1370:	1f c0       	rjmp	.+62     	; 0x13b0 <processPID+0x94>
		integAcc += error * Ki;
    1372:	83 e2       	ldi	r24, 0x23	; 35
    1374:	82 9f       	mul	r24, r18
    1376:	a0 01       	movw	r20, r0
    1378:	83 9f       	mul	r24, r19
    137a:	50 0d       	add	r21, r0
    137c:	11 24       	eor	r1, r1
    137e:	66 27       	eor	r22, r22
    1380:	57 fd       	sbrc	r21, 7
    1382:	60 95       	com	r22
    1384:	76 2f       	mov	r23, r22
    1386:	80 91 86 01 	lds	r24, 0x0186
    138a:	90 91 87 01 	lds	r25, 0x0187
    138e:	a0 91 88 01 	lds	r26, 0x0188
    1392:	b0 91 89 01 	lds	r27, 0x0189
    1396:	84 0f       	add	r24, r20
    1398:	95 1f       	adc	r25, r21
    139a:	a6 1f       	adc	r26, r22
    139c:	b7 1f       	adc	r27, r23
    139e:	80 93 86 01 	sts	0x0186, r24
    13a2:	90 93 87 01 	sts	0x0187, r25
    13a6:	a0 93 88 01 	sts	0x0188, r26
    13aa:	b0 93 89 01 	sts	0x0189, r27
    13ae:	08 c0       	rjmp	.+16     	; 0x13c0 <processPID+0xa4>
	else
		integAcc = 0;		// May be useful for debug
    13b0:	10 92 86 01 	sts	0x0186, r1
    13b4:	10 92 87 01 	sts	0x0187, r1
    13b8:	10 92 88 01 	sts	0x0188, r1
    13bc:	10 92 89 01 	sts	0x0189, r1

	#ifdef INTEGRATOR_SOFT_LIMIT
	// Soft limit is a monotone linear function f(error), f(error) = 0 when error = INTEGRATOR_SOFT_RANGE
	// growing up to f(error) = INTEGRATOR_SOFT_MAX when error = 0
	if (error > INTEGRATOR_SOFT_RANGE)
    13c0:	2d 35       	cpi	r18, 0x5D	; 93
    13c2:	81 e0       	ldi	r24, 0x01	; 1
    13c4:	38 07       	cpc	r19, r24
    13c6:	64 f4       	brge	.+24     	; 0x13e0 <processPID+0xc4>
		integ_max = 0;
	else if (error < 0)
    13c8:	37 fd       	sbrc	r19, 7
    13ca:	0e c0       	rjmp	.+28     	; 0x13e8 <processPID+0xcc>
		integ_max = INTEGRATOR_MAX;
	else
	{
		integ_max = (int32_t)(INTEGRATOR_SOFT_RANGE - error) * integ_soft_k;	// <- optimized
    13cc:	ac e5       	ldi	r26, 0x5C	; 92
    13ce:	b1 e0       	ldi	r27, 0x01	; 1
    13d0:	a2 1b       	sub	r26, r18
    13d2:	b3 0b       	sbc	r27, r19
    13d4:	20 91 84 01 	lds	r18, 0x0184
    13d8:	30 91 85 01 	lds	r19, 0x0185
    13dc:	ae d3       	rcall	.+1884   	; 0x1b3a <__usmulhisi3>
    13de:	08 c0       	rjmp	.+16     	; 0x13f0 <processPID+0xd4>

	#ifdef INTEGRATOR_SOFT_LIMIT
	// Soft limit is a monotone linear function f(error), f(error) = 0 when error = INTEGRATOR_SOFT_RANGE
	// growing up to f(error) = INTEGRATOR_SOFT_MAX when error = 0
	if (error > INTEGRATOR_SOFT_RANGE)
		integ_max = 0;
    13e0:	60 e0       	ldi	r22, 0x00	; 0
    13e2:	70 e0       	ldi	r23, 0x00	; 0
    13e4:	cb 01       	movw	r24, r22
    13e6:	04 c0       	rjmp	.+8      	; 0x13f0 <processPID+0xd4>
	else if (error < 0)
		integ_max = INTEGRATOR_MAX;
    13e8:	60 e2       	ldi	r22, 0x20	; 32
    13ea:	71 ea       	ldi	r23, 0xA1	; 161
    13ec:	87 e0       	ldi	r24, 0x07	; 7
    13ee:	90 e0       	ldi	r25, 0x00	; 0
	else
	{
		integ_max = (int32_t)(INTEGRATOR_SOFT_RANGE - error) * integ_soft_k;	// <- optimized
	}

	if (integAcc > integ_max )
    13f0:	40 90 86 01 	lds	r4, 0x0186
    13f4:	50 90 87 01 	lds	r5, 0x0187
    13f8:	60 90 88 01 	lds	r6, 0x0188
    13fc:	70 90 89 01 	lds	r7, 0x0189
    1400:	64 15       	cp	r22, r4
    1402:	75 05       	cpc	r23, r5
    1404:	86 05       	cpc	r24, r6
    1406:	97 05       	cpc	r25, r7
    1408:	4c f4       	brge	.+18     	; 0x141c <processPID+0x100>
	{
		integAcc = integ_max;
    140a:	60 93 86 01 	sts	0x0186, r22
    140e:	70 93 87 01 	sts	0x0187, r23
    1412:	80 93 88 01 	sts	0x0188, r24
    1416:	90 93 89 01 	sts	0x0189, r25
    141a:	0a c0       	rjmp	.+20     	; 0x1430 <processPID+0x114>
	}
	else if (integAcc < INTEGRATOR_MIN)
    141c:	77 fe       	sbrs	r7, 7
    141e:	08 c0       	rjmp	.+16     	; 0x1430 <processPID+0x114>
	{
		integAcc = INTEGRATOR_MIN;
    1420:	10 92 86 01 	sts	0x0186, r1
    1424:	10 92 87 01 	sts	0x0187, r1
    1428:	10 92 88 01 	sts	0x0188, r1
    142c:	10 92 89 01 	sts	0x0189, r1
	{
		integAcc = INTEGRATOR_MIN;
	}
	#endif
	
	i_term = (int16_t)(integAcc / INTEGRATOR_SCALE);	// Should not exceed MAXINT16
    1430:	60 91 86 01 	lds	r22, 0x0186
    1434:	70 91 87 01 	lds	r23, 0x0187
    1438:	80 91 88 01 	lds	r24, 0x0188
    143c:	90 91 89 01 	lds	r25, 0x0189
    1440:	24 e6       	ldi	r18, 0x64	; 100
    1442:	30 e0       	ldi	r19, 0x00	; 0
    1444:	40 e0       	ldi	r20, 0x00	; 0
    1446:	50 e0       	ldi	r21, 0x00	; 0
    1448:	4b d3       	rcall	.+1686   	; 0x1ae0 <__divmodsi4>
    144a:	69 01       	movw	r12, r18

	//------ Calculate D term --------//
	d_term = lastProcessValue - processValue;	
    144c:	80 91 8a 01 	lds	r24, 0x018A
    1450:	90 91 8b 01 	lds	r25, 0x018B
    1454:	8e 19       	sub	r24, r14
    1456:	9f 09       	sbc	r25, r15
	if (d_term > DIFF_MAX / Kd)
    1458:	88 30       	cpi	r24, 0x08	; 8
    145a:	91 05       	cpc	r25, r1
    145c:	74 f4       	brge	.+28     	; 0x147a <processPID+0x15e>
	{
		d_term = DIFF_MAX;
	}
	else if (d_term < DIFF_MIN / Kd)
    145e:	89 3f       	cpi	r24, 0xF9	; 249
    1460:	2f ef       	ldi	r18, 0xFF	; 255
    1462:	92 07       	cpc	r25, r18
    1464:	6c f0       	brlt	.+26     	; 0x1480 <processPID+0x164>
	{
		d_term = DIFF_MIN;
	}
	else
	{
		d_term = Kd * d_term;
    1466:	20 e9       	ldi	r18, 0x90	; 144
    1468:	31 e0       	ldi	r19, 0x01	; 1
    146a:	82 9f       	mul	r24, r18
    146c:	e0 01       	movw	r28, r0
    146e:	83 9f       	mul	r24, r19
    1470:	d0 0d       	add	r29, r0
    1472:	92 9f       	mul	r25, r18
    1474:	d0 0d       	add	r29, r0
    1476:	11 24       	eor	r1, r1
    1478:	05 c0       	rjmp	.+10     	; 0x1484 <processPID+0x168>

	//------ Calculate D term --------//
	d_term = lastProcessValue - processValue;	
	if (d_term > DIFF_MAX / Kd)
	{
		d_term = DIFF_MAX;
    147a:	c8 eb       	ldi	r28, 0xB8	; 184
    147c:	db e0       	ldi	r29, 0x0B	; 11
    147e:	02 c0       	rjmp	.+4      	; 0x1484 <processPID+0x168>
	}
	else if (d_term < DIFF_MIN / Kd)
	{
		d_term = DIFF_MIN;
    1480:	c8 e4       	ldi	r28, 0x48	; 72
    1482:	d4 ef       	ldi	r29, 0xF4	; 244
	}
	else
	{
		d_term = Kd * d_term;
	}
	lastProcessValue = processValue;
    1484:	f0 92 8b 01 	sts	0x018B, r15
    1488:	e0 92 8a 01 	sts	0x018A, r14
	
	//--------- Summ terms -----------//
	if (mode & PID_ENABLED)
    148c:	90 fe       	sbrs	r9, 0
    148e:	21 c0       	rjmp	.+66     	; 0x14d2 <processPID+0x1b6>
		temp = (int16_t)( ((int32_t)p_term + (int32_t)i_term + (int32_t)d_term) / SCALING_FACTOR );
    1490:	b8 01       	movw	r22, r16
    1492:	88 27       	eor	r24, r24
    1494:	77 fd       	sbrc	r23, 7
    1496:	80 95       	com	r24
    1498:	98 2f       	mov	r25, r24
    149a:	26 01       	movw	r4, r12
    149c:	66 24       	eor	r6, r6
    149e:	57 fc       	sbrc	r5, 7
    14a0:	60 94       	com	r6
    14a2:	76 2c       	mov	r7, r6
    14a4:	64 0d       	add	r22, r4
    14a6:	75 1d       	adc	r23, r5
    14a8:	86 1d       	adc	r24, r6
    14aa:	97 1d       	adc	r25, r7
    14ac:	2e 01       	movw	r4, r28
    14ae:	66 24       	eor	r6, r6
    14b0:	57 fc       	sbrc	r5, 7
    14b2:	60 94       	com	r6
    14b4:	76 2c       	mov	r7, r6
    14b6:	64 0d       	add	r22, r4
    14b8:	75 1d       	adc	r23, r5
    14ba:	86 1d       	adc	r24, r6
    14bc:	97 1d       	adc	r25, r7
    14be:	24 e1       	ldi	r18, 0x14	; 20
    14c0:	30 e0       	ldi	r19, 0x00	; 0
    14c2:	40 e0       	ldi	r20, 0x00	; 0
    14c4:	50 e0       	ldi	r21, 0x00	; 0
    14c6:	0c d3       	rcall	.+1560   	; 0x1ae0 <__divmodsi4>
	else
		temp = 0;
	
	if (temp > PID_OUTPUT_MAX)
    14c8:	25 3f       	cpi	r18, 0xF5	; 245
    14ca:	81 e0       	ldi	r24, 0x01	; 1
    14cc:	38 07       	cpc	r19, r24
    14ce:	44 f4       	brge	.+16     	; 0x14e0 <processPID+0x1c4>
    14d0:	02 c0       	rjmp	.+4      	; 0x14d6 <processPID+0x1ba>
	
	//--------- Summ terms -----------//
	if (mode & PID_ENABLED)
		temp = (int16_t)( ((int32_t)p_term + (int32_t)i_term + (int32_t)d_term) / SCALING_FACTOR );
	else
		temp = 0;
    14d2:	20 e0       	ldi	r18, 0x00	; 0
    14d4:	30 e0       	ldi	r19, 0x00	; 0
    14d6:	37 ff       	sbrs	r19, 7
    14d8:	05 c0       	rjmp	.+10     	; 0x14e4 <processPID+0x1c8>
    14da:	20 e0       	ldi	r18, 0x00	; 0
    14dc:	30 e0       	ldi	r19, 0x00	; 0
    14de:	02 c0       	rjmp	.+4      	; 0x14e4 <processPID+0x1c8>
	
	if (temp > PID_OUTPUT_MAX)
	{
		temp = PID_OUTPUT_MAX;
    14e0:	24 ef       	ldi	r18, 0xF4	; 244
    14e2:	31 e0       	ldi	r19, 0x01	; 1
	{
		temp = PID_OUTPUT_MIN;
	}
	
	//------- Debug --------//
	PRELOAD("z",dbg_p);			// A trick used to make GCC use indirect addressing with displacement
    14e4:	e6 ed       	ldi	r30, 0xD6	; 214
    14e6:	f1 e0       	ldi	r31, 0x01	; 1
								// This macro puts dbg_p into specified registers (Z for this case)
	dbg_p->PID_SetPoint = setPoint;
    14e8:	b1 82       	std	Z+1, r11	; 0x01
    14ea:	a0 82       	st	Z, r10
	dbg_p->PID_ProcessValue = processValue;
    14ec:	f3 82       	std	Z+3, r15	; 0x03
    14ee:	e2 82       	std	Z+2, r14	; 0x02
	//dbg_p->PID_error = error;
	dbg_p->PID_p_term = p_term;
    14f0:	15 83       	std	Z+5, r17	; 0x05
    14f2:	04 83       	std	Z+4, r16	; 0x04
	dbg_p->PID_i_term = i_term;
    14f4:	d7 82       	std	Z+7, r13	; 0x07
    14f6:	c6 82       	std	Z+6, r12	; 0x06
	//dbg_p->PID_i_max = (int16_t)(integ_max / INTEGRATOR_SCALE);
	dbg_p->PID_d_term = d_term;
    14f8:	d1 87       	std	Z+9, r29	; 0x09
    14fa:	c0 87       	std	Z+8, r28	; 0x08
	dbg_p->PID_output = (uint16_t)temp;
    14fc:	22 87       	std	Z+10, r18	; 0x0a
    14fe:	33 87       	std	Z+11, r19	; 0x0b

	
	return (uint16_t)temp;	
}
    1500:	c9 01       	movw	r24, r18
    1502:	df 91       	pop	r29
    1504:	cf 91       	pop	r28
    1506:	1f 91       	pop	r17
    1508:	0f 91       	pop	r16
    150a:	ff 90       	pop	r15
    150c:	ef 90       	pop	r14
    150e:	df 90       	pop	r13
    1510:	cf 90       	pop	r12
    1512:	bf 90       	pop	r11
    1514:	af 90       	pop	r10
    1516:	9f 90       	pop	r9
    1518:	7f 90       	pop	r7
    151a:	6f 90       	pop	r6
    151c:	5f 90       	pop	r5
    151e:	4f 90       	pop	r4
    1520:	08 95       	ret

00001522 <setHeaterPower>:
void setHeaterPower(uint16_t value)
{
	// Disable interrupts from analog comparator
	//ACSR = (0<<ACIS1 | 0<<ACIS0);
	uint16_t temp = (value > HEATER_MAX_POWER) ? HEATER_MAX_POWER : value;
	cli();
    1522:	f8 94       	cli
// For some reason accessing ACSR makes something wrong with the interrupt - a weird bug
void setHeaterPower(uint16_t value)
{
	// Disable interrupts from analog comparator
	//ACSR = (0<<ACIS1 | 0<<ACIS0);
	uint16_t temp = (value > HEATER_MAX_POWER) ? HEATER_MAX_POWER : value;
    1524:	9c 01       	movw	r18, r24
    1526:	25 3f       	cpi	r18, 0xF5	; 245
    1528:	81 e0       	ldi	r24, 0x01	; 1
    152a:	38 07       	cpc	r19, r24
    152c:	10 f0       	brcs	.+4      	; 0x1532 <setHeaterPower+0x10>
    152e:	24 ef       	ldi	r18, 0xF4	; 244
    1530:	31 e0       	ldi	r19, 0x01	; 1
	cli();
	// Update value
	heaterPower = temp;		
    1532:	30 93 8f 01 	sts	0x018F, r19
    1536:	20 93 8e 01 	sts	0x018E, r18
	// Reenable interrupts
	//ACSR = (1<<ACIE | 0<<ACIS1 | 0<<ACIS0);
	sei();
    153a:	78 94       	sei
    153c:	08 95       	ret

0000153e <setMotorDirection>:

// User function to control motor rotation
void setMotorDirection(uint8_t dir)
{
	// Disable interrupts from timer0 
	TIMSK = (1<<OCIE2);
    153e:	90 e8       	ldi	r25, 0x80	; 128
    1540:	99 bf       	out	0x39, r25	; 57
		
	newDirReq = dir;	// save new direction request
    1542:	80 93 90 01 	sts	0x0190, r24
	dirChangedMask = ~ROLL_DIR_CHANGED;
    1546:	9f ed       	ldi	r25, 0xDF	; 223
    1548:	90 93 84 00 	sts	0x0084, r25
	
	if (dir & ROLL_FWD)
    154c:	80 ff       	sbrs	r24, 0
    154e:	09 c0       	rjmp	.+18     	; 0x1562 <setMotorDirection+0x24>
		bottomPoint = rollPoint;  
    1550:	80 91 91 01 	lds	r24, 0x0191
    1554:	90 91 92 01 	lds	r25, 0x0192
    1558:	90 93 94 01 	sts	0x0194, r25
    155c:	80 93 93 01 	sts	0x0193, r24
    1560:	0a c0       	rjmp	.+20     	; 0x1576 <setMotorDirection+0x38>
	else if (dir & ROLL_REV)
    1562:	81 ff       	sbrs	r24, 1
    1564:	08 c0       	rjmp	.+16     	; 0x1576 <setMotorDirection+0x38>
		topPoint = rollPoint;
    1566:	80 91 91 01 	lds	r24, 0x0191
    156a:	90 91 92 01 	lds	r25, 0x0192
    156e:	90 93 96 01 	sts	0x0196, r25
    1572:	80 93 95 01 	sts	0x0195, r24

	// Enable interrupts from timer 0
	TIMSK = (1<<TOIE0 | 1<<OCIE2);
    1576:	81 e8       	ldi	r24, 0x81	; 129
    1578:	89 bf       	out	0x39, r24	; 57
    157a:	08 95       	ret

0000157c <stopCycleRolling>:
}

void stopCycleRolling(uint8_t doResetPoints)
{
	// Disable interrupts from timer0 
	TIMSK = (1<<OCIE2);
    157c:	90 e8       	ldi	r25, 0x80	; 128
    157e:	99 bf       	out	0x39, r25	; 57
	
	rollState &= ~ROLL_CYCLE;
    1580:	90 91 8d 01 	lds	r25, 0x018D
    1584:	9b 7f       	andi	r25, 0xFB	; 251
    1586:	90 93 8d 01 	sts	0x018D, r25
	if (doResetPoints)
    158a:	88 23       	and	r24, r24
    158c:	71 f0       	breq	.+28     	; 0x15aa <stopCycleRolling+0x2e>
	{
		topPoint = bottomPoint = rollPoint;
    158e:	80 91 91 01 	lds	r24, 0x0191
    1592:	90 91 92 01 	lds	r25, 0x0192
    1596:	90 93 94 01 	sts	0x0194, r25
    159a:	80 93 93 01 	sts	0x0193, r24
    159e:	90 93 96 01 	sts	0x0196, r25
    15a2:	80 93 95 01 	sts	0x0195, r24
		activeRollCycle = 0;	
    15a6:	10 92 8c 01 	sts	0x018C, r1
	}		
	
	// Enable interrupts from timer 0
	TIMSK = (1<<TOIE0 | 1<<OCIE2);
    15aa:	81 e8       	ldi	r24, 0x81	; 129
    15ac:	89 bf       	out	0x39, r24	; 57
    15ae:	08 95       	ret

000015b0 <clearRollFlags>:

// Safe way to reset some bits in rollState variable
void clearRollFlags(uint8_t flags)
{
	// Disable interrupts from timer0 
	TIMSK = (1<<OCIE2);
    15b0:	90 e8       	ldi	r25, 0x80	; 128
    15b2:	99 bf       	out	0x39, r25	; 57

	// Clear specified bits
	rollState &= ~flags;
    15b4:	80 95       	com	r24
    15b6:	90 91 8d 01 	lds	r25, 0x018D
    15ba:	98 23       	and	r25, r24
    15bc:	90 93 8d 01 	sts	0x018D, r25
	
	// Enable interrupts from timer 0
	TIMSK = (1<<TOIE0 | 1<<OCIE2);
    15c0:	81 e8       	ldi	r24, 0x81	; 129
    15c2:	89 bf       	out	0x39, r24	; 57
    15c4:	08 95       	ret

000015c6 <isTopPointValid>:
}

uint8_t isTopPointValid(void)
{
	// Disable interrupts from timer0 
	TIMSK = (1<<OCIE2);
    15c6:	80 e8       	ldi	r24, 0x80	; 128
    15c8:	89 bf       	out	0x39, r24	; 57
	uint8_t temp = ( (int16_t)(topPoint - rollPoint) >= 0 );
    15ca:	80 91 95 01 	lds	r24, 0x0195
    15ce:	90 91 96 01 	lds	r25, 0x0196
    15d2:	20 91 91 01 	lds	r18, 0x0191
    15d6:	30 91 92 01 	lds	r19, 0x0192
    15da:	82 1b       	sub	r24, r18
    15dc:	93 0b       	sbc	r25, r19
    15de:	89 2f       	mov	r24, r25
    15e0:	80 95       	com	r24
	// Enable interrupts from timer 0
	TIMSK = (1<<TOIE0 | 1<<OCIE2);
    15e2:	91 e8       	ldi	r25, 0x81	; 129
    15e4:	99 bf       	out	0x39, r25	; 57
	return temp;
}
    15e6:	88 1f       	adc	r24, r24
    15e8:	88 27       	eor	r24, r24
    15ea:	88 1f       	adc	r24, r24
    15ec:	08 95       	ret

000015ee <isBottomPointValid>:

uint8_t isBottomPointValid(void)
{
	// Disable interrupts from timer0 
	TIMSK = (1<<OCIE2);
    15ee:	80 e8       	ldi	r24, 0x80	; 128
    15f0:	89 bf       	out	0x39, r24	; 57
	uint8_t temp = ( (int16_t)(rollPoint - bottomPoint) >= 0 );
    15f2:	80 91 91 01 	lds	r24, 0x0191
    15f6:	90 91 92 01 	lds	r25, 0x0192
    15fa:	20 91 93 01 	lds	r18, 0x0193
    15fe:	30 91 94 01 	lds	r19, 0x0194
    1602:	82 1b       	sub	r24, r18
    1604:	93 0b       	sbc	r25, r19
    1606:	89 2f       	mov	r24, r25
    1608:	80 95       	com	r24
	// Enable interrupts from timer 0
	TIMSK = (1<<TOIE0 | 1<<OCIE2);
    160a:	91 e8       	ldi	r25, 0x81	; 129
    160c:	99 bf       	out	0x39, r25	; 57
	return temp;
}
    160e:	88 1f       	adc	r24, r24
    1610:	88 27       	eor	r24, r24
    1612:	88 1f       	adc	r24, r24
    1614:	08 95       	ret

00001616 <startCycleRolling>:


uint8_t startCycleRolling(void)
{
	// Disable interrupts from timer0 
	TIMSK = (1<<OCIE2);
    1616:	80 e8       	ldi	r24, 0x80	; 128
    1618:	89 bf       	out	0x39, r24	; 57
	
	if ( isTopPointValid() && isBottomPointValid() )
    161a:	d5 df       	rcall	.-86     	; 0x15c6 <isTopPointValid>
    161c:	88 23       	and	r24, r24
    161e:	59 f0       	breq	.+22     	; 0x1636 <startCycleRolling+0x20>
    1620:	e6 df       	rcall	.-52     	; 0x15ee <isBottomPointValid>
    1622:	88 23       	and	r24, r24
    1624:	41 f0       	breq	.+16     	; 0x1636 <startCycleRolling+0x20>
	{
		rollState |= ROLL_CYCLE;
    1626:	80 91 8d 01 	lds	r24, 0x018D
    162a:	84 60       	ori	r24, 0x04	; 4
    162c:	80 93 8d 01 	sts	0x018D, r24
		activeRollCycle = 1;
    1630:	81 e0       	ldi	r24, 0x01	; 1
    1632:	80 93 8c 01 	sts	0x018C, r24
	}
	
	// Enable interrupts from timer 0
	TIMSK = (1<<TOIE0 | 1<<OCIE2);
    1636:	81 e8       	ldi	r24, 0x81	; 129
    1638:	89 bf       	out	0x39, r24	; 57
	
	return (rollState & ROLL_CYCLE);
    163a:	80 91 8d 01 	lds	r24, 0x018D
}
    163e:	84 70       	andi	r24, 0x04	; 4
    1640:	08 95       	ret

00001642 <isACSyncPresent>:
}


uint8_t isACSyncPresent(void)
{
	return 	p_state == 0x0F;
    1642:	81 e0       	ldi	r24, 0x01	; 1
    1644:	90 91 85 00 	lds	r25, 0x0085
    1648:	9f 30       	cpi	r25, 0x0F	; 15
    164a:	09 f0       	breq	.+2      	; 0x164e <isACSyncPresent+0xc>
    164c:	80 e0       	ldi	r24, 0x00	; 0
}
    164e:	08 95       	ret

00001650 <__vector_16>:




ISR(ANA_COMP_vect)
{
    1650:	1f 92       	push	r1
    1652:	0f 92       	push	r0
    1654:	0f b6       	in	r0, 0x3f	; 63
    1656:	0f 92       	push	r0
    1658:	11 24       	eor	r1, r1
    165a:	2f 93       	push	r18
    165c:	3f 93       	push	r19
    165e:	4f 93       	push	r20
    1660:	5f 93       	push	r21
    1662:	8f 93       	push	r24
    1664:	9f 93       	push	r25
	static uint16_t sigma = 0;
	uint16_t delta;
	
	// Once triggered, disable further comparator interrupt
	ACSR &= ~(1<<ACIE);		// safe - ACI flag will be cleared anyway before reenabling comparator interrupt
    1666:	43 98       	cbi	0x08, 3	; 8
	
	// Process heater delta-sigma modulator
	if (sigma >= HEATER_MAX_POWER)
    1668:	40 91 97 01 	lds	r20, 0x0197
    166c:	50 91 98 01 	lds	r21, 0x0198
    1670:	44 3f       	cpi	r20, 0xF4	; 244
    1672:	81 e0       	ldi	r24, 0x01	; 1
    1674:	58 07       	cpc	r21, r24
    1676:	30 f0       	brcs	.+12     	; 0x1684 <__vector_16+0x34>
	{
		PORTD |= (1<<PD_HEATER | 1<<PD_HEAT_INDIC);
    1678:	82 b3       	in	r24, 0x12	; 18
    167a:	80 63       	ori	r24, 0x30	; 48
    167c:	82 bb       	out	0x12, r24	; 18
		delta = -HEATER_MAX_POWER;	
    167e:	2c e0       	ldi	r18, 0x0C	; 12
    1680:	3e ef       	ldi	r19, 0xFE	; 254
    1682:	03 c0       	rjmp	.+6      	; 0x168a <__vector_16+0x3a>
	}		
	else
	{
		PORTD &= ~(1<<PD_HEAT_INDIC);
    1684:	95 98       	cbi	0x12, 5	; 18
		delta = 0;
    1686:	20 e0       	ldi	r18, 0x00	; 0
    1688:	30 e0       	ldi	r19, 0x00	; 0
	}
	sigma += delta + heaterPower;	
    168a:	80 91 8e 01 	lds	r24, 0x018E
    168e:	90 91 8f 01 	lds	r25, 0x018F
    1692:	84 0f       	add	r24, r20
    1694:	95 1f       	adc	r25, r21
    1696:	82 0f       	add	r24, r18
    1698:	93 1f       	adc	r25, r19
    169a:	90 93 98 01 	sts	0x0198, r25
    169e:	80 93 97 01 	sts	0x0197, r24
	
	// Reprogram timer0
	TCNT0 = 256 - TRIAC_IMPULSE_TIME;		// Triac gate impulse time
    16a2:	86 ef       	ldi	r24, 0xF6	; 246
    16a4:	82 bf       	out	0x32, r24	; 50
	TIFR = (1<<TOV0);						// Clear interrupt flag - safe, write operation is used (not r-m-w)
    16a6:	81 e0       	ldi	r24, 0x01	; 1
    16a8:	88 bf       	out	0x38, r24	; 56
	// Modify state	
	p_state &= ~STATE_MASK;					// Start new state machine cycle
    16aa:	80 91 85 00 	lds	r24, 0x0085
    16ae:	80 7f       	andi	r24, 0xF0	; 240
	p_state ^= HALF_PERIOD_FLAG;			// Toggle flag
    16b0:	80 58       	subi	r24, 0x80	; 128
    16b2:	80 93 85 00 	sts	0x0085, r24
	
}
    16b6:	9f 91       	pop	r25
    16b8:	8f 91       	pop	r24
    16ba:	5f 91       	pop	r21
    16bc:	4f 91       	pop	r20
    16be:	3f 91       	pop	r19
    16c0:	2f 91       	pop	r18
    16c2:	0f 90       	pop	r0
    16c4:	0f be       	out	0x3f, r0	; 63
    16c6:	0f 90       	pop	r0
    16c8:	1f 90       	pop	r1
    16ca:	18 95       	reti

000016cc <__vector_9>:



ISR(TIMER0_OVF_vect)
{
    16cc:	1f 92       	push	r1
    16ce:	0f 92       	push	r0
    16d0:	0f b6       	in	r0, 0x3f	; 63
    16d2:	0f 92       	push	r0
    16d4:	11 24       	eor	r1, r1
    16d6:	2f 93       	push	r18
    16d8:	3f 93       	push	r19
    16da:	4f 93       	push	r20
    16dc:	5f 93       	push	r21
    16de:	6f 93       	push	r22
    16e0:	7f 93       	push	r23
    16e2:	8f 93       	push	r24
    16e4:	9f 93       	push	r25
    16e6:	af 93       	push	r26
    16e8:	bf 93       	push	r27
    16ea:	ef 93       	push	r30
    16ec:	ff 93       	push	r31
	uint8_t temp;
	
	switch(p_state & STATE_MASK)
    16ee:	80 91 85 00 	lds	r24, 0x0085
    16f2:	8f 70       	andi	r24, 0x0F	; 15
    16f4:	81 30       	cpi	r24, 0x01	; 1
    16f6:	49 f0       	breq	.+18     	; 0x170a <__vector_9+0x3e>
    16f8:	28 f0       	brcs	.+10     	; 0x1704 <__vector_9+0x38>
    16fa:	82 30       	cpi	r24, 0x02	; 2
    16fc:	49 f0       	breq	.+18     	; 0x1710 <__vector_9+0x44>
    16fe:	83 30       	cpi	r24, 0x03	; 3
    1700:	69 f4       	brne	.+26     	; 0x171c <__vector_9+0x50>
    1702:	0b c0       	rjmp	.+22     	; 0x171a <__vector_9+0x4e>
	{
		// TRIAC_IMPULSE_TIME finished
		case 0x00:
			// Turn off heater TRIAC
			PORTD &= ~(1<<PD_HEATER);
    1704:	94 98       	cbi	0x12, 4	; 18
			TCNT0 = 256 - (QUATER_PERIOD_TIME - TRIAC_IMPULSE_TIME);
    1706:	8c eb       	ldi	r24, 0xBC	; 188
    1708:	01 c0       	rjmp	.+2      	; 0x170c <__vector_9+0x40>
			break;
		// QUATER_PERIOD_TIME finished	
		case 0x01:	
			TCNT0 = 256 - (SYNC_IGNORE_TIME - QUATER_PERIOD_TIME);
    170a:	81 ed       	ldi	r24, 0xD1	; 209
    170c:	82 bf       	out	0x32, r24	; 50
			break;	
    170e:	06 c0       	rjmp	.+12     	; 0x171c <__vector_9+0x50>
		// SYNC_IGNORE_TIME finished	
		case 0x02:
			TCNT0 = 256 - SYNC_LOST_TIMEOUT;
    1710:	82 ec       	ldi	r24, 0xC2	; 194
    1712:	82 bf       	out	0x32, r24	; 50
			// Clear flag and enable interrupt from analog comparator
			ACSR = (1<<ACI | 1<<ACIE | 0<<ACIS1 | 0<<ACIS0);
    1714:	88 e1       	ldi	r24, 0x18	; 24
    1716:	88 b9       	out	0x08, r24	; 8
			break;
    1718:	01 c0       	rjmp	.+2      	; 0x171c <__vector_9+0x50>
		// SYNC_LOST_TIMEOUT finished
		case 0x03:
			// Error - sync is lost. It means that device has been disconnected from AC line.
			// Disable all power-consuming devices like LEDs and save user settings to EEPROM.
			exitPowerOff();
    171a:	5d d8       	rcall	.-3910   	; 0x7d6 <exitPowerOff>
			// Sync is not present - do nothing
			break;
	}	

	// Full period check
	if ((p_state & (HALF_PERIOD_FLAG | STATE_MASK)) == (HALF_PERIOD_FLAG | 0x01))
    171c:	80 91 85 00 	lds	r24, 0x0085
    1720:	8f 78       	andi	r24, 0x8F	; 143
    1722:	81 38       	cpi	r24, 0x81	; 129
    1724:	09 f0       	breq	.+2      	; 0x1728 <__vector_9+0x5c>
    1726:	81 c0       	rjmp	.+258    	; 0x182a <__vector_9+0x15e>
	{
		// Quarter AC line period is done. Update motor controls.
		temp = PORTD;
    1728:	82 b3       	in	r24, 0x12	; 18
		temp &= ~(1<<PD_M1 | 1<<PD_M2);
    172a:	83 7f       	andi	r24, 0xF3	; 243
		if ( rollState & SKIP_CURRENT_MOTOR_CTRL )
    172c:	90 91 8d 01 	lds	r25, 0x018D
    1730:	93 ff       	sbrs	r25, 3
    1732:	05 c0       	rjmp	.+10     	; 0x173e <__vector_9+0x72>
		{
			// Direction control changed. Skip current period to allow TRIACs fully close
			rollState &= ~SKIP_CURRENT_MOTOR_CTRL;
    1734:	97 7f       	andi	r25, 0xF7	; 247
    1736:	90 93 8d 01 	sts	0x018D, r25
			PORTD = temp; 	
    173a:	82 bb       	out	0x12, r24	; 18
    173c:	76 c0       	rjmp	.+236    	; 0x182a <__vector_9+0x15e>
		}
		else
		{
			// Apply direction control 
			if (rollState & ROLL_FWD)
    173e:	90 ff       	sbrs	r25, 0
    1740:	02 c0       	rjmp	.+4      	; 0x1746 <__vector_9+0x7a>
				temp |= (1<<PD_M1);
    1742:	84 60       	ori	r24, 0x04	; 4
    1744:	02 c0       	rjmp	.+4      	; 0x174a <__vector_9+0x7e>
			else if (rollState & ROLL_REV)
    1746:	91 fd       	sbrc	r25, 1
				temp |= (1<<PD_M2);
    1748:	88 60       	ori	r24, 0x08	; 8
			PORTD = temp; 
    174a:	82 bb       	out	0x12, r24	; 18
// Call once per each AC line period
// Function is called from Timer0 ISR only
static inline void controlRolling()
{
	// Process cycle rolling
	switch(rollState & (ROLL_FWD | ROLL_REV | ROLL_CYCLE))
    174c:	40 91 8d 01 	lds	r20, 0x018D
    1750:	84 2f       	mov	r24, r20
    1752:	87 70       	andi	r24, 0x07	; 7
    1754:	85 30       	cpi	r24, 0x05	; 5
    1756:	19 f0       	breq	.+6      	; 0x175e <__vector_9+0x92>
    1758:	86 30       	cpi	r24, 0x06	; 6
    175a:	e9 f5       	brne	.+122    	; 0x17d6 <__vector_9+0x10a>
    175c:	1d c0       	rjmp	.+58     	; 0x1798 <__vector_9+0xcc>
//---------------------------------------------//

// Function is called from Timer0 ISR only
static inline uint8_t reachedTopPoint(void)
{
	return (	(int16_t)(topPoint - rollPoint) <= 0 );
    175e:	80 91 95 01 	lds	r24, 0x0195
    1762:	90 91 96 01 	lds	r25, 0x0196
    1766:	20 91 91 01 	lds	r18, 0x0191
    176a:	30 91 92 01 	lds	r19, 0x0192
    176e:	82 1b       	sub	r24, r18
    1770:	93 0b       	sbc	r25, r19
{
	// Process cycle rolling
	switch(rollState & (ROLL_FWD | ROLL_REV | ROLL_CYCLE))
	{
		case (ROLL_FWD | ROLL_CYCLE):
			if (reachedTopPoint())
    1772:	18 16       	cp	r1, r24
    1774:	19 06       	cpc	r1, r25
    1776:	7c f1       	brlt	.+94     	; 0x17d6 <__vector_9+0x10a>
			{
				if (activeRollCycle >= p.rollCycleSet)	
    1778:	80 91 8c 01 	lds	r24, 0x018C
    177c:	90 91 b6 01 	lds	r25, 0x01B6
    1780:	89 17       	cp	r24, r25
    1782:	28 f0       	brcs	.+10     	; 0x178e <__vector_9+0xc2>
				{
					// DONE!
					rollState &= ~ROLL_CYCLE;
    1784:	4b 7f       	andi	r20, 0xFB	; 251
					rollState |= CYCLE_ROLL_DONE;
    1786:	40 61       	ori	r20, 0x10	; 16
    1788:	40 93 8d 01 	sts	0x018D, r20
    178c:	24 c0       	rjmp	.+72     	; 0x17d6 <__vector_9+0x10a>
				}
				else
				{
					activeRollCycle++;
    178e:	8f 5f       	subi	r24, 0xFF	; 255
    1790:	80 93 8c 01 	sts	0x018C, r24
					// Change dir	
					newDirReq = ROLL_REV;				
    1794:	82 e0       	ldi	r24, 0x02	; 2
    1796:	1d c0       	rjmp	.+58     	; 0x17d2 <__vector_9+0x106>
}

// Function is called from Timer0 ISR only
static inline uint8_t reachedBottomPoint(void)
{
	return (	(int16_t)(rollPoint - bottomPoint) <= 0 );
    1798:	80 91 91 01 	lds	r24, 0x0191
    179c:	90 91 92 01 	lds	r25, 0x0192
    17a0:	20 91 93 01 	lds	r18, 0x0193
    17a4:	30 91 94 01 	lds	r19, 0x0194
    17a8:	82 1b       	sub	r24, r18
    17aa:	93 0b       	sbc	r25, r19
				}
			}
			break;
		
		case (ROLL_REV | ROLL_CYCLE):	
			if (reachedBottomPoint())
    17ac:	18 16       	cp	r1, r24
    17ae:	19 06       	cpc	r1, r25
    17b0:	94 f0       	brlt	.+36     	; 0x17d6 <__vector_9+0x10a>
			{
				if (activeRollCycle >= p.rollCycleSet)	
    17b2:	80 91 8c 01 	lds	r24, 0x018C
    17b6:	90 91 b6 01 	lds	r25, 0x01B6
    17ba:	89 17       	cp	r24, r25
    17bc:	30 f0       	brcs	.+12     	; 0x17ca <__vector_9+0xfe>
				{
					// DONE!
					rollState &= ~ROLL_CYCLE;
    17be:	84 2f       	mov	r24, r20
    17c0:	8b 7f       	andi	r24, 0xFB	; 251
					rollState |= CYCLE_ROLL_DONE;
    17c2:	80 61       	ori	r24, 0x10	; 16
    17c4:	80 93 8d 01 	sts	0x018D, r24
    17c8:	06 c0       	rjmp	.+12     	; 0x17d6 <__vector_9+0x10a>
				}
				else
				{
					activeRollCycle++;
    17ca:	8f 5f       	subi	r24, 0xFF	; 255
    17cc:	80 93 8c 01 	sts	0x018C, r24
					// Change dir	
					newDirReq = ROLL_FWD;
    17d0:	81 e0       	ldi	r24, 0x01	; 1
    17d2:	80 93 90 01 	sts	0x0190, r24
		default:
			break;
	}
	
	// Process direction change
	if ((rollState ^ newDirReq) & (ROLL_FWD | ROLL_REV))
    17d6:	20 91 8d 01 	lds	r18, 0x018D
    17da:	90 91 90 01 	lds	r25, 0x0190
    17de:	89 2f       	mov	r24, r25
    17e0:	82 27       	eor	r24, r18
    17e2:	83 70       	andi	r24, 0x03	; 3
    17e4:	19 f0       	breq	.+6      	; 0x17ec <__vector_9+0x120>
	{
		// ROLL_DIR_CHANGED is used for sound beep
		rollState |= (SKIP_CURRENT_MOTOR_CTRL | ROLL_DIR_CHANGED);
    17e6:	28 62       	ori	r18, 0x28	; 40
    17e8:	20 93 8d 01 	sts	0x018D, r18
	}
	
	rollState &= ~(ROLL_FWD | ROLL_REV);
    17ec:	80 91 8d 01 	lds	r24, 0x018D
    17f0:	8c 7f       	andi	r24, 0xFC	; 252
	rollState |= newDirReq;
    17f2:	89 2b       	or	r24, r25
	rollState &= dirChangedMask;
    17f4:	90 91 84 00 	lds	r25, 0x0084
    17f8:	89 23       	and	r24, r25
    17fa:	80 93 8d 01 	sts	0x018D, r24
	dirChangedMask = 0xFF;
    17fe:	9f ef       	ldi	r25, 0xFF	; 255
    1800:	90 93 84 00 	sts	0x0084, r25
}

// Function is called from Timer0 ISR only
static inline void updateRollPoint(void)
{	
	if (rollState & ROLL_FWD)
    1804:	80 ff       	sbrs	r24, 0
    1806:	06 c0       	rjmp	.+12     	; 0x1814 <__vector_9+0x148>
		rollPoint++;
    1808:	80 91 91 01 	lds	r24, 0x0191
    180c:	90 91 92 01 	lds	r25, 0x0192
    1810:	01 96       	adiw	r24, 0x01	; 1
    1812:	07 c0       	rjmp	.+14     	; 0x1822 <__vector_9+0x156>
	else if (rollState & ROLL_REV)
    1814:	81 ff       	sbrs	r24, 1
    1816:	09 c0       	rjmp	.+18     	; 0x182a <__vector_9+0x15e>
		rollPoint--;	
    1818:	80 91 91 01 	lds	r24, 0x0191
    181c:	90 91 92 01 	lds	r25, 0x0192
    1820:	01 97       	sbiw	r24, 0x01	; 1
    1822:	90 93 92 01 	sts	0x0192, r25
    1826:	80 93 91 01 	sts	0x0191, r24
			controlRolling();
		}
	}
	
	
	if ((p_state & STATE_MASK)  != 0x0F)
    182a:	80 91 85 00 	lds	r24, 0x0085
    182e:	98 2f       	mov	r25, r24
    1830:	9f 70       	andi	r25, 0x0F	; 15
    1832:	9f 30       	cpi	r25, 0x0F	; 15
    1834:	19 f0       	breq	.+6      	; 0x183c <__vector_9+0x170>
		p_state++;
    1836:	8f 5f       	subi	r24, 0xFF	; 255
    1838:	80 93 85 00 	sts	0x0085, r24
}	
    183c:	ff 91       	pop	r31
    183e:	ef 91       	pop	r30
    1840:	bf 91       	pop	r27
    1842:	af 91       	pop	r26
    1844:	9f 91       	pop	r25
    1846:	8f 91       	pop	r24
    1848:	7f 91       	pop	r23
    184a:	6f 91       	pop	r22
    184c:	5f 91       	pop	r21
    184e:	4f 91       	pop	r20
    1850:	3f 91       	pop	r19
    1852:	2f 91       	pop	r18
    1854:	0f 90       	pop	r0
    1856:	0f be       	out	0x3f, r0	; 63
    1858:	0f 90       	pop	r0
    185a:	1f 90       	pop	r1
    185c:	18 95       	reti

0000185e <processSoftTimer8b>:
 
 
 
 
 void processSoftTimer8b(SoftTimer8b_t *tmr)
 {
    185e:	fc 01       	movw	r30, r24
	 uint8_t newTimerVal;

	 if (!tmr->Enabled)
    1860:	90 81       	ld	r25, Z
    1862:	90 ff       	sbrs	r25, 0
    1864:	27 c0       	rjmp	.+78     	; 0x18b4 <processSoftTimer8b+0x56>
		return;
	 
	 tmr->FA_EQ = 0;
	 tmr->FA_GE = 0;
	 tmr->FTop = 0;
    1866:	97 7e       	andi	r25, 0xE7	; 231
    1868:	9f 7d       	andi	r25, 0xDF	; 223
    186a:	90 83       	st	Z, r25
	 
	 if (tmr->Timer >= tmr->Top)
    186c:	81 81       	ldd	r24, Z+1	; 0x01
    186e:	22 81       	ldd	r18, Z+2	; 0x02
    1870:	82 17       	cp	r24, r18
    1872:	50 f0       	brcs	.+20     	; 0x1888 <processSoftTimer8b+0x2a>
	 {
		 if (tmr->RunOnce)
    1874:	91 ff       	sbrs	r25, 1
    1876:	02 c0       	rjmp	.+4      	; 0x187c <processSoftTimer8b+0x1e>
		 {
			 tmr->Enabled = 0;
    1878:	9e 7f       	andi	r25, 0xFE	; 254
    187a:	90 83       	st	Z, r25
		 }
		 tmr->FTop = 1;
    187c:	90 81       	ld	r25, Z
		 tmr->FOvfl = 1;
    187e:	90 62       	ori	r25, 0x20	; 32
    1880:	90 64       	ori	r25, 0x40	; 64
    1882:	90 83       	st	Z, r25
		 newTimerVal = 0;
    1884:	20 e0       	ldi	r18, 0x00	; 0
    1886:	02 c0       	rjmp	.+4      	; 0x188c <processSoftTimer8b+0x2e>
	 }
	 else
	 {
		 newTimerVal = tmr->Timer + 1;
    1888:	28 2f       	mov	r18, r24
    188a:	2f 5f       	subi	r18, 0xFF	; 255
	 }
	 
	 if (tmr->Timer == tmr->CompA)
    188c:	93 81       	ldd	r25, Z+3	; 0x03
    188e:	89 13       	cpse	r24, r25
    1890:	0b c0       	rjmp	.+22     	; 0x18a8 <processSoftTimer8b+0x4a>
	 {
		 tmr->FA_EQ = 1;
    1892:	80 81       	ld	r24, Z
		 tmr->FA_GE = 1;
    1894:	88 60       	ori	r24, 0x08	; 8
    1896:	80 61       	ori	r24, 0x10	; 16
		 tmr->FA_TGL = !tmr->FA_TGL;
    1898:	82 fb       	bst	r24, 2
    189a:	99 27       	eor	r25, r25
    189c:	90 f9       	bld	r25, 0
    189e:	31 e0       	ldi	r19, 0x01	; 1
    18a0:	93 27       	eor	r25, r19
    18a2:	90 fb       	bst	r25, 0
    18a4:	82 f9       	bld	r24, 2
    18a6:	04 c0       	rjmp	.+8      	; 0x18b0 <processSoftTimer8b+0x52>
	 }
	 else if (tmr->Timer >= tmr->CompA)
    18a8:	89 17       	cp	r24, r25
    18aa:	18 f0       	brcs	.+6      	; 0x18b2 <processSoftTimer8b+0x54>
	 {
		 tmr->FA_GE = 1;
    18ac:	80 81       	ld	r24, Z
    18ae:	80 61       	ori	r24, 0x10	; 16
    18b0:	80 83       	st	Z, r24
	 }
	 
	 tmr->Timer = newTimerVal; 
    18b2:	21 83       	std	Z+1, r18	; 0x01
    18b4:	08 95       	ret

000018b6 <processSystemTimers>:
static inline void Sound_Process(void);


void processSystemTimers(void)
{
	sys_timers_flags = 0x00;
    18b6:	12 b8       	out	0x02, r1	; 2
	
	// Process Celsius counter
	if (--sys_timers.celsius_upd_counter == 0)
    18b8:	80 91 86 00 	lds	r24, 0x0086
    18bc:	81 50       	subi	r24, 0x01	; 1
    18be:	80 93 86 00 	sts	0x0086, r24
    18c2:	81 11       	cpse	r24, r1
    18c4:	0f c0       	rjmp	.+30     	; 0x18e4 <processSystemTimers+0x2e>
	{
		sys_timers.celsius_upd_counter = CELSIUS_UDPATE_INTERVAL;
    18c6:	84 e0       	ldi	r24, 0x04	; 4
    18c8:	80 93 86 00 	sts	0x0086, r24
		sys_timers_flags |= EXPIRED_CELSIUS;
    18cc:	10 9a       	sbi	0x02, 0	; 2
		
		// Process PID update counter
		if (--sys_timers.pid_update_counter == 0)
    18ce:	80 91 8b 00 	lds	r24, 0x008B
    18d2:	81 50       	subi	r24, 0x01	; 1
    18d4:	80 93 8b 00 	sts	0x008B, r24
    18d8:	81 11       	cpse	r24, r1
    18da:	04 c0       	rjmp	.+8      	; 0x18e4 <processSystemTimers+0x2e>
		{
			sys_timers.pid_update_counter = PID_UPDATE_INTERVAL;
    18dc:	84 e1       	ldi	r24, 0x14	; 20
    18de:	80 93 8b 00 	sts	0x008B, r24
			sys_timers_flags |= UPDATE_PID;
    18e2:	16 9a       	sbi	0x02, 6	; 2
		}
	}
	
	// Process log counter
	if (--sys_timers.log_counter == 0)
    18e4:	80 91 8a 00 	lds	r24, 0x008A
    18e8:	81 50       	subi	r24, 0x01	; 1
    18ea:	19 f0       	breq	.+6      	; 0x18f2 <processSystemTimers+0x3c>
    18ec:	80 93 8a 00 	sts	0x008A, r24
    18f0:	04 c0       	rjmp	.+8      	; 0x18fa <processSystemTimers+0x44>
	{
		sys_timers.log_counter = LOG_INTERVAL;
    18f2:	82 e0       	ldi	r24, 0x02	; 2
    18f4:	80 93 8a 00 	sts	0x008A, r24
		sys_timers_flags |= EXPIRED_LOG;
    18f8:	15 9a       	sbi	0x02, 5	; 2
	}
	
	// Process 10 seconds counter
	if (--sys_timers.counter_10sec == 0)
    18fa:	80 91 87 00 	lds	r24, 0x0087
    18fe:	81 50       	subi	r24, 0x01	; 1
    1900:	80 93 87 00 	sts	0x0087, r24
    1904:	81 11       	cpse	r24, r1
    1906:	27 c0       	rjmp	.+78     	; 0x1956 <processSystemTimers+0xa0>
	{
		sys_timers.counter_10sec = COUNTER_10SEC_INTERVAL;
    1908:	88 ec       	ldi	r24, 0xC8	; 200
    190a:	80 93 87 00 	sts	0x0087, r24
		sys_timers_flags |= EXPIRED_10SEC;
    190e:	11 9a       	sbi	0x02, 1	; 2
		
		// Process 1 minute counter
		if (--sys_timers.counter_1min == 0)
    1910:	80 91 88 00 	lds	r24, 0x0088
    1914:	81 50       	subi	r24, 0x01	; 1
    1916:	80 93 88 00 	sts	0x0088, r24
    191a:	81 11       	cpse	r24, r1
    191c:	1c c0       	rjmp	.+56     	; 0x1956 <processSystemTimers+0xa0>
		{
			sys_timers.counter_1min = COUNTER_1MIN_INTERVAL;
    191e:	86 e0       	ldi	r24, 0x06	; 6
    1920:	80 93 88 00 	sts	0x0088, r24
			sys_timers_flags |= EXPIRED_1MIN;
    1924:	12 9a       	sbi	0x02, 2	; 2
			
			// Process auto power off counter
			if (sys_timers.poff_counter != MAX_POWEROFF_TIMEOUT - 1)
    1926:	80 91 89 00 	lds	r24, 0x0089
    192a:	8e 35       	cpi	r24, 0x5E	; 94
    192c:	19 f0       	breq	.+6      	; 0x1934 <processSystemTimers+0x7e>
				sys_timers.poff_counter++;
    192e:	8f 5f       	subi	r24, 0xFF	; 255
    1930:	80 93 89 00 	sts	0x0089, r24
			if (sys_timers.poff_counter == p.power_off_timeout - 1)
    1934:	40 91 89 00 	lds	r20, 0x0089
    1938:	24 2f       	mov	r18, r20
    193a:	30 e0       	ldi	r19, 0x00	; 0
    193c:	80 91 b8 01 	lds	r24, 0x01B8
    1940:	90 e0       	ldi	r25, 0x00	; 0
    1942:	01 97       	sbiw	r24, 0x01	; 1
    1944:	28 17       	cp	r18, r24
    1946:	39 07       	cpc	r19, r25
    1948:	09 f4       	brne	.+2      	; 0x194c <processSystemTimers+0x96>
				sys_timers_flags |= AUTOPOFF_SOON;
    194a:	13 9a       	sbi	0x02, 3	; 2
			if (sys_timers.poff_counter == p.power_off_timeout)
    194c:	80 91 b8 01 	lds	r24, 0x01B8
    1950:	48 13       	cpse	r20, r24
    1952:	01 c0       	rjmp	.+2      	; 0x1956 <processSystemTimers+0xa0>
				sys_timers_flags |= AUTOPOFF_EXPIRED;			
    1954:	14 9a       	sbi	0x02, 4	; 2
    1956:	08 95       	ret

00001958 <resetAutoPowerOffCounter>:
}


void resetAutoPowerOffCounter(void)
{
	sys_timers.poff_counter = 0;
    1958:	10 92 89 00 	sts	0x0089, r1
    195c:	08 95       	ret

0000195e <__vector_3>:
// ----------------------- //


// Period is 1ms @ 16MHz
ISR(TIMER2_COMP_vect)
{	
    195e:	1f 92       	push	r1
    1960:	0f 92       	push	r0
    1962:	0f b6       	in	r0, 0x3f	; 63
    1964:	0f 92       	push	r0
    1966:	11 24       	eor	r1, r1
    1968:	2f 93       	push	r18
    196a:	3f 93       	push	r19
    196c:	4f 93       	push	r20
    196e:	5f 93       	push	r21
    1970:	6f 93       	push	r22
    1972:	7f 93       	push	r23
    1974:	8f 93       	push	r24
    1976:	9f 93       	push	r25
    1978:	af 93       	push	r26
    197a:	bf 93       	push	r27
    197c:	ef 93       	push	r30
    197e:	ff 93       	push	r31
	// Manage LED indicator
	processLedIndicator();
    1980:	aa d7       	rcall	.+3924   	; 0x28d6 <__data_load_end+0xc26>
static inline void Sound_Process(void)
{
	static uint16_t note_time_counter;
	static tone_t tone;
	static const tone_t* p_melody;
	uint8_t new_state = sound_state;
    1982:	20 91 99 01 	lds	r18, 0x0199
	
	switch (sound_state)
    1986:	22 30       	cpi	r18, 0x02	; 2
    1988:	99 f1       	breq	.+102    	; 0x19f0 <__vector_3+0x92>
    198a:	20 f4       	brcc	.+8      	; 0x1994 <__vector_3+0x36>
    198c:	21 30       	cpi	r18, 0x01	; 1
    198e:	09 f0       	breq	.+2      	; 0x1992 <__vector_3+0x34>
    1990:	50 c0       	rjmp	.+160    	; 0x1a32 <__vector_3+0xd4>
    1992:	0f c0       	rjmp	.+30     	; 0x19b2 <__vector_3+0x54>
    1994:	23 30       	cpi	r18, 0x03	; 3
    1996:	21 f0       	breq	.+8      	; 0x19a0 <__vector_3+0x42>
    1998:	25 30       	cpi	r18, 0x05	; 5
    199a:	09 f0       	breq	.+2      	; 0x199e <__vector_3+0x40>
    199c:	4a c0       	rjmp	.+148    	; 0x1a32 <__vector_3+0xd4>
    199e:	15 c0       	rjmp	.+42     	; 0x19ca <__vector_3+0x6c>
	{
		case SOUND_START_NEW:
			p_melody = new_melody;
    19a0:	80 91 9a 01 	lds	r24, 0x019A
    19a4:	90 91 9b 01 	lds	r25, 0x019B
    19a8:	90 93 9d 01 	sts	0x019D, r25
    19ac:	80 93 9c 01 	sts	0x019C, r24
    19b0:	44 c0       	rjmp	.+136    	; 0x1a3a <__vector_3+0xdc>
			new_state = SOUND_APPLY_TONE;
			p_melody = NULL;				// Beeper mode
			break;
		#endif
		case SOUND_PLAY:
			if (--note_time_counter == 0)
    19b2:	80 91 9e 01 	lds	r24, 0x019E
    19b6:	90 91 9f 01 	lds	r25, 0x019F
    19ba:	01 97       	sbiw	r24, 0x01	; 1
    19bc:	90 93 9f 01 	sts	0x019F, r25
    19c0:	80 93 9e 01 	sts	0x019E, r24
    19c4:	89 2b       	or	r24, r25
    19c6:	c9 f1       	breq	.+114    	; 0x1a3a <__vector_3+0xdc>
    19c8:	3b c0       	rjmp	.+118    	; 0x1a40 <__vector_3+0xe2>
		case SOUND_GET_NEXT_TONE:
			#ifdef USE_BEEP_FUNCTION
			if (p_melody != NULL)			// If driver is playing melody, not beeping
			{
				#endif
				if (!eeprom_is_ready())		// If EEPROM is busy and Sound_Process() is called from an ISR, deadly block may appear
    19ca:	e1 99       	sbic	0x1c, 1	; 28
    19cc:	3b c0       	rjmp	.+118    	; 0x1a44 <__vector_3+0xe6>
					return;
				eeprom_read_block(&tone,p_melody++,sizeof(tone_t));
    19ce:	60 91 9c 01 	lds	r22, 0x019C
    19d2:	70 91 9d 01 	lds	r23, 0x019D
    19d6:	cb 01       	movw	r24, r22
    19d8:	02 96       	adiw	r24, 0x02	; 2
    19da:	90 93 9d 01 	sts	0x019D, r25
    19de:	80 93 9c 01 	sts	0x019C, r24
    19e2:	42 e0       	ldi	r20, 0x02	; 2
    19e4:	50 e0       	ldi	r21, 0x00	; 0
    19e6:	80 ea       	ldi	r24, 0xA0	; 160
    19e8:	91 e0       	ldi	r25, 0x01	; 1
    19ea:	e2 d0       	rcall	.+452    	; 0x1bb0 <__eerd_block_m8>
				new_state = SOUND_APPLY_TONE;
    19ec:	22 e0       	ldi	r18, 0x02	; 2
    19ee:	28 c0       	rjmp	.+80     	; 0x1a40 <__vector_3+0xe2>
				new_state = SOUND_OFF;
			}
			#endif
			break;
		case SOUND_APPLY_TONE:
			if (tone.duration == 0)
    19f0:	80 91 a1 01 	lds	r24, 0x01A1
    19f4:	88 23       	and	r24, r24
    19f6:	19 f1       	breq	.+70     	; 0x1a3e <__vector_3+0xe0>
				new_state = SOUND_OFF;
			}
			else
			{
				// Setup period
				if (tone.tone_period != 0)
    19f8:	80 91 a0 01 	lds	r24, 0x01A0
    19fc:	88 23       	and	r24, r24
    19fe:	49 f0       	breq	.+18     	; 0x1a12 <__vector_3+0xb4>
				{
					// Timer runs at 250kHz (T = 4us), tone_period is set in units of 8us
					// Output toggles on compare match
					OCR1A = tone.tone_period - 1;
    1a00:	90 e0       	ldi	r25, 0x00	; 0
    1a02:	01 97       	sbiw	r24, 0x01	; 1
    1a04:	9b bd       	out	0x2b, r25	; 43
    1a06:	8a bd       	out	0x2a, r24	; 42
					TCNT1 = 0;
    1a08:	1d bc       	out	0x2d, r1	; 45
    1a0a:	1c bc       	out	0x2c, r1	; 44
					// Toggle OCR1A on compare match
					TCCR1A |= (1<<COM1A0);
    1a0c:	8f b5       	in	r24, 0x2f	; 47
    1a0e:	80 64       	ori	r24, 0x40	; 64
    1a10:	02 c0       	rjmp	.+4      	; 0x1a16 <__vector_3+0xb8>
				}
				else
				{
					// Disable OCR1A output
					TCCR1A &= ~(1<<COM1A0 | 1<<COM1A1);
    1a12:	8f b5       	in	r24, 0x2f	; 47
    1a14:	8f 73       	andi	r24, 0x3F	; 63
    1a16:	8f bd       	out	0x2f, r24	; 47
				}
				note_time_counter = (uint16_t)tone.duration * TONE_DURATION_SCALE - 2;
    1a18:	80 91 a1 01 	lds	r24, 0x01A1
    1a1c:	2a e0       	ldi	r18, 0x0A	; 10
    1a1e:	82 9f       	mul	r24, r18
    1a20:	c0 01       	movw	r24, r0
    1a22:	11 24       	eor	r1, r1
    1a24:	02 97       	sbiw	r24, 0x02	; 2
    1a26:	90 93 9f 01 	sts	0x019F, r25
    1a2a:	80 93 9e 01 	sts	0x019E, r24
				new_state = SOUND_PLAY;
    1a2e:	21 e0       	ldi	r18, 0x01	; 1
    1a30:	07 c0       	rjmp	.+14     	; 0x1a40 <__vector_3+0xe2>
			}
			break;
			default:
			// Disable OCR1A output
			TCCR1A &= ~(1<<COM1A0 | 1<<COM1A1);
    1a32:	8f b5       	in	r24, 0x2f	; 47
    1a34:	8f 73       	andi	r24, 0x3F	; 63
    1a36:	8f bd       	out	0x2f, r24	; 47
    1a38:	03 c0       	rjmp	.+6      	; 0x1a40 <__vector_3+0xe2>
			p_melody = NULL;				// Beeper mode
			break;
		#endif
		case SOUND_PLAY:
			if (--note_time_counter == 0)
				new_state = SOUND_GET_NEXT_TONE;
    1a3a:	25 e0       	ldi	r18, 0x05	; 5
    1a3c:	01 c0       	rjmp	.+2      	; 0x1a40 <__vector_3+0xe2>
			break;
		case SOUND_APPLY_TONE:
			if (tone.duration == 0)
			{
				// Finished
				new_state = SOUND_OFF;
    1a3e:	20 e0       	ldi	r18, 0x00	; 0
			default:
			// Disable OCR1A output
			TCCR1A &= ~(1<<COM1A0 | 1<<COM1A1);
			break;
	}
	sound_state = new_state;
    1a40:	20 93 99 01 	sts	0x0199, r18
	
	// Do sound stuff
	Sound_Process();
	
	// Process menu update timer
	processSoftTimer8b(&menuUpdateTimer);	
    1a44:	8c e8       	ldi	r24, 0x8C	; 140
    1a46:	90 e0       	ldi	r25, 0x00	; 0
    1a48:	0a df       	rcall	.-492    	; 0x185e <processSoftTimer8b>
	
	// Start ADC conversion 
	// Safe to use read-modify-write - this ISR is the only source of ADC conversion start
	ADCSRA |= (1<<ADSC);
    1a4a:	36 9a       	sbi	0x06, 6	; 6
}
    1a4c:	ff 91       	pop	r31
    1a4e:	ef 91       	pop	r30
    1a50:	bf 91       	pop	r27
    1a52:	af 91       	pop	r26
    1a54:	9f 91       	pop	r25
    1a56:	8f 91       	pop	r24
    1a58:	7f 91       	pop	r23
    1a5a:	6f 91       	pop	r22
    1a5c:	5f 91       	pop	r21
    1a5e:	4f 91       	pop	r20
    1a60:	3f 91       	pop	r19
    1a62:	2f 91       	pop	r18
    1a64:	0f 90       	pop	r0
    1a66:	0f be       	out	0x3f, r0	; 63
    1a68:	0f 90       	pop	r0
    1a6a:	1f 90       	pop	r1
    1a6c:	18 95       	reti

00001a6e <Sound_Play>:
}
#endif

void Sound_Play(const tone_t* p_melody)
{
	if ((p.sound_enable) || (SoundEnable_override))
    1a6e:	20 91 b7 01 	lds	r18, 0x01B7
    1a72:	21 11       	cpse	r18, r1
    1a74:	04 c0       	rjmp	.+8      	; 0x1a7e <Sound_Play+0x10>
    1a76:	20 91 a2 01 	lds	r18, 0x01A2
    1a7a:	22 23       	and	r18, r18
    1a7c:	49 f0       	breq	.+18     	; 0x1a90 <Sound_Play+0x22>
	{
		new_melody =  p_melody;
    1a7e:	90 93 9b 01 	sts	0x019B, r25
    1a82:	80 93 9a 01 	sts	0x019A, r24
		sound_state = SOUND_START_NEW;		// No need to disable interrupts - atomic operation
    1a86:	83 e0       	ldi	r24, 0x03	; 3
    1a88:	80 93 99 01 	sts	0x0199, r24
		SoundEnable_override = 0;
    1a8c:	10 92 a2 01 	sts	0x01A2, r1
    1a90:	08 95       	ret

00001a92 <Sound_OverrideDisable>:
	sound_state = SOUND_OFF;
}

void Sound_OverrideDisable(void)
{
	SoundEnable_override = 1;
    1a92:	81 e0       	ldi	r24, 0x01	; 1
    1a94:	80 93 a2 01 	sts	0x01A2, r24
    1a98:	08 95       	ret

00001a9a <USART_send>:



void USART_send( uint8_t data )
{
	UCSRA |= (1<<TXC);                 // Clear flag
    1a9a:	5e 9a       	sbi	0x0b, 6	; 11
	UDR = data;
    1a9c:	8c b9       	out	0x0c, r24	; 12
	while ( !(UCSRA & (1<<TXC)) );  // Wait
    1a9e:	5e 9b       	sbis	0x0b, 6	; 11
    1aa0:	fe cf       	rjmp	.-4      	; 0x1a9e <USART_send+0x4>
}
    1aa2:	08 95       	ret

00001aa4 <USART_sendstr>:


void USART_sendstr(char* str)
{
    1aa4:	1f 93       	push	r17
    1aa6:	cf 93       	push	r28
    1aa8:	df 93       	push	r29
    1aaa:	ec 01       	movw	r28, r24
	uint8_t i = 0;
    1aac:	10 e0       	ldi	r17, 0x00	; 0
	while (str[i])
    1aae:	02 c0       	rjmp	.+4      	; 0x1ab4 <USART_sendstr+0x10>
	{
		USART_send(str[i++]);
    1ab0:	1f 5f       	subi	r17, 0xFF	; 255
    1ab2:	f3 df       	rcall	.-26     	; 0x1a9a <USART_send>


void USART_sendstr(char* str)
{
	uint8_t i = 0;
	while (str[i])
    1ab4:	fe 01       	movw	r30, r28
    1ab6:	e1 0f       	add	r30, r17
    1ab8:	f1 1d       	adc	r31, r1
    1aba:	80 81       	ld	r24, Z
    1abc:	81 11       	cpse	r24, r1
    1abe:	f8 cf       	rjmp	.-16     	; 0x1ab0 <USART_sendstr+0xc>
	{
		USART_send(str[i++]);
	}
}
    1ac0:	df 91       	pop	r29
    1ac2:	cf 91       	pop	r28
    1ac4:	1f 91       	pop	r17
    1ac6:	08 95       	ret

00001ac8 <__udivmodqi4>:
    1ac8:	99 1b       	sub	r25, r25
    1aca:	79 e0       	ldi	r23, 0x09	; 9
    1acc:	04 c0       	rjmp	.+8      	; 0x1ad6 <__udivmodqi4_ep>

00001ace <__udivmodqi4_loop>:
    1ace:	99 1f       	adc	r25, r25
    1ad0:	96 17       	cp	r25, r22
    1ad2:	08 f0       	brcs	.+2      	; 0x1ad6 <__udivmodqi4_ep>
    1ad4:	96 1b       	sub	r25, r22

00001ad6 <__udivmodqi4_ep>:
    1ad6:	88 1f       	adc	r24, r24
    1ad8:	7a 95       	dec	r23
    1ada:	c9 f7       	brne	.-14     	; 0x1ace <__udivmodqi4_loop>
    1adc:	80 95       	com	r24
    1ade:	08 95       	ret

00001ae0 <__divmodsi4>:
    1ae0:	05 2e       	mov	r0, r21
    1ae2:	97 fb       	bst	r25, 7
    1ae4:	16 f4       	brtc	.+4      	; 0x1aea <__divmodsi4+0xa>
    1ae6:	00 94       	com	r0
    1ae8:	06 d0       	rcall	.+12     	; 0x1af6 <__divmodsi4_neg1>
    1aea:	57 fd       	sbrc	r21, 7
    1aec:	0c d0       	rcall	.+24     	; 0x1b06 <__divmodsi4_neg2>
    1aee:	35 d0       	rcall	.+106    	; 0x1b5a <__udivmodsi4>
    1af0:	07 fc       	sbrc	r0, 7
    1af2:	09 d0       	rcall	.+18     	; 0x1b06 <__divmodsi4_neg2>
    1af4:	7e f4       	brtc	.+30     	; 0x1b14 <__divmodsi4_exit>

00001af6 <__divmodsi4_neg1>:
    1af6:	90 95       	com	r25
    1af8:	80 95       	com	r24
    1afa:	70 95       	com	r23
    1afc:	61 95       	neg	r22
    1afe:	7f 4f       	sbci	r23, 0xFF	; 255
    1b00:	8f 4f       	sbci	r24, 0xFF	; 255
    1b02:	9f 4f       	sbci	r25, 0xFF	; 255
    1b04:	08 95       	ret

00001b06 <__divmodsi4_neg2>:
    1b06:	50 95       	com	r21
    1b08:	40 95       	com	r20
    1b0a:	30 95       	com	r19
    1b0c:	21 95       	neg	r18
    1b0e:	3f 4f       	sbci	r19, 0xFF	; 255
    1b10:	4f 4f       	sbci	r20, 0xFF	; 255
    1b12:	5f 4f       	sbci	r21, 0xFF	; 255

00001b14 <__divmodsi4_exit>:
    1b14:	08 95       	ret

00001b16 <__mulhisi3>:
    1b16:	05 d0       	rcall	.+10     	; 0x1b22 <__umulhisi3>
    1b18:	33 23       	and	r19, r19
    1b1a:	12 f4       	brpl	.+4      	; 0x1b20 <__mulhisi3+0xa>
    1b1c:	8a 1b       	sub	r24, r26
    1b1e:	9b 0b       	sbc	r25, r27
    1b20:	0d c0       	rjmp	.+26     	; 0x1b3c <__usmulhisi3_tail>

00001b22 <__umulhisi3>:
    1b22:	a2 9f       	mul	r26, r18
    1b24:	b0 01       	movw	r22, r0
    1b26:	b3 9f       	mul	r27, r19
    1b28:	c0 01       	movw	r24, r0
    1b2a:	a3 9f       	mul	r26, r19
    1b2c:	01 d0       	rcall	.+2      	; 0x1b30 <__umulhisi3+0xe>
    1b2e:	b2 9f       	mul	r27, r18
    1b30:	70 0d       	add	r23, r0
    1b32:	81 1d       	adc	r24, r1
    1b34:	11 24       	eor	r1, r1
    1b36:	91 1d       	adc	r25, r1
    1b38:	08 95       	ret

00001b3a <__usmulhisi3>:
    1b3a:	f3 df       	rcall	.-26     	; 0x1b22 <__umulhisi3>

00001b3c <__usmulhisi3_tail>:
    1b3c:	b7 ff       	sbrs	r27, 7
    1b3e:	08 95       	ret
    1b40:	82 1b       	sub	r24, r18
    1b42:	93 0b       	sbc	r25, r19
    1b44:	08 95       	ret

00001b46 <__muluhisi3>:
    1b46:	ed df       	rcall	.-38     	; 0x1b22 <__umulhisi3>
    1b48:	a5 9f       	mul	r26, r21
    1b4a:	90 0d       	add	r25, r0
    1b4c:	b4 9f       	mul	r27, r20
    1b4e:	90 0d       	add	r25, r0
    1b50:	a4 9f       	mul	r26, r20
    1b52:	80 0d       	add	r24, r0
    1b54:	91 1d       	adc	r25, r1
    1b56:	11 24       	eor	r1, r1
    1b58:	08 95       	ret

00001b5a <__udivmodsi4>:
    1b5a:	a1 e2       	ldi	r26, 0x21	; 33
    1b5c:	1a 2e       	mov	r1, r26
    1b5e:	aa 1b       	sub	r26, r26
    1b60:	bb 1b       	sub	r27, r27
    1b62:	fd 01       	movw	r30, r26
    1b64:	0d c0       	rjmp	.+26     	; 0x1b80 <__udivmodsi4_ep>

00001b66 <__udivmodsi4_loop>:
    1b66:	aa 1f       	adc	r26, r26
    1b68:	bb 1f       	adc	r27, r27
    1b6a:	ee 1f       	adc	r30, r30
    1b6c:	ff 1f       	adc	r31, r31
    1b6e:	a2 17       	cp	r26, r18
    1b70:	b3 07       	cpc	r27, r19
    1b72:	e4 07       	cpc	r30, r20
    1b74:	f5 07       	cpc	r31, r21
    1b76:	20 f0       	brcs	.+8      	; 0x1b80 <__udivmodsi4_ep>
    1b78:	a2 1b       	sub	r26, r18
    1b7a:	b3 0b       	sbc	r27, r19
    1b7c:	e4 0b       	sbc	r30, r20
    1b7e:	f5 0b       	sbc	r31, r21

00001b80 <__udivmodsi4_ep>:
    1b80:	66 1f       	adc	r22, r22
    1b82:	77 1f       	adc	r23, r23
    1b84:	88 1f       	adc	r24, r24
    1b86:	99 1f       	adc	r25, r25
    1b88:	1a 94       	dec	r1
    1b8a:	69 f7       	brne	.-38     	; 0x1b66 <__udivmodsi4_loop>
    1b8c:	60 95       	com	r22
    1b8e:	70 95       	com	r23
    1b90:	80 95       	com	r24
    1b92:	90 95       	com	r25
    1b94:	9b 01       	movw	r18, r22
    1b96:	ac 01       	movw	r20, r24
    1b98:	bd 01       	movw	r22, r26
    1b9a:	cf 01       	movw	r24, r30
    1b9c:	08 95       	ret

00001b9e <memcpy_P>:
    1b9e:	fb 01       	movw	r30, r22
    1ba0:	dc 01       	movw	r26, r24
    1ba2:	02 c0       	rjmp	.+4      	; 0x1ba8 <memcpy_P+0xa>
    1ba4:	05 90       	lpm	r0, Z+
    1ba6:	0d 92       	st	X+, r0
    1ba8:	41 50       	subi	r20, 0x01	; 1
    1baa:	50 40       	sbci	r21, 0x00	; 0
    1bac:	d8 f7       	brcc	.-10     	; 0x1ba4 <memcpy_P+0x6>
    1bae:	08 95       	ret

00001bb0 <__eerd_block_m8>:
    1bb0:	dc 01       	movw	r26, r24
    1bb2:	cb 01       	movw	r24, r22

00001bb4 <__eerd_blraw_m8>:
    1bb4:	fc 01       	movw	r30, r24
    1bb6:	e1 99       	sbic	0x1c, 1	; 28
    1bb8:	fe cf       	rjmp	.-4      	; 0x1bb6 <__eerd_blraw_m8+0x2>
    1bba:	06 c0       	rjmp	.+12     	; 0x1bc8 <__eerd_blraw_m8+0x14>
    1bbc:	ff bb       	out	0x1f, r31	; 31
    1bbe:	ee bb       	out	0x1e, r30	; 30
    1bc0:	e0 9a       	sbi	0x1c, 0	; 28
    1bc2:	31 96       	adiw	r30, 0x01	; 1
    1bc4:	0d b2       	in	r0, 0x1d	; 29
    1bc6:	0d 92       	st	X+, r0
    1bc8:	41 50       	subi	r20, 0x01	; 1
    1bca:	50 40       	sbci	r21, 0x00	; 0
    1bcc:	b8 f7       	brcc	.-18     	; 0x1bbc <__eerd_blraw_m8+0x8>
    1bce:	08 95       	ret

00001bd0 <__eerd_byte_m8>:
    1bd0:	e1 99       	sbic	0x1c, 1	; 28
    1bd2:	fe cf       	rjmp	.-4      	; 0x1bd0 <__eerd_byte_m8>
    1bd4:	9f bb       	out	0x1f, r25	; 31
    1bd6:	8e bb       	out	0x1e, r24	; 30
    1bd8:	e0 9a       	sbi	0x1c, 0	; 28
    1bda:	99 27       	eor	r25, r25
    1bdc:	8d b3       	in	r24, 0x1d	; 29
    1bde:	08 95       	ret

00001be0 <__eeupd_block_m8>:
    1be0:	dc 01       	movw	r26, r24
    1be2:	a4 0f       	add	r26, r20
    1be4:	b5 1f       	adc	r27, r21
    1be6:	41 50       	subi	r20, 0x01	; 1
    1be8:	50 40       	sbci	r21, 0x00	; 0
    1bea:	40 f0       	brcs	.+16     	; 0x1bfc <__eeupd_block_m8+0x1c>
    1bec:	cb 01       	movw	r24, r22
    1bee:	84 0f       	add	r24, r20
    1bf0:	95 1f       	adc	r25, r21
    1bf2:	2e 91       	ld	r18, -X
    1bf4:	05 d0       	rcall	.+10     	; 0x1c00 <__eeupd_r18_m8>
    1bf6:	41 50       	subi	r20, 0x01	; 1
    1bf8:	50 40       	sbci	r21, 0x00	; 0
    1bfa:	d8 f7       	brcc	.-10     	; 0x1bf2 <__eeupd_block_m8+0x12>
    1bfc:	08 95       	ret

00001bfe <__eeupd_byte_m8>:
    1bfe:	26 2f       	mov	r18, r22

00001c00 <__eeupd_r18_m8>:
    1c00:	e1 99       	sbic	0x1c, 1	; 28
    1c02:	fe cf       	rjmp	.-4      	; 0x1c00 <__eeupd_r18_m8>
    1c04:	9f bb       	out	0x1f, r25	; 31
    1c06:	8e bb       	out	0x1e, r24	; 30
    1c08:	e0 9a       	sbi	0x1c, 0	; 28
    1c0a:	01 97       	sbiw	r24, 0x01	; 1
    1c0c:	0d b2       	in	r0, 0x1d	; 29
    1c0e:	02 16       	cp	r0, r18
    1c10:	31 f0       	breq	.+12     	; 0x1c1e <__eeupd_r18_m8+0x1e>
    1c12:	2d bb       	out	0x1d, r18	; 29
    1c14:	0f b6       	in	r0, 0x3f	; 63
    1c16:	f8 94       	cli
    1c18:	e2 9a       	sbi	0x1c, 2	; 28
    1c1a:	e1 9a       	sbi	0x1c, 1	; 28
    1c1c:	0f be       	out	0x3f, r0	; 63
    1c1e:	08 95       	ret

00001c20 <_exit>:
    1c20:	f8 94       	cli

00001c22 <__stop_program>:
    1c22:	ff cf       	rjmp	.-2      	; 0x1c22 <__stop_program>
