
pid1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001bb4  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000007e  00800060  00001bb4  00001c68  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000c6  008000de  008000de  00001ce6  2**0
                  ALLOC
  3 .eeprom       0000000a  00810000  00810000  00001ce6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         000009c0  00000000  00000000  00001cf0  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      000001a6  00000000  00000000  000026b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      0000002f  00000000  00000000  00002856  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000400  00000000  00000000  00002885  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00003e72  00000000  00000000  00002c85  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000013fc  00000000  00000000  00006af7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   000018b5  00000000  00000000  00007ef3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  000009dc  00000000  00000000  000097a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0000109d  00000000  00000000  0000a184  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00001e81  00000000  00000000  0000b221  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000370  00000000  00000000  0000d0a2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	ad c0       	rjmp	.+346    	; 0x15c <__ctors_end>
       2:	c7 c0       	rjmp	.+398    	; 0x192 <__bad_interrupt>
       4:	c6 c0       	rjmp	.+396    	; 0x192 <__bad_interrupt>
       6:	c5 cc       	rjmp	.-1654   	; 0xfffff992 <__eeprom_end+0xff7ef988>
       8:	c4 c0       	rjmp	.+392    	; 0x192 <__bad_interrupt>
       a:	c3 c0       	rjmp	.+390    	; 0x192 <__bad_interrupt>
       c:	c2 c0       	rjmp	.+388    	; 0x192 <__bad_interrupt>
       e:	c1 c0       	rjmp	.+386    	; 0x192 <__bad_interrupt>
      10:	c0 c0       	rjmp	.+384    	; 0x192 <__bad_interrupt>
      12:	2a cb       	rjmp	.-2476   	; 0xfffff668 <__eeprom_end+0xff7ef65e>
      14:	be c0       	rjmp	.+380    	; 0x192 <__bad_interrupt>
      16:	bd c0       	rjmp	.+378    	; 0x192 <__bad_interrupt>
      18:	bc c0       	rjmp	.+376    	; 0x192 <__bad_interrupt>
      1a:	bb c0       	rjmp	.+374    	; 0x192 <__bad_interrupt>
      1c:	24 c2       	rjmp	.+1096   	; 0x466 <__vector_14>
      1e:	b9 c0       	rjmp	.+370    	; 0x192 <__bad_interrupt>
      20:	e5 ca       	rjmp	.-2614   	; 0xfffff5ec <__eeprom_end+0xff7ef5e2>
      22:	b7 c0       	rjmp	.+366    	; 0x192 <__bad_interrupt>
      24:	b6 c0       	rjmp	.+364    	; 0x192 <__bad_interrupt>

00000026 <led_encode_table>:
      26:	30 3f 4f 3f 31 06 32 5b 33 4f 34 66 53 6d 35 6d     0?O?1.2[3O4fSm5m
      36:	36 7d 37 07 38 7f 39 6f 2e 80 2c 80 2d 40 5f 08     6}7.8.9o..,.-@_.
      46:	20 00 b0 63 41 77 43 39 46 71 4e 54 44 5e 50 73      ..cAwC9FqNTD^Ps
      56:	45 79 52 50                                         EyRP

0000005a <menuFunctionSet>:
      5a:	01 49 08 d9 06 6d 06 03 6a 06 fa 07 0c 06 02 f7     .I...m..j.......
      6a:	07 90 07 62 06 05 42 06 4b 07 00 00 0b 12 06 4b     ...b..B.K......K
      7a:	07 20 06 04 42 06 88 06 00 00 0c 12 06 88 06 20     . ..B.......... 
      8a:	06 06 56 06 04 07 00 00 09 12 06 04 07 29 06 07     ..V..........)..
      9a:	4a 06 04 07 00 00 0a 12 06 04 07 29 06 08 6f 06     J..........)..o.
      aa:	38 06 00 00 0d 6f 06 38 06 00 00 0e 3c 06 34 06     8....o.8....<.4.
      ba:	26 06                                               &.

000000bc <menuJumpSet>:
      bc:	01 c0 00 03 a8 01 00 01 02 40 01 00 02 05 28 02     .........@....(.
      cc:	00 01 01 80 03 00 83 01 40 05 00 82 01 00 05 80     ........@.......
      dc:	00 04 68 05 40 00 07 a8 05 00 01 0b 28 0b 00 83     ..h.@.......(...
      ec:	05 28 04 00 82 01 00 04 80 00 06 68 04 40 00 05     .(.........h.@..
      fc:	a8 04 00 01 0c 28 0c 00 83 04 28 06 00 82 01 00     .....(....(.....
     10c:	06 80 00 07 68 06 40 00 04 a8 06 00 01 09 00 07     ....h.@.........
     11c:	00 82 01 00 07 80 00 05 68 07 40 00 06 a8 07 00     ........h.@.....
     12c:	01 0a 00 09 00 02 06 28 09 00 01 08 14 08 00 83     .......(........
     13c:	01 00 0a 00 02 07 28 0a 00 01 0d 14 0d 00 83 01     ......(.........
     14c:	00 01 00 40 0e 00 02 00 40 0e 00 0e d5 01 01 00     ...@....@.......

0000015c <__ctors_end>:
     15c:	11 24       	eor	r1, r1
     15e:	1f be       	out	0x3f, r1	; 63
     160:	cf e5       	ldi	r28, 0x5F	; 95
     162:	d4 e0       	ldi	r29, 0x04	; 4
     164:	de bf       	out	0x3e, r29	; 62
     166:	cd bf       	out	0x3d, r28	; 61

00000168 <__do_copy_data>:
     168:	10 e0       	ldi	r17, 0x00	; 0
     16a:	a0 e6       	ldi	r26, 0x60	; 96
     16c:	b0 e0       	ldi	r27, 0x00	; 0
     16e:	e4 eb       	ldi	r30, 0xB4	; 180
     170:	fb e1       	ldi	r31, 0x1B	; 27
     172:	02 c0       	rjmp	.+4      	; 0x178 <__do_copy_data+0x10>
     174:	05 90       	lpm	r0, Z+
     176:	0d 92       	st	X+, r0
     178:	ae 3d       	cpi	r26, 0xDE	; 222
     17a:	b1 07       	cpc	r27, r17
     17c:	d9 f7       	brne	.-10     	; 0x174 <__do_copy_data+0xc>

0000017e <__do_clear_bss>:
     17e:	21 e0       	ldi	r18, 0x01	; 1
     180:	ae ed       	ldi	r26, 0xDE	; 222
     182:	b0 e0       	ldi	r27, 0x00	; 0
     184:	01 c0       	rjmp	.+2      	; 0x188 <.do_clear_bss_start>

00000186 <.do_clear_bss_loop>:
     186:	1d 92       	st	X+, r1

00000188 <.do_clear_bss_start>:
     188:	a4 3a       	cpi	r26, 0xA4	; 164
     18a:	b2 07       	cpc	r27, r18
     18c:	e1 f7       	brne	.-8      	; 0x186 <.do_clear_bss_loop>
     18e:	ff d8       	rcall	.-3586   	; 0xfffff38e <__eeprom_end+0xff7ef384>
     190:	0f cd       	rjmp	.-1506   	; 0xfffffbb0 <__eeprom_end+0xff7efba6>

00000192 <__bad_interrupt>:
     192:	36 cf       	rjmp	.-404    	; 0x0 <__vectors>

00000194 <conv_ADC_to_Celsius>:
		25 Celsius	->	765
*/


uint16_t conv_ADC_to_Celsius(uint16_t adc_value)
{	
     194:	0f 93       	push	r16
     196:	1f 93       	push	r17
	return (uint16_t)(((int32_t)adc_value * k_norm + offset_norm) / (COEFF_SCALE));
     198:	20 91 de 00 	lds	r18, 0x00DE
     19c:	30 91 df 00 	lds	r19, 0x00DF
     1a0:	40 91 e0 00 	lds	r20, 0x00E0
     1a4:	50 91 e1 00 	lds	r21, 0x00E1
     1a8:	dc 01       	movw	r26, r24
     1aa:	c8 dc       	rcall	.-1648   	; 0xfffffb3c <__eeprom_end+0xff7efb32>
     1ac:	00 91 e2 00 	lds	r16, 0x00E2
     1b0:	10 91 e3 00 	lds	r17, 0x00E3
     1b4:	20 91 e4 00 	lds	r18, 0x00E4
     1b8:	30 91 e5 00 	lds	r19, 0x00E5
     1bc:	60 0f       	add	r22, r16
     1be:	71 1f       	adc	r23, r17
     1c0:	82 1f       	adc	r24, r18
     1c2:	93 1f       	adc	r25, r19
     1c4:	28 ee       	ldi	r18, 0xE8	; 232
     1c6:	33 e0       	ldi	r19, 0x03	; 3
     1c8:	40 e0       	ldi	r20, 0x00	; 0
     1ca:	50 e0       	ldi	r21, 0x00	; 0
     1cc:	84 dc       	rcall	.-1784   	; 0xfffffad6 <__eeprom_end+0xff7efacc>
}
     1ce:	c9 01       	movw	r24, r18
     1d0:	1f 91       	pop	r17
     1d2:	0f 91       	pop	r16
     1d4:	08 95       	ret

000001d6 <conv_Celsius_to_ADC>:

uint16_t conv_Celsius_to_ADC(uint16_t degree_value)
{
     1d6:	0f 93       	push	r16
     1d8:	1f 93       	push	r17
	degree_value += 1;
     1da:	9c 01       	movw	r18, r24
     1dc:	2f 5f       	subi	r18, 0xFF	; 255
     1de:	3f 4f       	sbci	r19, 0xFF	; 255
	return (uint16_t)(((int32_t)degree_value * COEFF_SCALE - offset_norm) / k_norm);
     1e0:	a8 ee       	ldi	r26, 0xE8	; 232
     1e2:	b3 e0       	ldi	r27, 0x03	; 3
     1e4:	99 dc       	rcall	.-1742   	; 0xfffffb18 <__eeprom_end+0xff7efb0e>
     1e6:	00 91 e2 00 	lds	r16, 0x00E2
     1ea:	10 91 e3 00 	lds	r17, 0x00E3
     1ee:	20 91 e4 00 	lds	r18, 0x00E4
     1f2:	30 91 e5 00 	lds	r19, 0x00E5
     1f6:	60 1b       	sub	r22, r16
     1f8:	71 0b       	sbc	r23, r17
     1fa:	82 0b       	sbc	r24, r18
     1fc:	93 0b       	sbc	r25, r19
     1fe:	20 91 de 00 	lds	r18, 0x00DE
     202:	30 91 df 00 	lds	r19, 0x00DF
     206:	40 91 e0 00 	lds	r20, 0x00E0
     20a:	50 91 e1 00 	lds	r21, 0x00E1
     20e:	63 dc       	rcall	.-1850   	; 0xfffffad6 <__eeprom_end+0xff7efacc>
}
     210:	c9 01       	movw	r24, r18
     212:	1f 91       	pop	r17
     214:	0f 91       	pop	r16
     216:	08 95       	ret

00000218 <calculateCoeffs>:

void calculateCoeffs(void)
{
     218:	8f 92       	push	r8
     21a:	9f 92       	push	r9
     21c:	af 92       	push	r10
     21e:	bf 92       	push	r11
     220:	cf 92       	push	r12
     222:	df 92       	push	r13
     224:	ef 92       	push	r14
     226:	ff 92       	push	r15
     228:	cf 93       	push	r28
     22a:	df 93       	push	r29
	k_norm = ((int32_t)(cp.cpoint2 - cp.cpoint1) * COEFF_SCALE) / ((int32_t)(cp.cpoint2_adc - cp.cpoint1_adc));
     22c:	f0 90 72 01 	lds	r15, 0x0172
     230:	a0 91 73 01 	lds	r26, 0x0173
     234:	b0 e0       	ldi	r27, 0x00	; 0
     236:	af 19       	sub	r26, r15
     238:	b1 09       	sbc	r27, r1
     23a:	c0 91 74 01 	lds	r28, 0x0174
     23e:	d0 91 75 01 	lds	r29, 0x0175
     242:	28 ee       	ldi	r18, 0xE8	; 232
     244:	33 e0       	ldi	r19, 0x03	; 3
     246:	74 dc       	rcall	.-1816   	; 0xfffffb30 <__eeprom_end+0xff7efb26>
     248:	20 91 76 01 	lds	r18, 0x0176
     24c:	30 91 77 01 	lds	r19, 0x0177
     250:	2c 1b       	sub	r18, r28
     252:	3d 0b       	sbc	r19, r29
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	3e dc       	rcall	.-1924   	; 0xfffffad6 <__eeprom_end+0xff7efacc>
     25a:	49 01       	movw	r8, r18
     25c:	5a 01       	movw	r10, r20
     25e:	20 93 de 00 	sts	0x00DE, r18
     262:	30 93 df 00 	sts	0x00DF, r19
     266:	40 93 e0 00 	sts	0x00E0, r20
     26a:	50 93 e1 00 	sts	0x00E1, r21
	offset_norm = (int32_t)cp.cpoint1 * COEFF_SCALE - (int32_t)cp.cpoint1_adc * k_norm;
     26e:	2f 2d       	mov	r18, r15
     270:	30 e0       	ldi	r19, 0x00	; 0
     272:	a8 ee       	ldi	r26, 0xE8	; 232
     274:	b3 e0       	ldi	r27, 0x03	; 3
     276:	50 dc       	rcall	.-1888   	; 0xfffffb18 <__eeprom_end+0xff7efb0e>
     278:	6b 01       	movw	r12, r22
     27a:	7c 01       	movw	r14, r24
     27c:	de 01       	movw	r26, r28
     27e:	a5 01       	movw	r20, r10
     280:	94 01       	movw	r18, r8
     282:	5c dc       	rcall	.-1864   	; 0xfffffb3c <__eeprom_end+0xff7efb32>
     284:	c6 1a       	sub	r12, r22
     286:	d7 0a       	sbc	r13, r23
     288:	e8 0a       	sbc	r14, r24
     28a:	f9 0a       	sbc	r15, r25
     28c:	c0 92 e2 00 	sts	0x00E2, r12
     290:	d0 92 e3 00 	sts	0x00E3, r13
     294:	e0 92 e4 00 	sts	0x00E4, r14
     298:	f0 92 e5 00 	sts	0x00E5, r15
}
     29c:	df 91       	pop	r29
     29e:	cf 91       	pop	r28
     2a0:	ff 90       	pop	r15
     2a2:	ef 90       	pop	r14
     2a4:	df 90       	pop	r13
     2a6:	cf 90       	pop	r12
     2a8:	bf 90       	pop	r11
     2aa:	af 90       	pop	r10
     2ac:	9f 90       	pop	r9
     2ae:	8f 90       	pop	r8
     2b0:	08 95       	ret

000002b2 <update_Celsius>:
}

void update_Celsius(void)
{
	// Convert to Celsius degree
	adc_celsius = conv_ADC_to_Celsius(adc_normalized);
     2b2:	80 91 45 01 	lds	r24, 0x0145
     2b6:	90 91 46 01 	lds	r25, 0x0146
     2ba:	6c df       	rcall	.-296    	; 0x194 <conv_ADC_to_Celsius>
     2bc:	90 93 48 01 	sts	0x0148, r25
     2c0:	80 93 47 01 	sts	0x0147, r24
     2c4:	08 95       	ret

000002c6 <fir_i16_i8>:



// FIR digital filter
int16_t fir_i16_i8(int16_t new_sample, int16_t *samples, filter8bit_core_t* iir_core)
{
     2c6:	cf 92       	push	r12
     2c8:	df 92       	push	r13
     2ca:	ef 92       	push	r14
     2cc:	ff 92       	push	r15
     2ce:	0f 93       	push	r16
     2d0:	1f 93       	push	r17
     2d2:	cf 93       	push	r28
     2d4:	df 93       	push	r29
     2d6:	8c 01       	movw	r16, r24
     2d8:	eb 01       	movw	r28, r22
     2da:	fa 01       	movw	r30, r20
	int32_t summ;
	uint8_t i;
	
	summ = new_sample * iir_core->coeffs[0];
     2dc:	23 81       	ldd	r18, Z+3	; 0x03
     2de:	20 03       	mulsu	r18, r16
     2e0:	60 01       	movw	r12, r0
     2e2:	21 9f       	mul	r18, r17
     2e4:	d0 0c       	add	r13, r0
     2e6:	11 24       	eor	r1, r1
     2e8:	ee 24       	eor	r14, r14
     2ea:	d7 fc       	sbrc	r13, 7
     2ec:	e0 94       	com	r14
     2ee:	fe 2c       	mov	r15, r14
	for (i=iir_core->n-1; i>0; i--)
     2f0:	40 81       	ld	r20, Z
     2f2:	1e c0       	rjmp	.+60     	; 0x330 <fir_i16_i8+0x6a>
	{
		samples[i] = samples[i-1];
     2f4:	84 2f       	mov	r24, r20
     2f6:	90 e0       	ldi	r25, 0x00	; 0
     2f8:	dc 01       	movw	r26, r24
     2fa:	11 97       	sbiw	r26, 0x01	; 1
     2fc:	aa 0f       	add	r26, r26
     2fe:	bb 1f       	adc	r27, r27
     300:	ac 0f       	add	r26, r28
     302:	bd 1f       	adc	r27, r29
     304:	2d 91       	ld	r18, X+
     306:	3c 91       	ld	r19, X
     308:	dc 01       	movw	r26, r24
     30a:	aa 0f       	add	r26, r26
     30c:	bb 1f       	adc	r27, r27
     30e:	ac 0f       	add	r26, r28
     310:	bd 1f       	adc	r27, r29
     312:	2d 93       	st	X+, r18
     314:	3c 93       	st	X, r19
		summ += (int32_t)samples[i] * iir_core->coeffs[i];
     316:	df 01       	movw	r26, r30
     318:	a8 0f       	add	r26, r24
     31a:	b9 1f       	adc	r27, r25
     31c:	13 96       	adiw	r26, 0x03	; 3
     31e:	ac 91       	ld	r26, X
     320:	bb 27       	eor	r27, r27
     322:	a7 fd       	sbrc	r26, 7
     324:	b0 95       	com	r27
     326:	f2 db       	rcall	.-2076   	; 0xfffffb0c <__eeprom_end+0xff7efb02>
     328:	c6 0e       	add	r12, r22
     32a:	d7 1e       	adc	r13, r23
     32c:	e8 1e       	adc	r14, r24
     32e:	f9 1e       	adc	r15, r25
{
	int32_t summ;
	uint8_t i;
	
	summ = new_sample * iir_core->coeffs[0];
	for (i=iir_core->n-1; i>0; i--)
     330:	41 50       	subi	r20, 0x01	; 1
     332:	01 f7       	brne	.-64     	; 0x2f4 <fir_i16_i8+0x2e>
	{
		samples[i] = samples[i-1];
		summ += (int32_t)samples[i] * iir_core->coeffs[i];
	}
	samples[0] = new_sample;
     334:	19 83       	std	Y+1, r17	; 0x01
     336:	08 83       	st	Y, r16
	return (int16_t)(summ / iir_core->dc_gain);
     338:	21 81       	ldd	r18, Z+1	; 0x01
     33a:	32 81       	ldd	r19, Z+2	; 0x02
     33c:	40 e0       	ldi	r20, 0x00	; 0
     33e:	50 e0       	ldi	r21, 0x00	; 0
     340:	c7 01       	movw	r24, r14
     342:	b6 01       	movw	r22, r12
     344:	c8 db       	rcall	.-2160   	; 0xfffffad6 <__eeprom_end+0xff7efacc>
}
     346:	c9 01       	movw	r24, r18
     348:	df 91       	pop	r29
     34a:	cf 91       	pop	r28
     34c:	1f 91       	pop	r17
     34e:	0f 91       	pop	r16
     350:	ff 90       	pop	r15
     352:	ef 90       	pop	r14
     354:	df 90       	pop	r13
     356:	cf 90       	pop	r12
     358:	08 95       	ret

0000035a <update_normalized_adc>:
	offset_norm = (int32_t)cp.cpoint1 * COEFF_SCALE - (int32_t)cp.cpoint1_adc * k_norm;
}


void update_normalized_adc()
{
     35a:	cf 92       	push	r12
     35c:	df 92       	push	r13
     35e:	ef 92       	push	r14
     360:	ff 92       	push	r15
	// Disable interrupts from ADC - to save data integrity
	ADCSRA &= ~(1<<ADIE);	
     362:	33 98       	cbi	0x06, 3	; 6
}

// Get ring buffer normalized value
uint16_t getNormalizedRingU16(RingBufU16_t* bptr)
{
	return 	bptr->summ / bptr->length;
     364:	c0 90 7a 00 	lds	r12, 0x007A
     368:	d0 90 7b 00 	lds	r13, 0x007B
     36c:	e0 90 7c 00 	lds	r14, 0x007C
     370:	f0 90 7d 00 	lds	r15, 0x007D
     374:	20 91 77 00 	lds	r18, 0x0077
     378:	30 e0       	ldi	r19, 0x00	; 0
     37a:	40 e0       	ldi	r20, 0x00	; 0
     37c:	50 e0       	ldi	r21, 0x00	; 0
     37e:	c7 01       	movw	r24, r14
     380:	b6 01       	movw	r22, r12
     382:	87 db       	rcall	.-2290   	; 0xfffffa92 <__eeprom_end+0xff7efa88>
     384:	30 93 46 01 	sts	0x0146, r19
     388:	20 93 45 01 	sts	0x0145, r18
{
	// Disable interrupts from ADC - to save data integrity
	ADCSRA &= ~(1<<ADIE);	
	// Get normalized mean window summ
	adc_normalized = (uint16_t)getNormalizedRingU16(&ringBufADC);
	adc_oversampled = ringBufADC.summ >> 2;
     38c:	d7 01       	movw	r26, r14
     38e:	c6 01       	movw	r24, r12
     390:	62 e0       	ldi	r22, 0x02	; 2
     392:	b6 95       	lsr	r27
     394:	a7 95       	ror	r26
     396:	97 95       	ror	r25
     398:	87 95       	ror	r24
     39a:	6a 95       	dec	r22
     39c:	d1 f7       	brne	.-12     	; 0x392 <update_normalized_adc+0x38>
     39e:	90 93 1c 01 	sts	0x011C, r25
     3a2:	80 93 1b 01 	sts	0x011B, r24
	// Filter
	adc_filtered = fir_i16_i8(adc_oversampled, filter_buffer, &fir_filter_rect);	
     3a6:	40 e6       	ldi	r20, 0x60	; 96
     3a8:	50 e0       	ldi	r21, 0x00	; 0
     3aa:	69 e4       	ldi	r22, 0x49	; 73
     3ac:	71 e0       	ldi	r23, 0x01	; 1
     3ae:	8b df       	rcall	.-234    	; 0x2c6 <fir_i16_i8>
     3b0:	90 93 1a 01 	sts	0x011A, r25
     3b4:	80 93 19 01 	sts	0x0119, r24

	// Enable interrupts from ADC
	ADCSRA |= (1<<ADIE);
     3b8:	33 9a       	sbi	0x06, 3	; 6
}
     3ba:	ff 90       	pop	r15
     3bc:	ef 90       	pop	r14
     3be:	df 90       	pop	r13
     3c0:	cf 90       	pop	r12
     3c2:	08 95       	ret

000003c4 <addToRingU16>:
//---------------------------------------------//
//---------------------------------------------//

// Ring buffer main function - add new data and update summ
void addToRingU16(RingBufU16_t* bptr, uint16_t sample)
{
     3c4:	ff 92       	push	r15
     3c6:	0f 93       	push	r16
     3c8:	1f 93       	push	r17
     3ca:	cf 93       	push	r28
     3cc:	df 93       	push	r29
     3ce:	fc 01       	movw	r30, r24
     3d0:	cb 01       	movw	r24, r22
	if (bptr->stat == RNORM)
     3d2:	20 85       	ldd	r18, Z+8	; 0x08
     3d4:	21 11       	cpse	r18, r1
     3d6:	18 c0       	rjmp	.+48     	; 0x408 <addToRingU16+0x44>
	{
		bptr->summ -= bptr->data[bptr->curr_pos];
     3d8:	27 81       	ldd	r18, Z+7	; 0x07
     3da:	41 81       	ldd	r20, Z+1	; 0x01
     3dc:	32 81       	ldd	r19, Z+2	; 0x02
     3de:	a4 2f       	mov	r26, r20
     3e0:	b3 2f       	mov	r27, r19
     3e2:	a2 0f       	add	r26, r18
     3e4:	b1 1d       	adc	r27, r1
     3e6:	a2 0f       	add	r26, r18
     3e8:	b1 1d       	adc	r27, r1
     3ea:	2d 91       	ld	r18, X+
     3ec:	3c 91       	ld	r19, X
     3ee:	43 81       	ldd	r20, Z+3	; 0x03
     3f0:	54 81       	ldd	r21, Z+4	; 0x04
     3f2:	65 81       	ldd	r22, Z+5	; 0x05
     3f4:	76 81       	ldd	r23, Z+6	; 0x06
     3f6:	42 1b       	sub	r20, r18
     3f8:	53 0b       	sbc	r21, r19
     3fa:	61 09       	sbc	r22, r1
     3fc:	71 09       	sbc	r23, r1
     3fe:	43 83       	std	Z+3, r20	; 0x03
     400:	54 83       	std	Z+4, r21	; 0x04
     402:	65 83       	std	Z+5, r22	; 0x05
     404:	76 83       	std	Z+6, r23	; 0x06
     406:	05 c0       	rjmp	.+10     	; 0x412 <addToRingU16+0x4e>
	}
	else
	{
		bptr->curr_pos = 0;
     408:	17 82       	std	Z+7, r1	; 0x07
		bptr->summ = 0;
     40a:	13 82       	std	Z+3, r1	; 0x03
     40c:	14 82       	std	Z+4, r1	; 0x04
     40e:	15 82       	std	Z+5, r1	; 0x05
     410:	16 82       	std	Z+6, r1	; 0x06
	}
	do	
	{
		bptr->data[bptr->curr_pos++] = sample;
     412:	d1 81       	ldd	r29, Z+1	; 0x01
     414:	f2 80       	ldd	r15, Z+2	; 0x02
     416:	43 81       	ldd	r20, Z+3	; 0x03
     418:	54 81       	ldd	r21, Z+4	; 0x04
     41a:	65 81       	ldd	r22, Z+5	; 0x05
     41c:	76 81       	ldd	r23, Z+6	; 0x06
		bptr->summ += sample;
     41e:	8c 01       	movw	r16, r24
     420:	20 e0       	ldi	r18, 0x00	; 0
     422:	30 e0       	ldi	r19, 0x00	; 0
		bptr->curr_pos = 0;
		bptr->summ = 0;
	}
	do	
	{
		bptr->data[bptr->curr_pos++] = sample;
     424:	c7 81       	ldd	r28, Z+7	; 0x07
     426:	ad 2f       	mov	r26, r29
     428:	bf 2d       	mov	r27, r15
     42a:	ac 0f       	add	r26, r28
     42c:	b1 1d       	adc	r27, r1
     42e:	ac 0f       	add	r26, r28
     430:	b1 1d       	adc	r27, r1
     432:	8d 93       	st	X+, r24
     434:	9c 93       	st	X, r25
     436:	cf 5f       	subi	r28, 0xFF	; 255
     438:	c7 83       	std	Z+7, r28	; 0x07
//---------------------------------------------//
//---------------------------------------------//
//---------------------------------------------//

// Ring buffer main function - add new data and update summ
void addToRingU16(RingBufU16_t* bptr, uint16_t sample)
     43a:	40 0f       	add	r20, r16
     43c:	51 1f       	adc	r21, r17
     43e:	62 1f       	adc	r22, r18
     440:	73 1f       	adc	r23, r19
	}
	do	
	{
		bptr->data[bptr->curr_pos++] = sample;
		bptr->summ += sample;
		if (bptr->curr_pos == bptr->length)	
     442:	a0 81       	ld	r26, Z
     444:	ca 13       	cpse	r28, r26
     446:	02 c0       	rjmp	.+4      	; 0x44c <addToRingU16+0x88>
		{	
			bptr->curr_pos = 0;	
     448:	17 82       	std	Z+7, r1	; 0x07
			bptr->stat = RNORM;
     44a:	10 86       	std	Z+8, r1	; 0x08
		}
	} 
	while (bptr->stat != RNORM);
     44c:	a0 85       	ldd	r26, Z+8	; 0x08
     44e:	a1 11       	cpse	r26, r1
     450:	e9 cf       	rjmp	.-46     	; 0x424 <addToRingU16+0x60>
     452:	43 83       	std	Z+3, r20	; 0x03
     454:	54 83       	std	Z+4, r21	; 0x04
     456:	65 83       	std	Z+5, r22	; 0x05
     458:	76 83       	std	Z+6, r23	; 0x06
}
     45a:	df 91       	pop	r29
     45c:	cf 91       	pop	r28
     45e:	1f 91       	pop	r17
     460:	0f 91       	pop	r16
     462:	ff 90       	pop	r15
     464:	08 95       	ret

00000466 <__vector_14>:




ISR(ADC_vect)
{
     466:	1f 92       	push	r1
     468:	0f 92       	push	r0
     46a:	0f b6       	in	r0, 0x3f	; 63
     46c:	0f 92       	push	r0
     46e:	11 24       	eor	r1, r1
     470:	2f 93       	push	r18
     472:	3f 93       	push	r19
     474:	4f 93       	push	r20
     476:	5f 93       	push	r21
     478:	6f 93       	push	r22
     47a:	7f 93       	push	r23
     47c:	8f 93       	push	r24
     47e:	9f 93       	push	r25
     480:	af 93       	push	r26
     482:	bf 93       	push	r27
     484:	ef 93       	push	r30
     486:	ff 93       	push	r31
	// Get new sample
	uint16_t new_sample = 1024 - ADC;	
     488:	84 b1       	in	r24, 0x04	; 4
     48a:	95 b1       	in	r25, 0x05	; 5
     48c:	60 e0       	ldi	r22, 0x00	; 0
     48e:	74 e0       	ldi	r23, 0x04	; 4
     490:	68 1b       	sub	r22, r24
     492:	79 0b       	sbc	r23, r25
	// Add new sample to the ring buffer
	addToRingU16(&ringBufADC, new_sample);
     494:	87 e7       	ldi	r24, 0x77	; 119
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	95 df       	rcall	.-214    	; 0x3c4 <addToRingU16>
}	
     49a:	ff 91       	pop	r31
     49c:	ef 91       	pop	r30
     49e:	bf 91       	pop	r27
     4a0:	af 91       	pop	r26
     4a2:	9f 91       	pop	r25
     4a4:	8f 91       	pop	r24
     4a6:	7f 91       	pop	r23
     4a8:	6f 91       	pop	r22
     4aa:	5f 91       	pop	r21
     4ac:	4f 91       	pop	r20
     4ae:	3f 91       	pop	r19
     4b0:	2f 91       	pop	r18
     4b2:	0f 90       	pop	r0
     4b4:	0f be       	out	0x3f, r0	; 63
     4b6:	0f 90       	pop	r0
     4b8:	1f 90       	pop	r1
     4ba:	18 95       	reti

000004bc <process_buttons>:
	uint8_t long_press_mask;
	uint8_t long_press_event_mask;
	
	uint16_t composed_state;
	
	raw_delayed = raw_current;
     4bc:	50 91 ec 00 	lds	r21, 0x00EC
	raw_delayed_inv = raw_current_inv;
     4c0:	30 91 80 00 	lds	r19, 0x0080
	raw_current = raw_button_state;
     4c4:	90 91 a3 01 	lds	r25, 0x01A3
     4c8:	90 93 ec 00 	sts	0x00EC, r25
	raw_current_inv = ~raw_current;
     4cc:	69 2f       	mov	r22, r25
     4ce:	60 95       	com	r22
     4d0:	60 93 80 00 	sts	0x0080, r22
	
	// Must be before press_timer update
	long_press_mask = (press_timer >= LONG_PRESS_DELAY) ? 0xFF : 0x00;
     4d4:	80 91 ed 00 	lds	r24, 0x00ED
     4d8:	8c 30       	cpi	r24, 0x0C	; 12
     4da:	10 f0       	brcs	.+4      	; 0x4e0 <process_buttons+0x24>
     4dc:	2f ef       	ldi	r18, 0xFF	; 255
     4de:	01 c0       	rjmp	.+2      	; 0x4e2 <process_buttons+0x26>
     4e0:	20 e0       	ldi	r18, 0x00	; 0
	
	if (raw_delayed != raw_current)
     4e2:	59 17       	cp	r21, r25
     4e4:	19 f0       	breq	.+6      	; 0x4ec <process_buttons+0x30>
	{
		press_timer = 0;
     4e6:	10 92 ed 00 	sts	0x00ED, r1
     4ea:	05 c0       	rjmp	.+10     	; 0x4f6 <process_buttons+0x3a>
	}
	else if (press_timer <= LONG_PRESS_DELAY)
     4ec:	8d 30       	cpi	r24, 0x0D	; 13
     4ee:	18 f4       	brcc	.+6      	; 0x4f6 <process_buttons+0x3a>
	{
		press_timer++;
     4f0:	8f 5f       	subi	r24, 0xFF	; 255
     4f2:	80 93 ed 00 	sts	0x00ED, r24
	}
	
	// Must after press_timer update
	long_press_event_mask = (press_timer == LONG_PRESS_DELAY) ? 0xFF : 0x00;
     4f6:	70 91 ed 00 	lds	r23, 0x00ED
     4fa:	7c 30       	cpi	r23, 0x0C	; 12
     4fc:	11 f4       	brne	.+4      	; 0x502 <process_buttons+0x46>
     4fe:	4f ef       	ldi	r20, 0xFF	; 255
     500:	01 c0       	rjmp	.+2      	; 0x504 <process_buttons+0x48>
     502:	40 e0       	ldi	r20, 0x00	; 0
			
	button_action_down = raw_current & raw_delayed_inv;
     504:	89 2f       	mov	r24, r25
     506:	83 23       	and	r24, r19
     508:	80 93 e9 00 	sts	0x00E9, r24
			
	if (press_timer > REPEAT_DELAY)
     50c:	77 30       	cpi	r23, 0x07	; 7
     50e:	08 f0       	brcs	.+2      	; 0x512 <process_buttons+0x56>
		raw_delayed_inv |= 0xFF;
     510:	3f ef       	ldi	r19, 0xFF	; 255
	
	button_action_rep = raw_current & raw_delayed_inv;
     512:	39 23       	and	r19, r25
     514:	30 93 e8 00 	sts	0x00E8, r19
	
	button_action_up_short = raw_current_inv & raw_delayed & ~long_press_mask;
     518:	20 95       	com	r18
     51a:	56 23       	and	r21, r22
     51c:	25 23       	and	r18, r21
     51e:	20 93 e7 00 	sts	0x00E7, r18
	//button_action_up_long  = raw_current_inv & raw_delayed & long_press_mask;
	button_action_long  = raw_current & long_press_event_mask;
     522:	49 23       	and	r20, r25
     524:	40 93 e6 00 	sts	0x00E6, r20
	
	// Compose button state
	composed_state = (button_action_down & (BD_MENU | BD_UP | BD_DOWN | BD_ROTFWD | BD_ROTREV | BD_HEATCTRL | BD_CYCLE));
     528:	8d 7f       	andi	r24, 0xFD	; 253
     52a:	90 e0       	ldi	r25, 0x00	; 0
	if (button_action_up_short & BD_MENU)
     52c:	25 fd       	sbrc	r18, 5
		composed_state |= BS_MENU;
     52e:	91 60       	ori	r25, 0x01	; 1
	//if (button_action_up_long & BD_MENU)
	if (button_action_long & BD_MENU)
     530:	45 fd       	sbrc	r20, 5
		composed_state |= BL_MENU;
     532:	92 60       	ori	r25, 0x02	; 2
	if (button_action_rep & BD_UP)
     534:	36 fd       	sbrc	r19, 6
		composed_state |= BR_UP;	
     536:	94 60       	ori	r25, 0x04	; 4
	if (button_action_rep & BD_DOWN)
     538:	37 fd       	sbrc	r19, 7
		composed_state |= BR_DOWN;
     53a:	98 60       	ori	r25, 0x08	; 8

	button_state = composed_state;
     53c:	90 93 eb 00 	sts	0x00EB, r25
     540:	80 93 ea 00 	sts	0x00EA, r24
     544:	08 95       	ret

00000546 <processRollControl>:
int16_t dbg_PID_output;


// Function to control motor rotation
void processRollControl(void)
{	
     546:	cf 93       	push	r28
//	static uint8_t beepMask = 0x00;
//	uint8_t nextBeepMask = 0xFF;
	static uint8_t force_rotate = 0;
	
	// Process auto power off control
	if (autoPowerOffState & AUTO_POFF_ACTIVE)
     548:	80 91 ee 00 	lds	r24, 0x00EE
     54c:	80 ff       	sbrs	r24, 0
     54e:	0f c0       	rjmp	.+30     	; 0x56e <processRollControl+0x28>
	{
		stopCycleRolling(1);	
     550:	81 e0       	ldi	r24, 0x01	; 1
     552:	f8 d7       	rcall	.+4080   	; 0x1544 <stopCycleRolling>
		if (adc_celsius <= POFF_MOTOR_TRESHOLD)
     554:	80 91 47 01 	lds	r24, 0x0147
     558:	90 91 48 01 	lds	r25, 0x0148
     55c:	c3 97       	sbiw	r24, 0x33	; 51
     55e:	08 f0       	brcs	.+2      	; 0x562 <processRollControl+0x1c>
     560:	5f c0       	rjmp	.+190    	; 0x620 <processRollControl+0xda>
		{
			force_rotate = ROLL_FWD;		// Default direction
     562:	81 e0       	ldi	r24, 0x01	; 1
     564:	80 93 f0 00 	sts	0x00F0, r24
			setMotorDirection(0);			// Stop the motor
     568:	80 e0       	ldi	r24, 0x00	; 0
     56a:	cb d7       	rcall	.+3990   	; 0x1502 <setMotorDirection>
     56c:	59 c0       	rjmp	.+178    	; 0x620 <processRollControl+0xda>
		}
	}
	else
	{
		// Control direction by buttons
		if (button_action_down & BD_ROTFWD)
     56e:	80 91 e9 00 	lds	r24, 0x00E9
     572:	82 ff       	sbrs	r24, 2
     574:	04 c0       	rjmp	.+8      	; 0x57e <processRollControl+0x38>
		{
			setMotorDirection(ROLL_FWD);	
     576:	81 e0       	ldi	r24, 0x01	; 1
     578:	c4 d7       	rcall	.+3976   	; 0x1502 <setMotorDirection>
			beepState |= 0x01;			// pressed FWD button
     57a:	c1 e0       	ldi	r28, 0x01	; 1
     57c:	13 c0       	rjmp	.+38     	; 0x5a4 <processRollControl+0x5e>
		}		
		else if (button_action_down & BD_ROTREV)
     57e:	84 ff       	sbrs	r24, 4
     580:	04 c0       	rjmp	.+8      	; 0x58a <processRollControl+0x44>
		{
			setMotorDirection(ROLL_REV);
     582:	82 e0       	ldi	r24, 0x02	; 2
     584:	be d7       	rcall	.+3964   	; 0x1502 <setMotorDirection>
			beepState |= 0x02;			// pressed REV button
     586:	c2 e0       	ldi	r28, 0x02	; 2
     588:	0d c0       	rjmp	.+26     	; 0x5a4 <processRollControl+0x5e>
		}		
		else if (button_action_long & BD_CYCLE)
     58a:	80 91 e6 00 	lds	r24, 0x00E6
     58e:	83 ff       	sbrs	r24, 3
     590:	04 c0       	rjmp	.+8      	; 0x59a <processRollControl+0x54>
		{
			stopCycleRolling(1);		// Reset points and disable CYCLE mode (if was enabled)
     592:	81 e0       	ldi	r24, 0x01	; 1
     594:	d7 d7       	rcall	.+4014   	; 0x1544 <stopCycleRolling>
			beepState |= 0x08;			// reset of points by long pressing of ROLL button
     596:	c8 e0       	ldi	r28, 0x08	; 8
     598:	05 c0       	rjmp	.+10     	; 0x5a4 <processRollControl+0x5e>
		}
		else if (force_rotate)
     59a:	80 91 f0 00 	lds	r24, 0x00F0
     59e:	81 11       	cpse	r24, r1
		{
			// Auto power off mode was exited by pressing some other button, not direction buttons
			// Start roll, but do not beep in this case
			setMotorDirection(force_rotate);
     5a0:	b0 d7       	rcall	.+3936   	; 0x1502 <setMotorDirection>


// Function to control motor rotation
void processRollControl(void)
{	
	uint8_t beepState = 0;
     5a2:	c0 e0       	ldi	r28, 0x00	; 0
		{
			// Auto power off mode was exited by pressing some other button, not direction buttons
			// Start roll, but do not beep in this case
			setMotorDirection(force_rotate);
		}
		force_rotate = 0;		// First normal pass will clear 
     5a4:	10 92 f0 00 	sts	0x00F0, r1
			
		if (button_action_up_short & BD_CYCLE)
     5a8:	80 91 e7 00 	lds	r24, 0x00E7
     5ac:	83 ff       	sbrs	r24, 3
     5ae:	0e c0       	rjmp	.+28     	; 0x5cc <processRollControl+0x86>
		{
			if (rollState & ROLL_CYCLE)
     5b0:	80 91 0a 01 	lds	r24, 0x010A
     5b4:	82 ff       	sbrs	r24, 2
     5b6:	04 c0       	rjmp	.+8      	; 0x5c0 <processRollControl+0x7a>
			{
				stopCycleRolling(0);
     5b8:	80 e0       	ldi	r24, 0x00	; 0
     5ba:	c4 d7       	rcall	.+3976   	; 0x1544 <stopCycleRolling>
				beepState |= 0x20;		// stopped cycle
     5bc:	c0 62       	ori	r28, 0x20	; 32
     5be:	06 c0       	rjmp	.+12     	; 0x5cc <processRollControl+0x86>
			}
			else if (startCycleRolling())
     5c0:	fd d7       	rcall	.+4090   	; 0x15bc <startCycleRolling>
     5c2:	88 23       	and	r24, r24
     5c4:	11 f0       	breq	.+4      	; 0x5ca <processRollControl+0x84>
			{
				beepState |= 0x10;		// started cycle
     5c6:	c0 61       	ori	r28, 0x10	; 16
     5c8:	01 c0       	rjmp	.+2      	; 0x5cc <processRollControl+0x86>
			}
			else
			{
				beepState |= 0x40;		// failed to start cycle
     5ca:	c0 64       	ori	r28, 0x40	; 64
			}			
		}		
			
		if (rollState & ROLL_DIR_CHANGED)
     5cc:	80 91 0a 01 	lds	r24, 0x010A
     5d0:	85 ff       	sbrs	r24, 5
     5d2:	04 c0       	rjmp	.+8      	; 0x5dc <processRollControl+0x96>
		{
			rollState &= ~ROLL_DIR_CHANGED;
     5d4:	8f 7d       	andi	r24, 0xDF	; 223
     5d6:	80 93 0a 01 	sts	0x010A, r24
			beepState |= 0x04;	
     5da:	c4 60       	ori	r28, 0x04	; 4
		}
			
		if (rollState & CYCLE_ROLL_DONE)
     5dc:	80 91 0a 01 	lds	r24, 0x010A
     5e0:	84 ff       	sbrs	r24, 4
     5e2:	04 c0       	rjmp	.+8      	; 0x5ec <processRollControl+0xa6>
		{
			rollState &= ~CYCLE_ROLL_DONE;
     5e4:	8f 7e       	andi	r24, 0xEF	; 239
     5e6:	80 93 0a 01 	sts	0x010A, r24
			beepState |= 0x80;	
     5ea:	c0 68       	ori	r28, 0x80	; 128
		}		
			
		//-----------//
			
		if (beepState & 0x80)		// Roll cycle done
     5ec:	c7 ff       	sbrs	r28, 7
     5ee:	06 c0       	rjmp	.+12     	; 0x5fc <processRollControl+0xb6>
		{
			SetBeeperFreq(1000);
     5f0:	88 ee       	ldi	r24, 0xE8	; 232
     5f2:	93 e0       	ldi	r25, 0x03	; 3
     5f4:	98 d9       	rcall	.-3280   	; 0xfffff926 <__eeprom_end+0xff7ef91c>
			StartBeep(200);
     5f6:	88 ec       	ldi	r24, 0xC8	; 200
     5f8:	90 e0       	ldi	r25, 0x00	; 0
     5fa:	11 c0       	rjmp	.+34     	; 0x61e <processRollControl+0xd8>
		}		
		else if (beepState & 0x40)	// Roll cycle start fail
     5fc:	c6 ff       	sbrs	r28, 6
     5fe:	03 c0       	rjmp	.+6      	; 0x606 <processRollControl+0xc0>
		{
			SetBeeperFreq(500);
     600:	84 ef       	ldi	r24, 0xF4	; 244
     602:	91 e0       	ldi	r25, 0x01	; 1
     604:	09 c0       	rjmp	.+18     	; 0x618 <processRollControl+0xd2>
			StartBeep(50);
		} 
		else if (beepState & 0x08)	// Reset points
     606:	c3 ff       	sbrs	r28, 3
     608:	03 c0       	rjmp	.+6      	; 0x610 <processRollControl+0xca>
		{
			SetBeeperFreq(800);
     60a:	80 e2       	ldi	r24, 0x20	; 32
     60c:	93 e0       	ldi	r25, 0x03	; 3
     60e:	04 c0       	rjmp	.+8      	; 0x618 <processRollControl+0xd2>
			StartBeep(50);
		}							// Other
		else if ( beepState & (0x01 | 0x02 | 0x10 | 0x20 | 0x04) )
     610:	c7 73       	andi	r28, 0x37	; 55
     612:	31 f0       	breq	.+12     	; 0x620 <processRollControl+0xda>
		{
			SetBeeperFreq(1000);
     614:	88 ee       	ldi	r24, 0xE8	; 232
     616:	93 e0       	ldi	r25, 0x03	; 3
     618:	86 d9       	rcall	.-3316   	; 0xfffff926 <__eeprom_end+0xff7ef91c>
			StartBeep(50);	
     61a:	82 e3       	ldi	r24, 0x32	; 50
     61c:	90 e0       	ldi	r25, 0x00	; 0
     61e:	a3 d9       	rcall	.-3258   	; 0xfffff966 <__eeprom_end+0xff7ef95c>
		}			
			
	}

	//----- LED indication ------//
	clearExtraLeds(LED_ROTFWD | LED_ROTREV);
     620:	88 e1       	ldi	r24, 0x18	; 24
     622:	b0 d2       	rcall	.+1376   	; 0xb84 <clearExtraLeds>
	if (rollState & ROLL_FWD)
     624:	80 91 0a 01 	lds	r24, 0x010A
     628:	80 ff       	sbrs	r24, 0
     62a:	02 c0       	rjmp	.+4      	; 0x630 <processRollControl+0xea>
		setExtraLeds(LED_ROTFWD);
     62c:	88 e0       	ldi	r24, 0x08	; 8
     62e:	03 c0       	rjmp	.+6      	; 0x636 <processRollControl+0xf0>
	else if (rollState & ROLL_REV)
     630:	81 ff       	sbrs	r24, 1
     632:	03 c0       	rjmp	.+6      	; 0x63a <processRollControl+0xf4>
		setExtraLeds(LED_ROTREV);
     634:	80 e1       	ldi	r24, 0x10	; 16
}
     636:	cf 91       	pop	r28
	//----- LED indication ------//
	clearExtraLeds(LED_ROTFWD | LED_ROTREV);
	if (rollState & ROLL_FWD)
		setExtraLeds(LED_ROTFWD);
	else if (rollState & ROLL_REV)
		setExtraLeds(LED_ROTREV);
     638:	9f c2       	rjmp	.+1342   	; 0xb78 <setExtraLeds>
}
     63a:	cf 91       	pop	r28
     63c:	08 95       	ret

0000063e <processPID>:
	return pid_output;
}
*/

uint8_t processPID(uint16_t setPoint, uint16_t processValue)
{
     63e:	ef 92       	push	r14
     640:	ff 92       	push	r15
     642:	0f 93       	push	r16
     644:	1f 93       	push	r17
     646:	cf 93       	push	r28
     648:	df 93       	push	r29
     64a:	8b 01       	movw	r16, r22
	int16_t error, p_term, i_term, d_term, temp;
	static uint16_t lastProcessValue;
	static int16_t integAcc = 0;
	
	error = setPoint - processValue;
     64c:	86 1b       	sub	r24, r22
     64e:	97 0b       	sbc	r25, r23
	
	
	//------ Calculate P term --------//
	
	if (error > 100 )
     650:	85 36       	cpi	r24, 0x65	; 101
     652:	91 05       	cpc	r25, r1
     654:	5c f4       	brge	.+22     	; 0x66c <processPID+0x2e>
	{
		p_term = 2000;	
	}
	else if (error < -100 )
     656:	8c 39       	cpi	r24, 0x9C	; 156
     658:	2f ef       	ldi	r18, 0xFF	; 255
     65a:	92 07       	cpc	r25, r18
     65c:	54 f0       	brlt	.+20     	; 0x672 <processPID+0x34>
	{
		p_term = -2000 ;	
	}
	else
	{
		p_term = error * Kp;
     65e:	2a e0       	ldi	r18, 0x0A	; 10
     660:	28 9f       	mul	r18, r24
     662:	e0 01       	movw	r28, r0
     664:	29 9f       	mul	r18, r25
     666:	d0 0d       	add	r29, r0
     668:	11 24       	eor	r1, r1
     66a:	05 c0       	rjmp	.+10     	; 0x676 <processPID+0x38>
	
	//------ Calculate P term --------//
	
	if (error > 100 )
	{
		p_term = 2000;	
     66c:	c0 ed       	ldi	r28, 0xD0	; 208
     66e:	d7 e0       	ldi	r29, 0x07	; 7
     670:	02 c0       	rjmp	.+4      	; 0x676 <processPID+0x38>
	}
	else if (error < -100 )
	{
		p_term = -2000 ;	
     672:	c0 e3       	ldi	r28, 0x30	; 48
     674:	d8 ef       	ldi	r29, 0xF8	; 248
		p_term = error * Kp;
	}
	
	//------ Calculate I term --------//

	integAcc += error;
     676:	20 91 f1 00 	lds	r18, 0x00F1
     67a:	30 91 f2 00 	lds	r19, 0x00F2
     67e:	28 0f       	add	r18, r24
     680:	39 1f       	adc	r19, r25
	
	if (integAcc > 1000 )
     682:	29 3e       	cpi	r18, 0xE9	; 233
     684:	83 e0       	ldi	r24, 0x03	; 3
     686:	38 07       	cpc	r19, r24
     688:	3c f0       	brlt	.+14     	; 0x698 <processPID+0x5a>
	{
		integAcc = 1000;
     68a:	88 ee       	ldi	r24, 0xE8	; 232
     68c:	93 e0       	ldi	r25, 0x03	; 3
     68e:	90 93 f2 00 	sts	0x00F2, r25
     692:	80 93 f1 00 	sts	0x00F1, r24
     696:	0b c0       	rjmp	.+22     	; 0x6ae <processPID+0x70>
	}
	else if (integAcc < 0)
     698:	37 fd       	sbrc	r19, 7
     69a:	05 c0       	rjmp	.+10     	; 0x6a6 <processPID+0x68>
		p_term = error * Kp;
	}
	
	//------ Calculate I term --------//

	integAcc += error;
     69c:	30 93 f2 00 	sts	0x00F2, r19
     6a0:	20 93 f1 00 	sts	0x00F1, r18
     6a4:	04 c0       	rjmp	.+8      	; 0x6ae <processPID+0x70>
	{
		integAcc = 1000;
	}
	else if (integAcc < 0)
	{
		integAcc = 0;
     6a6:	10 92 f2 00 	sts	0x00F2, r1
     6aa:	10 92 f1 00 	sts	0x00F1, r1
	}
	i_term = integAcc * Ki;
     6ae:	20 91 f1 00 	lds	r18, 0x00F1
     6b2:	30 91 f2 00 	lds	r19, 0x00F2
     6b6:	45 e0       	ldi	r20, 0x05	; 5
     6b8:	42 9f       	mul	r20, r18
     6ba:	c0 01       	movw	r24, r0
     6bc:	43 9f       	mul	r20, r19
     6be:	90 0d       	add	r25, r0
     6c0:	11 24       	eor	r1, r1
	i_term /= 20;
     6c2:	64 e1       	ldi	r22, 0x14	; 20
     6c4:	70 e0       	ldi	r23, 0x00	; 0
     6c6:	d2 d9       	rcall	.-3164   	; 0xfffffa6c <__eeprom_end+0xff7efa62>
     6c8:	7b 01       	movw	r14, r22
	
	
	//------ Calculate D term --------//
	// 13_1
	d_term = fir_i16_i8((lastProcessValue - processValue)*10, pid_dterm_buffer, &dterm_filter_core);
     6ca:	80 91 f3 00 	lds	r24, 0x00F3
     6ce:	90 91 f4 00 	lds	r25, 0x00F4
     6d2:	80 1b       	sub	r24, r16
     6d4:	91 0b       	sbc	r25, r17
     6d6:	41 e8       	ldi	r20, 0x81	; 129
     6d8:	50 e0       	ldi	r21, 0x00	; 0
     6da:	64 e8       	ldi	r22, 0x84	; 132
     6dc:	71 e0       	ldi	r23, 0x01	; 1
     6de:	2a e0       	ldi	r18, 0x0A	; 10
     6e0:	fc 01       	movw	r30, r24
     6e2:	2e 9f       	mul	r18, r30
     6e4:	c0 01       	movw	r24, r0
     6e6:	2f 9f       	mul	r18, r31
     6e8:	90 0d       	add	r25, r0
     6ea:	11 24       	eor	r1, r1
     6ec:	ec dd       	rcall	.-1064   	; 0x2c6 <fir_i16_i8>
	lastProcessValue = processValue;
     6ee:	10 93 f4 00 	sts	0x00F4, r17
     6f2:	00 93 f3 00 	sts	0x00F3, r16
	d_term = Kd * d_term;
     6f6:	22 e3       	ldi	r18, 0x32	; 50
     6f8:	28 9f       	mul	r18, r24
     6fa:	f0 01       	movw	r30, r0
     6fc:	29 9f       	mul	r18, r25
     6fe:	f0 0d       	add	r31, r0
     700:	11 24       	eor	r1, r1
	
	//--------- Summ terms -----------//
	temp = (p_term + i_term + d_term) / SCALING_FACTOR;
     702:	ce 01       	movw	r24, r28
     704:	8e 0d       	add	r24, r14
     706:	9f 1d       	adc	r25, r15
     708:	8e 0f       	add	r24, r30
     70a:	9f 1f       	adc	r25, r31
     70c:	65 e0       	ldi	r22, 0x05	; 5
     70e:	70 e0       	ldi	r23, 0x00	; 0
     710:	ad d9       	rcall	.-3238   	; 0xfffffa6c <__eeprom_end+0xff7efa62>
     712:	9b 01       	movw	r18, r22
     714:	77 ff       	sbrs	r23, 7
     716:	02 c0       	rjmp	.+4      	; 0x71c <processPID+0xde>
     718:	20 e0       	ldi	r18, 0x00	; 0
     71a:	30 e0       	ldi	r19, 0x00	; 0
     71c:	c9 01       	movw	r24, r18
     71e:	25 36       	cpi	r18, 0x65	; 101
     720:	31 05       	cpc	r19, r1
     722:	14 f0       	brlt	.+4      	; 0x728 <processPID+0xea>
     724:	84 e6       	ldi	r24, 0x64	; 100
     726:	90 e0       	ldi	r25, 0x00	; 0
		temp = 0;
	}
	
	
	//------- Debug --------//
	dbg_PID_p_term = p_term;
     728:	d0 93 7f 01 	sts	0x017F, r29
     72c:	c0 93 7e 01 	sts	0x017E, r28
	dbg_PID_d_term = d_term;
     730:	f0 93 8d 01 	sts	0x018D, r31
     734:	e0 93 8c 01 	sts	0x018C, r30
	dbg_PID_i_term = i_term;
     738:	f0 92 83 01 	sts	0x0183, r15
     73c:	e0 92 82 01 	sts	0x0182, r14
	dbg_PID_output = temp;
     740:	90 93 7d 01 	sts	0x017D, r25
     744:	80 93 7c 01 	sts	0x017C, r24
	
	
	return temp;
	
}
     748:	df 91       	pop	r29
     74a:	cf 91       	pop	r28
     74c:	1f 91       	pop	r17
     74e:	0f 91       	pop	r16
     750:	ff 90       	pop	r15
     752:	ef 90       	pop	r14
     754:	08 95       	ret

00000756 <processHeaterControl>:
	processPID(0,adc_filtered);			// oversampled PID control
}


void processHeaterControl(void)
{
     756:	0f 93       	push	r16
     758:	1f 93       	push	r17
     75a:	cf 93       	push	r28
     75c:	df 93       	push	r29
	uint16_t pid_output;
	
	// TODO: check code size with local copy of heaterState - 18 bytes economy
	
	// Process heater ON/OFF control by button
	if (button_state & BD_HEATCTRL)
     75e:	80 91 ea 00 	lds	r24, 0x00EA
     762:	80 ff       	sbrs	r24, 0
     764:	0b c0       	rjmp	.+22     	; 0x77c <processHeaterControl+0x26>
	{
		heaterState ^= HEATER_ENABLED;
     766:	80 91 ef 00 	lds	r24, 0x00EF
     76a:	91 e0       	ldi	r25, 0x01	; 1
     76c:	89 27       	eor	r24, r25
     76e:	80 93 ef 00 	sts	0x00EF, r24
		// Force update heater power
		sys_timers.flags |= UPDATE_PID;		// Not very good approach if UPDATE_PID flag is used somewhere else
     772:	80 91 97 00 	lds	r24, 0x0097
     776:	80 64       	ori	r24, 0x40	; 64
     778:	80 93 97 00 	sts	0x0097, r24
	}
	
	// Process auto power off control
	if (autoPowerOffState & AUTO_POFF_ACTIVE)
     77c:	80 91 ee 00 	lds	r24, 0x00EE
     780:	80 ff       	sbrs	r24, 0
     782:	05 c0       	rjmp	.+10     	; 0x78e <processHeaterControl+0x38>
	{
		heaterState &= ~HEATER_ENABLED;
     784:	80 91 ef 00 	lds	r24, 0x00EF
     788:	8e 7f       	andi	r24, 0xFE	; 254
     78a:	80 93 ef 00 	sts	0x00EF, r24
	}		
	
	// Check if heater control should be updated
	// PID call interval is a multiple of Celsius update interval. 
	if (sys_timers.flags & UPDATE_PID)
     78e:	80 91 97 00 	lds	r24, 0x0097
     792:	86 ff       	sbrs	r24, 6
     794:	3a c0       	rjmp	.+116    	; 0x80a <processHeaterControl+0xb4>
	{
		// Convert temperature setup to equal ADC value
		set_value_adc = conv_Celsius_to_ADC(p.setup_temp_value);					
     796:	80 91 78 01 	lds	r24, 0x0178
     79a:	90 e0       	ldi	r25, 0x00	; 0
     79c:	1c dd       	rcall	.-1480   	; 0x1d6 <conv_Celsius_to_ADC>

		setPoint = set_value_adc * 5;
     79e:	25 e0       	ldi	r18, 0x05	; 5
     7a0:	28 9f       	mul	r18, r24
     7a2:	e0 01       	movw	r28, r0
     7a4:	29 9f       	mul	r18, r25
     7a6:	d0 0d       	add	r29, r0
     7a8:	11 24       	eor	r1, r1
		setPoint >>= 1;
     7aa:	d6 95       	lsr	r29
     7ac:	c7 95       	ror	r28
		processValue = adc_filtered >> 1;	// normal PID control
     7ae:	00 91 19 01 	lds	r16, 0x0119
     7b2:	10 91 1a 01 	lds	r17, 0x011A
     7b6:	16 95       	lsr	r17
     7b8:	07 95       	ror	r16
		//setPoint = set_value_adc * 5;
		//processValue = adc_filtered;		// oversampled PID control
		
		// Process PID
		pid_output = processPID(setPoint, processValue);		
     7ba:	b8 01       	movw	r22, r16
     7bc:	ce 01       	movw	r24, r28
     7be:	3f df       	rcall	.-386    	; 0x63e <processPID>
		
		// DSM test only
		//pid_output = (p.setup_temp_value < 50) ? 0 : p.setup_temp_value - 50;
					
		// If heater is disabled, override output
		if (!(heaterState & HEATER_ENABLED))
     7c0:	90 91 ef 00 	lds	r25, 0x00EF
     7c4:	90 ff       	sbrs	r25, 0
     7c6:	02 c0       	rjmp	.+4      	; 0x7cc <processHeaterControl+0x76>
		processValue = adc_filtered >> 1;	// normal PID control
		//setPoint = set_value_adc * 5;
		//processValue = adc_filtered;		// oversampled PID control
		
		// Process PID
		pid_output = processPID(setPoint, processValue);		
     7c8:	90 e0       	ldi	r25, 0x00	; 0
     7ca:	02 c0       	rjmp	.+4      	; 0x7d0 <processHeaterControl+0x7a>
		// DSM test only
		//pid_output = (p.setup_temp_value < 50) ? 0 : p.setup_temp_value - 50;
					
		// If heater is disabled, override output
		if (!(heaterState & HEATER_ENABLED))
			pid_output = 0;
     7cc:	80 e0       	ldi	r24, 0x00	; 0
     7ce:	90 e0       	ldi	r25, 0x00	; 0
			
		// Set new heater power value	
		setHeaterPower(pid_output);	
     7d0:	8b d6       	rcall	.+3350   	; 0x14e8 <setHeaterPower>
		
		//------- Debug --------//		
		// PID input:
		dbg_SetPointCelsius = (heaterState & HEATER_ENABLED) ? p.setup_temp_value : 0;
     7d2:	80 91 ef 00 	lds	r24, 0x00EF
     7d6:	98 2f       	mov	r25, r24
     7d8:	91 70       	andi	r25, 0x01	; 1
     7da:	80 ff       	sbrs	r24, 0
     7dc:	03 c0       	rjmp	.+6      	; 0x7e4 <processHeaterControl+0x8e>
     7de:	80 91 78 01 	lds	r24, 0x0178
     7e2:	01 c0       	rjmp	.+2      	; 0x7e6 <processHeaterControl+0x90>
     7e4:	80 e0       	ldi	r24, 0x00	; 0
     7e6:	80 93 71 01 	sts	0x0171, r24
		dbg_SetPointPID = (heaterState & HEATER_ENABLED) ? setPoint : 0;
     7ea:	91 11       	cpse	r25, r1
     7ec:	02 c0       	rjmp	.+4      	; 0x7f2 <processHeaterControl+0x9c>
     7ee:	c0 e0       	ldi	r28, 0x00	; 0
     7f0:	d0 e0       	ldi	r29, 0x00	; 0
     7f2:	d0 93 8f 01 	sts	0x018F, r29
     7f6:	c0 93 8e 01 	sts	0x018E, r28
		dbg_RealTempCelsius = adc_filtered;
     7fa:	80 91 19 01 	lds	r24, 0x0119
     7fe:	80 93 90 01 	sts	0x0190, r24
		dbg_RealTempPID = processValue;
     802:	10 93 81 01 	sts	0x0181, r17
     806:	00 93 80 01 	sts	0x0180, r16
		
	}	
		
	
	//----- LED indication ------//
	if (heaterState & HEATER_ENABLED)
     80a:	80 91 ef 00 	lds	r24, 0x00EF
     80e:	80 ff       	sbrs	r24, 0
     810:	06 c0       	rjmp	.+12     	; 0x81e <processHeaterControl+0xc8>
		setExtraLeds(LED_HEATER);
     812:	84 e0       	ldi	r24, 0x04	; 4
	else
		clearExtraLeds(LED_HEATER);
	
}
     814:	df 91       	pop	r29
     816:	cf 91       	pop	r28
     818:	1f 91       	pop	r17
     81a:	0f 91       	pop	r16
	}	
		
	
	//----- LED indication ------//
	if (heaterState & HEATER_ENABLED)
		setExtraLeds(LED_HEATER);
     81c:	ad c1       	rjmp	.+858    	; 0xb78 <setExtraLeds>
	else
		clearExtraLeds(LED_HEATER);
     81e:	84 e0       	ldi	r24, 0x04	; 4
	
}
     820:	df 91       	pop	r29
     822:	cf 91       	pop	r28
     824:	1f 91       	pop	r17
     826:	0f 91       	pop	r16
	
	//----- LED indication ------//
	if (heaterState & HEATER_ENABLED)
		setExtraLeds(LED_HEATER);
	else
		clearExtraLeds(LED_HEATER);
     828:	ad c1       	rjmp	.+858    	; 0xb84 <clearExtraLeds>

0000082a <heaterInit>:


void heaterInit(void)
{
	//processPID(0,adc_normalized);
	processPID(0,adc_filtered);			// oversampled PID control
     82a:	60 91 19 01 	lds	r22, 0x0119
     82e:	70 91 1a 01 	lds	r23, 0x011A
     832:	80 e0       	ldi	r24, 0x00	; 0
     834:	90 e0       	ldi	r25, 0x00	; 0
     836:	03 cf       	rjmp	.-506    	; 0x63e <processPID>

00000838 <processHeaterAlerts>:

// Function to process all heater alerts:
//	- getting near to desired temperature
//	- continuous heating when disabled
void processHeaterAlerts(void)
{
     838:	cf 93       	push	r28
     83a:	df 93       	push	r29
	static uint8_t tempAlertRange = TEMP_ALERT_RANGE;
	static uint16_t refCapturedTemp = 0xFFFF;
	uint16_t currentTemperature = adc_celsius;
     83c:	c0 91 47 01 	lds	r28, 0x0147
     840:	d0 91 48 01 	lds	r29, 0x0148
	
	
	// Indicate reaching of desired temperature
	if ( (currentTemperature > p.setup_temp_value - tempAlertRange) && (currentTemperature < p.setup_temp_value + tempAlertRange) )
     844:	20 91 78 01 	lds	r18, 0x0178
     848:	30 e0       	ldi	r19, 0x00	; 0
     84a:	60 91 88 00 	lds	r22, 0x0088
     84e:	86 2f       	mov	r24, r22
     850:	90 e0       	ldi	r25, 0x00	; 0
     852:	a9 01       	movw	r20, r18
     854:	48 1b       	sub	r20, r24
     856:	59 0b       	sbc	r21, r25
     858:	4c 17       	cp	r20, r28
     85a:	5d 07       	cpc	r21, r29
     85c:	98 f4       	brcc	.+38     	; 0x884 <processHeaterAlerts+0x4c>
     85e:	82 0f       	add	r24, r18
     860:	93 1f       	adc	r25, r19
     862:	c8 17       	cp	r28, r24
     864:	d9 07       	cpc	r29, r25
     866:	70 f4       	brcc	.+28     	; 0x884 <processHeaterAlerts+0x4c>
	{
		if ((tempAlertRange == TEMP_ALERT_RANGE) && (heaterState & HEATER_ENABLED))
     868:	65 30       	cpi	r22, 0x05	; 5
     86a:	51 f4       	brne	.+20     	; 0x880 <processHeaterAlerts+0x48>
     86c:	80 91 ef 00 	lds	r24, 0x00EF
     870:	80 ff       	sbrs	r24, 0
     872:	06 c0       	rjmp	.+12     	; 0x880 <processHeaterAlerts+0x48>
		{
			SetBeeperFreq(1000);
     874:	88 ee       	ldi	r24, 0xE8	; 232
     876:	93 e0       	ldi	r25, 0x03	; 3
     878:	56 d8       	rcall	.-3924   	; 0xfffff926 <__eeprom_end+0xff7ef91c>
			StartBeep(400);
     87a:	80 e9       	ldi	r24, 0x90	; 144
     87c:	91 e0       	ldi	r25, 0x01	; 1
     87e:	73 d8       	rcall	.-3866   	; 0xfffff966 <__eeprom_end+0xff7ef95c>
		}
		// Add some hysteresis
		tempAlertRange = TEMP_ALERT_RANGE + TEMP_ALERT_HYST;
     880:	8a e0       	ldi	r24, 0x0A	; 10
     882:	01 c0       	rjmp	.+2      	; 0x886 <processHeaterAlerts+0x4e>
	}			
	else
	{
		tempAlertRange = TEMP_ALERT_RANGE;
     884:	85 e0       	ldi	r24, 0x05	; 5
     886:	80 93 88 00 	sts	0x0088, r24
	// Growing temperature with heater disabled alert 
	// This alert is done regardless of global sound enable
	// A false triggering may occur if ambient temperature grows.
	// To reset the warning in this case just turn on heater for at least one systimer tick (50ms)
	// If heater is enabled, it is implied that user controls heating process
	if (heaterState & (HEATER_ENABLED | CALIBRATION_ACTIVE))
     88a:	80 91 ef 00 	lds	r24, 0x00EF
     88e:	83 70       	andi	r24, 0x03	; 3
     890:	09 f0       	breq	.+2      	; 0x894 <processHeaterAlerts+0x5c>
     892:	0b c0       	rjmp	.+22     	; 0x8aa <processHeaterAlerts+0x72>
	{
		// Heater enabled, just save current temperature as reference
		// Same if calibration in progress, even if heater is disabled
		refCapturedTemp = currentTemperature;
	}
	else if (sys_timers.flags & EXPIRED_10SEC)
     894:	80 91 97 00 	lds	r24, 0x0097
     898:	81 ff       	sbrs	r24, 1
     89a:	19 c0       	rjmp	.+50     	; 0x8ce <processHeaterAlerts+0x96>
	{
		// Heater disabled. If temperature is falling,
		if (currentTemperature < refCapturedTemp)
     89c:	80 91 89 00 	lds	r24, 0x0089
     8a0:	90 91 8a 00 	lds	r25, 0x008A
     8a4:	c8 17       	cp	r28, r24
     8a6:	d9 07       	cpc	r29, r25
     8a8:	28 f4       	brcc	.+10     	; 0x8b4 <processHeaterAlerts+0x7c>
		{
			// save current temperature as reference
			refCapturedTemp = currentTemperature;
     8aa:	d0 93 8a 00 	sts	0x008A, r29
     8ae:	c0 93 89 00 	sts	0x0089, r28
     8b2:	0d c0       	rjmp	.+26     	; 0x8ce <processHeaterAlerts+0x96>
		else
		{
			// Heater is disabled. If current temperature is higher than reference + some safe interval,
			// there might be a hardware failure - short circuit, etc
			// BEEP like a devil  }:-(
			if (currentTemperature >= (refCapturedTemp + SAFE_TEMP_INTERVAL))
     8b4:	44 96       	adiw	r24, 0x14	; 20
     8b6:	c8 17       	cp	r28, r24
     8b8:	d9 07       	cpc	r29, r25
     8ba:	48 f0       	brcs	.+18     	; 0x8ce <processHeaterAlerts+0x96>
			{
				// Enable beeper output regardless of menu setting
				OverrideSoundDisable();
     8bc:	66 d8       	rcall	.-3892   	; 0xfffff98a <__eeprom_end+0xff7ef980>
				SetBeeperFreq(1500);
     8be:	8c ed       	ldi	r24, 0xDC	; 220
     8c0:	95 e0       	ldi	r25, 0x05	; 5
     8c2:	31 d8       	rcall	.-3998   	; 0xfffff926 <__eeprom_end+0xff7ef91c>
				StartBeep(5000);	
     8c4:	88 e8       	ldi	r24, 0x88	; 136
     8c6:	93 e1       	ldi	r25, 0x13	; 19
			}
		}
	}
	

}
     8c8:	df 91       	pop	r29
     8ca:	cf 91       	pop	r28
			if (currentTemperature >= (refCapturedTemp + SAFE_TEMP_INTERVAL))
			{
				// Enable beeper output regardless of menu setting
				OverrideSoundDisable();
				SetBeeperFreq(1500);
				StartBeep(5000);	
     8cc:	4c c8       	rjmp	.-3944   	; 0xfffff966 <__eeprom_end+0xff7ef95c>
			}
		}
	}
	

}
     8ce:	df 91       	pop	r29
     8d0:	cf 91       	pop	r28
     8d2:	08 95       	ret

000008d4 <restoreGlobalParams>:


void restoreGlobalParams(void)
{
	eeprom_read_block(&p,&eeGlobalParams,sizeof(eeGlobalParams));
     8d4:	44 e0       	ldi	r20, 0x04	; 4
     8d6:	50 e0       	ldi	r21, 0x00	; 0
     8d8:	66 e0       	ldi	r22, 0x06	; 6
     8da:	70 e0       	ldi	r23, 0x00	; 0
     8dc:	88 e7       	ldi	r24, 0x78	; 120
     8de:	91 e0       	ldi	r25, 0x01	; 1
     8e0:	37 d9       	rcall	.-3474   	; 0xfffffb50 <__eeprom_end+0xff7efb46>
	eeprom_read_block(&cp,&eeCalibrationParams,sizeof(eeCalibrationParams));
     8e2:	46 e0       	ldi	r20, 0x06	; 6
     8e4:	50 e0       	ldi	r21, 0x00	; 0
     8e6:	60 e0       	ldi	r22, 0x00	; 0
     8e8:	70 e0       	ldi	r23, 0x00	; 0
     8ea:	82 e7       	ldi	r24, 0x72	; 114
     8ec:	91 e0       	ldi	r25, 0x01	; 1
     8ee:	30 c9       	rjmp	.-3488   	; 0xfffffb50 <__eeprom_end+0xff7efb46>

000008f0 <saveCalibrationToEEPROM>:
}


void saveCalibrationToEEPROM(void)
{
	eeprom_update_block(&cp,&eeCalibrationParams,sizeof(eeCalibrationParams));	
     8f0:	46 e0       	ldi	r20, 0x06	; 6
     8f2:	50 e0       	ldi	r21, 0x00	; 0
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	82 e7       	ldi	r24, 0x72	; 114
     8fa:	91 e0       	ldi	r25, 0x01	; 1
     8fc:	39 c9       	rjmp	.-3470   	; 0xfffffb70 <__eeprom_end+0xff7efb66>

000008fe <exitPowerOff>:

void exitPowerOff(void)
{

	// Put all ports into HI-Z
	DDRB = 0x00;
     8fe:	17 ba       	out	0x17, r1	; 23
	PORTB = 0x00;
     900:	18 ba       	out	0x18, r1	; 24
	DDRC = 0x00;
     902:	14 ba       	out	0x14, r1	; 20
	PORTC = 0x00;
     904:	15 ba       	out	0x15, r1	; 21
	DDRD = 0x00;
     906:	11 ba       	out	0x11, r1	; 17
	PORTD = 0x00;
     908:	12 ba       	out	0x12, r1	; 18
	
	// Disable all interrupts
	cli();
     90a:	f8 94       	cli
	
	// Save parameters to EEPROM
	eeprom_update_block(&p,&eeGlobalParams,sizeof(eeGlobalParams));	
     90c:	44 e0       	ldi	r20, 0x04	; 4
     90e:	50 e0       	ldi	r21, 0x00	; 0
     910:	66 e0       	ldi	r22, 0x06	; 6
     912:	70 e0       	ldi	r23, 0x00	; 0
     914:	88 e7       	ldi	r24, 0x78	; 120
     916:	91 e0       	ldi	r25, 0x01	; 1
     918:	2b d9       	rcall	.-3498   	; 0xfffffb70 <__eeprom_end+0xff7efb66>
     91a:	ff cf       	rjmp	.-2      	; 0x91a <exitPowerOff+0x1c>

0000091c <decode_led_char>:
//---------------------------------------------//
// Decodes normal string literal to the
//	7-segment representation
//---------------------------------------------//
static uint8_t decode_led_char(char c)
{
     91c:	20 e0       	ldi	r18, 0x00	; 0
     91e:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t i;
	encode_7seg_pair encode_pair;
	for (i = 0; i < sizeof(led_encode_table)/sizeof(encode_7seg_pair); i++  )
	{
		encode_pair.code = pgm_read_byte(&led_encode_table[i].code);
     920:	a9 01       	movw	r20, r18
     922:	44 0f       	add	r20, r20
     924:	55 1f       	adc	r21, r21
     926:	fa 01       	movw	r30, r20
     928:	ea 5d       	subi	r30, 0xDA	; 218
     92a:	ff 4f       	sbci	r31, 0xFF	; 255
     92c:	e4 91       	lpm	r30, Z
		if (encode_pair.code == c)
     92e:	e8 13       	cpse	r30, r24
     930:	05 c0       	rjmp	.+10     	; 0x93c <decode_led_char+0x20>
		{
			i = pgm_read_byte(&led_encode_table[i].segdata);
     932:	fa 01       	movw	r30, r20
     934:	e9 5d       	subi	r30, 0xD9	; 217
     936:	ff 4f       	sbci	r31, 0xFF	; 255
     938:	84 91       	lpm	r24, Z
     93a:	08 95       	ret
     93c:	2f 5f       	subi	r18, 0xFF	; 255
     93e:	3f 4f       	sbci	r19, 0xFF	; 255
//---------------------------------------------//
static uint8_t decode_led_char(char c)
{
	uint8_t i;
	encode_7seg_pair encode_pair;
	for (i = 0; i < sizeof(led_encode_table)/sizeof(encode_7seg_pair); i++  )
     940:	2a 31       	cpi	r18, 0x1A	; 26
     942:	31 05       	cpc	r19, r1
     944:	69 f7       	brne	.-38     	; 0x920 <decode_led_char+0x4>
			return i;
		}		
	}			
	// No item was found - return argument value
	return  c;
}
     946:	08 95       	ret

00000948 <wrap_led_buffer_index>:
//---------------------------------------------//
// Ensures that index is inside the buffer
// -128 <= index <= 127
//---------------------------------------------//
static uint8_t wrap_led_buffer_index(int8_t buf_index)
{
     948:	28 2f       	mov	r18, r24
	uint8_t new_index_u;
	new_index_u = (uint8_t) ((buf_index < 0) ? -buf_index : buf_index);
     94a:	87 fd       	sbrc	r24, 7
     94c:	81 95       	neg	r24
	if (new_index_u >= LED_BUFFER_LENGTH)
     94e:	8e 30       	cpi	r24, 0x0E	; 14
     950:	18 f0       	brcs	.+6      	; 0x958 <wrap_led_buffer_index+0x10>
		new_index_u = new_index_u % LED_BUFFER_LENGTH;
     952:	6e e0       	ldi	r22, 0x0E	; 14
     954:	6b d8       	rcall	.-3882   	; 0xfffffa2c <__eeprom_end+0xff7efa22>
     956:	89 2f       	mov	r24, r25
	new_index_u = ((buf_index >= 0) || (new_index_u == 0)) ? new_index_u :  LED_BUFFER_LENGTH - new_index_u ;
     958:	27 ff       	sbrs	r18, 7
     95a:	05 c0       	rjmp	.+10     	; 0x966 <wrap_led_buffer_index+0x1e>
     95c:	88 23       	and	r24, r24
     95e:	19 f0       	breq	.+6      	; 0x966 <wrap_led_buffer_index+0x1e>
     960:	9e e0       	ldi	r25, 0x0E	; 14
     962:	98 1b       	sub	r25, r24
     964:	89 2f       	mov	r24, r25
	return new_index_u;
}
     966:	08 95       	ret

00000968 <processLedIndicator>:
// Call this function N times per sec to get N/NUM_DIGITS_TOTAL display update rate, where
// NUM_DIGITS_TOTAL is number_of_digits_of_LED_display if no extra LEDs are used or
// (number_of_digits_of_LED_display + 1) otherwise.
//---------------------------------------------//
void processLedIndicator()
{
     968:	cf 93       	push	r28
	uint8_t next_wActivePos;
	
	// Turn off segments
	#ifdef CLEAN_OPERATION
	disable_led_segments();
     96a:	3f d1       	rcall	.+638    	; 0xbea <disable_led_segments>
	#endif
	
	
	// Perform regular shift
	led_clock_pulse(!LED_DIGIT_ACT_LVL);
     96c:	81 e0       	ldi	r24, 0x01	; 1
     96e:	11 d1       	rcall	.+546    	; 0xb92 <led_clock_pulse>
	
	switch (wActivePos)
     970:	c0 91 f6 00 	lds	r28, 0x00F6
     974:	cc 23       	and	r28, r28
     976:	19 f0       	breq	.+6      	; 0x97e <processLedIndicator+0x16>
     978:	c6 30       	cpi	r28, 0x06	; 6
     97a:	c1 f5       	brne	.+112    	; 0x9ec <processLedIndicator+0x84>
     97c:	0f c0       	rjmp	.+30     	; 0x99c <processLedIndicator+0x34>
	case 0:
		// Get buttons
		#ifndef CLEAN_OPERATION
		disable_led_segments();
		#endif
		enable_led_segments_pullups();
     97e:	27 d1       	rcall	.+590    	; 0xbce <enable_led_segments_pullups>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     980:	85 e3       	ldi	r24, 0x35	; 53
     982:	8a 95       	dec	r24
     984:	f1 f7       	brne	.-4      	; 0x982 <processLedIndicator+0x1a>
     986:	00 00       	nop
		_delay_us(PULLUP_DELAY_US);
		capture_button_state();
     988:	37 d1       	rcall	.+622    	; 0xbf8 <capture_button_state>
		#ifndef CLEAN_OPERATION
		enable_led_segments();
		#endif
		// Start new cycle with active digit level
		led_clock_pulse(LED_DIGIT_ACT_LVL);
     98a:	80 e0       	ldi	r24, 0x00	; 0
     98c:	02 d1       	rcall	.+516    	; 0xb92 <led_clock_pulse>
		// Always start new cycle from specified buffer start position
		bufActivePos = wStartPos;
     98e:	80 91 92 01 	lds	r24, 0x0192
     992:	80 93 f5 00 	sts	0x00F5, r24
		next_wActivePos = wActivePos + 1;
     996:	c0 91 f6 00 	lds	r28, 0x00F6
     99a:	28 c0       	rjmp	.+80     	; 0x9ec <processLedIndicator+0x84>
//---------------------------------------------//
// Performs window shifting
//---------------------------------------------//
static void processWindowShifter(void)
{
	if (shifterState == LED_SHIFT_DONE)
     99c:	80 91 93 01 	lds	r24, 0x0193
     9a0:	81 11       	cpse	r24, r1
     9a2:	01 c0       	rjmp	.+2      	; 0x9a6 <processLedIndicator+0x3e>
     9a4:	1b c0       	rjmp	.+54     	; 0x9dc <processLedIndicator+0x74>
		return;
	
	// Process shift timer
	processSoftTimer8b(&shiftTimer);	
     9a6:	87 ef       	ldi	r24, 0xF7	; 247
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	27 d7       	rcall	.+3662   	; 0x17fa <processSoftTimer8b>
	
	if (shiftTimer.FTop)
     9ac:	80 91 f7 00 	lds	r24, 0x00F7
     9b0:	85 ff       	sbrs	r24, 5
     9b2:	14 c0       	rjmp	.+40     	; 0x9dc <processLedIndicator+0x74>
	{
		// Check if finished
		if (wStartPos == bufStartPos)	
     9b4:	80 91 92 01 	lds	r24, 0x0192
     9b8:	90 91 94 01 	lds	r25, 0x0194
     9bc:	89 13       	cpse	r24, r25
     9be:	03 c0       	rjmp	.+6      	; 0x9c6 <processLedIndicator+0x5e>
		{
			// Update state
			shifterState = LED_SHIFT_DONE;
     9c0:	10 92 93 01 	sts	0x0193, r1
     9c4:	0b c0       	rjmp	.+22     	; 0x9dc <processLedIndicator+0x74>
		}
		else if (shifterState == LED_SHIFT_RIGHT)
     9c6:	90 91 93 01 	lds	r25, 0x0193
     9ca:	92 30       	cpi	r25, 0x02	; 2
     9cc:	49 f4       	brne	.+18     	; 0x9e0 <processLedIndicator+0x78>
// Increments index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t inc_buffer_position(uint8_t position)
{
	return (position >= LED_BUFFER_LENGTH - 1) ? 0 : position + 1;
     9ce:	8d 30       	cpi	r24, 0x0D	; 13
     9d0:	10 f4       	brcc	.+4      	; 0x9d6 <processLedIndicator+0x6e>
     9d2:	8f 5f       	subi	r24, 0xFF	; 255
     9d4:	01 c0       	rjmp	.+2      	; 0x9d8 <processLedIndicator+0x70>
     9d6:	80 e0       	ldi	r24, 0x00	; 0
			// Update state
			shifterState = LED_SHIFT_DONE;
		}
		else if (shifterState == LED_SHIFT_RIGHT)
		{
			wStartPos = inc_buffer_position(wStartPos);	
     9d8:	80 93 92 01 	sts	0x0192, r24
		// Always start new cycle from specified buffer start position
		bufActivePos = wStartPos;
		next_wActivePos = wActivePos + 1;
		break;
	case NUM_DIGITS_TOTAL-1:
		next_wActivePos = 0;
     9dc:	c0 e0       	ldi	r28, 0x00	; 0
     9de:	07 c0       	rjmp	.+14     	; 0x9ee <processLedIndicator+0x86>
// Decrements index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t dec_buffer_position(uint8_t position)
{
	return (position == 0) ? LED_BUFFER_LENGTH - 1 : position - 1;
     9e0:	88 23       	and	r24, r24
     9e2:	11 f0       	breq	.+4      	; 0x9e8 <processLedIndicator+0x80>
     9e4:	81 50       	subi	r24, 0x01	; 1
     9e6:	f8 cf       	rjmp	.-16     	; 0x9d8 <processLedIndicator+0x70>
     9e8:	8d e0       	ldi	r24, 0x0D	; 13
     9ea:	f6 cf       	rjmp	.-20     	; 0x9d8 <processLedIndicator+0x70>
		next_wActivePos = 0;
		// Shift LED window
		processWindowShifter();	
		break;
	default:
		next_wActivePos = wActivePos + 1;
     9ec:	cf 5f       	subi	r28, 0xFF	; 255
		break;
	}		
	
	#ifdef 	USE_EXTRA_LED_DIGIT
	if (wActivePos == EXTRA_DIGIT_NUM)
     9ee:	80 91 f6 00 	lds	r24, 0x00F6
     9f2:	86 30       	cpi	r24, 0x06	; 6
     9f4:	21 f4       	brne	.+8      	; 0x9fe <processLedIndicator+0x96>
	{
		// Output separate LEDs state
		set_led_segments(extra_led_state);
     9f6:	80 91 91 01 	lds	r24, 0x0191
     9fa:	db d0       	rcall	.+438    	; 0xbb2 <set_led_segments>
     9fc:	10 c0       	rjmp	.+32     	; 0xa1e <processLedIndicator+0xb6>
	}
	else
	#endif
	{
		// Output new segment data
		set_led_segments(led_data_buffer[bufActivePos]);
     9fe:	e0 91 f5 00 	lds	r30, 0x00F5
     a02:	f0 e0       	ldi	r31, 0x00	; 0
     a04:	eb 56       	subi	r30, 0x6B	; 107
     a06:	fe 4f       	sbci	r31, 0xFE	; 254
     a08:	80 81       	ld	r24, Z
     a0a:	d3 d0       	rcall	.+422    	; 0xbb2 <set_led_segments>
		// Wrap around buffer length
		bufActivePos = inc_buffer_position(bufActivePos );
     a0c:	80 91 f5 00 	lds	r24, 0x00F5
// Increments index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t inc_buffer_position(uint8_t position)
{
	return (position >= LED_BUFFER_LENGTH - 1) ? 0 : position + 1;
     a10:	8d 30       	cpi	r24, 0x0D	; 13
     a12:	10 f4       	brcc	.+4      	; 0xa18 <processLedIndicator+0xb0>
     a14:	8f 5f       	subi	r24, 0xFF	; 255
     a16:	01 c0       	rjmp	.+2      	; 0xa1a <processLedIndicator+0xb2>
     a18:	80 e0       	ldi	r24, 0x00	; 0
	#endif
	{
		// Output new segment data
		set_led_segments(led_data_buffer[bufActivePos]);
		// Wrap around buffer length
		bufActivePos = inc_buffer_position(bufActivePos );
     a1a:	80 93 f5 00 	sts	0x00F5, r24
	}
		
	wActivePos = next_wActivePos;
     a1e:	c0 93 f6 00 	sts	0x00F6, r28
	
	#ifdef CLEAN_OPERATION
	enable_led_segments();
	#endif

}
     a22:	cf 91       	pop	r28
	}
		
	wActivePos = next_wActivePos;
	
	#ifdef CLEAN_OPERATION
	enable_led_segments();
     a24:	db c0       	rjmp	.+438    	; 0xbdc <enable_led_segments>

00000a26 <fillLedBuffer>:
//---------------------------------------------//
// Fills buffer from (bufStartPos + offset) 
//	position with single char
//---------------------------------------------//
void fillLedBuffer(int8_t offset, uint8_t length, char c)
{
     a26:	0f 93       	push	r16
     a28:	1f 93       	push	r17
     a2a:	cf 93       	push	r28
     a2c:	df 93       	push	r29
     a2e:	1f 92       	push	r1
     a30:	cd b7       	in	r28, 0x3d	; 61
     a32:	de b7       	in	r29, 0x3e	; 62
     a34:	18 2f       	mov	r17, r24
     a36:	84 2f       	mov	r24, r20
	uint8_t val = decode_led_char(c);
     a38:	69 83       	std	Y+1, r22	; 0x01
     a3a:	70 df       	rcall	.-288    	; 0x91c <decode_led_char>
     a3c:	08 2f       	mov	r16, r24
	// Ensure index is inside the buffer
	uint8_t position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
     a3e:	80 91 94 01 	lds	r24, 0x0194
     a42:	81 0f       	add	r24, r17
     a44:	81 df       	rcall	.-254    	; 0x948 <wrap_led_buffer_index>
	while(length--)
     a46:	69 81       	ldd	r22, Y+1	; 0x01
     a48:	0a c0       	rjmp	.+20     	; 0xa5e <fillLedBuffer+0x38>
	{
		led_data_buffer[position] = val;
     a4a:	e8 2f       	mov	r30, r24
     a4c:	f0 e0       	ldi	r31, 0x00	; 0
     a4e:	eb 56       	subi	r30, 0x6B	; 107
     a50:	fe 4f       	sbci	r31, 0xFE	; 254
     a52:	00 83       	st	Z, r16
// Increments index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t inc_buffer_position(uint8_t position)
{
	return (position >= LED_BUFFER_LENGTH - 1) ? 0 : position + 1;
     a54:	8d 30       	cpi	r24, 0x0D	; 13
     a56:	10 f4       	brcc	.+4      	; 0xa5c <fillLedBuffer+0x36>
     a58:	8f 5f       	subi	r24, 0xFF	; 255
     a5a:	01 c0       	rjmp	.+2      	; 0xa5e <fillLedBuffer+0x38>
     a5c:	80 e0       	ldi	r24, 0x00	; 0
void fillLedBuffer(int8_t offset, uint8_t length, char c)
{
	uint8_t val = decode_led_char(c);
	// Ensure index is inside the buffer
	uint8_t position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
	while(length--)
     a5e:	61 50       	subi	r22, 0x01	; 1
     a60:	a0 f7       	brcc	.-24     	; 0xa4a <fillLedBuffer+0x24>
	{
		led_data_buffer[position] = val;
		position = inc_buffer_position(position);
	}
}
     a62:	0f 90       	pop	r0
     a64:	df 91       	pop	r29
     a66:	cf 91       	pop	r28
     a68:	1f 91       	pop	r17
     a6a:	0f 91       	pop	r16
     a6c:	08 95       	ret

00000a6e <startShiftingWindowLeft>:
//	LED window left 
//---------------------------------------------//
void startShiftingWindowLeft(void)
{
	// Clear spaces between menu states
	fillLedBuffer(-2,2,' ');
     a6e:	40 e2       	ldi	r20, 0x20	; 32
     a70:	62 e0       	ldi	r22, 0x02	; 2
     a72:	8e ef       	ldi	r24, 0xFE	; 254
     a74:	d8 df       	rcall	.-80     	; 0xa26 <fillLedBuffer>
	// Set new buffer position for writing
	bufStartPos = wrap_led_buffer_index( (int8_t)bufStartPos - (NUM_DIGITS + 2) );
     a76:	80 91 94 01 	lds	r24, 0x0194
     a7a:	88 50       	subi	r24, 0x08	; 8
     a7c:	65 df       	rcall	.-310    	; 0x948 <wrap_led_buffer_index>
     a7e:	80 93 94 01 	sts	0x0194, r24
	// Set shifter state
	shifterState = LED_SHIFT_LEFT;
     a82:	81 e0       	ldi	r24, 0x01	; 1
     a84:	80 93 93 01 	sts	0x0193, r24
     a88:	08 95       	ret

00000a8a <startShiftingWindowRight>:
//	LED window right 
//---------------------------------------------//
void startShiftingWindowRight(void)
{
	// Clear spaces between menu states
	fillLedBuffer(NUM_DIGITS,2,' ');
     a8a:	40 e2       	ldi	r20, 0x20	; 32
     a8c:	62 e0       	ldi	r22, 0x02	; 2
     a8e:	86 e0       	ldi	r24, 0x06	; 6
     a90:	ca df       	rcall	.-108    	; 0xa26 <fillLedBuffer>
	// Set new buffer position for writing
	bufStartPos = wrap_led_buffer_index( (int8_t)bufStartPos + NUM_DIGITS + 2 );
     a92:	80 91 94 01 	lds	r24, 0x0194
     a96:	88 5f       	subi	r24, 0xF8	; 248
     a98:	57 df       	rcall	.-338    	; 0x948 <wrap_led_buffer_index>
     a9a:	80 93 94 01 	sts	0x0194, r24
	// Set shifter state
	shifterState = LED_SHIFT_RIGHT;
     a9e:	82 e0       	ldi	r24, 0x02	; 2
     aa0:	80 93 93 01 	sts	0x0193, r24
     aa4:	08 95       	ret

00000aa6 <initLedIndicator>:
//---------------------------------------------//
//	Initialization
//	Call this function at start of your program
//---------------------------------------------//
void initLedIndicator()
{
     aa6:	cf 93       	push	r28
	uint8_t i;
	// First disable outputs
	disable_led_segments();
     aa8:	a0 d0       	rcall	.+320    	; 0xbea <disable_led_segments>
     aaa:	c7 e0       	ldi	r28, 0x07	; 7
	// Fill shift register with non-active levels
	for (i=0;i<NUM_DIGITS_TOTAL;i++)
	{
		led_clock_pulse(!LED_DIGIT_ACT_LVL);
     aac:	81 e0       	ldi	r24, 0x01	; 1
     aae:	71 d0       	rcall	.+226    	; 0xb92 <led_clock_pulse>
     ab0:	c1 50       	subi	r28, 0x01	; 1
{
	uint8_t i;
	// First disable outputs
	disable_led_segments();
	// Fill shift register with non-active levels
	for (i=0;i<NUM_DIGITS_TOTAL;i++)
     ab2:	e1 f7       	brne	.-8      	; 0xaac <initLedIndicator+0x6>
	{
		led_clock_pulse(!LED_DIGIT_ACT_LVL);
	}
	// Now enable outputs
	enable_led_segments();
     ab4:	93 d0       	rcall	.+294    	; 0xbdc <enable_led_segments>
	
	// Reset pointers
	wStartPos = 0;
     ab6:	10 92 92 01 	sts	0x0192, r1
	bufStartPos = 0;
     aba:	10 92 94 01 	sts	0x0194, r1
	bufActivePos = 0;
     abe:	10 92 f5 00 	sts	0x00F5, r1
	wActivePos = 0;
     ac2:	10 92 f6 00 	sts	0x00F6, r1
	#ifdef 	USE_EXTRA_LED_DIGIT
	extra_led_state = 0;
     ac6:	10 92 91 01 	sts	0x0191, r1
	#endif
	
	// Clear the buffer 
	fillLedBuffer(0,LED_BUFFER_LENGTH,' ');
     aca:	40 e2       	ldi	r20, 0x20	; 32
     acc:	6e e0       	ldi	r22, 0x0E	; 14
     ace:	80 e0       	ldi	r24, 0x00	; 0
     ad0:	aa df       	rcall	.-172    	; 0xa26 <fillLedBuffer>
	
	// Initialize shift timer - always enabled, but 
	//	processed only when shifting is active
	shifterState = LED_SHIFT_DONE;
     ad2:	10 92 93 01 	sts	0x0193, r1
	shiftTimer.Enabled = 1;
     ad6:	80 91 f7 00 	lds	r24, 0x00F7
	shiftTimer.RunOnce = 0;
     ada:	81 60       	ori	r24, 0x01	; 1
     adc:	8d 7f       	andi	r24, 0xFD	; 253
     ade:	80 93 f7 00 	sts	0x00F7, r24
	shiftTimer.Top = LED_SHIFT_INTERVAL-1;
     ae2:	89 e0       	ldi	r24, 0x09	; 9
     ae4:	80 93 f9 00 	sts	0x00F9, r24
}
     ae8:	cf 91       	pop	r28
     aea:	08 95       	ret

00000aec <printLedBuffer>:
//		str - null-terminated char string
// Comma and dot (".", ",") get special processing - first occurrence is added to
// a preceding char, next are displayed as a single digit
//---------------------------------------------//
void printLedBuffer(int8_t offset, char* str)
{
     aec:	ff 92       	push	r15
     aee:	0f 93       	push	r16
     af0:	1f 93       	push	r17
     af2:	cf 93       	push	r28
     af4:	df 93       	push	r29
     af6:	eb 01       	movw	r28, r22
	char c;
	uint8_t decoded_sym;
	uint8_t state = 0x02;
	uint8_t comma_pos;
	// Ensure index is inside the buffer
	uint8_t buffer_position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
     af8:	90 91 94 01 	lds	r25, 0x0194
     afc:	89 0f       	add	r24, r25
     afe:	24 df       	rcall	.-440    	; 0x948 <wrap_led_buffer_index>
     b00:	18 2f       	mov	r17, r24
	comma_pos = buffer_position;
     b02:	f8 2e       	mov	r15, r24
//---------------------------------------------//
void printLedBuffer(int8_t offset, char* str)
{
	char c;
	uint8_t decoded_sym;
	uint8_t state = 0x02;
     b04:	02 e0       	ldi	r16, 0x02	; 2
	uint8_t comma_pos;
	// Ensure index is inside the buffer
	uint8_t buffer_position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
	comma_pos = buffer_position;
	// Output chars
	while((c = *str++))
     b06:	23 c0       	rjmp	.+70     	; 0xb4e <printLedBuffer+0x62>
	{
		decoded_sym = decode_led_char(c);
     b08:	09 df       	rcall	.-494    	; 0x91c <decode_led_char>
		state = (decoded_sym == SEGH) ? (state | 0x01) : (state & ~0x01);
     b0a:	80 38       	cpi	r24, 0x80	; 128
     b0c:	11 f4       	brne	.+4      	; 0xb12 <printLedBuffer+0x26>
     b0e:	01 60       	ori	r16, 0x01	; 1
     b10:	01 c0       	rjmp	.+2      	; 0xb14 <printLedBuffer+0x28>
     b12:	0e 7f       	andi	r16, 0xFE	; 254
		if (state == 0x01)			
     b14:	01 30       	cpi	r16, 0x01	; 1
     b16:	49 f4       	brne	.+18     	; 0xb2a <printLedBuffer+0x3e>
		{
			led_data_buffer[comma_pos] |= decoded_sym;
     b18:	ef 2d       	mov	r30, r15
     b1a:	f0 e0       	ldi	r31, 0x00	; 0
     b1c:	eb 56       	subi	r30, 0x6B	; 107
     b1e:	fe 4f       	sbci	r31, 0xFE	; 254
     b20:	90 81       	ld	r25, Z
     b22:	98 2b       	or	r25, r24
     b24:	90 83       	st	Z, r25
     b26:	81 2f       	mov	r24, r17
     b28:	0b c0       	rjmp	.+22     	; 0xb40 <printLedBuffer+0x54>
		}
		else
		{
			led_data_buffer[buffer_position] = decoded_sym;	
     b2a:	e1 2f       	mov	r30, r17
     b2c:	f0 e0       	ldi	r31, 0x00	; 0
     b2e:	eb 56       	subi	r30, 0x6B	; 107
     b30:	fe 4f       	sbci	r31, 0xFE	; 254
     b32:	80 83       	st	Z, r24
// Increments index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t inc_buffer_position(uint8_t position)
{
	return (position >= LED_BUFFER_LENGTH - 1) ? 0 : position + 1;
     b34:	1d 30       	cpi	r17, 0x0D	; 13
     b36:	18 f4       	brcc	.+6      	; 0xb3e <printLedBuffer+0x52>
     b38:	81 2f       	mov	r24, r17
     b3a:	8f 5f       	subi	r24, 0xFF	; 255
     b3c:	01 c0       	rjmp	.+2      	; 0xb40 <printLedBuffer+0x54>
     b3e:	80 e0       	ldi	r24, 0x00	; 0
		comma_pos = buffer_position;
		if (state != 0x01)
		{
			buffer_position = inc_buffer_position(buffer_position);
		}
		state = (state & 0x01) ? 0x03 : 0x00;		
     b40:	00 ff       	sbrs	r16, 0
     b42:	02 c0       	rjmp	.+4      	; 0xb48 <printLedBuffer+0x5c>
     b44:	03 e0       	ldi	r16, 0x03	; 3
     b46:	01 c0       	rjmp	.+2      	; 0xb4a <printLedBuffer+0x5e>
     b48:	00 e0       	ldi	r16, 0x00	; 0
     b4a:	f1 2e       	mov	r15, r17
     b4c:	18 2f       	mov	r17, r24
	uint8_t comma_pos;
	// Ensure index is inside the buffer
	uint8_t buffer_position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
	comma_pos = buffer_position;
	// Output chars
	while((c = *str++))
     b4e:	89 91       	ld	r24, Y+
     b50:	81 11       	cpse	r24, r1
     b52:	da cf       	rjmp	.-76     	; 0xb08 <printLedBuffer+0x1c>
		{
			buffer_position = inc_buffer_position(buffer_position);
		}
		state = (state & 0x01) ? 0x03 : 0x00;		
	}
}
     b54:	df 91       	pop	r29
     b56:	cf 91       	pop	r28
     b58:	1f 91       	pop	r17
     b5a:	0f 91       	pop	r16
     b5c:	ff 90       	pop	r15
     b5e:	08 95       	ret

00000b60 <setComma>:
//	buffer cell
//---------------------------------------------//
void setComma(int8_t offset)
{
	// Ensure index is inside the buffer
	uint8_t position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
     b60:	90 91 94 01 	lds	r25, 0x0194
     b64:	89 0f       	add	r24, r25
     b66:	f0 de       	rcall	.-544    	; 0x948 <wrap_led_buffer_index>
	led_data_buffer[position] |= (SEGH);
     b68:	e8 2f       	mov	r30, r24
     b6a:	f0 e0       	ldi	r31, 0x00	; 0
     b6c:	eb 56       	subi	r30, 0x6B	; 107
     b6e:	fe 4f       	sbci	r31, 0xFE	; 254
     b70:	80 81       	ld	r24, Z
     b72:	80 68       	ori	r24, 0x80	; 128
     b74:	80 83       	st	Z, r24
     b76:	08 95       	ret

00000b78 <setExtraLeds>:
// Argument is ORed with current LED state
//---------------------------------------------//
inline void setExtraLeds(uint8_t leds_set_value)
{
		//asm("cli");
		extra_led_state |= leds_set_value;
     b78:	90 91 91 01 	lds	r25, 0x0191
     b7c:	98 2b       	or	r25, r24
     b7e:	90 93 91 01 	sts	0x0191, r25
     b82:	08 95       	ret

00000b84 <clearExtraLeds>:
// Argument is AND NOTed with current LED state
//---------------------------------------------//
inline void clearExtraLeds(uint8_t leds_clear_value)
{
		//asm("cli");
		extra_led_state &= ~leds_clear_value;
     b84:	90 91 91 01 	lds	r25, 0x0191
     b88:	80 95       	com	r24
     b8a:	89 23       	and	r24, r25
     b8c:	80 93 91 01 	sts	0x0191, r24
     b90:	08 95       	ret

00000b92 <led_clock_pulse>:


// Clocks in bit into the shift register
void led_clock_pulse(uint8_t bit)
{
	if (bit)
     b92:	88 23       	and	r24, r24
     b94:	11 f0       	breq	.+4      	; 0xb9a <led_clock_pulse+0x8>
		PORTB |= (1<<PB_LED_DOUT);
     b96:	c0 9a       	sbi	0x18, 0	; 24
     b98:	01 c0       	rjmp	.+2      	; 0xb9c <led_clock_pulse+0xa>
	else
		PORTB &= ~(1<<PB_LED_DOUT);
     b9a:	c0 98       	cbi	0x18, 0	; 24
     b9c:	8a e1       	ldi	r24, 0x1A	; 26
     b9e:	8a 95       	dec	r24
     ba0:	f1 f7       	brne	.-4      	; 0xb9e <led_clock_pulse+0xc>
     ba2:	00 c0       	rjmp	.+0      	; 0xba4 <led_clock_pulse+0x12>
	_delay_us(SETUP_DELAY_US);
	PORTB |= (1<<PB_LED_CLK);
     ba4:	c2 9a       	sbi	0x18, 2	; 24
     ba6:	8a e1       	ldi	r24, 0x1A	; 26
     ba8:	8a 95       	dec	r24
     baa:	f1 f7       	brne	.-4      	; 0xba8 <led_clock_pulse+0x16>
     bac:	00 c0       	rjmp	.+0      	; 0xbae <led_clock_pulse+0x1c>
	_delay_us(SHIFT_DELAY_US);
	PORTB &= ~(1<<PB_LED_CLK);
     bae:	c2 98       	cbi	0x18, 2	; 24
     bb0:	08 95       	ret

00000bb2 <set_led_segments>:
// Outputs decoded segment data to port bits
void set_led_segments(uint8_t seg_ch)
{
	uint8_t pdat;
	seg_ch ^= LED_SEGMENT_MASK;
	pdat = PORTC & ~( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
     bb2:	25 b3       	in	r18, 0x15	; 21
	pdat |= (seg_ch & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
     bb4:	98 2f       	mov	r25, r24
     bb6:	9f 71       	andi	r25, 0x1F	; 31
// Outputs decoded segment data to port bits
void set_led_segments(uint8_t seg_ch)
{
	uint8_t pdat;
	seg_ch ^= LED_SEGMENT_MASK;
	pdat = PORTC & ~( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
     bb8:	20 7e       	andi	r18, 0xE0	; 224
	pdat |= (seg_ch & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
     bba:	92 2b       	or	r25, r18
	PORTC = pdat;
     bbc:	95 bb       	out	0x15, r25	; 21
	seg_ch >>= 2;
	pdat = PORTB & ~( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     bbe:	98 b3       	in	r25, 0x18	; 24
	uint8_t pdat;
	seg_ch ^= LED_SEGMENT_MASK;
	pdat = PORTC & ~( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
	pdat |= (seg_ch & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
	PORTC = pdat;
	seg_ch >>= 2;
     bc0:	86 95       	lsr	r24
     bc2:	86 95       	lsr	r24
	pdat = PORTB & ~( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
	pdat |= (seg_ch & ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) ));
     bc4:	88 73       	andi	r24, 0x38	; 56
	seg_ch ^= LED_SEGMENT_MASK;
	pdat = PORTC & ~( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
	pdat |= (seg_ch & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
	PORTC = pdat;
	seg_ch >>= 2;
	pdat = PORTB & ~( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     bc6:	97 7c       	andi	r25, 0xC7	; 199
	pdat |= (seg_ch & ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) ));
     bc8:	89 2b       	or	r24, r25
	PORTB = pdat;
     bca:	88 bb       	out	0x18, r24	; 24
     bcc:	08 95       	ret

00000bce <enable_led_segments_pullups>:

// Turns segment port bits to HI-Z and
// enables pull-ups
void enable_led_segments_pullups()
{
	PORTC |= ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
     bce:	85 b3       	in	r24, 0x15	; 21
     bd0:	8f 61       	ori	r24, 0x1F	; 31
     bd2:	85 bb       	out	0x15, r24	; 21
	PORTB |= ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     bd4:	88 b3       	in	r24, 0x18	; 24
     bd6:	88 63       	ori	r24, 0x38	; 56
     bd8:	88 bb       	out	0x18, r24	; 24
     bda:	08 95       	ret

00000bdc <enable_led_segments>:
}	

void enable_led_segments()
{
	DDRC |= ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
     bdc:	84 b3       	in	r24, 0x14	; 20
     bde:	8f 61       	ori	r24, 0x1F	; 31
     be0:	84 bb       	out	0x14, r24	; 20
	DDRB |= ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     be2:	87 b3       	in	r24, 0x17	; 23
     be4:	88 63       	ori	r24, 0x38	; 56
     be6:	87 bb       	out	0x17, r24	; 23
     be8:	08 95       	ret

00000bea <disable_led_segments>:
}

void disable_led_segments()
{
	DDRC &= ~( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
     bea:	84 b3       	in	r24, 0x14	; 20
     bec:	80 7e       	andi	r24, 0xE0	; 224
     bee:	84 bb       	out	0x14, r24	; 20
	DDRB &= ~( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     bf0:	87 b3       	in	r24, 0x17	; 23
     bf2:	87 7c       	andi	r24, 0xC7	; 199
     bf4:	87 bb       	out	0x17, r24	; 23
     bf6:	08 95       	ret

00000bf8 <capture_button_state>:


void capture_button_state()
{
	uint8_t pdat;
	pdat = PINB  & ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     bf8:	86 b3       	in	r24, 0x16	; 22
     bfa:	88 73       	andi	r24, 0x38	; 56
	pdat <<= 2;
	pdat |= (PINC & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
     bfc:	93 b3       	in	r25, 0x13	; 19

void capture_button_state()
{
	uint8_t pdat;
	pdat = PINB  & ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
	pdat <<= 2;
     bfe:	88 0f       	add	r24, r24
     c00:	88 0f       	add	r24, r24
	pdat |= (PINC & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
     c02:	9f 71       	andi	r25, 0x1F	; 31
     c04:	89 2b       	or	r24, r25
	raw_button_state = pdat ^ RAW_BUTTONS_INVERSE_MASK;
     c06:	80 95       	com	r24
     c08:	80 93 a3 01 	sts	0x01A3, r24
     c0c:	08 95       	ret

00000c0e <processItemFunction>:
//	Arguments:
//		funcAddr - address of the function to run.
//-----------------------------------------------------------------//
static inline void processItemFunction(FuncPtr funcAddr)
{
	if (funcAddr != 0)
     c0e:	00 97       	sbiw	r24, 0x00	; 0
     c10:	11 f0       	breq	.+4      	; 0xc16 <processItemFunction+0x8>
		((FuncPtr)funcAddr)();
     c12:	fc 01       	movw	r30, r24
     c14:	09 94       	ijmp
     c16:	08 95       	ret

00000c18 <mf_setTempLeave>:
		clearExtraLeds(LED_TEMP);
}

void mf_setTempLeave(void)
{
	userTimer.Enabled = 0;
     c18:	e5 e0       	ldi	r30, 0x05	; 5
     c1a:	f1 e0       	ldi	r31, 0x01	; 1
     c1c:	80 81       	ld	r24, Z
     c1e:	8e 7f       	andi	r24, 0xFE	; 254
     c20:	80 83       	st	Z, r24
     c22:	08 95       	ret

00000c24 <mf_leafSelectAct>:
	userTimer.FA_GE = 1;	
}

void mf_leafSelectAct(void)
{
	userTimer.Timer = 0;
     c24:	10 92 06 01 	sts	0x0106, r1
	userTimer.Top = BLINK_PERIOD - 1;
     c28:	87 e0       	ldi	r24, 0x07	; 7
     c2a:	80 93 07 01 	sts	0x0107, r24
	userTimer.CompA = BLINK_PERIOD / 2;
     c2e:	84 e0       	ldi	r24, 0x04	; 4
     c30:	80 93 08 01 	sts	0x0108, r24
	userTimer.Enabled = 1;
     c34:	e5 e0       	ldi	r30, 0x05	; 5
     c36:	f1 e0       	ldi	r31, 0x01	; 1
     c38:	80 81       	ld	r24, Z
     c3a:	81 60       	ori	r24, 0x01	; 1
     c3c:	80 83       	st	Z, r24
     c3e:	08 95       	ret

00000c40 <mf_leafExit>:
}

void mf_leafExit(void)
{
	userTimer.Enabled = 0;	
     c40:	e5 e0       	ldi	r30, 0x05	; 5
     c42:	f1 e0       	ldi	r31, 0x01	; 1
     c44:	80 81       	ld	r24, Z
     c46:	8e 7f       	andi	r24, 0xFE	; 254
     c48:	80 83       	st	Z, r24
     c4a:	08 95       	ret

00000c4c <mf_actpoffLeave>:
	printLedBuffer(0,"   OFF");
}

void mf_actpoffLeave(void)
{
	autoPowerOffState = 0;	
     c4c:	10 92 ee 00 	sts	0x00EE, r1
     c50:	08 95       	ret

00000c52 <mf_calibDoExit>:
	userTimer.Enabled = 1;
}

void mf_leafExit(void)
{
	userTimer.Enabled = 0;	
     c52:	e5 e0       	ldi	r30, 0x05	; 5
     c54:	f1 e0       	ldi	r31, 0x01	; 1
     c56:	80 81       	ld	r24, Z
     c58:	8e 7f       	andi	r24, 0xFE	; 254
     c5a:	80 83       	st	Z, r24


void mf_calibDoExit(void)
{
	mf_leafExit();
	heaterState &= ~CALIBRATION_ACTIVE;
     c5c:	80 91 ef 00 	lds	r24, 0x00EF
     c60:	8d 7f       	andi	r24, 0xFD	; 253
     c62:	80 93 ef 00 	sts	0x00EF, r24
     c66:	08 95       	ret

00000c68 <mf_actpoffDo>:
}

// Indication of power off mode
void mf_actpoffDo(void)
{
	printLedBuffer(0,"   OFF");
     c68:	68 eb       	ldi	r22, 0xB8	; 184
     c6a:	70 e0       	ldi	r23, 0x00	; 0
     c6c:	80 e0       	ldi	r24, 0x00	; 0
     c6e:	3e cf       	rjmp	.-388    	; 0xaec <printLedBuffer>

00000c70 <mf_cdoneDo>:
}


void mf_cdoneDo(void)
{
	printLedBuffer(0," DONE ");
     c70:	6f eb       	ldi	r22, 0xBF	; 191
     c72:	70 e0       	ldi	r23, 0x00	; 0
     c74:	80 e0       	ldi	r24, 0x00	; 0
     c76:	3a cf       	rjmp	.-396    	; 0xaec <printLedBuffer>

00000c78 <mf_actpoffSelect>:



void mf_actpoffSelect(void)
{
	clearExtraLeds(LED_TEMP | LED_ROLL);
     c78:	80 ec       	ldi	r24, 0xC0	; 192
     c7a:	84 df       	rcall	.-248    	; 0xb84 <clearExtraLeds>
	autoPowerOffState = AUTO_POFF_ACTIVE;
     c7c:	81 e0       	ldi	r24, 0x01	; 1
     c7e:	80 93 ee 00 	sts	0x00EE, r24
     c82:	08 95       	ret

00000c84 <mf_leafSelect>:

// Select and exit functions, common for leaf menu items 

void mf_leafSelect(void)
{
	clearExtraLeds(LED_TEMP | LED_ROLL);
     c84:	80 ec       	ldi	r24, 0xC0	; 192
     c86:	7e df       	rcall	.-260    	; 0xb84 <clearExtraLeds>
	userTimer.FA_GE = 1;	
     c88:	e5 e0       	ldi	r30, 0x05	; 5
     c8a:	f1 e0       	ldi	r31, 0x01	; 1
     c8c:	80 81       	ld	r24, Z
     c8e:	80 61       	ori	r24, 0x10	; 16
     c90:	80 83       	st	Z, r24
     c92:	08 95       	ret

00000c94 <mf_calibP2Select>:
	printLedBuffer(0,"P1    ");
}

void mf_calibP2Select(void)
{
	mf_leafSelect();
     c94:	f7 df       	rcall	.-18     	; 0xc84 <mf_leafSelect>
	cpoint_user_val = cp.cpoint2;	// determine which point to use at select func
     c96:	80 91 73 01 	lds	r24, 0x0173
     c9a:	80 93 03 01 	sts	0x0103, r24
	cpointNum = 2;
     c9e:	82 e0       	ldi	r24, 0x02	; 2
     ca0:	80 93 04 01 	sts	0x0104, r24
	printLedBuffer(0,"P2    ");
     ca4:	66 ec       	ldi	r22, 0xC6	; 198
     ca6:	70 e0       	ldi	r23, 0x00	; 0
     ca8:	80 e0       	ldi	r24, 0x00	; 0
     caa:	20 cf       	rjmp	.-448    	; 0xaec <printLedBuffer>

00000cac <mf_calibP1Select>:
//---------------------------------------------//


void mf_calibP1Select(void)
{
	mf_leafSelect();
     cac:	eb df       	rcall	.-42     	; 0xc84 <mf_leafSelect>
	cpoint_user_val = cp.cpoint1;	// determine which point to use at select func
     cae:	80 91 72 01 	lds	r24, 0x0172
     cb2:	80 93 03 01 	sts	0x0103, r24
	cpointNum = 1;
     cb6:	81 e0       	ldi	r24, 0x01	; 1
     cb8:	80 93 04 01 	sts	0x0104, r24
	printLedBuffer(0,"P1    ");
     cbc:	6d ec       	ldi	r22, 0xCD	; 205
     cbe:	70 e0       	ldi	r23, 0x00	; 0
     cc0:	80 e0       	ldi	r24, 0x00	; 0
     cc2:	14 cf       	rjmp	.-472    	; 0xaec <printLedBuffer>

00000cc4 <mf_rollLeave>:
	printLedBuffer(0,str);
}

void mf_rollLeave(void)
{
	clearExtraLeds(LED_ROLL);
     cc4:	80 e4       	ldi	r24, 0x40	; 64
     cc6:	5e df       	rcall	.-324    	; 0xb84 <clearExtraLeds>
	userTimer.Enabled = 0;
     cc8:	e5 e0       	ldi	r30, 0x05	; 5
     cca:	f1 e0       	ldi	r31, 0x01	; 1
     ccc:	80 81       	ld	r24, Z
     cce:	8e 7f       	andi	r24, 0xFE	; 254
     cd0:	80 83       	st	Z, r24
     cd2:	08 95       	ret

00000cd4 <mf_setTempSelect>:
//---------------------------------------------//


void mf_setTempSelect(void)
{
	clearExtraLeds(LED_TEMP);
     cd4:	80 e8       	ldi	r24, 0x80	; 128
     cd6:	56 df       	rcall	.-340    	; 0xb84 <clearExtraLeds>
	mf_leafSelectAct();		// setup and start timer
     cd8:	a5 cf       	rjmp	.-182    	; 0xc24 <mf_leafSelectAct>

00000cda <mf_realTempLeave>:
	printLedBuffer(0,str);
}

void mf_realTempLeave(void)
{
	clearExtraLeds(LED_TEMP);
     cda:	80 e8       	ldi	r24, 0x80	; 128
     cdc:	53 cf       	rjmp	.-346    	; 0xb84 <clearExtraLeds>

00000cde <mf_cdoneSelect>:

//---------------------------------------------//

void mf_cdoneSelect(void)
{
	applyCalibrationPoint(cpointNum,cpoint_user_val);
     cde:	20 91 03 01 	lds	r18, 0x0103
}


void applyCalibrationPoint(uint8_t cpointNum, uint8_t cpointVal)
{
	if (cpointNum == 1)
     ce2:	30 91 04 01 	lds	r19, 0x0104
     ce6:	80 91 45 01 	lds	r24, 0x0145
     cea:	90 91 46 01 	lds	r25, 0x0146
     cee:	31 30       	cpi	r19, 0x01	; 1
     cf0:	39 f4       	brne	.+14     	; 0xd00 <mf_cdoneSelect+0x22>
	{
		cp.cpoint1_adc = adc_normalized;
     cf2:	90 93 75 01 	sts	0x0175, r25
     cf6:	80 93 74 01 	sts	0x0174, r24
		cp.cpoint1 = cpointVal;
     cfa:	20 93 72 01 	sts	0x0172, r18
     cfe:	06 c0       	rjmp	.+12     	; 0xd0c <mf_cdoneSelect+0x2e>
	}
	else
	{
		cp.cpoint2_adc = adc_normalized;
     d00:	90 93 77 01 	sts	0x0177, r25
     d04:	80 93 76 01 	sts	0x0176, r24
		cp.cpoint2 = cpointVal;
     d08:	20 93 73 01 	sts	0x0173, r18
	}
	calculateCoeffs();
     d0c:	85 da       	rcall	.-2806   	; 0x218 <calculateCoeffs>
	saveCalibrationToEEPROM();
     d0e:	f0 cd       	rjmp	.-1056   	; 0x8f0 <saveCalibrationToEEPROM>

00000d10 <mf_autopoffDo>:

//---------------------------------------------//


void mf_autopoffDo(void)
{
     d10:	cf 93       	push	r28
     d12:	df 93       	push	r29
     d14:	cd b7       	in	r28, 0x3d	; 61
     d16:	de b7       	in	r29, 0x3e	; 62
     d18:	27 97       	sbiw	r28, 0x07	; 7
     d1a:	0f b6       	in	r0, 0x3f	; 63
     d1c:	f8 94       	cli
     d1e:	de bf       	out	0x3e, r29	; 62
     d20:	0f be       	out	0x3f, r0	; 63
     d22:	cd bf       	out	0x3d, r28	; 61
	char str[] = {'O','F','F',' ',' ',' ',0};
     d24:	87 e0       	ldi	r24, 0x07	; 7
     d26:	ec e9       	ldi	r30, 0x9C	; 156
     d28:	f0 e0       	ldi	r31, 0x00	; 0
     d2a:	de 01       	movw	r26, r28
     d2c:	11 96       	adiw	r26, 0x01	; 1
     d2e:	01 90       	ld	r0, Z+
     d30:	0d 92       	st	X+, r0
     d32:	8a 95       	dec	r24
     d34:	e1 f7       	brne	.-8      	; 0xd2e <mf_autopoffDo+0x1e>
	//char str[7];
	//read_progmem_string(str_off,str,7);
		
		
	if (button_state & (BD_UP | BR_UP))
     d36:	80 91 ea 00 	lds	r24, 0x00EA
     d3a:	90 91 eb 00 	lds	r25, 0x00EB
     d3e:	9c 01       	movw	r18, r24
     d40:	20 74       	andi	r18, 0x40	; 64
     d42:	34 70       	andi	r19, 0x04	; 4
     d44:	23 2b       	or	r18, r19
     d46:	31 f0       	breq	.+12     	; 0xd54 <mf_autopoffDo+0x44>
	{
		if (p.power_off_timeout < MAX_POWEROFF_TIMEOUT)
     d48:	80 91 7b 01 	lds	r24, 0x017B
     d4c:	8f 35       	cpi	r24, 0x5F	; 95
     d4e:	68 f4       	brcc	.+26     	; 0xd6a <mf_autopoffDo+0x5a>
			p.power_off_timeout += 5;
     d50:	8b 5f       	subi	r24, 0xFB	; 251
     d52:	09 c0       	rjmp	.+18     	; 0xd66 <mf_autopoffDo+0x56>
		restartMenuTimer();
	}
	else if (button_state & (BD_DOWN | BR_DOWN))
     d54:	80 78       	andi	r24, 0x80	; 128
     d56:	98 70       	andi	r25, 0x08	; 8
     d58:	89 2b       	or	r24, r25
     d5a:	49 f0       	breq	.+18     	; 0xd6e <mf_autopoffDo+0x5e>
	{
		if (p.power_off_timeout > MIN_POWEROFF_TIMEOUT)
     d5c:	80 91 7b 01 	lds	r24, 0x017B
     d60:	86 30       	cpi	r24, 0x06	; 6
     d62:	18 f0       	brcs	.+6      	; 0xd6a <mf_autopoffDo+0x5a>
			p.power_off_timeout -= 5;
     d64:	85 50       	subi	r24, 0x05	; 5
     d66:	80 93 7b 01 	sts	0x017B, r24
//	 Restarts menu state timeout
//	Should be used in RUN function when control buttons are pressed.
//-----------------------------------------------------------------//
static void restartMenuTimer(void)
{
	menuTimer.Timer = 0;
     d6a:	10 92 8c 00 	sts	0x008C, r1
		if (p.power_off_timeout > MIN_POWEROFF_TIMEOUT)
			p.power_off_timeout -= 5;
		restartMenuTimer();
	}	
		
	if (userTimer.FA_GE)
     d6e:	80 91 05 01 	lds	r24, 0x0105
     d72:	84 ff       	sbrs	r24, 4
     d74:	10 c0       	rjmp	.+32     	; 0xd96 <mf_autopoffDo+0x86>
	{
		if (p.power_off_timeout != MAX_POWEROFF_TIMEOUT)
     d76:	80 91 7b 01 	lds	r24, 0x017B
     d7a:	8f 35       	cpi	r24, 0x5F	; 95
     d7c:	41 f0       	breq	.+16     	; 0xd8e <mf_autopoffDo+0x7e>
			u16toa_align_right(p.power_off_timeout,str + 4,0x80 | 2,' ');	
     d7e:	20 e2       	ldi	r18, 0x20	; 32
     d80:	42 e8       	ldi	r20, 0x82	; 130
     d82:	be 01       	movw	r22, r28
     d84:	6b 5f       	subi	r22, 0xFB	; 251
     d86:	7f 4f       	sbci	r23, 0xFF	; 255
     d88:	90 e0       	ldi	r25, 0x00	; 0
     d8a:	33 d2       	rcall	.+1126   	; 0x11f2 <u16toa_align_right>
     d8c:	04 c0       	rjmp	.+8      	; 0xd96 <mf_autopoffDo+0x86>
		else 
		{
			str[4] = 'N';
     d8e:	8e e4       	ldi	r24, 0x4E	; 78
     d90:	8d 83       	std	Y+5, r24	; 0x05
			str[5] = 'O';
     d92:	8f e4       	ldi	r24, 0x4F	; 79
     d94:	8e 83       	std	Y+6, r24	; 0x06
		}			
	}		
		
	printLedBuffer(0,str);
     d96:	be 01       	movw	r22, r28
     d98:	6f 5f       	subi	r22, 0xFF	; 255
     d9a:	7f 4f       	sbci	r23, 0xFF	; 255
     d9c:	80 e0       	ldi	r24, 0x00	; 0
     d9e:	a6 de       	rcall	.-692    	; 0xaec <printLedBuffer>
}
     da0:	27 96       	adiw	r28, 0x07	; 7
     da2:	0f b6       	in	r0, 0x3f	; 63
     da4:	f8 94       	cli
     da6:	de bf       	out	0x3e, r29	; 62
     da8:	0f be       	out	0x3f, r0	; 63
     daa:	cd bf       	out	0x3d, r28	; 61
     dac:	df 91       	pop	r29
     dae:	cf 91       	pop	r28
     db0:	08 95       	ret

00000db2 <mf_realTempDo>:
{
	setExtraLeds(LED_TEMP);
}

void mf_realTempDo(void)
{
     db2:	cf 93       	push	r28
     db4:	df 93       	push	r29
     db6:	cd b7       	in	r28, 0x3d	; 61
     db8:	de b7       	in	r29, 0x3e	; 62
     dba:	27 97       	sbiw	r28, 0x07	; 7
     dbc:	0f b6       	in	r0, 0x3f	; 63
     dbe:	f8 94       	cli
     dc0:	de bf       	out	0x3e, r29	; 62
     dc2:	0f be       	out	0x3f, r0	; 63
     dc4:	cd bf       	out	0x3d, r28	; 61
	char str[] = {' ',' ',' ',' ',0xB0,'C',0};
     dc6:	87 e0       	ldi	r24, 0x07	; 7
     dc8:	e3 ea       	ldi	r30, 0xA3	; 163
     dca:	f0 e0       	ldi	r31, 0x00	; 0
     dcc:	de 01       	movw	r26, r28
     dce:	11 96       	adiw	r26, 0x01	; 1
     dd0:	01 90       	ld	r0, Z+
     dd2:	0d 92       	st	X+, r0
     dd4:	8a 95       	dec	r24
     dd6:	e1 f7       	brne	.-8      	; 0xdd0 <mf_realTempDo+0x1e>
	//char str[7];
	//read_progmem_string(str_temp_do,str,7);
		
	// Output ADC result to LED
	u16toa_align_right(adc_celsius,str,0x80 | 4,' ');
     dd8:	20 e2       	ldi	r18, 0x20	; 32
     dda:	44 e8       	ldi	r20, 0x84	; 132
     ddc:	be 01       	movw	r22, r28
     dde:	6f 5f       	subi	r22, 0xFF	; 255
     de0:	7f 4f       	sbci	r23, 0xFF	; 255
     de2:	80 91 47 01 	lds	r24, 0x0147
     de6:	90 91 48 01 	lds	r25, 0x0148
     dea:	03 d2       	rcall	.+1030   	; 0x11f2 <u16toa_align_right>
	printLedBuffer(0,str);
     dec:	be 01       	movw	r22, r28
     dee:	6f 5f       	subi	r22, 0xFF	; 255
     df0:	7f 4f       	sbci	r23, 0xFF	; 255
     df2:	80 e0       	ldi	r24, 0x00	; 0
     df4:	7b de       	rcall	.-778    	; 0xaec <printLedBuffer>
}
     df6:	27 96       	adiw	r28, 0x07	; 7
     df8:	0f b6       	in	r0, 0x3f	; 63
     dfa:	f8 94       	cli
     dfc:	de bf       	out	0x3e, r29	; 62
     dfe:	0f be       	out	0x3f, r0	; 63
     e00:	cd bf       	out	0x3d, r28	; 61
     e02:	df 91       	pop	r29
     e04:	cf 91       	pop	r28
     e06:	08 95       	ret

00000e08 <mf_calibDo>:
	cpointNum = 2;
	printLedBuffer(0,"P2    ");
}

void mf_calibDo(void)
{
     e08:	cf 93       	push	r28
     e0a:	df 93       	push	r29
     e0c:	00 d0       	rcall	.+0      	; 0xe0e <mf_calibDo+0x6>
     e0e:	00 d0       	rcall	.+0      	; 0xe10 <mf_calibDo+0x8>
     e10:	cd b7       	in	r28, 0x3d	; 61
     e12:	de b7       	in	r29, 0x3e	; 62
	char str[] = "   ";
     e14:	80 e2       	ldi	r24, 0x20	; 32
     e16:	90 e2       	ldi	r25, 0x20	; 32
     e18:	a0 e2       	ldi	r26, 0x20	; 32
     e1a:	b0 e0       	ldi	r27, 0x00	; 0
     e1c:	89 83       	std	Y+1, r24	; 0x01
     e1e:	9a 83       	std	Y+2, r25	; 0x02
     e20:	ab 83       	std	Y+3, r26	; 0x03
     e22:	bc 83       	std	Y+4, r27	; 0x04
	
	if (button_state & (BD_UP | BR_UP))
     e24:	80 91 ea 00 	lds	r24, 0x00EA
     e28:	90 91 eb 00 	lds	r25, 0x00EB
     e2c:	9c 01       	movw	r18, r24
     e2e:	20 74       	andi	r18, 0x40	; 64
     e30:	34 70       	andi	r19, 0x04	; 4
     e32:	23 2b       	or	r18, r19
     e34:	31 f0       	breq	.+12     	; 0xe42 <mf_calibDo+0x3a>
	{
		if (cpoint_user_val < MAX_CALIB_TEMP)
     e36:	80 91 03 01 	lds	r24, 0x0103
     e3a:	8a 3f       	cpi	r24, 0xFA	; 250
     e3c:	68 f4       	brcc	.+26     	; 0xe58 <mf_calibDo+0x50>
		cpoint_user_val += 1;
     e3e:	8f 5f       	subi	r24, 0xFF	; 255
     e40:	09 c0       	rjmp	.+18     	; 0xe54 <mf_calibDo+0x4c>
	}
	else if (button_state & (BD_DOWN | BR_DOWN))
     e42:	80 78       	andi	r24, 0x80	; 128
     e44:	98 70       	andi	r25, 0x08	; 8
     e46:	89 2b       	or	r24, r25
     e48:	39 f0       	breq	.+14     	; 0xe58 <mf_calibDo+0x50>
	{
		if (cpoint_user_val > MIN_CALIB_TEMP)
     e4a:	80 91 03 01 	lds	r24, 0x0103
     e4e:	8b 30       	cpi	r24, 0x0B	; 11
     e50:	18 f0       	brcs	.+6      	; 0xe58 <mf_calibDo+0x50>
		cpoint_user_val -= 1;
     e52:	81 50       	subi	r24, 0x01	; 1
     e54:	80 93 03 01 	sts	0x0103, r24
	}
	
	if (userTimer.FA_GE)
     e58:	80 91 05 01 	lds	r24, 0x0105
     e5c:	84 ff       	sbrs	r24, 4
     e5e:	0f c0       	rjmp	.+30     	; 0xe7e <mf_calibDo+0x76>
	{
		u16toa_align_right(cpoint_user_val,str,3,' ');
     e60:	20 e2       	ldi	r18, 0x20	; 32
     e62:	43 e0       	ldi	r20, 0x03	; 3
     e64:	be 01       	movw	r22, r28
     e66:	6f 5f       	subi	r22, 0xFF	; 255
     e68:	7f 4f       	sbci	r23, 0xFF	; 255
     e6a:	80 91 03 01 	lds	r24, 0x0103
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	c0 d1       	rcall	.+896    	; 0x11f2 <u16toa_align_right>
		resetAutoPowerOffCounter();
     e72:	56 d5       	rcall	.+2732   	; 0x1920 <resetAutoPowerOffCounter>
		heaterState |= CALIBRATION_ACTIVE;
     e74:	80 91 ef 00 	lds	r24, 0x00EF
     e78:	82 60       	ori	r24, 0x02	; 2
     e7a:	80 93 ef 00 	sts	0x00EF, r24
	}
	
	printLedBuffer(3,str);
     e7e:	be 01       	movw	r22, r28
     e80:	6f 5f       	subi	r22, 0xFF	; 255
     e82:	7f 4f       	sbci	r23, 0xFF	; 255
     e84:	83 e0       	ldi	r24, 0x03	; 3
     e86:	32 de       	rcall	.-924    	; 0xaec <printLedBuffer>
}
     e88:	0f 90       	pop	r0
     e8a:	0f 90       	pop	r0
     e8c:	0f 90       	pop	r0
     e8e:	0f 90       	pop	r0
     e90:	df 91       	pop	r29
     e92:	cf 91       	pop	r28
     e94:	08 95       	ret

00000e96 <mf_sndenDo>:

//---------------------------------------------//


void mf_sndenDo(void)
{
     e96:	cf 93       	push	r28
     e98:	df 93       	push	r29
     e9a:	cd b7       	in	r28, 0x3d	; 61
     e9c:	de b7       	in	r29, 0x3e	; 62
     e9e:	27 97       	sbiw	r28, 0x07	; 7
     ea0:	0f b6       	in	r0, 0x3f	; 63
     ea2:	f8 94       	cli
     ea4:	de bf       	out	0x3e, r29	; 62
     ea6:	0f be       	out	0x3f, r0	; 63
     ea8:	cd bf       	out	0x3d, r28	; 61
	char str[] = {'S','N','D',' ',' ',' ',0};
     eaa:	87 e0       	ldi	r24, 0x07	; 7
     eac:	ea ea       	ldi	r30, 0xAA	; 170
     eae:	f0 e0       	ldi	r31, 0x00	; 0
     eb0:	de 01       	movw	r26, r28
     eb2:	11 96       	adiw	r26, 0x01	; 1
     eb4:	01 90       	ld	r0, Z+
     eb6:	0d 92       	st	X+, r0
     eb8:	8a 95       	dec	r24
     eba:	e1 f7       	brne	.-8      	; 0xeb4 <mf_sndenDo+0x1e>
	//char str[7];
	//read_progmem_string(str_snd,str,7);
		
	if (button_state & (BD_UP | BD_DOWN))
     ebc:	80 91 ea 00 	lds	r24, 0x00EA
     ec0:	90 91 eb 00 	lds	r25, 0x00EB
     ec4:	80 7c       	andi	r24, 0xC0	; 192
     ec6:	99 27       	eor	r25, r25
     ec8:	89 2b       	or	r24, r25
     eca:	49 f0       	breq	.+18     	; 0xede <mf_sndenDo+0x48>
	{
		p.sound_enable = !p.sound_enable;
     ecc:	81 e0       	ldi	r24, 0x01	; 1
     ece:	90 91 7a 01 	lds	r25, 0x017A
     ed2:	91 11       	cpse	r25, r1
     ed4:	80 e0       	ldi	r24, 0x00	; 0
     ed6:	80 93 7a 01 	sts	0x017A, r24
//	 Restarts menu state timeout
//	Should be used in RUN function when control buttons are pressed.
//-----------------------------------------------------------------//
static void restartMenuTimer(void)
{
	menuTimer.Timer = 0;
     eda:	10 92 8c 00 	sts	0x008C, r1
	{
		p.sound_enable = !p.sound_enable;
		restartMenuTimer();
	}			
		
	if (userTimer.FA_GE)
     ede:	80 91 05 01 	lds	r24, 0x0105
     ee2:	84 ff       	sbrs	r24, 4
     ee4:	0d c0       	rjmp	.+26     	; 0xf00 <mf_sndenDo+0x6a>
	{
		if (p.sound_enable)		
     ee6:	80 91 7a 01 	lds	r24, 0x017A
     eea:	88 23       	and	r24, r24
     eec:	21 f0       	breq	.+8      	; 0xef6 <mf_sndenDo+0x60>
		{
			str[4] = 'O';
     eee:	8f e4       	ldi	r24, 0x4F	; 79
     ef0:	8d 83       	std	Y+5, r24	; 0x05
			str[5] = 'N';
     ef2:	8e e4       	ldi	r24, 0x4E	; 78
     ef4:	04 c0       	rjmp	.+8      	; 0xefe <mf_sndenDo+0x68>
		}
		else
		{
			str[3] = 'O';
     ef6:	8f e4       	ldi	r24, 0x4F	; 79
     ef8:	8c 83       	std	Y+4, r24	; 0x04
			str[4] = 'F';
     efa:	86 e4       	ldi	r24, 0x46	; 70
     efc:	8d 83       	std	Y+5, r24	; 0x05
			str[5] = 'F';
     efe:	8e 83       	std	Y+6, r24	; 0x06
		}			
	}
		
	printLedBuffer(0,str);
     f00:	be 01       	movw	r22, r28
     f02:	6f 5f       	subi	r22, 0xFF	; 255
     f04:	7f 4f       	sbci	r23, 0xFF	; 255
     f06:	80 e0       	ldi	r24, 0x00	; 0
     f08:	f1 dd       	rcall	.-1054   	; 0xaec <printLedBuffer>
	setComma(2);
     f0a:	82 e0       	ldi	r24, 0x02	; 2
     f0c:	29 de       	rcall	.-942    	; 0xb60 <setComma>
}
     f0e:	27 96       	adiw	r28, 0x07	; 7
     f10:	0f b6       	in	r0, 0x3f	; 63
     f12:	f8 94       	cli
     f14:	de bf       	out	0x3e, r29	; 62
     f16:	0f be       	out	0x3f, r0	; 63
     f18:	cd bf       	out	0x3d, r28	; 61
     f1a:	df 91       	pop	r29
     f1c:	cf 91       	pop	r28
     f1e:	08 95       	ret

00000f20 <mf_rollDo>:
	setExtraLeds(LED_ROLL);
	mf_leafSelectAct();		// setup and start timer
}

void mf_rollDo(void)
{
     f20:	cf 93       	push	r28
     f22:	df 93       	push	r29
     f24:	cd b7       	in	r28, 0x3d	; 61
     f26:	de b7       	in	r29, 0x3e	; 62
     f28:	27 97       	sbiw	r28, 0x07	; 7
     f2a:	0f b6       	in	r0, 0x3f	; 63
     f2c:	f8 94       	cli
     f2e:	de bf       	out	0x3e, r29	; 62
     f30:	0f be       	out	0x3f, r0	; 63
     f32:	cd bf       	out	0x3d, r28	; 61
	char str[] = {' ',' ',' ',' ',' ',' ',0};
     f34:	87 e0       	ldi	r24, 0x07	; 7
     f36:	e1 eb       	ldi	r30, 0xB1	; 177
     f38:	f0 e0       	ldi	r31, 0x00	; 0
     f3a:	de 01       	movw	r26, r28
     f3c:	11 96       	adiw	r26, 0x01	; 1
     f3e:	01 90       	ld	r0, Z+
     f40:	0d 92       	st	X+, r0
     f42:	8a 95       	dec	r24
     f44:	e1 f7       	brne	.-8      	; 0xf3e <mf_rollDo+0x1e>
	//char str[7];
	//read_progmem_string(str_spaces,str,7);
	
		
	if (button_state & (BD_UP | BR_UP))
     f46:	80 91 ea 00 	lds	r24, 0x00EA
     f4a:	90 91 eb 00 	lds	r25, 0x00EB
     f4e:	9c 01       	movw	r18, r24
     f50:	20 74       	andi	r18, 0x40	; 64
     f52:	34 70       	andi	r19, 0x04	; 4
     f54:	23 2b       	or	r18, r19
     f56:	31 f0       	breq	.+12     	; 0xf64 <mf_rollDo+0x44>
	{
		if (p.rollCycleSet < MAX_ROLL_CYCLES)
     f58:	80 91 79 01 	lds	r24, 0x0179
     f5c:	83 36       	cpi	r24, 0x63	; 99
     f5e:	68 f4       	brcc	.+26     	; 0xf7a <mf_rollDo+0x5a>
			p.rollCycleSet += 1;
     f60:	8f 5f       	subi	r24, 0xFF	; 255
     f62:	09 c0       	rjmp	.+18     	; 0xf76 <mf_rollDo+0x56>
	}
	else if (button_state & (BD_DOWN | BR_DOWN))
     f64:	80 78       	andi	r24, 0x80	; 128
     f66:	98 70       	andi	r25, 0x08	; 8
     f68:	89 2b       	or	r24, r25
     f6a:	39 f0       	breq	.+14     	; 0xf7a <mf_rollDo+0x5a>
	{
		if (p.rollCycleSet > MIN_ROLL_CYCLES)
     f6c:	80 91 79 01 	lds	r24, 0x0179
     f70:	82 30       	cpi	r24, 0x02	; 2
     f72:	18 f0       	brcs	.+6      	; 0xf7a <mf_rollDo+0x5a>
			p.rollCycleSet -= 1;
     f74:	81 50       	subi	r24, 0x01	; 1
     f76:	80 93 79 01 	sts	0x0179, r24
	}	
		
	u16toa_align_right(p.rollCycleSet,str + 4,0x80 | 2,' ');
     f7a:	20 e2       	ldi	r18, 0x20	; 32
     f7c:	42 e8       	ldi	r20, 0x82	; 130
     f7e:	be 01       	movw	r22, r28
     f80:	6b 5f       	subi	r22, 0xFB	; 251
     f82:	7f 4f       	sbci	r23, 0xFF	; 255
     f84:	80 91 79 01 	lds	r24, 0x0179
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	33 d1       	rcall	.+614    	; 0x11f2 <u16toa_align_right>
	
	if ((!(rollState & ROLL_CYCLE)) || (userTimer.FA_GE))
     f8c:	80 91 0a 01 	lds	r24, 0x010A
     f90:	82 ff       	sbrs	r24, 2
     f92:	04 c0       	rjmp	.+8      	; 0xf9c <mf_rollDo+0x7c>
     f94:	80 91 05 01 	lds	r24, 0x0105
     f98:	84 ff       	sbrs	r24, 4
     f9a:	09 c0       	rjmp	.+18     	; 0xfae <mf_rollDo+0x8e>
	{
		u16toa_align_right(activeRollCycle,str + 1,0x80 | 2,' ');
     f9c:	20 e2       	ldi	r18, 0x20	; 32
     f9e:	42 e8       	ldi	r20, 0x82	; 130
     fa0:	be 01       	movw	r22, r28
     fa2:	6e 5f       	subi	r22, 0xFE	; 254
     fa4:	7f 4f       	sbci	r23, 0xFF	; 255
     fa6:	80 91 09 01 	lds	r24, 0x0109
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	22 d1       	rcall	.+580    	; 0x11f2 <u16toa_align_right>
	}
	
	str[0] = 0;
     fae:	19 82       	std	Y+1, r1	; 0x01
	if (isTopPointValid())
     fb0:	e5 d2       	rcall	.+1482   	; 0x157c <isTopPointValid>
     fb2:	88 23       	and	r24, r24
     fb4:	19 f0       	breq	.+6      	; 0xfbc <mf_rollDo+0x9c>
		str[0] |= SEGA;
     fb6:	89 81       	ldd	r24, Y+1	; 0x01
     fb8:	81 60       	ori	r24, 0x01	; 1
     fba:	89 83       	std	Y+1, r24	; 0x01
	if (isBottomPointValid())
     fbc:	ef d2       	rcall	.+1502   	; 0x159c <isBottomPointValid>
     fbe:	88 23       	and	r24, r24
     fc0:	19 f0       	breq	.+6      	; 0xfc8 <mf_rollDo+0xa8>
		str[0] |= SEGD;
     fc2:	89 81       	ldd	r24, Y+1	; 0x01
     fc4:	88 60       	ori	r24, 0x08	; 8
     fc6:	89 83       	std	Y+1, r24	; 0x01
	if (str[0] == 0)
     fc8:	89 81       	ldd	r24, Y+1	; 0x01
     fca:	81 11       	cpse	r24, r1
     fcc:	02 c0       	rjmp	.+4      	; 0xfd2 <mf_rollDo+0xb2>
		str[0] = ' ';
     fce:	80 e2       	ldi	r24, 0x20	; 32
     fd0:	89 83       	std	Y+1, r24	; 0x01
		
	printLedBuffer(0,str);
     fd2:	be 01       	movw	r22, r28
     fd4:	6f 5f       	subi	r22, 0xFF	; 255
     fd6:	7f 4f       	sbci	r23, 0xFF	; 255
     fd8:	80 e0       	ldi	r24, 0x00	; 0
     fda:	88 dd       	rcall	.-1264   	; 0xaec <printLedBuffer>
}
     fdc:	27 96       	adiw	r28, 0x07	; 7
     fde:	0f b6       	in	r0, 0x3f	; 63
     fe0:	f8 94       	cli
     fe2:	de bf       	out	0x3e, r29	; 62
     fe4:	0f be       	out	0x3f, r0	; 63
     fe6:	cd bf       	out	0x3d, r28	; 61
     fe8:	df 91       	pop	r29
     fea:	cf 91       	pop	r28
     fec:	08 95       	ret

00000fee <mf_rollSelect>:
//---------------------------------------------//
//---------------------------------------------//

void mf_rollSelect(void)
{
	setExtraLeds(LED_ROLL);
     fee:	80 e4       	ldi	r24, 0x40	; 64
     ff0:	c3 dd       	rcall	.-1146   	; 0xb78 <setExtraLeds>
	mf_leafSelectAct();		// setup and start timer
     ff2:	18 ce       	rjmp	.-976    	; 0xc24 <mf_leafSelectAct>

00000ff4 <mf_setTempDo>:
	clearExtraLeds(LED_TEMP);
	mf_leafSelectAct();		// setup and start timer
}

void mf_setTempDo(void)
{
     ff4:	cf 93       	push	r28
     ff6:	df 93       	push	r29
     ff8:	cd b7       	in	r28, 0x3d	; 61
     ffa:	de b7       	in	r29, 0x3e	; 62
     ffc:	27 97       	sbiw	r28, 0x07	; 7
     ffe:	0f b6       	in	r0, 0x3f	; 63
    1000:	f8 94       	cli
    1002:	de bf       	out	0x3e, r29	; 62
    1004:	0f be       	out	0x3f, r0	; 63
    1006:	cd bf       	out	0x3d, r28	; 61
	char str[] = {' ',' ',' ',' ',0xB0,'C',0};
    1008:	87 e0       	ldi	r24, 0x07	; 7
    100a:	e3 ea       	ldi	r30, 0xA3	; 163
    100c:	f0 e0       	ldi	r31, 0x00	; 0
    100e:	de 01       	movw	r26, r28
    1010:	11 96       	adiw	r26, 0x01	; 1
    1012:	01 90       	ld	r0, Z+
    1014:	0d 92       	st	X+, r0
    1016:	8a 95       	dec	r24
    1018:	e1 f7       	brne	.-8      	; 0x1012 <mf_setTempDo+0x1e>
	//char str[10];
	//read_progmem_string(str_temp_do,str,7);
	
	if (button_state & (BD_UP | BR_UP))
    101a:	80 91 ea 00 	lds	r24, 0x00EA
    101e:	90 91 eb 00 	lds	r25, 0x00EB
    1022:	9c 01       	movw	r18, r24
    1024:	20 74       	andi	r18, 0x40	; 64
    1026:	34 70       	andi	r19, 0x04	; 4
    1028:	23 2b       	or	r18, r19
    102a:	31 f0       	breq	.+12     	; 0x1038 <mf_setTempDo+0x44>
	{
		if (p.setup_temp_value < MAX_SET_TEMP)
    102c:	80 91 78 01 	lds	r24, 0x0178
    1030:	8a 3f       	cpi	r24, 0xFA	; 250
    1032:	68 f4       	brcc	.+26     	; 0x104e <mf_setTempDo+0x5a>
			p.setup_temp_value += 5;
    1034:	8b 5f       	subi	r24, 0xFB	; 251
    1036:	09 c0       	rjmp	.+18     	; 0x104a <mf_setTempDo+0x56>
		restartMenuTimer();
	}
	else if (button_state & (BD_DOWN | BR_DOWN))
    1038:	80 78       	andi	r24, 0x80	; 128
    103a:	98 70       	andi	r25, 0x08	; 8
    103c:	89 2b       	or	r24, r25
    103e:	49 f0       	breq	.+18     	; 0x1052 <mf_setTempDo+0x5e>
	{
		if (p.setup_temp_value > MIN_SET_TEMP)
    1040:	80 91 78 01 	lds	r24, 0x0178
    1044:	8f 31       	cpi	r24, 0x1F	; 31
    1046:	18 f0       	brcs	.+6      	; 0x104e <mf_setTempDo+0x5a>
			p.setup_temp_value -= 5;
    1048:	85 50       	subi	r24, 0x05	; 5
    104a:	80 93 78 01 	sts	0x0178, r24
//	 Restarts menu state timeout
//	Should be used in RUN function when control buttons are pressed.
//-----------------------------------------------------------------//
static void restartMenuTimer(void)
{
	menuTimer.Timer = 0;
    104e:	10 92 8c 00 	sts	0x008C, r1
			p.setup_temp_value -= 5;
		restartMenuTimer();
	}					
		
	// Output ADC result to LED
	u16toa_align_right(p.setup_temp_value,str,0x80 | 4,' ');
    1052:	20 e2       	ldi	r18, 0x20	; 32
    1054:	44 e8       	ldi	r20, 0x84	; 132
    1056:	be 01       	movw	r22, r28
    1058:	6f 5f       	subi	r22, 0xFF	; 255
    105a:	7f 4f       	sbci	r23, 0xFF	; 255
    105c:	80 91 78 01 	lds	r24, 0x0178
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	c7 d0       	rcall	.+398    	; 0x11f2 <u16toa_align_right>
	printLedBuffer(0,str);
    1064:	be 01       	movw	r22, r28
    1066:	6f 5f       	subi	r22, 0xFF	; 255
    1068:	7f 4f       	sbci	r23, 0xFF	; 255
    106a:	80 e0       	ldi	r24, 0x00	; 0
    106c:	3f dd       	rcall	.-1410   	; 0xaec <printLedBuffer>
	
	if (userTimer.FA_GE)
    106e:	80 91 05 01 	lds	r24, 0x0105
    1072:	84 ff       	sbrs	r24, 4
    1074:	03 c0       	rjmp	.+6      	; 0x107c <mf_setTempDo+0x88>
		setExtraLeds(LED_TEMP);
    1076:	80 e8       	ldi	r24, 0x80	; 128
    1078:	7f dd       	rcall	.-1282   	; 0xb78 <setExtraLeds>
    107a:	02 c0       	rjmp	.+4      	; 0x1080 <mf_setTempDo+0x8c>
	else
		clearExtraLeds(LED_TEMP);
    107c:	80 e8       	ldi	r24, 0x80	; 128
    107e:	82 dd       	rcall	.-1276   	; 0xb84 <clearExtraLeds>
}
    1080:	27 96       	adiw	r28, 0x07	; 7
    1082:	0f b6       	in	r0, 0x3f	; 63
    1084:	f8 94       	cli
    1086:	de bf       	out	0x3e, r29	; 62
    1088:	0f be       	out	0x3f, r0	; 63
    108a:	cd bf       	out	0x3d, r28	; 61
    108c:	df 91       	pop	r29
    108e:	cf 91       	pop	r28
    1090:	08 95       	ret

00001092 <mf_realTempSelect>:
//=================================================================//


void mf_realTempSelect(void)
{
	setExtraLeds(LED_TEMP);
    1092:	80 e8       	ldi	r24, 0x80	; 128
    1094:	71 cd       	rjmp	.-1310   	; 0xb78 <setExtraLeds>

00001096 <getMenuFunctionRecord.constprop.0>:
//	Arguments:
//		menuItemID - ID of an item
//		menuRecord - pointer to function structure to fill
//	Output:
//-----------------------------------------------------------------//
static void getMenuFunctionRecord(uint8_t menuItemID, MenuFunctionRecord* menuRecord )
    1096:	1f 93       	push	r17
    1098:	cf 93       	push	r28
    109a:	df 93       	push	r29
    109c:	c0 e0       	ldi	r28, 0x00	; 0
    109e:	d0 e0       	ldi	r29, 0x00	; 0
{
	uint8_t i;
	for (i = 0; i < sizeof(menuFunctionSet)/sizeof(MenuFunctionRecord); i++  )
	{
		readMenuRecord(&menuFunctionSet[i], menuRecord);
    10a0:	17 e0       	ldi	r17, 0x07	; 7
    10a2:	1c 9f       	mul	r17, r28
    10a4:	90 01       	movw	r18, r0
    10a6:	1d 9f       	mul	r17, r29
    10a8:	30 0d       	add	r19, r0
    10aa:	11 24       	eor	r1, r1
    10ac:	26 5a       	subi	r18, 0xA6	; 166
    10ae:	3f 4f       	sbci	r19, 0xFF	; 255
//		fRecPtr		- address of the function record in the FLASH
//		resPtr		- address of the record to fill in the SRAM
//-----------------------------------------------------------------//
static inline void readMenuRecord(const MenuFunctionRecord* fRecPtr, MenuFunctionRecord* resPtr )
{
	resPtr->Item = pgm_read_byte(&fRecPtr->Item);
    10b0:	f9 01       	movw	r30, r18
    10b2:	94 91       	lpm	r25, Z
	resPtr->SelectFunction = (FuncPtr)pgm_read_word(&fRecPtr->SelectFunction);
    10b4:	31 96       	adiw	r30, 0x01	; 1
    10b6:	a5 91       	lpm	r26, Z+
    10b8:	b4 91       	lpm	r27, Z
	resPtr->RunFunction = (FuncPtr)pgm_read_word(&fRecPtr->RunFunction);
    10ba:	f9 01       	movw	r30, r18
    10bc:	33 96       	adiw	r30, 0x03	; 3
    10be:	65 91       	lpm	r22, Z+
    10c0:	74 91       	lpm	r23, Z
	resPtr->LeaveFunction = (FuncPtr)pgm_read_word(&fRecPtr->LeaveFunction);
    10c2:	2b 5f       	subi	r18, 0xFB	; 251
    10c4:	3f 4f       	sbci	r19, 0xFF	; 255
    10c6:	f9 01       	movw	r30, r18
    10c8:	45 91       	lpm	r20, Z+
    10ca:	54 91       	lpm	r21, Z
{
	uint8_t i;
	for (i = 0; i < sizeof(menuFunctionSet)/sizeof(MenuFunctionRecord); i++  )
	{
		readMenuRecord(&menuFunctionSet[i], menuRecord);
		if (menuRecord->Item == menuItemID)
    10cc:	98 13       	cpse	r25, r24
    10ce:	03 c0       	rjmp	.+6      	; 0x10d6 <getMenuFunctionRecord.constprop.0+0x40>
    10d0:	80 93 fc 00 	sts	0x00FC, r24
    10d4:	06 c0       	rjmp	.+12     	; 0x10e2 <getMenuFunctionRecord.constprop.0+0x4c>
    10d6:	21 96       	adiw	r28, 0x01	; 1
//	Output:
//-----------------------------------------------------------------//
static void getMenuFunctionRecord(uint8_t menuItemID, MenuFunctionRecord* menuRecord )
{
	uint8_t i;
	for (i = 0; i < sizeof(menuFunctionSet)/sizeof(MenuFunctionRecord); i++  )
    10d8:	ce 30       	cpi	r28, 0x0E	; 14
    10da:	d1 05       	cpc	r29, r1
    10dc:	11 f7       	brne	.-60     	; 0x10a2 <getMenuFunctionRecord.constprop.0+0xc>
    10de:	90 93 fc 00 	sts	0x00FC, r25
    10e2:	a0 93 fd 00 	sts	0x00FD, r26
    10e6:	b0 93 fe 00 	sts	0x00FE, r27
    10ea:	60 93 ff 00 	sts	0x00FF, r22
    10ee:	70 93 00 01 	sts	0x0100, r23
    10f2:	40 93 01 01 	sts	0x0101, r20
    10f6:	50 93 02 01 	sts	0x0102, r21
	{
		readMenuRecord(&menuFunctionSet[i], menuRecord);
		if (menuRecord->Item == menuItemID)
			break;
	}
}
    10fa:	df 91       	pop	r29
    10fc:	cf 91       	pop	r28
    10fe:	1f 91       	pop	r17
    1100:	08 95       	ret

00001102 <InitMenu>:
//	Menu initialization
//	Call this function at start of your program before processMenu()
//-----------------------------------------------------------------//
void InitMenu(void)
{
	selectedMenuItemID = mi_REALTEMP;
    1102:	81 e0       	ldi	r24, 0x01	; 1
    1104:	80 93 fb 00 	sts	0x00FB, r24
	getMenuFunctionRecord(selectedMenuItemID, &selectedMenuFunctionRecord);
    1108:	c6 df       	rcall	.-116    	; 0x1096 <getMenuFunctionRecord.constprop.0>
	processItemFunction(selectedMenuFunctionRecord.SelectFunction);
    110a:	80 91 fd 00 	lds	r24, 0x00FD
    110e:	90 91 fe 00 	lds	r25, 0x00FE
    1112:	7d cd       	rjmp	.-1286   	; 0xc0e <processItemFunction>

00001114 <processMenu>:
//	Main menu control, -  state function calls, jumps 
//	between menu states and indication
//	Call this function from main() with a fixed time interval.
//-----------------------------------------------------------------//
void processMenu(void)
{
    1114:	0f 93       	push	r16
    1116:	1f 93       	push	r17
    1118:	cf 93       	push	r28
    111a:	df 93       	push	r29
	NextItem_t nextItem;
	uint16_t jumpCondition;
	
	processSoftTimer8b(&menuTimer);	
    111c:	8b e8       	ldi	r24, 0x8B	; 139
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	6c d3       	rcall	.+1752   	; 0x17fa <processSoftTimer8b>
	
	// Compose jump condition
	jumpCondition = button_state;		
    1122:	40 91 ea 00 	lds	r20, 0x00EA
    1126:	50 91 eb 00 	lds	r21, 0x00EB
	if (menuTimer.FTop)
    112a:	80 91 8b 00 	lds	r24, 0x008B
    112e:	85 fd       	sbrc	r24, 5
		jumpCondition |= TMR_EXP;
    1130:	50 68       	ori	r21, 0x80	; 128
	if (sys_timers.flags & AUTOPOFF_EXPIRED)
    1132:	80 91 97 00 	lds	r24, 0x0097
    1136:	84 fd       	sbrc	r24, 4
		jumpCondition |= GOTO_POFF;
    1138:	50 64       	ori	r21, 0x40	; 64
	
	// Get next menu item according to current state and jump conditions
	nextItem = getNextMenuItem(selectedMenuItemID, jumpCondition);
    113a:	80 91 fb 00 	lds	r24, 0x00FB
    113e:	60 e0       	ldi	r22, 0x00	; 0
    1140:	70 e0       	ldi	r23, 0x00	; 0
	MenuJumpRecord	jRecord;
	uint8_t i;
	
	for (i = 0; i < sizeof(menuJumpSet)/sizeof(MenuJumpRecord); i++  )
	{
		readJumpRecord(&menuJumpSet[i], &jRecord);		// read full jump record
    1142:	95 e0       	ldi	r25, 0x05	; 5
    1144:	96 9f       	mul	r25, r22
    1146:	90 01       	movw	r18, r0
    1148:	97 9f       	mul	r25, r23
    114a:	30 0d       	add	r19, r0
    114c:	11 24       	eor	r1, r1
    114e:	24 54       	subi	r18, 0x44	; 68
    1150:	3f 4f       	sbci	r19, 0xFF	; 255
//		jRecPtr		- address of the jump record in the FLASH
//		resPtr		- address of the record to fill in the SRAM
//-----------------------------------------------------------------//
static inline void readJumpRecord(const MenuJumpRecord* jRecPtr, MenuJumpRecord* resPtr )
{
	resPtr->Item = pgm_read_byte(&jRecPtr->Item);
    1152:	f9 01       	movw	r30, r18
    1154:	14 91       	lpm	r17, Z
	resPtr->JumpCondition = pgm_read_word(&jRecPtr->JumpCondition);
    1156:	31 96       	adiw	r30, 0x01	; 1
    1158:	a5 91       	lpm	r26, Z+
    115a:	b4 91       	lpm	r27, Z
	resPtr->NextItem= pgm_read_byte(&jRecPtr->NextItem);
    115c:	f9 01       	movw	r30, r18
    115e:	33 96       	adiw	r30, 0x03	; 3
    1160:	c4 91       	lpm	r28, Z
	resPtr->Flags= pgm_read_byte(&jRecPtr->Flags);
    1162:	f9 01       	movw	r30, r18
    1164:	34 96       	adiw	r30, 0x04	; 4
    1166:	d4 91       	lpm	r29, Z
	uint8_t i;
	
	for (i = 0; i < sizeof(menuJumpSet)/sizeof(MenuJumpRecord); i++  )
	{
		readJumpRecord(&menuJumpSet[i], &jRecord);		// read full jump record
		if (jRecord.Item == selectedItemId)				// If ID match,
    1168:	18 13       	cpse	r17, r24
    116a:	0b c0       	rjmp	.+22     	; 0x1182 <processMenu+0x6e>
		{
			if ((jRecord.JumpCondition & jmpCond) != 0)		// if any of jump conditions match too,
    116c:	a4 23       	and	r26, r20
    116e:	b5 23       	and	r27, r21
    1170:	ab 2b       	or	r26, r27
    1172:	39 f0       	breq	.+14     	; 0x1182 <processMenu+0x6e>
			{
				nextItem.ItemID = jRecord.NextItem;			// switch to next menu item
				nextItem.ItemTimeout = jRecord.Flags & TIMEOUT_MASK;
    1174:	1d 2f       	mov	r17, r29
    1176:	1f 73       	andi	r17, 0x3F	; 63
				nextItem.ShiftFlags = (jRecord.Flags & (SHIFT_LEFT | SHIFT_RIGHT));
    1178:	0d 2f       	mov	r16, r29
    117a:	00 7c       	andi	r16, 0xC0	; 192
	
	// Get next menu item according to current state and jump conditions
	nextItem = getNextMenuItem(selectedMenuItemID, jumpCondition);
	
	// If next item differs from current
	if (nextItem.ItemID != selectedMenuItemID)
    117c:	c8 13       	cpse	r28, r24
    117e:	07 c0       	rjmp	.+14     	; 0x118e <processMenu+0x7a>
    1180:	27 c0       	rjmp	.+78     	; 0x11d0 <processMenu+0xbc>
    1182:	6f 5f       	subi	r22, 0xFF	; 255
    1184:	7f 4f       	sbci	r23, 0xFF	; 255
	NextItem_t nextItem;
	nextItem.ItemID = selectedItemId;
	MenuJumpRecord	jRecord;
	uint8_t i;
	
	for (i = 0; i < sizeof(menuJumpSet)/sizeof(MenuJumpRecord); i++  )
    1186:	60 32       	cpi	r22, 0x20	; 32
    1188:	71 05       	cpc	r23, r1
    118a:	e1 f6       	brne	.-72     	; 0x1144 <processMenu+0x30>
    118c:	21 c0       	rjmp	.+66     	; 0x11d0 <processMenu+0xbc>
	
	// If next item differs from current
	if (nextItem.ItemID != selectedMenuItemID)
	{		
		// Call exit function for current item
		processItemFunction(selectedMenuFunctionRecord.LeaveFunction);
    118e:	80 91 01 01 	lds	r24, 0x0101
    1192:	90 91 02 01 	lds	r25, 0x0102
    1196:	3b dd       	rcall	.-1418   	; 0xc0e <processItemFunction>
		
		// If shifting is specified, start it before calling any 
		//	new menu item functions 
		if (nextItem.ShiftFlags & SHIFT_RIGHT)
    1198:	d6 ff       	sbrs	r29, 6
    119a:	02 c0       	rjmp	.+4      	; 0x11a0 <processMenu+0x8c>
			startShiftingWindowRight();
    119c:	76 dc       	rcall	.-1812   	; 0xa8a <startShiftingWindowRight>
    119e:	02 c0       	rjmp	.+4      	; 0x11a4 <processMenu+0x90>
		else if (nextItem.ShiftFlags & SHIFT_LEFT)
    11a0:	07 fd       	sbrc	r16, 7
			startShiftingWindowLeft();
    11a2:	65 dc       	rcall	.-1846   	; 0xa6e <startShiftingWindowLeft>
		
		// Select new item
		selectedMenuItemID = nextItem.ItemID;
    11a4:	c0 93 fb 00 	sts	0x00FB, r28
		
		// Load from FLASH and save function pointers
		getMenuFunctionRecord(selectedMenuItemID, &selectedMenuFunctionRecord);
    11a8:	8c 2f       	mov	r24, r28
    11aa:	75 df       	rcall	.-278    	; 0x1096 <getMenuFunctionRecord.constprop.0>
		// Call select function for next item
		processItemFunction(selectedMenuFunctionRecord.SelectFunction);
    11ac:	80 91 fd 00 	lds	r24, 0x00FD
    11b0:	90 91 fe 00 	lds	r25, 0x00FE
    11b4:	2c dd       	rcall	.-1448   	; 0xc0e <processItemFunction>
		// Start timer if timeout is enabled
		if (nextItem.ItemTimeout != 0)
    11b6:	11 23       	and	r17, r17
    11b8:	b9 f0       	breq	.+46     	; 0x11e8 <processMenu+0xd4>
		{
			menuTimer.Top = nextItem.ItemTimeout * MENU_TIMEOUT_MULT;
    11ba:	11 0f       	add	r17, r17
    11bc:	10 93 8d 00 	sts	0x008D, r17
			menuTimer.Timer = 0;
    11c0:	10 92 8c 00 	sts	0x008C, r1
			menuTimer.Enabled = 1;	
    11c4:	80 91 8b 00 	lds	r24, 0x008B
    11c8:	81 60       	ori	r24, 0x01	; 1
    11ca:	80 93 8b 00 	sts	0x008B, r24
    11ce:	0c c0       	rjmp	.+24     	; 0x11e8 <processMenu+0xd4>
		}
		
	}
	else
	{
		processSoftTimer8b(&userTimer);
    11d0:	85 e0       	ldi	r24, 0x05	; 5
    11d2:	91 e0       	ldi	r25, 0x01	; 1
    11d4:	12 d3       	rcall	.+1572   	; 0x17fa <processSoftTimer8b>
		// Stay at previous item
		processItemFunction(selectedMenuFunctionRecord.RunFunction);
    11d6:	80 91 ff 00 	lds	r24, 0x00FF
    11da:	90 91 00 01 	lds	r25, 0x0100
	}	
}
    11de:	df 91       	pop	r29
    11e0:	cf 91       	pop	r28
    11e2:	1f 91       	pop	r17
    11e4:	0f 91       	pop	r16
	}
	else
	{
		processSoftTimer8b(&userTimer);
		// Stay at previous item
		processItemFunction(selectedMenuFunctionRecord.RunFunction);
    11e6:	13 cd       	rjmp	.-1498   	; 0xc0e <processItemFunction>
	}	
}
    11e8:	df 91       	pop	r29
    11ea:	cf 91       	pop	r28
    11ec:	1f 91       	pop	r17
    11ee:	0f 91       	pop	r16
    11f0:	08 95       	ret

000011f2 <u16toa_align_right>:
// Converts uint16_t value into decimal string with right alignment
// len = number of digits output (without terminating '\0')
// len[7] = 1 -> no terminating '\0' at buffer[len]
// fill_char -> char used for string padding
void u16toa_align_right(uint16_t val, char *buffer, uint8_t len,char fill_char)
{
    11f2:	cf 93       	push	r28
    11f4:	df 93       	push	r29
	if (len & 0x80)
    11f6:	47 ff       	sbrs	r20, 7
    11f8:	05 c0       	rjmp	.+10     	; 0x1204 <u16toa_align_right+0x12>
	{
		len = len & 0x7F;
    11fa:	4f 77       	andi	r20, 0x7F	; 127
		buffer += len;	
    11fc:	fb 01       	movw	r30, r22
    11fe:	e4 0f       	add	r30, r20
    1200:	f1 1d       	adc	r31, r1
    1202:	04 c0       	rjmp	.+8      	; 0x120c <u16toa_align_right+0x1a>
	}
	else
	{
		buffer += len;	
    1204:	fb 01       	movw	r30, r22
    1206:	e4 0f       	add	r30, r20
    1208:	f1 1d       	adc	r31, r1
		*buffer = 0;
    120a:	10 82       	st	Z, r1
	}
	
	do
	{
		*--buffer = val % 10 + '0';
    120c:	ca e0       	ldi	r28, 0x0A	; 10
    120e:	d0 e0       	ldi	r29, 0x00	; 0
    1210:	be 01       	movw	r22, r28
    1212:	18 d4       	rcall	.+2096   	; 0x1a44 <__udivmodhi4>
    1214:	80 5d       	subi	r24, 0xD0	; 208
    1216:	82 93       	st	-Z, r24
		val /= 10;
    1218:	cb 01       	movw	r24, r22
		len--;
    121a:	41 50       	subi	r20, 0x01	; 1
	}
	while ((val != 0) && len);
    121c:	00 97       	sbiw	r24, 0x00	; 0
    121e:	21 f0       	breq	.+8      	; 0x1228 <u16toa_align_right+0x36>
    1220:	41 11       	cpse	r20, r1
    1222:	f6 cf       	rjmp	.-20     	; 0x1210 <u16toa_align_right+0x1e>
    1224:	01 c0       	rjmp	.+2      	; 0x1228 <u16toa_align_right+0x36>
	
	// Padding
	while(len--)
		*--buffer = fill_char;
    1226:	22 93       	st	-Z, r18
		len--;
	}
	while ((val != 0) && len);
	
	// Padding
	while(len--)
    1228:	41 50       	subi	r20, 0x01	; 1
    122a:	e8 f7       	brcc	.-6      	; 0x1226 <u16toa_align_right+0x34>
		*--buffer = fill_char;
}
    122c:	df 91       	pop	r29
    122e:	cf 91       	pop	r28
    1230:	08 95       	ret

00001232 <i32toa_align_right>:



void i32toa_align_right(int32_t val, char *buffer, uint8_t len)
{
    1232:	cf 92       	push	r12
    1234:	df 92       	push	r13
    1236:	ef 92       	push	r14
    1238:	ff 92       	push	r15
    123a:	0f 93       	push	r16
    123c:	1f 93       	push	r17
    123e:	cf 93       	push	r28
    1240:	df 93       	push	r29
    1242:	12 2f       	mov	r17, r18
	uint8_t is_negative = (val < 0) ? 1 : 0;
    1244:	6b 01       	movw	r12, r22
    1246:	7c 01       	movw	r14, r24
    1248:	cc 24       	eor	r12, r12
    124a:	f7 fc       	sbrc	r15, 7
    124c:	c3 94       	inc	r12
    124e:	dd 24       	eor	r13, r13
    1250:	ee 24       	eor	r14, r14
    1252:	ff 24       	eor	r15, r15
    1254:	0c 2d       	mov	r16, r12
	if (is_negative)
    1256:	cc 20       	and	r12, r12
    1258:	39 f0       	breq	.+14     	; 0x1268 <i32toa_align_right+0x36>
		val = -val;
    125a:	90 95       	com	r25
    125c:	80 95       	com	r24
    125e:	70 95       	com	r23
    1260:	61 95       	neg	r22
    1262:	7f 4f       	sbci	r23, 0xFF	; 255
    1264:	8f 4f       	sbci	r24, 0xFF	; 255
    1266:	9f 4f       	sbci	r25, 0xFF	; 255
		
	buffer += len;	
    1268:	ea 01       	movw	r28, r20
    126a:	c1 0f       	add	r28, r17
    126c:	d1 1d       	adc	r29, r1
	*buffer = 0;
    126e:	18 82       	st	Y, r1
	
	do
	{
		*--buffer = val % 10 + '0';
    1270:	2a e0       	ldi	r18, 0x0A	; 10
    1272:	c2 2e       	mov	r12, r18
    1274:	d1 2c       	mov	r13, r1
    1276:	e1 2c       	mov	r14, r1
    1278:	f1 2c       	mov	r15, r1
    127a:	a7 01       	movw	r20, r14
    127c:	96 01       	movw	r18, r12
    127e:	2b d4       	rcall	.+2134   	; 0x1ad6 <__divmodsi4>
    1280:	60 5d       	subi	r22, 0xD0	; 208
    1282:	6a 93       	st	-Y, r22
		val /= 10;
    1284:	b9 01       	movw	r22, r18
    1286:	ca 01       	movw	r24, r20
		len--;
    1288:	11 50       	subi	r17, 0x01	; 1
	}
	while ((val != 0) && len);
    128a:	61 15       	cp	r22, r1
    128c:	71 05       	cpc	r23, r1
    128e:	81 05       	cpc	r24, r1
    1290:	91 05       	cpc	r25, r1
    1292:	19 f0       	breq	.+6      	; 0x129a <i32toa_align_right+0x68>
    1294:	11 11       	cpse	r17, r1
    1296:	f1 cf       	rjmp	.-30     	; 0x127a <i32toa_align_right+0x48>
    1298:	08 c0       	rjmp	.+16     	; 0x12aa <i32toa_align_right+0x78>
	
	if ( (len) && (is_negative) )
    129a:	11 23       	and	r17, r17
    129c:	31 f0       	breq	.+12     	; 0x12aa <i32toa_align_right+0x78>
    129e:	00 23       	and	r16, r16
    12a0:	21 f0       	breq	.+8      	; 0x12aa <i32toa_align_right+0x78>
	{
		*--buffer = '-';
    12a2:	21 97       	sbiw	r28, 0x01	; 1
    12a4:	8d e2       	ldi	r24, 0x2D	; 45
    12a6:	88 83       	st	Y, r24
		len--;	
    12a8:	11 50       	subi	r17, 0x01	; 1
	}	
	
	// Padding
	while(len--)
		*--buffer = ' ';
    12aa:	80 e2       	ldi	r24, 0x20	; 32
    12ac:	01 c0       	rjmp	.+2      	; 0x12b0 <i32toa_align_right+0x7e>
    12ae:	8a 93       	st	-Y, r24
		*--buffer = '-';
		len--;	
	}	
	
	// Padding
	while(len--)
    12b0:	11 50       	subi	r17, 0x01	; 1
    12b2:	e8 f7       	brcc	.-6      	; 0x12ae <i32toa_align_right+0x7c>
		*--buffer = ' ';
	
}
    12b4:	df 91       	pop	r29
    12b6:	cf 91       	pop	r28
    12b8:	1f 91       	pop	r17
    12ba:	0f 91       	pop	r16
    12bc:	ff 90       	pop	r15
    12be:	ef 90       	pop	r14
    12c0:	df 90       	pop	r13
    12c2:	cf 90       	pop	r12
    12c4:	08 95       	ret

000012c6 <logI32p>:
	u16toa_align_right(val,str,6,' ');
	USART_sendstr(str);
}

static void logI32p(int32_t val)
{
    12c6:	cf 93       	push	r28
    12c8:	df 93       	push	r29
    12ca:	cd b7       	in	r28, 0x3d	; 61
    12cc:	de b7       	in	r29, 0x3e	; 62
    12ce:	2c 97       	sbiw	r28, 0x0c	; 12
    12d0:	0f b6       	in	r0, 0x3f	; 63
    12d2:	f8 94       	cli
    12d4:	de bf       	out	0x3e, r29	; 62
    12d6:	0f be       	out	0x3f, r0	; 63
    12d8:	cd bf       	out	0x3d, r28	; 61
	char str[12];
	i32toa_align_right(val,str,12);
    12da:	2c e0       	ldi	r18, 0x0C	; 12
    12dc:	ae 01       	movw	r20, r28
    12de:	4f 5f       	subi	r20, 0xFF	; 255
    12e0:	5f 4f       	sbci	r21, 0xFF	; 255
    12e2:	a7 df       	rcall	.-178    	; 0x1232 <i32toa_align_right>
	USART_sendstr(str);
    12e4:	ce 01       	movw	r24, r28
    12e6:	01 96       	adiw	r24, 0x01	; 1
    12e8:	8f d3       	rcall	.+1822   	; 0x1a08 <USART_sendstr>
}
    12ea:	2c 96       	adiw	r28, 0x0c	; 12
    12ec:	0f b6       	in	r0, 0x3f	; 63
    12ee:	f8 94       	cli
    12f0:	de bf       	out	0x3e, r29	; 62
    12f2:	0f be       	out	0x3f, r0	; 63
    12f4:	cd bf       	out	0x3d, r28	; 61
    12f6:	df 91       	pop	r29
    12f8:	cf 91       	pop	r28
    12fa:	08 95       	ret

000012fc <logU16p>:
    }
}


static void logU16p(uint16_t val)
{
    12fc:	cf 93       	push	r28
    12fe:	df 93       	push	r29
    1300:	00 d0       	rcall	.+0      	; 0x1302 <logU16p+0x6>
    1302:	00 d0       	rcall	.+0      	; 0x1304 <logU16p+0x8>
    1304:	00 d0       	rcall	.+0      	; 0x1306 <logU16p+0xa>
    1306:	cd b7       	in	r28, 0x3d	; 61
    1308:	de b7       	in	r29, 0x3e	; 62
	char str[6];
	u16toa_align_right(val,str,6,' ');
    130a:	20 e2       	ldi	r18, 0x20	; 32
    130c:	46 e0       	ldi	r20, 0x06	; 6
    130e:	be 01       	movw	r22, r28
    1310:	6f 5f       	subi	r22, 0xFF	; 255
    1312:	7f 4f       	sbci	r23, 0xFF	; 255
    1314:	6e df       	rcall	.-292    	; 0x11f2 <u16toa_align_right>
	USART_sendstr(str);
    1316:	ce 01       	movw	r24, r28
    1318:	01 96       	adiw	r24, 0x01	; 1
    131a:	76 d3       	rcall	.+1772   	; 0x1a08 <USART_sendstr>
}
    131c:	26 96       	adiw	r28, 0x06	; 6
    131e:	0f b6       	in	r0, 0x3f	; 63
    1320:	f8 94       	cli
    1322:	de bf       	out	0x3e, r29	; 62
    1324:	0f be       	out	0x3f, r0	; 63
    1326:	cd bf       	out	0x3d, r28	; 61
    1328:	df 91       	pop	r29
    132a:	cf 91       	pop	r28
    132c:	08 95       	ret

0000132e <init_system_io>:
//extern void powTest(void);

void init_system_io()
{
	// Setup Port D
	PORTD = 0;//(1<<PD_SYNCA | 1<<PD_SYNCB);
    132e:	12 ba       	out	0x12, r1	; 18
	DDRD = (1<<PD_TXD | 1<<PD_M1 | 1<<PD_M2 | 1<<PD_HEATER | 1<<PD_HEAT_INDIC );
    1330:	8e e3       	ldi	r24, 0x3E	; 62
    1332:	81 bb       	out	0x11, r24	; 17
	
	// Setup Port B
	PORTB = 0;
    1334:	18 ba       	out	0x18, r1	; 24
	DDRB = (1<<PB_BEEPER | 1<<PB_LED_DOUT | 1<<PB_LED_CLK | 1<<PB_SEGF | 1<<PB_SEGG | 1<<PB_SEGH);
    1336:	8f e3       	ldi	r24, 0x3F	; 63
    1338:	87 bb       	out	0x17, r24	; 23
	
	PORTC = 0;
    133a:	15 ba       	out	0x15, r1	; 21
	DDRC = (1<<PC_SEGA | 1<<PC_SEGB | 1<<PC_SEGC | 1<<PC_SEGD | 1<<PC_SEGE);	
    133c:	8f e1       	ldi	r24, 0x1F	; 31
    133e:	84 bb       	out	0x14, r24	; 20

	// Setup timer0
	// 1/1024 prescaler, T=64us @16MHz
	TCCR0 = (1<<CS02 | 0<<CS01 | 1<<CS00);
    1340:	85 e0       	ldi	r24, 0x05	; 5
    1342:	83 bf       	out	0x33, r24	; 51
	TCNT0 = 0;
    1344:	12 be       	out	0x32, r1	; 50
	// Clear interrupt flag
	TIFR |= (1<<TOV0);
    1346:	88 b7       	in	r24, 0x38	; 56
    1348:	81 60       	ori	r24, 0x01	; 1
    134a:	88 bf       	out	0x38, r24	; 56
	// Enable interrupts from timer 0
	TIMSK |= (1<<TOIE0);
    134c:	89 b7       	in	r24, 0x39	; 57
    134e:	81 60       	ori	r24, 0x01	; 1
    1350:	89 bf       	out	0x39, r24	; 57
	
	// Setup timer2 as 1ms system frequency generator
	// 1/64 prescaler, CTC mode, OC2 disconnected
	TCCR2 = (1<<CS22 | 1<<WGM21);
    1352:	8c e0       	ldi	r24, 0x0C	; 12
    1354:	85 bd       	out	0x25, r24	; 37
	OCR2 = 249;						// 1ms @ 16MHz
    1356:	89 ef       	ldi	r24, 0xF9	; 249
    1358:	83 bd       	out	0x23, r24	; 35
	TIMSK |= (1<<OCIE2);
    135a:	89 b7       	in	r24, 0x39	; 57
    135c:	80 68       	ori	r24, 0x80	; 128
    135e:	89 bf       	out	0x39, r24	; 57
	
	// Setup timer1 as beeper frequency generator
	// CTC mode, 1/64 prescaler
	TCCR1A = 0;
    1360:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = (1<<WGM12 | 1<<CS11 | 1<<CS10);
    1362:	8b e0       	ldi	r24, 0x0B	; 11
    1364:	8e bd       	out	0x2e, r24	; 46
	// 1kHz beeper frequency default
	OCR1A = 127;
    1366:	8f e7       	ldi	r24, 0x7F	; 127
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	9b bd       	out	0x2b, r25	; 43
    136c:	8a bd       	out	0x2a, r24	; 42

	// Setup AC sync comparator
	// Interrupt on output toggle
	ACSR = (1<<ACIE | 0<<ACIS1 | 0<<ACIS0);
    136e:	88 e0       	ldi	r24, 0x08	; 8
    1370:	88 b9       	out	0x08, r24	; 8
	
	// Setup ADC
	// Internal Vref + cap, input ADC5, 
	ADMUX = (1<<REFS1 | 1<<REFS0 | 0<<MUX3 | 1<<MUX2 | 0<<MUX1 | 1<<MUX0 );
    1372:	85 ec       	ldi	r24, 0xC5	; 197
    1374:	87 b9       	out	0x07, r24	; 7
	// Prescaler = 128
	ADCSRA = (1<<ADEN |/* 1<<ADFR |*/  1<<ADIE | 1<<ADPS2 | 1<<ADPS1 | 1<<ADPS0);
    1376:	8f e8       	ldi	r24, 0x8F	; 143
    1378:	86 b9       	out	0x06, r24	; 6
	
	// Setup USART
	// Double speed
	UCSRA = (1<<U2X);
    137a:	82 e0       	ldi	r24, 0x02	; 2
    137c:	8b b9       	out	0x0b, r24	; 11
	UCSRB = (1<<RXEN | 1<<TXEN | 0<<UCSZ2);
    137e:	88 e1       	ldi	r24, 0x18	; 24
    1380:	8a b9       	out	0x0a, r24	; 10
	// No parity, 1 stop bit, 8 bit
	UCSRC = (1<<URSEL | 0<<UPM1 | 0<<UPM0 | 0<<USBS | 1<<UCSZ1 | 1<<UCSZ0);
    1382:	86 e8       	ldi	r24, 0x86	; 134
    1384:	80 bd       	out	0x20, r24	; 32
	// 57600 @16MHz, 2x
	UBRRH=0x00;
    1386:	10 bc       	out	0x20, r1	; 32
	UBRRL=0x22;
    1388:	82 e2       	ldi	r24, 0x22	; 34
    138a:	89 b9       	out	0x09, r24	; 9
    138c:	08 95       	ret

0000138e <main>:
}



int main(void)
{
    138e:	cf 93       	push	r28
    1390:	df 93       	push	r29
    1392:	1f 92       	push	r1
    1394:	cd b7       	in	r28, 0x3d	; 61
    1396:	de b7       	in	r29, 0x3e	; 62
	volatile char str[12];
	volatile uint8_t temp8u = 0x00;
    1398:	19 82       	std	Y+1, r1	; 0x01
	volatile uint16_t temp16u;
	
	// Initialize MCU IO
	init_system_io();
    139a:	c9 df       	rcall	.-110    	; 0x132e <init_system_io>
	// Restore params from EEPROM
	restoreGlobalParams();
    139c:	9b da       	rcall	.-2762   	; 0x8d4 <restoreGlobalParams>
	// Calibrate ADC coefficients using restored params
	calculateCoeffs();
    139e:	3c d7       	rcall	.+3704   	; 0x2218 <__data_load_end+0x5e6>
	// Initialize LED indicator
	initLedIndicator();
    13a0:	82 db       	rcall	.-2300   	; 0xaa6 <initLedIndicator>
	// Clear comparator interrupt flag to prevent false triggering
	ACSR |= (1<<ACI);
    13a2:	44 9a       	sbi	0x08, 4	; 8
	sei();
    13a4:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    13a6:	2f ef       	ldi	r18, 0xFF	; 255
    13a8:	80 e7       	ldi	r24, 0x70	; 112
    13aa:	92 e0       	ldi	r25, 0x02	; 2
    13ac:	21 50       	subi	r18, 0x01	; 1
    13ae:	80 40       	sbci	r24, 0x00	; 0
    13b0:	90 40       	sbci	r25, 0x00	; 0
    13b2:	e1 f7       	brne	.-8      	; 0x13ac <main+0x1e>
    13b4:	00 c0       	rjmp	.+0      	; 0x13b6 <main+0x28>
    13b6:	00 00       	nop
	// Safety delay for power part
	_delay_ms(50);
	// Check AC line
	if(p_state == 0x0F) 	
    13b8:	80 91 8f 00 	lds	r24, 0x008F
    13bc:	8f 30       	cpi	r24, 0x0F	; 15
    13be:	69 f4       	brne	.+26     	; 0x13da <main+0x4c>
	{
		// Power control state machine has not changed - sync has not been detected
		printLedBuffer(0,"AC ERR");
    13c0:	64 ed       	ldi	r22, 0xD4	; 212
    13c2:	70 e0       	ldi	r23, 0x00	; 0
    13c4:	80 e0       	ldi	r24, 0x00	; 0
    13c6:	92 db       	rcall	.-2268   	; 0xaec <printLedBuffer>
    13c8:	2f ef       	ldi	r18, 0xFF	; 255
    13ca:	83 ed       	ldi	r24, 0xD3	; 211
    13cc:	90 e3       	ldi	r25, 0x30	; 48
    13ce:	21 50       	subi	r18, 0x01	; 1
    13d0:	80 40       	sbci	r24, 0x00	; 0
    13d2:	90 40       	sbci	r25, 0x00	; 0
    13d4:	e1 f7       	brne	.-8      	; 0x13ce <main+0x40>
    13d6:	00 c0       	rjmp	.+0      	; 0x13d8 <main+0x4a>
    13d8:	00 00       	nop
		_delay_ms(1000);
	}
	// Initialize menu
	InitMenu();
    13da:	93 de       	rcall	.-730    	; 0x1102 <InitMenu>
	// Beep
	SetBeeperFreq(1000);
    13dc:	88 ee       	ldi	r24, 0xE8	; 232
    13de:	93 e0       	ldi	r25, 0x03	; 3
    13e0:	a2 d2       	rcall	.+1348   	; 0x1926 <SetBeeperFreq>
	StartBeep(200);
    13e2:	88 ec       	ldi	r24, 0xC8	; 200
    13e4:	90 e0       	ldi	r25, 0x00	; 0
    13e6:	bf d2       	rcall	.+1406   	; 0x1966 <StartBeep>
	// ---- TODO: check out when PID will be finished ----//
	// When we get here, few ADC counts have been sampled.
	update_normalized_adc();
    13e8:	b8 d7       	rcall	.+3952   	; 0x235a <__data_load_end+0x728>
	// Call PID controller function in order to initialize it's internal structures
	heaterInit();
    13ea:	1f da       	rcall	.-3010   	; 0x82a <heaterInit>
	//----------------------------------------------------//
	// Start rotating
	setMotorDirection(ROLL_FWD);
    13ec:	81 e0       	ldi	r24, 0x01	; 1
    13ee:	89 d0       	rcall	.+274    	; 0x1502 <setMotorDirection>
	// Clear timer
	menuUpdateTimer.FOvfl = 0;
    13f0:	80 91 98 00 	lds	r24, 0x0098
    13f4:	8f 7b       	andi	r24, 0xBF	; 191
    13f6:	80 93 98 00 	sts	0x0098, r24

    while(1)
    {
		
		if (menuUpdateTimer.FOvfl)
    13fa:	80 91 98 00 	lds	r24, 0x0098
    13fe:	86 ff       	sbrs	r24, 6
    1400:	fc cf       	rjmp	.-8      	; 0x13fa <main+0x6c>
		{
			//--------- BUTTONS ----------//
			
			// Get new button state
			process_buttons();
    1402:	5c d8       	rcall	.-3912   	; 0x4bc <process_buttons>
			
			// Give sound feedback
			if (button_state & BL_MENU)
    1404:	80 91 ea 00 	lds	r24, 0x00EA
    1408:	90 91 eb 00 	lds	r25, 0x00EB
    140c:	91 ff       	sbrs	r25, 1
    140e:	03 c0       	rjmp	.+6      	; 0x1416 <main+0x88>
			{
				SetBeeperFreq(800);
    1410:	80 e2       	ldi	r24, 0x20	; 32
    1412:	93 e0       	ldi	r25, 0x03	; 3
    1414:	06 c0       	rjmp	.+12     	; 0x1422 <main+0x94>
				StartBeep(40);
			}
			else if (button_action_down & (BD_MENU | BD_UP | BD_DOWN | BD_HEATCTRL))
    1416:	80 91 e9 00 	lds	r24, 0x00E9
    141a:	81 7e       	andi	r24, 0xE1	; 225
    141c:	31 f0       	breq	.+12     	; 0x142a <main+0x9c>
			{
				SetBeeperFreq(1000);
    141e:	88 ee       	ldi	r24, 0xE8	; 232
    1420:	93 e0       	ldi	r25, 0x03	; 3
    1422:	81 d2       	rcall	.+1282   	; 0x1926 <SetBeeperFreq>
				StartBeep(40);
    1424:	88 e2       	ldi	r24, 0x28	; 40
    1426:	90 e0       	ldi	r25, 0x00	; 0
    1428:	9e d2       	rcall	.+1340   	; 0x1966 <StartBeep>
			}	
			// Direction control buttons sounds get special processing at processRollControl()
			
			// If any button is pressed, restart power off interval
			if (button_action_down)
    142a:	80 91 e9 00 	lds	r24, 0x00E9
    142e:	81 11       	cpse	r24, r1
				resetAutoPowerOffCounter();
    1430:	77 d2       	rcall	.+1262   	; 0x1920 <resetAutoPowerOffCounter>
			
			//---------- TIMERS ----------//
			
			// Process timers and time counters - it is important to call
			// this function before menu and power controls processing
			processSystemTimers();
    1432:	0f d2       	rcall	.+1054   	; 0x1852 <processSystemTimers>

			// Warn user about near auto powering off
			if (sys_timers.flags & AUTOPOFF_SOON)
    1434:	80 91 97 00 	lds	r24, 0x0097
    1438:	83 ff       	sbrs	r24, 3
    143a:	06 c0       	rjmp	.+12     	; 0x1448 <main+0xba>
			{
				SetBeeperFreq(1200);
    143c:	80 eb       	ldi	r24, 0xB0	; 176
    143e:	94 e0       	ldi	r25, 0x04	; 4
    1440:	72 d2       	rcall	.+1252   	; 0x1926 <SetBeeperFreq>
				StartBeep(200);
    1442:	88 ec       	ldi	r24, 0xC8	; 200
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	8f d2       	rcall	.+1310   	; 0x1966 <StartBeep>
			}		
			
			//----------- ADC ------------//
			
			// Get new temperature measurement
			update_normalized_adc();			
    1448:	88 d7       	rcall	.+3856   	; 0x235a <__data_load_end+0x728>
		
			// Update indicated Celsius degree
			if (sys_timers.flags & EXPIRED_CELSIUS)
    144a:	80 91 97 00 	lds	r24, 0x0097
    144e:	80 fd       	sbrc	r24, 0
				update_Celsius();		
    1450:	30 d7       	rcall	.+3680   	; 0x22b2 <__data_load_end+0x680>
			
			//----------- MENU -----------//		
				
			// Process user menu states, settings and indication
			processMenu();
    1452:	60 de       	rcall	.-832    	; 0x1114 <processMenu>
			
			//--------- CONTROLS ---------//		
			
			// Process cyclic rolling, direction control
			processRollControl();	
    1454:	78 d8       	rcall	.-3856   	; 0x546 <processRollControl>
			
			// Process heater regulation
			processHeaterControl();
    1456:	7f d9       	rcall	.-3330   	; 0x756 <processHeaterControl>
		
			// Process heater events and warnings
			processHeaterAlerts();
    1458:	ef d9       	rcall	.-3106   	; 0x838 <processHeaterAlerts>
			
			
			
			//------- LOG to UART --------//	
			if (sys_timers.flags & EXPIRED_LOG)
    145a:	80 91 97 00 	lds	r24, 0x0097
    145e:	85 ff       	sbrs	r24, 5
    1460:	c7 cf       	rjmp	.-114    	; 0x13f0 <main+0x62>
			{
				
				logU16p(adc_celsius);					// Actual temp Celsius
    1462:	80 91 47 01 	lds	r24, 0x0147
    1466:	90 91 48 01 	lds	r25, 0x0148
    146a:	48 df       	rcall	.-368    	; 0x12fc <logU16p>
				logU16p(adc_oversampled);				// Actual temp (ADC), oversampled
    146c:	80 91 1b 01 	lds	r24, 0x011B
    1470:	90 91 1c 01 	lds	r25, 0x011C
    1474:	43 df       	rcall	.-378    	; 0x12fc <logU16p>
				logU16p(adc_filtered);					// Actual temp (ADC), oversampled, filtered
    1476:	80 91 19 01 	lds	r24, 0x0119
    147a:	90 91 1a 01 	lds	r25, 0x011A
    147e:	3e df       	rcall	.-388    	; 0x12fc <logU16p>
				USART_sendstr("    ");
    1480:	8f ec       	ldi	r24, 0xCF	; 207
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	c1 d2       	rcall	.+1410   	; 0x1a08 <USART_sendstr>
				
				logU16p(dbg_SetPointPID);				// Temp setting, as input to PID
    1486:	80 91 8e 01 	lds	r24, 0x018E
    148a:	90 91 8f 01 	lds	r25, 0x018F
    148e:	36 df       	rcall	.-404    	; 0x12fc <logU16p>
				logU16p(dbg_RealTempPID);				// Real temp, sampled for PID input
    1490:	80 91 80 01 	lds	r24, 0x0180
    1494:	90 91 81 01 	lds	r25, 0x0181
    1498:	31 df       	rcall	.-414    	; 0x12fc <logU16p>
				
				logI32p(dbg_PID_p_term);				// p term
    149a:	60 91 7e 01 	lds	r22, 0x017E
    149e:	70 91 7f 01 	lds	r23, 0x017F
    14a2:	88 27       	eor	r24, r24
    14a4:	77 fd       	sbrc	r23, 7
    14a6:	80 95       	com	r24
    14a8:	98 2f       	mov	r25, r24
    14aa:	0d df       	rcall	.-486    	; 0x12c6 <logI32p>
				logI32p(dbg_PID_d_term);				// d term
    14ac:	60 91 8c 01 	lds	r22, 0x018C
    14b0:	70 91 8d 01 	lds	r23, 0x018D
    14b4:	88 27       	eor	r24, r24
    14b6:	77 fd       	sbrc	r23, 7
    14b8:	80 95       	com	r24
    14ba:	98 2f       	mov	r25, r24
    14bc:	04 df       	rcall	.-504    	; 0x12c6 <logI32p>
				logI32p(dbg_PID_i_term);				// i term
    14be:	60 91 82 01 	lds	r22, 0x0182
    14c2:	70 91 83 01 	lds	r23, 0x0183
    14c6:	88 27       	eor	r24, r24
    14c8:	77 fd       	sbrc	r23, 7
    14ca:	80 95       	com	r24
    14cc:	98 2f       	mov	r25, r24
    14ce:	fb de       	rcall	.-522    	; 0x12c6 <logI32p>
				USART_sendstr("    ");
    14d0:	8f ec       	ldi	r24, 0xCF	; 207
    14d2:	90 e0       	ldi	r25, 0x00	; 0
    14d4:	99 d2       	rcall	.+1330   	; 0x1a08 <USART_sendstr>
				
				logU16p(dbg_PID_output);				// PID output
    14d6:	80 91 7c 01 	lds	r24, 0x017C
    14da:	90 91 7d 01 	lds	r25, 0x017D
    14de:	0e df       	rcall	.-484    	; 0x12fc <logU16p>
			
				USART_sendstr("\n\r");
    14e0:	8b ed       	ldi	r24, 0xDB	; 219
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	91 d2       	rcall	.+1314   	; 0x1a08 <USART_sendstr>
    14e6:	84 cf       	rjmp	.-248    	; 0x13f0 <main+0x62>

000014e8 <setHeaterPower>:

// User function to control heater intensity
void setHeaterPower(uint16_t value)
{
	// Disable interrupts from analog comparator
	ACSR &= ~(1<<ACIE);
    14e8:	43 98       	cbi	0x08, 3	; 8
	// Update value
	heaterPower = (value > HEATER_MAX_POWER) ? HEATER_MAX_POWER : value;
    14ea:	9c 01       	movw	r18, r24
    14ec:	85 36       	cpi	r24, 0x65	; 101
    14ee:	91 05       	cpc	r25, r1
    14f0:	10 f0       	brcs	.+4      	; 0x14f6 <setHeaterPower+0xe>
    14f2:	24 e6       	ldi	r18, 0x64	; 100
    14f4:	30 e0       	ldi	r19, 0x00	; 0
    14f6:	30 93 0c 01 	sts	0x010C, r19
    14fa:	20 93 0b 01 	sts	0x010B, r18
	// Reenable interrupts
	ACSR |= (1<<ACIE);
    14fe:	43 9a       	sbi	0x08, 3	; 8
    1500:	08 95       	ret

00001502 <setMotorDirection>:

// User function to control motor rotation
void setMotorDirection(uint8_t dir)
{
	// Disable interrupts from timer0 
	TIMSK &= ~(1<<TOIE0);
    1502:	99 b7       	in	r25, 0x39	; 57
    1504:	9e 7f       	andi	r25, 0xFE	; 254
    1506:	99 bf       	out	0x39, r25	; 57
		
	newDirReq = dir;	// save new direction request
    1508:	80 93 0d 01 	sts	0x010D, r24
	dirChangedMask = ~ROLL_DIR_CHANGED;
    150c:	9f ed       	ldi	r25, 0xDF	; 223
    150e:	90 93 90 00 	sts	0x0090, r25
	
	if (dir & ROLL_FWD)
    1512:	80 ff       	sbrs	r24, 0
    1514:	09 c0       	rjmp	.+18     	; 0x1528 <setMotorDirection+0x26>
		bottomPoint = rollPoint;  
    1516:	80 91 0e 01 	lds	r24, 0x010E
    151a:	90 91 0f 01 	lds	r25, 0x010F
    151e:	90 93 11 01 	sts	0x0111, r25
    1522:	80 93 10 01 	sts	0x0110, r24
    1526:	0a c0       	rjmp	.+20     	; 0x153c <setMotorDirection+0x3a>
	else if (dir & ROLL_REV)
    1528:	81 ff       	sbrs	r24, 1
    152a:	08 c0       	rjmp	.+16     	; 0x153c <setMotorDirection+0x3a>
		topPoint = rollPoint;
    152c:	80 91 0e 01 	lds	r24, 0x010E
    1530:	90 91 0f 01 	lds	r25, 0x010F
    1534:	90 93 13 01 	sts	0x0113, r25
    1538:	80 93 12 01 	sts	0x0112, r24

	// Enable interrupts from timer 0
	TIMSK |= (1<<TOIE0);	
    153c:	89 b7       	in	r24, 0x39	; 57
    153e:	81 60       	ori	r24, 0x01	; 1
    1540:	89 bf       	out	0x39, r24	; 57
    1542:	08 95       	ret

00001544 <stopCycleRolling>:
}

void stopCycleRolling(uint8_t doResetPoints)
{
	// Disable interrupts from timer0 
	TIMSK &= ~(1<<TOIE0);
    1544:	99 b7       	in	r25, 0x39	; 57
    1546:	9e 7f       	andi	r25, 0xFE	; 254
    1548:	99 bf       	out	0x39, r25	; 57
	
	rollState &= ~ROLL_CYCLE;
    154a:	90 91 0a 01 	lds	r25, 0x010A
    154e:	9b 7f       	andi	r25, 0xFB	; 251
    1550:	90 93 0a 01 	sts	0x010A, r25
	if (doResetPoints)
    1554:	88 23       	and	r24, r24
    1556:	71 f0       	breq	.+28     	; 0x1574 <stopCycleRolling+0x30>
	{
		topPoint = bottomPoint = rollPoint;
    1558:	80 91 0e 01 	lds	r24, 0x010E
    155c:	90 91 0f 01 	lds	r25, 0x010F
    1560:	90 93 11 01 	sts	0x0111, r25
    1564:	80 93 10 01 	sts	0x0110, r24
    1568:	90 93 13 01 	sts	0x0113, r25
    156c:	80 93 12 01 	sts	0x0112, r24
		activeRollCycle = 0;	
    1570:	10 92 09 01 	sts	0x0109, r1
	}		
	
	// Enable interrupts from timer 0
	TIMSK |= (1<<TOIE0);
    1574:	89 b7       	in	r24, 0x39	; 57
    1576:	81 60       	ori	r24, 0x01	; 1
    1578:	89 bf       	out	0x39, r24	; 57
    157a:	08 95       	ret

0000157c <isTopPointValid>:



uint8_t isTopPointValid(void)
{
	return (	(int16_t)(topPoint - rollPoint) >= 0 );
    157c:	80 91 12 01 	lds	r24, 0x0112
    1580:	90 91 13 01 	lds	r25, 0x0113
    1584:	20 91 0e 01 	lds	r18, 0x010E
    1588:	30 91 0f 01 	lds	r19, 0x010F
    158c:	82 1b       	sub	r24, r18
    158e:	93 0b       	sbc	r25, r19
    1590:	89 2f       	mov	r24, r25
    1592:	80 95       	com	r24
}
    1594:	88 1f       	adc	r24, r24
    1596:	88 27       	eor	r24, r24
    1598:	88 1f       	adc	r24, r24
    159a:	08 95       	ret

0000159c <isBottomPointValid>:

uint8_t isBottomPointValid(void)
{
	return (	(int16_t)(rollPoint - bottomPoint) >= 0	);
    159c:	80 91 0e 01 	lds	r24, 0x010E
    15a0:	90 91 0f 01 	lds	r25, 0x010F
    15a4:	20 91 10 01 	lds	r18, 0x0110
    15a8:	30 91 11 01 	lds	r19, 0x0111
    15ac:	82 1b       	sub	r24, r18
    15ae:	93 0b       	sbc	r25, r19
    15b0:	89 2f       	mov	r24, r25
    15b2:	80 95       	com	r24
}
    15b4:	88 1f       	adc	r24, r24
    15b6:	88 27       	eor	r24, r24
    15b8:	88 1f       	adc	r24, r24
    15ba:	08 95       	ret

000015bc <startCycleRolling>:


uint8_t startCycleRolling(void)
{
	// Disable interrupts from timer0 
	TIMSK &= ~(1<<TOIE0);
    15bc:	89 b7       	in	r24, 0x39	; 57
    15be:	8e 7f       	andi	r24, 0xFE	; 254
    15c0:	89 bf       	out	0x39, r24	; 57
	
	if ( isTopPointValid() && isBottomPointValid() )
    15c2:	dc df       	rcall	.-72     	; 0x157c <isTopPointValid>
    15c4:	88 23       	and	r24, r24
    15c6:	59 f0       	breq	.+22     	; 0x15de <startCycleRolling+0x22>
    15c8:	e9 df       	rcall	.-46     	; 0x159c <isBottomPointValid>
    15ca:	88 23       	and	r24, r24
    15cc:	41 f0       	breq	.+16     	; 0x15de <startCycleRolling+0x22>
	{
		rollState |= ROLL_CYCLE;
    15ce:	80 91 0a 01 	lds	r24, 0x010A
    15d2:	84 60       	ori	r24, 0x04	; 4
    15d4:	80 93 0a 01 	sts	0x010A, r24
		activeRollCycle = 1;
    15d8:	81 e0       	ldi	r24, 0x01	; 1
    15da:	80 93 09 01 	sts	0x0109, r24
	}
	
	// Enable interrupts from timer 0
	TIMSK |= (1<<TOIE0);
    15de:	89 b7       	in	r24, 0x39	; 57
    15e0:	81 60       	ori	r24, 0x01	; 1
    15e2:	89 bf       	out	0x39, r24	; 57
	
	return (rollState & ROLL_CYCLE);
    15e4:	80 91 0a 01 	lds	r24, 0x010A
}
    15e8:	84 70       	andi	r24, 0x04	; 4
    15ea:	08 95       	ret

000015ec <__vector_16>:




ISR(ANA_COMP_vect)
{
    15ec:	1f 92       	push	r1
    15ee:	0f 92       	push	r0
    15f0:	0f b6       	in	r0, 0x3f	; 63
    15f2:	0f 92       	push	r0
    15f4:	11 24       	eor	r1, r1
    15f6:	2f 93       	push	r18
    15f8:	3f 93       	push	r19
    15fa:	4f 93       	push	r20
    15fc:	5f 93       	push	r21
    15fe:	8f 93       	push	r24
    1600:	9f 93       	push	r25
	static uint16_t sigma = 0;
	uint16_t delta;
	
	// Once triggered, disable further comparator interrupt
	ACSR &= ~(1<<ACIE);
    1602:	43 98       	cbi	0x08, 3	; 8
	
	// Process heater delta-sigma modulator
	if (sigma >= HEATER_MAX_POWER)
    1604:	40 91 14 01 	lds	r20, 0x0114
    1608:	50 91 15 01 	lds	r21, 0x0115
    160c:	44 36       	cpi	r20, 0x64	; 100
    160e:	51 05       	cpc	r21, r1
    1610:	30 f0       	brcs	.+12     	; 0x161e <__vector_16+0x32>
	{
		PORTD |= (1<<PD_HEATER | 1<<PD_HEAT_INDIC);
    1612:	82 b3       	in	r24, 0x12	; 18
    1614:	80 63       	ori	r24, 0x30	; 48
    1616:	82 bb       	out	0x12, r24	; 18
		delta = -HEATER_MAX_POWER;	
    1618:	2c e9       	ldi	r18, 0x9C	; 156
    161a:	3f ef       	ldi	r19, 0xFF	; 255
    161c:	03 c0       	rjmp	.+6      	; 0x1624 <__vector_16+0x38>
	}		
	else
	{
		PORTD &= ~(1<<PD_HEAT_INDIC);
    161e:	95 98       	cbi	0x12, 5	; 18
		delta = 0;
    1620:	20 e0       	ldi	r18, 0x00	; 0
    1622:	30 e0       	ldi	r19, 0x00	; 0
	}
	sigma += delta + heaterPower;	
    1624:	80 91 0b 01 	lds	r24, 0x010B
    1628:	90 91 0c 01 	lds	r25, 0x010C
    162c:	84 0f       	add	r24, r20
    162e:	95 1f       	adc	r25, r21
    1630:	82 0f       	add	r24, r18
    1632:	93 1f       	adc	r25, r19
    1634:	90 93 15 01 	sts	0x0115, r25
    1638:	80 93 14 01 	sts	0x0114, r24
	
	// Reprogram timer0
	TCNT0 = 256 - TRIAC_IMPULSE_TIME;		// Triac gate impulse time
    163c:	86 ef       	ldi	r24, 0xF6	; 246
    163e:	82 bf       	out	0x32, r24	; 50
	TIFR |= (1<<TOV0);						// Clear interrupt flag
    1640:	88 b7       	in	r24, 0x38	; 56
    1642:	81 60       	ori	r24, 0x01	; 1
    1644:	88 bf       	out	0x38, r24	; 56
	// Modify state	
	p_state &= ~STATE_MASK;					// Start new state machine cycle
    1646:	80 91 8f 00 	lds	r24, 0x008F
    164a:	80 7f       	andi	r24, 0xF0	; 240
	p_state ^= HALF_PERIOD_FLAG;			// Toggle flag
    164c:	80 58       	subi	r24, 0x80	; 128
    164e:	80 93 8f 00 	sts	0x008F, r24
	
}
    1652:	9f 91       	pop	r25
    1654:	8f 91       	pop	r24
    1656:	5f 91       	pop	r21
    1658:	4f 91       	pop	r20
    165a:	3f 91       	pop	r19
    165c:	2f 91       	pop	r18
    165e:	0f 90       	pop	r0
    1660:	0f be       	out	0x3f, r0	; 63
    1662:	0f 90       	pop	r0
    1664:	1f 90       	pop	r1
    1666:	18 95       	reti

00001668 <__vector_9>:



ISR(TIMER0_OVF_vect)
{
    1668:	1f 92       	push	r1
    166a:	0f 92       	push	r0
    166c:	0f b6       	in	r0, 0x3f	; 63
    166e:	0f 92       	push	r0
    1670:	11 24       	eor	r1, r1
    1672:	2f 93       	push	r18
    1674:	3f 93       	push	r19
    1676:	4f 93       	push	r20
    1678:	5f 93       	push	r21
    167a:	6f 93       	push	r22
    167c:	7f 93       	push	r23
    167e:	8f 93       	push	r24
    1680:	9f 93       	push	r25
    1682:	af 93       	push	r26
    1684:	bf 93       	push	r27
    1686:	ef 93       	push	r30
    1688:	ff 93       	push	r31
	uint8_t temp;
	
	switch(p_state & STATE_MASK)
    168a:	80 91 8f 00 	lds	r24, 0x008F
    168e:	8f 70       	andi	r24, 0x0F	; 15
    1690:	81 30       	cpi	r24, 0x01	; 1
    1692:	49 f0       	breq	.+18     	; 0x16a6 <__vector_9+0x3e>
    1694:	28 f0       	brcs	.+10     	; 0x16a0 <__vector_9+0x38>
    1696:	82 30       	cpi	r24, 0x02	; 2
    1698:	49 f0       	breq	.+18     	; 0x16ac <__vector_9+0x44>
    169a:	83 30       	cpi	r24, 0x03	; 3
    169c:	69 f4       	brne	.+26     	; 0x16b8 <__vector_9+0x50>
    169e:	0b c0       	rjmp	.+22     	; 0x16b6 <__vector_9+0x4e>
	{
		// TRIAC_IMPULSE_TIME finished
		case 0x00:
			// Turn off heater TRIAC
			PORTD &= ~(1<<PD_HEATER);
    16a0:	94 98       	cbi	0x12, 4	; 18
			TCNT0 = 256 - (QUATER_PERIOD_TIME - TRIAC_IMPULSE_TIME);
    16a2:	8c eb       	ldi	r24, 0xBC	; 188
    16a4:	01 c0       	rjmp	.+2      	; 0x16a8 <__vector_9+0x40>
			break;
		// QUATER_PERIOD_TIME finished	
		case 0x01:	
			TCNT0 = 256 - (SYNC_IGNORE_TIME - QUATER_PERIOD_TIME);
    16a6:	82 ec       	ldi	r24, 0xC2	; 194
    16a8:	82 bf       	out	0x32, r24	; 50
			break;	
    16aa:	06 c0       	rjmp	.+12     	; 0x16b8 <__vector_9+0x50>
		// SYNC_IGNORE_TIME finished	
		case 0x02:
			TCNT0 = 256 - SYNC_LOST_TIMEOUT;
    16ac:	80 ee       	ldi	r24, 0xE0	; 224
    16ae:	82 bf       	out	0x32, r24	; 50
			// Clear flag and enable interrupt from analog comparator
			ACSR |= (1<<ACI);
    16b0:	44 9a       	sbi	0x08, 4	; 8
			ACSR |= (1<<ACIE);
    16b2:	43 9a       	sbi	0x08, 3	; 8
			break;
    16b4:	01 c0       	rjmp	.+2      	; 0x16b8 <__vector_9+0x50>
		// SYNC_LOST_TIMEOUT finished
		case 0x03:
			// Error - sync is lost. It means that device has been disconnected from AC line.
			// Disable all power-consuming devices like LEDs and save user settings to EEPROM.
			exitPowerOff();
    16b6:	23 d9       	rcall	.-3514   	; 0x8fe <exitPowerOff>
			// Sync is not present - do nothing
			break;
	}	

	// Full period check
	if ((p_state & (HALF_PERIOD_FLAG | STATE_MASK)) == (HALF_PERIOD_FLAG | 0x01))
    16b8:	80 91 8f 00 	lds	r24, 0x008F
    16bc:	8f 78       	andi	r24, 0x8F	; 143
    16be:	81 38       	cpi	r24, 0x81	; 129
    16c0:	09 f0       	breq	.+2      	; 0x16c4 <__vector_9+0x5c>
    16c2:	81 c0       	rjmp	.+258    	; 0x17c6 <__vector_9+0x15e>
	{
		// Quater AC line period is done. Update motor controls.
		temp = PORTD;
    16c4:	82 b3       	in	r24, 0x12	; 18
		temp &= ~(1<<PD_M1 | 1<<PD_M2);
    16c6:	83 7f       	andi	r24, 0xF3	; 243
		if ( rollState & SKIP_CURRENT_MOTOR_CTRL )
    16c8:	90 91 0a 01 	lds	r25, 0x010A
    16cc:	93 ff       	sbrs	r25, 3
    16ce:	05 c0       	rjmp	.+10     	; 0x16da <__vector_9+0x72>
		{
			// Direction control changed. Skip current period to allow TRIACs fully close
			rollState &= ~SKIP_CURRENT_MOTOR_CTRL;
    16d0:	97 7f       	andi	r25, 0xF7	; 247
    16d2:	90 93 0a 01 	sts	0x010A, r25
			PORTD = temp; 	
    16d6:	82 bb       	out	0x12, r24	; 18
    16d8:	76 c0       	rjmp	.+236    	; 0x17c6 <__vector_9+0x15e>
		}
		else
		{
			// Apply direction control 
			if (rollState & ROLL_FWD)
    16da:	90 ff       	sbrs	r25, 0
    16dc:	02 c0       	rjmp	.+4      	; 0x16e2 <__vector_9+0x7a>
				temp |= (1<<PD_M1);
    16de:	84 60       	ori	r24, 0x04	; 4
    16e0:	02 c0       	rjmp	.+4      	; 0x16e6 <__vector_9+0x7e>
			else if (rollState & ROLL_REV)
    16e2:	91 fd       	sbrc	r25, 1
				temp |= (1<<PD_M2);
    16e4:	88 60       	ori	r24, 0x08	; 8
			PORTD = temp; 
    16e6:	82 bb       	out	0x12, r24	; 18
// Function to process rolling - sets rotation direction for next period
// Call once per each AC line period
static inline void controlRolling()
{
	// Process cycle rolling
	switch(rollState & (ROLL_FWD | ROLL_REV | ROLL_CYCLE))
    16e8:	40 91 0a 01 	lds	r20, 0x010A
    16ec:	84 2f       	mov	r24, r20
    16ee:	87 70       	andi	r24, 0x07	; 7
    16f0:	85 30       	cpi	r24, 0x05	; 5
    16f2:	19 f0       	breq	.+6      	; 0x16fa <__vector_9+0x92>
    16f4:	86 30       	cpi	r24, 0x06	; 6
    16f6:	e9 f5       	brne	.+122    	; 0x1772 <__vector_9+0x10a>
    16f8:	1d c0       	rjmp	.+58     	; 0x1734 <__vector_9+0xcc>
//---------------------------------------------//
//---------------------------------------------//

static inline uint8_t reachedTopPoint(void)
{
	return (	(int16_t)(topPoint - rollPoint) <= 0 );
    16fa:	80 91 12 01 	lds	r24, 0x0112
    16fe:	90 91 13 01 	lds	r25, 0x0113
    1702:	20 91 0e 01 	lds	r18, 0x010E
    1706:	30 91 0f 01 	lds	r19, 0x010F
    170a:	82 1b       	sub	r24, r18
    170c:	93 0b       	sbc	r25, r19
{
	// Process cycle rolling
	switch(rollState & (ROLL_FWD | ROLL_REV | ROLL_CYCLE))
	{
		case (ROLL_FWD | ROLL_CYCLE):
			if (reachedTopPoint())
    170e:	18 16       	cp	r1, r24
    1710:	19 06       	cpc	r1, r25
    1712:	7c f1       	brlt	.+94     	; 0x1772 <__vector_9+0x10a>
			{
				if (activeRollCycle >= p.rollCycleSet)	
    1714:	80 91 09 01 	lds	r24, 0x0109
    1718:	90 91 79 01 	lds	r25, 0x0179
    171c:	89 17       	cp	r24, r25
    171e:	28 f0       	brcs	.+10     	; 0x172a <__vector_9+0xc2>
				{
					// DONE!
					rollState &= ~ROLL_CYCLE;
    1720:	4b 7f       	andi	r20, 0xFB	; 251
					rollState |= CYCLE_ROLL_DONE;
    1722:	40 61       	ori	r20, 0x10	; 16
    1724:	40 93 0a 01 	sts	0x010A, r20
    1728:	24 c0       	rjmp	.+72     	; 0x1772 <__vector_9+0x10a>
				}
				else
				{
					activeRollCycle++;
    172a:	8f 5f       	subi	r24, 0xFF	; 255
    172c:	80 93 09 01 	sts	0x0109, r24
					// Change dir	
					newDirReq = ROLL_REV;				
    1730:	82 e0       	ldi	r24, 0x02	; 2
    1732:	1d c0       	rjmp	.+58     	; 0x176e <__vector_9+0x106>
	return (	(int16_t)(topPoint - rollPoint) <= 0 );
}

static inline uint8_t reachedBottomPoint(void)
{
	return (	(int16_t)(rollPoint - bottomPoint) <= 0 );
    1734:	80 91 0e 01 	lds	r24, 0x010E
    1738:	90 91 0f 01 	lds	r25, 0x010F
    173c:	20 91 10 01 	lds	r18, 0x0110
    1740:	30 91 11 01 	lds	r19, 0x0111
    1744:	82 1b       	sub	r24, r18
    1746:	93 0b       	sbc	r25, r19
				}
			}
			break;
		
		case (ROLL_REV | ROLL_CYCLE):	
			if (reachedBottomPoint())
    1748:	18 16       	cp	r1, r24
    174a:	19 06       	cpc	r1, r25
    174c:	94 f0       	brlt	.+36     	; 0x1772 <__vector_9+0x10a>
			{
				if (activeRollCycle >= p.rollCycleSet)	
    174e:	80 91 09 01 	lds	r24, 0x0109
    1752:	90 91 79 01 	lds	r25, 0x0179
    1756:	89 17       	cp	r24, r25
    1758:	30 f0       	brcs	.+12     	; 0x1766 <__vector_9+0xfe>
				{
					// DONE!
					rollState &= ~ROLL_CYCLE;
    175a:	84 2f       	mov	r24, r20
    175c:	8b 7f       	andi	r24, 0xFB	; 251
					rollState |= CYCLE_ROLL_DONE;
    175e:	80 61       	ori	r24, 0x10	; 16
    1760:	80 93 0a 01 	sts	0x010A, r24
    1764:	06 c0       	rjmp	.+12     	; 0x1772 <__vector_9+0x10a>
				}
				else
				{
					activeRollCycle++;
    1766:	8f 5f       	subi	r24, 0xFF	; 255
    1768:	80 93 09 01 	sts	0x0109, r24
					// Change dir	
					newDirReq = ROLL_FWD;
    176c:	81 e0       	ldi	r24, 0x01	; 1
    176e:	80 93 0d 01 	sts	0x010D, r24
		default:
			break;
	}
	
	// Process direction change
	if ((rollState ^ newDirReq) & (ROLL_FWD | ROLL_REV))
    1772:	20 91 0a 01 	lds	r18, 0x010A
    1776:	90 91 0d 01 	lds	r25, 0x010D
    177a:	89 2f       	mov	r24, r25
    177c:	82 27       	eor	r24, r18
    177e:	83 70       	andi	r24, 0x03	; 3
    1780:	19 f0       	breq	.+6      	; 0x1788 <__vector_9+0x120>
	{
		// ROLL_DIR_CHANGED is used for sound beep
		rollState |= (SKIP_CURRENT_MOTOR_CTRL | ROLL_DIR_CHANGED);
    1782:	28 62       	ori	r18, 0x28	; 40
    1784:	20 93 0a 01 	sts	0x010A, r18
	}
	
	rollState &= ~(ROLL_FWD | ROLL_REV);
    1788:	80 91 0a 01 	lds	r24, 0x010A
    178c:	8c 7f       	andi	r24, 0xFC	; 252
	rollState |= newDirReq;
    178e:	89 2b       	or	r24, r25
	rollState &= dirChangedMask;
    1790:	90 91 90 00 	lds	r25, 0x0090
    1794:	89 23       	and	r24, r25
    1796:	80 93 0a 01 	sts	0x010A, r24
	dirChangedMask = 0xFF;
    179a:	9f ef       	ldi	r25, 0xFF	; 255
    179c:	90 93 90 00 	sts	0x0090, r25
	return (	(int16_t)(rollPoint - bottomPoint) <= 0 );
}

static inline void updateRollPoint(void)
{	
	if (rollState & ROLL_FWD)
    17a0:	80 ff       	sbrs	r24, 0
    17a2:	06 c0       	rjmp	.+12     	; 0x17b0 <__vector_9+0x148>
		rollPoint++;
    17a4:	80 91 0e 01 	lds	r24, 0x010E
    17a8:	90 91 0f 01 	lds	r25, 0x010F
    17ac:	01 96       	adiw	r24, 0x01	; 1
    17ae:	07 c0       	rjmp	.+14     	; 0x17be <__vector_9+0x156>
	else if (rollState & ROLL_REV)
    17b0:	81 ff       	sbrs	r24, 1
    17b2:	09 c0       	rjmp	.+18     	; 0x17c6 <__vector_9+0x15e>
		rollPoint--;	
    17b4:	80 91 0e 01 	lds	r24, 0x010E
    17b8:	90 91 0f 01 	lds	r25, 0x010F
    17bc:	01 97       	sbiw	r24, 0x01	; 1
    17be:	90 93 0f 01 	sts	0x010F, r25
    17c2:	80 93 0e 01 	sts	0x010E, r24
			controlRolling();
		}
	}
	
	
	if ((p_state & STATE_MASK)  != 0x0F)
    17c6:	80 91 8f 00 	lds	r24, 0x008F
    17ca:	98 2f       	mov	r25, r24
    17cc:	9f 70       	andi	r25, 0x0F	; 15
    17ce:	9f 30       	cpi	r25, 0x0F	; 15
    17d0:	19 f0       	breq	.+6      	; 0x17d8 <__vector_9+0x170>
		p_state++;
    17d2:	8f 5f       	subi	r24, 0xFF	; 255
    17d4:	80 93 8f 00 	sts	0x008F, r24
}	
    17d8:	ff 91       	pop	r31
    17da:	ef 91       	pop	r30
    17dc:	bf 91       	pop	r27
    17de:	af 91       	pop	r26
    17e0:	9f 91       	pop	r25
    17e2:	8f 91       	pop	r24
    17e4:	7f 91       	pop	r23
    17e6:	6f 91       	pop	r22
    17e8:	5f 91       	pop	r21
    17ea:	4f 91       	pop	r20
    17ec:	3f 91       	pop	r19
    17ee:	2f 91       	pop	r18
    17f0:	0f 90       	pop	r0
    17f2:	0f be       	out	0x3f, r0	; 63
    17f4:	0f 90       	pop	r0
    17f6:	1f 90       	pop	r1
    17f8:	18 95       	reti

000017fa <processSoftTimer8b>:
 
 
 
 
 void processSoftTimer8b(SoftTimer8b_t *tmr)
 {
    17fa:	fc 01       	movw	r30, r24
	 uint8_t newTimerVal;

	 if (!tmr->Enabled)
    17fc:	90 81       	ld	r25, Z
    17fe:	90 ff       	sbrs	r25, 0
    1800:	27 c0       	rjmp	.+78     	; 0x1850 <processSoftTimer8b+0x56>
		return;
	 
	 tmr->FA_EQ = 0;
	 tmr->FA_GE = 0;
	 tmr->FTop = 0;
    1802:	97 7e       	andi	r25, 0xE7	; 231
    1804:	9f 7d       	andi	r25, 0xDF	; 223
    1806:	90 83       	st	Z, r25
	 
	 if (tmr->Timer >= tmr->Top)
    1808:	81 81       	ldd	r24, Z+1	; 0x01
    180a:	22 81       	ldd	r18, Z+2	; 0x02
    180c:	82 17       	cp	r24, r18
    180e:	50 f0       	brcs	.+20     	; 0x1824 <processSoftTimer8b+0x2a>
	 {
		 if (tmr->RunOnce)
    1810:	91 ff       	sbrs	r25, 1
    1812:	02 c0       	rjmp	.+4      	; 0x1818 <processSoftTimer8b+0x1e>
		 {
			 tmr->Enabled = 0;
    1814:	9e 7f       	andi	r25, 0xFE	; 254
    1816:	90 83       	st	Z, r25
		 }
		 tmr->FTop = 1;
    1818:	90 81       	ld	r25, Z
		 tmr->FOvfl = 1;
    181a:	90 62       	ori	r25, 0x20	; 32
    181c:	90 64       	ori	r25, 0x40	; 64
    181e:	90 83       	st	Z, r25
		 newTimerVal = 0;
    1820:	20 e0       	ldi	r18, 0x00	; 0
    1822:	02 c0       	rjmp	.+4      	; 0x1828 <processSoftTimer8b+0x2e>
	 }
	 else
	 {
		 newTimerVal = tmr->Timer + 1;
    1824:	28 2f       	mov	r18, r24
    1826:	2f 5f       	subi	r18, 0xFF	; 255
	 }
	 
	 if (tmr->Timer == tmr->CompA)
    1828:	93 81       	ldd	r25, Z+3	; 0x03
    182a:	89 13       	cpse	r24, r25
    182c:	0b c0       	rjmp	.+22     	; 0x1844 <processSoftTimer8b+0x4a>
	 {
		 tmr->FA_EQ = 1;
    182e:	80 81       	ld	r24, Z
		 tmr->FA_GE = 1;
    1830:	88 60       	ori	r24, 0x08	; 8
    1832:	80 61       	ori	r24, 0x10	; 16
		 tmr->FA_TGL = !tmr->FA_TGL;
    1834:	82 fb       	bst	r24, 2
    1836:	99 27       	eor	r25, r25
    1838:	90 f9       	bld	r25, 0
    183a:	31 e0       	ldi	r19, 0x01	; 1
    183c:	93 27       	eor	r25, r19
    183e:	90 fb       	bst	r25, 0
    1840:	82 f9       	bld	r24, 2
    1842:	04 c0       	rjmp	.+8      	; 0x184c <processSoftTimer8b+0x52>
	 }
	 else if (tmr->Timer >= tmr->CompA)
    1844:	89 17       	cp	r24, r25
    1846:	18 f0       	brcs	.+6      	; 0x184e <processSoftTimer8b+0x54>
	 {
		 tmr->FA_GE = 1;
    1848:	80 81       	ld	r24, Z
    184a:	80 61       	ori	r24, 0x10	; 16
    184c:	80 83       	st	Z, r24
	 }
	 
	 tmr->Timer = newTimerVal; 
    184e:	21 83       	std	Z+1, r18	; 0x01
    1850:	08 95       	ret

00001852 <processSystemTimers>:



void processSystemTimers(void)
{
	sys_timers.flags = 0x00;
    1852:	10 92 97 00 	sts	0x0097, r1
	
	// Process Celsius counter
	if (--sys_timers.celsius_upd_counter == 0)
    1856:	80 91 91 00 	lds	r24, 0x0091
    185a:	81 50       	subi	r24, 0x01	; 1
    185c:	80 93 91 00 	sts	0x0091, r24
    1860:	81 11       	cpse	r24, r1
    1862:	13 c0       	rjmp	.+38     	; 0x188a <processSystemTimers+0x38>
	{
		sys_timers.celsius_upd_counter = CELSIUS_UDPATE_INTERVAL;
    1864:	84 e0       	ldi	r24, 0x04	; 4
    1866:	80 93 91 00 	sts	0x0091, r24
		sys_timers.flags |= EXPIRED_CELSIUS;
    186a:	81 e0       	ldi	r24, 0x01	; 1
    186c:	80 93 97 00 	sts	0x0097, r24
		
		// Process PID update counter
		if (--sys_timers.pid_update_counter == 0)
    1870:	80 91 96 00 	lds	r24, 0x0096
    1874:	81 50       	subi	r24, 0x01	; 1
    1876:	80 93 96 00 	sts	0x0096, r24
    187a:	81 11       	cpse	r24, r1
    187c:	06 c0       	rjmp	.+12     	; 0x188a <processSystemTimers+0x38>
		{
			sys_timers.pid_update_counter = PID_UPDATE_INTERVAL;
    187e:	8a e0       	ldi	r24, 0x0A	; 10
    1880:	80 93 96 00 	sts	0x0096, r24
			sys_timers.flags |= UPDATE_PID;
    1884:	81 e4       	ldi	r24, 0x41	; 65
    1886:	80 93 97 00 	sts	0x0097, r24
		}
	}
	
	// Process log counter
	if (--sys_timers.log_counter == 0)
    188a:	80 91 95 00 	lds	r24, 0x0095
    188e:	81 50       	subi	r24, 0x01	; 1
    1890:	19 f0       	breq	.+6      	; 0x1898 <processSystemTimers+0x46>
    1892:	80 93 95 00 	sts	0x0095, r24
    1896:	08 c0       	rjmp	.+16     	; 0x18a8 <processSystemTimers+0x56>
	{
		sys_timers.log_counter = LOG_INTERVAL;
    1898:	82 e0       	ldi	r24, 0x02	; 2
    189a:	80 93 95 00 	sts	0x0095, r24
		sys_timers.flags |= EXPIRED_LOG;
    189e:	80 91 97 00 	lds	r24, 0x0097
    18a2:	80 62       	ori	r24, 0x20	; 32
    18a4:	80 93 97 00 	sts	0x0097, r24
	}
	
	// Process 10 seconds counter
	if (--sys_timers.counter_10sec == 0)
    18a8:	80 91 92 00 	lds	r24, 0x0092
    18ac:	81 50       	subi	r24, 0x01	; 1
    18ae:	80 93 92 00 	sts	0x0092, r24
    18b2:	81 11       	cpse	r24, r1
    18b4:	34 c0       	rjmp	.+104    	; 0x191e <processSystemTimers+0xcc>
	{
		sys_timers.counter_10sec = COUNTER_10SEC_INTERVAL;
    18b6:	88 ec       	ldi	r24, 0xC8	; 200
    18b8:	80 93 92 00 	sts	0x0092, r24
		sys_timers.flags |= EXPIRED_10SEC;
    18bc:	40 91 97 00 	lds	r20, 0x0097
    18c0:	84 2f       	mov	r24, r20
    18c2:	82 60       	ori	r24, 0x02	; 2
    18c4:	80 93 97 00 	sts	0x0097, r24
		
		// Process 1 minute counter
		if (--sys_timers.counter_1min == 0)
    18c8:	80 91 93 00 	lds	r24, 0x0093
    18cc:	81 50       	subi	r24, 0x01	; 1
    18ce:	80 93 93 00 	sts	0x0093, r24
    18d2:	81 11       	cpse	r24, r1
    18d4:	24 c0       	rjmp	.+72     	; 0x191e <processSystemTimers+0xcc>
		{
			sys_timers.counter_1min = COUNTER_1MIN_INTERVAL;
    18d6:	86 e0       	ldi	r24, 0x06	; 6
    18d8:	80 93 93 00 	sts	0x0093, r24
			sys_timers.flags |= EXPIRED_1MIN;
    18dc:	84 2f       	mov	r24, r20
    18de:	86 60       	ori	r24, 0x06	; 6
    18e0:	80 93 97 00 	sts	0x0097, r24
			
			// Process auto power off counter
			if (sys_timers.poff_counter != MAX_POWEROFF_TIMEOUT - 1)
    18e4:	80 91 94 00 	lds	r24, 0x0094
    18e8:	8e 35       	cpi	r24, 0x5E	; 94
    18ea:	19 f0       	breq	.+6      	; 0x18f2 <processSystemTimers+0xa0>
				sys_timers.poff_counter++;
    18ec:	8f 5f       	subi	r24, 0xFF	; 255
    18ee:	80 93 94 00 	sts	0x0094, r24
			if (sys_timers.poff_counter == p.power_off_timeout - 1)
    18f2:	60 91 94 00 	lds	r22, 0x0094
    18f6:	50 91 7b 01 	lds	r21, 0x017B
    18fa:	26 2f       	mov	r18, r22
    18fc:	30 e0       	ldi	r19, 0x00	; 0
    18fe:	85 2f       	mov	r24, r21
    1900:	90 e0       	ldi	r25, 0x00	; 0
    1902:	01 97       	sbiw	r24, 0x01	; 1
    1904:	28 17       	cp	r18, r24
    1906:	39 07       	cpc	r19, r25
    1908:	19 f4       	brne	.+6      	; 0x1910 <processSystemTimers+0xbe>
				sys_timers.flags |= AUTOPOFF_SOON;
    190a:	4e 60       	ori	r20, 0x0E	; 14
    190c:	40 93 97 00 	sts	0x0097, r20
			if (sys_timers.poff_counter == p.power_off_timeout)
    1910:	65 13       	cpse	r22, r21
    1912:	05 c0       	rjmp	.+10     	; 0x191e <processSystemTimers+0xcc>
				sys_timers.flags |= AUTOPOFF_EXPIRED;			
    1914:	80 91 97 00 	lds	r24, 0x0097
    1918:	80 61       	ori	r24, 0x10	; 16
    191a:	80 93 97 00 	sts	0x0097, r24
    191e:	08 95       	ret

00001920 <resetAutoPowerOffCounter>:
}


void resetAutoPowerOffCounter(void)
{
	sys_timers.poff_counter = 0;
    1920:	10 92 94 00 	sts	0x0094, r1
    1924:	08 95       	ret

00001926 <SetBeeperFreq>:
}

// Setup beeper frequency (Hz)
void SetBeeperFreq(uint16_t freq_hz)
{
	uint16_t period_us = 1000000 / freq_hz;
    1926:	9c 01       	movw	r18, r24
    1928:	40 e0       	ldi	r20, 0x00	; 0
    192a:	50 e0       	ldi	r21, 0x00	; 0
    192c:	60 e4       	ldi	r22, 0x40	; 64
    192e:	72 e4       	ldi	r23, 0x42	; 66
    1930:	8f e0       	ldi	r24, 0x0F	; 15
    1932:	90 e0       	ldi	r25, 0x00	; 0
    1934:	d0 d0       	rcall	.+416    	; 0x1ad6 <__divmodsi4>
	if (period_us & 0xFFF8)
    1936:	da 01       	movw	r26, r20
    1938:	c9 01       	movw	r24, r18
    193a:	88 7f       	andi	r24, 0xF8	; 248
    193c:	aa 27       	eor	r26, r26
    193e:	bb 27       	eor	r27, r27
    1940:	89 2b       	or	r24, r25
    1942:	51 f0       	breq	.+20     	; 0x1958 <SetBeeperFreq+0x32>
		OCR1A = (period_us>>3) - 1;
    1944:	43 e0       	ldi	r20, 0x03	; 3
    1946:	36 95       	lsr	r19
    1948:	27 95       	ror	r18
    194a:	4a 95       	dec	r20
    194c:	e1 f7       	brne	.-8      	; 0x1946 <SetBeeperFreq+0x20>
    194e:	21 50       	subi	r18, 0x01	; 1
    1950:	31 09       	sbc	r19, r1
    1952:	3b bd       	out	0x2b, r19	; 43
    1954:	2a bd       	out	0x2a, r18	; 42
    1956:	04 c0       	rjmp	.+8      	; 0x1960 <SetBeeperFreq+0x3a>
	else
		OCR1A = 0x1;
    1958:	81 e0       	ldi	r24, 0x01	; 1
    195a:	90 e0       	ldi	r25, 0x00	; 0
    195c:	9b bd       	out	0x2b, r25	; 43
    195e:	8a bd       	out	0x2a, r24	; 42
	TCNT1 = 0;
    1960:	1d bc       	out	0x2d, r1	; 45
    1962:	1c bc       	out	0x2c, r1	; 44
    1964:	08 95       	ret

00001966 <StartBeep>:
}

// Beep for some time in ms
void StartBeep(uint16_t time_ms)
{
	if ( (p.sound_enable) || (enableOverride) )
    1966:	20 91 7a 01 	lds	r18, 0x017A
    196a:	21 11       	cpse	r18, r1
    196c:	04 c0       	rjmp	.+8      	; 0x1976 <StartBeep+0x10>
    196e:	20 91 16 01 	lds	r18, 0x0116
    1972:	22 23       	and	r18, r18
    1974:	39 f0       	breq	.+14     	; 0x1984 <StartBeep+0x1e>
	{
		beep_cnt = time_ms;
    1976:	90 93 18 01 	sts	0x0118, r25
    197a:	80 93 17 01 	sts	0x0117, r24
// Enable / disable beeper output
inline void SetBeepOutput(uint8_t val)
{
	if (val)
		// Toggle OCR1A on compare match
		TCCR1A |= (1<<COM1A0);
    197e:	8f b5       	in	r24, 0x2f	; 47
    1980:	80 64       	ori	r24, 0x40	; 64
    1982:	8f bd       	out	0x2f, r24	; 47
	if ( (p.sound_enable) || (enableOverride) )
	{
		beep_cnt = time_ms;
		SetBeepOutput(1);		
	}
	enableOverride = 0;
    1984:	10 92 16 01 	sts	0x0116, r1
    1988:	08 95       	ret

0000198a <OverrideSoundDisable>:
}

void OverrideSoundDisable(void)
{
	enableOverride = 1;
    198a:	81 e0       	ldi	r24, 0x01	; 1
    198c:	80 93 16 01 	sts	0x0116, r24
    1990:	08 95       	ret

00001992 <__vector_3>:




ISR(TIMER2_COMP_vect)
{	
    1992:	1f 92       	push	r1
    1994:	0f 92       	push	r0
    1996:	0f b6       	in	r0, 0x3f	; 63
    1998:	0f 92       	push	r0
    199a:	11 24       	eor	r1, r1
    199c:	2f 93       	push	r18
    199e:	3f 93       	push	r19
    19a0:	4f 93       	push	r20
    19a2:	5f 93       	push	r21
    19a4:	6f 93       	push	r22
    19a6:	7f 93       	push	r23
    19a8:	8f 93       	push	r24
    19aa:	9f 93       	push	r25
    19ac:	af 93       	push	r26
    19ae:	bf 93       	push	r27
    19b0:	ef 93       	push	r30
    19b2:	ff 93       	push	r31
	
	// Manage beeper
	if (beep_cnt)
    19b4:	80 91 17 01 	lds	r24, 0x0117
    19b8:	90 91 18 01 	lds	r25, 0x0118
    19bc:	00 97       	sbiw	r24, 0x00	; 0
    19be:	31 f0       	breq	.+12     	; 0x19cc <__vector_3+0x3a>
		beep_cnt--;
    19c0:	01 97       	sbiw	r24, 0x01	; 1
    19c2:	90 93 18 01 	sts	0x0118, r25
    19c6:	80 93 17 01 	sts	0x0117, r24
    19ca:	03 c0       	rjmp	.+6      	; 0x19d2 <__vector_3+0x40>
	if (val)
		// Toggle OCR1A on compare match
		TCCR1A |= (1<<COM1A0);
	else
		// Disable OCR1A output
		TCCR1A &= ~(1<<COM1A0 | 1<<COM1A1);
    19cc:	8f b5       	in	r24, 0x2f	; 47
    19ce:	8f 73       	andi	r24, 0x3F	; 63
    19d0:	8f bd       	out	0x2f, r24	; 47
		beep_cnt--;
	else
		SetBeepOutput(0);	// done
	
	// Manage LED indicator
	processLedIndicator();
    19d2:	ca d7       	rcall	.+3988   	; 0x2968 <__data_load_end+0xd36>
	
	// Process menu update timer
	processSoftTimer8b(&menuUpdateTimer);	
    19d4:	88 e9       	ldi	r24, 0x98	; 152
    19d6:	90 e0       	ldi	r25, 0x00	; 0
    19d8:	10 df       	rcall	.-480    	; 0x17fa <processSoftTimer8b>
	
	// Start ADC conversion 
	ADCSRA |= (1<<ADSC);
    19da:	36 9a       	sbi	0x06, 6	; 6
	
}
    19dc:	ff 91       	pop	r31
    19de:	ef 91       	pop	r30
    19e0:	bf 91       	pop	r27
    19e2:	af 91       	pop	r26
    19e4:	9f 91       	pop	r25
    19e6:	8f 91       	pop	r24
    19e8:	7f 91       	pop	r23
    19ea:	6f 91       	pop	r22
    19ec:	5f 91       	pop	r21
    19ee:	4f 91       	pop	r20
    19f0:	3f 91       	pop	r19
    19f2:	2f 91       	pop	r18
    19f4:	0f 90       	pop	r0
    19f6:	0f be       	out	0x3f, r0	; 63
    19f8:	0f 90       	pop	r0
    19fa:	1f 90       	pop	r1
    19fc:	18 95       	reti

000019fe <USART_send>:



void USART_send( uint8_t data )
{
	UCSRA |= (1<<TXC);                 // Clear flag
    19fe:	5e 9a       	sbi	0x0b, 6	; 11
	UDR = data;
    1a00:	8c b9       	out	0x0c, r24	; 12
	while ( !(UCSRA & (1<<TXC)) );  // Wait
    1a02:	5e 9b       	sbis	0x0b, 6	; 11
    1a04:	fe cf       	rjmp	.-4      	; 0x1a02 <USART_send+0x4>
}
    1a06:	08 95       	ret

00001a08 <USART_sendstr>:


void USART_sendstr(char* str)
{
    1a08:	1f 93       	push	r17
    1a0a:	cf 93       	push	r28
    1a0c:	df 93       	push	r29
    1a0e:	ec 01       	movw	r28, r24
	uint8_t i = 0;
    1a10:	10 e0       	ldi	r17, 0x00	; 0
	while (str[i])
    1a12:	02 c0       	rjmp	.+4      	; 0x1a18 <USART_sendstr+0x10>
	{
		USART_send(str[i++]);
    1a14:	1f 5f       	subi	r17, 0xFF	; 255
    1a16:	f3 df       	rcall	.-26     	; 0x19fe <USART_send>


void USART_sendstr(char* str)
{
	uint8_t i = 0;
	while (str[i])
    1a18:	fe 01       	movw	r30, r28
    1a1a:	e1 0f       	add	r30, r17
    1a1c:	f1 1d       	adc	r31, r1
    1a1e:	80 81       	ld	r24, Z
    1a20:	81 11       	cpse	r24, r1
    1a22:	f8 cf       	rjmp	.-16     	; 0x1a14 <USART_sendstr+0xc>
	{
		USART_send(str[i++]);
	}
}
    1a24:	df 91       	pop	r29
    1a26:	cf 91       	pop	r28
    1a28:	1f 91       	pop	r17
    1a2a:	08 95       	ret

00001a2c <__udivmodqi4>:
    1a2c:	99 1b       	sub	r25, r25
    1a2e:	79 e0       	ldi	r23, 0x09	; 9
    1a30:	04 c0       	rjmp	.+8      	; 0x1a3a <__udivmodqi4_ep>

00001a32 <__udivmodqi4_loop>:
    1a32:	99 1f       	adc	r25, r25
    1a34:	96 17       	cp	r25, r22
    1a36:	08 f0       	brcs	.+2      	; 0x1a3a <__udivmodqi4_ep>
    1a38:	96 1b       	sub	r25, r22

00001a3a <__udivmodqi4_ep>:
    1a3a:	88 1f       	adc	r24, r24
    1a3c:	7a 95       	dec	r23
    1a3e:	c9 f7       	brne	.-14     	; 0x1a32 <__udivmodqi4_loop>
    1a40:	80 95       	com	r24
    1a42:	08 95       	ret

00001a44 <__udivmodhi4>:
    1a44:	aa 1b       	sub	r26, r26
    1a46:	bb 1b       	sub	r27, r27
    1a48:	51 e1       	ldi	r21, 0x11	; 17
    1a4a:	07 c0       	rjmp	.+14     	; 0x1a5a <__udivmodhi4_ep>

00001a4c <__udivmodhi4_loop>:
    1a4c:	aa 1f       	adc	r26, r26
    1a4e:	bb 1f       	adc	r27, r27
    1a50:	a6 17       	cp	r26, r22
    1a52:	b7 07       	cpc	r27, r23
    1a54:	10 f0       	brcs	.+4      	; 0x1a5a <__udivmodhi4_ep>
    1a56:	a6 1b       	sub	r26, r22
    1a58:	b7 0b       	sbc	r27, r23

00001a5a <__udivmodhi4_ep>:
    1a5a:	88 1f       	adc	r24, r24
    1a5c:	99 1f       	adc	r25, r25
    1a5e:	5a 95       	dec	r21
    1a60:	a9 f7       	brne	.-22     	; 0x1a4c <__udivmodhi4_loop>
    1a62:	80 95       	com	r24
    1a64:	90 95       	com	r25
    1a66:	bc 01       	movw	r22, r24
    1a68:	cd 01       	movw	r24, r26
    1a6a:	08 95       	ret

00001a6c <__divmodhi4>:
    1a6c:	97 fb       	bst	r25, 7
    1a6e:	07 2e       	mov	r0, r23
    1a70:	16 f4       	brtc	.+4      	; 0x1a76 <__divmodhi4+0xa>
    1a72:	00 94       	com	r0
    1a74:	06 d0       	rcall	.+12     	; 0x1a82 <__divmodhi4_neg1>
    1a76:	77 fd       	sbrc	r23, 7
    1a78:	08 d0       	rcall	.+16     	; 0x1a8a <__divmodhi4_neg2>
    1a7a:	e4 df       	rcall	.-56     	; 0x1a44 <__udivmodhi4>
    1a7c:	07 fc       	sbrc	r0, 7
    1a7e:	05 d0       	rcall	.+10     	; 0x1a8a <__divmodhi4_neg2>
    1a80:	3e f4       	brtc	.+14     	; 0x1a90 <__divmodhi4_exit>

00001a82 <__divmodhi4_neg1>:
    1a82:	90 95       	com	r25
    1a84:	81 95       	neg	r24
    1a86:	9f 4f       	sbci	r25, 0xFF	; 255
    1a88:	08 95       	ret

00001a8a <__divmodhi4_neg2>:
    1a8a:	70 95       	com	r23
    1a8c:	61 95       	neg	r22
    1a8e:	7f 4f       	sbci	r23, 0xFF	; 255

00001a90 <__divmodhi4_exit>:
    1a90:	08 95       	ret

00001a92 <__udivmodsi4>:
    1a92:	a1 e2       	ldi	r26, 0x21	; 33
    1a94:	1a 2e       	mov	r1, r26
    1a96:	aa 1b       	sub	r26, r26
    1a98:	bb 1b       	sub	r27, r27
    1a9a:	fd 01       	movw	r30, r26
    1a9c:	0d c0       	rjmp	.+26     	; 0x1ab8 <__udivmodsi4_ep>

00001a9e <__udivmodsi4_loop>:
    1a9e:	aa 1f       	adc	r26, r26
    1aa0:	bb 1f       	adc	r27, r27
    1aa2:	ee 1f       	adc	r30, r30
    1aa4:	ff 1f       	adc	r31, r31
    1aa6:	a2 17       	cp	r26, r18
    1aa8:	b3 07       	cpc	r27, r19
    1aaa:	e4 07       	cpc	r30, r20
    1aac:	f5 07       	cpc	r31, r21
    1aae:	20 f0       	brcs	.+8      	; 0x1ab8 <__udivmodsi4_ep>
    1ab0:	a2 1b       	sub	r26, r18
    1ab2:	b3 0b       	sbc	r27, r19
    1ab4:	e4 0b       	sbc	r30, r20
    1ab6:	f5 0b       	sbc	r31, r21

00001ab8 <__udivmodsi4_ep>:
    1ab8:	66 1f       	adc	r22, r22
    1aba:	77 1f       	adc	r23, r23
    1abc:	88 1f       	adc	r24, r24
    1abe:	99 1f       	adc	r25, r25
    1ac0:	1a 94       	dec	r1
    1ac2:	69 f7       	brne	.-38     	; 0x1a9e <__udivmodsi4_loop>
    1ac4:	60 95       	com	r22
    1ac6:	70 95       	com	r23
    1ac8:	80 95       	com	r24
    1aca:	90 95       	com	r25
    1acc:	9b 01       	movw	r18, r22
    1ace:	ac 01       	movw	r20, r24
    1ad0:	bd 01       	movw	r22, r26
    1ad2:	cf 01       	movw	r24, r30
    1ad4:	08 95       	ret

00001ad6 <__divmodsi4>:
    1ad6:	05 2e       	mov	r0, r21
    1ad8:	97 fb       	bst	r25, 7
    1ada:	16 f4       	brtc	.+4      	; 0x1ae0 <__divmodsi4+0xa>
    1adc:	00 94       	com	r0
    1ade:	06 d0       	rcall	.+12     	; 0x1aec <__divmodsi4_neg1>
    1ae0:	57 fd       	sbrc	r21, 7
    1ae2:	0c d0       	rcall	.+24     	; 0x1afc <__divmodsi4_neg2>
    1ae4:	d6 df       	rcall	.-84     	; 0x1a92 <__udivmodsi4>
    1ae6:	07 fc       	sbrc	r0, 7
    1ae8:	09 d0       	rcall	.+18     	; 0x1afc <__divmodsi4_neg2>
    1aea:	7e f4       	brtc	.+30     	; 0x1b0a <__divmodsi4_exit>

00001aec <__divmodsi4_neg1>:
    1aec:	90 95       	com	r25
    1aee:	80 95       	com	r24
    1af0:	70 95       	com	r23
    1af2:	61 95       	neg	r22
    1af4:	7f 4f       	sbci	r23, 0xFF	; 255
    1af6:	8f 4f       	sbci	r24, 0xFF	; 255
    1af8:	9f 4f       	sbci	r25, 0xFF	; 255
    1afa:	08 95       	ret

00001afc <__divmodsi4_neg2>:
    1afc:	50 95       	com	r21
    1afe:	40 95       	com	r20
    1b00:	30 95       	com	r19
    1b02:	21 95       	neg	r18
    1b04:	3f 4f       	sbci	r19, 0xFF	; 255
    1b06:	4f 4f       	sbci	r20, 0xFF	; 255
    1b08:	5f 4f       	sbci	r21, 0xFF	; 255

00001b0a <__divmodsi4_exit>:
    1b0a:	08 95       	ret

00001b0c <__mulhisi3>:
    1b0c:	05 d0       	rcall	.+10     	; 0x1b18 <__umulhisi3>
    1b0e:	33 23       	and	r19, r19
    1b10:	12 f4       	brpl	.+4      	; 0x1b16 <__mulhisi3+0xa>
    1b12:	8a 1b       	sub	r24, r26
    1b14:	9b 0b       	sbc	r25, r27
    1b16:	0d c0       	rjmp	.+26     	; 0x1b32 <__usmulhisi3_tail>

00001b18 <__umulhisi3>:
    1b18:	a2 9f       	mul	r26, r18
    1b1a:	b0 01       	movw	r22, r0
    1b1c:	b3 9f       	mul	r27, r19
    1b1e:	c0 01       	movw	r24, r0
    1b20:	a3 9f       	mul	r26, r19
    1b22:	01 d0       	rcall	.+2      	; 0x1b26 <__umulhisi3+0xe>
    1b24:	b2 9f       	mul	r27, r18
    1b26:	70 0d       	add	r23, r0
    1b28:	81 1d       	adc	r24, r1
    1b2a:	11 24       	eor	r1, r1
    1b2c:	91 1d       	adc	r25, r1
    1b2e:	08 95       	ret

00001b30 <__usmulhisi3>:
    1b30:	f3 df       	rcall	.-26     	; 0x1b18 <__umulhisi3>

00001b32 <__usmulhisi3_tail>:
    1b32:	b7 ff       	sbrs	r27, 7
    1b34:	08 95       	ret
    1b36:	82 1b       	sub	r24, r18
    1b38:	93 0b       	sbc	r25, r19
    1b3a:	08 95       	ret

00001b3c <__muluhisi3>:
    1b3c:	ed df       	rcall	.-38     	; 0x1b18 <__umulhisi3>
    1b3e:	a5 9f       	mul	r26, r21
    1b40:	90 0d       	add	r25, r0
    1b42:	b4 9f       	mul	r27, r20
    1b44:	90 0d       	add	r25, r0
    1b46:	a4 9f       	mul	r26, r20
    1b48:	80 0d       	add	r24, r0
    1b4a:	91 1d       	adc	r25, r1
    1b4c:	11 24       	eor	r1, r1
    1b4e:	08 95       	ret

00001b50 <__eerd_block_m8>:
    1b50:	dc 01       	movw	r26, r24
    1b52:	cb 01       	movw	r24, r22

00001b54 <__eerd_blraw_m8>:
    1b54:	fc 01       	movw	r30, r24
    1b56:	e1 99       	sbic	0x1c, 1	; 28
    1b58:	fe cf       	rjmp	.-4      	; 0x1b56 <__eerd_blraw_m8+0x2>
    1b5a:	06 c0       	rjmp	.+12     	; 0x1b68 <__eerd_blraw_m8+0x14>
    1b5c:	ff bb       	out	0x1f, r31	; 31
    1b5e:	ee bb       	out	0x1e, r30	; 30
    1b60:	e0 9a       	sbi	0x1c, 0	; 28
    1b62:	31 96       	adiw	r30, 0x01	; 1
    1b64:	0d b2       	in	r0, 0x1d	; 29
    1b66:	0d 92       	st	X+, r0
    1b68:	41 50       	subi	r20, 0x01	; 1
    1b6a:	50 40       	sbci	r21, 0x00	; 0
    1b6c:	b8 f7       	brcc	.-18     	; 0x1b5c <__eerd_blraw_m8+0x8>
    1b6e:	08 95       	ret

00001b70 <__eeupd_block_m8>:
    1b70:	dc 01       	movw	r26, r24
    1b72:	a4 0f       	add	r26, r20
    1b74:	b5 1f       	adc	r27, r21
    1b76:	41 50       	subi	r20, 0x01	; 1
    1b78:	50 40       	sbci	r21, 0x00	; 0
    1b7a:	40 f0       	brcs	.+16     	; 0x1b8c <__eeupd_block_m8+0x1c>
    1b7c:	cb 01       	movw	r24, r22
    1b7e:	84 0f       	add	r24, r20
    1b80:	95 1f       	adc	r25, r21
    1b82:	2e 91       	ld	r18, -X
    1b84:	05 d0       	rcall	.+10     	; 0x1b90 <__eeupd_r18_m8>
    1b86:	41 50       	subi	r20, 0x01	; 1
    1b88:	50 40       	sbci	r21, 0x00	; 0
    1b8a:	d8 f7       	brcc	.-10     	; 0x1b82 <__eeupd_block_m8+0x12>
    1b8c:	08 95       	ret

00001b8e <__eeupd_byte_m8>:
    1b8e:	26 2f       	mov	r18, r22

00001b90 <__eeupd_r18_m8>:
    1b90:	e1 99       	sbic	0x1c, 1	; 28
    1b92:	fe cf       	rjmp	.-4      	; 0x1b90 <__eeupd_r18_m8>
    1b94:	9f bb       	out	0x1f, r25	; 31
    1b96:	8e bb       	out	0x1e, r24	; 30
    1b98:	e0 9a       	sbi	0x1c, 0	; 28
    1b9a:	01 97       	sbiw	r24, 0x01	; 1
    1b9c:	0d b2       	in	r0, 0x1d	; 29
    1b9e:	02 16       	cp	r0, r18
    1ba0:	31 f0       	breq	.+12     	; 0x1bae <__eeupd_r18_m8+0x1e>
    1ba2:	2d bb       	out	0x1d, r18	; 29
    1ba4:	0f b6       	in	r0, 0x3f	; 63
    1ba6:	f8 94       	cli
    1ba8:	e2 9a       	sbi	0x1c, 2	; 28
    1baa:	e1 9a       	sbi	0x1c, 1	; 28
    1bac:	0f be       	out	0x3f, r0	; 63
    1bae:	08 95       	ret

00001bb0 <_exit>:
    1bb0:	f8 94       	cli

00001bb2 <__stop_program>:
    1bb2:	ff cf       	rjmp	.-2      	; 0x1bb2 <__stop_program>
