
pid1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001b48  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000084  00800060  00001b48  00001bfc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000df  008000e4  008000e4  00001c80  2**0
                  ALLOC
  3 .eeprom       0000000a  00810000  00810000  00001c80  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         000009c0  00000000  00000000  00001c8c  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      000001a6  00000000  00000000  0000264c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      0000002f  00000000  00000000  000027f2  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 000003f0  00000000  00000000  00002821  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00003dbd  00000000  00000000  00002c11  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000013af  00000000  00000000  000069ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00001895  00000000  00000000  00007d7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000974  00000000  00000000  00009614  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00001076  00000000  00000000  00009f88  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00001d70  00000000  00000000  0000affe  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000360  00000000  00000000  0000cd6e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	ad c0       	rjmp	.+346    	; 0x15c <__ctors_end>
       2:	c7 c0       	rjmp	.+398    	; 0x192 <__bad_interrupt>
       4:	c6 c0       	rjmp	.+396    	; 0x192 <__bad_interrupt>
       6:	8f cc       	rjmp	.-1762   	; 0xfffff926 <__eeprom_end+0xff7ef91c>
       8:	c4 c0       	rjmp	.+392    	; 0x192 <__bad_interrupt>
       a:	c3 c0       	rjmp	.+390    	; 0x192 <__bad_interrupt>
       c:	c2 c0       	rjmp	.+388    	; 0x192 <__bad_interrupt>
       e:	c1 c0       	rjmp	.+386    	; 0x192 <__bad_interrupt>
      10:	c0 c0       	rjmp	.+384    	; 0x192 <__bad_interrupt>
      12:	f4 ca       	rjmp	.-2584   	; 0xfffff5fc <__eeprom_end+0xff7ef5f2>
      14:	be c0       	rjmp	.+380    	; 0x192 <__bad_interrupt>
      16:	bd c0       	rjmp	.+378    	; 0x192 <__bad_interrupt>
      18:	bc c0       	rjmp	.+376    	; 0x192 <__bad_interrupt>
      1a:	bb c0       	rjmp	.+374    	; 0x192 <__bad_interrupt>
      1c:	54 c1       	rjmp	.+680    	; 0x2c6 <__vector_14>
      1e:	b9 c0       	rjmp	.+370    	; 0x192 <__bad_interrupt>
      20:	af ca       	rjmp	.-2722   	; 0xfffff580 <__eeprom_end+0xff7ef576>
      22:	b7 c0       	rjmp	.+366    	; 0x192 <__bad_interrupt>
      24:	b6 c0       	rjmp	.+364    	; 0x192 <__bad_interrupt>

00000026 <led_encode_table>:
      26:	30 3f 4f 3f 31 06 32 5b 33 4f 34 66 53 6d 35 6d     0?O?1.2[3O4fSm5m
      36:	36 7d 37 07 38 7f 39 6f 2e 80 2c 80 2d 40 5f 08     6}7.8.9o..,.-@_.
      46:	20 00 b0 63 41 77 43 39 46 71 4e 54 44 5e 50 73      ..cAwC9FqNTD^Ps
      56:	45 79 52 50                                         EyRP

0000005a <menuFunctionSet>:
      5a:	01 dc 07 de 07 2b 06 03 28 06 8d 07 ca 05 02 8a     .....+..(.......
      6a:	07 23 07 20 06 05 00 06 de 06 00 00 0b d0 05 de     .#. ............
      7a:	06 de 05 04 00 06 46 06 00 00 0c d0 05 46 06 de     ......F......F..
      8a:	05 06 14 06 97 06 00 00 09 d0 05 97 06 e7 05 07     ................
      9a:	08 06 97 06 00 00 0a d0 05 97 06 e7 05 08 2d 06     ..............-.
      aa:	f6 05 00 00 0d 2d 06 f6 05 00 00 0e fa 05 f2 05     .....-..........
      ba:	e4 05                                               ..

000000bc <menuJumpSet>:
      bc:	01 c0 00 03 a8 01 00 01 02 40 01 00 02 05 28 02     .........@....(.
      cc:	00 01 01 80 03 00 83 01 40 05 00 82 01 00 05 80     ........@.......
      dc:	00 04 68 05 40 00 07 a8 05 00 01 0b 28 0b 00 83     ..h.@.......(...
      ec:	05 28 04 00 82 01 00 04 80 00 06 68 04 40 00 05     .(.........h.@..
      fc:	a8 04 00 01 0c 28 0c 00 83 04 28 06 00 82 01 00     .....(....(.....
     10c:	06 80 00 07 68 06 40 00 04 a8 06 00 01 09 00 07     ....h.@.........
     11c:	00 82 01 00 07 80 00 05 68 07 40 00 06 a8 07 00     ........h.@.....
     12c:	01 0a 00 09 00 02 06 28 09 00 01 08 14 08 00 83     .......(........
     13c:	01 00 0a 00 02 07 28 0a 00 01 0d 14 0d 00 83 01     ......(.........
     14c:	00 01 00 40 0e 00 02 00 40 0e 00 0e d5 01 01 00     ...@....@.......

0000015c <__ctors_end>:
     15c:	11 24       	eor	r1, r1
     15e:	1f be       	out	0x3f, r1	; 63
     160:	cf e5       	ldi	r28, 0x5F	; 95
     162:	d4 e0       	ldi	r29, 0x04	; 4
     164:	de bf       	out	0x3e, r29	; 62
     166:	cd bf       	out	0x3d, r28	; 61

00000168 <__do_copy_data>:
     168:	10 e0       	ldi	r17, 0x00	; 0
     16a:	a0 e6       	ldi	r26, 0x60	; 96
     16c:	b0 e0       	ldi	r27, 0x00	; 0
     16e:	e8 e4       	ldi	r30, 0x48	; 72
     170:	fb e1       	ldi	r31, 0x1B	; 27
     172:	02 c0       	rjmp	.+4      	; 0x178 <__do_copy_data+0x10>
     174:	05 90       	lpm	r0, Z+
     176:	0d 92       	st	X+, r0
     178:	a4 3e       	cpi	r26, 0xE4	; 228
     17a:	b1 07       	cpc	r27, r17
     17c:	d9 f7       	brne	.-10     	; 0x174 <__do_copy_data+0xc>

0000017e <__do_clear_bss>:
     17e:	21 e0       	ldi	r18, 0x01	; 1
     180:	a4 ee       	ldi	r26, 0xE4	; 228
     182:	b0 e0       	ldi	r27, 0x00	; 0
     184:	01 c0       	rjmp	.+2      	; 0x188 <.do_clear_bss_start>

00000186 <.do_clear_bss_loop>:
     186:	1d 92       	st	X+, r1

00000188 <.do_clear_bss_start>:
     188:	a3 3c       	cpi	r26, 0xC3	; 195
     18a:	b2 07       	cpc	r27, r18
     18c:	e1 f7       	brne	.-8      	; 0x186 <.do_clear_bss_loop>
     18e:	c9 d8       	rcall	.-3694   	; 0xfffff322 <__eeprom_end+0xff7ef318>
     190:	d9 cc       	rjmp	.-1614   	; 0xfffffb44 <__eeprom_end+0xff7efb3a>

00000192 <__bad_interrupt>:
     192:	36 cf       	rjmp	.-404    	; 0x0 <__vectors>

00000194 <conv_ADC_to_Celsius>:
//---------------------------------------------//
//---------------------------------------------//


uint16_t conv_ADC_to_Celsius(uint16_t adc_value)
{	
     194:	0f 93       	push	r16
     196:	1f 93       	push	r17
	return (uint16_t)(((int32_t)adc_value * k_norm + offset_norm) / (COEFF_SCALE));
     198:	20 91 e4 00 	lds	r18, 0x00E4
     19c:	30 91 e5 00 	lds	r19, 0x00E5
     1a0:	40 91 e6 00 	lds	r20, 0x00E6
     1a4:	50 91 e7 00 	lds	r21, 0x00E7
     1a8:	dc 01       	movw	r26, r24
     1aa:	70 dc       	rcall	.-1824   	; 0xfffffa8c <__eeprom_end+0xff7efa82>
     1ac:	00 91 e8 00 	lds	r16, 0x00E8
     1b0:	10 91 e9 00 	lds	r17, 0x00E9
     1b4:	20 91 ea 00 	lds	r18, 0x00EA
     1b8:	30 91 eb 00 	lds	r19, 0x00EB
     1bc:	60 0f       	add	r22, r16
     1be:	71 1f       	adc	r23, r17
     1c0:	82 1f       	adc	r24, r18
     1c2:	93 1f       	adc	r25, r19
     1c4:	28 ee       	ldi	r18, 0xE8	; 232
     1c6:	33 e0       	ldi	r19, 0x03	; 3
     1c8:	40 e0       	ldi	r20, 0x00	; 0
     1ca:	50 e0       	ldi	r21, 0x00	; 0
     1cc:	2c dc       	rcall	.-1960   	; 0xfffffa26 <__eeprom_end+0xff7efa1c>
}
     1ce:	c9 01       	movw	r24, r18
     1d0:	1f 91       	pop	r17
     1d2:	0f 91       	pop	r16
     1d4:	08 95       	ret

000001d6 <conv_Celsius_to_ADC>:

uint16_t conv_Celsius_to_ADC(uint16_t degree_value)
{
     1d6:	0f 93       	push	r16
     1d8:	1f 93       	push	r17
	degree_value += 1;
     1da:	9c 01       	movw	r18, r24
     1dc:	2f 5f       	subi	r18, 0xFF	; 255
     1de:	3f 4f       	sbci	r19, 0xFF	; 255
	return (uint16_t)(((int32_t)degree_value * COEFF_SCALE - offset_norm) / k_norm);
     1e0:	a8 ee       	ldi	r26, 0xE8	; 232
     1e2:	b3 e0       	ldi	r27, 0x03	; 3
     1e4:	41 dc       	rcall	.-1918   	; 0xfffffa68 <__eeprom_end+0xff7efa5e>
     1e6:	00 91 e8 00 	lds	r16, 0x00E8
     1ea:	10 91 e9 00 	lds	r17, 0x00E9
     1ee:	20 91 ea 00 	lds	r18, 0x00EA
     1f2:	30 91 eb 00 	lds	r19, 0x00EB
     1f6:	60 1b       	sub	r22, r16
     1f8:	71 0b       	sbc	r23, r17
     1fa:	82 0b       	sbc	r24, r18
     1fc:	93 0b       	sbc	r25, r19
     1fe:	20 91 e4 00 	lds	r18, 0x00E4
     202:	30 91 e5 00 	lds	r19, 0x00E5
     206:	40 91 e6 00 	lds	r20, 0x00E6
     20a:	50 91 e7 00 	lds	r21, 0x00E7
     20e:	0b dc       	rcall	.-2026   	; 0xfffffa26 <__eeprom_end+0xff7efa1c>
}
     210:	c9 01       	movw	r24, r18
     212:	1f 91       	pop	r17
     214:	0f 91       	pop	r16
     216:	08 95       	ret

00000218 <calculateCoeffs>:

void calculateCoeffs(void)
{
     218:	8f 92       	push	r8
     21a:	9f 92       	push	r9
     21c:	af 92       	push	r10
     21e:	bf 92       	push	r11
     220:	cf 92       	push	r12
     222:	df 92       	push	r13
     224:	ef 92       	push	r14
     226:	ff 92       	push	r15
     228:	cf 93       	push	r28
     22a:	df 93       	push	r29
	k_norm = ((int32_t)(cp.cpoint2 - cp.cpoint1) * COEFF_SCALE) / ((int32_t)(cp.cpoint2_adc - cp.cpoint1_adc));
     22c:	f0 90 91 01 	lds	r15, 0x0191
     230:	a0 91 92 01 	lds	r26, 0x0192
     234:	b0 e0       	ldi	r27, 0x00	; 0
     236:	af 19       	sub	r26, r15
     238:	b1 09       	sbc	r27, r1
     23a:	c0 91 93 01 	lds	r28, 0x0193
     23e:	d0 91 94 01 	lds	r29, 0x0194
     242:	28 ee       	ldi	r18, 0xE8	; 232
     244:	33 e0       	ldi	r19, 0x03	; 3
     246:	1c dc       	rcall	.-1992   	; 0xfffffa80 <__eeprom_end+0xff7efa76>
     248:	20 91 95 01 	lds	r18, 0x0195
     24c:	30 91 96 01 	lds	r19, 0x0196
     250:	2c 1b       	sub	r18, r28
     252:	3d 0b       	sbc	r19, r29
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	e6 db       	rcall	.-2100   	; 0xfffffa26 <__eeprom_end+0xff7efa1c>
     25a:	49 01       	movw	r8, r18
     25c:	5a 01       	movw	r10, r20
     25e:	20 93 e4 00 	sts	0x00E4, r18
     262:	30 93 e5 00 	sts	0x00E5, r19
     266:	40 93 e6 00 	sts	0x00E6, r20
     26a:	50 93 e7 00 	sts	0x00E7, r21
	offset_norm = (int32_t)cp.cpoint1 * COEFF_SCALE - (int32_t)cp.cpoint1_adc * k_norm;
     26e:	2f 2d       	mov	r18, r15
     270:	30 e0       	ldi	r19, 0x00	; 0
     272:	a8 ee       	ldi	r26, 0xE8	; 232
     274:	b3 e0       	ldi	r27, 0x03	; 3
     276:	f8 db       	rcall	.-2064   	; 0xfffffa68 <__eeprom_end+0xff7efa5e>
     278:	6b 01       	movw	r12, r22
     27a:	7c 01       	movw	r14, r24
     27c:	de 01       	movw	r26, r28
     27e:	a5 01       	movw	r20, r10
     280:	94 01       	movw	r18, r8
     282:	04 dc       	rcall	.-2040   	; 0xfffffa8c <__eeprom_end+0xff7efa82>
     284:	c6 1a       	sub	r12, r22
     286:	d7 0a       	sbc	r13, r23
     288:	e8 0a       	sbc	r14, r24
     28a:	f9 0a       	sbc	r15, r25
     28c:	c0 92 e8 00 	sts	0x00E8, r12
     290:	d0 92 e9 00 	sts	0x00E9, r13
     294:	e0 92 ea 00 	sts	0x00EA, r14
     298:	f0 92 eb 00 	sts	0x00EB, r15
}
     29c:	df 91       	pop	r29
     29e:	cf 91       	pop	r28
     2a0:	ff 90       	pop	r15
     2a2:	ef 90       	pop	r14
     2a4:	df 90       	pop	r13
     2a6:	cf 90       	pop	r12
     2a8:	bf 90       	pop	r11
     2aa:	af 90       	pop	r10
     2ac:	9f 90       	pop	r9
     2ae:	8f 90       	pop	r8
     2b0:	08 95       	ret

000002b2 <update_Celsius>:
}

void update_Celsius(void)
{
	// Convert to Celsius degree
	adc_celsius = conv_ADC_to_Celsius(adc_normalized);
     2b2:	80 91 63 01 	lds	r24, 0x0163
     2b6:	90 91 64 01 	lds	r25, 0x0164
     2ba:	6c df       	rcall	.-296    	; 0x194 <conv_ADC_to_Celsius>
     2bc:	90 93 67 01 	sts	0x0167, r25
     2c0:	80 93 66 01 	sts	0x0166, r24
     2c4:	08 95       	ret

000002c6 <__vector_14>:




ISR(ADC_vect)
{
     2c6:	1f 92       	push	r1
     2c8:	0f 92       	push	r0
     2ca:	0f b6       	in	r0, 0x3f	; 63
     2cc:	0f 92       	push	r0
     2ce:	11 24       	eor	r1, r1
     2d0:	2f 93       	push	r18
     2d2:	3f 93       	push	r19
     2d4:	4f 93       	push	r20
     2d6:	8f 93       	push	r24
     2d8:	9f 93       	push	r25
     2da:	ef 93       	push	r30
     2dc:	ff 93       	push	r31
	static uint8_t adc_buffer_pointer = ADC_BUFFER_LENGTH;
	// Get new sample
	uint16_t new_sample = 1024 - ADC;	
     2de:	24 b1       	in	r18, 0x04	; 4
     2e0:	35 b1       	in	r19, 0x05	; 5
	// Add new sample to the buffer
	raw_adc_buffer[--adc_buffer_pointer] = new_sample;
     2e2:	40 91 77 00 	lds	r20, 0x0077
     2e6:	41 50       	subi	r20, 0x01	; 1
     2e8:	40 93 77 00 	sts	0x0077, r20
     2ec:	e4 2f       	mov	r30, r20
     2ee:	f0 e0       	ldi	r31, 0x00	; 0
     2f0:	ee 0f       	add	r30, r30
     2f2:	ff 1f       	adc	r31, r31
     2f4:	ed 5d       	subi	r30, 0xDD	; 221
     2f6:	fe 4f       	sbci	r31, 0xFE	; 254

ISR(ADC_vect)
{
	static uint8_t adc_buffer_pointer = ADC_BUFFER_LENGTH;
	// Get new sample
	uint16_t new_sample = 1024 - ADC;	
     2f8:	80 e0       	ldi	r24, 0x00	; 0
     2fa:	94 e0       	ldi	r25, 0x04	; 4
     2fc:	82 1b       	sub	r24, r18
     2fe:	93 0b       	sbc	r25, r19
	// Add new sample to the buffer
	raw_adc_buffer[--adc_buffer_pointer] = new_sample;
     300:	91 83       	std	Z+1, r25	; 0x01
     302:	80 83       	st	Z, r24
	if (adc_buffer_pointer == 0)
     304:	41 11       	cpse	r20, r1
     306:	03 c0       	rjmp	.+6      	; 0x30e <__vector_14+0x48>
		adc_buffer_pointer = ADC_BUFFER_LENGTH;
     308:	80 e2       	ldi	r24, 0x20	; 32
     30a:	80 93 77 00 	sts	0x0077, r24
}	
     30e:	ff 91       	pop	r31
     310:	ef 91       	pop	r30
     312:	9f 91       	pop	r25
     314:	8f 91       	pop	r24
     316:	4f 91       	pop	r20
     318:	3f 91       	pop	r19
     31a:	2f 91       	pop	r18
     31c:	0f 90       	pop	r0
     31e:	0f be       	out	0x3f, r0	; 63
     320:	0f 90       	pop	r0
     322:	1f 90       	pop	r1
     324:	18 95       	reti

00000326 <fir_i16_i8>:
// FIR digital filter
// Samples: signed, 16-bit
// Coeffs:  signed, 8-bit
//---------------------------------------------//
int16_t fir_i16_i8(int16_t new_sample, int16_t *samples, filter8bit_core_t* iir_core)
{
     326:	cf 92       	push	r12
     328:	df 92       	push	r13
     32a:	ef 92       	push	r14
     32c:	ff 92       	push	r15
     32e:	0f 93       	push	r16
     330:	1f 93       	push	r17
     332:	cf 93       	push	r28
     334:	df 93       	push	r29
     336:	8c 01       	movw	r16, r24
     338:	eb 01       	movw	r28, r22
     33a:	fa 01       	movw	r30, r20
	int32_t summ;
	uint8_t i;
	
	summ = new_sample * iir_core->coeffs[0];
     33c:	23 81       	ldd	r18, Z+3	; 0x03
     33e:	20 03       	mulsu	r18, r16
     340:	60 01       	movw	r12, r0
     342:	21 9f       	mul	r18, r17
     344:	d0 0c       	add	r13, r0
     346:	11 24       	eor	r1, r1
     348:	ee 24       	eor	r14, r14
     34a:	d7 fc       	sbrc	r13, 7
     34c:	e0 94       	com	r14
     34e:	fe 2c       	mov	r15, r14
	for (i=iir_core->n-1; i>0; i--)
     350:	40 81       	ld	r20, Z
     352:	1e c0       	rjmp	.+60     	; 0x390 <fir_i16_i8+0x6a>
	{
		samples[i] = samples[i-1];
     354:	84 2f       	mov	r24, r20
     356:	90 e0       	ldi	r25, 0x00	; 0
     358:	dc 01       	movw	r26, r24
     35a:	11 97       	sbiw	r26, 0x01	; 1
     35c:	aa 0f       	add	r26, r26
     35e:	bb 1f       	adc	r27, r27
     360:	ac 0f       	add	r26, r28
     362:	bd 1f       	adc	r27, r29
     364:	2d 91       	ld	r18, X+
     366:	3c 91       	ld	r19, X
     368:	dc 01       	movw	r26, r24
     36a:	aa 0f       	add	r26, r26
     36c:	bb 1f       	adc	r27, r27
     36e:	ac 0f       	add	r26, r28
     370:	bd 1f       	adc	r27, r29
     372:	2d 93       	st	X+, r18
     374:	3c 93       	st	X, r19
		summ += (int32_t)samples[i] * iir_core->coeffs[i];
     376:	df 01       	movw	r26, r30
     378:	a8 0f       	add	r26, r24
     37a:	b9 1f       	adc	r27, r25
     37c:	13 96       	adiw	r26, 0x03	; 3
     37e:	ac 91       	ld	r26, X
     380:	bb 27       	eor	r27, r27
     382:	a7 fd       	sbrc	r26, 7
     384:	b0 95       	com	r27
     386:	6a db       	rcall	.-2348   	; 0xfffffa5c <__eeprom_end+0xff7efa52>
     388:	c6 0e       	add	r12, r22
     38a:	d7 1e       	adc	r13, r23
     38c:	e8 1e       	adc	r14, r24
     38e:	f9 1e       	adc	r15, r25
{
	int32_t summ;
	uint8_t i;
	
	summ = new_sample * iir_core->coeffs[0];
	for (i=iir_core->n-1; i>0; i--)
     390:	41 50       	subi	r20, 0x01	; 1
     392:	01 f7       	brne	.-64     	; 0x354 <fir_i16_i8+0x2e>
	{
		samples[i] = samples[i-1];
		summ += (int32_t)samples[i] * iir_core->coeffs[i];
	}
	samples[0] = new_sample;
     394:	19 83       	std	Y+1, r17	; 0x01
     396:	08 83       	st	Y, r16
	return (int16_t)(summ / iir_core->dc_gain);
     398:	21 81       	ldd	r18, Z+1	; 0x01
     39a:	32 81       	ldd	r19, Z+2	; 0x02
     39c:	40 e0       	ldi	r20, 0x00	; 0
     39e:	50 e0       	ldi	r21, 0x00	; 0
     3a0:	c7 01       	movw	r24, r14
     3a2:	b6 01       	movw	r22, r12
     3a4:	40 db       	rcall	.-2432   	; 0xfffffa26 <__eeprom_end+0xff7efa1c>
}
     3a6:	c9 01       	movw	r24, r18
     3a8:	df 91       	pop	r29
     3aa:	cf 91       	pop	r28
     3ac:	1f 91       	pop	r17
     3ae:	0f 91       	pop	r16
     3b0:	ff 90       	pop	r15
     3b2:	ef 90       	pop	r14
     3b4:	df 90       	pop	r13
     3b6:	cf 90       	pop	r12
     3b8:	08 95       	ret

000003ba <update_normalized_adc>:
void update_normalized_adc()
{
	uint8_t i;
	uint16_t adc_raw_summ = 0;
	// Disable interrupts from ADC - to save data integrity
	ADCSRA &= ~(1<<ADIE);	
     3ba:	33 98       	cbi	0x06, 3	; 6
     3bc:	e3 e2       	ldi	r30, 0x23	; 35
     3be:	f1 e0       	ldi	r31, 0x01	; 1


void update_normalized_adc()
{
	uint8_t i;
	uint16_t adc_raw_summ = 0;
     3c0:	80 e0       	ldi	r24, 0x00	; 0
     3c2:	90 e0       	ldi	r25, 0x00	; 0
	// Disable interrupts from ADC - to save data integrity
	ADCSRA &= ~(1<<ADIE);	
	// Get normalized mean window summ
	for (i=0;i<ADC_BUFFER_LENGTH;i++)
		adc_raw_summ += raw_adc_buffer[i];
     3c4:	21 91       	ld	r18, Z+
     3c6:	31 91       	ld	r19, Z+
     3c8:	82 0f       	add	r24, r18
     3ca:	93 1f       	adc	r25, r19
	uint8_t i;
	uint16_t adc_raw_summ = 0;
	// Disable interrupts from ADC - to save data integrity
	ADCSRA &= ~(1<<ADIE);	
	// Get normalized mean window summ
	for (i=0;i<ADC_BUFFER_LENGTH;i++)
     3cc:	21 e0       	ldi	r18, 0x01	; 1
     3ce:	e3 36       	cpi	r30, 0x63	; 99
     3d0:	f2 07       	cpc	r31, r18
     3d2:	c1 f7       	brne	.-16     	; 0x3c4 <update_normalized_adc+0xa>
		adc_raw_summ += raw_adc_buffer[i];
	// Enable interrupts from ADC
	ADCSRA |= (1<<ADIE);
     3d4:	33 9a       	sbi	0x06, 3	; 6
	
	adc_normalized = adc_raw_summ >> 5;		// ADC_BUFFER_LENGTH = 32 !
     3d6:	9c 01       	movw	r18, r24
     3d8:	65 e0       	ldi	r22, 0x05	; 5
     3da:	36 95       	lsr	r19
     3dc:	27 95       	ror	r18
     3de:	6a 95       	dec	r22
     3e0:	e1 f7       	brne	.-8      	; 0x3da <update_normalized_adc+0x20>
     3e2:	30 93 64 01 	sts	0x0164, r19
     3e6:	20 93 63 01 	sts	0x0163, r18
	adc_oversampled = adc_raw_summ >> 3;
     3ea:	73 e0       	ldi	r23, 0x03	; 3
     3ec:	96 95       	lsr	r25
     3ee:	87 95       	ror	r24
     3f0:	7a 95       	dec	r23
     3f2:	e1 f7       	brne	.-8      	; 0x3ec <update_normalized_adc+0x32>
     3f4:	90 93 22 01 	sts	0x0122, r25
     3f8:	80 93 21 01 	sts	0x0121, r24
	// Filter
	adc_filtered = fir_i16_i8(adc_oversampled, filter_buffer, &fir_filter_rect);	
     3fc:	40 e6       	ldi	r20, 0x60	; 96
     3fe:	50 e0       	ldi	r21, 0x00	; 0
     400:	68 e6       	ldi	r22, 0x68	; 104
     402:	71 e0       	ldi	r23, 0x01	; 1
     404:	90 df       	rcall	.-224    	; 0x326 <fir_i16_i8>
     406:	90 93 20 01 	sts	0x0120, r25
     40a:	80 93 1f 01 	sts	0x011F, r24
	// Check sensor
	adc_status = 0;
     40e:	10 92 65 01 	sts	0x0165, r1
	if (adc_normalized < 50)
     412:	80 91 63 01 	lds	r24, 0x0163
     416:	90 91 64 01 	lds	r25, 0x0164
     41a:	82 33       	cpi	r24, 0x32	; 50
     41c:	91 05       	cpc	r25, r1
     41e:	10 f4       	brcc	.+4      	; 0x424 <update_normalized_adc+0x6a>
		adc_status |= SENSOR_ERROR_NO_PRESENT;
     420:	81 e0       	ldi	r24, 0x01	; 1
     422:	04 c0       	rjmp	.+8      	; 0x42c <update_normalized_adc+0x72>
	else if (adc_normalized >1000)
     424:	89 3e       	cpi	r24, 0xE9	; 233
     426:	93 40       	sbci	r25, 0x03	; 3
     428:	18 f0       	brcs	.+6      	; 0x430 <update_normalized_adc+0x76>
		adc_status |= SENSOR_ERROR_SHORTED;
     42a:	82 e0       	ldi	r24, 0x02	; 2
     42c:	80 93 65 01 	sts	0x0165, r24
     430:	08 95       	ret

00000432 <process_buttons>:
	uint8_t long_press_mask;
	uint8_t long_press_event_mask;
	
	uint16_t composed_state;
	
	raw_delayed = raw_current;
     432:	50 91 f2 00 	lds	r21, 0x00F2
	raw_delayed_inv = raw_current_inv;
     436:	30 91 78 00 	lds	r19, 0x0078
	raw_current = raw_button_state;
     43a:	90 91 c2 01 	lds	r25, 0x01C2
     43e:	90 93 f2 00 	sts	0x00F2, r25
	raw_current_inv = ~raw_current;
     442:	69 2f       	mov	r22, r25
     444:	60 95       	com	r22
     446:	60 93 78 00 	sts	0x0078, r22
	
	// Must be before press_timer update
	long_press_mask = (press_timer >= LONG_PRESS_DELAY) ? 0xFF : 0x00;
     44a:	80 91 f3 00 	lds	r24, 0x00F3
     44e:	8c 30       	cpi	r24, 0x0C	; 12
     450:	10 f0       	brcs	.+4      	; 0x456 <process_buttons+0x24>
     452:	2f ef       	ldi	r18, 0xFF	; 255
     454:	01 c0       	rjmp	.+2      	; 0x458 <process_buttons+0x26>
     456:	20 e0       	ldi	r18, 0x00	; 0
	
	if (raw_delayed != raw_current)
     458:	59 17       	cp	r21, r25
     45a:	19 f0       	breq	.+6      	; 0x462 <__stack+0x3>
	{
		press_timer = 0;
     45c:	10 92 f3 00 	sts	0x00F3, r1
     460:	05 c0       	rjmp	.+10     	; 0x46c <__stack+0xd>
	}
	else if (press_timer <= LONG_PRESS_DELAY)
     462:	8d 30       	cpi	r24, 0x0D	; 13
     464:	18 f4       	brcc	.+6      	; 0x46c <__stack+0xd>
	{
		press_timer++;
     466:	8f 5f       	subi	r24, 0xFF	; 255
     468:	80 93 f3 00 	sts	0x00F3, r24
	}
	
	// Must after press_timer update
	long_press_event_mask = (press_timer == LONG_PRESS_DELAY) ? 0xFF : 0x00;
     46c:	70 91 f3 00 	lds	r23, 0x00F3
     470:	7c 30       	cpi	r23, 0x0C	; 12
     472:	11 f4       	brne	.+4      	; 0x478 <__stack+0x19>
     474:	4f ef       	ldi	r20, 0xFF	; 255
     476:	01 c0       	rjmp	.+2      	; 0x47a <__stack+0x1b>
     478:	40 e0       	ldi	r20, 0x00	; 0
			
	button_action_down = raw_current & raw_delayed_inv;
     47a:	89 2f       	mov	r24, r25
     47c:	83 23       	and	r24, r19
     47e:	80 93 ef 00 	sts	0x00EF, r24
			
	if (press_timer > REPEAT_DELAY)
     482:	77 30       	cpi	r23, 0x07	; 7
     484:	08 f0       	brcs	.+2      	; 0x488 <__stack+0x29>
		raw_delayed_inv |= 0xFF;
     486:	3f ef       	ldi	r19, 0xFF	; 255
	
	button_action_rep = raw_current & raw_delayed_inv;
     488:	39 23       	and	r19, r25
     48a:	30 93 ee 00 	sts	0x00EE, r19
	
	button_action_up_short = raw_current_inv & raw_delayed & ~long_press_mask;
     48e:	20 95       	com	r18
     490:	56 23       	and	r21, r22
     492:	25 23       	and	r18, r21
     494:	20 93 ed 00 	sts	0x00ED, r18
	//button_action_up_long  = raw_current_inv & raw_delayed & long_press_mask;
	button_action_long  = raw_current & long_press_event_mask;
     498:	49 23       	and	r20, r25
     49a:	40 93 ec 00 	sts	0x00EC, r20
	
	// Compose button state
	composed_state = (button_action_down & (BD_MENU | BD_UP | BD_DOWN | BD_ROTFWD | BD_ROTREV | BD_HEATCTRL | BD_CYCLE));
     49e:	8d 7f       	andi	r24, 0xFD	; 253
     4a0:	90 e0       	ldi	r25, 0x00	; 0
	if (button_action_up_short & BD_MENU)
     4a2:	25 fd       	sbrc	r18, 5
		composed_state |= BS_MENU;
     4a4:	91 60       	ori	r25, 0x01	; 1
	//if (button_action_up_long & BD_MENU)
	if (button_action_long & BD_MENU)
     4a6:	45 fd       	sbrc	r20, 5
		composed_state |= BL_MENU;
     4a8:	92 60       	ori	r25, 0x02	; 2
	if (button_action_rep & BD_UP)
     4aa:	36 fd       	sbrc	r19, 6
		composed_state |= BR_UP;	
     4ac:	94 60       	ori	r25, 0x04	; 4
	if (button_action_rep & BD_DOWN)
     4ae:	37 fd       	sbrc	r19, 7
		composed_state |= BR_DOWN;
     4b0:	98 60       	ori	r25, 0x08	; 8

	button_state = composed_state;
     4b2:	90 93 f1 00 	sts	0x00F1, r25
     4b6:	80 93 f0 00 	sts	0x00F0, r24
     4ba:	08 95       	ret

000004bc <processRollControl>:
int16_t dbg_PID_output;


// Function to control motor rotation
void processRollControl(void)
{	
     4bc:	cf 93       	push	r28
//	static uint8_t beepMask = 0x00;
//	uint8_t nextBeepMask = 0xFF;
	static uint8_t force_rotate = 0;
	
	// Process auto power off control
	if (autoPowerOffState & AUTO_POFF_ACTIVE)
     4be:	80 91 f4 00 	lds	r24, 0x00F4
     4c2:	80 ff       	sbrs	r24, 0
     4c4:	0f c0       	rjmp	.+30     	; 0x4e4 <processRollControl+0x28>
	{
		stopCycleRolling(1);	
     4c6:	81 e0       	ldi	r24, 0x01	; 1
     4c8:	07 d8       	rcall	.-4082   	; 0xfffff4d8 <__eeprom_end+0xff7ef4ce>
		if (adc_celsius <= POFF_MOTOR_TRESHOLD)
     4ca:	80 91 66 01 	lds	r24, 0x0166
     4ce:	90 91 67 01 	lds	r25, 0x0167
     4d2:	c3 97       	sbiw	r24, 0x33	; 51
     4d4:	08 f0       	brcs	.+2      	; 0x4d8 <processRollControl+0x1c>
     4d6:	5f c0       	rjmp	.+190    	; 0x596 <processRollControl+0xda>
		{
			force_rotate = ROLL_FWD;		// Default direction
     4d8:	81 e0       	ldi	r24, 0x01	; 1
     4da:	80 93 f6 00 	sts	0x00F6, r24
			setMotorDirection(0);			// Stop the motor
     4de:	80 e0       	ldi	r24, 0x00	; 0
     4e0:	da d7       	rcall	.+4020   	; 0x1496 <setMotorDirection>
     4e2:	59 c0       	rjmp	.+178    	; 0x596 <processRollControl+0xda>
		}
	}
	else
	{
		// Control direction by buttons
		if (button_action_down & BD_ROTFWD)
     4e4:	80 91 ef 00 	lds	r24, 0x00EF
     4e8:	82 ff       	sbrs	r24, 2
     4ea:	04 c0       	rjmp	.+8      	; 0x4f4 <processRollControl+0x38>
		{
			setMotorDirection(ROLL_FWD);	
     4ec:	81 e0       	ldi	r24, 0x01	; 1
     4ee:	d3 d7       	rcall	.+4006   	; 0x1496 <setMotorDirection>
			beepState |= 0x01;			// pressed FWD button
     4f0:	c1 e0       	ldi	r28, 0x01	; 1
     4f2:	13 c0       	rjmp	.+38     	; 0x51a <processRollControl+0x5e>
		}		
		else if (button_action_down & BD_ROTREV)
     4f4:	84 ff       	sbrs	r24, 4
     4f6:	04 c0       	rjmp	.+8      	; 0x500 <processRollControl+0x44>
		{
			setMotorDirection(ROLL_REV);
     4f8:	82 e0       	ldi	r24, 0x02	; 2
     4fa:	cd d7       	rcall	.+3994   	; 0x1496 <setMotorDirection>
			beepState |= 0x02;			// pressed REV button
     4fc:	c2 e0       	ldi	r28, 0x02	; 2
     4fe:	0d c0       	rjmp	.+26     	; 0x51a <processRollControl+0x5e>
		}		
		else if (button_action_long & BD_CYCLE)
     500:	80 91 ec 00 	lds	r24, 0x00EC
     504:	83 ff       	sbrs	r24, 3
     506:	04 c0       	rjmp	.+8      	; 0x510 <processRollControl+0x54>
		{
			stopCycleRolling(1);		// Reset points and disable CYCLE mode (if was enabled)
     508:	81 e0       	ldi	r24, 0x01	; 1
     50a:	e6 d7       	rcall	.+4044   	; 0x14d8 <stopCycleRolling>
			beepState |= 0x08;			// reset of points by long pressing of ROLL button
     50c:	c8 e0       	ldi	r28, 0x08	; 8
     50e:	05 c0       	rjmp	.+10     	; 0x51a <processRollControl+0x5e>
		}
		else if (force_rotate)
     510:	80 91 f6 00 	lds	r24, 0x00F6
     514:	81 11       	cpse	r24, r1
		{
			// Auto power off mode was exited by pressing some other button, not direction buttons
			// Start roll, but do not beep in this case
			setMotorDirection(force_rotate);
     516:	bf d7       	rcall	.+3966   	; 0x1496 <setMotorDirection>


// Function to control motor rotation
void processRollControl(void)
{	
	uint8_t beepState = 0;
     518:	c0 e0       	ldi	r28, 0x00	; 0
		{
			// Auto power off mode was exited by pressing some other button, not direction buttons
			// Start roll, but do not beep in this case
			setMotorDirection(force_rotate);
		}
		force_rotate = 0;		// First normal pass will clear 
     51a:	10 92 f6 00 	sts	0x00F6, r1
			
		if (button_action_up_short & BD_CYCLE)
     51e:	80 91 ed 00 	lds	r24, 0x00ED
     522:	83 ff       	sbrs	r24, 3
     524:	0e c0       	rjmp	.+28     	; 0x542 <processRollControl+0x86>
		{
			if (rollState & ROLL_CYCLE)
     526:	80 91 10 01 	lds	r24, 0x0110
     52a:	82 ff       	sbrs	r24, 2
     52c:	04 c0       	rjmp	.+8      	; 0x536 <processRollControl+0x7a>
			{
				stopCycleRolling(0);
     52e:	80 e0       	ldi	r24, 0x00	; 0
     530:	d3 d7       	rcall	.+4006   	; 0x14d8 <stopCycleRolling>
				beepState |= 0x20;		// stopped cycle
     532:	c0 62       	ori	r28, 0x20	; 32
     534:	06 c0       	rjmp	.+12     	; 0x542 <processRollControl+0x86>
			}
			else if (startCycleRolling())
     536:	0c d8       	rcall	.-4072   	; 0xfffff550 <__eeprom_end+0xff7ef546>
     538:	88 23       	and	r24, r24
     53a:	11 f0       	breq	.+4      	; 0x540 <processRollControl+0x84>
			{
				beepState |= 0x10;		// started cycle
     53c:	c0 61       	ori	r28, 0x10	; 16
     53e:	01 c0       	rjmp	.+2      	; 0x542 <processRollControl+0x86>
			}
			else
			{
				beepState |= 0x40;		// failed to start cycle
     540:	c0 64       	ori	r28, 0x40	; 64
			}			
		}		
			
		if (rollState & ROLL_DIR_CHANGED)
     542:	80 91 10 01 	lds	r24, 0x0110
     546:	85 ff       	sbrs	r24, 5
     548:	04 c0       	rjmp	.+8      	; 0x552 <processRollControl+0x96>
		{
			rollState &= ~ROLL_DIR_CHANGED;
     54a:	8f 7d       	andi	r24, 0xDF	; 223
     54c:	80 93 10 01 	sts	0x0110, r24
			beepState |= 0x04;	
     550:	c4 60       	ori	r28, 0x04	; 4
		}
			
		if (rollState & CYCLE_ROLL_DONE)
     552:	80 91 10 01 	lds	r24, 0x0110
     556:	84 ff       	sbrs	r24, 4
     558:	04 c0       	rjmp	.+8      	; 0x562 <processRollControl+0xa6>
		{
			rollState &= ~CYCLE_ROLL_DONE;
     55a:	8f 7e       	andi	r24, 0xEF	; 239
     55c:	80 93 10 01 	sts	0x0110, r24
			beepState |= 0x80;	
     560:	c0 68       	ori	r28, 0x80	; 128
		}		
			
		//-----------//
			
		if (beepState & 0x80)		// Roll cycle done
     562:	c7 ff       	sbrs	r28, 7
     564:	06 c0       	rjmp	.+12     	; 0x572 <processRollControl+0xb6>
		{
			SetBeeperFreq(1000);
     566:	88 ee       	ldi	r24, 0xE8	; 232
     568:	93 e0       	ldi	r25, 0x03	; 3
     56a:	a7 d9       	rcall	.-3250   	; 0xfffff8ba <__eeprom_end+0xff7ef8b0>
			StartBeep(200);
     56c:	88 ec       	ldi	r24, 0xC8	; 200
     56e:	90 e0       	ldi	r25, 0x00	; 0
     570:	11 c0       	rjmp	.+34     	; 0x594 <processRollControl+0xd8>
		}		
		else if (beepState & 0x40)	// Roll cycle start fail
     572:	c6 ff       	sbrs	r28, 6
     574:	03 c0       	rjmp	.+6      	; 0x57c <processRollControl+0xc0>
		{
			SetBeeperFreq(500);
     576:	84 ef       	ldi	r24, 0xF4	; 244
     578:	91 e0       	ldi	r25, 0x01	; 1
     57a:	09 c0       	rjmp	.+18     	; 0x58e <processRollControl+0xd2>
			StartBeep(50);
		} 
		else if (beepState & 0x08)	// Reset points
     57c:	c3 ff       	sbrs	r28, 3
     57e:	03 c0       	rjmp	.+6      	; 0x586 <processRollControl+0xca>
		{
			SetBeeperFreq(800);
     580:	80 e2       	ldi	r24, 0x20	; 32
     582:	93 e0       	ldi	r25, 0x03	; 3
     584:	04 c0       	rjmp	.+8      	; 0x58e <processRollControl+0xd2>
			StartBeep(50);
		}							// Other
		else if ( beepState & (0x01 | 0x02 | 0x10 | 0x20 | 0x04) )
     586:	c7 73       	andi	r28, 0x37	; 55
     588:	31 f0       	breq	.+12     	; 0x596 <processRollControl+0xda>
		{
			SetBeeperFreq(1000);
     58a:	88 ee       	ldi	r24, 0xE8	; 232
     58c:	93 e0       	ldi	r25, 0x03	; 3
     58e:	95 d9       	rcall	.-3286   	; 0xfffff8ba <__eeprom_end+0xff7ef8b0>
			StartBeep(50);	
     590:	82 e3       	ldi	r24, 0x32	; 50
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	b2 d9       	rcall	.-3228   	; 0xfffff8fa <__eeprom_end+0xff7ef8f0>
		}			
			
	}

	//----- LED indication ------//
	clearExtraLeds(LED_ROTFWD | LED_ROTREV);
     596:	88 e1       	ldi	r24, 0x18	; 24
     598:	b3 d2       	rcall	.+1382   	; 0xb00 <clearExtraLeds>
	if (rollState & ROLL_FWD)
     59a:	80 91 10 01 	lds	r24, 0x0110
     59e:	80 ff       	sbrs	r24, 0
     5a0:	02 c0       	rjmp	.+4      	; 0x5a6 <processRollControl+0xea>
		setExtraLeds(LED_ROTFWD);
     5a2:	88 e0       	ldi	r24, 0x08	; 8
     5a4:	03 c0       	rjmp	.+6      	; 0x5ac <processRollControl+0xf0>
	else if (rollState & ROLL_REV)
     5a6:	81 ff       	sbrs	r24, 1
     5a8:	03 c0       	rjmp	.+6      	; 0x5b0 <processRollControl+0xf4>
		setExtraLeds(LED_ROTREV);
     5aa:	80 e1       	ldi	r24, 0x10	; 16
}
     5ac:	cf 91       	pop	r28
	//----- LED indication ------//
	clearExtraLeds(LED_ROTFWD | LED_ROTREV);
	if (rollState & ROLL_FWD)
		setExtraLeds(LED_ROTFWD);
	else if (rollState & ROLL_REV)
		setExtraLeds(LED_ROTREV);
     5ae:	a2 c2       	rjmp	.+1348   	; 0xaf4 <setExtraLeds>
}
     5b0:	cf 91       	pop	r28
     5b2:	08 95       	ret

000005b4 <processPID>:




uint8_t processPID(uint16_t setPoint, uint16_t processValue)
{
     5b4:	ef 92       	push	r14
     5b6:	ff 92       	push	r15
     5b8:	0f 93       	push	r16
     5ba:	1f 93       	push	r17
     5bc:	cf 93       	push	r28
     5be:	df 93       	push	r29
     5c0:	8b 01       	movw	r16, r22
	int16_t error, p_term, i_term, d_term, temp;
	static uint16_t lastProcessValue;
	static int16_t integAcc = 0;
	
	error = setPoint - processValue;
     5c2:	86 1b       	sub	r24, r22
     5c4:	97 0b       	sbc	r25, r23
	
	
	//------ Calculate P term --------//
	
	if (error > 100 )
     5c6:	85 36       	cpi	r24, 0x65	; 101
     5c8:	91 05       	cpc	r25, r1
     5ca:	5c f4       	brge	.+22     	; 0x5e2 <processPID+0x2e>
	{
		p_term = 2000;	
	}
	else if (error < -100 )
     5cc:	8c 39       	cpi	r24, 0x9C	; 156
     5ce:	2f ef       	ldi	r18, 0xFF	; 255
     5d0:	92 07       	cpc	r25, r18
     5d2:	54 f0       	brlt	.+20     	; 0x5e8 <processPID+0x34>
	{
		p_term = -2000 ;	
	}
	else
	{
		p_term = error * Kp;
     5d4:	2a e0       	ldi	r18, 0x0A	; 10
     5d6:	28 9f       	mul	r18, r24
     5d8:	e0 01       	movw	r28, r0
     5da:	29 9f       	mul	r18, r25
     5dc:	d0 0d       	add	r29, r0
     5de:	11 24       	eor	r1, r1
     5e0:	05 c0       	rjmp	.+10     	; 0x5ec <processPID+0x38>
	
	//------ Calculate P term --------//
	
	if (error > 100 )
	{
		p_term = 2000;	
     5e2:	c0 ed       	ldi	r28, 0xD0	; 208
     5e4:	d7 e0       	ldi	r29, 0x07	; 7
     5e6:	02 c0       	rjmp	.+4      	; 0x5ec <processPID+0x38>
	}
	else if (error < -100 )
	{
		p_term = -2000 ;	
     5e8:	c0 e3       	ldi	r28, 0x30	; 48
     5ea:	d8 ef       	ldi	r29, 0xF8	; 248
		p_term = error * Kp;
	}
	
	//------ Calculate I term --------//

	integAcc += error;
     5ec:	20 91 f7 00 	lds	r18, 0x00F7
     5f0:	30 91 f8 00 	lds	r19, 0x00F8
     5f4:	28 0f       	add	r18, r24
     5f6:	39 1f       	adc	r19, r25
	
	if (integAcc > 1000 )
     5f8:	29 3e       	cpi	r18, 0xE9	; 233
     5fa:	83 e0       	ldi	r24, 0x03	; 3
     5fc:	38 07       	cpc	r19, r24
     5fe:	3c f0       	brlt	.+14     	; 0x60e <processPID+0x5a>
	{
		integAcc = 1000;
     600:	88 ee       	ldi	r24, 0xE8	; 232
     602:	93 e0       	ldi	r25, 0x03	; 3
     604:	90 93 f8 00 	sts	0x00F8, r25
     608:	80 93 f7 00 	sts	0x00F7, r24
     60c:	0b c0       	rjmp	.+22     	; 0x624 <processPID+0x70>
	}
	else if (integAcc < 0)
     60e:	37 fd       	sbrc	r19, 7
     610:	05 c0       	rjmp	.+10     	; 0x61c <processPID+0x68>
		p_term = error * Kp;
	}
	
	//------ Calculate I term --------//

	integAcc += error;
     612:	30 93 f8 00 	sts	0x00F8, r19
     616:	20 93 f7 00 	sts	0x00F7, r18
     61a:	04 c0       	rjmp	.+8      	; 0x624 <processPID+0x70>
	{
		integAcc = 1000;
	}
	else if (integAcc < 0)
	{
		integAcc = 0;
     61c:	10 92 f8 00 	sts	0x00F8, r1
     620:	10 92 f7 00 	sts	0x00F7, r1
	}
	i_term = integAcc * Ki;
     624:	20 91 f7 00 	lds	r18, 0x00F7
     628:	30 91 f8 00 	lds	r19, 0x00F8
     62c:	45 e0       	ldi	r20, 0x05	; 5
     62e:	42 9f       	mul	r20, r18
     630:	c0 01       	movw	r24, r0
     632:	43 9f       	mul	r20, r19
     634:	90 0d       	add	r25, r0
     636:	11 24       	eor	r1, r1
	i_term /= 20;
     638:	64 e1       	ldi	r22, 0x14	; 20
     63a:	70 e0       	ldi	r23, 0x00	; 0
     63c:	e1 d9       	rcall	.-3134   	; 0xfffffa00 <__eeprom_end+0xff7ef9f6>
     63e:	7b 01       	movw	r14, r22
	
	
	//------ Calculate D term --------//
	// 13_1
	d_term = fir_i16_i8((lastProcessValue - processValue)*10, pid_dterm_buffer, &dterm_filter_core);
     640:	80 91 f9 00 	lds	r24, 0x00F9
     644:	90 91 fa 00 	lds	r25, 0x00FA
     648:	80 1b       	sub	r24, r16
     64a:	91 0b       	sbc	r25, r17
     64c:	49 e7       	ldi	r20, 0x79	; 121
     64e:	50 e0       	ldi	r21, 0x00	; 0
     650:	63 ea       	ldi	r22, 0xA3	; 163
     652:	71 e0       	ldi	r23, 0x01	; 1
     654:	2a e0       	ldi	r18, 0x0A	; 10
     656:	fc 01       	movw	r30, r24
     658:	2e 9f       	mul	r18, r30
     65a:	c0 01       	movw	r24, r0
     65c:	2f 9f       	mul	r18, r31
     65e:	90 0d       	add	r25, r0
     660:	11 24       	eor	r1, r1
     662:	61 de       	rcall	.-830    	; 0x326 <fir_i16_i8>
	lastProcessValue = processValue;
     664:	10 93 fa 00 	sts	0x00FA, r17
     668:	00 93 f9 00 	sts	0x00F9, r16
	d_term = Kd * d_term;
     66c:	22 e3       	ldi	r18, 0x32	; 50
     66e:	28 9f       	mul	r18, r24
     670:	f0 01       	movw	r30, r0
     672:	29 9f       	mul	r18, r25
     674:	f0 0d       	add	r31, r0
     676:	11 24       	eor	r1, r1
	
	//--------- Summ terms -----------//
	temp = (p_term + i_term + d_term) / SCALING_FACTOR;
     678:	ce 01       	movw	r24, r28
     67a:	8e 0d       	add	r24, r14
     67c:	9f 1d       	adc	r25, r15
     67e:	8e 0f       	add	r24, r30
     680:	9f 1f       	adc	r25, r31
     682:	65 e0       	ldi	r22, 0x05	; 5
     684:	70 e0       	ldi	r23, 0x00	; 0
     686:	bc d9       	rcall	.-3208   	; 0xfffffa00 <__eeprom_end+0xff7ef9f6>
     688:	9b 01       	movw	r18, r22
     68a:	77 ff       	sbrs	r23, 7
     68c:	02 c0       	rjmp	.+4      	; 0x692 <processPID+0xde>
     68e:	20 e0       	ldi	r18, 0x00	; 0
     690:	30 e0       	ldi	r19, 0x00	; 0
     692:	c9 01       	movw	r24, r18
     694:	25 36       	cpi	r18, 0x65	; 101
     696:	31 05       	cpc	r19, r1
     698:	14 f0       	brlt	.+4      	; 0x69e <processPID+0xea>
     69a:	84 e6       	ldi	r24, 0x64	; 100
     69c:	90 e0       	ldi	r25, 0x00	; 0
		temp = 0;
	}
	
	
	//------- Debug --------//
	dbg_PID_p_term = p_term;
     69e:	d0 93 9e 01 	sts	0x019E, r29
     6a2:	c0 93 9d 01 	sts	0x019D, r28
	dbg_PID_d_term = d_term;
     6a6:	f0 93 ac 01 	sts	0x01AC, r31
     6aa:	e0 93 ab 01 	sts	0x01AB, r30
	dbg_PID_i_term = i_term;
     6ae:	f0 92 a2 01 	sts	0x01A2, r15
     6b2:	e0 92 a1 01 	sts	0x01A1, r14
	dbg_PID_output = temp;
     6b6:	90 93 9c 01 	sts	0x019C, r25
     6ba:	80 93 9b 01 	sts	0x019B, r24
	
	
	return temp;
	
}
     6be:	df 91       	pop	r29
     6c0:	cf 91       	pop	r28
     6c2:	1f 91       	pop	r17
     6c4:	0f 91       	pop	r16
     6c6:	ff 90       	pop	r15
     6c8:	ef 90       	pop	r14
     6ca:	08 95       	ret

000006cc <processHeaterControl>:
	processPID(0,adc_filtered);			// oversampled PID control
}


void processHeaterControl(void)
{
     6cc:	0f 93       	push	r16
     6ce:	1f 93       	push	r17
     6d0:	cf 93       	push	r28
     6d2:	df 93       	push	r29
	uint16_t setPoint;
	uint16_t processValue;
	uint16_t pid_output;
	
	// Process heater ON/OFF control by button
	if (button_state & BD_HEATCTRL)
     6d4:	80 91 f0 00 	lds	r24, 0x00F0
     6d8:	80 ff       	sbrs	r24, 0
     6da:	0b c0       	rjmp	.+22     	; 0x6f2 <processHeaterControl+0x26>
	{
		heaterState ^= HEATER_ENABLED;
     6dc:	80 91 f5 00 	lds	r24, 0x00F5
     6e0:	91 e0       	ldi	r25, 0x01	; 1
     6e2:	89 27       	eor	r24, r25
     6e4:	80 93 f5 00 	sts	0x00F5, r24
		// Force update heater power
		sys_timers.flags |= UPDATE_PID;		// Not very good approach if UPDATE_PID flag is used somewhere else
     6e8:	80 91 8f 00 	lds	r24, 0x008F
     6ec:	80 64       	ori	r24, 0x40	; 64
     6ee:	80 93 8f 00 	sts	0x008F, r24
	}
	
	// Process auto power off control and sensor errors
	if ((autoPowerOffState & AUTO_POFF_ACTIVE) || (adc_status & (SENSOR_ERROR_NO_PRESENT | SENSOR_ERROR_SHORTED)))
     6f2:	80 91 f4 00 	lds	r24, 0x00F4
     6f6:	80 fd       	sbrc	r24, 0
     6f8:	04 c0       	rjmp	.+8      	; 0x702 <processHeaterControl+0x36>
     6fa:	80 91 65 01 	lds	r24, 0x0165
     6fe:	83 70       	andi	r24, 0x03	; 3
     700:	29 f0       	breq	.+10     	; 0x70c <processHeaterControl+0x40>
	{
		heaterState &= ~HEATER_ENABLED;
     702:	80 91 f5 00 	lds	r24, 0x00F5
     706:	8e 7f       	andi	r24, 0xFE	; 254
     708:	80 93 f5 00 	sts	0x00F5, r24
	}		
	
	// Check if heater control should be updated
	// PID call interval is a multiple of Celsius update interval. 
	if (sys_timers.flags & UPDATE_PID)
     70c:	80 91 8f 00 	lds	r24, 0x008F
     710:	86 ff       	sbrs	r24, 6
     712:	39 c0       	rjmp	.+114    	; 0x786 <processHeaterControl+0xba>
	{
		// Convert temperature setup to equal ADC value
		set_value_adc = conv_Celsius_to_ADC(p.setup_temp_value);					
     714:	80 91 97 01 	lds	r24, 0x0197
     718:	90 e0       	ldi	r25, 0x00	; 0
     71a:	5d dd       	rcall	.-1350   	; 0x1d6 <conv_Celsius_to_ADC>

		setPoint = set_value_adc * 4;		
     71c:	ec 01       	movw	r28, r24
     71e:	cc 0f       	add	r28, r28
     720:	dd 1f       	adc	r29, r29
     722:	cc 0f       	add	r28, r28
     724:	dd 1f       	adc	r29, r29
		setPoint >>= 1;
     726:	d6 95       	lsr	r29
     728:	c7 95       	ror	r28
		processValue = adc_filtered >> 1;	// normal PID control
     72a:	00 91 1f 01 	lds	r16, 0x011F
     72e:	10 91 20 01 	lds	r17, 0x0120
     732:	16 95       	lsr	r17
     734:	07 95       	ror	r16
		
		// Process PID
		pid_output = processPID(setPoint, processValue);		
     736:	b8 01       	movw	r22, r16
     738:	ce 01       	movw	r24, r28
     73a:	3c df       	rcall	.-392    	; 0x5b4 <processPID>
					
		// If heater is disabled, override output
		if (!(heaterState & HEATER_ENABLED))
     73c:	90 91 f5 00 	lds	r25, 0x00F5
     740:	90 ff       	sbrs	r25, 0
     742:	02 c0       	rjmp	.+4      	; 0x748 <processHeaterControl+0x7c>
		setPoint = set_value_adc * 4;		
		setPoint >>= 1;
		processValue = adc_filtered >> 1;	// normal PID control
		
		// Process PID
		pid_output = processPID(setPoint, processValue);		
     744:	90 e0       	ldi	r25, 0x00	; 0
     746:	02 c0       	rjmp	.+4      	; 0x74c <processHeaterControl+0x80>
					
		// If heater is disabled, override output
		if (!(heaterState & HEATER_ENABLED))
			pid_output = 0;
     748:	80 e0       	ldi	r24, 0x00	; 0
     74a:	90 e0       	ldi	r25, 0x00	; 0
			
		// Set new heater power value	
		setHeaterPower(pid_output);	
     74c:	97 d6       	rcall	.+3374   	; 0x147c <setHeaterPower>
		
		//------- Debug --------//		
		// PID input:
		dbg_SetPointCelsius = (heaterState & HEATER_ENABLED) ? p.setup_temp_value : 0;
     74e:	80 91 f5 00 	lds	r24, 0x00F5
     752:	98 2f       	mov	r25, r24
     754:	91 70       	andi	r25, 0x01	; 1
     756:	80 ff       	sbrs	r24, 0
     758:	03 c0       	rjmp	.+6      	; 0x760 <processHeaterControl+0x94>
     75a:	80 91 97 01 	lds	r24, 0x0197
     75e:	01 c0       	rjmp	.+2      	; 0x762 <processHeaterControl+0x96>
     760:	80 e0       	ldi	r24, 0x00	; 0
     762:	80 93 90 01 	sts	0x0190, r24
		dbg_SetPointPID = (heaterState & HEATER_ENABLED) ? setPoint : 0;
     766:	91 11       	cpse	r25, r1
     768:	02 c0       	rjmp	.+4      	; 0x76e <processHeaterControl+0xa2>
     76a:	c0 e0       	ldi	r28, 0x00	; 0
     76c:	d0 e0       	ldi	r29, 0x00	; 0
     76e:	d0 93 ae 01 	sts	0x01AE, r29
     772:	c0 93 ad 01 	sts	0x01AD, r28
		dbg_RealTempCelsius = adc_filtered;
     776:	80 91 1f 01 	lds	r24, 0x011F
     77a:	80 93 af 01 	sts	0x01AF, r24
		dbg_RealTempPID = processValue;
     77e:	10 93 a0 01 	sts	0x01A0, r17
     782:	00 93 9f 01 	sts	0x019F, r16
		
	}	
		
	
	//----- LED indication ------//
	if (heaterState & HEATER_ENABLED)
     786:	80 91 f5 00 	lds	r24, 0x00F5
     78a:	80 ff       	sbrs	r24, 0
     78c:	06 c0       	rjmp	.+12     	; 0x79a <processHeaterControl+0xce>
		setExtraLeds(LED_HEATER);
     78e:	84 e0       	ldi	r24, 0x04	; 4
	else
		clearExtraLeds(LED_HEATER);
	
}
     790:	df 91       	pop	r29
     792:	cf 91       	pop	r28
     794:	1f 91       	pop	r17
     796:	0f 91       	pop	r16
	}	
		
	
	//----- LED indication ------//
	if (heaterState & HEATER_ENABLED)
		setExtraLeds(LED_HEATER);
     798:	ad c1       	rjmp	.+858    	; 0xaf4 <setExtraLeds>
	else
		clearExtraLeds(LED_HEATER);
     79a:	84 e0       	ldi	r24, 0x04	; 4
	
}
     79c:	df 91       	pop	r29
     79e:	cf 91       	pop	r28
     7a0:	1f 91       	pop	r17
     7a2:	0f 91       	pop	r16
	
	//----- LED indication ------//
	if (heaterState & HEATER_ENABLED)
		setExtraLeds(LED_HEATER);
	else
		clearExtraLeds(LED_HEATER);
     7a4:	ad c1       	rjmp	.+858    	; 0xb00 <clearExtraLeds>

000007a6 <heaterInit>:


void heaterInit(void)
{
	//processPID(0,adc_normalized);
	processPID(0,adc_filtered);			// oversampled PID control
     7a6:	60 91 1f 01 	lds	r22, 0x011F
     7aa:	70 91 20 01 	lds	r23, 0x0120
     7ae:	80 e0       	ldi	r24, 0x00	; 0
     7b0:	90 e0       	ldi	r25, 0x00	; 0
     7b2:	00 cf       	rjmp	.-512    	; 0x5b4 <processPID>

000007b4 <processHeaterAlerts>:

// Function to process all heater alerts:
//	- getting near to desired temperature
//	- continuous heating when disabled
void processHeaterAlerts(void)
{
     7b4:	cf 93       	push	r28
     7b6:	df 93       	push	r29
	static uint8_t tempAlertRange = TEMP_ALERT_RANGE;
	static uint16_t refCapturedTemp = 0xFFFF;
	uint16_t currentTemperature = adc_celsius;
     7b8:	c0 91 66 01 	lds	r28, 0x0166
     7bc:	d0 91 67 01 	lds	r29, 0x0167
	
	
	// Indicate reaching of desired temperature
	if ( (currentTemperature > p.setup_temp_value - tempAlertRange) && (currentTemperature < p.setup_temp_value + tempAlertRange) )
     7c0:	20 91 97 01 	lds	r18, 0x0197
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	60 91 80 00 	lds	r22, 0x0080
     7ca:	86 2f       	mov	r24, r22
     7cc:	90 e0       	ldi	r25, 0x00	; 0
     7ce:	a9 01       	movw	r20, r18
     7d0:	48 1b       	sub	r20, r24
     7d2:	59 0b       	sbc	r21, r25
     7d4:	4c 17       	cp	r20, r28
     7d6:	5d 07       	cpc	r21, r29
     7d8:	98 f4       	brcc	.+38     	; 0x800 <processHeaterAlerts+0x4c>
     7da:	82 0f       	add	r24, r18
     7dc:	93 1f       	adc	r25, r19
     7de:	c8 17       	cp	r28, r24
     7e0:	d9 07       	cpc	r29, r25
     7e2:	70 f4       	brcc	.+28     	; 0x800 <processHeaterAlerts+0x4c>
	{
		if ((tempAlertRange == TEMP_ALERT_RANGE) && (heaterState & HEATER_ENABLED))
     7e4:	65 30       	cpi	r22, 0x05	; 5
     7e6:	51 f4       	brne	.+20     	; 0x7fc <processHeaterAlerts+0x48>
     7e8:	80 91 f5 00 	lds	r24, 0x00F5
     7ec:	80 ff       	sbrs	r24, 0
     7ee:	06 c0       	rjmp	.+12     	; 0x7fc <processHeaterAlerts+0x48>
		{
			SetBeeperFreq(1000);
     7f0:	88 ee       	ldi	r24, 0xE8	; 232
     7f2:	93 e0       	ldi	r25, 0x03	; 3
     7f4:	62 d8       	rcall	.-3900   	; 0xfffff8ba <__eeprom_end+0xff7ef8b0>
			StartBeep(400);
     7f6:	80 e9       	ldi	r24, 0x90	; 144
     7f8:	91 e0       	ldi	r25, 0x01	; 1
     7fa:	7f d8       	rcall	.-3842   	; 0xfffff8fa <__eeprom_end+0xff7ef8f0>
		}
		// Add some hysteresis
		tempAlertRange = TEMP_ALERT_RANGE + TEMP_ALERT_HYST;
     7fc:	8a e0       	ldi	r24, 0x0A	; 10
     7fe:	01 c0       	rjmp	.+2      	; 0x802 <processHeaterAlerts+0x4e>
	}			
	else
	{
		tempAlertRange = TEMP_ALERT_RANGE;
     800:	85 e0       	ldi	r24, 0x05	; 5
     802:	80 93 80 00 	sts	0x0080, r24
	// Growing temperature with heater disabled alert 
	// This alert is done regardless of global sound enable
	// A false triggering may occur if ambient temperature grows.
	// To reset the warning in this case just turn on heater for at least one systimer tick (50ms)
	// If heater is enabled, it is implied that user controls heating process
	if (heaterState & (HEATER_ENABLED | CALIBRATION_ACTIVE))
     806:	80 91 f5 00 	lds	r24, 0x00F5
     80a:	83 70       	andi	r24, 0x03	; 3
     80c:	09 f0       	breq	.+2      	; 0x810 <processHeaterAlerts+0x5c>
     80e:	0b c0       	rjmp	.+22     	; 0x826 <processHeaterAlerts+0x72>
	{
		// Heater enabled, just save current temperature as reference
		// Same if calibration in progress, even if heater is disabled
		refCapturedTemp = currentTemperature;
	}
	else if (sys_timers.flags & EXPIRED_10SEC)
     810:	80 91 8f 00 	lds	r24, 0x008F
     814:	81 ff       	sbrs	r24, 1
     816:	19 c0       	rjmp	.+50     	; 0x84a <processHeaterAlerts+0x96>
	{
		// Heater disabled. If temperature is falling,
		if (currentTemperature < refCapturedTemp)
     818:	80 91 81 00 	lds	r24, 0x0081
     81c:	90 91 82 00 	lds	r25, 0x0082
     820:	c8 17       	cp	r28, r24
     822:	d9 07       	cpc	r29, r25
     824:	28 f4       	brcc	.+10     	; 0x830 <processHeaterAlerts+0x7c>
		{
			// save current temperature as reference
			refCapturedTemp = currentTemperature;
     826:	d0 93 82 00 	sts	0x0082, r29
     82a:	c0 93 81 00 	sts	0x0081, r28
     82e:	0d c0       	rjmp	.+26     	; 0x84a <processHeaterAlerts+0x96>
		else
		{
			// Heater is disabled. If current temperature is higher than reference + some safe interval,
			// there might be a hardware failure - short circuit, etc
			// BEEP like a devil  }:-(
			if (currentTemperature >= (refCapturedTemp + SAFE_TEMP_INTERVAL))
     830:	44 96       	adiw	r24, 0x14	; 20
     832:	c8 17       	cp	r28, r24
     834:	d9 07       	cpc	r29, r25
     836:	48 f0       	brcs	.+18     	; 0x84a <processHeaterAlerts+0x96>
			{
				// Enable beeper output regardless of menu setting
				OverrideSoundDisable();
     838:	72 d8       	rcall	.-3868   	; 0xfffff91e <__eeprom_end+0xff7ef914>
				SetBeeperFreq(1500);
     83a:	8c ed       	ldi	r24, 0xDC	; 220
     83c:	95 e0       	ldi	r25, 0x05	; 5
     83e:	3d d8       	rcall	.-3974   	; 0xfffff8ba <__eeprom_end+0xff7ef8b0>
				StartBeep(5000);	
     840:	88 e8       	ldi	r24, 0x88	; 136
     842:	93 e1       	ldi	r25, 0x13	; 19
			}
		}
	}
	

}
     844:	df 91       	pop	r29
     846:	cf 91       	pop	r28
			if (currentTemperature >= (refCapturedTemp + SAFE_TEMP_INTERVAL))
			{
				// Enable beeper output regardless of menu setting
				OverrideSoundDisable();
				SetBeeperFreq(1500);
				StartBeep(5000);	
     848:	58 c8       	rjmp	.-3920   	; 0xfffff8fa <__eeprom_end+0xff7ef8f0>
			}
		}
	}
	

}
     84a:	df 91       	pop	r29
     84c:	cf 91       	pop	r28
     84e:	08 95       	ret

00000850 <restoreGlobalParams>:


void restoreGlobalParams(void)
{
	eeprom_read_block(&p,&eeGlobalParams,sizeof(eeGlobalParams));
     850:	44 e0       	ldi	r20, 0x04	; 4
     852:	50 e0       	ldi	r21, 0x00	; 0
     854:	66 e0       	ldi	r22, 0x06	; 6
     856:	70 e0       	ldi	r23, 0x00	; 0
     858:	87 e9       	ldi	r24, 0x97	; 151
     85a:	91 e0       	ldi	r25, 0x01	; 1
     85c:	43 d9       	rcall	.-3450   	; 0xfffffae4 <__eeprom_end+0xff7efada>
	eeprom_read_block(&cp,&eeCalibrationParams,sizeof(eeCalibrationParams));
     85e:	46 e0       	ldi	r20, 0x06	; 6
     860:	50 e0       	ldi	r21, 0x00	; 0
     862:	60 e0       	ldi	r22, 0x00	; 0
     864:	70 e0       	ldi	r23, 0x00	; 0
     866:	81 e9       	ldi	r24, 0x91	; 145
     868:	91 e0       	ldi	r25, 0x01	; 1
     86a:	3c c9       	rjmp	.-3464   	; 0xfffffae4 <__eeprom_end+0xff7efada>

0000086c <saveCalibrationToEEPROM>:
}


void saveCalibrationToEEPROM(void)
{
	eeprom_update_block(&cp,&eeCalibrationParams,sizeof(eeCalibrationParams));	
     86c:	46 e0       	ldi	r20, 0x06	; 6
     86e:	50 e0       	ldi	r21, 0x00	; 0
     870:	60 e0       	ldi	r22, 0x00	; 0
     872:	70 e0       	ldi	r23, 0x00	; 0
     874:	81 e9       	ldi	r24, 0x91	; 145
     876:	91 e0       	ldi	r25, 0x01	; 1
     878:	45 c9       	rjmp	.-3446   	; 0xfffffb04 <__eeprom_end+0xff7efafa>

0000087a <exitPowerOff>:

void exitPowerOff(void)
{

	// Put all ports into HI-Z
	DDRB = 0x00;
     87a:	17 ba       	out	0x17, r1	; 23
	PORTB = 0x00;
     87c:	18 ba       	out	0x18, r1	; 24
	DDRC = 0x00;
     87e:	14 ba       	out	0x14, r1	; 20
	PORTC = 0x00;
     880:	15 ba       	out	0x15, r1	; 21
	DDRD = 0x00;
     882:	11 ba       	out	0x11, r1	; 17
	PORTD = 0x00;
     884:	12 ba       	out	0x12, r1	; 18
	
	// Disable all interrupts
	cli();
     886:	f8 94       	cli
	
	// Save parameters to EEPROM
	eeprom_update_block(&p,&eeGlobalParams,sizeof(eeGlobalParams));	
     888:	44 e0       	ldi	r20, 0x04	; 4
     88a:	50 e0       	ldi	r21, 0x00	; 0
     88c:	66 e0       	ldi	r22, 0x06	; 6
     88e:	70 e0       	ldi	r23, 0x00	; 0
     890:	87 e9       	ldi	r24, 0x97	; 151
     892:	91 e0       	ldi	r25, 0x01	; 1
     894:	37 d9       	rcall	.-3474   	; 0xfffffb04 <__eeprom_end+0xff7efafa>
     896:	ff cf       	rjmp	.-2      	; 0x896 <exitPowerOff+0x1c>

00000898 <decode_led_char>:
//---------------------------------------------//
// Decodes normal string literal to the
//	7-segment representation
//---------------------------------------------//
static uint8_t decode_led_char(char c)
{
     898:	20 e0       	ldi	r18, 0x00	; 0
     89a:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t i;
	encode_7seg_pair encode_pair;
	for (i = 0; i < sizeof(led_encode_table)/sizeof(encode_7seg_pair); i++  )
	{
		encode_pair.code = pgm_read_byte(&led_encode_table[i].code);
     89c:	a9 01       	movw	r20, r18
     89e:	44 0f       	add	r20, r20
     8a0:	55 1f       	adc	r21, r21
     8a2:	fa 01       	movw	r30, r20
     8a4:	ea 5d       	subi	r30, 0xDA	; 218
     8a6:	ff 4f       	sbci	r31, 0xFF	; 255
     8a8:	e4 91       	lpm	r30, Z
		if (encode_pair.code == c)
     8aa:	e8 13       	cpse	r30, r24
     8ac:	05 c0       	rjmp	.+10     	; 0x8b8 <decode_led_char+0x20>
		{
			i = pgm_read_byte(&led_encode_table[i].segdata);
     8ae:	fa 01       	movw	r30, r20
     8b0:	e9 5d       	subi	r30, 0xD9	; 217
     8b2:	ff 4f       	sbci	r31, 0xFF	; 255
     8b4:	84 91       	lpm	r24, Z
     8b6:	08 95       	ret
     8b8:	2f 5f       	subi	r18, 0xFF	; 255
     8ba:	3f 4f       	sbci	r19, 0xFF	; 255
//---------------------------------------------//
static uint8_t decode_led_char(char c)
{
	uint8_t i;
	encode_7seg_pair encode_pair;
	for (i = 0; i < sizeof(led_encode_table)/sizeof(encode_7seg_pair); i++  )
     8bc:	2a 31       	cpi	r18, 0x1A	; 26
     8be:	31 05       	cpc	r19, r1
     8c0:	69 f7       	brne	.-38     	; 0x89c <decode_led_char+0x4>
			return i;
		}		
	}			
	// No item was found - return argument value
	return  c;
}
     8c2:	08 95       	ret

000008c4 <wrap_led_buffer_index>:
//---------------------------------------------//
// Ensures that index is inside the buffer
// -128 <= index <= 127
//---------------------------------------------//
static uint8_t wrap_led_buffer_index(int8_t buf_index)
{
     8c4:	28 2f       	mov	r18, r24
	uint8_t new_index_u;
	new_index_u = (uint8_t) ((buf_index < 0) ? -buf_index : buf_index);
     8c6:	87 fd       	sbrc	r24, 7
     8c8:	81 95       	neg	r24
	if (new_index_u >= LED_BUFFER_LENGTH)
     8ca:	8e 30       	cpi	r24, 0x0E	; 14
     8cc:	18 f0       	brcs	.+6      	; 0x8d4 <wrap_led_buffer_index+0x10>
		new_index_u = new_index_u % LED_BUFFER_LENGTH;
     8ce:	6e e0       	ldi	r22, 0x0E	; 14
     8d0:	77 d8       	rcall	.-3858   	; 0xfffff9c0 <__eeprom_end+0xff7ef9b6>
     8d2:	89 2f       	mov	r24, r25
	new_index_u = ((buf_index >= 0) || (new_index_u == 0)) ? new_index_u :  LED_BUFFER_LENGTH - new_index_u ;
     8d4:	27 ff       	sbrs	r18, 7
     8d6:	05 c0       	rjmp	.+10     	; 0x8e2 <wrap_led_buffer_index+0x1e>
     8d8:	88 23       	and	r24, r24
     8da:	19 f0       	breq	.+6      	; 0x8e2 <wrap_led_buffer_index+0x1e>
     8dc:	9e e0       	ldi	r25, 0x0E	; 14
     8de:	98 1b       	sub	r25, r24
     8e0:	89 2f       	mov	r24, r25
	return new_index_u;
}
     8e2:	08 95       	ret

000008e4 <processLedIndicator>:
// Call this function N times per sec to get N/NUM_DIGITS_TOTAL display update rate, where
// NUM_DIGITS_TOTAL is number_of_digits_of_LED_display if no extra LEDs are used or
// (number_of_digits_of_LED_display + 1) otherwise.
//---------------------------------------------//
void processLedIndicator()
{
     8e4:	cf 93       	push	r28
	uint8_t next_wActivePos;
	
	// Turn off segments
	#ifdef CLEAN_OPERATION
	disable_led_segments();
     8e6:	3f d1       	rcall	.+638    	; 0xb66 <disable_led_segments>
	#endif
	
	
	// Perform regular shift
	led_clock_pulse(!LED_DIGIT_ACT_LVL);
     8e8:	81 e0       	ldi	r24, 0x01	; 1
     8ea:	11 d1       	rcall	.+546    	; 0xb0e <led_clock_pulse>
	
	switch (wActivePos)
     8ec:	c0 91 fc 00 	lds	r28, 0x00FC
     8f0:	cc 23       	and	r28, r28
     8f2:	19 f0       	breq	.+6      	; 0x8fa <processLedIndicator+0x16>
     8f4:	c6 30       	cpi	r28, 0x06	; 6
     8f6:	c1 f5       	brne	.+112    	; 0x968 <processLedIndicator+0x84>
     8f8:	0f c0       	rjmp	.+30     	; 0x918 <processLedIndicator+0x34>
	case 0:
		// Get buttons
		#ifndef CLEAN_OPERATION
		disable_led_segments();
		#endif
		enable_led_segments_pullups();
     8fa:	27 d1       	rcall	.+590    	; 0xb4a <enable_led_segments_pullups>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     8fc:	85 e3       	ldi	r24, 0x35	; 53
     8fe:	8a 95       	dec	r24
     900:	f1 f7       	brne	.-4      	; 0x8fe <processLedIndicator+0x1a>
     902:	00 00       	nop
		_delay_us(PULLUP_DELAY_US);
		capture_button_state();
     904:	37 d1       	rcall	.+622    	; 0xb74 <capture_button_state>
		#ifndef CLEAN_OPERATION
		enable_led_segments();
		#endif
		// Start new cycle with active digit level
		led_clock_pulse(LED_DIGIT_ACT_LVL);
     906:	80 e0       	ldi	r24, 0x00	; 0
     908:	02 d1       	rcall	.+516    	; 0xb0e <led_clock_pulse>
		// Always start new cycle from specified buffer start position
		bufActivePos = wStartPos;
     90a:	80 91 b1 01 	lds	r24, 0x01B1
     90e:	80 93 fb 00 	sts	0x00FB, r24
		next_wActivePos = wActivePos + 1;
     912:	c0 91 fc 00 	lds	r28, 0x00FC
     916:	28 c0       	rjmp	.+80     	; 0x968 <processLedIndicator+0x84>
//---------------------------------------------//
// Performs window shifting
//---------------------------------------------//
static void processWindowShifter(void)
{
	if (shifterState == LED_SHIFT_DONE)
     918:	80 91 b2 01 	lds	r24, 0x01B2
     91c:	81 11       	cpse	r24, r1
     91e:	01 c0       	rjmp	.+2      	; 0x922 <processLedIndicator+0x3e>
     920:	1b c0       	rjmp	.+54     	; 0x958 <processLedIndicator+0x74>
		return;
	
	// Process shift timer
	processSoftTimer8b(&shiftTimer);	
     922:	8d ef       	ldi	r24, 0xFD	; 253
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	33 d7       	rcall	.+3686   	; 0x178e <processSoftTimer8b>
	
	if (shiftTimer.FTop)
     928:	80 91 fd 00 	lds	r24, 0x00FD
     92c:	85 ff       	sbrs	r24, 5
     92e:	14 c0       	rjmp	.+40     	; 0x958 <processLedIndicator+0x74>
	{
		// Check if finished
		if (wStartPos == bufStartPos)	
     930:	80 91 b1 01 	lds	r24, 0x01B1
     934:	90 91 b3 01 	lds	r25, 0x01B3
     938:	89 13       	cpse	r24, r25
     93a:	03 c0       	rjmp	.+6      	; 0x942 <processLedIndicator+0x5e>
		{
			// Update state
			shifterState = LED_SHIFT_DONE;
     93c:	10 92 b2 01 	sts	0x01B2, r1
     940:	0b c0       	rjmp	.+22     	; 0x958 <processLedIndicator+0x74>
		}
		else if (shifterState == LED_SHIFT_RIGHT)
     942:	90 91 b2 01 	lds	r25, 0x01B2
     946:	92 30       	cpi	r25, 0x02	; 2
     948:	49 f4       	brne	.+18     	; 0x95c <processLedIndicator+0x78>
// Increments index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t inc_buffer_position(uint8_t position)
{
	return (position >= LED_BUFFER_LENGTH - 1) ? 0 : position + 1;
     94a:	8d 30       	cpi	r24, 0x0D	; 13
     94c:	10 f4       	brcc	.+4      	; 0x952 <processLedIndicator+0x6e>
     94e:	8f 5f       	subi	r24, 0xFF	; 255
     950:	01 c0       	rjmp	.+2      	; 0x954 <processLedIndicator+0x70>
     952:	80 e0       	ldi	r24, 0x00	; 0
			// Update state
			shifterState = LED_SHIFT_DONE;
		}
		else if (shifterState == LED_SHIFT_RIGHT)
		{
			wStartPos = inc_buffer_position(wStartPos);	
     954:	80 93 b1 01 	sts	0x01B1, r24
		// Always start new cycle from specified buffer start position
		bufActivePos = wStartPos;
		next_wActivePos = wActivePos + 1;
		break;
	case NUM_DIGITS_TOTAL-1:
		next_wActivePos = 0;
     958:	c0 e0       	ldi	r28, 0x00	; 0
     95a:	07 c0       	rjmp	.+14     	; 0x96a <processLedIndicator+0x86>
// Decrements index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t dec_buffer_position(uint8_t position)
{
	return (position == 0) ? LED_BUFFER_LENGTH - 1 : position - 1;
     95c:	88 23       	and	r24, r24
     95e:	11 f0       	breq	.+4      	; 0x964 <processLedIndicator+0x80>
     960:	81 50       	subi	r24, 0x01	; 1
     962:	f8 cf       	rjmp	.-16     	; 0x954 <processLedIndicator+0x70>
     964:	8d e0       	ldi	r24, 0x0D	; 13
     966:	f6 cf       	rjmp	.-20     	; 0x954 <processLedIndicator+0x70>
		next_wActivePos = 0;
		// Shift LED window
		processWindowShifter();	
		break;
	default:
		next_wActivePos = wActivePos + 1;
     968:	cf 5f       	subi	r28, 0xFF	; 255
		break;
	}		
	
	#ifdef 	USE_EXTRA_LED_DIGIT
	if (wActivePos == EXTRA_DIGIT_NUM)
     96a:	80 91 fc 00 	lds	r24, 0x00FC
     96e:	86 30       	cpi	r24, 0x06	; 6
     970:	21 f4       	brne	.+8      	; 0x97a <processLedIndicator+0x96>
	{
		// Output separate LEDs state
		set_led_segments(extra_led_state);
     972:	80 91 b0 01 	lds	r24, 0x01B0
     976:	db d0       	rcall	.+438    	; 0xb2e <set_led_segments>
     978:	10 c0       	rjmp	.+32     	; 0x99a <processLedIndicator+0xb6>
	}
	else
	#endif
	{
		// Output new segment data
		set_led_segments(led_data_buffer[bufActivePos]);
     97a:	e0 91 fb 00 	lds	r30, 0x00FB
     97e:	f0 e0       	ldi	r31, 0x00	; 0
     980:	ec 54       	subi	r30, 0x4C	; 76
     982:	fe 4f       	sbci	r31, 0xFE	; 254
     984:	80 81       	ld	r24, Z
     986:	d3 d0       	rcall	.+422    	; 0xb2e <set_led_segments>
		// Wrap around buffer length
		bufActivePos = inc_buffer_position(bufActivePos );
     988:	80 91 fb 00 	lds	r24, 0x00FB
// Increments index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t inc_buffer_position(uint8_t position)
{
	return (position >= LED_BUFFER_LENGTH - 1) ? 0 : position + 1;
     98c:	8d 30       	cpi	r24, 0x0D	; 13
     98e:	10 f4       	brcc	.+4      	; 0x994 <processLedIndicator+0xb0>
     990:	8f 5f       	subi	r24, 0xFF	; 255
     992:	01 c0       	rjmp	.+2      	; 0x996 <processLedIndicator+0xb2>
     994:	80 e0       	ldi	r24, 0x00	; 0
	#endif
	{
		// Output new segment data
		set_led_segments(led_data_buffer[bufActivePos]);
		// Wrap around buffer length
		bufActivePos = inc_buffer_position(bufActivePos );
     996:	80 93 fb 00 	sts	0x00FB, r24
	}
		
	wActivePos = next_wActivePos;
     99a:	c0 93 fc 00 	sts	0x00FC, r28
	
	#ifdef CLEAN_OPERATION
	enable_led_segments();
	#endif

}
     99e:	cf 91       	pop	r28
	}
		
	wActivePos = next_wActivePos;
	
	#ifdef CLEAN_OPERATION
	enable_led_segments();
     9a0:	db c0       	rjmp	.+438    	; 0xb58 <enable_led_segments>

000009a2 <fillLedBuffer>:
//---------------------------------------------//
// Fills buffer from (bufStartPos + offset) 
//	position with single char
//---------------------------------------------//
void fillLedBuffer(int8_t offset, uint8_t length, char c)
{
     9a2:	0f 93       	push	r16
     9a4:	1f 93       	push	r17
     9a6:	cf 93       	push	r28
     9a8:	df 93       	push	r29
     9aa:	1f 92       	push	r1
     9ac:	cd b7       	in	r28, 0x3d	; 61
     9ae:	de b7       	in	r29, 0x3e	; 62
     9b0:	18 2f       	mov	r17, r24
     9b2:	84 2f       	mov	r24, r20
	uint8_t val = decode_led_char(c);
     9b4:	69 83       	std	Y+1, r22	; 0x01
     9b6:	70 df       	rcall	.-288    	; 0x898 <decode_led_char>
     9b8:	08 2f       	mov	r16, r24
	// Ensure index is inside the buffer
	uint8_t position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
     9ba:	80 91 b3 01 	lds	r24, 0x01B3
     9be:	81 0f       	add	r24, r17
     9c0:	81 df       	rcall	.-254    	; 0x8c4 <wrap_led_buffer_index>
	while(length--)
     9c2:	69 81       	ldd	r22, Y+1	; 0x01
     9c4:	0a c0       	rjmp	.+20     	; 0x9da <fillLedBuffer+0x38>
	{
		led_data_buffer[position] = val;
     9c6:	e8 2f       	mov	r30, r24
     9c8:	f0 e0       	ldi	r31, 0x00	; 0
     9ca:	ec 54       	subi	r30, 0x4C	; 76
     9cc:	fe 4f       	sbci	r31, 0xFE	; 254
     9ce:	00 83       	st	Z, r16
// Increments index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t inc_buffer_position(uint8_t position)
{
	return (position >= LED_BUFFER_LENGTH - 1) ? 0 : position + 1;
     9d0:	8d 30       	cpi	r24, 0x0D	; 13
     9d2:	10 f4       	brcc	.+4      	; 0x9d8 <fillLedBuffer+0x36>
     9d4:	8f 5f       	subi	r24, 0xFF	; 255
     9d6:	01 c0       	rjmp	.+2      	; 0x9da <fillLedBuffer+0x38>
     9d8:	80 e0       	ldi	r24, 0x00	; 0
void fillLedBuffer(int8_t offset, uint8_t length, char c)
{
	uint8_t val = decode_led_char(c);
	// Ensure index is inside the buffer
	uint8_t position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
	while(length--)
     9da:	61 50       	subi	r22, 0x01	; 1
     9dc:	a0 f7       	brcc	.-24     	; 0x9c6 <fillLedBuffer+0x24>
	{
		led_data_buffer[position] = val;
		position = inc_buffer_position(position);
	}
}
     9de:	0f 90       	pop	r0
     9e0:	df 91       	pop	r29
     9e2:	cf 91       	pop	r28
     9e4:	1f 91       	pop	r17
     9e6:	0f 91       	pop	r16
     9e8:	08 95       	ret

000009ea <startShiftingWindowLeft>:
//	LED window left 
//---------------------------------------------//
void startShiftingWindowLeft(void)
{
	// Clear spaces between menu states
	fillLedBuffer(-2,2,' ');
     9ea:	40 e2       	ldi	r20, 0x20	; 32
     9ec:	62 e0       	ldi	r22, 0x02	; 2
     9ee:	8e ef       	ldi	r24, 0xFE	; 254
     9f0:	d8 df       	rcall	.-80     	; 0x9a2 <fillLedBuffer>
	// Set new buffer position for writing
	bufStartPos = wrap_led_buffer_index( (int8_t)bufStartPos - (NUM_DIGITS + 2) );
     9f2:	80 91 b3 01 	lds	r24, 0x01B3
     9f6:	88 50       	subi	r24, 0x08	; 8
     9f8:	65 df       	rcall	.-310    	; 0x8c4 <wrap_led_buffer_index>
     9fa:	80 93 b3 01 	sts	0x01B3, r24
	// Set shifter state
	shifterState = LED_SHIFT_LEFT;
     9fe:	81 e0       	ldi	r24, 0x01	; 1
     a00:	80 93 b2 01 	sts	0x01B2, r24
     a04:	08 95       	ret

00000a06 <startShiftingWindowRight>:
//	LED window right 
//---------------------------------------------//
void startShiftingWindowRight(void)
{
	// Clear spaces between menu states
	fillLedBuffer(NUM_DIGITS,2,' ');
     a06:	40 e2       	ldi	r20, 0x20	; 32
     a08:	62 e0       	ldi	r22, 0x02	; 2
     a0a:	86 e0       	ldi	r24, 0x06	; 6
     a0c:	ca df       	rcall	.-108    	; 0x9a2 <fillLedBuffer>
	// Set new buffer position for writing
	bufStartPos = wrap_led_buffer_index( (int8_t)bufStartPos + NUM_DIGITS + 2 );
     a0e:	80 91 b3 01 	lds	r24, 0x01B3
     a12:	88 5f       	subi	r24, 0xF8	; 248
     a14:	57 df       	rcall	.-338    	; 0x8c4 <wrap_led_buffer_index>
     a16:	80 93 b3 01 	sts	0x01B3, r24
	// Set shifter state
	shifterState = LED_SHIFT_RIGHT;
     a1a:	82 e0       	ldi	r24, 0x02	; 2
     a1c:	80 93 b2 01 	sts	0x01B2, r24
     a20:	08 95       	ret

00000a22 <initLedIndicator>:
//---------------------------------------------//
//	Initialization
//	Call this function at start of your program
//---------------------------------------------//
void initLedIndicator()
{
     a22:	cf 93       	push	r28
	uint8_t i;
	// First disable outputs
	disable_led_segments();
     a24:	a0 d0       	rcall	.+320    	; 0xb66 <disable_led_segments>
     a26:	c7 e0       	ldi	r28, 0x07	; 7
	// Fill shift register with non-active levels
	for (i=0;i<NUM_DIGITS_TOTAL;i++)
	{
		led_clock_pulse(!LED_DIGIT_ACT_LVL);
     a28:	81 e0       	ldi	r24, 0x01	; 1
     a2a:	71 d0       	rcall	.+226    	; 0xb0e <led_clock_pulse>
     a2c:	c1 50       	subi	r28, 0x01	; 1
{
	uint8_t i;
	// First disable outputs
	disable_led_segments();
	// Fill shift register with non-active levels
	for (i=0;i<NUM_DIGITS_TOTAL;i++)
     a2e:	e1 f7       	brne	.-8      	; 0xa28 <initLedIndicator+0x6>
	{
		led_clock_pulse(!LED_DIGIT_ACT_LVL);
	}
	// Now enable outputs
	enable_led_segments();
     a30:	93 d0       	rcall	.+294    	; 0xb58 <enable_led_segments>
	
	// Reset pointers
	wStartPos = 0;
     a32:	10 92 b1 01 	sts	0x01B1, r1
	bufStartPos = 0;
     a36:	10 92 b3 01 	sts	0x01B3, r1
	bufActivePos = 0;
     a3a:	10 92 fb 00 	sts	0x00FB, r1
	wActivePos = 0;
     a3e:	10 92 fc 00 	sts	0x00FC, r1
	#ifdef 	USE_EXTRA_LED_DIGIT
	extra_led_state = 0;
     a42:	10 92 b0 01 	sts	0x01B0, r1
	#endif
	
	// Clear the buffer 
	fillLedBuffer(0,LED_BUFFER_LENGTH,' ');
     a46:	40 e2       	ldi	r20, 0x20	; 32
     a48:	6e e0       	ldi	r22, 0x0E	; 14
     a4a:	80 e0       	ldi	r24, 0x00	; 0
     a4c:	aa df       	rcall	.-172    	; 0x9a2 <fillLedBuffer>
	
	// Initialize shift timer - always enabled, but 
	//	processed only when shifting is active
	shifterState = LED_SHIFT_DONE;
     a4e:	10 92 b2 01 	sts	0x01B2, r1
	shiftTimer.Enabled = 1;
     a52:	80 91 fd 00 	lds	r24, 0x00FD
	shiftTimer.RunOnce = 0;
     a56:	81 60       	ori	r24, 0x01	; 1
     a58:	8d 7f       	andi	r24, 0xFD	; 253
     a5a:	80 93 fd 00 	sts	0x00FD, r24
	shiftTimer.Top = LED_SHIFT_INTERVAL-1;
     a5e:	89 e0       	ldi	r24, 0x09	; 9
     a60:	80 93 ff 00 	sts	0x00FF, r24
}
     a64:	cf 91       	pop	r28
     a66:	08 95       	ret

00000a68 <printLedBuffer>:
//		str - null-terminated char string
// Comma and dot (".", ",") get special processing - first occurrence is added to
// a preceding char, next are displayed as a single digit
//---------------------------------------------//
void printLedBuffer(int8_t offset, char* str)
{
     a68:	ff 92       	push	r15
     a6a:	0f 93       	push	r16
     a6c:	1f 93       	push	r17
     a6e:	cf 93       	push	r28
     a70:	df 93       	push	r29
     a72:	eb 01       	movw	r28, r22
	char c;
	uint8_t decoded_sym;
	uint8_t state = 0x02;
	uint8_t comma_pos;
	// Ensure index is inside the buffer
	uint8_t buffer_position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
     a74:	90 91 b3 01 	lds	r25, 0x01B3
     a78:	89 0f       	add	r24, r25
     a7a:	24 df       	rcall	.-440    	; 0x8c4 <wrap_led_buffer_index>
     a7c:	18 2f       	mov	r17, r24
	comma_pos = buffer_position;
     a7e:	f8 2e       	mov	r15, r24
//---------------------------------------------//
void printLedBuffer(int8_t offset, char* str)
{
	char c;
	uint8_t decoded_sym;
	uint8_t state = 0x02;
     a80:	02 e0       	ldi	r16, 0x02	; 2
	uint8_t comma_pos;
	// Ensure index is inside the buffer
	uint8_t buffer_position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
	comma_pos = buffer_position;
	// Output chars
	while((c = *str++))
     a82:	23 c0       	rjmp	.+70     	; 0xaca <printLedBuffer+0x62>
	{
		decoded_sym = decode_led_char(c);
     a84:	09 df       	rcall	.-494    	; 0x898 <decode_led_char>
		state = (decoded_sym == SEGH) ? (state | 0x01) : (state & ~0x01);
     a86:	80 38       	cpi	r24, 0x80	; 128
     a88:	11 f4       	brne	.+4      	; 0xa8e <printLedBuffer+0x26>
     a8a:	01 60       	ori	r16, 0x01	; 1
     a8c:	01 c0       	rjmp	.+2      	; 0xa90 <printLedBuffer+0x28>
     a8e:	0e 7f       	andi	r16, 0xFE	; 254
		if (state == 0x01)			
     a90:	01 30       	cpi	r16, 0x01	; 1
     a92:	49 f4       	brne	.+18     	; 0xaa6 <printLedBuffer+0x3e>
		{
			led_data_buffer[comma_pos] |= decoded_sym;
     a94:	ef 2d       	mov	r30, r15
     a96:	f0 e0       	ldi	r31, 0x00	; 0
     a98:	ec 54       	subi	r30, 0x4C	; 76
     a9a:	fe 4f       	sbci	r31, 0xFE	; 254
     a9c:	90 81       	ld	r25, Z
     a9e:	98 2b       	or	r25, r24
     aa0:	90 83       	st	Z, r25
     aa2:	81 2f       	mov	r24, r17
     aa4:	0b c0       	rjmp	.+22     	; 0xabc <printLedBuffer+0x54>
		}
		else
		{
			led_data_buffer[buffer_position] = decoded_sym;	
     aa6:	e1 2f       	mov	r30, r17
     aa8:	f0 e0       	ldi	r31, 0x00	; 0
     aaa:	ec 54       	subi	r30, 0x4C	; 76
     aac:	fe 4f       	sbci	r31, 0xFE	; 254
     aae:	80 83       	st	Z, r24
// Increments index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t inc_buffer_position(uint8_t position)
{
	return (position >= LED_BUFFER_LENGTH - 1) ? 0 : position + 1;
     ab0:	1d 30       	cpi	r17, 0x0D	; 13
     ab2:	18 f4       	brcc	.+6      	; 0xaba <printLedBuffer+0x52>
     ab4:	81 2f       	mov	r24, r17
     ab6:	8f 5f       	subi	r24, 0xFF	; 255
     ab8:	01 c0       	rjmp	.+2      	; 0xabc <printLedBuffer+0x54>
     aba:	80 e0       	ldi	r24, 0x00	; 0
		comma_pos = buffer_position;
		if (state != 0x01)
		{
			buffer_position = inc_buffer_position(buffer_position);
		}
		state = (state & 0x01) ? 0x03 : 0x00;		
     abc:	00 ff       	sbrs	r16, 0
     abe:	02 c0       	rjmp	.+4      	; 0xac4 <printLedBuffer+0x5c>
     ac0:	03 e0       	ldi	r16, 0x03	; 3
     ac2:	01 c0       	rjmp	.+2      	; 0xac6 <printLedBuffer+0x5e>
     ac4:	00 e0       	ldi	r16, 0x00	; 0
     ac6:	f1 2e       	mov	r15, r17
     ac8:	18 2f       	mov	r17, r24
	uint8_t comma_pos;
	// Ensure index is inside the buffer
	uint8_t buffer_position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
	comma_pos = buffer_position;
	// Output chars
	while((c = *str++))
     aca:	89 91       	ld	r24, Y+
     acc:	81 11       	cpse	r24, r1
     ace:	da cf       	rjmp	.-76     	; 0xa84 <printLedBuffer+0x1c>
		{
			buffer_position = inc_buffer_position(buffer_position);
		}
		state = (state & 0x01) ? 0x03 : 0x00;		
	}
}
     ad0:	df 91       	pop	r29
     ad2:	cf 91       	pop	r28
     ad4:	1f 91       	pop	r17
     ad6:	0f 91       	pop	r16
     ad8:	ff 90       	pop	r15
     ada:	08 95       	ret

00000adc <setComma>:
//	buffer cell
//---------------------------------------------//
void setComma(int8_t offset)
{
	// Ensure index is inside the buffer
	uint8_t position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
     adc:	90 91 b3 01 	lds	r25, 0x01B3
     ae0:	89 0f       	add	r24, r25
     ae2:	f0 de       	rcall	.-544    	; 0x8c4 <wrap_led_buffer_index>
	led_data_buffer[position] |= (SEGH);
     ae4:	e8 2f       	mov	r30, r24
     ae6:	f0 e0       	ldi	r31, 0x00	; 0
     ae8:	ec 54       	subi	r30, 0x4C	; 76
     aea:	fe 4f       	sbci	r31, 0xFE	; 254
     aec:	80 81       	ld	r24, Z
     aee:	80 68       	ori	r24, 0x80	; 128
     af0:	80 83       	st	Z, r24
     af2:	08 95       	ret

00000af4 <setExtraLeds>:
// Argument is ORed with current LED state
//---------------------------------------------//
inline void setExtraLeds(uint8_t leds_set_value)
{
		//asm("cli");
		extra_led_state |= leds_set_value;
     af4:	90 91 b0 01 	lds	r25, 0x01B0
     af8:	98 2b       	or	r25, r24
     afa:	90 93 b0 01 	sts	0x01B0, r25
     afe:	08 95       	ret

00000b00 <clearExtraLeds>:
// Argument is AND NOTed with current LED state
//---------------------------------------------//
inline void clearExtraLeds(uint8_t leds_clear_value)
{
		//asm("cli");
		extra_led_state &= ~leds_clear_value;
     b00:	90 91 b0 01 	lds	r25, 0x01B0
     b04:	80 95       	com	r24
     b06:	89 23       	and	r24, r25
     b08:	80 93 b0 01 	sts	0x01B0, r24
     b0c:	08 95       	ret

00000b0e <led_clock_pulse>:


// Clocks in bit into the shift register
void led_clock_pulse(uint8_t bit)
{
	if (bit)
     b0e:	88 23       	and	r24, r24
     b10:	11 f0       	breq	.+4      	; 0xb16 <led_clock_pulse+0x8>
		PORTB |= (1<<PB_LED_DOUT);
     b12:	c0 9a       	sbi	0x18, 0	; 24
     b14:	01 c0       	rjmp	.+2      	; 0xb18 <led_clock_pulse+0xa>
	else
		PORTB &= ~(1<<PB_LED_DOUT);
     b16:	c0 98       	cbi	0x18, 0	; 24
     b18:	8a e1       	ldi	r24, 0x1A	; 26
     b1a:	8a 95       	dec	r24
     b1c:	f1 f7       	brne	.-4      	; 0xb1a <led_clock_pulse+0xc>
     b1e:	00 c0       	rjmp	.+0      	; 0xb20 <led_clock_pulse+0x12>
	_delay_us(SETUP_DELAY_US);
	PORTB |= (1<<PB_LED_CLK);
     b20:	c2 9a       	sbi	0x18, 2	; 24
     b22:	8a e1       	ldi	r24, 0x1A	; 26
     b24:	8a 95       	dec	r24
     b26:	f1 f7       	brne	.-4      	; 0xb24 <led_clock_pulse+0x16>
     b28:	00 c0       	rjmp	.+0      	; 0xb2a <led_clock_pulse+0x1c>
	_delay_us(SHIFT_DELAY_US);
	PORTB &= ~(1<<PB_LED_CLK);
     b2a:	c2 98       	cbi	0x18, 2	; 24
     b2c:	08 95       	ret

00000b2e <set_led_segments>:
// Outputs decoded segment data to port bits
void set_led_segments(uint8_t seg_ch)
{
	uint8_t pdat;
	seg_ch ^= LED_SEGMENT_MASK;
	pdat = PORTC & ~( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
     b2e:	25 b3       	in	r18, 0x15	; 21
	pdat |= (seg_ch & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
     b30:	98 2f       	mov	r25, r24
     b32:	9f 71       	andi	r25, 0x1F	; 31
// Outputs decoded segment data to port bits
void set_led_segments(uint8_t seg_ch)
{
	uint8_t pdat;
	seg_ch ^= LED_SEGMENT_MASK;
	pdat = PORTC & ~( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
     b34:	20 7e       	andi	r18, 0xE0	; 224
	pdat |= (seg_ch & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
     b36:	92 2b       	or	r25, r18
	PORTC = pdat;
     b38:	95 bb       	out	0x15, r25	; 21
	seg_ch >>= 2;
	pdat = PORTB & ~( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     b3a:	98 b3       	in	r25, 0x18	; 24
	uint8_t pdat;
	seg_ch ^= LED_SEGMENT_MASK;
	pdat = PORTC & ~( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
	pdat |= (seg_ch & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
	PORTC = pdat;
	seg_ch >>= 2;
     b3c:	86 95       	lsr	r24
     b3e:	86 95       	lsr	r24
	pdat = PORTB & ~( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
	pdat |= (seg_ch & ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) ));
     b40:	88 73       	andi	r24, 0x38	; 56
	seg_ch ^= LED_SEGMENT_MASK;
	pdat = PORTC & ~( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
	pdat |= (seg_ch & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
	PORTC = pdat;
	seg_ch >>= 2;
	pdat = PORTB & ~( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     b42:	97 7c       	andi	r25, 0xC7	; 199
	pdat |= (seg_ch & ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) ));
     b44:	89 2b       	or	r24, r25
	PORTB = pdat;
     b46:	88 bb       	out	0x18, r24	; 24
     b48:	08 95       	ret

00000b4a <enable_led_segments_pullups>:

// Turns segment port bits to HI-Z and
// enables pull-ups
void enable_led_segments_pullups()
{
	PORTC |= ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
     b4a:	85 b3       	in	r24, 0x15	; 21
     b4c:	8f 61       	ori	r24, 0x1F	; 31
     b4e:	85 bb       	out	0x15, r24	; 21
	PORTB |= ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     b50:	88 b3       	in	r24, 0x18	; 24
     b52:	88 63       	ori	r24, 0x38	; 56
     b54:	88 bb       	out	0x18, r24	; 24
     b56:	08 95       	ret

00000b58 <enable_led_segments>:
}	

void enable_led_segments()
{
	DDRC |= ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
     b58:	84 b3       	in	r24, 0x14	; 20
     b5a:	8f 61       	ori	r24, 0x1F	; 31
     b5c:	84 bb       	out	0x14, r24	; 20
	DDRB |= ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     b5e:	87 b3       	in	r24, 0x17	; 23
     b60:	88 63       	ori	r24, 0x38	; 56
     b62:	87 bb       	out	0x17, r24	; 23
     b64:	08 95       	ret

00000b66 <disable_led_segments>:
}

void disable_led_segments()
{
	DDRC &= ~( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
     b66:	84 b3       	in	r24, 0x14	; 20
     b68:	80 7e       	andi	r24, 0xE0	; 224
     b6a:	84 bb       	out	0x14, r24	; 20
	DDRB &= ~( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     b6c:	87 b3       	in	r24, 0x17	; 23
     b6e:	87 7c       	andi	r24, 0xC7	; 199
     b70:	87 bb       	out	0x17, r24	; 23
     b72:	08 95       	ret

00000b74 <capture_button_state>:


void capture_button_state()
{
	uint8_t pdat;
	pdat = PINB  & ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     b74:	86 b3       	in	r24, 0x16	; 22
     b76:	88 73       	andi	r24, 0x38	; 56
	pdat <<= 2;
	pdat |= (PINC & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
     b78:	93 b3       	in	r25, 0x13	; 19

void capture_button_state()
{
	uint8_t pdat;
	pdat = PINB  & ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
	pdat <<= 2;
     b7a:	88 0f       	add	r24, r24
     b7c:	88 0f       	add	r24, r24
	pdat |= (PINC & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
     b7e:	9f 71       	andi	r25, 0x1F	; 31
     b80:	89 2b       	or	r24, r25
	raw_button_state = pdat ^ RAW_BUTTONS_INVERSE_MASK;
     b82:	80 95       	com	r24
     b84:	80 93 c2 01 	sts	0x01C2, r24
     b88:	08 95       	ret

00000b8a <processItemFunction>:
//	Arguments:
//		funcAddr - address of the function to run.
//-----------------------------------------------------------------//
static inline void processItemFunction(FuncPtr funcAddr)
{
	if (funcAddr != 0)
     b8a:	00 97       	sbiw	r24, 0x00	; 0
     b8c:	11 f0       	breq	.+4      	; 0xb92 <processItemFunction+0x8>
		((FuncPtr)funcAddr)();
     b8e:	fc 01       	movw	r30, r24
     b90:	09 94       	ijmp
     b92:	08 95       	ret

00000b94 <mf_setTempLeave>:
		clearExtraLeds(LED_TEMP);
}

void mf_setTempLeave(void)
{
	userTimer.Enabled = 0;
     b94:	eb e0       	ldi	r30, 0x0B	; 11
     b96:	f1 e0       	ldi	r31, 0x01	; 1
     b98:	80 81       	ld	r24, Z
     b9a:	8e 7f       	andi	r24, 0xFE	; 254
     b9c:	80 83       	st	Z, r24
     b9e:	08 95       	ret

00000ba0 <mf_leafSelectAct>:
	userTimer.FA_GE = 1;	
}

void mf_leafSelectAct(void)
{
	userTimer.Timer = 0;
     ba0:	10 92 0c 01 	sts	0x010C, r1
	userTimer.Top = BLINK_PERIOD - 1;
     ba4:	87 e0       	ldi	r24, 0x07	; 7
     ba6:	80 93 0d 01 	sts	0x010D, r24
	userTimer.CompA = BLINK_PERIOD / 2;
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	80 93 0e 01 	sts	0x010E, r24
	userTimer.Enabled = 1;
     bb0:	eb e0       	ldi	r30, 0x0B	; 11
     bb2:	f1 e0       	ldi	r31, 0x01	; 1
     bb4:	80 81       	ld	r24, Z
     bb6:	81 60       	ori	r24, 0x01	; 1
     bb8:	80 83       	st	Z, r24
     bba:	08 95       	ret

00000bbc <mf_leafExit>:
}

void mf_leafExit(void)
{
	userTimer.Enabled = 0;	
     bbc:	eb e0       	ldi	r30, 0x0B	; 11
     bbe:	f1 e0       	ldi	r31, 0x01	; 1
     bc0:	80 81       	ld	r24, Z
     bc2:	8e 7f       	andi	r24, 0xFE	; 254
     bc4:	80 83       	st	Z, r24
     bc6:	08 95       	ret

00000bc8 <mf_actpoffLeave>:
	printLedBuffer(0,"   OFF");
}

void mf_actpoffLeave(void)
{
	autoPowerOffState = 0;	
     bc8:	10 92 f4 00 	sts	0x00F4, r1
     bcc:	08 95       	ret

00000bce <mf_calibDoExit>:
	userTimer.Enabled = 1;
}

void mf_leafExit(void)
{
	userTimer.Enabled = 0;	
     bce:	eb e0       	ldi	r30, 0x0B	; 11
     bd0:	f1 e0       	ldi	r31, 0x01	; 1
     bd2:	80 81       	ld	r24, Z
     bd4:	8e 7f       	andi	r24, 0xFE	; 254
     bd6:	80 83       	st	Z, r24


void mf_calibDoExit(void)
{
	mf_leafExit();
	heaterState &= ~CALIBRATION_ACTIVE;
     bd8:	80 91 f5 00 	lds	r24, 0x00F5
     bdc:	8d 7f       	andi	r24, 0xFD	; 253
     bde:	80 93 f5 00 	sts	0x00F5, r24
     be2:	08 95       	ret

00000be4 <mf_actpoffDo>:
}

// Indication of power off mode
void mf_actpoffDo(void)
{
	printLedBuffer(0,"   OFF");
     be4:	60 eb       	ldi	r22, 0xB0	; 176
     be6:	70 e0       	ldi	r23, 0x00	; 0
     be8:	80 e0       	ldi	r24, 0x00	; 0
     bea:	3e cf       	rjmp	.-388    	; 0xa68 <printLedBuffer>

00000bec <mf_cdoneDo>:
}


void mf_cdoneDo(void)
{
	printLedBuffer(0," DONE ");
     bec:	67 eb       	ldi	r22, 0xB7	; 183
     bee:	70 e0       	ldi	r23, 0x00	; 0
     bf0:	80 e0       	ldi	r24, 0x00	; 0
     bf2:	3a cf       	rjmp	.-396    	; 0xa68 <printLedBuffer>

00000bf4 <mf_actpoffSelect>:



void mf_actpoffSelect(void)
{
	clearExtraLeds(LED_TEMP | LED_ROLL);
     bf4:	80 ec       	ldi	r24, 0xC0	; 192
     bf6:	84 df       	rcall	.-248    	; 0xb00 <clearExtraLeds>
	autoPowerOffState = AUTO_POFF_ACTIVE;
     bf8:	81 e0       	ldi	r24, 0x01	; 1
     bfa:	80 93 f4 00 	sts	0x00F4, r24
     bfe:	08 95       	ret

00000c00 <mf_leafSelect>:

// Select and exit functions, common for leaf menu items 

void mf_leafSelect(void)
{
	clearExtraLeds(LED_TEMP | LED_ROLL);
     c00:	80 ec       	ldi	r24, 0xC0	; 192
     c02:	7e df       	rcall	.-260    	; 0xb00 <clearExtraLeds>
	userTimer.FA_GE = 1;	
     c04:	eb e0       	ldi	r30, 0x0B	; 11
     c06:	f1 e0       	ldi	r31, 0x01	; 1
     c08:	80 81       	ld	r24, Z
     c0a:	80 61       	ori	r24, 0x10	; 16
     c0c:	80 83       	st	Z, r24
     c0e:	08 95       	ret

00000c10 <mf_calibP2Select>:
	printLedBuffer(0,"P1    ");
}

void mf_calibP2Select(void)
{
	mf_leafSelect();
     c10:	f7 df       	rcall	.-18     	; 0xc00 <mf_leafSelect>
	cpoint_user_val = cp.cpoint2;	// determine which point to use at select func
     c12:	80 91 92 01 	lds	r24, 0x0192
     c16:	80 93 09 01 	sts	0x0109, r24
	cpointNum = 2;
     c1a:	82 e0       	ldi	r24, 0x02	; 2
     c1c:	80 93 0a 01 	sts	0x010A, r24
	printLedBuffer(0,"P2    ");
     c20:	6e eb       	ldi	r22, 0xBE	; 190
     c22:	70 e0       	ldi	r23, 0x00	; 0
     c24:	80 e0       	ldi	r24, 0x00	; 0
     c26:	20 cf       	rjmp	.-448    	; 0xa68 <printLedBuffer>

00000c28 <mf_calibP1Select>:
//---------------------------------------------//


void mf_calibP1Select(void)
{
	mf_leafSelect();
     c28:	eb df       	rcall	.-42     	; 0xc00 <mf_leafSelect>
	cpoint_user_val = cp.cpoint1;	// determine which point to use at select func
     c2a:	80 91 91 01 	lds	r24, 0x0191
     c2e:	80 93 09 01 	sts	0x0109, r24
	cpointNum = 1;
     c32:	81 e0       	ldi	r24, 0x01	; 1
     c34:	80 93 0a 01 	sts	0x010A, r24
	printLedBuffer(0,"P1    ");
     c38:	65 ec       	ldi	r22, 0xC5	; 197
     c3a:	70 e0       	ldi	r23, 0x00	; 0
     c3c:	80 e0       	ldi	r24, 0x00	; 0
     c3e:	14 cf       	rjmp	.-472    	; 0xa68 <printLedBuffer>

00000c40 <mf_rollLeave>:
	printLedBuffer(0,str);
}

void mf_rollLeave(void)
{
	clearExtraLeds(LED_ROLL);
     c40:	80 e4       	ldi	r24, 0x40	; 64
     c42:	5e df       	rcall	.-324    	; 0xb00 <clearExtraLeds>
	userTimer.Enabled = 0;
     c44:	eb e0       	ldi	r30, 0x0B	; 11
     c46:	f1 e0       	ldi	r31, 0x01	; 1
     c48:	80 81       	ld	r24, Z
     c4a:	8e 7f       	andi	r24, 0xFE	; 254
     c4c:	80 83       	st	Z, r24
     c4e:	08 95       	ret

00000c50 <mf_setTempSelect>:
//---------------------------------------------//


void mf_setTempSelect(void)
{
	clearExtraLeds(LED_TEMP);
     c50:	80 e8       	ldi	r24, 0x80	; 128
     c52:	56 df       	rcall	.-340    	; 0xb00 <clearExtraLeds>
	mf_leafSelectAct();		// setup and start timer
     c54:	a5 cf       	rjmp	.-182    	; 0xba0 <mf_leafSelectAct>

00000c56 <mf_realTempLeave>:
	}
}

void mf_realTempLeave(void)
{
	clearExtraLeds(LED_TEMP);
     c56:	80 e8       	ldi	r24, 0x80	; 128
     c58:	53 cf       	rjmp	.-346    	; 0xb00 <clearExtraLeds>

00000c5a <mf_cdoneSelect>:

//---------------------------------------------//

void mf_cdoneSelect(void)
{
	applyCalibrationPoint(cpointNum,cpoint_user_val);
     c5a:	20 91 09 01 	lds	r18, 0x0109
}


void applyCalibrationPoint(uint8_t cpointNum, uint8_t cpointVal)
{
	if (cpointNum == 1)
     c5e:	30 91 0a 01 	lds	r19, 0x010A
     c62:	80 91 63 01 	lds	r24, 0x0163
     c66:	90 91 64 01 	lds	r25, 0x0164
     c6a:	31 30       	cpi	r19, 0x01	; 1
     c6c:	39 f4       	brne	.+14     	; 0xc7c <mf_cdoneSelect+0x22>
	{
		cp.cpoint1_adc = adc_normalized;
     c6e:	90 93 94 01 	sts	0x0194, r25
     c72:	80 93 93 01 	sts	0x0193, r24
		cp.cpoint1 = cpointVal;
     c76:	20 93 91 01 	sts	0x0191, r18
     c7a:	06 c0       	rjmp	.+12     	; 0xc88 <mf_cdoneSelect+0x2e>
	}
	else
	{
		cp.cpoint2_adc = adc_normalized;
     c7c:	90 93 96 01 	sts	0x0196, r25
     c80:	80 93 95 01 	sts	0x0195, r24
		cp.cpoint2 = cpointVal;
     c84:	20 93 92 01 	sts	0x0192, r18
	}
	calculateCoeffs();
     c88:	c7 da       	rcall	.-2674   	; 0x218 <calculateCoeffs>
	saveCalibrationToEEPROM();
     c8a:	f0 cd       	rjmp	.-1056   	; 0x86c <saveCalibrationToEEPROM>

00000c8c <mf_autopoffDo>:

//---------------------------------------------//


void mf_autopoffDo(void)
{
     c8c:	cf 93       	push	r28
     c8e:	df 93       	push	r29
     c90:	cd b7       	in	r28, 0x3d	; 61
     c92:	de b7       	in	r29, 0x3e	; 62
     c94:	27 97       	sbiw	r28, 0x07	; 7
     c96:	0f b6       	in	r0, 0x3f	; 63
     c98:	f8 94       	cli
     c9a:	de bf       	out	0x3e, r29	; 62
     c9c:	0f be       	out	0x3f, r0	; 63
     c9e:	cd bf       	out	0x3d, r28	; 61
	char str[] = {'O','F','F',' ',' ',' ',0};
     ca0:	87 e0       	ldi	r24, 0x07	; 7
     ca2:	e4 e9       	ldi	r30, 0x94	; 148
     ca4:	f0 e0       	ldi	r31, 0x00	; 0
     ca6:	de 01       	movw	r26, r28
     ca8:	11 96       	adiw	r26, 0x01	; 1
     caa:	01 90       	ld	r0, Z+
     cac:	0d 92       	st	X+, r0
     cae:	8a 95       	dec	r24
     cb0:	e1 f7       	brne	.-8      	; 0xcaa <mf_autopoffDo+0x1e>
		
	if (button_state & (BD_UP | BR_UP))
     cb2:	80 91 f0 00 	lds	r24, 0x00F0
     cb6:	90 91 f1 00 	lds	r25, 0x00F1
     cba:	9c 01       	movw	r18, r24
     cbc:	20 74       	andi	r18, 0x40	; 64
     cbe:	34 70       	andi	r19, 0x04	; 4
     cc0:	23 2b       	or	r18, r19
     cc2:	31 f0       	breq	.+12     	; 0xcd0 <mf_autopoffDo+0x44>
	{
		if (p.power_off_timeout < MAX_POWEROFF_TIMEOUT)
     cc4:	80 91 9a 01 	lds	r24, 0x019A
     cc8:	8f 35       	cpi	r24, 0x5F	; 95
     cca:	68 f4       	brcc	.+26     	; 0xce6 <mf_autopoffDo+0x5a>
			p.power_off_timeout += 5;
     ccc:	8b 5f       	subi	r24, 0xFB	; 251
     cce:	09 c0       	rjmp	.+18     	; 0xce2 <mf_autopoffDo+0x56>
		restartMenuTimer();
	}
	else if (button_state & (BD_DOWN | BR_DOWN))
     cd0:	80 78       	andi	r24, 0x80	; 128
     cd2:	98 70       	andi	r25, 0x08	; 8
     cd4:	89 2b       	or	r24, r25
     cd6:	49 f0       	breq	.+18     	; 0xcea <mf_autopoffDo+0x5e>
	{
		if (p.power_off_timeout > MIN_POWEROFF_TIMEOUT)
     cd8:	80 91 9a 01 	lds	r24, 0x019A
     cdc:	86 30       	cpi	r24, 0x06	; 6
     cde:	18 f0       	brcs	.+6      	; 0xce6 <mf_autopoffDo+0x5a>
			p.power_off_timeout -= 5;
     ce0:	85 50       	subi	r24, 0x05	; 5
     ce2:	80 93 9a 01 	sts	0x019A, r24
//	 Restarts menu state timeout
//	Should be used in RUN function when control buttons are pressed.
//-----------------------------------------------------------------//
static void restartMenuTimer(void)
{
	menuTimer.Timer = 0;
     ce6:	10 92 84 00 	sts	0x0084, r1
		if (p.power_off_timeout > MIN_POWEROFF_TIMEOUT)
			p.power_off_timeout -= 5;
		restartMenuTimer();
	}	
		
	if (userTimer.FA_GE)
     cea:	80 91 0b 01 	lds	r24, 0x010B
     cee:	84 ff       	sbrs	r24, 4
     cf0:	10 c0       	rjmp	.+32     	; 0xd12 <mf_autopoffDo+0x86>
	{
		if (p.power_off_timeout != MAX_POWEROFF_TIMEOUT)
     cf2:	80 91 9a 01 	lds	r24, 0x019A
     cf6:	8f 35       	cpi	r24, 0x5F	; 95
     cf8:	41 f0       	breq	.+16     	; 0xd0a <mf_autopoffDo+0x7e>
			u16toa_align_right(p.power_off_timeout,str + 4,0x80 | 2,' ');	
     cfa:	20 e2       	ldi	r18, 0x20	; 32
     cfc:	42 e8       	ldi	r20, 0x82	; 130
     cfe:	be 01       	movw	r22, r28
     d00:	6b 5f       	subi	r22, 0xFB	; 251
     d02:	7f 4f       	sbci	r23, 0xFF	; 255
     d04:	90 e0       	ldi	r25, 0x00	; 0
     d06:	3f d2       	rcall	.+1150   	; 0x1186 <u16toa_align_right>
     d08:	04 c0       	rjmp	.+8      	; 0xd12 <mf_autopoffDo+0x86>
		else 
		{
			str[4] = 'N';
     d0a:	8e e4       	ldi	r24, 0x4E	; 78
     d0c:	8d 83       	std	Y+5, r24	; 0x05
			str[5] = 'O';
     d0e:	8f e4       	ldi	r24, 0x4F	; 79
     d10:	8e 83       	std	Y+6, r24	; 0x06
		}			
	}		
		
	printLedBuffer(0,str);
     d12:	be 01       	movw	r22, r28
     d14:	6f 5f       	subi	r22, 0xFF	; 255
     d16:	7f 4f       	sbci	r23, 0xFF	; 255
     d18:	80 e0       	ldi	r24, 0x00	; 0
     d1a:	a6 de       	rcall	.-692    	; 0xa68 <printLedBuffer>
}
     d1c:	27 96       	adiw	r28, 0x07	; 7
     d1e:	0f b6       	in	r0, 0x3f	; 63
     d20:	f8 94       	cli
     d22:	de bf       	out	0x3e, r29	; 62
     d24:	0f be       	out	0x3f, r0	; 63
     d26:	cd bf       	out	0x3d, r28	; 61
     d28:	df 91       	pop	r29
     d2a:	cf 91       	pop	r28
     d2c:	08 95       	ret

00000d2e <mf_calibDo>:
	cpointNum = 2;
	printLedBuffer(0,"P2    ");
}

void mf_calibDo(void)
{
     d2e:	cf 93       	push	r28
     d30:	df 93       	push	r29
     d32:	00 d0       	rcall	.+0      	; 0xd34 <mf_calibDo+0x6>
     d34:	00 d0       	rcall	.+0      	; 0xd36 <mf_calibDo+0x8>
     d36:	cd b7       	in	r28, 0x3d	; 61
     d38:	de b7       	in	r29, 0x3e	; 62
	char str[] = "   ";
     d3a:	80 e2       	ldi	r24, 0x20	; 32
     d3c:	90 e2       	ldi	r25, 0x20	; 32
     d3e:	a0 e2       	ldi	r26, 0x20	; 32
     d40:	b0 e0       	ldi	r27, 0x00	; 0
     d42:	89 83       	std	Y+1, r24	; 0x01
     d44:	9a 83       	std	Y+2, r25	; 0x02
     d46:	ab 83       	std	Y+3, r26	; 0x03
     d48:	bc 83       	std	Y+4, r27	; 0x04
	
	if (button_state & (BD_UP | BR_UP))
     d4a:	80 91 f0 00 	lds	r24, 0x00F0
     d4e:	90 91 f1 00 	lds	r25, 0x00F1
     d52:	9c 01       	movw	r18, r24
     d54:	20 74       	andi	r18, 0x40	; 64
     d56:	34 70       	andi	r19, 0x04	; 4
     d58:	23 2b       	or	r18, r19
     d5a:	31 f0       	breq	.+12     	; 0xd68 <mf_calibDo+0x3a>
	{
		if (cpoint_user_val < MAX_CALIB_TEMP)
     d5c:	80 91 09 01 	lds	r24, 0x0109
     d60:	8a 3f       	cpi	r24, 0xFA	; 250
     d62:	68 f4       	brcc	.+26     	; 0xd7e <mf_calibDo+0x50>
		cpoint_user_val += 1;
     d64:	8f 5f       	subi	r24, 0xFF	; 255
     d66:	09 c0       	rjmp	.+18     	; 0xd7a <mf_calibDo+0x4c>
	}
	else if (button_state & (BD_DOWN | BR_DOWN))
     d68:	80 78       	andi	r24, 0x80	; 128
     d6a:	98 70       	andi	r25, 0x08	; 8
     d6c:	89 2b       	or	r24, r25
     d6e:	39 f0       	breq	.+14     	; 0xd7e <mf_calibDo+0x50>
	{
		if (cpoint_user_val > MIN_CALIB_TEMP)
     d70:	80 91 09 01 	lds	r24, 0x0109
     d74:	8b 30       	cpi	r24, 0x0B	; 11
     d76:	18 f0       	brcs	.+6      	; 0xd7e <mf_calibDo+0x50>
		cpoint_user_val -= 1;
     d78:	81 50       	subi	r24, 0x01	; 1
     d7a:	80 93 09 01 	sts	0x0109, r24
	}
	
	if (userTimer.FA_GE)
     d7e:	80 91 0b 01 	lds	r24, 0x010B
     d82:	84 ff       	sbrs	r24, 4
     d84:	0f c0       	rjmp	.+30     	; 0xda4 <mf_calibDo+0x76>
	{
		u16toa_align_right(cpoint_user_val,str,3,' ');
     d86:	20 e2       	ldi	r18, 0x20	; 32
     d88:	43 e0       	ldi	r20, 0x03	; 3
     d8a:	be 01       	movw	r22, r28
     d8c:	6f 5f       	subi	r22, 0xFF	; 255
     d8e:	7f 4f       	sbci	r23, 0xFF	; 255
     d90:	80 91 09 01 	lds	r24, 0x0109
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	f7 d1       	rcall	.+1006   	; 0x1186 <u16toa_align_right>
		resetAutoPowerOffCounter();
     d98:	8d d5       	rcall	.+2842   	; 0x18b4 <resetAutoPowerOffCounter>
		heaterState |= CALIBRATION_ACTIVE;
     d9a:	80 91 f5 00 	lds	r24, 0x00F5
     d9e:	82 60       	ori	r24, 0x02	; 2
     da0:	80 93 f5 00 	sts	0x00F5, r24
	}
	
	printLedBuffer(3,str);
     da4:	be 01       	movw	r22, r28
     da6:	6f 5f       	subi	r22, 0xFF	; 255
     da8:	7f 4f       	sbci	r23, 0xFF	; 255
     daa:	83 e0       	ldi	r24, 0x03	; 3
     dac:	5d de       	rcall	.-838    	; 0xa68 <printLedBuffer>
}
     dae:	0f 90       	pop	r0
     db0:	0f 90       	pop	r0
     db2:	0f 90       	pop	r0
     db4:	0f 90       	pop	r0
     db6:	df 91       	pop	r29
     db8:	cf 91       	pop	r28
     dba:	08 95       	ret

00000dbc <mf_sndenDo>:

//---------------------------------------------//


void mf_sndenDo(void)
{
     dbc:	cf 93       	push	r28
     dbe:	df 93       	push	r29
     dc0:	cd b7       	in	r28, 0x3d	; 61
     dc2:	de b7       	in	r29, 0x3e	; 62
     dc4:	27 97       	sbiw	r28, 0x07	; 7
     dc6:	0f b6       	in	r0, 0x3f	; 63
     dc8:	f8 94       	cli
     dca:	de bf       	out	0x3e, r29	; 62
     dcc:	0f be       	out	0x3f, r0	; 63
     dce:	cd bf       	out	0x3d, r28	; 61
	char str[] = {'S','N','D',' ',' ',' ',0};
     dd0:	87 e0       	ldi	r24, 0x07	; 7
     dd2:	eb e9       	ldi	r30, 0x9B	; 155
     dd4:	f0 e0       	ldi	r31, 0x00	; 0
     dd6:	de 01       	movw	r26, r28
     dd8:	11 96       	adiw	r26, 0x01	; 1
     dda:	01 90       	ld	r0, Z+
     ddc:	0d 92       	st	X+, r0
     dde:	8a 95       	dec	r24
     de0:	e1 f7       	brne	.-8      	; 0xdda <mf_sndenDo+0x1e>
		
	if (button_state & (BD_UP | BD_DOWN))
     de2:	80 91 f0 00 	lds	r24, 0x00F0
     de6:	90 91 f1 00 	lds	r25, 0x00F1
     dea:	80 7c       	andi	r24, 0xC0	; 192
     dec:	99 27       	eor	r25, r25
     dee:	89 2b       	or	r24, r25
     df0:	49 f0       	breq	.+18     	; 0xe04 <mf_sndenDo+0x48>
	{
		p.sound_enable = !p.sound_enable;
     df2:	81 e0       	ldi	r24, 0x01	; 1
     df4:	90 91 99 01 	lds	r25, 0x0199
     df8:	91 11       	cpse	r25, r1
     dfa:	80 e0       	ldi	r24, 0x00	; 0
     dfc:	80 93 99 01 	sts	0x0199, r24
//	 Restarts menu state timeout
//	Should be used in RUN function when control buttons are pressed.
//-----------------------------------------------------------------//
static void restartMenuTimer(void)
{
	menuTimer.Timer = 0;
     e00:	10 92 84 00 	sts	0x0084, r1
	{
		p.sound_enable = !p.sound_enable;
		restartMenuTimer();
	}			
		
	if (userTimer.FA_GE)
     e04:	80 91 0b 01 	lds	r24, 0x010B
     e08:	84 ff       	sbrs	r24, 4
     e0a:	0d c0       	rjmp	.+26     	; 0xe26 <mf_sndenDo+0x6a>
	{
		if (p.sound_enable)		
     e0c:	80 91 99 01 	lds	r24, 0x0199
     e10:	88 23       	and	r24, r24
     e12:	21 f0       	breq	.+8      	; 0xe1c <mf_sndenDo+0x60>
		{
			str[4] = 'O';
     e14:	8f e4       	ldi	r24, 0x4F	; 79
     e16:	8d 83       	std	Y+5, r24	; 0x05
			str[5] = 'N';
     e18:	8e e4       	ldi	r24, 0x4E	; 78
     e1a:	04 c0       	rjmp	.+8      	; 0xe24 <mf_sndenDo+0x68>
		}
		else
		{
			str[3] = 'O';
     e1c:	8f e4       	ldi	r24, 0x4F	; 79
     e1e:	8c 83       	std	Y+4, r24	; 0x04
			str[4] = 'F';
     e20:	86 e4       	ldi	r24, 0x46	; 70
     e22:	8d 83       	std	Y+5, r24	; 0x05
			str[5] = 'F';
     e24:	8e 83       	std	Y+6, r24	; 0x06
		}			
	}
		
	printLedBuffer(0,str);
     e26:	be 01       	movw	r22, r28
     e28:	6f 5f       	subi	r22, 0xFF	; 255
     e2a:	7f 4f       	sbci	r23, 0xFF	; 255
     e2c:	80 e0       	ldi	r24, 0x00	; 0
     e2e:	1c de       	rcall	.-968    	; 0xa68 <printLedBuffer>
	setComma(2);
     e30:	82 e0       	ldi	r24, 0x02	; 2
     e32:	54 de       	rcall	.-856    	; 0xadc <setComma>
}
     e34:	27 96       	adiw	r28, 0x07	; 7
     e36:	0f b6       	in	r0, 0x3f	; 63
     e38:	f8 94       	cli
     e3a:	de bf       	out	0x3e, r29	; 62
     e3c:	0f be       	out	0x3f, r0	; 63
     e3e:	cd bf       	out	0x3d, r28	; 61
     e40:	df 91       	pop	r29
     e42:	cf 91       	pop	r28
     e44:	08 95       	ret

00000e46 <mf_rollDo>:
	setExtraLeds(LED_ROLL);
	mf_leafSelectAct();		// setup and start timer
}

void mf_rollDo(void)
{
     e46:	cf 93       	push	r28
     e48:	df 93       	push	r29
     e4a:	cd b7       	in	r28, 0x3d	; 61
     e4c:	de b7       	in	r29, 0x3e	; 62
     e4e:	27 97       	sbiw	r28, 0x07	; 7
     e50:	0f b6       	in	r0, 0x3f	; 63
     e52:	f8 94       	cli
     e54:	de bf       	out	0x3e, r29	; 62
     e56:	0f be       	out	0x3f, r0	; 63
     e58:	cd bf       	out	0x3d, r28	; 61
	char str[] = {' ',' ',' ',' ',' ',' ',0};
     e5a:	87 e0       	ldi	r24, 0x07	; 7
     e5c:	e2 ea       	ldi	r30, 0xA2	; 162
     e5e:	f0 e0       	ldi	r31, 0x00	; 0
     e60:	de 01       	movw	r26, r28
     e62:	11 96       	adiw	r26, 0x01	; 1
     e64:	01 90       	ld	r0, Z+
     e66:	0d 92       	st	X+, r0
     e68:	8a 95       	dec	r24
     e6a:	e1 f7       	brne	.-8      	; 0xe64 <mf_rollDo+0x1e>
		
	if (button_state & (BD_UP | BR_UP))
     e6c:	80 91 f0 00 	lds	r24, 0x00F0
     e70:	90 91 f1 00 	lds	r25, 0x00F1
     e74:	9c 01       	movw	r18, r24
     e76:	20 74       	andi	r18, 0x40	; 64
     e78:	34 70       	andi	r19, 0x04	; 4
     e7a:	23 2b       	or	r18, r19
     e7c:	31 f0       	breq	.+12     	; 0xe8a <mf_rollDo+0x44>
	{
		if (p.rollCycleSet < MAX_ROLL_CYCLES)
     e7e:	80 91 98 01 	lds	r24, 0x0198
     e82:	83 36       	cpi	r24, 0x63	; 99
     e84:	68 f4       	brcc	.+26     	; 0xea0 <mf_rollDo+0x5a>
			p.rollCycleSet += 1;
     e86:	8f 5f       	subi	r24, 0xFF	; 255
     e88:	09 c0       	rjmp	.+18     	; 0xe9c <mf_rollDo+0x56>
	}
	else if (button_state & (BD_DOWN | BR_DOWN))
     e8a:	80 78       	andi	r24, 0x80	; 128
     e8c:	98 70       	andi	r25, 0x08	; 8
     e8e:	89 2b       	or	r24, r25
     e90:	39 f0       	breq	.+14     	; 0xea0 <mf_rollDo+0x5a>
	{
		if (p.rollCycleSet > MIN_ROLL_CYCLES)
     e92:	80 91 98 01 	lds	r24, 0x0198
     e96:	82 30       	cpi	r24, 0x02	; 2
     e98:	18 f0       	brcs	.+6      	; 0xea0 <mf_rollDo+0x5a>
			p.rollCycleSet -= 1;
     e9a:	81 50       	subi	r24, 0x01	; 1
     e9c:	80 93 98 01 	sts	0x0198, r24
	}	
		
	u16toa_align_right(p.rollCycleSet,str + 4,0x80 | 2,' ');
     ea0:	20 e2       	ldi	r18, 0x20	; 32
     ea2:	42 e8       	ldi	r20, 0x82	; 130
     ea4:	be 01       	movw	r22, r28
     ea6:	6b 5f       	subi	r22, 0xFB	; 251
     ea8:	7f 4f       	sbci	r23, 0xFF	; 255
     eaa:	80 91 98 01 	lds	r24, 0x0198
     eae:	90 e0       	ldi	r25, 0x00	; 0
     eb0:	6a d1       	rcall	.+724    	; 0x1186 <u16toa_align_right>
	
	if ((!(rollState & ROLL_CYCLE)) || (userTimer.FA_GE))
     eb2:	80 91 10 01 	lds	r24, 0x0110
     eb6:	82 ff       	sbrs	r24, 2
     eb8:	04 c0       	rjmp	.+8      	; 0xec2 <mf_rollDo+0x7c>
     eba:	80 91 0b 01 	lds	r24, 0x010B
     ebe:	84 ff       	sbrs	r24, 4
     ec0:	09 c0       	rjmp	.+18     	; 0xed4 <mf_rollDo+0x8e>
	{
		u16toa_align_right(activeRollCycle,str + 1,0x80 | 2,' ');
     ec2:	20 e2       	ldi	r18, 0x20	; 32
     ec4:	42 e8       	ldi	r20, 0x82	; 130
     ec6:	be 01       	movw	r22, r28
     ec8:	6e 5f       	subi	r22, 0xFE	; 254
     eca:	7f 4f       	sbci	r23, 0xFF	; 255
     ecc:	80 91 0f 01 	lds	r24, 0x010F
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	59 d1       	rcall	.+690    	; 0x1186 <u16toa_align_right>
	}
	
	str[0] = 0;
     ed4:	19 82       	std	Y+1, r1	; 0x01
	if (isTopPointValid())
     ed6:	1c d3       	rcall	.+1592   	; 0x1510 <isTopPointValid>
     ed8:	88 23       	and	r24, r24
     eda:	19 f0       	breq	.+6      	; 0xee2 <mf_rollDo+0x9c>
		str[0] |= SEGA;
     edc:	89 81       	ldd	r24, Y+1	; 0x01
     ede:	81 60       	ori	r24, 0x01	; 1
     ee0:	89 83       	std	Y+1, r24	; 0x01
	if (isBottomPointValid())
     ee2:	26 d3       	rcall	.+1612   	; 0x1530 <isBottomPointValid>
     ee4:	88 23       	and	r24, r24
     ee6:	19 f0       	breq	.+6      	; 0xeee <mf_rollDo+0xa8>
		str[0] |= SEGD;
     ee8:	89 81       	ldd	r24, Y+1	; 0x01
     eea:	88 60       	ori	r24, 0x08	; 8
     eec:	89 83       	std	Y+1, r24	; 0x01
	if (str[0] == 0)
     eee:	89 81       	ldd	r24, Y+1	; 0x01
     ef0:	81 11       	cpse	r24, r1
     ef2:	02 c0       	rjmp	.+4      	; 0xef8 <mf_rollDo+0xb2>
		str[0] = ' ';
     ef4:	80 e2       	ldi	r24, 0x20	; 32
     ef6:	89 83       	std	Y+1, r24	; 0x01
		
	printLedBuffer(0,str);
     ef8:	be 01       	movw	r22, r28
     efa:	6f 5f       	subi	r22, 0xFF	; 255
     efc:	7f 4f       	sbci	r23, 0xFF	; 255
     efe:	80 e0       	ldi	r24, 0x00	; 0
     f00:	b3 dd       	rcall	.-1178   	; 0xa68 <printLedBuffer>
}
     f02:	27 96       	adiw	r28, 0x07	; 7
     f04:	0f b6       	in	r0, 0x3f	; 63
     f06:	f8 94       	cli
     f08:	de bf       	out	0x3e, r29	; 62
     f0a:	0f be       	out	0x3f, r0	; 63
     f0c:	cd bf       	out	0x3d, r28	; 61
     f0e:	df 91       	pop	r29
     f10:	cf 91       	pop	r28
     f12:	08 95       	ret

00000f14 <mf_rollSelect>:
//---------------------------------------------//
//---------------------------------------------//

void mf_rollSelect(void)
{
	setExtraLeds(LED_ROLL);
     f14:	80 e4       	ldi	r24, 0x40	; 64
     f16:	ee dd       	rcall	.-1060   	; 0xaf4 <setExtraLeds>
	mf_leafSelectAct();		// setup and start timer
     f18:	43 ce       	rjmp	.-890    	; 0xba0 <mf_leafSelectAct>

00000f1a <mf_setTempDo>:
	clearExtraLeds(LED_TEMP);
	mf_leafSelectAct();		// setup and start timer
}

void mf_setTempDo(void)
{
     f1a:	cf 93       	push	r28
     f1c:	df 93       	push	r29
     f1e:	cd b7       	in	r28, 0x3d	; 61
     f20:	de b7       	in	r29, 0x3e	; 62
     f22:	27 97       	sbiw	r28, 0x07	; 7
     f24:	0f b6       	in	r0, 0x3f	; 63
     f26:	f8 94       	cli
     f28:	de bf       	out	0x3e, r29	; 62
     f2a:	0f be       	out	0x3f, r0	; 63
     f2c:	cd bf       	out	0x3d, r28	; 61
	char str[] = {' ',' ',' ',' ',0xB0,'C',0};
     f2e:	87 e0       	ldi	r24, 0x07	; 7
     f30:	e9 ea       	ldi	r30, 0xA9	; 169
     f32:	f0 e0       	ldi	r31, 0x00	; 0
     f34:	de 01       	movw	r26, r28
     f36:	11 96       	adiw	r26, 0x01	; 1
     f38:	01 90       	ld	r0, Z+
     f3a:	0d 92       	st	X+, r0
     f3c:	8a 95       	dec	r24
     f3e:	e1 f7       	brne	.-8      	; 0xf38 <mf_setTempDo+0x1e>
	
	if (button_state & (BD_UP | BR_UP))
     f40:	80 91 f0 00 	lds	r24, 0x00F0
     f44:	90 91 f1 00 	lds	r25, 0x00F1
     f48:	9c 01       	movw	r18, r24
     f4a:	20 74       	andi	r18, 0x40	; 64
     f4c:	34 70       	andi	r19, 0x04	; 4
     f4e:	23 2b       	or	r18, r19
     f50:	31 f0       	breq	.+12     	; 0xf5e <mf_setTempDo+0x44>
	{
		if (p.setup_temp_value < MAX_SET_TEMP)
     f52:	80 91 97 01 	lds	r24, 0x0197
     f56:	8a 3f       	cpi	r24, 0xFA	; 250
     f58:	68 f4       	brcc	.+26     	; 0xf74 <mf_setTempDo+0x5a>
			p.setup_temp_value += 5;
     f5a:	8b 5f       	subi	r24, 0xFB	; 251
     f5c:	09 c0       	rjmp	.+18     	; 0xf70 <mf_setTempDo+0x56>
		restartMenuTimer();
	}
	else if (button_state & (BD_DOWN | BR_DOWN))
     f5e:	80 78       	andi	r24, 0x80	; 128
     f60:	98 70       	andi	r25, 0x08	; 8
     f62:	89 2b       	or	r24, r25
     f64:	49 f0       	breq	.+18     	; 0xf78 <mf_setTempDo+0x5e>
	{
		if (p.setup_temp_value > MIN_SET_TEMP)
     f66:	80 91 97 01 	lds	r24, 0x0197
     f6a:	8f 31       	cpi	r24, 0x1F	; 31
     f6c:	18 f0       	brcs	.+6      	; 0xf74 <mf_setTempDo+0x5a>
			p.setup_temp_value -= 5;
     f6e:	85 50       	subi	r24, 0x05	; 5
     f70:	80 93 97 01 	sts	0x0197, r24
//	 Restarts menu state timeout
//	Should be used in RUN function when control buttons are pressed.
//-----------------------------------------------------------------//
static void restartMenuTimer(void)
{
	menuTimer.Timer = 0;
     f74:	10 92 84 00 	sts	0x0084, r1
			p.setup_temp_value -= 5;
		restartMenuTimer();
	}					
		
	// Output ADC result to LED
	u16toa_align_right(p.setup_temp_value,str,0x80 | 4,' ');
     f78:	20 e2       	ldi	r18, 0x20	; 32
     f7a:	44 e8       	ldi	r20, 0x84	; 132
     f7c:	be 01       	movw	r22, r28
     f7e:	6f 5f       	subi	r22, 0xFF	; 255
     f80:	7f 4f       	sbci	r23, 0xFF	; 255
     f82:	80 91 97 01 	lds	r24, 0x0197
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	fe d0       	rcall	.+508    	; 0x1186 <u16toa_align_right>
	printLedBuffer(0,str);
     f8a:	be 01       	movw	r22, r28
     f8c:	6f 5f       	subi	r22, 0xFF	; 255
     f8e:	7f 4f       	sbci	r23, 0xFF	; 255
     f90:	80 e0       	ldi	r24, 0x00	; 0
     f92:	6a dd       	rcall	.-1324   	; 0xa68 <printLedBuffer>
	
	if (userTimer.FA_GE)
     f94:	80 91 0b 01 	lds	r24, 0x010B
     f98:	84 ff       	sbrs	r24, 4
     f9a:	03 c0       	rjmp	.+6      	; 0xfa2 <mf_setTempDo+0x88>
		setExtraLeds(LED_TEMP);
     f9c:	80 e8       	ldi	r24, 0x80	; 128
     f9e:	aa dd       	rcall	.-1196   	; 0xaf4 <setExtraLeds>
     fa0:	02 c0       	rjmp	.+4      	; 0xfa6 <mf_setTempDo+0x8c>
	else
		clearExtraLeds(LED_TEMP);
     fa2:	80 e8       	ldi	r24, 0x80	; 128
     fa4:	ad dd       	rcall	.-1190   	; 0xb00 <clearExtraLeds>
}
     fa6:	27 96       	adiw	r28, 0x07	; 7
     fa8:	0f b6       	in	r0, 0x3f	; 63
     faa:	f8 94       	cli
     fac:	de bf       	out	0x3e, r29	; 62
     fae:	0f be       	out	0x3f, r0	; 63
     fb0:	cd bf       	out	0x3d, r28	; 61
     fb2:	df 91       	pop	r29
     fb4:	cf 91       	pop	r28
     fb6:	08 95       	ret

00000fb8 <mf_realTempSelect>:
//=================================================================//


void mf_realTempSelect(void)
{
	setExtraLeds(LED_TEMP);
     fb8:	80 e8       	ldi	r24, 0x80	; 128
     fba:	9c cd       	rjmp	.-1224   	; 0xaf4 <setExtraLeds>

00000fbc <mf_realTempDo>:
}

void mf_realTempDo(void)
{
     fbc:	cf 93       	push	r28
     fbe:	df 93       	push	r29
     fc0:	cd b7       	in	r28, 0x3d	; 61
     fc2:	de b7       	in	r29, 0x3e	; 62
     fc4:	27 97       	sbiw	r28, 0x07	; 7
     fc6:	0f b6       	in	r0, 0x3f	; 63
     fc8:	f8 94       	cli
     fca:	de bf       	out	0x3e, r29	; 62
     fcc:	0f be       	out	0x3f, r0	; 63
     fce:	cd bf       	out	0x3d, r28	; 61
	char str[] = {' ',' ',' ',' ',0xB0,'C',0};
     fd0:	87 e0       	ldi	r24, 0x07	; 7
     fd2:	e9 ea       	ldi	r30, 0xA9	; 169
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	de 01       	movw	r26, r28
     fd8:	11 96       	adiw	r26, 0x01	; 1
     fda:	01 90       	ld	r0, Z+
     fdc:	0d 92       	st	X+, r0
     fde:	8a 95       	dec	r24
     fe0:	e1 f7       	brne	.-8      	; 0xfda <mf_realTempDo+0x1e>

	if (adc_status & (SENSOR_ERROR_NO_PRESENT))
     fe2:	80 91 65 01 	lds	r24, 0x0165
     fe6:	80 ff       	sbrs	r24, 0
     fe8:	03 c0       	rjmp	.+6      	; 0xff0 <mf_realTempDo+0x34>
	{
		printLedBuffer(0,"ERR 01");
     fea:	6c ec       	ldi	r22, 0xCC	; 204
     fec:	70 e0       	ldi	r23, 0x00	; 0
     fee:	12 c0       	rjmp	.+36     	; 0x1014 <mf_realTempDo+0x58>
	}
	else if (adc_status & (SENSOR_ERROR_SHORTED))
     ff0:	81 ff       	sbrs	r24, 1
     ff2:	03 c0       	rjmp	.+6      	; 0xffa <mf_realTempDo+0x3e>
	{
		printLedBuffer(0,"ERR 02");
     ff4:	63 ed       	ldi	r22, 0xD3	; 211
     ff6:	70 e0       	ldi	r23, 0x00	; 0
     ff8:	0d c0       	rjmp	.+26     	; 0x1014 <mf_realTempDo+0x58>
	}
	else
	{
		// Output ADC result to LED
		u16toa_align_right(adc_celsius,str,0x80 | 4,' ');
     ffa:	20 e2       	ldi	r18, 0x20	; 32
     ffc:	44 e8       	ldi	r20, 0x84	; 132
     ffe:	be 01       	movw	r22, r28
    1000:	6f 5f       	subi	r22, 0xFF	; 255
    1002:	7f 4f       	sbci	r23, 0xFF	; 255
    1004:	80 91 66 01 	lds	r24, 0x0166
    1008:	90 91 67 01 	lds	r25, 0x0167
    100c:	bc d0       	rcall	.+376    	; 0x1186 <u16toa_align_right>
		printLedBuffer(0,str);
    100e:	be 01       	movw	r22, r28
    1010:	6f 5f       	subi	r22, 0xFF	; 255
    1012:	7f 4f       	sbci	r23, 0xFF	; 255
    1014:	80 e0       	ldi	r24, 0x00	; 0
    1016:	28 dd       	rcall	.-1456   	; 0xa68 <printLedBuffer>
	}
}
    1018:	27 96       	adiw	r28, 0x07	; 7
    101a:	0f b6       	in	r0, 0x3f	; 63
    101c:	f8 94       	cli
    101e:	de bf       	out	0x3e, r29	; 62
    1020:	0f be       	out	0x3f, r0	; 63
    1022:	cd bf       	out	0x3d, r28	; 61
    1024:	df 91       	pop	r29
    1026:	cf 91       	pop	r28
    1028:	08 95       	ret

0000102a <getMenuFunctionRecord.constprop.1>:
//	Arguments:
//		menuItemID - ID of an item
//		menuRecord - pointer to function structure to fill
//	Output:
//-----------------------------------------------------------------//
static void getMenuFunctionRecord(uint8_t menuItemID, MenuFunctionRecord* menuRecord )
    102a:	1f 93       	push	r17
    102c:	cf 93       	push	r28
    102e:	df 93       	push	r29
    1030:	c0 e0       	ldi	r28, 0x00	; 0
    1032:	d0 e0       	ldi	r29, 0x00	; 0
{
	uint8_t i;
	for (i = 0; i < sizeof(menuFunctionSet)/sizeof(MenuFunctionRecord); i++  )
	{
		readMenuRecord(&menuFunctionSet[i], menuRecord);
    1034:	17 e0       	ldi	r17, 0x07	; 7
    1036:	1c 9f       	mul	r17, r28
    1038:	90 01       	movw	r18, r0
    103a:	1d 9f       	mul	r17, r29
    103c:	30 0d       	add	r19, r0
    103e:	11 24       	eor	r1, r1
    1040:	26 5a       	subi	r18, 0xA6	; 166
    1042:	3f 4f       	sbci	r19, 0xFF	; 255
//		fRecPtr		- address of the function record in the FLASH
//		resPtr		- address of the record to fill in the SRAM
//-----------------------------------------------------------------//
static inline void readMenuRecord(const MenuFunctionRecord* fRecPtr, MenuFunctionRecord* resPtr )
{
	resPtr->Item = pgm_read_byte(&fRecPtr->Item);
    1044:	f9 01       	movw	r30, r18
    1046:	94 91       	lpm	r25, Z
	resPtr->SelectFunction = (FuncPtr)pgm_read_word(&fRecPtr->SelectFunction);
    1048:	31 96       	adiw	r30, 0x01	; 1
    104a:	a5 91       	lpm	r26, Z+
    104c:	b4 91       	lpm	r27, Z
	resPtr->RunFunction = (FuncPtr)pgm_read_word(&fRecPtr->RunFunction);
    104e:	f9 01       	movw	r30, r18
    1050:	33 96       	adiw	r30, 0x03	; 3
    1052:	65 91       	lpm	r22, Z+
    1054:	74 91       	lpm	r23, Z
	resPtr->LeaveFunction = (FuncPtr)pgm_read_word(&fRecPtr->LeaveFunction);
    1056:	2b 5f       	subi	r18, 0xFB	; 251
    1058:	3f 4f       	sbci	r19, 0xFF	; 255
    105a:	f9 01       	movw	r30, r18
    105c:	45 91       	lpm	r20, Z+
    105e:	54 91       	lpm	r21, Z
{
	uint8_t i;
	for (i = 0; i < sizeof(menuFunctionSet)/sizeof(MenuFunctionRecord); i++  )
	{
		readMenuRecord(&menuFunctionSet[i], menuRecord);
		if (menuRecord->Item == menuItemID)
    1060:	98 13       	cpse	r25, r24
    1062:	03 c0       	rjmp	.+6      	; 0x106a <getMenuFunctionRecord.constprop.1+0x40>
    1064:	80 93 02 01 	sts	0x0102, r24
    1068:	06 c0       	rjmp	.+12     	; 0x1076 <getMenuFunctionRecord.constprop.1+0x4c>
    106a:	21 96       	adiw	r28, 0x01	; 1
//	Output:
//-----------------------------------------------------------------//
static void getMenuFunctionRecord(uint8_t menuItemID, MenuFunctionRecord* menuRecord )
{
	uint8_t i;
	for (i = 0; i < sizeof(menuFunctionSet)/sizeof(MenuFunctionRecord); i++  )
    106c:	ce 30       	cpi	r28, 0x0E	; 14
    106e:	d1 05       	cpc	r29, r1
    1070:	11 f7       	brne	.-60     	; 0x1036 <getMenuFunctionRecord.constprop.1+0xc>
    1072:	90 93 02 01 	sts	0x0102, r25
    1076:	a0 93 03 01 	sts	0x0103, r26
    107a:	b0 93 04 01 	sts	0x0104, r27
    107e:	60 93 05 01 	sts	0x0105, r22
    1082:	70 93 06 01 	sts	0x0106, r23
    1086:	40 93 07 01 	sts	0x0107, r20
    108a:	50 93 08 01 	sts	0x0108, r21
	{
		readMenuRecord(&menuFunctionSet[i], menuRecord);
		if (menuRecord->Item == menuItemID)
			break;
	}
}
    108e:	df 91       	pop	r29
    1090:	cf 91       	pop	r28
    1092:	1f 91       	pop	r17
    1094:	08 95       	ret

00001096 <InitMenu>:
//	Menu initialization
//	Call this function at start of your program before processMenu()
//-----------------------------------------------------------------//
void InitMenu(void)
{
	selectedMenuItemID = mi_REALTEMP;
    1096:	81 e0       	ldi	r24, 0x01	; 1
    1098:	80 93 01 01 	sts	0x0101, r24
	getMenuFunctionRecord(selectedMenuItemID, &selectedMenuFunctionRecord);
    109c:	c6 df       	rcall	.-116    	; 0x102a <getMenuFunctionRecord.constprop.1>
	processItemFunction(selectedMenuFunctionRecord.SelectFunction);
    109e:	80 91 03 01 	lds	r24, 0x0103
    10a2:	90 91 04 01 	lds	r25, 0x0104
    10a6:	71 cd       	rjmp	.-1310   	; 0xb8a <processItemFunction>

000010a8 <processMenu>:
//	Main menu control, -  state function calls, jumps 
//	between menu states and indication
//	Call this function from main() with a fixed time interval.
//-----------------------------------------------------------------//
void processMenu(void)
{
    10a8:	0f 93       	push	r16
    10aa:	1f 93       	push	r17
    10ac:	cf 93       	push	r28
    10ae:	df 93       	push	r29
	NextItem_t nextItem;
	uint16_t jumpCondition;
	
	processSoftTimer8b(&menuTimer);	
    10b0:	83 e8       	ldi	r24, 0x83	; 131
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	6c d3       	rcall	.+1752   	; 0x178e <processSoftTimer8b>
	
	// Compose jump condition
	jumpCondition = button_state;		
    10b6:	40 91 f0 00 	lds	r20, 0x00F0
    10ba:	50 91 f1 00 	lds	r21, 0x00F1
	if (menuTimer.FTop)
    10be:	80 91 83 00 	lds	r24, 0x0083
    10c2:	85 fd       	sbrc	r24, 5
		jumpCondition |= TMR_EXP;
    10c4:	50 68       	ori	r21, 0x80	; 128
	if (sys_timers.flags & AUTOPOFF_EXPIRED)
    10c6:	80 91 8f 00 	lds	r24, 0x008F
    10ca:	84 fd       	sbrc	r24, 4
		jumpCondition |= GOTO_POFF;
    10cc:	50 64       	ori	r21, 0x40	; 64
	
	// Get next menu item according to current state and jump conditions
	nextItem = getNextMenuItem(selectedMenuItemID, jumpCondition);
    10ce:	80 91 01 01 	lds	r24, 0x0101
    10d2:	60 e0       	ldi	r22, 0x00	; 0
    10d4:	70 e0       	ldi	r23, 0x00	; 0
	MenuJumpRecord	jRecord;
	uint8_t i;
	
	for (i = 0; i < sizeof(menuJumpSet)/sizeof(MenuJumpRecord); i++  )
	{
		readJumpRecord(&menuJumpSet[i], &jRecord);		// read full jump record
    10d6:	95 e0       	ldi	r25, 0x05	; 5
    10d8:	96 9f       	mul	r25, r22
    10da:	90 01       	movw	r18, r0
    10dc:	97 9f       	mul	r25, r23
    10de:	30 0d       	add	r19, r0
    10e0:	11 24       	eor	r1, r1
    10e2:	24 54       	subi	r18, 0x44	; 68
    10e4:	3f 4f       	sbci	r19, 0xFF	; 255
//		jRecPtr		- address of the jump record in the FLASH
//		resPtr		- address of the record to fill in the SRAM
//-----------------------------------------------------------------//
static inline void readJumpRecord(const MenuJumpRecord* jRecPtr, MenuJumpRecord* resPtr )
{
	resPtr->Item = pgm_read_byte(&jRecPtr->Item);
    10e6:	f9 01       	movw	r30, r18
    10e8:	14 91       	lpm	r17, Z
	resPtr->JumpCondition = pgm_read_word(&jRecPtr->JumpCondition);
    10ea:	31 96       	adiw	r30, 0x01	; 1
    10ec:	a5 91       	lpm	r26, Z+
    10ee:	b4 91       	lpm	r27, Z
	resPtr->NextItem= pgm_read_byte(&jRecPtr->NextItem);
    10f0:	f9 01       	movw	r30, r18
    10f2:	33 96       	adiw	r30, 0x03	; 3
    10f4:	c4 91       	lpm	r28, Z
	resPtr->Flags= pgm_read_byte(&jRecPtr->Flags);
    10f6:	f9 01       	movw	r30, r18
    10f8:	34 96       	adiw	r30, 0x04	; 4
    10fa:	d4 91       	lpm	r29, Z
	uint8_t i;
	
	for (i = 0; i < sizeof(menuJumpSet)/sizeof(MenuJumpRecord); i++  )
	{
		readJumpRecord(&menuJumpSet[i], &jRecord);		// read full jump record
		if (jRecord.Item == selectedItemId)				// If ID match,
    10fc:	18 13       	cpse	r17, r24
    10fe:	0b c0       	rjmp	.+22     	; 0x1116 <processMenu+0x6e>
		{
			if ((jRecord.JumpCondition & jmpCond) != 0)		// if any of jump conditions match too,
    1100:	a4 23       	and	r26, r20
    1102:	b5 23       	and	r27, r21
    1104:	ab 2b       	or	r26, r27
    1106:	39 f0       	breq	.+14     	; 0x1116 <processMenu+0x6e>
			{
				nextItem.ItemID = jRecord.NextItem;			// switch to next menu item
				nextItem.ItemTimeout = jRecord.Flags & TIMEOUT_MASK;
    1108:	1d 2f       	mov	r17, r29
    110a:	1f 73       	andi	r17, 0x3F	; 63
				nextItem.ShiftFlags = (jRecord.Flags & (SHIFT_LEFT | SHIFT_RIGHT));
    110c:	0d 2f       	mov	r16, r29
    110e:	00 7c       	andi	r16, 0xC0	; 192
	
	// Get next menu item according to current state and jump conditions
	nextItem = getNextMenuItem(selectedMenuItemID, jumpCondition);
	
	// If next item differs from current
	if (nextItem.ItemID != selectedMenuItemID)
    1110:	c8 13       	cpse	r28, r24
    1112:	07 c0       	rjmp	.+14     	; 0x1122 <processMenu+0x7a>
    1114:	27 c0       	rjmp	.+78     	; 0x1164 <processMenu+0xbc>
    1116:	6f 5f       	subi	r22, 0xFF	; 255
    1118:	7f 4f       	sbci	r23, 0xFF	; 255
	NextItem_t nextItem;
	nextItem.ItemID = selectedItemId;
	MenuJumpRecord	jRecord;
	uint8_t i;
	
	for (i = 0; i < sizeof(menuJumpSet)/sizeof(MenuJumpRecord); i++  )
    111a:	60 32       	cpi	r22, 0x20	; 32
    111c:	71 05       	cpc	r23, r1
    111e:	e1 f6       	brne	.-72     	; 0x10d8 <processMenu+0x30>
    1120:	21 c0       	rjmp	.+66     	; 0x1164 <processMenu+0xbc>
	
	// If next item differs from current
	if (nextItem.ItemID != selectedMenuItemID)
	{		
		// Call exit function for current item
		processItemFunction(selectedMenuFunctionRecord.LeaveFunction);
    1122:	80 91 07 01 	lds	r24, 0x0107
    1126:	90 91 08 01 	lds	r25, 0x0108
    112a:	2f dd       	rcall	.-1442   	; 0xb8a <processItemFunction>
		
		// If shifting is specified, start it before calling any 
		//	new menu item functions 
		if (nextItem.ShiftFlags & SHIFT_RIGHT)
    112c:	d6 ff       	sbrs	r29, 6
    112e:	02 c0       	rjmp	.+4      	; 0x1134 <processMenu+0x8c>
			startShiftingWindowRight();
    1130:	6a dc       	rcall	.-1836   	; 0xa06 <startShiftingWindowRight>
    1132:	02 c0       	rjmp	.+4      	; 0x1138 <processMenu+0x90>
		else if (nextItem.ShiftFlags & SHIFT_LEFT)
    1134:	07 fd       	sbrc	r16, 7
			startShiftingWindowLeft();
    1136:	59 dc       	rcall	.-1870   	; 0x9ea <startShiftingWindowLeft>
		
		// Select new item
		selectedMenuItemID = nextItem.ItemID;
    1138:	c0 93 01 01 	sts	0x0101, r28
		
		// Load from FLASH and save function pointers
		getMenuFunctionRecord(selectedMenuItemID, &selectedMenuFunctionRecord);
    113c:	8c 2f       	mov	r24, r28
    113e:	75 df       	rcall	.-278    	; 0x102a <getMenuFunctionRecord.constprop.1>
		// Call select function for next item
		processItemFunction(selectedMenuFunctionRecord.SelectFunction);
    1140:	80 91 03 01 	lds	r24, 0x0103
    1144:	90 91 04 01 	lds	r25, 0x0104
    1148:	20 dd       	rcall	.-1472   	; 0xb8a <processItemFunction>
		// Start timer if timeout is enabled
		if (nextItem.ItemTimeout != 0)
    114a:	11 23       	and	r17, r17
    114c:	b9 f0       	breq	.+46     	; 0x117c <processMenu+0xd4>
		{
			menuTimer.Top = nextItem.ItemTimeout * MENU_TIMEOUT_MULT;
    114e:	11 0f       	add	r17, r17
    1150:	10 93 85 00 	sts	0x0085, r17
			menuTimer.Timer = 0;
    1154:	10 92 84 00 	sts	0x0084, r1
			menuTimer.Enabled = 1;	
    1158:	80 91 83 00 	lds	r24, 0x0083
    115c:	81 60       	ori	r24, 0x01	; 1
    115e:	80 93 83 00 	sts	0x0083, r24
    1162:	0c c0       	rjmp	.+24     	; 0x117c <processMenu+0xd4>
		}
		
	}
	else
	{
		processSoftTimer8b(&userTimer);
    1164:	8b e0       	ldi	r24, 0x0B	; 11
    1166:	91 e0       	ldi	r25, 0x01	; 1
    1168:	12 d3       	rcall	.+1572   	; 0x178e <processSoftTimer8b>
		// Stay at previous item
		processItemFunction(selectedMenuFunctionRecord.RunFunction);
    116a:	80 91 05 01 	lds	r24, 0x0105
    116e:	90 91 06 01 	lds	r25, 0x0106
	}	
}
    1172:	df 91       	pop	r29
    1174:	cf 91       	pop	r28
    1176:	1f 91       	pop	r17
    1178:	0f 91       	pop	r16
	}
	else
	{
		processSoftTimer8b(&userTimer);
		// Stay at previous item
		processItemFunction(selectedMenuFunctionRecord.RunFunction);
    117a:	07 cd       	rjmp	.-1522   	; 0xb8a <processItemFunction>
	}	
}
    117c:	df 91       	pop	r29
    117e:	cf 91       	pop	r28
    1180:	1f 91       	pop	r17
    1182:	0f 91       	pop	r16
    1184:	08 95       	ret

00001186 <u16toa_align_right>:
// Converts uint16_t value into decimal string with right alignment
// len = number of digits output (without terminating '\0')
// len[7] = 1 -> no terminating '\0' at buffer[len]
// fill_char -> char used for string padding
void u16toa_align_right(uint16_t val, char *buffer, uint8_t len,char fill_char)
{
    1186:	cf 93       	push	r28
    1188:	df 93       	push	r29
	if (len & 0x80)
    118a:	47 ff       	sbrs	r20, 7
    118c:	05 c0       	rjmp	.+10     	; 0x1198 <u16toa_align_right+0x12>
	{
		len = len & 0x7F;
    118e:	4f 77       	andi	r20, 0x7F	; 127
		buffer += len;	
    1190:	fb 01       	movw	r30, r22
    1192:	e4 0f       	add	r30, r20
    1194:	f1 1d       	adc	r31, r1
    1196:	04 c0       	rjmp	.+8      	; 0x11a0 <u16toa_align_right+0x1a>
	}
	else
	{
		buffer += len;	
    1198:	fb 01       	movw	r30, r22
    119a:	e4 0f       	add	r30, r20
    119c:	f1 1d       	adc	r31, r1
		*buffer = 0;
    119e:	10 82       	st	Z, r1
	}
	
	do
	{
		*--buffer = val % 10 + '0';
    11a0:	ca e0       	ldi	r28, 0x0A	; 10
    11a2:	d0 e0       	ldi	r29, 0x00	; 0
    11a4:	be 01       	movw	r22, r28
    11a6:	18 d4       	rcall	.+2096   	; 0x19d8 <__udivmodhi4>
    11a8:	80 5d       	subi	r24, 0xD0	; 208
    11aa:	82 93       	st	-Z, r24
		val /= 10;
    11ac:	cb 01       	movw	r24, r22
		len--;
    11ae:	41 50       	subi	r20, 0x01	; 1
	}
	while ((val != 0) && len);
    11b0:	00 97       	sbiw	r24, 0x00	; 0
    11b2:	21 f0       	breq	.+8      	; 0x11bc <u16toa_align_right+0x36>
    11b4:	41 11       	cpse	r20, r1
    11b6:	f6 cf       	rjmp	.-20     	; 0x11a4 <u16toa_align_right+0x1e>
    11b8:	01 c0       	rjmp	.+2      	; 0x11bc <u16toa_align_right+0x36>
	
	// Padding
	while(len--)
		*--buffer = fill_char;
    11ba:	22 93       	st	-Z, r18
		len--;
	}
	while ((val != 0) && len);
	
	// Padding
	while(len--)
    11bc:	41 50       	subi	r20, 0x01	; 1
    11be:	e8 f7       	brcc	.-6      	; 0x11ba <u16toa_align_right+0x34>
		*--buffer = fill_char;
}
    11c0:	df 91       	pop	r29
    11c2:	cf 91       	pop	r28
    11c4:	08 95       	ret

000011c6 <i32toa_align_right>:



void i32toa_align_right(int32_t val, char *buffer, uint8_t len)
{
    11c6:	cf 92       	push	r12
    11c8:	df 92       	push	r13
    11ca:	ef 92       	push	r14
    11cc:	ff 92       	push	r15
    11ce:	0f 93       	push	r16
    11d0:	1f 93       	push	r17
    11d2:	cf 93       	push	r28
    11d4:	df 93       	push	r29
    11d6:	12 2f       	mov	r17, r18
	uint8_t is_negative = (val < 0) ? 1 : 0;
    11d8:	6b 01       	movw	r12, r22
    11da:	7c 01       	movw	r14, r24
    11dc:	cc 24       	eor	r12, r12
    11de:	f7 fc       	sbrc	r15, 7
    11e0:	c3 94       	inc	r12
    11e2:	dd 24       	eor	r13, r13
    11e4:	ee 24       	eor	r14, r14
    11e6:	ff 24       	eor	r15, r15
    11e8:	0c 2d       	mov	r16, r12
	if (is_negative)
    11ea:	cc 20       	and	r12, r12
    11ec:	39 f0       	breq	.+14     	; 0x11fc <i32toa_align_right+0x36>
		val = -val;
    11ee:	90 95       	com	r25
    11f0:	80 95       	com	r24
    11f2:	70 95       	com	r23
    11f4:	61 95       	neg	r22
    11f6:	7f 4f       	sbci	r23, 0xFF	; 255
    11f8:	8f 4f       	sbci	r24, 0xFF	; 255
    11fa:	9f 4f       	sbci	r25, 0xFF	; 255
		
	buffer += len;	
    11fc:	ea 01       	movw	r28, r20
    11fe:	c1 0f       	add	r28, r17
    1200:	d1 1d       	adc	r29, r1
	*buffer = 0;
    1202:	18 82       	st	Y, r1
	
	do
	{
		*--buffer = val % 10 + '0';
    1204:	2a e0       	ldi	r18, 0x0A	; 10
    1206:	c2 2e       	mov	r12, r18
    1208:	d1 2c       	mov	r13, r1
    120a:	e1 2c       	mov	r14, r1
    120c:	f1 2c       	mov	r15, r1
    120e:	a7 01       	movw	r20, r14
    1210:	96 01       	movw	r18, r12
    1212:	09 d4       	rcall	.+2066   	; 0x1a26 <__divmodsi4>
    1214:	60 5d       	subi	r22, 0xD0	; 208
    1216:	6a 93       	st	-Y, r22
		val /= 10;
    1218:	b9 01       	movw	r22, r18
    121a:	ca 01       	movw	r24, r20
		len--;
    121c:	11 50       	subi	r17, 0x01	; 1
	}
	while ((val != 0) && len);
    121e:	61 15       	cp	r22, r1
    1220:	71 05       	cpc	r23, r1
    1222:	81 05       	cpc	r24, r1
    1224:	91 05       	cpc	r25, r1
    1226:	19 f0       	breq	.+6      	; 0x122e <i32toa_align_right+0x68>
    1228:	11 11       	cpse	r17, r1
    122a:	f1 cf       	rjmp	.-30     	; 0x120e <i32toa_align_right+0x48>
    122c:	08 c0       	rjmp	.+16     	; 0x123e <i32toa_align_right+0x78>
	
	if ( (len) && (is_negative) )
    122e:	11 23       	and	r17, r17
    1230:	31 f0       	breq	.+12     	; 0x123e <i32toa_align_right+0x78>
    1232:	00 23       	and	r16, r16
    1234:	21 f0       	breq	.+8      	; 0x123e <i32toa_align_right+0x78>
	{
		*--buffer = '-';
    1236:	21 97       	sbiw	r28, 0x01	; 1
    1238:	8d e2       	ldi	r24, 0x2D	; 45
    123a:	88 83       	st	Y, r24
		len--;	
    123c:	11 50       	subi	r17, 0x01	; 1
	}	
	
	// Padding
	while(len--)
		*--buffer = ' ';
    123e:	80 e2       	ldi	r24, 0x20	; 32
    1240:	01 c0       	rjmp	.+2      	; 0x1244 <i32toa_align_right+0x7e>
    1242:	8a 93       	st	-Y, r24
		*--buffer = '-';
		len--;	
	}	
	
	// Padding
	while(len--)
    1244:	11 50       	subi	r17, 0x01	; 1
    1246:	e8 f7       	brcc	.-6      	; 0x1242 <i32toa_align_right+0x7c>
		*--buffer = ' ';
	
}
    1248:	df 91       	pop	r29
    124a:	cf 91       	pop	r28
    124c:	1f 91       	pop	r17
    124e:	0f 91       	pop	r16
    1250:	ff 90       	pop	r15
    1252:	ef 90       	pop	r14
    1254:	df 90       	pop	r13
    1256:	cf 90       	pop	r12
    1258:	08 95       	ret

0000125a <logI32p>:
	u16toa_align_right(val,str,6,' ');
	USART_sendstr(str);
}

static void logI32p(int32_t val)
{
    125a:	cf 93       	push	r28
    125c:	df 93       	push	r29
    125e:	cd b7       	in	r28, 0x3d	; 61
    1260:	de b7       	in	r29, 0x3e	; 62
    1262:	2c 97       	sbiw	r28, 0x0c	; 12
    1264:	0f b6       	in	r0, 0x3f	; 63
    1266:	f8 94       	cli
    1268:	de bf       	out	0x3e, r29	; 62
    126a:	0f be       	out	0x3f, r0	; 63
    126c:	cd bf       	out	0x3d, r28	; 61
	char str[12];
	i32toa_align_right(val,str,12);
    126e:	2c e0       	ldi	r18, 0x0C	; 12
    1270:	ae 01       	movw	r20, r28
    1272:	4f 5f       	subi	r20, 0xFF	; 255
    1274:	5f 4f       	sbci	r21, 0xFF	; 255
    1276:	a7 df       	rcall	.-178    	; 0x11c6 <i32toa_align_right>
	USART_sendstr(str);
    1278:	ce 01       	movw	r24, r28
    127a:	01 96       	adiw	r24, 0x01	; 1
    127c:	8f d3       	rcall	.+1822   	; 0x199c <USART_sendstr>
}
    127e:	2c 96       	adiw	r28, 0x0c	; 12
    1280:	0f b6       	in	r0, 0x3f	; 63
    1282:	f8 94       	cli
    1284:	de bf       	out	0x3e, r29	; 62
    1286:	0f be       	out	0x3f, r0	; 63
    1288:	cd bf       	out	0x3d, r28	; 61
    128a:	df 91       	pop	r29
    128c:	cf 91       	pop	r28
    128e:	08 95       	ret

00001290 <logU16p>:
    }
}


static void logU16p(uint16_t val)
{
    1290:	cf 93       	push	r28
    1292:	df 93       	push	r29
    1294:	00 d0       	rcall	.+0      	; 0x1296 <logU16p+0x6>
    1296:	00 d0       	rcall	.+0      	; 0x1298 <logU16p+0x8>
    1298:	00 d0       	rcall	.+0      	; 0x129a <logU16p+0xa>
    129a:	cd b7       	in	r28, 0x3d	; 61
    129c:	de b7       	in	r29, 0x3e	; 62
	char str[6];
	u16toa_align_right(val,str,6,' ');
    129e:	20 e2       	ldi	r18, 0x20	; 32
    12a0:	46 e0       	ldi	r20, 0x06	; 6
    12a2:	be 01       	movw	r22, r28
    12a4:	6f 5f       	subi	r22, 0xFF	; 255
    12a6:	7f 4f       	sbci	r23, 0xFF	; 255
    12a8:	6e df       	rcall	.-292    	; 0x1186 <u16toa_align_right>
	USART_sendstr(str);
    12aa:	ce 01       	movw	r24, r28
    12ac:	01 96       	adiw	r24, 0x01	; 1
    12ae:	76 d3       	rcall	.+1772   	; 0x199c <USART_sendstr>
}
    12b0:	26 96       	adiw	r28, 0x06	; 6
    12b2:	0f b6       	in	r0, 0x3f	; 63
    12b4:	f8 94       	cli
    12b6:	de bf       	out	0x3e, r29	; 62
    12b8:	0f be       	out	0x3f, r0	; 63
    12ba:	cd bf       	out	0x3d, r28	; 61
    12bc:	df 91       	pop	r29
    12be:	cf 91       	pop	r28
    12c0:	08 95       	ret

000012c2 <init_system_io>:
//extern void powTest(void);

void init_system_io()
{
	// Setup Port D
	PORTD = 0;//(1<<PD_SYNCA | 1<<PD_SYNCB);
    12c2:	12 ba       	out	0x12, r1	; 18
	DDRD = (1<<PD_TXD | 1<<PD_M1 | 1<<PD_M2 | 1<<PD_HEATER | 1<<PD_HEAT_INDIC );
    12c4:	8e e3       	ldi	r24, 0x3E	; 62
    12c6:	81 bb       	out	0x11, r24	; 17
	
	// Setup Port B
	PORTB = 0;
    12c8:	18 ba       	out	0x18, r1	; 24
	DDRB = (1<<PB_BEEPER | 1<<PB_LED_DOUT | 1<<PB_LED_CLK | 1<<PB_SEGF | 1<<PB_SEGG | 1<<PB_SEGH);
    12ca:	8f e3       	ldi	r24, 0x3F	; 63
    12cc:	87 bb       	out	0x17, r24	; 23
	
	PORTC = 0;
    12ce:	15 ba       	out	0x15, r1	; 21
	DDRC = (1<<PC_SEGA | 1<<PC_SEGB | 1<<PC_SEGC | 1<<PC_SEGD | 1<<PC_SEGE);	
    12d0:	8f e1       	ldi	r24, 0x1F	; 31
    12d2:	84 bb       	out	0x14, r24	; 20

	// Setup timer0
	// 1/1024 prescaler, T=64us @16MHz
	TCCR0 = (1<<CS02 | 0<<CS01 | 1<<CS00);
    12d4:	85 e0       	ldi	r24, 0x05	; 5
    12d6:	83 bf       	out	0x33, r24	; 51
	TCNT0 = 0;
    12d8:	12 be       	out	0x32, r1	; 50
	// Clear interrupt flag
	TIFR |= (1<<TOV0);
    12da:	88 b7       	in	r24, 0x38	; 56
    12dc:	81 60       	ori	r24, 0x01	; 1
    12de:	88 bf       	out	0x38, r24	; 56
	// Enable interrupts from timer 0
	TIMSK |= (1<<TOIE0);
    12e0:	89 b7       	in	r24, 0x39	; 57
    12e2:	81 60       	ori	r24, 0x01	; 1
    12e4:	89 bf       	out	0x39, r24	; 57
	
	// Setup timer2 as 1ms system frequency generator
	// 1/64 prescaler, CTC mode, OC2 disconnected
	TCCR2 = (1<<CS22 | 1<<WGM21);
    12e6:	8c e0       	ldi	r24, 0x0C	; 12
    12e8:	85 bd       	out	0x25, r24	; 37
	OCR2 = 249;						// 1ms @ 16MHz
    12ea:	89 ef       	ldi	r24, 0xF9	; 249
    12ec:	83 bd       	out	0x23, r24	; 35
	TIMSK |= (1<<OCIE2);
    12ee:	89 b7       	in	r24, 0x39	; 57
    12f0:	80 68       	ori	r24, 0x80	; 128
    12f2:	89 bf       	out	0x39, r24	; 57
	
	// Setup timer1 as beeper frequency generator
	// CTC mode, 1/64 prescaler
	TCCR1A = 0;
    12f4:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = (1<<WGM12 | 1<<CS11 | 1<<CS10);
    12f6:	8b e0       	ldi	r24, 0x0B	; 11
    12f8:	8e bd       	out	0x2e, r24	; 46
	// 1kHz beeper frequency default
	OCR1A = 127;
    12fa:	8f e7       	ldi	r24, 0x7F	; 127
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	9b bd       	out	0x2b, r25	; 43
    1300:	8a bd       	out	0x2a, r24	; 42

	// Setup AC sync comparator
	// Interrupt on output toggle
	ACSR = (1<<ACIE | 0<<ACIS1 | 0<<ACIS0);
    1302:	88 e0       	ldi	r24, 0x08	; 8
    1304:	88 b9       	out	0x08, r24	; 8
	
	// Setup ADC
	// Internal Vref + cap, input ADC5, 
	ADMUX = (1<<REFS1 | 1<<REFS0 | 0<<MUX3 | 1<<MUX2 | 0<<MUX1 | 1<<MUX0 );
    1306:	85 ec       	ldi	r24, 0xC5	; 197
    1308:	87 b9       	out	0x07, r24	; 7
	// Prescaler = 128
	ADCSRA = (1<<ADEN |/* 1<<ADFR |*/  1<<ADIE | 1<<ADPS2 | 1<<ADPS1 | 1<<ADPS0);
    130a:	8f e8       	ldi	r24, 0x8F	; 143
    130c:	86 b9       	out	0x06, r24	; 6
	
	// Setup USART
	// Double speed
	UCSRA = (1<<U2X);
    130e:	82 e0       	ldi	r24, 0x02	; 2
    1310:	8b b9       	out	0x0b, r24	; 11
	UCSRB = (1<<RXEN | 1<<TXEN | 0<<UCSZ2);
    1312:	88 e1       	ldi	r24, 0x18	; 24
    1314:	8a b9       	out	0x0a, r24	; 10
	// No parity, 1 stop bit, 8 bit
	UCSRC = (1<<URSEL | 0<<UPM1 | 0<<UPM0 | 0<<USBS | 1<<UCSZ1 | 1<<UCSZ0);
    1316:	86 e8       	ldi	r24, 0x86	; 134
    1318:	80 bd       	out	0x20, r24	; 32
	// 57600 @16MHz, 2x
	UBRRH=0x00;
    131a:	10 bc       	out	0x20, r1	; 32
	UBRRL=0x22;
    131c:	82 e2       	ldi	r24, 0x22	; 34
    131e:	89 b9       	out	0x09, r24	; 9
    1320:	08 95       	ret

00001322 <main>:
}



int main(void)
{
    1322:	cf 93       	push	r28
    1324:	df 93       	push	r29
    1326:	1f 92       	push	r1
    1328:	cd b7       	in	r28, 0x3d	; 61
    132a:	de b7       	in	r29, 0x3e	; 62
	volatile char str[12];
	volatile uint8_t temp8u = 0x00;
    132c:	19 82       	std	Y+1, r1	; 0x01
	volatile uint16_t temp16u;
	
	// Initialize MCU IO
	init_system_io();
    132e:	c9 df       	rcall	.-110    	; 0x12c2 <init_system_io>
	// Restore params from EEPROM
	restoreGlobalParams();
    1330:	8f da       	rcall	.-2786   	; 0x850 <restoreGlobalParams>
	// Calibrate ADC coefficients using restored params
	calculateCoeffs();
    1332:	72 d7       	rcall	.+3812   	; 0x2218 <__data_load_end+0x64c>
	// Initialize LED indicator
	initLedIndicator();
    1334:	76 db       	rcall	.-2324   	; 0xa22 <initLedIndicator>
	// Clear comparator interrupt flag to prevent false triggering
	ACSR |= (1<<ACI);
    1336:	44 9a       	sbi	0x08, 4	; 8
	sei();
    1338:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    133a:	2f ef       	ldi	r18, 0xFF	; 255
    133c:	80 e7       	ldi	r24, 0x70	; 112
    133e:	92 e0       	ldi	r25, 0x02	; 2
    1340:	21 50       	subi	r18, 0x01	; 1
    1342:	80 40       	sbci	r24, 0x00	; 0
    1344:	90 40       	sbci	r25, 0x00	; 0
    1346:	e1 f7       	brne	.-8      	; 0x1340 <main+0x1e>
    1348:	00 c0       	rjmp	.+0      	; 0x134a <main+0x28>
    134a:	00 00       	nop
	// Safety delay for power part
	_delay_ms(50);
	// Check AC line
	if(p_state == 0x0F) 	
    134c:	80 91 87 00 	lds	r24, 0x0087
    1350:	8f 30       	cpi	r24, 0x0F	; 15
    1352:	69 f4       	brne	.+26     	; 0x136e <main+0x4c>
	{
		// Power control state machine has not changed - sync has not been detected
		printLedBuffer(0,"AC ERR");
    1354:	6a ed       	ldi	r22, 0xDA	; 218
    1356:	70 e0       	ldi	r23, 0x00	; 0
    1358:	80 e0       	ldi	r24, 0x00	; 0
    135a:	86 db       	rcall	.-2292   	; 0xa68 <printLedBuffer>
    135c:	2f ef       	ldi	r18, 0xFF	; 255
    135e:	83 ed       	ldi	r24, 0xD3	; 211
    1360:	90 e3       	ldi	r25, 0x30	; 48
    1362:	21 50       	subi	r18, 0x01	; 1
    1364:	80 40       	sbci	r24, 0x00	; 0
    1366:	90 40       	sbci	r25, 0x00	; 0
    1368:	e1 f7       	brne	.-8      	; 0x1362 <main+0x40>
    136a:	00 c0       	rjmp	.+0      	; 0x136c <main+0x4a>
    136c:	00 00       	nop
		_delay_ms(1000);
	}
	// Initialize menu
	InitMenu();
    136e:	93 de       	rcall	.-730    	; 0x1096 <InitMenu>
	// Beep
	SetBeeperFreq(1000);
    1370:	88 ee       	ldi	r24, 0xE8	; 232
    1372:	93 e0       	ldi	r25, 0x03	; 3
    1374:	a2 d2       	rcall	.+1348   	; 0x18ba <SetBeeperFreq>
	StartBeep(200);
    1376:	88 ec       	ldi	r24, 0xC8	; 200
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	bf d2       	rcall	.+1406   	; 0x18fa <StartBeep>
	// ---- TODO: check out when PID will be finished ----//
	// When we get here, few ADC counts have been sampled.
	update_normalized_adc();
    137c:	1e d8       	rcall	.-4036   	; 0x3ba <update_normalized_adc>
	// Call PID controller function in order to initialize it's internal structures
	heaterInit();
    137e:	13 da       	rcall	.-3034   	; 0x7a6 <heaterInit>
	//----------------------------------------------------//
	// Start rotating
	setMotorDirection(ROLL_FWD);
    1380:	81 e0       	ldi	r24, 0x01	; 1
    1382:	89 d0       	rcall	.+274    	; 0x1496 <setMotorDirection>
	// Clear timer
	menuUpdateTimer.FOvfl = 0;
    1384:	80 91 90 00 	lds	r24, 0x0090
    1388:	8f 7b       	andi	r24, 0xBF	; 191
    138a:	80 93 90 00 	sts	0x0090, r24

    while(1)
    {
		
		if (menuUpdateTimer.FOvfl)
    138e:	80 91 90 00 	lds	r24, 0x0090
    1392:	86 ff       	sbrs	r24, 6
    1394:	fc cf       	rjmp	.-8      	; 0x138e <main+0x6c>
		{
			//--------- BUTTONS ----------//
			
			// Get new button state
			process_buttons();
    1396:	4d d8       	rcall	.-3942   	; 0x432 <process_buttons>
			
			// Give sound feedback
			if (button_state & BL_MENU)
    1398:	80 91 f0 00 	lds	r24, 0x00F0
    139c:	90 91 f1 00 	lds	r25, 0x00F1
    13a0:	91 ff       	sbrs	r25, 1
    13a2:	03 c0       	rjmp	.+6      	; 0x13aa <main+0x88>
			{
				SetBeeperFreq(800);
    13a4:	80 e2       	ldi	r24, 0x20	; 32
    13a6:	93 e0       	ldi	r25, 0x03	; 3
    13a8:	06 c0       	rjmp	.+12     	; 0x13b6 <main+0x94>
				StartBeep(40);
			}
			else if (button_action_down & (BD_MENU | BD_UP | BD_DOWN | BD_HEATCTRL))
    13aa:	80 91 ef 00 	lds	r24, 0x00EF
    13ae:	81 7e       	andi	r24, 0xE1	; 225
    13b0:	31 f0       	breq	.+12     	; 0x13be <main+0x9c>
			{
				SetBeeperFreq(1000);
    13b2:	88 ee       	ldi	r24, 0xE8	; 232
    13b4:	93 e0       	ldi	r25, 0x03	; 3
    13b6:	81 d2       	rcall	.+1282   	; 0x18ba <SetBeeperFreq>
				StartBeep(40);
    13b8:	88 e2       	ldi	r24, 0x28	; 40
    13ba:	90 e0       	ldi	r25, 0x00	; 0
    13bc:	9e d2       	rcall	.+1340   	; 0x18fa <StartBeep>
			}	
			// Direction control buttons sounds get special processing at processRollControl()
			
			// If any button is pressed, restart power off interval
			if (button_action_down)
    13be:	80 91 ef 00 	lds	r24, 0x00EF
    13c2:	81 11       	cpse	r24, r1
				resetAutoPowerOffCounter();
    13c4:	77 d2       	rcall	.+1262   	; 0x18b4 <resetAutoPowerOffCounter>
			
			//---------- TIMERS ----------//
			
			// Process timers and time counters - it is important to call
			// this function before menu and power controls processing
			processSystemTimers();
    13c6:	0f d2       	rcall	.+1054   	; 0x17e6 <processSystemTimers>

			// Warn user about near auto powering off
			if (sys_timers.flags & AUTOPOFF_SOON)
    13c8:	80 91 8f 00 	lds	r24, 0x008F
    13cc:	83 ff       	sbrs	r24, 3
    13ce:	06 c0       	rjmp	.+12     	; 0x13dc <main+0xba>
			{
				SetBeeperFreq(1200);
    13d0:	80 eb       	ldi	r24, 0xB0	; 176
    13d2:	94 e0       	ldi	r25, 0x04	; 4
    13d4:	72 d2       	rcall	.+1252   	; 0x18ba <SetBeeperFreq>
				StartBeep(200);
    13d6:	88 ec       	ldi	r24, 0xC8	; 200
    13d8:	90 e0       	ldi	r25, 0x00	; 0
    13da:	8f d2       	rcall	.+1310   	; 0x18fa <StartBeep>
			}		
			
			//----------- ADC ------------//
			
			// Get new temperature measurement
			update_normalized_adc();			
    13dc:	ee d7       	rcall	.+4060   	; 0x23ba <__data_load_end+0x7ee>
		
			// Update indicated Celsius degree
			if (sys_timers.flags & EXPIRED_CELSIUS)
    13de:	80 91 8f 00 	lds	r24, 0x008F
    13e2:	80 fd       	sbrc	r24, 0
				update_Celsius();		
    13e4:	66 d7       	rcall	.+3788   	; 0x22b2 <__data_load_end+0x6e6>
			
			//----------- MENU -----------//		
				
			// Process user menu states, settings and indication
			processMenu();
    13e6:	60 de       	rcall	.-832    	; 0x10a8 <processMenu>
			
			//--------- CONTROLS ---------//		
			
			// Process cyclic rolling, direction control
			processRollControl();	
    13e8:	69 d8       	rcall	.-3886   	; 0x4bc <processRollControl>
			
			// Process heater regulation
			processHeaterControl();
    13ea:	70 d9       	rcall	.-3360   	; 0x6cc <processHeaterControl>
		
			// Process heater events and warnings
			processHeaterAlerts();
    13ec:	e3 d9       	rcall	.-3130   	; 0x7b4 <processHeaterAlerts>
			
			
			
			//------- LOG to UART --------//	
			if (sys_timers.flags & EXPIRED_LOG)
    13ee:	80 91 8f 00 	lds	r24, 0x008F
    13f2:	85 ff       	sbrs	r24, 5
    13f4:	c7 cf       	rjmp	.-114    	; 0x1384 <main+0x62>
			{
				
				logU16p(adc_celsius);					// Actual temp Celsius
    13f6:	80 91 66 01 	lds	r24, 0x0166
    13fa:	90 91 67 01 	lds	r25, 0x0167
    13fe:	48 df       	rcall	.-368    	; 0x1290 <logU16p>
				logU16p(adc_oversampled);				// Actual temp (ADC), oversampled
    1400:	80 91 21 01 	lds	r24, 0x0121
    1404:	90 91 22 01 	lds	r25, 0x0122
    1408:	43 df       	rcall	.-378    	; 0x1290 <logU16p>
				logU16p(adc_filtered);					// Actual temp (ADC), oversampled, filtered
    140a:	80 91 1f 01 	lds	r24, 0x011F
    140e:	90 91 20 01 	lds	r25, 0x0120
    1412:	3e df       	rcall	.-388    	; 0x1290 <logU16p>
				USART_sendstr("    ");
    1414:	87 ec       	ldi	r24, 0xC7	; 199
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	c1 d2       	rcall	.+1410   	; 0x199c <USART_sendstr>
				
				logU16p(dbg_SetPointPID);				// Temp setting, as input to PID
    141a:	80 91 ad 01 	lds	r24, 0x01AD
    141e:	90 91 ae 01 	lds	r25, 0x01AE
    1422:	36 df       	rcall	.-404    	; 0x1290 <logU16p>
				logU16p(dbg_RealTempPID);				// Real temp, sampled for PID input
    1424:	80 91 9f 01 	lds	r24, 0x019F
    1428:	90 91 a0 01 	lds	r25, 0x01A0
    142c:	31 df       	rcall	.-414    	; 0x1290 <logU16p>
				
				logI32p(dbg_PID_p_term);				// p term
    142e:	60 91 9d 01 	lds	r22, 0x019D
    1432:	70 91 9e 01 	lds	r23, 0x019E
    1436:	88 27       	eor	r24, r24
    1438:	77 fd       	sbrc	r23, 7
    143a:	80 95       	com	r24
    143c:	98 2f       	mov	r25, r24
    143e:	0d df       	rcall	.-486    	; 0x125a <logI32p>
				logI32p(dbg_PID_d_term);				// d term
    1440:	60 91 ab 01 	lds	r22, 0x01AB
    1444:	70 91 ac 01 	lds	r23, 0x01AC
    1448:	88 27       	eor	r24, r24
    144a:	77 fd       	sbrc	r23, 7
    144c:	80 95       	com	r24
    144e:	98 2f       	mov	r25, r24
    1450:	04 df       	rcall	.-504    	; 0x125a <logI32p>
				logI32p(dbg_PID_i_term);				// i term
    1452:	60 91 a1 01 	lds	r22, 0x01A1
    1456:	70 91 a2 01 	lds	r23, 0x01A2
    145a:	88 27       	eor	r24, r24
    145c:	77 fd       	sbrc	r23, 7
    145e:	80 95       	com	r24
    1460:	98 2f       	mov	r25, r24
    1462:	fb de       	rcall	.-522    	; 0x125a <logI32p>
				USART_sendstr("    ");
    1464:	87 ec       	ldi	r24, 0xC7	; 199
    1466:	90 e0       	ldi	r25, 0x00	; 0
    1468:	99 d2       	rcall	.+1330   	; 0x199c <USART_sendstr>
				
				logU16p(dbg_PID_output);				// PID output
    146a:	80 91 9b 01 	lds	r24, 0x019B
    146e:	90 91 9c 01 	lds	r25, 0x019C
    1472:	0e df       	rcall	.-484    	; 0x1290 <logU16p>
			
				USART_sendstr("\n\r");
    1474:	81 ee       	ldi	r24, 0xE1	; 225
    1476:	90 e0       	ldi	r25, 0x00	; 0
    1478:	91 d2       	rcall	.+1314   	; 0x199c <USART_sendstr>
    147a:	84 cf       	rjmp	.-248    	; 0x1384 <main+0x62>

0000147c <setHeaterPower>:

// User function to control heater intensity
void setHeaterPower(uint16_t value)
{
	// Disable interrupts from analog comparator
	ACSR &= ~(1<<ACIE);
    147c:	43 98       	cbi	0x08, 3	; 8
	// Update value
	heaterPower = (value > HEATER_MAX_POWER) ? HEATER_MAX_POWER : value;
    147e:	9c 01       	movw	r18, r24
    1480:	85 36       	cpi	r24, 0x65	; 101
    1482:	91 05       	cpc	r25, r1
    1484:	10 f0       	brcs	.+4      	; 0x148a <setHeaterPower+0xe>
    1486:	24 e6       	ldi	r18, 0x64	; 100
    1488:	30 e0       	ldi	r19, 0x00	; 0
    148a:	30 93 12 01 	sts	0x0112, r19
    148e:	20 93 11 01 	sts	0x0111, r18
	// Reenable interrupts
	ACSR |= (1<<ACIE);
    1492:	43 9a       	sbi	0x08, 3	; 8
    1494:	08 95       	ret

00001496 <setMotorDirection>:

// User function to control motor rotation
void setMotorDirection(uint8_t dir)
{
	// Disable interrupts from timer0 
	TIMSK &= ~(1<<TOIE0);
    1496:	99 b7       	in	r25, 0x39	; 57
    1498:	9e 7f       	andi	r25, 0xFE	; 254
    149a:	99 bf       	out	0x39, r25	; 57
		
	newDirReq = dir;	// save new direction request
    149c:	80 93 13 01 	sts	0x0113, r24
	dirChangedMask = ~ROLL_DIR_CHANGED;
    14a0:	9f ed       	ldi	r25, 0xDF	; 223
    14a2:	90 93 88 00 	sts	0x0088, r25
	
	if (dir & ROLL_FWD)
    14a6:	80 ff       	sbrs	r24, 0
    14a8:	09 c0       	rjmp	.+18     	; 0x14bc <setMotorDirection+0x26>
		bottomPoint = rollPoint;  
    14aa:	80 91 14 01 	lds	r24, 0x0114
    14ae:	90 91 15 01 	lds	r25, 0x0115
    14b2:	90 93 17 01 	sts	0x0117, r25
    14b6:	80 93 16 01 	sts	0x0116, r24
    14ba:	0a c0       	rjmp	.+20     	; 0x14d0 <setMotorDirection+0x3a>
	else if (dir & ROLL_REV)
    14bc:	81 ff       	sbrs	r24, 1
    14be:	08 c0       	rjmp	.+16     	; 0x14d0 <setMotorDirection+0x3a>
		topPoint = rollPoint;
    14c0:	80 91 14 01 	lds	r24, 0x0114
    14c4:	90 91 15 01 	lds	r25, 0x0115
    14c8:	90 93 19 01 	sts	0x0119, r25
    14cc:	80 93 18 01 	sts	0x0118, r24

	// Enable interrupts from timer 0
	TIMSK |= (1<<TOIE0);	
    14d0:	89 b7       	in	r24, 0x39	; 57
    14d2:	81 60       	ori	r24, 0x01	; 1
    14d4:	89 bf       	out	0x39, r24	; 57
    14d6:	08 95       	ret

000014d8 <stopCycleRolling>:
}

void stopCycleRolling(uint8_t doResetPoints)
{
	// Disable interrupts from timer0 
	TIMSK &= ~(1<<TOIE0);
    14d8:	99 b7       	in	r25, 0x39	; 57
    14da:	9e 7f       	andi	r25, 0xFE	; 254
    14dc:	99 bf       	out	0x39, r25	; 57
	
	rollState &= ~ROLL_CYCLE;
    14de:	90 91 10 01 	lds	r25, 0x0110
    14e2:	9b 7f       	andi	r25, 0xFB	; 251
    14e4:	90 93 10 01 	sts	0x0110, r25
	if (doResetPoints)
    14e8:	88 23       	and	r24, r24
    14ea:	71 f0       	breq	.+28     	; 0x1508 <stopCycleRolling+0x30>
	{
		topPoint = bottomPoint = rollPoint;
    14ec:	80 91 14 01 	lds	r24, 0x0114
    14f0:	90 91 15 01 	lds	r25, 0x0115
    14f4:	90 93 17 01 	sts	0x0117, r25
    14f8:	80 93 16 01 	sts	0x0116, r24
    14fc:	90 93 19 01 	sts	0x0119, r25
    1500:	80 93 18 01 	sts	0x0118, r24
		activeRollCycle = 0;	
    1504:	10 92 0f 01 	sts	0x010F, r1
	}		
	
	// Enable interrupts from timer 0
	TIMSK |= (1<<TOIE0);
    1508:	89 b7       	in	r24, 0x39	; 57
    150a:	81 60       	ori	r24, 0x01	; 1
    150c:	89 bf       	out	0x39, r24	; 57
    150e:	08 95       	ret

00001510 <isTopPointValid>:



uint8_t isTopPointValid(void)
{
	return (	(int16_t)(topPoint - rollPoint) >= 0 );
    1510:	80 91 18 01 	lds	r24, 0x0118
    1514:	90 91 19 01 	lds	r25, 0x0119
    1518:	20 91 14 01 	lds	r18, 0x0114
    151c:	30 91 15 01 	lds	r19, 0x0115
    1520:	82 1b       	sub	r24, r18
    1522:	93 0b       	sbc	r25, r19
    1524:	89 2f       	mov	r24, r25
    1526:	80 95       	com	r24
}
    1528:	88 1f       	adc	r24, r24
    152a:	88 27       	eor	r24, r24
    152c:	88 1f       	adc	r24, r24
    152e:	08 95       	ret

00001530 <isBottomPointValid>:

uint8_t isBottomPointValid(void)
{
	return (	(int16_t)(rollPoint - bottomPoint) >= 0	);
    1530:	80 91 14 01 	lds	r24, 0x0114
    1534:	90 91 15 01 	lds	r25, 0x0115
    1538:	20 91 16 01 	lds	r18, 0x0116
    153c:	30 91 17 01 	lds	r19, 0x0117
    1540:	82 1b       	sub	r24, r18
    1542:	93 0b       	sbc	r25, r19
    1544:	89 2f       	mov	r24, r25
    1546:	80 95       	com	r24
}
    1548:	88 1f       	adc	r24, r24
    154a:	88 27       	eor	r24, r24
    154c:	88 1f       	adc	r24, r24
    154e:	08 95       	ret

00001550 <startCycleRolling>:


uint8_t startCycleRolling(void)
{
	// Disable interrupts from timer0 
	TIMSK &= ~(1<<TOIE0);
    1550:	89 b7       	in	r24, 0x39	; 57
    1552:	8e 7f       	andi	r24, 0xFE	; 254
    1554:	89 bf       	out	0x39, r24	; 57
	
	if ( isTopPointValid() && isBottomPointValid() )
    1556:	dc df       	rcall	.-72     	; 0x1510 <isTopPointValid>
    1558:	88 23       	and	r24, r24
    155a:	59 f0       	breq	.+22     	; 0x1572 <startCycleRolling+0x22>
    155c:	e9 df       	rcall	.-46     	; 0x1530 <isBottomPointValid>
    155e:	88 23       	and	r24, r24
    1560:	41 f0       	breq	.+16     	; 0x1572 <startCycleRolling+0x22>
	{
		rollState |= ROLL_CYCLE;
    1562:	80 91 10 01 	lds	r24, 0x0110
    1566:	84 60       	ori	r24, 0x04	; 4
    1568:	80 93 10 01 	sts	0x0110, r24
		activeRollCycle = 1;
    156c:	81 e0       	ldi	r24, 0x01	; 1
    156e:	80 93 0f 01 	sts	0x010F, r24
	}
	
	// Enable interrupts from timer 0
	TIMSK |= (1<<TOIE0);
    1572:	89 b7       	in	r24, 0x39	; 57
    1574:	81 60       	ori	r24, 0x01	; 1
    1576:	89 bf       	out	0x39, r24	; 57
	
	return (rollState & ROLL_CYCLE);
    1578:	80 91 10 01 	lds	r24, 0x0110
}
    157c:	84 70       	andi	r24, 0x04	; 4
    157e:	08 95       	ret

00001580 <__vector_16>:




ISR(ANA_COMP_vect)
{
    1580:	1f 92       	push	r1
    1582:	0f 92       	push	r0
    1584:	0f b6       	in	r0, 0x3f	; 63
    1586:	0f 92       	push	r0
    1588:	11 24       	eor	r1, r1
    158a:	2f 93       	push	r18
    158c:	3f 93       	push	r19
    158e:	4f 93       	push	r20
    1590:	5f 93       	push	r21
    1592:	8f 93       	push	r24
    1594:	9f 93       	push	r25
	static uint16_t sigma = 0;
	uint16_t delta;
	
	// Once triggered, disable further comparator interrupt
	ACSR &= ~(1<<ACIE);
    1596:	43 98       	cbi	0x08, 3	; 8
	
	// Process heater delta-sigma modulator
	if (sigma >= HEATER_MAX_POWER)
    1598:	40 91 1a 01 	lds	r20, 0x011A
    159c:	50 91 1b 01 	lds	r21, 0x011B
    15a0:	44 36       	cpi	r20, 0x64	; 100
    15a2:	51 05       	cpc	r21, r1
    15a4:	30 f0       	brcs	.+12     	; 0x15b2 <__vector_16+0x32>
	{
		PORTD |= (1<<PD_HEATER | 1<<PD_HEAT_INDIC);
    15a6:	82 b3       	in	r24, 0x12	; 18
    15a8:	80 63       	ori	r24, 0x30	; 48
    15aa:	82 bb       	out	0x12, r24	; 18
		delta = -HEATER_MAX_POWER;	
    15ac:	2c e9       	ldi	r18, 0x9C	; 156
    15ae:	3f ef       	ldi	r19, 0xFF	; 255
    15b0:	03 c0       	rjmp	.+6      	; 0x15b8 <__vector_16+0x38>
	}		
	else
	{
		PORTD &= ~(1<<PD_HEAT_INDIC);
    15b2:	95 98       	cbi	0x12, 5	; 18
		delta = 0;
    15b4:	20 e0       	ldi	r18, 0x00	; 0
    15b6:	30 e0       	ldi	r19, 0x00	; 0
	}
	sigma += delta + heaterPower;	
    15b8:	80 91 11 01 	lds	r24, 0x0111
    15bc:	90 91 12 01 	lds	r25, 0x0112
    15c0:	84 0f       	add	r24, r20
    15c2:	95 1f       	adc	r25, r21
    15c4:	82 0f       	add	r24, r18
    15c6:	93 1f       	adc	r25, r19
    15c8:	90 93 1b 01 	sts	0x011B, r25
    15cc:	80 93 1a 01 	sts	0x011A, r24
	
	// Reprogram timer0
	TCNT0 = 256 - TRIAC_IMPULSE_TIME;		// Triac gate impulse time
    15d0:	86 ef       	ldi	r24, 0xF6	; 246
    15d2:	82 bf       	out	0x32, r24	; 50
	TIFR |= (1<<TOV0);						// Clear interrupt flag
    15d4:	88 b7       	in	r24, 0x38	; 56
    15d6:	81 60       	ori	r24, 0x01	; 1
    15d8:	88 bf       	out	0x38, r24	; 56
	// Modify state	
	p_state &= ~STATE_MASK;					// Start new state machine cycle
    15da:	80 91 87 00 	lds	r24, 0x0087
    15de:	80 7f       	andi	r24, 0xF0	; 240
	p_state ^= HALF_PERIOD_FLAG;			// Toggle flag
    15e0:	80 58       	subi	r24, 0x80	; 128
    15e2:	80 93 87 00 	sts	0x0087, r24
	
}
    15e6:	9f 91       	pop	r25
    15e8:	8f 91       	pop	r24
    15ea:	5f 91       	pop	r21
    15ec:	4f 91       	pop	r20
    15ee:	3f 91       	pop	r19
    15f0:	2f 91       	pop	r18
    15f2:	0f 90       	pop	r0
    15f4:	0f be       	out	0x3f, r0	; 63
    15f6:	0f 90       	pop	r0
    15f8:	1f 90       	pop	r1
    15fa:	18 95       	reti

000015fc <__vector_9>:



ISR(TIMER0_OVF_vect)
{
    15fc:	1f 92       	push	r1
    15fe:	0f 92       	push	r0
    1600:	0f b6       	in	r0, 0x3f	; 63
    1602:	0f 92       	push	r0
    1604:	11 24       	eor	r1, r1
    1606:	2f 93       	push	r18
    1608:	3f 93       	push	r19
    160a:	4f 93       	push	r20
    160c:	5f 93       	push	r21
    160e:	6f 93       	push	r22
    1610:	7f 93       	push	r23
    1612:	8f 93       	push	r24
    1614:	9f 93       	push	r25
    1616:	af 93       	push	r26
    1618:	bf 93       	push	r27
    161a:	ef 93       	push	r30
    161c:	ff 93       	push	r31
	uint8_t temp;
	
	switch(p_state & STATE_MASK)
    161e:	80 91 87 00 	lds	r24, 0x0087
    1622:	8f 70       	andi	r24, 0x0F	; 15
    1624:	81 30       	cpi	r24, 0x01	; 1
    1626:	49 f0       	breq	.+18     	; 0x163a <__vector_9+0x3e>
    1628:	28 f0       	brcs	.+10     	; 0x1634 <__vector_9+0x38>
    162a:	82 30       	cpi	r24, 0x02	; 2
    162c:	49 f0       	breq	.+18     	; 0x1640 <__vector_9+0x44>
    162e:	83 30       	cpi	r24, 0x03	; 3
    1630:	69 f4       	brne	.+26     	; 0x164c <__vector_9+0x50>
    1632:	0b c0       	rjmp	.+22     	; 0x164a <__vector_9+0x4e>
	{
		// TRIAC_IMPULSE_TIME finished
		case 0x00:
			// Turn off heater TRIAC
			PORTD &= ~(1<<PD_HEATER);
    1634:	94 98       	cbi	0x12, 4	; 18
			TCNT0 = 256 - (QUATER_PERIOD_TIME - TRIAC_IMPULSE_TIME);
    1636:	8c eb       	ldi	r24, 0xBC	; 188
    1638:	01 c0       	rjmp	.+2      	; 0x163c <__vector_9+0x40>
			break;
		// QUATER_PERIOD_TIME finished	
		case 0x01:	
			TCNT0 = 256 - (SYNC_IGNORE_TIME - QUATER_PERIOD_TIME);
    163a:	82 ec       	ldi	r24, 0xC2	; 194
    163c:	82 bf       	out	0x32, r24	; 50
			break;	
    163e:	06 c0       	rjmp	.+12     	; 0x164c <__vector_9+0x50>
		// SYNC_IGNORE_TIME finished	
		case 0x02:
			TCNT0 = 256 - SYNC_LOST_TIMEOUT;
    1640:	80 ee       	ldi	r24, 0xE0	; 224
    1642:	82 bf       	out	0x32, r24	; 50
			// Clear flag and enable interrupt from analog comparator
			ACSR |= (1<<ACI);
    1644:	44 9a       	sbi	0x08, 4	; 8
			ACSR |= (1<<ACIE);
    1646:	43 9a       	sbi	0x08, 3	; 8
			break;
    1648:	01 c0       	rjmp	.+2      	; 0x164c <__vector_9+0x50>
		// SYNC_LOST_TIMEOUT finished
		case 0x03:
			// Error - sync is lost. It means that device has been disconnected from AC line.
			// Disable all power-consuming devices like LEDs and save user settings to EEPROM.
			exitPowerOff();
    164a:	17 d9       	rcall	.-3538   	; 0x87a <exitPowerOff>
			// Sync is not present - do nothing
			break;
	}	

	// Full period check
	if ((p_state & (HALF_PERIOD_FLAG | STATE_MASK)) == (HALF_PERIOD_FLAG | 0x01))
    164c:	80 91 87 00 	lds	r24, 0x0087
    1650:	8f 78       	andi	r24, 0x8F	; 143
    1652:	81 38       	cpi	r24, 0x81	; 129
    1654:	09 f0       	breq	.+2      	; 0x1658 <__vector_9+0x5c>
    1656:	81 c0       	rjmp	.+258    	; 0x175a <__vector_9+0x15e>
	{
		// Quater AC line period is done. Update motor controls.
		temp = PORTD;
    1658:	82 b3       	in	r24, 0x12	; 18
		temp &= ~(1<<PD_M1 | 1<<PD_M2);
    165a:	83 7f       	andi	r24, 0xF3	; 243
		if ( rollState & SKIP_CURRENT_MOTOR_CTRL )
    165c:	90 91 10 01 	lds	r25, 0x0110
    1660:	93 ff       	sbrs	r25, 3
    1662:	05 c0       	rjmp	.+10     	; 0x166e <__vector_9+0x72>
		{
			// Direction control changed. Skip current period to allow TRIACs fully close
			rollState &= ~SKIP_CURRENT_MOTOR_CTRL;
    1664:	97 7f       	andi	r25, 0xF7	; 247
    1666:	90 93 10 01 	sts	0x0110, r25
			PORTD = temp; 	
    166a:	82 bb       	out	0x12, r24	; 18
    166c:	76 c0       	rjmp	.+236    	; 0x175a <__vector_9+0x15e>
		}
		else
		{
			// Apply direction control 
			if (rollState & ROLL_FWD)
    166e:	90 ff       	sbrs	r25, 0
    1670:	02 c0       	rjmp	.+4      	; 0x1676 <__vector_9+0x7a>
				temp |= (1<<PD_M1);
    1672:	84 60       	ori	r24, 0x04	; 4
    1674:	02 c0       	rjmp	.+4      	; 0x167a <__vector_9+0x7e>
			else if (rollState & ROLL_REV)
    1676:	91 fd       	sbrc	r25, 1
				temp |= (1<<PD_M2);
    1678:	88 60       	ori	r24, 0x08	; 8
			PORTD = temp; 
    167a:	82 bb       	out	0x12, r24	; 18
// Function to process rolling - sets rotation direction for next period
// Call once per each AC line period
static inline void controlRolling()
{
	// Process cycle rolling
	switch(rollState & (ROLL_FWD | ROLL_REV | ROLL_CYCLE))
    167c:	40 91 10 01 	lds	r20, 0x0110
    1680:	84 2f       	mov	r24, r20
    1682:	87 70       	andi	r24, 0x07	; 7
    1684:	85 30       	cpi	r24, 0x05	; 5
    1686:	19 f0       	breq	.+6      	; 0x168e <__vector_9+0x92>
    1688:	86 30       	cpi	r24, 0x06	; 6
    168a:	e9 f5       	brne	.+122    	; 0x1706 <__vector_9+0x10a>
    168c:	1d c0       	rjmp	.+58     	; 0x16c8 <__vector_9+0xcc>
//---------------------------------------------//
//---------------------------------------------//

static inline uint8_t reachedTopPoint(void)
{
	return (	(int16_t)(topPoint - rollPoint) <= 0 );
    168e:	80 91 18 01 	lds	r24, 0x0118
    1692:	90 91 19 01 	lds	r25, 0x0119
    1696:	20 91 14 01 	lds	r18, 0x0114
    169a:	30 91 15 01 	lds	r19, 0x0115
    169e:	82 1b       	sub	r24, r18
    16a0:	93 0b       	sbc	r25, r19
{
	// Process cycle rolling
	switch(rollState & (ROLL_FWD | ROLL_REV | ROLL_CYCLE))
	{
		case (ROLL_FWD | ROLL_CYCLE):
			if (reachedTopPoint())
    16a2:	18 16       	cp	r1, r24
    16a4:	19 06       	cpc	r1, r25
    16a6:	7c f1       	brlt	.+94     	; 0x1706 <__vector_9+0x10a>
			{
				if (activeRollCycle >= p.rollCycleSet)	
    16a8:	80 91 0f 01 	lds	r24, 0x010F
    16ac:	90 91 98 01 	lds	r25, 0x0198
    16b0:	89 17       	cp	r24, r25
    16b2:	28 f0       	brcs	.+10     	; 0x16be <__vector_9+0xc2>
				{
					// DONE!
					rollState &= ~ROLL_CYCLE;
    16b4:	4b 7f       	andi	r20, 0xFB	; 251
					rollState |= CYCLE_ROLL_DONE;
    16b6:	40 61       	ori	r20, 0x10	; 16
    16b8:	40 93 10 01 	sts	0x0110, r20
    16bc:	24 c0       	rjmp	.+72     	; 0x1706 <__vector_9+0x10a>
				}
				else
				{
					activeRollCycle++;
    16be:	8f 5f       	subi	r24, 0xFF	; 255
    16c0:	80 93 0f 01 	sts	0x010F, r24
					// Change dir	
					newDirReq = ROLL_REV;				
    16c4:	82 e0       	ldi	r24, 0x02	; 2
    16c6:	1d c0       	rjmp	.+58     	; 0x1702 <__vector_9+0x106>
	return (	(int16_t)(topPoint - rollPoint) <= 0 );
}

static inline uint8_t reachedBottomPoint(void)
{
	return (	(int16_t)(rollPoint - bottomPoint) <= 0 );
    16c8:	80 91 14 01 	lds	r24, 0x0114
    16cc:	90 91 15 01 	lds	r25, 0x0115
    16d0:	20 91 16 01 	lds	r18, 0x0116
    16d4:	30 91 17 01 	lds	r19, 0x0117
    16d8:	82 1b       	sub	r24, r18
    16da:	93 0b       	sbc	r25, r19
				}
			}
			break;
		
		case (ROLL_REV | ROLL_CYCLE):	
			if (reachedBottomPoint())
    16dc:	18 16       	cp	r1, r24
    16de:	19 06       	cpc	r1, r25
    16e0:	94 f0       	brlt	.+36     	; 0x1706 <__vector_9+0x10a>
			{
				if (activeRollCycle >= p.rollCycleSet)	
    16e2:	80 91 0f 01 	lds	r24, 0x010F
    16e6:	90 91 98 01 	lds	r25, 0x0198
    16ea:	89 17       	cp	r24, r25
    16ec:	30 f0       	brcs	.+12     	; 0x16fa <__vector_9+0xfe>
				{
					// DONE!
					rollState &= ~ROLL_CYCLE;
    16ee:	84 2f       	mov	r24, r20
    16f0:	8b 7f       	andi	r24, 0xFB	; 251
					rollState |= CYCLE_ROLL_DONE;
    16f2:	80 61       	ori	r24, 0x10	; 16
    16f4:	80 93 10 01 	sts	0x0110, r24
    16f8:	06 c0       	rjmp	.+12     	; 0x1706 <__vector_9+0x10a>
				}
				else
				{
					activeRollCycle++;
    16fa:	8f 5f       	subi	r24, 0xFF	; 255
    16fc:	80 93 0f 01 	sts	0x010F, r24
					// Change dir	
					newDirReq = ROLL_FWD;
    1700:	81 e0       	ldi	r24, 0x01	; 1
    1702:	80 93 13 01 	sts	0x0113, r24
		default:
			break;
	}
	
	// Process direction change
	if ((rollState ^ newDirReq) & (ROLL_FWD | ROLL_REV))
    1706:	20 91 10 01 	lds	r18, 0x0110
    170a:	90 91 13 01 	lds	r25, 0x0113
    170e:	89 2f       	mov	r24, r25
    1710:	82 27       	eor	r24, r18
    1712:	83 70       	andi	r24, 0x03	; 3
    1714:	19 f0       	breq	.+6      	; 0x171c <__vector_9+0x120>
	{
		// ROLL_DIR_CHANGED is used for sound beep
		rollState |= (SKIP_CURRENT_MOTOR_CTRL | ROLL_DIR_CHANGED);
    1716:	28 62       	ori	r18, 0x28	; 40
    1718:	20 93 10 01 	sts	0x0110, r18
	}
	
	rollState &= ~(ROLL_FWD | ROLL_REV);
    171c:	80 91 10 01 	lds	r24, 0x0110
    1720:	8c 7f       	andi	r24, 0xFC	; 252
	rollState |= newDirReq;
    1722:	89 2b       	or	r24, r25
	rollState &= dirChangedMask;
    1724:	90 91 88 00 	lds	r25, 0x0088
    1728:	89 23       	and	r24, r25
    172a:	80 93 10 01 	sts	0x0110, r24
	dirChangedMask = 0xFF;
    172e:	9f ef       	ldi	r25, 0xFF	; 255
    1730:	90 93 88 00 	sts	0x0088, r25
	return (	(int16_t)(rollPoint - bottomPoint) <= 0 );
}

static inline void updateRollPoint(void)
{	
	if (rollState & ROLL_FWD)
    1734:	80 ff       	sbrs	r24, 0
    1736:	06 c0       	rjmp	.+12     	; 0x1744 <__vector_9+0x148>
		rollPoint++;
    1738:	80 91 14 01 	lds	r24, 0x0114
    173c:	90 91 15 01 	lds	r25, 0x0115
    1740:	01 96       	adiw	r24, 0x01	; 1
    1742:	07 c0       	rjmp	.+14     	; 0x1752 <__vector_9+0x156>
	else if (rollState & ROLL_REV)
    1744:	81 ff       	sbrs	r24, 1
    1746:	09 c0       	rjmp	.+18     	; 0x175a <__vector_9+0x15e>
		rollPoint--;	
    1748:	80 91 14 01 	lds	r24, 0x0114
    174c:	90 91 15 01 	lds	r25, 0x0115
    1750:	01 97       	sbiw	r24, 0x01	; 1
    1752:	90 93 15 01 	sts	0x0115, r25
    1756:	80 93 14 01 	sts	0x0114, r24
			controlRolling();
		}
	}
	
	
	if ((p_state & STATE_MASK)  != 0x0F)
    175a:	80 91 87 00 	lds	r24, 0x0087
    175e:	98 2f       	mov	r25, r24
    1760:	9f 70       	andi	r25, 0x0F	; 15
    1762:	9f 30       	cpi	r25, 0x0F	; 15
    1764:	19 f0       	breq	.+6      	; 0x176c <__vector_9+0x170>
		p_state++;
    1766:	8f 5f       	subi	r24, 0xFF	; 255
    1768:	80 93 87 00 	sts	0x0087, r24
}	
    176c:	ff 91       	pop	r31
    176e:	ef 91       	pop	r30
    1770:	bf 91       	pop	r27
    1772:	af 91       	pop	r26
    1774:	9f 91       	pop	r25
    1776:	8f 91       	pop	r24
    1778:	7f 91       	pop	r23
    177a:	6f 91       	pop	r22
    177c:	5f 91       	pop	r21
    177e:	4f 91       	pop	r20
    1780:	3f 91       	pop	r19
    1782:	2f 91       	pop	r18
    1784:	0f 90       	pop	r0
    1786:	0f be       	out	0x3f, r0	; 63
    1788:	0f 90       	pop	r0
    178a:	1f 90       	pop	r1
    178c:	18 95       	reti

0000178e <processSoftTimer8b>:
 
 
 
 
 void processSoftTimer8b(SoftTimer8b_t *tmr)
 {
    178e:	fc 01       	movw	r30, r24
	 uint8_t newTimerVal;

	 if (!tmr->Enabled)
    1790:	90 81       	ld	r25, Z
    1792:	90 ff       	sbrs	r25, 0
    1794:	27 c0       	rjmp	.+78     	; 0x17e4 <processSoftTimer8b+0x56>
		return;
	 
	 tmr->FA_EQ = 0;
	 tmr->FA_GE = 0;
	 tmr->FTop = 0;
    1796:	97 7e       	andi	r25, 0xE7	; 231
    1798:	9f 7d       	andi	r25, 0xDF	; 223
    179a:	90 83       	st	Z, r25
	 
	 if (tmr->Timer >= tmr->Top)
    179c:	81 81       	ldd	r24, Z+1	; 0x01
    179e:	22 81       	ldd	r18, Z+2	; 0x02
    17a0:	82 17       	cp	r24, r18
    17a2:	50 f0       	brcs	.+20     	; 0x17b8 <processSoftTimer8b+0x2a>
	 {
		 if (tmr->RunOnce)
    17a4:	91 ff       	sbrs	r25, 1
    17a6:	02 c0       	rjmp	.+4      	; 0x17ac <processSoftTimer8b+0x1e>
		 {
			 tmr->Enabled = 0;
    17a8:	9e 7f       	andi	r25, 0xFE	; 254
    17aa:	90 83       	st	Z, r25
		 }
		 tmr->FTop = 1;
    17ac:	90 81       	ld	r25, Z
		 tmr->FOvfl = 1;
    17ae:	90 62       	ori	r25, 0x20	; 32
    17b0:	90 64       	ori	r25, 0x40	; 64
    17b2:	90 83       	st	Z, r25
		 newTimerVal = 0;
    17b4:	20 e0       	ldi	r18, 0x00	; 0
    17b6:	02 c0       	rjmp	.+4      	; 0x17bc <processSoftTimer8b+0x2e>
	 }
	 else
	 {
		 newTimerVal = tmr->Timer + 1;
    17b8:	28 2f       	mov	r18, r24
    17ba:	2f 5f       	subi	r18, 0xFF	; 255
	 }
	 
	 if (tmr->Timer == tmr->CompA)
    17bc:	93 81       	ldd	r25, Z+3	; 0x03
    17be:	89 13       	cpse	r24, r25
    17c0:	0b c0       	rjmp	.+22     	; 0x17d8 <processSoftTimer8b+0x4a>
	 {
		 tmr->FA_EQ = 1;
    17c2:	80 81       	ld	r24, Z
		 tmr->FA_GE = 1;
    17c4:	88 60       	ori	r24, 0x08	; 8
    17c6:	80 61       	ori	r24, 0x10	; 16
		 tmr->FA_TGL = !tmr->FA_TGL;
    17c8:	82 fb       	bst	r24, 2
    17ca:	99 27       	eor	r25, r25
    17cc:	90 f9       	bld	r25, 0
    17ce:	31 e0       	ldi	r19, 0x01	; 1
    17d0:	93 27       	eor	r25, r19
    17d2:	90 fb       	bst	r25, 0
    17d4:	82 f9       	bld	r24, 2
    17d6:	04 c0       	rjmp	.+8      	; 0x17e0 <processSoftTimer8b+0x52>
	 }
	 else if (tmr->Timer >= tmr->CompA)
    17d8:	89 17       	cp	r24, r25
    17da:	18 f0       	brcs	.+6      	; 0x17e2 <processSoftTimer8b+0x54>
	 {
		 tmr->FA_GE = 1;
    17dc:	80 81       	ld	r24, Z
    17de:	80 61       	ori	r24, 0x10	; 16
    17e0:	80 83       	st	Z, r24
	 }
	 
	 tmr->Timer = newTimerVal; 
    17e2:	21 83       	std	Z+1, r18	; 0x01
    17e4:	08 95       	ret

000017e6 <processSystemTimers>:



void processSystemTimers(void)
{
	sys_timers.flags = 0x00;
    17e6:	10 92 8f 00 	sts	0x008F, r1
	
	// Process Celsius counter
	if (--sys_timers.celsius_upd_counter == 0)
    17ea:	80 91 89 00 	lds	r24, 0x0089
    17ee:	81 50       	subi	r24, 0x01	; 1
    17f0:	80 93 89 00 	sts	0x0089, r24
    17f4:	81 11       	cpse	r24, r1
    17f6:	13 c0       	rjmp	.+38     	; 0x181e <processSystemTimers+0x38>
	{
		sys_timers.celsius_upd_counter = CELSIUS_UDPATE_INTERVAL;
    17f8:	84 e0       	ldi	r24, 0x04	; 4
    17fa:	80 93 89 00 	sts	0x0089, r24
		sys_timers.flags |= EXPIRED_CELSIUS;
    17fe:	81 e0       	ldi	r24, 0x01	; 1
    1800:	80 93 8f 00 	sts	0x008F, r24
		
		// Process PID update counter
		if (--sys_timers.pid_update_counter == 0)
    1804:	80 91 8e 00 	lds	r24, 0x008E
    1808:	81 50       	subi	r24, 0x01	; 1
    180a:	80 93 8e 00 	sts	0x008E, r24
    180e:	81 11       	cpse	r24, r1
    1810:	06 c0       	rjmp	.+12     	; 0x181e <processSystemTimers+0x38>
		{
			sys_timers.pid_update_counter = PID_UPDATE_INTERVAL;
    1812:	8a e0       	ldi	r24, 0x0A	; 10
    1814:	80 93 8e 00 	sts	0x008E, r24
			sys_timers.flags |= UPDATE_PID;
    1818:	81 e4       	ldi	r24, 0x41	; 65
    181a:	80 93 8f 00 	sts	0x008F, r24
		}
	}
	
	// Process log counter
	if (--sys_timers.log_counter == 0)
    181e:	80 91 8d 00 	lds	r24, 0x008D
    1822:	81 50       	subi	r24, 0x01	; 1
    1824:	19 f0       	breq	.+6      	; 0x182c <processSystemTimers+0x46>
    1826:	80 93 8d 00 	sts	0x008D, r24
    182a:	08 c0       	rjmp	.+16     	; 0x183c <processSystemTimers+0x56>
	{
		sys_timers.log_counter = LOG_INTERVAL;
    182c:	82 e0       	ldi	r24, 0x02	; 2
    182e:	80 93 8d 00 	sts	0x008D, r24
		sys_timers.flags |= EXPIRED_LOG;
    1832:	80 91 8f 00 	lds	r24, 0x008F
    1836:	80 62       	ori	r24, 0x20	; 32
    1838:	80 93 8f 00 	sts	0x008F, r24
	}
	
	// Process 10 seconds counter
	if (--sys_timers.counter_10sec == 0)
    183c:	80 91 8a 00 	lds	r24, 0x008A
    1840:	81 50       	subi	r24, 0x01	; 1
    1842:	80 93 8a 00 	sts	0x008A, r24
    1846:	81 11       	cpse	r24, r1
    1848:	34 c0       	rjmp	.+104    	; 0x18b2 <processSystemTimers+0xcc>
	{
		sys_timers.counter_10sec = COUNTER_10SEC_INTERVAL;
    184a:	88 ec       	ldi	r24, 0xC8	; 200
    184c:	80 93 8a 00 	sts	0x008A, r24
		sys_timers.flags |= EXPIRED_10SEC;
    1850:	40 91 8f 00 	lds	r20, 0x008F
    1854:	84 2f       	mov	r24, r20
    1856:	82 60       	ori	r24, 0x02	; 2
    1858:	80 93 8f 00 	sts	0x008F, r24
		
		// Process 1 minute counter
		if (--sys_timers.counter_1min == 0)
    185c:	80 91 8b 00 	lds	r24, 0x008B
    1860:	81 50       	subi	r24, 0x01	; 1
    1862:	80 93 8b 00 	sts	0x008B, r24
    1866:	81 11       	cpse	r24, r1
    1868:	24 c0       	rjmp	.+72     	; 0x18b2 <processSystemTimers+0xcc>
		{
			sys_timers.counter_1min = COUNTER_1MIN_INTERVAL;
    186a:	86 e0       	ldi	r24, 0x06	; 6
    186c:	80 93 8b 00 	sts	0x008B, r24
			sys_timers.flags |= EXPIRED_1MIN;
    1870:	84 2f       	mov	r24, r20
    1872:	86 60       	ori	r24, 0x06	; 6
    1874:	80 93 8f 00 	sts	0x008F, r24
			
			// Process auto power off counter
			if (sys_timers.poff_counter != MAX_POWEROFF_TIMEOUT - 1)
    1878:	80 91 8c 00 	lds	r24, 0x008C
    187c:	8e 35       	cpi	r24, 0x5E	; 94
    187e:	19 f0       	breq	.+6      	; 0x1886 <processSystemTimers+0xa0>
				sys_timers.poff_counter++;
    1880:	8f 5f       	subi	r24, 0xFF	; 255
    1882:	80 93 8c 00 	sts	0x008C, r24
			if (sys_timers.poff_counter == p.power_off_timeout - 1)
    1886:	60 91 8c 00 	lds	r22, 0x008C
    188a:	50 91 9a 01 	lds	r21, 0x019A
    188e:	26 2f       	mov	r18, r22
    1890:	30 e0       	ldi	r19, 0x00	; 0
    1892:	85 2f       	mov	r24, r21
    1894:	90 e0       	ldi	r25, 0x00	; 0
    1896:	01 97       	sbiw	r24, 0x01	; 1
    1898:	28 17       	cp	r18, r24
    189a:	39 07       	cpc	r19, r25
    189c:	19 f4       	brne	.+6      	; 0x18a4 <processSystemTimers+0xbe>
				sys_timers.flags |= AUTOPOFF_SOON;
    189e:	4e 60       	ori	r20, 0x0E	; 14
    18a0:	40 93 8f 00 	sts	0x008F, r20
			if (sys_timers.poff_counter == p.power_off_timeout)
    18a4:	65 13       	cpse	r22, r21
    18a6:	05 c0       	rjmp	.+10     	; 0x18b2 <processSystemTimers+0xcc>
				sys_timers.flags |= AUTOPOFF_EXPIRED;			
    18a8:	80 91 8f 00 	lds	r24, 0x008F
    18ac:	80 61       	ori	r24, 0x10	; 16
    18ae:	80 93 8f 00 	sts	0x008F, r24
    18b2:	08 95       	ret

000018b4 <resetAutoPowerOffCounter>:
}


void resetAutoPowerOffCounter(void)
{
	sys_timers.poff_counter = 0;
    18b4:	10 92 8c 00 	sts	0x008C, r1
    18b8:	08 95       	ret

000018ba <SetBeeperFreq>:
}

// Setup beeper frequency (Hz)
void SetBeeperFreq(uint16_t freq_hz)
{
	uint16_t period_us = 1000000 / freq_hz;
    18ba:	9c 01       	movw	r18, r24
    18bc:	40 e0       	ldi	r20, 0x00	; 0
    18be:	50 e0       	ldi	r21, 0x00	; 0
    18c0:	60 e4       	ldi	r22, 0x40	; 64
    18c2:	72 e4       	ldi	r23, 0x42	; 66
    18c4:	8f e0       	ldi	r24, 0x0F	; 15
    18c6:	90 e0       	ldi	r25, 0x00	; 0
    18c8:	ae d0       	rcall	.+348    	; 0x1a26 <__divmodsi4>
	if (period_us & 0xFFF8)
    18ca:	da 01       	movw	r26, r20
    18cc:	c9 01       	movw	r24, r18
    18ce:	88 7f       	andi	r24, 0xF8	; 248
    18d0:	aa 27       	eor	r26, r26
    18d2:	bb 27       	eor	r27, r27
    18d4:	89 2b       	or	r24, r25
    18d6:	51 f0       	breq	.+20     	; 0x18ec <SetBeeperFreq+0x32>
		OCR1A = (period_us>>3) - 1;
    18d8:	43 e0       	ldi	r20, 0x03	; 3
    18da:	36 95       	lsr	r19
    18dc:	27 95       	ror	r18
    18de:	4a 95       	dec	r20
    18e0:	e1 f7       	brne	.-8      	; 0x18da <SetBeeperFreq+0x20>
    18e2:	21 50       	subi	r18, 0x01	; 1
    18e4:	31 09       	sbc	r19, r1
    18e6:	3b bd       	out	0x2b, r19	; 43
    18e8:	2a bd       	out	0x2a, r18	; 42
    18ea:	04 c0       	rjmp	.+8      	; 0x18f4 <SetBeeperFreq+0x3a>
	else
		OCR1A = 0x1;
    18ec:	81 e0       	ldi	r24, 0x01	; 1
    18ee:	90 e0       	ldi	r25, 0x00	; 0
    18f0:	9b bd       	out	0x2b, r25	; 43
    18f2:	8a bd       	out	0x2a, r24	; 42
	TCNT1 = 0;
    18f4:	1d bc       	out	0x2d, r1	; 45
    18f6:	1c bc       	out	0x2c, r1	; 44
    18f8:	08 95       	ret

000018fa <StartBeep>:
}

// Beep for some time in ms
void StartBeep(uint16_t time_ms)
{
	if ( (p.sound_enable) || (enableOverride) )
    18fa:	20 91 99 01 	lds	r18, 0x0199
    18fe:	21 11       	cpse	r18, r1
    1900:	04 c0       	rjmp	.+8      	; 0x190a <StartBeep+0x10>
    1902:	20 91 1c 01 	lds	r18, 0x011C
    1906:	22 23       	and	r18, r18
    1908:	39 f0       	breq	.+14     	; 0x1918 <StartBeep+0x1e>
	{
		beep_cnt = time_ms;
    190a:	90 93 1e 01 	sts	0x011E, r25
    190e:	80 93 1d 01 	sts	0x011D, r24
// Enable / disable beeper output
inline void SetBeepOutput(uint8_t val)
{
	if (val)
		// Toggle OCR1A on compare match
		TCCR1A |= (1<<COM1A0);
    1912:	8f b5       	in	r24, 0x2f	; 47
    1914:	80 64       	ori	r24, 0x40	; 64
    1916:	8f bd       	out	0x2f, r24	; 47
	if ( (p.sound_enable) || (enableOverride) )
	{
		beep_cnt = time_ms;
		SetBeepOutput(1);		
	}
	enableOverride = 0;
    1918:	10 92 1c 01 	sts	0x011C, r1
    191c:	08 95       	ret

0000191e <OverrideSoundDisable>:
}

void OverrideSoundDisable(void)
{
	enableOverride = 1;
    191e:	81 e0       	ldi	r24, 0x01	; 1
    1920:	80 93 1c 01 	sts	0x011C, r24
    1924:	08 95       	ret

00001926 <__vector_3>:




ISR(TIMER2_COMP_vect)
{	
    1926:	1f 92       	push	r1
    1928:	0f 92       	push	r0
    192a:	0f b6       	in	r0, 0x3f	; 63
    192c:	0f 92       	push	r0
    192e:	11 24       	eor	r1, r1
    1930:	2f 93       	push	r18
    1932:	3f 93       	push	r19
    1934:	4f 93       	push	r20
    1936:	5f 93       	push	r21
    1938:	6f 93       	push	r22
    193a:	7f 93       	push	r23
    193c:	8f 93       	push	r24
    193e:	9f 93       	push	r25
    1940:	af 93       	push	r26
    1942:	bf 93       	push	r27
    1944:	ef 93       	push	r30
    1946:	ff 93       	push	r31
	
	// Manage beeper
	if (beep_cnt)
    1948:	80 91 1d 01 	lds	r24, 0x011D
    194c:	90 91 1e 01 	lds	r25, 0x011E
    1950:	00 97       	sbiw	r24, 0x00	; 0
    1952:	31 f0       	breq	.+12     	; 0x1960 <__vector_3+0x3a>
		beep_cnt--;
    1954:	01 97       	sbiw	r24, 0x01	; 1
    1956:	90 93 1e 01 	sts	0x011E, r25
    195a:	80 93 1d 01 	sts	0x011D, r24
    195e:	03 c0       	rjmp	.+6      	; 0x1966 <__vector_3+0x40>
	if (val)
		// Toggle OCR1A on compare match
		TCCR1A |= (1<<COM1A0);
	else
		// Disable OCR1A output
		TCCR1A &= ~(1<<COM1A0 | 1<<COM1A1);
    1960:	8f b5       	in	r24, 0x2f	; 47
    1962:	8f 73       	andi	r24, 0x3F	; 63
    1964:	8f bd       	out	0x2f, r24	; 47
		beep_cnt--;
	else
		SetBeepOutput(0);	// done
	
	// Manage LED indicator
	processLedIndicator();
    1966:	be d7       	rcall	.+3964   	; 0x28e4 <__data_load_end+0xd18>
	
	// Process menu update timer
	processSoftTimer8b(&menuUpdateTimer);	
    1968:	80 e9       	ldi	r24, 0x90	; 144
    196a:	90 e0       	ldi	r25, 0x00	; 0
    196c:	10 df       	rcall	.-480    	; 0x178e <processSoftTimer8b>
	
	// Start ADC conversion 
	ADCSRA |= (1<<ADSC);
    196e:	36 9a       	sbi	0x06, 6	; 6
	
}
    1970:	ff 91       	pop	r31
    1972:	ef 91       	pop	r30
    1974:	bf 91       	pop	r27
    1976:	af 91       	pop	r26
    1978:	9f 91       	pop	r25
    197a:	8f 91       	pop	r24
    197c:	7f 91       	pop	r23
    197e:	6f 91       	pop	r22
    1980:	5f 91       	pop	r21
    1982:	4f 91       	pop	r20
    1984:	3f 91       	pop	r19
    1986:	2f 91       	pop	r18
    1988:	0f 90       	pop	r0
    198a:	0f be       	out	0x3f, r0	; 63
    198c:	0f 90       	pop	r0
    198e:	1f 90       	pop	r1
    1990:	18 95       	reti

00001992 <USART_send>:



void USART_send( uint8_t data )
{
	UCSRA |= (1<<TXC);                 // Clear flag
    1992:	5e 9a       	sbi	0x0b, 6	; 11
	UDR = data;
    1994:	8c b9       	out	0x0c, r24	; 12
	while ( !(UCSRA & (1<<TXC)) );  // Wait
    1996:	5e 9b       	sbis	0x0b, 6	; 11
    1998:	fe cf       	rjmp	.-4      	; 0x1996 <USART_send+0x4>
}
    199a:	08 95       	ret

0000199c <USART_sendstr>:


void USART_sendstr(char* str)
{
    199c:	1f 93       	push	r17
    199e:	cf 93       	push	r28
    19a0:	df 93       	push	r29
    19a2:	ec 01       	movw	r28, r24
	uint8_t i = 0;
    19a4:	10 e0       	ldi	r17, 0x00	; 0
	while (str[i])
    19a6:	02 c0       	rjmp	.+4      	; 0x19ac <USART_sendstr+0x10>
	{
		USART_send(str[i++]);
    19a8:	1f 5f       	subi	r17, 0xFF	; 255
    19aa:	f3 df       	rcall	.-26     	; 0x1992 <USART_send>


void USART_sendstr(char* str)
{
	uint8_t i = 0;
	while (str[i])
    19ac:	fe 01       	movw	r30, r28
    19ae:	e1 0f       	add	r30, r17
    19b0:	f1 1d       	adc	r31, r1
    19b2:	80 81       	ld	r24, Z
    19b4:	81 11       	cpse	r24, r1
    19b6:	f8 cf       	rjmp	.-16     	; 0x19a8 <USART_sendstr+0xc>
	{
		USART_send(str[i++]);
	}
}
    19b8:	df 91       	pop	r29
    19ba:	cf 91       	pop	r28
    19bc:	1f 91       	pop	r17
    19be:	08 95       	ret

000019c0 <__udivmodqi4>:
    19c0:	99 1b       	sub	r25, r25
    19c2:	79 e0       	ldi	r23, 0x09	; 9
    19c4:	04 c0       	rjmp	.+8      	; 0x19ce <__udivmodqi4_ep>

000019c6 <__udivmodqi4_loop>:
    19c6:	99 1f       	adc	r25, r25
    19c8:	96 17       	cp	r25, r22
    19ca:	08 f0       	brcs	.+2      	; 0x19ce <__udivmodqi4_ep>
    19cc:	96 1b       	sub	r25, r22

000019ce <__udivmodqi4_ep>:
    19ce:	88 1f       	adc	r24, r24
    19d0:	7a 95       	dec	r23
    19d2:	c9 f7       	brne	.-14     	; 0x19c6 <__udivmodqi4_loop>
    19d4:	80 95       	com	r24
    19d6:	08 95       	ret

000019d8 <__udivmodhi4>:
    19d8:	aa 1b       	sub	r26, r26
    19da:	bb 1b       	sub	r27, r27
    19dc:	51 e1       	ldi	r21, 0x11	; 17
    19de:	07 c0       	rjmp	.+14     	; 0x19ee <__udivmodhi4_ep>

000019e0 <__udivmodhi4_loop>:
    19e0:	aa 1f       	adc	r26, r26
    19e2:	bb 1f       	adc	r27, r27
    19e4:	a6 17       	cp	r26, r22
    19e6:	b7 07       	cpc	r27, r23
    19e8:	10 f0       	brcs	.+4      	; 0x19ee <__udivmodhi4_ep>
    19ea:	a6 1b       	sub	r26, r22
    19ec:	b7 0b       	sbc	r27, r23

000019ee <__udivmodhi4_ep>:
    19ee:	88 1f       	adc	r24, r24
    19f0:	99 1f       	adc	r25, r25
    19f2:	5a 95       	dec	r21
    19f4:	a9 f7       	brne	.-22     	; 0x19e0 <__udivmodhi4_loop>
    19f6:	80 95       	com	r24
    19f8:	90 95       	com	r25
    19fa:	bc 01       	movw	r22, r24
    19fc:	cd 01       	movw	r24, r26
    19fe:	08 95       	ret

00001a00 <__divmodhi4>:
    1a00:	97 fb       	bst	r25, 7
    1a02:	07 2e       	mov	r0, r23
    1a04:	16 f4       	brtc	.+4      	; 0x1a0a <__divmodhi4+0xa>
    1a06:	00 94       	com	r0
    1a08:	06 d0       	rcall	.+12     	; 0x1a16 <__divmodhi4_neg1>
    1a0a:	77 fd       	sbrc	r23, 7
    1a0c:	08 d0       	rcall	.+16     	; 0x1a1e <__divmodhi4_neg2>
    1a0e:	e4 df       	rcall	.-56     	; 0x19d8 <__udivmodhi4>
    1a10:	07 fc       	sbrc	r0, 7
    1a12:	05 d0       	rcall	.+10     	; 0x1a1e <__divmodhi4_neg2>
    1a14:	3e f4       	brtc	.+14     	; 0x1a24 <__divmodhi4_exit>

00001a16 <__divmodhi4_neg1>:
    1a16:	90 95       	com	r25
    1a18:	81 95       	neg	r24
    1a1a:	9f 4f       	sbci	r25, 0xFF	; 255
    1a1c:	08 95       	ret

00001a1e <__divmodhi4_neg2>:
    1a1e:	70 95       	com	r23
    1a20:	61 95       	neg	r22
    1a22:	7f 4f       	sbci	r23, 0xFF	; 255

00001a24 <__divmodhi4_exit>:
    1a24:	08 95       	ret

00001a26 <__divmodsi4>:
    1a26:	05 2e       	mov	r0, r21
    1a28:	97 fb       	bst	r25, 7
    1a2a:	16 f4       	brtc	.+4      	; 0x1a30 <__divmodsi4+0xa>
    1a2c:	00 94       	com	r0
    1a2e:	06 d0       	rcall	.+12     	; 0x1a3c <__divmodsi4_neg1>
    1a30:	57 fd       	sbrc	r21, 7
    1a32:	0c d0       	rcall	.+24     	; 0x1a4c <__divmodsi4_neg2>
    1a34:	35 d0       	rcall	.+106    	; 0x1aa0 <__udivmodsi4>
    1a36:	07 fc       	sbrc	r0, 7
    1a38:	09 d0       	rcall	.+18     	; 0x1a4c <__divmodsi4_neg2>
    1a3a:	7e f4       	brtc	.+30     	; 0x1a5a <__divmodsi4_exit>

00001a3c <__divmodsi4_neg1>:
    1a3c:	90 95       	com	r25
    1a3e:	80 95       	com	r24
    1a40:	70 95       	com	r23
    1a42:	61 95       	neg	r22
    1a44:	7f 4f       	sbci	r23, 0xFF	; 255
    1a46:	8f 4f       	sbci	r24, 0xFF	; 255
    1a48:	9f 4f       	sbci	r25, 0xFF	; 255
    1a4a:	08 95       	ret

00001a4c <__divmodsi4_neg2>:
    1a4c:	50 95       	com	r21
    1a4e:	40 95       	com	r20
    1a50:	30 95       	com	r19
    1a52:	21 95       	neg	r18
    1a54:	3f 4f       	sbci	r19, 0xFF	; 255
    1a56:	4f 4f       	sbci	r20, 0xFF	; 255
    1a58:	5f 4f       	sbci	r21, 0xFF	; 255

00001a5a <__divmodsi4_exit>:
    1a5a:	08 95       	ret

00001a5c <__mulhisi3>:
    1a5c:	05 d0       	rcall	.+10     	; 0x1a68 <__umulhisi3>
    1a5e:	33 23       	and	r19, r19
    1a60:	12 f4       	brpl	.+4      	; 0x1a66 <__mulhisi3+0xa>
    1a62:	8a 1b       	sub	r24, r26
    1a64:	9b 0b       	sbc	r25, r27
    1a66:	0d c0       	rjmp	.+26     	; 0x1a82 <__usmulhisi3_tail>

00001a68 <__umulhisi3>:
    1a68:	a2 9f       	mul	r26, r18
    1a6a:	b0 01       	movw	r22, r0
    1a6c:	b3 9f       	mul	r27, r19
    1a6e:	c0 01       	movw	r24, r0
    1a70:	a3 9f       	mul	r26, r19
    1a72:	01 d0       	rcall	.+2      	; 0x1a76 <__umulhisi3+0xe>
    1a74:	b2 9f       	mul	r27, r18
    1a76:	70 0d       	add	r23, r0
    1a78:	81 1d       	adc	r24, r1
    1a7a:	11 24       	eor	r1, r1
    1a7c:	91 1d       	adc	r25, r1
    1a7e:	08 95       	ret

00001a80 <__usmulhisi3>:
    1a80:	f3 df       	rcall	.-26     	; 0x1a68 <__umulhisi3>

00001a82 <__usmulhisi3_tail>:
    1a82:	b7 ff       	sbrs	r27, 7
    1a84:	08 95       	ret
    1a86:	82 1b       	sub	r24, r18
    1a88:	93 0b       	sbc	r25, r19
    1a8a:	08 95       	ret

00001a8c <__muluhisi3>:
    1a8c:	ed df       	rcall	.-38     	; 0x1a68 <__umulhisi3>
    1a8e:	a5 9f       	mul	r26, r21
    1a90:	90 0d       	add	r25, r0
    1a92:	b4 9f       	mul	r27, r20
    1a94:	90 0d       	add	r25, r0
    1a96:	a4 9f       	mul	r26, r20
    1a98:	80 0d       	add	r24, r0
    1a9a:	91 1d       	adc	r25, r1
    1a9c:	11 24       	eor	r1, r1
    1a9e:	08 95       	ret

00001aa0 <__udivmodsi4>:
    1aa0:	a1 e2       	ldi	r26, 0x21	; 33
    1aa2:	1a 2e       	mov	r1, r26
    1aa4:	aa 1b       	sub	r26, r26
    1aa6:	bb 1b       	sub	r27, r27
    1aa8:	fd 01       	movw	r30, r26
    1aaa:	0d c0       	rjmp	.+26     	; 0x1ac6 <__udivmodsi4_ep>

00001aac <__udivmodsi4_loop>:
    1aac:	aa 1f       	adc	r26, r26
    1aae:	bb 1f       	adc	r27, r27
    1ab0:	ee 1f       	adc	r30, r30
    1ab2:	ff 1f       	adc	r31, r31
    1ab4:	a2 17       	cp	r26, r18
    1ab6:	b3 07       	cpc	r27, r19
    1ab8:	e4 07       	cpc	r30, r20
    1aba:	f5 07       	cpc	r31, r21
    1abc:	20 f0       	brcs	.+8      	; 0x1ac6 <__udivmodsi4_ep>
    1abe:	a2 1b       	sub	r26, r18
    1ac0:	b3 0b       	sbc	r27, r19
    1ac2:	e4 0b       	sbc	r30, r20
    1ac4:	f5 0b       	sbc	r31, r21

00001ac6 <__udivmodsi4_ep>:
    1ac6:	66 1f       	adc	r22, r22
    1ac8:	77 1f       	adc	r23, r23
    1aca:	88 1f       	adc	r24, r24
    1acc:	99 1f       	adc	r25, r25
    1ace:	1a 94       	dec	r1
    1ad0:	69 f7       	brne	.-38     	; 0x1aac <__udivmodsi4_loop>
    1ad2:	60 95       	com	r22
    1ad4:	70 95       	com	r23
    1ad6:	80 95       	com	r24
    1ad8:	90 95       	com	r25
    1ada:	9b 01       	movw	r18, r22
    1adc:	ac 01       	movw	r20, r24
    1ade:	bd 01       	movw	r22, r26
    1ae0:	cf 01       	movw	r24, r30
    1ae2:	08 95       	ret

00001ae4 <__eerd_block_m8>:
    1ae4:	dc 01       	movw	r26, r24
    1ae6:	cb 01       	movw	r24, r22

00001ae8 <__eerd_blraw_m8>:
    1ae8:	fc 01       	movw	r30, r24
    1aea:	e1 99       	sbic	0x1c, 1	; 28
    1aec:	fe cf       	rjmp	.-4      	; 0x1aea <__eerd_blraw_m8+0x2>
    1aee:	06 c0       	rjmp	.+12     	; 0x1afc <__eerd_blraw_m8+0x14>
    1af0:	ff bb       	out	0x1f, r31	; 31
    1af2:	ee bb       	out	0x1e, r30	; 30
    1af4:	e0 9a       	sbi	0x1c, 0	; 28
    1af6:	31 96       	adiw	r30, 0x01	; 1
    1af8:	0d b2       	in	r0, 0x1d	; 29
    1afa:	0d 92       	st	X+, r0
    1afc:	41 50       	subi	r20, 0x01	; 1
    1afe:	50 40       	sbci	r21, 0x00	; 0
    1b00:	b8 f7       	brcc	.-18     	; 0x1af0 <__eerd_blraw_m8+0x8>
    1b02:	08 95       	ret

00001b04 <__eeupd_block_m8>:
    1b04:	dc 01       	movw	r26, r24
    1b06:	a4 0f       	add	r26, r20
    1b08:	b5 1f       	adc	r27, r21
    1b0a:	41 50       	subi	r20, 0x01	; 1
    1b0c:	50 40       	sbci	r21, 0x00	; 0
    1b0e:	40 f0       	brcs	.+16     	; 0x1b20 <__eeupd_block_m8+0x1c>
    1b10:	cb 01       	movw	r24, r22
    1b12:	84 0f       	add	r24, r20
    1b14:	95 1f       	adc	r25, r21
    1b16:	2e 91       	ld	r18, -X
    1b18:	05 d0       	rcall	.+10     	; 0x1b24 <__eeupd_r18_m8>
    1b1a:	41 50       	subi	r20, 0x01	; 1
    1b1c:	50 40       	sbci	r21, 0x00	; 0
    1b1e:	d8 f7       	brcc	.-10     	; 0x1b16 <__eeupd_block_m8+0x12>
    1b20:	08 95       	ret

00001b22 <__eeupd_byte_m8>:
    1b22:	26 2f       	mov	r18, r22

00001b24 <__eeupd_r18_m8>:
    1b24:	e1 99       	sbic	0x1c, 1	; 28
    1b26:	fe cf       	rjmp	.-4      	; 0x1b24 <__eeupd_r18_m8>
    1b28:	9f bb       	out	0x1f, r25	; 31
    1b2a:	8e bb       	out	0x1e, r24	; 30
    1b2c:	e0 9a       	sbi	0x1c, 0	; 28
    1b2e:	01 97       	sbiw	r24, 0x01	; 1
    1b30:	0d b2       	in	r0, 0x1d	; 29
    1b32:	02 16       	cp	r0, r18
    1b34:	31 f0       	breq	.+12     	; 0x1b42 <__eeupd_r18_m8+0x1e>
    1b36:	2d bb       	out	0x1d, r18	; 29
    1b38:	0f b6       	in	r0, 0x3f	; 63
    1b3a:	f8 94       	cli
    1b3c:	e2 9a       	sbi	0x1c, 2	; 28
    1b3e:	e1 9a       	sbi	0x1c, 1	; 28
    1b40:	0f be       	out	0x3f, r0	; 63
    1b42:	08 95       	ret

00001b44 <_exit>:
    1b44:	f8 94       	cli

00001b46 <__stop_program>:
    1b46:	ff cf       	rjmp	.-2      	; 0x1b46 <__stop_program>
