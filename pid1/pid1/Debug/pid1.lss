
pid1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001ac4  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000068  00800060  00001ac4  00001b78  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000a2  008000c8  008000c8  00001be0  2**0
                  ALLOC
  3 .eeprom       0000000a  00810000  00810000  00001be0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         000007d4  00000000  00000000  00001bec  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      000000e3  00000000  00000000  000023c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      0000002f  00000000  00000000  000024a3  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 000003f0  00000000  00000000  000024d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00003a26  00000000  00000000  000028c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000138f  00000000  00000000  000062e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000183f  00000000  00000000  00007677  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000930  00000000  00000000  00008eb8  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000fb3  00000000  00000000  000097e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00001bb9  00000000  00000000  0000a79b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000330  00000000  00000000  0000c354  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	93 c0       	rjmp	.+294    	; 0x128 <__ctors_end>
       2:	ad c0       	rjmp	.+346    	; 0x15e <__bad_interrupt>
       4:	ac c0       	rjmp	.+344    	; 0x15e <__bad_interrupt>
       6:	73 cc       	rjmp	.-1818   	; 0xfffff8ee <__eeprom_end+0xff7ef8e4>
       8:	aa c0       	rjmp	.+340    	; 0x15e <__bad_interrupt>
       a:	a9 c0       	rjmp	.+338    	; 0x15e <__bad_interrupt>
       c:	a8 c0       	rjmp	.+336    	; 0x15e <__bad_interrupt>
       e:	a7 c0       	rjmp	.+334    	; 0x15e <__bad_interrupt>
      10:	a6 c0       	rjmp	.+332    	; 0x15e <__bad_interrupt>
      12:	c2 ca       	rjmp	.-2684   	; 0xfffff598 <__eeprom_end+0xff7ef58e>
      14:	a4 c0       	rjmp	.+328    	; 0x15e <__bad_interrupt>
      16:	a3 c0       	rjmp	.+326    	; 0x15e <__bad_interrupt>
      18:	a2 c0       	rjmp	.+324    	; 0x15e <__bad_interrupt>
      1a:	a1 c0       	rjmp	.+322    	; 0x15e <__bad_interrupt>
      1c:	b5 c1       	rjmp	.+874    	; 0x388 <__vector_14>
      1e:	9f c0       	rjmp	.+318    	; 0x15e <__bad_interrupt>
      20:	93 ca       	rjmp	.-2778   	; 0xfffff548 <__eeprom_end+0xff7ef53e>
      22:	9d c0       	rjmp	.+314    	; 0x15e <__bad_interrupt>
      24:	9c c0       	rjmp	.+312    	; 0x15e <__bad_interrupt>

00000026 <menuFunctionSet>:
      26:	01 84 08 9a 06 84 07 03 81 07 35 08 ff 05 02 32     ..........5....2
      36:	08 cb 07 79 07 05 67 07 86 07 00 00 0b 05 06 86     ...y..g.........
      46:	07 13 06 04 67 07 49 06 00 00 0c 05 06 49 06 13     ....g.I......I..
      56:	06 06 6f 07 13 07 00 00 09 05 06 13 07 1c 06 07     ..o.............
      66:	6f 07 c5 06 00 00 0a 05 06 c5 06 1c 06 08 3c 06     o.............<.
      76:	27 06 00 00 0d 2f 06 27 06 00 00 0e 61 07 2b 06     '..../.'....a.+.
      86:	19 06                                               ..

00000088 <menuJumpSet>:
      88:	01 06 00 03 a8 01 00 01 02 40 01 00 02 05 28 02     .........@....(.
      98:	00 01 01 80 03 00 83 01 40 05 00 82 01 00 05 04     ........@.......
      a8:	00 04 68 05 02 00 07 a8 05 00 01 0b 28 0b 00 83     ..h.........(...
      b8:	05 28 04 00 82 01 00 04 04 00 06 68 04 02 00 05     .(.........h....
      c8:	a8 04 00 01 0c 28 0c 00 83 04 28 06 00 82 01 00     .....(....(.....
      d8:	06 04 00 07 68 06 02 00 04 a8 06 00 01 09 00 07     ....h...........
      e8:	00 82 01 00 07 04 00 05 68 07 02 00 06 a8 07 00     ........h.......
      f8:	01 0a 00 09 00 02 06 28 09 00 01 08 14 08 00 83     .......(........
     108:	01 00 0a 00 02 07 28 0a 00 01 0d 14 0d 00 83 01     ......(.........
     118:	00 01 00 40 0e 00 02 00 40 0e 00 0e 76 01 01 00     ...@....@...v...

00000128 <__ctors_end>:
     128:	11 24       	eor	r1, r1
     12a:	1f be       	out	0x3f, r1	; 63
     12c:	cf e5       	ldi	r28, 0x5F	; 95
     12e:	d4 e0       	ldi	r29, 0x04	; 4
     130:	de bf       	out	0x3e, r29	; 62
     132:	cd bf       	out	0x3d, r28	; 61

00000134 <__do_copy_data>:
     134:	10 e0       	ldi	r17, 0x00	; 0
     136:	a0 e6       	ldi	r26, 0x60	; 96
     138:	b0 e0       	ldi	r27, 0x00	; 0
     13a:	e4 ec       	ldi	r30, 0xC4	; 196
     13c:	fa e1       	ldi	r31, 0x1A	; 26
     13e:	02 c0       	rjmp	.+4      	; 0x144 <__do_copy_data+0x10>
     140:	05 90       	lpm	r0, Z+
     142:	0d 92       	st	X+, r0
     144:	a8 3c       	cpi	r26, 0xC8	; 200
     146:	b1 07       	cpc	r27, r17
     148:	d9 f7       	brne	.-10     	; 0x140 <__do_copy_data+0xc>

0000014a <__do_clear_bss>:
     14a:	21 e0       	ldi	r18, 0x01	; 1
     14c:	a8 ec       	ldi	r26, 0xC8	; 200
     14e:	b0 e0       	ldi	r27, 0x00	; 0
     150:	01 c0       	rjmp	.+2      	; 0x154 <.do_clear_bss_start>

00000152 <.do_clear_bss_loop>:
     152:	1d 92       	st	X+, r1

00000154 <.do_clear_bss_start>:
     154:	aa 36       	cpi	r26, 0x6A	; 106
     156:	b2 07       	cpc	r27, r18
     158:	e1 f7       	brne	.-8      	; 0x152 <.do_clear_bss_loop>
     15a:	de d8       	rcall	.-3652   	; 0xfffff318 <__eeprom_end+0xff7ef30e>
     15c:	b1 cc       	rjmp	.-1694   	; 0xfffffac0 <__eeprom_end+0xff7efab6>

0000015e <__bad_interrupt>:
     15e:	50 cf       	rjmp	.-352    	; 0x0 <__vectors>

00000160 <conv_ADC_to_Celsius>:
//---------------------------------------------//
//---------------------------------------------//


uint16_t conv_ADC_to_Celsius(uint16_t adc_value)
{	
     160:	0f 93       	push	r16
     162:	1f 93       	push	r17
	return (uint16_t)(((int32_t)adc_value * k_norm + offset_norm) / (COEFF_SCALE));
     164:	20 91 c8 00 	lds	r18, 0x00C8
     168:	30 91 c9 00 	lds	r19, 0x00C9
     16c:	40 91 ca 00 	lds	r20, 0x00CA
     170:	50 91 cb 00 	lds	r21, 0x00CB
     174:	dc 01       	movw	r26, r24
     176:	8a dc       	rcall	.-1772   	; 0xfffffa8c <__eeprom_end+0xff7efa82>
     178:	00 91 cc 00 	lds	r16, 0x00CC
     17c:	10 91 cd 00 	lds	r17, 0x00CD
     180:	20 91 ce 00 	lds	r18, 0x00CE
     184:	30 91 cf 00 	lds	r19, 0x00CF
     188:	60 0f       	add	r22, r16
     18a:	71 1f       	adc	r23, r17
     18c:	82 1f       	adc	r24, r18
     18e:	93 1f       	adc	r25, r19
     190:	28 ee       	ldi	r18, 0xE8	; 232
     192:	33 e0       	ldi	r19, 0x03	; 3
     194:	40 e0       	ldi	r20, 0x00	; 0
     196:	50 e0       	ldi	r21, 0x00	; 0
     198:	4c dc       	rcall	.-1896   	; 0xfffffa32 <__eeprom_end+0xff7efa28>
}
     19a:	c9 01       	movw	r24, r18
     19c:	1f 91       	pop	r17
     19e:	0f 91       	pop	r16
     1a0:	08 95       	ret

000001a2 <conv_Celsius_to_ADC>:

uint16_t conv_Celsius_to_ADC(uint16_t degree_value)
{
     1a2:	0f 93       	push	r16
     1a4:	1f 93       	push	r17
	degree_value += 1;
     1a6:	9c 01       	movw	r18, r24
     1a8:	2f 5f       	subi	r18, 0xFF	; 255
     1aa:	3f 4f       	sbci	r19, 0xFF	; 255
	return (uint16_t)(((int32_t)degree_value * COEFF_SCALE - offset_norm) / k_norm);
     1ac:	a8 ee       	ldi	r26, 0xE8	; 232
     1ae:	b3 e0       	ldi	r27, 0x03	; 3
     1b0:	5b dc       	rcall	.-1866   	; 0xfffffa68 <__eeprom_end+0xff7efa5e>
     1b2:	00 91 cc 00 	lds	r16, 0x00CC
     1b6:	10 91 cd 00 	lds	r17, 0x00CD
     1ba:	20 91 ce 00 	lds	r18, 0x00CE
     1be:	30 91 cf 00 	lds	r19, 0x00CF
     1c2:	60 1b       	sub	r22, r16
     1c4:	71 0b       	sbc	r23, r17
     1c6:	82 0b       	sbc	r24, r18
     1c8:	93 0b       	sbc	r25, r19
     1ca:	20 91 c8 00 	lds	r18, 0x00C8
     1ce:	30 91 c9 00 	lds	r19, 0x00C9
     1d2:	40 91 ca 00 	lds	r20, 0x00CA
     1d6:	50 91 cb 00 	lds	r21, 0x00CB
     1da:	2b dc       	rcall	.-1962   	; 0xfffffa32 <__eeprom_end+0xff7efa28>
}
     1dc:	c9 01       	movw	r24, r18
     1de:	1f 91       	pop	r17
     1e0:	0f 91       	pop	r16
     1e2:	08 95       	ret

000001e4 <calculateCoeffs>:

void calculateCoeffs(void)
{
     1e4:	8f 92       	push	r8
     1e6:	9f 92       	push	r9
     1e8:	af 92       	push	r10
     1ea:	bf 92       	push	r11
     1ec:	cf 92       	push	r12
     1ee:	df 92       	push	r13
     1f0:	ef 92       	push	r14
     1f2:	ff 92       	push	r15
     1f4:	cf 93       	push	r28
     1f6:	df 93       	push	r29
	k_norm = ((int32_t)(p.cpoint2 - p.cpoint1) * COEFF_SCALE) / ((int32_t)(p.cpoint2_adc - p.cpoint1_adc));
     1f8:	f0 90 3b 01 	lds	r15, 0x013B
     1fc:	a0 91 3c 01 	lds	r26, 0x013C
     200:	b0 e0       	ldi	r27, 0x00	; 0
     202:	af 19       	sub	r26, r15
     204:	b1 09       	sbc	r27, r1
     206:	c0 91 3d 01 	lds	r28, 0x013D
     20a:	d0 91 3e 01 	lds	r29, 0x013E
     20e:	28 ee       	ldi	r18, 0xE8	; 232
     210:	33 e0       	ldi	r19, 0x03	; 3
     212:	36 dc       	rcall	.-1940   	; 0xfffffa80 <__eeprom_end+0xff7efa76>
     214:	20 91 3f 01 	lds	r18, 0x013F
     218:	30 91 40 01 	lds	r19, 0x0140
     21c:	2c 1b       	sub	r18, r28
     21e:	3d 0b       	sbc	r19, r29
     220:	40 e0       	ldi	r20, 0x00	; 0
     222:	50 e0       	ldi	r21, 0x00	; 0
     224:	06 dc       	rcall	.-2036   	; 0xfffffa32 <__eeprom_end+0xff7efa28>
     226:	49 01       	movw	r8, r18
     228:	5a 01       	movw	r10, r20
     22a:	20 93 c8 00 	sts	0x00C8, r18
     22e:	30 93 c9 00 	sts	0x00C9, r19
     232:	40 93 ca 00 	sts	0x00CA, r20
     236:	50 93 cb 00 	sts	0x00CB, r21
	offset_norm = (int32_t)p.cpoint1 * COEFF_SCALE - (int32_t)p.cpoint1_adc * k_norm;
     23a:	2f 2d       	mov	r18, r15
     23c:	30 e0       	ldi	r19, 0x00	; 0
     23e:	a8 ee       	ldi	r26, 0xE8	; 232
     240:	b3 e0       	ldi	r27, 0x03	; 3
     242:	12 dc       	rcall	.-2012   	; 0xfffffa68 <__eeprom_end+0xff7efa5e>
     244:	6b 01       	movw	r12, r22
     246:	7c 01       	movw	r14, r24
     248:	de 01       	movw	r26, r28
     24a:	a5 01       	movw	r20, r10
     24c:	94 01       	movw	r18, r8
     24e:	1e dc       	rcall	.-1988   	; 0xfffffa8c <__eeprom_end+0xff7efa82>
     250:	c6 1a       	sub	r12, r22
     252:	d7 0a       	sbc	r13, r23
     254:	e8 0a       	sbc	r14, r24
     256:	f9 0a       	sbc	r15, r25
     258:	c0 92 cc 00 	sts	0x00CC, r12
     25c:	d0 92 cd 00 	sts	0x00CD, r13
     260:	e0 92 ce 00 	sts	0x00CE, r14
     264:	f0 92 cf 00 	sts	0x00CF, r15
}
     268:	df 91       	pop	r29
     26a:	cf 91       	pop	r28
     26c:	ff 90       	pop	r15
     26e:	ef 90       	pop	r14
     270:	df 90       	pop	r13
     272:	cf 90       	pop	r12
     274:	bf 90       	pop	r11
     276:	af 90       	pop	r10
     278:	9f 90       	pop	r9
     27a:	8f 90       	pop	r8
     27c:	08 95       	ret

0000027e <update_normalized_adc>:


void update_normalized_adc()
{
     27e:	cf 92       	push	r12
     280:	df 92       	push	r13
     282:	ef 92       	push	r14
     284:	ff 92       	push	r15
	// Disable interrupts from ADC - to save data integrity
	ACSR &= ~(1<<ACIE);	
     286:	43 98       	cbi	0x08, 3	; 8
}

// Get ring buffer normalized value
uint16_t getNormalizedRingU16(RingBufU16_t* bptr)
{
	return 	bptr->summ / bptr->length;
     288:	c0 90 63 00 	lds	r12, 0x0063
     28c:	d0 90 64 00 	lds	r13, 0x0064
     290:	e0 90 65 00 	lds	r14, 0x0065
     294:	f0 90 66 00 	lds	r15, 0x0066
     298:	20 91 60 00 	lds	r18, 0x0060
     29c:	30 e0       	ldi	r19, 0x00	; 0
     29e:	40 e0       	ldi	r20, 0x00	; 0
     2a0:	50 e0       	ldi	r21, 0x00	; 0
     2a2:	c7 01       	movw	r24, r14
     2a4:	b6 01       	movw	r22, r12
     2a6:	a3 db       	rcall	.-2234   	; 0xfffff9ee <__eeprom_end+0xff7ef9e4>
     2a8:	30 93 34 01 	sts	0x0134, r19
     2ac:	20 93 33 01 	sts	0x0133, r18
{
	// Disable interrupts from ADC - to save data integrity
	ACSR &= ~(1<<ACIE);	
	// Get normalized mean window summ
	adc_normalized = (uint16_t)getNormalizedRingU16(&ringBufADC);
	adc_oversampled = ringBufADC.summ >> 2;
     2b0:	82 e0       	ldi	r24, 0x02	; 2
     2b2:	f6 94       	lsr	r15
     2b4:	e7 94       	ror	r14
     2b6:	d7 94       	ror	r13
     2b8:	c7 94       	ror	r12
     2ba:	8a 95       	dec	r24
     2bc:	d1 f7       	brne	.-12     	; 0x2b2 <update_normalized_adc+0x34>
     2be:	d0 92 0a 01 	sts	0x010A, r13
     2c2:	c0 92 09 01 	sts	0x0109, r12
	// Enable interrupts from ADC
	ACSR |= (1<<ACIE);
     2c6:	43 9a       	sbi	0x08, 3	; 8
}
     2c8:	ff 90       	pop	r15
     2ca:	ef 90       	pop	r14
     2cc:	df 90       	pop	r13
     2ce:	cf 90       	pop	r12
     2d0:	08 95       	ret

000002d2 <update_Celsius>:

void update_Celsius(void)
{
	// Convert to Celsius degree
	adc_celsius = conv_ADC_to_Celsius(adc_normalized);
     2d2:	80 91 33 01 	lds	r24, 0x0133
     2d6:	90 91 34 01 	lds	r25, 0x0134
     2da:	42 df       	rcall	.-380    	; 0x160 <conv_ADC_to_Celsius>
     2dc:	90 93 36 01 	sts	0x0136, r25
     2e0:	80 93 35 01 	sts	0x0135, r24
     2e4:	08 95       	ret

000002e6 <addToRingU16>:
//---------------------------------------------//
//---------------------------------------------//

// Ring buffer main function - add new data and update summ
void addToRingU16(RingBufU16_t* bptr, uint16_t sample)
{
     2e6:	ff 92       	push	r15
     2e8:	0f 93       	push	r16
     2ea:	1f 93       	push	r17
     2ec:	cf 93       	push	r28
     2ee:	df 93       	push	r29
     2f0:	fc 01       	movw	r30, r24
     2f2:	cb 01       	movw	r24, r22
	if (bptr->stat == RNORM)
     2f4:	20 85       	ldd	r18, Z+8	; 0x08
     2f6:	21 11       	cpse	r18, r1
     2f8:	18 c0       	rjmp	.+48     	; 0x32a <addToRingU16+0x44>
	{
		bptr->summ -= bptr->data[bptr->curr_pos];
     2fa:	27 81       	ldd	r18, Z+7	; 0x07
     2fc:	41 81       	ldd	r20, Z+1	; 0x01
     2fe:	32 81       	ldd	r19, Z+2	; 0x02
     300:	a4 2f       	mov	r26, r20
     302:	b3 2f       	mov	r27, r19
     304:	a2 0f       	add	r26, r18
     306:	b1 1d       	adc	r27, r1
     308:	a2 0f       	add	r26, r18
     30a:	b1 1d       	adc	r27, r1
     30c:	2d 91       	ld	r18, X+
     30e:	3c 91       	ld	r19, X
     310:	43 81       	ldd	r20, Z+3	; 0x03
     312:	54 81       	ldd	r21, Z+4	; 0x04
     314:	65 81       	ldd	r22, Z+5	; 0x05
     316:	76 81       	ldd	r23, Z+6	; 0x06
     318:	42 1b       	sub	r20, r18
     31a:	53 0b       	sbc	r21, r19
     31c:	61 09       	sbc	r22, r1
     31e:	71 09       	sbc	r23, r1
     320:	43 83       	std	Z+3, r20	; 0x03
     322:	54 83       	std	Z+4, r21	; 0x04
     324:	65 83       	std	Z+5, r22	; 0x05
     326:	76 83       	std	Z+6, r23	; 0x06
     328:	05 c0       	rjmp	.+10     	; 0x334 <addToRingU16+0x4e>
	}
	else
	{
		bptr->curr_pos = 0;
     32a:	17 82       	std	Z+7, r1	; 0x07
		bptr->summ = 0;
     32c:	13 82       	std	Z+3, r1	; 0x03
     32e:	14 82       	std	Z+4, r1	; 0x04
     330:	15 82       	std	Z+5, r1	; 0x05
     332:	16 82       	std	Z+6, r1	; 0x06
	}
	do	
	{
		bptr->data[bptr->curr_pos++] = sample;
     334:	d1 81       	ldd	r29, Z+1	; 0x01
     336:	f2 80       	ldd	r15, Z+2	; 0x02
     338:	43 81       	ldd	r20, Z+3	; 0x03
     33a:	54 81       	ldd	r21, Z+4	; 0x04
     33c:	65 81       	ldd	r22, Z+5	; 0x05
     33e:	76 81       	ldd	r23, Z+6	; 0x06
		bptr->summ += sample;
     340:	8c 01       	movw	r16, r24
     342:	20 e0       	ldi	r18, 0x00	; 0
     344:	30 e0       	ldi	r19, 0x00	; 0
		bptr->curr_pos = 0;
		bptr->summ = 0;
	}
	do	
	{
		bptr->data[bptr->curr_pos++] = sample;
     346:	c7 81       	ldd	r28, Z+7	; 0x07
     348:	ad 2f       	mov	r26, r29
     34a:	bf 2d       	mov	r27, r15
     34c:	ac 0f       	add	r26, r28
     34e:	b1 1d       	adc	r27, r1
     350:	ac 0f       	add	r26, r28
     352:	b1 1d       	adc	r27, r1
     354:	8d 93       	st	X+, r24
     356:	9c 93       	st	X, r25
     358:	cf 5f       	subi	r28, 0xFF	; 255
     35a:	c7 83       	std	Z+7, r28	; 0x07
//---------------------------------------------//
//---------------------------------------------//
//---------------------------------------------//

// Ring buffer main function - add new data and update summ
void addToRingU16(RingBufU16_t* bptr, uint16_t sample)
     35c:	40 0f       	add	r20, r16
     35e:	51 1f       	adc	r21, r17
     360:	62 1f       	adc	r22, r18
     362:	73 1f       	adc	r23, r19
	}
	do	
	{
		bptr->data[bptr->curr_pos++] = sample;
		bptr->summ += sample;
		if (bptr->curr_pos == bptr->length)	
     364:	a0 81       	ld	r26, Z
     366:	ca 13       	cpse	r28, r26
     368:	02 c0       	rjmp	.+4      	; 0x36e <addToRingU16+0x88>
		{	
			bptr->curr_pos = 0;	
     36a:	17 82       	std	Z+7, r1	; 0x07
			bptr->stat = RNORM;
     36c:	10 86       	std	Z+8, r1	; 0x08
		}
	} 
	while (bptr->stat != RNORM);
     36e:	a0 85       	ldd	r26, Z+8	; 0x08
     370:	a1 11       	cpse	r26, r1
     372:	e9 cf       	rjmp	.-46     	; 0x346 <addToRingU16+0x60>
     374:	43 83       	std	Z+3, r20	; 0x03
     376:	54 83       	std	Z+4, r21	; 0x04
     378:	65 83       	std	Z+5, r22	; 0x05
     37a:	76 83       	std	Z+6, r23	; 0x06
}
     37c:	df 91       	pop	r29
     37e:	cf 91       	pop	r28
     380:	1f 91       	pop	r17
     382:	0f 91       	pop	r16
     384:	ff 90       	pop	r15
     386:	08 95       	ret

00000388 <__vector_14>:




ISR(ADC_vect)
{
     388:	1f 92       	push	r1
     38a:	0f 92       	push	r0
     38c:	0f b6       	in	r0, 0x3f	; 63
     38e:	0f 92       	push	r0
     390:	11 24       	eor	r1, r1
     392:	2f 93       	push	r18
     394:	3f 93       	push	r19
     396:	4f 93       	push	r20
     398:	5f 93       	push	r21
     39a:	6f 93       	push	r22
     39c:	7f 93       	push	r23
     39e:	8f 93       	push	r24
     3a0:	9f 93       	push	r25
     3a2:	af 93       	push	r26
     3a4:	bf 93       	push	r27
     3a6:	ef 93       	push	r30
     3a8:	ff 93       	push	r31
	// Get new sample
	uint16_t new_sample = 1024 - ADC;	
     3aa:	84 b1       	in	r24, 0x04	; 4
     3ac:	95 b1       	in	r25, 0x05	; 5
     3ae:	60 e0       	ldi	r22, 0x00	; 0
     3b0:	74 e0       	ldi	r23, 0x04	; 4
     3b2:	68 1b       	sub	r22, r24
     3b4:	79 0b       	sbc	r23, r25
	// Add new sample to the ring buffer
	addToRingU16(&ringBufADC, new_sample);
     3b6:	80 e6       	ldi	r24, 0x60	; 96
     3b8:	90 e0       	ldi	r25, 0x00	; 0
     3ba:	95 df       	rcall	.-214    	; 0x2e6 <addToRingU16>
}	
     3bc:	ff 91       	pop	r31
     3be:	ef 91       	pop	r30
     3c0:	bf 91       	pop	r27
     3c2:	af 91       	pop	r26
     3c4:	9f 91       	pop	r25
     3c6:	8f 91       	pop	r24
     3c8:	7f 91       	pop	r23
     3ca:	6f 91       	pop	r22
     3cc:	5f 91       	pop	r21
     3ce:	4f 91       	pop	r20
     3d0:	3f 91       	pop	r19
     3d2:	2f 91       	pop	r18
     3d4:	0f 90       	pop	r0
     3d6:	0f be       	out	0x3f, r0	; 63
     3d8:	0f 90       	pop	r0
     3da:	1f 90       	pop	r1
     3dc:	18 95       	reti

000003de <getNormalizedRingU16>:
}

// Get ring buffer normalized value
uint16_t getNormalizedRingU16(RingBufU16_t* bptr)
{
	return 	bptr->summ / bptr->length;
     3de:	fc 01       	movw	r30, r24
     3e0:	20 81       	ld	r18, Z
     3e2:	30 e0       	ldi	r19, 0x00	; 0
     3e4:	40 e0       	ldi	r20, 0x00	; 0
     3e6:	50 e0       	ldi	r21, 0x00	; 0
     3e8:	63 81       	ldd	r22, Z+3	; 0x03
     3ea:	74 81       	ldd	r23, Z+4	; 0x04
     3ec:	85 81       	ldd	r24, Z+5	; 0x05
     3ee:	96 81       	ldd	r25, Z+6	; 0x06
     3f0:	fe da       	rcall	.-2564   	; 0xfffff9ee <__eeprom_end+0xff7ef9e4>
}
     3f2:	c9 01       	movw	r24, r18
     3f4:	08 95       	ret

000003f6 <process_buttons>:
	uint8_t raw_delayed_inv;
	static uint8_t press_timer = 0;
	uint8_t long_press_mask;
	uint8_t long_press_event_mask;
	
	raw_delayed = raw_current;
     3f6:	50 91 d6 00 	lds	r21, 0x00D6
	raw_delayed_inv = raw_current_inv;
     3fa:	30 91 69 00 	lds	r19, 0x0069
	raw_current = raw_button_state;
     3fe:	90 91 69 01 	lds	r25, 0x0169
     402:	90 93 d6 00 	sts	0x00D6, r25
	raw_current_inv = ~raw_current;
     406:	69 2f       	mov	r22, r25
     408:	60 95       	com	r22
     40a:	60 93 69 00 	sts	0x0069, r22
	
	// Must be before press_timer update
	long_press_mask = (press_timer >= LONG_PRESS_DELAY) ? 0xFF : 0x00;
     40e:	80 91 d7 00 	lds	r24, 0x00D7
     412:	8c 30       	cpi	r24, 0x0C	; 12
     414:	10 f0       	brcs	.+4      	; 0x41a <process_buttons+0x24>
     416:	2f ef       	ldi	r18, 0xFF	; 255
     418:	01 c0       	rjmp	.+2      	; 0x41c <process_buttons+0x26>
     41a:	20 e0       	ldi	r18, 0x00	; 0
	
	if (raw_delayed != raw_current)
     41c:	59 17       	cp	r21, r25
     41e:	19 f0       	breq	.+6      	; 0x426 <process_buttons+0x30>
	{
		press_timer = 0;
     420:	10 92 d7 00 	sts	0x00D7, r1
     424:	05 c0       	rjmp	.+10     	; 0x430 <process_buttons+0x3a>
	}
	else if (press_timer <= LONG_PRESS_DELAY)
     426:	8d 30       	cpi	r24, 0x0D	; 13
     428:	18 f4       	brcc	.+6      	; 0x430 <process_buttons+0x3a>
	{
		press_timer++;
     42a:	8f 5f       	subi	r24, 0xFF	; 255
     42c:	80 93 d7 00 	sts	0x00D7, r24
	}
	
	// Must after press_timer update
	long_press_event_mask = (press_timer == LONG_PRESS_DELAY) ? 0xFF : 0x00;
     430:	70 91 d7 00 	lds	r23, 0x00D7
     434:	7c 30       	cpi	r23, 0x0C	; 12
     436:	11 f4       	brne	.+4      	; 0x43c <process_buttons+0x46>
     438:	4f ef       	ldi	r20, 0xFF	; 255
     43a:	01 c0       	rjmp	.+2      	; 0x43e <process_buttons+0x48>
     43c:	40 e0       	ldi	r20, 0x00	; 0
			
	button_action_down = raw_current & raw_delayed_inv;
     43e:	89 2f       	mov	r24, r25
     440:	83 23       	and	r24, r19
     442:	80 93 d3 00 	sts	0x00D3, r24
			
	if (press_timer > REPEAT_DELAY)
     446:	77 30       	cpi	r23, 0x07	; 7
     448:	08 f0       	brcs	.+2      	; 0x44c <process_buttons+0x56>
		raw_delayed_inv |= 0xFF;
     44a:	3f ef       	ldi	r19, 0xFF	; 255
	
	button_action_rep = raw_current & raw_delayed_inv;
     44c:	39 23       	and	r19, r25
     44e:	30 93 d2 00 	sts	0x00D2, r19
	
	button_action_up_short = raw_current_inv & raw_delayed & ~long_press_mask;
     452:	20 95       	com	r18
     454:	56 23       	and	r21, r22
     456:	25 23       	and	r18, r21
     458:	20 93 d1 00 	sts	0x00D1, r18
	//button_action_up_long  = raw_current_inv & raw_delayed & long_press_mask;
	button_action_long  = raw_current & long_press_event_mask;
     45c:	49 23       	and	r20, r25
     45e:	40 93 d0 00 	sts	0x00D0, r20
	
	// Compose button state
	button_state = (button_action_down & (BD_MENU | BD_UP | BD_DOWN | BD_ROTFWD | BD_ROTREV | BD_HEATCTRL | BD_CYCLE));
     462:	87 7f       	andi	r24, 0xF7	; 247
     464:	90 e0       	ldi	r25, 0x00	; 0
	if (button_action_up_short & BD_MENU)
     466:	20 ff       	sbrs	r18, 0
     468:	01 c0       	rjmp	.+2      	; 0x46c <__stack+0xd>
		button_state |= BS_MENU;
     46a:	91 60       	ori	r25, 0x01	; 1
     46c:	90 93 d5 00 	sts	0x00D5, r25
     470:	80 93 d4 00 	sts	0x00D4, r24
	//if (button_action_up_long & BD_MENU)
	if (button_action_long & BD_MENU)
     474:	40 ff       	sbrs	r20, 0
     476:	09 c0       	rjmp	.+18     	; 0x48a <__stack+0x2b>
		button_state |= BL_MENU;
     478:	80 91 d4 00 	lds	r24, 0x00D4
     47c:	90 91 d5 00 	lds	r25, 0x00D5
     480:	92 60       	ori	r25, 0x02	; 2
     482:	90 93 d5 00 	sts	0x00D5, r25
     486:	80 93 d4 00 	sts	0x00D4, r24
	if (button_action_rep & BD_UP)
     48a:	31 ff       	sbrs	r19, 1
     48c:	09 c0       	rjmp	.+18     	; 0x4a0 <__stack+0x41>
		button_state |= BR_UP;	
     48e:	80 91 d4 00 	lds	r24, 0x00D4
     492:	90 91 d5 00 	lds	r25, 0x00D5
     496:	94 60       	ori	r25, 0x04	; 4
     498:	90 93 d5 00 	sts	0x00D5, r25
     49c:	80 93 d4 00 	sts	0x00D4, r24
	if (button_action_rep & BD_DOWN)
     4a0:	32 ff       	sbrs	r19, 2
     4a2:	09 c0       	rjmp	.+18     	; 0x4b6 <__stack+0x57>
		button_state |= BR_DOWN;
     4a4:	80 91 d4 00 	lds	r24, 0x00D4
     4a8:	90 91 d5 00 	lds	r25, 0x00D5
     4ac:	98 60       	ori	r25, 0x08	; 8
     4ae:	90 93 d5 00 	sts	0x00D5, r25
     4b2:	80 93 d4 00 	sts	0x00D4, r24
     4b6:	08 95       	ret

000004b8 <processRollControl>:
int16_t dbg_PID_output;


// Function to control motor rotation
void processRollControl(void)
{	
     4b8:	cf 93       	push	r28
//	static uint8_t beepMask = 0x00;
//	uint8_t nextBeepMask = 0xFF;
	static uint8_t force_rotate = 0;
	
	// Process auto power off control
	if (autoPowerOffState & AUTO_POFF_ACTIVE)
     4ba:	80 91 d8 00 	lds	r24, 0x00D8
     4be:	80 ff       	sbrs	r24, 0
     4c0:	0f c0       	rjmp	.+30     	; 0x4e0 <processRollControl+0x28>
	{
		stopCycleRolling(1);	
     4c2:	81 e0       	ldi	r24, 0x01	; 1
     4c4:	ed d7       	rcall	.+4058   	; 0x14a0 <stopCycleRolling>
		if (adc_celsius <= POFF_MOTOR_TRESHOLD)
     4c6:	80 91 35 01 	lds	r24, 0x0135
     4ca:	90 91 36 01 	lds	r25, 0x0136
     4ce:	c3 97       	sbiw	r24, 0x33	; 51
     4d0:	08 f0       	brcs	.+2      	; 0x4d4 <processRollControl+0x1c>
     4d2:	5f c0       	rjmp	.+190    	; 0x592 <processRollControl+0xda>
		{
			force_rotate = ROLL_FWD;		// Default direction
     4d4:	81 e0       	ldi	r24, 0x01	; 1
     4d6:	80 93 d9 00 	sts	0x00D9, r24
			setMotorDirection(0);			// Stop the motor
     4da:	80 e0       	ldi	r24, 0x00	; 0
     4dc:	c0 d7       	rcall	.+3968   	; 0x145e <setMotorDirection>
     4de:	59 c0       	rjmp	.+178    	; 0x592 <processRollControl+0xda>
		}
	}
	else
	{
		// Control direction by buttons
		if (button_action_down & BD_ROTFWD)
     4e0:	80 91 d3 00 	lds	r24, 0x00D3
     4e4:	84 ff       	sbrs	r24, 4
     4e6:	04 c0       	rjmp	.+8      	; 0x4f0 <processRollControl+0x38>
		{
			setMotorDirection(ROLL_FWD);	
     4e8:	81 e0       	ldi	r24, 0x01	; 1
     4ea:	b9 d7       	rcall	.+3954   	; 0x145e <setMotorDirection>
			beepState |= 0x01;			// pressed FWD button
     4ec:	c1 e0       	ldi	r28, 0x01	; 1
     4ee:	13 c0       	rjmp	.+38     	; 0x516 <processRollControl+0x5e>
		}		
		else if (button_action_down & BD_ROTREV)
     4f0:	85 ff       	sbrs	r24, 5
     4f2:	04 c0       	rjmp	.+8      	; 0x4fc <processRollControl+0x44>
		{
			setMotorDirection(ROLL_REV);
     4f4:	82 e0       	ldi	r24, 0x02	; 2
     4f6:	b3 d7       	rcall	.+3942   	; 0x145e <setMotorDirection>
			beepState |= 0x02;			// pressed REV button
     4f8:	c2 e0       	ldi	r28, 0x02	; 2
     4fa:	0d c0       	rjmp	.+26     	; 0x516 <processRollControl+0x5e>
		}		
		else if (button_action_long & BD_CYCLE)
     4fc:	80 91 d0 00 	lds	r24, 0x00D0
     500:	87 ff       	sbrs	r24, 7
     502:	04 c0       	rjmp	.+8      	; 0x50c <processRollControl+0x54>
		{
			stopCycleRolling(1);		// Reset points and disable CYCLE mode (if was enabled)
     504:	81 e0       	ldi	r24, 0x01	; 1
     506:	cc d7       	rcall	.+3992   	; 0x14a0 <stopCycleRolling>
			beepState |= 0x08;			// reset of points by long pressing of ROLL button
     508:	c8 e0       	ldi	r28, 0x08	; 8
     50a:	05 c0       	rjmp	.+10     	; 0x516 <processRollControl+0x5e>
		}
		else if (force_rotate)
     50c:	80 91 d9 00 	lds	r24, 0x00D9
     510:	81 11       	cpse	r24, r1
		{
			// Auto power off mode was exited by pressing some other button, not direction buttons
			// Start roll, but do not beep in this case
			setMotorDirection(force_rotate);
     512:	a5 d7       	rcall	.+3914   	; 0x145e <setMotorDirection>


// Function to control motor rotation
void processRollControl(void)
{	
	uint8_t beepState = 0;
     514:	c0 e0       	ldi	r28, 0x00	; 0
		{
			// Auto power off mode was exited by pressing some other button, not direction buttons
			// Start roll, but do not beep in this case
			setMotorDirection(force_rotate);
		}
		force_rotate = 0;		// First normal pass will clear 
     516:	10 92 d9 00 	sts	0x00D9, r1
			
		if (button_action_up_short & BD_CYCLE)
     51a:	80 91 d1 00 	lds	r24, 0x00D1
     51e:	87 ff       	sbrs	r24, 7
     520:	0e c0       	rjmp	.+28     	; 0x53e <processRollControl+0x86>
		{
			if (rollState & ROLL_CYCLE)
     522:	80 91 f7 00 	lds	r24, 0x00F7
     526:	82 ff       	sbrs	r24, 2
     528:	04 c0       	rjmp	.+8      	; 0x532 <processRollControl+0x7a>
			{
				stopCycleRolling(0);
     52a:	80 e0       	ldi	r24, 0x00	; 0
     52c:	b9 d7       	rcall	.+3954   	; 0x14a0 <stopCycleRolling>
				beepState |= 0x20;		// stopped cycle
     52e:	c0 62       	ori	r28, 0x20	; 32
     530:	06 c0       	rjmp	.+12     	; 0x53e <processRollControl+0x86>
			}
			else if (startCycleRolling())
     532:	f2 d7       	rcall	.+4068   	; 0x1518 <startCycleRolling>
     534:	88 23       	and	r24, r24
     536:	11 f0       	breq	.+4      	; 0x53c <processRollControl+0x84>
			{
				beepState |= 0x10;		// started cycle
     538:	c0 61       	ori	r28, 0x10	; 16
     53a:	01 c0       	rjmp	.+2      	; 0x53e <processRollControl+0x86>
			}
			else
			{
				beepState |= 0x40;		// failed to start cycle
     53c:	c0 64       	ori	r28, 0x40	; 64
			}			
		}		
			
		if (rollState & ROLL_DIR_CHANGED)
     53e:	80 91 f7 00 	lds	r24, 0x00F7
     542:	85 ff       	sbrs	r24, 5
     544:	04 c0       	rjmp	.+8      	; 0x54e <processRollControl+0x96>
		{
			rollState &= ~ROLL_DIR_CHANGED;
     546:	8f 7d       	andi	r24, 0xDF	; 223
     548:	80 93 f7 00 	sts	0x00F7, r24
			beepState |= 0x04;	
     54c:	c4 60       	ori	r28, 0x04	; 4
		}
			
		if (rollState & CYCLE_ROLL_DONE)
     54e:	80 91 f7 00 	lds	r24, 0x00F7
     552:	84 ff       	sbrs	r24, 4
     554:	04 c0       	rjmp	.+8      	; 0x55e <processRollControl+0xa6>
		{
			rollState &= ~CYCLE_ROLL_DONE;
     556:	8f 7e       	andi	r24, 0xEF	; 239
     558:	80 93 f7 00 	sts	0x00F7, r24
			beepState |= 0x80;	
     55c:	c0 68       	ori	r28, 0x80	; 128
		}		
			
		//-----------//
			
		if (beepState & 0x80)		// Roll cycle done
     55e:	c7 ff       	sbrs	r28, 7
     560:	06 c0       	rjmp	.+12     	; 0x56e <processRollControl+0xb6>
		{
			SetBeeperFreq(1000);
     562:	88 ee       	ldi	r24, 0xE8	; 232
     564:	93 e0       	ldi	r25, 0x03	; 3
     566:	8d d9       	rcall	.-3302   	; 0xfffff882 <__eeprom_end+0xff7ef878>
			StartBeep(200);
     568:	88 ec       	ldi	r24, 0xC8	; 200
     56a:	90 e0       	ldi	r25, 0x00	; 0
     56c:	11 c0       	rjmp	.+34     	; 0x590 <processRollControl+0xd8>
		}		
		else if (beepState & 0x40)	// Roll cycle start fail
     56e:	c6 ff       	sbrs	r28, 6
     570:	03 c0       	rjmp	.+6      	; 0x578 <processRollControl+0xc0>
		{
			SetBeeperFreq(500);
     572:	84 ef       	ldi	r24, 0xF4	; 244
     574:	91 e0       	ldi	r25, 0x01	; 1
     576:	09 c0       	rjmp	.+18     	; 0x58a <processRollControl+0xd2>
			StartBeep(50);
		} 
		else if (beepState & 0x08)	// Reset points
     578:	c3 ff       	sbrs	r28, 3
     57a:	03 c0       	rjmp	.+6      	; 0x582 <processRollControl+0xca>
		{
			SetBeeperFreq(800);
     57c:	80 e2       	ldi	r24, 0x20	; 32
     57e:	93 e0       	ldi	r25, 0x03	; 3
     580:	04 c0       	rjmp	.+8      	; 0x58a <processRollControl+0xd2>
			StartBeep(50);
		}							// Other
		else if ( beepState & (0x01 | 0x02 | 0x10 | 0x20 | 0x04) )
     582:	c7 73       	andi	r28, 0x37	; 55
     584:	31 f0       	breq	.+12     	; 0x592 <processRollControl+0xda>
		{
			SetBeeperFreq(1000);
     586:	88 ee       	ldi	r24, 0xE8	; 232
     588:	93 e0       	ldi	r25, 0x03	; 3
     58a:	7b d9       	rcall	.-3338   	; 0xfffff882 <__eeprom_end+0xff7ef878>
			StartBeep(50);	
     58c:	82 e3       	ldi	r24, 0x32	; 50
     58e:	90 e0       	ldi	r25, 0x00	; 0
     590:	98 d9       	rcall	.-3280   	; 0xfffff8c2 <__eeprom_end+0xff7ef8b8>
		}			
			
	}

	// Indicate direction by LEDs
	clearExtraLeds(LED_ROTFWD | LED_ROTREV);
     592:	80 e3       	ldi	r24, 0x30	; 48
     594:	ea d2       	rcall	.+1492   	; 0xb6a <clearExtraLeds>
	if (rollState & ROLL_FWD)
     596:	80 91 f7 00 	lds	r24, 0x00F7
     59a:	80 ff       	sbrs	r24, 0
     59c:	02 c0       	rjmp	.+4      	; 0x5a2 <processRollControl+0xea>
		setExtraLeds(LED_ROTFWD);
     59e:	80 e1       	ldi	r24, 0x10	; 16
     5a0:	03 c0       	rjmp	.+6      	; 0x5a8 <processRollControl+0xf0>
	else if (rollState & ROLL_REV)
     5a2:	81 ff       	sbrs	r24, 1
     5a4:	03 c0       	rjmp	.+6      	; 0x5ac <processRollControl+0xf4>
		setExtraLeds(LED_ROTREV);
     5a6:	80 e2       	ldi	r24, 0x20	; 32
}
     5a8:	cf 91       	pop	r28
	// Indicate direction by LEDs
	clearExtraLeds(LED_ROTFWD | LED_ROTREV);
	if (rollState & ROLL_FWD)
		setExtraLeds(LED_ROTFWD);
	else if (rollState & ROLL_REV)
		setExtraLeds(LED_ROTREV);
     5aa:	d9 c2       	rjmp	.+1458   	; 0xb5e <setExtraLeds>
}
     5ac:	cf 91       	pop	r28
     5ae:	08 95       	ret

000005b0 <samplePIDProcessValue>:



void samplePIDProcessValue(void)
{
	PIDsampledADC = getNormalizedRingU16(&ringBufADC);
     5b0:	80 e6       	ldi	r24, 0x60	; 96
     5b2:	90 e0       	ldi	r25, 0x00	; 0
     5b4:	14 df       	rcall	.-472    	; 0x3de <getNormalizedRingU16>
     5b6:	90 93 08 01 	sts	0x0108, r25
     5ba:	80 93 07 01 	sts	0x0107, r24
     5be:	08 95       	ret

000005c0 <processPID>:




uint8_t processPID(uint16_t setPoint, uint16_t processValue)
{
     5c0:	0f 93       	push	r16
     5c2:	1f 93       	push	r17
     5c4:	cf 93       	push	r28
     5c6:	df 93       	push	r29
	int16_t error, p_term, i_term, d_term, temp;
	static uint16_t lastProcessValue;
	static int16_t integAcc = 0;
	
	error = setPoint - processValue;
     5c8:	86 1b       	sub	r24, r22
     5ca:	97 0b       	sbc	r25, r23
	
	
	//------ Calculate P term --------//
	if (error > 20)
     5cc:	85 31       	cpi	r24, 0x15	; 21
     5ce:	91 05       	cpc	r25, r1
     5d0:	5c f4       	brge	.+22     	; 0x5e8 <processPID+0x28>
	{
		p_term = 1000;
	}
	else if (error < -20)
     5d2:	8c 3e       	cpi	r24, 0xEC	; 236
     5d4:	2f ef       	ldi	r18, 0xFF	; 255
     5d6:	92 07       	cpc	r25, r18
     5d8:	54 f0       	brlt	.+20     	; 0x5ee <processPID+0x2e>
	{
		p_term = -1000;
	}
	else
	{
		p_term = error * Kp;
     5da:	2f e0       	ldi	r18, 0x0F	; 15
     5dc:	28 9f       	mul	r18, r24
     5de:	e0 01       	movw	r28, r0
     5e0:	29 9f       	mul	r18, r25
     5e2:	d0 0d       	add	r29, r0
     5e4:	11 24       	eor	r1, r1
     5e6:	05 c0       	rjmp	.+10     	; 0x5f2 <processPID+0x32>
	
	
	//------ Calculate P term --------//
	if (error > 20)
	{
		p_term = 1000;
     5e8:	c8 ee       	ldi	r28, 0xE8	; 232
     5ea:	d3 e0       	ldi	r29, 0x03	; 3
     5ec:	02 c0       	rjmp	.+4      	; 0x5f2 <processPID+0x32>
	}
	else if (error < -20)
	{
		p_term = -1000;
     5ee:	c8 e1       	ldi	r28, 0x18	; 24
     5f0:	dc ef       	ldi	r29, 0xFC	; 252
	{
		p_term = error * Kp;
	}
	
	//------ Calculate I term --------//
	integAcc += error;
     5f2:	20 91 de 00 	lds	r18, 0x00DE
     5f6:	30 91 df 00 	lds	r19, 0x00DF
	if (error <= 0)
     5fa:	18 16       	cp	r1, r24
     5fc:	19 06       	cpc	r1, r25
     5fe:	0c f0       	brlt	.+2      	; 0x602 <processPID+0x42>
     600:	0f c0       	rjmp	.+30     	; 0x620 <processPID+0x60>
	{
		p_term = error * Kp;
	}
	
	//------ Calculate I term --------//
	integAcc += error;
     602:	82 0f       	add	r24, r18
     604:	93 1f       	adc	r25, r19
	if (error <= 0)
	{
		integAcc = 0;
	}
	else if (integAcc > 10)
     606:	8b 30       	cpi	r24, 0x0B	; 11
     608:	91 05       	cpc	r25, r1
     60a:	1c f0       	brlt	.+6      	; 0x612 <processPID+0x52>
	{
		integAcc = 10;
     60c:	8a e0       	ldi	r24, 0x0A	; 10
     60e:	90 e0       	ldi	r25, 0x00	; 0
     610:	02 c0       	rjmp	.+4      	; 0x616 <processPID+0x56>
	}
	else if (integAcc < 0)
     612:	97 fd       	sbrc	r25, 7
     614:	05 c0       	rjmp	.+10     	; 0x620 <processPID+0x60>
	{
		p_term = error * Kp;
	}
	
	//------ Calculate I term --------//
	integAcc += error;
     616:	90 93 df 00 	sts	0x00DF, r25
     61a:	80 93 de 00 	sts	0x00DE, r24
     61e:	04 c0       	rjmp	.+8      	; 0x628 <processPID+0x68>
	{
		integAcc = 10;
	}
	else if (integAcc < 0)
	{
		integAcc = 0;
     620:	10 92 df 00 	sts	0x00DF, r1
     624:	10 92 de 00 	sts	0x00DE, r1
	}
	i_term = integAcc * Ki;
     628:	80 91 de 00 	lds	r24, 0x00DE
     62c:	90 91 df 00 	lds	r25, 0x00DF
     630:	2f e0       	ldi	r18, 0x0F	; 15
     632:	28 9f       	mul	r18, r24
     634:	80 01       	movw	r16, r0
     636:	29 9f       	mul	r18, r25
     638:	10 0d       	add	r17, r0
     63a:	11 24       	eor	r1, r1
	//------ Calculate D term --------//
	//lastProcessValue = getNormalizedRingU16(&ringBufDterm);
	//addToRingU16(&ringBufDterm, processValue);
	//d_term = Kd * ((int16_t)(lastProcessValue - processValue));
	
	lastProcessValue = ringBufDterm.summ;
     63c:	80 91 6d 00 	lds	r24, 0x006D
     640:	90 91 6e 00 	lds	r25, 0x006E
     644:	90 93 e1 00 	sts	0x00E1, r25
     648:	80 93 e0 00 	sts	0x00E0, r24
	addToRingU16(&ringBufDterm, processValue);
     64c:	8a e6       	ldi	r24, 0x6A	; 106
     64e:	90 e0       	ldi	r25, 0x00	; 0
     650:	4a de       	rcall	.-876    	; 0x2e6 <addToRingU16>
	processValue = ringBufDterm.summ;
	d_term = Kd * ((int16_t)(lastProcessValue - processValue));
     652:	80 91 e0 00 	lds	r24, 0x00E0
     656:	90 91 e1 00 	lds	r25, 0x00E1
     65a:	20 91 6d 00 	lds	r18, 0x006D
     65e:	30 91 6e 00 	lds	r19, 0x006E
     662:	82 1b       	sub	r24, r18
     664:	93 0b       	sbc	r25, r19
     666:	40 e5       	ldi	r20, 0x50	; 80
     668:	48 9f       	mul	r20, r24
     66a:	90 01       	movw	r18, r0
     66c:	49 9f       	mul	r20, r25
     66e:	30 0d       	add	r19, r0
     670:	11 24       	eor	r1, r1
	
	//--------- Summ terms -----------//
	temp = (p_term + i_term + d_term) / SCALING_FACTOR;
     672:	ce 01       	movw	r24, r28
     674:	80 0f       	add	r24, r16
     676:	91 1f       	adc	r25, r17
     678:	82 0f       	add	r24, r18
     67a:	93 1f       	adc	r25, r19
     67c:	65 e0       	ldi	r22, 0x05	; 5
     67e:	70 e0       	ldi	r23, 0x00	; 0
     680:	a3 d9       	rcall	.-3258   	; 0xfffff9c8 <__eeprom_end+0xff7ef9be>
     682:	cb 01       	movw	r24, r22
     684:	77 ff       	sbrs	r23, 7
     686:	02 c0       	rjmp	.+4      	; 0x68c <processPID+0xcc>
     688:	80 e0       	ldi	r24, 0x00	; 0
     68a:	90 e0       	ldi	r25, 0x00	; 0
     68c:	83 33       	cpi	r24, 0x33	; 51
     68e:	91 05       	cpc	r25, r1
     690:	14 f0       	brlt	.+4      	; 0x696 <processPID+0xd6>
     692:	82 e3       	ldi	r24, 0x32	; 50
     694:	90 e0       	ldi	r25, 0x00	; 0
		temp = 0;
	}
	
	
	//------- Debug --------//
	dbg_PID_p_term = p_term;
     696:	d0 93 45 01 	sts	0x0145, r29
     69a:	c0 93 44 01 	sts	0x0144, r28
	dbg_PID_d_term = d_term;
     69e:	30 93 53 01 	sts	0x0153, r19
     6a2:	20 93 52 01 	sts	0x0152, r18
	dbg_PID_i_term = i_term;
     6a6:	10 93 49 01 	sts	0x0149, r17
     6aa:	00 93 48 01 	sts	0x0148, r16
	dbg_PID_output = temp;
     6ae:	90 93 42 01 	sts	0x0142, r25
     6b2:	80 93 41 01 	sts	0x0141, r24
	
	
	return temp;
	
}
     6b6:	df 91       	pop	r29
     6b8:	cf 91       	pop	r28
     6ba:	1f 91       	pop	r17
     6bc:	0f 91       	pop	r16
     6be:	08 95       	ret

000006c0 <processHeaterControl>:
	static uint16_t set_value_adc;		// static for debug
	static uint16_t pid_output;			// static for debug
	
	
	// Process heater ON/OFF control by button
	if (button_state & BD_HEATCTRL)
     6c0:	80 91 d4 00 	lds	r24, 0x00D4
     6c4:	86 ff       	sbrs	r24, 6
     6c6:	07 c0       	rjmp	.+14     	; 0x6d6 <processHeaterControl+0x16>
	{
		heaterState ^= HEATER_ENABLED;
     6c8:	80 91 f9 00 	lds	r24, 0x00F9
     6cc:	91 e0       	ldi	r25, 0x01	; 1
     6ce:	89 27       	eor	r24, r25
     6d0:	80 93 f9 00 	sts	0x00F9, r24
		// Make heater controller set update_flag on next call
		forceHeaterControlUpdate();
     6d4:	b7 d6       	rcall	.+3438   	; 0x1444 <forceHeaterControlUpdate>
	}
	
	// Process auto power off control
	if (autoPowerOffState & AUTO_POFF_ACTIVE)
     6d6:	80 91 d8 00 	lds	r24, 0x00D8
     6da:	80 ff       	sbrs	r24, 0
     6dc:	05 c0       	rjmp	.+10     	; 0x6e8 <processHeaterControl+0x28>
	{
		heaterState &= ~HEATER_ENABLED;
     6de:	80 91 f9 00 	lds	r24, 0x00F9
     6e2:	8e 7f       	andi	r24, 0xFE	; 254
     6e4:	80 93 f9 00 	sts	0x00F9, r24
	}		
	
	
	// Check if heater control should be updated
	// PID call interval is a multiple of AC line periods, computed as HEATER_REGULATION_PERIODS * 20ms * HEATER_PID_CALL_INTERVAL
	if (heaterState & READY_TO_UPDATE_HEATER)
     6e8:	80 91 f9 00 	lds	r24, 0x00F9
     6ec:	87 ff       	sbrs	r24, 7
     6ee:	17 c0       	rjmp	.+46     	; 0x71e <processHeaterControl+0x5e>
	{
		// Convert temperature setup to equal ADC value
		set_value_adc = conv_Celsius_to_ADC(p.setup_temp_value);					
     6f0:	80 91 37 01 	lds	r24, 0x0137
     6f4:	90 e0       	ldi	r25, 0x00	; 0
     6f6:	55 dd       	rcall	.-1366   	; 0x1a2 <conv_Celsius_to_ADC>
     6f8:	90 93 db 00 	sts	0x00DB, r25
     6fc:	80 93 da 00 	sts	0x00DA, r24
		// Process PID
		pid_output = processPID(set_value_adc,PIDsampledADC);
     700:	60 91 07 01 	lds	r22, 0x0107
     704:	70 91 08 01 	lds	r23, 0x0108
     708:	5b df       	rcall	.-330    	; 0x5c0 <processPID>
     70a:	80 93 dc 00 	sts	0x00DC, r24
     70e:	10 92 dd 00 	sts	0x00DD, r1
			
		// Heater control is updated only when flag is set, even if heater must be powered OFF
		if (heaterState & HEATER_ENABLED)
     712:	90 91 f9 00 	lds	r25, 0x00F9
     716:	90 fd       	sbrc	r25, 0
     718:	01 c0       	rjmp	.+2      	; 0x71c <processHeaterControl+0x5c>
			setHeaterControl(pid_output);	// Flag is cleared automatically
		else
			setHeaterControl(0);
     71a:	80 e0       	ldi	r24, 0x00	; 0
     71c:	85 d6       	rcall	.+3338   	; 0x1428 <setHeaterControl>
	}	
		
	
	//------- Debug --------//
	if (heaterState & HEATER_ENABLED)
     71e:	80 91 f9 00 	lds	r24, 0x00F9
     722:	80 ff       	sbrs	r24, 0
     724:	0f c0       	rjmp	.+30     	; 0x744 <processHeaterControl+0x84>
	{
		setExtraLeds(LED_HEATER);
     726:	80 e4       	ldi	r24, 0x40	; 64
     728:	1a d2       	rcall	.+1076   	; 0xb5e <setExtraLeds>
		dbg_SetTempCelsius = p.setup_temp_value;
     72a:	80 91 37 01 	lds	r24, 0x0137
     72e:	80 93 43 01 	sts	0x0143, r24
		dbg_SetTempPID = set_value_adc;
     732:	80 91 da 00 	lds	r24, 0x00DA
     736:	90 91 db 00 	lds	r25, 0x00DB
     73a:	90 93 56 01 	sts	0x0156, r25
     73e:	80 93 55 01 	sts	0x0155, r24
     742:	08 c0       	rjmp	.+16     	; 0x754 <processHeaterControl+0x94>
	}
	else
	{
		dbg_SetTempCelsius = 0;
     744:	10 92 43 01 	sts	0x0143, r1
		dbg_SetTempPID = 0;
     748:	10 92 56 01 	sts	0x0156, r1
     74c:	10 92 55 01 	sts	0x0155, r1
		clearExtraLeds(LED_HEATER);
     750:	80 e4       	ldi	r24, 0x40	; 64
     752:	0b d2       	rcall	.+1046   	; 0xb6a <clearExtraLeds>
	}
	
	dbg_RealTempCelsius = conv_ADC_to_Celsius(PIDsampledADC);
     754:	80 91 07 01 	lds	r24, 0x0107
     758:	90 91 08 01 	lds	r25, 0x0108
     75c:	01 dd       	rcall	.-1534   	; 0x160 <conv_ADC_to_Celsius>
     75e:	80 93 54 01 	sts	0x0154, r24
	dbg_RealTempPID = PIDsampledADC;
     762:	80 91 07 01 	lds	r24, 0x0107
     766:	90 91 08 01 	lds	r25, 0x0108
     76a:	90 93 47 01 	sts	0x0147, r25
     76e:	80 93 46 01 	sts	0x0146, r24
     772:	08 95       	ret

00000774 <heaterInit>:
	PIDsampledADC = getNormalizedRingU16(&ringBufADC);
}

void heaterInit(void)
{
	samplePIDProcessValue();
     774:	1d df       	rcall	.-454    	; 0x5b0 <samplePIDProcessValue>
	processPID(0,PIDsampledADC);
     776:	60 91 07 01 	lds	r22, 0x0107
     77a:	70 91 08 01 	lds	r23, 0x0108
     77e:	80 e0       	ldi	r24, 0x00	; 0
     780:	90 e0       	ldi	r25, 0x00	; 0
     782:	1e cf       	rjmp	.-452    	; 0x5c0 <processPID>

00000784 <processHeaterAlerts>:

// Function to process all heater alerts:
//	- getting near to desired temperature
//	- continuous heating when disabled
void processHeaterAlerts(void)
{
     784:	cf 93       	push	r28
     786:	df 93       	push	r29
	static uint8_t tempAlertRange = TEMP_ALERT_RANGE;
	static uint16_t refCapturedTemp = 0xFFFF;
	uint16_t currentTemperature = adc_celsius;
     788:	c0 91 35 01 	lds	r28, 0x0135
     78c:	d0 91 36 01 	lds	r29, 0x0136
	
	
	// Indicate reaching of desired temperature
	if ( (currentTemperature > p.setup_temp_value - tempAlertRange) && (currentTemperature < p.setup_temp_value + tempAlertRange) )
     790:	20 91 37 01 	lds	r18, 0x0137
     794:	30 e0       	ldi	r19, 0x00	; 0
     796:	60 91 73 00 	lds	r22, 0x0073
     79a:	86 2f       	mov	r24, r22
     79c:	90 e0       	ldi	r25, 0x00	; 0
     79e:	a9 01       	movw	r20, r18
     7a0:	48 1b       	sub	r20, r24
     7a2:	59 0b       	sbc	r21, r25
     7a4:	4c 17       	cp	r20, r28
     7a6:	5d 07       	cpc	r21, r29
     7a8:	98 f4       	brcc	.+38     	; 0x7d0 <processHeaterAlerts+0x4c>
     7aa:	82 0f       	add	r24, r18
     7ac:	93 1f       	adc	r25, r19
     7ae:	c8 17       	cp	r28, r24
     7b0:	d9 07       	cpc	r29, r25
     7b2:	70 f4       	brcc	.+28     	; 0x7d0 <processHeaterAlerts+0x4c>
	{
		if ((tempAlertRange == TEMP_ALERT_RANGE) && (heaterState & HEATER_ENABLED))
     7b4:	65 30       	cpi	r22, 0x05	; 5
     7b6:	51 f4       	brne	.+20     	; 0x7cc <processHeaterAlerts+0x48>
     7b8:	80 91 f9 00 	lds	r24, 0x00F9
     7bc:	80 ff       	sbrs	r24, 0
     7be:	06 c0       	rjmp	.+12     	; 0x7cc <processHeaterAlerts+0x48>
		{
			SetBeeperFreq(1000);
     7c0:	88 ee       	ldi	r24, 0xE8	; 232
     7c2:	93 e0       	ldi	r25, 0x03	; 3
     7c4:	5e d8       	rcall	.-3908   	; 0xfffff882 <__eeprom_end+0xff7ef878>
			StartBeep(400);
     7c6:	80 e9       	ldi	r24, 0x90	; 144
     7c8:	91 e0       	ldi	r25, 0x01	; 1
     7ca:	7b d8       	rcall	.-3850   	; 0xfffff8c2 <__eeprom_end+0xff7ef8b8>
		}
		// Add some hysteresis
		tempAlertRange = TEMP_ALERT_RANGE + TEMP_ALERT_HYST;
     7cc:	8a e0       	ldi	r24, 0x0A	; 10
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <processHeaterAlerts+0x4e>
	}			
	else
	{
		tempAlertRange = TEMP_ALERT_RANGE;
     7d0:	85 e0       	ldi	r24, 0x05	; 5
     7d2:	80 93 73 00 	sts	0x0073, r24
	// Growing temperature with heater disabled alert 
	// This alert is done regardless of global sound enable
	// A false triggering may occur if ambient temperature grows.
	// To reset the warning in this case just turn on heater for at least one systimer tick (50ms)
	// If heater is enabled, it is implied that user controls heating process
	if (heaterState & (HEATER_ENABLED | CALIBRATION_ACTIVE))
     7d6:	80 91 f9 00 	lds	r24, 0x00F9
     7da:	83 70       	andi	r24, 0x03	; 3
     7dc:	09 f0       	breq	.+2      	; 0x7e0 <processHeaterAlerts+0x5c>
     7de:	0b c0       	rjmp	.+22     	; 0x7f6 <processHeaterAlerts+0x72>
	{
		// Heater enabled, just save current temperature as reference
		// Same if calibration in progress, even if heater is disabled
		refCapturedTemp = currentTemperature;
	}
	else if (sys_timers.flags & EXPIRED_10SEC)
     7e0:	80 91 81 00 	lds	r24, 0x0081
     7e4:	81 ff       	sbrs	r24, 1
     7e6:	19 c0       	rjmp	.+50     	; 0x81a <processHeaterAlerts+0x96>
	{
		// Heater disabled. If temperature is falling,
		if (currentTemperature < refCapturedTemp)
     7e8:	80 91 74 00 	lds	r24, 0x0074
     7ec:	90 91 75 00 	lds	r25, 0x0075
     7f0:	c8 17       	cp	r28, r24
     7f2:	d9 07       	cpc	r29, r25
     7f4:	28 f4       	brcc	.+10     	; 0x800 <processHeaterAlerts+0x7c>
		{
			// save current temperature as reference
			refCapturedTemp = currentTemperature;
     7f6:	d0 93 75 00 	sts	0x0075, r29
     7fa:	c0 93 74 00 	sts	0x0074, r28
     7fe:	0d c0       	rjmp	.+26     	; 0x81a <processHeaterAlerts+0x96>
		else
		{
			// Heater is disabled. If current temperature is higher than reference + some safe interval,
			// there might be a hardware failure - short circuit, etc
			// BEEP like a devil  }:-(
			if (currentTemperature >= (refCapturedTemp + SAFE_TEMP_INTERVAL))
     800:	0a 96       	adiw	r24, 0x0a	; 10
     802:	c8 17       	cp	r28, r24
     804:	d9 07       	cpc	r29, r25
     806:	48 f0       	brcs	.+18     	; 0x81a <processHeaterAlerts+0x96>
			{
				// Enable beeper output regardless of menu setting
				OverrideSoundDisable();
     808:	6e d8       	rcall	.-3876   	; 0xfffff8e6 <__eeprom_end+0xff7ef8dc>
				SetBeeperFreq(1500);
     80a:	8c ed       	ldi	r24, 0xDC	; 220
     80c:	95 e0       	ldi	r25, 0x05	; 5
     80e:	39 d8       	rcall	.-3982   	; 0xfffff882 <__eeprom_end+0xff7ef878>
				StartBeep(5000);	
     810:	88 e8       	ldi	r24, 0x88	; 136
     812:	93 e1       	ldi	r25, 0x13	; 19
			}
		}
	}
	

}
     814:	df 91       	pop	r29
     816:	cf 91       	pop	r28
			if (currentTemperature >= (refCapturedTemp + SAFE_TEMP_INTERVAL))
			{
				// Enable beeper output regardless of menu setting
				OverrideSoundDisable();
				SetBeeperFreq(1500);
				StartBeep(5000);	
     818:	54 c8       	rjmp	.-3928   	; 0xfffff8c2 <__eeprom_end+0xff7ef8b8>
			}
		}
	}
	

}
     81a:	df 91       	pop	r29
     81c:	cf 91       	pop	r28
     81e:	08 95       	ret

00000820 <restoreGlobalParams>:
	 cpoint1 = gParams.cpoint1;						// Calibration point 1
	 cpoint2 = gParams.cpoint2;						// Calibration point 2
	 cpoint1_adc = gParams.cpoint1_adc;
	 cpoint2_adc = gParams.cpoint2_adc;
*/
	 eeprom_read_block(&p,&nvParams,sizeof(nvParams));
     820:	4a e0       	ldi	r20, 0x0A	; 10
     822:	50 e0       	ldi	r21, 0x00	; 0
     824:	60 e0       	ldi	r22, 0x00	; 0
     826:	70 e0       	ldi	r23, 0x00	; 0
     828:	87 e3       	ldi	r24, 0x37	; 55
     82a:	91 e0       	ldi	r25, 0x01	; 1
     82c:	39 c9       	rjmp	.-3470   	; 0xfffffaa0 <__eeprom_end+0xff7efa96>

0000082e <exitPowerOff>:

void exitPowerOff(void)
{

	// Put all ports into HI-Z
	DDRB = 0x00;
     82e:	17 ba       	out	0x17, r1	; 23
	PORTB = 0x00;
     830:	18 ba       	out	0x18, r1	; 24
	DDRC = 0x00;
     832:	14 ba       	out	0x14, r1	; 20
	PORTC = 0x00;
     834:	15 ba       	out	0x15, r1	; 21
	DDRD = 0x00;
     836:	11 ba       	out	0x11, r1	; 17
	PORTD = 0x00;
     838:	12 ba       	out	0x12, r1	; 18
	
	// Disable all interrupts
	cli();
     83a:	f8 94       	cli
     83c:	ff cf       	rjmp	.-2      	; 0x83c <exitPowerOff+0xe>

0000083e <decode_led_char>:
// Decodes normal string literal to the 
//	7-segment representation
//---------------------------------------------//
static uint8_t decode_led_char(char c)
{
	switch(c)
     83e:	88 33       	cpi	r24, 0x38	; 56
     840:	09 f4       	brne	.+2      	; 0x844 <decode_led_char+0x6>
     842:	54 c0       	rjmp	.+168    	; 0x8ec <decode_led_char+0xae>
     844:	18 f5       	brcc	.+70     	; 0x88c <decode_led_char+0x4e>
     846:	81 33       	cpi	r24, 0x31	; 49
     848:	09 f4       	brne	.+2      	; 0x84c <decode_led_char+0xe>
     84a:	6e c0       	rjmp	.+220    	; 0x928 <decode_led_char+0xea>
     84c:	90 f4       	brcc	.+36     	; 0x872 <decode_led_char+0x34>
     84e:	8d 32       	cpi	r24, 0x2D	; 45
     850:	09 f4       	brne	.+2      	; 0x854 <decode_led_char+0x16>
     852:	52 c0       	rjmp	.+164    	; 0x8f8 <decode_led_char+0xba>
     854:	38 f4       	brcc	.+14     	; 0x864 <decode_led_char+0x26>
     856:	80 32       	cpi	r24, 0x20	; 32
     858:	09 f4       	brne	.+2      	; 0x85c <decode_led_char+0x1e>
     85a:	52 c0       	rjmp	.+164    	; 0x900 <decode_led_char+0xc2>
     85c:	8c 32       	cpi	r24, 0x2C	; 44
     85e:	09 f0       	breq	.+2      	; 0x862 <decode_led_char+0x24>
     860:	64 c0       	rjmp	.+200    	; 0x92a <decode_led_char+0xec>
     862:	48 c0       	rjmp	.+144    	; 0x8f4 <decode_led_char+0xb6>
     864:	8e 32       	cpi	r24, 0x2E	; 46
     866:	09 f4       	brne	.+2      	; 0x86a <decode_led_char+0x2c>
     868:	45 c0       	rjmp	.+138    	; 0x8f4 <decode_led_char+0xb6>
     86a:	80 33       	cpi	r24, 0x30	; 48
     86c:	09 f0       	breq	.+2      	; 0x870 <decode_led_char+0x32>
     86e:	5d c0       	rjmp	.+186    	; 0x92a <decode_led_char+0xec>
     870:	2f c0       	rjmp	.+94     	; 0x8d0 <decode_led_char+0x92>
     872:	84 33       	cpi	r24, 0x34	; 52
     874:	99 f1       	breq	.+102    	; 0x8dc <decode_led_char+0x9e>
     876:	30 f4       	brcc	.+12     	; 0x884 <decode_led_char+0x46>
     878:	82 33       	cpi	r24, 0x32	; 50
     87a:	61 f1       	breq	.+88     	; 0x8d4 <decode_led_char+0x96>
     87c:	83 33       	cpi	r24, 0x33	; 51
     87e:	09 f0       	breq	.+2      	; 0x882 <decode_led_char+0x44>
     880:	54 c0       	rjmp	.+168    	; 0x92a <decode_led_char+0xec>
     882:	2a c0       	rjmp	.+84     	; 0x8d8 <decode_led_char+0x9a>
     884:	86 33       	cpi	r24, 0x36	; 54
     886:	71 f1       	breq	.+92     	; 0x8e4 <decode_led_char+0xa6>
     888:	78 f5       	brcc	.+94     	; 0x8e8 <decode_led_char+0xaa>
     88a:	2a c0       	rjmp	.+84     	; 0x8e0 <decode_led_char+0xa2>
     88c:	8e 34       	cpi	r24, 0x4E	; 78
     88e:	09 f4       	brne	.+2      	; 0x892 <decode_led_char+0x54>
     890:	41 c0       	rjmp	.+130    	; 0x914 <decode_led_char+0xd6>
     892:	78 f4       	brcc	.+30     	; 0x8b2 <decode_led_char+0x74>
     894:	83 34       	cpi	r24, 0x43	; 67
     896:	d1 f1       	breq	.+116    	; 0x90c <decode_led_char+0xce>
     898:	30 f4       	brcc	.+12     	; 0x8a6 <decode_led_char+0x68>
     89a:	89 33       	cpi	r24, 0x39	; 57
     89c:	49 f1       	breq	.+82     	; 0x8f0 <decode_led_char+0xb2>
     89e:	81 34       	cpi	r24, 0x41	; 65
     8a0:	09 f0       	breq	.+2      	; 0x8a4 <decode_led_char+0x66>
     8a2:	43 c0       	rjmp	.+134    	; 0x92a <decode_led_char+0xec>
     8a4:	31 c0       	rjmp	.+98     	; 0x908 <decode_led_char+0xca>
     8a6:	85 34       	cpi	r24, 0x45	; 69
     8a8:	d9 f1       	breq	.+118    	; 0x920 <decode_led_char+0xe2>
     8aa:	b0 f1       	brcs	.+108    	; 0x918 <decode_led_char+0xda>
     8ac:	86 34       	cpi	r24, 0x46	; 70
     8ae:	e9 f5       	brne	.+122    	; 0x92a <decode_led_char+0xec>
     8b0:	2f c0       	rjmp	.+94     	; 0x910 <decode_led_char+0xd2>
     8b2:	82 35       	cpi	r24, 0x52	; 82
     8b4:	b9 f1       	breq	.+110    	; 0x924 <decode_led_char+0xe6>
     8b6:	28 f4       	brcc	.+10     	; 0x8c2 <decode_led_char+0x84>
     8b8:	8f 34       	cpi	r24, 0x4F	; 79
     8ba:	51 f0       	breq	.+20     	; 0x8d0 <decode_led_char+0x92>
     8bc:	80 35       	cpi	r24, 0x50	; 80
     8be:	a9 f5       	brne	.+106    	; 0x92a <decode_led_char+0xec>
     8c0:	2d c0       	rjmp	.+90     	; 0x91c <decode_led_char+0xde>
     8c2:	8f 35       	cpi	r24, 0x5F	; 95
     8c4:	d9 f0       	breq	.+54     	; 0x8fc <decode_led_char+0xbe>
     8c6:	80 3b       	cpi	r24, 0xB0	; 176
     8c8:	e9 f0       	breq	.+58     	; 0x904 <decode_led_char+0xc6>
     8ca:	83 35       	cpi	r24, 0x53	; 83
     8cc:	71 f5       	brne	.+92     	; 0x92a <decode_led_char+0xec>
     8ce:	08 c0       	rjmp	.+16     	; 0x8e0 <decode_led_char+0xa2>
	{
		case 'O':
		case '0': return (SEGA | SEGB | SEGC | SEGD | SEGE | SEGF);
     8d0:	8f e3       	ldi	r24, 0x3F	; 63
     8d2:	08 95       	ret
		case '1': return (SEGB | SEGC );
		case '2': return (SEGA | SEGB | SEGD | SEGE | SEGG);
     8d4:	8b e5       	ldi	r24, 0x5B	; 91
     8d6:	08 95       	ret
		case '3': return (SEGA | SEGB | SEGC | SEGD | SEGG);
     8d8:	8f e4       	ldi	r24, 0x4F	; 79
     8da:	08 95       	ret
		case '4': return (SEGB | SEGC | SEGF | SEGG);
     8dc:	86 e6       	ldi	r24, 0x66	; 102
     8de:	08 95       	ret
		case 'S':
		case '5': return (SEGA | SEGC | SEGD | SEGF | SEGG);
     8e0:	8d e6       	ldi	r24, 0x6D	; 109
     8e2:	08 95       	ret
		case '6': return (SEGA | SEGC | SEGD | SEGE | SEGF | SEGG);
     8e4:	8d e7       	ldi	r24, 0x7D	; 125
     8e6:	08 95       	ret
		case '7': return (SEGA | SEGB | SEGC );
     8e8:	87 e0       	ldi	r24, 0x07	; 7
     8ea:	08 95       	ret
		case '8': return (SEGA | SEGB | SEGC | SEGD | SEGE | SEGF | SEGG);
     8ec:	8f e7       	ldi	r24, 0x7F	; 127
     8ee:	08 95       	ret
		case '9': return (SEGA | SEGB | SEGC | SEGD | SEGF | SEGG);
     8f0:	8f e6       	ldi	r24, 0x6F	; 111
     8f2:	08 95       	ret
		case '.': return (SEGH);
		case ',': return (SEGH);
     8f4:	80 e8       	ldi	r24, 0x80	; 128
     8f6:	08 95       	ret
		case '-': return (SEGG);
     8f8:	80 e4       	ldi	r24, 0x40	; 64
     8fa:	08 95       	ret
		case '_': return (SEGD);
     8fc:	88 e0       	ldi	r24, 0x08	; 8
     8fe:	08 95       	ret
		case ' ': return 0;
     900:	80 e0       	ldi	r24, 0x00	; 0
     902:	08 95       	ret
		case 0xB0:	return (SEGA | SEGB | SEGF | SEGG);		// Degree sign
     904:	83 e6       	ldi	r24, 0x63	; 99
     906:	08 95       	ret
		case 'A': return (SEGA | SEGB | SEGC | SEGE | SEGF | SEGG);
     908:	87 e7       	ldi	r24, 0x77	; 119
     90a:	08 95       	ret
		case 'C':	return (SEGA | SEGD | SEGE | SEGF);
     90c:	89 e3       	ldi	r24, 0x39	; 57
     90e:	08 95       	ret
		case 'F':	return (SEGA | SEGE | SEGF | SEGG);
     910:	81 e7       	ldi	r24, 0x71	; 113
     912:	08 95       	ret
		case 'N':	return (SEGC | SEGE | SEGG);
     914:	84 e5       	ldi	r24, 0x54	; 84
     916:	08 95       	ret
		case 'D': return (SEGB | SEGC | SEGD | SEGE | SEGG);
     918:	8e e5       	ldi	r24, 0x5E	; 94
     91a:	08 95       	ret
		case 'P': return (SEGA | SEGB | SEGE | SEGF | SEGG);
     91c:	83 e7       	ldi	r24, 0x73	; 115
     91e:	08 95       	ret
		case 'E': return (SEGA | SEGD | SEGE | SEGF | SEGG);
     920:	89 e7       	ldi	r24, 0x79	; 121
     922:	08 95       	ret
		case 'R': return (SEGE | SEGG);
     924:	80 e5       	ldi	r24, 0x50	; 80
     926:	08 95       	ret
{
	switch(c)
	{
		case 'O':
		case '0': return (SEGA | SEGB | SEGC | SEGD | SEGE | SEGF);
		case '1': return (SEGB | SEGC );
     928:	86 e0       	ldi	r24, 0x06	; 6
		case 'P': return (SEGA | SEGB | SEGE | SEGF | SEGG);
		case 'E': return (SEGA | SEGD | SEGE | SEGF | SEGG);
		case 'R': return (SEGE | SEGG);
		default:  return c;	
	}
}
     92a:	08 95       	ret

0000092c <wrap_led_buffer_index>:
//---------------------------------------------//
// Ensures that index is inside the buffer
// -128 <= index <= 127
//---------------------------------------------//
static uint8_t wrap_led_buffer_index(int8_t buf_index)
{
     92c:	28 2f       	mov	r18, r24
	uint8_t new_index_u;
	new_index_u = (uint8_t) ((buf_index < 0) ? -buf_index : buf_index);
     92e:	87 fd       	sbrc	r24, 7
     930:	81 95       	neg	r24
	if (new_index_u >= LED_BUFFER_LENGTH)
     932:	8e 30       	cpi	r24, 0x0E	; 14
     934:	18 f0       	brcs	.+6      	; 0x93c <wrap_led_buffer_index+0x10>
		new_index_u = new_index_u % LED_BUFFER_LENGTH;
     936:	6e e0       	ldi	r22, 0x0E	; 14
     938:	27 d8       	rcall	.-4018   	; 0xfffff988 <__eeprom_end+0xff7ef97e>
     93a:	89 2f       	mov	r24, r25
	new_index_u = ((buf_index >= 0) || (new_index_u == 0)) ? new_index_u :  LED_BUFFER_LENGTH - new_index_u ;
     93c:	27 ff       	sbrs	r18, 7
     93e:	05 c0       	rjmp	.+10     	; 0x94a <wrap_led_buffer_index+0x1e>
     940:	88 23       	and	r24, r24
     942:	19 f0       	breq	.+6      	; 0x94a <wrap_led_buffer_index+0x1e>
     944:	9e e0       	ldi	r25, 0x0E	; 14
     946:	98 1b       	sub	r25, r24
     948:	89 2f       	mov	r24, r25
	return new_index_u;
}
     94a:	08 95       	ret

0000094c <processLedIndicator>:
// Call this function N times per sec to get N/NUM_DIGITS_TOTAL display update rate, where
// NUM_DIGITS_TOTAL is number_of_digits_of_LED_display if no extra LEDs are used or
// (number_of_digits_of_LED_display + 1) otherwise.
//---------------------------------------------//
void processLedIndicator()
{
     94c:	cf 93       	push	r28
	disable_led_segments();
	#endif
	
	
	// Perform regular shift
	led_clock_pulse(!LED_DIGIT_ACT_LVL);
     94e:	81 e0       	ldi	r24, 0x01	; 1
     950:	13 d1       	rcall	.+550    	; 0xb78 <led_clock_pulse>
	
	switch (wActivePos)
     952:	c0 91 e3 00 	lds	r28, 0x00E3
     956:	cc 23       	and	r28, r28
     958:	19 f0       	breq	.+6      	; 0x960 <processLedIndicator+0x14>
     95a:	c6 30       	cpi	r28, 0x06	; 6
     95c:	d1 f5       	brne	.+116    	; 0x9d2 <processLedIndicator+0x86>
     95e:	11 c0       	rjmp	.+34     	; 0x982 <processLedIndicator+0x36>
	{
	case 0:
		// Get buttons
		#ifndef CLEAN_OPERATION
		disable_led_segments();
     960:	37 d1       	rcall	.+622    	; 0xbd0 <disable_led_segments>
		#endif
		enable_led_segments_pullups();
     962:	28 d1       	rcall	.+592    	; 0xbb4 <enable_led_segments_pullups>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     964:	85 e3       	ldi	r24, 0x35	; 53
     966:	8a 95       	dec	r24
     968:	f1 f7       	brne	.-4      	; 0x966 <processLedIndicator+0x1a>
     96a:	00 00       	nop
		_delay_us(PULLUP_DELAY_US);
		capture_button_state();
     96c:	38 d1       	rcall	.+624    	; 0xbde <capture_button_state>
		#ifndef CLEAN_OPERATION
		enable_led_segments();
     96e:	29 d1       	rcall	.+594    	; 0xbc2 <enable_led_segments>
		#endif
		// Start new cycle with active digit level
		led_clock_pulse(LED_DIGIT_ACT_LVL);
     970:	80 e0       	ldi	r24, 0x00	; 0
     972:	02 d1       	rcall	.+516    	; 0xb78 <led_clock_pulse>
		// Always start new cycle from specified buffer start position
		bufActivePos = wStartPos;
     974:	80 91 58 01 	lds	r24, 0x0158
     978:	80 93 e2 00 	sts	0x00E2, r24
		next_wActivePos = wActivePos + 1;
     97c:	c0 91 e3 00 	lds	r28, 0x00E3
     980:	28 c0       	rjmp	.+80     	; 0x9d2 <processLedIndicator+0x86>
//---------------------------------------------//
// Performs window shifting
//---------------------------------------------//
static void processWindowShifter(void)
{
	if (shifterState == LED_SHIFT_DONE)
     982:	80 91 59 01 	lds	r24, 0x0159
     986:	81 11       	cpse	r24, r1
     988:	01 c0       	rjmp	.+2      	; 0x98c <processLedIndicator+0x40>
     98a:	1b c0       	rjmp	.+54     	; 0x9c2 <processLedIndicator+0x76>
		return;
	
	// Process shift timer
	processSoftTimer8b(&shiftTimer);	
     98c:	84 ee       	ldi	r24, 0xE4	; 228
     98e:	90 e0       	ldi	r25, 0x00	; 0
     990:	ef d6       	rcall	.+3550   	; 0x1770 <processSoftTimer8b>
	
	if (shiftTimer.FTop)
     992:	80 91 e4 00 	lds	r24, 0x00E4
     996:	85 ff       	sbrs	r24, 5
     998:	14 c0       	rjmp	.+40     	; 0x9c2 <processLedIndicator+0x76>
	{
		// Check if finished
		if (wStartPos == bufStartPos)	
     99a:	80 91 58 01 	lds	r24, 0x0158
     99e:	90 91 5a 01 	lds	r25, 0x015A
     9a2:	89 13       	cpse	r24, r25
     9a4:	03 c0       	rjmp	.+6      	; 0x9ac <processLedIndicator+0x60>
		{
			// Update state
			shifterState = LED_SHIFT_DONE;
     9a6:	10 92 59 01 	sts	0x0159, r1
     9aa:	0b c0       	rjmp	.+22     	; 0x9c2 <processLedIndicator+0x76>
		}
		else if (shifterState == LED_SHIFT_RIGHT)
     9ac:	90 91 59 01 	lds	r25, 0x0159
     9b0:	92 30       	cpi	r25, 0x02	; 2
     9b2:	49 f4       	brne	.+18     	; 0x9c6 <processLedIndicator+0x7a>
// Increments index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t inc_buffer_position(uint8_t position)
{
	return (position >= LED_BUFFER_LENGTH - 1) ? 0 : position + 1;
     9b4:	8d 30       	cpi	r24, 0x0D	; 13
     9b6:	10 f4       	brcc	.+4      	; 0x9bc <processLedIndicator+0x70>
     9b8:	8f 5f       	subi	r24, 0xFF	; 255
     9ba:	01 c0       	rjmp	.+2      	; 0x9be <processLedIndicator+0x72>
     9bc:	80 e0       	ldi	r24, 0x00	; 0
			// Update state
			shifterState = LED_SHIFT_DONE;
		}
		else if (shifterState == LED_SHIFT_RIGHT)
		{
			wStartPos = inc_buffer_position(wStartPos);	
     9be:	80 93 58 01 	sts	0x0158, r24
		// Always start new cycle from specified buffer start position
		bufActivePos = wStartPos;
		next_wActivePos = wActivePos + 1;
		break;
	case NUM_DIGITS_TOTAL-1:
		next_wActivePos = 0;
     9c2:	c0 e0       	ldi	r28, 0x00	; 0
     9c4:	07 c0       	rjmp	.+14     	; 0x9d4 <processLedIndicator+0x88>
// Decrements index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t dec_buffer_position(uint8_t position)
{
	return (position == 0) ? LED_BUFFER_LENGTH - 1 : position - 1;
     9c6:	88 23       	and	r24, r24
     9c8:	11 f0       	breq	.+4      	; 0x9ce <processLedIndicator+0x82>
     9ca:	81 50       	subi	r24, 0x01	; 1
     9cc:	f8 cf       	rjmp	.-16     	; 0x9be <processLedIndicator+0x72>
     9ce:	8d e0       	ldi	r24, 0x0D	; 13
     9d0:	f6 cf       	rjmp	.-20     	; 0x9be <processLedIndicator+0x72>
		next_wActivePos = 0;
		// Shift LED window
		processWindowShifter();	
		break;
	default:
		next_wActivePos = wActivePos + 1;
     9d2:	cf 5f       	subi	r28, 0xFF	; 255
		break;
	}		
	
	#ifdef 	USE_EXTRA_LED_DIGIT
	if (wActivePos == EXTRA_DIGIT_NUM)
     9d4:	80 91 e3 00 	lds	r24, 0x00E3
     9d8:	86 30       	cpi	r24, 0x06	; 6
     9da:	21 f4       	brne	.+8      	; 0x9e4 <processLedIndicator+0x98>
	{
		// Output separate LEDs state
		set_led_segments(extra_led_state);
     9dc:	80 91 57 01 	lds	r24, 0x0157
     9e0:	db d0       	rcall	.+438    	; 0xb98 <set_led_segments>
     9e2:	10 c0       	rjmp	.+32     	; 0xa04 <processLedIndicator+0xb8>
	}
	else
	#endif
	{
		// Output new segment data
		set_led_segments(led_data_buffer[bufActivePos]);
     9e4:	e0 91 e2 00 	lds	r30, 0x00E2
     9e8:	f0 e0       	ldi	r31, 0x00	; 0
     9ea:	e5 5a       	subi	r30, 0xA5	; 165
     9ec:	fe 4f       	sbci	r31, 0xFE	; 254
     9ee:	80 81       	ld	r24, Z
     9f0:	d3 d0       	rcall	.+422    	; 0xb98 <set_led_segments>
		// Wrap around buffer length
		bufActivePos = inc_buffer_position(bufActivePos );
     9f2:	80 91 e2 00 	lds	r24, 0x00E2
// Increments index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t inc_buffer_position(uint8_t position)
{
	return (position >= LED_BUFFER_LENGTH - 1) ? 0 : position + 1;
     9f6:	8d 30       	cpi	r24, 0x0D	; 13
     9f8:	10 f4       	brcc	.+4      	; 0x9fe <processLedIndicator+0xb2>
     9fa:	8f 5f       	subi	r24, 0xFF	; 255
     9fc:	01 c0       	rjmp	.+2      	; 0xa00 <processLedIndicator+0xb4>
     9fe:	80 e0       	ldi	r24, 0x00	; 0
	#endif
	{
		// Output new segment data
		set_led_segments(led_data_buffer[bufActivePos]);
		// Wrap around buffer length
		bufActivePos = inc_buffer_position(bufActivePos );
     a00:	80 93 e2 00 	sts	0x00E2, r24
	}
		
	wActivePos = next_wActivePos;
     a04:	c0 93 e3 00 	sts	0x00E3, r28
	
	#ifdef CLEAN_OPERATION
	enable_led_segments();
	#endif

}
     a08:	cf 91       	pop	r28
     a0a:	08 95       	ret

00000a0c <fillLedBuffer>:
//---------------------------------------------//
// Fills buffer from (bufStartPos + offset) 
//	position with single char
//---------------------------------------------//
void fillLedBuffer(int8_t offset, uint8_t length, char c)
{
     a0c:	0f 93       	push	r16
     a0e:	1f 93       	push	r17
     a10:	cf 93       	push	r28
     a12:	df 93       	push	r29
     a14:	1f 92       	push	r1
     a16:	cd b7       	in	r28, 0x3d	; 61
     a18:	de b7       	in	r29, 0x3e	; 62
     a1a:	18 2f       	mov	r17, r24
     a1c:	84 2f       	mov	r24, r20
	uint8_t val = decode_led_char(c);
     a1e:	69 83       	std	Y+1, r22	; 0x01
     a20:	0e df       	rcall	.-484    	; 0x83e <decode_led_char>
     a22:	08 2f       	mov	r16, r24
	// Ensure index is inside the buffer
	uint8_t position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
     a24:	80 91 5a 01 	lds	r24, 0x015A
     a28:	81 0f       	add	r24, r17
     a2a:	80 df       	rcall	.-256    	; 0x92c <wrap_led_buffer_index>
	while(length--)
     a2c:	69 81       	ldd	r22, Y+1	; 0x01
     a2e:	0a c0       	rjmp	.+20     	; 0xa44 <fillLedBuffer+0x38>
	{
		led_data_buffer[position] = val;
     a30:	e8 2f       	mov	r30, r24
     a32:	f0 e0       	ldi	r31, 0x00	; 0
     a34:	e5 5a       	subi	r30, 0xA5	; 165
     a36:	fe 4f       	sbci	r31, 0xFE	; 254
     a38:	00 83       	st	Z, r16
// Increments index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t inc_buffer_position(uint8_t position)
{
	return (position >= LED_BUFFER_LENGTH - 1) ? 0 : position + 1;
     a3a:	8d 30       	cpi	r24, 0x0D	; 13
     a3c:	10 f4       	brcc	.+4      	; 0xa42 <fillLedBuffer+0x36>
     a3e:	8f 5f       	subi	r24, 0xFF	; 255
     a40:	01 c0       	rjmp	.+2      	; 0xa44 <fillLedBuffer+0x38>
     a42:	80 e0       	ldi	r24, 0x00	; 0
void fillLedBuffer(int8_t offset, uint8_t length, char c)
{
	uint8_t val = decode_led_char(c);
	// Ensure index is inside the buffer
	uint8_t position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
	while(length--)
     a44:	61 50       	subi	r22, 0x01	; 1
     a46:	a0 f7       	brcc	.-24     	; 0xa30 <fillLedBuffer+0x24>
	{
		led_data_buffer[position] = val;
		position = inc_buffer_position(position);
	}
}
     a48:	0f 90       	pop	r0
     a4a:	df 91       	pop	r29
     a4c:	cf 91       	pop	r28
     a4e:	1f 91       	pop	r17
     a50:	0f 91       	pop	r16
     a52:	08 95       	ret

00000a54 <startShiftingWindowLeft>:
//	LED window left 
//---------------------------------------------//
void startShiftingWindowLeft(void)
{
	// Clear spaces between menu states
	fillLedBuffer(-2,2,' ');
     a54:	40 e2       	ldi	r20, 0x20	; 32
     a56:	62 e0       	ldi	r22, 0x02	; 2
     a58:	8e ef       	ldi	r24, 0xFE	; 254
     a5a:	d8 df       	rcall	.-80     	; 0xa0c <fillLedBuffer>
	// Set new buffer position for writing
	bufStartPos = wrap_led_buffer_index( (int8_t)bufStartPos - (NUM_DIGITS + 2) );
     a5c:	80 91 5a 01 	lds	r24, 0x015A
     a60:	88 50       	subi	r24, 0x08	; 8
     a62:	64 df       	rcall	.-312    	; 0x92c <wrap_led_buffer_index>
     a64:	80 93 5a 01 	sts	0x015A, r24
	// Set shifter state
	shifterState = LED_SHIFT_LEFT;
     a68:	81 e0       	ldi	r24, 0x01	; 1
     a6a:	80 93 59 01 	sts	0x0159, r24
     a6e:	08 95       	ret

00000a70 <startShiftingWindowRight>:
//	LED window right 
//---------------------------------------------//
void startShiftingWindowRight(void)
{
	// Clear spaces between menu states
	fillLedBuffer(NUM_DIGITS,2,' ');
     a70:	40 e2       	ldi	r20, 0x20	; 32
     a72:	62 e0       	ldi	r22, 0x02	; 2
     a74:	86 e0       	ldi	r24, 0x06	; 6
     a76:	ca df       	rcall	.-108    	; 0xa0c <fillLedBuffer>
	// Set new buffer position for writing
	bufStartPos = wrap_led_buffer_index( (int8_t)bufStartPos + NUM_DIGITS + 2 );
     a78:	80 91 5a 01 	lds	r24, 0x015A
     a7c:	88 5f       	subi	r24, 0xF8	; 248
     a7e:	56 df       	rcall	.-340    	; 0x92c <wrap_led_buffer_index>
     a80:	80 93 5a 01 	sts	0x015A, r24
	// Set shifter state
	shifterState = LED_SHIFT_RIGHT;
     a84:	82 e0       	ldi	r24, 0x02	; 2
     a86:	80 93 59 01 	sts	0x0159, r24
     a8a:	08 95       	ret

00000a8c <initLedIndicator>:
//---------------------------------------------//
//	Initialization
//	Call this function at start of your program
//---------------------------------------------//
void initLedIndicator()
{
     a8c:	cf 93       	push	r28
	uint8_t i;
	// First disable outputs
	disable_led_segments();
     a8e:	a0 d0       	rcall	.+320    	; 0xbd0 <disable_led_segments>
     a90:	c7 e0       	ldi	r28, 0x07	; 7
	// Fill shift register with non-active levels
	for (i=0;i<NUM_DIGITS_TOTAL;i++)
	{
		led_clock_pulse(!LED_DIGIT_ACT_LVL);
     a92:	81 e0       	ldi	r24, 0x01	; 1
     a94:	71 d0       	rcall	.+226    	; 0xb78 <led_clock_pulse>
     a96:	c1 50       	subi	r28, 0x01	; 1
{
	uint8_t i;
	// First disable outputs
	disable_led_segments();
	// Fill shift register with non-active levels
	for (i=0;i<NUM_DIGITS_TOTAL;i++)
     a98:	e1 f7       	brne	.-8      	; 0xa92 <initLedIndicator+0x6>
	{
		led_clock_pulse(!LED_DIGIT_ACT_LVL);
	}
	// Now enable outputs
	enable_led_segments();
     a9a:	93 d0       	rcall	.+294    	; 0xbc2 <enable_led_segments>
	
	// Reset pointers
	wStartPos = 0;
     a9c:	10 92 58 01 	sts	0x0158, r1
	bufStartPos = 0;
     aa0:	10 92 5a 01 	sts	0x015A, r1
	bufActivePos = 0;
     aa4:	10 92 e2 00 	sts	0x00E2, r1
	wActivePos = 0;
     aa8:	10 92 e3 00 	sts	0x00E3, r1
	#ifdef 	USE_EXTRA_LED_DIGIT
	extra_led_state = 0;
     aac:	10 92 57 01 	sts	0x0157, r1
	#endif
	
	// Clear the buffer 
	fillLedBuffer(0,LED_BUFFER_LENGTH,' ');
     ab0:	40 e2       	ldi	r20, 0x20	; 32
     ab2:	6e e0       	ldi	r22, 0x0E	; 14
     ab4:	80 e0       	ldi	r24, 0x00	; 0
     ab6:	aa df       	rcall	.-172    	; 0xa0c <fillLedBuffer>
	
	// Initialize shift timer - always enabled, but 
	//	processed only when shifting is active
	shifterState = LED_SHIFT_DONE;
     ab8:	10 92 59 01 	sts	0x0159, r1
	shiftTimer.Enabled = 1;
     abc:	80 91 e4 00 	lds	r24, 0x00E4
	shiftTimer.RunOnce = 0;
     ac0:	81 60       	ori	r24, 0x01	; 1
     ac2:	8d 7f       	andi	r24, 0xFD	; 253
     ac4:	80 93 e4 00 	sts	0x00E4, r24
	shiftTimer.Top = LED_SHIFT_INTERVAL-1;
     ac8:	89 e0       	ldi	r24, 0x09	; 9
     aca:	80 93 e6 00 	sts	0x00E6, r24
}
     ace:	cf 91       	pop	r28
     ad0:	08 95       	ret

00000ad2 <printLedBuffer>:
//		str - null-terminated char string
// Comma and dot (".", ",") get special processing - first occurrence is added to
// a preceding char, next are displayed as a single digit
//---------------------------------------------//
void printLedBuffer(int8_t offset, char* str)
{
     ad2:	ff 92       	push	r15
     ad4:	0f 93       	push	r16
     ad6:	1f 93       	push	r17
     ad8:	cf 93       	push	r28
     ada:	df 93       	push	r29
     adc:	eb 01       	movw	r28, r22
	char c;
	uint8_t decoded_sym;
	uint8_t state = 0x02;
	uint8_t comma_pos;
	// Ensure index is inside the buffer
	uint8_t buffer_position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
     ade:	90 91 5a 01 	lds	r25, 0x015A
     ae2:	89 0f       	add	r24, r25
     ae4:	23 df       	rcall	.-442    	; 0x92c <wrap_led_buffer_index>
     ae6:	18 2f       	mov	r17, r24
	comma_pos = buffer_position;
     ae8:	f8 2e       	mov	r15, r24
//---------------------------------------------//
void printLedBuffer(int8_t offset, char* str)
{
	char c;
	uint8_t decoded_sym;
	uint8_t state = 0x02;
     aea:	02 e0       	ldi	r16, 0x02	; 2
	uint8_t comma_pos;
	// Ensure index is inside the buffer
	uint8_t buffer_position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
	comma_pos = buffer_position;
	// Output chars
	while((c = *str++))
     aec:	23 c0       	rjmp	.+70     	; 0xb34 <printLedBuffer+0x62>
	{
		decoded_sym = decode_led_char(c);
     aee:	a7 de       	rcall	.-690    	; 0x83e <decode_led_char>
		state = (decoded_sym == SEGH) ? (state | 0x01) : (state & ~0x01);
     af0:	80 38       	cpi	r24, 0x80	; 128
     af2:	11 f4       	brne	.+4      	; 0xaf8 <printLedBuffer+0x26>
     af4:	01 60       	ori	r16, 0x01	; 1
     af6:	01 c0       	rjmp	.+2      	; 0xafa <printLedBuffer+0x28>
     af8:	0e 7f       	andi	r16, 0xFE	; 254
		if (state == 0x01)			
     afa:	01 30       	cpi	r16, 0x01	; 1
     afc:	49 f4       	brne	.+18     	; 0xb10 <printLedBuffer+0x3e>
		{
			led_data_buffer[comma_pos] |= decoded_sym;
     afe:	ef 2d       	mov	r30, r15
     b00:	f0 e0       	ldi	r31, 0x00	; 0
     b02:	e5 5a       	subi	r30, 0xA5	; 165
     b04:	fe 4f       	sbci	r31, 0xFE	; 254
     b06:	90 81       	ld	r25, Z
     b08:	98 2b       	or	r25, r24
     b0a:	90 83       	st	Z, r25
     b0c:	81 2f       	mov	r24, r17
     b0e:	0b c0       	rjmp	.+22     	; 0xb26 <printLedBuffer+0x54>
		}
		else
		{
			led_data_buffer[buffer_position] = decoded_sym;	
     b10:	e1 2f       	mov	r30, r17
     b12:	f0 e0       	ldi	r31, 0x00	; 0
     b14:	e5 5a       	subi	r30, 0xA5	; 165
     b16:	fe 4f       	sbci	r31, 0xFE	; 254
     b18:	80 83       	st	Z, r24
// Increments index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t inc_buffer_position(uint8_t position)
{
	return (position >= LED_BUFFER_LENGTH - 1) ? 0 : position + 1;
     b1a:	1d 30       	cpi	r17, 0x0D	; 13
     b1c:	18 f4       	brcc	.+6      	; 0xb24 <printLedBuffer+0x52>
     b1e:	81 2f       	mov	r24, r17
     b20:	8f 5f       	subi	r24, 0xFF	; 255
     b22:	01 c0       	rjmp	.+2      	; 0xb26 <printLedBuffer+0x54>
     b24:	80 e0       	ldi	r24, 0x00	; 0
		comma_pos = buffer_position;
		if (state != 0x01)
		{
			buffer_position = inc_buffer_position(buffer_position);
		}
		state = (state & 0x01) ? 0x03 : 0x00;		
     b26:	00 ff       	sbrs	r16, 0
     b28:	02 c0       	rjmp	.+4      	; 0xb2e <printLedBuffer+0x5c>
     b2a:	03 e0       	ldi	r16, 0x03	; 3
     b2c:	01 c0       	rjmp	.+2      	; 0xb30 <printLedBuffer+0x5e>
     b2e:	00 e0       	ldi	r16, 0x00	; 0
     b30:	f1 2e       	mov	r15, r17
     b32:	18 2f       	mov	r17, r24
	uint8_t comma_pos;
	// Ensure index is inside the buffer
	uint8_t buffer_position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
	comma_pos = buffer_position;
	// Output chars
	while((c = *str++))
     b34:	89 91       	ld	r24, Y+
     b36:	81 11       	cpse	r24, r1
     b38:	da cf       	rjmp	.-76     	; 0xaee <printLedBuffer+0x1c>
		{
			buffer_position = inc_buffer_position(buffer_position);
		}
		state = (state & 0x01) ? 0x03 : 0x00;		
	}
}
     b3a:	df 91       	pop	r29
     b3c:	cf 91       	pop	r28
     b3e:	1f 91       	pop	r17
     b40:	0f 91       	pop	r16
     b42:	ff 90       	pop	r15
     b44:	08 95       	ret

00000b46 <setComma>:
//	buffer cell
//---------------------------------------------//
void setComma(int8_t offset)
{
	// Ensure index is inside the buffer
	uint8_t position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
     b46:	90 91 5a 01 	lds	r25, 0x015A
     b4a:	89 0f       	add	r24, r25
     b4c:	ef de       	rcall	.-546    	; 0x92c <wrap_led_buffer_index>
	led_data_buffer[position] |= (SEGH);
     b4e:	e8 2f       	mov	r30, r24
     b50:	f0 e0       	ldi	r31, 0x00	; 0
     b52:	e5 5a       	subi	r30, 0xA5	; 165
     b54:	fe 4f       	sbci	r31, 0xFE	; 254
     b56:	80 81       	ld	r24, Z
     b58:	80 68       	ori	r24, 0x80	; 128
     b5a:	80 83       	st	Z, r24
     b5c:	08 95       	ret

00000b5e <setExtraLeds>:
// Argument is ORed with current LED state
//---------------------------------------------//
inline void setExtraLeds(uint8_t leds_set_value)
{
		//asm("cli");
		extra_led_state |= leds_set_value;
     b5e:	90 91 57 01 	lds	r25, 0x0157
     b62:	98 2b       	or	r25, r24
     b64:	90 93 57 01 	sts	0x0157, r25
     b68:	08 95       	ret

00000b6a <clearExtraLeds>:
// Argument is AND NOTed with current LED state
//---------------------------------------------//
inline void clearExtraLeds(uint8_t leds_clear_value)
{
		//asm("cli");
		extra_led_state &= ~leds_clear_value;
     b6a:	90 91 57 01 	lds	r25, 0x0157
     b6e:	80 95       	com	r24
     b70:	89 23       	and	r24, r25
     b72:	80 93 57 01 	sts	0x0157, r24
     b76:	08 95       	ret

00000b78 <led_clock_pulse>:


// Clocks in bit into the shift register
void led_clock_pulse(uint8_t bit)
{
	if (bit)
     b78:	88 23       	and	r24, r24
     b7a:	11 f0       	breq	.+4      	; 0xb80 <led_clock_pulse+0x8>
		PORTB |= (1<<PB_LED_DOUT);
     b7c:	c0 9a       	sbi	0x18, 0	; 24
     b7e:	01 c0       	rjmp	.+2      	; 0xb82 <led_clock_pulse+0xa>
	else
		PORTB &= ~(1<<PB_LED_DOUT);
     b80:	c0 98       	cbi	0x18, 0	; 24
     b82:	8a e1       	ldi	r24, 0x1A	; 26
     b84:	8a 95       	dec	r24
     b86:	f1 f7       	brne	.-4      	; 0xb84 <led_clock_pulse+0xc>
     b88:	00 c0       	rjmp	.+0      	; 0xb8a <led_clock_pulse+0x12>
	_delay_us(SETUP_DELAY_US);
	PORTB |= (1<<PB_LED_CLK);
     b8a:	c2 9a       	sbi	0x18, 2	; 24
     b8c:	8a e1       	ldi	r24, 0x1A	; 26
     b8e:	8a 95       	dec	r24
     b90:	f1 f7       	brne	.-4      	; 0xb8e <led_clock_pulse+0x16>
     b92:	00 c0       	rjmp	.+0      	; 0xb94 <led_clock_pulse+0x1c>
	_delay_us(SHIFT_DELAY_US);
	PORTB &= ~(1<<PB_LED_CLK);
     b94:	c2 98       	cbi	0x18, 2	; 24
     b96:	08 95       	ret

00000b98 <set_led_segments>:
// Outputs decoded segment data to port bits
void set_led_segments(uint8_t seg_ch)
{
	uint8_t pdat;
	seg_ch ^= LED_SEGMENT_MASK;
	pdat = PORTC & ~( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
     b98:	25 b3       	in	r18, 0x15	; 21
	pdat |= (seg_ch & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
     b9a:	98 2f       	mov	r25, r24
     b9c:	9f 71       	andi	r25, 0x1F	; 31
// Outputs decoded segment data to port bits
void set_led_segments(uint8_t seg_ch)
{
	uint8_t pdat;
	seg_ch ^= LED_SEGMENT_MASK;
	pdat = PORTC & ~( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
     b9e:	20 7e       	andi	r18, 0xE0	; 224
	pdat |= (seg_ch & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
     ba0:	92 2b       	or	r25, r18
	PORTC = pdat;
     ba2:	95 bb       	out	0x15, r25	; 21
	seg_ch >>= 2;
	pdat = PORTB & ~( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     ba4:	98 b3       	in	r25, 0x18	; 24
	uint8_t pdat;
	seg_ch ^= LED_SEGMENT_MASK;
	pdat = PORTC & ~( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
	pdat |= (seg_ch & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
	PORTC = pdat;
	seg_ch >>= 2;
     ba6:	86 95       	lsr	r24
     ba8:	86 95       	lsr	r24
	pdat = PORTB & ~( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
	pdat |= (seg_ch & ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) ));
     baa:	88 73       	andi	r24, 0x38	; 56
	seg_ch ^= LED_SEGMENT_MASK;
	pdat = PORTC & ~( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
	pdat |= (seg_ch & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
	PORTC = pdat;
	seg_ch >>= 2;
	pdat = PORTB & ~( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     bac:	97 7c       	andi	r25, 0xC7	; 199
	pdat |= (seg_ch & ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) ));
     bae:	89 2b       	or	r24, r25
	PORTB = pdat;
     bb0:	88 bb       	out	0x18, r24	; 24
     bb2:	08 95       	ret

00000bb4 <enable_led_segments_pullups>:

// Turns segment port bits to HI-Z and
// enables pull-ups
void enable_led_segments_pullups()
{
	PORTC |= ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
     bb4:	85 b3       	in	r24, 0x15	; 21
     bb6:	8f 61       	ori	r24, 0x1F	; 31
     bb8:	85 bb       	out	0x15, r24	; 21
	PORTB |= ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     bba:	88 b3       	in	r24, 0x18	; 24
     bbc:	88 63       	ori	r24, 0x38	; 56
     bbe:	88 bb       	out	0x18, r24	; 24
     bc0:	08 95       	ret

00000bc2 <enable_led_segments>:
}	

void enable_led_segments()
{
	DDRC |= ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
     bc2:	84 b3       	in	r24, 0x14	; 20
     bc4:	8f 61       	ori	r24, 0x1F	; 31
     bc6:	84 bb       	out	0x14, r24	; 20
	DDRB |= ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     bc8:	87 b3       	in	r24, 0x17	; 23
     bca:	88 63       	ori	r24, 0x38	; 56
     bcc:	87 bb       	out	0x17, r24	; 23
     bce:	08 95       	ret

00000bd0 <disable_led_segments>:
}

void disable_led_segments()
{
	DDRC &= ~( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
     bd0:	84 b3       	in	r24, 0x14	; 20
     bd2:	80 7e       	andi	r24, 0xE0	; 224
     bd4:	84 bb       	out	0x14, r24	; 20
	DDRB &= ~( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     bd6:	87 b3       	in	r24, 0x17	; 23
     bd8:	87 7c       	andi	r24, 0xC7	; 199
     bda:	87 bb       	out	0x17, r24	; 23
     bdc:	08 95       	ret

00000bde <capture_button_state>:


void capture_button_state()
{
	uint8_t pdat;
	pdat = PINB  & ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     bde:	86 b3       	in	r24, 0x16	; 22
     be0:	88 73       	andi	r24, 0x38	; 56
	pdat <<= 2;
	pdat |= (PINC & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
     be2:	93 b3       	in	r25, 0x13	; 19

void capture_button_state()
{
	uint8_t pdat;
	pdat = PINB  & ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
	pdat <<= 2;
     be4:	88 0f       	add	r24, r24
     be6:	88 0f       	add	r24, r24
	pdat |= (PINC & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
     be8:	9f 71       	andi	r25, 0x1F	; 31
     bea:	89 2b       	or	r24, r25
	raw_button_state = pdat ^ RAW_BUTTONS_INVERSE_MASK;
     bec:	80 95       	com	r24
     bee:	80 93 69 01 	sts	0x0169, r24
     bf2:	08 95       	ret

00000bf4 <processItemFunction>:
//	Arguments:
//		funcAddr - address of the function to run.
//-----------------------------------------------------------------//
static inline void processItemFunction(FuncPtr funcAddr)
{
	if (funcAddr != 0)
     bf4:	00 97       	sbiw	r24, 0x00	; 0
     bf6:	11 f0       	breq	.+4      	; 0xbfc <processItemFunction+0x8>
		((FuncPtr)funcAddr)();
     bf8:	fc 01       	movw	r30, r24
     bfa:	09 94       	ijmp
     bfc:	08 95       	ret

00000bfe <mf_setTempLeave>:
		clearExtraLeds(LED_TEMP);
}

void mf_setTempLeave(void)
{
	userTimer.Enabled = 0;
     bfe:	e0 ef       	ldi	r30, 0xF0	; 240
     c00:	f0 e0       	ldi	r31, 0x00	; 0
     c02:	80 81       	ld	r24, Z
     c04:	8e 7f       	andi	r24, 0xFE	; 254
     c06:	80 83       	st	Z, r24
     c08:	08 95       	ret

00000c0a <mf_leafSelectAct>:
	userTimer.FA_GE = 1;	
}

void mf_leafSelectAct(void)
{
	userTimer.Timer = 0;
     c0a:	10 92 f1 00 	sts	0x00F1, r1
	userTimer.Top = BLINK_PERIOD - 1;
     c0e:	87 e0       	ldi	r24, 0x07	; 7
     c10:	80 93 f2 00 	sts	0x00F2, r24
	userTimer.CompA = BLINK_PERIOD / 2;
     c14:	84 e0       	ldi	r24, 0x04	; 4
     c16:	80 93 f3 00 	sts	0x00F3, r24
	userTimer.Enabled = 1;
     c1a:	e0 ef       	ldi	r30, 0xF0	; 240
     c1c:	f0 e0       	ldi	r31, 0x00	; 0
     c1e:	80 81       	ld	r24, Z
     c20:	81 60       	ori	r24, 0x01	; 1
     c22:	80 83       	st	Z, r24
     c24:	08 95       	ret

00000c26 <mf_leafExit>:
}

void mf_leafExit(void)
{
	userTimer.Enabled = 0;	
     c26:	e0 ef       	ldi	r30, 0xF0	; 240
     c28:	f0 e0       	ldi	r31, 0x00	; 0
     c2a:	80 81       	ld	r24, Z
     c2c:	8e 7f       	andi	r24, 0xFE	; 254
     c2e:	80 83       	st	Z, r24
     c30:	08 95       	ret

00000c32 <mf_actpoffLeave>:
	printLedBuffer(0,"   OFF");
}

void mf_actpoffLeave(void)
{
	autoPowerOffState = 0;	
     c32:	10 92 d8 00 	sts	0x00D8, r1
     c36:	08 95       	ret

00000c38 <mf_calibDoExit>:
	userTimer.Enabled = 1;
}

void mf_leafExit(void)
{
	userTimer.Enabled = 0;	
     c38:	e0 ef       	ldi	r30, 0xF0	; 240
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	80 81       	ld	r24, Z
     c3e:	8e 7f       	andi	r24, 0xFE	; 254
     c40:	80 83       	st	Z, r24
}

void mf_calibDoExit(void)
{
	mf_leafExit();
	heaterState &= ~CALIBRATION_ACTIVE;
     c42:	80 91 f9 00 	lds	r24, 0x00F9
     c46:	8d 7f       	andi	r24, 0xFD	; 253
     c48:	80 93 f9 00 	sts	0x00F9, r24
     c4c:	08 95       	ret

00000c4e <mf_cdoneDo>:
	calculateCoeffs();
}

void mf_cdoneDo(void)
{
	printLedBuffer(0," DONE ");
     c4e:	60 eb       	ldi	r22, 0xB0	; 176
     c50:	70 e0       	ldi	r23, 0x00	; 0
     c52:	80 e0       	ldi	r24, 0x00	; 0
     c54:	3e cf       	rjmp	.-388    	; 0xad2 <printLedBuffer>

00000c56 <mf_actpoffDo>:
}

// Indication of power off mode
void mf_actpoffDo(void)
{
	printLedBuffer(0,"   OFF");
     c56:	67 eb       	ldi	r22, 0xB7	; 183
     c58:	70 e0       	ldi	r23, 0x00	; 0
     c5a:	80 e0       	ldi	r24, 0x00	; 0
     c5c:	3a cf       	rjmp	.-396    	; 0xad2 <printLedBuffer>

00000c5e <mf_cdone2Select>:
}

void mf_cdone2Select(void)
{
	// Save current ADC as calibrating point
	p.cpoint2_adc = adc_normalized;
     c5e:	80 91 33 01 	lds	r24, 0x0133
     c62:	90 91 34 01 	lds	r25, 0x0134
     c66:	90 93 40 01 	sts	0x0140, r25
     c6a:	80 93 3f 01 	sts	0x013F, r24
	// Save current Celsius degree
	p.cpoint2 = cpoint2_copy;
     c6e:	80 91 f5 00 	lds	r24, 0x00F5
     c72:	80 93 3c 01 	sts	0x013C, r24
	// Calculate new coefficient for temperature conversion
	calculateCoeffs();
     c76:	b6 ca       	rjmp	.-2708   	; 0x1e4 <calculateCoeffs>

00000c78 <mf_cdone1Select>:
//---------------------------------------------//

void mf_cdone1Select(void)
{
	// Save current ADC as calibrating point
	p.cpoint1_adc = adc_normalized;
     c78:	80 91 33 01 	lds	r24, 0x0133
     c7c:	90 91 34 01 	lds	r25, 0x0134
     c80:	90 93 3e 01 	sts	0x013E, r25
     c84:	80 93 3d 01 	sts	0x013D, r24
	// Save current Celsius degree
	p.cpoint1 = cpoint1_copy;
     c88:	80 91 f4 00 	lds	r24, 0x00F4
     c8c:	80 93 3b 01 	sts	0x013B, r24
	// Calculate new coefficient for temperature conversion
	calculateCoeffs();
     c90:	a9 ca       	rjmp	.-2734   	; 0x1e4 <calculateCoeffs>

00000c92 <mf_autopoffDo>:

//---------------------------------------------//


void mf_autopoffDo(void)
{
     c92:	cf 93       	push	r28
     c94:	df 93       	push	r29
     c96:	cd b7       	in	r28, 0x3d	; 61
     c98:	de b7       	in	r29, 0x3e	; 62
     c9a:	27 97       	sbiw	r28, 0x07	; 7
     c9c:	0f b6       	in	r0, 0x3f	; 63
     c9e:	f8 94       	cli
     ca0:	de bf       	out	0x3e, r29	; 62
     ca2:	0f be       	out	0x3f, r0	; 63
     ca4:	cd bf       	out	0x3d, r28	; 61
	char str[] = {'O','F','F',' ',' ',' ',0};
     ca6:	87 e0       	ldi	r24, 0x07	; 7
     ca8:	e6 e8       	ldi	r30, 0x86	; 134
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	de 01       	movw	r26, r28
     cae:	11 96       	adiw	r26, 0x01	; 1
     cb0:	01 90       	ld	r0, Z+
     cb2:	0d 92       	st	X+, r0
     cb4:	8a 95       	dec	r24
     cb6:	e1 f7       	brne	.-8      	; 0xcb0 <mf_autopoffDo+0x1e>
		
		
	if (button_state & (BD_UP | BR_UP))
     cb8:	80 91 d4 00 	lds	r24, 0x00D4
     cbc:	90 91 d5 00 	lds	r25, 0x00D5
     cc0:	9c 01       	movw	r18, r24
     cc2:	22 70       	andi	r18, 0x02	; 2
     cc4:	34 70       	andi	r19, 0x04	; 4
     cc6:	23 2b       	or	r18, r19
     cc8:	31 f0       	breq	.+12     	; 0xcd6 <mf_autopoffDo+0x44>
	{
		if (p.power_off_timeout < MAX_POWEROFF_TIMEOUT)
     cca:	80 91 3a 01 	lds	r24, 0x013A
     cce:	8f 35       	cpi	r24, 0x5F	; 95
     cd0:	68 f4       	brcc	.+26     	; 0xcec <mf_autopoffDo+0x5a>
			p.power_off_timeout += 5;
     cd2:	8b 5f       	subi	r24, 0xFB	; 251
     cd4:	09 c0       	rjmp	.+18     	; 0xce8 <mf_autopoffDo+0x56>
		restartMenuTimer();
	}
	else if (button_state & (BD_DOWN | BR_DOWN))
     cd6:	84 70       	andi	r24, 0x04	; 4
     cd8:	98 70       	andi	r25, 0x08	; 8
     cda:	89 2b       	or	r24, r25
     cdc:	49 f0       	breq	.+18     	; 0xcf0 <mf_autopoffDo+0x5e>
	{
		if (p.power_off_timeout > MIN_POWEROFF_TIMEOUT)
     cde:	80 91 3a 01 	lds	r24, 0x013A
     ce2:	86 30       	cpi	r24, 0x06	; 6
     ce4:	18 f0       	brcs	.+6      	; 0xcec <mf_autopoffDo+0x5a>
			p.power_off_timeout -= 5;
     ce6:	85 50       	subi	r24, 0x05	; 5
     ce8:	80 93 3a 01 	sts	0x013A, r24
//	 Restarts menu state timeout
//	Should be used in RUN function when control buttons are pressed.
//-----------------------------------------------------------------//
static void restartMenuTimer(void)
{
	menuTimer.Timer = 0;
     cec:	10 92 77 00 	sts	0x0077, r1
		if (p.power_off_timeout > MIN_POWEROFF_TIMEOUT)
			p.power_off_timeout -= 5;
		restartMenuTimer();
	}	
		
	if (userTimer.FA_GE)
     cf0:	80 91 f0 00 	lds	r24, 0x00F0
     cf4:	84 ff       	sbrs	r24, 4
     cf6:	10 c0       	rjmp	.+32     	; 0xd18 <mf_autopoffDo+0x86>
	{
		if (p.power_off_timeout != MAX_POWEROFF_TIMEOUT)
     cf8:	80 91 3a 01 	lds	r24, 0x013A
     cfc:	8f 35       	cpi	r24, 0x5F	; 95
     cfe:	41 f0       	breq	.+16     	; 0xd10 <mf_autopoffDo+0x7e>
			u16toa_align_right(p.power_off_timeout,str + 4,0x80 | 2,' ');	
     d00:	20 e2       	ldi	r18, 0x20	; 32
     d02:	42 e8       	ldi	r20, 0x82	; 130
     d04:	be 01       	movw	r22, r28
     d06:	6b 5f       	subi	r22, 0xFB	; 251
     d08:	7f 4f       	sbci	r23, 0xFF	; 255
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	ba d2       	rcall	.+1396   	; 0x1282 <u16toa_align_right>
     d0e:	04 c0       	rjmp	.+8      	; 0xd18 <mf_autopoffDo+0x86>
		else 
		{
			str[4] = 'N';
     d10:	8e e4       	ldi	r24, 0x4E	; 78
     d12:	8d 83       	std	Y+5, r24	; 0x05
			str[5] = 'O';
     d14:	8f e4       	ldi	r24, 0x4F	; 79
     d16:	8e 83       	std	Y+6, r24	; 0x06
		}			
	}		
		
	printLedBuffer(0,str);
     d18:	be 01       	movw	r22, r28
     d1a:	6f 5f       	subi	r22, 0xFF	; 255
     d1c:	7f 4f       	sbci	r23, 0xFF	; 255
     d1e:	80 e0       	ldi	r24, 0x00	; 0
     d20:	d8 de       	rcall	.-592    	; 0xad2 <printLedBuffer>
}
     d22:	27 96       	adiw	r28, 0x07	; 7
     d24:	0f b6       	in	r0, 0x3f	; 63
     d26:	f8 94       	cli
     d28:	de bf       	out	0x3e, r29	; 62
     d2a:	0f be       	out	0x3f, r0	; 63
     d2c:	cd bf       	out	0x3d, r28	; 61
     d2e:	df 91       	pop	r29
     d30:	cf 91       	pop	r28
     d32:	08 95       	ret

00000d34 <mf_realTempDo>:
{
	setExtraLeds(LED_TEMP);
}

void mf_realTempDo(void)
{
     d34:	cf 93       	push	r28
     d36:	df 93       	push	r29
     d38:	cd b7       	in	r28, 0x3d	; 61
     d3a:	de b7       	in	r29, 0x3e	; 62
     d3c:	27 97       	sbiw	r28, 0x07	; 7
     d3e:	0f b6       	in	r0, 0x3f	; 63
     d40:	f8 94       	cli
     d42:	de bf       	out	0x3e, r29	; 62
     d44:	0f be       	out	0x3f, r0	; 63
     d46:	cd bf       	out	0x3d, r28	; 61
	char str[] = {' ',' ',' ',' ',0xB0,'C',0};
     d48:	87 e0       	ldi	r24, 0x07	; 7
     d4a:	ed e8       	ldi	r30, 0x8D	; 141
     d4c:	f0 e0       	ldi	r31, 0x00	; 0
     d4e:	de 01       	movw	r26, r28
     d50:	11 96       	adiw	r26, 0x01	; 1
     d52:	01 90       	ld	r0, Z+
     d54:	0d 92       	st	X+, r0
     d56:	8a 95       	dec	r24
     d58:	e1 f7       	brne	.-8      	; 0xd52 <mf_realTempDo+0x1e>
	// Output ADC result to LED
	u16toa_align_right(adc_celsius,str,0x80 | 4,' ');
     d5a:	20 e2       	ldi	r18, 0x20	; 32
     d5c:	44 e8       	ldi	r20, 0x84	; 132
     d5e:	be 01       	movw	r22, r28
     d60:	6f 5f       	subi	r22, 0xFF	; 255
     d62:	7f 4f       	sbci	r23, 0xFF	; 255
     d64:	80 91 35 01 	lds	r24, 0x0135
     d68:	90 91 36 01 	lds	r25, 0x0136
     d6c:	8a d2       	rcall	.+1300   	; 0x1282 <u16toa_align_right>
	printLedBuffer(0,str);
     d6e:	be 01       	movw	r22, r28
     d70:	6f 5f       	subi	r22, 0xFF	; 255
     d72:	7f 4f       	sbci	r23, 0xFF	; 255
     d74:	80 e0       	ldi	r24, 0x00	; 0
     d76:	ad de       	rcall	.-678    	; 0xad2 <printLedBuffer>
}
     d78:	27 96       	adiw	r28, 0x07	; 7
     d7a:	0f b6       	in	r0, 0x3f	; 63
     d7c:	f8 94       	cli
     d7e:	de bf       	out	0x3e, r29	; 62
     d80:	0f be       	out	0x3f, r0	; 63
     d82:	cd bf       	out	0x3d, r28	; 61
     d84:	df 91       	pop	r29
     d86:	cf 91       	pop	r28
     d88:	08 95       	ret

00000d8a <mf_calib2Do>:
}

//---------------------------------------------//

void mf_calib2Do(void)
{
     d8a:	cf 93       	push	r28
     d8c:	df 93       	push	r29
     d8e:	cd b7       	in	r28, 0x3d	; 61
     d90:	de b7       	in	r29, 0x3e	; 62
     d92:	27 97       	sbiw	r28, 0x07	; 7
     d94:	0f b6       	in	r0, 0x3f	; 63
     d96:	f8 94       	cli
     d98:	de bf       	out	0x3e, r29	; 62
     d9a:	0f be       	out	0x3f, r0	; 63
     d9c:	cd bf       	out	0x3d, r28	; 61
	char str[] = {'P','2',' ',' ',' ',' ',0};
     d9e:	87 e0       	ldi	r24, 0x07	; 7
     da0:	e4 e9       	ldi	r30, 0x94	; 148
     da2:	f0 e0       	ldi	r31, 0x00	; 0
     da4:	de 01       	movw	r26, r28
     da6:	11 96       	adiw	r26, 0x01	; 1
     da8:	01 90       	ld	r0, Z+
     daa:	0d 92       	st	X+, r0
     dac:	8a 95       	dec	r24
     dae:	e1 f7       	brne	.-8      	; 0xda8 <mf_calib2Do+0x1e>
	
	
	if (button_state & (BD_UP | BR_UP))
     db0:	80 91 d4 00 	lds	r24, 0x00D4
     db4:	90 91 d5 00 	lds	r25, 0x00D5
     db8:	9c 01       	movw	r18, r24
     dba:	22 70       	andi	r18, 0x02	; 2
     dbc:	34 70       	andi	r19, 0x04	; 4
     dbe:	23 2b       	or	r18, r19
     dc0:	31 f0       	breq	.+12     	; 0xdce <mf_calib2Do+0x44>
	{
		if (cpoint2_copy < MAX_CALIB_TEMP)
     dc2:	80 91 f5 00 	lds	r24, 0x00F5
     dc6:	8a 3f       	cpi	r24, 0xFA	; 250
     dc8:	68 f4       	brcc	.+26     	; 0xde4 <mf_calib2Do+0x5a>
		cpoint2_copy += 1;
     dca:	8f 5f       	subi	r24, 0xFF	; 255
     dcc:	09 c0       	rjmp	.+18     	; 0xde0 <mf_calib2Do+0x56>
	}
	else if (button_state & (BD_DOWN | BR_DOWN))
     dce:	84 70       	andi	r24, 0x04	; 4
     dd0:	98 70       	andi	r25, 0x08	; 8
     dd2:	89 2b       	or	r24, r25
     dd4:	39 f0       	breq	.+14     	; 0xde4 <mf_calib2Do+0x5a>
	{
		if (cpoint2_copy > MIN_CALIB_TEMP)
     dd6:	80 91 f5 00 	lds	r24, 0x00F5
     dda:	8b 30       	cpi	r24, 0x0B	; 11
     ddc:	18 f0       	brcs	.+6      	; 0xde4 <mf_calib2Do+0x5a>
		cpoint2_copy -= 1;
     dde:	81 50       	subi	r24, 0x01	; 1
     de0:	80 93 f5 00 	sts	0x00F5, r24
	}
	
	if (userTimer.FA_GE)
     de4:	80 91 f0 00 	lds	r24, 0x00F0
     de8:	84 ff       	sbrs	r24, 4
     dea:	0f c0       	rjmp	.+30     	; 0xe0a <mf_calib2Do+0x80>
	{
		u16toa_align_right(cpoint2_copy,str + 3,0x80 | 3,' ');
     dec:	20 e2       	ldi	r18, 0x20	; 32
     dee:	43 e8       	ldi	r20, 0x83	; 131
     df0:	be 01       	movw	r22, r28
     df2:	6c 5f       	subi	r22, 0xFC	; 252
     df4:	7f 4f       	sbci	r23, 0xFF	; 255
     df6:	80 91 f5 00 	lds	r24, 0x00F5
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	42 d2       	rcall	.+1156   	; 0x1282 <u16toa_align_right>
		resetAutoPowerOffCounter();
     dfe:	3e d5       	rcall	.+2684   	; 0x187c <resetAutoPowerOffCounter>
		heaterState |= CALIBRATION_ACTIVE;
     e00:	80 91 f9 00 	lds	r24, 0x00F9
     e04:	82 60       	ori	r24, 0x02	; 2
     e06:	80 93 f9 00 	sts	0x00F9, r24
	}
	
	printLedBuffer(0,str);
     e0a:	be 01       	movw	r22, r28
     e0c:	6f 5f       	subi	r22, 0xFF	; 255
     e0e:	7f 4f       	sbci	r23, 0xFF	; 255
     e10:	80 e0       	ldi	r24, 0x00	; 0
     e12:	5f de       	rcall	.-834    	; 0xad2 <printLedBuffer>
	
}
     e14:	27 96       	adiw	r28, 0x07	; 7
     e16:	0f b6       	in	r0, 0x3f	; 63
     e18:	f8 94       	cli
     e1a:	de bf       	out	0x3e, r29	; 62
     e1c:	0f be       	out	0x3f, r0	; 63
     e1e:	cd bf       	out	0x3d, r28	; 61
     e20:	df 91       	pop	r29
     e22:	cf 91       	pop	r28
     e24:	08 95       	ret

00000e26 <mf_calib1Do>:
	cpoint1_copy = p.cpoint1;
	cpoint2_copy = p.cpoint2;
}

void mf_calib1Do(void)
{
     e26:	cf 93       	push	r28
     e28:	df 93       	push	r29
     e2a:	cd b7       	in	r28, 0x3d	; 61
     e2c:	de b7       	in	r29, 0x3e	; 62
     e2e:	27 97       	sbiw	r28, 0x07	; 7
     e30:	0f b6       	in	r0, 0x3f	; 63
     e32:	f8 94       	cli
     e34:	de bf       	out	0x3e, r29	; 62
     e36:	0f be       	out	0x3f, r0	; 63
     e38:	cd bf       	out	0x3d, r28	; 61
	char str[] = {'P','1',' ',' ',' ',' ',0};
     e3a:	87 e0       	ldi	r24, 0x07	; 7
     e3c:	eb e9       	ldi	r30, 0x9B	; 155
     e3e:	f0 e0       	ldi	r31, 0x00	; 0
     e40:	de 01       	movw	r26, r28
     e42:	11 96       	adiw	r26, 0x01	; 1
     e44:	01 90       	ld	r0, Z+
     e46:	0d 92       	st	X+, r0
     e48:	8a 95       	dec	r24
     e4a:	e1 f7       	brne	.-8      	; 0xe44 <mf_calib1Do+0x1e>
	
	
	if (button_state & (BD_UP | BR_UP))
     e4c:	80 91 d4 00 	lds	r24, 0x00D4
     e50:	90 91 d5 00 	lds	r25, 0x00D5
     e54:	9c 01       	movw	r18, r24
     e56:	22 70       	andi	r18, 0x02	; 2
     e58:	34 70       	andi	r19, 0x04	; 4
     e5a:	23 2b       	or	r18, r19
     e5c:	31 f0       	breq	.+12     	; 0xe6a <mf_calib1Do+0x44>
	{
		if (cpoint1_copy < MAX_CALIB_TEMP)
     e5e:	80 91 f4 00 	lds	r24, 0x00F4
     e62:	8a 3f       	cpi	r24, 0xFA	; 250
     e64:	68 f4       	brcc	.+26     	; 0xe80 <mf_calib1Do+0x5a>
			cpoint1_copy += 1;
     e66:	8f 5f       	subi	r24, 0xFF	; 255
     e68:	09 c0       	rjmp	.+18     	; 0xe7c <mf_calib1Do+0x56>
	}
	else if (button_state & (BD_DOWN | BR_DOWN))
     e6a:	84 70       	andi	r24, 0x04	; 4
     e6c:	98 70       	andi	r25, 0x08	; 8
     e6e:	89 2b       	or	r24, r25
     e70:	39 f0       	breq	.+14     	; 0xe80 <mf_calib1Do+0x5a>
	{
		if (cpoint1_copy > MIN_CALIB_TEMP)
     e72:	80 91 f4 00 	lds	r24, 0x00F4
     e76:	8b 30       	cpi	r24, 0x0B	; 11
     e78:	18 f0       	brcs	.+6      	; 0xe80 <mf_calib1Do+0x5a>
			cpoint1_copy -= 1;
     e7a:	81 50       	subi	r24, 0x01	; 1
     e7c:	80 93 f4 00 	sts	0x00F4, r24
	}
	
	if (userTimer.FA_GE)
     e80:	80 91 f0 00 	lds	r24, 0x00F0
     e84:	84 ff       	sbrs	r24, 4
     e86:	0f c0       	rjmp	.+30     	; 0xea6 <mf_calib1Do+0x80>
	{
		u16toa_align_right(cpoint1_copy,str + 3,0x80 | 3,' ');
     e88:	20 e2       	ldi	r18, 0x20	; 32
     e8a:	43 e8       	ldi	r20, 0x83	; 131
     e8c:	be 01       	movw	r22, r28
     e8e:	6c 5f       	subi	r22, 0xFC	; 252
     e90:	7f 4f       	sbci	r23, 0xFF	; 255
     e92:	80 91 f4 00 	lds	r24, 0x00F4
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	f4 d1       	rcall	.+1000   	; 0x1282 <u16toa_align_right>
		resetAutoPowerOffCounter();
     e9a:	f0 d4       	rcall	.+2528   	; 0x187c <resetAutoPowerOffCounter>
		heaterState |= CALIBRATION_ACTIVE;
     e9c:	80 91 f9 00 	lds	r24, 0x00F9
     ea0:	82 60       	ori	r24, 0x02	; 2
     ea2:	80 93 f9 00 	sts	0x00F9, r24
	}
	
	printLedBuffer(0,str);
     ea6:	be 01       	movw	r22, r28
     ea8:	6f 5f       	subi	r22, 0xFF	; 255
     eaa:	7f 4f       	sbci	r23, 0xFF	; 255
     eac:	80 e0       	ldi	r24, 0x00	; 0
     eae:	11 de       	rcall	.-990    	; 0xad2 <printLedBuffer>
	
}
     eb0:	27 96       	adiw	r28, 0x07	; 7
     eb2:	0f b6       	in	r0, 0x3f	; 63
     eb4:	f8 94       	cli
     eb6:	de bf       	out	0x3e, r29	; 62
     eb8:	0f be       	out	0x3f, r0	; 63
     eba:	cd bf       	out	0x3d, r28	; 61
     ebc:	df 91       	pop	r29
     ebe:	cf 91       	pop	r28
     ec0:	08 95       	ret

00000ec2 <mf_actpoffSelect>:



void mf_actpoffSelect(void)
{
	clearExtraLeds(LED_TEMP | LED_ROLL);
     ec2:	83 e0       	ldi	r24, 0x03	; 3
     ec4:	52 de       	rcall	.-860    	; 0xb6a <clearExtraLeds>
	autoPowerOffState = AUTO_POFF_ACTIVE;
     ec6:	81 e0       	ldi	r24, 0x01	; 1
     ec8:	80 93 d8 00 	sts	0x00D8, r24
     ecc:	08 95       	ret

00000ece <mf_leafSelect>:

// Select and exit functions, common for leaf menu items 

void mf_leafSelect(void)
{
	clearExtraLeds(LED_TEMP | LED_ROLL);
     ece:	83 e0       	ldi	r24, 0x03	; 3
     ed0:	4c de       	rcall	.-872    	; 0xb6a <clearExtraLeds>
	userTimer.FA_GE = 1;	
     ed2:	e0 ef       	ldi	r30, 0xF0	; 240
     ed4:	f0 e0       	ldi	r31, 0x00	; 0
     ed6:	80 81       	ld	r24, Z
     ed8:	80 61       	ori	r24, 0x10	; 16
     eda:	80 83       	st	Z, r24
     edc:	08 95       	ret

00000ede <mf_calibSelect>:

//---------------------------------------------//

void mf_calibSelect(void)
{
	mf_leafSelect();
     ede:	f7 df       	rcall	.-18     	; 0xece <mf_leafSelect>
	cpoint1_copy = p.cpoint1;
     ee0:	80 91 3b 01 	lds	r24, 0x013B
     ee4:	80 93 f4 00 	sts	0x00F4, r24
	cpoint2_copy = p.cpoint2;
     ee8:	80 91 3c 01 	lds	r24, 0x013C
     eec:	80 93 f5 00 	sts	0x00F5, r24
     ef0:	08 95       	ret

00000ef2 <mf_rollLeave>:
	printLedBuffer(0,str);
}

void mf_rollLeave(void)
{
	clearExtraLeds(LED_ROLL);
     ef2:	82 e0       	ldi	r24, 0x02	; 2
     ef4:	3a de       	rcall	.-908    	; 0xb6a <clearExtraLeds>
	userTimer.Enabled = 0;
     ef6:	e0 ef       	ldi	r30, 0xF0	; 240
     ef8:	f0 e0       	ldi	r31, 0x00	; 0
     efa:	80 81       	ld	r24, Z
     efc:	8e 7f       	andi	r24, 0xFE	; 254
     efe:	80 83       	st	Z, r24
     f00:	08 95       	ret

00000f02 <mf_setTempSelect>:
//---------------------------------------------//


void mf_setTempSelect(void)
{
	clearExtraLeds(LED_TEMP);
     f02:	81 e0       	ldi	r24, 0x01	; 1
     f04:	32 de       	rcall	.-924    	; 0xb6a <clearExtraLeds>
	mf_leafSelectAct();		// setup and start timer
     f06:	81 ce       	rjmp	.-766    	; 0xc0a <mf_leafSelectAct>

00000f08 <mf_realTempLeave>:
	printLedBuffer(0,str);
}

void mf_realTempLeave(void)
{
	clearExtraLeds(LED_TEMP);
     f08:	81 e0       	ldi	r24, 0x01	; 1
     f0a:	2f ce       	rjmp	.-930    	; 0xb6a <clearExtraLeds>

00000f0c <mf_sndenDo>:

//---------------------------------------------//


void mf_sndenDo(void)
{
     f0c:	cf 93       	push	r28
     f0e:	df 93       	push	r29
     f10:	cd b7       	in	r28, 0x3d	; 61
     f12:	de b7       	in	r29, 0x3e	; 62
     f14:	27 97       	sbiw	r28, 0x07	; 7
     f16:	0f b6       	in	r0, 0x3f	; 63
     f18:	f8 94       	cli
     f1a:	de bf       	out	0x3e, r29	; 62
     f1c:	0f be       	out	0x3f, r0	; 63
     f1e:	cd bf       	out	0x3d, r28	; 61
	char str[] = {'S','N','D',' ',' ',' ',0};
     f20:	87 e0       	ldi	r24, 0x07	; 7
     f22:	e2 ea       	ldi	r30, 0xA2	; 162
     f24:	f0 e0       	ldi	r31, 0x00	; 0
     f26:	de 01       	movw	r26, r28
     f28:	11 96       	adiw	r26, 0x01	; 1
     f2a:	01 90       	ld	r0, Z+
     f2c:	0d 92       	st	X+, r0
     f2e:	8a 95       	dec	r24
     f30:	e1 f7       	brne	.-8      	; 0xf2a <mf_sndenDo+0x1e>
		
	if (button_state & (BD_UP | BD_DOWN))
     f32:	80 91 d4 00 	lds	r24, 0x00D4
     f36:	90 91 d5 00 	lds	r25, 0x00D5
     f3a:	86 70       	andi	r24, 0x06	; 6
     f3c:	99 27       	eor	r25, r25
     f3e:	89 2b       	or	r24, r25
     f40:	49 f0       	breq	.+18     	; 0xf54 <mf_sndenDo+0x48>
	{
		p.sound_enable = !p.sound_enable;
     f42:	81 e0       	ldi	r24, 0x01	; 1
     f44:	90 91 39 01 	lds	r25, 0x0139
     f48:	91 11       	cpse	r25, r1
     f4a:	80 e0       	ldi	r24, 0x00	; 0
     f4c:	80 93 39 01 	sts	0x0139, r24
//	 Restarts menu state timeout
//	Should be used in RUN function when control buttons are pressed.
//-----------------------------------------------------------------//
static void restartMenuTimer(void)
{
	menuTimer.Timer = 0;
     f50:	10 92 77 00 	sts	0x0077, r1
	{
		p.sound_enable = !p.sound_enable;
		restartMenuTimer();
	}			
		
	if (userTimer.FA_GE)
     f54:	80 91 f0 00 	lds	r24, 0x00F0
     f58:	84 ff       	sbrs	r24, 4
     f5a:	0d c0       	rjmp	.+26     	; 0xf76 <mf_sndenDo+0x6a>
	{
		if (p.sound_enable)		
     f5c:	80 91 39 01 	lds	r24, 0x0139
     f60:	88 23       	and	r24, r24
     f62:	21 f0       	breq	.+8      	; 0xf6c <mf_sndenDo+0x60>
		{
			str[4] = 'O';
     f64:	8f e4       	ldi	r24, 0x4F	; 79
     f66:	8d 83       	std	Y+5, r24	; 0x05
			str[5] = 'N';
     f68:	8e e4       	ldi	r24, 0x4E	; 78
     f6a:	04 c0       	rjmp	.+8      	; 0xf74 <mf_sndenDo+0x68>
		}
		else
		{
			str[3] = 'O';
     f6c:	8f e4       	ldi	r24, 0x4F	; 79
     f6e:	8c 83       	std	Y+4, r24	; 0x04
			str[4] = 'F';
     f70:	86 e4       	ldi	r24, 0x46	; 70
     f72:	8d 83       	std	Y+5, r24	; 0x05
			str[5] = 'F';
     f74:	8e 83       	std	Y+6, r24	; 0x06
		}			
	}
		
	printLedBuffer(0,str);
     f76:	be 01       	movw	r22, r28
     f78:	6f 5f       	subi	r22, 0xFF	; 255
     f7a:	7f 4f       	sbci	r23, 0xFF	; 255
     f7c:	80 e0       	ldi	r24, 0x00	; 0
     f7e:	a9 dd       	rcall	.-1198   	; 0xad2 <printLedBuffer>
	setComma(2);
     f80:	82 e0       	ldi	r24, 0x02	; 2
     f82:	e1 dd       	rcall	.-1086   	; 0xb46 <setComma>
}
     f84:	27 96       	adiw	r28, 0x07	; 7
     f86:	0f b6       	in	r0, 0x3f	; 63
     f88:	f8 94       	cli
     f8a:	de bf       	out	0x3e, r29	; 62
     f8c:	0f be       	out	0x3f, r0	; 63
     f8e:	cd bf       	out	0x3d, r28	; 61
     f90:	df 91       	pop	r29
     f92:	cf 91       	pop	r28
     f94:	08 95       	ret

00000f96 <mf_rollDo>:
	setExtraLeds(LED_ROLL);
	mf_leafSelectAct();		// setup and start timer
}

void mf_rollDo(void)
{
     f96:	cf 93       	push	r28
     f98:	df 93       	push	r29
     f9a:	cd b7       	in	r28, 0x3d	; 61
     f9c:	de b7       	in	r29, 0x3e	; 62
     f9e:	27 97       	sbiw	r28, 0x07	; 7
     fa0:	0f b6       	in	r0, 0x3f	; 63
     fa2:	f8 94       	cli
     fa4:	de bf       	out	0x3e, r29	; 62
     fa6:	0f be       	out	0x3f, r0	; 63
     fa8:	cd bf       	out	0x3d, r28	; 61
	char str[] = {' ',' ',' ',' ',' ',' ',0};
     faa:	87 e0       	ldi	r24, 0x07	; 7
     fac:	e9 ea       	ldi	r30, 0xA9	; 169
     fae:	f0 e0       	ldi	r31, 0x00	; 0
     fb0:	de 01       	movw	r26, r28
     fb2:	11 96       	adiw	r26, 0x01	; 1
     fb4:	01 90       	ld	r0, Z+
     fb6:	0d 92       	st	X+, r0
     fb8:	8a 95       	dec	r24
     fba:	e1 f7       	brne	.-8      	; 0xfb4 <mf_rollDo+0x1e>
		
	if (button_state & (BD_UP | BR_UP))
     fbc:	80 91 d4 00 	lds	r24, 0x00D4
     fc0:	90 91 d5 00 	lds	r25, 0x00D5
     fc4:	9c 01       	movw	r18, r24
     fc6:	22 70       	andi	r18, 0x02	; 2
     fc8:	34 70       	andi	r19, 0x04	; 4
     fca:	23 2b       	or	r18, r19
     fcc:	31 f0       	breq	.+12     	; 0xfda <mf_rollDo+0x44>
	{
		if (p.rollCycleSet < MAX_ROLL_CYCLES)
     fce:	80 91 38 01 	lds	r24, 0x0138
     fd2:	83 36       	cpi	r24, 0x63	; 99
     fd4:	68 f4       	brcc	.+26     	; 0xff0 <mf_rollDo+0x5a>
			p.rollCycleSet += 1;
     fd6:	8f 5f       	subi	r24, 0xFF	; 255
     fd8:	09 c0       	rjmp	.+18     	; 0xfec <mf_rollDo+0x56>
	}
	else if (button_state & (BD_DOWN | BR_DOWN))
     fda:	84 70       	andi	r24, 0x04	; 4
     fdc:	98 70       	andi	r25, 0x08	; 8
     fde:	89 2b       	or	r24, r25
     fe0:	39 f0       	breq	.+14     	; 0xff0 <mf_rollDo+0x5a>
	{
		if (p.rollCycleSet > MIN_ROLL_CYCLES)
     fe2:	80 91 38 01 	lds	r24, 0x0138
     fe6:	82 30       	cpi	r24, 0x02	; 2
     fe8:	18 f0       	brcs	.+6      	; 0xff0 <mf_rollDo+0x5a>
			p.rollCycleSet -= 1;
     fea:	81 50       	subi	r24, 0x01	; 1
     fec:	80 93 38 01 	sts	0x0138, r24
	}	
		
	u16toa_align_right(p.rollCycleSet,str + 4,0x80 | 2,' ');
     ff0:	20 e2       	ldi	r18, 0x20	; 32
     ff2:	42 e8       	ldi	r20, 0x82	; 130
     ff4:	be 01       	movw	r22, r28
     ff6:	6b 5f       	subi	r22, 0xFB	; 251
     ff8:	7f 4f       	sbci	r23, 0xFF	; 255
     ffa:	80 91 38 01 	lds	r24, 0x0138
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	40 d1       	rcall	.+640    	; 0x1282 <u16toa_align_right>
	
	if ((!(rollState & ROLL_CYCLE)) || (userTimer.FA_GE))
    1002:	80 91 f7 00 	lds	r24, 0x00F7
    1006:	82 ff       	sbrs	r24, 2
    1008:	04 c0       	rjmp	.+8      	; 0x1012 <mf_rollDo+0x7c>
    100a:	80 91 f0 00 	lds	r24, 0x00F0
    100e:	84 ff       	sbrs	r24, 4
    1010:	09 c0       	rjmp	.+18     	; 0x1024 <mf_rollDo+0x8e>
	{
		u16toa_align_right(activeRollCycle,str + 1,0x80 | 2,' ');
    1012:	20 e2       	ldi	r18, 0x20	; 32
    1014:	42 e8       	ldi	r20, 0x82	; 130
    1016:	be 01       	movw	r22, r28
    1018:	6e 5f       	subi	r22, 0xFE	; 254
    101a:	7f 4f       	sbci	r23, 0xFF	; 255
    101c:	80 91 f6 00 	lds	r24, 0x00F6
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	2f d1       	rcall	.+606    	; 0x1282 <u16toa_align_right>
	}
	
	str[0] = 0;
    1024:	19 82       	std	Y+1, r1	; 0x01
	if (isTopPointValid())
    1026:	58 d2       	rcall	.+1200   	; 0x14d8 <isTopPointValid>
    1028:	88 23       	and	r24, r24
    102a:	19 f0       	breq	.+6      	; 0x1032 <mf_rollDo+0x9c>
		str[0] |= SEGA;
    102c:	89 81       	ldd	r24, Y+1	; 0x01
    102e:	81 60       	ori	r24, 0x01	; 1
    1030:	89 83       	std	Y+1, r24	; 0x01
	if (isBottomPointValid())
    1032:	62 d2       	rcall	.+1220   	; 0x14f8 <isBottomPointValid>
    1034:	88 23       	and	r24, r24
    1036:	19 f0       	breq	.+6      	; 0x103e <mf_rollDo+0xa8>
		str[0] |= SEGD;
    1038:	89 81       	ldd	r24, Y+1	; 0x01
    103a:	88 60       	ori	r24, 0x08	; 8
    103c:	89 83       	std	Y+1, r24	; 0x01
	if (str[0] == 0)
    103e:	89 81       	ldd	r24, Y+1	; 0x01
    1040:	81 11       	cpse	r24, r1
    1042:	02 c0       	rjmp	.+4      	; 0x1048 <mf_rollDo+0xb2>
		str[0] = ' ';
    1044:	80 e2       	ldi	r24, 0x20	; 32
    1046:	89 83       	std	Y+1, r24	; 0x01
		
	printLedBuffer(0,str);
    1048:	be 01       	movw	r22, r28
    104a:	6f 5f       	subi	r22, 0xFF	; 255
    104c:	7f 4f       	sbci	r23, 0xFF	; 255
    104e:	80 e0       	ldi	r24, 0x00	; 0
    1050:	40 dd       	rcall	.-1408   	; 0xad2 <printLedBuffer>
}
    1052:	27 96       	adiw	r28, 0x07	; 7
    1054:	0f b6       	in	r0, 0x3f	; 63
    1056:	f8 94       	cli
    1058:	de bf       	out	0x3e, r29	; 62
    105a:	0f be       	out	0x3f, r0	; 63
    105c:	cd bf       	out	0x3d, r28	; 61
    105e:	df 91       	pop	r29
    1060:	cf 91       	pop	r28
    1062:	08 95       	ret

00001064 <mf_rollSelect>:
//---------------------------------------------//
//---------------------------------------------//

void mf_rollSelect(void)
{
	setExtraLeds(LED_ROLL);
    1064:	82 e0       	ldi	r24, 0x02	; 2
    1066:	7b dd       	rcall	.-1290   	; 0xb5e <setExtraLeds>
	mf_leafSelectAct();		// setup and start timer
    1068:	d0 cd       	rjmp	.-1120   	; 0xc0a <mf_leafSelectAct>

0000106a <mf_setTempDo>:
	clearExtraLeds(LED_TEMP);
	mf_leafSelectAct();		// setup and start timer
}

void mf_setTempDo(void)
{
    106a:	cf 93       	push	r28
    106c:	df 93       	push	r29
    106e:	cd b7       	in	r28, 0x3d	; 61
    1070:	de b7       	in	r29, 0x3e	; 62
    1072:	27 97       	sbiw	r28, 0x07	; 7
    1074:	0f b6       	in	r0, 0x3f	; 63
    1076:	f8 94       	cli
    1078:	de bf       	out	0x3e, r29	; 62
    107a:	0f be       	out	0x3f, r0	; 63
    107c:	cd bf       	out	0x3d, r28	; 61
	char str[] = {' ',' ',' ',' ',0xB0,'C',0};
    107e:	87 e0       	ldi	r24, 0x07	; 7
    1080:	ed e8       	ldi	r30, 0x8D	; 141
    1082:	f0 e0       	ldi	r31, 0x00	; 0
    1084:	de 01       	movw	r26, r28
    1086:	11 96       	adiw	r26, 0x01	; 1
    1088:	01 90       	ld	r0, Z+
    108a:	0d 92       	st	X+, r0
    108c:	8a 95       	dec	r24
    108e:	e1 f7       	brne	.-8      	; 0x1088 <mf_setTempDo+0x1e>

	
	if (button_state & (BD_UP | BR_UP))
    1090:	80 91 d4 00 	lds	r24, 0x00D4
    1094:	90 91 d5 00 	lds	r25, 0x00D5
    1098:	9c 01       	movw	r18, r24
    109a:	22 70       	andi	r18, 0x02	; 2
    109c:	34 70       	andi	r19, 0x04	; 4
    109e:	23 2b       	or	r18, r19
    10a0:	31 f0       	breq	.+12     	; 0x10ae <mf_setTempDo+0x44>
	{
		if (p.setup_temp_value < MAX_SET_TEMP)
    10a2:	80 91 37 01 	lds	r24, 0x0137
    10a6:	8a 3f       	cpi	r24, 0xFA	; 250
    10a8:	68 f4       	brcc	.+26     	; 0x10c4 <mf_setTempDo+0x5a>
			p.setup_temp_value += 5;
    10aa:	8b 5f       	subi	r24, 0xFB	; 251
    10ac:	09 c0       	rjmp	.+18     	; 0x10c0 <mf_setTempDo+0x56>
		restartMenuTimer();
	}
	else if (button_state & (BD_DOWN | BR_DOWN))
    10ae:	84 70       	andi	r24, 0x04	; 4
    10b0:	98 70       	andi	r25, 0x08	; 8
    10b2:	89 2b       	or	r24, r25
    10b4:	49 f0       	breq	.+18     	; 0x10c8 <mf_setTempDo+0x5e>
	{
		if (p.setup_temp_value > MIN_SET_TEMP)
    10b6:	80 91 37 01 	lds	r24, 0x0137
    10ba:	8f 31       	cpi	r24, 0x1F	; 31
    10bc:	18 f0       	brcs	.+6      	; 0x10c4 <mf_setTempDo+0x5a>
			p.setup_temp_value -= 5;
    10be:	85 50       	subi	r24, 0x05	; 5
    10c0:	80 93 37 01 	sts	0x0137, r24
//	 Restarts menu state timeout
//	Should be used in RUN function when control buttons are pressed.
//-----------------------------------------------------------------//
static void restartMenuTimer(void)
{
	menuTimer.Timer = 0;
    10c4:	10 92 77 00 	sts	0x0077, r1
			p.setup_temp_value -= 5;
		restartMenuTimer();
	}					
		
	// Output ADC result to LED
	u16toa_align_right(p.setup_temp_value,str,0x80 | 4,' ');
    10c8:	20 e2       	ldi	r18, 0x20	; 32
    10ca:	44 e8       	ldi	r20, 0x84	; 132
    10cc:	be 01       	movw	r22, r28
    10ce:	6f 5f       	subi	r22, 0xFF	; 255
    10d0:	7f 4f       	sbci	r23, 0xFF	; 255
    10d2:	80 91 37 01 	lds	r24, 0x0137
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	d4 d0       	rcall	.+424    	; 0x1282 <u16toa_align_right>
	printLedBuffer(0,str);
    10da:	be 01       	movw	r22, r28
    10dc:	6f 5f       	subi	r22, 0xFF	; 255
    10de:	7f 4f       	sbci	r23, 0xFF	; 255
    10e0:	80 e0       	ldi	r24, 0x00	; 0
    10e2:	f7 dc       	rcall	.-1554   	; 0xad2 <printLedBuffer>
	
	if (userTimer.FA_GE)
    10e4:	80 91 f0 00 	lds	r24, 0x00F0
    10e8:	84 ff       	sbrs	r24, 4
    10ea:	03 c0       	rjmp	.+6      	; 0x10f2 <mf_setTempDo+0x88>
		setExtraLeds(LED_TEMP);
    10ec:	81 e0       	ldi	r24, 0x01	; 1
    10ee:	37 dd       	rcall	.-1426   	; 0xb5e <setExtraLeds>
    10f0:	02 c0       	rjmp	.+4      	; 0x10f6 <mf_setTempDo+0x8c>
	else
		clearExtraLeds(LED_TEMP);
    10f2:	81 e0       	ldi	r24, 0x01	; 1
    10f4:	3a dd       	rcall	.-1420   	; 0xb6a <clearExtraLeds>
}
    10f6:	27 96       	adiw	r28, 0x07	; 7
    10f8:	0f b6       	in	r0, 0x3f	; 63
    10fa:	f8 94       	cli
    10fc:	de bf       	out	0x3e, r29	; 62
    10fe:	0f be       	out	0x3f, r0	; 63
    1100:	cd bf       	out	0x3d, r28	; 61
    1102:	df 91       	pop	r29
    1104:	cf 91       	pop	r28
    1106:	08 95       	ret

00001108 <mf_realTempSelect>:
//=================================================================//


void mf_realTempSelect(void)
{
	setExtraLeds(LED_TEMP);
    1108:	81 e0       	ldi	r24, 0x01	; 1
    110a:	29 cd       	rjmp	.-1454   	; 0xb5e <setExtraLeds>

0000110c <getMenuFunctionRecord.constprop.0>:
//	Arguments:
//		menuItemID - ID of an item
//		menuRecord - pointer to function structure to fill
//	Output:
//-----------------------------------------------------------------//
static void getMenuFunctionRecord(uint8_t menuItemID, MenuFunctionRecord* menuRecord )
    110c:	1f 93       	push	r17
    110e:	cf 93       	push	r28
    1110:	df 93       	push	r29
    1112:	c0 e0       	ldi	r28, 0x00	; 0
    1114:	d0 e0       	ldi	r29, 0x00	; 0
{
	uint8_t i;
	for (i = 0; i < sizeof(menuFunctionSet)/sizeof(MenuFunctionRecord); i++  )
	{
		readMenuRecord(&menuFunctionSet[i], menuRecord);
    1116:	17 e0       	ldi	r17, 0x07	; 7
    1118:	1c 9f       	mul	r17, r28
    111a:	90 01       	movw	r18, r0
    111c:	1d 9f       	mul	r17, r29
    111e:	30 0d       	add	r19, r0
    1120:	11 24       	eor	r1, r1
    1122:	2a 5d       	subi	r18, 0xDA	; 218
    1124:	3f 4f       	sbci	r19, 0xFF	; 255
//		fRecPtr		- address of the function record in the FLASH
//		resPtr		- address of the record to fill in the SRAM
//-----------------------------------------------------------------//
static inline void readMenuRecord(const MenuFunctionRecord* fRecPtr, MenuFunctionRecord* resPtr )
{
	resPtr->Item = pgm_read_byte(&fRecPtr->Item);
    1126:	f9 01       	movw	r30, r18
    1128:	94 91       	lpm	r25, Z
	resPtr->SelectFunction = (FuncPtr)pgm_read_word(&fRecPtr->SelectFunction);
    112a:	31 96       	adiw	r30, 0x01	; 1
    112c:	a5 91       	lpm	r26, Z+
    112e:	b4 91       	lpm	r27, Z
	resPtr->RunFunction = (FuncPtr)pgm_read_word(&fRecPtr->RunFunction);
    1130:	f9 01       	movw	r30, r18
    1132:	33 96       	adiw	r30, 0x03	; 3
    1134:	65 91       	lpm	r22, Z+
    1136:	74 91       	lpm	r23, Z
	resPtr->LeaveFunction = (FuncPtr)pgm_read_word(&fRecPtr->LeaveFunction);
    1138:	2b 5f       	subi	r18, 0xFB	; 251
    113a:	3f 4f       	sbci	r19, 0xFF	; 255
    113c:	f9 01       	movw	r30, r18
    113e:	45 91       	lpm	r20, Z+
    1140:	54 91       	lpm	r21, Z
{
	uint8_t i;
	for (i = 0; i < sizeof(menuFunctionSet)/sizeof(MenuFunctionRecord); i++  )
	{
		readMenuRecord(&menuFunctionSet[i], menuRecord);
		if (menuRecord->Item == menuItemID)
    1142:	98 13       	cpse	r25, r24
    1144:	03 c0       	rjmp	.+6      	; 0x114c <getMenuFunctionRecord.constprop.0+0x40>
    1146:	80 93 e9 00 	sts	0x00E9, r24
    114a:	06 c0       	rjmp	.+12     	; 0x1158 <getMenuFunctionRecord.constprop.0+0x4c>
    114c:	21 96       	adiw	r28, 0x01	; 1
//	Output:
//-----------------------------------------------------------------//
static void getMenuFunctionRecord(uint8_t menuItemID, MenuFunctionRecord* menuRecord )
{
	uint8_t i;
	for (i = 0; i < sizeof(menuFunctionSet)/sizeof(MenuFunctionRecord); i++  )
    114e:	ce 30       	cpi	r28, 0x0E	; 14
    1150:	d1 05       	cpc	r29, r1
    1152:	11 f7       	brne	.-60     	; 0x1118 <getMenuFunctionRecord.constprop.0+0xc>
    1154:	90 93 e9 00 	sts	0x00E9, r25
    1158:	a0 93 ea 00 	sts	0x00EA, r26
    115c:	b0 93 eb 00 	sts	0x00EB, r27
    1160:	60 93 ec 00 	sts	0x00EC, r22
    1164:	70 93 ed 00 	sts	0x00ED, r23
    1168:	40 93 ee 00 	sts	0x00EE, r20
    116c:	50 93 ef 00 	sts	0x00EF, r21
	{
		readMenuRecord(&menuFunctionSet[i], menuRecord);
		if (menuRecord->Item == menuItemID)
			break;
	}
}
    1170:	df 91       	pop	r29
    1172:	cf 91       	pop	r28
    1174:	1f 91       	pop	r17
    1176:	08 95       	ret

00001178 <InitMenu>:
//	Menu initialization
//	Call this function at start of your program before processMenu()
//-----------------------------------------------------------------//
void InitMenu(void)
{
	selectedMenuItemID = mi_REALTEMP;
    1178:	81 e0       	ldi	r24, 0x01	; 1
    117a:	80 93 e8 00 	sts	0x00E8, r24
	getMenuFunctionRecord(selectedMenuItemID, &selectedMenuFunctionRecord);
    117e:	c6 df       	rcall	.-116    	; 0x110c <getMenuFunctionRecord.constprop.0>
	processItemFunction(selectedMenuFunctionRecord.SelectFunction);
    1180:	80 91 ea 00 	lds	r24, 0x00EA
    1184:	90 91 eb 00 	lds	r25, 0x00EB
    1188:	35 cd       	rjmp	.-1430   	; 0xbf4 <processItemFunction>

0000118a <processMenu>:
//	Main menu control, -  state function calls, jumps 
//	between menu states and indication
//	Call this function from main() with a fixed time interval.
//-----------------------------------------------------------------//
void processMenu(void)
{
    118a:	ff 92       	push	r15
    118c:	0f 93       	push	r16
    118e:	1f 93       	push	r17
    1190:	cf 93       	push	r28
    1192:	df 93       	push	r29
	NextItem_t nextItem;
	uint16_t jumpCondition;
	
	processSoftTimer8b(&menuTimer);	
    1194:	86 e7       	ldi	r24, 0x76	; 118
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	eb d2       	rcall	.+1494   	; 0x1770 <processSoftTimer8b>
	
	// Compose jump condition
	jumpCondition = button_state;		
    119a:	40 91 d4 00 	lds	r20, 0x00D4
    119e:	50 91 d5 00 	lds	r21, 0x00D5
	if (menuTimer.FTop)
    11a2:	80 91 76 00 	lds	r24, 0x0076
    11a6:	85 fd       	sbrc	r24, 5
		jumpCondition |= TMR_EXP;
    11a8:	50 68       	ori	r21, 0x80	; 128
	if (sys_timers.flags & AUTOPOFF_EXPIRED)
    11aa:	80 91 81 00 	lds	r24, 0x0081
    11ae:	84 fd       	sbrc	r24, 4
		jumpCondition |= GOTO_POFF;
    11b0:	50 64       	ori	r21, 0x40	; 64
	
	// Get next menu item according to current state and jump conditions
	nextItem = getNextMenuItem(selectedMenuItemID, jumpCondition);
    11b2:	80 91 e8 00 	lds	r24, 0x00E8
    11b6:	60 e0       	ldi	r22, 0x00	; 0
    11b8:	70 e0       	ldi	r23, 0x00	; 0
	MenuJumpRecord	jRecord;
	uint8_t i;
	
	for (i = 0; i < sizeof(menuJumpSet)/sizeof(MenuJumpRecord); i++  )
	{
		readJumpRecord(&menuJumpSet[i], &jRecord);		// read full jump record
    11ba:	95 e0       	ldi	r25, 0x05	; 5
    11bc:	96 9f       	mul	r25, r22
    11be:	90 01       	movw	r18, r0
    11c0:	97 9f       	mul	r25, r23
    11c2:	30 0d       	add	r19, r0
    11c4:	11 24       	eor	r1, r1
    11c6:	28 57       	subi	r18, 0x78	; 120
    11c8:	3f 4f       	sbci	r19, 0xFF	; 255
//		jRecPtr		- address of the jump record in the FLASH
//		resPtr		- address of the record to fill in the SRAM
//-----------------------------------------------------------------//
static inline void readJumpRecord(const MenuJumpRecord* jRecPtr, MenuJumpRecord* resPtr )
{
	resPtr->Item = pgm_read_byte(&jRecPtr->Item);
    11ca:	f9 01       	movw	r30, r18
    11cc:	14 91       	lpm	r17, Z
	resPtr->JumpCondition = pgm_read_word(&jRecPtr->JumpCondition);
    11ce:	31 96       	adiw	r30, 0x01	; 1
    11d0:	a5 91       	lpm	r26, Z+
    11d2:	b4 91       	lpm	r27, Z
	resPtr->NextItem= pgm_read_byte(&jRecPtr->NextItem);
    11d4:	f9 01       	movw	r30, r18
    11d6:	33 96       	adiw	r30, 0x03	; 3
    11d8:	d4 91       	lpm	r29, Z
	resPtr->Flags= pgm_read_byte(&jRecPtr->Flags);
    11da:	f9 01       	movw	r30, r18
    11dc:	34 96       	adiw	r30, 0x04	; 4
    11de:	24 91       	lpm	r18, Z
	uint8_t i;
	
	for (i = 0; i < sizeof(menuJumpSet)/sizeof(MenuJumpRecord); i++  )
	{
		readJumpRecord(&menuJumpSet[i], &jRecord);		// read full jump record
		if (jRecord.Item == selectedItemId)				// If ID match,
    11e0:	18 13       	cpse	r17, r24
    11e2:	0e c0       	rjmp	.+28     	; 0x1200 <processMenu+0x76>
		{
			if ((jRecord.JumpCondition & jmpCond) != 0)		// if any of jump conditions match too,
    11e4:	a4 23       	and	r26, r20
    11e6:	b5 23       	and	r27, r21
    11e8:	ab 2b       	or	r26, r27
    11ea:	51 f0       	breq	.+20     	; 0x1200 <processMenu+0x76>
			{
				nextItem.ItemID = jRecord.NextItem;			// switch to next menu item
				nextItem.ItemTimeout = jRecord.Flags & TIMEOUT_MASK;
    11ec:	c2 2f       	mov	r28, r18
    11ee:	cf 73       	andi	r28, 0x3F	; 63
				nextItem.ShiftRight = (jRecord.Flags & SHIFT_RIGHT) ? 1 : 0;
    11f0:	26 fb       	bst	r18, 6
    11f2:	00 27       	eor	r16, r16
    11f4:	00 f9       	bld	r16, 0
				nextItem.ShiftLeft = (jRecord.Flags & SHIFT_LEFT) ? 1 : 0;
    11f6:	f2 2e       	mov	r15, r18
    11f8:	ff 1c       	adc	r15, r15
    11fa:	ff 24       	eor	r15, r15
    11fc:	ff 1c       	adc	r15, r15
    11fe:	06 c0       	rjmp	.+12     	; 0x120c <processMenu+0x82>
    1200:	6f 5f       	subi	r22, 0xFF	; 255
    1202:	7f 4f       	sbci	r23, 0xFF	; 255
	NextItem_t nextItem;
	nextItem.ItemID = selectedItemId;
	MenuJumpRecord	jRecord;
	uint8_t i;
	
	for (i = 0; i < sizeof(menuJumpSet)/sizeof(MenuJumpRecord); i++  )
    1204:	60 32       	cpi	r22, 0x20	; 32
    1206:	71 05       	cpc	r23, r1
    1208:	c9 f6       	brne	.-78     	; 0x11bc <processMenu+0x32>
		jumpCondition |= TMR_EXP;
	if (sys_timers.flags & AUTOPOFF_EXPIRED)
		jumpCondition |= GOTO_POFF;
	
	// Get next menu item according to current state and jump conditions
	nextItem = getNextMenuItem(selectedMenuItemID, jumpCondition);
    120a:	d8 2f       	mov	r29, r24
    120c:	10 e0       	ldi	r17, 0x00	; 0
    120e:	f0 fa       	bst	r15, 0
    1210:	10 f9       	bld	r17, 0
    1212:	00 fb       	bst	r16, 0
    1214:	11 f9       	bld	r17, 1
	
	// If next item differs from current
	if (nextItem.ItemID != selectedMenuItemID)
    1216:	d8 17       	cp	r29, r24
    1218:	09 f1       	breq	.+66     	; 0x125c <processMenu+0xd2>
	{		
		// Call exit function for current item
		processItemFunction(selectedMenuFunctionRecord.LeaveFunction);
    121a:	80 91 ee 00 	lds	r24, 0x00EE
    121e:	90 91 ef 00 	lds	r25, 0x00EF
    1222:	e8 dc       	rcall	.-1584   	; 0xbf4 <processItemFunction>
		
		// If shifting is specified, start it before calling any 
		//	new menu item functions 
		if (nextItem.ShiftRight)
    1224:	11 ff       	sbrs	r17, 1
    1226:	02 c0       	rjmp	.+4      	; 0x122c <processMenu+0xa2>
			startShiftingWindowRight();
    1228:	23 dc       	rcall	.-1978   	; 0xa70 <startShiftingWindowRight>
    122a:	02 c0       	rjmp	.+4      	; 0x1230 <processMenu+0xa6>
		else if (nextItem.ShiftLeft)
    122c:	10 fd       	sbrc	r17, 0
			startShiftingWindowLeft();
    122e:	12 dc       	rcall	.-2012   	; 0xa54 <startShiftingWindowLeft>
		
		// Select new item
		selectedMenuItemID = nextItem.ItemID;
    1230:	d0 93 e8 00 	sts	0x00E8, r29
		
		// Load from FLASH and save function pointers
		getMenuFunctionRecord(selectedMenuItemID, &selectedMenuFunctionRecord);
    1234:	8d 2f       	mov	r24, r29
    1236:	6a df       	rcall	.-300    	; 0x110c <getMenuFunctionRecord.constprop.0>
		// Call select function for next item
		processItemFunction(selectedMenuFunctionRecord.SelectFunction);
    1238:	80 91 ea 00 	lds	r24, 0x00EA
    123c:	90 91 eb 00 	lds	r25, 0x00EB
    1240:	d9 dc       	rcall	.-1614   	; 0xbf4 <processItemFunction>
		// Start timer if timeout is enabled
		if (nextItem.ItemTimeout != 0)
    1242:	cc 23       	and	r28, r28
    1244:	c1 f0       	breq	.+48     	; 0x1276 <processMenu+0xec>
		{
			menuTimer.Top = nextItem.ItemTimeout * MENU_TIMEOUT_MULT;
    1246:	cc 0f       	add	r28, r28
    1248:	c0 93 78 00 	sts	0x0078, r28
			menuTimer.Timer = 0;
    124c:	10 92 77 00 	sts	0x0077, r1
			menuTimer.Enabled = 1;	
    1250:	80 91 76 00 	lds	r24, 0x0076
    1254:	81 60       	ori	r24, 0x01	; 1
    1256:	80 93 76 00 	sts	0x0076, r24
    125a:	0d c0       	rjmp	.+26     	; 0x1276 <processMenu+0xec>
		}
		
	}
	else
	{
		processSoftTimer8b(&userTimer);
    125c:	80 ef       	ldi	r24, 0xF0	; 240
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	87 d2       	rcall	.+1294   	; 0x1770 <processSoftTimer8b>
		// Stay at previous item
		processItemFunction(selectedMenuFunctionRecord.RunFunction);
    1262:	80 91 ec 00 	lds	r24, 0x00EC
    1266:	90 91 ed 00 	lds	r25, 0x00ED
	}	
}
    126a:	df 91       	pop	r29
    126c:	cf 91       	pop	r28
    126e:	1f 91       	pop	r17
    1270:	0f 91       	pop	r16
    1272:	ff 90       	pop	r15
	}
	else
	{
		processSoftTimer8b(&userTimer);
		// Stay at previous item
		processItemFunction(selectedMenuFunctionRecord.RunFunction);
    1274:	bf cc       	rjmp	.-1666   	; 0xbf4 <processItemFunction>
	}	
}
    1276:	df 91       	pop	r29
    1278:	cf 91       	pop	r28
    127a:	1f 91       	pop	r17
    127c:	0f 91       	pop	r16
    127e:	ff 90       	pop	r15
    1280:	08 95       	ret

00001282 <u16toa_align_right>:
// Converts uint16_t value into decimal string with right alignment
// len = number of digits output (without terminating '\0')
// len[7] = 1 -> no terminating '\0' at buffer[len]
// fill_char -> char used for string padding
void u16toa_align_right(uint16_t val, char *buffer, uint8_t len,char fill_char)
{
    1282:	cf 93       	push	r28
    1284:	df 93       	push	r29
	if (len & 0x80)
    1286:	47 ff       	sbrs	r20, 7
    1288:	05 c0       	rjmp	.+10     	; 0x1294 <u16toa_align_right+0x12>
	{
		len = len & 0x7F;
    128a:	4f 77       	andi	r20, 0x7F	; 127
		buffer += len;	
    128c:	fb 01       	movw	r30, r22
    128e:	e4 0f       	add	r30, r20
    1290:	f1 1d       	adc	r31, r1
    1292:	04 c0       	rjmp	.+8      	; 0x129c <u16toa_align_right+0x1a>
	}
	else
	{
		buffer += len;	
    1294:	fb 01       	movw	r30, r22
    1296:	e4 0f       	add	r30, r20
    1298:	f1 1d       	adc	r31, r1
		*buffer = 0;
    129a:	10 82       	st	Z, r1
	}
	
	do
	{
		*--buffer = val % 10 + '0';
    129c:	ca e0       	ldi	r28, 0x0A	; 10
    129e:	d0 e0       	ldi	r29, 0x00	; 0
    12a0:	be 01       	movw	r22, r28
    12a2:	7e d3       	rcall	.+1788   	; 0x19a0 <__udivmodhi4>
    12a4:	80 5d       	subi	r24, 0xD0	; 208
    12a6:	82 93       	st	-Z, r24
		val /= 10;
    12a8:	cb 01       	movw	r24, r22
		len--;
    12aa:	41 50       	subi	r20, 0x01	; 1
	}
	while ((val != 0) && len);
    12ac:	00 97       	sbiw	r24, 0x00	; 0
    12ae:	21 f0       	breq	.+8      	; 0x12b8 <u16toa_align_right+0x36>
    12b0:	41 11       	cpse	r20, r1
    12b2:	f6 cf       	rjmp	.-20     	; 0x12a0 <u16toa_align_right+0x1e>
    12b4:	01 c0       	rjmp	.+2      	; 0x12b8 <u16toa_align_right+0x36>
	
	// Padding
	while(len--)
		*--buffer = fill_char;
    12b6:	22 93       	st	-Z, r18
		len--;
	}
	while ((val != 0) && len);
	
	// Padding
	while(len--)
    12b8:	41 50       	subi	r20, 0x01	; 1
    12ba:	e8 f7       	brcc	.-6      	; 0x12b6 <u16toa_align_right+0x34>
		*--buffer = fill_char;
}
    12bc:	df 91       	pop	r29
    12be:	cf 91       	pop	r28
    12c0:	08 95       	ret

000012c2 <init_system_io>:
//extern void powTest(void);

void init_system_io()
{
	// Setup Port D
	PORTD = 0;// (1<<PD_SYNCA | 1<<PD_SYNCB);
    12c2:	12 ba       	out	0x12, r1	; 18
	DDRD = (1<<PD_TXD | 1<<PD_M1 | 1<<PD_M2 | 1<<PD_HEATER | 1<<PD_HEAT_INDIC );
    12c4:	8e e3       	ldi	r24, 0x3E	; 62
    12c6:	81 bb       	out	0x11, r24	; 17
	
	// Setup Port B
	PORTB = 0;
    12c8:	18 ba       	out	0x18, r1	; 24
	DDRB = (1<<PB_BEEPER | 1<<PB_LED_DOUT | 1<<PB_LED_CLK | 1<<PB_SEGF | 1<<PB_SEGG | 1<<PB_SEGH);
    12ca:	8f e3       	ldi	r24, 0x3F	; 63
    12cc:	87 bb       	out	0x17, r24	; 23
	
	PORTC = 0;
    12ce:	15 ba       	out	0x15, r1	; 21
	DDRC = (1<<PC_SEGA | 1<<PC_SEGB | 1<<PC_SEGC | 1<<PC_SEGD | 1<<PC_SEGE);	
    12d0:	8f e1       	ldi	r24, 0x1F	; 31
    12d2:	84 bb       	out	0x14, r24	; 20

	// Setup timer0
	// 1/1024 prescaler, T=64us @16MHz
//	TCCR0 = (1<<CS02 | 0<<CS01 | 1<<CS00);
	TCCR0 = 0;
    12d4:	13 be       	out	0x33, r1	; 51
//	TCNT0 = 0;
	// Clear interrupt flag
//	TIFR |= (1<<TOV0);
	// Enable interrupts from timer 0
	TIMSK |= (1<<TOIE0);
    12d6:	89 b7       	in	r24, 0x39	; 57
    12d8:	81 60       	ori	r24, 0x01	; 1
    12da:	89 bf       	out	0x39, r24	; 57
	
	// Setup timer2 as 1ms system frequency generator
	// 1/64 prescaler, CTC mode, OC2 disconnected
	TCCR2 = (1<<CS22 | 1<<WGM21);
    12dc:	8c e0       	ldi	r24, 0x0C	; 12
    12de:	85 bd       	out	0x25, r24	; 37
	OCR2 = 249;
    12e0:	89 ef       	ldi	r24, 0xF9	; 249
    12e2:	83 bd       	out	0x23, r24	; 35
	TIMSK |= (1<<OCIE2);
    12e4:	89 b7       	in	r24, 0x39	; 57
    12e6:	80 68       	ori	r24, 0x80	; 128
    12e8:	89 bf       	out	0x39, r24	; 57
	
	// Setup timer1 as beeper frequency generator
	// CTC mode, 1/64 prescaler
	TCCR1A = 0;
    12ea:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = (1<<WGM12 | 1<<CS11 | 1<<CS10);
    12ec:	8b e0       	ldi	r24, 0x0B	; 11
    12ee:	8e bd       	out	0x2e, r24	; 46
	// 1kHz beeper frequency default
	OCR1A = 127;
    12f0:	8f e7       	ldi	r24, 0x7F	; 127
    12f2:	90 e0       	ldi	r25, 0x00	; 0
    12f4:	9b bd       	out	0x2b, r25	; 43
    12f6:	8a bd       	out	0x2a, r24	; 42

	// Setup AC sync comparator
	// Interrupt on output toggle
	//ACSR |= (1<<ACI);		// Will be cleared just before sei
	ACSR = (1<<ACIE | 0<<ACIS1 | 0<<ACIS0);
    12f8:	88 e0       	ldi	r24, 0x08	; 8
    12fa:	88 b9       	out	0x08, r24	; 8
	
	// Setup ADC
	// Internal Vref + cap, input ADC5, 
	ADMUX = (1<<REFS1 | 1<<REFS0 | 0<<MUX3 | 1<<MUX2 | 0<<MUX1 | 1<<MUX0 );
    12fc:	85 ec       	ldi	r24, 0xC5	; 197
    12fe:	87 b9       	out	0x07, r24	; 7
	// Prescaler = 128
	ADCSRA = (1<<ADEN |/* 1<<ADFR |*/  1<<ADIE | 1<<ADPS2 | 1<<ADPS1 | 1<<ADPS0);
    1300:	8f e8       	ldi	r24, 0x8F	; 143
    1302:	86 b9       	out	0x06, r24	; 6
	
	// Setup USART
	// Double speed
	UCSRA = (1<<U2X);
    1304:	82 e0       	ldi	r24, 0x02	; 2
    1306:	8b b9       	out	0x0b, r24	; 11
	UCSRB = (1<<RXEN | 1<<TXEN | 0<<UCSZ2);
    1308:	88 e1       	ldi	r24, 0x18	; 24
    130a:	8a b9       	out	0x0a, r24	; 10
	// No parity, 1 stop bit, 8 bit
	UCSRC = (1<<URSEL | 0<<UPM1 | 0<<UPM0 | 0<<USBS | 1<<UCSZ1 | 1<<UCSZ0);
    130c:	86 e8       	ldi	r24, 0x86	; 134
    130e:	80 bd       	out	0x20, r24	; 32
	// 57600 @16MHz, 2x
	UBRRH=0x00;
    1310:	10 bc       	out	0x20, r1	; 32
	UBRRL=0x22;
    1312:	82 e2       	ldi	r24, 0x22	; 34
    1314:	89 b9       	out	0x09, r24	; 9
    1316:	08 95       	ret

00001318 <main>:




int main(void)
{
    1318:	cf 93       	push	r28
    131a:	df 93       	push	r29
    131c:	cd b7       	in	r28, 0x3d	; 61
    131e:	de b7       	in	r29, 0x3e	; 62
    1320:	2b 97       	sbiw	r28, 0x0b	; 11
    1322:	0f b6       	in	r0, 0x3f	; 63
    1324:	f8 94       	cli
    1326:	de bf       	out	0x3e, r29	; 62
    1328:	0f be       	out	0x3f, r0	; 63
    132a:	cd bf       	out	0x3d, r28	; 61
	char str[10];
	volatile uint8_t temp8u = 0x00;
    132c:	1b 86       	std	Y+11, r1	; 0x0b
	volatile uint16_t temp16u;
	//uint8_t celsiusUpdateCounter = 0;
	
	// Initialize MCU IO
	init_system_io();
    132e:	c9 df       	rcall	.-110    	; 0x12c2 <init_system_io>
	// Restore params from EEPROM
	restoreGlobalParams();
    1330:	77 da       	rcall	.-2834   	; 0x820 <restoreGlobalParams>
	// Calibrate ADC coefficients using restored params
	calculateCoeffs();
    1332:	58 d7       	rcall	.+3760   	; 0x21e4 <__data_load_end+0x6b8>
	// Initialize LED indicator
	initLedIndicator();
    1334:	ab db       	rcall	.-2218   	; 0xa8c <initLedIndicator>
	// Clear comparator interrupt flag to prevent false triggering
	ACSR |= (1<<ACI);
    1336:	44 9a       	sbi	0x08, 4	; 8
	sei();
    1338:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    133a:	2f ef       	ldi	r18, 0xFF	; 255
    133c:	80 e7       	ldi	r24, 0x70	; 112
    133e:	92 e0       	ldi	r25, 0x02	; 2
    1340:	21 50       	subi	r18, 0x01	; 1
    1342:	80 40       	sbci	r24, 0x00	; 0
    1344:	90 40       	sbci	r25, 0x00	; 0
    1346:	e1 f7       	brne	.-8      	; 0x1340 <main+0x28>
    1348:	00 c0       	rjmp	.+0      	; 0x134a <main+0x32>
    134a:	00 00       	nop
	// Safety delay for power part
	_delay_ms(50);
	// Check AC line
	if(p_state == 0x0F) 	
    134c:	80 91 7a 00 	lds	r24, 0x007A
    1350:	8f 30       	cpi	r24, 0x0F	; 15
    1352:	69 f4       	brne	.+26     	; 0x136e <main+0x56>
	{
		// Power control state machine has not changed - sync has not been detected
		printLedBuffer(0,"AC ERR");
    1354:	6e eb       	ldi	r22, 0xBE	; 190
    1356:	70 e0       	ldi	r23, 0x00	; 0
    1358:	80 e0       	ldi	r24, 0x00	; 0
    135a:	bb db       	rcall	.-2186   	; 0xad2 <printLedBuffer>
    135c:	2f ef       	ldi	r18, 0xFF	; 255
    135e:	83 ed       	ldi	r24, 0xD3	; 211
    1360:	90 e3       	ldi	r25, 0x30	; 48
    1362:	21 50       	subi	r18, 0x01	; 1
    1364:	80 40       	sbci	r24, 0x00	; 0
    1366:	90 40       	sbci	r25, 0x00	; 0
    1368:	e1 f7       	brne	.-8      	; 0x1362 <main+0x4a>
    136a:	00 c0       	rjmp	.+0      	; 0x136c <main+0x54>
    136c:	00 00       	nop
		_delay_ms(1000);
	}
	// Initialize menu
	InitMenu();
    136e:	04 df       	rcall	.-504    	; 0x1178 <InitMenu>
	// Beep
	SetBeeperFreq(1000);
    1370:	88 ee       	ldi	r24, 0xE8	; 232
    1372:	93 e0       	ldi	r25, 0x03	; 3
    1374:	86 d2       	rcall	.+1292   	; 0x1882 <SetBeeperFreq>
	StartBeep(200);
    1376:	88 ec       	ldi	r24, 0xC8	; 200
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	a3 d2       	rcall	.+1350   	; 0x18c2 <StartBeep>
	// When we get here, few ADC counts have been sampled.
	// Call PID controller function in order to initialize it's internal structures
	heaterInit();
    137c:	fb d9       	rcall	.-3082   	; 0x774 <heaterInit>
    137e:	2f ef       	ldi	r18, 0xFF	; 255
    1380:	80 e7       	ldi	r24, 0x70	; 112
    1382:	92 e0       	ldi	r25, 0x02	; 2
    1384:	21 50       	subi	r18, 0x01	; 1
    1386:	80 40       	sbci	r24, 0x00	; 0
    1388:	90 40       	sbci	r25, 0x00	; 0
    138a:	e1 f7       	brne	.-8      	; 0x1384 <main+0x6c>
    138c:	00 c0       	rjmp	.+0      	; 0x138e <main+0x76>
    138e:	00 00       	nop
	_delay_ms(50);
	// Start rotating
	setMotorDirection(ROLL_FWD);
    1390:	81 e0       	ldi	r24, 0x01	; 1
    1392:	65 d0       	rcall	.+202    	; 0x145e <setMotorDirection>
	// Clear timer
	menuUpdateTimer.FOvfl = 0;
    1394:	80 91 82 00 	lds	r24, 0x0082
    1398:	8f 7b       	andi	r24, 0xBF	; 191
    139a:	80 93 82 00 	sts	0x0082, r24

    while(1)
    {
		
		if (menuUpdateTimer.FOvfl)
    139e:	80 91 82 00 	lds	r24, 0x0082
    13a2:	86 ff       	sbrs	r24, 6
    13a4:	fc cf       	rjmp	.-8      	; 0x139e <main+0x86>
		{
			//--------- BUTTONS ----------//
			
			// Get new button state
			process_buttons();
    13a6:	27 d8       	rcall	.-4018   	; 0x3f6 <process_buttons>
			
			// Give sound feedback
			if (button_state & BL_MENU)
    13a8:	80 91 d4 00 	lds	r24, 0x00D4
    13ac:	90 91 d5 00 	lds	r25, 0x00D5
    13b0:	91 ff       	sbrs	r25, 1
    13b2:	03 c0       	rjmp	.+6      	; 0x13ba <main+0xa2>
			{
				SetBeeperFreq(800);
    13b4:	80 e2       	ldi	r24, 0x20	; 32
    13b6:	93 e0       	ldi	r25, 0x03	; 3
    13b8:	06 c0       	rjmp	.+12     	; 0x13c6 <main+0xae>
				StartBeep(40);
			}
			else if (button_action_down & (BD_MENU | BD_UP | BD_DOWN | BD_HEATCTRL))
    13ba:	80 91 d3 00 	lds	r24, 0x00D3
    13be:	87 74       	andi	r24, 0x47	; 71
    13c0:	31 f0       	breq	.+12     	; 0x13ce <main+0xb6>
			{
				SetBeeperFreq(1000);
    13c2:	88 ee       	ldi	r24, 0xE8	; 232
    13c4:	93 e0       	ldi	r25, 0x03	; 3
    13c6:	5d d2       	rcall	.+1210   	; 0x1882 <SetBeeperFreq>
				StartBeep(40);
    13c8:	88 e2       	ldi	r24, 0x28	; 40
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	7a d2       	rcall	.+1268   	; 0x18c2 <StartBeep>
			}	
			// Direction control buttons sounds get special processing at processRollControl()
			
			// If any button is pressed, restart power off interval
			if (button_action_down)
    13ce:	80 91 d3 00 	lds	r24, 0x00D3
    13d2:	81 11       	cpse	r24, r1
				resetAutoPowerOffCounter();
    13d4:	53 d2       	rcall	.+1190   	; 0x187c <resetAutoPowerOffCounter>
			
			//---------- TIMERS ----------//
			
			// Process timers and time counters - it is important to call
			// this function before menu and power controls processing
			processSystemTimers();
    13d6:	f8 d1       	rcall	.+1008   	; 0x17c8 <processSystemTimers>

			// Warn user about near auto powering off
			if (sys_timers.flags & AUTOPOFF_SOON)
    13d8:	80 91 81 00 	lds	r24, 0x0081
    13dc:	83 ff       	sbrs	r24, 3
    13de:	06 c0       	rjmp	.+12     	; 0x13ec <main+0xd4>
			{
				SetBeeperFreq(1200);
    13e0:	80 eb       	ldi	r24, 0xB0	; 176
    13e2:	94 e0       	ldi	r25, 0x04	; 4
    13e4:	4e d2       	rcall	.+1180   	; 0x1882 <SetBeeperFreq>
				StartBeep(200);
    13e6:	88 ec       	ldi	r24, 0xC8	; 200
    13e8:	90 e0       	ldi	r25, 0x00	; 0
    13ea:	6b d2       	rcall	.+1238   	; 0x18c2 <StartBeep>
			}		
			
			//----------- ADC ------------//
			
			// Get new temperature measurement
			update_normalized_adc();			
    13ec:	48 d7       	rcall	.+3728   	; 0x227e <__data_load_end+0x752>
		
			// Update indicated Celsius degree
			if (sys_timers.flags & EXPIRED_CELSIUS)
    13ee:	80 91 81 00 	lds	r24, 0x0081
    13f2:	80 fd       	sbrc	r24, 0
				update_Celsius();		
    13f4:	6e d7       	rcall	.+3804   	; 0x22d2 <__data_load_end+0x7a6>
			
			//----------- MENU -----------//		
				
			// Process user menu states, settings and indication
			processMenu();
    13f6:	c9 de       	rcall	.-622    	; 0x118a <processMenu>
			
			//--------- CONTROLS ---------//		
			
			// Process cyclic rolling, direction control
			processRollControl();	
    13f8:	5f d8       	rcall	.-3906   	; 0x4b8 <processRollControl>
			
			// Process heater regulation
			processHeaterControl();
    13fa:	62 d9       	rcall	.-3388   	; 0x6c0 <processHeaterControl>
		
			// Process heater events and warnings
			processHeaterAlerts();
    13fc:	c3 d9       	rcall	.-3194   	; 0x784 <processHeaterAlerts>
			
			
			
			//------- LOG to UART --------//	
			if (sys_timers.flags & EXPIRED_LOG)
    13fe:	80 91 81 00 	lds	r24, 0x0081
    1402:	85 ff       	sbrs	r24, 5
    1404:	c7 cf       	rjmp	.-114    	; 0x1394 <main+0x7c>
			{
				
				
				u16toa_align_right(adc_oversampled,str,6,' ');				// 
    1406:	20 e2       	ldi	r18, 0x20	; 32
    1408:	46 e0       	ldi	r20, 0x06	; 6
    140a:	be 01       	movw	r22, r28
    140c:	6f 5f       	subi	r22, 0xFF	; 255
    140e:	7f 4f       	sbci	r23, 0xFF	; 255
    1410:	80 91 09 01 	lds	r24, 0x0109
    1414:	90 91 0a 01 	lds	r25, 0x010A
    1418:	34 df       	rcall	.-408    	; 0x1282 <u16toa_align_right>
				USART_sendstr(str);
    141a:	ce 01       	movw	r24, r28
    141c:	01 96       	adiw	r24, 0x01	; 1
    141e:	a2 d2       	rcall	.+1348   	; 0x1964 <USART_sendstr>
				
				u16toa_align_right(ctrl_heater,str,6,' ');				// Heater control (PID output, synchronized)
				USART_sendstr(str);
				
*/				
				USART_sendstr("\n\r");
    1420:	85 ec       	ldi	r24, 0xC5	; 197
    1422:	90 e0       	ldi	r25, 0x00	; 0
    1424:	9f d2       	rcall	.+1342   	; 0x1964 <USART_sendstr>
    1426:	b6 cf       	rjmp	.-148    	; 0x1394 <main+0x7c>

00001428 <setHeaterControl>:

// User function to control heater intensity
void setHeaterControl(uint8_t value)
{
	// Disable interrupts from timer0 
	TIMSK &= ~(1<<TOIE0);
    1428:	99 b7       	in	r25, 0x39	; 57
    142a:	9e 7f       	andi	r25, 0xFE	; 254
    142c:	99 bf       	out	0x39, r25	; 57
	
	ctrl_heater = value;
    142e:	80 93 fa 00 	sts	0x00FA, r24
	heaterState &= ~READY_TO_UPDATE_HEATER;
    1432:	80 91 f9 00 	lds	r24, 0x00F9
    1436:	8f 77       	andi	r24, 0x7F	; 127
    1438:	80 93 f9 00 	sts	0x00F9, r24
	
	// Enable interrupts from timer 0
	TIMSK |= (1<<TOIE0);	
    143c:	89 b7       	in	r24, 0x39	; 57
    143e:	81 60       	ori	r24, 0x01	; 1
    1440:	89 bf       	out	0x39, r24	; 57
    1442:	08 95       	ret

00001444 <forceHeaterControlUpdate>:


void forceHeaterControlUpdate(void)
{
	// Disable interrupts from timer0 
	TIMSK &= ~(1<<TOIE0);
    1444:	89 b7       	in	r24, 0x39	; 57
    1446:	8e 7f       	andi	r24, 0xFE	; 254
    1448:	89 bf       	out	0x39, r24	; 57
	
	// Flag READY_TO_UPDATE_HEATER will be set on next on next AC line period
	heater_cnt = HEATER_REGULATION_PERIODS - 6;
    144a:	8c e2       	ldi	r24, 0x2C	; 44
    144c:	80 93 fb 00 	sts	0x00FB, r24
	heater_reg_cnt = HEATER_PID_CALL_INTERVAL - 1;
    1450:	83 e0       	ldi	r24, 0x03	; 3
    1452:	80 93 f8 00 	sts	0x00F8, r24
	
	// Enable interrupts from timer 0
	TIMSK |= (1<<TOIE0);	
    1456:	89 b7       	in	r24, 0x39	; 57
    1458:	81 60       	ori	r24, 0x01	; 1
    145a:	89 bf       	out	0x39, r24	; 57
    145c:	08 95       	ret

0000145e <setMotorDirection>:
	
// User function to control motor rotation
void setMotorDirection(uint8_t dir)
{
	// Disable interrupts from timer0 
	TIMSK &= ~(1<<TOIE0);
    145e:	99 b7       	in	r25, 0x39	; 57
    1460:	9e 7f       	andi	r25, 0xFE	; 254
    1462:	99 bf       	out	0x39, r25	; 57
		
	newDirReq = dir;	// save new direction request
    1464:	80 93 fc 00 	sts	0x00FC, r24
	dirChangedMask = ~ROLL_DIR_CHANGED;
    1468:	9f ed       	ldi	r25, 0xDF	; 223
    146a:	90 93 7b 00 	sts	0x007B, r25
	
	if (dir & ROLL_FWD)
    146e:	80 ff       	sbrs	r24, 0
    1470:	09 c0       	rjmp	.+18     	; 0x1484 <setMotorDirection+0x26>
		bottomPoint = rollPoint;
    1472:	80 91 fd 00 	lds	r24, 0x00FD
    1476:	90 91 fe 00 	lds	r25, 0x00FE
    147a:	90 93 00 01 	sts	0x0100, r25
    147e:	80 93 ff 00 	sts	0x00FF, r24
    1482:	0a c0       	rjmp	.+20     	; 0x1498 <setMotorDirection+0x3a>
	else if (dir & ROLL_REV)
    1484:	81 ff       	sbrs	r24, 1
    1486:	08 c0       	rjmp	.+16     	; 0x1498 <setMotorDirection+0x3a>
		topPoint = rollPoint;
    1488:	80 91 fd 00 	lds	r24, 0x00FD
    148c:	90 91 fe 00 	lds	r25, 0x00FE
    1490:	90 93 02 01 	sts	0x0102, r25
    1494:	80 93 01 01 	sts	0x0101, r24

	// Enable interrupts from timer 0
	TIMSK |= (1<<TOIE0);	
    1498:	89 b7       	in	r24, 0x39	; 57
    149a:	81 60       	ori	r24, 0x01	; 1
    149c:	89 bf       	out	0x39, r24	; 57
    149e:	08 95       	ret

000014a0 <stopCycleRolling>:
}

void stopCycleRolling(uint8_t doResetPoints)
{
	// Disable interrupts from timer0 
	TIMSK &= ~(1<<TOIE0);
    14a0:	99 b7       	in	r25, 0x39	; 57
    14a2:	9e 7f       	andi	r25, 0xFE	; 254
    14a4:	99 bf       	out	0x39, r25	; 57
	
	rollState &= ~ROLL_CYCLE;
    14a6:	90 91 f7 00 	lds	r25, 0x00F7
    14aa:	9b 7f       	andi	r25, 0xFB	; 251
    14ac:	90 93 f7 00 	sts	0x00F7, r25
	if (doResetPoints)
    14b0:	88 23       	and	r24, r24
    14b2:	71 f0       	breq	.+28     	; 0x14d0 <stopCycleRolling+0x30>
	{
		topPoint = bottomPoint = rollPoint;
    14b4:	80 91 fd 00 	lds	r24, 0x00FD
    14b8:	90 91 fe 00 	lds	r25, 0x00FE
    14bc:	90 93 00 01 	sts	0x0100, r25
    14c0:	80 93 ff 00 	sts	0x00FF, r24
    14c4:	90 93 02 01 	sts	0x0102, r25
    14c8:	80 93 01 01 	sts	0x0101, r24
		activeRollCycle = 0;	
    14cc:	10 92 f6 00 	sts	0x00F6, r1
	}		
	
	// Enable interrupts from timer 0
	TIMSK |= (1<<TOIE0);
    14d0:	89 b7       	in	r24, 0x39	; 57
    14d2:	81 60       	ori	r24, 0x01	; 1
    14d4:	89 bf       	out	0x39, r24	; 57
    14d6:	08 95       	ret

000014d8 <isTopPointValid>:



uint8_t isTopPointValid(void)
{
	return (	(int16_t)(topPoint - rollPoint) >= 0 );
    14d8:	80 91 01 01 	lds	r24, 0x0101
    14dc:	90 91 02 01 	lds	r25, 0x0102
    14e0:	20 91 fd 00 	lds	r18, 0x00FD
    14e4:	30 91 fe 00 	lds	r19, 0x00FE
    14e8:	82 1b       	sub	r24, r18
    14ea:	93 0b       	sbc	r25, r19
    14ec:	89 2f       	mov	r24, r25
    14ee:	80 95       	com	r24
}
    14f0:	88 1f       	adc	r24, r24
    14f2:	88 27       	eor	r24, r24
    14f4:	88 1f       	adc	r24, r24
    14f6:	08 95       	ret

000014f8 <isBottomPointValid>:

uint8_t isBottomPointValid(void)
{
	return (	(int16_t)(rollPoint - bottomPoint) >= 0	);
    14f8:	80 91 fd 00 	lds	r24, 0x00FD
    14fc:	90 91 fe 00 	lds	r25, 0x00FE
    1500:	20 91 ff 00 	lds	r18, 0x00FF
    1504:	30 91 00 01 	lds	r19, 0x0100
    1508:	82 1b       	sub	r24, r18
    150a:	93 0b       	sbc	r25, r19
    150c:	89 2f       	mov	r24, r25
    150e:	80 95       	com	r24
}
    1510:	88 1f       	adc	r24, r24
    1512:	88 27       	eor	r24, r24
    1514:	88 1f       	adc	r24, r24
    1516:	08 95       	ret

00001518 <startCycleRolling>:


uint8_t startCycleRolling(void)
{
	// Disable interrupts from timer0 
	TIMSK &= ~(1<<TOIE0);
    1518:	89 b7       	in	r24, 0x39	; 57
    151a:	8e 7f       	andi	r24, 0xFE	; 254
    151c:	89 bf       	out	0x39, r24	; 57
	
	if ( isTopPointValid() && isBottomPointValid() )
    151e:	dc df       	rcall	.-72     	; 0x14d8 <isTopPointValid>
    1520:	88 23       	and	r24, r24
    1522:	59 f0       	breq	.+22     	; 0x153a <startCycleRolling+0x22>
    1524:	e9 df       	rcall	.-46     	; 0x14f8 <isBottomPointValid>
    1526:	88 23       	and	r24, r24
    1528:	41 f0       	breq	.+16     	; 0x153a <startCycleRolling+0x22>
	{
		rollState |= ROLL_CYCLE;
    152a:	80 91 f7 00 	lds	r24, 0x00F7
    152e:	84 60       	ori	r24, 0x04	; 4
    1530:	80 93 f7 00 	sts	0x00F7, r24
		activeRollCycle = 1;
    1534:	81 e0       	ldi	r24, 0x01	; 1
    1536:	80 93 f6 00 	sts	0x00F6, r24
	}
	
	// Enable interrupts from timer 0
	TIMSK |= (1<<TOIE0);
    153a:	89 b7       	in	r24, 0x39	; 57
    153c:	81 60       	ori	r24, 0x01	; 1
    153e:	89 bf       	out	0x39, r24	; 57
	
	return (rollState & ROLL_CYCLE);
    1540:	80 91 f7 00 	lds	r24, 0x00F7
}
    1544:	84 70       	andi	r24, 0x04	; 4
    1546:	08 95       	ret

00001548 <__vector_16>:




ISR(ANA_COMP_vect)
{
    1548:	1f 92       	push	r1
    154a:	0f 92       	push	r0
    154c:	0f b6       	in	r0, 0x3f	; 63
    154e:	0f 92       	push	r0
    1550:	11 24       	eor	r1, r1
    1552:	8f 93       	push	r24
    1554:	9f 93       	push	r25
	// Once triggered, disable further comparator interrupt
	ACSR &= ~(1<<ACIE);
    1556:	43 98       	cbi	0x08, 3	; 8
	ACSR |= (1<<ACI);
    1558:	44 9a       	sbi	0x08, 4	; 8
	// Turn on heater TRIAC
	if (heater_cnt < ctrl_heater_sync)
    155a:	90 91 fb 00 	lds	r25, 0x00FB
    155e:	80 91 03 01 	lds	r24, 0x0103
    1562:	98 17       	cp	r25, r24
    1564:	20 f4       	brcc	.+8      	; 0x156e <__vector_16+0x26>
		PORTD |= (1<<PD_HEATER | 1<<PD_HEAT_INDIC);	// Direct heater indication
    1566:	82 b3       	in	r24, 0x12	; 18
    1568:	80 63       	ori	r24, 0x30	; 48
    156a:	82 bb       	out	0x12, r24	; 18
    156c:	01 c0       	rjmp	.+2      	; 0x1570 <__vector_16+0x28>
	else
		PORTD &= ~(1<<PD_HEAT_INDIC);
    156e:	95 98       	cbi	0x12, 5	; 18
	// Reprogram timer0
	TCNT0 = 256 - TRIAC_IMPULSE_TIME;		// Triac gate impulse time
    1570:	86 ef       	ldi	r24, 0xF6	; 246
    1572:	82 bf       	out	0x32, r24	; 50
	TCCR0 = (1<<CS02 | 0<<CS01 | 1<<CS00);	// 1/1024 prescaler, T=64us @16MHz
    1574:	85 e0       	ldi	r24, 0x05	; 5
    1576:	83 bf       	out	0x33, r24	; 51
	TIFR |= (1<<TOV0);						// Clear interrupt flag
    1578:	88 b7       	in	r24, 0x38	; 56
    157a:	81 60       	ori	r24, 0x01	; 1
    157c:	88 bf       	out	0x38, r24	; 56
	// Modify state	
	p_state &= ~STATE_MASK;					// Start new state machine cycle
    157e:	80 91 7a 00 	lds	r24, 0x007A
    1582:	80 7f       	andi	r24, 0xF0	; 240
	p_state ^= HALF_PERIOD_FLAG;			// Toggle flag
    1584:	80 58       	subi	r24, 0x80	; 128
    1586:	80 93 7a 00 	sts	0x007A, r24
	
}
    158a:	9f 91       	pop	r25
    158c:	8f 91       	pop	r24
    158e:	0f 90       	pop	r0
    1590:	0f be       	out	0x3f, r0	; 63
    1592:	0f 90       	pop	r0
    1594:	1f 90       	pop	r1
    1596:	18 95       	reti

00001598 <__vector_9>:



ISR(TIMER0_OVF_vect)
{
    1598:	1f 92       	push	r1
    159a:	0f 92       	push	r0
    159c:	0f b6       	in	r0, 0x3f	; 63
    159e:	0f 92       	push	r0
    15a0:	11 24       	eor	r1, r1
    15a2:	2f 93       	push	r18
    15a4:	3f 93       	push	r19
    15a6:	4f 93       	push	r20
    15a8:	5f 93       	push	r21
    15aa:	6f 93       	push	r22
    15ac:	7f 93       	push	r23
    15ae:	8f 93       	push	r24
    15b0:	9f 93       	push	r25
    15b2:	af 93       	push	r26
    15b4:	bf 93       	push	r27
    15b6:	ef 93       	push	r30
    15b8:	ff 93       	push	r31
	uint8_t temp;
	
	switch(p_state & STATE_MASK)
    15ba:	80 91 7a 00 	lds	r24, 0x007A
    15be:	8f 70       	andi	r24, 0x0F	; 15
    15c0:	81 30       	cpi	r24, 0x01	; 1
    15c2:	49 f0       	breq	.+18     	; 0x15d6 <__vector_9+0x3e>
    15c4:	28 f0       	brcs	.+10     	; 0x15d0 <__vector_9+0x38>
    15c6:	82 30       	cpi	r24, 0x02	; 2
    15c8:	49 f0       	breq	.+18     	; 0x15dc <__vector_9+0x44>
    15ca:	83 30       	cpi	r24, 0x03	; 3
    15cc:	71 f4       	brne	.+28     	; 0x15ea <__vector_9+0x52>
    15ce:	0c c0       	rjmp	.+24     	; 0x15e8 <__vector_9+0x50>
	{
		// TRIAC_IMPULSE_TIME finished
		case 0x00:
			// Turn off heater TRIAC
			PORTD &= ~(1<<PD_HEATER);
    15d0:	94 98       	cbi	0x12, 4	; 18
			TCNT0 = 256 - (QUATER_PERIOD_TIME - TRIAC_IMPULSE_TIME);
    15d2:	8c eb       	ldi	r24, 0xBC	; 188
    15d4:	01 c0       	rjmp	.+2      	; 0x15d8 <__vector_9+0x40>
			break;
		// QUATER_PERIOD_TIME finished	
		case 0x01:	
			TCNT0 = 256 - (SYNC_IGNORE_TIME - QUATER_PERIOD_TIME);
    15d6:	8c ec       	ldi	r24, 0xCC	; 204
    15d8:	82 bf       	out	0x32, r24	; 50
			break;	
    15da:	07 c0       	rjmp	.+14     	; 0x15ea <__vector_9+0x52>
		// SYNC_IGNORE_TIME finished	
		case 0x02:
			TCNT0 = 256 - SYNC_LOST_TIMEOUT;
    15dc:	84 ec       	ldi	r24, 0xC4	; 196
    15de:	82 bf       	out	0x32, r24	; 50
			// Clear flag and enable interrupt from analog comparator
			ACSR |= (1<<ACI);
    15e0:	44 9a       	sbi	0x08, 4	; 8
			ACSR |= (1<<ACIE);
    15e2:	43 9a       	sbi	0x08, 3	; 8
			// DEBUG!!!
			PORTD |= (1<<PD_HEAT_INDIC);
    15e4:	95 9a       	sbi	0x12, 5	; 18
			break;
    15e6:	01 c0       	rjmp	.+2      	; 0x15ea <__vector_9+0x52>
		// SYNC_LOST_TIMEOUT finished
		case 0x03:
			// Error - sync is lost. It means that device has been disconnected from AC line.
			// Disable all power-consuming devices like LEDs and save user settings to EEPROM.
			exitPowerOff();
    15e8:	22 d9       	rcall	.-3516   	; 0x82e <exitPowerOff>
			// Sync is not present - do nothing
			break;
	}	

	// Full period check
	if ((p_state & (HALF_PERIOD_FLAG | STATE_MASK)) == (HALF_PERIOD_FLAG | 0x01))
    15ea:	80 91 7a 00 	lds	r24, 0x007A
    15ee:	8f 78       	andi	r24, 0x8F	; 143
    15f0:	81 38       	cpi	r24, 0x81	; 129
    15f2:	09 f0       	breq	.+2      	; 0x15f6 <__vector_9+0x5e>
    15f4:	a3 c0       	rjmp	.+326    	; 0x173c <__vector_9+0x1a4>
	{
		// Full AC line period is done. Update controls.
		
		temp = PORTD;
    15f6:	82 b3       	in	r24, 0x12	; 18
		temp &= ~(1<<PD_M1 | 1<<PD_M2);
    15f8:	83 7f       	andi	r24, 0xF3	; 243
		if ( rollState & SKIP_CURRENT_MOTOR_CTRL )
    15fa:	90 91 f7 00 	lds	r25, 0x00F7
    15fe:	93 ff       	sbrs	r25, 3
    1600:	05 c0       	rjmp	.+10     	; 0x160c <__vector_9+0x74>
		{
			// Direction control changed. Skip current period to allow TRIACs fully close
			rollState &= ~SKIP_CURRENT_MOTOR_CTRL;
    1602:	97 7f       	andi	r25, 0xF7	; 247
    1604:	90 93 f7 00 	sts	0x00F7, r25
			PORTD = temp; 	
    1608:	82 bb       	out	0x12, r24	; 18
    160a:	76 c0       	rjmp	.+236    	; 0x16f8 <__vector_9+0x160>
		}
		else
		{
			// Apply direction control 
			if (rollState & ROLL_FWD)
    160c:	90 ff       	sbrs	r25, 0
    160e:	02 c0       	rjmp	.+4      	; 0x1614 <__vector_9+0x7c>
				temp |= (1<<PD_M1);
    1610:	84 60       	ori	r24, 0x04	; 4
    1612:	02 c0       	rjmp	.+4      	; 0x1618 <__vector_9+0x80>
			else if (rollState & ROLL_REV)
    1614:	91 fd       	sbrc	r25, 1
				temp |= (1<<PD_M2);
    1616:	88 60       	ori	r24, 0x08	; 8
			PORTD = temp; 
    1618:	82 bb       	out	0x12, r24	; 18
// Function to process rolling - sets rotation direction for next period
// Call once per each AC line period
static inline void controlRolling()
{
	// Process cycle rolling
	switch(rollState & (ROLL_FWD | ROLL_REV | ROLL_CYCLE))
    161a:	40 91 f7 00 	lds	r20, 0x00F7
    161e:	84 2f       	mov	r24, r20
    1620:	87 70       	andi	r24, 0x07	; 7
    1622:	85 30       	cpi	r24, 0x05	; 5
    1624:	19 f0       	breq	.+6      	; 0x162c <__vector_9+0x94>
    1626:	86 30       	cpi	r24, 0x06	; 6
    1628:	e9 f5       	brne	.+122    	; 0x16a4 <__vector_9+0x10c>
    162a:	1d c0       	rjmp	.+58     	; 0x1666 <__vector_9+0xce>
//---------------------------------------------//
//---------------------------------------------//

static inline uint8_t reachedTopPoint(void)
{
	return (	(int16_t)(topPoint - rollPoint) <= 0 );
    162c:	80 91 01 01 	lds	r24, 0x0101
    1630:	90 91 02 01 	lds	r25, 0x0102
    1634:	20 91 fd 00 	lds	r18, 0x00FD
    1638:	30 91 fe 00 	lds	r19, 0x00FE
    163c:	82 1b       	sub	r24, r18
    163e:	93 0b       	sbc	r25, r19
{
	// Process cycle rolling
	switch(rollState & (ROLL_FWD | ROLL_REV | ROLL_CYCLE))
	{
		case (ROLL_FWD | ROLL_CYCLE):
			if (reachedTopPoint())
    1640:	18 16       	cp	r1, r24
    1642:	19 06       	cpc	r1, r25
    1644:	7c f1       	brlt	.+94     	; 0x16a4 <__vector_9+0x10c>
			{
				if (activeRollCycle >= p.rollCycleSet)	
    1646:	80 91 f6 00 	lds	r24, 0x00F6
    164a:	90 91 38 01 	lds	r25, 0x0138
    164e:	89 17       	cp	r24, r25
    1650:	28 f0       	brcs	.+10     	; 0x165c <__vector_9+0xc4>
				{
					// DONE!
					rollState &= ~ROLL_CYCLE;
    1652:	4b 7f       	andi	r20, 0xFB	; 251
					rollState |= CYCLE_ROLL_DONE;
    1654:	40 61       	ori	r20, 0x10	; 16
    1656:	40 93 f7 00 	sts	0x00F7, r20
    165a:	24 c0       	rjmp	.+72     	; 0x16a4 <__vector_9+0x10c>
				}
				else
				{
					activeRollCycle++;
    165c:	8f 5f       	subi	r24, 0xFF	; 255
    165e:	80 93 f6 00 	sts	0x00F6, r24
					// Change dir	
					newDirReq = ROLL_REV;				
    1662:	82 e0       	ldi	r24, 0x02	; 2
    1664:	1d c0       	rjmp	.+58     	; 0x16a0 <__vector_9+0x108>
	return (	(int16_t)(topPoint - rollPoint) <= 0 );
}

static inline uint8_t reachedBottomPoint(void)
{
	return (	(int16_t)(rollPoint - bottomPoint) <= 0 );
    1666:	80 91 fd 00 	lds	r24, 0x00FD
    166a:	90 91 fe 00 	lds	r25, 0x00FE
    166e:	20 91 ff 00 	lds	r18, 0x00FF
    1672:	30 91 00 01 	lds	r19, 0x0100
    1676:	82 1b       	sub	r24, r18
    1678:	93 0b       	sbc	r25, r19
				}
			}
			break;
		
		case (ROLL_REV | ROLL_CYCLE):	
			if (reachedBottomPoint())
    167a:	18 16       	cp	r1, r24
    167c:	19 06       	cpc	r1, r25
    167e:	94 f0       	brlt	.+36     	; 0x16a4 <__vector_9+0x10c>
			{
				if (activeRollCycle >= p.rollCycleSet)	
    1680:	80 91 f6 00 	lds	r24, 0x00F6
    1684:	90 91 38 01 	lds	r25, 0x0138
    1688:	89 17       	cp	r24, r25
    168a:	30 f0       	brcs	.+12     	; 0x1698 <__vector_9+0x100>
				{
					// DONE!
					rollState &= ~ROLL_CYCLE;
    168c:	84 2f       	mov	r24, r20
    168e:	8b 7f       	andi	r24, 0xFB	; 251
					rollState |= CYCLE_ROLL_DONE;
    1690:	80 61       	ori	r24, 0x10	; 16
    1692:	80 93 f7 00 	sts	0x00F7, r24
    1696:	06 c0       	rjmp	.+12     	; 0x16a4 <__vector_9+0x10c>
				}
				else
				{
					activeRollCycle++;
    1698:	8f 5f       	subi	r24, 0xFF	; 255
    169a:	80 93 f6 00 	sts	0x00F6, r24
					// Change dir	
					newDirReq = ROLL_FWD;
    169e:	81 e0       	ldi	r24, 0x01	; 1
    16a0:	80 93 fc 00 	sts	0x00FC, r24
		default:
			break;
	}
	
	// Process direction change
	if ((rollState ^ newDirReq) & (ROLL_FWD | ROLL_REV))
    16a4:	20 91 f7 00 	lds	r18, 0x00F7
    16a8:	90 91 fc 00 	lds	r25, 0x00FC
    16ac:	89 2f       	mov	r24, r25
    16ae:	82 27       	eor	r24, r18
    16b0:	83 70       	andi	r24, 0x03	; 3
    16b2:	19 f0       	breq	.+6      	; 0x16ba <__vector_9+0x122>
	{
		// ROLL_DIR_CHANGED is used for sound beep
		rollState |= (SKIP_CURRENT_MOTOR_CTRL | ROLL_DIR_CHANGED);
    16b4:	28 62       	ori	r18, 0x28	; 40
    16b6:	20 93 f7 00 	sts	0x00F7, r18
	}
	
	rollState &= ~(ROLL_FWD | ROLL_REV);
    16ba:	80 91 f7 00 	lds	r24, 0x00F7
    16be:	8c 7f       	andi	r24, 0xFC	; 252
	rollState |= newDirReq;
    16c0:	89 2b       	or	r24, r25
	rollState &= dirChangedMask;
    16c2:	90 91 7b 00 	lds	r25, 0x007B
    16c6:	89 23       	and	r24, r25
    16c8:	80 93 f7 00 	sts	0x00F7, r24
	dirChangedMask = 0xFF;
    16cc:	9f ef       	ldi	r25, 0xFF	; 255
    16ce:	90 93 7b 00 	sts	0x007B, r25
	return (	(int16_t)(rollPoint - bottomPoint) <= 0 );
}

static inline void updateRollPoint(void)
{	
	if (rollState & ROLL_FWD)
    16d2:	80 ff       	sbrs	r24, 0
    16d4:	06 c0       	rjmp	.+12     	; 0x16e2 <__vector_9+0x14a>
		rollPoint++;
    16d6:	80 91 fd 00 	lds	r24, 0x00FD
    16da:	90 91 fe 00 	lds	r25, 0x00FE
    16de:	01 96       	adiw	r24, 0x01	; 1
    16e0:	07 c0       	rjmp	.+14     	; 0x16f0 <__vector_9+0x158>
	else if (rollState & ROLL_REV)
    16e2:	81 ff       	sbrs	r24, 1
    16e4:	09 c0       	rjmp	.+18     	; 0x16f8 <__vector_9+0x160>
		rollPoint--;	
    16e6:	80 91 fd 00 	lds	r24, 0x00FD
    16ea:	90 91 fe 00 	lds	r25, 0x00FE
    16ee:	01 97       	sbiw	r24, 0x01	; 1
    16f0:	90 93 fe 00 	sts	0x00FE, r25
    16f4:	80 93 fd 00 	sts	0x00FD, r24
			controlRolling();
		}
			

		// Process heater control 
		if (heater_cnt == HEATER_REGULATION_PERIODS - 6)
    16f8:	80 91 fb 00 	lds	r24, 0x00FB
    16fc:	8c 32       	cpi	r24, 0x2C	; 44
    16fe:	81 f4       	brne	.+32     	; 0x1720 <__vector_9+0x188>
		{
			 if (heater_reg_cnt == HEATER_PID_CALL_INTERVAL - 1)
    1700:	80 91 f8 00 	lds	r24, 0x00F8
    1704:	83 30       	cpi	r24, 0x03	; 3
    1706:	49 f4       	brne	.+18     	; 0x171a <__vector_9+0x182>
			 {
				 heater_reg_cnt = 0;
    1708:	10 92 f8 00 	sts	0x00F8, r1
				 // Set flag for PID control
				 heaterState |= READY_TO_UPDATE_HEATER;
    170c:	80 91 f9 00 	lds	r24, 0x00F9
    1710:	80 68       	ori	r24, 0x80	; 128
    1712:	80 93 f9 00 	sts	0x00F9, r24
				 // Save temperature measure at current time
				 samplePIDProcessValue();
    1716:	4c d7       	rcall	.+3736   	; 0x25b0 <__data_load_end+0xa84>
    1718:	03 c0       	rjmp	.+6      	; 0x1720 <__vector_9+0x188>
			 }
			 else
			 {
				 heater_reg_cnt++;
    171a:	8f 5f       	subi	r24, 0xFF	; 255
    171c:	80 93 f8 00 	sts	0x00F8, r24
			 }
		}			 
		
		
		if (heater_cnt == HEATER_REGULATION_PERIODS - 1)
    1720:	80 91 fb 00 	lds	r24, 0x00FB
    1724:	81 33       	cpi	r24, 0x31	; 49
    1726:	39 f4       	brne	.+14     	; 0x1736 <__vector_9+0x19e>
		{
			heater_cnt = 0;
    1728:	10 92 fb 00 	sts	0x00FB, r1
			// Copy new output value
			ctrl_heater_sync = ctrl_heater;
    172c:	80 91 fa 00 	lds	r24, 0x00FA
    1730:	80 93 03 01 	sts	0x0103, r24
    1734:	03 c0       	rjmp	.+6      	; 0x173c <__vector_9+0x1a4>
		}
		else
		{
			heater_cnt++;
    1736:	8f 5f       	subi	r24, 0xFF	; 255
    1738:	80 93 fb 00 	sts	0x00FB, r24
			
			
	}
	

	if ((p_state & STATE_MASK)  != 0x0F)
    173c:	80 91 7a 00 	lds	r24, 0x007A
    1740:	98 2f       	mov	r25, r24
    1742:	9f 70       	andi	r25, 0x0F	; 15
    1744:	9f 30       	cpi	r25, 0x0F	; 15
    1746:	19 f0       	breq	.+6      	; 0x174e <__vector_9+0x1b6>
		p_state++;
    1748:	8f 5f       	subi	r24, 0xFF	; 255
    174a:	80 93 7a 00 	sts	0x007A, r24

}	
    174e:	ff 91       	pop	r31
    1750:	ef 91       	pop	r30
    1752:	bf 91       	pop	r27
    1754:	af 91       	pop	r26
    1756:	9f 91       	pop	r25
    1758:	8f 91       	pop	r24
    175a:	7f 91       	pop	r23
    175c:	6f 91       	pop	r22
    175e:	5f 91       	pop	r21
    1760:	4f 91       	pop	r20
    1762:	3f 91       	pop	r19
    1764:	2f 91       	pop	r18
    1766:	0f 90       	pop	r0
    1768:	0f be       	out	0x3f, r0	; 63
    176a:	0f 90       	pop	r0
    176c:	1f 90       	pop	r1
    176e:	18 95       	reti

00001770 <processSoftTimer8b>:
 
 
 
 
 void processSoftTimer8b(SoftTimer8b_t *tmr)
 {
    1770:	fc 01       	movw	r30, r24
	 uint8_t newTimerVal;

	 if (!tmr->Enabled)
    1772:	90 81       	ld	r25, Z
    1774:	90 ff       	sbrs	r25, 0
    1776:	27 c0       	rjmp	.+78     	; 0x17c6 <processSoftTimer8b+0x56>
		return;
	 
	 tmr->FA_EQ = 0;
	 tmr->FA_GE = 0;
	 tmr->FTop = 0;
    1778:	97 7e       	andi	r25, 0xE7	; 231
    177a:	9f 7d       	andi	r25, 0xDF	; 223
    177c:	90 83       	st	Z, r25
	 
	 if (tmr->Timer >= tmr->Top)
    177e:	81 81       	ldd	r24, Z+1	; 0x01
    1780:	22 81       	ldd	r18, Z+2	; 0x02
    1782:	82 17       	cp	r24, r18
    1784:	50 f0       	brcs	.+20     	; 0x179a <processSoftTimer8b+0x2a>
	 {
		 if (tmr->RunOnce)
    1786:	91 ff       	sbrs	r25, 1
    1788:	02 c0       	rjmp	.+4      	; 0x178e <processSoftTimer8b+0x1e>
		 {
			 tmr->Enabled = 0;
    178a:	9e 7f       	andi	r25, 0xFE	; 254
    178c:	90 83       	st	Z, r25
		 }
		 tmr->FTop = 1;
    178e:	90 81       	ld	r25, Z
		 tmr->FOvfl = 1;
    1790:	90 62       	ori	r25, 0x20	; 32
    1792:	90 64       	ori	r25, 0x40	; 64
    1794:	90 83       	st	Z, r25
		 newTimerVal = 0;
    1796:	20 e0       	ldi	r18, 0x00	; 0
    1798:	02 c0       	rjmp	.+4      	; 0x179e <processSoftTimer8b+0x2e>
	 }
	 else
	 {
		 newTimerVal = tmr->Timer + 1;
    179a:	28 2f       	mov	r18, r24
    179c:	2f 5f       	subi	r18, 0xFF	; 255
	 }
	 
	 if (tmr->Timer == tmr->CompA)
    179e:	93 81       	ldd	r25, Z+3	; 0x03
    17a0:	89 13       	cpse	r24, r25
    17a2:	0b c0       	rjmp	.+22     	; 0x17ba <processSoftTimer8b+0x4a>
	 {
		 tmr->FA_EQ = 1;
    17a4:	80 81       	ld	r24, Z
		 tmr->FA_GE = 1;
    17a6:	88 60       	ori	r24, 0x08	; 8
    17a8:	80 61       	ori	r24, 0x10	; 16
		 tmr->FA_TGL = !tmr->FA_TGL;
    17aa:	82 fb       	bst	r24, 2
    17ac:	99 27       	eor	r25, r25
    17ae:	90 f9       	bld	r25, 0
    17b0:	31 e0       	ldi	r19, 0x01	; 1
    17b2:	93 27       	eor	r25, r19
    17b4:	90 fb       	bst	r25, 0
    17b6:	82 f9       	bld	r24, 2
    17b8:	04 c0       	rjmp	.+8      	; 0x17c2 <processSoftTimer8b+0x52>
	 }
	 else if (tmr->Timer >= tmr->CompA)
    17ba:	89 17       	cp	r24, r25
    17bc:	18 f0       	brcs	.+6      	; 0x17c4 <processSoftTimer8b+0x54>
	 {
		 tmr->FA_GE = 1;
    17be:	80 81       	ld	r24, Z
    17c0:	80 61       	ori	r24, 0x10	; 16
    17c2:	80 83       	st	Z, r24
	 }
	 
	 tmr->Timer = newTimerVal; 
    17c4:	21 83       	std	Z+1, r18	; 0x01
    17c6:	08 95       	ret

000017c8 <processSystemTimers>:



void processSystemTimers(void)
{
	sys_timers.flags = 0x00;
    17c8:	10 92 81 00 	sts	0x0081, r1
	
	// Process Celsius counter
	if (--sys_timers.celsius_upd_counter == 0)
    17cc:	80 91 7c 00 	lds	r24, 0x007C
    17d0:	81 50       	subi	r24, 0x01	; 1
    17d2:	19 f0       	breq	.+6      	; 0x17da <processSystemTimers+0x12>
    17d4:	80 93 7c 00 	sts	0x007C, r24
    17d8:	06 c0       	rjmp	.+12     	; 0x17e6 <processSystemTimers+0x1e>
	{
		sys_timers.celsius_upd_counter = CELSIUS_UDPATE_INTERVAL;
    17da:	84 e0       	ldi	r24, 0x04	; 4
    17dc:	80 93 7c 00 	sts	0x007C, r24
		sys_timers.flags |= EXPIRED_CELSIUS;
    17e0:	81 e0       	ldi	r24, 0x01	; 1
    17e2:	80 93 81 00 	sts	0x0081, r24
	}
	
	// Process log counter
	if (--sys_timers.log_counter == 0)
    17e6:	80 91 80 00 	lds	r24, 0x0080
    17ea:	81 50       	subi	r24, 0x01	; 1
    17ec:	19 f0       	breq	.+6      	; 0x17f4 <processSystemTimers+0x2c>
    17ee:	80 93 80 00 	sts	0x0080, r24
    17f2:	08 c0       	rjmp	.+16     	; 0x1804 <processSystemTimers+0x3c>
	{
		sys_timers.log_counter = LOG_INTERVAL;
    17f4:	82 e0       	ldi	r24, 0x02	; 2
    17f6:	80 93 80 00 	sts	0x0080, r24
		sys_timers.flags |= EXPIRED_LOG;
    17fa:	80 91 81 00 	lds	r24, 0x0081
    17fe:	80 62       	ori	r24, 0x20	; 32
    1800:	80 93 81 00 	sts	0x0081, r24
	}
	
	// Process 10 seconds counter
	if (--sys_timers.counter_10sec == 0)
    1804:	80 91 7d 00 	lds	r24, 0x007D
    1808:	81 50       	subi	r24, 0x01	; 1
    180a:	80 93 7d 00 	sts	0x007D, r24
    180e:	81 11       	cpse	r24, r1
    1810:	34 c0       	rjmp	.+104    	; 0x187a <processSystemTimers+0xb2>
	{
		sys_timers.counter_10sec = COUNTER_10SEC_INTERVAL;
    1812:	84 e1       	ldi	r24, 0x14	; 20
    1814:	80 93 7d 00 	sts	0x007D, r24
		sys_timers.flags |= EXPIRED_10SEC;
    1818:	40 91 81 00 	lds	r20, 0x0081
    181c:	84 2f       	mov	r24, r20
    181e:	82 60       	ori	r24, 0x02	; 2
    1820:	80 93 81 00 	sts	0x0081, r24
		
		// Process 1 minute counter
		if (--sys_timers.counter_1min == 0)
    1824:	80 91 7e 00 	lds	r24, 0x007E
    1828:	81 50       	subi	r24, 0x01	; 1
    182a:	80 93 7e 00 	sts	0x007E, r24
    182e:	81 11       	cpse	r24, r1
    1830:	24 c0       	rjmp	.+72     	; 0x187a <processSystemTimers+0xb2>
		{
			sys_timers.counter_1min = COUNTER_1MIN_INTERVAL;
    1832:	86 e0       	ldi	r24, 0x06	; 6
    1834:	80 93 7e 00 	sts	0x007E, r24
			sys_timers.flags |= EXPIRED_1MIN;
    1838:	84 2f       	mov	r24, r20
    183a:	86 60       	ori	r24, 0x06	; 6
    183c:	80 93 81 00 	sts	0x0081, r24
			
			// Process auto power off counter
			if (sys_timers.poff_counter != MAX_POWEROFF_TIMEOUT - 1)
    1840:	80 91 7f 00 	lds	r24, 0x007F
    1844:	8e 35       	cpi	r24, 0x5E	; 94
    1846:	19 f0       	breq	.+6      	; 0x184e <processSystemTimers+0x86>
				sys_timers.poff_counter++;
    1848:	8f 5f       	subi	r24, 0xFF	; 255
    184a:	80 93 7f 00 	sts	0x007F, r24
			if (sys_timers.poff_counter == p.power_off_timeout - 1)
    184e:	60 91 7f 00 	lds	r22, 0x007F
    1852:	50 91 3a 01 	lds	r21, 0x013A
    1856:	26 2f       	mov	r18, r22
    1858:	30 e0       	ldi	r19, 0x00	; 0
    185a:	85 2f       	mov	r24, r21
    185c:	90 e0       	ldi	r25, 0x00	; 0
    185e:	01 97       	sbiw	r24, 0x01	; 1
    1860:	28 17       	cp	r18, r24
    1862:	39 07       	cpc	r19, r25
    1864:	19 f4       	brne	.+6      	; 0x186c <processSystemTimers+0xa4>
				sys_timers.flags |= AUTOPOFF_SOON;
    1866:	4e 60       	ori	r20, 0x0E	; 14
    1868:	40 93 81 00 	sts	0x0081, r20
			if (sys_timers.poff_counter == p.power_off_timeout)
    186c:	65 13       	cpse	r22, r21
    186e:	05 c0       	rjmp	.+10     	; 0x187a <processSystemTimers+0xb2>
				sys_timers.flags |= AUTOPOFF_EXPIRED;			
    1870:	80 91 81 00 	lds	r24, 0x0081
    1874:	80 61       	ori	r24, 0x10	; 16
    1876:	80 93 81 00 	sts	0x0081, r24
    187a:	08 95       	ret

0000187c <resetAutoPowerOffCounter>:
}


void resetAutoPowerOffCounter(void)
{
	sys_timers.poff_counter = 0;
    187c:	10 92 7f 00 	sts	0x007F, r1
    1880:	08 95       	ret

00001882 <SetBeeperFreq>:
}

// Setup beeper frequency (Hz)
void SetBeeperFreq(uint16_t freq_hz)
{
	uint16_t period_us = 1000000 / freq_hz;
    1882:	9c 01       	movw	r18, r24
    1884:	40 e0       	ldi	r20, 0x00	; 0
    1886:	50 e0       	ldi	r21, 0x00	; 0
    1888:	60 e4       	ldi	r22, 0x40	; 64
    188a:	72 e4       	ldi	r23, 0x42	; 66
    188c:	8f e0       	ldi	r24, 0x0F	; 15
    188e:	90 e0       	ldi	r25, 0x00	; 0
    1890:	d0 d0       	rcall	.+416    	; 0x1a32 <__divmodsi4>
	if (period_us & 0xFFF8)
    1892:	da 01       	movw	r26, r20
    1894:	c9 01       	movw	r24, r18
    1896:	88 7f       	andi	r24, 0xF8	; 248
    1898:	aa 27       	eor	r26, r26
    189a:	bb 27       	eor	r27, r27
    189c:	89 2b       	or	r24, r25
    189e:	51 f0       	breq	.+20     	; 0x18b4 <SetBeeperFreq+0x32>
		OCR1A = (period_us>>3) - 1;
    18a0:	43 e0       	ldi	r20, 0x03	; 3
    18a2:	36 95       	lsr	r19
    18a4:	27 95       	ror	r18
    18a6:	4a 95       	dec	r20
    18a8:	e1 f7       	brne	.-8      	; 0x18a2 <SetBeeperFreq+0x20>
    18aa:	21 50       	subi	r18, 0x01	; 1
    18ac:	31 09       	sbc	r19, r1
    18ae:	3b bd       	out	0x2b, r19	; 43
    18b0:	2a bd       	out	0x2a, r18	; 42
    18b2:	04 c0       	rjmp	.+8      	; 0x18bc <SetBeeperFreq+0x3a>
	else
		OCR1A = 0x1;
    18b4:	81 e0       	ldi	r24, 0x01	; 1
    18b6:	90 e0       	ldi	r25, 0x00	; 0
    18b8:	9b bd       	out	0x2b, r25	; 43
    18ba:	8a bd       	out	0x2a, r24	; 42
	TCNT1 = 0;
    18bc:	1d bc       	out	0x2d, r1	; 45
    18be:	1c bc       	out	0x2c, r1	; 44
    18c0:	08 95       	ret

000018c2 <StartBeep>:
}

// Beep for some time in ms
void StartBeep(uint16_t time_ms)
{
	if ( (p.sound_enable) || (enableOverride) )
    18c2:	20 91 39 01 	lds	r18, 0x0139
    18c6:	21 11       	cpse	r18, r1
    18c8:	04 c0       	rjmp	.+8      	; 0x18d2 <StartBeep+0x10>
    18ca:	20 91 04 01 	lds	r18, 0x0104
    18ce:	22 23       	and	r18, r18
    18d0:	39 f0       	breq	.+14     	; 0x18e0 <StartBeep+0x1e>
	{
		beep_cnt = time_ms;
    18d2:	90 93 06 01 	sts	0x0106, r25
    18d6:	80 93 05 01 	sts	0x0105, r24
// Enable / disable beeper output
inline void SetBeepOutput(uint8_t val)
{
	if (val)
		// Toggle OCR1A on compare match
		TCCR1A |= (1<<COM1A0);
    18da:	8f b5       	in	r24, 0x2f	; 47
    18dc:	80 64       	ori	r24, 0x40	; 64
    18de:	8f bd       	out	0x2f, r24	; 47
	if ( (p.sound_enable) || (enableOverride) )
	{
		beep_cnt = time_ms;
		SetBeepOutput(1);		
	}
	enableOverride = 0;
    18e0:	10 92 04 01 	sts	0x0104, r1
    18e4:	08 95       	ret

000018e6 <OverrideSoundDisable>:
}

void OverrideSoundDisable(void)
{
	enableOverride = 1;
    18e6:	81 e0       	ldi	r24, 0x01	; 1
    18e8:	80 93 04 01 	sts	0x0104, r24
    18ec:	08 95       	ret

000018ee <__vector_3>:




ISR(TIMER2_COMP_vect)
{	
    18ee:	1f 92       	push	r1
    18f0:	0f 92       	push	r0
    18f2:	0f b6       	in	r0, 0x3f	; 63
    18f4:	0f 92       	push	r0
    18f6:	11 24       	eor	r1, r1
    18f8:	2f 93       	push	r18
    18fa:	3f 93       	push	r19
    18fc:	4f 93       	push	r20
    18fe:	5f 93       	push	r21
    1900:	6f 93       	push	r22
    1902:	7f 93       	push	r23
    1904:	8f 93       	push	r24
    1906:	9f 93       	push	r25
    1908:	af 93       	push	r26
    190a:	bf 93       	push	r27
    190c:	ef 93       	push	r30
    190e:	ff 93       	push	r31
	
	// Manage beeper
	if (beep_cnt)
    1910:	80 91 05 01 	lds	r24, 0x0105
    1914:	90 91 06 01 	lds	r25, 0x0106
    1918:	00 97       	sbiw	r24, 0x00	; 0
    191a:	31 f0       	breq	.+12     	; 0x1928 <__vector_3+0x3a>
		beep_cnt--;
    191c:	01 97       	sbiw	r24, 0x01	; 1
    191e:	90 93 06 01 	sts	0x0106, r25
    1922:	80 93 05 01 	sts	0x0105, r24
    1926:	03 c0       	rjmp	.+6      	; 0x192e <__vector_3+0x40>
	if (val)
		// Toggle OCR1A on compare match
		TCCR1A |= (1<<COM1A0);
	else
		// Disable OCR1A output
		TCCR1A &= ~(1<<COM1A0 | 1<<COM1A1);
    1928:	8f b5       	in	r24, 0x2f	; 47
    192a:	8f 73       	andi	r24, 0x3F	; 63
    192c:	8f bd       	out	0x2f, r24	; 47
		beep_cnt--;
	else
		SetBeepOutput(0);	// done
	
	// Manage LED indicator
	processLedIndicator();
    192e:	0e d8       	rcall	.-4068   	; 0x94c <processLedIndicator>
	
	// Process menu update timer
	processSoftTimer8b(&menuUpdateTimer);	
    1930:	82 e8       	ldi	r24, 0x82	; 130
    1932:	90 e0       	ldi	r25, 0x00	; 0
    1934:	1d df       	rcall	.-454    	; 0x1770 <processSoftTimer8b>
	
	// Start ADC conversion 
	ADCSRA |= (1<<ADSC);
    1936:	36 9a       	sbi	0x06, 6	; 6
	
}
    1938:	ff 91       	pop	r31
    193a:	ef 91       	pop	r30
    193c:	bf 91       	pop	r27
    193e:	af 91       	pop	r26
    1940:	9f 91       	pop	r25
    1942:	8f 91       	pop	r24
    1944:	7f 91       	pop	r23
    1946:	6f 91       	pop	r22
    1948:	5f 91       	pop	r21
    194a:	4f 91       	pop	r20
    194c:	3f 91       	pop	r19
    194e:	2f 91       	pop	r18
    1950:	0f 90       	pop	r0
    1952:	0f be       	out	0x3f, r0	; 63
    1954:	0f 90       	pop	r0
    1956:	1f 90       	pop	r1
    1958:	18 95       	reti

0000195a <USART_send>:



void USART_send( uint8_t data )
{
	UCSRA |= (1<<TXC);                 // Clear flag
    195a:	5e 9a       	sbi	0x0b, 6	; 11
	UDR = data;
    195c:	8c b9       	out	0x0c, r24	; 12
	while ( !(UCSRA & (1<<TXC)) );  // Wait
    195e:	5e 9b       	sbis	0x0b, 6	; 11
    1960:	fe cf       	rjmp	.-4      	; 0x195e <USART_send+0x4>
}
    1962:	08 95       	ret

00001964 <USART_sendstr>:


void USART_sendstr(char* str)
{
    1964:	1f 93       	push	r17
    1966:	cf 93       	push	r28
    1968:	df 93       	push	r29
    196a:	ec 01       	movw	r28, r24
	uint8_t i = 0;
    196c:	10 e0       	ldi	r17, 0x00	; 0
	while (str[i])
    196e:	02 c0       	rjmp	.+4      	; 0x1974 <USART_sendstr+0x10>
	{
		USART_send(str[i++]);
    1970:	1f 5f       	subi	r17, 0xFF	; 255
    1972:	f3 df       	rcall	.-26     	; 0x195a <USART_send>


void USART_sendstr(char* str)
{
	uint8_t i = 0;
	while (str[i])
    1974:	fe 01       	movw	r30, r28
    1976:	e1 0f       	add	r30, r17
    1978:	f1 1d       	adc	r31, r1
    197a:	80 81       	ld	r24, Z
    197c:	81 11       	cpse	r24, r1
    197e:	f8 cf       	rjmp	.-16     	; 0x1970 <USART_sendstr+0xc>
	{
		USART_send(str[i++]);
	}
}
    1980:	df 91       	pop	r29
    1982:	cf 91       	pop	r28
    1984:	1f 91       	pop	r17
    1986:	08 95       	ret

00001988 <__udivmodqi4>:
    1988:	99 1b       	sub	r25, r25
    198a:	79 e0       	ldi	r23, 0x09	; 9
    198c:	04 c0       	rjmp	.+8      	; 0x1996 <__udivmodqi4_ep>

0000198e <__udivmodqi4_loop>:
    198e:	99 1f       	adc	r25, r25
    1990:	96 17       	cp	r25, r22
    1992:	08 f0       	brcs	.+2      	; 0x1996 <__udivmodqi4_ep>
    1994:	96 1b       	sub	r25, r22

00001996 <__udivmodqi4_ep>:
    1996:	88 1f       	adc	r24, r24
    1998:	7a 95       	dec	r23
    199a:	c9 f7       	brne	.-14     	; 0x198e <__udivmodqi4_loop>
    199c:	80 95       	com	r24
    199e:	08 95       	ret

000019a0 <__udivmodhi4>:
    19a0:	aa 1b       	sub	r26, r26
    19a2:	bb 1b       	sub	r27, r27
    19a4:	51 e1       	ldi	r21, 0x11	; 17
    19a6:	07 c0       	rjmp	.+14     	; 0x19b6 <__udivmodhi4_ep>

000019a8 <__udivmodhi4_loop>:
    19a8:	aa 1f       	adc	r26, r26
    19aa:	bb 1f       	adc	r27, r27
    19ac:	a6 17       	cp	r26, r22
    19ae:	b7 07       	cpc	r27, r23
    19b0:	10 f0       	brcs	.+4      	; 0x19b6 <__udivmodhi4_ep>
    19b2:	a6 1b       	sub	r26, r22
    19b4:	b7 0b       	sbc	r27, r23

000019b6 <__udivmodhi4_ep>:
    19b6:	88 1f       	adc	r24, r24
    19b8:	99 1f       	adc	r25, r25
    19ba:	5a 95       	dec	r21
    19bc:	a9 f7       	brne	.-22     	; 0x19a8 <__udivmodhi4_loop>
    19be:	80 95       	com	r24
    19c0:	90 95       	com	r25
    19c2:	bc 01       	movw	r22, r24
    19c4:	cd 01       	movw	r24, r26
    19c6:	08 95       	ret

000019c8 <__divmodhi4>:
    19c8:	97 fb       	bst	r25, 7
    19ca:	07 2e       	mov	r0, r23
    19cc:	16 f4       	brtc	.+4      	; 0x19d2 <__divmodhi4+0xa>
    19ce:	00 94       	com	r0
    19d0:	06 d0       	rcall	.+12     	; 0x19de <__divmodhi4_neg1>
    19d2:	77 fd       	sbrc	r23, 7
    19d4:	08 d0       	rcall	.+16     	; 0x19e6 <__divmodhi4_neg2>
    19d6:	e4 df       	rcall	.-56     	; 0x19a0 <__udivmodhi4>
    19d8:	07 fc       	sbrc	r0, 7
    19da:	05 d0       	rcall	.+10     	; 0x19e6 <__divmodhi4_neg2>
    19dc:	3e f4       	brtc	.+14     	; 0x19ec <__divmodhi4_exit>

000019de <__divmodhi4_neg1>:
    19de:	90 95       	com	r25
    19e0:	81 95       	neg	r24
    19e2:	9f 4f       	sbci	r25, 0xFF	; 255
    19e4:	08 95       	ret

000019e6 <__divmodhi4_neg2>:
    19e6:	70 95       	com	r23
    19e8:	61 95       	neg	r22
    19ea:	7f 4f       	sbci	r23, 0xFF	; 255

000019ec <__divmodhi4_exit>:
    19ec:	08 95       	ret

000019ee <__udivmodsi4>:
    19ee:	a1 e2       	ldi	r26, 0x21	; 33
    19f0:	1a 2e       	mov	r1, r26
    19f2:	aa 1b       	sub	r26, r26
    19f4:	bb 1b       	sub	r27, r27
    19f6:	fd 01       	movw	r30, r26
    19f8:	0d c0       	rjmp	.+26     	; 0x1a14 <__udivmodsi4_ep>

000019fa <__udivmodsi4_loop>:
    19fa:	aa 1f       	adc	r26, r26
    19fc:	bb 1f       	adc	r27, r27
    19fe:	ee 1f       	adc	r30, r30
    1a00:	ff 1f       	adc	r31, r31
    1a02:	a2 17       	cp	r26, r18
    1a04:	b3 07       	cpc	r27, r19
    1a06:	e4 07       	cpc	r30, r20
    1a08:	f5 07       	cpc	r31, r21
    1a0a:	20 f0       	brcs	.+8      	; 0x1a14 <__udivmodsi4_ep>
    1a0c:	a2 1b       	sub	r26, r18
    1a0e:	b3 0b       	sbc	r27, r19
    1a10:	e4 0b       	sbc	r30, r20
    1a12:	f5 0b       	sbc	r31, r21

00001a14 <__udivmodsi4_ep>:
    1a14:	66 1f       	adc	r22, r22
    1a16:	77 1f       	adc	r23, r23
    1a18:	88 1f       	adc	r24, r24
    1a1a:	99 1f       	adc	r25, r25
    1a1c:	1a 94       	dec	r1
    1a1e:	69 f7       	brne	.-38     	; 0x19fa <__udivmodsi4_loop>
    1a20:	60 95       	com	r22
    1a22:	70 95       	com	r23
    1a24:	80 95       	com	r24
    1a26:	90 95       	com	r25
    1a28:	9b 01       	movw	r18, r22
    1a2a:	ac 01       	movw	r20, r24
    1a2c:	bd 01       	movw	r22, r26
    1a2e:	cf 01       	movw	r24, r30
    1a30:	08 95       	ret

00001a32 <__divmodsi4>:
    1a32:	05 2e       	mov	r0, r21
    1a34:	97 fb       	bst	r25, 7
    1a36:	16 f4       	brtc	.+4      	; 0x1a3c <__divmodsi4+0xa>
    1a38:	00 94       	com	r0
    1a3a:	06 d0       	rcall	.+12     	; 0x1a48 <__divmodsi4_neg1>
    1a3c:	57 fd       	sbrc	r21, 7
    1a3e:	0c d0       	rcall	.+24     	; 0x1a58 <__divmodsi4_neg2>
    1a40:	d6 df       	rcall	.-84     	; 0x19ee <__udivmodsi4>
    1a42:	07 fc       	sbrc	r0, 7
    1a44:	09 d0       	rcall	.+18     	; 0x1a58 <__divmodsi4_neg2>
    1a46:	7e f4       	brtc	.+30     	; 0x1a66 <__divmodsi4_exit>

00001a48 <__divmodsi4_neg1>:
    1a48:	90 95       	com	r25
    1a4a:	80 95       	com	r24
    1a4c:	70 95       	com	r23
    1a4e:	61 95       	neg	r22
    1a50:	7f 4f       	sbci	r23, 0xFF	; 255
    1a52:	8f 4f       	sbci	r24, 0xFF	; 255
    1a54:	9f 4f       	sbci	r25, 0xFF	; 255
    1a56:	08 95       	ret

00001a58 <__divmodsi4_neg2>:
    1a58:	50 95       	com	r21
    1a5a:	40 95       	com	r20
    1a5c:	30 95       	com	r19
    1a5e:	21 95       	neg	r18
    1a60:	3f 4f       	sbci	r19, 0xFF	; 255
    1a62:	4f 4f       	sbci	r20, 0xFF	; 255
    1a64:	5f 4f       	sbci	r21, 0xFF	; 255

00001a66 <__divmodsi4_exit>:
    1a66:	08 95       	ret

00001a68 <__umulhisi3>:
    1a68:	a2 9f       	mul	r26, r18
    1a6a:	b0 01       	movw	r22, r0
    1a6c:	b3 9f       	mul	r27, r19
    1a6e:	c0 01       	movw	r24, r0
    1a70:	a3 9f       	mul	r26, r19
    1a72:	01 d0       	rcall	.+2      	; 0x1a76 <__umulhisi3+0xe>
    1a74:	b2 9f       	mul	r27, r18
    1a76:	70 0d       	add	r23, r0
    1a78:	81 1d       	adc	r24, r1
    1a7a:	11 24       	eor	r1, r1
    1a7c:	91 1d       	adc	r25, r1
    1a7e:	08 95       	ret

00001a80 <__usmulhisi3>:
    1a80:	f3 df       	rcall	.-26     	; 0x1a68 <__umulhisi3>

00001a82 <__usmulhisi3_tail>:
    1a82:	b7 ff       	sbrs	r27, 7
    1a84:	08 95       	ret
    1a86:	82 1b       	sub	r24, r18
    1a88:	93 0b       	sbc	r25, r19
    1a8a:	08 95       	ret

00001a8c <__muluhisi3>:
    1a8c:	ed df       	rcall	.-38     	; 0x1a68 <__umulhisi3>
    1a8e:	a5 9f       	mul	r26, r21
    1a90:	90 0d       	add	r25, r0
    1a92:	b4 9f       	mul	r27, r20
    1a94:	90 0d       	add	r25, r0
    1a96:	a4 9f       	mul	r26, r20
    1a98:	80 0d       	add	r24, r0
    1a9a:	91 1d       	adc	r25, r1
    1a9c:	11 24       	eor	r1, r1
    1a9e:	08 95       	ret

00001aa0 <__eerd_block_m8>:
    1aa0:	dc 01       	movw	r26, r24
    1aa2:	cb 01       	movw	r24, r22

00001aa4 <__eerd_blraw_m8>:
    1aa4:	fc 01       	movw	r30, r24
    1aa6:	e1 99       	sbic	0x1c, 1	; 28
    1aa8:	fe cf       	rjmp	.-4      	; 0x1aa6 <__eerd_blraw_m8+0x2>
    1aaa:	06 c0       	rjmp	.+12     	; 0x1ab8 <__eerd_blraw_m8+0x14>
    1aac:	ff bb       	out	0x1f, r31	; 31
    1aae:	ee bb       	out	0x1e, r30	; 30
    1ab0:	e0 9a       	sbi	0x1c, 0	; 28
    1ab2:	31 96       	adiw	r30, 0x01	; 1
    1ab4:	0d b2       	in	r0, 0x1d	; 29
    1ab6:	0d 92       	st	X+, r0
    1ab8:	41 50       	subi	r20, 0x01	; 1
    1aba:	50 40       	sbci	r21, 0x00	; 0
    1abc:	b8 f7       	brcc	.-18     	; 0x1aac <__eerd_blraw_m8+0x8>
    1abe:	08 95       	ret

00001ac0 <_exit>:
    1ac0:	f8 94       	cli

00001ac2 <__stop_program>:
    1ac2:	ff cf       	rjmp	.-2      	; 0x1ac2 <__stop_program>
