
pid1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001cca  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000006e  00800060  00001cca  00001d7e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000107  008000ce  008000ce  00001dec  2**0
                  ALLOC
  3 .eeprom       0000006c  00810000  00810000  00001dec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         00000ad4  00000000  00000000  00001e58  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      00000269  00000000  00000000  0000292c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      0000002f  00000000  00000000  00002b95  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000438  00000000  00000000  00002bc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00004724  00000000  00000000  00002ffc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00001677  00000000  00000000  00007720  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00001dde  00000000  00000000  00008d97  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000970  00000000  00000000  0000ab78  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000012b5  00000000  00000000  0000b4e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00001b00  00000000  00000000  0000c79d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000358  00000000  00000000  0000e29d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	ce c0       	rjmp	.+412    	; 0x19e <__ctors_end>
       2:	e8 c0       	rjmp	.+464    	; 0x1d4 <__bad_interrupt>
       4:	e7 c0       	rjmp	.+462    	; 0x1d4 <__bad_interrupt>
       6:	d7 cc       	rjmp	.-1618   	; 0xfffff9b6 <__eeprom_end+0xff7ef94a>
       8:	e5 c0       	rjmp	.+458    	; 0x1d4 <__bad_interrupt>
       a:	e4 c0       	rjmp	.+456    	; 0x1d4 <__bad_interrupt>
       c:	e3 c0       	rjmp	.+454    	; 0x1d4 <__bad_interrupt>
       e:	e2 c0       	rjmp	.+452    	; 0x1d4 <__bad_interrupt>
      10:	e1 c0       	rjmp	.+450    	; 0x1d4 <__bad_interrupt>
      12:	72 cb       	rjmp	.-2332   	; 0xfffff6f8 <__eeprom_end+0xff7ef68c>
      14:	df c0       	rjmp	.+446    	; 0x1d4 <__bad_interrupt>
      16:	de c0       	rjmp	.+444    	; 0x1d4 <__bad_interrupt>
      18:	dd c0       	rjmp	.+442    	; 0x1d4 <__bad_interrupt>
      1a:	dc c0       	rjmp	.+440    	; 0x1d4 <__bad_interrupt>
      1c:	b0 c1       	rjmp	.+864    	; 0x37e <__vector_14>
      1e:	da c0       	rjmp	.+436    	; 0x1d4 <__bad_interrupt>
      20:	2d cb       	rjmp	.-2470   	; 0xfffff67c <__eeprom_end+0xff7ef610>
      22:	d8 c0       	rjmp	.+432    	; 0x1d4 <__bad_interrupt>
      24:	d7 c0       	rjmp	.+430    	; 0x1d4 <__bad_interrupt>

00000026 <pmCalibrationDefaults>:
      26:	16 78 c3 00 91 01                                   .x....

0000002c <pmGlobalDefaults>:
      2c:	32 0a 01 1e                                         2...

00000030 <led_encode_table>:
      30:	30 3f 4f 3f 31 06 32 5b 33 4f 34 66 53 6d 35 6d     0?O?1.2[3O4fSm5m
      40:	36 7d 37 07 38 7f 39 6f 2e 80 2c 80 2d 40 5f 08     6}7.8.9o..,.-@_.
      50:	20 00 b0 63 41 77 43 39 46 71 4e 54 44 5e 50 73      ..cAwC9FqNTD^Ps
      60:	45 79 55 3e 47 3d 52 50                             EyU>G=RP

00000068 <ms_calibDo>:
      68:	20 20 20 00                                            .

0000006c <ms_autoPoffDo>:
      6c:	4f 46 46 20 20 20 00                                OFF   .

00000073 <ms_soundEnDo>:
      73:	53 4e 44 20 20 20 00                                SND   .

0000007a <ms_rollDo>:
      7a:	20 20 20 20 20 20 00                                      .

00000081 <ms_realTempDo>:
      81:	20 20 20 20 b0 43 00                                    .C.

00000088 <menuFunctionSet>:
      88:	01 91 07 93 07 42 06 03 3a 06 58 07 b3 05 02 55     .....B..:.X....U
      98:	07 01 07 33 06 05 2d 06 ce 06 00 00 0b c1 05 ce     ...3..-.........
      a8:	06 cf 05 04 27 06 5d 06 00 00 0c c1 05 5d 06 dd     ....'.]......]..
      b8:	05 06 1b 06 98 06 00 00 09 c1 05 98 06 ee 05 07     ................
      c8:	0f 06 98 06 00 00 0a c1 05 98 06 ee 05 08 44 06     ..............D.
      d8:	fd 05 00 00 0d 44 06 fd 05 00 00 0e 01 06 f9 05     .....D..........
      e8:	eb 05                                               ..

000000ea <menuJumpSet>:
      ea:	01 c0 00 03 8a 01 00 01 02 40 01 00 02 05 0a 02     .........@......
      fa:	00 01 01 80 02 00 02 05 0a 03 00 81 01 40 03 00     .............@..
     10a:	02 01 60 05 00 82 01 00 05 80 00 04 4a 05 40 00     ..`.........J.@.
     11a:	07 8a 05 00 01 0b 0a 0b 00 81 05 0a 0b 00 02 05     ................
     12a:	2a 04 00 82 01 00 04 80 00 06 4a 04 40 00 05 8a     *.........J.@...
     13a:	04 00 01 0c 0a 0c 00 81 04 0a 0c 00 02 04 2a 06     ..............*.
     14a:	00 82 01 00 06 80 00 07 4a 06 40 00 04 8a 06 00     ........J.@.....
     15a:	01 09 00 07 00 82 01 00 07 80 00 05 4a 07 40 00     ............J.@.
     16a:	06 8a 07 00 01 0a 00 09 00 02 06 0a 09 00 01 08     ................
     17a:	05 08 00 83 01 00 0a 00 02 07 0a 0a 00 01 0d 05     ................
     18a:	0d 00 83 01 00 01 00 40 0e 00 02 00 40 0e 00 0e     .......@....@...
     19a:	d5 01 01 00                                         ....

0000019e <__ctors_end>:
     19e:	11 24       	eor	r1, r1
     1a0:	1f be       	out	0x3f, r1	; 63
     1a2:	cf e5       	ldi	r28, 0x5F	; 95
     1a4:	d4 e0       	ldi	r29, 0x04	; 4
     1a6:	de bf       	out	0x3e, r29	; 62
     1a8:	cd bf       	out	0x3d, r28	; 61

000001aa <__do_copy_data>:
     1aa:	10 e0       	ldi	r17, 0x00	; 0
     1ac:	a0 e6       	ldi	r26, 0x60	; 96
     1ae:	b0 e0       	ldi	r27, 0x00	; 0
     1b0:	ea ec       	ldi	r30, 0xCA	; 202
     1b2:	fc e1       	ldi	r31, 0x1C	; 28
     1b4:	02 c0       	rjmp	.+4      	; 0x1ba <__do_copy_data+0x10>
     1b6:	05 90       	lpm	r0, Z+
     1b8:	0d 92       	st	X+, r0
     1ba:	ae 3c       	cpi	r26, 0xCE	; 206
     1bc:	b1 07       	cpc	r27, r17
     1be:	d9 f7       	brne	.-10     	; 0x1b6 <__do_copy_data+0xc>

000001c0 <__do_clear_bss>:
     1c0:	21 e0       	ldi	r18, 0x01	; 1
     1c2:	ae ec       	ldi	r26, 0xCE	; 206
     1c4:	b0 e0       	ldi	r27, 0x00	; 0
     1c6:	01 c0       	rjmp	.+2      	; 0x1ca <.do_clear_bss_start>

000001c8 <.do_clear_bss_loop>:
     1c8:	1d 92       	st	X+, r1

000001ca <.do_clear_bss_start>:
     1ca:	a5 3d       	cpi	r26, 0xD5	; 213
     1cc:	b2 07       	cpc	r27, r18
     1ce:	e1 f7       	brne	.-8      	; 0x1c8 <.do_clear_bss_loop>
     1d0:	e3 d7       	rcall	.+4038   	; 0x1198 <main>
     1d2:	79 cd       	rjmp	.-1294   	; 0xfffffcc6 <__eeprom_end+0xff7efc5a>

000001d4 <__bad_interrupt>:
     1d4:	15 cf       	rjmp	.-470    	; 0x0 <__vectors>

000001d6 <conv_ADC_to_Celsius>:
//---------------------------------------------//
//---------------------------------------------//


int16_t conv_ADC_to_Celsius(uint16_t adc_value)
{	
     1d6:	0f 93       	push	r16
     1d8:	1f 93       	push	r17
	return (int16_t)(((int32_t)adc_value * k_norm + offset_norm) / (COEFF_SCALE));
     1da:	20 91 ce 00 	lds	r18, 0x00CE
     1de:	30 91 cf 00 	lds	r19, 0x00CF
     1e2:	40 91 d0 00 	lds	r20, 0x00D0
     1e6:	50 91 d1 00 	lds	r21, 0x00D1
     1ea:	dc 01       	movw	r26, r24
     1ec:	eb dc       	rcall	.-1578   	; 0xfffffbc4 <__eeprom_end+0xff7efb58>
     1ee:	00 91 d2 00 	lds	r16, 0x00D2
     1f2:	10 91 d3 00 	lds	r17, 0x00D3
     1f6:	20 91 d4 00 	lds	r18, 0x00D4
     1fa:	30 91 d5 00 	lds	r19, 0x00D5
     1fe:	60 0f       	add	r22, r16
     200:	71 1f       	adc	r23, r17
     202:	82 1f       	adc	r24, r18
     204:	93 1f       	adc	r25, r19
     206:	28 ee       	ldi	r18, 0xE8	; 232
     208:	33 e0       	ldi	r19, 0x03	; 3
     20a:	40 e0       	ldi	r20, 0x00	; 0
     20c:	50 e0       	ldi	r21, 0x00	; 0
     20e:	a7 dc       	rcall	.-1714   	; 0xfffffb5e <__eeprom_end+0xff7efaf2>
}
     210:	c9 01       	movw	r24, r18
     212:	1f 91       	pop	r17
     214:	0f 91       	pop	r16
     216:	08 95       	ret

00000218 <conv_Celsius_to_ADC>:

uint16_t conv_Celsius_to_ADC(int16_t degree_value)
{
     218:	0f 93       	push	r16
     21a:	1f 93       	push	r17
	degree_value += 1;
     21c:	dc 01       	movw	r26, r24
     21e:	11 96       	adiw	r26, 0x01	; 1
	return (uint16_t)(((int32_t)degree_value * COEFF_SCALE - offset_norm) / k_norm);
     220:	28 ee       	ldi	r18, 0xE8	; 232
     222:	33 e0       	ldi	r19, 0x03	; 3
     224:	c9 dc       	rcall	.-1646   	; 0xfffffbb8 <__eeprom_end+0xff7efb4c>
     226:	00 91 d2 00 	lds	r16, 0x00D2
     22a:	10 91 d3 00 	lds	r17, 0x00D3
     22e:	20 91 d4 00 	lds	r18, 0x00D4
     232:	30 91 d5 00 	lds	r19, 0x00D5
     236:	60 1b       	sub	r22, r16
     238:	71 0b       	sbc	r23, r17
     23a:	82 0b       	sbc	r24, r18
     23c:	93 0b       	sbc	r25, r19
     23e:	20 91 ce 00 	lds	r18, 0x00CE
     242:	30 91 cf 00 	lds	r19, 0x00CF
     246:	40 91 d0 00 	lds	r20, 0x00D0
     24a:	50 91 d1 00 	lds	r21, 0x00D1
     24e:	87 dc       	rcall	.-1778   	; 0xfffffb5e <__eeprom_end+0xff7efaf2>
}
     250:	c9 01       	movw	r24, r18
     252:	1f 91       	pop	r17
     254:	0f 91       	pop	r16
     256:	08 95       	ret

00000258 <calculateCoeffs>:

void calculateCoeffs(void)
{
     258:	8f 92       	push	r8
     25a:	9f 92       	push	r9
     25c:	af 92       	push	r10
     25e:	bf 92       	push	r11
     260:	cf 92       	push	r12
     262:	df 92       	push	r13
     264:	ef 92       	push	r14
     266:	ff 92       	push	r15
     268:	cf 93       	push	r28
     26a:	df 93       	push	r29
	k_norm = ((int32_t)(cp.cpoint2 - cp.cpoint1) * COEFF_SCALE) / ((int32_t)(cp.cpoint2_adc - cp.cpoint1_adc));
     26c:	f0 90 8d 01 	lds	r15, 0x018D
     270:	a0 91 8e 01 	lds	r26, 0x018E
     274:	b0 e0       	ldi	r27, 0x00	; 0
     276:	af 19       	sub	r26, r15
     278:	b1 09       	sbc	r27, r1
     27a:	c0 91 8f 01 	lds	r28, 0x018F
     27e:	d0 91 90 01 	lds	r29, 0x0190
     282:	28 ee       	ldi	r18, 0xE8	; 232
     284:	33 e0       	ldi	r19, 0x03	; 3
     286:	98 dc       	rcall	.-1744   	; 0xfffffbb8 <__eeprom_end+0xff7efb4c>
     288:	20 91 91 01 	lds	r18, 0x0191
     28c:	30 91 92 01 	lds	r19, 0x0192
     290:	2c 1b       	sub	r18, r28
     292:	3d 0b       	sbc	r19, r29
     294:	40 e0       	ldi	r20, 0x00	; 0
     296:	50 e0       	ldi	r21, 0x00	; 0
     298:	62 dc       	rcall	.-1852   	; 0xfffffb5e <__eeprom_end+0xff7efaf2>
     29a:	49 01       	movw	r8, r18
     29c:	5a 01       	movw	r10, r20
     29e:	20 93 ce 00 	sts	0x00CE, r18
     2a2:	30 93 cf 00 	sts	0x00CF, r19
     2a6:	40 93 d0 00 	sts	0x00D0, r20
     2aa:	50 93 d1 00 	sts	0x00D1, r21
	offset_norm = (int32_t)cp.cpoint1 * COEFF_SCALE - (int32_t)cp.cpoint1_adc * k_norm;
     2ae:	2f 2d       	mov	r18, r15
     2b0:	30 e0       	ldi	r19, 0x00	; 0
     2b2:	a8 ee       	ldi	r26, 0xE8	; 232
     2b4:	b3 e0       	ldi	r27, 0x03	; 3
     2b6:	74 dc       	rcall	.-1816   	; 0xfffffba0 <__eeprom_end+0xff7efb34>
     2b8:	6b 01       	movw	r12, r22
     2ba:	7c 01       	movw	r14, r24
     2bc:	de 01       	movw	r26, r28
     2be:	a5 01       	movw	r20, r10
     2c0:	94 01       	movw	r18, r8
     2c2:	80 dc       	rcall	.-1792   	; 0xfffffbc4 <__eeprom_end+0xff7efb58>
     2c4:	c6 1a       	sub	r12, r22
     2c6:	d7 0a       	sbc	r13, r23
     2c8:	e8 0a       	sbc	r14, r24
     2ca:	f9 0a       	sbc	r15, r25
     2cc:	c0 92 d2 00 	sts	0x00D2, r12
     2d0:	d0 92 d3 00 	sts	0x00D3, r13
     2d4:	e0 92 d4 00 	sts	0x00D4, r14
     2d8:	f0 92 d5 00 	sts	0x00D5, r15
}
     2dc:	df 91       	pop	r29
     2de:	cf 91       	pop	r28
     2e0:	ff 90       	pop	r15
     2e2:	ef 90       	pop	r14
     2e4:	df 90       	pop	r13
     2e6:	cf 90       	pop	r12
     2e8:	bf 90       	pop	r11
     2ea:	af 90       	pop	r10
     2ec:	9f 90       	pop	r9
     2ee:	8f 90       	pop	r8
     2f0:	08 95       	ret

000002f2 <update_normalized_adc>:
void update_normalized_adc()
{
	uint8_t i;
	uint16_t adc_raw_summ = 0;
	// Disable interrupts from ADC - to save data integrity
	ADCSRA &= ~(1<<ADIE);	
     2f2:	33 98       	cbi	0x06, 3	; 6
     2f4:	ef e1       	ldi	r30, 0x1F	; 31
     2f6:	f1 e0       	ldi	r31, 0x01	; 1


void update_normalized_adc()
{
	uint8_t i;
	uint16_t adc_raw_summ = 0;
     2f8:	80 e0       	ldi	r24, 0x00	; 0
     2fa:	90 e0       	ldi	r25, 0x00	; 0
	// Disable interrupts from ADC - to save data integrity
	ADCSRA &= ~(1<<ADIE);	
	// Get normalized mean window summ
	for (i=0;i<ADC_BUFFER_LENGTH;i++)
		adc_raw_summ += raw_adc_buffer[i];
     2fc:	21 91       	ld	r18, Z+
     2fe:	31 91       	ld	r19, Z+
     300:	82 0f       	add	r24, r18
     302:	93 1f       	adc	r25, r19
	uint8_t i;
	uint16_t adc_raw_summ = 0;
	// Disable interrupts from ADC - to save data integrity
	ADCSRA &= ~(1<<ADIE);	
	// Get normalized mean window summ
	for (i=0;i<ADC_BUFFER_LENGTH;i++)
     304:	21 e0       	ldi	r18, 0x01	; 1
     306:	ef 35       	cpi	r30, 0x5F	; 95
     308:	f2 07       	cpc	r31, r18
     30a:	c1 f7       	brne	.-16     	; 0x2fc <update_normalized_adc+0xa>
		adc_raw_summ += raw_adc_buffer[i];
	// Enable interrupts from ADC
	ADCSRA |= (1<<ADIE);
     30c:	33 9a       	sbi	0x06, 3	; 6
	
	adc_normalized = adc_raw_summ >> 5;		// ADC_BUFFER_LENGTH = 32 !
     30e:	9c 01       	movw	r18, r24
     310:	45 e0       	ldi	r20, 0x05	; 5
     312:	36 95       	lsr	r19
     314:	27 95       	ror	r18
     316:	4a 95       	dec	r20
     318:	e1 f7       	brne	.-8      	; 0x312 <update_normalized_adc+0x20>
     31a:	30 93 60 01 	sts	0x0160, r19
     31e:	20 93 5f 01 	sts	0x015F, r18
	adc_oversampled = adc_raw_summ >> 3;	// adc_oversampled is 4 times greater than adc_normalized
     322:	53 e0       	ldi	r21, 0x03	; 3
     324:	96 95       	lsr	r25
     326:	87 95       	ror	r24
     328:	5a 95       	dec	r21
     32a:	e1 f7       	brne	.-8      	; 0x324 <update_normalized_adc+0x32>
     32c:	90 93 1e 01 	sts	0x011E, r25
     330:	80 93 1d 01 	sts	0x011D, r24
	// Filter
	adc_filtered = fir_i16_i8(adc_oversampled, filter_buffer, &fir_filter_rect);	
     334:	40 e6       	ldi	r20, 0x60	; 96
     336:	50 e0       	ldi	r21, 0x00	; 0
     338:	64 e6       	ldi	r22, 0x64	; 100
     33a:	71 e0       	ldi	r23, 0x01	; 1
     33c:	6a d2       	rcall	.+1236   	; 0x812 <fir_i16_i8>
     33e:	90 93 1c 01 	sts	0x011C, r25
     342:	80 93 1b 01 	sts	0x011B, r24
	// Check sensor
	adc_status = 0;
     346:	10 92 61 01 	sts	0x0161, r1
	if (adc_normalized < 50)
     34a:	80 91 5f 01 	lds	r24, 0x015F
     34e:	90 91 60 01 	lds	r25, 0x0160
     352:	82 33       	cpi	r24, 0x32	; 50
     354:	91 05       	cpc	r25, r1
     356:	10 f4       	brcc	.+4      	; 0x35c <update_normalized_adc+0x6a>
		adc_status |= SENSOR_ERROR_NO_PRESENT;
     358:	81 e0       	ldi	r24, 0x01	; 1
     35a:	04 c0       	rjmp	.+8      	; 0x364 <update_normalized_adc+0x72>
	else if (adc_normalized > 1000)
     35c:	89 3e       	cpi	r24, 0xE9	; 233
     35e:	93 40       	sbci	r25, 0x03	; 3
     360:	18 f0       	brcs	.+6      	; 0x368 <update_normalized_adc+0x76>
		adc_status |= SENSOR_ERROR_SHORTED;
     362:	82 e0       	ldi	r24, 0x02	; 2
     364:	80 93 61 01 	sts	0x0161, r24
     368:	08 95       	ret

0000036a <update_Celsius>:
}

void update_Celsius(void)
{
	// Convert to Celsius degree
	adc_celsius = conv_ADC_to_Celsius(adc_normalized);
     36a:	80 91 5f 01 	lds	r24, 0x015F
     36e:	90 91 60 01 	lds	r25, 0x0160
     372:	31 df       	rcall	.-414    	; 0x1d6 <conv_ADC_to_Celsius>
     374:	90 93 63 01 	sts	0x0163, r25
     378:	80 93 62 01 	sts	0x0162, r24
     37c:	08 95       	ret

0000037e <__vector_14>:



// ADC conversion is started by system timer (Timer2 ISR) every 1 ms
ISR(ADC_vect)
{
     37e:	1f 92       	push	r1
     380:	0f 92       	push	r0
     382:	0f b6       	in	r0, 0x3f	; 63
     384:	0f 92       	push	r0
     386:	11 24       	eor	r1, r1
     388:	2f 93       	push	r18
     38a:	3f 93       	push	r19
     38c:	4f 93       	push	r20
     38e:	8f 93       	push	r24
     390:	9f 93       	push	r25
     392:	ef 93       	push	r30
     394:	ff 93       	push	r31
	static uint8_t adc_buffer_pointer = ADC_BUFFER_LENGTH;
	// Get new sample
	uint16_t new_sample = 1024 - ADC;	
     396:	24 b1       	in	r18, 0x04	; 4
     398:	35 b1       	in	r19, 0x05	; 5
	// Add new sample to the buffer
	raw_adc_buffer[--adc_buffer_pointer] = new_sample;
     39a:	40 91 77 00 	lds	r20, 0x0077
     39e:	41 50       	subi	r20, 0x01	; 1
     3a0:	40 93 77 00 	sts	0x0077, r20
     3a4:	e4 2f       	mov	r30, r20
     3a6:	f0 e0       	ldi	r31, 0x00	; 0
     3a8:	ee 0f       	add	r30, r30
     3aa:	ff 1f       	adc	r31, r31
     3ac:	e1 5e       	subi	r30, 0xE1	; 225
     3ae:	fe 4f       	sbci	r31, 0xFE	; 254
// ADC conversion is started by system timer (Timer2 ISR) every 1 ms
ISR(ADC_vect)
{
	static uint8_t adc_buffer_pointer = ADC_BUFFER_LENGTH;
	// Get new sample
	uint16_t new_sample = 1024 - ADC;	
     3b0:	80 e0       	ldi	r24, 0x00	; 0
     3b2:	94 e0       	ldi	r25, 0x04	; 4
     3b4:	82 1b       	sub	r24, r18
     3b6:	93 0b       	sbc	r25, r19
	// Add new sample to the buffer
	raw_adc_buffer[--adc_buffer_pointer] = new_sample;
     3b8:	91 83       	std	Z+1, r25	; 0x01
     3ba:	80 83       	st	Z, r24
	if (adc_buffer_pointer == 0)
     3bc:	41 11       	cpse	r20, r1
     3be:	03 c0       	rjmp	.+6      	; 0x3c6 <__vector_14+0x48>
		adc_buffer_pointer = ADC_BUFFER_LENGTH;
     3c0:	80 e2       	ldi	r24, 0x20	; 32
     3c2:	80 93 77 00 	sts	0x0077, r24
}	
     3c6:	ff 91       	pop	r31
     3c8:	ef 91       	pop	r30
     3ca:	9f 91       	pop	r25
     3cc:	8f 91       	pop	r24
     3ce:	4f 91       	pop	r20
     3d0:	3f 91       	pop	r19
     3d2:	2f 91       	pop	r18
     3d4:	0f 90       	pop	r0
     3d6:	0f be       	out	0x3f, r0	; 63
     3d8:	0f 90       	pop	r0
     3da:	1f 90       	pop	r1
     3dc:	18 95       	reti

000003de <process_buttons>:
	uint8_t long_press_mask;
	uint8_t long_press_event_mask;
	
	uint16_t composed_state;
	
	raw_delayed = raw_current;
     3de:	50 91 dc 00 	lds	r21, 0x00DC
	raw_delayed_inv = raw_current_inv;
     3e2:	30 91 78 00 	lds	r19, 0x0078
	raw_current = raw_button_state;
     3e6:	90 91 ae 01 	lds	r25, 0x01AE
     3ea:	90 93 dc 00 	sts	0x00DC, r25
	raw_current_inv = ~raw_current;
     3ee:	69 2f       	mov	r22, r25
     3f0:	60 95       	com	r22
     3f2:	60 93 78 00 	sts	0x0078, r22
	
	// Must be before press_timer update
	long_press_mask = (press_timer >= LONG_PRESS_DELAY) ? 0xFF : 0x00;
     3f6:	80 91 dd 00 	lds	r24, 0x00DD
     3fa:	8c 30       	cpi	r24, 0x0C	; 12
     3fc:	10 f0       	brcs	.+4      	; 0x402 <process_buttons+0x24>
     3fe:	2f ef       	ldi	r18, 0xFF	; 255
     400:	01 c0       	rjmp	.+2      	; 0x404 <process_buttons+0x26>
     402:	20 e0       	ldi	r18, 0x00	; 0
	
	if (raw_delayed != raw_current)
     404:	59 17       	cp	r21, r25
     406:	19 f0       	breq	.+6      	; 0x40e <process_buttons+0x30>
	{
		press_timer = 0;
     408:	10 92 dd 00 	sts	0x00DD, r1
     40c:	05 c0       	rjmp	.+10     	; 0x418 <process_buttons+0x3a>
	}
	else if (press_timer <= LONG_PRESS_DELAY)
     40e:	8d 30       	cpi	r24, 0x0D	; 13
     410:	18 f4       	brcc	.+6      	; 0x418 <process_buttons+0x3a>
	{
		press_timer++;
     412:	8f 5f       	subi	r24, 0xFF	; 255
     414:	80 93 dd 00 	sts	0x00DD, r24
	}
	
	// Must after press_timer update
	long_press_event_mask = (press_timer == LONG_PRESS_DELAY) ? 0xFF : 0x00;
     418:	70 91 dd 00 	lds	r23, 0x00DD
     41c:	7c 30       	cpi	r23, 0x0C	; 12
     41e:	11 f4       	brne	.+4      	; 0x424 <process_buttons+0x46>
     420:	4f ef       	ldi	r20, 0xFF	; 255
     422:	01 c0       	rjmp	.+2      	; 0x426 <process_buttons+0x48>
     424:	40 e0       	ldi	r20, 0x00	; 0
			
	button_action_down = raw_current & raw_delayed_inv;
     426:	89 2f       	mov	r24, r25
     428:	83 23       	and	r24, r19
     42a:	80 93 d9 00 	sts	0x00D9, r24
			
	if (press_timer > REPEAT_DELAY)
     42e:	77 30       	cpi	r23, 0x07	; 7
     430:	08 f0       	brcs	.+2      	; 0x434 <process_buttons+0x56>
		raw_delayed_inv |= 0xFF;
     432:	3f ef       	ldi	r19, 0xFF	; 255
	
	button_action_rep = raw_current & raw_delayed_inv;
     434:	39 23       	and	r19, r25
     436:	30 93 d8 00 	sts	0x00D8, r19
	
	button_action_up_short = raw_current_inv & raw_delayed & ~long_press_mask;
     43a:	20 95       	com	r18
     43c:	56 23       	and	r21, r22
     43e:	25 23       	and	r18, r21
     440:	20 93 d7 00 	sts	0x00D7, r18
	//button_action_up_long  = raw_current_inv & raw_delayed & long_press_mask;
	button_action_long  = raw_current & long_press_event_mask;
     444:	49 23       	and	r20, r25
     446:	40 93 d6 00 	sts	0x00D6, r20
	
	// Compose button state
	composed_state = (button_action_down & (BD_MENU | BD_UP | BD_DOWN | BD_ROTFWD | BD_ROTREV | BD_HEATCTRL | BD_CYCLE));
     44a:	8d 7f       	andi	r24, 0xFD	; 253
     44c:	90 e0       	ldi	r25, 0x00	; 0
	if (button_action_up_short & BD_MENU)
     44e:	25 fd       	sbrc	r18, 5
		composed_state |= BS_MENU;
     450:	91 60       	ori	r25, 0x01	; 1
	//if (button_action_up_long & BD_MENU)
	if (button_action_long & BD_MENU)
     452:	45 fd       	sbrc	r20, 5
		composed_state |= BL_MENU;
     454:	92 60       	ori	r25, 0x02	; 2
	if (button_action_rep & BD_UP)
     456:	36 fd       	sbrc	r19, 6
		composed_state |= BR_UP;	
     458:	94 60       	ori	r25, 0x04	; 4
	if (button_action_rep & BD_DOWN)
     45a:	37 fd       	sbrc	r19, 7
		composed_state |= BR_DOWN;
     45c:	98 60       	ori	r25, 0x08	; 8

	button_state = composed_state;
     45e:	90 93 db 00 	sts	0x00DB, r25
     462:	80 93 da 00 	sts	0x00DA, r24
     466:	08 95       	ret

00000468 <getDataCRC>:

}


static uint8_t getDataCRC(void *p,uint8_t byte_count)
{
     468:	fc 01       	movw	r30, r24
	uint8_t crc_byte = 0;
     46a:	80 e0       	ldi	r24, 0x00	; 0
	while(byte_count--)
     46c:	09 c0       	rjmp	.+18     	; 0x480 <getDataCRC+0x18>
	{
		// Using ibutton CRC function for reason of 8-bit output CRC
		crc_byte = _crc_ibutton_update (crc_byte, *(uint8_t*)p++);	
     46e:	91 91       	ld	r25, Z+

static __inline__ uint8_t
_crc_ibutton_update(uint8_t __crc, uint8_t __data)
{
	uint8_t __i, __pattern;
	__asm__ __volatile__ (
     470:	89 27       	eor	r24, r25
     472:	98 e0       	ldi	r25, 0x08	; 8
     474:	2c e8       	ldi	r18, 0x8C	; 140
     476:	86 95       	lsr	r24
     478:	08 f4       	brcc	.+2      	; 0x47c <getDataCRC+0x14>
     47a:	82 27       	eor	r24, r18
     47c:	9a 95       	dec	r25
     47e:	d9 f7       	brne	.-10     	; 0x476 <getDataCRC+0xe>


static uint8_t getDataCRC(void *p,uint8_t byte_count)
{
	uint8_t crc_byte = 0;
	while(byte_count--)
     480:	61 50       	subi	r22, 0x01	; 1
     482:	a8 f7       	brcc	.-22     	; 0x46e <getDataCRC+0x6>
	{
		// Using ibutton CRC function for reason of 8-bit output CRC
		crc_byte = _crc_ibutton_update (crc_byte, *(uint8_t*)p++);	
	}
	return crc_byte;
}
     484:	08 95       	ret

00000486 <processRollControl>:



// Function to control motor rotation
void processRollControl(void)
{	
     486:	cf 93       	push	r28
	uint8_t beepState = 0;
	static uint8_t force_rotate = 0;
	
	// Process auto power off control
	if (autoPowerOffState & AUTO_POFF_ACTIVE)
     488:	80 91 de 00 	lds	r24, 0x00DE
     48c:	80 ff       	sbrs	r24, 0
     48e:	25 c0       	rjmp	.+74     	; 0x4da <processRollControl+0x54>
	{
		stopCycleRolling(RESET_POINTS);	
     490:	81 e0       	ldi	r24, 0x01	; 1
     492:	a0 d8       	rcall	.-3776   	; 0xfffff5d4 <__eeprom_end+0xff7ef568>
		if ( (adc_status & (SENSOR_ERROR_NO_PRESENT | SENSOR_ERROR_SHORTED)) ||
     494:	80 91 61 01 	lds	r24, 0x0161
     498:	83 70       	andi	r24, 0x03	; 3
     49a:	39 f4       	brne	.+14     	; 0x4aa <processRollControl+0x24>
			 (adc_celsius > (POFF_MOTOR_TRESHOLD + POFF_MOTOR_HYST)) )
     49c:	80 91 62 01 	lds	r24, 0x0162
     4a0:	90 91 63 01 	lds	r25, 0x0163
	
	// Process auto power off control
	if (autoPowerOffState & AUTO_POFF_ACTIVE)
	{
		stopCycleRolling(RESET_POINTS);	
		if ( (adc_status & (SENSOR_ERROR_NO_PRESENT | SENSOR_ERROR_SHORTED)) ||
     4a4:	88 33       	cpi	r24, 0x38	; 56
     4a6:	91 05       	cpc	r25, r1
     4a8:	54 f0       	brlt	.+20     	; 0x4be <processRollControl+0x38>
			 (adc_celsius > (POFF_MOTOR_TRESHOLD + POFF_MOTOR_HYST)) )
		{
			// If there is any sensor error, or
			// if temperature is greater than (threshold + some hysteresis) 
			if (!(rollState & (ROLL_FWD | ROLL_REV)))
     4aa:	80 91 05 01 	lds	r24, 0x0105
     4ae:	83 70       	andi	r24, 0x03	; 3
     4b0:	09 f0       	breq	.+2      	; 0x4b4 <processRollControl+0x2e>
     4b2:	6d c0       	rjmp	.+218    	; 0x58e <processRollControl+0x108>
			{
				// If motor is stopped
				setMotorDirection(ROLL_FWD);		// Start rotating in order to prevent rollers damage
     4b4:	81 e0       	ldi	r24, 0x01	; 1
     4b6:	6d d8       	rcall	.-3878   	; 0xfffff592 <__eeprom_end+0xff7ef526>
				force_rotate = 0;					// Do not start motor on power off exit
     4b8:	10 92 e0 00 	sts	0x00E0, r1
     4bc:	68 c0       	rjmp	.+208    	; 0x58e <processRollControl+0x108>
			}
		}
		else if (adc_celsius <= POFF_MOTOR_TRESHOLD)
     4be:	c3 97       	sbiw	r24, 0x33	; 51
     4c0:	0c f0       	brlt	.+2      	; 0x4c4 <processRollControl+0x3e>
     4c2:	65 c0       	rjmp	.+202    	; 0x58e <processRollControl+0x108>
		{
			if (rollState & (ROLL_FWD | ROLL_REV))
     4c4:	80 91 05 01 	lds	r24, 0x0105
     4c8:	83 70       	andi	r24, 0x03	; 3
     4ca:	09 f4       	brne	.+2      	; 0x4ce <processRollControl+0x48>
     4cc:	60 c0       	rjmp	.+192    	; 0x58e <processRollControl+0x108>
			{	
				// If temperature is below threshold and motor is rotating
				setMotorDirection(0);			// Stop the motor
     4ce:	80 e0       	ldi	r24, 0x00	; 0
     4d0:	60 d8       	rcall	.-3904   	; 0xfffff592 <__eeprom_end+0xff7ef526>
				force_rotate = ROLL_FWD;		// Start motor on power-off mode exit
     4d2:	81 e0       	ldi	r24, 0x01	; 1
     4d4:	80 93 e0 00 	sts	0x00E0, r24
     4d8:	5a c0       	rjmp	.+180    	; 0x58e <processRollControl+0x108>
		}
	}
	else
	{
		// Control direction by buttons
		if ((raw_button_state & (BD_ROTFWD | BD_ROTREV)) == (BD_ROTFWD | BD_ROTREV))
     4da:	80 91 ae 01 	lds	r24, 0x01AE
     4de:	84 71       	andi	r24, 0x14	; 20
     4e0:	84 31       	cpi	r24, 0x14	; 20
     4e2:	11 f4       	brne	.+4      	; 0x4e8 <processRollControl+0x62>
		{
			// Both Forward and Reverse buttons are pressed - stop
			// Attention - stopping motor when rollers are hot can possibly damage them
			setMotorDirection(0);
     4e4:	80 e0       	ldi	r24, 0x00	; 0
     4e6:	19 c0       	rjmp	.+50     	; 0x51a <processRollControl+0x94>
		}
		else if (button_action_down & BD_ROTFWD)
     4e8:	80 91 d9 00 	lds	r24, 0x00D9
     4ec:	82 ff       	sbrs	r24, 2
     4ee:	04 c0       	rjmp	.+8      	; 0x4f8 <processRollControl+0x72>
		{
			setMotorDirection(ROLL_FWD);	
     4f0:	81 e0       	ldi	r24, 0x01	; 1
     4f2:	4f d8       	rcall	.-3938   	; 0xfffff592 <__eeprom_end+0xff7ef526>
			beepState |= 0x01;			// pressed FWD button
     4f4:	c1 e0       	ldi	r28, 0x01	; 1
     4f6:	13 c0       	rjmp	.+38     	; 0x51e <processRollControl+0x98>
		}		
		else if (button_action_down & BD_ROTREV)
     4f8:	84 ff       	sbrs	r24, 4
     4fa:	04 c0       	rjmp	.+8      	; 0x504 <processRollControl+0x7e>
		{
			setMotorDirection(ROLL_REV);
     4fc:	82 e0       	ldi	r24, 0x02	; 2
     4fe:	49 d8       	rcall	.-3950   	; 0xfffff592 <__eeprom_end+0xff7ef526>
			beepState |= 0x02;			// pressed REV button
     500:	c2 e0       	ldi	r28, 0x02	; 2
     502:	0d c0       	rjmp	.+26     	; 0x51e <processRollControl+0x98>
		}		
		else if (button_action_long & BD_CYCLE)
     504:	80 91 d6 00 	lds	r24, 0x00D6
     508:	83 ff       	sbrs	r24, 3
     50a:	04 c0       	rjmp	.+8      	; 0x514 <processRollControl+0x8e>
		{
			stopCycleRolling(RESET_POINTS);		// Reset points and disable CYCLE mode (if was enabled)
     50c:	81 e0       	ldi	r24, 0x01	; 1
     50e:	62 d8       	rcall	.-3900   	; 0xfffff5d4 <__eeprom_end+0xff7ef568>
			beepState |= 0x08;					// reset of points by long pressing of ROLL button
     510:	c8 e0       	ldi	r28, 0x08	; 8
     512:	05 c0       	rjmp	.+10     	; 0x51e <processRollControl+0x98>
		}
		else if (force_rotate)
     514:	80 91 e0 00 	lds	r24, 0x00E0
     518:	81 11       	cpse	r24, r1
		{
			// Auto power off mode was exited by pressing some other button, not direction buttons
			// Start roll, but do not beep in this case
			setMotorDirection(force_rotate);
     51a:	3b d8       	rcall	.-3978   	; 0xfffff592 <__eeprom_end+0xff7ef526>


// Function to control motor rotation
void processRollControl(void)
{	
	uint8_t beepState = 0;
     51c:	c0 e0       	ldi	r28, 0x00	; 0
		{
			// Auto power off mode was exited by pressing some other button, not direction buttons
			// Start roll, but do not beep in this case
			setMotorDirection(force_rotate);
		}
		force_rotate = 0;		// First normal pass will clear 
     51e:	10 92 e0 00 	sts	0x00E0, r1
			
		if (button_action_up_short & BD_CYCLE)
     522:	80 91 d7 00 	lds	r24, 0x00D7
     526:	83 ff       	sbrs	r24, 3
     528:	0e c0       	rjmp	.+28     	; 0x546 <processRollControl+0xc0>
		{
			if (rollState & ROLL_CYCLE)
     52a:	80 91 05 01 	lds	r24, 0x0105
     52e:	82 ff       	sbrs	r24, 2
     530:	04 c0       	rjmp	.+8      	; 0x53a <processRollControl+0xb4>
			{
				stopCycleRolling(DO_NOT_RESET_POINTS);
     532:	80 e0       	ldi	r24, 0x00	; 0
     534:	4f d8       	rcall	.-3938   	; 0xfffff5d4 <__eeprom_end+0xff7ef568>
				beepState |= 0x20;		// stopped cycle
     536:	c0 62       	ori	r28, 0x20	; 32
     538:	06 c0       	rjmp	.+12     	; 0x546 <processRollControl+0xc0>
			}
			else if (startCycleRolling())
     53a:	88 d8       	rcall	.-3824   	; 0xfffff64c <__eeprom_end+0xff7ef5e0>
     53c:	88 23       	and	r24, r24
     53e:	11 f0       	breq	.+4      	; 0x544 <processRollControl+0xbe>
			{
				beepState |= 0x10;		// started cycle
     540:	c0 61       	ori	r28, 0x10	; 16
     542:	01 c0       	rjmp	.+2      	; 0x546 <processRollControl+0xc0>
			}
			else
			{
				beepState |= 0x40;		// failed to start cycle
     544:	c0 64       	ori	r28, 0x40	; 64
			}			
		}		
		
		// ROLL_DIR_CHANGED is set only when direction is changed automatically,
		// not when changed by calling setMotorDirection() function
		if (rollState & ROLL_DIR_CHANGED)
     546:	80 91 05 01 	lds	r24, 0x0105
     54a:	85 ff       	sbrs	r24, 5
     54c:	04 c0       	rjmp	.+8      	; 0x556 <processRollControl+0xd0>
		{
			rollState &= ~ROLL_DIR_CHANGED;
     54e:	8f 7d       	andi	r24, 0xDF	; 223
     550:	80 93 05 01 	sts	0x0105, r24
			beepState |= 0x04;	
     554:	c4 60       	ori	r28, 0x04	; 4
		}
		if (rollState & CYCLE_ROLL_DONE)
     556:	80 91 05 01 	lds	r24, 0x0105
     55a:	84 ff       	sbrs	r24, 4
     55c:	04 c0       	rjmp	.+8      	; 0x566 <processRollControl+0xe0>
		{
			rollState &= ~CYCLE_ROLL_DONE;
     55e:	8f 7e       	andi	r24, 0xEF	; 239
     560:	80 93 05 01 	sts	0x0105, r24
			beepState |= 0x80;	
     564:	c0 68       	ori	r28, 0x80	; 128
		}		
			
		//-----------//
			
		if (beepState & 0x80)		// Roll cycle done
     566:	c7 ff       	sbrs	r28, 7
     568:	03 c0       	rjmp	.+6      	; 0x570 <processRollControl+0xea>
		{
			Sound_Play(m_beep_1000Hz_200ms);	
     56a:	84 e6       	ldi	r24, 0x64	; 100
     56c:	90 e0       	ldi	r25, 0x00	; 0
     56e:	0e c0       	rjmp	.+28     	; 0x58c <processRollControl+0x106>
		}		
		else if (beepState & 0x40)	// Roll cycle start fail
     570:	c6 ff       	sbrs	r28, 6
     572:	03 c0       	rjmp	.+6      	; 0x57a <processRollControl+0xf4>
		{
			Sound_Play(m_beep_500Hz_40ms);	
     574:	84 e5       	ldi	r24, 0x54	; 84
     576:	90 e0       	ldi	r25, 0x00	; 0
     578:	09 c0       	rjmp	.+18     	; 0x58c <processRollControl+0x106>
		} 
		else if (beepState & 0x08)	// Reset points
     57a:	c3 ff       	sbrs	r28, 3
     57c:	03 c0       	rjmp	.+6      	; 0x584 <processRollControl+0xfe>
		{
			Sound_Play(m_beep_800Hz_40ms);	
     57e:	88 e5       	ldi	r24, 0x58	; 88
     580:	90 e0       	ldi	r25, 0x00	; 0
     582:	04 c0       	rjmp	.+8      	; 0x58c <processRollControl+0x106>
		}							// Other
		else if ( beepState & (0x01 | 0x02 | 0x10 | 0x20 | 0x04) )
     584:	c7 73       	andi	r28, 0x37	; 55
     586:	19 f0       	breq	.+6      	; 0x58e <processRollControl+0x108>
		{
			Sound_Play(m_beep_1000Hz_40ms);	
     588:	8c e5       	ldi	r24, 0x5C	; 92
     58a:	90 e0       	ldi	r25, 0x00	; 0
     58c:	9c da       	rcall	.-2760   	; 0xfffffac6 <__eeprom_end+0xff7efa5a>
		}			
			
	}

	//----- LED indication ------//
	clearExtraLeds(LED_ROTFWD | LED_ROTREV);
     58e:	88 e1       	ldi	r24, 0x18	; 24
     590:	a0 d2       	rcall	.+1344   	; 0xad2 <clearExtraLeds>
	if (rollState & ROLL_FWD)
     592:	80 91 05 01 	lds	r24, 0x0105
     596:	80 ff       	sbrs	r24, 0
     598:	02 c0       	rjmp	.+4      	; 0x59e <processRollControl+0x118>
		setExtraLeds(LED_ROTFWD);
     59a:	88 e0       	ldi	r24, 0x08	; 8
     59c:	03 c0       	rjmp	.+6      	; 0x5a4 <processRollControl+0x11e>
	else if (rollState & ROLL_REV)
     59e:	81 ff       	sbrs	r24, 1
     5a0:	03 c0       	rjmp	.+6      	; 0x5a8 <processRollControl+0x122>
		setExtraLeds(LED_ROTREV);
     5a2:	80 e1       	ldi	r24, 0x10	; 16
}
     5a4:	cf 91       	pop	r28
	//----- LED indication ------//
	clearExtraLeds(LED_ROTFWD | LED_ROTREV);
	if (rollState & ROLL_FWD)
		setExtraLeds(LED_ROTFWD);
	else if (rollState & ROLL_REV)
		setExtraLeds(LED_ROTREV);
     5a6:	8f c2       	rjmp	.+1310   	; 0xac6 <setExtraLeds>
}
     5a8:	cf 91       	pop	r28
     5aa:	08 95       	ret

000005ac <heaterInit>:



void heaterInit(void)
{
     5ac:	08 95       	ret

000005ae <processHeaterControl>:
	//initPID(adc_filtered >> 1);
}


void processHeaterControl(void)
{
     5ae:	0f 93       	push	r16
     5b0:	1f 93       	push	r17
     5b2:	cf 93       	push	r28
     5b4:	df 93       	push	r29
	uint16_t setPoint;
	uint16_t processValue;
	uint16_t pid_output = 0;
	
	// Process heater ON/OFF control by button
	if (button_state & BD_HEATCTRL)
     5b6:	80 91 da 00 	lds	r24, 0x00DA
     5ba:	80 ff       	sbrs	r24, 0
     5bc:	0b c0       	rjmp	.+22     	; 0x5d4 <processHeaterControl+0x26>
	{
		heaterState ^= HEATER_ENABLED;
     5be:	80 91 df 00 	lds	r24, 0x00DF
     5c2:	91 e0       	ldi	r25, 0x01	; 1
     5c4:	89 27       	eor	r24, r25
     5c6:	80 93 df 00 	sts	0x00DF, r24
		// Force update heater power
		sys_timers.flags |= UPDATE_PID;		// Not very good approach if UPDATE_PID flag is used somewhere else
     5ca:	80 91 88 00 	lds	r24, 0x0088
     5ce:	80 64       	ori	r24, 0x40	; 64
     5d0:	80 93 88 00 	sts	0x0088, r24
	}
	
	// Process auto power off control and sensor errors
	if ((autoPowerOffState & AUTO_POFF_ACTIVE) || (adc_status & (SENSOR_ERROR_NO_PRESENT | SENSOR_ERROR_SHORTED)))
     5d4:	80 91 de 00 	lds	r24, 0x00DE
     5d8:	80 fd       	sbrc	r24, 0
     5da:	04 c0       	rjmp	.+8      	; 0x5e4 <processHeaterControl+0x36>
     5dc:	80 91 61 01 	lds	r24, 0x0161
     5e0:	83 70       	andi	r24, 0x03	; 3
     5e2:	29 f0       	breq	.+10     	; 0x5ee <processHeaterControl+0x40>
	{
		heaterState &= ~HEATER_ENABLED;
     5e4:	80 91 df 00 	lds	r24, 0x00DF
     5e8:	8e 7f       	andi	r24, 0xFE	; 254
     5ea:	80 93 df 00 	sts	0x00DF, r24
	}		
	
	// Check if heater control should be updated
	// PID call interval is a multiple of Celsius update interval. 
	if (sys_timers.flags & UPDATE_PID)
     5ee:	80 91 88 00 	lds	r24, 0x0088
     5f2:	86 ff       	sbrs	r24, 6
     5f4:	47 c0       	rjmp	.+142    	; 0x684 <processHeaterControl+0xd6>
	{
		// Convert temperature setup to equal ADC value
		set_value_adc = conv_Celsius_to_ADC(p.setup_temp_value);					
     5f6:	80 91 93 01 	lds	r24, 0x0193
     5fa:	90 e0       	ldi	r25, 0x00	; 0
     5fc:	0d de       	rcall	.-998    	; 0x218 <conv_Celsius_to_ADC>

		setPoint = set_value_adc * 4;		
     5fe:	8c 01       	movw	r16, r24
     600:	00 0f       	add	r16, r16
     602:	11 1f       	adc	r17, r17
     604:	00 0f       	add	r16, r16
     606:	11 1f       	adc	r17, r17
		//setPoint >>= 1;
		//processValue = adc_filtered >> 1;	// normal PID control
		processValue = adc_filtered;
     608:	c0 91 1b 01 	lds	r28, 0x011B
     60c:	d0 91 1c 01 	lds	r29, 0x011C
		
		// Process PID
		// Possibly hold PID in reset while disabled ?
		// Reset when setting is changed ?
		if (heaterState & HEATER_ENABLED)
     610:	80 91 df 00 	lds	r24, 0x00DF
     614:	80 ff       	sbrs	r24, 0
     616:	06 c0       	rjmp	.+12     	; 0x624 <processHeaterControl+0x76>
			pid_output = processPID(setPoint, processValue);		
     618:	be 01       	movw	r22, r28
     61a:	c8 01       	movw	r24, r16
     61c:	e9 d6       	rcall	.+3538   	; 0x13f0 <processPID>
     61e:	28 2f       	mov	r18, r24
     620:	30 e0       	ldi	r19, 0x00	; 0
     622:	04 c0       	rjmp	.+8      	; 0x62c <processHeaterControl+0x7e>
		else
			initPID(processValue);
     624:	ce 01       	movw	r24, r28
     626:	c7 d6       	rcall	.+3470   	; 0x13b6 <initPID>
void processHeaterControl(void)
{
	uint16_t set_value_adc;	
	uint16_t setPoint;
	uint16_t processValue;
	uint16_t pid_output = 0;
     628:	20 e0       	ldi	r18, 0x00	; 0
     62a:	30 e0       	ldi	r19, 0x00	; 0
			pid_output = processPID(setPoint, processValue);		
		else
			initPID(processValue);
					
		// If heater is disabled, override output
		if (!(heaterState & HEATER_ENABLED))
     62c:	80 91 df 00 	lds	r24, 0x00DF
     630:	80 ff       	sbrs	r24, 0
     632:	05 c0       	rjmp	.+10     	; 0x63e <processHeaterControl+0x90>
			pid_output = 0;
		// If unregulated mode is selected, set full power
		else if (p.setup_temp_value >= MAX_SET_TEMP)
     634:	80 91 93 01 	lds	r24, 0x0193
     638:	8f 3f       	cpi	r24, 0xFF	; 255
     63a:	31 f4       	brne	.+12     	; 0x648 <processHeaterControl+0x9a>
     63c:	03 c0       	rjmp	.+6      	; 0x644 <processHeaterControl+0x96>
		else
			initPID(processValue);
					
		// If heater is disabled, override output
		if (!(heaterState & HEATER_ENABLED))
			pid_output = 0;
     63e:	20 e0       	ldi	r18, 0x00	; 0
     640:	30 e0       	ldi	r19, 0x00	; 0
     642:	02 c0       	rjmp	.+4      	; 0x648 <processHeaterControl+0x9a>
		// If unregulated mode is selected, set full power
		else if (p.setup_temp_value >= MAX_SET_TEMP)
			pid_output = HEATER_MAX_POWER;		// This mode must be used with care for calibration only
     644:	24 e6       	ldi	r18, 0x64	; 100
     646:	30 e0       	ldi	r19, 0x00	; 0
			
		// Set new heater power value	
		setHeaterPower(pid_output);	
     648:	c9 01       	movw	r24, r18
     64a:	96 d7       	rcall	.+3884   	; 0x1578 <setHeaterPower>
		
		
		//------- Debug --------//		
		// PID input:
		dbg_SetPointCelsius = (heaterState & HEATER_ENABLED) ? p.setup_temp_value : 0;
     64c:	80 91 df 00 	lds	r24, 0x00DF
     650:	98 2f       	mov	r25, r24
     652:	91 70       	andi	r25, 0x01	; 1
     654:	80 ff       	sbrs	r24, 0
     656:	03 c0       	rjmp	.+6      	; 0x65e <processHeaterControl+0xb0>
     658:	80 91 93 01 	lds	r24, 0x0193
     65c:	01 c0       	rjmp	.+2      	; 0x660 <processHeaterControl+0xb2>
     65e:	80 e0       	ldi	r24, 0x00	; 0
     660:	80 93 8c 01 	sts	0x018C, r24
		dbg_SetPointPID = (heaterState & HEATER_ENABLED) ? setPoint : 0;
     664:	91 11       	cpse	r25, r1
     666:	02 c0       	rjmp	.+4      	; 0x66c <processHeaterControl+0xbe>
     668:	00 e0       	ldi	r16, 0x00	; 0
     66a:	10 e0       	ldi	r17, 0x00	; 0
     66c:	10 93 9a 01 	sts	0x019A, r17
     670:	00 93 99 01 	sts	0x0199, r16
		dbg_RealTempCelsius = adc_filtered;
     674:	80 91 1b 01 	lds	r24, 0x011B
     678:	80 93 9b 01 	sts	0x019B, r24
		dbg_RealTempPID = processValue;
     67c:	d0 93 98 01 	sts	0x0198, r29
     680:	c0 93 97 01 	sts	0x0197, r28
		
	}	
		
	
	//----- LED indication ------//
	if (heaterState & HEATER_ENABLED)
     684:	80 91 df 00 	lds	r24, 0x00DF
     688:	80 ff       	sbrs	r24, 0
     68a:	06 c0       	rjmp	.+12     	; 0x698 <processHeaterControl+0xea>
		setExtraLeds(LED_HEATER);
     68c:	84 e0       	ldi	r24, 0x04	; 4
	else
		clearExtraLeds(LED_HEATER);
	
}
     68e:	df 91       	pop	r29
     690:	cf 91       	pop	r28
     692:	1f 91       	pop	r17
     694:	0f 91       	pop	r16
	}	
		
	
	//----- LED indication ------//
	if (heaterState & HEATER_ENABLED)
		setExtraLeds(LED_HEATER);
     696:	17 c2       	rjmp	.+1070   	; 0xac6 <setExtraLeds>
	else
		clearExtraLeds(LED_HEATER);
     698:	84 e0       	ldi	r24, 0x04	; 4
	
}
     69a:	df 91       	pop	r29
     69c:	cf 91       	pop	r28
     69e:	1f 91       	pop	r17
     6a0:	0f 91       	pop	r16
	
	//----- LED indication ------//
	if (heaterState & HEATER_ENABLED)
		setExtraLeds(LED_HEATER);
	else
		clearExtraLeds(LED_HEATER);
     6a2:	17 c2       	rjmp	.+1070   	; 0xad2 <clearExtraLeds>

000006a4 <processHeaterAlerts>:
// Function to process all heater alerts:
//	- sensor errors
//	- getting near to desired temperature
//	- continuous heating when disabled
void processHeaterAlerts(void)
{
     6a4:	cf 93       	push	r28
     6a6:	df 93       	push	r29
	static uint8_t tempAlertRange = TEMP_ALERT_RANGE;
	static int16_t refCapturedTemp = INT16_MAX;
	int16_t currentTemperature = adc_celsius;
     6a8:	c0 91 62 01 	lds	r28, 0x0162
     6ac:	d0 91 63 01 	lds	r29, 0x0163
	
	// ADC sensor errors alert
	if (adc_status & (SENSOR_ERROR_NO_PRESENT | SENSOR_ERROR_SHORTED))
     6b0:	80 91 61 01 	lds	r24, 0x0161
     6b4:	83 70       	andi	r24, 0x03	; 3
     6b6:	41 f0       	breq	.+16     	; 0x6c8 <processHeaterAlerts+0x24>
	{
		if (sys_timers.flags & EXPIRED_10SEC)
     6b8:	80 91 88 00 	lds	r24, 0x0088
     6bc:	81 ff       	sbrs	r24, 1
     6be:	43 c0       	rjmp	.+134    	; 0x746 <processHeaterAlerts+0xa2>
		{
			// Enable beeper output regardless of menu setting
			Sound_OverrideDisable();
     6c0:	14 da       	rcall	.-3032   	; 0xfffffaea <__eeprom_end+0xff7efa7e>
			Sound_Play(m_siren3);
     6c2:	8c e0       	ldi	r24, 0x0C	; 12
     6c4:	90 e0       	ldi	r25, 0x00	; 0
     6c6:	3c c0       	rjmp	.+120    	; 0x740 <processHeaterAlerts+0x9c>
		return;
	}
	
	
	// Indicate reaching of desired temperature
	if ( (currentTemperature > p.setup_temp_value - tempAlertRange) && (currentTemperature < p.setup_temp_value + tempAlertRange) )
     6c8:	20 91 93 01 	lds	r18, 0x0193
     6cc:	30 e0       	ldi	r19, 0x00	; 0
     6ce:	60 91 79 00 	lds	r22, 0x0079
     6d2:	86 2f       	mov	r24, r22
     6d4:	90 e0       	ldi	r25, 0x00	; 0
     6d6:	a9 01       	movw	r20, r18
     6d8:	48 1b       	sub	r20, r24
     6da:	59 0b       	sbc	r21, r25
     6dc:	4c 17       	cp	r20, r28
     6de:	5d 07       	cpc	r21, r29
     6e0:	84 f4       	brge	.+32     	; 0x702 <processHeaterAlerts+0x5e>
     6e2:	82 0f       	add	r24, r18
     6e4:	93 1f       	adc	r25, r19
     6e6:	c8 17       	cp	r28, r24
     6e8:	d9 07       	cpc	r29, r25
     6ea:	5c f4       	brge	.+22     	; 0x702 <processHeaterAlerts+0x5e>
	{
		if ((tempAlertRange == TEMP_ALERT_RANGE) && (heaterState & HEATER_ENABLED))
     6ec:	65 30       	cpi	r22, 0x05	; 5
     6ee:	39 f4       	brne	.+14     	; 0x6fe <processHeaterAlerts+0x5a>
     6f0:	80 91 df 00 	lds	r24, 0x00DF
     6f4:	80 ff       	sbrs	r24, 0
     6f6:	03 c0       	rjmp	.+6      	; 0x6fe <processHeaterAlerts+0x5a>
		{
			Sound_Play(m_siren1);
     6f8:	8c e2       	ldi	r24, 0x2C	; 44
     6fa:	90 e0       	ldi	r25, 0x00	; 0
     6fc:	e4 d9       	rcall	.-3128   	; 0xfffffac6 <__eeprom_end+0xff7efa5a>
		}
		// Add some hysteresis
		tempAlertRange = TEMP_ALERT_RANGE + TEMP_ALERT_HYST;
     6fe:	8a e0       	ldi	r24, 0x0A	; 10
     700:	01 c0       	rjmp	.+2      	; 0x704 <processHeaterAlerts+0x60>
	}			
	else
	{
		tempAlertRange = TEMP_ALERT_RANGE;
     702:	85 e0       	ldi	r24, 0x05	; 5
     704:	80 93 79 00 	sts	0x0079, r24
	// Growing temperature with heater disabled alert 
	// This alert is done regardless of global sound enable
	// A false triggering may occur if ambient temperature grows.
	// To reset the warning in this case just turn on heater for at least one systimer tick (50ms)
	// If heater is enabled, it is implied that user controls heating process
	if (heaterState & (HEATER_ENABLED | CALIBRATION_ACTIVE))
     708:	80 91 df 00 	lds	r24, 0x00DF
     70c:	83 70       	andi	r24, 0x03	; 3
     70e:	09 f0       	breq	.+2      	; 0x712 <processHeaterAlerts+0x6e>
     710:	0b c0       	rjmp	.+22     	; 0x728 <processHeaterAlerts+0x84>
	{
		// Heater enabled, just save current temperature as reference
		// Same if calibration in progress, even if heater is disabled
		refCapturedTemp = currentTemperature;
	}
	else if (sys_timers.flags & EXPIRED_10SEC)
     712:	80 91 88 00 	lds	r24, 0x0088
     716:	81 ff       	sbrs	r24, 1
     718:	16 c0       	rjmp	.+44     	; 0x746 <processHeaterAlerts+0xa2>
	{
		// Heater disabled. If temperature is falling,
		if (currentTemperature < refCapturedTemp)
     71a:	80 91 7a 00 	lds	r24, 0x007A
     71e:	90 91 7b 00 	lds	r25, 0x007B
     722:	c8 17       	cp	r28, r24
     724:	d9 07       	cpc	r29, r25
     726:	2c f4       	brge	.+10     	; 0x732 <processHeaterAlerts+0x8e>
		{
			// save current temperature as reference
			refCapturedTemp = currentTemperature;
     728:	d0 93 7b 00 	sts	0x007B, r29
     72c:	c0 93 7a 00 	sts	0x007A, r28
     730:	0a c0       	rjmp	.+20     	; 0x746 <processHeaterAlerts+0xa2>
		else
		{
			// Heater is disabled. If current temperature is higher than reference + some safe interval,
			// there might be a hardware failure - short circuit, etc
			// BEEP like a devil  }:-(
			if (currentTemperature >= (refCapturedTemp + SAFE_TEMP_INTERVAL))
     732:	43 96       	adiw	r24, 0x13	; 19
     734:	8c 17       	cp	r24, r28
     736:	9d 07       	cpc	r25, r29
     738:	34 f4       	brge	.+12     	; 0x746 <processHeaterAlerts+0xa2>
			{
				// Enable beeper output regardless of menu setting
				Sound_OverrideDisable();
     73a:	d7 d9       	rcall	.-3154   	; 0xfffffaea <__eeprom_end+0xff7efa7e>
				Sound_Play(m_siren2);
     73c:	82 e1       	ldi	r24, 0x12	; 18
     73e:	90 e0       	ldi	r25, 0x00	; 0
			}
		}
	}
	

}
     740:	df 91       	pop	r29
     742:	cf 91       	pop	r28
			// BEEP like a devil  }:-(
			if (currentTemperature >= (refCapturedTemp + SAFE_TEMP_INTERVAL))
			{
				// Enable beeper output regardless of menu setting
				Sound_OverrideDisable();
				Sound_Play(m_siren2);
     744:	c0 c9       	rjmp	.-3200   	; 0xfffffac6 <__eeprom_end+0xff7efa5a>
			}
		}
	}
	

}
     746:	df 91       	pop	r29
     748:	cf 91       	pop	r28
     74a:	08 95       	ret

0000074c <saveCalibrationToEEPROM>:


void saveCalibrationToEEPROM(void)
{
	// Calibration parameters normally are only saved after calibrating 
	eeprom_update_block(&cp,&eeCalibrationParams,sizeof(cParams_t));	
     74c:	46 e0       	ldi	r20, 0x06	; 6
     74e:	50 e0       	ldi	r21, 0x00	; 0
     750:	62 e0       	ldi	r22, 0x02	; 2
     752:	70 e0       	ldi	r23, 0x00	; 0
     754:	8d e8       	ldi	r24, 0x8D	; 141
     756:	91 e0       	ldi	r25, 0x01	; 1
     758:	96 da       	rcall	.-2772   	; 0xfffffc86 <__eeprom_end+0xff7efc1a>
	#ifdef USE_EEPROM_CRC
	uint8_t new_crc_byte = getDataCRC(&cp,sizeof(cParams_t));
     75a:	66 e0       	ldi	r22, 0x06	; 6
     75c:	8d e8       	ldi	r24, 0x8D	; 141
     75e:	91 e0       	ldi	r25, 0x01	; 1
     760:	83 de       	rcall	.-762    	; 0x468 <getDataCRC>
	eeprom_update_byte(&ee_cParamsCRC,new_crc_byte);
     762:	68 2f       	mov	r22, r24
     764:	80 e0       	ldi	r24, 0x00	; 0
     766:	90 e0       	ldi	r25, 0x00	; 0
     768:	9d ca       	rjmp	.-2758   	; 0xfffffca4 <__eeprom_end+0xff7efc38>

0000076a <saveGlobalParamsToEEPROM>:

void saveGlobalParamsToEEPROM(void)
{
	// Save global parameters to EEPROM
	// eeprom_update_block() updates only bytes that were changed
	eeprom_update_block(&p,&eeGlobalParams,sizeof(gParams_t));
     76a:	44 e0       	ldi	r20, 0x04	; 4
     76c:	50 e0       	ldi	r21, 0x00	; 0
     76e:	68 e0       	ldi	r22, 0x08	; 8
     770:	70 e0       	ldi	r23, 0x00	; 0
     772:	83 e9       	ldi	r24, 0x93	; 147
     774:	91 e0       	ldi	r25, 0x01	; 1
     776:	87 da       	rcall	.-2802   	; 0xfffffc86 <__eeprom_end+0xff7efc1a>
	#ifdef USE_EEPROM_CRC
	uint8_t new_crc_byte = getDataCRC(&p,sizeof(gParams_t));
     778:	64 e0       	ldi	r22, 0x04	; 4
     77a:	83 e9       	ldi	r24, 0x93	; 147
     77c:	91 e0       	ldi	r25, 0x01	; 1
     77e:	74 de       	rcall	.-792    	; 0x468 <getDataCRC>
	eeprom_update_byte(&ee_gParamsCRC,new_crc_byte);
     780:	68 2f       	mov	r22, r24
     782:	81 e0       	ldi	r24, 0x01	; 1
     784:	90 e0       	ldi	r25, 0x00	; 0
     786:	8e ca       	rjmp	.-2788   	; 0xfffffca4 <__eeprom_end+0xff7efc38>

00000788 <restoreGlobalParams>:
	return crc_byte;
}


uint8_t restoreGlobalParams(void)
{	
     788:	cf 93       	push	r28
     78a:	df 93       	push	r29
	uint8_t defaults_used = 0;
	
	// Restore global parameters - temperature setting, sound enable, etc.
	eeprom_read_block(&p,&eeGlobalParams,sizeof(gParams_t));
     78c:	44 e0       	ldi	r20, 0x04	; 4
     78e:	50 e0       	ldi	r21, 0x00	; 0
     790:	68 e0       	ldi	r22, 0x08	; 8
     792:	70 e0       	ldi	r23, 0x00	; 0
     794:	83 e9       	ldi	r24, 0x93	; 147
     796:	91 e0       	ldi	r25, 0x01	; 1
     798:	5e da       	rcall	.-2884   	; 0xfffffc56 <__eeprom_end+0xff7efbea>
	// Restore ADC calibration parameters
	eeprom_read_block(&cp,&eeCalibrationParams,sizeof(cParams_t));
     79a:	46 e0       	ldi	r20, 0x06	; 6
     79c:	50 e0       	ldi	r21, 0x00	; 0
     79e:	62 e0       	ldi	r22, 0x02	; 2
     7a0:	70 e0       	ldi	r23, 0x00	; 0
     7a2:	8d e8       	ldi	r24, 0x8D	; 141
     7a4:	91 e0       	ldi	r25, 0x01	; 1
     7a6:	57 da       	rcall	.-2898   	; 0xfffffc56 <__eeprom_end+0xff7efbea>
	#ifdef USE_EEPROM_CRC
	uint8_t crc_byte;
	uint8_t temp8u;
	
	//------- Check global params -------//
	crc_byte = getDataCRC(&p,sizeof(gParams_t));
     7a8:	64 e0       	ldi	r22, 0x04	; 4
     7aa:	83 e9       	ldi	r24, 0x93	; 147
     7ac:	91 e0       	ldi	r25, 0x01	; 1
     7ae:	5c de       	rcall	.-840    	; 0x468 <getDataCRC>
     7b0:	c8 2f       	mov	r28, r24
	temp8u = eeprom_read_byte(&ee_gParamsCRC);
     7b2:	81 e0       	ldi	r24, 0x01	; 1
     7b4:	90 e0       	ldi	r25, 0x00	; 0
     7b6:	5f da       	rcall	.-2882   	; 0xfffffc76 <__eeprom_end+0xff7efc0a>
	// Restore global defaults if corrupted
	if (temp8u != crc_byte)
     7b8:	8c 17       	cp	r24, r28
     7ba:	51 f0       	breq	.+20     	; 0x7d0 <restoreGlobalParams+0x48>
	{
		//PGM_read_block(&p,&pmGlobalDefaults,sizeof(gParams_t));
		memcpy_P(&p,&pmGlobalDefaults,sizeof(gParams_t));
     7bc:	44 e0       	ldi	r20, 0x04	; 4
     7be:	50 e0       	ldi	r21, 0x00	; 0
     7c0:	6c e2       	ldi	r22, 0x2C	; 44
     7c2:	70 e0       	ldi	r23, 0x00	; 0
     7c4:	83 e9       	ldi	r24, 0x93	; 147
     7c6:	91 e0       	ldi	r25, 0x01	; 1
     7c8:	3d da       	rcall	.-2950   	; 0xfffffc44 <__eeprom_end+0xff7efbd8>
		// Save restored default values with correct CRC
		saveGlobalParamsToEEPROM();
     7ca:	cf df       	rcall	.-98     	; 0x76a <saveGlobalParamsToEEPROM>
		defaults_used |= 0x01;
     7cc:	c1 e0       	ldi	r28, 0x01	; 1
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <restoreGlobalParams+0x4a>
}


uint8_t restoreGlobalParams(void)
{	
	uint8_t defaults_used = 0;
     7d0:	c0 e0       	ldi	r28, 0x00	; 0
		saveGlobalParamsToEEPROM();
		defaults_used |= 0x01;
	}
	
	//----- Check calibration params -----//
	crc_byte = getDataCRC(&cp,sizeof(cParams_t));
     7d2:	66 e0       	ldi	r22, 0x06	; 6
     7d4:	8d e8       	ldi	r24, 0x8D	; 141
     7d6:	91 e0       	ldi	r25, 0x01	; 1
     7d8:	47 de       	rcall	.-882    	; 0x468 <getDataCRC>
     7da:	d8 2f       	mov	r29, r24
	temp8u = eeprom_read_byte(&ee_cParamsCRC);
     7dc:	80 e0       	ldi	r24, 0x00	; 0
     7de:	90 e0       	ldi	r25, 0x00	; 0
     7e0:	4a da       	rcall	.-2924   	; 0xfffffc76 <__eeprom_end+0xff7efc0a>
	// Restore calibration defaults if corrupted
	if (temp8u != crc_byte)
     7e2:	8d 17       	cp	r24, r29
     7e4:	49 f0       	breq	.+18     	; 0x7f8 <restoreGlobalParams+0x70>
	{
		//PGM_read_block(&cp,&pmCalibrationDefaults,sizeof(cParams_t));
		memcpy_P(&cp,&pmCalibrationDefaults,sizeof(cParams_t));
     7e6:	46 e0       	ldi	r20, 0x06	; 6
     7e8:	50 e0       	ldi	r21, 0x00	; 0
     7ea:	66 e2       	ldi	r22, 0x26	; 38
     7ec:	70 e0       	ldi	r23, 0x00	; 0
     7ee:	8d e8       	ldi	r24, 0x8D	; 141
     7f0:	91 e0       	ldi	r25, 0x01	; 1
     7f2:	28 da       	rcall	.-2992   	; 0xfffffc44 <__eeprom_end+0xff7efbd8>
		// Save restored default values with correct CRC
		saveCalibrationToEEPROM();
     7f4:	ab df       	rcall	.-170    	; 0x74c <saveCalibrationToEEPROM>
		defaults_used |= 0x02;	
     7f6:	c2 60       	ori	r28, 0x02	; 2
	}
	#endif
	
	return defaults_used;
}
     7f8:	8c 2f       	mov	r24, r28
     7fa:	df 91       	pop	r29
     7fc:	cf 91       	pop	r28
     7fe:	08 95       	ret

00000800 <exitPowerOff>:
}

void exitPowerOff(void)
{
	// Put all ports into HI-Z
	DDRB = 0x00;
     800:	17 ba       	out	0x17, r1	; 23
	PORTB = 0x00;
     802:	18 ba       	out	0x18, r1	; 24
	DDRC = 0x00;
     804:	14 ba       	out	0x14, r1	; 20
	PORTC = 0x00;
     806:	15 ba       	out	0x15, r1	; 21
	DDRD = 0x00;
     808:	11 ba       	out	0x11, r1	; 17
	PORTD = 0x00;
     80a:	12 ba       	out	0x12, r1	; 18
	
	// Disable all interrupts
	cli();
     80c:	f8 94       	cli
	
	saveGlobalParamsToEEPROM();
     80e:	ad df       	rcall	.-166    	; 0x76a <saveGlobalParamsToEEPROM>
     810:	ff cf       	rjmp	.-2      	; 0x810 <exitPowerOff+0x10>

00000812 <fir_i16_i8>:
// FIR digital filter
// Samples: signed, 16-bit
// Coeffs:  signed, 8-bit
//---------------------------------------------//
int16_t fir_i16_i8(int16_t new_sample, int16_t *samples, filter8bit_core_t* iir_core)
{
     812:	cf 92       	push	r12
     814:	df 92       	push	r13
     816:	ef 92       	push	r14
     818:	ff 92       	push	r15
     81a:	0f 93       	push	r16
     81c:	1f 93       	push	r17
     81e:	cf 93       	push	r28
     820:	df 93       	push	r29
     822:	8c 01       	movw	r16, r24
     824:	eb 01       	movw	r28, r22
     826:	fa 01       	movw	r30, r20
	int32_t summ;
	uint8_t i;
	
	summ = new_sample * iir_core->coeffs[0];
     828:	23 81       	ldd	r18, Z+3	; 0x03
     82a:	20 03       	mulsu	r18, r16
     82c:	60 01       	movw	r12, r0
     82e:	21 9f       	mul	r18, r17
     830:	d0 0c       	add	r13, r0
     832:	11 24       	eor	r1, r1
     834:	ee 24       	eor	r14, r14
     836:	d7 fc       	sbrc	r13, 7
     838:	e0 94       	com	r14
     83a:	fe 2c       	mov	r15, r14
	for (i=iir_core->n-1; i>0; i--)
     83c:	40 81       	ld	r20, Z
     83e:	1e c0       	rjmp	.+60     	; 0x87c <fir_i16_i8+0x6a>
	{
		samples[i] = samples[i-1];
     840:	84 2f       	mov	r24, r20
     842:	90 e0       	ldi	r25, 0x00	; 0
     844:	dc 01       	movw	r26, r24
     846:	11 97       	sbiw	r26, 0x01	; 1
     848:	aa 0f       	add	r26, r26
     84a:	bb 1f       	adc	r27, r27
     84c:	ac 0f       	add	r26, r28
     84e:	bd 1f       	adc	r27, r29
     850:	2d 91       	ld	r18, X+
     852:	3c 91       	ld	r19, X
     854:	dc 01       	movw	r26, r24
     856:	aa 0f       	add	r26, r26
     858:	bb 1f       	adc	r27, r27
     85a:	ac 0f       	add	r26, r28
     85c:	bd 1f       	adc	r27, r29
     85e:	2d 93       	st	X+, r18
     860:	3c 93       	st	X, r19
		summ += (int32_t)samples[i] * iir_core->coeffs[i];
     862:	df 01       	movw	r26, r30
     864:	a8 0f       	add	r26, r24
     866:	b9 1f       	adc	r27, r25
     868:	13 96       	adiw	r26, 0x03	; 3
     86a:	ac 91       	ld	r26, X
     86c:	bb 27       	eor	r27, r27
     86e:	a7 fd       	sbrc	r26, 7
     870:	b0 95       	com	r27
     872:	90 d9       	rcall	.-3296   	; 0xfffffb94 <__eeprom_end+0xff7efb28>
     874:	c6 0e       	add	r12, r22
     876:	d7 1e       	adc	r13, r23
     878:	e8 1e       	adc	r14, r24
     87a:	f9 1e       	adc	r15, r25
{
	int32_t summ;
	uint8_t i;
	
	summ = new_sample * iir_core->coeffs[0];
	for (i=iir_core->n-1; i>0; i--)
     87c:	41 50       	subi	r20, 0x01	; 1
     87e:	01 f7       	brne	.-64     	; 0x840 <fir_i16_i8+0x2e>
	{
		samples[i] = samples[i-1];
		summ += (int32_t)samples[i] * iir_core->coeffs[i];
	}
	samples[0] = new_sample;
     880:	19 83       	std	Y+1, r17	; 0x01
     882:	08 83       	st	Y, r16
	return (int16_t)(summ / iir_core->dc_gain);
     884:	21 81       	ldd	r18, Z+1	; 0x01
     886:	32 81       	ldd	r19, Z+2	; 0x02
     888:	40 e0       	ldi	r20, 0x00	; 0
     88a:	50 e0       	ldi	r21, 0x00	; 0
     88c:	c7 01       	movw	r24, r14
     88e:	b6 01       	movw	r22, r12
     890:	66 d9       	rcall	.-3380   	; 0xfffffb5e <__eeprom_end+0xff7efaf2>
}
     892:	c9 01       	movw	r24, r18
     894:	df 91       	pop	r29
     896:	cf 91       	pop	r28
     898:	1f 91       	pop	r17
     89a:	0f 91       	pop	r16
     89c:	ff 90       	pop	r15
     89e:	ef 90       	pop	r14
     8a0:	df 90       	pop	r13
     8a2:	cf 90       	pop	r12
     8a4:	08 95       	ret

000008a6 <decode_led_char>:
//---------------------------------------------//
// Decodes normal string literal to the
//	7-segment representation
//---------------------------------------------//
static uint8_t decode_led_char(char c)
{
     8a6:	20 e0       	ldi	r18, 0x00	; 0
     8a8:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t i;
	encode_7seg_pair encode_pair;
	for (i = 0; i < sizeof(led_encode_table)/sizeof(encode_7seg_pair); i++  )
	{
		encode_pair.code = pgm_read_byte(&led_encode_table[i].code);
     8aa:	a9 01       	movw	r20, r18
     8ac:	44 0f       	add	r20, r20
     8ae:	55 1f       	adc	r21, r21
     8b0:	fa 01       	movw	r30, r20
     8b2:	e0 5d       	subi	r30, 0xD0	; 208
     8b4:	ff 4f       	sbci	r31, 0xFF	; 255
     8b6:	e4 91       	lpm	r30, Z
		if (encode_pair.code == c)
     8b8:	e8 13       	cpse	r30, r24
     8ba:	05 c0       	rjmp	.+10     	; 0x8c6 <decode_led_char+0x20>
		{
			i = pgm_read_byte(&led_encode_table[i].segdata);
     8bc:	fa 01       	movw	r30, r20
     8be:	ef 5c       	subi	r30, 0xCF	; 207
     8c0:	ff 4f       	sbci	r31, 0xFF	; 255
     8c2:	84 91       	lpm	r24, Z
     8c4:	08 95       	ret
     8c6:	2f 5f       	subi	r18, 0xFF	; 255
     8c8:	3f 4f       	sbci	r19, 0xFF	; 255
//---------------------------------------------//
static uint8_t decode_led_char(char c)
{
	uint8_t i;
	encode_7seg_pair encode_pair;
	for (i = 0; i < sizeof(led_encode_table)/sizeof(encode_7seg_pair); i++  )
     8ca:	2c 31       	cpi	r18, 0x1C	; 28
     8cc:	31 05       	cpc	r19, r1
     8ce:	69 f7       	brne	.-38     	; 0x8aa <decode_led_char+0x4>
			return i;
		}		
	}			
	// No item was found - return argument value
	return  c;
}
     8d0:	08 95       	ret

000008d2 <wrap_led_buffer_index>:
//---------------------------------------------//
// Ensures that index is inside the buffer
// -128 <= index <= 127
//---------------------------------------------//
static uint8_t wrap_led_buffer_index(int8_t buf_index)
{
     8d2:	28 2f       	mov	r18, r24
	uint8_t new_index_u;
	new_index_u = (uint8_t) ((buf_index < 0) ? -buf_index : buf_index);
     8d4:	87 fd       	sbrc	r24, 7
     8d6:	81 95       	neg	r24
	if (new_index_u >= LED_BUFFER_LENGTH)
     8d8:	8e 30       	cpi	r24, 0x0E	; 14
     8da:	18 f0       	brcs	.+6      	; 0x8e2 <wrap_led_buffer_index+0x10>
		new_index_u = new_index_u % LED_BUFFER_LENGTH;
     8dc:	6e e0       	ldi	r22, 0x0E	; 14
     8de:	20 d9       	rcall	.-3520   	; 0xfffffb20 <__eeprom_end+0xff7efab4>
     8e0:	89 2f       	mov	r24, r25
	new_index_u = ((buf_index >= 0) || (new_index_u == 0)) ? new_index_u :  LED_BUFFER_LENGTH - new_index_u ;
     8e2:	27 ff       	sbrs	r18, 7
     8e4:	05 c0       	rjmp	.+10     	; 0x8f0 <wrap_led_buffer_index+0x1e>
     8e6:	88 23       	and	r24, r24
     8e8:	19 f0       	breq	.+6      	; 0x8f0 <wrap_led_buffer_index+0x1e>
     8ea:	9e e0       	ldi	r25, 0x0E	; 14
     8ec:	98 1b       	sub	r25, r24
     8ee:	89 2f       	mov	r24, r25
	return new_index_u;
}
     8f0:	08 95       	ret

000008f2 <processLedIndicator>:
// Call this function N times per sec to get N/NUM_DIGITS_TOTAL display update rate, where
// NUM_DIGITS_TOTAL is number_of_digits_of_LED_display if no extra LEDs are used or
// (number_of_digits_of_LED_display + 1) otherwise.
//---------------------------------------------//
void processLedIndicator()
{
     8f2:	cf 93       	push	r28
	uint8_t next_wActivePos;
	
	// Turn off segments
	#ifdef CLEAN_OPERATION
	disable_led_segments();
     8f4:	21 d1       	rcall	.+578    	; 0xb38 <disable_led_segments>
	#endif
	
	
	// Perform regular shift
	led_clock_pulse(!LED_DIGIT_ACT_LVL);
     8f6:	81 e0       	ldi	r24, 0x01	; 1
     8f8:	f3 d0       	rcall	.+486    	; 0xae0 <led_clock_pulse>
	
	// Switch on active window item position
	switch (wActivePos)
     8fa:	c0 91 e2 00 	lds	r28, 0x00E2
     8fe:	cc 23       	and	r28, r28
     900:	19 f0       	breq	.+6      	; 0x908 <processLedIndicator+0x16>
     902:	c6 30       	cpi	r28, 0x06	; 6
     904:	c1 f5       	brne	.+112    	; 0x976 <processLedIndicator+0x84>
     906:	0f c0       	rjmp	.+30     	; 0x926 <processLedIndicator+0x34>
	case 0:
		// Get buttons
		#ifndef CLEAN_OPERATION
		disable_led_segments();
		#endif
		enable_led_segments_pullups();
     908:	09 d1       	rcall	.+530    	; 0xb1c <enable_led_segments_pullups>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     90a:	85 e3       	ldi	r24, 0x35	; 53
     90c:	8a 95       	dec	r24
     90e:	f1 f7       	brne	.-4      	; 0x90c <processLedIndicator+0x1a>
     910:	00 00       	nop
		_delay_us(PULLUP_DELAY_US);
		capture_button_state();
     912:	19 d1       	rcall	.+562    	; 0xb46 <capture_button_state>
		#ifndef CLEAN_OPERATION
		enable_led_segments();
		#endif
		// Start new cycle with active digit level
		led_clock_pulse(LED_DIGIT_ACT_LVL);
     914:	80 e0       	ldi	r24, 0x00	; 0
     916:	e4 d0       	rcall	.+456    	; 0xae0 <led_clock_pulse>
		// Always start new cycle from specified buffer start position
		bufActivePos = wStartPos;
     918:	80 91 9d 01 	lds	r24, 0x019D
     91c:	80 93 e1 00 	sts	0x00E1, r24
		next_wActivePos = wActivePos + 1;
     920:	c0 91 e2 00 	lds	r28, 0x00E2
     924:	28 c0       	rjmp	.+80     	; 0x976 <processLedIndicator+0x84>
//---------------------------------------------//
// Performs window shifting
//---------------------------------------------//
static void processWindowShifter(void)
{
	if (shifterState == LED_SHIFT_DONE)
     926:	80 91 9e 01 	lds	r24, 0x019E
     92a:	81 11       	cpse	r24, r1
     92c:	01 c0       	rjmp	.+2      	; 0x930 <processLedIndicator+0x3e>
     92e:	1b c0       	rjmp	.+54     	; 0x966 <processLedIndicator+0x74>
		return;
	
	// Process shift timer
	processSoftTimer8b(&shiftTimer);	
     930:	83 ee       	ldi	r24, 0xE3	; 227
     932:	90 e0       	ldi	r25, 0x00	; 0
     934:	aa d7       	rcall	.+3924   	; 0x188a <processSoftTimer8b>
	
	if (shiftTimer.FTop)
     936:	80 91 e3 00 	lds	r24, 0x00E3
     93a:	85 ff       	sbrs	r24, 5
     93c:	14 c0       	rjmp	.+40     	; 0x966 <processLedIndicator+0x74>
	{
		// Check if finished
		if (wStartPos == bufStartPos)	
     93e:	80 91 9d 01 	lds	r24, 0x019D
     942:	90 91 9f 01 	lds	r25, 0x019F
     946:	89 13       	cpse	r24, r25
     948:	03 c0       	rjmp	.+6      	; 0x950 <processLedIndicator+0x5e>
		{
			// Update state
			shifterState = LED_SHIFT_DONE;
     94a:	10 92 9e 01 	sts	0x019E, r1
     94e:	0b c0       	rjmp	.+22     	; 0x966 <processLedIndicator+0x74>
		}
		else if (shifterState == LED_SHIFT_RIGHT)
     950:	90 91 9e 01 	lds	r25, 0x019E
     954:	92 30       	cpi	r25, 0x02	; 2
     956:	49 f4       	brne	.+18     	; 0x96a <processLedIndicator+0x78>
// Increments index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t inc_buffer_position(uint8_t position)
{
	return (position >= LED_BUFFER_LENGTH - 1) ? 0 : position + 1;
     958:	8d 30       	cpi	r24, 0x0D	; 13
     95a:	10 f4       	brcc	.+4      	; 0x960 <processLedIndicator+0x6e>
     95c:	8f 5f       	subi	r24, 0xFF	; 255
     95e:	01 c0       	rjmp	.+2      	; 0x962 <processLedIndicator+0x70>
     960:	80 e0       	ldi	r24, 0x00	; 0
			// Update state
			shifterState = LED_SHIFT_DONE;
		}
		else if (shifterState == LED_SHIFT_RIGHT)
		{
			wStartPos = inc_buffer_position(wStartPos);	
     962:	80 93 9d 01 	sts	0x019D, r24
		// Always start new cycle from specified buffer start position
		bufActivePos = wStartPos;
		next_wActivePos = wActivePos + 1;
		break;
	case NUM_DIGITS_TOTAL-1:
		next_wActivePos = 0;
     966:	c0 e0       	ldi	r28, 0x00	; 0
     968:	07 c0       	rjmp	.+14     	; 0x978 <processLedIndicator+0x86>
// Decrements index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t dec_buffer_position(uint8_t position)
{
	return (position == 0) ? LED_BUFFER_LENGTH - 1 : position - 1;
     96a:	88 23       	and	r24, r24
     96c:	11 f0       	breq	.+4      	; 0x972 <processLedIndicator+0x80>
     96e:	81 50       	subi	r24, 0x01	; 1
     970:	f8 cf       	rjmp	.-16     	; 0x962 <processLedIndicator+0x70>
     972:	8d e0       	ldi	r24, 0x0D	; 13
     974:	f6 cf       	rjmp	.-20     	; 0x962 <processLedIndicator+0x70>
		next_wActivePos = 0;
		// Shift LED window
		processWindowShifter();	
		break;
	default:
		next_wActivePos = wActivePos + 1;
     976:	cf 5f       	subi	r28, 0xFF	; 255
		break;
	}		
	
	#ifdef 	USE_EXTRA_LED_DIGIT
	if (wActivePos == EXTRA_DIGIT_NUM)
     978:	80 91 e2 00 	lds	r24, 0x00E2
     97c:	86 30       	cpi	r24, 0x06	; 6
     97e:	21 f4       	brne	.+8      	; 0x988 <processLedIndicator+0x96>
	{
		// Output separate LEDs state
		set_led_segments(extra_led_state);
     980:	80 91 9c 01 	lds	r24, 0x019C
     984:	bd d0       	rcall	.+378    	; 0xb00 <set_led_segments>
     986:	10 c0       	rjmp	.+32     	; 0x9a8 <processLedIndicator+0xb6>
	}
	else
	#endif
	{
		// Output new segment data
		set_led_segments(led_data_buffer[bufActivePos]);
     988:	e0 91 e1 00 	lds	r30, 0x00E1
     98c:	f0 e0       	ldi	r31, 0x00	; 0
     98e:	e0 56       	subi	r30, 0x60	; 96
     990:	fe 4f       	sbci	r31, 0xFE	; 254
     992:	80 81       	ld	r24, Z
     994:	b5 d0       	rcall	.+362    	; 0xb00 <set_led_segments>
		// Wrap around buffer length
		bufActivePos = inc_buffer_position(bufActivePos );
     996:	80 91 e1 00 	lds	r24, 0x00E1
// Increments index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t inc_buffer_position(uint8_t position)
{
	return (position >= LED_BUFFER_LENGTH - 1) ? 0 : position + 1;
     99a:	8d 30       	cpi	r24, 0x0D	; 13
     99c:	10 f4       	brcc	.+4      	; 0x9a2 <processLedIndicator+0xb0>
     99e:	8f 5f       	subi	r24, 0xFF	; 255
     9a0:	01 c0       	rjmp	.+2      	; 0x9a4 <processLedIndicator+0xb2>
     9a2:	80 e0       	ldi	r24, 0x00	; 0
	#endif
	{
		// Output new segment data
		set_led_segments(led_data_buffer[bufActivePos]);
		// Wrap around buffer length
		bufActivePos = inc_buffer_position(bufActivePos );
     9a4:	80 93 e1 00 	sts	0x00E1, r24
	}
		
	wActivePos = next_wActivePos;
     9a8:	c0 93 e2 00 	sts	0x00E2, r28
	
	#ifdef CLEAN_OPERATION
	enable_led_segments();
	#endif

}
     9ac:	cf 91       	pop	r28
	}
		
	wActivePos = next_wActivePos;
	
	#ifdef CLEAN_OPERATION
	enable_led_segments();
     9ae:	bd c0       	rjmp	.+378    	; 0xb2a <enable_led_segments>

000009b0 <fillLedBuffer>:
//---------------------------------------------//
// Fills buffer from (bufStartPos + offset) 
//	position with single char
//---------------------------------------------//
void fillLedBuffer(int8_t offset, uint8_t length, char c)
{
     9b0:	0f 93       	push	r16
     9b2:	1f 93       	push	r17
     9b4:	cf 93       	push	r28
     9b6:	df 93       	push	r29
     9b8:	1f 92       	push	r1
     9ba:	cd b7       	in	r28, 0x3d	; 61
     9bc:	de b7       	in	r29, 0x3e	; 62
     9be:	18 2f       	mov	r17, r24
     9c0:	84 2f       	mov	r24, r20
	uint8_t val = decode_led_char(c);
     9c2:	69 83       	std	Y+1, r22	; 0x01
     9c4:	70 df       	rcall	.-288    	; 0x8a6 <decode_led_char>
     9c6:	08 2f       	mov	r16, r24
	// Ensure index is inside the buffer
	uint8_t position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
     9c8:	80 91 9f 01 	lds	r24, 0x019F
     9cc:	81 0f       	add	r24, r17
     9ce:	81 df       	rcall	.-254    	; 0x8d2 <wrap_led_buffer_index>
	while(length--)
     9d0:	69 81       	ldd	r22, Y+1	; 0x01
     9d2:	0a c0       	rjmp	.+20     	; 0x9e8 <fillLedBuffer+0x38>
	{
		led_data_buffer[position] = val;
     9d4:	e8 2f       	mov	r30, r24
     9d6:	f0 e0       	ldi	r31, 0x00	; 0
     9d8:	e0 56       	subi	r30, 0x60	; 96
     9da:	fe 4f       	sbci	r31, 0xFE	; 254
     9dc:	00 83       	st	Z, r16
// Increments index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t inc_buffer_position(uint8_t position)
{
	return (position >= LED_BUFFER_LENGTH - 1) ? 0 : position + 1;
     9de:	8d 30       	cpi	r24, 0x0D	; 13
     9e0:	10 f4       	brcc	.+4      	; 0x9e6 <fillLedBuffer+0x36>
     9e2:	8f 5f       	subi	r24, 0xFF	; 255
     9e4:	01 c0       	rjmp	.+2      	; 0x9e8 <fillLedBuffer+0x38>
     9e6:	80 e0       	ldi	r24, 0x00	; 0
void fillLedBuffer(int8_t offset, uint8_t length, char c)
{
	uint8_t val = decode_led_char(c);
	// Ensure index is inside the buffer
	uint8_t position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
	while(length--)
     9e8:	61 50       	subi	r22, 0x01	; 1
     9ea:	a0 f7       	brcc	.-24     	; 0x9d4 <fillLedBuffer+0x24>
	{
		led_data_buffer[position] = val;
		position = inc_buffer_position(position);
	}
}
     9ec:	0f 90       	pop	r0
     9ee:	df 91       	pop	r29
     9f0:	cf 91       	pop	r28
     9f2:	1f 91       	pop	r17
     9f4:	0f 91       	pop	r16
     9f6:	08 95       	ret

000009f8 <startShiftingWindowLeft>:
//	LED window left 
//---------------------------------------------//
void startShiftingWindowLeft(void)
{
	// Clear spaces between menu states
	fillLedBuffer(-2,2,' ');
     9f8:	40 e2       	ldi	r20, 0x20	; 32
     9fa:	62 e0       	ldi	r22, 0x02	; 2
     9fc:	8e ef       	ldi	r24, 0xFE	; 254
     9fe:	d8 df       	rcall	.-80     	; 0x9b0 <fillLedBuffer>
	// Set new buffer position for writing
	bufStartPos = wrap_led_buffer_index( (int8_t)bufStartPos - (NUM_DIGITS + 2) );
     a00:	80 91 9f 01 	lds	r24, 0x019F
     a04:	88 50       	subi	r24, 0x08	; 8
     a06:	65 df       	rcall	.-310    	; 0x8d2 <wrap_led_buffer_index>
     a08:	80 93 9f 01 	sts	0x019F, r24
	// Set shifter state
	shifterState = LED_SHIFT_LEFT;
     a0c:	81 e0       	ldi	r24, 0x01	; 1
     a0e:	80 93 9e 01 	sts	0x019E, r24
     a12:	08 95       	ret

00000a14 <startShiftingWindowRight>:
//	LED window right 
//---------------------------------------------//
void startShiftingWindowRight(void)
{
	// Clear spaces between menu states
	fillLedBuffer(NUM_DIGITS,2,' ');
     a14:	40 e2       	ldi	r20, 0x20	; 32
     a16:	62 e0       	ldi	r22, 0x02	; 2
     a18:	86 e0       	ldi	r24, 0x06	; 6
     a1a:	ca df       	rcall	.-108    	; 0x9b0 <fillLedBuffer>
	// Set new buffer position for writing
	bufStartPos = wrap_led_buffer_index( (int8_t)bufStartPos + NUM_DIGITS + 2 );
     a1c:	80 91 9f 01 	lds	r24, 0x019F
     a20:	88 5f       	subi	r24, 0xF8	; 248
     a22:	57 df       	rcall	.-338    	; 0x8d2 <wrap_led_buffer_index>
     a24:	80 93 9f 01 	sts	0x019F, r24
	// Set shifter state
	shifterState = LED_SHIFT_RIGHT;
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	80 93 9e 01 	sts	0x019E, r24
     a2e:	08 95       	ret

00000a30 <initLedIndicator>:
//---------------------------------------------//
//	Initialization
//	Call this function at start of your program
//---------------------------------------------//
void initLedIndicator()
{
     a30:	cf 93       	push	r28
	uint8_t i;
	// First disable outputs
	disable_led_segments();
     a32:	82 d0       	rcall	.+260    	; 0xb38 <disable_led_segments>
     a34:	c7 e0       	ldi	r28, 0x07	; 7
	// Fill shift register with non-active levels
	for (i=0;i<NUM_DIGITS_TOTAL;i++)
	{
		led_clock_pulse(!LED_DIGIT_ACT_LVL);
     a36:	81 e0       	ldi	r24, 0x01	; 1
     a38:	53 d0       	rcall	.+166    	; 0xae0 <led_clock_pulse>
     a3a:	c1 50       	subi	r28, 0x01	; 1
{
	uint8_t i;
	// First disable outputs
	disable_led_segments();
	// Fill shift register with non-active levels
	for (i=0;i<NUM_DIGITS_TOTAL;i++)
     a3c:	e1 f7       	brne	.-8      	; 0xa36 <initLedIndicator+0x6>
	{
		led_clock_pulse(!LED_DIGIT_ACT_LVL);
	}
	// Now enable outputs
	enable_led_segments();
     a3e:	75 d0       	rcall	.+234    	; 0xb2a <enable_led_segments>
	
	// Reset pointers
	wStartPos = 0;
     a40:	10 92 9d 01 	sts	0x019D, r1
	bufStartPos = 0;
     a44:	10 92 9f 01 	sts	0x019F, r1
	bufActivePos = 0;
     a48:	10 92 e1 00 	sts	0x00E1, r1
	wActivePos = 0;
     a4c:	10 92 e2 00 	sts	0x00E2, r1
	#ifdef 	USE_EXTRA_LED_DIGIT
	extra_led_state = 0;
     a50:	10 92 9c 01 	sts	0x019C, r1
	#endif
	
	// Clear the buffer 
	fillLedBuffer(0,LED_BUFFER_LENGTH,' ');
     a54:	40 e2       	ldi	r20, 0x20	; 32
     a56:	6e e0       	ldi	r22, 0x0E	; 14
     a58:	80 e0       	ldi	r24, 0x00	; 0
     a5a:	aa df       	rcall	.-172    	; 0x9b0 <fillLedBuffer>
	
	// Initialize shift timer - always enabled, but 
	//	processed only when shifting is active
	shifterState = LED_SHIFT_DONE;
     a5c:	10 92 9e 01 	sts	0x019E, r1
	shiftTimer.Enabled = 1;
     a60:	80 91 e3 00 	lds	r24, 0x00E3
	shiftTimer.RunOnce = 0;
     a64:	81 60       	ori	r24, 0x01	; 1
     a66:	8d 7f       	andi	r24, 0xFD	; 253
     a68:	80 93 e3 00 	sts	0x00E3, r24
	shiftTimer.Top = LED_SHIFT_INTERVAL-1;
     a6c:	89 e0       	ldi	r24, 0x09	; 9
     a6e:	80 93 e5 00 	sts	0x00E5, r24
}
     a72:	cf 91       	pop	r28
     a74:	08 95       	ret

00000a76 <printLedBuffer>:
// Arguments:
//		offset	- buffer index to start with (with respect to bufStartPos)
//		str - null-terminated char string
//---------------------------------------------//		
void printLedBuffer(int8_t offset, char* str)
{
     a76:	1f 93       	push	r17
     a78:	cf 93       	push	r28
     a7a:	df 93       	push	r29
     a7c:	eb 01       	movw	r28, r22
	char c;
	uint8_t decoded_sym;
	// Ensure index is inside the buffer
	uint8_t buffer_position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
     a7e:	90 91 9f 01 	lds	r25, 0x019F
     a82:	89 0f       	add	r24, r25
     a84:	26 df       	rcall	.-436    	; 0x8d2 <wrap_led_buffer_index>
     a86:	18 2f       	mov	r17, r24
	// Output chars
	while((c = *str++))
     a88:	0b c0       	rjmp	.+22     	; 0xaa0 <printLedBuffer+0x2a>
	{
		decoded_sym = decode_led_char(c);
     a8a:	0d df       	rcall	.-486    	; 0x8a6 <decode_led_char>
		led_data_buffer[buffer_position] = decoded_sym;
     a8c:	e1 2f       	mov	r30, r17
     a8e:	f0 e0       	ldi	r31, 0x00	; 0
     a90:	e0 56       	subi	r30, 0x60	; 96
     a92:	fe 4f       	sbci	r31, 0xFE	; 254
     a94:	80 83       	st	Z, r24
// Increments index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t inc_buffer_position(uint8_t position)
{
	return (position >= LED_BUFFER_LENGTH - 1) ? 0 : position + 1;
     a96:	1d 30       	cpi	r17, 0x0D	; 13
     a98:	10 f4       	brcc	.+4      	; 0xa9e <printLedBuffer+0x28>
     a9a:	1f 5f       	subi	r17, 0xFF	; 255
     a9c:	01 c0       	rjmp	.+2      	; 0xaa0 <printLedBuffer+0x2a>
     a9e:	10 e0       	ldi	r17, 0x00	; 0
	char c;
	uint8_t decoded_sym;
	// Ensure index is inside the buffer
	uint8_t buffer_position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
	// Output chars
	while((c = *str++))
     aa0:	89 91       	ld	r24, Y+
     aa2:	81 11       	cpse	r24, r1
     aa4:	f2 cf       	rjmp	.-28     	; 0xa8a <printLedBuffer+0x14>
	{
		decoded_sym = decode_led_char(c);
		led_data_buffer[buffer_position] = decoded_sym;
		buffer_position = inc_buffer_position(buffer_position);
	}
}
     aa6:	df 91       	pop	r29
     aa8:	cf 91       	pop	r28
     aaa:	1f 91       	pop	r17
     aac:	08 95       	ret

00000aae <setComma>:
//	buffer cell
//---------------------------------------------//
void setComma(int8_t offset)
{
	// Ensure index is inside the buffer
	uint8_t position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
     aae:	90 91 9f 01 	lds	r25, 0x019F
     ab2:	89 0f       	add	r24, r25
     ab4:	0e df       	rcall	.-484    	; 0x8d2 <wrap_led_buffer_index>
	led_data_buffer[position] |= (SEGH);
     ab6:	e8 2f       	mov	r30, r24
     ab8:	f0 e0       	ldi	r31, 0x00	; 0
     aba:	e0 56       	subi	r30, 0x60	; 96
     abc:	fe 4f       	sbci	r31, 0xFE	; 254
     abe:	80 81       	ld	r24, Z
     ac0:	80 68       	ori	r24, 0x80	; 128
     ac2:	80 83       	st	Z, r24
     ac4:	08 95       	ret

00000ac6 <setExtraLeds>:
// Argument is ORed with current LED state
//---------------------------------------------//
inline void setExtraLeds(uint8_t leds_set_value)
{
		//asm("cli");
		extra_led_state |= leds_set_value;
     ac6:	90 91 9c 01 	lds	r25, 0x019C
     aca:	98 2b       	or	r25, r24
     acc:	90 93 9c 01 	sts	0x019C, r25
     ad0:	08 95       	ret

00000ad2 <clearExtraLeds>:
// Argument is AND NOTed with current LED state
//---------------------------------------------//
inline void clearExtraLeds(uint8_t leds_clear_value)
{
		//asm("cli");
		extra_led_state &= ~leds_clear_value;
     ad2:	90 91 9c 01 	lds	r25, 0x019C
     ad6:	80 95       	com	r24
     ad8:	89 23       	and	r24, r25
     ada:	80 93 9c 01 	sts	0x019C, r24
     ade:	08 95       	ret

00000ae0 <led_clock_pulse>:


// Clocks in bit into the shift register
void led_clock_pulse(uint8_t bit)
{
	if (bit)
     ae0:	88 23       	and	r24, r24
     ae2:	11 f0       	breq	.+4      	; 0xae8 <led_clock_pulse+0x8>
		PORTB |= (1<<PB_LED_DOUT);
     ae4:	c0 9a       	sbi	0x18, 0	; 24
     ae6:	01 c0       	rjmp	.+2      	; 0xaea <led_clock_pulse+0xa>
	else
		PORTB &= ~(1<<PB_LED_DOUT);
     ae8:	c0 98       	cbi	0x18, 0	; 24
     aea:	8a e1       	ldi	r24, 0x1A	; 26
     aec:	8a 95       	dec	r24
     aee:	f1 f7       	brne	.-4      	; 0xaec <led_clock_pulse+0xc>
     af0:	00 c0       	rjmp	.+0      	; 0xaf2 <led_clock_pulse+0x12>
	_delay_us(SETUP_DELAY_US);
	PORTB |= (1<<PB_LED_CLK);
     af2:	c2 9a       	sbi	0x18, 2	; 24
     af4:	8a e1       	ldi	r24, 0x1A	; 26
     af6:	8a 95       	dec	r24
     af8:	f1 f7       	brne	.-4      	; 0xaf6 <led_clock_pulse+0x16>
     afa:	00 c0       	rjmp	.+0      	; 0xafc <led_clock_pulse+0x1c>
	_delay_us(SHIFT_DELAY_US);
	PORTB &= ~(1<<PB_LED_CLK);
     afc:	c2 98       	cbi	0x18, 2	; 24
     afe:	08 95       	ret

00000b00 <set_led_segments>:
// Outputs decoded segment data to port bits
void set_led_segments(uint8_t seg_ch)
{
	uint8_t pdat;
	seg_ch ^= LED_SEGMENT_MASK;
	pdat = PORTC & ~( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
     b00:	25 b3       	in	r18, 0x15	; 21
	pdat |= (seg_ch & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
     b02:	98 2f       	mov	r25, r24
     b04:	9f 71       	andi	r25, 0x1F	; 31
// Outputs decoded segment data to port bits
void set_led_segments(uint8_t seg_ch)
{
	uint8_t pdat;
	seg_ch ^= LED_SEGMENT_MASK;
	pdat = PORTC & ~( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
     b06:	20 7e       	andi	r18, 0xE0	; 224
	pdat |= (seg_ch & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
     b08:	92 2b       	or	r25, r18
	PORTC = pdat;
     b0a:	95 bb       	out	0x15, r25	; 21
	seg_ch >>= 2;
	pdat = PORTB & ~( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     b0c:	98 b3       	in	r25, 0x18	; 24
	uint8_t pdat;
	seg_ch ^= LED_SEGMENT_MASK;
	pdat = PORTC & ~( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
	pdat |= (seg_ch & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
	PORTC = pdat;
	seg_ch >>= 2;
     b0e:	86 95       	lsr	r24
     b10:	86 95       	lsr	r24
	pdat = PORTB & ~( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
	pdat |= (seg_ch & ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) ));
     b12:	88 73       	andi	r24, 0x38	; 56
	seg_ch ^= LED_SEGMENT_MASK;
	pdat = PORTC & ~( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
	pdat |= (seg_ch & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
	PORTC = pdat;
	seg_ch >>= 2;
	pdat = PORTB & ~( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     b14:	97 7c       	andi	r25, 0xC7	; 199
	pdat |= (seg_ch & ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) ));
     b16:	89 2b       	or	r24, r25
	PORTB = pdat;
     b18:	88 bb       	out	0x18, r24	; 24
     b1a:	08 95       	ret

00000b1c <enable_led_segments_pullups>:

// Turns segment port bits to HI-Z and
// enables pull-ups
void enable_led_segments_pullups()
{
	PORTC |= ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
     b1c:	85 b3       	in	r24, 0x15	; 21
     b1e:	8f 61       	ori	r24, 0x1F	; 31
     b20:	85 bb       	out	0x15, r24	; 21
	PORTB |= ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     b22:	88 b3       	in	r24, 0x18	; 24
     b24:	88 63       	ori	r24, 0x38	; 56
     b26:	88 bb       	out	0x18, r24	; 24
     b28:	08 95       	ret

00000b2a <enable_led_segments>:
}	

void enable_led_segments()
{
	DDRC |= ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
     b2a:	84 b3       	in	r24, 0x14	; 20
     b2c:	8f 61       	ori	r24, 0x1F	; 31
     b2e:	84 bb       	out	0x14, r24	; 20
	DDRB |= ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     b30:	87 b3       	in	r24, 0x17	; 23
     b32:	88 63       	ori	r24, 0x38	; 56
     b34:	87 bb       	out	0x17, r24	; 23
     b36:	08 95       	ret

00000b38 <disable_led_segments>:
}

void disable_led_segments()
{
	DDRC &= ~( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
     b38:	84 b3       	in	r24, 0x14	; 20
     b3a:	80 7e       	andi	r24, 0xE0	; 224
     b3c:	84 bb       	out	0x14, r24	; 20
	DDRB &= ~( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     b3e:	87 b3       	in	r24, 0x17	; 23
     b40:	87 7c       	andi	r24, 0xC7	; 199
     b42:	87 bb       	out	0x17, r24	; 23
     b44:	08 95       	ret

00000b46 <capture_button_state>:


void capture_button_state()
{
	uint8_t pdat;
	pdat = PINB  & ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     b46:	86 b3       	in	r24, 0x16	; 22
     b48:	88 73       	andi	r24, 0x38	; 56
	pdat <<= 2;
	pdat |= (PINC & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
     b4a:	93 b3       	in	r25, 0x13	; 19

void capture_button_state()
{
	uint8_t pdat;
	pdat = PINB  & ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
	pdat <<= 2;
     b4c:	88 0f       	add	r24, r24
     b4e:	88 0f       	add	r24, r24
	pdat |= (PINC & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
     b50:	9f 71       	andi	r25, 0x1F	; 31
     b52:	89 2b       	or	r24, r25
	raw_button_state = pdat ^ RAW_BUTTONS_INVERSE_MASK;
     b54:	80 95       	com	r24
     b56:	80 93 ae 01 	sts	0x01AE, r24
     b5a:	08 95       	ret

00000b5c <processItemFunction>:
//	Arguments:
//		funcAddr - address of the function to run.
//-----------------------------------------------------------------//
static inline void processItemFunction(FuncPtr funcAddr)
{
	if (funcAddr != 0)
     b5c:	00 97       	sbiw	r24, 0x00	; 0
     b5e:	11 f0       	breq	.+4      	; 0xb64 <processItemFunction+0x8>
		((FuncPtr)funcAddr)();
     b60:	fc 01       	movw	r30, r24
     b62:	09 94       	ijmp
     b64:	08 95       	ret

00000b66 <mf_setTempLeave>:
	userTimer.Enabled = 1;
}

void mf_leafExit(void)
{
	userTimer.Enabled = 0;	
     b66:	80 91 f1 00 	lds	r24, 0x00F1
     b6a:	8e 7f       	andi	r24, 0xFE	; 254
     b6c:	80 93 f1 00 	sts	0x00F1, r24
}

void mf_setTempLeave(void)
{
	mf_leafExit();
	if (!(jumpFlags & DISCARD_CHANGES))
     b70:	80 91 f5 00 	lds	r24, 0x00F5
     b74:	85 fd       	sbrc	r24, 5
     b76:	04 c0       	rjmp	.+8      	; 0xb80 <mf_setTempLeave+0x1a>
	{
		p.setup_temp_value = setupValue_u8;		// Apply changes		
     b78:	80 91 ef 00 	lds	r24, 0x00EF
     b7c:	80 93 93 01 	sts	0x0193, r24
     b80:	08 95       	ret

00000b82 <mf_leafSelectAct>:
	userTimer.FA_GE = 1;	
}

void mf_leafSelectAct(void)
{
	userTimer.Timer = 0;
     b82:	10 92 f2 00 	sts	0x00F2, r1
	userTimer.Top = BLINK_PERIOD - 1;
     b86:	87 e0       	ldi	r24, 0x07	; 7
     b88:	80 93 f3 00 	sts	0x00F3, r24
	userTimer.CompA = BLINK_PERIOD / 2;
     b8c:	84 e0       	ldi	r24, 0x04	; 4
     b8e:	80 93 f4 00 	sts	0x00F4, r24
	userTimer.Enabled = 1;
     b92:	e1 ef       	ldi	r30, 0xF1	; 241
     b94:	f0 e0       	ldi	r31, 0x00	; 0
     b96:	80 81       	ld	r24, Z
     b98:	81 60       	ori	r24, 0x01	; 1
     b9a:	80 83       	st	Z, r24
     b9c:	08 95       	ret

00000b9e <mf_sndenLeave>:
}

void mf_leafExit(void)
{
	userTimer.Enabled = 0;	
     b9e:	80 91 f1 00 	lds	r24, 0x00F1
     ba2:	8e 7f       	andi	r24, 0xFE	; 254
     ba4:	80 93 f1 00 	sts	0x00F1, r24
}

void mf_sndenLeave(void)
{
	mf_leafExit();
	if (!(jumpFlags & DISCARD_CHANGES))
     ba8:	80 91 f5 00 	lds	r24, 0x00F5
     bac:	85 fd       	sbrc	r24, 5
     bae:	04 c0       	rjmp	.+8      	; 0xbb8 <mf_sndenLeave+0x1a>
	{
		p.sound_enable = setupValue_u8;		// Apply changes
     bb0:	80 91 ef 00 	lds	r24, 0x00EF
     bb4:	80 93 95 01 	sts	0x0195, r24
     bb8:	08 95       	ret

00000bba <mf_autopoffLeave>:
	userTimer.Enabled = 1;
}

void mf_leafExit(void)
{
	userTimer.Enabled = 0;	
     bba:	80 91 f1 00 	lds	r24, 0x00F1
     bbe:	8e 7f       	andi	r24, 0xFE	; 254
     bc0:	80 93 f1 00 	sts	0x00F1, r24
}

void mf_autopoffLeave(void)
{
	mf_leafExit();
	if (!(jumpFlags & DISCARD_CHANGES))
     bc4:	80 91 f5 00 	lds	r24, 0x00F5
     bc8:	85 fd       	sbrc	r24, 5
     bca:	04 c0       	rjmp	.+8      	; 0xbd4 <mf_autopoffLeave+0x1a>
	{
		p.power_off_timeout = setupValue_u8;		// Apply changes
     bcc:	80 91 ef 00 	lds	r24, 0x00EF
     bd0:	80 93 96 01 	sts	0x0196, r24
     bd4:	08 95       	ret

00000bd6 <mf_actpoffLeave>:
	printLedBuffer(0,"   OFF");
}

void mf_actpoffLeave(void)
{
	autoPowerOffState = 0;	
     bd6:	10 92 de 00 	sts	0x00DE, r1
     bda:	08 95       	ret

00000bdc <mf_calibDoExit>:
	userTimer.Enabled = 1;
}

void mf_leafExit(void)
{
	userTimer.Enabled = 0;	
     bdc:	e1 ef       	ldi	r30, 0xF1	; 241
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	80 81       	ld	r24, Z
     be2:	8e 7f       	andi	r24, 0xFE	; 254
     be4:	80 83       	st	Z, r24


void mf_calibDoExit(void)
{
	mf_leafExit();
	heaterState &= ~CALIBRATION_ACTIVE;
     be6:	80 91 df 00 	lds	r24, 0x00DF
     bea:	8d 7f       	andi	r24, 0xFD	; 253
     bec:	80 93 df 00 	sts	0x00DF, r24
     bf0:	08 95       	ret

00000bf2 <mf_actpoffDo>:
}

// Indication of power off mode
void mf_actpoffDo(void)
{
	printLedBuffer(0,"   OFF");
     bf2:	6d e8       	ldi	r22, 0x8D	; 141
     bf4:	70 e0       	ldi	r23, 0x00	; 0
     bf6:	80 e0       	ldi	r24, 0x00	; 0
     bf8:	3e cf       	rjmp	.-388    	; 0xa76 <printLedBuffer>

00000bfa <mf_cdoneDo>:
	saveCalibrationToEEPROM();
}

void mf_cdoneDo(void)
{
	printLedBuffer(0," DONE ");
     bfa:	64 e9       	ldi	r22, 0x94	; 148
     bfc:	70 e0       	ldi	r23, 0x00	; 0
     bfe:	80 e0       	ldi	r24, 0x00	; 0
     c00:	3a cf       	rjmp	.-396    	; 0xa76 <printLedBuffer>

00000c02 <mf_actpoffSelect>:
// Menu item "Active power off"
// Specific menu item - used as indicator of system state
//------------------------------------------------//
void mf_actpoffSelect(void)
{
	clearExtraLeds(LED_TEMP | LED_ROLL);
     c02:	80 ec       	ldi	r24, 0xC0	; 192
     c04:	66 df       	rcall	.-308    	; 0xad2 <clearExtraLeds>
	autoPowerOffState = AUTO_POFF_ACTIVE;	// Set global flag
     c06:	81 e0       	ldi	r24, 0x01	; 1
     c08:	80 93 de 00 	sts	0x00DE, r24
     c0c:	08 95       	ret

00000c0e <mf_leafSelect>:

// Select and exit functions, common for leaf menu items 

void mf_leafSelect(void)
{
	clearExtraLeds(LED_TEMP | LED_ROLL);
     c0e:	80 ec       	ldi	r24, 0xC0	; 192
     c10:	60 df       	rcall	.-320    	; 0xad2 <clearExtraLeds>
	userTimer.FA_GE = 1;	
     c12:	e1 ef       	ldi	r30, 0xF1	; 241
     c14:	f0 e0       	ldi	r31, 0x00	; 0
     c16:	80 81       	ld	r24, Z
     c18:	80 61       	ori	r24, 0x10	; 16
     c1a:	80 83       	st	Z, r24
     c1c:	08 95       	ret

00000c1e <mf_calibP2Select>:
	printLedBuffer(0,"P1    ");
}

void mf_calibP2Select(void)
{
	mf_leafSelect();
     c1e:	f7 df       	rcall	.-18     	; 0xc0e <mf_leafSelect>
	setupValue_u8 = cp.cpoint2;	// determine which point to use at select func
     c20:	80 91 8e 01 	lds	r24, 0x018E
     c24:	80 93 ef 00 	sts	0x00EF, r24
	cpointNum = 2;
     c28:	82 e0       	ldi	r24, 0x02	; 2
     c2a:	80 93 f0 00 	sts	0x00F0, r24
	printLedBuffer(0,"P2    ");
     c2e:	6b e9       	ldi	r22, 0x9B	; 155
     c30:	70 e0       	ldi	r23, 0x00	; 0
     c32:	80 e0       	ldi	r24, 0x00	; 0
     c34:	20 cf       	rjmp	.-448    	; 0xa76 <printLedBuffer>

00000c36 <mf_calibP1Select>:
// There are two calibration points - the menu item is 
// same for both.
//------------------------------------------------//
void mf_calibP1Select(void)
{
	mf_leafSelect();
     c36:	eb df       	rcall	.-42     	; 0xc0e <mf_leafSelect>
	setupValue_u8 = cp.cpoint1;	// determine which point to use at select func
     c38:	80 91 8d 01 	lds	r24, 0x018D
     c3c:	80 93 ef 00 	sts	0x00EF, r24
	cpointNum = 1;
     c40:	81 e0       	ldi	r24, 0x01	; 1
     c42:	80 93 f0 00 	sts	0x00F0, r24
	printLedBuffer(0,"P1    ");
     c46:	62 ea       	ldi	r22, 0xA2	; 162
     c48:	70 e0       	ldi	r23, 0x00	; 0
     c4a:	80 e0       	ldi	r24, 0x00	; 0
     c4c:	14 cf       	rjmp	.-472    	; 0xa76 <printLedBuffer>

00000c4e <mf_autopoffSelect>:
//------------------------------------------------//
// Menu item "Auto power off setup"
//------------------------------------------------//
void mf_autopoffSelect(void)
{
	mf_leafSelect();						
     c4e:	df df       	rcall	.-66     	; 0xc0e <mf_leafSelect>
	setupValue_u8 = p.power_off_timeout;	// Make a copy of parameter being changed
     c50:	80 91 96 01 	lds	r24, 0x0196
     c54:	80 93 ef 00 	sts	0x00EF, r24
     c58:	08 95       	ret

00000c5a <mf_sndenSelect>:
//------------------------------------------------//
// Menu item "Sound enable/disable"
//------------------------------------------------//
void mf_sndenSelect(void)
{
	mf_leafSelect();					
     c5a:	d9 df       	rcall	.-78     	; 0xc0e <mf_leafSelect>
	setupValue_u8 = p.sound_enable;		// Make a copy of parameter being changed
     c5c:	80 91 95 01 	lds	r24, 0x0195
     c60:	80 93 ef 00 	sts	0x00EF, r24
     c64:	08 95       	ret

00000c66 <mf_rollLeave>:
	userTimer.Enabled = 1;
}

void mf_leafExit(void)
{
	userTimer.Enabled = 0;	
     c66:	e1 ef       	ldi	r30, 0xF1	; 241
     c68:	f0 e0       	ldi	r31, 0x00	; 0
     c6a:	80 81       	ld	r24, Z
     c6c:	8e 7f       	andi	r24, 0xFE	; 254
     c6e:	80 83       	st	Z, r24
}

void mf_rollLeave(void)
{
	mf_leafExit();
	clearExtraLeds(LED_ROLL);
     c70:	80 e4       	ldi	r24, 0x40	; 64
     c72:	2f cf       	rjmp	.-418    	; 0xad2 <clearExtraLeds>

00000c74 <mf_setTempSelect>:
// Menu item "Temperature setting"
// TOP level
//------------------------------------------------//
void mf_setTempSelect(void)
{
	clearExtraLeds(LED_TEMP);
     c74:	80 e8       	ldi	r24, 0x80	; 128
     c76:	2d df       	rcall	.-422    	; 0xad2 <clearExtraLeds>
	mf_leafSelectAct();						// setup and start timer
     c78:	84 df       	rcall	.-248    	; 0xb82 <mf_leafSelectAct>
	setupValue_u8 = p.setup_temp_value;		// Make a copy of parameter being changed
     c7a:	80 91 93 01 	lds	r24, 0x0193
     c7e:	80 93 ef 00 	sts	0x00EF, r24
     c82:	08 95       	ret

00000c84 <mf_realTempLeave>:
	}
}

void mf_realTempLeave(void)
{
	clearExtraLeds(LED_TEMP);
     c84:	80 e8       	ldi	r24, 0x80	; 128
     c86:	25 cf       	rjmp	.-438    	; 0xad2 <clearExtraLeds>

00000c88 <mf_cdoneSelect>:
// There are two calibration points - the menu item is
// same for both.
//------------------------------------------------//
void mf_cdoneSelect(void)
{
	applyCalibrationPoint(cpointNum,setupValue_u8);
     c88:	20 91 ef 00 	lds	r18, 0x00EF
}

void applyCalibrationPoint(uint8_t cpointNum, uint8_t cpointVal)
{
	if (cpointNum == 1)
     c8c:	30 91 f0 00 	lds	r19, 0x00F0
     c90:	80 91 5f 01 	lds	r24, 0x015F
     c94:	90 91 60 01 	lds	r25, 0x0160
     c98:	31 30       	cpi	r19, 0x01	; 1
     c9a:	39 f4       	brne	.+14     	; 0xcaa <mf_cdoneSelect+0x22>
	{
		cp.cpoint1_adc = adc_normalized;
     c9c:	90 93 90 01 	sts	0x0190, r25
     ca0:	80 93 8f 01 	sts	0x018F, r24
		cp.cpoint1 = cpointVal;
     ca4:	20 93 8d 01 	sts	0x018D, r18
     ca8:	06 c0       	rjmp	.+12     	; 0xcb6 <mf_cdoneSelect+0x2e>
	}
	else
	{
		cp.cpoint2_adc = adc_normalized;
     caa:	90 93 92 01 	sts	0x0192, r25
     cae:	80 93 91 01 	sts	0x0191, r24
		cp.cpoint2 = cpointVal;
     cb2:	20 93 8e 01 	sts	0x018E, r18
	}
	calculateCoeffs();
     cb6:	d0 da       	rcall	.-2656   	; 0x258 <calculateCoeffs>
	saveCalibrationToEEPROM();
     cb8:	49 cd       	rjmp	.-1390   	; 0x74c <saveCalibrationToEEPROM>

00000cba <mf_autopoffDo>:
}

void mf_autopoffDo(void)
{
	char *str = (char *)&temp_str;
	memcpy_P(str,&ms_autoPoffDo,7);	
     cba:	47 e0       	ldi	r20, 0x07	; 7
     cbc:	50 e0       	ldi	r21, 0x00	; 0
     cbe:	6c e6       	ldi	r22, 0x6C	; 108
     cc0:	70 e0       	ldi	r23, 0x00	; 0
     cc2:	8f ea       	ldi	r24, 0xAF	; 175
     cc4:	91 e0       	ldi	r25, 0x01	; 1
     cc6:	be d7       	rcall	.+3964   	; 0x1c44 <memcpy_P>
		
	if (button_state & (BD_UP | BR_UP))
     cc8:	80 91 da 00 	lds	r24, 0x00DA
     ccc:	90 91 db 00 	lds	r25, 0x00DB
     cd0:	9c 01       	movw	r18, r24
     cd2:	20 74       	andi	r18, 0x40	; 64
     cd4:	34 70       	andi	r19, 0x04	; 4
     cd6:	23 2b       	or	r18, r19
     cd8:	31 f0       	breq	.+12     	; 0xce6 <mf_autopoffDo+0x2c>
	{
		if (setupValue_u8 < MAX_POWEROFF_TIMEOUT)
     cda:	80 91 ef 00 	lds	r24, 0x00EF
     cde:	8f 35       	cpi	r24, 0x5F	; 95
     ce0:	68 f4       	brcc	.+26     	; 0xcfc <mf_autopoffDo+0x42>
			setupValue_u8 += POWEROFF_SET_STEP;
     ce2:	8b 5f       	subi	r24, 0xFB	; 251
     ce4:	09 c0       	rjmp	.+18     	; 0xcf8 <mf_autopoffDo+0x3e>
		restartMenuTimer();
	}
	else if (button_state & (BD_DOWN | BR_DOWN))
     ce6:	80 78       	andi	r24, 0x80	; 128
     ce8:	98 70       	andi	r25, 0x08	; 8
     cea:	89 2b       	or	r24, r25
     cec:	49 f0       	breq	.+18     	; 0xd00 <mf_autopoffDo+0x46>
	{
		if (setupValue_u8 > MIN_POWEROFF_TIMEOUT)
     cee:	80 91 ef 00 	lds	r24, 0x00EF
     cf2:	86 30       	cpi	r24, 0x06	; 6
     cf4:	18 f0       	brcs	.+6      	; 0xcfc <mf_autopoffDo+0x42>
			setupValue_u8 -= POWEROFF_SET_STEP;
     cf6:	85 50       	subi	r24, 0x05	; 5
     cf8:	80 93 ef 00 	sts	0x00EF, r24
//	 Restarts menu state timeout
//	Should be used in RUN function when control buttons are pressed.
//-----------------------------------------------------------------//
static void restartMenuTimer(void)
{
	menuTimer.Timer = 0;
     cfc:	10 92 7d 00 	sts	0x007D, r1
		if (setupValue_u8 > MIN_POWEROFF_TIMEOUT)
			setupValue_u8 -= POWEROFF_SET_STEP;
		restartMenuTimer();
	}	
		
	if (userTimer.FA_GE)
     d00:	80 91 f1 00 	lds	r24, 0x00F1
     d04:	84 ff       	sbrs	r24, 4
     d06:	10 c0       	rjmp	.+32     	; 0xd28 <mf_autopoffDo+0x6e>
	{
		if (setupValue_u8 < MAX_POWEROFF_TIMEOUT)
     d08:	80 91 ef 00 	lds	r24, 0x00EF
     d0c:	8f 35       	cpi	r24, 0x5F	; 95
     d0e:	30 f4       	brcc	.+12     	; 0xd1c <mf_autopoffDo+0x62>
		{
			u16toa_align_right(setupValue_u8,str + 4,NO_TERMINATING_ZERO | 2);	
     d10:	42 e8       	ldi	r20, 0x82	; 130
     d12:	63 eb       	ldi	r22, 0xB3	; 179
     d14:	71 e0       	ldi	r23, 0x01	; 1
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	2a d2       	rcall	.+1108   	; 0x116e <u16toa_align_right>
     d1a:	06 c0       	rjmp	.+12     	; 0xd28 <mf_autopoffDo+0x6e>
		}			
		else 
		{
			str[4] = 'N';
     d1c:	8e e4       	ldi	r24, 0x4E	; 78
     d1e:	80 93 b3 01 	sts	0x01B3, r24
			str[5] = 'O';
     d22:	8f e4       	ldi	r24, 0x4F	; 79
     d24:	80 93 b4 01 	sts	0x01B4, r24
		}			
	}		
		
	printLedBuffer(0,str);
     d28:	6f ea       	ldi	r22, 0xAF	; 175
     d2a:	71 e0       	ldi	r23, 0x01	; 1
     d2c:	80 e0       	ldi	r24, 0x00	; 0
     d2e:	a3 ce       	rjmp	.-698    	; 0xa76 <printLedBuffer>

00000d30 <mf_calibDo>:
}

void mf_calibDo(void)
{
	char *str = (char *)&temp_str;
	memcpy_P(str,&ms_calibDo,4);
     d30:	44 e0       	ldi	r20, 0x04	; 4
     d32:	50 e0       	ldi	r21, 0x00	; 0
     d34:	68 e6       	ldi	r22, 0x68	; 104
     d36:	70 e0       	ldi	r23, 0x00	; 0
     d38:	8f ea       	ldi	r24, 0xAF	; 175
     d3a:	91 e0       	ldi	r25, 0x01	; 1
     d3c:	83 d7       	rcall	.+3846   	; 0x1c44 <memcpy_P>
	
	if (button_state & (BD_UP | BR_UP))
     d3e:	80 91 da 00 	lds	r24, 0x00DA
     d42:	90 91 db 00 	lds	r25, 0x00DB
     d46:	9c 01       	movw	r18, r24
     d48:	20 74       	andi	r18, 0x40	; 64
     d4a:	34 70       	andi	r19, 0x04	; 4
     d4c:	23 2b       	or	r18, r19
     d4e:	31 f0       	breq	.+12     	; 0xd5c <mf_calibDo+0x2c>
	{
		if (setupValue_u8 < MAX_CALIB_TEMP)
     d50:	80 91 ef 00 	lds	r24, 0x00EF
     d54:	8a 3f       	cpi	r24, 0xFA	; 250
     d56:	68 f4       	brcc	.+26     	; 0xd72 <mf_calibDo+0x42>
		setupValue_u8 += CALIB_TEMP_STEP;
     d58:	8f 5f       	subi	r24, 0xFF	; 255
     d5a:	09 c0       	rjmp	.+18     	; 0xd6e <mf_calibDo+0x3e>
	}
	else if (button_state & (BD_DOWN | BR_DOWN))
     d5c:	80 78       	andi	r24, 0x80	; 128
     d5e:	98 70       	andi	r25, 0x08	; 8
     d60:	89 2b       	or	r24, r25
     d62:	39 f0       	breq	.+14     	; 0xd72 <mf_calibDo+0x42>
	{
		if (setupValue_u8 > MIN_CALIB_TEMP)
     d64:	80 91 ef 00 	lds	r24, 0x00EF
     d68:	8b 30       	cpi	r24, 0x0B	; 11
     d6a:	18 f0       	brcs	.+6      	; 0xd72 <mf_calibDo+0x42>
		setupValue_u8 -= CALIB_TEMP_STEP;
     d6c:	81 50       	subi	r24, 0x01	; 1
     d6e:	80 93 ef 00 	sts	0x00EF, r24
	}
	
	if (userTimer.FA_GE)
     d72:	80 91 f1 00 	lds	r24, 0x00F1
     d76:	84 ff       	sbrs	r24, 4
     d78:	0d c0       	rjmp	.+26     	; 0xd94 <mf_calibDo+0x64>
	{
		u16toa_align_right(setupValue_u8,str,3);
     d7a:	43 e0       	ldi	r20, 0x03	; 3
     d7c:	6f ea       	ldi	r22, 0xAF	; 175
     d7e:	71 e0       	ldi	r23, 0x01	; 1
     d80:	80 91 ef 00 	lds	r24, 0x00EF
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	f3 d1       	rcall	.+998    	; 0x116e <u16toa_align_right>
		resetAutoPowerOffCounter();
     d88:	13 d6       	rcall	.+3110   	; 0x19b0 <resetAutoPowerOffCounter>
		heaterState |= CALIBRATION_ACTIVE;
     d8a:	80 91 df 00 	lds	r24, 0x00DF
     d8e:	82 60       	ori	r24, 0x02	; 2
     d90:	80 93 df 00 	sts	0x00DF, r24
	}
	
	printLedBuffer(3,str);
     d94:	6f ea       	ldi	r22, 0xAF	; 175
     d96:	71 e0       	ldi	r23, 0x01	; 1
     d98:	83 e0       	ldi	r24, 0x03	; 3
     d9a:	6d ce       	rjmp	.-806    	; 0xa76 <printLedBuffer>

00000d9c <mf_sndenDo>:
}

void mf_sndenDo(void)
{
	char *str = (char *)&temp_str;
	memcpy_P(str,&ms_soundEnDo,7);	
     d9c:	47 e0       	ldi	r20, 0x07	; 7
     d9e:	50 e0       	ldi	r21, 0x00	; 0
     da0:	63 e7       	ldi	r22, 0x73	; 115
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	8f ea       	ldi	r24, 0xAF	; 175
     da6:	91 e0       	ldi	r25, 0x01	; 1
     da8:	4d d7       	rcall	.+3738   	; 0x1c44 <memcpy_P>
		
	if (button_state & (BD_UP | BD_DOWN))
     daa:	80 91 da 00 	lds	r24, 0x00DA
     dae:	90 91 db 00 	lds	r25, 0x00DB
     db2:	80 7c       	andi	r24, 0xC0	; 192
     db4:	99 27       	eor	r25, r25
     db6:	89 2b       	or	r24, r25
     db8:	49 f0       	breq	.+18     	; 0xdcc <mf_sndenDo+0x30>
	{
		setupValue_u8 = !setupValue_u8;
     dba:	81 e0       	ldi	r24, 0x01	; 1
     dbc:	90 91 ef 00 	lds	r25, 0x00EF
     dc0:	91 11       	cpse	r25, r1
     dc2:	80 e0       	ldi	r24, 0x00	; 0
     dc4:	80 93 ef 00 	sts	0x00EF, r24
//	 Restarts menu state timeout
//	Should be used in RUN function when control buttons are pressed.
//-----------------------------------------------------------------//
static void restartMenuTimer(void)
{
	menuTimer.Timer = 0;
     dc8:	10 92 7d 00 	sts	0x007D, r1
	{
		setupValue_u8 = !setupValue_u8;
		restartMenuTimer();
	}			
		
	if (userTimer.FA_GE)
     dcc:	80 91 f1 00 	lds	r24, 0x00F1
     dd0:	84 ff       	sbrs	r24, 4
     dd2:	11 c0       	rjmp	.+34     	; 0xdf6 <mf_sndenDo+0x5a>
	{
		if (setupValue_u8)		
     dd4:	80 91 ef 00 	lds	r24, 0x00EF
     dd8:	88 23       	and	r24, r24
     dda:	29 f0       	breq	.+10     	; 0xde6 <mf_sndenDo+0x4a>
		{
			str[4] = 'O';
     ddc:	8f e4       	ldi	r24, 0x4F	; 79
     dde:	80 93 b3 01 	sts	0x01B3, r24
			str[5] = 'N';
     de2:	8e e4       	ldi	r24, 0x4E	; 78
     de4:	06 c0       	rjmp	.+12     	; 0xdf2 <mf_sndenDo+0x56>
		}
		else
		{
			str[3] = 'O';
     de6:	8f e4       	ldi	r24, 0x4F	; 79
     de8:	80 93 b2 01 	sts	0x01B2, r24
			str[4] = 'F';
     dec:	86 e4       	ldi	r24, 0x46	; 70
     dee:	80 93 b3 01 	sts	0x01B3, r24
			str[5] = 'F';
     df2:	80 93 b4 01 	sts	0x01B4, r24
		}			
	}
		
	printLedBuffer(0,str);
     df6:	6f ea       	ldi	r22, 0xAF	; 175
     df8:	71 e0       	ldi	r23, 0x01	; 1
     dfa:	80 e0       	ldi	r24, 0x00	; 0
     dfc:	3c de       	rcall	.-904    	; 0xa76 <printLedBuffer>
	setComma(2);
     dfe:	82 e0       	ldi	r24, 0x02	; 2
     e00:	56 ce       	rjmp	.-852    	; 0xaae <setComma>

00000e02 <mf_rollDo>:
}

void mf_rollDo(void)
{
	char *str = (char *)&temp_str;
	memcpy_P(str,&ms_rollDo,7);
     e02:	47 e0       	ldi	r20, 0x07	; 7
     e04:	50 e0       	ldi	r21, 0x00	; 0
     e06:	6a e7       	ldi	r22, 0x7A	; 122
     e08:	70 e0       	ldi	r23, 0x00	; 0
     e0a:	8f ea       	ldi	r24, 0xAF	; 175
     e0c:	91 e0       	ldi	r25, 0x01	; 1
     e0e:	1a d7       	rcall	.+3636   	; 0x1c44 <memcpy_P>
		
	if (button_state & (BD_UP | BR_UP))
     e10:	80 91 da 00 	lds	r24, 0x00DA
     e14:	90 91 db 00 	lds	r25, 0x00DB
     e18:	9c 01       	movw	r18, r24
     e1a:	20 74       	andi	r18, 0x40	; 64
     e1c:	34 70       	andi	r19, 0x04	; 4
     e1e:	23 2b       	or	r18, r19
     e20:	31 f0       	breq	.+12     	; 0xe2e <mf_rollDo+0x2c>
	{
		if (p.rollCycleSet < MAX_ROLL_CYCLES)
     e22:	80 91 94 01 	lds	r24, 0x0194
     e26:	83 36       	cpi	r24, 0x63	; 99
     e28:	68 f4       	brcc	.+26     	; 0xe44 <mf_rollDo+0x42>
			p.rollCycleSet += ROLL_CYCLES_STEP;
     e2a:	8f 5f       	subi	r24, 0xFF	; 255
     e2c:	09 c0       	rjmp	.+18     	; 0xe40 <mf_rollDo+0x3e>
	}
	else if (button_state & (BD_DOWN | BR_DOWN))
     e2e:	80 78       	andi	r24, 0x80	; 128
     e30:	98 70       	andi	r25, 0x08	; 8
     e32:	89 2b       	or	r24, r25
     e34:	39 f0       	breq	.+14     	; 0xe44 <mf_rollDo+0x42>
	{
		if (p.rollCycleSet > MIN_ROLL_CYCLES)
     e36:	80 91 94 01 	lds	r24, 0x0194
     e3a:	82 30       	cpi	r24, 0x02	; 2
     e3c:	18 f0       	brcs	.+6      	; 0xe44 <mf_rollDo+0x42>
			p.rollCycleSet -= ROLL_CYCLES_STEP;
     e3e:	81 50       	subi	r24, 0x01	; 1
     e40:	80 93 94 01 	sts	0x0194, r24
	}	
		
	u16toa_align_right(p.rollCycleSet,str + 4,NO_TERMINATING_ZERO | 2);
     e44:	42 e8       	ldi	r20, 0x82	; 130
     e46:	63 eb       	ldi	r22, 0xB3	; 179
     e48:	71 e0       	ldi	r23, 0x01	; 1
     e4a:	80 91 94 01 	lds	r24, 0x0194
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	8e d1       	rcall	.+796    	; 0x116e <u16toa_align_right>
	
	if ((!(rollState & ROLL_CYCLE)) || (userTimer.FA_GE))
     e52:	80 91 05 01 	lds	r24, 0x0105
     e56:	82 ff       	sbrs	r24, 2
     e58:	04 c0       	rjmp	.+8      	; 0xe62 <mf_rollDo+0x60>
     e5a:	80 91 f1 00 	lds	r24, 0x00F1
     e5e:	84 ff       	sbrs	r24, 4
     e60:	07 c0       	rjmp	.+14     	; 0xe70 <mf_rollDo+0x6e>
	{
		u16toa_align_right(activeRollCycle,str + 1,NO_TERMINATING_ZERO | 2);
     e62:	42 e8       	ldi	r20, 0x82	; 130
     e64:	60 eb       	ldi	r22, 0xB0	; 176
     e66:	71 e0       	ldi	r23, 0x01	; 1
     e68:	80 91 04 01 	lds	r24, 0x0104
     e6c:	90 e0       	ldi	r25, 0x00	; 0
     e6e:	7f d1       	rcall	.+766    	; 0x116e <u16toa_align_right>
	}
	
	str[0] = 0;
     e70:	10 92 af 01 	sts	0x01AF, r1
	if (isTopPointValid())
     e74:	cb d3       	rcall	.+1942   	; 0x160c <isTopPointValid>
     e76:	88 23       	and	r24, r24
     e78:	29 f0       	breq	.+10     	; 0xe84 <mf_rollDo+0x82>
		str[0] |= SEGA;
     e7a:	80 91 af 01 	lds	r24, 0x01AF
     e7e:	81 60       	ori	r24, 0x01	; 1
     e80:	80 93 af 01 	sts	0x01AF, r24
	if (isBottomPointValid())
     e84:	d3 d3       	rcall	.+1958   	; 0x162c <isBottomPointValid>
     e86:	88 23       	and	r24, r24
     e88:	29 f0       	breq	.+10     	; 0xe94 <mf_rollDo+0x92>
		str[0] |= SEGD;
     e8a:	80 91 af 01 	lds	r24, 0x01AF
     e8e:	88 60       	ori	r24, 0x08	; 8
     e90:	80 93 af 01 	sts	0x01AF, r24
	if (str[0] == 0)
     e94:	80 91 af 01 	lds	r24, 0x01AF
     e98:	81 11       	cpse	r24, r1
     e9a:	03 c0       	rjmp	.+6      	; 0xea2 <mf_rollDo+0xa0>
		str[0] = ' ';
     e9c:	80 e2       	ldi	r24, 0x20	; 32
     e9e:	80 93 af 01 	sts	0x01AF, r24
		
	printLedBuffer(0,str);
     ea2:	6f ea       	ldi	r22, 0xAF	; 175
     ea4:	71 e0       	ldi	r23, 0x01	; 1
     ea6:	80 e0       	ldi	r24, 0x00	; 0
     ea8:	e6 cd       	rjmp	.-1076   	; 0xa76 <printLedBuffer>

00000eaa <mf_rollSelect>:
// TOP level
//------------------------------------------------//

void mf_rollSelect(void)
{
	mf_leafSelectAct();		// setup and start timer
     eaa:	6b de       	rcall	.-810    	; 0xb82 <mf_leafSelectAct>
	setExtraLeds(LED_ROLL);
     eac:	80 e4       	ldi	r24, 0x40	; 64
     eae:	0b ce       	rjmp	.-1002   	; 0xac6 <setExtraLeds>

00000eb0 <mf_setTempDo>:
}

void mf_setTempDo(void)
{
	char *str = (char *)&temp_str;
	memcpy_P(str,&ms_realTempDo,7);
     eb0:	47 e0       	ldi	r20, 0x07	; 7
     eb2:	50 e0       	ldi	r21, 0x00	; 0
     eb4:	61 e8       	ldi	r22, 0x81	; 129
     eb6:	70 e0       	ldi	r23, 0x00	; 0
     eb8:	8f ea       	ldi	r24, 0xAF	; 175
     eba:	91 e0       	ldi	r25, 0x01	; 1
     ebc:	c3 d6       	rcall	.+3462   	; 0x1c44 <memcpy_P>
	
	if (button_state & (BD_UP | BR_UP))
     ebe:	80 91 da 00 	lds	r24, 0x00DA
     ec2:	90 91 db 00 	lds	r25, 0x00DB
     ec6:	9c 01       	movw	r18, r24
     ec8:	20 74       	andi	r18, 0x40	; 64
     eca:	34 70       	andi	r19, 0x04	; 4
     ecc:	40 91 ef 00 	lds	r20, 0x00EF
     ed0:	23 2b       	or	r18, r19
     ed2:	21 f0       	breq	.+8      	; 0xedc <mf_setTempDo+0x2c>
	{
		if (setupValue_u8 < MAX_SET_TEMP)
     ed4:	4f 3f       	cpi	r20, 0xFF	; 255
     ed6:	59 f0       	breq	.+22     	; 0xeee <mf_setTempDo+0x3e>
			setupValue_u8 += TEMP_SET_STEP;
     ed8:	4b 5f       	subi	r20, 0xFB	; 251
     eda:	07 c0       	rjmp	.+14     	; 0xeea <mf_setTempDo+0x3a>
		restartMenuTimer();
	}
	else if (button_state & (BD_DOWN | BR_DOWN))
     edc:	80 78       	andi	r24, 0x80	; 128
     ede:	98 70       	andi	r25, 0x08	; 8
     ee0:	89 2b       	or	r24, r25
     ee2:	39 f0       	breq	.+14     	; 0xef2 <mf_setTempDo+0x42>
	{
		if (setupValue_u8 > MIN_SET_TEMP)
     ee4:	4f 31       	cpi	r20, 0x1F	; 31
     ee6:	18 f0       	brcs	.+6      	; 0xeee <mf_setTempDo+0x3e>
			setupValue_u8 -= TEMP_SET_STEP;
     ee8:	45 50       	subi	r20, 0x05	; 5
     eea:	40 93 ef 00 	sts	0x00EF, r20
//	 Restarts menu state timeout
//	Should be used in RUN function when control buttons are pressed.
//-----------------------------------------------------------------//
static void restartMenuTimer(void)
{
	menuTimer.Timer = 0;
     eee:	10 92 7d 00 	sts	0x007D, r1
			setupValue_u8 -= TEMP_SET_STEP;
		restartMenuTimer();
	}					
		
	// Output setting to LED
	if (setupValue_u8 < MAX_SET_TEMP)
     ef2:	80 91 ef 00 	lds	r24, 0x00EF
     ef6:	8f 3f       	cpi	r24, 0xFF	; 255
     ef8:	41 f0       	breq	.+16     	; 0xf0a <mf_setTempDo+0x5a>
	{
		u16toa_align_right(setupValue_u8,str,NO_TERMINATING_ZERO | 4);
     efa:	44 e8       	ldi	r20, 0x84	; 132
     efc:	6f ea       	ldi	r22, 0xAF	; 175
     efe:	71 e0       	ldi	r23, 0x01	; 1
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	35 d1       	rcall	.+618    	; 0x116e <u16toa_align_right>
		printLedBuffer(0,str);
     f04:	6f ea       	ldi	r22, 0xAF	; 175
     f06:	71 e0       	ldi	r23, 0x01	; 1
     f08:	02 c0       	rjmp	.+4      	; 0xf0e <mf_setTempDo+0x5e>
	}		
	else
	{
		printLedBuffer(0," UNREG");
     f0a:	69 ea       	ldi	r22, 0xA9	; 169
     f0c:	70 e0       	ldi	r23, 0x00	; 0
     f0e:	80 e0       	ldi	r24, 0x00	; 0
     f10:	b2 dd       	rcall	.-1180   	; 0xa76 <printLedBuffer>
	}
	
	if (userTimer.FA_GE)
     f12:	80 91 f1 00 	lds	r24, 0x00F1
     f16:	84 ff       	sbrs	r24, 4
     f18:	02 c0       	rjmp	.+4      	; 0xf1e <mf_setTempDo+0x6e>
		setExtraLeds(LED_TEMP);
     f1a:	80 e8       	ldi	r24, 0x80	; 128
     f1c:	d4 cd       	rjmp	.-1112   	; 0xac6 <setExtraLeds>
	else
		clearExtraLeds(LED_TEMP);
     f1e:	80 e8       	ldi	r24, 0x80	; 128
     f20:	d8 cd       	rjmp	.-1104   	; 0xad2 <clearExtraLeds>

00000f22 <mf_realTempSelect>:
// Menu item "Real temperature indication"
// TOP level
//------------------------------------------------//
void mf_realTempSelect(void)
{
	setExtraLeds(LED_TEMP);
     f22:	80 e8       	ldi	r24, 0x80	; 128
     f24:	d0 cd       	rjmp	.-1120   	; 0xac6 <setExtraLeds>

00000f26 <mf_realTempDo>:
}

void mf_realTempDo(void)
{
	char *str = (char *)&temp_str;
	memcpy_P(str,&ms_realTempDo,7);
     f26:	47 e0       	ldi	r20, 0x07	; 7
     f28:	50 e0       	ldi	r21, 0x00	; 0
     f2a:	61 e8       	ldi	r22, 0x81	; 129
     f2c:	70 e0       	ldi	r23, 0x00	; 0
     f2e:	8f ea       	ldi	r24, 0xAF	; 175
     f30:	91 e0       	ldi	r25, 0x01	; 1
     f32:	88 d6       	rcall	.+3344   	; 0x1c44 <memcpy_P>
	
	if (adc_status & (SENSOR_ERROR_NO_PRESENT))
     f34:	80 91 61 01 	lds	r24, 0x0161
     f38:	80 ff       	sbrs	r24, 0
     f3a:	03 c0       	rjmp	.+6      	; 0xf42 <mf_realTempDo+0x1c>
	{
		printLedBuffer(0,"ERR 01");
     f3c:	60 eb       	ldi	r22, 0xB0	; 176
     f3e:	70 e0       	ldi	r23, 0x00	; 0
     f40:	13 c0       	rjmp	.+38     	; 0xf68 <mf_realTempDo+0x42>
	}
	else if (adc_status & (SENSOR_ERROR_SHORTED))
     f42:	81 ff       	sbrs	r24, 1
     f44:	03 c0       	rjmp	.+6      	; 0xf4c <mf_realTempDo+0x26>
	{
		printLedBuffer(0,"ERR 02");
     f46:	67 eb       	ldi	r22, 0xB7	; 183
     f48:	70 e0       	ldi	r23, 0x00	; 0
     f4a:	0e c0       	rjmp	.+28     	; 0xf68 <mf_realTempDo+0x42>
	}
	else
	{
		// Output ADC result to LED
		i32toa_align_right((int32_t)adc_celsius,str,NO_TERMINATING_ZERO | 4);
     f4c:	60 91 62 01 	lds	r22, 0x0162
     f50:	70 91 63 01 	lds	r23, 0x0163
     f54:	88 27       	eor	r24, r24
     f56:	77 fd       	sbrc	r23, 7
     f58:	80 95       	com	r24
     f5a:	98 2f       	mov	r25, r24
     f5c:	24 e8       	ldi	r18, 0x84	; 132
     f5e:	4f ea       	ldi	r20, 0xAF	; 175
     f60:	51 e0       	ldi	r21, 0x01	; 1
     f62:	b8 d0       	rcall	.+368    	; 0x10d4 <i32toa_align_right>
		printLedBuffer(0,str);
     f64:	6f ea       	ldi	r22, 0xAF	; 175
     f66:	71 e0       	ldi	r23, 0x01	; 1
     f68:	80 e0       	ldi	r24, 0x00	; 0
     f6a:	85 cd       	rjmp	.-1270   	; 0xa76 <printLedBuffer>

00000f6c <getMenuFunctionRecord.constprop.1>:
//	Arguments:
//		menuItemID - ID of an item
//		menuRecord - pointer to function structure to fill
//	Output:
//-----------------------------------------------------------------//
static void getMenuFunctionRecord(uint8_t menuItemID, MenuFunctionRecord* menuRecord )
     f6c:	0f 93       	push	r16
     f6e:	1f 93       	push	r17
     f70:	cf 93       	push	r28
     f72:	df 93       	push	r29
     f74:	18 2f       	mov	r17, r24
     f76:	c0 e0       	ldi	r28, 0x00	; 0
     f78:	d0 e0       	ldi	r29, 0x00	; 0
{
	uint8_t i;
	for (i = 0; i < sizeof(menuFunctionSet)/sizeof(MenuFunctionRecord); i++  )
	{
		memcpy_P(menuRecord,&menuFunctionSet[i],sizeof(MenuFunctionRecord));
     f7a:	07 e0       	ldi	r16, 0x07	; 7
     f7c:	0c 9f       	mul	r16, r28
     f7e:	b0 01       	movw	r22, r0
     f80:	0d 9f       	mul	r16, r29
     f82:	70 0d       	add	r23, r0
     f84:	11 24       	eor	r1, r1
     f86:	68 57       	subi	r22, 0x78	; 120
     f88:	7f 4f       	sbci	r23, 0xFF	; 255
     f8a:	47 e0       	ldi	r20, 0x07	; 7
     f8c:	50 e0       	ldi	r21, 0x00	; 0
     f8e:	88 ee       	ldi	r24, 0xE8	; 232
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	58 d6       	rcall	.+3248   	; 0x1c44 <memcpy_P>
		if (menuRecord->Item == menuItemID)
     f94:	80 91 e8 00 	lds	r24, 0x00E8
     f98:	81 17       	cp	r24, r17
     f9a:	21 f0       	breq	.+8      	; 0xfa4 <getMenuFunctionRecord.constprop.1+0x38>
     f9c:	21 96       	adiw	r28, 0x01	; 1
//	Output:
//-----------------------------------------------------------------//
static void getMenuFunctionRecord(uint8_t menuItemID, MenuFunctionRecord* menuRecord )
{
	uint8_t i;
	for (i = 0; i < sizeof(menuFunctionSet)/sizeof(MenuFunctionRecord); i++  )
     f9e:	ce 30       	cpi	r28, 0x0E	; 14
     fa0:	d1 05       	cpc	r29, r1
     fa2:	61 f7       	brne	.-40     	; 0xf7c <getMenuFunctionRecord.constprop.1+0x10>
	{
		memcpy_P(menuRecord,&menuFunctionSet[i],sizeof(MenuFunctionRecord));
		if (menuRecord->Item == menuItemID)
			break;
	}
}
     fa4:	df 91       	pop	r29
     fa6:	cf 91       	pop	r28
     fa8:	1f 91       	pop	r17
     faa:	0f 91       	pop	r16
     fac:	08 95       	ret

00000fae <InitMenu>:
//	Menu initialization
//	Call this function at start of your program before processMenu()
//-----------------------------------------------------------------//
void InitMenu(void)
{
	selectedMenuItemID = mi_REALTEMP;
     fae:	81 e0       	ldi	r24, 0x01	; 1
     fb0:	80 93 e7 00 	sts	0x00E7, r24
	getMenuFunctionRecord(selectedMenuItemID, &selectedMenuFunctionRecord);
     fb4:	db df       	rcall	.-74     	; 0xf6c <getMenuFunctionRecord.constprop.1>
	processItemFunction(selectedMenuFunctionRecord.SelectFunction);
     fb6:	80 91 e9 00 	lds	r24, 0x00E9
     fba:	90 91 ea 00 	lds	r25, 0x00EA
     fbe:	ce cd       	rjmp	.-1124   	; 0xb5c <processItemFunction>

00000fc0 <processMenu>:
//	Main menu control, -  state function calls, jumps 
//	between menu states and indication
//	Call this function from main() with a fixed time interval.
//-----------------------------------------------------------------//
void processMenu(void)
{
     fc0:	af 92       	push	r10
     fc2:	bf 92       	push	r11
     fc4:	cf 92       	push	r12
     fc6:	df 92       	push	r13
     fc8:	ef 92       	push	r14
     fca:	ff 92       	push	r15
     fcc:	0f 93       	push	r16
     fce:	1f 93       	push	r17
     fd0:	cf 93       	push	r28
     fd2:	df 93       	push	r29
     fd4:	00 d0       	rcall	.+0      	; 0xfd6 <processMenu+0x16>
     fd6:	00 d0       	rcall	.+0      	; 0xfd8 <processMenu+0x18>
     fd8:	1f 92       	push	r1
     fda:	cd b7       	in	r28, 0x3d	; 61
     fdc:	de b7       	in	r29, 0x3e	; 62
	NextItem_t nextItem;
	uint16_t jumpCondition;
	
	processSoftTimer8b(&menuTimer);	
     fde:	8c e7       	ldi	r24, 0x7C	; 124
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	53 d4       	rcall	.+2214   	; 0x188a <processSoftTimer8b>
	
	// Compose jump condition
	jumpCondition = button_state;		
     fe4:	00 91 da 00 	lds	r16, 0x00DA
     fe8:	10 91 db 00 	lds	r17, 0x00DB
	if (menuTimer.FTop)
     fec:	80 91 7c 00 	lds	r24, 0x007C
     ff0:	85 fd       	sbrc	r24, 5
		jumpCondition |= TMR_EXP;
     ff2:	10 68       	ori	r17, 0x80	; 128
	if (sys_timers.flags & AUTOPOFF_EXPIRED)
     ff4:	80 91 88 00 	lds	r24, 0x0088
     ff8:	84 fd       	sbrc	r24, 4
		jumpCondition |= GOTO_POFF;
     ffa:	10 64       	ori	r17, 0x40	; 64
	
	// Get next menu item according to current state and jump conditions
	nextItem = getNextMenuItem(selectedMenuItemID, jumpCondition);
     ffc:	d0 90 e7 00 	lds	r13, 0x00E7
    1000:	e1 2c       	mov	r14, r1
    1002:	f1 2c       	mov	r15, r1
	MenuJumpRecord	jRecord;
	uint8_t i;
	
	for (i = 0; i < sizeof(menuJumpSet)/sizeof(MenuJumpRecord); i++  )
	{
		memcpy_P(&jRecord,&menuJumpSet[i],sizeof(MenuJumpRecord));
    1004:	35 e0       	ldi	r19, 0x05	; 5
    1006:	a3 2e       	mov	r10, r19
    1008:	ae 9c       	mul	r10, r14
    100a:	b0 01       	movw	r22, r0
    100c:	af 9c       	mul	r10, r15
    100e:	70 0d       	add	r23, r0
    1010:	11 24       	eor	r1, r1
    1012:	66 51       	subi	r22, 0x16	; 22
    1014:	7f 4f       	sbci	r23, 0xFF	; 255
    1016:	45 e0       	ldi	r20, 0x05	; 5
    1018:	50 e0       	ldi	r21, 0x00	; 0
    101a:	ce 01       	movw	r24, r28
    101c:	01 96       	adiw	r24, 0x01	; 1
    101e:	12 d6       	rcall	.+3108   	; 0x1c44 <memcpy_P>
		if (jRecord.Item == selectedItemId)				// If ID match,
    1020:	89 81       	ldd	r24, Y+1	; 0x01
    1022:	8d 11       	cpse	r24, r13
    1024:	0f c0       	rjmp	.+30     	; 0x1044 <processMenu+0x84>
		{
			if ((jRecord.JumpCondition & jmpCond) != 0)		// if any of jump conditions match too,
    1026:	2a 81       	ldd	r18, Y+2	; 0x02
    1028:	3b 81       	ldd	r19, Y+3	; 0x03
    102a:	20 23       	and	r18, r16
    102c:	31 23       	and	r19, r17
    102e:	23 2b       	or	r18, r19
    1030:	49 f0       	breq	.+18     	; 0x1044 <processMenu+0x84>
			{
				nextItem.ItemID = jRecord.NextItem;			// switch to next menu item
    1032:	dc 80       	ldd	r13, Y+4	; 0x04
				nextItem.ItemTimeout = jRecord.Flags & TIMEOUT_MASK;
    1034:	8d 81       	ldd	r24, Y+5	; 0x05
    1036:	9f e0       	ldi	r25, 0x0F	; 15
    1038:	b9 2e       	mov	r11, r25
    103a:	b8 22       	and	r11, r24
				nextItem.Flags = jRecord.Flags & ~TIMEOUT_MASK;
    103c:	20 ef       	ldi	r18, 0xF0	; 240
    103e:	c2 2e       	mov	r12, r18
    1040:	c8 22       	and	r12, r24
    1042:	07 c0       	rjmp	.+14     	; 0x1052 <processMenu+0x92>
    1044:	8f ef       	ldi	r24, 0xFF	; 255
    1046:	e8 1a       	sub	r14, r24
    1048:	f8 0a       	sbc	r15, r24
	NextItem_t nextItem;
	nextItem.ItemID = selectedItemId;
	MenuJumpRecord	jRecord;
	uint8_t i;
	
	for (i = 0; i < sizeof(menuJumpSet)/sizeof(MenuJumpRecord); i++  )
    104a:	84 e2       	ldi	r24, 0x24	; 36
    104c:	e8 16       	cp	r14, r24
    104e:	f1 04       	cpc	r15, r1
    1050:	d9 f6       	brne	.-74     	; 0x1008 <processMenu+0x48>
	
	// Get next menu item according to current state and jump conditions
	nextItem = getNextMenuItem(selectedMenuItemID, jumpCondition);
	
	// If next item differs from current
	if (nextItem.ItemID != selectedMenuItemID)
    1052:	80 91 e7 00 	lds	r24, 0x00E7
    1056:	d8 16       	cp	r13, r24
    1058:	29 f1       	breq	.+74     	; 0x10a4 <processMenu+0xe4>
	{		
		jumpFlags = nextItem.Flags;
    105a:	c0 92 f5 00 	sts	0x00F5, r12
		// Call exit function for current item
		processItemFunction(selectedMenuFunctionRecord.LeaveFunction);
    105e:	80 91 ed 00 	lds	r24, 0x00ED
    1062:	90 91 ee 00 	lds	r25, 0x00EE
    1066:	7a dd       	rcall	.-1292   	; 0xb5c <processItemFunction>
		
		// If shifting is specified, start it before calling any 
		//	new menu item functions 
		if (nextItem.Flags & SHIFT_RIGHT)
    1068:	c6 fe       	sbrs	r12, 6
    106a:	02 c0       	rjmp	.+4      	; 0x1070 <processMenu+0xb0>
			startShiftingWindowRight();
    106c:	d3 dc       	rcall	.-1626   	; 0xa14 <startShiftingWindowRight>
    106e:	02 c0       	rjmp	.+4      	; 0x1074 <processMenu+0xb4>
		else if (nextItem.Flags & SHIFT_LEFT)
    1070:	c7 fc       	sbrc	r12, 7
			startShiftingWindowLeft();
    1072:	c2 dc       	rcall	.-1660   	; 0x9f8 <startShiftingWindowLeft>
		
		// Select new item
		selectedMenuItemID = nextItem.ItemID;
    1074:	d0 92 e7 00 	sts	0x00E7, r13
		
		// Load from FLASH and save function pointers
		getMenuFunctionRecord(selectedMenuItemID, &selectedMenuFunctionRecord);
    1078:	8d 2d       	mov	r24, r13
    107a:	78 df       	rcall	.-272    	; 0xf6c <getMenuFunctionRecord.constprop.1>
		// Call select function for next item
		processItemFunction(selectedMenuFunctionRecord.SelectFunction);
    107c:	80 91 e9 00 	lds	r24, 0x00E9
    1080:	90 91 ea 00 	lds	r25, 0x00EA
    1084:	6b dd       	rcall	.-1322   	; 0xb5c <processItemFunction>
		// Start timer if timeout is enabled
		if (nextItem.ItemTimeout != 0)
    1086:	bb 20       	and	r11, r11
    1088:	a9 f0       	breq	.+42     	; 0x10b4 <processMenu+0xf4>
		{
			menuTimer.Top = nextItem.ItemTimeout * MENU_TIMEOUT_MULT;
    108a:	bb 0c       	add	r11, r11
    108c:	bb 0c       	add	r11, r11
    108e:	bb 0c       	add	r11, r11
    1090:	b0 92 7e 00 	sts	0x007E, r11
			menuTimer.Timer = 0;
    1094:	10 92 7d 00 	sts	0x007D, r1
			menuTimer.Enabled = 1;	
    1098:	80 91 7c 00 	lds	r24, 0x007C
    109c:	81 60       	ori	r24, 0x01	; 1
    109e:	80 93 7c 00 	sts	0x007C, r24
    10a2:	08 c0       	rjmp	.+16     	; 0x10b4 <processMenu+0xf4>
		}	
	}
	else
	{
		processSoftTimer8b(&userTimer);
    10a4:	81 ef       	ldi	r24, 0xF1	; 241
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	f0 d3       	rcall	.+2016   	; 0x188a <processSoftTimer8b>
		// Stay at previous item
		processItemFunction(selectedMenuFunctionRecord.RunFunction);
    10aa:	80 91 eb 00 	lds	r24, 0x00EB
    10ae:	90 91 ec 00 	lds	r25, 0x00EC
    10b2:	54 dd       	rcall	.-1368   	; 0xb5c <processItemFunction>
	}	
}
    10b4:	0f 90       	pop	r0
    10b6:	0f 90       	pop	r0
    10b8:	0f 90       	pop	r0
    10ba:	0f 90       	pop	r0
    10bc:	0f 90       	pop	r0
    10be:	df 91       	pop	r29
    10c0:	cf 91       	pop	r28
    10c2:	1f 91       	pop	r17
    10c4:	0f 91       	pop	r16
    10c6:	ff 90       	pop	r15
    10c8:	ef 90       	pop	r14
    10ca:	df 90       	pop	r13
    10cc:	cf 90       	pop	r12
    10ce:	bf 90       	pop	r11
    10d0:	af 90       	pop	r10
    10d2:	08 95       	ret

000010d4 <i32toa_align_right>:
}



void i32toa_align_right(int32_t val, char *buffer, uint8_t len)
{
    10d4:	cf 92       	push	r12
    10d6:	df 92       	push	r13
    10d8:	ef 92       	push	r14
    10da:	ff 92       	push	r15
    10dc:	0f 93       	push	r16
    10de:	1f 93       	push	r17
    10e0:	cf 93       	push	r28
    10e2:	df 93       	push	r29
    10e4:	12 2f       	mov	r17, r18
	uint8_t is_negative = 0;
	if (!len)	return;
    10e6:	22 23       	and	r18, r18
    10e8:	c9 f1       	breq	.+114    	; 0x115c <i32toa_align_right+0x88>
	
	if (val < 0)
    10ea:	97 ff       	sbrs	r25, 7
    10ec:	09 c0       	rjmp	.+18     	; 0x1100 <i32toa_align_right+0x2c>
	{
		val = -val;
    10ee:	90 95       	com	r25
    10f0:	80 95       	com	r24
    10f2:	70 95       	com	r23
    10f4:	61 95       	neg	r22
    10f6:	7f 4f       	sbci	r23, 0xFF	; 255
    10f8:	8f 4f       	sbci	r24, 0xFF	; 255
    10fa:	9f 4f       	sbci	r25, 0xFF	; 255
		is_negative = 1;
    10fc:	01 e0       	ldi	r16, 0x01	; 1
    10fe:	01 c0       	rjmp	.+2      	; 0x1102 <i32toa_align_right+0x2e>



void i32toa_align_right(int32_t val, char *buffer, uint8_t len)
{
	uint8_t is_negative = 0;
    1100:	00 e0       	ldi	r16, 0x00	; 0
	{
		val = -val;
		is_negative = 1;
	}
	
	if (len & NO_TERMINATING_ZERO)
    1102:	17 ff       	sbrs	r17, 7
    1104:	05 c0       	rjmp	.+10     	; 0x1110 <i32toa_align_right+0x3c>
	{
		len = len & ~NO_TERMINATING_ZERO;
    1106:	1f 77       	andi	r17, 0x7F	; 127
		buffer += len;	
    1108:	ea 01       	movw	r28, r20
    110a:	c1 0f       	add	r28, r17
    110c:	d1 1d       	adc	r29, r1
    110e:	04 c0       	rjmp	.+8      	; 0x1118 <i32toa_align_right+0x44>
	}
	else
	{
		buffer += len;	
    1110:	ea 01       	movw	r28, r20
    1112:	c1 0f       	add	r28, r17
    1114:	d1 1d       	adc	r29, r1
		*buffer = 0;
    1116:	18 82       	st	Y, r1
	}
	
	do
	{
		*--buffer = val % 10 + '0';
    1118:	2a e0       	ldi	r18, 0x0A	; 10
    111a:	c2 2e       	mov	r12, r18
    111c:	d1 2c       	mov	r13, r1
    111e:	e1 2c       	mov	r14, r1
    1120:	f1 2c       	mov	r15, r1
    1122:	a7 01       	movw	r20, r14
    1124:	96 01       	movw	r18, r12
    1126:	1b d5       	rcall	.+2614   	; 0x1b5e <__divmodsi4>
    1128:	60 5d       	subi	r22, 0xD0	; 208
    112a:	6a 93       	st	-Y, r22
		val /= 10;
    112c:	b9 01       	movw	r22, r18
    112e:	ca 01       	movw	r24, r20
		len--;
    1130:	11 50       	subi	r17, 0x01	; 1
	}
	while ((val != 0) && len);
    1132:	61 15       	cp	r22, r1
    1134:	71 05       	cpc	r23, r1
    1136:	81 05       	cpc	r24, r1
    1138:	91 05       	cpc	r25, r1
    113a:	19 f0       	breq	.+6      	; 0x1142 <i32toa_align_right+0x6e>
    113c:	11 11       	cpse	r17, r1
    113e:	f1 cf       	rjmp	.-30     	; 0x1122 <i32toa_align_right+0x4e>
    1140:	08 c0       	rjmp	.+16     	; 0x1152 <i32toa_align_right+0x7e>
	
	if ( (len) && (is_negative) )
    1142:	11 23       	and	r17, r17
    1144:	31 f0       	breq	.+12     	; 0x1152 <i32toa_align_right+0x7e>
    1146:	00 23       	and	r16, r16
    1148:	21 f0       	breq	.+8      	; 0x1152 <i32toa_align_right+0x7e>
	{
		*--buffer = '-';
    114a:	21 97       	sbiw	r28, 0x01	; 1
    114c:	8d e2       	ldi	r24, 0x2D	; 45
    114e:	88 83       	st	Y, r24
		len--;	
    1150:	11 50       	subi	r17, 0x01	; 1
	}	
	
	// Padding
	while(len--)
		*--buffer = ' ';
    1152:	80 e2       	ldi	r24, 0x20	; 32
    1154:	01 c0       	rjmp	.+2      	; 0x1158 <i32toa_align_right+0x84>
    1156:	8a 93       	st	-Y, r24
		*--buffer = '-';
		len--;	
	}	
	
	// Padding
	while(len--)
    1158:	11 50       	subi	r17, 0x01	; 1
    115a:	e8 f7       	brcc	.-6      	; 0x1156 <i32toa_align_right+0x82>
		*--buffer = ' ';
}
    115c:	df 91       	pop	r29
    115e:	cf 91       	pop	r28
    1160:	1f 91       	pop	r17
    1162:	0f 91       	pop	r16
    1164:	ff 90       	pop	r15
    1166:	ef 90       	pop	r14
    1168:	df 90       	pop	r13
    116a:	cf 90       	pop	r12
    116c:	08 95       	ret

0000116e <u16toa_align_right>:




void u16toa_align_right(uint16_t val, char *buffer, uint8_t len)
{
    116e:	fb 01       	movw	r30, r22
    1170:	24 2f       	mov	r18, r20
	i32toa_align_right((int32_t)val, buffer, len);
    1172:	bc 01       	movw	r22, r24
    1174:	80 e0       	ldi	r24, 0x00	; 0
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	af 01       	movw	r20, r30
    117a:	ac cf       	rjmp	.-168    	; 0x10d4 <i32toa_align_right>

0000117c <logI32p>:
	USART_sendstr(str);
}

static void logI32p(int32_t val)
{
	i32toa_align_right(val,str,12);
    117c:	2c e0       	ldi	r18, 0x0C	; 12
    117e:	49 eb       	ldi	r20, 0xB9	; 185
    1180:	51 e0       	ldi	r21, 0x01	; 1
    1182:	a8 df       	rcall	.-176    	; 0x10d4 <i32toa_align_right>
	USART_sendstr(str);
    1184:	89 eb       	ldi	r24, 0xB9	; 185
    1186:	91 e0       	ldi	r25, 0x01	; 1
    1188:	b9 c4       	rjmp	.+2418   	; 0x1afc <USART_sendstr>

0000118a <logU16p>:
}


static void logU16p(uint16_t val)
{
	u16toa_align_right(val,str,6);
    118a:	46 e0       	ldi	r20, 0x06	; 6
    118c:	69 eb       	ldi	r22, 0xB9	; 185
    118e:	71 e0       	ldi	r23, 0x01	; 1
    1190:	ee df       	rcall	.-36     	; 0x116e <u16toa_align_right>
	USART_sendstr(str);
    1192:	89 eb       	ldi	r24, 0xB9	; 185
    1194:	91 e0       	ldi	r25, 0x01	; 1
    1196:	b2 c4       	rjmp	.+2404   	; 0x1afc <USART_sendstr>

00001198 <main>:


char str[20];

int main(void)
{
    1198:	cf 93       	push	r28
    119a:	df 93       	push	r29
    119c:	1f 92       	push	r1
    119e:	cd b7       	in	r28, 0x3d	; 61
    11a0:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t temp8u = 0x00;
    11a2:	19 82       	std	Y+1, r1	; 0x01


static void init_system_io()
{
	// Setup Port D
	PORTD = 0;//(1<<PD_SYNCA | 1<<PD_SYNCB);
    11a4:	12 ba       	out	0x12, r1	; 18
	DDRD = (1<<PD_TXD | 1<<PD_M1 | 1<<PD_M2 | 1<<PD_HEATER | 1<<PD_HEAT_INDIC );
    11a6:	8e e3       	ldi	r24, 0x3E	; 62
    11a8:	81 bb       	out	0x11, r24	; 17
	
	// Setup Port B
	PORTB = 0;
    11aa:	18 ba       	out	0x18, r1	; 24
	DDRB = (1<<PB_BEEPER | 1<<PB_LED_DOUT | 1<<PB_LED_CLK | 1<<PB_SEGF | 1<<PB_SEGG | 1<<PB_SEGH);
    11ac:	8f e3       	ldi	r24, 0x3F	; 63
    11ae:	87 bb       	out	0x17, r24	; 23
	
	PORTC = 0;
    11b0:	15 ba       	out	0x15, r1	; 21
	DDRC = (1<<PC_SEGA | 1<<PC_SEGB | 1<<PC_SEGC | 1<<PC_SEGD | 1<<PC_SEGE);	
    11b2:	8f e1       	ldi	r24, 0x1F	; 31
    11b4:	84 bb       	out	0x14, r24	; 20

	// Setup timer0
	// 1/1024 prescaler, T=64us @16MHz
	TCCR0 = (1<<CS02 | 0<<CS01 | 1<<CS00);
    11b6:	85 e0       	ldi	r24, 0x05	; 5
    11b8:	83 bf       	out	0x33, r24	; 51
	TCNT0 = 0;
    11ba:	12 be       	out	0x32, r1	; 50
	// Clear interrupt flag
	TIFR |= (1<<TOV0);
    11bc:	88 b7       	in	r24, 0x38	; 56
    11be:	81 60       	ori	r24, 0x01	; 1
    11c0:	88 bf       	out	0x38, r24	; 56
	// Enable interrupts from timer 0
	TIMSK |= (1<<TOIE0);
    11c2:	89 b7       	in	r24, 0x39	; 57
    11c4:	81 60       	ori	r24, 0x01	; 1
    11c6:	89 bf       	out	0x39, r24	; 57
	
	// Setup timer2 as 1ms system frequency generator
	// 1/64 prescaler, CTC mode, OC2 disconnected
	TCCR2 = (1<<CS22 | 1<<WGM21);
    11c8:	8c e0       	ldi	r24, 0x0C	; 12
    11ca:	85 bd       	out	0x25, r24	; 37
	OCR2 = 249;						// 1ms @ 16MHz
    11cc:	89 ef       	ldi	r24, 0xF9	; 249
    11ce:	83 bd       	out	0x23, r24	; 35
	TIMSK |= (1<<OCIE2);
    11d0:	89 b7       	in	r24, 0x39	; 57
    11d2:	80 68       	ori	r24, 0x80	; 128
    11d4:	89 bf       	out	0x39, r24	; 57
	
	// Setup timer1 as beeper frequency generator
	// CTC mode, 1/64 prescaler
	TCCR1A = 0;
    11d6:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = (1<<WGM12 | 1<<CS11 | 1<<CS10);
    11d8:	8b e0       	ldi	r24, 0x0B	; 11
    11da:	8e bd       	out	0x2e, r24	; 46
	// 1kHz beeper frequency default
	OCR1A = 127;
    11dc:	8f e7       	ldi	r24, 0x7F	; 127
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	9b bd       	out	0x2b, r25	; 43
    11e2:	8a bd       	out	0x2a, r24	; 42

	// Setup AC sync comparator
	// Interrupt on output toggle
	ACSR = (1<<ACIE | 0<<ACIS1 | 0<<ACIS0);
    11e4:	88 e0       	ldi	r24, 0x08	; 8
    11e6:	88 b9       	out	0x08, r24	; 8
	
	// Setup ADC
	// Internal Vref + cap, input ADC5, 
	ADMUX = (1<<REFS1 | 1<<REFS0 | 0<<MUX3 | 1<<MUX2 | 0<<MUX1 | 1<<MUX0 );
    11e8:	85 ec       	ldi	r24, 0xC5	; 197
    11ea:	87 b9       	out	0x07, r24	; 7
	// Prescaler = 128
	ADCSRA = (1<<ADEN |/* 1<<ADFR |*/  1<<ADIE | 1<<ADPS2 | 1<<ADPS1 | 1<<ADPS0);
    11ec:	8f e8       	ldi	r24, 0x8F	; 143
    11ee:	86 b9       	out	0x06, r24	; 6
	
	// Setup USART
	// Double speed
	UCSRA = (1<<U2X);
    11f0:	82 e0       	ldi	r24, 0x02	; 2
    11f2:	8b b9       	out	0x0b, r24	; 11
	UCSRB = (1<<RXEN | 1<<TXEN | 0<<UCSZ2);
    11f4:	88 e1       	ldi	r24, 0x18	; 24
    11f6:	8a b9       	out	0x0a, r24	; 10
	// No parity, 1 stop bit, 8 bit
	UCSRC = (1<<URSEL | 0<<UPM1 | 0<<UPM0 | 0<<USBS | 1<<UCSZ1 | 1<<UCSZ0);
    11f8:	86 e8       	ldi	r24, 0x86	; 134
    11fa:	80 bd       	out	0x20, r24	; 32
	// 57600 @16MHz, 2x
	UBRRH=0x00;
    11fc:	10 bc       	out	0x20, r1	; 32
	UBRRL=0x22;
    11fe:	82 e2       	ldi	r24, 0x22	; 34
    1200:	89 b9       	out	0x09, r24	; 9
	volatile uint16_t temp16u;
	// Initialize MCU IO
	init_system_io();
	// Restore params from EEPROM
	// If some values are corrupted, settings or/and calibration are loaded with default configuration.
	temp8u = restoreGlobalParams();
    1202:	c2 da       	rcall	.-2684   	; 0x788 <restoreGlobalParams>
    1204:	89 83       	std	Y+1, r24	; 0x01
	// Calibrate ADC coefficients using restored params
	calculateCoeffs();
    1206:	28 d8       	rcall	.-4016   	; 0x258 <calculateCoeffs>
	// Initialize LED indicator
	initLedIndicator();
    1208:	13 dc       	rcall	.-2010   	; 0xa30 <initLedIndicator>
	// Clear comparator interrupt flag to prevent false triggering
	ACSR |= (1<<ACI);
    120a:	44 9a       	sbi	0x08, 4	; 8
	sei();
    120c:	78 94       	sei
	// If default values were loaded from EEPROM, inform user
	#ifdef USE_EEPROM_CRC
	if (temp8u)
    120e:	89 81       	ldd	r24, Y+1	; 0x01
    1210:	88 23       	and	r24, r24
    1212:	a9 f0       	breq	.+42     	; 0x123e <main+0xa6>
	{
		printLedBuffer(0,"ERR E");
    1214:	6e eb       	ldi	r22, 0xBE	; 190
    1216:	70 e0       	ldi	r23, 0x00	; 0
    1218:	80 e0       	ldi	r24, 0x00	; 0
    121a:	2d dc       	rcall	.-1958   	; 0xa76 <printLedBuffer>
		fillLedBuffer(5,1,temp8u + 0x30);	// error code: E1 - CRC error in global params, E2 - CRC error in calibration, E3 - both
    121c:	49 81       	ldd	r20, Y+1	; 0x01
    121e:	40 5d       	subi	r20, 0xD0	; 208
    1220:	61 e0       	ldi	r22, 0x01	; 1
    1222:	85 e0       	ldi	r24, 0x05	; 5
    1224:	c5 db       	rcall	.-2166   	; 0x9b0 <fillLedBuffer>
		Sound_Play(m_beep_err1);
    1226:	8c e4       	ldi	r24, 0x4C	; 76
    1228:	90 e0       	ldi	r25, 0x00	; 0
    122a:	4d d4       	rcall	.+2202   	; 0x1ac6 <Sound_Play>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    122c:	2f ef       	ldi	r18, 0xFF	; 255
    122e:	83 ed       	ldi	r24, 0xD3	; 211
    1230:	90 e3       	ldi	r25, 0x30	; 48
    1232:	21 50       	subi	r18, 0x01	; 1
    1234:	80 40       	sbci	r24, 0x00	; 0
    1236:	90 40       	sbci	r25, 0x00	; 0
    1238:	e1 f7       	brne	.-8      	; 0x1232 <main+0x9a>
    123a:	00 c0       	rjmp	.+0      	; 0x123c <main+0xa4>
    123c:	00 00       	nop
		_delay_ms(1000);
	} 
	#endif
	// Dump calibration data over UART - might be useful for debug
	logU16p(cp.cpoint1);
    123e:	80 91 8d 01 	lds	r24, 0x018D
    1242:	90 e0       	ldi	r25, 0x00	; 0
    1244:	a2 df       	rcall	.-188    	; 0x118a <logU16p>
	logU16p(cp.cpoint1_adc);
    1246:	80 91 8f 01 	lds	r24, 0x018F
    124a:	90 91 90 01 	lds	r25, 0x0190
    124e:	9d df       	rcall	.-198    	; 0x118a <logU16p>
	logU16p(cp.cpoint2);
    1250:	80 91 8e 01 	lds	r24, 0x018E
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	99 df       	rcall	.-206    	; 0x118a <logU16p>
	logU16p(cp.cpoint2_adc);
    1258:	80 91 91 01 	lds	r24, 0x0191
    125c:	90 91 92 01 	lds	r25, 0x0192
    1260:	94 df       	rcall	.-216    	; 0x118a <logU16p>
	USART_sendstr("\n\r");
    1262:	84 ec       	ldi	r24, 0xC4	; 196
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	4a d4       	rcall	.+2196   	; 0x1afc <USART_sendstr>
    1268:	2f ef       	ldi	r18, 0xFF	; 255
    126a:	81 ee       	ldi	r24, 0xE1	; 225
    126c:	94 e0       	ldi	r25, 0x04	; 4
    126e:	21 50       	subi	r18, 0x01	; 1
    1270:	80 40       	sbci	r24, 0x00	; 0
    1272:	90 40       	sbci	r25, 0x00	; 0
    1274:	e1 f7       	brne	.-8      	; 0x126e <main+0xd6>
    1276:	00 c0       	rjmp	.+0      	; 0x1278 <main+0xe0>
    1278:	00 00       	nop
	// Safety delay for power part and ADC buffer
	_delay_ms(100);
	// Check AC line
	if(p_state == 0x0F) 	
    127a:	80 91 80 00 	lds	r24, 0x0080
    127e:	8f 30       	cpi	r24, 0x0F	; 15
    1280:	69 f4       	brne	.+26     	; 0x129c <main+0x104>
	{
		// Power control state machine has not changed - sync has not been detected
		printLedBuffer(0,"ERR AC");
    1282:	67 ec       	ldi	r22, 0xC7	; 199
    1284:	70 e0       	ldi	r23, 0x00	; 0
    1286:	80 e0       	ldi	r24, 0x00	; 0
    1288:	f6 db       	rcall	.-2068   	; 0xa76 <printLedBuffer>
    128a:	2f ef       	ldi	r18, 0xFF	; 255
    128c:	83 ed       	ldi	r24, 0xD3	; 211
    128e:	90 e3       	ldi	r25, 0x30	; 48
    1290:	21 50       	subi	r18, 0x01	; 1
    1292:	80 40       	sbci	r24, 0x00	; 0
    1294:	90 40       	sbci	r25, 0x00	; 0
    1296:	e1 f7       	brne	.-8      	; 0x1290 <main+0xf8>
    1298:	00 c0       	rjmp	.+0      	; 0x129a <main+0x102>
    129a:	00 00       	nop
		_delay_ms(1000);
	}
	// Initialize menu
	InitMenu();
    129c:	88 de       	rcall	.-752    	; 0xfae <InitMenu>
	// Beep
	Sound_Play(m_beep_1000Hz_100ms);
    129e:	80 e6       	ldi	r24, 0x60	; 96
    12a0:	90 e0       	ldi	r25, 0x00	; 0
    12a2:	11 d4       	rcall	.+2082   	; 0x1ac6 <Sound_Play>
	// When we get here, full ADC buffer have been sampled
	// Get oversampled and filtered ADC for PID controller
	update_normalized_adc();
    12a4:	26 d8       	rcall	.-4020   	; 0x2f2 <update_normalized_adc>
	
	// Call PID controller function in order to initialize it's internal structures
	heaterInit();	// Possibly useless?
    12a6:	82 d9       	rcall	.-3324   	; 0x5ac <heaterInit>
	
	// Start rotating
	setMotorDirection(ROLL_FWD);
    12a8:	81 e0       	ldi	r24, 0x01	; 1
    12aa:	73 d1       	rcall	.+742    	; 0x1592 <setMotorDirection>
	// Clear timer
	menuUpdateTimer.FOvfl = 0;
    12ac:	80 91 89 00 	lds	r24, 0x0089
    12b0:	8f 7b       	andi	r24, 0xBF	; 191
    12b2:	80 93 89 00 	sts	0x0089, r24
	// Enable watchdog
	wdt_enable(WDTO_1S);
    12b6:	2e e0       	ldi	r18, 0x0E	; 14
    12b8:	88 e1       	ldi	r24, 0x18	; 24
    12ba:	90 e0       	ldi	r25, 0x00	; 0
    12bc:	0f b6       	in	r0, 0x3f	; 63
    12be:	f8 94       	cli
    12c0:	a8 95       	wdr
    12c2:	81 bd       	out	0x21, r24	; 33
    12c4:	0f be       	out	0x3f, r0	; 63
    12c6:	21 bd       	out	0x21, r18	; 33

    while(1)
    {
		if (menuUpdateTimer.FOvfl)
    12c8:	80 91 89 00 	lds	r24, 0x0089
    12cc:	86 ff       	sbrs	r24, 6
    12ce:	fc cf       	rjmp	.-8      	; 0x12c8 <main+0x130>
		{
			// Reset watchdog timer
			wdt_reset();
    12d0:	a8 95       	wdr
			
			//--------- BUTTONS ----------//
			
			// Get new button state
			process_buttons();
    12d2:	85 d8       	rcall	.-3830   	; 0x3de <process_buttons>
			
			// Give sound feedback
			if (button_state & BL_MENU)
    12d4:	80 91 da 00 	lds	r24, 0x00DA
    12d8:	90 91 db 00 	lds	r25, 0x00DB
    12dc:	91 ff       	sbrs	r25, 1
    12de:	03 c0       	rjmp	.+6      	; 0x12e6 <main+0x14e>
			{
				Sound_Play(m_beep_800Hz_40ms);
    12e0:	88 e5       	ldi	r24, 0x58	; 88
    12e2:	90 e0       	ldi	r25, 0x00	; 0
    12e4:	06 c0       	rjmp	.+12     	; 0x12f2 <main+0x15a>
			}
			else if (button_action_down & (BD_MENU | BD_UP | BD_DOWN | BD_HEATCTRL))
    12e6:	80 91 d9 00 	lds	r24, 0x00D9
    12ea:	81 7e       	andi	r24, 0xE1	; 225
    12ec:	19 f0       	breq	.+6      	; 0x12f4 <main+0x15c>
			{
				Sound_Play(m_beep_1000Hz_40ms);
    12ee:	8c e5       	ldi	r24, 0x5C	; 92
    12f0:	90 e0       	ldi	r25, 0x00	; 0
    12f2:	e9 d3       	rcall	.+2002   	; 0x1ac6 <Sound_Play>
			}	
			// Direction control buttons sounds get special processing at processRollControl()
			
			// If any button is pressed, restart power off interval
			if (button_action_down)
    12f4:	80 91 d9 00 	lds	r24, 0x00D9
    12f8:	81 11       	cpse	r24, r1
				resetAutoPowerOffCounter();
    12fa:	5a d3       	rcall	.+1716   	; 0x19b0 <resetAutoPowerOffCounter>
			
			//---------- TIMERS ----------//
			
			// Process timers and time counters - it is important to call
			// this function before menu and power controls processing
			processSystemTimers();
    12fc:	f2 d2       	rcall	.+1508   	; 0x18e2 <processSystemTimers>

			// Warn user about soon auto powering off
			if (sys_timers.flags & AUTOPOFF_SOON)
    12fe:	80 91 88 00 	lds	r24, 0x0088
    1302:	83 ff       	sbrs	r24, 3
    1304:	03 c0       	rjmp	.+6      	; 0x130c <main+0x174>
			{
				Sound_Play(m_beep_warn_poff);
    1306:	88 e3       	ldi	r24, 0x38	; 56
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	dd d3       	rcall	.+1978   	; 0x1ac6 <Sound_Play>
			}		
			
			//----------- ADC ------------//
			
			// Get new temperature measurement
			update_normalized_adc();			
    130c:	f2 d7       	rcall	.+4068   	; 0x22f2 <__data_load_end+0x5ba>
		
			// Update indicated Celsius degree
			if (sys_timers.flags & EXPIRED_CELSIUS)
    130e:	80 91 88 00 	lds	r24, 0x0088
    1312:	80 fd       	sbrc	r24, 0
				update_Celsius();		
    1314:	2a d8       	rcall	.-4012   	; 0x36a <update_Celsius>
			
			//----------- MENU -----------//		
				
			// Process user menu states, settings and indication
			processMenu();
    1316:	54 de       	rcall	.-856    	; 0xfc0 <processMenu>
			
			//--------- CONTROLS ---------//		
			
			// Process cyclic rolling, direction control
			processRollControl();	
    1318:	b6 d8       	rcall	.-3732   	; 0x486 <processRollControl>
			
			// Process heater regulation
			processHeaterControl();
    131a:	49 d9       	rcall	.-3438   	; 0x5ae <processHeaterControl>
		
			// Process heater events and warnings
			processHeaterAlerts();
    131c:	c3 d9       	rcall	.-3194   	; 0x6a4 <processHeaterAlerts>
			
			
			
			//------- LOG to UART --------//	
			if (sys_timers.flags & EXPIRED_LOG)
    131e:	80 91 88 00 	lds	r24, 0x0088
    1322:	85 ff       	sbrs	r24, 5
    1324:	42 c0       	rjmp	.+132    	; 0x13aa <main+0x212>
			{
				
				logU16p(adc_celsius);					// Actual temp Celsius
    1326:	80 91 62 01 	lds	r24, 0x0162
    132a:	90 91 63 01 	lds	r25, 0x0163
    132e:	2d df       	rcall	.-422    	; 0x118a <logU16p>
				logU16p(adc_oversampled);				// Actual temp (ADC), oversampled
    1330:	80 91 1d 01 	lds	r24, 0x011D
    1334:	90 91 1e 01 	lds	r25, 0x011E
    1338:	28 df       	rcall	.-432    	; 0x118a <logU16p>
				logU16p(adc_filtered);					// Actual temp (ADC), oversampled, filtered
    133a:	80 91 1b 01 	lds	r24, 0x011B
    133e:	90 91 1c 01 	lds	r25, 0x011C
    1342:	23 df       	rcall	.-442    	; 0x118a <logU16p>
				USART_sendstr("    ");
    1344:	84 ea       	ldi	r24, 0xA4	; 164
    1346:	90 e0       	ldi	r25, 0x00	; 0
    1348:	d9 d3       	rcall	.+1970   	; 0x1afc <USART_sendstr>
				
				logU16p(dbg_SetPointPID);				// Temp setting, as input to PID
    134a:	80 91 99 01 	lds	r24, 0x0199
    134e:	90 91 9a 01 	lds	r25, 0x019A
    1352:	1b df       	rcall	.-458    	; 0x118a <logU16p>
				logU16p(dbg_RealTempPID);				// Real temp, sampled for PID input
    1354:	80 91 97 01 	lds	r24, 0x0197
    1358:	90 91 98 01 	lds	r25, 0x0198
    135c:	16 df       	rcall	.-468    	; 0x118a <logU16p>
				
				logI32p(dbg_PID_p_term);				// p term
    135e:	60 91 cf 01 	lds	r22, 0x01CF
    1362:	70 91 d0 01 	lds	r23, 0x01D0
    1366:	88 27       	eor	r24, r24
    1368:	77 fd       	sbrc	r23, 7
    136a:	80 95       	com	r24
    136c:	98 2f       	mov	r25, r24
    136e:	06 df       	rcall	.-500    	; 0x117c <logI32p>
				logI32p(dbg_PID_d_term);				// d term
    1370:	60 91 d3 01 	lds	r22, 0x01D3
    1374:	70 91 d4 01 	lds	r23, 0x01D4
    1378:	88 27       	eor	r24, r24
    137a:	77 fd       	sbrc	r23, 7
    137c:	80 95       	com	r24
    137e:	98 2f       	mov	r25, r24
    1380:	fd de       	rcall	.-518    	; 0x117c <logI32p>
				logI32p(dbg_PID_i_term);				// i term
    1382:	60 91 d1 01 	lds	r22, 0x01D1
    1386:	70 91 d2 01 	lds	r23, 0x01D2
    138a:	88 27       	eor	r24, r24
    138c:	77 fd       	sbrc	r23, 7
    138e:	80 95       	com	r24
    1390:	98 2f       	mov	r25, r24
    1392:	f4 de       	rcall	.-536    	; 0x117c <logI32p>
				USART_sendstr("    ");
    1394:	84 ea       	ldi	r24, 0xA4	; 164
    1396:	90 e0       	ldi	r25, 0x00	; 0
    1398:	b1 d3       	rcall	.+1890   	; 0x1afc <USART_sendstr>
				
				logU16p(dbg_PID_output);				// PID output
    139a:	80 91 cd 01 	lds	r24, 0x01CD
    139e:	90 91 ce 01 	lds	r25, 0x01CE
    13a2:	f3 de       	rcall	.-538    	; 0x118a <logU16p>
			
				USART_sendstr("\n\r");
    13a4:	84 ec       	ldi	r24, 0xC4	; 196
    13a6:	90 e0       	ldi	r25, 0x00	; 0
    13a8:	a9 d3       	rcall	.+1874   	; 0x1afc <USART_sendstr>
				//---------------------------------//
				
			}
			
			
			menuUpdateTimer.FOvfl = 0;	
    13aa:	80 91 89 00 	lds	r24, 0x0089
    13ae:	8f 7b       	andi	r24, 0xBF	; 191
    13b0:	80 93 89 00 	sts	0x0089, r24
    13b4:	89 cf       	rjmp	.-238    	; 0x12c8 <main+0x130>

000013b6 <initPID>:
	//dterm_filter_core.n = 8;
	//dterm_filter_core.dc_gain = 512;
//	dterm_filter_core.coeffs = dterm_coeffs;
	for (i=0;i<4;i++)
	{
		pid_dterm_buffer[i] = 0;
    13b6:	10 92 f7 00 	sts	0x00F7, r1
    13ba:	10 92 f6 00 	sts	0x00F6, r1
    13be:	10 92 f9 00 	sts	0x00F9, r1
    13c2:	10 92 f8 00 	sts	0x00F8, r1
    13c6:	10 92 fb 00 	sts	0x00FB, r1
    13ca:	10 92 fa 00 	sts	0x00FA, r1
    13ce:	10 92 fd 00 	sts	0x00FD, r1
    13d2:	10 92 fc 00 	sts	0x00FC, r1
	}
	lastProcessValue = processValue;
    13d6:	90 93 ff 00 	sts	0x00FF, r25
    13da:	80 93 fe 00 	sts	0x00FE, r24
	integAcc = 0;
    13de:	10 92 00 01 	sts	0x0100, r1
    13e2:	10 92 01 01 	sts	0x0101, r1
    13e6:	10 92 02 01 	sts	0x0102, r1
    13ea:	10 92 03 01 	sts	0x0103, r1
    13ee:	08 95       	ret

000013f0 <processPID>:
}						
 
uint8_t processPID(uint16_t setPoint, uint16_t processValue)
{
    13f0:	cf 92       	push	r12
    13f2:	df 92       	push	r13
    13f4:	ef 92       	push	r14
    13f6:	ff 92       	push	r15
    13f8:	0f 93       	push	r16
    13fa:	1f 93       	push	r17
    13fc:	cf 93       	push	r28
    13fe:	df 93       	push	r29
    1400:	8b 01       	movw	r16, r22
	int16_t error, p_term, i_term, d_term, temp;
	//////
	int32_t integ_max;
	
	// Get the error
	error = setPoint - processValue;
    1402:	9c 01       	movw	r18, r24
    1404:	26 1b       	sub	r18, r22
    1406:	37 0b       	sbc	r19, r23
	
	//------ Calculate P term --------//
	if (error > (PROP_MAX / Kp))			// Compare before multiplication to avoid overflow
    1408:	2d 35       	cpi	r18, 0x5D	; 93
    140a:	81 e0       	ldi	r24, 0x01	; 1
    140c:	38 07       	cpc	r19, r24
    140e:	5c f4       	brge	.+22     	; 0x1426 <processPID+0x36>
	{
		p_term = PROP_MAX;	
	}
	else if (error < (PROP_MIN / Kp))
    1410:	24 3a       	cpi	r18, 0xA4	; 164
    1412:	8e ef       	ldi	r24, 0xFE	; 254
    1414:	38 07       	cpc	r19, r24
    1416:	54 f0       	brlt	.+20     	; 0x142c <processPID+0x3c>
	{
		p_term = PROP_MIN;	
	}
	else
	{
		p_term = error * Kp;
    1418:	8b e2       	ldi	r24, 0x2B	; 43
    141a:	82 9f       	mul	r24, r18
    141c:	e0 01       	movw	r28, r0
    141e:	83 9f       	mul	r24, r19
    1420:	d0 0d       	add	r29, r0
    1422:	11 24       	eor	r1, r1
    1424:	05 c0       	rjmp	.+10     	; 0x1430 <processPID+0x40>
	error = setPoint - processValue;
	
	//------ Calculate P term --------//
	if (error > (PROP_MAX / Kp))			// Compare before multiplication to avoid overflow
	{
		p_term = PROP_MAX;	
    1426:	c8 e9       	ldi	r28, 0x98	; 152
    1428:	da e3       	ldi	r29, 0x3A	; 58
    142a:	02 c0       	rjmp	.+4      	; 0x1430 <processPID+0x40>
	}
	else if (error < (PROP_MIN / Kp))
	{
		p_term = PROP_MIN;	
    142c:	c8 e6       	ldi	r28, 0x68	; 104
    142e:	d5 ec       	ldi	r29, 0xC5	; 197
	if ((error >= -INTEGRATOR_ENABLE_RANGE) &&	(error <= INTEGRATOR_ENABLE_RANGE))
		integAcc += error * Ki;
	else
		integAcc = 0;
	#else
	integAcc += error * Ki;
    1430:	83 e2       	ldi	r24, 0x23	; 35
    1432:	82 9f       	mul	r24, r18
    1434:	60 01       	movw	r12, r0
    1436:	83 9f       	mul	r24, r19
    1438:	d0 0c       	add	r13, r0
    143a:	11 24       	eor	r1, r1
    143c:	ee 24       	eor	r14, r14
    143e:	d7 fc       	sbrc	r13, 7
    1440:	e0 94       	com	r14
    1442:	fe 2c       	mov	r15, r14
    1444:	40 91 00 01 	lds	r20, 0x0100
    1448:	50 91 01 01 	lds	r21, 0x0101
    144c:	60 91 02 01 	lds	r22, 0x0102
    1450:	70 91 03 01 	lds	r23, 0x0103
    1454:	c4 0e       	add	r12, r20
    1456:	d5 1e       	adc	r13, r21
    1458:	e6 1e       	adc	r14, r22
    145a:	f7 1e       	adc	r15, r23
	#endif

	#ifdef INTEGRATOR_SOFT_LIMIT
	// Get the limit value
	//integ_max = (error > INTEGRATOR_SOFT_RANGE) ? INTEGRATOR_SOFT_MAX : INTEGRATOR_MAX;
	if (error > INTEGRATOR_SOFT_RANGE)
    145c:	2d 35       	cpi	r18, 0x5D	; 93
    145e:	81 e0       	ldi	r24, 0x01	; 1
    1460:	38 07       	cpc	r19, r24
    1462:	54 f4       	brge	.+20     	; 0x1478 <processPID+0x88>
		integ_max = 0;
	else if (error < 0)
    1464:	37 fd       	sbrc	r19, 7
    1466:	0c c0       	rjmp	.+24     	; 0x1480 <processPID+0x90>
		integ_max = INTEGRATOR_MAX;
	else
	{
		integ_max = (INTEGRATOR_SOFT_RANGE - (int32_t)error) * INTEGRATOR_SOFT_K;
    1468:	a2 ea       	ldi	r26, 0xA2	; 162
    146a:	bc ef       	ldi	r27, 0xFC	; 252
    146c:	93 d3       	rcall	.+1830   	; 0x1b94 <__mulhisi3>
    146e:	68 53       	subi	r22, 0x38	; 56
    1470:	7c 46       	sbci	r23, 0x6C	; 108
    1472:	8b 4f       	sbci	r24, 0xFB	; 251
    1474:	9f 4f       	sbci	r25, 0xFF	; 255
    1476:	08 c0       	rjmp	.+16     	; 0x1488 <processPID+0x98>

	#ifdef INTEGRATOR_SOFT_LIMIT
	// Get the limit value
	//integ_max = (error > INTEGRATOR_SOFT_RANGE) ? INTEGRATOR_SOFT_MAX : INTEGRATOR_MAX;
	if (error > INTEGRATOR_SOFT_RANGE)
		integ_max = 0;
    1478:	60 e0       	ldi	r22, 0x00	; 0
    147a:	70 e0       	ldi	r23, 0x00	; 0
    147c:	cb 01       	movw	r24, r22
    147e:	04 c0       	rjmp	.+8      	; 0x1488 <processPID+0x98>
	else if (error < 0)
		integ_max = INTEGRATOR_MAX;
    1480:	60 e2       	ldi	r22, 0x20	; 32
    1482:	71 ea       	ldi	r23, 0xA1	; 161
    1484:	87 e0       	ldi	r24, 0x07	; 7
    1486:	90 e0       	ldi	r25, 0x00	; 0
	{
		integ_max = (INTEGRATOR_SOFT_RANGE - (int32_t)error) * INTEGRATOR_SOFT_K;

	}

	if (integAcc > integ_max )
    1488:	6c 15       	cp	r22, r12
    148a:	7d 05       	cpc	r23, r13
    148c:	8e 05       	cpc	r24, r14
    148e:	9f 05       	cpc	r25, r15
    1490:	4c f4       	brge	.+18     	; 0x14a4 <processPID+0xb4>
	{
		integAcc = integ_max;
    1492:	60 93 00 01 	sts	0x0100, r22
    1496:	70 93 01 01 	sts	0x0101, r23
    149a:	80 93 02 01 	sts	0x0102, r24
    149e:	90 93 03 01 	sts	0x0103, r25
    14a2:	13 c0       	rjmp	.+38     	; 0x14ca <processPID+0xda>
	}
	else if (integAcc < INTEGRATOR_MIN)
    14a4:	f7 fc       	sbrc	r15, 7
    14a6:	09 c0       	rjmp	.+18     	; 0x14ba <processPID+0xca>
	if ((error >= -INTEGRATOR_ENABLE_RANGE) &&	(error <= INTEGRATOR_ENABLE_RANGE))
		integAcc += error * Ki;
	else
		integAcc = 0;
	#else
	integAcc += error * Ki;
    14a8:	c0 92 00 01 	sts	0x0100, r12
    14ac:	d0 92 01 01 	sts	0x0101, r13
    14b0:	e0 92 02 01 	sts	0x0102, r14
    14b4:	f0 92 03 01 	sts	0x0103, r15
    14b8:	08 c0       	rjmp	.+16     	; 0x14ca <processPID+0xda>
	{
		integAcc = integ_max;
	}
	else if (integAcc < INTEGRATOR_MIN)
	{
		integAcc = INTEGRATOR_MIN;
    14ba:	10 92 00 01 	sts	0x0100, r1
    14be:	10 92 01 01 	sts	0x0101, r1
    14c2:	10 92 02 01 	sts	0x0102, r1
    14c6:	10 92 03 01 	sts	0x0103, r1
	{
		integAcc = INTEGRATOR_MIN;
	}
	#endif
	
	i_term = (int16_t)(integAcc / INTEGRATOR_SCALE);	// Sould not exceed MAXINT16
    14ca:	60 91 00 01 	lds	r22, 0x0100
    14ce:	70 91 01 01 	lds	r23, 0x0101
    14d2:	80 91 02 01 	lds	r24, 0x0102
    14d6:	90 91 03 01 	lds	r25, 0x0103
    14da:	24 e6       	ldi	r18, 0x64	; 100
    14dc:	30 e0       	ldi	r19, 0x00	; 0
    14de:	40 e0       	ldi	r20, 0x00	; 0
    14e0:	50 e0       	ldi	r21, 0x00	; 0
    14e2:	3d d3       	rcall	.+1658   	; 0x1b5e <__divmodsi4>
	
	//------ Calculate D term --------//
	//d_term = fir_i16_i8((lastProcessValue - processValue), pid_dterm_buffer, &dterm_filter_core);
	d_term = lastProcessValue - processValue;
    14e4:	80 91 fe 00 	lds	r24, 0x00FE
    14e8:	90 91 ff 00 	lds	r25, 0x00FF
    14ec:	80 1b       	sub	r24, r16
    14ee:	91 0b       	sbc	r25, r17
	d_term = Kd * d_term;
    14f0:	40 e9       	ldi	r20, 0x90	; 144
    14f2:	51 e0       	ldi	r21, 0x01	; 1
    14f4:	84 9f       	mul	r24, r20
    14f6:	f0 01       	movw	r30, r0
    14f8:	85 9f       	mul	r24, r21
    14fa:	f0 0d       	add	r31, r0
    14fc:	94 9f       	mul	r25, r20
    14fe:	f0 0d       	add	r31, r0
    1500:	11 24       	eor	r1, r1
    1502:	e8 34       	cpi	r30, 0x48	; 72
    1504:	84 ef       	ldi	r24, 0xF4	; 244
    1506:	f8 07       	cpc	r31, r24
    1508:	14 f4       	brge	.+4      	; 0x150e <processPID+0x11e>
    150a:	e8 e4       	ldi	r30, 0x48	; 72
    150c:	f4 ef       	ldi	r31, 0xF4	; 244
    150e:	e9 3b       	cpi	r30, 0xB9	; 185
    1510:	8b e0       	ldi	r24, 0x0B	; 11
    1512:	f8 07       	cpc	r31, r24
    1514:	14 f0       	brlt	.+4      	; 0x151a <processPID+0x12a>
    1516:	e8 eb       	ldi	r30, 0xB8	; 184
    1518:	fb e0       	ldi	r31, 0x0B	; 11
	if (d_term > DIFF_MAX)
		d_term = DIFF_MAX;
	else if (d_term < DIFF_MIN)
		d_term = DIFF_MIN;

	lastProcessValue = processValue;
    151a:	10 93 ff 00 	sts	0x00FF, r17
    151e:	00 93 fe 00 	sts	0x00FE, r16
	
	//--------- Summ terms -----------//
	temp = (p_term + i_term + d_term) / SCALING_FACTOR;
    1522:	ce 01       	movw	r24, r28
    1524:	82 0f       	add	r24, r18
    1526:	93 1f       	adc	r25, r19
    1528:	8e 0f       	add	r24, r30
    152a:	9f 1f       	adc	r25, r31
    152c:	64 e6       	ldi	r22, 0x64	; 100
    152e:	70 e0       	ldi	r23, 0x00	; 0
    1530:	03 d3       	rcall	.+1542   	; 0x1b38 <__divmodhi4>
    1532:	cb 01       	movw	r24, r22
    1534:	77 ff       	sbrs	r23, 7
    1536:	02 c0       	rjmp	.+4      	; 0x153c <processPID+0x14c>
    1538:	80 e0       	ldi	r24, 0x00	; 0
    153a:	90 e0       	ldi	r25, 0x00	; 0
    153c:	85 36       	cpi	r24, 0x65	; 101
    153e:	91 05       	cpc	r25, r1
    1540:	14 f0       	brlt	.+4      	; 0x1546 <processPID+0x156>
    1542:	84 e6       	ldi	r24, 0x64	; 100
    1544:	90 e0       	ldi	r25, 0x00	; 0
		temp = PID_OUTPUT_MIN;
	}
	
	
	//------- Debug --------//
	dbg_PID_p_term = p_term;
    1546:	d0 93 d0 01 	sts	0x01D0, r29
    154a:	c0 93 cf 01 	sts	0x01CF, r28
	dbg_PID_d_term = d_term;
    154e:	f0 93 d4 01 	sts	0x01D4, r31
    1552:	e0 93 d3 01 	sts	0x01D3, r30
	dbg_PID_i_term = i_term;
    1556:	30 93 d2 01 	sts	0x01D2, r19
    155a:	20 93 d1 01 	sts	0x01D1, r18
	dbg_PID_output = temp;
    155e:	90 93 ce 01 	sts	0x01CE, r25
    1562:	80 93 cd 01 	sts	0x01CD, r24
	
	
	return temp;
	
}
    1566:	df 91       	pop	r29
    1568:	cf 91       	pop	r28
    156a:	1f 91       	pop	r17
    156c:	0f 91       	pop	r16
    156e:	ff 90       	pop	r15
    1570:	ef 90       	pop	r14
    1572:	df 90       	pop	r13
    1574:	cf 90       	pop	r12
    1576:	08 95       	ret

00001578 <setHeaterPower>:

// User function to control heater intensity
void setHeaterPower(uint16_t value)
{
	// Disable interrupts from analog comparator
	ACSR &= ~(1<<ACIE);
    1578:	43 98       	cbi	0x08, 3	; 8
	// Update value
	heaterPower = (value > HEATER_MAX_POWER) ? HEATER_MAX_POWER : value;
    157a:	9c 01       	movw	r18, r24
    157c:	85 36       	cpi	r24, 0x65	; 101
    157e:	91 05       	cpc	r25, r1
    1580:	10 f0       	brcs	.+4      	; 0x1586 <setHeaterPower+0xe>
    1582:	24 e6       	ldi	r18, 0x64	; 100
    1584:	30 e0       	ldi	r19, 0x00	; 0
    1586:	30 93 07 01 	sts	0x0107, r19
    158a:	20 93 06 01 	sts	0x0106, r18
	// Reenable interrupts
	ACSR |= (1<<ACIE);
    158e:	43 9a       	sbi	0x08, 3	; 8
    1590:	08 95       	ret

00001592 <setMotorDirection>:

// User function to control motor rotation
void setMotorDirection(uint8_t dir)
{
	// Disable interrupts from timer0 
	TIMSK &= ~(1<<TOIE0);
    1592:	99 b7       	in	r25, 0x39	; 57
    1594:	9e 7f       	andi	r25, 0xFE	; 254
    1596:	99 bf       	out	0x39, r25	; 57
		
	newDirReq = dir;	// save new direction request
    1598:	80 93 08 01 	sts	0x0108, r24
	dirChangedMask = ~ROLL_DIR_CHANGED;
    159c:	9f ed       	ldi	r25, 0xDF	; 223
    159e:	90 93 81 00 	sts	0x0081, r25
	
	if (dir & ROLL_FWD)
    15a2:	80 ff       	sbrs	r24, 0
    15a4:	09 c0       	rjmp	.+18     	; 0x15b8 <setMotorDirection+0x26>
		bottomPoint = rollPoint;  
    15a6:	80 91 09 01 	lds	r24, 0x0109
    15aa:	90 91 0a 01 	lds	r25, 0x010A
    15ae:	90 93 0c 01 	sts	0x010C, r25
    15b2:	80 93 0b 01 	sts	0x010B, r24
    15b6:	0a c0       	rjmp	.+20     	; 0x15cc <setMotorDirection+0x3a>
	else if (dir & ROLL_REV)
    15b8:	81 ff       	sbrs	r24, 1
    15ba:	08 c0       	rjmp	.+16     	; 0x15cc <setMotorDirection+0x3a>
		topPoint = rollPoint;
    15bc:	80 91 09 01 	lds	r24, 0x0109
    15c0:	90 91 0a 01 	lds	r25, 0x010A
    15c4:	90 93 0e 01 	sts	0x010E, r25
    15c8:	80 93 0d 01 	sts	0x010D, r24

	// Enable interrupts from timer 0
	TIMSK |= (1<<TOIE0);	
    15cc:	89 b7       	in	r24, 0x39	; 57
    15ce:	81 60       	ori	r24, 0x01	; 1
    15d0:	89 bf       	out	0x39, r24	; 57
    15d2:	08 95       	ret

000015d4 <stopCycleRolling>:
}

void stopCycleRolling(uint8_t doResetPoints)
{
	// Disable interrupts from timer0 
	TIMSK &= ~(1<<TOIE0);
    15d4:	99 b7       	in	r25, 0x39	; 57
    15d6:	9e 7f       	andi	r25, 0xFE	; 254
    15d8:	99 bf       	out	0x39, r25	; 57
	
	rollState &= ~ROLL_CYCLE;
    15da:	90 91 05 01 	lds	r25, 0x0105
    15de:	9b 7f       	andi	r25, 0xFB	; 251
    15e0:	90 93 05 01 	sts	0x0105, r25
	if (doResetPoints)
    15e4:	88 23       	and	r24, r24
    15e6:	71 f0       	breq	.+28     	; 0x1604 <stopCycleRolling+0x30>
	{
		topPoint = bottomPoint = rollPoint;
    15e8:	80 91 09 01 	lds	r24, 0x0109
    15ec:	90 91 0a 01 	lds	r25, 0x010A
    15f0:	90 93 0c 01 	sts	0x010C, r25
    15f4:	80 93 0b 01 	sts	0x010B, r24
    15f8:	90 93 0e 01 	sts	0x010E, r25
    15fc:	80 93 0d 01 	sts	0x010D, r24
		activeRollCycle = 0;	
    1600:	10 92 04 01 	sts	0x0104, r1
	}		
	
	// Enable interrupts from timer 0
	TIMSK |= (1<<TOIE0);
    1604:	89 b7       	in	r24, 0x39	; 57
    1606:	81 60       	ori	r24, 0x01	; 1
    1608:	89 bf       	out	0x39, r24	; 57
    160a:	08 95       	ret

0000160c <isTopPointValid>:



uint8_t isTopPointValid(void)
{
	return (	(int16_t)(topPoint - rollPoint) >= 0 );
    160c:	80 91 0d 01 	lds	r24, 0x010D
    1610:	90 91 0e 01 	lds	r25, 0x010E
    1614:	20 91 09 01 	lds	r18, 0x0109
    1618:	30 91 0a 01 	lds	r19, 0x010A
    161c:	82 1b       	sub	r24, r18
    161e:	93 0b       	sbc	r25, r19
    1620:	89 2f       	mov	r24, r25
    1622:	80 95       	com	r24
}
    1624:	88 1f       	adc	r24, r24
    1626:	88 27       	eor	r24, r24
    1628:	88 1f       	adc	r24, r24
    162a:	08 95       	ret

0000162c <isBottomPointValid>:

uint8_t isBottomPointValid(void)
{
	return (	(int16_t)(rollPoint - bottomPoint) >= 0	);
    162c:	80 91 09 01 	lds	r24, 0x0109
    1630:	90 91 0a 01 	lds	r25, 0x010A
    1634:	20 91 0b 01 	lds	r18, 0x010B
    1638:	30 91 0c 01 	lds	r19, 0x010C
    163c:	82 1b       	sub	r24, r18
    163e:	93 0b       	sbc	r25, r19
    1640:	89 2f       	mov	r24, r25
    1642:	80 95       	com	r24
}
    1644:	88 1f       	adc	r24, r24
    1646:	88 27       	eor	r24, r24
    1648:	88 1f       	adc	r24, r24
    164a:	08 95       	ret

0000164c <startCycleRolling>:


uint8_t startCycleRolling(void)
{
	// Disable interrupts from timer0 
	TIMSK &= ~(1<<TOIE0);
    164c:	89 b7       	in	r24, 0x39	; 57
    164e:	8e 7f       	andi	r24, 0xFE	; 254
    1650:	89 bf       	out	0x39, r24	; 57
	
	if ( isTopPointValid() && isBottomPointValid() )
    1652:	dc df       	rcall	.-72     	; 0x160c <isTopPointValid>
    1654:	88 23       	and	r24, r24
    1656:	59 f0       	breq	.+22     	; 0x166e <startCycleRolling+0x22>
    1658:	e9 df       	rcall	.-46     	; 0x162c <isBottomPointValid>
    165a:	88 23       	and	r24, r24
    165c:	41 f0       	breq	.+16     	; 0x166e <startCycleRolling+0x22>
	{
		rollState |= ROLL_CYCLE;
    165e:	80 91 05 01 	lds	r24, 0x0105
    1662:	84 60       	ori	r24, 0x04	; 4
    1664:	80 93 05 01 	sts	0x0105, r24
		activeRollCycle = 1;
    1668:	81 e0       	ldi	r24, 0x01	; 1
    166a:	80 93 04 01 	sts	0x0104, r24
	}
	
	// Enable interrupts from timer 0
	TIMSK |= (1<<TOIE0);
    166e:	89 b7       	in	r24, 0x39	; 57
    1670:	81 60       	ori	r24, 0x01	; 1
    1672:	89 bf       	out	0x39, r24	; 57
	
	return (rollState & ROLL_CYCLE);
    1674:	80 91 05 01 	lds	r24, 0x0105
}
    1678:	84 70       	andi	r24, 0x04	; 4
    167a:	08 95       	ret

0000167c <__vector_16>:




ISR(ANA_COMP_vect)
{
    167c:	1f 92       	push	r1
    167e:	0f 92       	push	r0
    1680:	0f b6       	in	r0, 0x3f	; 63
    1682:	0f 92       	push	r0
    1684:	11 24       	eor	r1, r1
    1686:	2f 93       	push	r18
    1688:	3f 93       	push	r19
    168a:	4f 93       	push	r20
    168c:	5f 93       	push	r21
    168e:	8f 93       	push	r24
    1690:	9f 93       	push	r25
	static uint16_t sigma = 0;
	uint16_t delta;
	
	// Once triggered, disable further comparator interrupt
	ACSR &= ~(1<<ACIE);
    1692:	43 98       	cbi	0x08, 3	; 8
	
	// Process heater delta-sigma modulator
	if (sigma >= HEATER_MAX_POWER)
    1694:	40 91 0f 01 	lds	r20, 0x010F
    1698:	50 91 10 01 	lds	r21, 0x0110
    169c:	44 36       	cpi	r20, 0x64	; 100
    169e:	51 05       	cpc	r21, r1
    16a0:	30 f0       	brcs	.+12     	; 0x16ae <__vector_16+0x32>
	{
		PORTD |= (1<<PD_HEATER | 1<<PD_HEAT_INDIC);
    16a2:	82 b3       	in	r24, 0x12	; 18
    16a4:	80 63       	ori	r24, 0x30	; 48
    16a6:	82 bb       	out	0x12, r24	; 18
		delta = -HEATER_MAX_POWER;	
    16a8:	2c e9       	ldi	r18, 0x9C	; 156
    16aa:	3f ef       	ldi	r19, 0xFF	; 255
    16ac:	03 c0       	rjmp	.+6      	; 0x16b4 <__vector_16+0x38>
	}		
	else
	{
		PORTD &= ~(1<<PD_HEAT_INDIC);
    16ae:	95 98       	cbi	0x12, 5	; 18
		delta = 0;
    16b0:	20 e0       	ldi	r18, 0x00	; 0
    16b2:	30 e0       	ldi	r19, 0x00	; 0
	}
	sigma += delta + heaterPower;	
    16b4:	80 91 06 01 	lds	r24, 0x0106
    16b8:	90 91 07 01 	lds	r25, 0x0107
    16bc:	84 0f       	add	r24, r20
    16be:	95 1f       	adc	r25, r21
    16c0:	82 0f       	add	r24, r18
    16c2:	93 1f       	adc	r25, r19
    16c4:	90 93 10 01 	sts	0x0110, r25
    16c8:	80 93 0f 01 	sts	0x010F, r24
	
	// Reprogram timer0
	TCNT0 = 256 - TRIAC_IMPULSE_TIME;		// Triac gate impulse time
    16cc:	86 ef       	ldi	r24, 0xF6	; 246
    16ce:	82 bf       	out	0x32, r24	; 50
	TIFR |= (1<<TOV0);						// Clear interrupt flag
    16d0:	88 b7       	in	r24, 0x38	; 56
    16d2:	81 60       	ori	r24, 0x01	; 1
    16d4:	88 bf       	out	0x38, r24	; 56
	// Modify state	
	p_state &= ~STATE_MASK;					// Start new state machine cycle
    16d6:	80 91 80 00 	lds	r24, 0x0080
    16da:	80 7f       	andi	r24, 0xF0	; 240
	p_state ^= HALF_PERIOD_FLAG;			// Toggle flag
    16dc:	80 58       	subi	r24, 0x80	; 128
    16de:	80 93 80 00 	sts	0x0080, r24
	
}
    16e2:	9f 91       	pop	r25
    16e4:	8f 91       	pop	r24
    16e6:	5f 91       	pop	r21
    16e8:	4f 91       	pop	r20
    16ea:	3f 91       	pop	r19
    16ec:	2f 91       	pop	r18
    16ee:	0f 90       	pop	r0
    16f0:	0f be       	out	0x3f, r0	; 63
    16f2:	0f 90       	pop	r0
    16f4:	1f 90       	pop	r1
    16f6:	18 95       	reti

000016f8 <__vector_9>:



ISR(TIMER0_OVF_vect)
{
    16f8:	1f 92       	push	r1
    16fa:	0f 92       	push	r0
    16fc:	0f b6       	in	r0, 0x3f	; 63
    16fe:	0f 92       	push	r0
    1700:	11 24       	eor	r1, r1
    1702:	2f 93       	push	r18
    1704:	3f 93       	push	r19
    1706:	4f 93       	push	r20
    1708:	5f 93       	push	r21
    170a:	6f 93       	push	r22
    170c:	7f 93       	push	r23
    170e:	8f 93       	push	r24
    1710:	9f 93       	push	r25
    1712:	af 93       	push	r26
    1714:	bf 93       	push	r27
    1716:	ef 93       	push	r30
    1718:	ff 93       	push	r31
	uint8_t temp;
	
	switch(p_state & STATE_MASK)
    171a:	80 91 80 00 	lds	r24, 0x0080
    171e:	8f 70       	andi	r24, 0x0F	; 15
    1720:	81 30       	cpi	r24, 0x01	; 1
    1722:	49 f0       	breq	.+18     	; 0x1736 <__vector_9+0x3e>
    1724:	28 f0       	brcs	.+10     	; 0x1730 <__vector_9+0x38>
    1726:	82 30       	cpi	r24, 0x02	; 2
    1728:	49 f0       	breq	.+18     	; 0x173c <__vector_9+0x44>
    172a:	83 30       	cpi	r24, 0x03	; 3
    172c:	69 f4       	brne	.+26     	; 0x1748 <__vector_9+0x50>
    172e:	0b c0       	rjmp	.+22     	; 0x1746 <__vector_9+0x4e>
	{
		// TRIAC_IMPULSE_TIME finished
		case 0x00:
			// Turn off heater TRIAC
			PORTD &= ~(1<<PD_HEATER);
    1730:	94 98       	cbi	0x12, 4	; 18
			TCNT0 = 256 - (QUATER_PERIOD_TIME - TRIAC_IMPULSE_TIME);
    1732:	8c eb       	ldi	r24, 0xBC	; 188
    1734:	01 c0       	rjmp	.+2      	; 0x1738 <__vector_9+0x40>
			break;
		// QUATER_PERIOD_TIME finished	
		case 0x01:	
			TCNT0 = 256 - (SYNC_IGNORE_TIME - QUATER_PERIOD_TIME);
    1736:	81 ed       	ldi	r24, 0xD1	; 209
    1738:	82 bf       	out	0x32, r24	; 50
			break;	
    173a:	06 c0       	rjmp	.+12     	; 0x1748 <__vector_9+0x50>
		// SYNC_IGNORE_TIME finished	
		case 0x02:
			TCNT0 = 256 - SYNC_LOST_TIMEOUT;
    173c:	82 ec       	ldi	r24, 0xC2	; 194
    173e:	82 bf       	out	0x32, r24	; 50
			// Clear flag and enable interrupt from analog comparator
			ACSR |= (1<<ACI);
    1740:	44 9a       	sbi	0x08, 4	; 8
			ACSR |= (1<<ACIE);
    1742:	43 9a       	sbi	0x08, 3	; 8
			break;
    1744:	01 c0       	rjmp	.+2      	; 0x1748 <__vector_9+0x50>
		// SYNC_LOST_TIMEOUT finished
		case 0x03:
			// Error - sync is lost. It means that device has been disconnected from AC line.
			// Disable all power-consuming devices like LEDs and save user settings to EEPROM.
			exitPowerOff();
    1746:	5c d8       	rcall	.-3912   	; 0x800 <exitPowerOff>
			// Sync is not present - do nothing
			break;
	}	

	// Full period check
	if ((p_state & (HALF_PERIOD_FLAG | STATE_MASK)) == (HALF_PERIOD_FLAG | 0x01))
    1748:	80 91 80 00 	lds	r24, 0x0080
    174c:	8f 78       	andi	r24, 0x8F	; 143
    174e:	81 38       	cpi	r24, 0x81	; 129
    1750:	09 f0       	breq	.+2      	; 0x1754 <__vector_9+0x5c>
    1752:	81 c0       	rjmp	.+258    	; 0x1856 <__vector_9+0x15e>
	{
		// Quarter AC line period is done. Update motor controls.
		temp = PORTD;
    1754:	82 b3       	in	r24, 0x12	; 18
		temp &= ~(1<<PD_M1 | 1<<PD_M2);
    1756:	83 7f       	andi	r24, 0xF3	; 243
		if ( rollState & SKIP_CURRENT_MOTOR_CTRL )
    1758:	90 91 05 01 	lds	r25, 0x0105
    175c:	93 ff       	sbrs	r25, 3
    175e:	05 c0       	rjmp	.+10     	; 0x176a <__vector_9+0x72>
		{
			// Direction control changed. Skip current period to allow TRIACs fully close
			rollState &= ~SKIP_CURRENT_MOTOR_CTRL;
    1760:	97 7f       	andi	r25, 0xF7	; 247
    1762:	90 93 05 01 	sts	0x0105, r25
			PORTD = temp; 	
    1766:	82 bb       	out	0x12, r24	; 18
    1768:	76 c0       	rjmp	.+236    	; 0x1856 <__vector_9+0x15e>
		}
		else
		{
			// Apply direction control 
			if (rollState & ROLL_FWD)
    176a:	90 ff       	sbrs	r25, 0
    176c:	02 c0       	rjmp	.+4      	; 0x1772 <__vector_9+0x7a>
				temp |= (1<<PD_M1);
    176e:	84 60       	ori	r24, 0x04	; 4
    1770:	02 c0       	rjmp	.+4      	; 0x1776 <__vector_9+0x7e>
			else if (rollState & ROLL_REV)
    1772:	91 fd       	sbrc	r25, 1
				temp |= (1<<PD_M2);
    1774:	88 60       	ori	r24, 0x08	; 8
			PORTD = temp; 
    1776:	82 bb       	out	0x12, r24	; 18
// Function to process rolling - sets rotation direction for next period
// Call once per each AC line period
static inline void controlRolling()
{
	// Process cycle rolling
	switch(rollState & (ROLL_FWD | ROLL_REV | ROLL_CYCLE))
    1778:	40 91 05 01 	lds	r20, 0x0105
    177c:	84 2f       	mov	r24, r20
    177e:	87 70       	andi	r24, 0x07	; 7
    1780:	85 30       	cpi	r24, 0x05	; 5
    1782:	19 f0       	breq	.+6      	; 0x178a <__vector_9+0x92>
    1784:	86 30       	cpi	r24, 0x06	; 6
    1786:	e9 f5       	brne	.+122    	; 0x1802 <__vector_9+0x10a>
    1788:	1d c0       	rjmp	.+58     	; 0x17c4 <__vector_9+0xcc>
//---------------------------------------------//
//---------------------------------------------//

static inline uint8_t reachedTopPoint(void)
{
	return (	(int16_t)(topPoint - rollPoint) <= 0 );
    178a:	80 91 0d 01 	lds	r24, 0x010D
    178e:	90 91 0e 01 	lds	r25, 0x010E
    1792:	20 91 09 01 	lds	r18, 0x0109
    1796:	30 91 0a 01 	lds	r19, 0x010A
    179a:	82 1b       	sub	r24, r18
    179c:	93 0b       	sbc	r25, r19
{
	// Process cycle rolling
	switch(rollState & (ROLL_FWD | ROLL_REV | ROLL_CYCLE))
	{
		case (ROLL_FWD | ROLL_CYCLE):
			if (reachedTopPoint())
    179e:	18 16       	cp	r1, r24
    17a0:	19 06       	cpc	r1, r25
    17a2:	7c f1       	brlt	.+94     	; 0x1802 <__vector_9+0x10a>
			{
				if (activeRollCycle >= p.rollCycleSet)	
    17a4:	80 91 04 01 	lds	r24, 0x0104
    17a8:	90 91 94 01 	lds	r25, 0x0194
    17ac:	89 17       	cp	r24, r25
    17ae:	28 f0       	brcs	.+10     	; 0x17ba <__vector_9+0xc2>
				{
					// DONE!
					rollState &= ~ROLL_CYCLE;
    17b0:	4b 7f       	andi	r20, 0xFB	; 251
					rollState |= CYCLE_ROLL_DONE;
    17b2:	40 61       	ori	r20, 0x10	; 16
    17b4:	40 93 05 01 	sts	0x0105, r20
    17b8:	24 c0       	rjmp	.+72     	; 0x1802 <__vector_9+0x10a>
				}
				else
				{
					activeRollCycle++;
    17ba:	8f 5f       	subi	r24, 0xFF	; 255
    17bc:	80 93 04 01 	sts	0x0104, r24
					// Change dir	
					newDirReq = ROLL_REV;				
    17c0:	82 e0       	ldi	r24, 0x02	; 2
    17c2:	1d c0       	rjmp	.+58     	; 0x17fe <__vector_9+0x106>
	return (	(int16_t)(topPoint - rollPoint) <= 0 );
}

static inline uint8_t reachedBottomPoint(void)
{
	return (	(int16_t)(rollPoint - bottomPoint) <= 0 );
    17c4:	80 91 09 01 	lds	r24, 0x0109
    17c8:	90 91 0a 01 	lds	r25, 0x010A
    17cc:	20 91 0b 01 	lds	r18, 0x010B
    17d0:	30 91 0c 01 	lds	r19, 0x010C
    17d4:	82 1b       	sub	r24, r18
    17d6:	93 0b       	sbc	r25, r19
				}
			}
			break;
		
		case (ROLL_REV | ROLL_CYCLE):	
			if (reachedBottomPoint())
    17d8:	18 16       	cp	r1, r24
    17da:	19 06       	cpc	r1, r25
    17dc:	94 f0       	brlt	.+36     	; 0x1802 <__vector_9+0x10a>
			{
				if (activeRollCycle >= p.rollCycleSet)	
    17de:	80 91 04 01 	lds	r24, 0x0104
    17e2:	90 91 94 01 	lds	r25, 0x0194
    17e6:	89 17       	cp	r24, r25
    17e8:	30 f0       	brcs	.+12     	; 0x17f6 <__vector_9+0xfe>
				{
					// DONE!
					rollState &= ~ROLL_CYCLE;
    17ea:	84 2f       	mov	r24, r20
    17ec:	8b 7f       	andi	r24, 0xFB	; 251
					rollState |= CYCLE_ROLL_DONE;
    17ee:	80 61       	ori	r24, 0x10	; 16
    17f0:	80 93 05 01 	sts	0x0105, r24
    17f4:	06 c0       	rjmp	.+12     	; 0x1802 <__vector_9+0x10a>
				}
				else
				{
					activeRollCycle++;
    17f6:	8f 5f       	subi	r24, 0xFF	; 255
    17f8:	80 93 04 01 	sts	0x0104, r24
					// Change dir	
					newDirReq = ROLL_FWD;
    17fc:	81 e0       	ldi	r24, 0x01	; 1
    17fe:	80 93 08 01 	sts	0x0108, r24
		default:
			break;
	}
	
	// Process direction change
	if ((rollState ^ newDirReq) & (ROLL_FWD | ROLL_REV))
    1802:	20 91 05 01 	lds	r18, 0x0105
    1806:	90 91 08 01 	lds	r25, 0x0108
    180a:	89 2f       	mov	r24, r25
    180c:	82 27       	eor	r24, r18
    180e:	83 70       	andi	r24, 0x03	; 3
    1810:	19 f0       	breq	.+6      	; 0x1818 <__vector_9+0x120>
	{
		// ROLL_DIR_CHANGED is used for sound beep
		rollState |= (SKIP_CURRENT_MOTOR_CTRL | ROLL_DIR_CHANGED);
    1812:	28 62       	ori	r18, 0x28	; 40
    1814:	20 93 05 01 	sts	0x0105, r18
	}
	
	rollState &= ~(ROLL_FWD | ROLL_REV);
    1818:	80 91 05 01 	lds	r24, 0x0105
    181c:	8c 7f       	andi	r24, 0xFC	; 252
	rollState |= newDirReq;
    181e:	89 2b       	or	r24, r25
	rollState &= dirChangedMask;
    1820:	90 91 81 00 	lds	r25, 0x0081
    1824:	89 23       	and	r24, r25
    1826:	80 93 05 01 	sts	0x0105, r24
	dirChangedMask = 0xFF;
    182a:	9f ef       	ldi	r25, 0xFF	; 255
    182c:	90 93 81 00 	sts	0x0081, r25
	return (	(int16_t)(rollPoint - bottomPoint) <= 0 );
}

static inline void updateRollPoint(void)
{	
	if (rollState & ROLL_FWD)
    1830:	80 ff       	sbrs	r24, 0
    1832:	06 c0       	rjmp	.+12     	; 0x1840 <__vector_9+0x148>
		rollPoint++;
    1834:	80 91 09 01 	lds	r24, 0x0109
    1838:	90 91 0a 01 	lds	r25, 0x010A
    183c:	01 96       	adiw	r24, 0x01	; 1
    183e:	07 c0       	rjmp	.+14     	; 0x184e <__vector_9+0x156>
	else if (rollState & ROLL_REV)
    1840:	81 ff       	sbrs	r24, 1
    1842:	09 c0       	rjmp	.+18     	; 0x1856 <__vector_9+0x15e>
		rollPoint--;	
    1844:	80 91 09 01 	lds	r24, 0x0109
    1848:	90 91 0a 01 	lds	r25, 0x010A
    184c:	01 97       	sbiw	r24, 0x01	; 1
    184e:	90 93 0a 01 	sts	0x010A, r25
    1852:	80 93 09 01 	sts	0x0109, r24
			controlRolling();
		}
	}
	
	
	if ((p_state & STATE_MASK)  != 0x0F)
    1856:	80 91 80 00 	lds	r24, 0x0080
    185a:	98 2f       	mov	r25, r24
    185c:	9f 70       	andi	r25, 0x0F	; 15
    185e:	9f 30       	cpi	r25, 0x0F	; 15
    1860:	19 f0       	breq	.+6      	; 0x1868 <__vector_9+0x170>
		p_state++;
    1862:	8f 5f       	subi	r24, 0xFF	; 255
    1864:	80 93 80 00 	sts	0x0080, r24
}	
    1868:	ff 91       	pop	r31
    186a:	ef 91       	pop	r30
    186c:	bf 91       	pop	r27
    186e:	af 91       	pop	r26
    1870:	9f 91       	pop	r25
    1872:	8f 91       	pop	r24
    1874:	7f 91       	pop	r23
    1876:	6f 91       	pop	r22
    1878:	5f 91       	pop	r21
    187a:	4f 91       	pop	r20
    187c:	3f 91       	pop	r19
    187e:	2f 91       	pop	r18
    1880:	0f 90       	pop	r0
    1882:	0f be       	out	0x3f, r0	; 63
    1884:	0f 90       	pop	r0
    1886:	1f 90       	pop	r1
    1888:	18 95       	reti

0000188a <processSoftTimer8b>:
 
 
 
 
 void processSoftTimer8b(SoftTimer8b_t *tmr)
 {
    188a:	fc 01       	movw	r30, r24
	 uint8_t newTimerVal;

	 if (!tmr->Enabled)
    188c:	90 81       	ld	r25, Z
    188e:	90 ff       	sbrs	r25, 0
    1890:	27 c0       	rjmp	.+78     	; 0x18e0 <processSoftTimer8b+0x56>
		return;
	 
	 tmr->FA_EQ = 0;
	 tmr->FA_GE = 0;
	 tmr->FTop = 0;
    1892:	97 7e       	andi	r25, 0xE7	; 231
    1894:	9f 7d       	andi	r25, 0xDF	; 223
    1896:	90 83       	st	Z, r25
	 
	 if (tmr->Timer >= tmr->Top)
    1898:	81 81       	ldd	r24, Z+1	; 0x01
    189a:	22 81       	ldd	r18, Z+2	; 0x02
    189c:	82 17       	cp	r24, r18
    189e:	50 f0       	brcs	.+20     	; 0x18b4 <processSoftTimer8b+0x2a>
	 {
		 if (tmr->RunOnce)
    18a0:	91 ff       	sbrs	r25, 1
    18a2:	02 c0       	rjmp	.+4      	; 0x18a8 <processSoftTimer8b+0x1e>
		 {
			 tmr->Enabled = 0;
    18a4:	9e 7f       	andi	r25, 0xFE	; 254
    18a6:	90 83       	st	Z, r25
		 }
		 tmr->FTop = 1;
    18a8:	90 81       	ld	r25, Z
		 tmr->FOvfl = 1;
    18aa:	90 62       	ori	r25, 0x20	; 32
    18ac:	90 64       	ori	r25, 0x40	; 64
    18ae:	90 83       	st	Z, r25
		 newTimerVal = 0;
    18b0:	20 e0       	ldi	r18, 0x00	; 0
    18b2:	02 c0       	rjmp	.+4      	; 0x18b8 <processSoftTimer8b+0x2e>
	 }
	 else
	 {
		 newTimerVal = tmr->Timer + 1;
    18b4:	28 2f       	mov	r18, r24
    18b6:	2f 5f       	subi	r18, 0xFF	; 255
	 }
	 
	 if (tmr->Timer == tmr->CompA)
    18b8:	93 81       	ldd	r25, Z+3	; 0x03
    18ba:	89 13       	cpse	r24, r25
    18bc:	0b c0       	rjmp	.+22     	; 0x18d4 <processSoftTimer8b+0x4a>
	 {
		 tmr->FA_EQ = 1;
    18be:	80 81       	ld	r24, Z
		 tmr->FA_GE = 1;
    18c0:	88 60       	ori	r24, 0x08	; 8
    18c2:	80 61       	ori	r24, 0x10	; 16
		 tmr->FA_TGL = !tmr->FA_TGL;
    18c4:	82 fb       	bst	r24, 2
    18c6:	99 27       	eor	r25, r25
    18c8:	90 f9       	bld	r25, 0
    18ca:	31 e0       	ldi	r19, 0x01	; 1
    18cc:	93 27       	eor	r25, r19
    18ce:	90 fb       	bst	r25, 0
    18d0:	82 f9       	bld	r24, 2
    18d2:	04 c0       	rjmp	.+8      	; 0x18dc <processSoftTimer8b+0x52>
	 }
	 else if (tmr->Timer >= tmr->CompA)
    18d4:	89 17       	cp	r24, r25
    18d6:	18 f0       	brcs	.+6      	; 0x18de <processSoftTimer8b+0x54>
	 {
		 tmr->FA_GE = 1;
    18d8:	80 81       	ld	r24, Z
    18da:	80 61       	ori	r24, 0x10	; 16
    18dc:	80 83       	st	Z, r24
	 }
	 
	 tmr->Timer = newTimerVal; 
    18de:	21 83       	std	Z+1, r18	; 0x01
    18e0:	08 95       	ret

000018e2 <processSystemTimers>:
static uint8_t enableOverride = 0;


void processSystemTimers(void)
{
	sys_timers.flags = 0x00;
    18e2:	10 92 88 00 	sts	0x0088, r1
	
	// Process Celsius counter
	if (--sys_timers.celsius_upd_counter == 0)
    18e6:	80 91 82 00 	lds	r24, 0x0082
    18ea:	81 50       	subi	r24, 0x01	; 1
    18ec:	80 93 82 00 	sts	0x0082, r24
    18f0:	81 11       	cpse	r24, r1
    18f2:	13 c0       	rjmp	.+38     	; 0x191a <processSystemTimers+0x38>
	{
		sys_timers.celsius_upd_counter = CELSIUS_UDPATE_INTERVAL;
    18f4:	84 e0       	ldi	r24, 0x04	; 4
    18f6:	80 93 82 00 	sts	0x0082, r24
		sys_timers.flags |= EXPIRED_CELSIUS;
    18fa:	81 e0       	ldi	r24, 0x01	; 1
    18fc:	80 93 88 00 	sts	0x0088, r24
		
		// Process PID update counter
		if (--sys_timers.pid_update_counter == 0)
    1900:	80 91 87 00 	lds	r24, 0x0087
    1904:	81 50       	subi	r24, 0x01	; 1
    1906:	80 93 87 00 	sts	0x0087, r24
    190a:	81 11       	cpse	r24, r1
    190c:	06 c0       	rjmp	.+12     	; 0x191a <processSystemTimers+0x38>
		{
			sys_timers.pid_update_counter = PID_UPDATE_INTERVAL;
    190e:	84 e1       	ldi	r24, 0x14	; 20
    1910:	80 93 87 00 	sts	0x0087, r24
			sys_timers.flags |= UPDATE_PID;
    1914:	81 e4       	ldi	r24, 0x41	; 65
    1916:	80 93 88 00 	sts	0x0088, r24
		}
	}
	
	// Process log counter
	if (--sys_timers.log_counter == 0)
    191a:	80 91 86 00 	lds	r24, 0x0086
    191e:	81 50       	subi	r24, 0x01	; 1
    1920:	19 f0       	breq	.+6      	; 0x1928 <processSystemTimers+0x46>
    1922:	80 93 86 00 	sts	0x0086, r24
    1926:	08 c0       	rjmp	.+16     	; 0x1938 <processSystemTimers+0x56>
	{
		sys_timers.log_counter = LOG_INTERVAL;
    1928:	82 e0       	ldi	r24, 0x02	; 2
    192a:	80 93 86 00 	sts	0x0086, r24
		sys_timers.flags |= EXPIRED_LOG;
    192e:	80 91 88 00 	lds	r24, 0x0088
    1932:	80 62       	ori	r24, 0x20	; 32
    1934:	80 93 88 00 	sts	0x0088, r24
	}
	
	// Process 10 seconds counter
	if (--sys_timers.counter_10sec == 0)
    1938:	80 91 83 00 	lds	r24, 0x0083
    193c:	81 50       	subi	r24, 0x01	; 1
    193e:	80 93 83 00 	sts	0x0083, r24
    1942:	81 11       	cpse	r24, r1
    1944:	34 c0       	rjmp	.+104    	; 0x19ae <processSystemTimers+0xcc>
	{
		sys_timers.counter_10sec = COUNTER_10SEC_INTERVAL;
    1946:	88 ec       	ldi	r24, 0xC8	; 200
    1948:	80 93 83 00 	sts	0x0083, r24
		sys_timers.flags |= EXPIRED_10SEC;
    194c:	40 91 88 00 	lds	r20, 0x0088
    1950:	84 2f       	mov	r24, r20
    1952:	82 60       	ori	r24, 0x02	; 2
    1954:	80 93 88 00 	sts	0x0088, r24
		
		// Process 1 minute counter
		if (--sys_timers.counter_1min == 0)
    1958:	80 91 84 00 	lds	r24, 0x0084
    195c:	81 50       	subi	r24, 0x01	; 1
    195e:	80 93 84 00 	sts	0x0084, r24
    1962:	81 11       	cpse	r24, r1
    1964:	24 c0       	rjmp	.+72     	; 0x19ae <processSystemTimers+0xcc>
		{
			sys_timers.counter_1min = COUNTER_1MIN_INTERVAL;
    1966:	86 e0       	ldi	r24, 0x06	; 6
    1968:	80 93 84 00 	sts	0x0084, r24
			sys_timers.flags |= EXPIRED_1MIN;
    196c:	84 2f       	mov	r24, r20
    196e:	86 60       	ori	r24, 0x06	; 6
    1970:	80 93 88 00 	sts	0x0088, r24
			
			// Process auto power off counter
			if (sys_timers.poff_counter != MAX_POWEROFF_TIMEOUT - 1)
    1974:	80 91 85 00 	lds	r24, 0x0085
    1978:	8e 35       	cpi	r24, 0x5E	; 94
    197a:	19 f0       	breq	.+6      	; 0x1982 <processSystemTimers+0xa0>
				sys_timers.poff_counter++;
    197c:	8f 5f       	subi	r24, 0xFF	; 255
    197e:	80 93 85 00 	sts	0x0085, r24
			if (sys_timers.poff_counter == p.power_off_timeout - 1)
    1982:	60 91 85 00 	lds	r22, 0x0085
    1986:	50 91 96 01 	lds	r21, 0x0196
    198a:	26 2f       	mov	r18, r22
    198c:	30 e0       	ldi	r19, 0x00	; 0
    198e:	85 2f       	mov	r24, r21
    1990:	90 e0       	ldi	r25, 0x00	; 0
    1992:	01 97       	sbiw	r24, 0x01	; 1
    1994:	28 17       	cp	r18, r24
    1996:	39 07       	cpc	r19, r25
    1998:	19 f4       	brne	.+6      	; 0x19a0 <processSystemTimers+0xbe>
				sys_timers.flags |= AUTOPOFF_SOON;
    199a:	4e 60       	ori	r20, 0x0E	; 14
    199c:	40 93 88 00 	sts	0x0088, r20
			if (sys_timers.poff_counter == p.power_off_timeout)
    19a0:	65 13       	cpse	r22, r21
    19a2:	05 c0       	rjmp	.+10     	; 0x19ae <processSystemTimers+0xcc>
				sys_timers.flags |= AUTOPOFF_EXPIRED;			
    19a4:	80 91 88 00 	lds	r24, 0x0088
    19a8:	80 61       	ori	r24, 0x10	; 16
    19aa:	80 93 88 00 	sts	0x0088, r24
    19ae:	08 95       	ret

000019b0 <resetAutoPowerOffCounter>:
}


void resetAutoPowerOffCounter(void)
{
	sys_timers.poff_counter = 0;
    19b0:	10 92 85 00 	sts	0x0085, r1
    19b4:	08 95       	ret

000019b6 <__vector_3>:
// ----------------------- //


// Period is 1ms @ 16MHz
ISR(TIMER2_COMP_vect)
{	
    19b6:	1f 92       	push	r1
    19b8:	0f 92       	push	r0
    19ba:	0f b6       	in	r0, 0x3f	; 63
    19bc:	0f 92       	push	r0
    19be:	11 24       	eor	r1, r1
    19c0:	2f 93       	push	r18
    19c2:	3f 93       	push	r19
    19c4:	4f 93       	push	r20
    19c6:	5f 93       	push	r21
    19c8:	6f 93       	push	r22
    19ca:	7f 93       	push	r23
    19cc:	8f 93       	push	r24
    19ce:	9f 93       	push	r25
    19d0:	af 93       	push	r26
    19d2:	bf 93       	push	r27
    19d4:	ef 93       	push	r30
    19d6:	ff 93       	push	r31
	// Manage LED indicator
	processLedIndicator();
    19d8:	8c d7       	rcall	.+3864   	; 0x28f2 <__data_load_end+0xbba>
static inline void Sound_Process(void)
{
	static uint16_t note_time_counter;
	static tone_t tone;
	static const tone_t* p_melody;
	uint8_t new_state = sound_state;
    19da:	20 91 11 01 	lds	r18, 0x0111
	
	switch (sound_state)
    19de:	22 30       	cpi	r18, 0x02	; 2
    19e0:	99 f1       	breq	.+102    	; 0x1a48 <__vector_3+0x92>
    19e2:	20 f4       	brcc	.+8      	; 0x19ec <__vector_3+0x36>
    19e4:	21 30       	cpi	r18, 0x01	; 1
    19e6:	09 f0       	breq	.+2      	; 0x19ea <__vector_3+0x34>
    19e8:	50 c0       	rjmp	.+160    	; 0x1a8a <__vector_3+0xd4>
    19ea:	0f c0       	rjmp	.+30     	; 0x1a0a <__vector_3+0x54>
    19ec:	23 30       	cpi	r18, 0x03	; 3
    19ee:	21 f0       	breq	.+8      	; 0x19f8 <__vector_3+0x42>
    19f0:	25 30       	cpi	r18, 0x05	; 5
    19f2:	09 f0       	breq	.+2      	; 0x19f6 <__vector_3+0x40>
    19f4:	4a c0       	rjmp	.+148    	; 0x1a8a <__vector_3+0xd4>
    19f6:	15 c0       	rjmp	.+42     	; 0x1a22 <__vector_3+0x6c>
	{
		case SOUND_START_NEW:
			p_melody = new_melody;
    19f8:	80 91 12 01 	lds	r24, 0x0112
    19fc:	90 91 13 01 	lds	r25, 0x0113
    1a00:	90 93 15 01 	sts	0x0115, r25
    1a04:	80 93 14 01 	sts	0x0114, r24
    1a08:	44 c0       	rjmp	.+136    	; 0x1a92 <__vector_3+0xdc>
			new_state = SOUND_APPLY_TONE;
			p_melody = NULL;				// Beeper mode
			break;
		#endif
		case SOUND_PLAY:
			if (--note_time_counter == 0)
    1a0a:	80 91 16 01 	lds	r24, 0x0116
    1a0e:	90 91 17 01 	lds	r25, 0x0117
    1a12:	01 97       	sbiw	r24, 0x01	; 1
    1a14:	90 93 17 01 	sts	0x0117, r25
    1a18:	80 93 16 01 	sts	0x0116, r24
    1a1c:	89 2b       	or	r24, r25
    1a1e:	c9 f1       	breq	.+114    	; 0x1a92 <__vector_3+0xdc>
    1a20:	3b c0       	rjmp	.+118    	; 0x1a98 <__vector_3+0xe2>
		case SOUND_GET_NEXT_TONE:
			#ifdef USE_BEEP_FUNCTION
			if (p_melody != NULL)			// If driver is playing melody, not beeping
			{
				#endif
				if (!eeprom_is_ready())		// If EEPROM is busy and Sound_Process() is called from an ISR, deadly block may appear
    1a22:	e1 99       	sbic	0x1c, 1	; 28
    1a24:	3b c0       	rjmp	.+118    	; 0x1a9c <__vector_3+0xe6>
					return;
				eeprom_read_block(&tone,p_melody++,sizeof(tone_t));
    1a26:	60 91 14 01 	lds	r22, 0x0114
    1a2a:	70 91 15 01 	lds	r23, 0x0115
    1a2e:	cb 01       	movw	r24, r22
    1a30:	02 96       	adiw	r24, 0x02	; 2
    1a32:	90 93 15 01 	sts	0x0115, r25
    1a36:	80 93 14 01 	sts	0x0114, r24
    1a3a:	42 e0       	ldi	r20, 0x02	; 2
    1a3c:	50 e0       	ldi	r21, 0x00	; 0
    1a3e:	88 e1       	ldi	r24, 0x18	; 24
    1a40:	91 e0       	ldi	r25, 0x01	; 1
    1a42:	09 d1       	rcall	.+530    	; 0x1c56 <__eerd_block_m8>
				new_state = SOUND_APPLY_TONE;
    1a44:	22 e0       	ldi	r18, 0x02	; 2
    1a46:	28 c0       	rjmp	.+80     	; 0x1a98 <__vector_3+0xe2>
				new_state = SOUND_OFF;
			}
			#endif
			break;
		case SOUND_APPLY_TONE:
			if (tone.duration == 0)
    1a48:	80 91 19 01 	lds	r24, 0x0119
    1a4c:	88 23       	and	r24, r24
    1a4e:	19 f1       	breq	.+70     	; 0x1a96 <__vector_3+0xe0>
				new_state = SOUND_OFF;
			}
			else
			{
				// Setup period
				if (tone.tone_period != 0)
    1a50:	80 91 18 01 	lds	r24, 0x0118
    1a54:	88 23       	and	r24, r24
    1a56:	49 f0       	breq	.+18     	; 0x1a6a <__vector_3+0xb4>
				{
					// Timer runs at 250kHz (T = 4us), tone_period is set in units of 8us
					// Output toggles on compare match
					OCR1A = tone.tone_period - 1;
    1a58:	90 e0       	ldi	r25, 0x00	; 0
    1a5a:	01 97       	sbiw	r24, 0x01	; 1
    1a5c:	9b bd       	out	0x2b, r25	; 43
    1a5e:	8a bd       	out	0x2a, r24	; 42
					TCNT1 = 0;
    1a60:	1d bc       	out	0x2d, r1	; 45
    1a62:	1c bc       	out	0x2c, r1	; 44
					// Toggle OCR1A on compare match
					TCCR1A |= (1<<COM1A0);
    1a64:	8f b5       	in	r24, 0x2f	; 47
    1a66:	80 64       	ori	r24, 0x40	; 64
    1a68:	02 c0       	rjmp	.+4      	; 0x1a6e <__vector_3+0xb8>
				}
				else
				{
					// Disable OCR1A output
					TCCR1A &= ~(1<<COM1A0 | 1<<COM1A1);
    1a6a:	8f b5       	in	r24, 0x2f	; 47
    1a6c:	8f 73       	andi	r24, 0x3F	; 63
    1a6e:	8f bd       	out	0x2f, r24	; 47
				}
				note_time_counter = (uint16_t)tone.duration * TONE_DURATION_SCALE - 2;
    1a70:	80 91 19 01 	lds	r24, 0x0119
    1a74:	2a e0       	ldi	r18, 0x0A	; 10
    1a76:	82 9f       	mul	r24, r18
    1a78:	c0 01       	movw	r24, r0
    1a7a:	11 24       	eor	r1, r1
    1a7c:	02 97       	sbiw	r24, 0x02	; 2
    1a7e:	90 93 17 01 	sts	0x0117, r25
    1a82:	80 93 16 01 	sts	0x0116, r24
				new_state = SOUND_PLAY;
    1a86:	21 e0       	ldi	r18, 0x01	; 1
    1a88:	07 c0       	rjmp	.+14     	; 0x1a98 <__vector_3+0xe2>
			}
			break;
			default:
			// Disable OCR1A output
			TCCR1A &= ~(1<<COM1A0 | 1<<COM1A1);
    1a8a:	8f b5       	in	r24, 0x2f	; 47
    1a8c:	8f 73       	andi	r24, 0x3F	; 63
    1a8e:	8f bd       	out	0x2f, r24	; 47
    1a90:	03 c0       	rjmp	.+6      	; 0x1a98 <__vector_3+0xe2>
			p_melody = NULL;				// Beeper mode
			break;
		#endif
		case SOUND_PLAY:
			if (--note_time_counter == 0)
				new_state = SOUND_GET_NEXT_TONE;
    1a92:	25 e0       	ldi	r18, 0x05	; 5
    1a94:	01 c0       	rjmp	.+2      	; 0x1a98 <__vector_3+0xe2>
			break;
		case SOUND_APPLY_TONE:
			if (tone.duration == 0)
			{
				// Finished
				new_state = SOUND_OFF;
    1a96:	20 e0       	ldi	r18, 0x00	; 0
			default:
			// Disable OCR1A output
			TCCR1A &= ~(1<<COM1A0 | 1<<COM1A1);
			break;
	}
	sound_state = new_state;
    1a98:	20 93 11 01 	sts	0x0111, r18
	
	// Do sound stuff
	Sound_Process();
	
	// Process menu update timer
	processSoftTimer8b(&menuUpdateTimer);	
    1a9c:	89 e8       	ldi	r24, 0x89	; 137
    1a9e:	90 e0       	ldi	r25, 0x00	; 0
    1aa0:	f4 de       	rcall	.-536    	; 0x188a <processSoftTimer8b>
	
	// Start ADC conversion 
	ADCSRA |= (1<<ADSC);
    1aa2:	36 9a       	sbi	0x06, 6	; 6
}
    1aa4:	ff 91       	pop	r31
    1aa6:	ef 91       	pop	r30
    1aa8:	bf 91       	pop	r27
    1aaa:	af 91       	pop	r26
    1aac:	9f 91       	pop	r25
    1aae:	8f 91       	pop	r24
    1ab0:	7f 91       	pop	r23
    1ab2:	6f 91       	pop	r22
    1ab4:	5f 91       	pop	r21
    1ab6:	4f 91       	pop	r20
    1ab8:	3f 91       	pop	r19
    1aba:	2f 91       	pop	r18
    1abc:	0f 90       	pop	r0
    1abe:	0f be       	out	0x3f, r0	; 63
    1ac0:	0f 90       	pop	r0
    1ac2:	1f 90       	pop	r1
    1ac4:	18 95       	reti

00001ac6 <Sound_Play>:
}
#endif

void Sound_Play(const tone_t* p_melody)
{
	if ((p.sound_enable) || (SoundEnable_override))
    1ac6:	20 91 95 01 	lds	r18, 0x0195
    1aca:	21 11       	cpse	r18, r1
    1acc:	04 c0       	rjmp	.+8      	; 0x1ad6 <Sound_Play+0x10>
    1ace:	20 91 1a 01 	lds	r18, 0x011A
    1ad2:	22 23       	and	r18, r18
    1ad4:	49 f0       	breq	.+18     	; 0x1ae8 <Sound_Play+0x22>
	{
		new_melody =  p_melody;
    1ad6:	90 93 13 01 	sts	0x0113, r25
    1ada:	80 93 12 01 	sts	0x0112, r24
		sound_state = SOUND_START_NEW;		// No need to disable interrupts - atomic operation
    1ade:	83 e0       	ldi	r24, 0x03	; 3
    1ae0:	80 93 11 01 	sts	0x0111, r24
		SoundEnable_override = 0;
    1ae4:	10 92 1a 01 	sts	0x011A, r1
    1ae8:	08 95       	ret

00001aea <Sound_OverrideDisable>:
	sound_state = SOUND_OFF;
}

void Sound_OverrideDisable(void)
{
	SoundEnable_override = 1;
    1aea:	81 e0       	ldi	r24, 0x01	; 1
    1aec:	80 93 1a 01 	sts	0x011A, r24
    1af0:	08 95       	ret

00001af2 <USART_send>:



void USART_send( uint8_t data )
{
	UCSRA |= (1<<TXC);                 // Clear flag
    1af2:	5e 9a       	sbi	0x0b, 6	; 11
	UDR = data;
    1af4:	8c b9       	out	0x0c, r24	; 12
	while ( !(UCSRA & (1<<TXC)) );  // Wait
    1af6:	5e 9b       	sbis	0x0b, 6	; 11
    1af8:	fe cf       	rjmp	.-4      	; 0x1af6 <USART_send+0x4>
}
    1afa:	08 95       	ret

00001afc <USART_sendstr>:


void USART_sendstr(char* str)
{
    1afc:	1f 93       	push	r17
    1afe:	cf 93       	push	r28
    1b00:	df 93       	push	r29
    1b02:	ec 01       	movw	r28, r24
	uint8_t i = 0;
    1b04:	10 e0       	ldi	r17, 0x00	; 0
	while (str[i])
    1b06:	02 c0       	rjmp	.+4      	; 0x1b0c <USART_sendstr+0x10>
	{
		USART_send(str[i++]);
    1b08:	1f 5f       	subi	r17, 0xFF	; 255
    1b0a:	f3 df       	rcall	.-26     	; 0x1af2 <USART_send>


void USART_sendstr(char* str)
{
	uint8_t i = 0;
	while (str[i])
    1b0c:	fe 01       	movw	r30, r28
    1b0e:	e1 0f       	add	r30, r17
    1b10:	f1 1d       	adc	r31, r1
    1b12:	80 81       	ld	r24, Z
    1b14:	81 11       	cpse	r24, r1
    1b16:	f8 cf       	rjmp	.-16     	; 0x1b08 <USART_sendstr+0xc>
	{
		USART_send(str[i++]);
	}
}
    1b18:	df 91       	pop	r29
    1b1a:	cf 91       	pop	r28
    1b1c:	1f 91       	pop	r17
    1b1e:	08 95       	ret

00001b20 <__udivmodqi4>:
    1b20:	99 1b       	sub	r25, r25
    1b22:	79 e0       	ldi	r23, 0x09	; 9
    1b24:	04 c0       	rjmp	.+8      	; 0x1b2e <__udivmodqi4_ep>

00001b26 <__udivmodqi4_loop>:
    1b26:	99 1f       	adc	r25, r25
    1b28:	96 17       	cp	r25, r22
    1b2a:	08 f0       	brcs	.+2      	; 0x1b2e <__udivmodqi4_ep>
    1b2c:	96 1b       	sub	r25, r22

00001b2e <__udivmodqi4_ep>:
    1b2e:	88 1f       	adc	r24, r24
    1b30:	7a 95       	dec	r23
    1b32:	c9 f7       	brne	.-14     	; 0x1b26 <__udivmodqi4_loop>
    1b34:	80 95       	com	r24
    1b36:	08 95       	ret

00001b38 <__divmodhi4>:
    1b38:	97 fb       	bst	r25, 7
    1b3a:	07 2e       	mov	r0, r23
    1b3c:	16 f4       	brtc	.+4      	; 0x1b42 <__divmodhi4+0xa>
    1b3e:	00 94       	com	r0
    1b40:	06 d0       	rcall	.+12     	; 0x1b4e <__divmodhi4_neg1>
    1b42:	77 fd       	sbrc	r23, 7
    1b44:	08 d0       	rcall	.+16     	; 0x1b56 <__divmodhi4_neg2>
    1b46:	48 d0       	rcall	.+144    	; 0x1bd8 <__udivmodhi4>
    1b48:	07 fc       	sbrc	r0, 7
    1b4a:	05 d0       	rcall	.+10     	; 0x1b56 <__divmodhi4_neg2>
    1b4c:	3e f4       	brtc	.+14     	; 0x1b5c <__divmodhi4_exit>

00001b4e <__divmodhi4_neg1>:
    1b4e:	90 95       	com	r25
    1b50:	81 95       	neg	r24
    1b52:	9f 4f       	sbci	r25, 0xFF	; 255
    1b54:	08 95       	ret

00001b56 <__divmodhi4_neg2>:
    1b56:	70 95       	com	r23
    1b58:	61 95       	neg	r22
    1b5a:	7f 4f       	sbci	r23, 0xFF	; 255

00001b5c <__divmodhi4_exit>:
    1b5c:	08 95       	ret

00001b5e <__divmodsi4>:
    1b5e:	05 2e       	mov	r0, r21
    1b60:	97 fb       	bst	r25, 7
    1b62:	16 f4       	brtc	.+4      	; 0x1b68 <__divmodsi4+0xa>
    1b64:	00 94       	com	r0
    1b66:	06 d0       	rcall	.+12     	; 0x1b74 <__divmodsi4_neg1>
    1b68:	57 fd       	sbrc	r21, 7
    1b6a:	0c d0       	rcall	.+24     	; 0x1b84 <__divmodsi4_neg2>
    1b6c:	49 d0       	rcall	.+146    	; 0x1c00 <__udivmodsi4>
    1b6e:	07 fc       	sbrc	r0, 7
    1b70:	09 d0       	rcall	.+18     	; 0x1b84 <__divmodsi4_neg2>
    1b72:	7e f4       	brtc	.+30     	; 0x1b92 <__divmodsi4_exit>

00001b74 <__divmodsi4_neg1>:
    1b74:	90 95       	com	r25
    1b76:	80 95       	com	r24
    1b78:	70 95       	com	r23
    1b7a:	61 95       	neg	r22
    1b7c:	7f 4f       	sbci	r23, 0xFF	; 255
    1b7e:	8f 4f       	sbci	r24, 0xFF	; 255
    1b80:	9f 4f       	sbci	r25, 0xFF	; 255
    1b82:	08 95       	ret

00001b84 <__divmodsi4_neg2>:
    1b84:	50 95       	com	r21
    1b86:	40 95       	com	r20
    1b88:	30 95       	com	r19
    1b8a:	21 95       	neg	r18
    1b8c:	3f 4f       	sbci	r19, 0xFF	; 255
    1b8e:	4f 4f       	sbci	r20, 0xFF	; 255
    1b90:	5f 4f       	sbci	r21, 0xFF	; 255

00001b92 <__divmodsi4_exit>:
    1b92:	08 95       	ret

00001b94 <__mulhisi3>:
    1b94:	05 d0       	rcall	.+10     	; 0x1ba0 <__umulhisi3>
    1b96:	33 23       	and	r19, r19
    1b98:	12 f4       	brpl	.+4      	; 0x1b9e <__mulhisi3+0xa>
    1b9a:	8a 1b       	sub	r24, r26
    1b9c:	9b 0b       	sbc	r25, r27
    1b9e:	0d c0       	rjmp	.+26     	; 0x1bba <__usmulhisi3_tail>

00001ba0 <__umulhisi3>:
    1ba0:	a2 9f       	mul	r26, r18
    1ba2:	b0 01       	movw	r22, r0
    1ba4:	b3 9f       	mul	r27, r19
    1ba6:	c0 01       	movw	r24, r0
    1ba8:	a3 9f       	mul	r26, r19
    1baa:	01 d0       	rcall	.+2      	; 0x1bae <__umulhisi3+0xe>
    1bac:	b2 9f       	mul	r27, r18
    1bae:	70 0d       	add	r23, r0
    1bb0:	81 1d       	adc	r24, r1
    1bb2:	11 24       	eor	r1, r1
    1bb4:	91 1d       	adc	r25, r1
    1bb6:	08 95       	ret

00001bb8 <__usmulhisi3>:
    1bb8:	f3 df       	rcall	.-26     	; 0x1ba0 <__umulhisi3>

00001bba <__usmulhisi3_tail>:
    1bba:	b7 ff       	sbrs	r27, 7
    1bbc:	08 95       	ret
    1bbe:	82 1b       	sub	r24, r18
    1bc0:	93 0b       	sbc	r25, r19
    1bc2:	08 95       	ret

00001bc4 <__muluhisi3>:
    1bc4:	ed df       	rcall	.-38     	; 0x1ba0 <__umulhisi3>
    1bc6:	a5 9f       	mul	r26, r21
    1bc8:	90 0d       	add	r25, r0
    1bca:	b4 9f       	mul	r27, r20
    1bcc:	90 0d       	add	r25, r0
    1bce:	a4 9f       	mul	r26, r20
    1bd0:	80 0d       	add	r24, r0
    1bd2:	91 1d       	adc	r25, r1
    1bd4:	11 24       	eor	r1, r1
    1bd6:	08 95       	ret

00001bd8 <__udivmodhi4>:
    1bd8:	aa 1b       	sub	r26, r26
    1bda:	bb 1b       	sub	r27, r27
    1bdc:	51 e1       	ldi	r21, 0x11	; 17
    1bde:	07 c0       	rjmp	.+14     	; 0x1bee <__udivmodhi4_ep>

00001be0 <__udivmodhi4_loop>:
    1be0:	aa 1f       	adc	r26, r26
    1be2:	bb 1f       	adc	r27, r27
    1be4:	a6 17       	cp	r26, r22
    1be6:	b7 07       	cpc	r27, r23
    1be8:	10 f0       	brcs	.+4      	; 0x1bee <__udivmodhi4_ep>
    1bea:	a6 1b       	sub	r26, r22
    1bec:	b7 0b       	sbc	r27, r23

00001bee <__udivmodhi4_ep>:
    1bee:	88 1f       	adc	r24, r24
    1bf0:	99 1f       	adc	r25, r25
    1bf2:	5a 95       	dec	r21
    1bf4:	a9 f7       	brne	.-22     	; 0x1be0 <__udivmodhi4_loop>
    1bf6:	80 95       	com	r24
    1bf8:	90 95       	com	r25
    1bfa:	bc 01       	movw	r22, r24
    1bfc:	cd 01       	movw	r24, r26
    1bfe:	08 95       	ret

00001c00 <__udivmodsi4>:
    1c00:	a1 e2       	ldi	r26, 0x21	; 33
    1c02:	1a 2e       	mov	r1, r26
    1c04:	aa 1b       	sub	r26, r26
    1c06:	bb 1b       	sub	r27, r27
    1c08:	fd 01       	movw	r30, r26
    1c0a:	0d c0       	rjmp	.+26     	; 0x1c26 <__udivmodsi4_ep>

00001c0c <__udivmodsi4_loop>:
    1c0c:	aa 1f       	adc	r26, r26
    1c0e:	bb 1f       	adc	r27, r27
    1c10:	ee 1f       	adc	r30, r30
    1c12:	ff 1f       	adc	r31, r31
    1c14:	a2 17       	cp	r26, r18
    1c16:	b3 07       	cpc	r27, r19
    1c18:	e4 07       	cpc	r30, r20
    1c1a:	f5 07       	cpc	r31, r21
    1c1c:	20 f0       	brcs	.+8      	; 0x1c26 <__udivmodsi4_ep>
    1c1e:	a2 1b       	sub	r26, r18
    1c20:	b3 0b       	sbc	r27, r19
    1c22:	e4 0b       	sbc	r30, r20
    1c24:	f5 0b       	sbc	r31, r21

00001c26 <__udivmodsi4_ep>:
    1c26:	66 1f       	adc	r22, r22
    1c28:	77 1f       	adc	r23, r23
    1c2a:	88 1f       	adc	r24, r24
    1c2c:	99 1f       	adc	r25, r25
    1c2e:	1a 94       	dec	r1
    1c30:	69 f7       	brne	.-38     	; 0x1c0c <__udivmodsi4_loop>
    1c32:	60 95       	com	r22
    1c34:	70 95       	com	r23
    1c36:	80 95       	com	r24
    1c38:	90 95       	com	r25
    1c3a:	9b 01       	movw	r18, r22
    1c3c:	ac 01       	movw	r20, r24
    1c3e:	bd 01       	movw	r22, r26
    1c40:	cf 01       	movw	r24, r30
    1c42:	08 95       	ret

00001c44 <memcpy_P>:
    1c44:	fb 01       	movw	r30, r22
    1c46:	dc 01       	movw	r26, r24
    1c48:	02 c0       	rjmp	.+4      	; 0x1c4e <memcpy_P+0xa>
    1c4a:	05 90       	lpm	r0, Z+
    1c4c:	0d 92       	st	X+, r0
    1c4e:	41 50       	subi	r20, 0x01	; 1
    1c50:	50 40       	sbci	r21, 0x00	; 0
    1c52:	d8 f7       	brcc	.-10     	; 0x1c4a <memcpy_P+0x6>
    1c54:	08 95       	ret

00001c56 <__eerd_block_m8>:
    1c56:	dc 01       	movw	r26, r24
    1c58:	cb 01       	movw	r24, r22

00001c5a <__eerd_blraw_m8>:
    1c5a:	fc 01       	movw	r30, r24
    1c5c:	e1 99       	sbic	0x1c, 1	; 28
    1c5e:	fe cf       	rjmp	.-4      	; 0x1c5c <__eerd_blraw_m8+0x2>
    1c60:	06 c0       	rjmp	.+12     	; 0x1c6e <__eerd_blraw_m8+0x14>
    1c62:	ff bb       	out	0x1f, r31	; 31
    1c64:	ee bb       	out	0x1e, r30	; 30
    1c66:	e0 9a       	sbi	0x1c, 0	; 28
    1c68:	31 96       	adiw	r30, 0x01	; 1
    1c6a:	0d b2       	in	r0, 0x1d	; 29
    1c6c:	0d 92       	st	X+, r0
    1c6e:	41 50       	subi	r20, 0x01	; 1
    1c70:	50 40       	sbci	r21, 0x00	; 0
    1c72:	b8 f7       	brcc	.-18     	; 0x1c62 <__eerd_blraw_m8+0x8>
    1c74:	08 95       	ret

00001c76 <__eerd_byte_m8>:
    1c76:	e1 99       	sbic	0x1c, 1	; 28
    1c78:	fe cf       	rjmp	.-4      	; 0x1c76 <__eerd_byte_m8>
    1c7a:	9f bb       	out	0x1f, r25	; 31
    1c7c:	8e bb       	out	0x1e, r24	; 30
    1c7e:	e0 9a       	sbi	0x1c, 0	; 28
    1c80:	99 27       	eor	r25, r25
    1c82:	8d b3       	in	r24, 0x1d	; 29
    1c84:	08 95       	ret

00001c86 <__eeupd_block_m8>:
    1c86:	dc 01       	movw	r26, r24
    1c88:	a4 0f       	add	r26, r20
    1c8a:	b5 1f       	adc	r27, r21
    1c8c:	41 50       	subi	r20, 0x01	; 1
    1c8e:	50 40       	sbci	r21, 0x00	; 0
    1c90:	40 f0       	brcs	.+16     	; 0x1ca2 <__eeupd_block_m8+0x1c>
    1c92:	cb 01       	movw	r24, r22
    1c94:	84 0f       	add	r24, r20
    1c96:	95 1f       	adc	r25, r21
    1c98:	2e 91       	ld	r18, -X
    1c9a:	05 d0       	rcall	.+10     	; 0x1ca6 <__eeupd_r18_m8>
    1c9c:	41 50       	subi	r20, 0x01	; 1
    1c9e:	50 40       	sbci	r21, 0x00	; 0
    1ca0:	d8 f7       	brcc	.-10     	; 0x1c98 <__eeupd_block_m8+0x12>
    1ca2:	08 95       	ret

00001ca4 <__eeupd_byte_m8>:
    1ca4:	26 2f       	mov	r18, r22

00001ca6 <__eeupd_r18_m8>:
    1ca6:	e1 99       	sbic	0x1c, 1	; 28
    1ca8:	fe cf       	rjmp	.-4      	; 0x1ca6 <__eeupd_r18_m8>
    1caa:	9f bb       	out	0x1f, r25	; 31
    1cac:	8e bb       	out	0x1e, r24	; 30
    1cae:	e0 9a       	sbi	0x1c, 0	; 28
    1cb0:	01 97       	sbiw	r24, 0x01	; 1
    1cb2:	0d b2       	in	r0, 0x1d	; 29
    1cb4:	02 16       	cp	r0, r18
    1cb6:	31 f0       	breq	.+12     	; 0x1cc4 <__eeupd_r18_m8+0x1e>
    1cb8:	2d bb       	out	0x1d, r18	; 29
    1cba:	0f b6       	in	r0, 0x3f	; 63
    1cbc:	f8 94       	cli
    1cbe:	e2 9a       	sbi	0x1c, 2	; 28
    1cc0:	e1 9a       	sbi	0x1c, 1	; 28
    1cc2:	0f be       	out	0x3f, r0	; 63
    1cc4:	08 95       	ret

00001cc6 <_exit>:
    1cc6:	f8 94       	cli

00001cc8 <__stop_program>:
    1cc8:	ff cf       	rjmp	.-2      	; 0x1cc8 <__stop_program>
