
pid1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001b44  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000064  00800060  00001b44  00001bf8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000090  008000c4  008000c4  00001c5c  2**0
                  ALLOC
  3 .eeprom       0000000a  00810000  00810000  00001c5c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         000007d4  00000000  00000000  00001c68  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      000000e3  00000000  00000000  0000243c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      0000002f  00000000  00000000  0000251f  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 000003c0  00000000  00000000  0000254e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   000039ed  00000000  00000000  0000290e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000134b  00000000  00000000  000062fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   000017bd  00000000  00000000  00007646  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  000008d4  00000000  00000000  00008e04  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000eef  00000000  00000000  000096d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00001b78  00000000  00000000  0000a5c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000300  00000000  00000000  0000c13f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	93 c0       	rjmp	.+294    	; 0x128 <__ctors_end>
       2:	ad c0       	rjmp	.+346    	; 0x15e <__bad_interrupt>
       4:	ac c0       	rjmp	.+344    	; 0x15e <__bad_interrupt>
       6:	b4 cc       	rjmp	.-1688   	; 0xfffff970 <__eeprom_end+0xff7ef966>
       8:	aa c0       	rjmp	.+340    	; 0x15e <__bad_interrupt>
       a:	a9 c0       	rjmp	.+338    	; 0x15e <__bad_interrupt>
       c:	a8 c0       	rjmp	.+336    	; 0x15e <__bad_interrupt>
       e:	a7 c0       	rjmp	.+334    	; 0x15e <__bad_interrupt>
      10:	a6 c0       	rjmp	.+332    	; 0x15e <__bad_interrupt>
      12:	46 cb       	rjmp	.-2420   	; 0xfffff6a0 <__eeprom_end+0xff7ef696>
      14:	a4 c0       	rjmp	.+328    	; 0x15e <__bad_interrupt>
      16:	a3 c0       	rjmp	.+326    	; 0x15e <__bad_interrupt>
      18:	a2 c0       	rjmp	.+324    	; 0x15e <__bad_interrupt>
      1a:	a1 c0       	rjmp	.+322    	; 0x15e <__bad_interrupt>
      1c:	9c c1       	rjmp	.+824    	; 0x356 <__vector_14>
      1e:	9f c0       	rjmp	.+318    	; 0x15e <__bad_interrupt>
      20:	1d cb       	rjmp	.-2502   	; 0xfffff65c <__eeprom_end+0xff7ef652>
      22:	9d c0       	rjmp	.+314    	; 0x15e <__bad_interrupt>
      24:	9c c0       	rjmp	.+312    	; 0x15e <__bad_interrupt>

00000026 <menuFunctionSet>:
      26:	01 7a 08 93 06 77 07 03 74 07 26 08 e6 05 02 23     .z...w..t.&....#
      36:	08 be 07 6c 07 05 5a 07 79 07 00 00 0b ec 05 79     ...l..Z.y......y
      46:	07 fa 05 04 5a 07 42 06 00 00 0c ec 05 42 06 fa     ....Z.B......B..
      56:	05 06 62 07 07 07 00 00 09 ec 05 07 07 fa 05 07     ..b.............
      66:	62 07 be 06 00 00 0a ec 05 be 06 fa 05 08 35 06     b.............5.
      76:	00 06 00 00 0d 28 06 00 06 00 00 0e 54 07 04 06     .....(......T...
      86:	50 07                                               P.

00000088 <menuJumpSet>:
      88:	01 06 00 03 a8 01 00 01 02 40 01 00 02 05 28 02     .........@....(.
      98:	00 01 01 80 03 00 83 01 40 05 00 82 01 00 05 04     ........@.......
      a8:	00 04 68 05 02 00 07 a8 05 00 01 0b 28 0b 00 83     ..h.........(...
      b8:	05 28 04 00 82 01 00 04 04 00 06 68 04 02 00 05     .(.........h....
      c8:	a8 04 00 01 0c 28 0c 00 83 04 28 06 00 82 01 00     .....(....(.....
      d8:	06 04 00 07 68 06 02 00 04 a8 06 00 01 09 00 07     ....h...........
      e8:	00 82 01 00 07 04 00 05 68 07 02 00 06 a8 07 00     ........h.......
      f8:	01 0a 00 09 00 02 06 28 09 00 01 08 14 08 00 83     .......(........
     108:	01 00 0a 00 02 07 28 0a 00 01 0d 14 0d 00 83 01     ......(.........
     118:	00 01 00 40 0e 00 02 00 40 0e 00 0e f6 01 01 00     ...@....@.......

00000128 <__ctors_end>:
     128:	11 24       	eor	r1, r1
     12a:	1f be       	out	0x3f, r1	; 63
     12c:	cf e5       	ldi	r28, 0x5F	; 95
     12e:	d4 e0       	ldi	r29, 0x04	; 4
     130:	de bf       	out	0x3e, r29	; 62
     132:	cd bf       	out	0x3d, r28	; 61

00000134 <__do_copy_data>:
     134:	10 e0       	ldi	r17, 0x00	; 0
     136:	a0 e6       	ldi	r26, 0x60	; 96
     138:	b0 e0       	ldi	r27, 0x00	; 0
     13a:	e4 e4       	ldi	r30, 0x44	; 68
     13c:	fb e1       	ldi	r31, 0x1B	; 27
     13e:	02 c0       	rjmp	.+4      	; 0x144 <__do_copy_data+0x10>
     140:	05 90       	lpm	r0, Z+
     142:	0d 92       	st	X+, r0
     144:	a4 3c       	cpi	r26, 0xC4	; 196
     146:	b1 07       	cpc	r27, r17
     148:	d9 f7       	brne	.-10     	; 0x140 <__do_copy_data+0xc>

0000014a <__do_clear_bss>:
     14a:	21 e0       	ldi	r18, 0x01	; 1
     14c:	a4 ec       	ldi	r26, 0xC4	; 196
     14e:	b0 e0       	ldi	r27, 0x00	; 0
     150:	01 c0       	rjmp	.+2      	; 0x154 <.do_clear_bss_start>

00000152 <.do_clear_bss_loop>:
     152:	1d 92       	st	X+, r1

00000154 <.do_clear_bss_start>:
     154:	a4 35       	cpi	r26, 0x54	; 84
     156:	b2 07       	cpc	r27, r18
     158:	e1 f7       	brne	.-8      	; 0x152 <.do_clear_bss_loop>
     15a:	e0 d8       	rcall	.-3648   	; 0xfffff31c <__eeprom_end+0xff7ef312>
     15c:	f1 cc       	rjmp	.-1566   	; 0xfffffb40 <__eeprom_end+0xff7efb36>

0000015e <__bad_interrupt>:
     15e:	50 cf       	rjmp	.-352    	; 0x0 <__vectors>

00000160 <conv_ADC_to_Celsius>:
//---------------------------------------------//
//---------------------------------------------//


uint16_t conv_ADC_to_Celsius(uint16_t adc_value)
{	
     160:	0f 93       	push	r16
     162:	1f 93       	push	r17
	return (uint16_t)(((int32_t)adc_value * k_norm + offset_norm) / (COEFF_SCALE));
     164:	20 91 c4 00 	lds	r18, 0x00C4
     168:	30 91 c5 00 	lds	r19, 0x00C5
     16c:	40 91 c6 00 	lds	r20, 0x00C6
     170:	50 91 c7 00 	lds	r21, 0x00C7
     174:	dc 01       	movw	r26, r24
     176:	ca dc       	rcall	.-1644   	; 0xfffffb0c <__eeprom_end+0xff7efb02>
     178:	00 91 c8 00 	lds	r16, 0x00C8
     17c:	10 91 c9 00 	lds	r17, 0x00C9
     180:	20 91 ca 00 	lds	r18, 0x00CA
     184:	30 91 cb 00 	lds	r19, 0x00CB
     188:	60 0f       	add	r22, r16
     18a:	71 1f       	adc	r23, r17
     18c:	82 1f       	adc	r24, r18
     18e:	93 1f       	adc	r25, r19
     190:	28 ee       	ldi	r18, 0xE8	; 232
     192:	33 e0       	ldi	r19, 0x03	; 3
     194:	40 e0       	ldi	r20, 0x00	; 0
     196:	50 e0       	ldi	r21, 0x00	; 0
     198:	8c dc       	rcall	.-1768   	; 0xfffffab2 <__eeprom_end+0xff7efaa8>
}
     19a:	c9 01       	movw	r24, r18
     19c:	1f 91       	pop	r17
     19e:	0f 91       	pop	r16
     1a0:	08 95       	ret

000001a2 <conv_Celsius_to_ADC>:

uint16_t conv_Celsius_to_ADC(uint16_t degree_value)
{
     1a2:	0f 93       	push	r16
     1a4:	1f 93       	push	r17
	degree_value += 1;
     1a6:	9c 01       	movw	r18, r24
     1a8:	2f 5f       	subi	r18, 0xFF	; 255
     1aa:	3f 4f       	sbci	r19, 0xFF	; 255
	return (uint16_t)(((int32_t)degree_value * COEFF_SCALE - offset_norm) / k_norm);
     1ac:	a8 ee       	ldi	r26, 0xE8	; 232
     1ae:	b3 e0       	ldi	r27, 0x03	; 3
     1b0:	9b dc       	rcall	.-1738   	; 0xfffffae8 <__eeprom_end+0xff7efade>
     1b2:	00 91 c8 00 	lds	r16, 0x00C8
     1b6:	10 91 c9 00 	lds	r17, 0x00C9
     1ba:	20 91 ca 00 	lds	r18, 0x00CA
     1be:	30 91 cb 00 	lds	r19, 0x00CB
     1c2:	60 1b       	sub	r22, r16
     1c4:	71 0b       	sbc	r23, r17
     1c6:	82 0b       	sbc	r24, r18
     1c8:	93 0b       	sbc	r25, r19
     1ca:	20 91 c4 00 	lds	r18, 0x00C4
     1ce:	30 91 c5 00 	lds	r19, 0x00C5
     1d2:	40 91 c6 00 	lds	r20, 0x00C6
     1d6:	50 91 c7 00 	lds	r21, 0x00C7
     1da:	6b dc       	rcall	.-1834   	; 0xfffffab2 <__eeprom_end+0xff7efaa8>
}
     1dc:	c9 01       	movw	r24, r18
     1de:	1f 91       	pop	r17
     1e0:	0f 91       	pop	r16
     1e2:	08 95       	ret

000001e4 <calculateCoeffs>:

void calculateCoeffs(void)
{
     1e4:	8f 92       	push	r8
     1e6:	9f 92       	push	r9
     1e8:	af 92       	push	r10
     1ea:	bf 92       	push	r11
     1ec:	cf 92       	push	r12
     1ee:	df 92       	push	r13
     1f0:	ef 92       	push	r14
     1f2:	ff 92       	push	r15
     1f4:	cf 93       	push	r28
     1f6:	df 93       	push	r29
	k_norm = ((int32_t)(cpoint2 - cpoint1) * COEFF_SCALE) / ((int32_t)(cpoint2_adc - cpoint1_adc));
     1f8:	f0 90 20 01 	lds	r15, 0x0120
     1fc:	a0 91 40 01 	lds	r26, 0x0140
     200:	b0 e0       	ldi	r27, 0x00	; 0
     202:	af 19       	sub	r26, r15
     204:	b1 09       	sbc	r27, r1
     206:	c0 91 38 01 	lds	r28, 0x0138
     20a:	d0 91 39 01 	lds	r29, 0x0139
     20e:	28 ee       	ldi	r18, 0xE8	; 232
     210:	33 e0       	ldi	r19, 0x03	; 3
     212:	76 dc       	rcall	.-1812   	; 0xfffffb00 <__eeprom_end+0xff7efaf6>
     214:	20 91 3c 01 	lds	r18, 0x013C
     218:	30 91 3d 01 	lds	r19, 0x013D
     21c:	2c 1b       	sub	r18, r28
     21e:	3d 0b       	sbc	r19, r29
     220:	40 e0       	ldi	r20, 0x00	; 0
     222:	50 e0       	ldi	r21, 0x00	; 0
     224:	46 dc       	rcall	.-1908   	; 0xfffffab2 <__eeprom_end+0xff7efaa8>
     226:	49 01       	movw	r8, r18
     228:	5a 01       	movw	r10, r20
     22a:	20 93 c4 00 	sts	0x00C4, r18
     22e:	30 93 c5 00 	sts	0x00C5, r19
     232:	40 93 c6 00 	sts	0x00C6, r20
     236:	50 93 c7 00 	sts	0x00C7, r21
	offset_norm = (int32_t)cpoint1 * COEFF_SCALE - (int32_t)cpoint1_adc * k_norm;
     23a:	2f 2d       	mov	r18, r15
     23c:	30 e0       	ldi	r19, 0x00	; 0
     23e:	a8 ee       	ldi	r26, 0xE8	; 232
     240:	b3 e0       	ldi	r27, 0x03	; 3
     242:	52 dc       	rcall	.-1884   	; 0xfffffae8 <__eeprom_end+0xff7efade>
     244:	6b 01       	movw	r12, r22
     246:	7c 01       	movw	r14, r24
     248:	de 01       	movw	r26, r28
     24a:	a5 01       	movw	r20, r10
     24c:	94 01       	movw	r18, r8
     24e:	5e dc       	rcall	.-1860   	; 0xfffffb0c <__eeprom_end+0xff7efb02>
     250:	c6 1a       	sub	r12, r22
     252:	d7 0a       	sbc	r13, r23
     254:	e8 0a       	sbc	r14, r24
     256:	f9 0a       	sbc	r15, r25
     258:	c0 92 c8 00 	sts	0x00C8, r12
     25c:	d0 92 c9 00 	sts	0x00C9, r13
     260:	e0 92 ca 00 	sts	0x00CA, r14
     264:	f0 92 cb 00 	sts	0x00CB, r15
}
     268:	df 91       	pop	r29
     26a:	cf 91       	pop	r28
     26c:	ff 90       	pop	r15
     26e:	ef 90       	pop	r14
     270:	df 90       	pop	r13
     272:	cf 90       	pop	r12
     274:	bf 90       	pop	r11
     276:	af 90       	pop	r10
     278:	9f 90       	pop	r9
     27a:	8f 90       	pop	r8
     27c:	08 95       	ret

0000027e <update_normalized_adc>:


void update_normalized_adc()
{
	// Disable interrupts from ADC - to save data integrity
	ACSR &= ~(1<<ACIE);	
     27e:	43 98       	cbi	0x08, 3	; 8
}

// Get ring buffer normalized value
uint16_t getNormalizedRingU16(RingBufU16_t* bptr)
{
	return 	bptr->summ / bptr->length;
     280:	20 91 60 00 	lds	r18, 0x0060
     284:	30 e0       	ldi	r19, 0x00	; 0
     286:	40 e0       	ldi	r20, 0x00	; 0
     288:	50 e0       	ldi	r21, 0x00	; 0
     28a:	60 91 63 00 	lds	r22, 0x0063
     28e:	70 91 64 00 	lds	r23, 0x0064
     292:	80 91 65 00 	lds	r24, 0x0065
     296:	90 91 66 00 	lds	r25, 0x0066
     29a:	e9 db       	rcall	.-2094   	; 0xfffffa6e <__eeprom_end+0xff7efa64>
     29c:	30 93 1d 01 	sts	0x011D, r19
     2a0:	20 93 1c 01 	sts	0x011C, r18
	// Disable interrupts from ADC - to save data integrity
	ACSR &= ~(1<<ACIE);	
	// Get normalized mean window summ
	adc_normalized = (uint16_t)getNormalizedRingU16(&ringBufADC);
	// Enable interrupts from ADC
	ACSR |= (1<<ACIE);
     2a4:	43 9a       	sbi	0x08, 3	; 8
	// Convert to Celsius degree
	adc_celsius = conv_ADC_to_Celsius(adc_normalized);
     2a6:	c9 01       	movw	r24, r18
     2a8:	5b df       	rcall	.-330    	; 0x160 <conv_ADC_to_Celsius>
     2aa:	90 93 1f 01 	sts	0x011F, r25
     2ae:	80 93 1e 01 	sts	0x011E, r24
     2b2:	08 95       	ret

000002b4 <addToRingU16>:
//---------------------------------------------//
//---------------------------------------------//

// Ring buffer main function - add new data and update summ
void addToRingU16(RingBufU16_t* bptr, uint16_t sample)
{
     2b4:	ff 92       	push	r15
     2b6:	0f 93       	push	r16
     2b8:	1f 93       	push	r17
     2ba:	cf 93       	push	r28
     2bc:	df 93       	push	r29
     2be:	fc 01       	movw	r30, r24
     2c0:	cb 01       	movw	r24, r22
	if (bptr->stat == RNORM)
     2c2:	20 85       	ldd	r18, Z+8	; 0x08
     2c4:	21 11       	cpse	r18, r1
     2c6:	18 c0       	rjmp	.+48     	; 0x2f8 <addToRingU16+0x44>
	{
		bptr->summ -= bptr->data[bptr->curr_pos];
     2c8:	27 81       	ldd	r18, Z+7	; 0x07
     2ca:	41 81       	ldd	r20, Z+1	; 0x01
     2cc:	32 81       	ldd	r19, Z+2	; 0x02
     2ce:	a4 2f       	mov	r26, r20
     2d0:	b3 2f       	mov	r27, r19
     2d2:	a2 0f       	add	r26, r18
     2d4:	b1 1d       	adc	r27, r1
     2d6:	a2 0f       	add	r26, r18
     2d8:	b1 1d       	adc	r27, r1
     2da:	2d 91       	ld	r18, X+
     2dc:	3c 91       	ld	r19, X
     2de:	43 81       	ldd	r20, Z+3	; 0x03
     2e0:	54 81       	ldd	r21, Z+4	; 0x04
     2e2:	65 81       	ldd	r22, Z+5	; 0x05
     2e4:	76 81       	ldd	r23, Z+6	; 0x06
     2e6:	42 1b       	sub	r20, r18
     2e8:	53 0b       	sbc	r21, r19
     2ea:	61 09       	sbc	r22, r1
     2ec:	71 09       	sbc	r23, r1
     2ee:	43 83       	std	Z+3, r20	; 0x03
     2f0:	54 83       	std	Z+4, r21	; 0x04
     2f2:	65 83       	std	Z+5, r22	; 0x05
     2f4:	76 83       	std	Z+6, r23	; 0x06
     2f6:	05 c0       	rjmp	.+10     	; 0x302 <addToRingU16+0x4e>
	}
	else
	{
		bptr->curr_pos = 0;
     2f8:	17 82       	std	Z+7, r1	; 0x07
		bptr->summ = 0;
     2fa:	13 82       	std	Z+3, r1	; 0x03
     2fc:	14 82       	std	Z+4, r1	; 0x04
     2fe:	15 82       	std	Z+5, r1	; 0x05
     300:	16 82       	std	Z+6, r1	; 0x06
	}
	do	
	{
		bptr->data[bptr->curr_pos++] = sample;
     302:	d1 81       	ldd	r29, Z+1	; 0x01
     304:	f2 80       	ldd	r15, Z+2	; 0x02
     306:	43 81       	ldd	r20, Z+3	; 0x03
     308:	54 81       	ldd	r21, Z+4	; 0x04
     30a:	65 81       	ldd	r22, Z+5	; 0x05
     30c:	76 81       	ldd	r23, Z+6	; 0x06
		bptr->summ += sample;
     30e:	8c 01       	movw	r16, r24
     310:	20 e0       	ldi	r18, 0x00	; 0
     312:	30 e0       	ldi	r19, 0x00	; 0
		bptr->curr_pos = 0;
		bptr->summ = 0;
	}
	do	
	{
		bptr->data[bptr->curr_pos++] = sample;
     314:	c7 81       	ldd	r28, Z+7	; 0x07
     316:	ad 2f       	mov	r26, r29
     318:	bf 2d       	mov	r27, r15
     31a:	ac 0f       	add	r26, r28
     31c:	b1 1d       	adc	r27, r1
     31e:	ac 0f       	add	r26, r28
     320:	b1 1d       	adc	r27, r1
     322:	8d 93       	st	X+, r24
     324:	9c 93       	st	X, r25
     326:	cf 5f       	subi	r28, 0xFF	; 255
     328:	c7 83       	std	Z+7, r28	; 0x07
//---------------------------------------------//
//---------------------------------------------//
//---------------------------------------------//

// Ring buffer main function - add new data and update summ
void addToRingU16(RingBufU16_t* bptr, uint16_t sample)
     32a:	40 0f       	add	r20, r16
     32c:	51 1f       	adc	r21, r17
     32e:	62 1f       	adc	r22, r18
     330:	73 1f       	adc	r23, r19
	}
	do	
	{
		bptr->data[bptr->curr_pos++] = sample;
		bptr->summ += sample;
		if (bptr->curr_pos == bptr->length)	
     332:	a0 81       	ld	r26, Z
     334:	ca 13       	cpse	r28, r26
     336:	02 c0       	rjmp	.+4      	; 0x33c <addToRingU16+0x88>
		{	
			bptr->curr_pos = 0;	
     338:	17 82       	std	Z+7, r1	; 0x07
			bptr->stat = RNORM;
     33a:	10 86       	std	Z+8, r1	; 0x08
		}
	} 
	while (bptr->stat != RNORM);
     33c:	a0 85       	ldd	r26, Z+8	; 0x08
     33e:	a1 11       	cpse	r26, r1
     340:	e9 cf       	rjmp	.-46     	; 0x314 <addToRingU16+0x60>
     342:	43 83       	std	Z+3, r20	; 0x03
     344:	54 83       	std	Z+4, r21	; 0x04
     346:	65 83       	std	Z+5, r22	; 0x05
     348:	76 83       	std	Z+6, r23	; 0x06
}
     34a:	df 91       	pop	r29
     34c:	cf 91       	pop	r28
     34e:	1f 91       	pop	r17
     350:	0f 91       	pop	r16
     352:	ff 90       	pop	r15
     354:	08 95       	ret

00000356 <__vector_14>:




ISR(ADC_vect)
{
     356:	1f 92       	push	r1
     358:	0f 92       	push	r0
     35a:	0f b6       	in	r0, 0x3f	; 63
     35c:	0f 92       	push	r0
     35e:	11 24       	eor	r1, r1
     360:	2f 93       	push	r18
     362:	3f 93       	push	r19
     364:	4f 93       	push	r20
     366:	5f 93       	push	r21
     368:	6f 93       	push	r22
     36a:	7f 93       	push	r23
     36c:	8f 93       	push	r24
     36e:	9f 93       	push	r25
     370:	af 93       	push	r26
     372:	bf 93       	push	r27
     374:	ef 93       	push	r30
     376:	ff 93       	push	r31
	// Get new sample
	uint16_t new_sample = 1024 - ADC;	
     378:	84 b1       	in	r24, 0x04	; 4
     37a:	95 b1       	in	r25, 0x05	; 5
     37c:	60 e0       	ldi	r22, 0x00	; 0
     37e:	74 e0       	ldi	r23, 0x04	; 4
     380:	68 1b       	sub	r22, r24
     382:	79 0b       	sbc	r23, r25
	// Add new sample to the ring buffer
	addToRingU16(&ringBufADC, new_sample);
     384:	80 e6       	ldi	r24, 0x60	; 96
     386:	90 e0       	ldi	r25, 0x00	; 0
     388:	95 df       	rcall	.-214    	; 0x2b4 <addToRingU16>
}	
     38a:	ff 91       	pop	r31
     38c:	ef 91       	pop	r30
     38e:	bf 91       	pop	r27
     390:	af 91       	pop	r26
     392:	9f 91       	pop	r25
     394:	8f 91       	pop	r24
     396:	7f 91       	pop	r23
     398:	6f 91       	pop	r22
     39a:	5f 91       	pop	r21
     39c:	4f 91       	pop	r20
     39e:	3f 91       	pop	r19
     3a0:	2f 91       	pop	r18
     3a2:	0f 90       	pop	r0
     3a4:	0f be       	out	0x3f, r0	; 63
     3a6:	0f 90       	pop	r0
     3a8:	1f 90       	pop	r1
     3aa:	18 95       	reti

000003ac <getNormalizedRingU16>:
}

// Get ring buffer normalized value
uint16_t getNormalizedRingU16(RingBufU16_t* bptr)
{
	return 	bptr->summ / bptr->length;
     3ac:	fc 01       	movw	r30, r24
     3ae:	20 81       	ld	r18, Z
     3b0:	30 e0       	ldi	r19, 0x00	; 0
     3b2:	40 e0       	ldi	r20, 0x00	; 0
     3b4:	50 e0       	ldi	r21, 0x00	; 0
     3b6:	63 81       	ldd	r22, Z+3	; 0x03
     3b8:	74 81       	ldd	r23, Z+4	; 0x04
     3ba:	85 81       	ldd	r24, Z+5	; 0x05
     3bc:	96 81       	ldd	r25, Z+6	; 0x06
     3be:	57 db       	rcall	.-2386   	; 0xfffffa6e <__eeprom_end+0xff7efa64>
}
     3c0:	c9 01       	movw	r24, r18
     3c2:	08 95       	ret

000003c4 <process_buttons>:
	uint8_t raw_delayed_inv;
	static uint8_t press_timer = 0;
	uint8_t long_press_mask;
	uint8_t long_press_event_mask;
	
	raw_delayed = raw_current;
     3c4:	50 91 d2 00 	lds	r21, 0x00D2
	raw_delayed_inv = raw_current_inv;
     3c8:	30 91 69 00 	lds	r19, 0x0069
	raw_current = raw_button_state;
     3cc:	90 91 53 01 	lds	r25, 0x0153
     3d0:	90 93 d2 00 	sts	0x00D2, r25
	raw_current_inv = ~raw_current;
     3d4:	69 2f       	mov	r22, r25
     3d6:	60 95       	com	r22
     3d8:	60 93 69 00 	sts	0x0069, r22
	
	// Must be before press_timer update
	long_press_mask = (press_timer >= LONG_PRESS_DELAY) ? 0xFF : 0x00;
     3dc:	80 91 d3 00 	lds	r24, 0x00D3
     3e0:	8c 30       	cpi	r24, 0x0C	; 12
     3e2:	10 f0       	brcs	.+4      	; 0x3e8 <process_buttons+0x24>
     3e4:	2f ef       	ldi	r18, 0xFF	; 255
     3e6:	01 c0       	rjmp	.+2      	; 0x3ea <process_buttons+0x26>
     3e8:	20 e0       	ldi	r18, 0x00	; 0
	
	if (raw_delayed != raw_current)
     3ea:	59 17       	cp	r21, r25
     3ec:	19 f0       	breq	.+6      	; 0x3f4 <process_buttons+0x30>
	{
		press_timer = 0;
     3ee:	10 92 d3 00 	sts	0x00D3, r1
     3f2:	05 c0       	rjmp	.+10     	; 0x3fe <process_buttons+0x3a>
	}
	else if (press_timer <= LONG_PRESS_DELAY)
     3f4:	8d 30       	cpi	r24, 0x0D	; 13
     3f6:	18 f4       	brcc	.+6      	; 0x3fe <process_buttons+0x3a>
	{
		press_timer++;
     3f8:	8f 5f       	subi	r24, 0xFF	; 255
     3fa:	80 93 d3 00 	sts	0x00D3, r24
	}
	
	// Must after press_timer update
	long_press_event_mask = (press_timer == LONG_PRESS_DELAY) ? 0xFF : 0x00;
     3fe:	70 91 d3 00 	lds	r23, 0x00D3
     402:	7c 30       	cpi	r23, 0x0C	; 12
     404:	11 f4       	brne	.+4      	; 0x40a <process_buttons+0x46>
     406:	4f ef       	ldi	r20, 0xFF	; 255
     408:	01 c0       	rjmp	.+2      	; 0x40c <process_buttons+0x48>
     40a:	40 e0       	ldi	r20, 0x00	; 0
			
	button_action_down = raw_current & raw_delayed_inv;
     40c:	89 2f       	mov	r24, r25
     40e:	83 23       	and	r24, r19
     410:	80 93 cf 00 	sts	0x00CF, r24
			
	if (press_timer > REPEAT_DELAY)
     414:	77 30       	cpi	r23, 0x07	; 7
     416:	08 f0       	brcs	.+2      	; 0x41a <process_buttons+0x56>
		raw_delayed_inv |= 0xFF;
     418:	3f ef       	ldi	r19, 0xFF	; 255
	
	button_action_rep = raw_current & raw_delayed_inv;
     41a:	39 23       	and	r19, r25
     41c:	30 93 ce 00 	sts	0x00CE, r19
	
	button_action_up_short = raw_current_inv & raw_delayed & ~long_press_mask;
     420:	20 95       	com	r18
     422:	56 23       	and	r21, r22
     424:	25 23       	and	r18, r21
     426:	20 93 cd 00 	sts	0x00CD, r18
	//button_action_up_long  = raw_current_inv & raw_delayed & long_press_mask;
	button_action_long  = raw_current & long_press_event_mask;
     42a:	49 23       	and	r20, r25
     42c:	40 93 cc 00 	sts	0x00CC, r20
	
	// Compose button state
	button_state = (button_action_down & (BD_MENU | BD_UP | BD_DOWN | BD_ROTFWD | BD_ROTREV | BD_HEATCTRL | BD_CYCLE));
     430:	87 7f       	andi	r24, 0xF7	; 247
     432:	90 e0       	ldi	r25, 0x00	; 0
	if (button_action_up_short & BD_MENU)
     434:	20 ff       	sbrs	r18, 0
     436:	01 c0       	rjmp	.+2      	; 0x43a <process_buttons+0x76>
		button_state |= BS_MENU;
     438:	91 60       	ori	r25, 0x01	; 1
     43a:	90 93 d1 00 	sts	0x00D1, r25
     43e:	80 93 d0 00 	sts	0x00D0, r24
	//if (button_action_up_long & BD_MENU)
	if (button_action_long & BD_MENU)
     442:	40 ff       	sbrs	r20, 0
     444:	09 c0       	rjmp	.+18     	; 0x458 <process_buttons+0x94>
		button_state |= BL_MENU;
     446:	80 91 d0 00 	lds	r24, 0x00D0
     44a:	90 91 d1 00 	lds	r25, 0x00D1
     44e:	92 60       	ori	r25, 0x02	; 2
     450:	90 93 d1 00 	sts	0x00D1, r25
     454:	80 93 d0 00 	sts	0x00D0, r24
	if (button_action_rep & BD_UP)
     458:	31 ff       	sbrs	r19, 1
     45a:	09 c0       	rjmp	.+18     	; 0x46e <__stack+0xf>
		button_state |= BR_UP;	
     45c:	80 91 d0 00 	lds	r24, 0x00D0
     460:	90 91 d1 00 	lds	r25, 0x00D1
     464:	94 60       	ori	r25, 0x04	; 4
     466:	90 93 d1 00 	sts	0x00D1, r25
     46a:	80 93 d0 00 	sts	0x00D0, r24
	if (button_action_rep & BD_DOWN)
     46e:	32 ff       	sbrs	r19, 2
     470:	09 c0       	rjmp	.+18     	; 0x484 <__stack+0x25>
		button_state |= BR_DOWN;
     472:	80 91 d0 00 	lds	r24, 0x00D0
     476:	90 91 d1 00 	lds	r25, 0x00D1
     47a:	98 60       	ori	r25, 0x08	; 8
     47c:	90 93 d1 00 	sts	0x00D1, r25
     480:	80 93 d0 00 	sts	0x00D0, r24
     484:	08 95       	ret

00000486 <processRollControl>:



// Function to control motor rotation
void processRollControl(void)
{	
     486:	cf 93       	push	r28
     488:	df 93       	push	r29
	uint8_t beepState = 0;
	static uint8_t beepMask = 0x00;
	
	// Process auto power off control
	if (autoPowerOffState & AUTO_POFF_ENTER)
     48a:	80 91 01 01 	lds	r24, 0x0101
     48e:	81 ff       	sbrs	r24, 1
     490:	03 c0       	rjmp	.+6      	; 0x498 <processRollControl+0x12>
	{
		// Disable CYCLE mode
		stopCycleRolling(1);	
     492:	81 e0       	ldi	r24, 0x01	; 1
     494:	8f d8       	rcall	.-3810   	; 0xfffff5b4 <__eeprom_end+0xff7ef5aa>
		goto INDICATE_ROLLSTATE;	
     496:	73 c0       	rjmp	.+230    	; 0x57e <processRollControl+0xf8>
	}
	else if (autoPowerOffState & AUTO_POFF_ACTIVE)
     498:	80 ff       	sbrs	r24, 0
     49a:	0a c0       	rjmp	.+20     	; 0x4b0 <processRollControl+0x2a>
	{
		if (adc_celsius <= POFF_MOTOR_TRESHOLD)
     49c:	80 91 1e 01 	lds	r24, 0x011E
     4a0:	90 91 1f 01 	lds	r25, 0x011F
     4a4:	c3 97       	sbiw	r24, 0x33	; 51
     4a6:	08 f0       	brcs	.+2      	; 0x4aa <processRollControl+0x24>
     4a8:	6a c0       	rjmp	.+212    	; 0x57e <processRollControl+0xf8>
		{
			setMotorDirection(0);		// Stop the motor
     4aa:	80 e0       	ldi	r24, 0x00	; 0
     4ac:	65 d8       	rcall	.-3894   	; 0xfffff578 <__eeprom_end+0xff7ef56e>
     4ae:	67 c0       	rjmp	.+206    	; 0x57e <processRollControl+0xf8>
		}
		goto INDICATE_ROLLSTATE;
	}
	else if (autoPowerOffState & AUTO_POFF_LEAVE)
     4b0:	82 ff       	sbrs	r24, 2
     4b2:	06 c0       	rjmp	.+12     	; 0x4c0 <processRollControl+0x3a>
	{
		if (!(button_action_down & (BD_ROTFWD | BD_ROTREV)))
     4b4:	80 91 cf 00 	lds	r24, 0x00CF
     4b8:	80 73       	andi	r24, 0x30	; 48
     4ba:	11 f4       	brne	.+4      	; 0x4c0 <processRollControl+0x3a>
		{
			// Restore direction - always start rotating forward when leaving auto power off mode
			setMotorDirection(BD_ROTFWD);
     4bc:	80 e1       	ldi	r24, 0x10	; 16
     4be:	5c d8       	rcall	.-3912   	; 0xfffff578 <__eeprom_end+0xff7ef56e>
		}
	}
	
	// Control direction by buttons
	if (button_action_down & BD_ROTFWD)
     4c0:	80 91 cf 00 	lds	r24, 0x00CF
     4c4:	84 ff       	sbrs	r24, 4
     4c6:	04 c0       	rjmp	.+8      	; 0x4d0 <processRollControl+0x4a>
	{
		setMotorDirection(ROLL_FWD);	
     4c8:	81 e0       	ldi	r24, 0x01	; 1
     4ca:	56 d8       	rcall	.-3924   	; 0xfffff578 <__eeprom_end+0xff7ef56e>
		beepState |= 0x01;			// pressed FWD button
     4cc:	c1 e0       	ldi	r28, 0x01	; 1
     4ce:	0f c0       	rjmp	.+30     	; 0x4ee <processRollControl+0x68>
	}		
	else if (button_action_down & BD_ROTREV)
     4d0:	85 ff       	sbrs	r24, 5
     4d2:	04 c0       	rjmp	.+8      	; 0x4dc <processRollControl+0x56>
	{
		setMotorDirection(ROLL_REV);
     4d4:	82 e0       	ldi	r24, 0x02	; 2
     4d6:	50 d8       	rcall	.-3936   	; 0xfffff578 <__eeprom_end+0xff7ef56e>
		beepState |= 0x02;			// pressed REV button
     4d8:	c2 e0       	ldi	r28, 0x02	; 2
     4da:	09 c0       	rjmp	.+18     	; 0x4ee <processRollControl+0x68>
	}		
	else if (button_action_long & BD_CYCLE)
     4dc:	80 91 cc 00 	lds	r24, 0x00CC
     4e0:	87 ff       	sbrs	r24, 7
     4e2:	04 c0       	rjmp	.+8      	; 0x4ec <processRollControl+0x66>
	{
		stopCycleRolling(1);		// Reset points and disabled CYCLE mode (if was enabled)
     4e4:	81 e0       	ldi	r24, 0x01	; 1
     4e6:	66 d8       	rcall	.-3892   	; 0xfffff5b4 <__eeprom_end+0xff7ef5aa>
		beepState |= 0x08;			// reset of points by long pressing of ROLL button
     4e8:	c8 e0       	ldi	r28, 0x08	; 8
     4ea:	01 c0       	rjmp	.+2      	; 0x4ee <processRollControl+0x68>


// Function to control motor rotation
void processRollControl(void)
{	
	uint8_t beepState = 0;
     4ec:	c0 e0       	ldi	r28, 0x00	; 0
		stopCycleRolling(1);		// Reset points and disabled CYCLE mode (if was enabled)
		beepState |= 0x08;			// reset of points by long pressing of ROLL button
	}
		
		
	if (button_action_up_short & BD_CYCLE)
     4ee:	80 91 cd 00 	lds	r24, 0x00CD
     4f2:	87 ff       	sbrs	r24, 7
     4f4:	0e c0       	rjmp	.+28     	; 0x512 <processRollControl+0x8c>
	{
		if (rollState & ROLL_CYCLE)
     4f6:	80 91 f3 00 	lds	r24, 0x00F3
     4fa:	82 ff       	sbrs	r24, 2
     4fc:	04 c0       	rjmp	.+8      	; 0x506 <processRollControl+0x80>
		{
			stopCycleRolling(0);
     4fe:	80 e0       	ldi	r24, 0x00	; 0
     500:	59 d8       	rcall	.-3918   	; 0xfffff5b4 <__eeprom_end+0xff7ef5aa>
			beepState |= 0x20;		// stopped cycle
     502:	c0 62       	ori	r28, 0x20	; 32
     504:	06 c0       	rjmp	.+12     	; 0x512 <processRollControl+0x8c>
		}
		else if (startCycleRolling())
     506:	92 d8       	rcall	.-3804   	; 0xfffff62c <__eeprom_end+0xff7ef622>
     508:	88 23       	and	r24, r24
     50a:	11 f0       	breq	.+4      	; 0x510 <processRollControl+0x8a>
		{
			beepState |= 0x10;		// started cycle
     50c:	c0 61       	ori	r28, 0x10	; 16
     50e:	01 c0       	rjmp	.+2      	; 0x512 <processRollControl+0x8c>
		}
		else
		{
			beepState |= 0x40;		// failed to start cycle
     510:	c0 64       	ori	r28, 0x40	; 64
		}			
	}		
		
	if (rollState & ROLL_DIR_CHANGED)
     512:	80 91 f3 00 	lds	r24, 0x00F3
     516:	85 ff       	sbrs	r24, 5
     518:	04 c0       	rjmp	.+8      	; 0x522 <processRollControl+0x9c>
	{
		rollState &= ~ROLL_DIR_CHANGED;
     51a:	8f 7d       	andi	r24, 0xDF	; 223
     51c:	80 93 f3 00 	sts	0x00F3, r24
		beepState |= 0x04;	
     520:	c4 60       	ori	r28, 0x04	; 4
	}
		
	if (rollState & CYCLE_ROLL_DONE)
     522:	80 91 f3 00 	lds	r24, 0x00F3
     526:	84 ff       	sbrs	r24, 4
     528:	04 c0       	rjmp	.+8      	; 0x532 <processRollControl+0xac>
	{
		rollState &= ~CYCLE_ROLL_DONE;
     52a:	8f 7e       	andi	r24, 0xEF	; 239
     52c:	80 93 f3 00 	sts	0x00F3, r24
		beepState |= 0x80;	
     530:	c0 68       	ori	r28, 0x80	; 128
	}		
		
	beepState &= beepMask;
     532:	d0 91 d4 00 	lds	r29, 0x00D4
     536:	dc 23       	and	r29, r28
		
	if (beepState & 0x80)		// Roll cycle done
     538:	d7 ff       	sbrs	r29, 7
     53a:	06 c0       	rjmp	.+12     	; 0x548 <processRollControl+0xc2>
	{
		SetBeeperFreq(1000);
     53c:	88 ee       	ldi	r24, 0xE8	; 232
     53e:	93 e0       	ldi	r25, 0x03	; 3
     540:	cb d9       	rcall	.-3178   	; 0xfffff8d8 <__eeprom_end+0xff7ef8ce>
		StartBeep(200);
     542:	88 ec       	ldi	r24, 0xC8	; 200
     544:	90 e0       	ldi	r25, 0x00	; 0
     546:	12 c0       	rjmp	.+36     	; 0x56c <processRollControl+0xe6>
	}		
	else if (beepState & 0x40)	// Roll cycle start fail
     548:	d6 ff       	sbrs	r29, 6
     54a:	03 c0       	rjmp	.+6      	; 0x552 <processRollControl+0xcc>
	{
		SetBeeperFreq(500);
     54c:	84 ef       	ldi	r24, 0xF4	; 244
     54e:	91 e0       	ldi	r25, 0x01	; 1
     550:	0a c0       	rjmp	.+20     	; 0x566 <processRollControl+0xe0>
		StartBeep(50);
	} 
	else if (beepState & 0x08)	// Reset points
     552:	d3 ff       	sbrs	r29, 3
     554:	03 c0       	rjmp	.+6      	; 0x55c <processRollControl+0xd6>
	{
		SetBeeperFreq(800);
     556:	80 e2       	ldi	r24, 0x20	; 32
     558:	93 e0       	ldi	r25, 0x03	; 3
     55a:	05 c0       	rjmp	.+10     	; 0x566 <processRollControl+0xe0>
		StartBeep(50);
	}							// Other
	else if ( beepState & (0x01 | 0x02 | 0x10 | 0x20 | 0x04) )
     55c:	8d 2f       	mov	r24, r29
     55e:	87 73       	andi	r24, 0x37	; 55
     560:	31 f0       	breq	.+12     	; 0x56e <processRollControl+0xe8>
	{
		SetBeeperFreq(1000);
     562:	88 ee       	ldi	r24, 0xE8	; 232
     564:	93 e0       	ldi	r25, 0x03	; 3
     566:	b8 d9       	rcall	.-3216   	; 0xfffff8d8 <__eeprom_end+0xff7ef8ce>
		StartBeep(50);	
     568:	82 e3       	ldi	r24, 0x32	; 50
     56a:	90 e0       	ldi	r25, 0x00	; 0
     56c:	d5 d9       	rcall	.-3158   	; 0xfffff918 <__eeprom_end+0xff7ef90e>
	}			
		
	// Apply mask to next sound events
	beepMask = 0xFF;
     56e:	8f ef       	ldi	r24, 0xFF	; 255
     570:	80 93 d4 00 	sts	0x00D4, r24
	// Disable beep from DIR_CHANGED on next call if direction buttons have been pressed
	if (beepState & 0x03)	
     574:	d3 70       	andi	r29, 0x03	; 3
     576:	19 f0       	breq	.+6      	; 0x57e <processRollControl+0xf8>
		beepMask &= ~0x04;	
     578:	8b ef       	ldi	r24, 0xFB	; 251
     57a:	80 93 d4 00 	sts	0x00D4, r24

INDICATE_ROLLSTATE:
	// Indicate direction by LEDs
	clearExtraLeds(LED_ROTFWD | LED_ROTREV);
     57e:	80 e3       	ldi	r24, 0x30	; 48
     580:	db d2       	rcall	.+1462   	; 0xb38 <clearExtraLeds>
	if (rollState & ROLL_FWD)
     582:	80 91 f3 00 	lds	r24, 0x00F3
     586:	80 ff       	sbrs	r24, 0
     588:	02 c0       	rjmp	.+4      	; 0x58e <processRollControl+0x108>
		setExtraLeds(LED_ROTFWD);
     58a:	80 e1       	ldi	r24, 0x10	; 16
     58c:	03 c0       	rjmp	.+6      	; 0x594 <processRollControl+0x10e>
	else if (rollState & ROLL_REV)
     58e:	81 ff       	sbrs	r24, 1
     590:	04 c0       	rjmp	.+8      	; 0x59a <processRollControl+0x114>
		setExtraLeds(LED_ROTREV);
     592:	80 e2       	ldi	r24, 0x20	; 32
		
}
     594:	df 91       	pop	r29
     596:	cf 91       	pop	r28
	// Indicate direction by LEDs
	clearExtraLeds(LED_ROTFWD | LED_ROTREV);
	if (rollState & ROLL_FWD)
		setExtraLeds(LED_ROTFWD);
	else if (rollState & ROLL_REV)
		setExtraLeds(LED_ROTREV);
     598:	c9 c2       	rjmp	.+1426   	; 0xb2c <setExtraLeds>
		
}
     59a:	df 91       	pop	r29
     59c:	cf 91       	pop	r28
     59e:	08 95       	ret

000005a0 <processPID>:




uint8_t processPID(uint16_t setPoint, uint16_t processValue)
{
     5a0:	0f 93       	push	r16
     5a2:	1f 93       	push	r17
     5a4:	cf 93       	push	r28
     5a6:	df 93       	push	r29
	int16_t error, p_term, i_term, d_term, temp;
	static uint16_t lastProcessValue;
	static int16_t integAcc = 0;
	
	error = setPoint - processValue;
     5a8:	86 1b       	sub	r24, r22
     5aa:	97 0b       	sbc	r25, r23
	
	
	//------ Calculate P term --------//
	if (error > 20)
     5ac:	85 31       	cpi	r24, 0x15	; 21
     5ae:	91 05       	cpc	r25, r1
     5b0:	5c f4       	brge	.+22     	; 0x5c8 <processPID+0x28>
	{
		p_term = 1000;
	}
	else if (error < -20)
     5b2:	8c 3e       	cpi	r24, 0xEC	; 236
     5b4:	2f ef       	ldi	r18, 0xFF	; 255
     5b6:	92 07       	cpc	r25, r18
     5b8:	54 f0       	brlt	.+20     	; 0x5ce <processPID+0x2e>
	{
		p_term = -1000;
	}
	else
	{
		p_term = error * Kp;
     5ba:	2f e0       	ldi	r18, 0x0F	; 15
     5bc:	28 9f       	mul	r18, r24
     5be:	e0 01       	movw	r28, r0
     5c0:	29 9f       	mul	r18, r25
     5c2:	d0 0d       	add	r29, r0
     5c4:	11 24       	eor	r1, r1
     5c6:	05 c0       	rjmp	.+10     	; 0x5d2 <processPID+0x32>
	
	
	//------ Calculate P term --------//
	if (error > 20)
	{
		p_term = 1000;
     5c8:	c8 ee       	ldi	r28, 0xE8	; 232
     5ca:	d3 e0       	ldi	r29, 0x03	; 3
     5cc:	02 c0       	rjmp	.+4      	; 0x5d2 <processPID+0x32>
	}
	else if (error < -20)
	{
		p_term = -1000;
     5ce:	c8 e1       	ldi	r28, 0x18	; 24
     5d0:	dc ef       	ldi	r29, 0xFC	; 252
	{
		p_term = error * Kp;
	}
	
	//------ Calculate I term --------//
	integAcc += error;
     5d2:	20 91 da 00 	lds	r18, 0x00DA
     5d6:	30 91 db 00 	lds	r19, 0x00DB
	if (error <= 0)
     5da:	18 16       	cp	r1, r24
     5dc:	19 06       	cpc	r1, r25
     5de:	0c f0       	brlt	.+2      	; 0x5e2 <processPID+0x42>
     5e0:	0f c0       	rjmp	.+30     	; 0x600 <processPID+0x60>
	{
		p_term = error * Kp;
	}
	
	//------ Calculate I term --------//
	integAcc += error;
     5e2:	82 0f       	add	r24, r18
     5e4:	93 1f       	adc	r25, r19
	if (error <= 0)
	{
		integAcc = 0;
	}
	else if (integAcc > 10)
     5e6:	8b 30       	cpi	r24, 0x0B	; 11
     5e8:	91 05       	cpc	r25, r1
     5ea:	1c f0       	brlt	.+6      	; 0x5f2 <processPID+0x52>
	{
		integAcc = 10;
     5ec:	8a e0       	ldi	r24, 0x0A	; 10
     5ee:	90 e0       	ldi	r25, 0x00	; 0
     5f0:	02 c0       	rjmp	.+4      	; 0x5f6 <processPID+0x56>
	}
	else if (integAcc < 0)
     5f2:	97 fd       	sbrc	r25, 7
     5f4:	05 c0       	rjmp	.+10     	; 0x600 <processPID+0x60>
	{
		p_term = error * Kp;
	}
	
	//------ Calculate I term --------//
	integAcc += error;
     5f6:	90 93 db 00 	sts	0x00DB, r25
     5fa:	80 93 da 00 	sts	0x00DA, r24
     5fe:	04 c0       	rjmp	.+8      	; 0x608 <processPID+0x68>
	{
		integAcc = 10;
	}
	else if (integAcc < 0)
	{
		integAcc = 0;
     600:	10 92 db 00 	sts	0x00DB, r1
     604:	10 92 da 00 	sts	0x00DA, r1
	}
	i_term = integAcc * Ki;
     608:	80 91 da 00 	lds	r24, 0x00DA
     60c:	90 91 db 00 	lds	r25, 0x00DB
     610:	2f e0       	ldi	r18, 0x0F	; 15
     612:	28 9f       	mul	r18, r24
     614:	80 01       	movw	r16, r0
     616:	29 9f       	mul	r18, r25
     618:	10 0d       	add	r17, r0
     61a:	11 24       	eor	r1, r1
	//------ Calculate D term --------//
	//lastProcessValue = getNormalizedRingU16(&ringBufDterm);
	//addToRingU16(&ringBufDterm, processValue);
	//d_term = Kd * ((int16_t)(lastProcessValue - processValue));
	
	lastProcessValue = ringBufDterm.summ;
     61c:	80 91 6d 00 	lds	r24, 0x006D
     620:	90 91 6e 00 	lds	r25, 0x006E
     624:	90 93 dd 00 	sts	0x00DD, r25
     628:	80 93 dc 00 	sts	0x00DC, r24
	addToRingU16(&ringBufDterm, processValue);
     62c:	8a e6       	ldi	r24, 0x6A	; 106
     62e:	90 e0       	ldi	r25, 0x00	; 0
     630:	41 de       	rcall	.-894    	; 0x2b4 <addToRingU16>
	processValue = ringBufDterm.summ;
	d_term = Kd * ((int16_t)(lastProcessValue - processValue));
     632:	80 91 dc 00 	lds	r24, 0x00DC
     636:	90 91 dd 00 	lds	r25, 0x00DD
     63a:	20 91 6d 00 	lds	r18, 0x006D
     63e:	30 91 6e 00 	lds	r19, 0x006E
     642:	82 1b       	sub	r24, r18
     644:	93 0b       	sbc	r25, r19
     646:	40 e5       	ldi	r20, 0x50	; 80
     648:	48 9f       	mul	r20, r24
     64a:	90 01       	movw	r18, r0
     64c:	49 9f       	mul	r20, r25
     64e:	30 0d       	add	r19, r0
     650:	11 24       	eor	r1, r1
	
	//--------- Summ terms -----------//
	temp = (p_term + i_term + d_term) / SCALING_FACTOR;
     652:	ce 01       	movw	r24, r28
     654:	80 0f       	add	r24, r16
     656:	91 1f       	adc	r25, r17
     658:	82 0f       	add	r24, r18
     65a:	93 1f       	adc	r25, r19
     65c:	65 e0       	ldi	r22, 0x05	; 5
     65e:	70 e0       	ldi	r23, 0x00	; 0
     660:	f3 d9       	rcall	.-3098   	; 0xfffffa48 <__eeprom_end+0xff7efa3e>
     662:	cb 01       	movw	r24, r22
     664:	77 ff       	sbrs	r23, 7
     666:	02 c0       	rjmp	.+4      	; 0x66c <processPID+0xcc>
     668:	80 e0       	ldi	r24, 0x00	; 0
     66a:	90 e0       	ldi	r25, 0x00	; 0
     66c:	83 33       	cpi	r24, 0x33	; 51
     66e:	91 05       	cpc	r25, r1
     670:	14 f0       	brlt	.+4      	; 0x676 <processPID+0xd6>
     672:	82 e3       	ldi	r24, 0x32	; 50
     674:	90 e0       	ldi	r25, 0x00	; 0
		temp = 0;
	}
	
	
	//------- Debug --------//
	dbg_PID_p_term = p_term;
     676:	d0 93 25 01 	sts	0x0125, r29
     67a:	c0 93 24 01 	sts	0x0124, r28
	dbg_PID_d_term = d_term;
     67e:	30 93 37 01 	sts	0x0137, r19
     682:	20 93 36 01 	sts	0x0136, r18
	dbg_PID_i_term = i_term;
     686:	10 93 2c 01 	sts	0x012C, r17
     68a:	00 93 2b 01 	sts	0x012B, r16
	dbg_PID_output = temp;
     68e:	90 93 22 01 	sts	0x0122, r25
     692:	80 93 21 01 	sts	0x0121, r24
	
	
	return temp;
	
}
     696:	df 91       	pop	r29
     698:	cf 91       	pop	r28
     69a:	1f 91       	pop	r17
     69c:	0f 91       	pop	r16
     69e:	08 95       	ret

000006a0 <processHeaterControl>:
	static uint16_t set_value_adc;		// static for debug
	static uint16_t pid_output;			// static for debug
	
	
	// Process heater ON/OFF control by button
	if (button_state & BD_HEATCTRL)
     6a0:	80 91 d0 00 	lds	r24, 0x00D0
     6a4:	86 ff       	sbrs	r24, 6
     6a6:	07 c0       	rjmp	.+14     	; 0x6b6 <processHeaterControl+0x16>
	{
		heaterEnabled ^= 0x01;
     6a8:	80 91 d5 00 	lds	r24, 0x00D5
     6ac:	91 e0       	ldi	r25, 0x01	; 1
     6ae:	89 27       	eor	r24, r25
     6b0:	80 93 d5 00 	sts	0x00D5, r24
		// Make heater controller set update flag on next call
		forceHeaterControlUpdate();
     6b4:	54 d7       	rcall	.+3752   	; 0x155e <forceHeaterControlUpdate>
	}
	
	// Process auto power off control
	if (autoPowerOffState & AUTO_POFF_ACTIVE)
     6b6:	80 91 01 01 	lds	r24, 0x0101
     6ba:	80 fd       	sbrc	r24, 0
	{
		heaterEnabled = 0;
     6bc:	10 92 d5 00 	sts	0x00D5, r1
	}		
	
	// Indicate reaching of desired temperature
	if ( (adc_celsius > setup_temp_value - tempAlertRange) && (adc_celsius < setup_temp_value + tempAlertRange) )
     6c0:	80 91 1e 01 	lds	r24, 0x011E
     6c4:	90 91 1f 01 	lds	r25, 0x011F
     6c8:	20 91 28 01 	lds	r18, 0x0128
     6cc:	30 91 29 01 	lds	r19, 0x0129
     6d0:	e0 91 73 00 	lds	r30, 0x0073
     6d4:	4e 2f       	mov	r20, r30
     6d6:	50 e0       	ldi	r21, 0x00	; 0
     6d8:	b9 01       	movw	r22, r18
     6da:	64 1b       	sub	r22, r20
     6dc:	75 0b       	sbc	r23, r21
     6de:	68 17       	cp	r22, r24
     6e0:	79 07       	cpc	r23, r25
     6e2:	98 f4       	brcc	.+38     	; 0x70a <processHeaterControl+0x6a>
     6e4:	24 0f       	add	r18, r20
     6e6:	35 1f       	adc	r19, r21
     6e8:	82 17       	cp	r24, r18
     6ea:	93 07       	cpc	r25, r19
     6ec:	70 f4       	brcc	.+28     	; 0x70a <processHeaterControl+0x6a>
	{
		if ((tempAlertRange == TEMP_ALERT_RANGE) && (heaterEnabled))
     6ee:	e5 30       	cpi	r30, 0x05	; 5
     6f0:	51 f4       	brne	.+20     	; 0x706 <processHeaterControl+0x66>
     6f2:	80 91 d5 00 	lds	r24, 0x00D5
     6f6:	88 23       	and	r24, r24
     6f8:	31 f0       	breq	.+12     	; 0x706 <processHeaterControl+0x66>
		{
			SetBeeperFreq(1000);
     6fa:	88 ee       	ldi	r24, 0xE8	; 232
     6fc:	93 e0       	ldi	r25, 0x03	; 3
     6fe:	ec d8       	rcall	.-3624   	; 0xfffff8d8 <__eeprom_end+0xff7ef8ce>
			StartBeep(400);
     700:	80 e9       	ldi	r24, 0x90	; 144
     702:	91 e0       	ldi	r25, 0x01	; 1
     704:	09 d9       	rcall	.-3566   	; 0xfffff918 <__eeprom_end+0xff7ef90e>
		}
		// Add some hysteresis
		tempAlertRange = TEMP_ALERT_RANGE + TEMP_ALERT_HYST;
     706:	8a e0       	ldi	r24, 0x0A	; 10
     708:	01 c0       	rjmp	.+2      	; 0x70c <processHeaterControl+0x6c>
	}			
	else
	{
		tempAlertRange = TEMP_ALERT_RANGE;
     70a:	85 e0       	ldi	r24, 0x05	; 5
     70c:	80 93 73 00 	sts	0x0073, r24
	}		
	

	// Check if heater control should be updated
	// PID call interval is a multiple of AC line periods, computed as HEATER_REGULATION_PERIODS * 20ms
	if (heaterState & READY_TO_UPDATE_HEATER)
     710:	80 91 f5 00 	lds	r24, 0x00F5
     714:	87 ff       	sbrs	r24, 7
     716:	18 c0       	rjmp	.+48     	; 0x748 <processHeaterControl+0xa8>
	{
		// Convert temperature setup to equal ADC value
		set_value_adc = conv_Celsius_to_ADC(setup_temp_value);					
     718:	80 91 28 01 	lds	r24, 0x0128
     71c:	90 91 29 01 	lds	r25, 0x0129
     720:	40 dd       	rcall	.-1408   	; 0x1a2 <conv_Celsius_to_ADC>
     722:	90 93 d7 00 	sts	0x00D7, r25
     726:	80 93 d6 00 	sts	0x00D6, r24
		// Process PID
		pid_output = processPID(set_value_adc,PIDsampledADC);
     72a:	60 91 06 01 	lds	r22, 0x0106
     72e:	70 91 07 01 	lds	r23, 0x0107
     732:	36 df       	rcall	.-404    	; 0x5a0 <processPID>
     734:	80 93 d8 00 	sts	0x00D8, r24
     738:	10 92 d9 00 	sts	0x00D9, r1
			
		// Heater control is updated only when flag is set, even if heater must be powered OFF
		if (heaterEnabled)
     73c:	90 91 d5 00 	lds	r25, 0x00D5
     740:	91 11       	cpse	r25, r1
     742:	01 c0       	rjmp	.+2      	; 0x746 <processHeaterControl+0xa6>
			setHeaterControl(pid_output);	// Flag is cleared automatically
		else
			setHeaterControl(0);
     744:	80 e0       	ldi	r24, 0x00	; 0
     746:	fd d6       	rcall	.+3578   	; 0x1542 <setHeaterControl>
	}	
		
	
	//------- Debug --------//
	if (heaterEnabled)
     748:	80 91 d5 00 	lds	r24, 0x00D5
     74c:	88 23       	and	r24, r24
     74e:	79 f0       	breq	.+30     	; 0x76e <processHeaterControl+0xce>
	{
		setExtraLeds(LED_HEATER);
     750:	80 e4       	ldi	r24, 0x40	; 64
     752:	ec d1       	rcall	.+984    	; 0xb2c <setExtraLeds>
		dbg_SetTempCelsius = setup_temp_value;
     754:	80 91 28 01 	lds	r24, 0x0128
     758:	80 93 23 01 	sts	0x0123, r24
		dbg_SetTempPID = set_value_adc;
     75c:	80 91 d6 00 	lds	r24, 0x00D6
     760:	90 91 d7 00 	lds	r25, 0x00D7
     764:	90 93 3f 01 	sts	0x013F, r25
     768:	80 93 3e 01 	sts	0x013E, r24
     76c:	08 c0       	rjmp	.+16     	; 0x77e <processHeaterControl+0xde>
	}
	else
	{
		dbg_SetTempCelsius = 0;
     76e:	10 92 23 01 	sts	0x0123, r1
		dbg_SetTempPID = 0;
     772:	10 92 3f 01 	sts	0x013F, r1
     776:	10 92 3e 01 	sts	0x013E, r1
		clearExtraLeds(LED_HEATER);
     77a:	80 e4       	ldi	r24, 0x40	; 64
     77c:	dd d1       	rcall	.+954    	; 0xb38 <clearExtraLeds>
	}
	
	dbg_RealTempCelsius = conv_ADC_to_Celsius(PIDsampledADC);
     77e:	80 91 06 01 	lds	r24, 0x0106
     782:	90 91 07 01 	lds	r25, 0x0107
     786:	ec dc       	rcall	.-1576   	; 0x160 <conv_ADC_to_Celsius>
     788:	80 93 3b 01 	sts	0x013B, r24
	dbg_RealTempPID = PIDsampledADC;
     78c:	80 91 06 01 	lds	r24, 0x0106
     790:	90 91 07 01 	lds	r25, 0x0107
     794:	90 93 27 01 	sts	0x0127, r25
     798:	80 93 26 01 	sts	0x0126, r24
     79c:	08 95       	ret

0000079e <restoreGlobalParams>:




void restoreGlobalParams(void)
{
     79e:	cf 93       	push	r28
     7a0:	df 93       	push	r29
     7a2:	cd b7       	in	r28, 0x3d	; 61
     7a4:	de b7       	in	r29, 0x3e	; 62
     7a6:	2a 97       	sbiw	r28, 0x0a	; 10
     7a8:	0f b6       	in	r0, 0x3f	; 63
     7aa:	f8 94       	cli
     7ac:	de bf       	out	0x3e, r29	; 62
     7ae:	0f be       	out	0x3f, r0	; 63
     7b0:	cd bf       	out	0x3d, r28	; 61
	 gParams_t gParams;
	 eeprom_read_block(&gParams,&nvParams,sizeof(nvParams));
     7b2:	4a e0       	ldi	r20, 0x0A	; 10
     7b4:	50 e0       	ldi	r21, 0x00	; 0
     7b6:	60 e0       	ldi	r22, 0x00	; 0
     7b8:	70 e0       	ldi	r23, 0x00	; 0
     7ba:	ce 01       	movw	r24, r28
     7bc:	01 96       	adiw	r24, 0x01	; 1
     7be:	b0 d9       	rcall	.-3232   	; 0xfffffb20 <__eeprom_end+0xff7efb16>
	 setup_temp_value = gParams.setup_temp_value;	// reference temperature
     7c0:	89 81       	ldd	r24, Y+1	; 0x01
     7c2:	80 93 28 01 	sts	0x0128, r24
     7c6:	10 92 29 01 	sts	0x0129, r1
	 rollCycleSet = gParams.rollCycleSet;			// number of rolling cycles
     7ca:	8a 81       	ldd	r24, Y+2	; 0x02
     7cc:	80 93 2d 01 	sts	0x012D, r24
	 sound_enable = gParams.sound_enable;			// Global sound enable
     7d0:	8b 81       	ldd	r24, Y+3	; 0x03
     7d2:	80 93 2a 01 	sts	0x012A, r24
	 power_off_timeout = gParams.power_off_timeout;	// Auto power OFF timeout, minutes
     7d6:	8c 81       	ldd	r24, Y+4	; 0x04
     7d8:	80 93 3a 01 	sts	0x013A, r24
	 cpoint1 = gParams.cpoint1;						// Calibration point 1
     7dc:	8d 81       	ldd	r24, Y+5	; 0x05
     7de:	80 93 20 01 	sts	0x0120, r24
	 cpoint2 = gParams.cpoint2;						// Calibration point 2
     7e2:	8e 81       	ldd	r24, Y+6	; 0x06
     7e4:	80 93 40 01 	sts	0x0140, r24
	 cpoint1_adc = gParams.cpoint1_adc;
     7e8:	8f 81       	ldd	r24, Y+7	; 0x07
     7ea:	98 85       	ldd	r25, Y+8	; 0x08
     7ec:	90 93 39 01 	sts	0x0139, r25
     7f0:	80 93 38 01 	sts	0x0138, r24
	 cpoint2_adc = gParams.cpoint2_adc;
     7f4:	89 85       	ldd	r24, Y+9	; 0x09
     7f6:	9a 85       	ldd	r25, Y+10	; 0x0a
     7f8:	90 93 3d 01 	sts	0x013D, r25
     7fc:	80 93 3c 01 	sts	0x013C, r24
//	 cpoint1 		= 25;		// TODO: check and remove
//	 cpoint1_adc 	= 164;
//	 cpoint2 		= 145;
//	 cpoint2_adc 	= 433;
	 
}
     800:	2a 96       	adiw	r28, 0x0a	; 10
     802:	0f b6       	in	r0, 0x3f	; 63
     804:	f8 94       	cli
     806:	de bf       	out	0x3e, r29	; 62
     808:	0f be       	out	0x3f, r0	; 63
     80a:	cd bf       	out	0x3d, r28	; 61
     80c:	df 91       	pop	r29
     80e:	cf 91       	pop	r28
     810:	08 95       	ret

00000812 <exitPowerOff>:




void exitPowerOff(void)
{
     812:	08 95       	ret

00000814 <decode_led_char>:
// Decodes normal string literal to the 
//	7-segment representation
//---------------------------------------------//
static uint8_t decode_led_char(char c)
{
	switch(c)
     814:	88 33       	cpi	r24, 0x38	; 56
     816:	09 f4       	brne	.+2      	; 0x81a <decode_led_char+0x6>
     818:	52 c0       	rjmp	.+164    	; 0x8be <decode_led_char+0xaa>
     81a:	18 f5       	brcc	.+70     	; 0x862 <decode_led_char+0x4e>
     81c:	81 33       	cpi	r24, 0x31	; 49
     81e:	09 f4       	brne	.+2      	; 0x822 <decode_led_char+0xe>
     820:	6a c0       	rjmp	.+212    	; 0x8f6 <decode_led_char+0xe2>
     822:	90 f4       	brcc	.+36     	; 0x848 <decode_led_char+0x34>
     824:	8d 32       	cpi	r24, 0x2D	; 45
     826:	09 f4       	brne	.+2      	; 0x82a <decode_led_char+0x16>
     828:	50 c0       	rjmp	.+160    	; 0x8ca <decode_led_char+0xb6>
     82a:	38 f4       	brcc	.+14     	; 0x83a <decode_led_char+0x26>
     82c:	80 32       	cpi	r24, 0x20	; 32
     82e:	09 f4       	brne	.+2      	; 0x832 <decode_led_char+0x1e>
     830:	50 c0       	rjmp	.+160    	; 0x8d2 <decode_led_char+0xbe>
     832:	8c 32       	cpi	r24, 0x2C	; 44
     834:	09 f0       	breq	.+2      	; 0x838 <decode_led_char+0x24>
     836:	60 c0       	rjmp	.+192    	; 0x8f8 <decode_led_char+0xe4>
     838:	46 c0       	rjmp	.+140    	; 0x8c6 <decode_led_char+0xb2>
     83a:	8e 32       	cpi	r24, 0x2E	; 46
     83c:	09 f4       	brne	.+2      	; 0x840 <decode_led_char+0x2c>
     83e:	43 c0       	rjmp	.+134    	; 0x8c6 <decode_led_char+0xb2>
     840:	80 33       	cpi	r24, 0x30	; 48
     842:	09 f0       	breq	.+2      	; 0x846 <decode_led_char+0x32>
     844:	59 c0       	rjmp	.+178    	; 0x8f8 <decode_led_char+0xe4>
     846:	2d c0       	rjmp	.+90     	; 0x8a2 <decode_led_char+0x8e>
     848:	84 33       	cpi	r24, 0x34	; 52
     84a:	89 f1       	breq	.+98     	; 0x8ae <decode_led_char+0x9a>
     84c:	30 f4       	brcc	.+12     	; 0x85a <decode_led_char+0x46>
     84e:	82 33       	cpi	r24, 0x32	; 50
     850:	51 f1       	breq	.+84     	; 0x8a6 <decode_led_char+0x92>
     852:	83 33       	cpi	r24, 0x33	; 51
     854:	09 f0       	breq	.+2      	; 0x858 <decode_led_char+0x44>
     856:	50 c0       	rjmp	.+160    	; 0x8f8 <decode_led_char+0xe4>
     858:	28 c0       	rjmp	.+80     	; 0x8aa <decode_led_char+0x96>
     85a:	86 33       	cpi	r24, 0x36	; 54
     85c:	61 f1       	breq	.+88     	; 0x8b6 <decode_led_char+0xa2>
     85e:	68 f5       	brcc	.+90     	; 0x8ba <decode_led_char+0xa6>
     860:	28 c0       	rjmp	.+80     	; 0x8b2 <decode_led_char+0x9e>
     862:	8e 34       	cpi	r24, 0x4E	; 78
     864:	f1 f1       	breq	.+124    	; 0x8e2 <decode_led_char+0xce>
     866:	70 f4       	brcc	.+28     	; 0x884 <decode_led_char+0x70>
     868:	84 34       	cpi	r24, 0x44	; 68
     86a:	e9 f1       	breq	.+122    	; 0x8e6 <decode_led_char+0xd2>
     86c:	30 f4       	brcc	.+12     	; 0x87a <decode_led_char+0x66>
     86e:	89 33       	cpi	r24, 0x39	; 57
     870:	41 f1       	breq	.+80     	; 0x8c2 <decode_led_char+0xae>
     872:	83 34       	cpi	r24, 0x43	; 67
     874:	09 f0       	breq	.+2      	; 0x878 <decode_led_char+0x64>
     876:	40 c0       	rjmp	.+128    	; 0x8f8 <decode_led_char+0xe4>
     878:	30 c0       	rjmp	.+96     	; 0x8da <decode_led_char+0xc6>
     87a:	85 34       	cpi	r24, 0x45	; 69
     87c:	c1 f1       	breq	.+112    	; 0x8ee <decode_led_char+0xda>
     87e:	86 34       	cpi	r24, 0x46	; 70
     880:	d9 f5       	brne	.+118    	; 0x8f8 <decode_led_char+0xe4>
     882:	2d c0       	rjmp	.+90     	; 0x8de <decode_led_char+0xca>
     884:	82 35       	cpi	r24, 0x52	; 82
     886:	a9 f1       	breq	.+106    	; 0x8f2 <decode_led_char+0xde>
     888:	28 f4       	brcc	.+10     	; 0x894 <decode_led_char+0x80>
     88a:	8f 34       	cpi	r24, 0x4F	; 79
     88c:	51 f0       	breq	.+20     	; 0x8a2 <decode_led_char+0x8e>
     88e:	80 35       	cpi	r24, 0x50	; 80
     890:	99 f5       	brne	.+102    	; 0x8f8 <decode_led_char+0xe4>
     892:	2b c0       	rjmp	.+86     	; 0x8ea <decode_led_char+0xd6>
     894:	8f 35       	cpi	r24, 0x5F	; 95
     896:	d9 f0       	breq	.+54     	; 0x8ce <decode_led_char+0xba>
     898:	80 3b       	cpi	r24, 0xB0	; 176
     89a:	e9 f0       	breq	.+58     	; 0x8d6 <decode_led_char+0xc2>
     89c:	83 35       	cpi	r24, 0x53	; 83
     89e:	61 f5       	brne	.+88     	; 0x8f8 <decode_led_char+0xe4>
     8a0:	08 c0       	rjmp	.+16     	; 0x8b2 <decode_led_char+0x9e>
	{
		case 'O':
		case '0': return (SEGA | SEGB | SEGC | SEGD | SEGE | SEGF);
     8a2:	8f e3       	ldi	r24, 0x3F	; 63
     8a4:	08 95       	ret
		case '1': return (SEGB | SEGC );
		case '2': return (SEGA | SEGB | SEGD | SEGE | SEGG);
     8a6:	8b e5       	ldi	r24, 0x5B	; 91
     8a8:	08 95       	ret
		case '3': return (SEGA | SEGB | SEGC | SEGD | SEGG);
     8aa:	8f e4       	ldi	r24, 0x4F	; 79
     8ac:	08 95       	ret
		case '4': return (SEGB | SEGC | SEGF | SEGG);
     8ae:	86 e6       	ldi	r24, 0x66	; 102
     8b0:	08 95       	ret
		case 'S':
		case '5': return (SEGA | SEGC | SEGD | SEGF | SEGG);
     8b2:	8d e6       	ldi	r24, 0x6D	; 109
     8b4:	08 95       	ret
		case '6': return (SEGA | SEGC | SEGD | SEGE | SEGF | SEGG);
     8b6:	8d e7       	ldi	r24, 0x7D	; 125
     8b8:	08 95       	ret
		case '7': return (SEGA | SEGB | SEGC );
     8ba:	87 e0       	ldi	r24, 0x07	; 7
     8bc:	08 95       	ret
		case '8': return (SEGA | SEGB | SEGC | SEGD | SEGE | SEGF | SEGG);
     8be:	8f e7       	ldi	r24, 0x7F	; 127
     8c0:	08 95       	ret
		case '9': return (SEGA | SEGB | SEGC | SEGD | SEGF | SEGG);
     8c2:	8f e6       	ldi	r24, 0x6F	; 111
     8c4:	08 95       	ret
		case '.': return (SEGH);
		case ',': return (SEGH);
     8c6:	80 e8       	ldi	r24, 0x80	; 128
     8c8:	08 95       	ret
		case '-': return (SEGG);
     8ca:	80 e4       	ldi	r24, 0x40	; 64
     8cc:	08 95       	ret
		case '_': return (SEGD);
     8ce:	88 e0       	ldi	r24, 0x08	; 8
     8d0:	08 95       	ret
		case ' ': return 0;
     8d2:	80 e0       	ldi	r24, 0x00	; 0
     8d4:	08 95       	ret
		case 0xB0:	return (SEGA | SEGB | SEGF | SEGG);		// Degree sin
     8d6:	83 e6       	ldi	r24, 0x63	; 99
     8d8:	08 95       	ret
		case 'C':	return (SEGA | SEGD | SEGE | SEGF);
     8da:	89 e3       	ldi	r24, 0x39	; 57
     8dc:	08 95       	ret
		case 'F':	return (SEGA | SEGE | SEGF | SEGG);
     8de:	81 e7       	ldi	r24, 0x71	; 113
     8e0:	08 95       	ret
		case 'N':	return (SEGC | SEGE | SEGG);
     8e2:	84 e5       	ldi	r24, 0x54	; 84
     8e4:	08 95       	ret
		case 'D': return (SEGB | SEGC | SEGD | SEGE | SEGG);
     8e6:	8e e5       	ldi	r24, 0x5E	; 94
     8e8:	08 95       	ret
		case 'P': return (SEGA | SEGB | SEGE | SEGF | SEGG);
     8ea:	83 e7       	ldi	r24, 0x73	; 115
     8ec:	08 95       	ret
		case 'E': return (SEGA | SEGD | SEGE | SEGF | SEGG);
     8ee:	89 e7       	ldi	r24, 0x79	; 121
     8f0:	08 95       	ret
		case 'R': return (SEGE | SEGG);
     8f2:	80 e5       	ldi	r24, 0x50	; 80
     8f4:	08 95       	ret
{
	switch(c)
	{
		case 'O':
		case '0': return (SEGA | SEGB | SEGC | SEGD | SEGE | SEGF);
		case '1': return (SEGB | SEGC );
     8f6:	86 e0       	ldi	r24, 0x06	; 6
		case 'P': return (SEGA | SEGB | SEGE | SEGF | SEGG);
		case 'E': return (SEGA | SEGD | SEGE | SEGF | SEGG);
		case 'R': return (SEGE | SEGG);
		default:  return c;	
	}
}
     8f8:	08 95       	ret

000008fa <wrap_led_buffer_index>:
//---------------------------------------------//
// Ensures that index is inside the buffer
// -128 <= index <= 127
//---------------------------------------------//
static uint8_t wrap_led_buffer_index(int8_t buf_index)
{
     8fa:	28 2f       	mov	r18, r24
	uint8_t new_index_u;
	new_index_u = (uint8_t) ((buf_index < 0) ? -buf_index : buf_index);
     8fc:	87 fd       	sbrc	r24, 7
     8fe:	81 95       	neg	r24
	if (new_index_u >= LED_BUFFER_LENGTH)
     900:	8e 30       	cpi	r24, 0x0E	; 14
     902:	18 f0       	brcs	.+6      	; 0x90a <wrap_led_buffer_index+0x10>
		new_index_u = new_index_u % LED_BUFFER_LENGTH;
     904:	6e e0       	ldi	r22, 0x0E	; 14
     906:	80 d8       	rcall	.-3840   	; 0xfffffa08 <__eeprom_end+0xff7ef9fe>
     908:	89 2f       	mov	r24, r25
	new_index_u = ((buf_index >= 0) || (new_index_u == 0)) ? new_index_u :  LED_BUFFER_LENGTH - new_index_u ;
     90a:	27 ff       	sbrs	r18, 7
     90c:	05 c0       	rjmp	.+10     	; 0x918 <wrap_led_buffer_index+0x1e>
     90e:	88 23       	and	r24, r24
     910:	19 f0       	breq	.+6      	; 0x918 <wrap_led_buffer_index+0x1e>
     912:	9e e0       	ldi	r25, 0x0E	; 14
     914:	98 1b       	sub	r25, r24
     916:	89 2f       	mov	r24, r25
	return new_index_u;
}
     918:	08 95       	ret

0000091a <processLedIndicator>:
// Call this function N times per sec to get N/NUM_DIGITS_TOTAL display update rate, where
// NUM_DIGITS_TOTAL is number_of_digits_of_LED_display if no extra LEDs are used or
// (number_of_digits_of_LED_display + 1) otherwise.
//---------------------------------------------//
void processLedIndicator()
{
     91a:	cf 93       	push	r28
	disable_led_segments();
	#endif
	
	
	// Perform regular shift
	led_clock_pulse(!LED_DIGIT_ACT_LVL);
     91c:	81 e0       	ldi	r24, 0x01	; 1
     91e:	13 d1       	rcall	.+550    	; 0xb46 <led_clock_pulse>
	
	switch (wActivePos)
     920:	c0 91 df 00 	lds	r28, 0x00DF
     924:	cc 23       	and	r28, r28
     926:	19 f0       	breq	.+6      	; 0x92e <processLedIndicator+0x14>
     928:	c6 30       	cpi	r28, 0x06	; 6
     92a:	d1 f5       	brne	.+116    	; 0x9a0 <processLedIndicator+0x86>
     92c:	11 c0       	rjmp	.+34     	; 0x950 <processLedIndicator+0x36>
	{
	case 0:
		// Get buttons
		#ifndef CLEAN_OPERATION
		disable_led_segments();
     92e:	37 d1       	rcall	.+622    	; 0xb9e <disable_led_segments>
		#endif
		enable_led_segments_pullups();
     930:	28 d1       	rcall	.+592    	; 0xb82 <enable_led_segments_pullups>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     932:	85 e3       	ldi	r24, 0x35	; 53
     934:	8a 95       	dec	r24
     936:	f1 f7       	brne	.-4      	; 0x934 <processLedIndicator+0x1a>
     938:	00 00       	nop
		_delay_us(PULLUP_DELAY_US);
		capture_button_state();
     93a:	38 d1       	rcall	.+624    	; 0xbac <capture_button_state>
		#ifndef CLEAN_OPERATION
		enable_led_segments();
     93c:	29 d1       	rcall	.+594    	; 0xb90 <enable_led_segments>
		#endif
		// Start new cycle with active digit level
		led_clock_pulse(LED_DIGIT_ACT_LVL);
     93e:	80 e0       	ldi	r24, 0x00	; 0
     940:	02 d1       	rcall	.+516    	; 0xb46 <led_clock_pulse>
		// Always start new cycle from specified buffer start position
		bufActivePos = wStartPos;
     942:	80 91 42 01 	lds	r24, 0x0142
     946:	80 93 de 00 	sts	0x00DE, r24
		next_wActivePos = wActivePos + 1;
     94a:	c0 91 df 00 	lds	r28, 0x00DF
     94e:	28 c0       	rjmp	.+80     	; 0x9a0 <processLedIndicator+0x86>
//---------------------------------------------//
// Performs window shifting
//---------------------------------------------//
static void processWindowShifter(void)
{
	if (shifterState == LED_SHIFT_DONE)
     950:	80 91 43 01 	lds	r24, 0x0143
     954:	81 11       	cpse	r24, r1
     956:	01 c0       	rjmp	.+2      	; 0x95a <processLedIndicator+0x40>
     958:	1b c0       	rjmp	.+54     	; 0x990 <processLedIndicator+0x76>
		return;
	
	// Process shift timer
	processSoftTimer8b(&shiftTimer);	
     95a:	80 ee       	ldi	r24, 0xE0	; 224
     95c:	90 e0       	ldi	r25, 0x00	; 0
     95e:	90 d7       	rcall	.+3872   	; 0x1880 <processSoftTimer8b>
	
	if (shiftTimer.FTop)
     960:	80 91 e0 00 	lds	r24, 0x00E0
     964:	85 ff       	sbrs	r24, 5
     966:	14 c0       	rjmp	.+40     	; 0x990 <processLedIndicator+0x76>
	{
		// Check if finished
		if (wStartPos == bufStartPos)	
     968:	80 91 42 01 	lds	r24, 0x0142
     96c:	90 91 44 01 	lds	r25, 0x0144
     970:	89 13       	cpse	r24, r25
     972:	03 c0       	rjmp	.+6      	; 0x97a <processLedIndicator+0x60>
		{
			// Update state
			shifterState = LED_SHIFT_DONE;
     974:	10 92 43 01 	sts	0x0143, r1
     978:	0b c0       	rjmp	.+22     	; 0x990 <processLedIndicator+0x76>
		}
		else if (shifterState == LED_SHIFT_RIGHT)
     97a:	90 91 43 01 	lds	r25, 0x0143
     97e:	92 30       	cpi	r25, 0x02	; 2
     980:	49 f4       	brne	.+18     	; 0x994 <processLedIndicator+0x7a>
// Increments index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t inc_buffer_position(uint8_t position)
{
	return (position >= LED_BUFFER_LENGTH - 1) ? 0 : position + 1;
     982:	8d 30       	cpi	r24, 0x0D	; 13
     984:	10 f4       	brcc	.+4      	; 0x98a <processLedIndicator+0x70>
     986:	8f 5f       	subi	r24, 0xFF	; 255
     988:	01 c0       	rjmp	.+2      	; 0x98c <processLedIndicator+0x72>
     98a:	80 e0       	ldi	r24, 0x00	; 0
			// Update state
			shifterState = LED_SHIFT_DONE;
		}
		else if (shifterState == LED_SHIFT_RIGHT)
		{
			wStartPos = inc_buffer_position(wStartPos);	
     98c:	80 93 42 01 	sts	0x0142, r24
		// Always start new cycle from specified buffer start position
		bufActivePos = wStartPos;
		next_wActivePos = wActivePos + 1;
		break;
	case NUM_DIGITS_TOTAL-1:
		next_wActivePos = 0;
     990:	c0 e0       	ldi	r28, 0x00	; 0
     992:	07 c0       	rjmp	.+14     	; 0x9a2 <processLedIndicator+0x88>
// Decrements index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t dec_buffer_position(uint8_t position)
{
	return (position == 0) ? LED_BUFFER_LENGTH - 1 : position - 1;
     994:	88 23       	and	r24, r24
     996:	11 f0       	breq	.+4      	; 0x99c <processLedIndicator+0x82>
     998:	81 50       	subi	r24, 0x01	; 1
     99a:	f8 cf       	rjmp	.-16     	; 0x98c <processLedIndicator+0x72>
     99c:	8d e0       	ldi	r24, 0x0D	; 13
     99e:	f6 cf       	rjmp	.-20     	; 0x98c <processLedIndicator+0x72>
		next_wActivePos = 0;
		// Shift LED window
		processWindowShifter();	
		break;
	default:
		next_wActivePos = wActivePos + 1;
     9a0:	cf 5f       	subi	r28, 0xFF	; 255
		break;
	}		
	
	#ifdef 	USE_EXTRA_LED_DIGIT
	if (wActivePos == EXTRA_DIGIT_NUM)
     9a2:	80 91 df 00 	lds	r24, 0x00DF
     9a6:	86 30       	cpi	r24, 0x06	; 6
     9a8:	21 f4       	brne	.+8      	; 0x9b2 <processLedIndicator+0x98>
	{
		// Output separate LEDs state
		set_led_segments(extra_led_state);
     9aa:	80 91 41 01 	lds	r24, 0x0141
     9ae:	db d0       	rcall	.+438    	; 0xb66 <set_led_segments>
     9b0:	10 c0       	rjmp	.+32     	; 0x9d2 <processLedIndicator+0xb8>
	}
	else
	#endif
	{
		// Output new segment data
		set_led_segments(led_data_buffer[bufActivePos]);
     9b2:	e0 91 de 00 	lds	r30, 0x00DE
     9b6:	f0 e0       	ldi	r31, 0x00	; 0
     9b8:	eb 5b       	subi	r30, 0xBB	; 187
     9ba:	fe 4f       	sbci	r31, 0xFE	; 254
     9bc:	80 81       	ld	r24, Z
     9be:	d3 d0       	rcall	.+422    	; 0xb66 <set_led_segments>
		// Wrap around buffer length
		bufActivePos = inc_buffer_position(bufActivePos );
     9c0:	80 91 de 00 	lds	r24, 0x00DE
// Increments index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t inc_buffer_position(uint8_t position)
{
	return (position >= LED_BUFFER_LENGTH - 1) ? 0 : position + 1;
     9c4:	8d 30       	cpi	r24, 0x0D	; 13
     9c6:	10 f4       	brcc	.+4      	; 0x9cc <processLedIndicator+0xb2>
     9c8:	8f 5f       	subi	r24, 0xFF	; 255
     9ca:	01 c0       	rjmp	.+2      	; 0x9ce <processLedIndicator+0xb4>
     9cc:	80 e0       	ldi	r24, 0x00	; 0
	#endif
	{
		// Output new segment data
		set_led_segments(led_data_buffer[bufActivePos]);
		// Wrap around buffer length
		bufActivePos = inc_buffer_position(bufActivePos );
     9ce:	80 93 de 00 	sts	0x00DE, r24
	}
		
	wActivePos = next_wActivePos;
     9d2:	c0 93 df 00 	sts	0x00DF, r28
	
	#ifdef CLEAN_OPERATION
	enable_led_segments();
	#endif

}
     9d6:	cf 91       	pop	r28
     9d8:	08 95       	ret

000009da <fillLedBuffer>:
//---------------------------------------------//
// Fills buffer from (bufStartPos + offset) 
//	position with single char
//---------------------------------------------//
void fillLedBuffer(int8_t offset, uint8_t length, char c)
{
     9da:	0f 93       	push	r16
     9dc:	1f 93       	push	r17
     9de:	cf 93       	push	r28
     9e0:	df 93       	push	r29
     9e2:	1f 92       	push	r1
     9e4:	cd b7       	in	r28, 0x3d	; 61
     9e6:	de b7       	in	r29, 0x3e	; 62
     9e8:	18 2f       	mov	r17, r24
     9ea:	84 2f       	mov	r24, r20
	uint8_t val = decode_led_char(c);
     9ec:	69 83       	std	Y+1, r22	; 0x01
     9ee:	12 df       	rcall	.-476    	; 0x814 <decode_led_char>
     9f0:	08 2f       	mov	r16, r24
	// Ensure index is inside the buffer
	uint8_t position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
     9f2:	80 91 44 01 	lds	r24, 0x0144
     9f6:	81 0f       	add	r24, r17
     9f8:	80 df       	rcall	.-256    	; 0x8fa <wrap_led_buffer_index>
	while(length--)
     9fa:	69 81       	ldd	r22, Y+1	; 0x01
     9fc:	0a c0       	rjmp	.+20     	; 0xa12 <fillLedBuffer+0x38>
	{
		led_data_buffer[position] = val;
     9fe:	e8 2f       	mov	r30, r24
     a00:	f0 e0       	ldi	r31, 0x00	; 0
     a02:	eb 5b       	subi	r30, 0xBB	; 187
     a04:	fe 4f       	sbci	r31, 0xFE	; 254
     a06:	00 83       	st	Z, r16
// Increments index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t inc_buffer_position(uint8_t position)
{
	return (position >= LED_BUFFER_LENGTH - 1) ? 0 : position + 1;
     a08:	8d 30       	cpi	r24, 0x0D	; 13
     a0a:	10 f4       	brcc	.+4      	; 0xa10 <fillLedBuffer+0x36>
     a0c:	8f 5f       	subi	r24, 0xFF	; 255
     a0e:	01 c0       	rjmp	.+2      	; 0xa12 <fillLedBuffer+0x38>
     a10:	80 e0       	ldi	r24, 0x00	; 0
void fillLedBuffer(int8_t offset, uint8_t length, char c)
{
	uint8_t val = decode_led_char(c);
	// Ensure index is inside the buffer
	uint8_t position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
	while(length--)
     a12:	61 50       	subi	r22, 0x01	; 1
     a14:	a0 f7       	brcc	.-24     	; 0x9fe <fillLedBuffer+0x24>
	{
		led_data_buffer[position] = val;
		position = inc_buffer_position(position);
	}
}
     a16:	0f 90       	pop	r0
     a18:	df 91       	pop	r29
     a1a:	cf 91       	pop	r28
     a1c:	1f 91       	pop	r17
     a1e:	0f 91       	pop	r16
     a20:	08 95       	ret

00000a22 <startShiftingWindowLeft>:
//	LED window left 
//---------------------------------------------//
void startShiftingWindowLeft(void)
{
	// Clear spaces between menu states
	fillLedBuffer(-2,2,' ');
     a22:	40 e2       	ldi	r20, 0x20	; 32
     a24:	62 e0       	ldi	r22, 0x02	; 2
     a26:	8e ef       	ldi	r24, 0xFE	; 254
     a28:	d8 df       	rcall	.-80     	; 0x9da <fillLedBuffer>
	// Set new buffer position for writing
	bufStartPos = wrap_led_buffer_index( (int8_t)bufStartPos - (NUM_DIGITS + 2) );
     a2a:	80 91 44 01 	lds	r24, 0x0144
     a2e:	88 50       	subi	r24, 0x08	; 8
     a30:	64 df       	rcall	.-312    	; 0x8fa <wrap_led_buffer_index>
     a32:	80 93 44 01 	sts	0x0144, r24
	// Set shifter state
	shifterState = LED_SHIFT_LEFT;
     a36:	81 e0       	ldi	r24, 0x01	; 1
     a38:	80 93 43 01 	sts	0x0143, r24
     a3c:	08 95       	ret

00000a3e <startShiftingWindowRight>:
//	LED window right 
//---------------------------------------------//
void startShiftingWindowRight(void)
{
	// Clear spaces between menu states
	fillLedBuffer(NUM_DIGITS,2,' ');
     a3e:	40 e2       	ldi	r20, 0x20	; 32
     a40:	62 e0       	ldi	r22, 0x02	; 2
     a42:	86 e0       	ldi	r24, 0x06	; 6
     a44:	ca df       	rcall	.-108    	; 0x9da <fillLedBuffer>
	// Set new buffer position for writing
	bufStartPos = wrap_led_buffer_index( (int8_t)bufStartPos + NUM_DIGITS + 2 );
     a46:	80 91 44 01 	lds	r24, 0x0144
     a4a:	88 5f       	subi	r24, 0xF8	; 248
     a4c:	56 df       	rcall	.-340    	; 0x8fa <wrap_led_buffer_index>
     a4e:	80 93 44 01 	sts	0x0144, r24
	// Set shifter state
	shifterState = LED_SHIFT_RIGHT;
     a52:	82 e0       	ldi	r24, 0x02	; 2
     a54:	80 93 43 01 	sts	0x0143, r24
     a58:	08 95       	ret

00000a5a <initLedIndicator>:
//---------------------------------------------//
//	Initialization
//	Call this function at start of your program
//---------------------------------------------//
void initLedIndicator()
{
     a5a:	cf 93       	push	r28
	uint8_t i;
	// First disable outputs
	disable_led_segments();
     a5c:	a0 d0       	rcall	.+320    	; 0xb9e <disable_led_segments>
     a5e:	c7 e0       	ldi	r28, 0x07	; 7
	// Fill shift register with non-active levels
	for (i=0;i<NUM_DIGITS_TOTAL;i++)
	{
		led_clock_pulse(!LED_DIGIT_ACT_LVL);
     a60:	81 e0       	ldi	r24, 0x01	; 1
     a62:	71 d0       	rcall	.+226    	; 0xb46 <led_clock_pulse>
     a64:	c1 50       	subi	r28, 0x01	; 1
{
	uint8_t i;
	// First disable outputs
	disable_led_segments();
	// Fill shift register with non-active levels
	for (i=0;i<NUM_DIGITS_TOTAL;i++)
     a66:	e1 f7       	brne	.-8      	; 0xa60 <initLedIndicator+0x6>
	{
		led_clock_pulse(!LED_DIGIT_ACT_LVL);
	}
	// Now enable outputs
	enable_led_segments();
     a68:	93 d0       	rcall	.+294    	; 0xb90 <enable_led_segments>
	
	// Reset pointers
	wStartPos = 0;
     a6a:	10 92 42 01 	sts	0x0142, r1
	bufStartPos = 0;
     a6e:	10 92 44 01 	sts	0x0144, r1
	bufActivePos = 0;
     a72:	10 92 de 00 	sts	0x00DE, r1
	wActivePos = 0;
     a76:	10 92 df 00 	sts	0x00DF, r1
	#ifdef 	USE_EXTRA_LED_DIGIT
	extra_led_state = 0;
     a7a:	10 92 41 01 	sts	0x0141, r1
	#endif
	
	// Clear the buffer 
	fillLedBuffer(0,LED_BUFFER_LENGTH,' ');
     a7e:	40 e2       	ldi	r20, 0x20	; 32
     a80:	6e e0       	ldi	r22, 0x0E	; 14
     a82:	80 e0       	ldi	r24, 0x00	; 0
     a84:	aa df       	rcall	.-172    	; 0x9da <fillLedBuffer>
	
	// Initialize shift timer - always enabled, but 
	//	processed only when shifting is active
	shifterState = LED_SHIFT_DONE;
     a86:	10 92 43 01 	sts	0x0143, r1
	shiftTimer.Enabled = 1;
     a8a:	80 91 e0 00 	lds	r24, 0x00E0
	shiftTimer.RunOnce = 0;
     a8e:	81 60       	ori	r24, 0x01	; 1
     a90:	8d 7f       	andi	r24, 0xFD	; 253
     a92:	80 93 e0 00 	sts	0x00E0, r24
	shiftTimer.Top = LED_SHIFT_INTERVAL-1;
     a96:	89 e0       	ldi	r24, 0x09	; 9
     a98:	80 93 e2 00 	sts	0x00E2, r24
}
     a9c:	cf 91       	pop	r28
     a9e:	08 95       	ret

00000aa0 <printLedBuffer>:
//		str - null-terminated char string
// Comma and dot (".", ",") get special processing - first occurrence is added to
// a preceding char, next are displayed as a single digit
//---------------------------------------------//
void printLedBuffer(int8_t offset, char* str)
{
     aa0:	ff 92       	push	r15
     aa2:	0f 93       	push	r16
     aa4:	1f 93       	push	r17
     aa6:	cf 93       	push	r28
     aa8:	df 93       	push	r29
     aaa:	eb 01       	movw	r28, r22
	char c;
	uint8_t decoded_sym;
	uint8_t state = 0x02;
	uint8_t comma_pos;
	// Ensure index is inside the buffer
	uint8_t buffer_position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
     aac:	90 91 44 01 	lds	r25, 0x0144
     ab0:	89 0f       	add	r24, r25
     ab2:	23 df       	rcall	.-442    	; 0x8fa <wrap_led_buffer_index>
     ab4:	18 2f       	mov	r17, r24
	comma_pos = buffer_position;
     ab6:	f8 2e       	mov	r15, r24
//---------------------------------------------//
void printLedBuffer(int8_t offset, char* str)
{
	char c;
	uint8_t decoded_sym;
	uint8_t state = 0x02;
     ab8:	02 e0       	ldi	r16, 0x02	; 2
	uint8_t comma_pos;
	// Ensure index is inside the buffer
	uint8_t buffer_position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
	comma_pos = buffer_position;
	// Output chars
	while((c = *str++))
     aba:	23 c0       	rjmp	.+70     	; 0xb02 <printLedBuffer+0x62>
	{
		decoded_sym = decode_led_char(c);
     abc:	ab de       	rcall	.-682    	; 0x814 <decode_led_char>
		state = (decoded_sym == SEGH) ? (state | 0x01) : (state & ~0x01);
     abe:	80 38       	cpi	r24, 0x80	; 128
     ac0:	11 f4       	brne	.+4      	; 0xac6 <printLedBuffer+0x26>
     ac2:	01 60       	ori	r16, 0x01	; 1
     ac4:	01 c0       	rjmp	.+2      	; 0xac8 <printLedBuffer+0x28>
     ac6:	0e 7f       	andi	r16, 0xFE	; 254
		if (state == 0x01)			
     ac8:	01 30       	cpi	r16, 0x01	; 1
     aca:	49 f4       	brne	.+18     	; 0xade <printLedBuffer+0x3e>
		{
			led_data_buffer[comma_pos] |= decoded_sym;
     acc:	ef 2d       	mov	r30, r15
     ace:	f0 e0       	ldi	r31, 0x00	; 0
     ad0:	eb 5b       	subi	r30, 0xBB	; 187
     ad2:	fe 4f       	sbci	r31, 0xFE	; 254
     ad4:	90 81       	ld	r25, Z
     ad6:	98 2b       	or	r25, r24
     ad8:	90 83       	st	Z, r25
     ada:	81 2f       	mov	r24, r17
     adc:	0b c0       	rjmp	.+22     	; 0xaf4 <printLedBuffer+0x54>
		}
		else
		{
			led_data_buffer[buffer_position] = decoded_sym;	
     ade:	e1 2f       	mov	r30, r17
     ae0:	f0 e0       	ldi	r31, 0x00	; 0
     ae2:	eb 5b       	subi	r30, 0xBB	; 187
     ae4:	fe 4f       	sbci	r31, 0xFE	; 254
     ae6:	80 83       	st	Z, r24
// Increments index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t inc_buffer_position(uint8_t position)
{
	return (position >= LED_BUFFER_LENGTH - 1) ? 0 : position + 1;
     ae8:	1d 30       	cpi	r17, 0x0D	; 13
     aea:	18 f4       	brcc	.+6      	; 0xaf2 <printLedBuffer+0x52>
     aec:	81 2f       	mov	r24, r17
     aee:	8f 5f       	subi	r24, 0xFF	; 255
     af0:	01 c0       	rjmp	.+2      	; 0xaf4 <printLedBuffer+0x54>
     af2:	80 e0       	ldi	r24, 0x00	; 0
		comma_pos = buffer_position;
		if (state != 0x01)
		{
			buffer_position = inc_buffer_position(buffer_position);
		}
		state = (state & 0x01) ? 0x03 : 0x00;		
     af4:	00 ff       	sbrs	r16, 0
     af6:	02 c0       	rjmp	.+4      	; 0xafc <printLedBuffer+0x5c>
     af8:	03 e0       	ldi	r16, 0x03	; 3
     afa:	01 c0       	rjmp	.+2      	; 0xafe <printLedBuffer+0x5e>
     afc:	00 e0       	ldi	r16, 0x00	; 0
     afe:	f1 2e       	mov	r15, r17
     b00:	18 2f       	mov	r17, r24
	uint8_t comma_pos;
	// Ensure index is inside the buffer
	uint8_t buffer_position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
	comma_pos = buffer_position;
	// Output chars
	while((c = *str++))
     b02:	89 91       	ld	r24, Y+
     b04:	81 11       	cpse	r24, r1
     b06:	da cf       	rjmp	.-76     	; 0xabc <printLedBuffer+0x1c>
		{
			buffer_position = inc_buffer_position(buffer_position);
		}
		state = (state & 0x01) ? 0x03 : 0x00;		
	}
}
     b08:	df 91       	pop	r29
     b0a:	cf 91       	pop	r28
     b0c:	1f 91       	pop	r17
     b0e:	0f 91       	pop	r16
     b10:	ff 90       	pop	r15
     b12:	08 95       	ret

00000b14 <setComma>:
//	buffer cell
//---------------------------------------------//
void setComma(int8_t offset)
{
	// Ensure index is inside the buffer
	uint8_t position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
     b14:	90 91 44 01 	lds	r25, 0x0144
     b18:	89 0f       	add	r24, r25
     b1a:	ef de       	rcall	.-546    	; 0x8fa <wrap_led_buffer_index>
	led_data_buffer[position] |= (SEGH);
     b1c:	e8 2f       	mov	r30, r24
     b1e:	f0 e0       	ldi	r31, 0x00	; 0
     b20:	eb 5b       	subi	r30, 0xBB	; 187
     b22:	fe 4f       	sbci	r31, 0xFE	; 254
     b24:	80 81       	ld	r24, Z
     b26:	80 68       	ori	r24, 0x80	; 128
     b28:	80 83       	st	Z, r24
     b2a:	08 95       	ret

00000b2c <setExtraLeds>:
// Argument is ORed with current LED state
//---------------------------------------------//
inline void setExtraLeds(uint8_t leds_set_value)
{
		//asm("cli");
		extra_led_state |= leds_set_value;
     b2c:	90 91 41 01 	lds	r25, 0x0141
     b30:	98 2b       	or	r25, r24
     b32:	90 93 41 01 	sts	0x0141, r25
     b36:	08 95       	ret

00000b38 <clearExtraLeds>:
// Argument is AND NOTed with current LED state
//---------------------------------------------//
inline void clearExtraLeds(uint8_t leds_clear_value)
{
		//asm("cli");
		extra_led_state &= ~leds_clear_value;
     b38:	90 91 41 01 	lds	r25, 0x0141
     b3c:	80 95       	com	r24
     b3e:	89 23       	and	r24, r25
     b40:	80 93 41 01 	sts	0x0141, r24
     b44:	08 95       	ret

00000b46 <led_clock_pulse>:


// Clocks in bit into the shift register
void led_clock_pulse(uint8_t bit)
{
	if (bit)
     b46:	88 23       	and	r24, r24
     b48:	11 f0       	breq	.+4      	; 0xb4e <led_clock_pulse+0x8>
		PORTB |= (1<<PB_LED_DOUT);
     b4a:	c0 9a       	sbi	0x18, 0	; 24
     b4c:	01 c0       	rjmp	.+2      	; 0xb50 <led_clock_pulse+0xa>
	else
		PORTB &= ~(1<<PB_LED_DOUT);
     b4e:	c0 98       	cbi	0x18, 0	; 24
     b50:	8a e1       	ldi	r24, 0x1A	; 26
     b52:	8a 95       	dec	r24
     b54:	f1 f7       	brne	.-4      	; 0xb52 <led_clock_pulse+0xc>
     b56:	00 c0       	rjmp	.+0      	; 0xb58 <led_clock_pulse+0x12>
	_delay_us(SETUP_DELAY_US);
	PORTB |= (1<<PB_LED_CLK);
     b58:	c2 9a       	sbi	0x18, 2	; 24
     b5a:	8a e1       	ldi	r24, 0x1A	; 26
     b5c:	8a 95       	dec	r24
     b5e:	f1 f7       	brne	.-4      	; 0xb5c <led_clock_pulse+0x16>
     b60:	00 c0       	rjmp	.+0      	; 0xb62 <led_clock_pulse+0x1c>
	_delay_us(SHIFT_DELAY_US);
	PORTB &= ~(1<<PB_LED_CLK);
     b62:	c2 98       	cbi	0x18, 2	; 24
     b64:	08 95       	ret

00000b66 <set_led_segments>:
// Outputs decoded segment data to port bits
void set_led_segments(uint8_t seg_ch)
{
	uint8_t pdat;
	seg_ch ^= LED_SEGMENT_MASK;
	pdat = PORTC & ~( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
     b66:	25 b3       	in	r18, 0x15	; 21
	pdat |= (seg_ch & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
     b68:	98 2f       	mov	r25, r24
     b6a:	9f 71       	andi	r25, 0x1F	; 31
// Outputs decoded segment data to port bits
void set_led_segments(uint8_t seg_ch)
{
	uint8_t pdat;
	seg_ch ^= LED_SEGMENT_MASK;
	pdat = PORTC & ~( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
     b6c:	20 7e       	andi	r18, 0xE0	; 224
	pdat |= (seg_ch & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
     b6e:	92 2b       	or	r25, r18
	PORTC = pdat;
     b70:	95 bb       	out	0x15, r25	; 21
	seg_ch >>= 2;
	pdat = PORTB & ~( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     b72:	98 b3       	in	r25, 0x18	; 24
	uint8_t pdat;
	seg_ch ^= LED_SEGMENT_MASK;
	pdat = PORTC & ~( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
	pdat |= (seg_ch & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
	PORTC = pdat;
	seg_ch >>= 2;
     b74:	86 95       	lsr	r24
     b76:	86 95       	lsr	r24
	pdat = PORTB & ~( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
	pdat |= (seg_ch & ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) ));
     b78:	88 73       	andi	r24, 0x38	; 56
	seg_ch ^= LED_SEGMENT_MASK;
	pdat = PORTC & ~( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
	pdat |= (seg_ch & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
	PORTC = pdat;
	seg_ch >>= 2;
	pdat = PORTB & ~( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     b7a:	97 7c       	andi	r25, 0xC7	; 199
	pdat |= (seg_ch & ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) ));
     b7c:	89 2b       	or	r24, r25
	PORTB = pdat;
     b7e:	88 bb       	out	0x18, r24	; 24
     b80:	08 95       	ret

00000b82 <enable_led_segments_pullups>:

// Turns segment port bits to HI-Z and
// enables pull-ups
void enable_led_segments_pullups()
{
	PORTC |= ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
     b82:	85 b3       	in	r24, 0x15	; 21
     b84:	8f 61       	ori	r24, 0x1F	; 31
     b86:	85 bb       	out	0x15, r24	; 21
	PORTB |= ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     b88:	88 b3       	in	r24, 0x18	; 24
     b8a:	88 63       	ori	r24, 0x38	; 56
     b8c:	88 bb       	out	0x18, r24	; 24
     b8e:	08 95       	ret

00000b90 <enable_led_segments>:
}	

void enable_led_segments()
{
	DDRC |= ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
     b90:	84 b3       	in	r24, 0x14	; 20
     b92:	8f 61       	ori	r24, 0x1F	; 31
     b94:	84 bb       	out	0x14, r24	; 20
	DDRB |= ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     b96:	87 b3       	in	r24, 0x17	; 23
     b98:	88 63       	ori	r24, 0x38	; 56
     b9a:	87 bb       	out	0x17, r24	; 23
     b9c:	08 95       	ret

00000b9e <disable_led_segments>:
}

void disable_led_segments()
{
	DDRC &= ~( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
     b9e:	84 b3       	in	r24, 0x14	; 20
     ba0:	80 7e       	andi	r24, 0xE0	; 224
     ba2:	84 bb       	out	0x14, r24	; 20
	DDRB &= ~( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     ba4:	87 b3       	in	r24, 0x17	; 23
     ba6:	87 7c       	andi	r24, 0xC7	; 199
     ba8:	87 bb       	out	0x17, r24	; 23
     baa:	08 95       	ret

00000bac <capture_button_state>:


void capture_button_state()
{
	uint8_t pdat;
	pdat = PINB  & ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     bac:	86 b3       	in	r24, 0x16	; 22
     bae:	88 73       	andi	r24, 0x38	; 56
	pdat <<= 2;
	pdat |= (PINC & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
     bb0:	93 b3       	in	r25, 0x13	; 19

void capture_button_state()
{
	uint8_t pdat;
	pdat = PINB  & ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
	pdat <<= 2;
     bb2:	88 0f       	add	r24, r24
     bb4:	88 0f       	add	r24, r24
	pdat |= (PINC & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
     bb6:	9f 71       	andi	r25, 0x1F	; 31
     bb8:	89 2b       	or	r24, r25
	raw_button_state = pdat ^ RAW_BUTTONS_INVERSE_MASK;
     bba:	80 95       	com	r24
     bbc:	80 93 53 01 	sts	0x0153, r24
     bc0:	08 95       	ret

00000bc2 <processItemFunction>:
//	Arguments:
//		funcAddr - address of the function to run.
//-----------------------------------------------------------------//
static inline void processItemFunction(FuncPtr funcAddr)
{
	if (funcAddr != 0)
     bc2:	00 97       	sbiw	r24, 0x00	; 0
     bc4:	11 f0       	breq	.+4      	; 0xbca <processItemFunction+0x8>
		((FuncPtr)funcAddr)();
     bc6:	fc 01       	movw	r30, r24
     bc8:	09 94       	ijmp
     bca:	08 95       	ret

00000bcc <mf_setTempLeave>:
		clearExtraLeds(LED_TEMP);
}

void mf_setTempLeave(void)
{
	userTimer.Enabled = 0;
     bcc:	ec ee       	ldi	r30, 0xEC	; 236
     bce:	f0 e0       	ldi	r31, 0x00	; 0
     bd0:	80 81       	ld	r24, Z
     bd2:	8e 7f       	andi	r24, 0xFE	; 254
     bd4:	80 83       	st	Z, r24
     bd6:	08 95       	ret

00000bd8 <mf_leafSelectAct>:
	userTimer.FA_GE = 1;	
}

void mf_leafSelectAct(void)
{
	userTimer.Timer = 0;
     bd8:	10 92 ed 00 	sts	0x00ED, r1
	userTimer.Top = BLINK_PERIOD - 1;
     bdc:	87 e0       	ldi	r24, 0x07	; 7
     bde:	80 93 ee 00 	sts	0x00EE, r24
	userTimer.CompA = BLINK_PERIOD / 2;
     be2:	84 e0       	ldi	r24, 0x04	; 4
     be4:	80 93 ef 00 	sts	0x00EF, r24
	userTimer.Enabled = 1;
     be8:	ec ee       	ldi	r30, 0xEC	; 236
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	80 81       	ld	r24, Z
     bee:	81 60       	ori	r24, 0x01	; 1
     bf0:	80 83       	st	Z, r24
     bf2:	08 95       	ret

00000bf4 <mf_leafExit>:
}

void mf_leafExit(void)
{
	userTimer.Enabled = 0;	
     bf4:	ec ee       	ldi	r30, 0xEC	; 236
     bf6:	f0 e0       	ldi	r31, 0x00	; 0
     bf8:	80 81       	ld	r24, Z
     bfa:	8e 7f       	andi	r24, 0xFE	; 254
     bfc:	80 83       	st	Z, r24
     bfe:	08 95       	ret

00000c00 <mf_cdoneDo>:
	calculateCoeffs();
}

void mf_cdoneDo(void)
{
	printLedBuffer(0," DONE ");
     c00:	6e ea       	ldi	r22, 0xAE	; 174
     c02:	70 e0       	ldi	r23, 0x00	; 0
     c04:	80 e0       	ldi	r24, 0x00	; 0
     c06:	4c cf       	rjmp	.-360    	; 0xaa0 <printLedBuffer>

00000c08 <mf_actpoffDo>:
	autoPowerOffState = AUTO_POFF_ENTER;
}

// Indication of power off mode
void mf_actpoffDo(void)
{
     c08:	cf 93       	push	r28
     c0a:	df 93       	push	r29
     c0c:	cd b7       	in	r28, 0x3d	; 61
     c0e:	de b7       	in	r29, 0x3e	; 62
     c10:	27 97       	sbiw	r28, 0x07	; 7
     c12:	0f b6       	in	r0, 0x3f	; 63
     c14:	f8 94       	cli
     c16:	de bf       	out	0x3e, r29	; 62
     c18:	0f be       	out	0x3f, r0	; 63
     c1a:	cd bf       	out	0x3d, r28	; 61
	autoPowerOffState = AUTO_POFF_ACTIVE;
     c1c:	81 e0       	ldi	r24, 0x01	; 1
     c1e:	80 93 01 01 	sts	0x0101, r24
	char str[] = {' ',' ',' ','O','F','F',0};
     c22:	87 e0       	ldi	r24, 0x07	; 7
     c24:	ed e7       	ldi	r30, 0x7D	; 125
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	de 01       	movw	r26, r28
     c2a:	11 96       	adiw	r26, 0x01	; 1
     c2c:	01 90       	ld	r0, Z+
     c2e:	0d 92       	st	X+, r0
     c30:	8a 95       	dec	r24
     c32:	e1 f7       	brne	.-8      	; 0xc2c <mf_actpoffDo+0x24>
	printLedBuffer(0,str);
     c34:	be 01       	movw	r22, r28
     c36:	6f 5f       	subi	r22, 0xFF	; 255
     c38:	7f 4f       	sbci	r23, 0xFF	; 255
     c3a:	80 e0       	ldi	r24, 0x00	; 0
     c3c:	31 df       	rcall	.-414    	; 0xaa0 <printLedBuffer>
}
     c3e:	27 96       	adiw	r28, 0x07	; 7
     c40:	0f b6       	in	r0, 0x3f	; 63
     c42:	f8 94       	cli
     c44:	de bf       	out	0x3e, r29	; 62
     c46:	0f be       	out	0x3f, r0	; 63
     c48:	cd bf       	out	0x3d, r28	; 61
     c4a:	df 91       	pop	r29
     c4c:	cf 91       	pop	r28
     c4e:	08 95       	ret

00000c50 <mf_cdone2Select>:
}

void mf_cdone2Select(void)
{
	// Save current ADC as calibrating point
	cpoint2_adc = adc_normalized;
     c50:	80 91 1c 01 	lds	r24, 0x011C
     c54:	90 91 1d 01 	lds	r25, 0x011D
     c58:	90 93 3d 01 	sts	0x013D, r25
     c5c:	80 93 3c 01 	sts	0x013C, r24
	// Save current Celsius degree
	cpoint2 = cpoint2_copy;
     c60:	80 91 f1 00 	lds	r24, 0x00F1
     c64:	80 93 40 01 	sts	0x0140, r24
	// Calculate new coefficient for temperature conversion
	calculateCoeffs();
     c68:	bd ca       	rjmp	.-2694   	; 0x1e4 <calculateCoeffs>

00000c6a <mf_cdone1Select>:
//---------------------------------------------//

void mf_cdone1Select(void)
{
	// Save current ADC as calibrating point
	cpoint1_adc = adc_normalized;
     c6a:	80 91 1c 01 	lds	r24, 0x011C
     c6e:	90 91 1d 01 	lds	r25, 0x011D
     c72:	90 93 39 01 	sts	0x0139, r25
     c76:	80 93 38 01 	sts	0x0138, r24
	// Save current Celsius degree
	cpoint1 = cpoint1_copy;
     c7a:	80 91 f0 00 	lds	r24, 0x00F0
     c7e:	80 93 20 01 	sts	0x0120, r24
	// Calculate new coefficient for temperature conversion
	calculateCoeffs();
     c82:	b0 ca       	rjmp	.-2720   	; 0x1e4 <calculateCoeffs>

00000c84 <mf_autopoffDo>:

//---------------------------------------------//


void mf_autopoffDo(void)
{
     c84:	cf 93       	push	r28
     c86:	df 93       	push	r29
     c88:	cd b7       	in	r28, 0x3d	; 61
     c8a:	de b7       	in	r29, 0x3e	; 62
     c8c:	27 97       	sbiw	r28, 0x07	; 7
     c8e:	0f b6       	in	r0, 0x3f	; 63
     c90:	f8 94       	cli
     c92:	de bf       	out	0x3e, r29	; 62
     c94:	0f be       	out	0x3f, r0	; 63
     c96:	cd bf       	out	0x3d, r28	; 61
	char str[] = {'O','F','F',' ',' ',' ',0};
     c98:	87 e0       	ldi	r24, 0x07	; 7
     c9a:	e4 e8       	ldi	r30, 0x84	; 132
     c9c:	f0 e0       	ldi	r31, 0x00	; 0
     c9e:	de 01       	movw	r26, r28
     ca0:	11 96       	adiw	r26, 0x01	; 1
     ca2:	01 90       	ld	r0, Z+
     ca4:	0d 92       	st	X+, r0
     ca6:	8a 95       	dec	r24
     ca8:	e1 f7       	brne	.-8      	; 0xca2 <mf_autopoffDo+0x1e>
		
		
	if (button_state & (BD_UP | BR_UP))
     caa:	80 91 d0 00 	lds	r24, 0x00D0
     cae:	90 91 d1 00 	lds	r25, 0x00D1
     cb2:	9c 01       	movw	r18, r24
     cb4:	22 70       	andi	r18, 0x02	; 2
     cb6:	34 70       	andi	r19, 0x04	; 4
     cb8:	23 2b       	or	r18, r19
     cba:	31 f0       	breq	.+12     	; 0xcc8 <mf_autopoffDo+0x44>
	{
		if (power_off_timeout < MAX_POWEROFF_TIMEOUT)
     cbc:	80 91 3a 01 	lds	r24, 0x013A
     cc0:	8f 35       	cpi	r24, 0x5F	; 95
     cc2:	68 f4       	brcc	.+26     	; 0xcde <mf_autopoffDo+0x5a>
			power_off_timeout += 5;
     cc4:	8b 5f       	subi	r24, 0xFB	; 251
     cc6:	09 c0       	rjmp	.+18     	; 0xcda <mf_autopoffDo+0x56>
		restartMenuTimer();
	}
	else if (button_state & (BD_DOWN | BR_DOWN))
     cc8:	84 70       	andi	r24, 0x04	; 4
     cca:	98 70       	andi	r25, 0x08	; 8
     ccc:	89 2b       	or	r24, r25
     cce:	49 f0       	breq	.+18     	; 0xce2 <mf_autopoffDo+0x5e>
	{
		if (power_off_timeout > MIN_POWEROFF_TIMEOUT)
     cd0:	80 91 3a 01 	lds	r24, 0x013A
     cd4:	86 30       	cpi	r24, 0x06	; 6
     cd6:	18 f0       	brcs	.+6      	; 0xcde <mf_autopoffDo+0x5a>
			power_off_timeout -= 5;
     cd8:	85 50       	subi	r24, 0x05	; 5
     cda:	80 93 3a 01 	sts	0x013A, r24
//	 Restarts menu state timeout
//	Should be used in RUN function when control buttons are pressed.
//-----------------------------------------------------------------//
static void restartMenuTimer(void)
{
	menuTimer.Timer = 0;
     cde:	10 92 75 00 	sts	0x0075, r1
		if (power_off_timeout > MIN_POWEROFF_TIMEOUT)
			power_off_timeout -= 5;
		restartMenuTimer();
	}	
		
	if (userTimer.FA_GE)
     ce2:	80 91 ec 00 	lds	r24, 0x00EC
     ce6:	84 ff       	sbrs	r24, 4
     ce8:	10 c0       	rjmp	.+32     	; 0xd0a <mf_autopoffDo+0x86>
	{
		if (power_off_timeout != MAX_POWEROFF_TIMEOUT)
     cea:	80 91 3a 01 	lds	r24, 0x013A
     cee:	8f 35       	cpi	r24, 0x5F	; 95
     cf0:	41 f0       	breq	.+16     	; 0xd02 <mf_autopoffDo+0x7e>
			u16toa_align_right(power_off_timeout,str + 4,0x80 | 2,' ');	
     cf2:	20 e2       	ldi	r18, 0x20	; 32
     cf4:	42 e8       	ldi	r20, 0x82	; 130
     cf6:	be 01       	movw	r22, r28
     cf8:	6b 5f       	subi	r22, 0xFB	; 251
     cfa:	7f 4f       	sbci	r23, 0xFF	; 255
     cfc:	90 e0       	ldi	r25, 0x00	; 0
     cfe:	bd d2       	rcall	.+1402   	; 0x127a <u16toa_align_right>
     d00:	04 c0       	rjmp	.+8      	; 0xd0a <mf_autopoffDo+0x86>
		else 
		{
			str[4] = 'N';
     d02:	8e e4       	ldi	r24, 0x4E	; 78
     d04:	8d 83       	std	Y+5, r24	; 0x05
			str[5] = 'O';
     d06:	8f e4       	ldi	r24, 0x4F	; 79
     d08:	8e 83       	std	Y+6, r24	; 0x06
		}			
	}		
		
	printLedBuffer(0,str);
     d0a:	be 01       	movw	r22, r28
     d0c:	6f 5f       	subi	r22, 0xFF	; 255
     d0e:	7f 4f       	sbci	r23, 0xFF	; 255
     d10:	80 e0       	ldi	r24, 0x00	; 0
     d12:	c6 de       	rcall	.-628    	; 0xaa0 <printLedBuffer>
}
     d14:	27 96       	adiw	r28, 0x07	; 7
     d16:	0f b6       	in	r0, 0x3f	; 63
     d18:	f8 94       	cli
     d1a:	de bf       	out	0x3e, r29	; 62
     d1c:	0f be       	out	0x3f, r0	; 63
     d1e:	cd bf       	out	0x3d, r28	; 61
     d20:	df 91       	pop	r29
     d22:	cf 91       	pop	r28
     d24:	08 95       	ret

00000d26 <mf_realTempDo>:
	// !!! Clear LEAVE flag here !!!
	autoPowerOffState = 0;
}

void mf_realTempDo(void)
{
     d26:	cf 93       	push	r28
     d28:	df 93       	push	r29
     d2a:	cd b7       	in	r28, 0x3d	; 61
     d2c:	de b7       	in	r29, 0x3e	; 62
     d2e:	27 97       	sbiw	r28, 0x07	; 7
     d30:	0f b6       	in	r0, 0x3f	; 63
     d32:	f8 94       	cli
     d34:	de bf       	out	0x3e, r29	; 62
     d36:	0f be       	out	0x3f, r0	; 63
     d38:	cd bf       	out	0x3d, r28	; 61
	char str[] = {' ',' ',' ',' ',0xB0,'C',0};
     d3a:	87 e0       	ldi	r24, 0x07	; 7
     d3c:	eb e8       	ldi	r30, 0x8B	; 139
     d3e:	f0 e0       	ldi	r31, 0x00	; 0
     d40:	de 01       	movw	r26, r28
     d42:	11 96       	adiw	r26, 0x01	; 1
     d44:	01 90       	ld	r0, Z+
     d46:	0d 92       	st	X+, r0
     d48:	8a 95       	dec	r24
     d4a:	e1 f7       	brne	.-8      	; 0xd44 <mf_realTempDo+0x1e>
	// Output ADC result to LED
	u16toa_align_right(adc_celsius,str,0x80 | 4,' ');
     d4c:	20 e2       	ldi	r18, 0x20	; 32
     d4e:	44 e8       	ldi	r20, 0x84	; 132
     d50:	be 01       	movw	r22, r28
     d52:	6f 5f       	subi	r22, 0xFF	; 255
     d54:	7f 4f       	sbci	r23, 0xFF	; 255
     d56:	80 91 1e 01 	lds	r24, 0x011E
     d5a:	90 91 1f 01 	lds	r25, 0x011F
     d5e:	8d d2       	rcall	.+1306   	; 0x127a <u16toa_align_right>
	printLedBuffer(0,str);
     d60:	be 01       	movw	r22, r28
     d62:	6f 5f       	subi	r22, 0xFF	; 255
     d64:	7f 4f       	sbci	r23, 0xFF	; 255
     d66:	80 e0       	ldi	r24, 0x00	; 0
     d68:	9b de       	rcall	.-714    	; 0xaa0 <printLedBuffer>
}
     d6a:	27 96       	adiw	r28, 0x07	; 7
     d6c:	0f b6       	in	r0, 0x3f	; 63
     d6e:	f8 94       	cli
     d70:	de bf       	out	0x3e, r29	; 62
     d72:	0f be       	out	0x3f, r0	; 63
     d74:	cd bf       	out	0x3d, r28	; 61
     d76:	df 91       	pop	r29
     d78:	cf 91       	pop	r28
     d7a:	08 95       	ret

00000d7c <mf_calib2Do>:
}

//---------------------------------------------//

void mf_calib2Do(void)
{
     d7c:	cf 93       	push	r28
     d7e:	df 93       	push	r29
     d80:	cd b7       	in	r28, 0x3d	; 61
     d82:	de b7       	in	r29, 0x3e	; 62
     d84:	27 97       	sbiw	r28, 0x07	; 7
     d86:	0f b6       	in	r0, 0x3f	; 63
     d88:	f8 94       	cli
     d8a:	de bf       	out	0x3e, r29	; 62
     d8c:	0f be       	out	0x3f, r0	; 63
     d8e:	cd bf       	out	0x3d, r28	; 61
	char str[] = {'P','2',' ',' ',' ',' ',0};
     d90:	87 e0       	ldi	r24, 0x07	; 7
     d92:	e2 e9       	ldi	r30, 0x92	; 146
     d94:	f0 e0       	ldi	r31, 0x00	; 0
     d96:	de 01       	movw	r26, r28
     d98:	11 96       	adiw	r26, 0x01	; 1
     d9a:	01 90       	ld	r0, Z+
     d9c:	0d 92       	st	X+, r0
     d9e:	8a 95       	dec	r24
     da0:	e1 f7       	brne	.-8      	; 0xd9a <mf_calib2Do+0x1e>
	
	
	if (button_state & (BD_UP | BR_UP))
     da2:	80 91 d0 00 	lds	r24, 0x00D0
     da6:	90 91 d1 00 	lds	r25, 0x00D1
     daa:	9c 01       	movw	r18, r24
     dac:	22 70       	andi	r18, 0x02	; 2
     dae:	34 70       	andi	r19, 0x04	; 4
     db0:	23 2b       	or	r18, r19
     db2:	31 f0       	breq	.+12     	; 0xdc0 <mf_calib2Do+0x44>
	{
		if (cpoint2_copy < MAX_CALIB_TEMP)
     db4:	80 91 f1 00 	lds	r24, 0x00F1
     db8:	8a 3f       	cpi	r24, 0xFA	; 250
     dba:	68 f4       	brcc	.+26     	; 0xdd6 <mf_calib2Do+0x5a>
		cpoint2_copy += 1;
     dbc:	8f 5f       	subi	r24, 0xFF	; 255
     dbe:	09 c0       	rjmp	.+18     	; 0xdd2 <mf_calib2Do+0x56>
	}
	else if (button_state & (BD_DOWN | BR_DOWN))
     dc0:	84 70       	andi	r24, 0x04	; 4
     dc2:	98 70       	andi	r25, 0x08	; 8
     dc4:	89 2b       	or	r24, r25
     dc6:	39 f0       	breq	.+14     	; 0xdd6 <mf_calib2Do+0x5a>
	{
		if (cpoint2_copy > MIN_CALIB_TEMP)
     dc8:	80 91 f1 00 	lds	r24, 0x00F1
     dcc:	8b 30       	cpi	r24, 0x0B	; 11
     dce:	18 f0       	brcs	.+6      	; 0xdd6 <mf_calib2Do+0x5a>
		cpoint2_copy -= 1;
     dd0:	81 50       	subi	r24, 0x01	; 1
     dd2:	80 93 f1 00 	sts	0x00F1, r24
	}
	
	if (userTimer.FA_GE)
     dd6:	80 91 ec 00 	lds	r24, 0x00EC
     dda:	84 ff       	sbrs	r24, 4
     ddc:	09 c0       	rjmp	.+18     	; 0xdf0 <mf_calib2Do+0x74>
	{
		u16toa_align_right(cpoint2_copy,str + 3,0x80 | 3,' ');
     dde:	20 e2       	ldi	r18, 0x20	; 32
     de0:	43 e8       	ldi	r20, 0x83	; 131
     de2:	be 01       	movw	r22, r28
     de4:	6c 5f       	subi	r22, 0xFC	; 252
     de6:	7f 4f       	sbci	r23, 0xFF	; 255
     de8:	80 91 f1 00 	lds	r24, 0x00F1
     dec:	90 e0       	ldi	r25, 0x00	; 0
     dee:	45 d2       	rcall	.+1162   	; 0x127a <u16toa_align_right>
	}
	
	printLedBuffer(0,str);
     df0:	be 01       	movw	r22, r28
     df2:	6f 5f       	subi	r22, 0xFF	; 255
     df4:	7f 4f       	sbci	r23, 0xFF	; 255
     df6:	80 e0       	ldi	r24, 0x00	; 0
     df8:	53 de       	rcall	.-858    	; 0xaa0 <printLedBuffer>
	
	resetAutoPowerOffCounter();
     dfa:	9a d5       	rcall	.+2868   	; 0x1930 <resetAutoPowerOffCounter>
}
     dfc:	27 96       	adiw	r28, 0x07	; 7
     dfe:	0f b6       	in	r0, 0x3f	; 63
     e00:	f8 94       	cli
     e02:	de bf       	out	0x3e, r29	; 62
     e04:	0f be       	out	0x3f, r0	; 63
     e06:	cd bf       	out	0x3d, r28	; 61
     e08:	df 91       	pop	r29
     e0a:	cf 91       	pop	r28
     e0c:	08 95       	ret

00000e0e <mf_calib1Do>:
	cpoint1_copy = cpoint1;
	cpoint2_copy = cpoint2;
}

void mf_calib1Do(void)
{
     e0e:	cf 93       	push	r28
     e10:	df 93       	push	r29
     e12:	cd b7       	in	r28, 0x3d	; 61
     e14:	de b7       	in	r29, 0x3e	; 62
     e16:	27 97       	sbiw	r28, 0x07	; 7
     e18:	0f b6       	in	r0, 0x3f	; 63
     e1a:	f8 94       	cli
     e1c:	de bf       	out	0x3e, r29	; 62
     e1e:	0f be       	out	0x3f, r0	; 63
     e20:	cd bf       	out	0x3d, r28	; 61
	char str[] = {'P','1',' ',' ',' ',' ',0};
     e22:	87 e0       	ldi	r24, 0x07	; 7
     e24:	e9 e9       	ldi	r30, 0x99	; 153
     e26:	f0 e0       	ldi	r31, 0x00	; 0
     e28:	de 01       	movw	r26, r28
     e2a:	11 96       	adiw	r26, 0x01	; 1
     e2c:	01 90       	ld	r0, Z+
     e2e:	0d 92       	st	X+, r0
     e30:	8a 95       	dec	r24
     e32:	e1 f7       	brne	.-8      	; 0xe2c <mf_calib1Do+0x1e>
	
	
	if (button_state & (BD_UP | BR_UP))
     e34:	80 91 d0 00 	lds	r24, 0x00D0
     e38:	90 91 d1 00 	lds	r25, 0x00D1
     e3c:	9c 01       	movw	r18, r24
     e3e:	22 70       	andi	r18, 0x02	; 2
     e40:	34 70       	andi	r19, 0x04	; 4
     e42:	23 2b       	or	r18, r19
     e44:	31 f0       	breq	.+12     	; 0xe52 <mf_calib1Do+0x44>
	{
		if (cpoint1_copy < MAX_CALIB_TEMP)
     e46:	80 91 f0 00 	lds	r24, 0x00F0
     e4a:	8a 3f       	cpi	r24, 0xFA	; 250
     e4c:	68 f4       	brcc	.+26     	; 0xe68 <mf_calib1Do+0x5a>
			cpoint1_copy += 1;
     e4e:	8f 5f       	subi	r24, 0xFF	; 255
     e50:	09 c0       	rjmp	.+18     	; 0xe64 <mf_calib1Do+0x56>
	}
	else if (button_state & (BD_DOWN | BR_DOWN))
     e52:	84 70       	andi	r24, 0x04	; 4
     e54:	98 70       	andi	r25, 0x08	; 8
     e56:	89 2b       	or	r24, r25
     e58:	39 f0       	breq	.+14     	; 0xe68 <mf_calib1Do+0x5a>
	{
		if (cpoint1_copy > MIN_CALIB_TEMP)
     e5a:	80 91 f0 00 	lds	r24, 0x00F0
     e5e:	8b 30       	cpi	r24, 0x0B	; 11
     e60:	18 f0       	brcs	.+6      	; 0xe68 <mf_calib1Do+0x5a>
			cpoint1_copy -= 1;
     e62:	81 50       	subi	r24, 0x01	; 1
     e64:	80 93 f0 00 	sts	0x00F0, r24
	}
	
	if (userTimer.FA_GE)
     e68:	80 91 ec 00 	lds	r24, 0x00EC
     e6c:	84 ff       	sbrs	r24, 4
     e6e:	09 c0       	rjmp	.+18     	; 0xe82 <mf_calib1Do+0x74>
	{
		u16toa_align_right(cpoint1_copy,str + 3,0x80 | 3,' ');
     e70:	20 e2       	ldi	r18, 0x20	; 32
     e72:	43 e8       	ldi	r20, 0x83	; 131
     e74:	be 01       	movw	r22, r28
     e76:	6c 5f       	subi	r22, 0xFC	; 252
     e78:	7f 4f       	sbci	r23, 0xFF	; 255
     e7a:	80 91 f0 00 	lds	r24, 0x00F0
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	fc d1       	rcall	.+1016   	; 0x127a <u16toa_align_right>
	}
	
	printLedBuffer(0,str);
     e82:	be 01       	movw	r22, r28
     e84:	6f 5f       	subi	r22, 0xFF	; 255
     e86:	7f 4f       	sbci	r23, 0xFF	; 255
     e88:	80 e0       	ldi	r24, 0x00	; 0
     e8a:	0a de       	rcall	.-1004   	; 0xaa0 <printLedBuffer>
	
	resetAutoPowerOffCounter();
     e8c:	51 d5       	rcall	.+2722   	; 0x1930 <resetAutoPowerOffCounter>
}
     e8e:	27 96       	adiw	r28, 0x07	; 7
     e90:	0f b6       	in	r0, 0x3f	; 63
     e92:	f8 94       	cli
     e94:	de bf       	out	0x3e, r29	; 62
     e96:	0f be       	out	0x3f, r0	; 63
     e98:	cd bf       	out	0x3d, r28	; 61
     e9a:	df 91       	pop	r29
     e9c:	cf 91       	pop	r28
     e9e:	08 95       	ret

00000ea0 <mf_actpoffLeave>:
	printLedBuffer(0,str);
}

void mf_actpoffLeave(void)
{
	autoPowerOffState = AUTO_POFF_LEAVE;
     ea0:	84 e0       	ldi	r24, 0x04	; 4
     ea2:	80 93 01 01 	sts	0x0101, r24
	resetAutoPowerOffCounter();
     ea6:	44 c5       	rjmp	.+2696   	; 0x1930 <resetAutoPowerOffCounter>

00000ea8 <mf_actpoffSelect>:



void mf_actpoffSelect(void)
{
	clearExtraLeds(LED_TEMP | LED_ROLL);
     ea8:	83 e0       	ldi	r24, 0x03	; 3
     eaa:	46 de       	rcall	.-884    	; 0xb38 <clearExtraLeds>
	autoPowerOffState = AUTO_POFF_ENTER;
     eac:	82 e0       	ldi	r24, 0x02	; 2
     eae:	80 93 01 01 	sts	0x0101, r24
     eb2:	08 95       	ret

00000eb4 <mf_leafSelect>:

// Select and exit functions, common for leaf menu items 

void mf_leafSelect(void)
{
	clearExtraLeds(LED_TEMP | LED_ROLL);
     eb4:	83 e0       	ldi	r24, 0x03	; 3
     eb6:	40 de       	rcall	.-896    	; 0xb38 <clearExtraLeds>
	userTimer.FA_GE = 1;	
     eb8:	ec ee       	ldi	r30, 0xEC	; 236
     eba:	f0 e0       	ldi	r31, 0x00	; 0
     ebc:	80 81       	ld	r24, Z
     ebe:	80 61       	ori	r24, 0x10	; 16
     ec0:	80 83       	st	Z, r24
     ec2:	08 95       	ret

00000ec4 <mf_calibSelect>:

//---------------------------------------------//

void mf_calibSelect(void)
{
	mf_leafSelect();
     ec4:	f7 df       	rcall	.-18     	; 0xeb4 <mf_leafSelect>
	cpoint1_copy = cpoint1;
     ec6:	80 91 20 01 	lds	r24, 0x0120
     eca:	80 93 f0 00 	sts	0x00F0, r24
	cpoint2_copy = cpoint2;
     ece:	80 91 40 01 	lds	r24, 0x0140
     ed2:	80 93 f1 00 	sts	0x00F1, r24
     ed6:	08 95       	ret

00000ed8 <mf_rollLeave>:
	printLedBuffer(0,str);
}

void mf_rollLeave(void)
{
	clearExtraLeds(LED_ROLL);
     ed8:	82 e0       	ldi	r24, 0x02	; 2
     eda:	2e de       	rcall	.-932    	; 0xb38 <clearExtraLeds>
	userTimer.Enabled = 0;
     edc:	ec ee       	ldi	r30, 0xEC	; 236
     ede:	f0 e0       	ldi	r31, 0x00	; 0
     ee0:	80 81       	ld	r24, Z
     ee2:	8e 7f       	andi	r24, 0xFE	; 254
     ee4:	80 83       	st	Z, r24
     ee6:	08 95       	ret

00000ee8 <mf_setTempSelect>:
//---------------------------------------------//


void mf_setTempSelect(void)
{
	clearExtraLeds(LED_TEMP);
     ee8:	81 e0       	ldi	r24, 0x01	; 1
     eea:	26 de       	rcall	.-948    	; 0xb38 <clearExtraLeds>
	mf_leafSelectAct();		// setup and start timer
     eec:	75 ce       	rjmp	.-790    	; 0xbd8 <mf_leafSelectAct>

00000eee <mf_realTempLeave>:
	printLedBuffer(0,str);
}

void mf_realTempLeave(void)
{
	clearExtraLeds(LED_TEMP);
     eee:	81 e0       	ldi	r24, 0x01	; 1
     ef0:	23 ce       	rjmp	.-954    	; 0xb38 <clearExtraLeds>

00000ef2 <mf_sndenDo>:

//---------------------------------------------//


void mf_sndenDo(void)
{
     ef2:	cf 93       	push	r28
     ef4:	df 93       	push	r29
     ef6:	cd b7       	in	r28, 0x3d	; 61
     ef8:	de b7       	in	r29, 0x3e	; 62
     efa:	27 97       	sbiw	r28, 0x07	; 7
     efc:	0f b6       	in	r0, 0x3f	; 63
     efe:	f8 94       	cli
     f00:	de bf       	out	0x3e, r29	; 62
     f02:	0f be       	out	0x3f, r0	; 63
     f04:	cd bf       	out	0x3d, r28	; 61
	char str[] = {'S','N','D',' ',' ',' ',0};
     f06:	87 e0       	ldi	r24, 0x07	; 7
     f08:	e0 ea       	ldi	r30, 0xA0	; 160
     f0a:	f0 e0       	ldi	r31, 0x00	; 0
     f0c:	de 01       	movw	r26, r28
     f0e:	11 96       	adiw	r26, 0x01	; 1
     f10:	01 90       	ld	r0, Z+
     f12:	0d 92       	st	X+, r0
     f14:	8a 95       	dec	r24
     f16:	e1 f7       	brne	.-8      	; 0xf10 <mf_sndenDo+0x1e>
		
	if (button_state & (BD_UP | BD_DOWN))
     f18:	80 91 d0 00 	lds	r24, 0x00D0
     f1c:	90 91 d1 00 	lds	r25, 0x00D1
     f20:	86 70       	andi	r24, 0x06	; 6
     f22:	99 27       	eor	r25, r25
     f24:	89 2b       	or	r24, r25
     f26:	49 f0       	breq	.+18     	; 0xf3a <mf_sndenDo+0x48>
	{
		sound_enable = !sound_enable;
     f28:	81 e0       	ldi	r24, 0x01	; 1
     f2a:	90 91 2a 01 	lds	r25, 0x012A
     f2e:	91 11       	cpse	r25, r1
     f30:	80 e0       	ldi	r24, 0x00	; 0
     f32:	80 93 2a 01 	sts	0x012A, r24
//	 Restarts menu state timeout
//	Should be used in RUN function when control buttons are pressed.
//-----------------------------------------------------------------//
static void restartMenuTimer(void)
{
	menuTimer.Timer = 0;
     f36:	10 92 75 00 	sts	0x0075, r1
	{
		sound_enable = !sound_enable;
		restartMenuTimer();
	}			
		
	if (userTimer.FA_GE)
     f3a:	80 91 ec 00 	lds	r24, 0x00EC
     f3e:	84 ff       	sbrs	r24, 4
     f40:	0d c0       	rjmp	.+26     	; 0xf5c <mf_sndenDo+0x6a>
	{
		if (sound_enable)		
     f42:	80 91 2a 01 	lds	r24, 0x012A
     f46:	88 23       	and	r24, r24
     f48:	21 f0       	breq	.+8      	; 0xf52 <mf_sndenDo+0x60>
		{
			str[4] = 'O';
     f4a:	8f e4       	ldi	r24, 0x4F	; 79
     f4c:	8d 83       	std	Y+5, r24	; 0x05
			str[5] = 'N';
     f4e:	8e e4       	ldi	r24, 0x4E	; 78
     f50:	04 c0       	rjmp	.+8      	; 0xf5a <mf_sndenDo+0x68>
		}
		else
		{
			str[3] = 'O';
     f52:	8f e4       	ldi	r24, 0x4F	; 79
     f54:	8c 83       	std	Y+4, r24	; 0x04
			str[4] = 'F';
     f56:	86 e4       	ldi	r24, 0x46	; 70
     f58:	8d 83       	std	Y+5, r24	; 0x05
			str[5] = 'F';
     f5a:	8e 83       	std	Y+6, r24	; 0x06
		}			
	}
		
	printLedBuffer(0,str);
     f5c:	be 01       	movw	r22, r28
     f5e:	6f 5f       	subi	r22, 0xFF	; 255
     f60:	7f 4f       	sbci	r23, 0xFF	; 255
     f62:	80 e0       	ldi	r24, 0x00	; 0
     f64:	9d dd       	rcall	.-1222   	; 0xaa0 <printLedBuffer>
	setComma(2);
     f66:	82 e0       	ldi	r24, 0x02	; 2
     f68:	d5 dd       	rcall	.-1110   	; 0xb14 <setComma>
}
     f6a:	27 96       	adiw	r28, 0x07	; 7
     f6c:	0f b6       	in	r0, 0x3f	; 63
     f6e:	f8 94       	cli
     f70:	de bf       	out	0x3e, r29	; 62
     f72:	0f be       	out	0x3f, r0	; 63
     f74:	cd bf       	out	0x3d, r28	; 61
     f76:	df 91       	pop	r29
     f78:	cf 91       	pop	r28
     f7a:	08 95       	ret

00000f7c <mf_rollDo>:
	setExtraLeds(LED_ROLL);
	mf_leafSelectAct();		// setup and start timer
}

void mf_rollDo(void)
{
     f7c:	cf 93       	push	r28
     f7e:	df 93       	push	r29
     f80:	cd b7       	in	r28, 0x3d	; 61
     f82:	de b7       	in	r29, 0x3e	; 62
     f84:	27 97       	sbiw	r28, 0x07	; 7
     f86:	0f b6       	in	r0, 0x3f	; 63
     f88:	f8 94       	cli
     f8a:	de bf       	out	0x3e, r29	; 62
     f8c:	0f be       	out	0x3f, r0	; 63
     f8e:	cd bf       	out	0x3d, r28	; 61
	char str[] = {' ',' ',' ',' ',' ',' ',0};
     f90:	87 e0       	ldi	r24, 0x07	; 7
     f92:	e7 ea       	ldi	r30, 0xA7	; 167
     f94:	f0 e0       	ldi	r31, 0x00	; 0
     f96:	de 01       	movw	r26, r28
     f98:	11 96       	adiw	r26, 0x01	; 1
     f9a:	01 90       	ld	r0, Z+
     f9c:	0d 92       	st	X+, r0
     f9e:	8a 95       	dec	r24
     fa0:	e1 f7       	brne	.-8      	; 0xf9a <mf_rollDo+0x1e>
		
	if (button_state & (BD_UP | BR_UP))
     fa2:	80 91 d0 00 	lds	r24, 0x00D0
     fa6:	90 91 d1 00 	lds	r25, 0x00D1
     faa:	9c 01       	movw	r18, r24
     fac:	22 70       	andi	r18, 0x02	; 2
     fae:	34 70       	andi	r19, 0x04	; 4
     fb0:	40 91 2d 01 	lds	r20, 0x012D
     fb4:	23 2b       	or	r18, r19
     fb6:	21 f0       	breq	.+8      	; 0xfc0 <mf_rollDo+0x44>
	{
		if (rollCycleSet < MAX_ROLL_CYCLES)
     fb8:	43 36       	cpi	r20, 0x63	; 99
     fba:	58 f4       	brcc	.+22     	; 0xfd2 <mf_rollDo+0x56>
		rollCycleSet += 1;
     fbc:	4f 5f       	subi	r20, 0xFF	; 255
     fbe:	07 c0       	rjmp	.+14     	; 0xfce <mf_rollDo+0x52>
	}
	else if (button_state & (BD_DOWN | BR_DOWN))
     fc0:	84 70       	andi	r24, 0x04	; 4
     fc2:	98 70       	andi	r25, 0x08	; 8
     fc4:	89 2b       	or	r24, r25
     fc6:	29 f0       	breq	.+10     	; 0xfd2 <mf_rollDo+0x56>
	{
		if (rollCycleSet > MIN_ROLL_CYCLES)
     fc8:	42 30       	cpi	r20, 0x02	; 2
     fca:	18 f0       	brcs	.+6      	; 0xfd2 <mf_rollDo+0x56>
		rollCycleSet -= 1;
     fcc:	41 50       	subi	r20, 0x01	; 1
     fce:	40 93 2d 01 	sts	0x012D, r20
	}	
		
	u16toa_align_right(rollCycleSet,str + 4,0x80 | 2,' ');
     fd2:	20 e2       	ldi	r18, 0x20	; 32
     fd4:	42 e8       	ldi	r20, 0x82	; 130
     fd6:	be 01       	movw	r22, r28
     fd8:	6b 5f       	subi	r22, 0xFB	; 251
     fda:	7f 4f       	sbci	r23, 0xFF	; 255
     fdc:	80 91 2d 01 	lds	r24, 0x012D
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	4b d1       	rcall	.+662    	; 0x127a <u16toa_align_right>
	
	if ((!(rollState & ROLL_CYCLE)) || (userTimer.FA_GE))
     fe4:	80 91 f3 00 	lds	r24, 0x00F3
     fe8:	82 ff       	sbrs	r24, 2
     fea:	04 c0       	rjmp	.+8      	; 0xff4 <mf_rollDo+0x78>
     fec:	80 91 ec 00 	lds	r24, 0x00EC
     ff0:	84 ff       	sbrs	r24, 4
     ff2:	09 c0       	rjmp	.+18     	; 0x1006 <mf_rollDo+0x8a>
	{
		u16toa_align_right(activeRollCycle,str + 1,0x80 | 2,' ');
     ff4:	20 e2       	ldi	r18, 0x20	; 32
     ff6:	42 e8       	ldi	r20, 0x82	; 130
     ff8:	be 01       	movw	r22, r28
     ffa:	6e 5f       	subi	r22, 0xFE	; 254
     ffc:	7f 4f       	sbci	r23, 0xFF	; 255
     ffe:	80 91 f2 00 	lds	r24, 0x00F2
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	3a d1       	rcall	.+628    	; 0x127a <u16toa_align_right>
	}
	
	str[0] = 0;
    1006:	19 82       	std	Y+1, r1	; 0x01
	if (isTopPointValid())
    1008:	f1 d2       	rcall	.+1506   	; 0x15ec <isTopPointValid>
    100a:	88 23       	and	r24, r24
    100c:	19 f0       	breq	.+6      	; 0x1014 <mf_rollDo+0x98>
		str[0] |= SEGA;
    100e:	89 81       	ldd	r24, Y+1	; 0x01
    1010:	81 60       	ori	r24, 0x01	; 1
    1012:	89 83       	std	Y+1, r24	; 0x01
	if (isBottomPointValid())
    1014:	fb d2       	rcall	.+1526   	; 0x160c <isBottomPointValid>
    1016:	88 23       	and	r24, r24
    1018:	19 f0       	breq	.+6      	; 0x1020 <mf_rollDo+0xa4>
		str[0] |= SEGD;
    101a:	89 81       	ldd	r24, Y+1	; 0x01
    101c:	88 60       	ori	r24, 0x08	; 8
    101e:	89 83       	std	Y+1, r24	; 0x01
	if (str[0] == 0)
    1020:	89 81       	ldd	r24, Y+1	; 0x01
    1022:	81 11       	cpse	r24, r1
    1024:	02 c0       	rjmp	.+4      	; 0x102a <mf_rollDo+0xae>
		str[0] = ' ';
    1026:	80 e2       	ldi	r24, 0x20	; 32
    1028:	89 83       	std	Y+1, r24	; 0x01
		
	printLedBuffer(0,str);
    102a:	be 01       	movw	r22, r28
    102c:	6f 5f       	subi	r22, 0xFF	; 255
    102e:	7f 4f       	sbci	r23, 0xFF	; 255
    1030:	80 e0       	ldi	r24, 0x00	; 0
    1032:	36 dd       	rcall	.-1428   	; 0xaa0 <printLedBuffer>
}
    1034:	27 96       	adiw	r28, 0x07	; 7
    1036:	0f b6       	in	r0, 0x3f	; 63
    1038:	f8 94       	cli
    103a:	de bf       	out	0x3e, r29	; 62
    103c:	0f be       	out	0x3f, r0	; 63
    103e:	cd bf       	out	0x3d, r28	; 61
    1040:	df 91       	pop	r29
    1042:	cf 91       	pop	r28
    1044:	08 95       	ret

00001046 <mf_rollSelect>:
//---------------------------------------------//
//---------------------------------------------//

void mf_rollSelect(void)
{
	setExtraLeds(LED_ROLL);
    1046:	82 e0       	ldi	r24, 0x02	; 2
    1048:	71 dd       	rcall	.-1310   	; 0xb2c <setExtraLeds>
	mf_leafSelectAct();		// setup and start timer
    104a:	c6 cd       	rjmp	.-1140   	; 0xbd8 <mf_leafSelectAct>

0000104c <mf_setTempDo>:
	clearExtraLeds(LED_TEMP);
	mf_leafSelectAct();		// setup and start timer
}

void mf_setTempDo(void)
{
    104c:	cf 93       	push	r28
    104e:	df 93       	push	r29
    1050:	cd b7       	in	r28, 0x3d	; 61
    1052:	de b7       	in	r29, 0x3e	; 62
    1054:	27 97       	sbiw	r28, 0x07	; 7
    1056:	0f b6       	in	r0, 0x3f	; 63
    1058:	f8 94       	cli
    105a:	de bf       	out	0x3e, r29	; 62
    105c:	0f be       	out	0x3f, r0	; 63
    105e:	cd bf       	out	0x3d, r28	; 61
	char str[] = {' ',' ',' ',' ',0xB0,'C',0};
    1060:	87 e0       	ldi	r24, 0x07	; 7
    1062:	eb e8       	ldi	r30, 0x8B	; 139
    1064:	f0 e0       	ldi	r31, 0x00	; 0
    1066:	de 01       	movw	r26, r28
    1068:	11 96       	adiw	r26, 0x01	; 1
    106a:	01 90       	ld	r0, Z+
    106c:	0d 92       	st	X+, r0
    106e:	8a 95       	dec	r24
    1070:	e1 f7       	brne	.-8      	; 0x106a <mf_setTempDo+0x1e>

	
	if (button_state & (BD_UP | BR_UP))
    1072:	20 91 d0 00 	lds	r18, 0x00D0
    1076:	30 91 d1 00 	lds	r19, 0x00D1
    107a:	a9 01       	movw	r20, r18
    107c:	42 70       	andi	r20, 0x02	; 2
    107e:	54 70       	andi	r21, 0x04	; 4
    1080:	80 91 28 01 	lds	r24, 0x0128
    1084:	90 91 29 01 	lds	r25, 0x0129
    1088:	45 2b       	or	r20, r21
    108a:	29 f0       	breq	.+10     	; 0x1096 <mf_setTempDo+0x4a>
	{
		if (setup_temp_value < MAX_SET_TEMP)
    108c:	82 3d       	cpi	r24, 0xD2	; 210
    108e:	91 05       	cpc	r25, r1
    1090:	70 f4       	brcc	.+28     	; 0x10ae <mf_setTempDo+0x62>
			setup_temp_value += 5;
    1092:	05 96       	adiw	r24, 0x05	; 5
    1094:	08 c0       	rjmp	.+16     	; 0x10a6 <mf_setTempDo+0x5a>
		restartMenuTimer();
	}
	else if (button_state & (BD_DOWN | BR_DOWN))
    1096:	24 70       	andi	r18, 0x04	; 4
    1098:	38 70       	andi	r19, 0x08	; 8
    109a:	23 2b       	or	r18, r19
    109c:	51 f0       	breq	.+20     	; 0x10b2 <mf_setTempDo+0x66>
	{
		if (setup_temp_value > MIN_SET_TEMP)
    109e:	8f 31       	cpi	r24, 0x1F	; 31
    10a0:	91 05       	cpc	r25, r1
    10a2:	28 f0       	brcs	.+10     	; 0x10ae <mf_setTempDo+0x62>
			setup_temp_value -= 5;
    10a4:	05 97       	sbiw	r24, 0x05	; 5
    10a6:	90 93 29 01 	sts	0x0129, r25
    10aa:	80 93 28 01 	sts	0x0128, r24
//	 Restarts menu state timeout
//	Should be used in RUN function when control buttons are pressed.
//-----------------------------------------------------------------//
static void restartMenuTimer(void)
{
	menuTimer.Timer = 0;
    10ae:	10 92 75 00 	sts	0x0075, r1
			setup_temp_value -= 5;
		restartMenuTimer();
	}					
		
	// Output ADC result to LED
	u16toa_align_right(setup_temp_value,str,0x80 | 4,' ');
    10b2:	20 e2       	ldi	r18, 0x20	; 32
    10b4:	44 e8       	ldi	r20, 0x84	; 132
    10b6:	be 01       	movw	r22, r28
    10b8:	6f 5f       	subi	r22, 0xFF	; 255
    10ba:	7f 4f       	sbci	r23, 0xFF	; 255
    10bc:	80 91 28 01 	lds	r24, 0x0128
    10c0:	90 91 29 01 	lds	r25, 0x0129
    10c4:	da d0       	rcall	.+436    	; 0x127a <u16toa_align_right>
	printLedBuffer(0,str);
    10c6:	be 01       	movw	r22, r28
    10c8:	6f 5f       	subi	r22, 0xFF	; 255
    10ca:	7f 4f       	sbci	r23, 0xFF	; 255
    10cc:	80 e0       	ldi	r24, 0x00	; 0
    10ce:	e8 dc       	rcall	.-1584   	; 0xaa0 <printLedBuffer>
	
	if (userTimer.FA_GE)
    10d0:	80 91 ec 00 	lds	r24, 0x00EC
    10d4:	84 ff       	sbrs	r24, 4
    10d6:	03 c0       	rjmp	.+6      	; 0x10de <mf_setTempDo+0x92>
		setExtraLeds(LED_TEMP);
    10d8:	81 e0       	ldi	r24, 0x01	; 1
    10da:	28 dd       	rcall	.-1456   	; 0xb2c <setExtraLeds>
    10dc:	02 c0       	rjmp	.+4      	; 0x10e2 <mf_setTempDo+0x96>
	else
		clearExtraLeds(LED_TEMP);
    10de:	81 e0       	ldi	r24, 0x01	; 1
    10e0:	2b dd       	rcall	.-1450   	; 0xb38 <clearExtraLeds>
}
    10e2:	27 96       	adiw	r28, 0x07	; 7
    10e4:	0f b6       	in	r0, 0x3f	; 63
    10e6:	f8 94       	cli
    10e8:	de bf       	out	0x3e, r29	; 62
    10ea:	0f be       	out	0x3f, r0	; 63
    10ec:	cd bf       	out	0x3d, r28	; 61
    10ee:	df 91       	pop	r29
    10f0:	cf 91       	pop	r28
    10f2:	08 95       	ret

000010f4 <mf_realTempSelect>:
//=================================================================//


void mf_realTempSelect(void)
{
	setExtraLeds(LED_TEMP);
    10f4:	81 e0       	ldi	r24, 0x01	; 1
    10f6:	1a dd       	rcall	.-1484   	; 0xb2c <setExtraLeds>
	// !!! This is the only one auto power off exit menu item !!!
	// !!! Clear LEAVE flag here !!!
	autoPowerOffState = 0;
    10f8:	10 92 01 01 	sts	0x0101, r1
    10fc:	08 95       	ret

000010fe <getMenuFunctionRecord.constprop.0>:
//	Arguments:
//		menuItemID - ID of an item
//		menuRecord - pointer to function structure to fill
//	Output:
//-----------------------------------------------------------------//
static void getMenuFunctionRecord(uint8_t menuItemID, MenuFunctionRecord* menuRecord )
    10fe:	1f 93       	push	r17
    1100:	cf 93       	push	r28
    1102:	df 93       	push	r29
    1104:	c0 e0       	ldi	r28, 0x00	; 0
    1106:	d0 e0       	ldi	r29, 0x00	; 0
{
	uint8_t i;
	for (i = 0; i < sizeof(menuFunctionSet)/sizeof(MenuFunctionRecord); i++  )
	{
		readMenuRecord(&menuFunctionSet[i], menuRecord);
    1108:	17 e0       	ldi	r17, 0x07	; 7
    110a:	1c 9f       	mul	r17, r28
    110c:	90 01       	movw	r18, r0
    110e:	1d 9f       	mul	r17, r29
    1110:	30 0d       	add	r19, r0
    1112:	11 24       	eor	r1, r1
    1114:	2a 5d       	subi	r18, 0xDA	; 218
    1116:	3f 4f       	sbci	r19, 0xFF	; 255
//		fRecPtr		- address of the function record in the FLASH
//		resPtr		- address of the record to fill in the SRAM
//-----------------------------------------------------------------//
static inline void readMenuRecord(const MenuFunctionRecord* fRecPtr, MenuFunctionRecord* resPtr )
{
	resPtr->Item = pgm_read_byte(&fRecPtr->Item);
    1118:	f9 01       	movw	r30, r18
    111a:	94 91       	lpm	r25, Z
	resPtr->SelectFunction = (FuncPtr)pgm_read_word(&fRecPtr->SelectFunction);
    111c:	31 96       	adiw	r30, 0x01	; 1
    111e:	a5 91       	lpm	r26, Z+
    1120:	b4 91       	lpm	r27, Z
	resPtr->RunFunction = (FuncPtr)pgm_read_word(&fRecPtr->RunFunction);
    1122:	f9 01       	movw	r30, r18
    1124:	33 96       	adiw	r30, 0x03	; 3
    1126:	65 91       	lpm	r22, Z+
    1128:	74 91       	lpm	r23, Z
	resPtr->LeaveFunction = (FuncPtr)pgm_read_word(&fRecPtr->LeaveFunction);
    112a:	2b 5f       	subi	r18, 0xFB	; 251
    112c:	3f 4f       	sbci	r19, 0xFF	; 255
    112e:	f9 01       	movw	r30, r18
    1130:	45 91       	lpm	r20, Z+
    1132:	54 91       	lpm	r21, Z
{
	uint8_t i;
	for (i = 0; i < sizeof(menuFunctionSet)/sizeof(MenuFunctionRecord); i++  )
	{
		readMenuRecord(&menuFunctionSet[i], menuRecord);
		if (menuRecord->Item == menuItemID)
    1134:	98 13       	cpse	r25, r24
    1136:	03 c0       	rjmp	.+6      	; 0x113e <getMenuFunctionRecord.constprop.0+0x40>
    1138:	80 93 e5 00 	sts	0x00E5, r24
    113c:	06 c0       	rjmp	.+12     	; 0x114a <getMenuFunctionRecord.constprop.0+0x4c>
    113e:	21 96       	adiw	r28, 0x01	; 1
//	Output:
//-----------------------------------------------------------------//
static void getMenuFunctionRecord(uint8_t menuItemID, MenuFunctionRecord* menuRecord )
{
	uint8_t i;
	for (i = 0; i < sizeof(menuFunctionSet)/sizeof(MenuFunctionRecord); i++  )
    1140:	ce 30       	cpi	r28, 0x0E	; 14
    1142:	d1 05       	cpc	r29, r1
    1144:	11 f7       	brne	.-60     	; 0x110a <getMenuFunctionRecord.constprop.0+0xc>
    1146:	90 93 e5 00 	sts	0x00E5, r25
    114a:	a0 93 e6 00 	sts	0x00E6, r26
    114e:	b0 93 e7 00 	sts	0x00E7, r27
    1152:	60 93 e8 00 	sts	0x00E8, r22
    1156:	70 93 e9 00 	sts	0x00E9, r23
    115a:	40 93 ea 00 	sts	0x00EA, r20
    115e:	50 93 eb 00 	sts	0x00EB, r21
	{
		readMenuRecord(&menuFunctionSet[i], menuRecord);
		if (menuRecord->Item == menuItemID)
			break;
	}
}
    1162:	df 91       	pop	r29
    1164:	cf 91       	pop	r28
    1166:	1f 91       	pop	r17
    1168:	08 95       	ret

0000116a <InitMenu>:
//	Menu initialization
//	Call this function at start of your program before processMenu()
//-----------------------------------------------------------------//
void InitMenu(void)
{
	selectedMenuItemID = mi_REALTEMP;
    116a:	81 e0       	ldi	r24, 0x01	; 1
    116c:	80 93 e4 00 	sts	0x00E4, r24
	getMenuFunctionRecord(selectedMenuItemID, &selectedMenuFunctionRecord);
    1170:	c6 df       	rcall	.-116    	; 0x10fe <getMenuFunctionRecord.constprop.0>
	processItemFunction(selectedMenuFunctionRecord.SelectFunction);
    1172:	80 91 e6 00 	lds	r24, 0x00E6
    1176:	90 91 e7 00 	lds	r25, 0x00E7
    117a:	23 cd       	rjmp	.-1466   	; 0xbc2 <processItemFunction>

0000117c <processMenu>:
//	Main menu control, -  state function calls, jumps 
//	between menu states and indication
//	Call this function from main() with a fixed time interval.
//-----------------------------------------------------------------//
void processMenu(void)
{
    117c:	ff 92       	push	r15
    117e:	0f 93       	push	r16
    1180:	1f 93       	push	r17
    1182:	cf 93       	push	r28
    1184:	df 93       	push	r29
	NextItem_t nextItem;
	uint16_t jumpCondition;
	
	processSoftTimer8b(&menuTimer);	
    1186:	84 e7       	ldi	r24, 0x74	; 116
    1188:	90 e0       	ldi	r25, 0x00	; 0
    118a:	7a d3       	rcall	.+1780   	; 0x1880 <processSoftTimer8b>
	
	// Compose jump condition
	jumpCondition = button_state;		
    118c:	40 91 d0 00 	lds	r20, 0x00D0
    1190:	50 91 d1 00 	lds	r21, 0x00D1
	if (menuTimer.FTop)
    1194:	80 91 74 00 	lds	r24, 0x0074
    1198:	85 fd       	sbrc	r24, 5
		jumpCondition |= TMR_EXP;
    119a:	50 68       	ori	r21, 0x80	; 128
	if (minute_counter >= power_off_timeout)
    119c:	90 91 00 01 	lds	r25, 0x0100
    11a0:	80 91 3a 01 	lds	r24, 0x013A
    11a4:	98 17       	cp	r25, r24
    11a6:	08 f0       	brcs	.+2      	; 0x11aa <processMenu+0x2e>
		jumpCondition |= GOTO_POFF;
    11a8:	50 64       	ori	r21, 0x40	; 64
	
	// Get next menu item according to current state and jump conditions
	nextItem = getNextMenuItem(selectedMenuItemID, jumpCondition);
    11aa:	80 91 e4 00 	lds	r24, 0x00E4
    11ae:	60 e0       	ldi	r22, 0x00	; 0
    11b0:	70 e0       	ldi	r23, 0x00	; 0
	MenuJumpRecord	jRecord;
	uint8_t i;
	
	for (i = 0; i < sizeof(menuJumpSet)/sizeof(MenuJumpRecord); i++  )
	{
		readJumpRecord(&menuJumpSet[i], &jRecord);		// read full jump record
    11b2:	95 e0       	ldi	r25, 0x05	; 5
    11b4:	96 9f       	mul	r25, r22
    11b6:	90 01       	movw	r18, r0
    11b8:	97 9f       	mul	r25, r23
    11ba:	30 0d       	add	r19, r0
    11bc:	11 24       	eor	r1, r1
    11be:	28 57       	subi	r18, 0x78	; 120
    11c0:	3f 4f       	sbci	r19, 0xFF	; 255
//		jRecPtr		- address of the jump record in the FLASH
//		resPtr		- address of the record to fill in the SRAM
//-----------------------------------------------------------------//
static inline void readJumpRecord(const MenuJumpRecord* jRecPtr, MenuJumpRecord* resPtr )
{
	resPtr->Item = pgm_read_byte(&jRecPtr->Item);
    11c2:	f9 01       	movw	r30, r18
    11c4:	14 91       	lpm	r17, Z
	resPtr->JumpCondition = pgm_read_word(&jRecPtr->JumpCondition);
    11c6:	31 96       	adiw	r30, 0x01	; 1
    11c8:	a5 91       	lpm	r26, Z+
    11ca:	b4 91       	lpm	r27, Z
	resPtr->NextItem= pgm_read_byte(&jRecPtr->NextItem);
    11cc:	f9 01       	movw	r30, r18
    11ce:	33 96       	adiw	r30, 0x03	; 3
    11d0:	d4 91       	lpm	r29, Z
	resPtr->Flags= pgm_read_byte(&jRecPtr->Flags);
    11d2:	f9 01       	movw	r30, r18
    11d4:	34 96       	adiw	r30, 0x04	; 4
    11d6:	24 91       	lpm	r18, Z
	uint8_t i;
	
	for (i = 0; i < sizeof(menuJumpSet)/sizeof(MenuJumpRecord); i++  )
	{
		readJumpRecord(&menuJumpSet[i], &jRecord);		// read full jump record
		if (jRecord.Item == selectedItemId)				// If ID match,
    11d8:	18 13       	cpse	r17, r24
    11da:	0e c0       	rjmp	.+28     	; 0x11f8 <processMenu+0x7c>
		{
			if ((jRecord.JumpCondition & jmpCond) != 0)		// if any of jump conditions match too,
    11dc:	a4 23       	and	r26, r20
    11de:	b5 23       	and	r27, r21
    11e0:	ab 2b       	or	r26, r27
    11e2:	51 f0       	breq	.+20     	; 0x11f8 <processMenu+0x7c>
			{
				nextItem.ItemID = jRecord.NextItem;			// switch to next menu item
				nextItem.ItemTimeout = jRecord.Flags & TIMEOUT_MASK;
    11e4:	c2 2f       	mov	r28, r18
    11e6:	cf 73       	andi	r28, 0x3F	; 63
				nextItem.ShiftRight = (jRecord.Flags & SHIFT_RIGHT) ? 1 : 0;
    11e8:	26 fb       	bst	r18, 6
    11ea:	00 27       	eor	r16, r16
    11ec:	00 f9       	bld	r16, 0
				nextItem.ShiftLeft = (jRecord.Flags & SHIFT_LEFT) ? 1 : 0;
    11ee:	f2 2e       	mov	r15, r18
    11f0:	ff 1c       	adc	r15, r15
    11f2:	ff 24       	eor	r15, r15
    11f4:	ff 1c       	adc	r15, r15
    11f6:	06 c0       	rjmp	.+12     	; 0x1204 <processMenu+0x88>
    11f8:	6f 5f       	subi	r22, 0xFF	; 255
    11fa:	7f 4f       	sbci	r23, 0xFF	; 255
	NextItem_t nextItem;
	nextItem.ItemID = selectedItemId;
	MenuJumpRecord	jRecord;
	uint8_t i;
	
	for (i = 0; i < sizeof(menuJumpSet)/sizeof(MenuJumpRecord); i++  )
    11fc:	60 32       	cpi	r22, 0x20	; 32
    11fe:	71 05       	cpc	r23, r1
    1200:	c9 f6       	brne	.-78     	; 0x11b4 <processMenu+0x38>
		jumpCondition |= TMR_EXP;
	if (minute_counter >= power_off_timeout)
		jumpCondition |= GOTO_POFF;
	
	// Get next menu item according to current state and jump conditions
	nextItem = getNextMenuItem(selectedMenuItemID, jumpCondition);
    1202:	d8 2f       	mov	r29, r24
    1204:	10 e0       	ldi	r17, 0x00	; 0
    1206:	f0 fa       	bst	r15, 0
    1208:	10 f9       	bld	r17, 0
    120a:	00 fb       	bst	r16, 0
    120c:	11 f9       	bld	r17, 1
	
	// If next item differs from current
	if (nextItem.ItemID != selectedMenuItemID)
    120e:	d8 17       	cp	r29, r24
    1210:	09 f1       	breq	.+66     	; 0x1254 <processMenu+0xd8>
	{		
		// Call exit function for current item
		processItemFunction(selectedMenuFunctionRecord.LeaveFunction);
    1212:	80 91 ea 00 	lds	r24, 0x00EA
    1216:	90 91 eb 00 	lds	r25, 0x00EB
    121a:	d3 dc       	rcall	.-1626   	; 0xbc2 <processItemFunction>
		
		// If shifting is specified, start it before calling any 
		//	new menu item functions 
		if (nextItem.ShiftRight)
    121c:	11 ff       	sbrs	r17, 1
    121e:	02 c0       	rjmp	.+4      	; 0x1224 <processMenu+0xa8>
			startShiftingWindowRight();
    1220:	0e dc       	rcall	.-2020   	; 0xa3e <startShiftingWindowRight>
    1222:	02 c0       	rjmp	.+4      	; 0x1228 <processMenu+0xac>
		else if (nextItem.ShiftLeft)
    1224:	10 fd       	sbrc	r17, 0
			startShiftingWindowLeft();
    1226:	fd db       	rcall	.-2054   	; 0xa22 <startShiftingWindowLeft>
		
		// Select new item
		selectedMenuItemID = nextItem.ItemID;
    1228:	d0 93 e4 00 	sts	0x00E4, r29
		
		// Load from FLASH and save function pointers
		getMenuFunctionRecord(selectedMenuItemID, &selectedMenuFunctionRecord);
    122c:	8d 2f       	mov	r24, r29
    122e:	67 df       	rcall	.-306    	; 0x10fe <getMenuFunctionRecord.constprop.0>
		// Call select function for next item
		processItemFunction(selectedMenuFunctionRecord.SelectFunction);
    1230:	80 91 e6 00 	lds	r24, 0x00E6
    1234:	90 91 e7 00 	lds	r25, 0x00E7
    1238:	c4 dc       	rcall	.-1656   	; 0xbc2 <processItemFunction>
		// Start timer if timeout is enabled
		if (nextItem.ItemTimeout != 0)
    123a:	cc 23       	and	r28, r28
    123c:	c1 f0       	breq	.+48     	; 0x126e <processMenu+0xf2>
		{
			menuTimer.Top = nextItem.ItemTimeout * MENU_TIMEOUT_MULT;
    123e:	cc 0f       	add	r28, r28
    1240:	c0 93 76 00 	sts	0x0076, r28
			menuTimer.Timer = 0;
    1244:	10 92 75 00 	sts	0x0075, r1
			menuTimer.Enabled = 1;	
    1248:	80 91 74 00 	lds	r24, 0x0074
    124c:	81 60       	ori	r24, 0x01	; 1
    124e:	80 93 74 00 	sts	0x0074, r24
    1252:	0d c0       	rjmp	.+26     	; 0x126e <processMenu+0xf2>
		}
		
	}
	else
	{
		processSoftTimer8b(&userTimer);
    1254:	8c ee       	ldi	r24, 0xEC	; 236
    1256:	90 e0       	ldi	r25, 0x00	; 0
    1258:	13 d3       	rcall	.+1574   	; 0x1880 <processSoftTimer8b>
		// Stay at previous item
		processItemFunction(selectedMenuFunctionRecord.RunFunction);
    125a:	80 91 e8 00 	lds	r24, 0x00E8
    125e:	90 91 e9 00 	lds	r25, 0x00E9
	}	
}
    1262:	df 91       	pop	r29
    1264:	cf 91       	pop	r28
    1266:	1f 91       	pop	r17
    1268:	0f 91       	pop	r16
    126a:	ff 90       	pop	r15
	}
	else
	{
		processSoftTimer8b(&userTimer);
		// Stay at previous item
		processItemFunction(selectedMenuFunctionRecord.RunFunction);
    126c:	aa cc       	rjmp	.-1708   	; 0xbc2 <processItemFunction>
	}	
}
    126e:	df 91       	pop	r29
    1270:	cf 91       	pop	r28
    1272:	1f 91       	pop	r17
    1274:	0f 91       	pop	r16
    1276:	ff 90       	pop	r15
    1278:	08 95       	ret

0000127a <u16toa_align_right>:
// Converts uint16_t value into decimal string with right alignment
// len = number of digits output (without terminating '\0')
// len[7] = 1 -> no terminating '\0' at buffer[len]
// fill_char -> char used for string padding
void u16toa_align_right(uint16_t val, char *buffer, uint8_t len,char fill_char)
{
    127a:	cf 93       	push	r28
    127c:	df 93       	push	r29
	if (len & 0x80)
    127e:	47 ff       	sbrs	r20, 7
    1280:	05 c0       	rjmp	.+10     	; 0x128c <u16toa_align_right+0x12>
	{
		len = len & 0x7F;
    1282:	4f 77       	andi	r20, 0x7F	; 127
		buffer += len;	
    1284:	fb 01       	movw	r30, r22
    1286:	e4 0f       	add	r30, r20
    1288:	f1 1d       	adc	r31, r1
    128a:	04 c0       	rjmp	.+8      	; 0x1294 <u16toa_align_right+0x1a>
	}
	else
	{
		buffer += len;	
    128c:	fb 01       	movw	r30, r22
    128e:	e4 0f       	add	r30, r20
    1290:	f1 1d       	adc	r31, r1
		*buffer = 0;
    1292:	10 82       	st	Z, r1
	}
	
	do
	{
		*--buffer = val % 10 + '0';
    1294:	ca e0       	ldi	r28, 0x0A	; 10
    1296:	d0 e0       	ldi	r29, 0x00	; 0
    1298:	be 01       	movw	r22, r28
    129a:	c2 d3       	rcall	.+1924   	; 0x1a20 <__udivmodhi4>
    129c:	80 5d       	subi	r24, 0xD0	; 208
    129e:	82 93       	st	-Z, r24
		val /= 10;
    12a0:	cb 01       	movw	r24, r22
		len--;
    12a2:	41 50       	subi	r20, 0x01	; 1
	}
	while ((val != 0) && len);
    12a4:	00 97       	sbiw	r24, 0x00	; 0
    12a6:	21 f0       	breq	.+8      	; 0x12b0 <u16toa_align_right+0x36>
    12a8:	41 11       	cpse	r20, r1
    12aa:	f6 cf       	rjmp	.-20     	; 0x1298 <u16toa_align_right+0x1e>
    12ac:	01 c0       	rjmp	.+2      	; 0x12b0 <u16toa_align_right+0x36>
	
	// Padding
	while(len--)
		*--buffer = fill_char;
    12ae:	22 93       	st	-Z, r18
		len--;
	}
	while ((val != 0) && len);
	
	// Padding
	while(len--)
    12b0:	41 50       	subi	r20, 0x01	; 1
    12b2:	e8 f7       	brcc	.-6      	; 0x12ae <u16toa_align_right+0x34>
		*--buffer = fill_char;
}
    12b4:	df 91       	pop	r29
    12b6:	cf 91       	pop	r28
    12b8:	08 95       	ret

000012ba <init_system_io>:
//extern void powTest(void);

void init_system_io()
{
	// Setup Port D
	PORTD = 0; //(1<<PD_SYNCA | 1<<PD_SYNCB);
    12ba:	12 ba       	out	0x12, r1	; 18
	DDRD = (1<<PD_TXD | 1<<PD_M1 | 1<<PD_M2 | 1<<PD_HEATER | 1<<PD_HEAT_INDIC );
    12bc:	8e e3       	ldi	r24, 0x3E	; 62
    12be:	81 bb       	out	0x11, r24	; 17
	
	// Setup Port B
	PORTB = 0;
    12c0:	18 ba       	out	0x18, r1	; 24
	DDRB = (1<<PB_BEEPER | 1<<PB_LED_DOUT | 1<<PB_LED_CLK | 1<<PB_SEGF | 1<<PB_SEGG | 1<<PB_SEGH);
    12c2:	8f e3       	ldi	r24, 0x3F	; 63
    12c4:	87 bb       	out	0x17, r24	; 23
	
	PORTC = 0;
    12c6:	15 ba       	out	0x15, r1	; 21
	DDRC = (1<<PC_SEGA | 1<<PC_SEGB | 1<<PC_SEGC | 1<<PC_SEGD | 1<<PC_SEGE);	
    12c8:	8f e1       	ldi	r24, 0x1F	; 31
    12ca:	84 bb       	out	0x14, r24	; 20

	// Setup timer0
	// 1/1024 prescaler, T=64us @16MHz
	TCCR0 = (1<<CS02 | 0<<CS01 | 1<<CS00);
    12cc:	85 e0       	ldi	r24, 0x05	; 5
    12ce:	83 bf       	out	0x33, r24	; 51
	// Start 256 * 64us = 16384us interval
	TCNT0 = 0;
    12d0:	12 be       	out	0x32, r1	; 50
	// Clear interrupt flag
	TIFR |= (1<<TOV0);
    12d2:	88 b7       	in	r24, 0x38	; 56
    12d4:	81 60       	ori	r24, 0x01	; 1
    12d6:	88 bf       	out	0x38, r24	; 56
	// Enable interrupts from timer 0
	TIMSK |= (1<<TOIE0);
    12d8:	89 b7       	in	r24, 0x39	; 57
    12da:	81 60       	ori	r24, 0x01	; 1
    12dc:	89 bf       	out	0x39, r24	; 57
	
	// Setup timer2 as 1ms system frequency generator
	// 1/64 prescaler, CTC mode, OC2 disconnected
	TCCR2 = (1<<CS22 | 1<<WGM21);
    12de:	8c e0       	ldi	r24, 0x0C	; 12
    12e0:	85 bd       	out	0x25, r24	; 37
	OCR2 = 249;
    12e2:	89 ef       	ldi	r24, 0xF9	; 249
    12e4:	83 bd       	out	0x23, r24	; 35
	TIMSK |= (1<<OCIE2);
    12e6:	89 b7       	in	r24, 0x39	; 57
    12e8:	80 68       	ori	r24, 0x80	; 128
    12ea:	89 bf       	out	0x39, r24	; 57
	
	// Setup timer1 as beeper frequency generator
	// CTC mode, 1/64 prescaler
	TCCR1A = 0;
    12ec:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = (1<<WGM12 | 1<<CS11 | 1<<CS10);
    12ee:	8b e0       	ldi	r24, 0x0B	; 11
    12f0:	8e bd       	out	0x2e, r24	; 46
	// 1kHz beeper frequency default
	OCR1A = 127;
    12f2:	8f e7       	ldi	r24, 0x7F	; 127
    12f4:	90 e0       	ldi	r25, 0x00	; 0
    12f6:	9b bd       	out	0x2b, r25	; 43
    12f8:	8a bd       	out	0x2a, r24	; 42

	// Setup AC sync comparator
	// Interrupt on output toggle
	ACSR |= (1<<ACI);
    12fa:	44 9a       	sbi	0x08, 4	; 8
	ACSR = (1<<ACIE | 0<<ACIS1 | 0<<ACIS0);
    12fc:	88 e0       	ldi	r24, 0x08	; 8
    12fe:	88 b9       	out	0x08, r24	; 8
	
	// Setup ADC
	// Internal Vref + cap, input ADC5, 
	ADMUX = (1<<REFS1 | 1<<REFS0 | 0<<MUX3 | 1<<MUX2 | 0<<MUX1 | 1<<MUX0 );
    1300:	85 ec       	ldi	r24, 0xC5	; 197
    1302:	87 b9       	out	0x07, r24	; 7
	// Prescaler = 128
	ADCSRA = (1<<ADEN |/* 1<<ADFR |*/  1<<ADIE | 1<<ADPS2 | 1<<ADPS1 | 1<<ADPS0);
    1304:	8f e8       	ldi	r24, 0x8F	; 143
    1306:	86 b9       	out	0x06, r24	; 6
	
	// Setup USART
	// Double speed
	UCSRA = (1<<U2X);
    1308:	82 e0       	ldi	r24, 0x02	; 2
    130a:	8b b9       	out	0x0b, r24	; 11
	UCSRB = (1<<RXEN | 1<<TXEN | 0<<UCSZ2);
    130c:	88 e1       	ldi	r24, 0x18	; 24
    130e:	8a b9       	out	0x0a, r24	; 10
	// No parity, 1 stop bit, 8 bit
	UCSRC = (1<<URSEL | 0<<UPM1 | 0<<UPM0 | 0<<USBS | 1<<UCSZ1 | 1<<UCSZ0);
    1310:	86 e8       	ldi	r24, 0x86	; 134
    1312:	80 bd       	out	0x20, r24	; 32
	// 57600 @16MHz, 2x
	UBRRH=0x00;
    1314:	10 bc       	out	0x20, r1	; 32
	UBRRL=0x22;
    1316:	82 e2       	ldi	r24, 0x22	; 34
    1318:	89 b9       	out	0x09, r24	; 9
    131a:	08 95       	ret

0000131c <main>:




int main(void)
{
    131c:	cf 93       	push	r28
    131e:	df 93       	push	r29
    1320:	cd b7       	in	r28, 0x3d	; 61
    1322:	de b7       	in	r29, 0x3e	; 62
    1324:	2b 97       	sbiw	r28, 0x0b	; 11
    1326:	0f b6       	in	r0, 0x3f	; 63
    1328:	f8 94       	cli
    132a:	de bf       	out	0x3e, r29	; 62
    132c:	0f be       	out	0x3f, r0	; 63
    132e:	cd bf       	out	0x3d, r28	; 61
	char str[10];
	volatile uint8_t temp8u = 0x00;
    1330:	1b 86       	std	Y+11, r1	; 0x0b
	volatile uint16_t temp16u;
	
	// Initialize MCU IO
	init_system_io();
    1332:	c3 df       	rcall	.-122    	; 0x12ba <init_system_io>
	// Restore params from EEPROM
	restoreGlobalParams();
    1334:	34 da       	rcall	.-2968   	; 0x79e <restoreGlobalParams>
	// Calibrate ADC coefficients using restored params
	calculateCoeffs();
    1336:	56 d7       	rcall	.+3756   	; 0x21e4 <__data_load_end+0x63c>
	// Initialize LED indicator
	initLedIndicator();
    1338:	90 db       	rcall	.-2272   	; 0xa5a <initLedIndicator>
	// Initialize menu
	InitMenu();
    133a:	17 df       	rcall	.-466    	; 0x116a <InitMenu>
	// Enable interrupts
	sei();
    133c:	78 94       	sei
    133e:	04 c0       	rjmp	.+8      	; 0x1348 <main+0x2c>
	_delay_ms(50);
	// Check AC line
	while(p_state == 0x0F) 	
	{
		// Power control state machine has not changed - sync has not been detected
		printLedBuffer(0,"AC ERR");
    1340:	65 eb       	ldi	r22, 0xB5	; 181
    1342:	70 e0       	ldi	r23, 0x00	; 0
    1344:	80 e0       	ldi	r24, 0x00	; 0
    1346:	ac db       	rcall	.-2216   	; 0xaa0 <printLedBuffer>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1348:	2f ef       	ldi	r18, 0xFF	; 255
    134a:	80 e7       	ldi	r24, 0x70	; 112
    134c:	92 e0       	ldi	r25, 0x02	; 2
    134e:	21 50       	subi	r18, 0x01	; 1
    1350:	80 40       	sbci	r24, 0x00	; 0
    1352:	90 40       	sbci	r25, 0x00	; 0
    1354:	e1 f7       	brne	.-8      	; 0x134e <main+0x32>
    1356:	00 c0       	rjmp	.+0      	; 0x1358 <main+0x3c>
    1358:	00 00       	nop
	// Enable interrupts
	sei();
	// Safety delay for power part
	_delay_ms(50);
	// Check AC line
	while(p_state == 0x0F) 	
    135a:	80 91 78 00 	lds	r24, 0x0078
    135e:	8f 30       	cpi	r24, 0x0F	; 15
    1360:	79 f3       	breq	.-34     	; 0x1340 <main+0x24>
		printLedBuffer(0,"AC ERR");
		_delay_ms(50);
	}
	// If we get here, AC line is OK and at least one ADC count has been sampled.
	// Beep
	SetBeeperFreq(1000);
    1362:	88 ee       	ldi	r24, 0xE8	; 232
    1364:	93 e0       	ldi	r25, 0x03	; 3
    1366:	b8 d2       	rcall	.+1392   	; 0x18d8 <SetBeeperFreq>
	StartBeep(200);
    1368:	88 ec       	ldi	r24, 0xC8	; 200
    136a:	90 e0       	ldi	r25, 0x00	; 0
    136c:	d5 d2       	rcall	.+1450   	; 0x1918 <StartBeep>
	// Init heater PID control internal structures
	forceHeaterControlUpdate();
    136e:	f7 d0       	rcall	.+494    	; 0x155e <forceHeaterControlUpdate>
    1370:	2f ef       	ldi	r18, 0xFF	; 255
    1372:	81 ee       	ldi	r24, 0xE1	; 225
    1374:	94 e0       	ldi	r25, 0x04	; 4
    1376:	21 50       	subi	r18, 0x01	; 1
    1378:	80 40       	sbci	r24, 0x00	; 0
    137a:	90 40       	sbci	r25, 0x00	; 0
    137c:	e1 f7       	brne	.-8      	; 0x1376 <main+0x5a>
    137e:	00 c0       	rjmp	.+0      	; 0x1380 <main+0x64>
    1380:	00 00       	nop
	_delay_ms(100);
	// Start rotating
	setMotorDirection(ROLL_FWD);
    1382:	81 e0       	ldi	r24, 0x01	; 1
    1384:	f9 d0       	rcall	.+498    	; 0x1578 <setMotorDirection>
	// Clear timer
	menuUpdateTimer.FOvfl = 0;
    1386:	80 91 79 00 	lds	r24, 0x0079
    138a:	8f 7b       	andi	r24, 0xBF	; 191
    138c:	80 93 79 00 	sts	0x0079, r24

    while(1)
    {
		
		if (menuUpdateTimer.FOvfl)
    1390:	80 91 79 00 	lds	r24, 0x0079
    1394:	86 ff       	sbrs	r24, 6
    1396:	fc cf       	rjmp	.-8      	; 0x1390 <main+0x74>
		{
			// Get new temperature measurement - new value is pushed into ring buffer
			// once every AC line period
			update_normalized_adc();			// TODO: slow down temperature change (say once per 200-400ms)
    1398:	72 d7       	rcall	.+3812   	; 0x227e <__data_load_end+0x6d6>
			
			// Get new button state
			process_buttons();
    139a:	14 d8       	rcall	.-4056   	; 0x3c4 <process_buttons>
			
			// Give sound feedback
			if (button_state & BL_MENU)
    139c:	80 91 d0 00 	lds	r24, 0x00D0
    13a0:	90 91 d1 00 	lds	r25, 0x00D1
    13a4:	91 ff       	sbrs	r25, 1
    13a6:	03 c0       	rjmp	.+6      	; 0x13ae <main+0x92>
			{
				SetBeeperFreq(800);
    13a8:	80 e2       	ldi	r24, 0x20	; 32
    13aa:	93 e0       	ldi	r25, 0x03	; 3
    13ac:	06 c0       	rjmp	.+12     	; 0x13ba <main+0x9e>
				StartBeep(40);
			}
			else if (button_action_down & (BD_MENU | BD_UP | BD_DOWN | BD_HEATCTRL))
    13ae:	80 91 cf 00 	lds	r24, 0x00CF
    13b2:	87 74       	andi	r24, 0x47	; 71
    13b4:	31 f0       	breq	.+12     	; 0x13c2 <main+0xa6>
			{
				SetBeeperFreq(1000);
    13b6:	88 ee       	ldi	r24, 0xE8	; 232
    13b8:	93 e0       	ldi	r25, 0x03	; 3
    13ba:	8e d2       	rcall	.+1308   	; 0x18d8 <SetBeeperFreq>
				StartBeep(40);
    13bc:	88 e2       	ldi	r24, 0x28	; 40
    13be:	90 e0       	ldi	r25, 0x00	; 0
    13c0:	ab d2       	rcall	.+1366   	; 0x1918 <StartBeep>
			}	
			
			// Process automatic power off - it is important to call
			// this function before menu and power controls processing
			if (button_action_down)
    13c2:	80 91 cf 00 	lds	r24, 0x00CF
    13c6:	81 11       	cpse	r24, r1
			{
				resetAutoPowerOffCounter();
    13c8:	b3 d2       	rcall	.+1382   	; 0x1930 <resetAutoPowerOffCounter>
			}
			processAutoPowerOff();
    13ca:	b9 d2       	rcall	.+1394   	; 0x193e <processAutoPowerOff>

			// Process user menu states, settings and indication
			processMenu();
    13cc:	d7 de       	rcall	.-594    	; 0x117c <processMenu>
			
			// Process cyclic rolling, direction control
			processRollControl();	
    13ce:	5b d8       	rcall	.-3914   	; 0x486 <processRollControl>
			
			// Process heater regulation
			processHeaterControl();
    13d0:	67 d9       	rcall	.-3378   	; 0x6a0 <processHeaterControl>
		

			// Process log
			if (menuUpdateTimer.FA_TGL)
    13d2:	80 91 79 00 	lds	r24, 0x0079
    13d6:	82 ff       	sbrs	r24, 2
    13d8:	d6 cf       	rjmp	.-84     	; 0x1386 <main+0x6a>
				// Log to UART
				//---------------------------------//
				// Function is called every 50ms
				// UART message is sent every second call (once per 100ms)
				
				u16toa_align_right(adc_celsius,str,6,' ');				// Displayed temp, Celsius
    13da:	20 e2       	ldi	r18, 0x20	; 32
    13dc:	46 e0       	ldi	r20, 0x06	; 6
    13de:	be 01       	movw	r22, r28
    13e0:	6f 5f       	subi	r22, 0xFF	; 255
    13e2:	7f 4f       	sbci	r23, 0xFF	; 255
    13e4:	80 91 1e 01 	lds	r24, 0x011E
    13e8:	90 91 1f 01 	lds	r25, 0x011F
    13ec:	46 df       	rcall	.-372    	; 0x127a <u16toa_align_right>
				USART_sendstr(str);
    13ee:	ce 01       	movw	r24, r28
    13f0:	01 96       	adiw	r24, 0x01	; 1
    13f2:	f8 d2       	rcall	.+1520   	; 0x19e4 <USART_sendstr>
				
				u16toa_align_right(adc_normalized,str,6,' ');			// Displayed temp
    13f4:	20 e2       	ldi	r18, 0x20	; 32
    13f6:	46 e0       	ldi	r20, 0x06	; 6
    13f8:	be 01       	movw	r22, r28
    13fa:	6f 5f       	subi	r22, 0xFF	; 255
    13fc:	7f 4f       	sbci	r23, 0xFF	; 255
    13fe:	80 91 1c 01 	lds	r24, 0x011C
    1402:	90 91 1d 01 	lds	r25, 0x011D
    1406:	39 df       	rcall	.-398    	; 0x127a <u16toa_align_right>
				USART_sendstr(str);
    1408:	ce 01       	movw	r24, r28
    140a:	01 96       	adiw	r24, 0x01	; 1
    140c:	eb d2       	rcall	.+1494   	; 0x19e4 <USART_sendstr>
				
				u16toa_align_right(dbg_SetTempCelsius,str,6,' ');		// Temp setting, Celsius
    140e:	20 e2       	ldi	r18, 0x20	; 32
    1410:	46 e0       	ldi	r20, 0x06	; 6
    1412:	be 01       	movw	r22, r28
    1414:	6f 5f       	subi	r22, 0xFF	; 255
    1416:	7f 4f       	sbci	r23, 0xFF	; 255
    1418:	80 91 23 01 	lds	r24, 0x0123
    141c:	90 e0       	ldi	r25, 0x00	; 0
    141e:	2d df       	rcall	.-422    	; 0x127a <u16toa_align_right>
				USART_sendstr(str);
    1420:	ce 01       	movw	r24, r28
    1422:	01 96       	adiw	r24, 0x01	; 1
    1424:	df d2       	rcall	.+1470   	; 0x19e4 <USART_sendstr>
				
				u16toa_align_right(dbg_SetTempPID,str,6,' ');			// Temp setting, as input to PID
    1426:	20 e2       	ldi	r18, 0x20	; 32
    1428:	46 e0       	ldi	r20, 0x06	; 6
    142a:	be 01       	movw	r22, r28
    142c:	6f 5f       	subi	r22, 0xFF	; 255
    142e:	7f 4f       	sbci	r23, 0xFF	; 255
    1430:	80 91 3e 01 	lds	r24, 0x013E
    1434:	90 91 3f 01 	lds	r25, 0x013F
    1438:	20 df       	rcall	.-448    	; 0x127a <u16toa_align_right>
				USART_sendstr(str);
    143a:	ce 01       	movw	r24, r28
    143c:	01 96       	adiw	r24, 0x01	; 1
    143e:	d2 d2       	rcall	.+1444   	; 0x19e4 <USART_sendstr>
				
				u16toa_align_right(dbg_RealTempCelsius,str,8,' ');		// Real temp, sampled for PID input, Celsius
    1440:	20 e2       	ldi	r18, 0x20	; 32
    1442:	48 e0       	ldi	r20, 0x08	; 8
    1444:	be 01       	movw	r22, r28
    1446:	6f 5f       	subi	r22, 0xFF	; 255
    1448:	7f 4f       	sbci	r23, 0xFF	; 255
    144a:	80 91 3b 01 	lds	r24, 0x013B
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	14 df       	rcall	.-472    	; 0x127a <u16toa_align_right>
				USART_sendstr(str);
    1452:	ce 01       	movw	r24, r28
    1454:	01 96       	adiw	r24, 0x01	; 1
    1456:	c6 d2       	rcall	.+1420   	; 0x19e4 <USART_sendstr>
				
				u16toa_align_right(dbg_RealTempPID,str,6,' ');			// Real temp, sampled for PID input
    1458:	20 e2       	ldi	r18, 0x20	; 32
    145a:	46 e0       	ldi	r20, 0x06	; 6
    145c:	be 01       	movw	r22, r28
    145e:	6f 5f       	subi	r22, 0xFF	; 255
    1460:	7f 4f       	sbci	r23, 0xFF	; 255
    1462:	80 91 26 01 	lds	r24, 0x0126
    1466:	90 91 27 01 	lds	r25, 0x0127
    146a:	07 df       	rcall	.-498    	; 0x127a <u16toa_align_right>
				USART_sendstr(str);
    146c:	ce 01       	movw	r24, r28
    146e:	01 96       	adiw	r24, 0x01	; 1
    1470:	b9 d2       	rcall	.+1394   	; 0x19e4 <USART_sendstr>
				
				//u16toa_align_right(dbg_RealTempPIDfiltered,str,6,' ');			// Real temp, sampled for PID input, filtered
				//USART_sendstr(str);
				
				USART_sendstr("    ");
    1472:	8c eb       	ldi	r24, 0xBC	; 188
    1474:	90 e0       	ldi	r25, 0x00	; 0
    1476:	b6 d2       	rcall	.+1388   	; 0x19e4 <USART_sendstr>
				
				if (dbg_PID_p_term >= 0)
    1478:	80 91 24 01 	lds	r24, 0x0124
    147c:	90 91 25 01 	lds	r25, 0x0125
				{
					u16toa_align_right(dbg_PID_p_term,str,6,'0');		// p term
    1480:	20 e3       	ldi	r18, 0x30	; 48
    1482:	46 e0       	ldi	r20, 0x06	; 6
    1484:	be 01       	movw	r22, r28
    1486:	6f 5f       	subi	r22, 0xFF	; 255
    1488:	7f 4f       	sbci	r23, 0xFF	; 255
				//u16toa_align_right(dbg_RealTempPIDfiltered,str,6,' ');			// Real temp, sampled for PID input, filtered
				//USART_sendstr(str);
				
				USART_sendstr("    ");
				
				if (dbg_PID_p_term >= 0)
    148a:	97 fd       	sbrc	r25, 7
    148c:	02 c0       	rjmp	.+4      	; 0x1492 <main+0x176>
				{
					u16toa_align_right(dbg_PID_p_term,str,6,'0');		// p term
    148e:	f5 de       	rcall	.-534    	; 0x127a <u16toa_align_right>
    1490:	06 c0       	rjmp	.+12     	; 0x149e <main+0x182>
					USART_sendstr(str);	
				}
				else
				{
					u16toa_align_right(-dbg_PID_p_term,str,6,'0');		
    1492:	91 95       	neg	r25
    1494:	81 95       	neg	r24
    1496:	91 09       	sbc	r25, r1
    1498:	f0 de       	rcall	.-544    	; 0x127a <u16toa_align_right>
					USART_send('-');
    149a:	8d e2       	ldi	r24, 0x2D	; 45
    149c:	9e d2       	rcall	.+1340   	; 0x19da <USART_send>
					USART_sendstr(str);
    149e:	ce 01       	movw	r24, r28
    14a0:	01 96       	adiw	r24, 0x01	; 1
    14a2:	a0 d2       	rcall	.+1344   	; 0x19e4 <USART_sendstr>
				}
				
				USART_sendstr("    ");
    14a4:	8c eb       	ldi	r24, 0xBC	; 188
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	9d d2       	rcall	.+1338   	; 0x19e4 <USART_sendstr>
				
				if (dbg_PID_d_term >= 0)
    14aa:	80 91 36 01 	lds	r24, 0x0136
    14ae:	90 91 37 01 	lds	r25, 0x0137
				{
					u16toa_align_right(dbg_PID_d_term,str,6,'0');		// d term
    14b2:	20 e3       	ldi	r18, 0x30	; 48
    14b4:	46 e0       	ldi	r20, 0x06	; 6
    14b6:	be 01       	movw	r22, r28
    14b8:	6f 5f       	subi	r22, 0xFF	; 255
    14ba:	7f 4f       	sbci	r23, 0xFF	; 255
					USART_sendstr(str);
				}
				
				USART_sendstr("    ");
				
				if (dbg_PID_d_term >= 0)
    14bc:	97 fd       	sbrc	r25, 7
    14be:	02 c0       	rjmp	.+4      	; 0x14c4 <main+0x1a8>
				{
					u16toa_align_right(dbg_PID_d_term,str,6,'0');		// d term
    14c0:	dc de       	rcall	.-584    	; 0x127a <u16toa_align_right>
    14c2:	06 c0       	rjmp	.+12     	; 0x14d0 <main+0x1b4>
					USART_sendstr(str);
				}
				else
				{
					u16toa_align_right(-dbg_PID_d_term,str,6,'0');
    14c4:	91 95       	neg	r25
    14c6:	81 95       	neg	r24
    14c8:	91 09       	sbc	r25, r1
    14ca:	d7 de       	rcall	.-594    	; 0x127a <u16toa_align_right>
					USART_send('-');
    14cc:	8d e2       	ldi	r24, 0x2D	; 45
    14ce:	85 d2       	rcall	.+1290   	; 0x19da <USART_send>
					USART_sendstr(str);
    14d0:	ce 01       	movw	r24, r28
    14d2:	01 96       	adiw	r24, 0x01	; 1
    14d4:	87 d2       	rcall	.+1294   	; 0x19e4 <USART_sendstr>
				}
				
				USART_sendstr("    ");
    14d6:	8c eb       	ldi	r24, 0xBC	; 188
    14d8:	90 e0       	ldi	r25, 0x00	; 0
    14da:	84 d2       	rcall	.+1288   	; 0x19e4 <USART_sendstr>
				
				if (dbg_PID_i_term >= 0)
    14dc:	80 91 2b 01 	lds	r24, 0x012B
    14e0:	90 91 2c 01 	lds	r25, 0x012C
				{
					u16toa_align_right(dbg_PID_i_term,str,6,'0');		// i term
    14e4:	20 e3       	ldi	r18, 0x30	; 48
    14e6:	46 e0       	ldi	r20, 0x06	; 6
    14e8:	be 01       	movw	r22, r28
    14ea:	6f 5f       	subi	r22, 0xFF	; 255
    14ec:	7f 4f       	sbci	r23, 0xFF	; 255
					USART_sendstr(str);
				}
				
				USART_sendstr("    ");
				
				if (dbg_PID_i_term >= 0)
    14ee:	97 fd       	sbrc	r25, 7
    14f0:	02 c0       	rjmp	.+4      	; 0x14f6 <main+0x1da>
				{
					u16toa_align_right(dbg_PID_i_term,str,6,'0');		// i term
    14f2:	c3 de       	rcall	.-634    	; 0x127a <u16toa_align_right>
    14f4:	06 c0       	rjmp	.+12     	; 0x1502 <main+0x1e6>
					USART_sendstr(str);
				}
				else
				{
					u16toa_align_right(-dbg_PID_i_term,str,6,'0');
    14f6:	91 95       	neg	r25
    14f8:	81 95       	neg	r24
    14fa:	91 09       	sbc	r25, r1
    14fc:	be de       	rcall	.-644    	; 0x127a <u16toa_align_right>
					USART_send('-');
    14fe:	8d e2       	ldi	r24, 0x2D	; 45
    1500:	6c d2       	rcall	.+1240   	; 0x19da <USART_send>
					USART_sendstr(str);
    1502:	ce 01       	movw	r24, r28
    1504:	01 96       	adiw	r24, 0x01	; 1
    1506:	6e d2       	rcall	.+1244   	; 0x19e4 <USART_sendstr>
				}
				
				u16toa_align_right(dbg_PID_output,str,6,' ');			// PID output
    1508:	20 e2       	ldi	r18, 0x20	; 32
    150a:	46 e0       	ldi	r20, 0x06	; 6
    150c:	be 01       	movw	r22, r28
    150e:	6f 5f       	subi	r22, 0xFF	; 255
    1510:	7f 4f       	sbci	r23, 0xFF	; 255
    1512:	80 91 21 01 	lds	r24, 0x0121
    1516:	90 91 22 01 	lds	r25, 0x0122
    151a:	af de       	rcall	.-674    	; 0x127a <u16toa_align_right>
				USART_sendstr(str);
    151c:	ce 01       	movw	r24, r28
    151e:	01 96       	adiw	r24, 0x01	; 1
    1520:	61 d2       	rcall	.+1218   	; 0x19e4 <USART_sendstr>
				
				
				u16toa_align_right(ctrl_heater,str,6,' ');				// Heater control (PID output, synchronized)
    1522:	20 e2       	ldi	r18, 0x20	; 32
    1524:	46 e0       	ldi	r20, 0x06	; 6
    1526:	be 01       	movw	r22, r28
    1528:	6f 5f       	subi	r22, 0xFF	; 255
    152a:	7f 4f       	sbci	r23, 0xFF	; 255
    152c:	80 91 f6 00 	lds	r24, 0x00F6
    1530:	90 e0       	ldi	r25, 0x00	; 0
    1532:	a3 de       	rcall	.-698    	; 0x127a <u16toa_align_right>
				USART_sendstr(str);
    1534:	ce 01       	movw	r24, r28
    1536:	01 96       	adiw	r24, 0x01	; 1
    1538:	55 d2       	rcall	.+1194   	; 0x19e4 <USART_sendstr>
				
				
				USART_sendstr("\n\r");
    153a:	81 ec       	ldi	r24, 0xC1	; 193
    153c:	90 e0       	ldi	r25, 0x00	; 0
    153e:	52 d2       	rcall	.+1188   	; 0x19e4 <USART_sendstr>
    1540:	22 cf       	rjmp	.-444    	; 0x1386 <main+0x6a>

00001542 <setHeaterControl>:

// User function to control heater intensity
void setHeaterControl(uint8_t value)
{
	// Disable interrupts from timer0 
	TIMSK &= ~(1<<TOIE0);
    1542:	99 b7       	in	r25, 0x39	; 57
    1544:	9e 7f       	andi	r25, 0xFE	; 254
    1546:	99 bf       	out	0x39, r25	; 57
	
	ctrl_heater = value;
    1548:	80 93 f6 00 	sts	0x00F6, r24
	heaterState &= ~READY_TO_UPDATE_HEATER;
    154c:	80 91 f5 00 	lds	r24, 0x00F5
    1550:	8f 77       	andi	r24, 0x7F	; 127
    1552:	80 93 f5 00 	sts	0x00F5, r24
	
	// Enable interrupts from timer 0
	TIMSK |= (1<<TOIE0);	
    1556:	89 b7       	in	r24, 0x39	; 57
    1558:	81 60       	ori	r24, 0x01	; 1
    155a:	89 bf       	out	0x39, r24	; 57
    155c:	08 95       	ret

0000155e <forceHeaterControlUpdate>:


void forceHeaterControlUpdate(void)
{
	// Disable interrupts from timer0 
	TIMSK &= ~(1<<TOIE0);
    155e:	89 b7       	in	r24, 0x39	; 57
    1560:	8e 7f       	andi	r24, 0xFE	; 254
    1562:	89 bf       	out	0x39, r24	; 57
	
	// Flag READY_TO_UPDATE_HEATER will be set on next on next AC line period
	heater_cnt = HEATER_REGULATION_PERIODS - 6;
    1564:	8c e2       	ldi	r24, 0x2C	; 44
    1566:	80 93 f7 00 	sts	0x00F7, r24
	heater_reg_cnt = HEATER_PID_CALL_INTERVAL - 1;
    156a:	83 e0       	ldi	r24, 0x03	; 3
    156c:	80 93 f4 00 	sts	0x00F4, r24
	
	// Enable interrupts from timer 0
	TIMSK |= (1<<TOIE0);	
    1570:	89 b7       	in	r24, 0x39	; 57
    1572:	81 60       	ori	r24, 0x01	; 1
    1574:	89 bf       	out	0x39, r24	; 57
    1576:	08 95       	ret

00001578 <setMotorDirection>:
	
// User function to control motor rotation
void setMotorDirection(uint8_t dir)
{
	// Disable interrupts from timer0 
	TIMSK &= ~(1<<TOIE0);
    1578:	99 b7       	in	r25, 0x39	; 57
    157a:	9e 7f       	andi	r25, 0xFE	; 254
    157c:	99 bf       	out	0x39, r25	; 57
		
	newDirReq = dir;	// save new direction request
    157e:	80 93 f8 00 	sts	0x00F8, r24
	
	if (dir & ROLL_FWD)
    1582:	80 ff       	sbrs	r24, 0
    1584:	09 c0       	rjmp	.+18     	; 0x1598 <setMotorDirection+0x20>
		bottomPoint = rollPoint;
    1586:	80 91 f9 00 	lds	r24, 0x00F9
    158a:	90 91 fa 00 	lds	r25, 0x00FA
    158e:	90 93 fc 00 	sts	0x00FC, r25
    1592:	80 93 fb 00 	sts	0x00FB, r24
    1596:	0a c0       	rjmp	.+20     	; 0x15ac <setMotorDirection+0x34>
	else if (dir & ROLL_REV)
    1598:	81 ff       	sbrs	r24, 1
    159a:	08 c0       	rjmp	.+16     	; 0x15ac <setMotorDirection+0x34>
		topPoint = rollPoint;
    159c:	80 91 f9 00 	lds	r24, 0x00F9
    15a0:	90 91 fa 00 	lds	r25, 0x00FA
    15a4:	90 93 fe 00 	sts	0x00FE, r25
    15a8:	80 93 fd 00 	sts	0x00FD, r24

	// Enable interrupts from timer 0
	TIMSK |= (1<<TOIE0);	
    15ac:	89 b7       	in	r24, 0x39	; 57
    15ae:	81 60       	ori	r24, 0x01	; 1
    15b0:	89 bf       	out	0x39, r24	; 57
    15b2:	08 95       	ret

000015b4 <stopCycleRolling>:
}

void stopCycleRolling(uint8_t doResetPoints)
{
	// Disable interrupts from timer0 
	TIMSK &= ~(1<<TOIE0);
    15b4:	99 b7       	in	r25, 0x39	; 57
    15b6:	9e 7f       	andi	r25, 0xFE	; 254
    15b8:	99 bf       	out	0x39, r25	; 57
	
	rollState &= ~ROLL_CYCLE;
    15ba:	90 91 f3 00 	lds	r25, 0x00F3
    15be:	9b 7f       	andi	r25, 0xFB	; 251
    15c0:	90 93 f3 00 	sts	0x00F3, r25
	if (doResetPoints)
    15c4:	88 23       	and	r24, r24
    15c6:	71 f0       	breq	.+28     	; 0x15e4 <stopCycleRolling+0x30>
	{
		topPoint = bottomPoint = rollPoint;
    15c8:	80 91 f9 00 	lds	r24, 0x00F9
    15cc:	90 91 fa 00 	lds	r25, 0x00FA
    15d0:	90 93 fc 00 	sts	0x00FC, r25
    15d4:	80 93 fb 00 	sts	0x00FB, r24
    15d8:	90 93 fe 00 	sts	0x00FE, r25
    15dc:	80 93 fd 00 	sts	0x00FD, r24
		activeRollCycle = 0;	
    15e0:	10 92 f2 00 	sts	0x00F2, r1
	}		
	
	// Enable interrupts from timer 0
	TIMSK |= (1<<TOIE0);
    15e4:	89 b7       	in	r24, 0x39	; 57
    15e6:	81 60       	ori	r24, 0x01	; 1
    15e8:	89 bf       	out	0x39, r24	; 57
    15ea:	08 95       	ret

000015ec <isTopPointValid>:



uint8_t isTopPointValid(void)
{
	return (	(int16_t)(topPoint - rollPoint) >= 0 );
    15ec:	80 91 fd 00 	lds	r24, 0x00FD
    15f0:	90 91 fe 00 	lds	r25, 0x00FE
    15f4:	20 91 f9 00 	lds	r18, 0x00F9
    15f8:	30 91 fa 00 	lds	r19, 0x00FA
    15fc:	82 1b       	sub	r24, r18
    15fe:	93 0b       	sbc	r25, r19
    1600:	89 2f       	mov	r24, r25
    1602:	80 95       	com	r24
}
    1604:	88 1f       	adc	r24, r24
    1606:	88 27       	eor	r24, r24
    1608:	88 1f       	adc	r24, r24
    160a:	08 95       	ret

0000160c <isBottomPointValid>:

uint8_t isBottomPointValid(void)
{
	return (	(int16_t)(rollPoint - bottomPoint) >= 0	);
    160c:	80 91 f9 00 	lds	r24, 0x00F9
    1610:	90 91 fa 00 	lds	r25, 0x00FA
    1614:	20 91 fb 00 	lds	r18, 0x00FB
    1618:	30 91 fc 00 	lds	r19, 0x00FC
    161c:	82 1b       	sub	r24, r18
    161e:	93 0b       	sbc	r25, r19
    1620:	89 2f       	mov	r24, r25
    1622:	80 95       	com	r24
}
    1624:	88 1f       	adc	r24, r24
    1626:	88 27       	eor	r24, r24
    1628:	88 1f       	adc	r24, r24
    162a:	08 95       	ret

0000162c <startCycleRolling>:


uint8_t startCycleRolling(void)
{
	// Disable interrupts from timer0 
	TIMSK &= ~(1<<TOIE0);
    162c:	89 b7       	in	r24, 0x39	; 57
    162e:	8e 7f       	andi	r24, 0xFE	; 254
    1630:	89 bf       	out	0x39, r24	; 57
	
	if ( isTopPointValid() && isBottomPointValid() )
    1632:	dc df       	rcall	.-72     	; 0x15ec <isTopPointValid>
    1634:	88 23       	and	r24, r24
    1636:	59 f0       	breq	.+22     	; 0x164e <startCycleRolling+0x22>
    1638:	e9 df       	rcall	.-46     	; 0x160c <isBottomPointValid>
    163a:	88 23       	and	r24, r24
    163c:	41 f0       	breq	.+16     	; 0x164e <startCycleRolling+0x22>
	{
		rollState |= ROLL_CYCLE;
    163e:	80 91 f3 00 	lds	r24, 0x00F3
    1642:	84 60       	ori	r24, 0x04	; 4
    1644:	80 93 f3 00 	sts	0x00F3, r24
		activeRollCycle = 1;
    1648:	81 e0       	ldi	r24, 0x01	; 1
    164a:	80 93 f2 00 	sts	0x00F2, r24
	}
	
	// Enable interrupts from timer 0
	TIMSK |= (1<<TOIE0);
    164e:	89 b7       	in	r24, 0x39	; 57
    1650:	81 60       	ori	r24, 0x01	; 1
    1652:	89 bf       	out	0x39, r24	; 57
	
	return (rollState & ROLL_CYCLE);
    1654:	80 91 f3 00 	lds	r24, 0x00F3
}
    1658:	84 70       	andi	r24, 0x04	; 4
    165a:	08 95       	ret

0000165c <__vector_16>:




ISR(ANA_COMP_vect)
{
    165c:	1f 92       	push	r1
    165e:	0f 92       	push	r0
    1660:	0f b6       	in	r0, 0x3f	; 63
    1662:	0f 92       	push	r0
    1664:	11 24       	eor	r1, r1
    1666:	8f 93       	push	r24
    1668:	9f 93       	push	r25
	// Once triggered, disable further comparator interrupt
	ACSR &= ~(1<<ACIE);
    166a:	43 98       	cbi	0x08, 3	; 8
	// Turn on heater TRIAC
	if (heater_cnt < ctrl_heater_sync)
    166c:	90 91 f7 00 	lds	r25, 0x00F7
    1670:	80 91 ff 00 	lds	r24, 0x00FF
    1674:	98 17       	cp	r25, r24
    1676:	20 f4       	brcc	.+8      	; 0x1680 <__vector_16+0x24>
		PORTD |= (1<<PD_HEATER | 1<<PD_HEAT_INDIC);	// Direct heater indication
    1678:	82 b3       	in	r24, 0x12	; 18
    167a:	80 63       	ori	r24, 0x30	; 48
    167c:	82 bb       	out	0x12, r24	; 18
    167e:	01 c0       	rjmp	.+2      	; 0x1682 <__vector_16+0x26>
	else
		PORTD &= ~(1<<PD_HEAT_INDIC);
    1680:	95 98       	cbi	0x12, 5	; 18
	// Reprogram timer0
	TCNT0 = 256 - TRIAC_IMPULSE_TIME;		// Triac gate impulse time
    1682:	86 ef       	ldi	r24, 0xF6	; 246
    1684:	82 bf       	out	0x32, r24	; 50
	// Modify state	
	p_state &= ~STATE_MASK;					// Start new state machine cycle
    1686:	80 91 78 00 	lds	r24, 0x0078
    168a:	80 7f       	andi	r24, 0xF0	; 240
	p_state ^= HALF_PERIOD_FLAG;			// Toggle flag
    168c:	80 58       	subi	r24, 0x80	; 128
    168e:	80 93 78 00 	sts	0x0078, r24
	
}
    1692:	9f 91       	pop	r25
    1694:	8f 91       	pop	r24
    1696:	0f 90       	pop	r0
    1698:	0f be       	out	0x3f, r0	; 63
    169a:	0f 90       	pop	r0
    169c:	1f 90       	pop	r1
    169e:	18 95       	reti

000016a0 <__vector_9>:



ISR(TIMER0_OVF_vect)
{
    16a0:	1f 92       	push	r1
    16a2:	0f 92       	push	r0
    16a4:	0f b6       	in	r0, 0x3f	; 63
    16a6:	0f 92       	push	r0
    16a8:	11 24       	eor	r1, r1
    16aa:	2f 93       	push	r18
    16ac:	3f 93       	push	r19
    16ae:	4f 93       	push	r20
    16b0:	5f 93       	push	r21
    16b2:	6f 93       	push	r22
    16b4:	7f 93       	push	r23
    16b6:	8f 93       	push	r24
    16b8:	9f 93       	push	r25
    16ba:	af 93       	push	r26
    16bc:	bf 93       	push	r27
    16be:	ef 93       	push	r30
    16c0:	ff 93       	push	r31
	uint8_t temp;
	
	switch(p_state & STATE_MASK)
    16c2:	90 91 78 00 	lds	r25, 0x0078
    16c6:	89 2f       	mov	r24, r25
    16c8:	8f 70       	andi	r24, 0x0F	; 15
    16ca:	81 30       	cpi	r24, 0x01	; 1
    16cc:	51 f0       	breq	.+20     	; 0x16e2 <__vector_9+0x42>
    16ce:	28 f0       	brcs	.+10     	; 0x16da <__vector_9+0x3a>
    16d0:	82 30       	cpi	r24, 0x02	; 2
    16d2:	69 f0       	breq	.+26     	; 0x16ee <__vector_9+0x4e>
    16d4:	83 30       	cpi	r24, 0x03	; 3
    16d6:	89 f4       	brne	.+34     	; 0x16fa <__vector_9+0x5a>
    16d8:	0f c0       	rjmp	.+30     	; 0x16f8 <__vector_9+0x58>
	{
		// TRIAC_IMPULSE_TIME finished
		case 0x00:
			// Turn off heater TRIAC
			PORTD &= ~(1<<PD_HEATER);
    16da:	94 98       	cbi	0x12, 4	; 18
			TCNT0 = 256 - (QUATER_PERIOD_TIME - TRIAC_IMPULSE_TIME);
    16dc:	8c eb       	ldi	r24, 0xBC	; 188
    16de:	82 bf       	out	0x32, r24	; 50
			break;
    16e0:	0c c0       	rjmp	.+24     	; 0x16fa <__vector_9+0x5a>
		// QUATER_PERIOD_TIME finished	
		case 0x01:	
			TCNT0 = 256 - (SYNC_IGNORE_TIME - QUATER_PERIOD_TIME);
    16e2:	82 ec       	ldi	r24, 0xC2	; 194
    16e4:	82 bf       	out	0x32, r24	; 50
			// Start ADC conversion once every AC line period
			if (!(p_state & HALF_PERIOD_FLAG))
    16e6:	97 fd       	sbrc	r25, 7
    16e8:	08 c0       	rjmp	.+16     	; 0x16fa <__vector_9+0x5a>
				ADCSRA |= (1<<ADSC);
    16ea:	36 9a       	sbi	0x06, 6	; 6
    16ec:	06 c0       	rjmp	.+12     	; 0x16fa <__vector_9+0x5a>
			break;	
		// SYNC_IGNORE_TIME finished	
		case 0x02:
			TCNT0 = 256 - SYNC_LOST_TIMEOUT;
    16ee:	80 ee       	ldi	r24, 0xE0	; 224
    16f0:	82 bf       	out	0x32, r24	; 50
			// Clear flag and enable interrupt from analog comparator
			ACSR |= (1<<ACI);
    16f2:	44 9a       	sbi	0x08, 4	; 8
			ACSR |= (1<<ACIE);
    16f4:	43 9a       	sbi	0x08, 3	; 8
			break;
    16f6:	01 c0       	rjmp	.+2      	; 0x16fa <__vector_9+0x5a>
		// SYNC_LOST_TIMEOUT finished
		case 0x03:
			// Error - sync is lost. It means that device has been disconnected from AC line.
			// Disable all power-consuming devices like LEDs and save user settings to EEPROM.
			exitPowerOff();
    16f8:	8c d8       	rcall	.-3816   	; 0x812 <exitPowerOff>
			// Sync is not present - do nothing
			break;
	}	

	// Full period check
	if ((p_state & (HALF_PERIOD_FLAG | STATE_MASK)) == (HALF_PERIOD_FLAG | 0x01))
    16fa:	80 91 78 00 	lds	r24, 0x0078
    16fe:	8f 78       	andi	r24, 0x8F	; 143
    1700:	81 38       	cpi	r24, 0x81	; 129
    1702:	09 f0       	breq	.+2      	; 0x1706 <__vector_9+0x66>
    1704:	a3 c0       	rjmp	.+326    	; 0x184c <__vector_9+0x1ac>
	{
		// Full AC line period is done. Update controls.
		
		temp = PORTD;
    1706:	82 b3       	in	r24, 0x12	; 18
		temp &= ~(1<<PD_M1 | 1<<PD_M2);
    1708:	83 7f       	andi	r24, 0xF3	; 243
		if ( rollState & SKIP_CURRENT_MOTOR_CTRL )
    170a:	90 91 f3 00 	lds	r25, 0x00F3
    170e:	93 ff       	sbrs	r25, 3
    1710:	05 c0       	rjmp	.+10     	; 0x171c <__vector_9+0x7c>
		{
			// Direction control changed. Skip current period to allow TRIACs fully close
			rollState &= ~SKIP_CURRENT_MOTOR_CTRL;
    1712:	97 7f       	andi	r25, 0xF7	; 247
    1714:	90 93 f3 00 	sts	0x00F3, r25
			PORTD = temp; 	
    1718:	82 bb       	out	0x12, r24	; 18
    171a:	70 c0       	rjmp	.+224    	; 0x17fc <__vector_9+0x15c>
		}
		else
		{
			// Apply direction control 
			if (rollState & ROLL_FWD)
    171c:	90 ff       	sbrs	r25, 0
    171e:	02 c0       	rjmp	.+4      	; 0x1724 <__vector_9+0x84>
				temp |= (1<<PD_M1);
    1720:	84 60       	ori	r24, 0x04	; 4
    1722:	02 c0       	rjmp	.+4      	; 0x1728 <__vector_9+0x88>
			else if (rollState & ROLL_REV)
    1724:	91 fd       	sbrc	r25, 1
				temp |= (1<<PD_M2);
    1726:	88 60       	ori	r24, 0x08	; 8
			PORTD = temp; 
    1728:	82 bb       	out	0x12, r24	; 18
// Function to process rolling - sets rotation direction for next period
// Call once per each AC line period
static inline void controlRolling()
{
	// Process cycle rolling
	switch(rollState & (ROLL_FWD | ROLL_REV | ROLL_CYCLE))
    172a:	40 91 f3 00 	lds	r20, 0x00F3
    172e:	84 2f       	mov	r24, r20
    1730:	87 70       	andi	r24, 0x07	; 7
    1732:	85 30       	cpi	r24, 0x05	; 5
    1734:	19 f0       	breq	.+6      	; 0x173c <__vector_9+0x9c>
    1736:	86 30       	cpi	r24, 0x06	; 6
    1738:	e9 f5       	brne	.+122    	; 0x17b4 <__vector_9+0x114>
    173a:	1d c0       	rjmp	.+58     	; 0x1776 <__vector_9+0xd6>
//---------------------------------------------//
//---------------------------------------------//

static inline uint8_t reachedTopPoint(void)
{
	return (	(int16_t)(topPoint - rollPoint) <= 0 );
    173c:	80 91 fd 00 	lds	r24, 0x00FD
    1740:	90 91 fe 00 	lds	r25, 0x00FE
    1744:	20 91 f9 00 	lds	r18, 0x00F9
    1748:	30 91 fa 00 	lds	r19, 0x00FA
    174c:	82 1b       	sub	r24, r18
    174e:	93 0b       	sbc	r25, r19
{
	// Process cycle rolling
	switch(rollState & (ROLL_FWD | ROLL_REV | ROLL_CYCLE))
	{
		case (ROLL_FWD | ROLL_CYCLE):
			if (reachedTopPoint())
    1750:	18 16       	cp	r1, r24
    1752:	19 06       	cpc	r1, r25
    1754:	7c f1       	brlt	.+94     	; 0x17b4 <__vector_9+0x114>
			{
				if (activeRollCycle >= rollCycleSet)	
    1756:	80 91 f2 00 	lds	r24, 0x00F2
    175a:	90 91 2d 01 	lds	r25, 0x012D
    175e:	89 17       	cp	r24, r25
    1760:	28 f0       	brcs	.+10     	; 0x176c <__vector_9+0xcc>
				{
					// DONE!
					rollState &= ~ROLL_CYCLE;
    1762:	4b 7f       	andi	r20, 0xFB	; 251
					rollState |= CYCLE_ROLL_DONE;
    1764:	40 61       	ori	r20, 0x10	; 16
    1766:	40 93 f3 00 	sts	0x00F3, r20
    176a:	24 c0       	rjmp	.+72     	; 0x17b4 <__vector_9+0x114>
				}
				else
				{
					activeRollCycle++;
    176c:	8f 5f       	subi	r24, 0xFF	; 255
    176e:	80 93 f2 00 	sts	0x00F2, r24
					// Change dir	
					newDirReq = ROLL_REV;				
    1772:	82 e0       	ldi	r24, 0x02	; 2
    1774:	1d c0       	rjmp	.+58     	; 0x17b0 <__vector_9+0x110>
	return (	(int16_t)(topPoint - rollPoint) <= 0 );
}

static inline uint8_t reachedBottomPoint(void)
{
	return (	(int16_t)(rollPoint - bottomPoint) <= 0 );
    1776:	80 91 f9 00 	lds	r24, 0x00F9
    177a:	90 91 fa 00 	lds	r25, 0x00FA
    177e:	20 91 fb 00 	lds	r18, 0x00FB
    1782:	30 91 fc 00 	lds	r19, 0x00FC
    1786:	82 1b       	sub	r24, r18
    1788:	93 0b       	sbc	r25, r19
				}
			}
			break;
		
		case (ROLL_REV | ROLL_CYCLE):	
			if (reachedBottomPoint())
    178a:	18 16       	cp	r1, r24
    178c:	19 06       	cpc	r1, r25
    178e:	94 f0       	brlt	.+36     	; 0x17b4 <__vector_9+0x114>
			{
				if (activeRollCycle >= rollCycleSet)	
    1790:	80 91 f2 00 	lds	r24, 0x00F2
    1794:	90 91 2d 01 	lds	r25, 0x012D
    1798:	89 17       	cp	r24, r25
    179a:	30 f0       	brcs	.+12     	; 0x17a8 <__vector_9+0x108>
				{
					// DONE!
					rollState &= ~ROLL_CYCLE;
    179c:	84 2f       	mov	r24, r20
    179e:	8b 7f       	andi	r24, 0xFB	; 251
					rollState |= CYCLE_ROLL_DONE;
    17a0:	80 61       	ori	r24, 0x10	; 16
    17a2:	80 93 f3 00 	sts	0x00F3, r24
    17a6:	06 c0       	rjmp	.+12     	; 0x17b4 <__vector_9+0x114>
				}
				else
				{
					activeRollCycle++;
    17a8:	8f 5f       	subi	r24, 0xFF	; 255
    17aa:	80 93 f2 00 	sts	0x00F2, r24
					// Change dir	
					newDirReq = ROLL_FWD;
    17ae:	81 e0       	ldi	r24, 0x01	; 1
    17b0:	80 93 f8 00 	sts	0x00F8, r24
		default:
			break;
	}
	
	// Process direction change
	if ((rollState ^ newDirReq) & (ROLL_FWD | ROLL_REV))
    17b4:	20 91 f3 00 	lds	r18, 0x00F3
    17b8:	90 91 f8 00 	lds	r25, 0x00F8
    17bc:	89 2f       	mov	r24, r25
    17be:	82 27       	eor	r24, r18
    17c0:	83 70       	andi	r24, 0x03	; 3
    17c2:	19 f0       	breq	.+6      	; 0x17ca <__vector_9+0x12a>
	{
		// ROLL_DIR_CHANGED used for sound beep
		rollState |= (SKIP_CURRENT_MOTOR_CTRL | ROLL_DIR_CHANGED);
    17c4:	28 62       	ori	r18, 0x28	; 40
    17c6:	20 93 f3 00 	sts	0x00F3, r18
	}
	rollState &= ~(ROLL_FWD | ROLL_REV);
    17ca:	80 91 f3 00 	lds	r24, 0x00F3
    17ce:	8c 7f       	andi	r24, 0xFC	; 252
	rollState |= newDirReq;
    17d0:	89 2b       	or	r24, r25
    17d2:	80 93 f3 00 	sts	0x00F3, r24
	return (	(int16_t)(rollPoint - bottomPoint) <= 0 );
}

static inline void updateRollPoint(void)
{	
	if (rollState & ROLL_FWD)
    17d6:	80 ff       	sbrs	r24, 0
    17d8:	06 c0       	rjmp	.+12     	; 0x17e6 <__vector_9+0x146>
		rollPoint++;
    17da:	80 91 f9 00 	lds	r24, 0x00F9
    17de:	90 91 fa 00 	lds	r25, 0x00FA
    17e2:	01 96       	adiw	r24, 0x01	; 1
    17e4:	07 c0       	rjmp	.+14     	; 0x17f4 <__vector_9+0x154>
	else if (rollState & ROLL_REV)
    17e6:	81 ff       	sbrs	r24, 1
    17e8:	09 c0       	rjmp	.+18     	; 0x17fc <__vector_9+0x15c>
		rollPoint--;	
    17ea:	80 91 f9 00 	lds	r24, 0x00F9
    17ee:	90 91 fa 00 	lds	r25, 0x00FA
    17f2:	01 97       	sbiw	r24, 0x01	; 1
    17f4:	90 93 fa 00 	sts	0x00FA, r25
    17f8:	80 93 f9 00 	sts	0x00F9, r24
			controlRolling();
		}
			

		// Process heater control 
		if (heater_cnt == HEATER_REGULATION_PERIODS - 6)
    17fc:	80 91 f7 00 	lds	r24, 0x00F7
    1800:	8c 32       	cpi	r24, 0x2C	; 44
    1802:	b1 f4       	brne	.+44     	; 0x1830 <__vector_9+0x190>
		{
			 if (heater_reg_cnt == HEATER_PID_CALL_INTERVAL - 1)
    1804:	80 91 f4 00 	lds	r24, 0x00F4
    1808:	83 30       	cpi	r24, 0x03	; 3
    180a:	79 f4       	brne	.+30     	; 0x182a <__vector_9+0x18a>
			 {
				 heater_reg_cnt = 0;
    180c:	10 92 f4 00 	sts	0x00F4, r1
				 // Set flag for PID control
				 heaterState |= READY_TO_UPDATE_HEATER;
    1810:	80 91 f5 00 	lds	r24, 0x00F5
    1814:	80 68       	ori	r24, 0x80	; 128
    1816:	80 93 f5 00 	sts	0x00F5, r24
				 // Save temperature measure at current time
				 PIDsampledADC = getNormalizedRingU16(&ringBufADC);
    181a:	80 e6       	ldi	r24, 0x60	; 96
    181c:	90 e0       	ldi	r25, 0x00	; 0
    181e:	c6 d5       	rcall	.+2956   	; 0x23ac <__data_load_end+0x804>
    1820:	90 93 07 01 	sts	0x0107, r25
    1824:	80 93 06 01 	sts	0x0106, r24
    1828:	03 c0       	rjmp	.+6      	; 0x1830 <__vector_9+0x190>
			 }
			 else
			 {
				 heater_reg_cnt++;
    182a:	8f 5f       	subi	r24, 0xFF	; 255
    182c:	80 93 f4 00 	sts	0x00F4, r24
			 }
		}			 
		
		
		if (heater_cnt == HEATER_REGULATION_PERIODS - 1)
    1830:	80 91 f7 00 	lds	r24, 0x00F7
    1834:	81 33       	cpi	r24, 0x31	; 49
    1836:	39 f4       	brne	.+14     	; 0x1846 <__vector_9+0x1a6>
		{
			heater_cnt = 0;
    1838:	10 92 f7 00 	sts	0x00F7, r1
			// Copy new output value
			ctrl_heater_sync = ctrl_heater;
    183c:	80 91 f6 00 	lds	r24, 0x00F6
    1840:	80 93 ff 00 	sts	0x00FF, r24
    1844:	03 c0       	rjmp	.+6      	; 0x184c <__vector_9+0x1ac>
		}
		else
		{
			heater_cnt++;
    1846:	8f 5f       	subi	r24, 0xFF	; 255
    1848:	80 93 f7 00 	sts	0x00F7, r24
			
			
	}
	

	if ((p_state & STATE_MASK)  != 0x0F)
    184c:	80 91 78 00 	lds	r24, 0x0078
    1850:	98 2f       	mov	r25, r24
    1852:	9f 70       	andi	r25, 0x0F	; 15
    1854:	9f 30       	cpi	r25, 0x0F	; 15
    1856:	19 f0       	breq	.+6      	; 0x185e <__vector_9+0x1be>
		p_state++;
    1858:	8f 5f       	subi	r24, 0xFF	; 255
    185a:	80 93 78 00 	sts	0x0078, r24

}	
    185e:	ff 91       	pop	r31
    1860:	ef 91       	pop	r30
    1862:	bf 91       	pop	r27
    1864:	af 91       	pop	r26
    1866:	9f 91       	pop	r25
    1868:	8f 91       	pop	r24
    186a:	7f 91       	pop	r23
    186c:	6f 91       	pop	r22
    186e:	5f 91       	pop	r21
    1870:	4f 91       	pop	r20
    1872:	3f 91       	pop	r19
    1874:	2f 91       	pop	r18
    1876:	0f 90       	pop	r0
    1878:	0f be       	out	0x3f, r0	; 63
    187a:	0f 90       	pop	r0
    187c:	1f 90       	pop	r1
    187e:	18 95       	reti

00001880 <processSoftTimer8b>:
 
 
 
 
 void processSoftTimer8b(SoftTimer8b_t *tmr)
 {
    1880:	fc 01       	movw	r30, r24
	 uint8_t newTimerVal;

	 if (!tmr->Enabled)
    1882:	90 81       	ld	r25, Z
    1884:	90 ff       	sbrs	r25, 0
    1886:	27 c0       	rjmp	.+78     	; 0x18d6 <processSoftTimer8b+0x56>
		return;
	 
	 tmr->FA_EQ = 0;
	 tmr->FA_GE = 0;
	 tmr->FTop = 0;
    1888:	97 7e       	andi	r25, 0xE7	; 231
    188a:	9f 7d       	andi	r25, 0xDF	; 223
    188c:	90 83       	st	Z, r25
	 
	 if (tmr->Timer >= tmr->Top)
    188e:	81 81       	ldd	r24, Z+1	; 0x01
    1890:	22 81       	ldd	r18, Z+2	; 0x02
    1892:	82 17       	cp	r24, r18
    1894:	50 f0       	brcs	.+20     	; 0x18aa <processSoftTimer8b+0x2a>
	 {
		 if (tmr->RunOnce)
    1896:	91 ff       	sbrs	r25, 1
    1898:	02 c0       	rjmp	.+4      	; 0x189e <processSoftTimer8b+0x1e>
		 {
			 tmr->Enabled = 0;
    189a:	9e 7f       	andi	r25, 0xFE	; 254
    189c:	90 83       	st	Z, r25
		 }
		 tmr->FTop = 1;
    189e:	90 81       	ld	r25, Z
		 tmr->FOvfl = 1;
    18a0:	90 62       	ori	r25, 0x20	; 32
    18a2:	90 64       	ori	r25, 0x40	; 64
    18a4:	90 83       	st	Z, r25
		 newTimerVal = 0;
    18a6:	20 e0       	ldi	r18, 0x00	; 0
    18a8:	02 c0       	rjmp	.+4      	; 0x18ae <processSoftTimer8b+0x2e>
	 }
	 else
	 {
		 newTimerVal = tmr->Timer + 1;
    18aa:	28 2f       	mov	r18, r24
    18ac:	2f 5f       	subi	r18, 0xFF	; 255
	 }
	 
	 if (tmr->Timer == tmr->CompA)
    18ae:	93 81       	ldd	r25, Z+3	; 0x03
    18b0:	89 13       	cpse	r24, r25
    18b2:	0b c0       	rjmp	.+22     	; 0x18ca <processSoftTimer8b+0x4a>
	 {
		 tmr->FA_EQ = 1;
    18b4:	80 81       	ld	r24, Z
		 tmr->FA_GE = 1;
    18b6:	88 60       	ori	r24, 0x08	; 8
    18b8:	80 61       	ori	r24, 0x10	; 16
		 tmr->FA_TGL = !tmr->FA_TGL;
    18ba:	82 fb       	bst	r24, 2
    18bc:	99 27       	eor	r25, r25
    18be:	90 f9       	bld	r25, 0
    18c0:	31 e0       	ldi	r19, 0x01	; 1
    18c2:	93 27       	eor	r25, r19
    18c4:	90 fb       	bst	r25, 0
    18c6:	82 f9       	bld	r24, 2
    18c8:	04 c0       	rjmp	.+8      	; 0x18d2 <processSoftTimer8b+0x52>
	 }
	 else if (tmr->Timer >= tmr->CompA)
    18ca:	89 17       	cp	r24, r25
    18cc:	18 f0       	brcs	.+6      	; 0x18d4 <processSoftTimer8b+0x54>
	 {
		 tmr->FA_GE = 1;
    18ce:	80 81       	ld	r24, Z
    18d0:	80 61       	ori	r24, 0x10	; 16
    18d2:	80 83       	st	Z, r24
	 }
	 
	 tmr->Timer = newTimerVal; 
    18d4:	21 83       	std	Z+1, r18	; 0x01
    18d6:	08 95       	ret

000018d8 <SetBeeperFreq>:
}

// Setup beeper frequency (Hz)
void SetBeeperFreq(uint16_t freq_hz)
{
	uint16_t period_us = 1000000 / freq_hz;
    18d8:	9c 01       	movw	r18, r24
    18da:	40 e0       	ldi	r20, 0x00	; 0
    18dc:	50 e0       	ldi	r21, 0x00	; 0
    18de:	60 e4       	ldi	r22, 0x40	; 64
    18e0:	72 e4       	ldi	r23, 0x42	; 66
    18e2:	8f e0       	ldi	r24, 0x0F	; 15
    18e4:	90 e0       	ldi	r25, 0x00	; 0
    18e6:	e5 d0       	rcall	.+458    	; 0x1ab2 <__divmodsi4>
	if (period_us & 0xFFF8)
    18e8:	da 01       	movw	r26, r20
    18ea:	c9 01       	movw	r24, r18
    18ec:	88 7f       	andi	r24, 0xF8	; 248
    18ee:	aa 27       	eor	r26, r26
    18f0:	bb 27       	eor	r27, r27
    18f2:	89 2b       	or	r24, r25
    18f4:	51 f0       	breq	.+20     	; 0x190a <SetBeeperFreq+0x32>
		OCR1A = (period_us>>3) - 1;
    18f6:	43 e0       	ldi	r20, 0x03	; 3
    18f8:	36 95       	lsr	r19
    18fa:	27 95       	ror	r18
    18fc:	4a 95       	dec	r20
    18fe:	e1 f7       	brne	.-8      	; 0x18f8 <SetBeeperFreq+0x20>
    1900:	21 50       	subi	r18, 0x01	; 1
    1902:	31 09       	sbc	r19, r1
    1904:	3b bd       	out	0x2b, r19	; 43
    1906:	2a bd       	out	0x2a, r18	; 42
    1908:	04 c0       	rjmp	.+8      	; 0x1912 <SetBeeperFreq+0x3a>
	else
		OCR1A = 0x1;
    190a:	81 e0       	ldi	r24, 0x01	; 1
    190c:	90 e0       	ldi	r25, 0x00	; 0
    190e:	9b bd       	out	0x2b, r25	; 43
    1910:	8a bd       	out	0x2a, r24	; 42
	TCNT1 = 0;
    1912:	1d bc       	out	0x2d, r1	; 45
    1914:	1c bc       	out	0x2c, r1	; 44
    1916:	08 95       	ret

00001918 <StartBeep>:
}

// Beep for some time in ms
void StartBeep(uint16_t time_ms)
{
	if (sound_enable)
    1918:	20 91 2a 01 	lds	r18, 0x012A
    191c:	22 23       	and	r18, r18
    191e:	39 f0       	breq	.+14     	; 0x192e <StartBeep+0x16>
	{
		beep_cnt = time_ms;
    1920:	90 93 03 01 	sts	0x0103, r25
    1924:	80 93 02 01 	sts	0x0102, r24
// Enable / disable beeper output
inline void SetBeepOutput(uint8_t val)
{
	if (val)
		// Toggle OCR1A on compare match
		TCCR1A |= (1<<COM1A0);
    1928:	8f b5       	in	r24, 0x2f	; 47
    192a:	80 64       	ori	r24, 0x40	; 64
    192c:	8f bd       	out	0x2f, r24	; 47
    192e:	08 95       	ret

00001930 <resetAutoPowerOffCounter>:



void resetAutoPowerOffCounter(void)
{
	systick_counter = 0;
    1930:	10 92 05 01 	sts	0x0105, r1
    1934:	10 92 04 01 	sts	0x0104, r1
	minute_counter = 0;
    1938:	10 92 00 01 	sts	0x0100, r1
    193c:	08 95       	ret

0000193e <processAutoPowerOff>:
}

void processAutoPowerOff(void)
{
	//if (systick_counter == SYSTICKS_PER_SECOND * 60 - 1)
	if (systick_counter == SYSTICKS_PER_SECOND * 5 - 1)
    193e:	80 91 04 01 	lds	r24, 0x0104
    1942:	90 91 05 01 	lds	r25, 0x0105
    1946:	83 36       	cpi	r24, 0x63	; 99
    1948:	91 05       	cpc	r25, r1
    194a:	61 f4       	brne	.+24     	; 0x1964 <processAutoPowerOff+0x26>
	{
		systick_counter = 0;
    194c:	10 92 05 01 	sts	0x0105, r1
    1950:	10 92 04 01 	sts	0x0104, r1
		if (minute_counter != MAX_POWEROFF_TIMEOUT)
    1954:	80 91 00 01 	lds	r24, 0x0100
    1958:	8f 35       	cpi	r24, 0x5F	; 95
    195a:	49 f0       	breq	.+18     	; 0x196e <processAutoPowerOff+0x30>
		{
			minute_counter++;
    195c:	8f 5f       	subi	r24, 0xFF	; 255
    195e:	80 93 00 01 	sts	0x0100, r24
    1962:	08 95       	ret
		//	 Alert user - TODO
		//}
	}
	else
	{
		systick_counter++;
    1964:	01 96       	adiw	r24, 0x01	; 1
    1966:	90 93 05 01 	sts	0x0105, r25
    196a:	80 93 04 01 	sts	0x0104, r24
    196e:	08 95       	ret

00001970 <__vector_3>:




ISR(TIMER2_COMP_vect)
{	
    1970:	1f 92       	push	r1
    1972:	0f 92       	push	r0
    1974:	0f b6       	in	r0, 0x3f	; 63
    1976:	0f 92       	push	r0
    1978:	11 24       	eor	r1, r1
    197a:	2f 93       	push	r18
    197c:	3f 93       	push	r19
    197e:	4f 93       	push	r20
    1980:	5f 93       	push	r21
    1982:	6f 93       	push	r22
    1984:	7f 93       	push	r23
    1986:	8f 93       	push	r24
    1988:	9f 93       	push	r25
    198a:	af 93       	push	r26
    198c:	bf 93       	push	r27
    198e:	ef 93       	push	r30
    1990:	ff 93       	push	r31
	static uint16_t poff_timer_low = 0;
	static uint8_t poff_timer_high = 0;
	
	// Manage beeper
	if (beep_cnt)
    1992:	80 91 02 01 	lds	r24, 0x0102
    1996:	90 91 03 01 	lds	r25, 0x0103
    199a:	00 97       	sbiw	r24, 0x00	; 0
    199c:	31 f0       	breq	.+12     	; 0x19aa <__vector_3+0x3a>
		beep_cnt--;
    199e:	01 97       	sbiw	r24, 0x01	; 1
    19a0:	90 93 03 01 	sts	0x0103, r25
    19a4:	80 93 02 01 	sts	0x0102, r24
    19a8:	03 c0       	rjmp	.+6      	; 0x19b0 <__vector_3+0x40>
	if (val)
		// Toggle OCR1A on compare match
		TCCR1A |= (1<<COM1A0);
	else
		// Disable OCR1A output
		TCCR1A &= ~(1<<COM1A0 | 1<<COM1A1);
    19aa:	8f b5       	in	r24, 0x2f	; 47
    19ac:	8f 73       	andi	r24, 0x3F	; 63
    19ae:	8f bd       	out	0x2f, r24	; 47
		beep_cnt--;
	else
		SetBeepOutput(0);	// done
	
	// Manage LED indicator
	processLedIndicator();
    19b0:	b4 d7       	rcall	.+3944   	; 0x291a <__data_load_end+0xd72>
	
	// Process menu update timer
	processSoftTimer8b(&menuUpdateTimer);	
    19b2:	89 e7       	ldi	r24, 0x79	; 121
    19b4:	90 e0       	ldi	r25, 0x00	; 0
    19b6:	64 df       	rcall	.-312    	; 0x1880 <processSoftTimer8b>
	
}
    19b8:	ff 91       	pop	r31
    19ba:	ef 91       	pop	r30
    19bc:	bf 91       	pop	r27
    19be:	af 91       	pop	r26
    19c0:	9f 91       	pop	r25
    19c2:	8f 91       	pop	r24
    19c4:	7f 91       	pop	r23
    19c6:	6f 91       	pop	r22
    19c8:	5f 91       	pop	r21
    19ca:	4f 91       	pop	r20
    19cc:	3f 91       	pop	r19
    19ce:	2f 91       	pop	r18
    19d0:	0f 90       	pop	r0
    19d2:	0f be       	out	0x3f, r0	; 63
    19d4:	0f 90       	pop	r0
    19d6:	1f 90       	pop	r1
    19d8:	18 95       	reti

000019da <USART_send>:



void USART_send( uint8_t data )
{
	UCSRA |= (1<<TXC);                 // Clear flag
    19da:	5e 9a       	sbi	0x0b, 6	; 11
	UDR = data;
    19dc:	8c b9       	out	0x0c, r24	; 12
	while ( !(UCSRA & (1<<TXC)) );  // Wait
    19de:	5e 9b       	sbis	0x0b, 6	; 11
    19e0:	fe cf       	rjmp	.-4      	; 0x19de <USART_send+0x4>
}
    19e2:	08 95       	ret

000019e4 <USART_sendstr>:


void USART_sendstr(char* str)
{
    19e4:	1f 93       	push	r17
    19e6:	cf 93       	push	r28
    19e8:	df 93       	push	r29
    19ea:	ec 01       	movw	r28, r24
	uint8_t i = 0;
    19ec:	10 e0       	ldi	r17, 0x00	; 0
	while (str[i])
    19ee:	02 c0       	rjmp	.+4      	; 0x19f4 <USART_sendstr+0x10>
	{
		USART_send(str[i++]);
    19f0:	1f 5f       	subi	r17, 0xFF	; 255
    19f2:	f3 df       	rcall	.-26     	; 0x19da <USART_send>


void USART_sendstr(char* str)
{
	uint8_t i = 0;
	while (str[i])
    19f4:	fe 01       	movw	r30, r28
    19f6:	e1 0f       	add	r30, r17
    19f8:	f1 1d       	adc	r31, r1
    19fa:	80 81       	ld	r24, Z
    19fc:	81 11       	cpse	r24, r1
    19fe:	f8 cf       	rjmp	.-16     	; 0x19f0 <USART_sendstr+0xc>
	{
		USART_send(str[i++]);
	}
}
    1a00:	df 91       	pop	r29
    1a02:	cf 91       	pop	r28
    1a04:	1f 91       	pop	r17
    1a06:	08 95       	ret

00001a08 <__udivmodqi4>:
    1a08:	99 1b       	sub	r25, r25
    1a0a:	79 e0       	ldi	r23, 0x09	; 9
    1a0c:	04 c0       	rjmp	.+8      	; 0x1a16 <__udivmodqi4_ep>

00001a0e <__udivmodqi4_loop>:
    1a0e:	99 1f       	adc	r25, r25
    1a10:	96 17       	cp	r25, r22
    1a12:	08 f0       	brcs	.+2      	; 0x1a16 <__udivmodqi4_ep>
    1a14:	96 1b       	sub	r25, r22

00001a16 <__udivmodqi4_ep>:
    1a16:	88 1f       	adc	r24, r24
    1a18:	7a 95       	dec	r23
    1a1a:	c9 f7       	brne	.-14     	; 0x1a0e <__udivmodqi4_loop>
    1a1c:	80 95       	com	r24
    1a1e:	08 95       	ret

00001a20 <__udivmodhi4>:
    1a20:	aa 1b       	sub	r26, r26
    1a22:	bb 1b       	sub	r27, r27
    1a24:	51 e1       	ldi	r21, 0x11	; 17
    1a26:	07 c0       	rjmp	.+14     	; 0x1a36 <__udivmodhi4_ep>

00001a28 <__udivmodhi4_loop>:
    1a28:	aa 1f       	adc	r26, r26
    1a2a:	bb 1f       	adc	r27, r27
    1a2c:	a6 17       	cp	r26, r22
    1a2e:	b7 07       	cpc	r27, r23
    1a30:	10 f0       	brcs	.+4      	; 0x1a36 <__udivmodhi4_ep>
    1a32:	a6 1b       	sub	r26, r22
    1a34:	b7 0b       	sbc	r27, r23

00001a36 <__udivmodhi4_ep>:
    1a36:	88 1f       	adc	r24, r24
    1a38:	99 1f       	adc	r25, r25
    1a3a:	5a 95       	dec	r21
    1a3c:	a9 f7       	brne	.-22     	; 0x1a28 <__udivmodhi4_loop>
    1a3e:	80 95       	com	r24
    1a40:	90 95       	com	r25
    1a42:	bc 01       	movw	r22, r24
    1a44:	cd 01       	movw	r24, r26
    1a46:	08 95       	ret

00001a48 <__divmodhi4>:
    1a48:	97 fb       	bst	r25, 7
    1a4a:	07 2e       	mov	r0, r23
    1a4c:	16 f4       	brtc	.+4      	; 0x1a52 <__divmodhi4+0xa>
    1a4e:	00 94       	com	r0
    1a50:	06 d0       	rcall	.+12     	; 0x1a5e <__divmodhi4_neg1>
    1a52:	77 fd       	sbrc	r23, 7
    1a54:	08 d0       	rcall	.+16     	; 0x1a66 <__divmodhi4_neg2>
    1a56:	e4 df       	rcall	.-56     	; 0x1a20 <__udivmodhi4>
    1a58:	07 fc       	sbrc	r0, 7
    1a5a:	05 d0       	rcall	.+10     	; 0x1a66 <__divmodhi4_neg2>
    1a5c:	3e f4       	brtc	.+14     	; 0x1a6c <__divmodhi4_exit>

00001a5e <__divmodhi4_neg1>:
    1a5e:	90 95       	com	r25
    1a60:	81 95       	neg	r24
    1a62:	9f 4f       	sbci	r25, 0xFF	; 255
    1a64:	08 95       	ret

00001a66 <__divmodhi4_neg2>:
    1a66:	70 95       	com	r23
    1a68:	61 95       	neg	r22
    1a6a:	7f 4f       	sbci	r23, 0xFF	; 255

00001a6c <__divmodhi4_exit>:
    1a6c:	08 95       	ret

00001a6e <__udivmodsi4>:
    1a6e:	a1 e2       	ldi	r26, 0x21	; 33
    1a70:	1a 2e       	mov	r1, r26
    1a72:	aa 1b       	sub	r26, r26
    1a74:	bb 1b       	sub	r27, r27
    1a76:	fd 01       	movw	r30, r26
    1a78:	0d c0       	rjmp	.+26     	; 0x1a94 <__udivmodsi4_ep>

00001a7a <__udivmodsi4_loop>:
    1a7a:	aa 1f       	adc	r26, r26
    1a7c:	bb 1f       	adc	r27, r27
    1a7e:	ee 1f       	adc	r30, r30
    1a80:	ff 1f       	adc	r31, r31
    1a82:	a2 17       	cp	r26, r18
    1a84:	b3 07       	cpc	r27, r19
    1a86:	e4 07       	cpc	r30, r20
    1a88:	f5 07       	cpc	r31, r21
    1a8a:	20 f0       	brcs	.+8      	; 0x1a94 <__udivmodsi4_ep>
    1a8c:	a2 1b       	sub	r26, r18
    1a8e:	b3 0b       	sbc	r27, r19
    1a90:	e4 0b       	sbc	r30, r20
    1a92:	f5 0b       	sbc	r31, r21

00001a94 <__udivmodsi4_ep>:
    1a94:	66 1f       	adc	r22, r22
    1a96:	77 1f       	adc	r23, r23
    1a98:	88 1f       	adc	r24, r24
    1a9a:	99 1f       	adc	r25, r25
    1a9c:	1a 94       	dec	r1
    1a9e:	69 f7       	brne	.-38     	; 0x1a7a <__udivmodsi4_loop>
    1aa0:	60 95       	com	r22
    1aa2:	70 95       	com	r23
    1aa4:	80 95       	com	r24
    1aa6:	90 95       	com	r25
    1aa8:	9b 01       	movw	r18, r22
    1aaa:	ac 01       	movw	r20, r24
    1aac:	bd 01       	movw	r22, r26
    1aae:	cf 01       	movw	r24, r30
    1ab0:	08 95       	ret

00001ab2 <__divmodsi4>:
    1ab2:	05 2e       	mov	r0, r21
    1ab4:	97 fb       	bst	r25, 7
    1ab6:	16 f4       	brtc	.+4      	; 0x1abc <__divmodsi4+0xa>
    1ab8:	00 94       	com	r0
    1aba:	06 d0       	rcall	.+12     	; 0x1ac8 <__divmodsi4_neg1>
    1abc:	57 fd       	sbrc	r21, 7
    1abe:	0c d0       	rcall	.+24     	; 0x1ad8 <__divmodsi4_neg2>
    1ac0:	d6 df       	rcall	.-84     	; 0x1a6e <__udivmodsi4>
    1ac2:	07 fc       	sbrc	r0, 7
    1ac4:	09 d0       	rcall	.+18     	; 0x1ad8 <__divmodsi4_neg2>
    1ac6:	7e f4       	brtc	.+30     	; 0x1ae6 <__divmodsi4_exit>

00001ac8 <__divmodsi4_neg1>:
    1ac8:	90 95       	com	r25
    1aca:	80 95       	com	r24
    1acc:	70 95       	com	r23
    1ace:	61 95       	neg	r22
    1ad0:	7f 4f       	sbci	r23, 0xFF	; 255
    1ad2:	8f 4f       	sbci	r24, 0xFF	; 255
    1ad4:	9f 4f       	sbci	r25, 0xFF	; 255
    1ad6:	08 95       	ret

00001ad8 <__divmodsi4_neg2>:
    1ad8:	50 95       	com	r21
    1ada:	40 95       	com	r20
    1adc:	30 95       	com	r19
    1ade:	21 95       	neg	r18
    1ae0:	3f 4f       	sbci	r19, 0xFF	; 255
    1ae2:	4f 4f       	sbci	r20, 0xFF	; 255
    1ae4:	5f 4f       	sbci	r21, 0xFF	; 255

00001ae6 <__divmodsi4_exit>:
    1ae6:	08 95       	ret

00001ae8 <__umulhisi3>:
    1ae8:	a2 9f       	mul	r26, r18
    1aea:	b0 01       	movw	r22, r0
    1aec:	b3 9f       	mul	r27, r19
    1aee:	c0 01       	movw	r24, r0
    1af0:	a3 9f       	mul	r26, r19
    1af2:	01 d0       	rcall	.+2      	; 0x1af6 <__umulhisi3+0xe>
    1af4:	b2 9f       	mul	r27, r18
    1af6:	70 0d       	add	r23, r0
    1af8:	81 1d       	adc	r24, r1
    1afa:	11 24       	eor	r1, r1
    1afc:	91 1d       	adc	r25, r1
    1afe:	08 95       	ret

00001b00 <__usmulhisi3>:
    1b00:	f3 df       	rcall	.-26     	; 0x1ae8 <__umulhisi3>

00001b02 <__usmulhisi3_tail>:
    1b02:	b7 ff       	sbrs	r27, 7
    1b04:	08 95       	ret
    1b06:	82 1b       	sub	r24, r18
    1b08:	93 0b       	sbc	r25, r19
    1b0a:	08 95       	ret

00001b0c <__muluhisi3>:
    1b0c:	ed df       	rcall	.-38     	; 0x1ae8 <__umulhisi3>
    1b0e:	a5 9f       	mul	r26, r21
    1b10:	90 0d       	add	r25, r0
    1b12:	b4 9f       	mul	r27, r20
    1b14:	90 0d       	add	r25, r0
    1b16:	a4 9f       	mul	r26, r20
    1b18:	80 0d       	add	r24, r0
    1b1a:	91 1d       	adc	r25, r1
    1b1c:	11 24       	eor	r1, r1
    1b1e:	08 95       	ret

00001b20 <__eerd_block_m8>:
    1b20:	dc 01       	movw	r26, r24
    1b22:	cb 01       	movw	r24, r22

00001b24 <__eerd_blraw_m8>:
    1b24:	fc 01       	movw	r30, r24
    1b26:	e1 99       	sbic	0x1c, 1	; 28
    1b28:	fe cf       	rjmp	.-4      	; 0x1b26 <__eerd_blraw_m8+0x2>
    1b2a:	06 c0       	rjmp	.+12     	; 0x1b38 <__eerd_blraw_m8+0x14>
    1b2c:	ff bb       	out	0x1f, r31	; 31
    1b2e:	ee bb       	out	0x1e, r30	; 30
    1b30:	e0 9a       	sbi	0x1c, 0	; 28
    1b32:	31 96       	adiw	r30, 0x01	; 1
    1b34:	0d b2       	in	r0, 0x1d	; 29
    1b36:	0d 92       	st	X+, r0
    1b38:	41 50       	subi	r20, 0x01	; 1
    1b3a:	50 40       	sbci	r21, 0x00	; 0
    1b3c:	b8 f7       	brcc	.-18     	; 0x1b2c <__eerd_blraw_m8+0x8>
    1b3e:	08 95       	ret

00001b40 <_exit>:
    1b40:	f8 94       	cli

00001b42 <__stop_program>:
    1b42:	ff cf       	rjmp	.-2      	; 0x1b42 <__stop_program>
