
pid1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000019be  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000042  00800060  000019be  00001a72  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000006d  008000a2  008000a2  00001ab4  2**0
                  ALLOC
  3 .eeprom       0000000a  00810000  00810000  00001ab4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         000007d4  00000000  00000000  00001ac0  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      000000e3  00000000  00000000  00002294  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      0000002f  00000000  00000000  00002377  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000380  00000000  00000000  000023a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   000032cc  00000000  00000000  00002726  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00001117  00000000  00000000  000059f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00001667  00000000  00000000  00006b09  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  000007d8  00000000  00000000  00008170  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000d3e  00000000  00000000  00008948  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00001b25  00000000  00000000  00009686  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000328  00000000  00000000  0000b1ab  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	19 c1       	rjmp	.+562    	; 0x234 <__ctors_end>
       2:	33 c1       	rjmp	.+614    	; 0x26a <__bad_interrupt>
       4:	32 c1       	rjmp	.+612    	; 0x26a <__bad_interrupt>
       6:	fb cb       	rjmp	.-2058   	; 0xfffff7fe <__eeprom_end+0xff7ef7f4>
       8:	30 c1       	rjmp	.+608    	; 0x26a <__bad_interrupt>
       a:	2f c1       	rjmp	.+606    	; 0x26a <__bad_interrupt>
       c:	2e c1       	rjmp	.+604    	; 0x26a <__bad_interrupt>
       e:	2d c1       	rjmp	.+602    	; 0x26a <__bad_interrupt>
      10:	2c c1       	rjmp	.+600    	; 0x26a <__bad_interrupt>
      12:	b9 ca       	rjmp	.-2702   	; 0xfffff586 <__eeprom_end+0xff7ef57c>
      14:	2a c1       	rjmp	.+596    	; 0x26a <__bad_interrupt>
      16:	29 c1       	rjmp	.+594    	; 0x26a <__bad_interrupt>
      18:	28 c1       	rjmp	.+592    	; 0x26a <__bad_interrupt>
      1a:	27 c1       	rjmp	.+590    	; 0x26a <__bad_interrupt>
      1c:	dd c1       	rjmp	.+954    	; 0x3d8 <__vector_14>
      1e:	25 c1       	rjmp	.+586    	; 0x26a <__bad_interrupt>
      20:	90 ca       	rjmp	.-2784   	; 0xfffff542 <__eeprom_end+0xff7ef538>
      22:	23 c1       	rjmp	.+582    	; 0x26a <__bad_interrupt>
      24:	22 c1       	rjmp	.+580    	; 0x26a <__bad_interrupt>
      26:	e3 c3       	rjmp	.+1990   	; 0x7ee <decode_led_char+0x48>
      28:	f3 c3       	rjmp	.+2022   	; 0x810 <decode_led_char+0x6a>
      2a:	f2 c3       	rjmp	.+2020   	; 0x810 <decode_led_char+0x6a>
      2c:	f1 c3       	rjmp	.+2018   	; 0x810 <decode_led_char+0x6a>
      2e:	f0 c3       	rjmp	.+2016   	; 0x810 <decode_led_char+0x6a>
      30:	ef c3       	rjmp	.+2014   	; 0x810 <decode_led_char+0x6a>
      32:	ee c3       	rjmp	.+2012   	; 0x810 <decode_led_char+0x6a>
      34:	ed c3       	rjmp	.+2010   	; 0x810 <decode_led_char+0x6a>
      36:	ec c3       	rjmp	.+2008   	; 0x810 <decode_led_char+0x6a>
      38:	eb c3       	rjmp	.+2006   	; 0x810 <decode_led_char+0x6a>
      3a:	ea c3       	rjmp	.+2004   	; 0x810 <decode_led_char+0x6a>
      3c:	e9 c3       	rjmp	.+2002   	; 0x810 <decode_led_char+0x6a>
      3e:	d1 c3       	rjmp	.+1954   	; 0x7e2 <decode_led_char+0x3c>
      40:	d2 c3       	rjmp	.+1956   	; 0x7e6 <decode_led_char+0x40>
      42:	cd c3       	rjmp	.+1946   	; 0x7de <decode_led_char+0x38>
      44:	e5 c3       	rjmp	.+1994   	; 0x810 <decode_led_char+0x6a>
      46:	b9 c3       	rjmp	.+1906   	; 0x7ba <decode_led_char+0x14>
      48:	e2 c3       	rjmp	.+1988   	; 0x80e <decode_led_char+0x68>
      4a:	b9 c3       	rjmp	.+1906   	; 0x7be <decode_led_char+0x18>
      4c:	ba c3       	rjmp	.+1908   	; 0x7c2 <decode_led_char+0x1c>
      4e:	bb c3       	rjmp	.+1910   	; 0x7c6 <decode_led_char+0x20>
      50:	bc c3       	rjmp	.+1912   	; 0x7ca <decode_led_char+0x24>
      52:	bd c3       	rjmp	.+1914   	; 0x7ce <decode_led_char+0x28>
      54:	be c3       	rjmp	.+1916   	; 0x7d2 <decode_led_char+0x2c>
      56:	bf c3       	rjmp	.+1918   	; 0x7d6 <decode_led_char+0x30>
      58:	c0 c3       	rjmp	.+1920   	; 0x7da <decode_led_char+0x34>
      5a:	da c3       	rjmp	.+1972   	; 0x810 <decode_led_char+0x6a>
      5c:	d9 c3       	rjmp	.+1970   	; 0x810 <decode_led_char+0x6a>
      5e:	d8 c3       	rjmp	.+1968   	; 0x810 <decode_led_char+0x6a>
      60:	d7 c3       	rjmp	.+1966   	; 0x810 <decode_led_char+0x6a>
      62:	d6 c3       	rjmp	.+1964   	; 0x810 <decode_led_char+0x6a>
      64:	d5 c3       	rjmp	.+1962   	; 0x810 <decode_led_char+0x6a>
      66:	d4 c3       	rjmp	.+1960   	; 0x810 <decode_led_char+0x6a>
      68:	d3 c3       	rjmp	.+1958   	; 0x810 <decode_led_char+0x6a>
      6a:	d2 c3       	rjmp	.+1956   	; 0x810 <decode_led_char+0x6a>
      6c:	c4 c3       	rjmp	.+1928   	; 0x7f6 <decode_led_char+0x50>
      6e:	c9 c3       	rjmp	.+1938   	; 0x802 <decode_led_char+0x5c>
      70:	cc c3       	rjmp	.+1944   	; 0x80a <decode_led_char+0x64>
      72:	c3 c3       	rjmp	.+1926   	; 0x7fa <decode_led_char+0x54>
      74:	cd c3       	rjmp	.+1946   	; 0x810 <decode_led_char+0x6a>
      76:	cc c3       	rjmp	.+1944   	; 0x810 <decode_led_char+0x6a>
      78:	cb c3       	rjmp	.+1942   	; 0x810 <decode_led_char+0x6a>
      7a:	ca c3       	rjmp	.+1940   	; 0x810 <decode_led_char+0x6a>
      7c:	c9 c3       	rjmp	.+1938   	; 0x810 <decode_led_char+0x6a>
      7e:	c8 c3       	rjmp	.+1936   	; 0x810 <decode_led_char+0x6a>
      80:	c7 c3       	rjmp	.+1934   	; 0x810 <decode_led_char+0x6a>
      82:	bd c3       	rjmp	.+1914   	; 0x7fe <decode_led_char+0x58>
      84:	9a c3       	rjmp	.+1844   	; 0x7ba <decode_led_char+0x14>
      86:	bf c3       	rjmp	.+1918   	; 0x806 <decode_led_char+0x60>
      88:	c3 c3       	rjmp	.+1926   	; 0x810 <decode_led_char+0x6a>
      8a:	c2 c3       	rjmp	.+1924   	; 0x810 <decode_led_char+0x6a>
      8c:	9e c3       	rjmp	.+1852   	; 0x7ca <decode_led_char+0x24>
      8e:	c0 c3       	rjmp	.+1920   	; 0x810 <decode_led_char+0x6a>
      90:	bf c3       	rjmp	.+1918   	; 0x810 <decode_led_char+0x6a>
      92:	be c3       	rjmp	.+1916   	; 0x810 <decode_led_char+0x6a>
      94:	bd c3       	rjmp	.+1914   	; 0x810 <decode_led_char+0x6a>
      96:	bc c3       	rjmp	.+1912   	; 0x810 <decode_led_char+0x6a>
      98:	bb c3       	rjmp	.+1910   	; 0x810 <decode_led_char+0x6a>
      9a:	ba c3       	rjmp	.+1908   	; 0x810 <decode_led_char+0x6a>
      9c:	b9 c3       	rjmp	.+1906   	; 0x810 <decode_led_char+0x6a>
      9e:	b8 c3       	rjmp	.+1904   	; 0x810 <decode_led_char+0x6a>
      a0:	b7 c3       	rjmp	.+1902   	; 0x810 <decode_led_char+0x6a>
      a2:	b6 c3       	rjmp	.+1900   	; 0x810 <decode_led_char+0x6a>
      a4:	a2 c3       	rjmp	.+1860   	; 0x7ea <decode_led_char+0x44>
      a6:	b4 c3       	rjmp	.+1896   	; 0x810 <decode_led_char+0x6a>
      a8:	b3 c3       	rjmp	.+1894   	; 0x810 <decode_led_char+0x6a>
      aa:	b2 c3       	rjmp	.+1892   	; 0x810 <decode_led_char+0x6a>
      ac:	b1 c3       	rjmp	.+1890   	; 0x810 <decode_led_char+0x6a>
      ae:	b0 c3       	rjmp	.+1888   	; 0x810 <decode_led_char+0x6a>
      b0:	af c3       	rjmp	.+1886   	; 0x810 <decode_led_char+0x6a>
      b2:	ae c3       	rjmp	.+1884   	; 0x810 <decode_led_char+0x6a>
      b4:	ad c3       	rjmp	.+1882   	; 0x810 <decode_led_char+0x6a>
      b6:	ac c3       	rjmp	.+1880   	; 0x810 <decode_led_char+0x6a>
      b8:	ab c3       	rjmp	.+1878   	; 0x810 <decode_led_char+0x6a>
      ba:	aa c3       	rjmp	.+1876   	; 0x810 <decode_led_char+0x6a>
      bc:	a9 c3       	rjmp	.+1874   	; 0x810 <decode_led_char+0x6a>
      be:	a8 c3       	rjmp	.+1872   	; 0x810 <decode_led_char+0x6a>
      c0:	a7 c3       	rjmp	.+1870   	; 0x810 <decode_led_char+0x6a>
      c2:	a6 c3       	rjmp	.+1868   	; 0x810 <decode_led_char+0x6a>
      c4:	a5 c3       	rjmp	.+1866   	; 0x810 <decode_led_char+0x6a>
      c6:	a4 c3       	rjmp	.+1864   	; 0x810 <decode_led_char+0x6a>
      c8:	a3 c3       	rjmp	.+1862   	; 0x810 <decode_led_char+0x6a>
      ca:	a2 c3       	rjmp	.+1860   	; 0x810 <decode_led_char+0x6a>
      cc:	a1 c3       	rjmp	.+1858   	; 0x810 <decode_led_char+0x6a>
      ce:	a0 c3       	rjmp	.+1856   	; 0x810 <decode_led_char+0x6a>
      d0:	9f c3       	rjmp	.+1854   	; 0x810 <decode_led_char+0x6a>
      d2:	9e c3       	rjmp	.+1852   	; 0x810 <decode_led_char+0x6a>
      d4:	9d c3       	rjmp	.+1850   	; 0x810 <decode_led_char+0x6a>
      d6:	9c c3       	rjmp	.+1848   	; 0x810 <decode_led_char+0x6a>
      d8:	9b c3       	rjmp	.+1846   	; 0x810 <decode_led_char+0x6a>
      da:	9a c3       	rjmp	.+1844   	; 0x810 <decode_led_char+0x6a>
      dc:	99 c3       	rjmp	.+1842   	; 0x810 <decode_led_char+0x6a>
      de:	98 c3       	rjmp	.+1840   	; 0x810 <decode_led_char+0x6a>
      e0:	97 c3       	rjmp	.+1838   	; 0x810 <decode_led_char+0x6a>
      e2:	96 c3       	rjmp	.+1836   	; 0x810 <decode_led_char+0x6a>
      e4:	95 c3       	rjmp	.+1834   	; 0x810 <decode_led_char+0x6a>
      e6:	94 c3       	rjmp	.+1832   	; 0x810 <decode_led_char+0x6a>
      e8:	93 c3       	rjmp	.+1830   	; 0x810 <decode_led_char+0x6a>
      ea:	92 c3       	rjmp	.+1828   	; 0x810 <decode_led_char+0x6a>
      ec:	91 c3       	rjmp	.+1826   	; 0x810 <decode_led_char+0x6a>
      ee:	90 c3       	rjmp	.+1824   	; 0x810 <decode_led_char+0x6a>
      f0:	8f c3       	rjmp	.+1822   	; 0x810 <decode_led_char+0x6a>
      f2:	8e c3       	rjmp	.+1820   	; 0x810 <decode_led_char+0x6a>
      f4:	8d c3       	rjmp	.+1818   	; 0x810 <decode_led_char+0x6a>
      f6:	8c c3       	rjmp	.+1816   	; 0x810 <decode_led_char+0x6a>
      f8:	8b c3       	rjmp	.+1814   	; 0x810 <decode_led_char+0x6a>
      fa:	8a c3       	rjmp	.+1812   	; 0x810 <decode_led_char+0x6a>
      fc:	89 c3       	rjmp	.+1810   	; 0x810 <decode_led_char+0x6a>
      fe:	88 c3       	rjmp	.+1808   	; 0x810 <decode_led_char+0x6a>
     100:	87 c3       	rjmp	.+1806   	; 0x810 <decode_led_char+0x6a>
     102:	86 c3       	rjmp	.+1804   	; 0x810 <decode_led_char+0x6a>
     104:	85 c3       	rjmp	.+1802   	; 0x810 <decode_led_char+0x6a>
     106:	84 c3       	rjmp	.+1800   	; 0x810 <decode_led_char+0x6a>
     108:	83 c3       	rjmp	.+1798   	; 0x810 <decode_led_char+0x6a>
     10a:	82 c3       	rjmp	.+1796   	; 0x810 <decode_led_char+0x6a>
     10c:	81 c3       	rjmp	.+1794   	; 0x810 <decode_led_char+0x6a>
     10e:	80 c3       	rjmp	.+1792   	; 0x810 <decode_led_char+0x6a>
     110:	7f c3       	rjmp	.+1790   	; 0x810 <decode_led_char+0x6a>
     112:	7e c3       	rjmp	.+1788   	; 0x810 <decode_led_char+0x6a>
     114:	7d c3       	rjmp	.+1786   	; 0x810 <decode_led_char+0x6a>
     116:	7c c3       	rjmp	.+1784   	; 0x810 <decode_led_char+0x6a>
     118:	7b c3       	rjmp	.+1782   	; 0x810 <decode_led_char+0x6a>
     11a:	7a c3       	rjmp	.+1780   	; 0x810 <decode_led_char+0x6a>
     11c:	79 c3       	rjmp	.+1778   	; 0x810 <decode_led_char+0x6a>
     11e:	78 c3       	rjmp	.+1776   	; 0x810 <decode_led_char+0x6a>
     120:	77 c3       	rjmp	.+1774   	; 0x810 <decode_led_char+0x6a>
     122:	76 c3       	rjmp	.+1772   	; 0x810 <decode_led_char+0x6a>
     124:	75 c3       	rjmp	.+1770   	; 0x810 <decode_led_char+0x6a>
     126:	74 c3       	rjmp	.+1768   	; 0x810 <decode_led_char+0x6a>
     128:	73 c3       	rjmp	.+1766   	; 0x810 <decode_led_char+0x6a>
     12a:	72 c3       	rjmp	.+1764   	; 0x810 <decode_led_char+0x6a>
     12c:	71 c3       	rjmp	.+1762   	; 0x810 <decode_led_char+0x6a>
     12e:	70 c3       	rjmp	.+1760   	; 0x810 <decode_led_char+0x6a>
     130:	6f c3       	rjmp	.+1758   	; 0x810 <decode_led_char+0x6a>
     132:	6e c3       	rjmp	.+1756   	; 0x810 <decode_led_char+0x6a>
     134:	6d c3       	rjmp	.+1754   	; 0x810 <decode_led_char+0x6a>
     136:	6c c3       	rjmp	.+1752   	; 0x810 <decode_led_char+0x6a>
     138:	6b c3       	rjmp	.+1750   	; 0x810 <decode_led_char+0x6a>
     13a:	6a c3       	rjmp	.+1748   	; 0x810 <decode_led_char+0x6a>
     13c:	69 c3       	rjmp	.+1746   	; 0x810 <decode_led_char+0x6a>
     13e:	68 c3       	rjmp	.+1744   	; 0x810 <decode_led_char+0x6a>
     140:	67 c3       	rjmp	.+1742   	; 0x810 <decode_led_char+0x6a>
     142:	66 c3       	rjmp	.+1740   	; 0x810 <decode_led_char+0x6a>
     144:	65 c3       	rjmp	.+1738   	; 0x810 <decode_led_char+0x6a>
     146:	55 c3       	rjmp	.+1706   	; 0x7f2 <decode_led_char+0x4c>

00000148 <menuFunctionSet>:
     148:	01 07 08 ad 06 3b 07 03 37 07 ab 07 8b 05 02 a7     .....;..7.......
     158:	07 3e 07 2f 07 05 1d 07 d8 06 00 00 0b 91 05 d8     .>./............
     168:	06 9f 05 04 1d 07 5a 06 00 00 0c 91 05 5a 06 9f     ......Z......Z..
     178:	05 06 25 07 10 06 00 00 09 91 05 10 06 9f 05 07     ..%.............
     188:	25 07 c6 05 00 00 0a 91 05 c6 05 9f 05 08 b8 05     %...............
     198:	a5 05 00 00 0d aa 05 a5 05 00 00                    ...........

000001a3 <menuJumpSet>:
     1a3:	01 06 00 03 a8 01 00 01 02 40 01 00 02 05 28 02     .........@....(.
     1b3:	00 01 01 80 03 00 83 01 40 05 00 82 01 00 05 04     ........@.......
     1c3:	00 04 68 05 02 00 07 a8 05 00 01 0b 28 0b 00 83     ..h.........(...
     1d3:	05 28 04 00 82 01 00 04 04 00 06 68 04 02 00 05     .(.........h....
     1e3:	a8 04 00 01 0c 28 0c 00 83 04 28 06 00 82 01 00     .....(....(.....
     1f3:	06 04 00 07 68 06 02 00 04 a8 06 00 01 09 00 07     ....h...........
     203:	00 82 01 00 07 04 00 05 68 07 02 00 06 a8 07 00     ........h.......
     213:	01 0a 00 09 00 02 06 00 09 00 01 08 14 08 00 83     ................
     223:	01 00 0a 00 02 07 00 0a 00 01 0d 14 0d 00 83 01     ................
	...

00000234 <__ctors_end>:
     234:	11 24       	eor	r1, r1
     236:	1f be       	out	0x3f, r1	; 63
     238:	cf e5       	ldi	r28, 0x5F	; 95
     23a:	d4 e0       	ldi	r29, 0x04	; 4
     23c:	de bf       	out	0x3e, r29	; 62
     23e:	cd bf       	out	0x3d, r28	; 61

00000240 <__do_copy_data>:
     240:	10 e0       	ldi	r17, 0x00	; 0
     242:	a0 e6       	ldi	r26, 0x60	; 96
     244:	b0 e0       	ldi	r27, 0x00	; 0
     246:	ee eb       	ldi	r30, 0xBE	; 190
     248:	f9 e1       	ldi	r31, 0x19	; 25
     24a:	02 c0       	rjmp	.+4      	; 0x250 <__do_copy_data+0x10>
     24c:	05 90       	lpm	r0, Z+
     24e:	0d 92       	st	X+, r0
     250:	a2 3a       	cpi	r26, 0xA2	; 162
     252:	b1 07       	cpc	r27, r17
     254:	d9 f7       	brne	.-10     	; 0x24c <__do_copy_data+0xc>

00000256 <__do_clear_bss>:
     256:	21 e0       	ldi	r18, 0x01	; 1
     258:	a2 ea       	ldi	r26, 0xA2	; 162
     25a:	b0 e0       	ldi	r27, 0x00	; 0
     25c:	01 c0       	rjmp	.+2      	; 0x260 <.do_clear_bss_start>

0000025e <.do_clear_bss_loop>:
     25e:	1d 92       	st	X+, r1

00000260 <.do_clear_bss_start>:
     260:	af 30       	cpi	r26, 0x0F	; 15
     262:	b2 07       	cpc	r27, r18
     264:	e1 f7       	brne	.-8      	; 0x25e <.do_clear_bss_loop>
     266:	5f d8       	rcall	.-3906   	; 0xfffff326 <__eeprom_end+0xff7ef31c>
     268:	a8 cb       	rjmp	.-2224   	; 0xfffff9ba <__eeprom_end+0xff7ef9b0>

0000026a <__bad_interrupt>:
     26a:	ca ce       	rjmp	.-620    	; 0x0 <__vectors>

0000026c <conv_ADC_to_Celsius>:
static int8_t adc_buffer_pos = -1;



uint16_t conv_ADC_to_Celsius(uint16_t adc_value)
{	
     26c:	0f 93       	push	r16
     26e:	1f 93       	push	r17
	return (uint16_t)(((int32_t)adc_value * k_norm + offset_norm) / (COEFF_SCALE));
     270:	20 91 a2 00 	lds	r18, 0x00A2
     274:	30 91 a3 00 	lds	r19, 0x00A3
     278:	40 91 a4 00 	lds	r20, 0x00A4
     27c:	50 91 a5 00 	lds	r21, 0x00A5
     280:	dc 01       	movw	r26, r24
     282:	4b db       	rcall	.-2410   	; 0xfffff91a <__eeprom_end+0xff7ef910>
     284:	00 91 a6 00 	lds	r16, 0x00A6
     288:	10 91 a7 00 	lds	r17, 0x00A7
     28c:	20 91 a8 00 	lds	r18, 0x00A8
     290:	30 91 a9 00 	lds	r19, 0x00A9
     294:	60 0f       	add	r22, r16
     296:	71 1f       	adc	r23, r17
     298:	82 1f       	adc	r24, r18
     29a:	93 1f       	adc	r25, r19
     29c:	28 ee       	ldi	r18, 0xE8	; 232
     29e:	33 e0       	ldi	r19, 0x03	; 3
     2a0:	40 e0       	ldi	r20, 0x00	; 0
     2a2:	50 e0       	ldi	r21, 0x00	; 0
     2a4:	0d db       	rcall	.-2534   	; 0xfffff8c0 <__eeprom_end+0xff7ef8b6>
}
     2a6:	82 2f       	mov	r24, r18
     2a8:	93 2f       	mov	r25, r19
     2aa:	1f 91       	pop	r17
     2ac:	0f 91       	pop	r16
     2ae:	08 95       	ret

000002b0 <conv_Celsius_to_ADC>:

uint16_t conv_Celsius_to_ADC(uint16_t degree_value)
{	
     2b0:	0f 93       	push	r16
     2b2:	1f 93       	push	r17
	return (uint16_t)(((int32_t)degree_value * COEFF_SCALE - offset_norm) / k_norm);
     2b4:	9c 01       	movw	r18, r24
     2b6:	a8 ee       	ldi	r26, 0xE8	; 232
     2b8:	b3 e0       	ldi	r27, 0x03	; 3
     2ba:	1d db       	rcall	.-2502   	; 0xfffff8f6 <__eeprom_end+0xff7ef8ec>
     2bc:	00 91 a6 00 	lds	r16, 0x00A6
     2c0:	10 91 a7 00 	lds	r17, 0x00A7
     2c4:	20 91 a8 00 	lds	r18, 0x00A8
     2c8:	30 91 a9 00 	lds	r19, 0x00A9
     2cc:	60 1b       	sub	r22, r16
     2ce:	71 0b       	sbc	r23, r17
     2d0:	82 0b       	sbc	r24, r18
     2d2:	93 0b       	sbc	r25, r19
     2d4:	20 91 a2 00 	lds	r18, 0x00A2
     2d8:	30 91 a3 00 	lds	r19, 0x00A3
     2dc:	40 91 a4 00 	lds	r20, 0x00A4
     2e0:	50 91 a5 00 	lds	r21, 0x00A5
     2e4:	ed da       	rcall	.-2598   	; 0xfffff8c0 <__eeprom_end+0xff7ef8b6>
}
     2e6:	82 2f       	mov	r24, r18
     2e8:	93 2f       	mov	r25, r19
     2ea:	1f 91       	pop	r17
     2ec:	0f 91       	pop	r16
     2ee:	08 95       	ret

000002f0 <calculateCoeffs>:

void calculateCoeffs(void)
{
     2f0:	8f 92       	push	r8
     2f2:	9f 92       	push	r9
     2f4:	af 92       	push	r10
     2f6:	bf 92       	push	r11
     2f8:	cf 92       	push	r12
     2fa:	df 92       	push	r13
     2fc:	ef 92       	push	r14
     2fe:	ff 92       	push	r15
     300:	cf 93       	push	r28
     302:	df 93       	push	r29
	k_norm = ((int32_t)(cpoint1 - cpoint2) * COEFF_SCALE) / ((int32_t)(cpoint1_adc - cpoint2_adc));
     304:	b0 90 de 00 	lds	r11, 0x00DE
     308:	c0 91 e3 00 	lds	r28, 0x00E3
     30c:	d0 91 e4 00 	lds	r29, 0x00E4
     310:	ab 2d       	mov	r26, r11
     312:	b0 e0       	ldi	r27, 0x00	; 0
     314:	80 91 e8 00 	lds	r24, 0x00E8
     318:	a8 1b       	sub	r26, r24
     31a:	b1 09       	sbc	r27, r1
     31c:	28 ee       	ldi	r18, 0xE8	; 232
     31e:	33 e0       	ldi	r19, 0x03	; 3
     320:	f6 da       	rcall	.-2580   	; 0xfffff90e <__eeprom_end+0xff7ef904>
     322:	20 91 e6 00 	lds	r18, 0x00E6
     326:	30 91 e7 00 	lds	r19, 0x00E7
     32a:	ae 01       	movw	r20, r28
     32c:	42 1b       	sub	r20, r18
     32e:	53 0b       	sbc	r21, r19
     330:	9a 01       	movw	r18, r20
     332:	40 e0       	ldi	r20, 0x00	; 0
     334:	50 e0       	ldi	r21, 0x00	; 0
     336:	c4 da       	rcall	.-2680   	; 0xfffff8c0 <__eeprom_end+0xff7ef8b6>
     338:	69 01       	movw	r12, r18
     33a:	7a 01       	movw	r14, r20
     33c:	20 93 a2 00 	sts	0x00A2, r18
     340:	30 93 a3 00 	sts	0x00A3, r19
     344:	40 93 a4 00 	sts	0x00A4, r20
     348:	50 93 a5 00 	sts	0x00A5, r21
	offset_norm = (int32_t)cpoint1 * COEFF_SCALE - (int32_t)cpoint1_adc * k_norm;
     34c:	2b 2d       	mov	r18, r11
     34e:	30 e0       	ldi	r19, 0x00	; 0
     350:	a8 ee       	ldi	r26, 0xE8	; 232
     352:	b3 e0       	ldi	r27, 0x03	; 3
     354:	d0 da       	rcall	.-2656   	; 0xfffff8f6 <__eeprom_end+0xff7ef8ec>
     356:	4b 01       	movw	r8, r22
     358:	5c 01       	movw	r10, r24
     35a:	de 01       	movw	r26, r28
     35c:	a7 01       	movw	r20, r14
     35e:	96 01       	movw	r18, r12
     360:	dc da       	rcall	.-2632   	; 0xfffff91a <__eeprom_end+0xff7ef910>
     362:	86 1a       	sub	r8, r22
     364:	97 0a       	sbc	r9, r23
     366:	a8 0a       	sbc	r10, r24
     368:	b9 0a       	sbc	r11, r25
     36a:	80 92 a6 00 	sts	0x00A6, r8
     36e:	90 92 a7 00 	sts	0x00A7, r9
     372:	a0 92 a8 00 	sts	0x00A8, r10
     376:	b0 92 a9 00 	sts	0x00A9, r11
}
     37a:	df 91       	pop	r29
     37c:	cf 91       	pop	r28
     37e:	ff 90       	pop	r15
     380:	ef 90       	pop	r14
     382:	df 90       	pop	r13
     384:	cf 90       	pop	r12
     386:	bf 90       	pop	r11
     388:	af 90       	pop	r10
     38a:	9f 90       	pop	r9
     38c:	8f 90       	pop	r8
     38e:	08 95       	ret

00000390 <update_filtered_adc>:
void update_filtered_adc()
{
	uint8_t i;
	uint32_t filtered_value = 0;
	// Disable interrupts from ADC - to save data integrity
	ACSR &= ~(1<<ACIE);	
     390:	43 98       	cbi	0x08, 3	; 8
     392:	ea ea       	ldi	r30, 0xAA	; 170
     394:	f0 e0       	ldi	r31, 0x00	; 0
	k_norm = ((int32_t)(cpoint1 - cpoint2) * COEFF_SCALE) / ((int32_t)(cpoint1_adc - cpoint2_adc));
	offset_norm = (int32_t)cpoint1 * COEFF_SCALE - (int32_t)cpoint1_adc * k_norm;
}


void update_filtered_adc()
     396:	4a eb       	ldi	r20, 0xBA	; 186
     398:	50 e0       	ldi	r21, 0x00	; 0
{
	uint8_t i;
	uint32_t filtered_value = 0;
     39a:	80 e0       	ldi	r24, 0x00	; 0
     39c:	90 e0       	ldi	r25, 0x00	; 0
     39e:	dc 01       	movw	r26, r24
	// Disable interrupts from ADC - to save data integrity
	ACSR &= ~(1<<ACIE);	
	// Count up
	for(i=0;i<ADC_BUFFER_LENGTH;i++)
	{
		filtered_value += adc_sample_buffer[i];
     3a0:	21 91       	ld	r18, Z+
     3a2:	31 91       	ld	r19, Z+
     3a4:	82 0f       	add	r24, r18
     3a6:	93 1f       	adc	r25, r19
     3a8:	a1 1d       	adc	r26, r1
     3aa:	b1 1d       	adc	r27, r1
	uint8_t i;
	uint32_t filtered_value = 0;
	// Disable interrupts from ADC - to save data integrity
	ACSR &= ~(1<<ACIE);	
	// Count up
	for(i=0;i<ADC_BUFFER_LENGTH;i++)
     3ac:	e4 17       	cp	r30, r20
     3ae:	f5 07       	cpc	r31, r21
     3b0:	b9 f7       	brne	.-18     	; 0x3a0 <update_filtered_adc+0x10>
	{
		filtered_value += adc_sample_buffer[i];
	}	
	// Enable interrupts from ADC
	ACSR |= (1<<ACIE);
     3b2:	43 9a       	sbi	0x08, 3	; 8
	// Normalize ADC filtered value
	adc_filtered_value = (uint16_t)(filtered_value / ADC_BUFFER_LENGTH);
     3b4:	68 94       	set
     3b6:	12 f8       	bld	r1, 2
     3b8:	b6 95       	lsr	r27
     3ba:	a7 95       	ror	r26
     3bc:	97 95       	ror	r25
     3be:	87 95       	ror	r24
     3c0:	16 94       	lsr	r1
     3c2:	d1 f7       	brne	.-12     	; 0x3b8 <update_filtered_adc+0x28>
     3c4:	90 93 db 00 	sts	0x00DB, r25
     3c8:	80 93 da 00 	sts	0x00DA, r24
	// Convert to Celsius degree
	adc_filtered_celsius = conv_ADC_to_Celsius(adc_filtered_value);
     3cc:	4f df       	rcall	.-354    	; 0x26c <conv_ADC_to_Celsius>
     3ce:	90 93 dd 00 	sts	0x00DD, r25
     3d2:	80 93 dc 00 	sts	0x00DC, r24
     3d6:	08 95       	ret

000003d8 <__vector_14>:




ISR(ADC_vect)
{
     3d8:	1f 92       	push	r1
     3da:	0f 92       	push	r0
     3dc:	0f b6       	in	r0, 0x3f	; 63
     3de:	0f 92       	push	r0
     3e0:	11 24       	eor	r1, r1
     3e2:	2f 93       	push	r18
     3e4:	8f 93       	push	r24
     3e6:	9f 93       	push	r25
     3e8:	ef 93       	push	r30
     3ea:	ff 93       	push	r31
	uint16_t new_sample = ADC;
     3ec:	84 b1       	in	r24, 0x04	; 4
     3ee:	95 b1       	in	r25, 0x05	; 5
	
	if (adc_buffer_pos < 0)
     3f0:	20 91 60 00 	lds	r18, 0x0060
     3f4:	22 23       	and	r18, r18
     3f6:	fc f4       	brge	.+62     	; 0x436 <__vector_14+0x5e>
	{
		// First call to the function, fill whole buffer with current sample
		for (adc_buffer_pos = ADC_BUFFER_LENGTH-1; adc_buffer_pos > 0; adc_buffer_pos--)
			adc_sample_buffer[adc_buffer_pos] = new_sample;
     3f8:	90 93 b9 00 	sts	0x00B9, r25
     3fc:	80 93 b8 00 	sts	0x00B8, r24
     400:	90 93 b7 00 	sts	0x00B7, r25
     404:	80 93 b6 00 	sts	0x00B6, r24
     408:	90 93 b5 00 	sts	0x00B5, r25
     40c:	80 93 b4 00 	sts	0x00B4, r24
     410:	90 93 b3 00 	sts	0x00B3, r25
     414:	80 93 b2 00 	sts	0x00B2, r24
     418:	90 93 b1 00 	sts	0x00B1, r25
     41c:	80 93 b0 00 	sts	0x00B0, r24
     420:	90 93 af 00 	sts	0x00AF, r25
     424:	80 93 ae 00 	sts	0x00AE, r24
     428:	90 93 ad 00 	sts	0x00AD, r25
     42c:	80 93 ac 00 	sts	0x00AC, r24
     430:	10 92 60 00 	sts	0x0060, r1
     434:	0e c0       	rjmp	.+28     	; 0x452 <__vector_14+0x7a>
	}
	else
	{
		// Normal call
		adc_sample_buffer[adc_buffer_pos] = new_sample;
     436:	e2 2f       	mov	r30, r18
     438:	ee 0f       	add	r30, r30
     43a:	ff 0b       	sbc	r31, r31
     43c:	e6 55       	subi	r30, 0x56	; 86
     43e:	ff 4f       	sbci	r31, 0xFF	; 255
     440:	91 83       	std	Z+1, r25	; 0x01
     442:	80 83       	st	Z, r24
		adc_buffer_pos = (adc_buffer_pos == ADC_BUFFER_LENGTH - 1) ? 0 : adc_buffer_pos + 1;
     444:	27 30       	cpi	r18, 0x07	; 7
     446:	11 f0       	breq	.+4      	; 0x44c <__vector_14+0x74>
     448:	2f 5f       	subi	r18, 0xFF	; 255
     44a:	01 c0       	rjmp	.+2      	; 0x44e <__vector_14+0x76>
     44c:	20 e0       	ldi	r18, 0x00	; 0
     44e:	20 93 60 00 	sts	0x0060, r18
	}		
}	
     452:	ff 91       	pop	r31
     454:	ef 91       	pop	r30
     456:	9f 91       	pop	r25
     458:	8f 91       	pop	r24
     45a:	2f 91       	pop	r18
     45c:	0f 90       	pop	r0
     45e:	0f be       	out	0x3f, r0	; 63
     460:	0f 90       	pop	r0
     462:	1f 90       	pop	r1
     464:	18 95       	reti

00000466 <process_buttons>:
	uint8_t raw_delayed_inv;
	static uint8_t press_timer = 0;
	uint8_t long_press_mask;
	uint8_t long_press_event_mask;
	
	raw_delayed = raw_current;
     466:	30 91 c0 00 	lds	r19, 0x00C0
	raw_delayed_inv = raw_current_inv;
     46a:	20 91 61 00 	lds	r18, 0x0061
	raw_current = raw_button_state;
     46e:	90 91 fb 00 	lds	r25, 0x00FB
     472:	90 93 c0 00 	sts	0x00C0, r25
	raw_current_inv = ~raw_current;
     476:	49 2f       	mov	r20, r25
     478:	40 95       	com	r20
     47a:	40 93 61 00 	sts	0x0061, r20
	
	// Must be before press_timer update
	long_press_mask = (press_timer >= LONG_PRESS_DELAY) ? 0xFF : 0x00;
     47e:	80 91 c1 00 	lds	r24, 0x00C1
     482:	8c 30       	cpi	r24, 0x0C	; 12
     484:	10 f0       	brcs	.+4      	; 0x48a <process_buttons+0x24>
     486:	6f ef       	ldi	r22, 0xFF	; 255
     488:	01 c0       	rjmp	.+2      	; 0x48c <process_buttons+0x26>
     48a:	60 e0       	ldi	r22, 0x00	; 0
	
	if (raw_delayed != raw_current)
     48c:	39 17       	cp	r19, r25
     48e:	41 f0       	breq	.+16     	; 0x4a0 <process_buttons+0x3a>
	{
		press_timer = 0;
     490:	10 92 c1 00 	sts	0x00C1, r1
	}
	
	// Must after press_timer update
	long_press_event_mask = (press_timer == LONG_PRESS_DELAY) ? 0xFF : 0x00;
			
	button_action_down = raw_current & raw_delayed_inv;
     494:	89 2f       	mov	r24, r25
     496:	82 23       	and	r24, r18
     498:	80 93 bd 00 	sts	0x00BD, r24
     49c:	50 e0       	ldi	r21, 0x00	; 0
     49e:	14 c0       	rjmp	.+40     	; 0x4c8 <process_buttons+0x62>
	
	if (raw_delayed != raw_current)
	{
		press_timer = 0;
	}
	else if (press_timer <= LONG_PRESS_DELAY)
     4a0:	8d 30       	cpi	r24, 0x0D	; 13
     4a2:	18 f4       	brcc	.+6      	; 0x4aa <process_buttons+0x44>
	{
		press_timer++;
     4a4:	8f 5f       	subi	r24, 0xFF	; 255
     4a6:	80 93 c1 00 	sts	0x00C1, r24
	}
	
	// Must after press_timer update
	long_press_event_mask = (press_timer == LONG_PRESS_DELAY) ? 0xFF : 0x00;
     4aa:	50 91 c1 00 	lds	r21, 0x00C1
     4ae:	5c 30       	cpi	r21, 0x0C	; 12
     4b0:	09 f4       	brne	.+2      	; 0x4b4 <process_buttons+0x4e>
     4b2:	45 c0       	rjmp	.+138    	; 0x53e <process_buttons+0xd8>
			
	button_action_down = raw_current & raw_delayed_inv;
     4b4:	89 2f       	mov	r24, r25
     4b6:	82 23       	and	r24, r18
     4b8:	80 93 bd 00 	sts	0x00BD, r24
			
	if (press_timer > REPEAT_DELAY)
     4bc:	57 30       	cpi	r21, 0x07	; 7
     4be:	18 f0       	brcs	.+6      	; 0x4c6 <process_buttons+0x60>
     4c0:	50 e0       	ldi	r21, 0x00	; 0
		raw_delayed_inv |= 0xFF;
     4c2:	2f ef       	ldi	r18, 0xFF	; 255
     4c4:	01 c0       	rjmp	.+2      	; 0x4c8 <process_buttons+0x62>
	// Must after press_timer update
	long_press_event_mask = (press_timer == LONG_PRESS_DELAY) ? 0xFF : 0x00;
			
	button_action_down = raw_current & raw_delayed_inv;
			
	if (press_timer > REPEAT_DELAY)
     4c6:	50 e0       	ldi	r21, 0x00	; 0
		raw_delayed_inv |= 0xFF;
	
	button_action_rep = raw_current & raw_delayed_inv;
     4c8:	29 23       	and	r18, r25
     4ca:	20 93 bc 00 	sts	0x00BC, r18
	
	button_action_up_short = raw_current_inv & raw_delayed & ~long_press_mask;
     4ce:	60 95       	com	r22
     4d0:	34 23       	and	r19, r20
     4d2:	36 23       	and	r19, r22
     4d4:	30 93 bb 00 	sts	0x00BB, r19
	//button_action_up_long  = raw_current_inv & raw_delayed & long_press_mask;
	button_action_long  = raw_current & long_press_event_mask;
     4d8:	59 23       	and	r21, r25
     4da:	50 93 ba 00 	sts	0x00BA, r21
	
	// Compose button state
	button_state = (button_action_down & (BD_MENU | BD_UP | BD_DOWN | BD_ROTFWD | BD_ROTREV | BD_HEATCTRL));
     4de:	87 77       	andi	r24, 0x77	; 119
     4e0:	90 e0       	ldi	r25, 0x00	; 0
	if (button_action_up_short & BD_MENU)
     4e2:	30 fd       	sbrc	r19, 0
     4e4:	05 c0       	rjmp	.+10     	; 0x4f0 <process_buttons+0x8a>
	button_action_up_short = raw_current_inv & raw_delayed & ~long_press_mask;
	//button_action_up_long  = raw_current_inv & raw_delayed & long_press_mask;
	button_action_long  = raw_current & long_press_event_mask;
	
	// Compose button state
	button_state = (button_action_down & (BD_MENU | BD_UP | BD_DOWN | BD_ROTFWD | BD_ROTREV | BD_HEATCTRL));
     4e6:	90 93 bf 00 	sts	0x00BF, r25
     4ea:	80 93 be 00 	sts	0x00BE, r24
     4ee:	05 c0       	rjmp	.+10     	; 0x4fa <process_buttons+0x94>
	if (button_action_up_short & BD_MENU)
		button_state |= BS_MENU;
     4f0:	91 60       	ori	r25, 0x01	; 1
     4f2:	90 93 bf 00 	sts	0x00BF, r25
     4f6:	80 93 be 00 	sts	0x00BE, r24
	//if (button_action_up_long & BD_MENU)
	if (button_action_long & BD_MENU)
     4fa:	50 ff       	sbrs	r21, 0
     4fc:	09 c0       	rjmp	.+18     	; 0x510 <process_buttons+0xaa>
		button_state |= BL_MENU;
     4fe:	80 91 be 00 	lds	r24, 0x00BE
     502:	90 91 bf 00 	lds	r25, 0x00BF
     506:	92 60       	ori	r25, 0x02	; 2
     508:	90 93 bf 00 	sts	0x00BF, r25
     50c:	80 93 be 00 	sts	0x00BE, r24
	if (button_action_rep & BD_UP)
     510:	21 ff       	sbrs	r18, 1
     512:	09 c0       	rjmp	.+18     	; 0x526 <process_buttons+0xc0>
		button_state |= BR_UP;	
     514:	80 91 be 00 	lds	r24, 0x00BE
     518:	90 91 bf 00 	lds	r25, 0x00BF
     51c:	94 60       	ori	r25, 0x04	; 4
     51e:	90 93 bf 00 	sts	0x00BF, r25
     522:	80 93 be 00 	sts	0x00BE, r24
	if (button_action_rep & BD_DOWN)
     526:	22 ff       	sbrs	r18, 2
     528:	10 c0       	rjmp	.+32     	; 0x54a <process_buttons+0xe4>
		button_state |= BR_DOWN;
     52a:	80 91 be 00 	lds	r24, 0x00BE
     52e:	90 91 bf 00 	lds	r25, 0x00BF
     532:	98 60       	ori	r25, 0x08	; 8
     534:	90 93 bf 00 	sts	0x00BF, r25
     538:	80 93 be 00 	sts	0x00BE, r24
     53c:	08 95       	ret
	}
	
	// Must after press_timer update
	long_press_event_mask = (press_timer == LONG_PRESS_DELAY) ? 0xFF : 0x00;
			
	button_action_down = raw_current & raw_delayed_inv;
     53e:	83 2f       	mov	r24, r19
     540:	82 23       	and	r24, r18
     542:	80 93 bd 00 	sts	0x00BD, r24
	{
		press_timer++;
	}
	
	// Must after press_timer update
	long_press_event_mask = (press_timer == LONG_PRESS_DELAY) ? 0xFF : 0x00;
     546:	5f ef       	ldi	r21, 0xFF	; 255
     548:	bc cf       	rjmp	.-136    	; 0x4c2 <process_buttons+0x5c>
     54a:	08 95       	ret

0000054c <processRollControl>:
uint16_t cpoint2_adc;			// Calibration point 2, ADC value


// Function to control motor rotation
void processRollControl(void)
{	
     54c:	cf 93       	push	r28
	uint8_t beepState = 0;
	static uint8_t beepMask = 0x00;
	
	// Control direction by buttons
	if (button_action_down & BD_ROTFWD)
     54e:	80 91 bd 00 	lds	r24, 0x00BD
     552:	84 ff       	sbrs	r24, 4
     554:	04 c0       	rjmp	.+8      	; 0x55e <processRollControl+0x12>
	{
		setMotorDirection(ROLL_FWD);	
     556:	81 e0       	ldi	r24, 0x01	; 1
     558:	82 d7       	rcall	.+3844   	; 0x145e <setMotorDirection>
		beepState |= 0x01;			// pressed FWD button
     55a:	c1 e0       	ldi	r28, 0x01	; 1
     55c:	0f c0       	rjmp	.+30     	; 0x57c <processRollControl+0x30>
	}		
	else if (button_action_down & BD_ROTREV)
     55e:	85 ff       	sbrs	r24, 5
     560:	04 c0       	rjmp	.+8      	; 0x56a <processRollControl+0x1e>
	{
		setMotorDirection(ROLL_REV);
     562:	82 e0       	ldi	r24, 0x02	; 2
     564:	7c d7       	rcall	.+3832   	; 0x145e <setMotorDirection>
		beepState |= 0x02;			// pressed REV button
     566:	c2 e0       	ldi	r28, 0x02	; 2
     568:	09 c0       	rjmp	.+18     	; 0x57c <processRollControl+0x30>
	}		
	else if (button_action_long & BD_CYCLE)
     56a:	80 91 ba 00 	lds	r24, 0x00BA
     56e:	88 23       	and	r24, r24
     570:	24 f4       	brge	.+8      	; 0x57a <processRollControl+0x2e>
	{
		stopCycleRolling(1);		// Reset points and disabled CYCLE mode (if was enabled)
     572:	81 e0       	ldi	r24, 0x01	; 1
     574:	92 d7       	rcall	.+3876   	; 0x149a <stopCycleRolling>
		beepState |= 0x08;			// reset of points by long pressing of ROLL button
     576:	c8 e0       	ldi	r28, 0x08	; 8
     578:	01 c0       	rjmp	.+2      	; 0x57c <processRollControl+0x30>


// Function to control motor rotation
void processRollControl(void)
{	
	uint8_t beepState = 0;
     57a:	c0 e0       	ldi	r28, 0x00	; 0
		stopCycleRolling(1);		// Reset points and disabled CYCLE mode (if was enabled)
		beepState |= 0x08;			// reset of points by long pressing of ROLL button
	}
	
	
	if (button_action_up_short & BD_CYCLE)
     57c:	80 91 bb 00 	lds	r24, 0x00BB
     580:	88 23       	and	r24, r24
     582:	74 f4       	brge	.+28     	; 0x5a0 <processRollControl+0x54>
	{
		if (rollState & ROLL_CYCLE)
     584:	80 91 cc 00 	lds	r24, 0x00CC
     588:	82 ff       	sbrs	r24, 2
     58a:	04 c0       	rjmp	.+8      	; 0x594 <processRollControl+0x48>
		{
			stopCycleRolling(0);
     58c:	80 e0       	ldi	r24, 0x00	; 0
     58e:	85 d7       	rcall	.+3850   	; 0x149a <stopCycleRolling>
			beepState |= 0x20;		// stopped cycle
     590:	c0 62       	ori	r28, 0x20	; 32
     592:	06 c0       	rjmp	.+12     	; 0x5a0 <processRollControl+0x54>
		}
		else if (startCycleRolling())
     594:	be d7       	rcall	.+3964   	; 0x1512 <startCycleRolling>
     596:	88 23       	and	r24, r24
     598:	11 f0       	breq	.+4      	; 0x59e <processRollControl+0x52>
		{
			beepState |= 0x10;		// started cycle
     59a:	c0 61       	ori	r28, 0x10	; 16
     59c:	01 c0       	rjmp	.+2      	; 0x5a0 <processRollControl+0x54>
		}
		else
		{
			beepState |= 0x40;		// failed to start cycle
     59e:	c0 64       	ori	r28, 0x40	; 64
		}			
	}		
	
	if (rollState & ROLL_DIR_CHANGED)
     5a0:	80 91 cc 00 	lds	r24, 0x00CC
     5a4:	85 ff       	sbrs	r24, 5
     5a6:	04 c0       	rjmp	.+8      	; 0x5b0 <processRollControl+0x64>
	{
		rollState &= ~ROLL_DIR_CHANGED;
     5a8:	8f 7d       	andi	r24, 0xDF	; 223
     5aa:	80 93 cc 00 	sts	0x00CC, r24
		beepState |= 0x04;	
     5ae:	c4 60       	ori	r28, 0x04	; 4
	}
	
	if (rollState & CYCLE_ROLL_DONE)
     5b0:	80 91 cc 00 	lds	r24, 0x00CC
     5b4:	84 ff       	sbrs	r24, 4
     5b6:	04 c0       	rjmp	.+8      	; 0x5c0 <processRollControl+0x74>
	{
		rollState &= ~CYCLE_ROLL_DONE;
     5b8:	8f 7e       	andi	r24, 0xEF	; 239
     5ba:	80 93 cc 00 	sts	0x00CC, r24
		beepState |= 0x80;	
     5be:	c0 68       	ori	r28, 0x80	; 128
	}		
	
	beepState &= beepMask;
     5c0:	80 91 c2 00 	lds	r24, 0x00C2
     5c4:	c8 23       	and	r28, r24
	
	if (beepState & 0x80)		// Roll cycle done
     5c6:	3c f4       	brge	.+14     	; 0x5d6 <processRollControl+0x8a>
	{
		SetBeeperFreq(1000);
     5c8:	88 ee       	ldi	r24, 0xE8	; 232
     5ca:	93 e0       	ldi	r25, 0x03	; 3
     5cc:	eb d8       	rcall	.-3626   	; 0xfffff7a4 <__eeprom_end+0xff7ef79a>
		StartBeep(200);
     5ce:	88 ec       	ldi	r24, 0xC8	; 200
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	09 d9       	rcall	.-3566   	; 0xfffff7e6 <__eeprom_end+0xff7ef7dc>
     5d4:	1b c0       	rjmp	.+54     	; 0x60c <processRollControl+0xc0>
	}		
	else if (beepState & 0x40)	// Roll cycle start fail
     5d6:	c6 ff       	sbrs	r28, 6
     5d8:	07 c0       	rjmp	.+14     	; 0x5e8 <processRollControl+0x9c>
	{
		SetBeeperFreq(500);
     5da:	84 ef       	ldi	r24, 0xF4	; 244
     5dc:	91 e0       	ldi	r25, 0x01	; 1
     5de:	e2 d8       	rcall	.-3644   	; 0xfffff7a4 <__eeprom_end+0xff7ef79a>
		StartBeep(50);
     5e0:	82 e3       	ldi	r24, 0x32	; 50
     5e2:	90 e0       	ldi	r25, 0x00	; 0
     5e4:	00 d9       	rcall	.-3584   	; 0xfffff7e6 <__eeprom_end+0xff7ef7dc>
     5e6:	12 c0       	rjmp	.+36     	; 0x60c <processRollControl+0xc0>
	} 
	else if (beepState & 0x08)	// Reset points
     5e8:	c3 ff       	sbrs	r28, 3
     5ea:	07 c0       	rjmp	.+14     	; 0x5fa <processRollControl+0xae>
	{
		SetBeeperFreq(800);
     5ec:	80 e2       	ldi	r24, 0x20	; 32
     5ee:	93 e0       	ldi	r25, 0x03	; 3
     5f0:	d9 d8       	rcall	.-3662   	; 0xfffff7a4 <__eeprom_end+0xff7ef79a>
		StartBeep(50);
     5f2:	82 e3       	ldi	r24, 0x32	; 50
     5f4:	90 e0       	ldi	r25, 0x00	; 0
     5f6:	f7 d8       	rcall	.-3602   	; 0xfffff7e6 <__eeprom_end+0xff7ef7dc>
     5f8:	09 c0       	rjmp	.+18     	; 0x60c <processRollControl+0xc0>
	}							// Other
	else if ( beepState & (0x01 | 0x02 | 0x10 | 0x20 | 0x04) )
     5fa:	8c 2f       	mov	r24, r28
     5fc:	87 73       	andi	r24, 0x37	; 55
     5fe:	31 f0       	breq	.+12     	; 0x60c <processRollControl+0xc0>
	{
		SetBeeperFreq(1000);
     600:	88 ee       	ldi	r24, 0xE8	; 232
     602:	93 e0       	ldi	r25, 0x03	; 3
     604:	cf d8       	rcall	.-3682   	; 0xfffff7a4 <__eeprom_end+0xff7ef79a>
		StartBeep(50);	
     606:	82 e3       	ldi	r24, 0x32	; 50
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	ed d8       	rcall	.-3622   	; 0xfffff7e6 <__eeprom_end+0xff7ef7dc>
	}			
	
	// Apply mask to next sound events
	beepMask = 0xFF;
	// Disable beep from DIR_CHANGED on next call if direction buttons have been pressed
	if (beepState & 0x03)	
     60c:	c3 70       	andi	r28, 0x03	; 3
     60e:	21 f4       	brne	.+8      	; 0x618 <processRollControl+0xcc>
		SetBeeperFreq(1000);
		StartBeep(50);	
	}			
	
	// Apply mask to next sound events
	beepMask = 0xFF;
     610:	8f ef       	ldi	r24, 0xFF	; 255
     612:	80 93 c2 00 	sts	0x00C2, r24
     616:	03 c0       	rjmp	.+6      	; 0x61e <processRollControl+0xd2>
	// Disable beep from DIR_CHANGED on next call if direction buttons have been pressed
	if (beepState & 0x03)	
		beepMask &= ~0x04;	
     618:	8b ef       	ldi	r24, 0xFB	; 251
     61a:	80 93 c2 00 	sts	0x00C2, r24
		
	
		
	// Indicate direction by LEDs
	clearExtraLeds(LED_ROTFWD | LED_ROTREV);
     61e:	80 e3       	ldi	r24, 0x30	; 48
     620:	32 d2       	rcall	.+1124   	; 0xa86 <clearExtraLeds>
	if (rollState & ROLL_FWD)
     622:	80 91 cc 00 	lds	r24, 0x00CC
     626:	80 ff       	sbrs	r24, 0
     628:	03 c0       	rjmp	.+6      	; 0x630 <processRollControl+0xe4>
		setExtraLeds(LED_ROTFWD);
     62a:	80 e1       	ldi	r24, 0x10	; 16
     62c:	26 d2       	rcall	.+1100   	; 0xa7a <setExtraLeds>
     62e:	04 c0       	rjmp	.+8      	; 0x638 <processRollControl+0xec>
	else if (rollState & ROLL_REV)
     630:	81 ff       	sbrs	r24, 1
     632:	02 c0       	rjmp	.+4      	; 0x638 <processRollControl+0xec>
		setExtraLeds(LED_ROTREV);
     634:	80 e2       	ldi	r24, 0x20	; 32
     636:	21 d2       	rcall	.+1090   	; 0xa7a <setExtraLeds>
		
}
     638:	cf 91       	pop	r28
     63a:	08 95       	ret

0000063c <processPID>:
{
	
	int16_t error, p_term, i_term, temp;
	static int16_t integAcc = 0;
	
	error = - setPoint + processValue;
     63c:	68 1b       	sub	r22, r24
     63e:	79 0b       	sbc	r23, r25
	
	
	//------ Calculate P term --------//
	if (error > 100)
     640:	65 36       	cpi	r22, 0x65	; 101
     642:	71 05       	cpc	r23, r1
     644:	5c f4       	brge	.+22     	; 0x65c <processPID+0x20>
	{
		p_term = 10000;
	}
	else if (error < -100)
     646:	6c 39       	cpi	r22, 0x9C	; 156
     648:	8f ef       	ldi	r24, 0xFF	; 255
     64a:	78 07       	cpc	r23, r24
     64c:	54 f0       	brlt	.+20     	; 0x662 <processPID+0x26>
	{
		p_term = -10000;
	}
	else
	{
		p_term = error * Kp;
     64e:	88 e2       	ldi	r24, 0x28	; 40
     650:	86 9f       	mul	r24, r22
     652:	90 01       	movw	r18, r0
     654:	87 9f       	mul	r24, r23
     656:	30 0d       	add	r19, r0
     658:	11 24       	eor	r1, r1
     65a:	05 c0       	rjmp	.+10     	; 0x666 <processPID+0x2a>
	
	
	//------ Calculate P term --------//
	if (error > 100)
	{
		p_term = 10000;
     65c:	20 e1       	ldi	r18, 0x10	; 16
     65e:	37 e2       	ldi	r19, 0x27	; 39
     660:	02 c0       	rjmp	.+4      	; 0x666 <processPID+0x2a>
	}
	else if (error < -100)
	{
		p_term = -10000;
     662:	20 ef       	ldi	r18, 0xF0	; 240
     664:	38 ed       	ldi	r19, 0xD8	; 216
	{
		p_term = error * Kp;
	}
	
	//------ Calculate I term --------//
	integAcc += error;
     666:	80 91 c4 00 	lds	r24, 0x00C4
     66a:	90 91 c5 00 	lds	r25, 0x00C5
     66e:	68 0f       	add	r22, r24
     670:	79 1f       	adc	r23, r25
	if (integAcc > 10)
     672:	6b 30       	cpi	r22, 0x0B	; 11
     674:	71 05       	cpc	r23, r1
     676:	3c f0       	brlt	.+14     	; 0x686 <processPID+0x4a>
	{
		integAcc = 10;
     678:	8a e0       	ldi	r24, 0x0A	; 10
     67a:	90 e0       	ldi	r25, 0x00	; 0
     67c:	90 93 c5 00 	sts	0x00C5, r25
     680:	80 93 c4 00 	sts	0x00C4, r24
     684:	0f c0       	rjmp	.+30     	; 0x6a4 <processPID+0x68>
	}
	else if (integAcc < -10)
     686:	66 3f       	cpi	r22, 0xF6	; 246
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	78 07       	cpc	r23, r24
     68c:	2c f0       	brlt	.+10     	; 0x698 <processPID+0x5c>
	{
		p_term = error * Kp;
	}
	
	//------ Calculate I term --------//
	integAcc += error;
     68e:	70 93 c5 00 	sts	0x00C5, r23
     692:	60 93 c4 00 	sts	0x00C4, r22
     696:	06 c0       	rjmp	.+12     	; 0x6a4 <processPID+0x68>
	{
		integAcc = 10;
	}
	else if (integAcc < -10)
	{
		integAcc = -10;
     698:	86 ef       	ldi	r24, 0xF6	; 246
     69a:	9f ef       	ldi	r25, 0xFF	; 255
     69c:	90 93 c5 00 	sts	0x00C5, r25
     6a0:	80 93 c4 00 	sts	0x00C4, r24
	}
	i_term = integAcc * Ki;
     6a4:	40 91 c4 00 	lds	r20, 0x00C4
     6a8:	50 91 c5 00 	lds	r21, 0x00C5
     6ac:	6e e1       	ldi	r22, 0x1E	; 30
     6ae:	64 9f       	mul	r22, r20
     6b0:	c0 01       	movw	r24, r0
     6b2:	65 9f       	mul	r22, r21
     6b4:	90 0d       	add	r25, r0
     6b6:	11 24       	eor	r1, r1
	
	//--------- Summ terms -----------//
	temp = (p_term + i_term) / SCALING_FACTOR;
     6b8:	82 0f       	add	r24, r18
     6ba:	93 1f       	adc	r25, r19
     6bc:	62 e3       	ldi	r22, 0x32	; 50
     6be:	70 e0       	ldi	r23, 0x00	; 0
     6c0:	ec d8       	rcall	.-3624   	; 0xfffff89a <__eeprom_end+0xff7ef890>
     6c2:	86 2f       	mov	r24, r22
     6c4:	97 2f       	mov	r25, r23
     6c6:	99 23       	and	r25, r25
     6c8:	14 f4       	brge	.+4      	; 0x6ce <processPID+0x92>
     6ca:	80 e0       	ldi	r24, 0x00	; 0
     6cc:	90 e0       	ldi	r25, 0x00	; 0
	else if (temp < 0)
	{
		temp = 0;
	}
	
	return temp;
     6ce:	8b 30       	cpi	r24, 0x0B	; 11
     6d0:	91 05       	cpc	r25, r1
     6d2:	14 f0       	brlt	.+4      	; 0x6d8 <processPID+0x9c>
     6d4:	8a e0       	ldi	r24, 0x0A	; 10
     6d6:	90 e0       	ldi	r25, 0x00	; 0
	
}
     6d8:	08 95       	ret

000006da <processHeaterControl>:
	static uint8_t heater_ctrl = 0;
	uint16_t set_value_adc;
	uint16_t pid_output;
	
	// Process heater ON/OFF control by button
	if (button_state & BD_HEATCTRL)
     6da:	80 91 be 00 	lds	r24, 0x00BE
     6de:	86 ff       	sbrs	r24, 6
     6e0:	06 c0       	rjmp	.+12     	; 0x6ee <processHeaterControl+0x14>
	{
		heater_ctrl ^= 0x01;
     6e2:	90 91 c3 00 	lds	r25, 0x00C3
     6e6:	81 e0       	ldi	r24, 0x01	; 1
     6e8:	89 27       	eor	r24, r25
     6ea:	80 93 c3 00 	sts	0x00C3, r24
	}
	
	
	if (heater_ctrl)
     6ee:	80 91 c3 00 	lds	r24, 0x00C3
     6f2:	88 23       	and	r24, r24
     6f4:	b9 f0       	breq	.+46     	; 0x724 <processHeaterControl+0x4a>
		// Heater enabled

		//-----------------//
		// Process PID
		
		if (heaterState & READY_TO_UPDATE_HEATER)
     6f6:	80 91 cd 00 	lds	r24, 0x00CD
     6fa:	88 23       	and	r24, r24
     6fc:	84 f4       	brge	.+32     	; 0x71e <processHeaterControl+0x44>
		{
			
			// Convert temperature setup to equal ADC value
			set_value_adc = conv_Celsius_to_ADC(setup_temp_value);
     6fe:	80 91 df 00 	lds	r24, 0x00DF
     702:	90 91 e0 00 	lds	r25, 0x00E0
     706:	d4 dd       	rcall	.-1112   	; 0x2b0 <conv_Celsius_to_ADC>
			
			// PID !!!
			pid_output = processPID(set_value_adc,adc_filtered_value);
     708:	60 91 da 00 	lds	r22, 0x00DA
     70c:	70 91 db 00 	lds	r23, 0x00DB
     710:	95 df       	rcall	.-214    	; 0x63c <processPID>
			//setHeaterControl(10);	
			setHeaterControl(pid_output);	
     712:	95 d6       	rcall	.+3370   	; 0x143e <setHeaterControl>
			
			heaterState &= ~READY_TO_UPDATE_HEATER;
     714:	80 91 cd 00 	lds	r24, 0x00CD
     718:	8f 77       	andi	r24, 0x7F	; 127
     71a:	80 93 cd 00 	sts	0x00CD, r24
		}
		//-----------------//
		
		setExtraLeds(LED_HEATER);
     71e:	80 e4       	ldi	r24, 0x40	; 64
     720:	ac d1       	rcall	.+856    	; 0xa7a <setExtraLeds>
     722:	08 95       	ret
	}
	else
	{
		// Heater disabled
		setHeaterControl(0);
     724:	80 e0       	ldi	r24, 0x00	; 0
     726:	8b d6       	rcall	.+3350   	; 0x143e <setHeaterControl>
		clearExtraLeds(LED_HEATER);
     728:	80 e4       	ldi	r24, 0x40	; 64
     72a:	ad d1       	rcall	.+858    	; 0xa86 <clearExtraLeds>
     72c:	08 95       	ret

0000072e <restoreGlobalParams>:




void restoreGlobalParams(void)
{
     72e:	cf 93       	push	r28
     730:	df 93       	push	r29
     732:	cd b7       	in	r28, 0x3d	; 61
     734:	de b7       	in	r29, 0x3e	; 62
     736:	2a 97       	sbiw	r28, 0x0a	; 10
     738:	0f b6       	in	r0, 0x3f	; 63
     73a:	f8 94       	cli
     73c:	de bf       	out	0x3e, r29	; 62
     73e:	0f be       	out	0x3f, r0	; 63
     740:	cd bf       	out	0x3d, r28	; 61
	 gParams_t gParams;
	 eeprom_read_block(&gParams,&nvParams,sizeof(nvParams));
     742:	4a e0       	ldi	r20, 0x0A	; 10
     744:	50 e0       	ldi	r21, 0x00	; 0
     746:	60 e0       	ldi	r22, 0x00	; 0
     748:	70 e0       	ldi	r23, 0x00	; 0
     74a:	ce 01       	movw	r24, r28
     74c:	01 96       	adiw	r24, 0x01	; 1
     74e:	25 d9       	rcall	.-3510   	; 0xfffff99a <__eeprom_end+0xff7ef990>
	 setup_temp_value = gParams.setup_temp_value;	// reference temperature
     750:	89 81       	ldd	r24, Y+1	; 0x01
     752:	80 93 df 00 	sts	0x00DF, r24
     756:	10 92 e0 00 	sts	0x00E0, r1
	 rollCycleSet = gParams.rollCycleSet;			// number of rolling cycles
     75a:	8a 81       	ldd	r24, Y+2	; 0x02
     75c:	80 93 e2 00 	sts	0x00E2, r24
	 sound_enable = gParams.sound_enable;			// Global sound enable
     760:	8b 81       	ldd	r24, Y+3	; 0x03
     762:	80 93 e1 00 	sts	0x00E1, r24
	 power_off_timeout = gParams.power_off_timeout;	// Auto power OFF timeout, minutes
     766:	8c 81       	ldd	r24, Y+4	; 0x04
     768:	80 93 e5 00 	sts	0x00E5, r24
	 cpoint1 = gParams.cpoint1;						// Calibration point 1
	 cpoint2 = gParams.cpoint2;						// Calibration point 2
	 cpoint1_adc = gParams.cpoint1_adc;
	 cpoint2_adc = gParams.cpoint2_adc;
	 
	 cpoint1 		= 25;
     76c:	89 e1       	ldi	r24, 0x19	; 25
     76e:	80 93 de 00 	sts	0x00DE, r24
	 cpoint1_adc 	= 860;
     772:	8c e5       	ldi	r24, 0x5C	; 92
     774:	93 e0       	ldi	r25, 0x03	; 3
     776:	90 93 e4 00 	sts	0x00E4, r25
     77a:	80 93 e3 00 	sts	0x00E3, r24
	 cpoint2 		= 145;
     77e:	81 e9       	ldi	r24, 0x91	; 145
     780:	80 93 e8 00 	sts	0x00E8, r24
	 cpoint2_adc 	= 591;
     784:	8f e4       	ldi	r24, 0x4F	; 79
     786:	92 e0       	ldi	r25, 0x02	; 2
     788:	90 93 e7 00 	sts	0x00E7, r25
     78c:	80 93 e6 00 	sts	0x00E6, r24
	 
}
     790:	2a 96       	adiw	r28, 0x0a	; 10
     792:	0f b6       	in	r0, 0x3f	; 63
     794:	f8 94       	cli
     796:	de bf       	out	0x3e, r29	; 62
     798:	0f be       	out	0x3f, r0	; 63
     79a:	cd bf       	out	0x3d, r28	; 61
     79c:	df 91       	pop	r29
     79e:	cf 91       	pop	r28
     7a0:	08 95       	ret

000007a2 <exitPowerOff>:




void exitPowerOff(void)
{
     7a2:	08 95       	ret

000007a4 <processAutoPowerOff>:
*/
}


void processAutoPowerOff(void)
{
     7a4:	08 95       	ret

000007a6 <decode_led_char>:
// Decodes normal string literal to the 
//	7-segment representation
//---------------------------------------------//
static uint8_t decode_led_char(char c)
{
	switch(c)
     7a6:	48 2f       	mov	r20, r24
     7a8:	50 e0       	ldi	r21, 0x00	; 0
     7aa:	fa 01       	movw	r30, r20
     7ac:	b0 97       	sbiw	r30, 0x20	; 32
     7ae:	e1 39       	cpi	r30, 0x91	; 145
     7b0:	f1 05       	cpc	r31, r1
     7b2:	70 f5       	brcc	.+92     	; 0x810 <decode_led_char+0x6a>
     7b4:	ed 5e       	subi	r30, 0xED	; 237
     7b6:	ff 4f       	sbci	r31, 0xFF	; 255
     7b8:	09 94       	ijmp
	{
		case 'O':
		case '0': return (SEGA | SEGB | SEGC | SEGD | SEGE | SEGF);
     7ba:	8f e3       	ldi	r24, 0x3F	; 63
     7bc:	08 95       	ret
		case '1': return (SEGB | SEGC );
		case '2': return (SEGA | SEGB | SEGD | SEGE | SEGG);
     7be:	8b e5       	ldi	r24, 0x5B	; 91
     7c0:	08 95       	ret
		case '3': return (SEGA | SEGB | SEGC | SEGD | SEGG);
     7c2:	8f e4       	ldi	r24, 0x4F	; 79
     7c4:	08 95       	ret
		case '4': return (SEGB | SEGC | SEGF | SEGG);
     7c6:	86 e6       	ldi	r24, 0x66	; 102
     7c8:	08 95       	ret
		case 'S':
		case '5': return (SEGA | SEGC | SEGD | SEGF | SEGG);
     7ca:	8d e6       	ldi	r24, 0x6D	; 109
     7cc:	08 95       	ret
		case '6': return (SEGA | SEGC | SEGD | SEGE | SEGF | SEGG);
     7ce:	8d e7       	ldi	r24, 0x7D	; 125
     7d0:	08 95       	ret
		case '7': return (SEGA | SEGB | SEGC );
     7d2:	87 e0       	ldi	r24, 0x07	; 7
     7d4:	08 95       	ret
		case '8': return (SEGA | SEGB | SEGC | SEGD | SEGE | SEGF | SEGG);
     7d6:	8f e7       	ldi	r24, 0x7F	; 127
     7d8:	08 95       	ret
		case '9': return (SEGA | SEGB | SEGC | SEGD | SEGF | SEGG);
     7da:	8f e6       	ldi	r24, 0x6F	; 111
     7dc:	08 95       	ret
		case '.': return (SEGH);
     7de:	80 e8       	ldi	r24, 0x80	; 128
     7e0:	08 95       	ret
		case ',': return (SEGH);
     7e2:	80 e8       	ldi	r24, 0x80	; 128
     7e4:	08 95       	ret
		case '-': return (SEGG);
     7e6:	80 e4       	ldi	r24, 0x40	; 64
     7e8:	08 95       	ret
		case '_': return (SEGD);
     7ea:	88 e0       	ldi	r24, 0x08	; 8
     7ec:	08 95       	ret
		case ' ': return 0;
     7ee:	80 e0       	ldi	r24, 0x00	; 0
     7f0:	08 95       	ret
		case 0xB0:	return (SEGA | SEGB | SEGF | SEGG);		// Degree sin
     7f2:	83 e6       	ldi	r24, 0x63	; 99
     7f4:	08 95       	ret
		case 'C':	return (SEGA | SEGD | SEGE | SEGF);
     7f6:	89 e3       	ldi	r24, 0x39	; 57
     7f8:	08 95       	ret
		case 'F':	return (SEGA | SEGE | SEGF | SEGG);
     7fa:	81 e7       	ldi	r24, 0x71	; 113
     7fc:	08 95       	ret
		case 'N':	return (SEGC | SEGE | SEGG);
     7fe:	84 e5       	ldi	r24, 0x54	; 84
     800:	08 95       	ret
		case 'D': return (SEGB | SEGC | SEGD | SEGE | SEGG);
     802:	8e e5       	ldi	r24, 0x5E	; 94
     804:	08 95       	ret
		case 'P': return (SEGA | SEGB | SEGE | SEGF | SEGG);
     806:	83 e7       	ldi	r24, 0x73	; 115
     808:	08 95       	ret
		case 'E': return (SEGA | SEGD | SEGE | SEGF | SEGG);
     80a:	89 e7       	ldi	r24, 0x79	; 121
     80c:	08 95       	ret
{
	switch(c)
	{
		case 'O':
		case '0': return (SEGA | SEGB | SEGC | SEGD | SEGE | SEGF);
		case '1': return (SEGB | SEGC );
     80e:	86 e0       	ldi	r24, 0x06	; 6
		case 'D': return (SEGB | SEGC | SEGD | SEGE | SEGG);
		case 'P': return (SEGA | SEGB | SEGE | SEGF | SEGG);
		case 'E': return (SEGA | SEGD | SEGE | SEGF | SEGG);
		default:  return c;	
	}
}
     810:	08 95       	ret

00000812 <wrap_led_buffer_index>:
//---------------------------------------------//
// Ensures that index is inside the buffer
// -128 <= index <= 127
//---------------------------------------------//
static uint8_t wrap_led_buffer_index(int8_t buf_index)
{
     812:	98 2f       	mov	r25, r24
	uint8_t new_index_u;
	new_index_u = (uint8_t) ((buf_index < 0) ? -buf_index : buf_index);
     814:	87 fd       	sbrc	r24, 7
     816:	81 95       	neg	r24
	if (new_index_u >= LED_BUFFER_LENGTH)
     818:	8e 30       	cpi	r24, 0x0E	; 14
     81a:	78 f0       	brcs	.+30     	; 0x83a <wrap_led_buffer_index+0x28>
		new_index_u = new_index_u % LED_BUFFER_LENGTH;
     81c:	38 2f       	mov	r19, r24
     81e:	36 95       	lsr	r19
     820:	23 e9       	ldi	r18, 0x93	; 147
     822:	32 9f       	mul	r19, r18
     824:	21 2d       	mov	r18, r1
     826:	11 24       	eor	r1, r1
     828:	26 95       	lsr	r18
     82a:	26 95       	lsr	r18
     82c:	22 0f       	add	r18, r18
     82e:	32 2f       	mov	r19, r18
     830:	33 0f       	add	r19, r19
     832:	33 0f       	add	r19, r19
     834:	33 0f       	add	r19, r19
     836:	32 1b       	sub	r19, r18
     838:	83 1b       	sub	r24, r19
	new_index_u = ((buf_index >= 0) || (new_index_u == 0)) ? new_index_u :  LED_BUFFER_LENGTH - new_index_u ;
     83a:	99 23       	and	r25, r25
     83c:	2c f4       	brge	.+10     	; 0x848 <wrap_led_buffer_index+0x36>
     83e:	88 23       	and	r24, r24
     840:	19 f0       	breq	.+6      	; 0x848 <wrap_led_buffer_index+0x36>
     842:	9e e0       	ldi	r25, 0x0E	; 14
     844:	98 1b       	sub	r25, r24
     846:	89 2f       	mov	r24, r25
	return new_index_u;
}
     848:	08 95       	ret

0000084a <processLedIndicator>:
// Call this function N times per sec to get N/NUM_DIGITS_TOTAL display update rate, where
// NUM_DIGITS_TOTAL is number_of_digits_of_LED_display if no extra LEDs are used or
// (number_of_digits_of_LED_display + 1) otherwise.
//---------------------------------------------//
void processLedIndicator()
{
     84a:	cf 93       	push	r28
	disable_led_segments();
	#endif
	
	
	// Perform regular shift
	led_clock_pulse(!LED_DIGIT_ACT_LVL);
     84c:	81 e0       	ldi	r24, 0x01	; 1
     84e:	22 d1       	rcall	.+580    	; 0xa94 <led_clock_pulse>
	
	switch (wActivePos)
     850:	80 91 c7 00 	lds	r24, 0x00C7
     854:	88 23       	and	r24, r24
     856:	19 f0       	breq	.+6      	; 0x85e <processLedIndicator+0x14>
     858:	86 30       	cpi	r24, 0x06	; 6
     85a:	f1 f5       	brne	.+124    	; 0x8d8 <processLedIndicator+0x8e>
     85c:	12 c0       	rjmp	.+36     	; 0x882 <processLedIndicator+0x38>
	{
	case 0:
		// Get buttons
		#ifndef CLEAN_OPERATION
		disable_led_segments();
     85e:	46 d1       	rcall	.+652    	; 0xaec <disable_led_segments>
		#endif
		enable_led_segments_pullups();
     860:	37 d1       	rcall	.+622    	; 0xad0 <enable_led_segments_pullups>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     862:	85 e3       	ldi	r24, 0x35	; 53
     864:	8a 95       	dec	r24
     866:	f1 f7       	brne	.-4      	; 0x864 <processLedIndicator+0x1a>
     868:	00 00       	nop
		_delay_us(PULLUP_DELAY_US);
		capture_button_state();
     86a:	47 d1       	rcall	.+654    	; 0xafa <capture_button_state>
		#ifndef CLEAN_OPERATION
		enable_led_segments();
     86c:	38 d1       	rcall	.+624    	; 0xade <enable_led_segments>
		#endif
		// Start new cycle with active digit level
		led_clock_pulse(LED_DIGIT_ACT_LVL);
     86e:	80 e0       	ldi	r24, 0x00	; 0
     870:	11 d1       	rcall	.+546    	; 0xa94 <led_clock_pulse>
		// Always start new cycle from specified buffer start position
		bufActivePos = wStartPos;
     872:	80 91 ea 00 	lds	r24, 0x00EA
     876:	80 93 c6 00 	sts	0x00C6, r24
		next_wActivePos = wActivePos + 1;
     87a:	c0 91 c7 00 	lds	r28, 0x00C7
     87e:	cf 5f       	subi	r28, 0xFF	; 255
		break;
     880:	2f c0       	rjmp	.+94     	; 0x8e0 <processLedIndicator+0x96>
//---------------------------------------------//
// Performs window shifting
//---------------------------------------------//
static void processWindowShifter(void)
{
	if (shifterState == LED_SHIFT_DONE)
     882:	80 91 eb 00 	lds	r24, 0x00EB
     886:	88 23       	and	r24, r24
     888:	81 f1       	breq	.+96     	; 0x8ea <processLedIndicator+0xa0>
		return;
	
	// Process shift timer
	processSoftTimer8b(&shiftTimer);	
     88a:	88 ec       	ldi	r24, 0xC8	; 200
     88c:	90 e0       	ldi	r25, 0x00	; 0
     88e:	5c d7       	rcall	.+3768   	; 0x1748 <processSoftTimer8b>
	
	if (shiftTimer.FTop)
     890:	80 91 c8 00 	lds	r24, 0x00C8
     894:	85 ff       	sbrs	r24, 5
     896:	23 c0       	rjmp	.+70     	; 0x8de <processLedIndicator+0x94>
	{
		// Check if finished
		if (wStartPos == bufStartPos)	
     898:	80 91 ea 00 	lds	r24, 0x00EA
     89c:	90 91 ec 00 	lds	r25, 0x00EC
     8a0:	89 13       	cpse	r24, r25
     8a2:	04 c0       	rjmp	.+8      	; 0x8ac <processLedIndicator+0x62>
		{
			// Update state
			shifterState = LED_SHIFT_DONE;
     8a4:	10 92 eb 00 	sts	0x00EB, r1
		// Always start new cycle from specified buffer start position
		bufActivePos = wStartPos;
		next_wActivePos = wActivePos + 1;
		break;
	case NUM_DIGITS_TOTAL-1:
		next_wActivePos = 0;
     8a8:	c0 e0       	ldi	r28, 0x00	; 0
     8aa:	1a c0       	rjmp	.+52     	; 0x8e0 <processLedIndicator+0x96>
		if (wStartPos == bufStartPos)	
		{
			// Update state
			shifterState = LED_SHIFT_DONE;
		}
		else if (shifterState == LED_SHIFT_RIGHT)
     8ac:	90 91 eb 00 	lds	r25, 0x00EB
     8b0:	92 30       	cpi	r25, 0x02	; 2
     8b2:	49 f4       	brne	.+18     	; 0x8c6 <processLedIndicator+0x7c>
// Increments index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t inc_buffer_position(uint8_t position)
{
	return (position >= LED_BUFFER_LENGTH - 1) ? 0 : position + 1;
     8b4:	8d 30       	cpi	r24, 0x0D	; 13
     8b6:	10 f4       	brcc	.+4      	; 0x8bc <processLedIndicator+0x72>
     8b8:	8f 5f       	subi	r24, 0xFF	; 255
     8ba:	01 c0       	rjmp	.+2      	; 0x8be <processLedIndicator+0x74>
     8bc:	80 e0       	ldi	r24, 0x00	; 0
			// Update state
			shifterState = LED_SHIFT_DONE;
		}
		else if (shifterState == LED_SHIFT_RIGHT)
		{
			wStartPos = inc_buffer_position(wStartPos);	
     8be:	80 93 ea 00 	sts	0x00EA, r24
		// Always start new cycle from specified buffer start position
		bufActivePos = wStartPos;
		next_wActivePos = wActivePos + 1;
		break;
	case NUM_DIGITS_TOTAL-1:
		next_wActivePos = 0;
     8c2:	c0 e0       	ldi	r28, 0x00	; 0
     8c4:	0d c0       	rjmp	.+26     	; 0x8e0 <processLedIndicator+0x96>
// Decrements index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t dec_buffer_position(uint8_t position)
{
	return (position == 0) ? LED_BUFFER_LENGTH - 1 : position - 1;
     8c6:	88 23       	and	r24, r24
     8c8:	11 f0       	breq	.+4      	; 0x8ce <processLedIndicator+0x84>
     8ca:	81 50       	subi	r24, 0x01	; 1
     8cc:	01 c0       	rjmp	.+2      	; 0x8d0 <processLedIndicator+0x86>
     8ce:	8d e0       	ldi	r24, 0x0D	; 13
		{
			wStartPos = inc_buffer_position(wStartPos);	
		}
		else
		{
			wStartPos = dec_buffer_position(wStartPos);		
     8d0:	80 93 ea 00 	sts	0x00EA, r24
		// Always start new cycle from specified buffer start position
		bufActivePos = wStartPos;
		next_wActivePos = wActivePos + 1;
		break;
	case NUM_DIGITS_TOTAL-1:
		next_wActivePos = 0;
     8d4:	c0 e0       	ldi	r28, 0x00	; 0
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <processLedIndicator+0x96>
		// Shift LED window
		processWindowShifter();	
		break;
	default:
		next_wActivePos = wActivePos + 1;
     8d8:	c8 2f       	mov	r28, r24
     8da:	cf 5f       	subi	r28, 0xFF	; 255
		break;
     8dc:	01 c0       	rjmp	.+2      	; 0x8e0 <processLedIndicator+0x96>
		// Always start new cycle from specified buffer start position
		bufActivePos = wStartPos;
		next_wActivePos = wActivePos + 1;
		break;
	case NUM_DIGITS_TOTAL-1:
		next_wActivePos = 0;
     8de:	c0 e0       	ldi	r28, 0x00	; 0
		next_wActivePos = wActivePos + 1;
		break;
	}		
	
	#ifdef 	USE_EXTRA_LED_DIGIT
	if (wActivePos == EXTRA_DIGIT_NUM)
     8e0:	80 91 c7 00 	lds	r24, 0x00C7
     8e4:	86 30       	cpi	r24, 0x06	; 6
     8e6:	31 f4       	brne	.+12     	; 0x8f4 <processLedIndicator+0xaa>
     8e8:	01 c0       	rjmp	.+2      	; 0x8ec <processLedIndicator+0xa2>
		// Always start new cycle from specified buffer start position
		bufActivePos = wStartPos;
		next_wActivePos = wActivePos + 1;
		break;
	case NUM_DIGITS_TOTAL-1:
		next_wActivePos = 0;
     8ea:	c0 e0       	ldi	r28, 0x00	; 0
	
	#ifdef 	USE_EXTRA_LED_DIGIT
	if (wActivePos == EXTRA_DIGIT_NUM)
	{
		// Output separate LEDs state
		set_led_segments(extra_led_state);
     8ec:	80 91 e9 00 	lds	r24, 0x00E9
     8f0:	e1 d0       	rcall	.+450    	; 0xab4 <set_led_segments>
     8f2:	10 c0       	rjmp	.+32     	; 0x914 <processLedIndicator+0xca>
	}
	else
	#endif
	{
		// Output new segment data
		set_led_segments(led_data_buffer[bufActivePos]);
     8f4:	e0 91 c6 00 	lds	r30, 0x00C6
     8f8:	f0 e0       	ldi	r31, 0x00	; 0
     8fa:	e3 51       	subi	r30, 0x13	; 19
     8fc:	ff 4f       	sbci	r31, 0xFF	; 255
     8fe:	80 81       	ld	r24, Z
     900:	d9 d0       	rcall	.+434    	; 0xab4 <set_led_segments>
		// Wrap around buffer length
		bufActivePos = inc_buffer_position(bufActivePos );
     902:	90 91 c6 00 	lds	r25, 0x00C6
// Increments index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t inc_buffer_position(uint8_t position)
{
	return (position >= LED_BUFFER_LENGTH - 1) ? 0 : position + 1;
     906:	9d 30       	cpi	r25, 0x0D	; 13
     908:	10 f4       	brcc	.+4      	; 0x90e <processLedIndicator+0xc4>
     90a:	9f 5f       	subi	r25, 0xFF	; 255
     90c:	01 c0       	rjmp	.+2      	; 0x910 <processLedIndicator+0xc6>
     90e:	90 e0       	ldi	r25, 0x00	; 0
	#endif
	{
		// Output new segment data
		set_led_segments(led_data_buffer[bufActivePos]);
		// Wrap around buffer length
		bufActivePos = inc_buffer_position(bufActivePos );
     910:	90 93 c6 00 	sts	0x00C6, r25
	}
		
	wActivePos = next_wActivePos;
     914:	c0 93 c7 00 	sts	0x00C7, r28
	
	#ifdef CLEAN_OPERATION
	enable_led_segments();
	#endif

}
     918:	cf 91       	pop	r28
     91a:	08 95       	ret

0000091c <fillLedBuffer>:
//---------------------------------------------//
// Fills buffer from (bufStartPos + offset) 
//	position with single char
//---------------------------------------------//
void fillLedBuffer(int8_t offset, uint8_t length, char c)
{
     91c:	1f 93       	push	r17
     91e:	cf 93       	push	r28
     920:	df 93       	push	r29
     922:	18 2f       	mov	r17, r24
     924:	c6 2f       	mov	r28, r22
     926:	84 2f       	mov	r24, r20
	uint8_t val = decode_led_char(c);
     928:	3e df       	rcall	.-388    	; 0x7a6 <decode_led_char>
     92a:	d8 2f       	mov	r29, r24
	// Ensure index is inside the buffer
	uint8_t position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
     92c:	80 91 ec 00 	lds	r24, 0x00EC
     930:	81 0f       	add	r24, r17
     932:	6f df       	rcall	.-290    	; 0x812 <wrap_led_buffer_index>
// Increments index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t inc_buffer_position(uint8_t position)
{
	return (position >= LED_BUFFER_LENGTH - 1) ? 0 : position + 1;
     934:	90 e0       	ldi	r25, 0x00	; 0
void fillLedBuffer(int8_t offset, uint8_t length, char c)
{
	uint8_t val = decode_led_char(c);
	// Ensure index is inside the buffer
	uint8_t position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
	while(length--)
     936:	0a c0       	rjmp	.+20     	; 0x94c <fillLedBuffer+0x30>
	{
		led_data_buffer[position] = val;
     938:	e8 2f       	mov	r30, r24
     93a:	f0 e0       	ldi	r31, 0x00	; 0
     93c:	e3 51       	subi	r30, 0x13	; 19
     93e:	ff 4f       	sbci	r31, 0xFF	; 255
     940:	d0 83       	st	Z, r29
// Increments index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t inc_buffer_position(uint8_t position)
{
	return (position >= LED_BUFFER_LENGTH - 1) ? 0 : position + 1;
     942:	8d 30       	cpi	r24, 0x0D	; 13
     944:	10 f4       	brcc	.+4      	; 0x94a <fillLedBuffer+0x2e>
     946:	8f 5f       	subi	r24, 0xFF	; 255
     948:	01 c0       	rjmp	.+2      	; 0x94c <fillLedBuffer+0x30>
     94a:	89 2f       	mov	r24, r25
void fillLedBuffer(int8_t offset, uint8_t length, char c)
{
	uint8_t val = decode_led_char(c);
	// Ensure index is inside the buffer
	uint8_t position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
	while(length--)
     94c:	c1 50       	subi	r28, 0x01	; 1
     94e:	a0 f7       	brcc	.-24     	; 0x938 <fillLedBuffer+0x1c>
	{
		led_data_buffer[position] = val;
		position = inc_buffer_position(position);
	}
}
     950:	df 91       	pop	r29
     952:	cf 91       	pop	r28
     954:	1f 91       	pop	r17
     956:	08 95       	ret

00000958 <startShiftingWindowLeft>:
//	LED window left 
//---------------------------------------------//
void startShiftingWindowLeft(void)
{
	// Clear spaces between menu states
	fillLedBuffer(-2,2,' ');
     958:	40 e2       	ldi	r20, 0x20	; 32
     95a:	62 e0       	ldi	r22, 0x02	; 2
     95c:	8e ef       	ldi	r24, 0xFE	; 254
     95e:	de df       	rcall	.-68     	; 0x91c <fillLedBuffer>
	// Set new buffer position for writing
	bufStartPos = wrap_led_buffer_index( (int8_t)bufStartPos - (NUM_DIGITS + 2) );
     960:	80 91 ec 00 	lds	r24, 0x00EC
     964:	88 50       	subi	r24, 0x08	; 8
     966:	55 df       	rcall	.-342    	; 0x812 <wrap_led_buffer_index>
     968:	80 93 ec 00 	sts	0x00EC, r24
	// Set shifter state
	shifterState = LED_SHIFT_LEFT;
     96c:	81 e0       	ldi	r24, 0x01	; 1
     96e:	80 93 eb 00 	sts	0x00EB, r24
     972:	08 95       	ret

00000974 <startShiftingWindowRight>:
//	LED window right 
//---------------------------------------------//
void startShiftingWindowRight(void)
{
	// Clear spaces between menu states
	fillLedBuffer(NUM_DIGITS,2,' ');
     974:	40 e2       	ldi	r20, 0x20	; 32
     976:	62 e0       	ldi	r22, 0x02	; 2
     978:	86 e0       	ldi	r24, 0x06	; 6
     97a:	d0 df       	rcall	.-96     	; 0x91c <fillLedBuffer>
	// Set new buffer position for writing
	bufStartPos = wrap_led_buffer_index( (int8_t)bufStartPos + NUM_DIGITS + 2 );
     97c:	80 91 ec 00 	lds	r24, 0x00EC
     980:	88 5f       	subi	r24, 0xF8	; 248
     982:	47 df       	rcall	.-370    	; 0x812 <wrap_led_buffer_index>
     984:	80 93 ec 00 	sts	0x00EC, r24
	// Set shifter state
	shifterState = LED_SHIFT_RIGHT;
     988:	82 e0       	ldi	r24, 0x02	; 2
     98a:	80 93 eb 00 	sts	0x00EB, r24
     98e:	08 95       	ret

00000990 <initLedIndicator>:
//---------------------------------------------//
//	Initialization
//	Call this function at start of your program
//---------------------------------------------//
void initLedIndicator()
{
     990:	cf 93       	push	r28
	uint8_t i;
	// First disable outputs
	disable_led_segments();
     992:	ac d0       	rcall	.+344    	; 0xaec <disable_led_segments>
     994:	c7 e0       	ldi	r28, 0x07	; 7
	// Fill shift register with non-active levels
	for (i=0;i<NUM_DIGITS_TOTAL;i++)
	{
		led_clock_pulse(!LED_DIGIT_ACT_LVL);
     996:	81 e0       	ldi	r24, 0x01	; 1
     998:	7d d0       	rcall	.+250    	; 0xa94 <led_clock_pulse>
     99a:	c1 50       	subi	r28, 0x01	; 1
{
	uint8_t i;
	// First disable outputs
	disable_led_segments();
	// Fill shift register with non-active levels
	for (i=0;i<NUM_DIGITS_TOTAL;i++)
     99c:	e1 f7       	brne	.-8      	; 0x996 <initLedIndicator+0x6>
	{
		led_clock_pulse(!LED_DIGIT_ACT_LVL);
	}
	// Now enable outputs
	enable_led_segments();
     99e:	9f d0       	rcall	.+318    	; 0xade <enable_led_segments>
	
	// Reset pointers
	wStartPos = 0;
     9a0:	10 92 ea 00 	sts	0x00EA, r1
	bufStartPos = 0;
     9a4:	10 92 ec 00 	sts	0x00EC, r1
	bufActivePos = 0;
     9a8:	10 92 c6 00 	sts	0x00C6, r1
	wActivePos = 0;
     9ac:	10 92 c7 00 	sts	0x00C7, r1
	#ifdef 	USE_EXTRA_LED_DIGIT
	extra_led_state = 0;
     9b0:	10 92 e9 00 	sts	0x00E9, r1
	#endif
	
	// Clear the buffer 
	fillLedBuffer(0,LED_BUFFER_LENGTH,' ');
     9b4:	40 e2       	ldi	r20, 0x20	; 32
     9b6:	6e e0       	ldi	r22, 0x0E	; 14
     9b8:	80 e0       	ldi	r24, 0x00	; 0
     9ba:	b0 df       	rcall	.-160    	; 0x91c <fillLedBuffer>
	
	// Initialize shift timer - always enabled, but 
	//	processed only when shifting is active
	shifterState = LED_SHIFT_DONE;
     9bc:	10 92 eb 00 	sts	0x00EB, r1
	shiftTimer.Enabled = 1;
     9c0:	e8 ec       	ldi	r30, 0xC8	; 200
     9c2:	f0 e0       	ldi	r31, 0x00	; 0
     9c4:	80 81       	ld	r24, Z
	shiftTimer.RunOnce = 0;
     9c6:	81 60       	ori	r24, 0x01	; 1
     9c8:	8d 7f       	andi	r24, 0xFD	; 253
     9ca:	80 83       	st	Z, r24
	shiftTimer.Top = LED_SHIFT_INTERVAL-1;
     9cc:	89 e0       	ldi	r24, 0x09	; 9
     9ce:	80 93 ca 00 	sts	0x00CA, r24
}
     9d2:	cf 91       	pop	r28
     9d4:	08 95       	ret

000009d6 <printLedBuffer>:
//		str - null-terminated char string
// Comma and dot (".", ",") get special processing - first occurrence is added to
// a preceding char, next are displayed as a single digit
//---------------------------------------------//
void printLedBuffer(int8_t offset, char* str)
{
     9d6:	df 92       	push	r13
     9d8:	ef 92       	push	r14
     9da:	ff 92       	push	r15
     9dc:	0f 93       	push	r16
     9de:	1f 93       	push	r17
     9e0:	cf 93       	push	r28
     9e2:	df 93       	push	r29
     9e4:	eb 01       	movw	r28, r22
	char c;
	uint8_t decoded_sym;
	uint8_t state = 0x02;
	uint8_t comma_pos;
	// Ensure index is inside the buffer
	uint8_t buffer_position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
     9e6:	90 91 ec 00 	lds	r25, 0x00EC
     9ea:	89 0f       	add	r24, r25
     9ec:	12 df       	rcall	.-476    	; 0x812 <wrap_led_buffer_index>
     9ee:	18 2f       	mov	r17, r24
	comma_pos = buffer_position;
     9f0:	d8 2e       	mov	r13, r24
//---------------------------------------------//
void printLedBuffer(int8_t offset, char* str)
{
	char c;
	uint8_t decoded_sym;
	uint8_t state = 0x02;
     9f2:	02 e0       	ldi	r16, 0x02	; 2
		comma_pos = buffer_position;
		if (state != 0x01)
		{
			buffer_position = inc_buffer_position(buffer_position);
		}
		state = (state & 0x01) ? 0x03 : 0x00;		
     9f4:	f1 2c       	mov	r15, r1
     9f6:	0f 2e       	mov	r0, r31
     9f8:	f3 e0       	ldi	r31, 0x03	; 3
     9fa:	ef 2e       	mov	r14, r31
     9fc:	f0 2d       	mov	r31, r0
	uint8_t comma_pos;
	// Ensure index is inside the buffer
	uint8_t buffer_position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
	comma_pos = buffer_position;
	// Output chars
	while((c = *str++))
     9fe:	26 c0       	rjmp	.+76     	; 0xa4c <printLedBuffer+0x76>
	{
		decoded_sym = decode_led_char(c);
     a00:	d2 de       	rcall	.-604    	; 0x7a6 <decode_led_char>
		state = (decoded_sym == SEGH) ? (state | 0x01) : (state & ~0x01);
     a02:	80 38       	cpi	r24, 0x80	; 128
     a04:	19 f4       	brne	.+6      	; 0xa0c <printLedBuffer+0x36>
     a06:	90 2f       	mov	r25, r16
     a08:	91 60       	ori	r25, 0x01	; 1
     a0a:	02 c0       	rjmp	.+4      	; 0xa10 <printLedBuffer+0x3a>
     a0c:	90 2f       	mov	r25, r16
     a0e:	9e 7f       	andi	r25, 0xFE	; 254
		if (state == 0x01)			
     a10:	91 30       	cpi	r25, 0x01	; 1
     a12:	51 f4       	brne	.+20     	; 0xa28 <printLedBuffer+0x52>
		{
			led_data_buffer[comma_pos] |= decoded_sym;
     a14:	ed 2d       	mov	r30, r13
     a16:	f0 e0       	ldi	r31, 0x00	; 0
     a18:	e3 51       	subi	r30, 0x13	; 19
     a1a:	ff 4f       	sbci	r31, 0xFF	; 255
     a1c:	90 81       	ld	r25, Z
     a1e:	89 2b       	or	r24, r25
     a20:	80 83       	st	Z, r24
     a22:	81 2f       	mov	r24, r17
		comma_pos = buffer_position;
		if (state != 0x01)
		{
			buffer_position = inc_buffer_position(buffer_position);
		}
		state = (state & 0x01) ? 0x03 : 0x00;		
     a24:	0e 2d       	mov	r16, r14
     a26:	10 c0       	rjmp	.+32     	; 0xa48 <printLedBuffer+0x72>
		{
			led_data_buffer[comma_pos] |= decoded_sym;
		}
		else
		{
			led_data_buffer[buffer_position] = decoded_sym;	
     a28:	e1 2f       	mov	r30, r17
     a2a:	f0 e0       	ldi	r31, 0x00	; 0
     a2c:	e3 51       	subi	r30, 0x13	; 19
     a2e:	ff 4f       	sbci	r31, 0xFF	; 255
     a30:	80 83       	st	Z, r24
// Increments index. If index falls out of buffer range,
// index is wrapped
//---------------------------------------------//
static inline uint8_t inc_buffer_position(uint8_t position)
{
	return (position >= LED_BUFFER_LENGTH - 1) ? 0 : position + 1;
     a32:	1d 30       	cpi	r17, 0x0D	; 13
     a34:	18 f4       	brcc	.+6      	; 0xa3c <printLedBuffer+0x66>
     a36:	81 2f       	mov	r24, r17
     a38:	8f 5f       	subi	r24, 0xFF	; 255
     a3a:	01 c0       	rjmp	.+2      	; 0xa3e <printLedBuffer+0x68>
     a3c:	8f 2d       	mov	r24, r15
		comma_pos = buffer_position;
		if (state != 0x01)
		{
			buffer_position = inc_buffer_position(buffer_position);
		}
		state = (state & 0x01) ? 0x03 : 0x00;		
     a3e:	90 ff       	sbrs	r25, 0
     a40:	02 c0       	rjmp	.+4      	; 0xa46 <printLedBuffer+0x70>
     a42:	0e 2d       	mov	r16, r14
     a44:	01 c0       	rjmp	.+2      	; 0xa48 <printLedBuffer+0x72>
     a46:	0f 2d       	mov	r16, r15
     a48:	d1 2e       	mov	r13, r17
     a4a:	18 2f       	mov	r17, r24
	uint8_t comma_pos;
	// Ensure index is inside the buffer
	uint8_t buffer_position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
	comma_pos = buffer_position;
	// Output chars
	while((c = *str++))
     a4c:	89 91       	ld	r24, Y+
     a4e:	81 11       	cpse	r24, r1
     a50:	d7 cf       	rjmp	.-82     	; 0xa00 <printLedBuffer+0x2a>
		{
			buffer_position = inc_buffer_position(buffer_position);
		}
		state = (state & 0x01) ? 0x03 : 0x00;		
	}
}
     a52:	df 91       	pop	r29
     a54:	cf 91       	pop	r28
     a56:	1f 91       	pop	r17
     a58:	0f 91       	pop	r16
     a5a:	ff 90       	pop	r15
     a5c:	ef 90       	pop	r14
     a5e:	df 90       	pop	r13
     a60:	08 95       	ret

00000a62 <setComma>:
//	buffer cell
//---------------------------------------------//
void setComma(int8_t offset)
{
	// Ensure index is inside the buffer
	uint8_t position = wrap_led_buffer_index((int8_t)bufStartPos + offset);
     a62:	90 91 ec 00 	lds	r25, 0x00EC
     a66:	89 0f       	add	r24, r25
     a68:	d4 de       	rcall	.-600    	; 0x812 <wrap_led_buffer_index>
	led_data_buffer[position] |= (SEGH);
     a6a:	e8 2f       	mov	r30, r24
     a6c:	f0 e0       	ldi	r31, 0x00	; 0
     a6e:	e3 51       	subi	r30, 0x13	; 19
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	80 81       	ld	r24, Z
     a74:	80 68       	ori	r24, 0x80	; 128
     a76:	80 83       	st	Z, r24
     a78:	08 95       	ret

00000a7a <setExtraLeds>:
// Argument is ORed with current LED state
//---------------------------------------------//
inline void setExtraLeds(uint8_t leds_set_value)
{
		//asm("cli");
		extra_led_state |= leds_set_value;
     a7a:	90 91 e9 00 	lds	r25, 0x00E9
     a7e:	89 2b       	or	r24, r25
     a80:	80 93 e9 00 	sts	0x00E9, r24
     a84:	08 95       	ret

00000a86 <clearExtraLeds>:
// Argument is AND NOTed with current LED state
//---------------------------------------------//
inline void clearExtraLeds(uint8_t leds_clear_value)
{
		//asm("cli");
		extra_led_state &= ~leds_clear_value;
     a86:	90 91 e9 00 	lds	r25, 0x00E9
     a8a:	80 95       	com	r24
     a8c:	98 23       	and	r25, r24
     a8e:	90 93 e9 00 	sts	0x00E9, r25
     a92:	08 95       	ret

00000a94 <led_clock_pulse>:


// Clocks in bit into the shift register
void led_clock_pulse(uint8_t bit)
{
	if (bit)
     a94:	88 23       	and	r24, r24
     a96:	11 f0       	breq	.+4      	; 0xa9c <led_clock_pulse+0x8>
		PORTB |= (1<<PB_LED_DOUT);
     a98:	c0 9a       	sbi	0x18, 0	; 24
     a9a:	01 c0       	rjmp	.+2      	; 0xa9e <led_clock_pulse+0xa>
	else
		PORTB &= ~(1<<PB_LED_DOUT);
     a9c:	c0 98       	cbi	0x18, 0	; 24
     a9e:	8a e1       	ldi	r24, 0x1A	; 26
     aa0:	8a 95       	dec	r24
     aa2:	f1 f7       	brne	.-4      	; 0xaa0 <led_clock_pulse+0xc>
     aa4:	00 c0       	rjmp	.+0      	; 0xaa6 <led_clock_pulse+0x12>
	_delay_us(SETUP_DELAY_US);
	PORTB |= (1<<PB_LED_CLK);
     aa6:	c2 9a       	sbi	0x18, 2	; 24
     aa8:	8a e1       	ldi	r24, 0x1A	; 26
     aaa:	8a 95       	dec	r24
     aac:	f1 f7       	brne	.-4      	; 0xaaa <led_clock_pulse+0x16>
     aae:	00 c0       	rjmp	.+0      	; 0xab0 <led_clock_pulse+0x1c>
	_delay_us(SHIFT_DELAY_US);
	PORTB &= ~(1<<PB_LED_CLK);
     ab0:	c2 98       	cbi	0x18, 2	; 24
     ab2:	08 95       	ret

00000ab4 <set_led_segments>:
// Outputs decoded segment data to port bits
void set_led_segments(uint8_t seg_ch)
{
	uint8_t pdat;
	seg_ch ^= LED_SEGMENT_MASK;
	pdat = PORTC & ~( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
     ab4:	95 b3       	in	r25, 0x15	; 21
	pdat |= (seg_ch & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
     ab6:	28 2f       	mov	r18, r24
     ab8:	2f 71       	andi	r18, 0x1F	; 31
// Outputs decoded segment data to port bits
void set_led_segments(uint8_t seg_ch)
{
	uint8_t pdat;
	seg_ch ^= LED_SEGMENT_MASK;
	pdat = PORTC & ~( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
     aba:	90 7e       	andi	r25, 0xE0	; 224
	pdat |= (seg_ch & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
     abc:	92 2b       	or	r25, r18
	PORTC = pdat;
     abe:	95 bb       	out	0x15, r25	; 21
	seg_ch >>= 2;
	pdat = PORTB & ~( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     ac0:	98 b3       	in	r25, 0x18	; 24
	uint8_t pdat;
	seg_ch ^= LED_SEGMENT_MASK;
	pdat = PORTC & ~( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
	pdat |= (seg_ch & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
	PORTC = pdat;
	seg_ch >>= 2;
     ac2:	86 95       	lsr	r24
     ac4:	86 95       	lsr	r24
	pdat = PORTB & ~( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
	pdat |= (seg_ch & ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) ));
     ac6:	88 73       	andi	r24, 0x38	; 56
	seg_ch ^= LED_SEGMENT_MASK;
	pdat = PORTC & ~( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
	pdat |= (seg_ch & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
	PORTC = pdat;
	seg_ch >>= 2;
	pdat = PORTB & ~( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     ac8:	97 7c       	andi	r25, 0xC7	; 199
	pdat |= (seg_ch & ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) ));
     aca:	89 2b       	or	r24, r25
	PORTB = pdat;
     acc:	88 bb       	out	0x18, r24	; 24
     ace:	08 95       	ret

00000ad0 <enable_led_segments_pullups>:

// Turns segment port bits to HI-Z and
// enables pull-ups
void enable_led_segments_pullups()
{
	PORTC |= ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
     ad0:	85 b3       	in	r24, 0x15	; 21
     ad2:	8f 61       	ori	r24, 0x1F	; 31
     ad4:	85 bb       	out	0x15, r24	; 21
	PORTB |= ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     ad6:	88 b3       	in	r24, 0x18	; 24
     ad8:	88 63       	ori	r24, 0x38	; 56
     ada:	88 bb       	out	0x18, r24	; 24
     adc:	08 95       	ret

00000ade <enable_led_segments>:
}	

void enable_led_segments()
{
	DDRC |= ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
     ade:	84 b3       	in	r24, 0x14	; 20
     ae0:	8f 61       	ori	r24, 0x1F	; 31
     ae2:	84 bb       	out	0x14, r24	; 20
	DDRB |= ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     ae4:	87 b3       	in	r24, 0x17	; 23
     ae6:	88 63       	ori	r24, 0x38	; 56
     ae8:	87 bb       	out	0x17, r24	; 23
     aea:	08 95       	ret

00000aec <disable_led_segments>:
}

void disable_led_segments()
{
	DDRC &= ~( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) );
     aec:	84 b3       	in	r24, 0x14	; 20
     aee:	80 7e       	andi	r24, 0xE0	; 224
     af0:	84 bb       	out	0x14, r24	; 20
	DDRB &= ~( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     af2:	87 b3       	in	r24, 0x17	; 23
     af4:	87 7c       	andi	r24, 0xC7	; 199
     af6:	87 bb       	out	0x17, r24	; 23
     af8:	08 95       	ret

00000afa <capture_button_state>:


void capture_button_state()
{
	uint8_t pdat;
	pdat = PINB  & ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
     afa:	86 b3       	in	r24, 0x16	; 22
     afc:	88 73       	andi	r24, 0x38	; 56
	pdat <<= 2;
	pdat |= (PINC & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
     afe:	93 b3       	in	r25, 0x13	; 19

void capture_button_state()
{
	uint8_t pdat;
	pdat = PINB  & ( (1<<PB_SEGF) | (1<<PB_SEGG) | (1<<PB_SEGH) );
	pdat <<= 2;
     b00:	88 0f       	add	r24, r24
     b02:	88 0f       	add	r24, r24
	pdat |= (PINC & ( (1<<PC_SEGA) | (1<<PC_SEGB) | (1<<PC_SEGC) | (1<<PC_SEGD) | (1<<PC_SEGE) ));
     b04:	9f 71       	andi	r25, 0x1F	; 31
     b06:	89 2b       	or	r24, r25
	raw_button_state = pdat ^ RAW_BUTTONS_INVERSE_MASK;
     b08:	80 95       	com	r24
     b0a:	80 93 fb 00 	sts	0x00FB, r24
     b0e:	08 95       	ret

00000b10 <restartMenuTimer>:
//	 Restarts menu state timeout
//	Should be used in RUN function when control buttons are pressed.
//-----------------------------------------------------------------//
static void restartMenuTimer(void)
{
	menuTimer.Timer = 0;
     b10:	10 92 fe 00 	sts	0x00FE, r1
     b14:	08 95       	ret

00000b16 <mf_setTempLeave>:
		clearExtraLeds(LED_TEMP);
}

void mf_setTempLeave(void)
{
	userTimer.Enabled = 0;
     b16:	e3 e0       	ldi	r30, 0x03	; 3
     b18:	f1 e0       	ldi	r31, 0x01	; 1
     b1a:	80 81       	ld	r24, Z
     b1c:	8e 7f       	andi	r24, 0xFE	; 254
     b1e:	80 83       	st	Z, r24
     b20:	08 95       	ret

00000b22 <mf_leafSelectAct>:
	userTimer.FA_GE = 1;	
}

void mf_leafSelectAct(void)
{
	userTimer.Timer = 0;
     b22:	10 92 04 01 	sts	0x0104, r1
	userTimer.Top = BLINK_PERIOD - 1;
     b26:	87 e0       	ldi	r24, 0x07	; 7
     b28:	80 93 05 01 	sts	0x0105, r24
	userTimer.CompA = BLINK_PERIOD / 2;
     b2c:	84 e0       	ldi	r24, 0x04	; 4
     b2e:	80 93 06 01 	sts	0x0106, r24
	userTimer.Enabled = 1;
     b32:	e3 e0       	ldi	r30, 0x03	; 3
     b34:	f1 e0       	ldi	r31, 0x01	; 1
     b36:	80 81       	ld	r24, Z
     b38:	81 60       	ori	r24, 0x01	; 1
     b3a:	80 83       	st	Z, r24
     b3c:	08 95       	ret

00000b3e <mf_leafExit>:
}

void mf_leafExit(void)
{
	userTimer.Enabled = 0;	
     b3e:	e3 e0       	ldi	r30, 0x03	; 3
     b40:	f1 e0       	ldi	r31, 0x01	; 1
     b42:	80 81       	ld	r24, Z
     b44:	8e 7f       	andi	r24, 0xFE	; 254
     b46:	80 83       	st	Z, r24
     b48:	08 95       	ret

00000b4a <mf_cdoneDo>:
	calculateCoeffs();
}

void mf_cdoneDo(void)
{
	printLedBuffer(0," DONE ");
     b4a:	61 e9       	ldi	r22, 0x91	; 145
     b4c:	70 e0       	ldi	r23, 0x00	; 0
     b4e:	80 e0       	ldi	r24, 0x00	; 0
     b50:	42 df       	rcall	.-380    	; 0x9d6 <printLedBuffer>
     b52:	08 95       	ret

00000b54 <mf_cdone2Select>:
}

void mf_cdone2Select(void)
{
	// Save current ADC as calibrating point
	cpoint2_adc = adc_filtered_value;
     b54:	80 91 da 00 	lds	r24, 0x00DA
     b58:	90 91 db 00 	lds	r25, 0x00DB
     b5c:	90 93 e7 00 	sts	0x00E7, r25
     b60:	80 93 e6 00 	sts	0x00E6, r24
	// Save current Celsius degree
	cpoint2 = cpoint2_copy;
     b64:	80 91 02 01 	lds	r24, 0x0102
     b68:	80 93 e8 00 	sts	0x00E8, r24
	// Calculate new coefficient for temperature conversion
	calculateCoeffs();
     b6c:	c1 db       	rcall	.-2174   	; 0x2f0 <calculateCoeffs>
     b6e:	08 95       	ret

00000b70 <mf_cdone1Select>:
//---------------------------------------------//

void mf_cdone1Select(void)
{
	// Save current ADC as calibrating point
	cpoint1_adc = adc_filtered_value;
     b70:	80 91 da 00 	lds	r24, 0x00DA
     b74:	90 91 db 00 	lds	r25, 0x00DB
     b78:	90 93 e4 00 	sts	0x00E4, r25
     b7c:	80 93 e3 00 	sts	0x00E3, r24
	// Save current Celsius degree
	cpoint1 = cpoint1_copy;
     b80:	80 91 01 01 	lds	r24, 0x0101
     b84:	80 93 de 00 	sts	0x00DE, r24
	// Calculate new coefficient for temperature conversion
	calculateCoeffs();
     b88:	b3 db       	rcall	.-2202   	; 0x2f0 <calculateCoeffs>
     b8a:	08 95       	ret

00000b8c <mf_calib2Do>:
}

//---------------------------------------------//

void mf_calib2Do(void)
{
     b8c:	cf 93       	push	r28
     b8e:	df 93       	push	r29
     b90:	cd b7       	in	r28, 0x3d	; 61
     b92:	de b7       	in	r29, 0x3e	; 62
     b94:	27 97       	sbiw	r28, 0x07	; 7
     b96:	0f b6       	in	r0, 0x3f	; 63
     b98:	f8 94       	cli
     b9a:	de bf       	out	0x3e, r29	; 62
     b9c:	0f be       	out	0x3f, r0	; 63
     b9e:	cd bf       	out	0x3d, r28	; 61
	char str[] = {'P','2',' ',' ',' ',' ',0};
     ba0:	87 e0       	ldi	r24, 0x07	; 7
     ba2:	e7 e6       	ldi	r30, 0x67	; 103
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	de 01       	movw	r26, r28
     ba8:	11 96       	adiw	r26, 0x01	; 1
     baa:	01 90       	ld	r0, Z+
     bac:	0d 92       	st	X+, r0
     bae:	8a 95       	dec	r24
     bb0:	e1 f7       	brne	.-8      	; 0xbaa <mf_calib2Do+0x1e>
	
	
	if (button_state & (BD_UP | BR_UP))
     bb2:	80 91 be 00 	lds	r24, 0x00BE
     bb6:	90 91 bf 00 	lds	r25, 0x00BF
     bba:	9c 01       	movw	r18, r24
     bbc:	22 70       	andi	r18, 0x02	; 2
     bbe:	34 70       	andi	r19, 0x04	; 4
     bc0:	23 2b       	or	r18, r19
     bc2:	41 f0       	breq	.+16     	; 0xbd4 <mf_calib2Do+0x48>
	{
		if (cpoint2_copy < MAX_CALIB_TEMP)
     bc4:	80 91 02 01 	lds	r24, 0x0102
     bc8:	8a 3f       	cpi	r24, 0xFA	; 250
     bca:	78 f4       	brcc	.+30     	; 0xbea <mf_calib2Do+0x5e>
		cpoint2_copy += 1;
     bcc:	8f 5f       	subi	r24, 0xFF	; 255
     bce:	80 93 02 01 	sts	0x0102, r24
     bd2:	0b c0       	rjmp	.+22     	; 0xbea <mf_calib2Do+0x5e>
	}
	else if (button_state & (BD_DOWN | BR_DOWN))
     bd4:	84 70       	andi	r24, 0x04	; 4
     bd6:	98 70       	andi	r25, 0x08	; 8
     bd8:	89 2b       	or	r24, r25
     bda:	39 f0       	breq	.+14     	; 0xbea <mf_calib2Do+0x5e>
	{
		if (cpoint2_copy > MIN_CALIB_TEMP)
     bdc:	80 91 02 01 	lds	r24, 0x0102
     be0:	8b 30       	cpi	r24, 0x0B	; 11
     be2:	18 f0       	brcs	.+6      	; 0xbea <mf_calib2Do+0x5e>
		cpoint2_copy -= 1;
     be4:	81 50       	subi	r24, 0x01	; 1
     be6:	80 93 02 01 	sts	0x0102, r24
	}
	
	if (userTimer.FA_GE)
     bea:	80 91 03 01 	lds	r24, 0x0103
     bee:	84 ff       	sbrs	r24, 4
     bf0:	09 c0       	rjmp	.+18     	; 0xc04 <mf_calib2Do+0x78>
	{
		u16toa_align_right(cpoint2_copy,str + 3,0x80 | 3,' ');
     bf2:	20 e2       	ldi	r18, 0x20	; 32
     bf4:	43 e8       	ldi	r20, 0x83	; 131
     bf6:	be 01       	movw	r22, r28
     bf8:	6c 5f       	subi	r22, 0xFC	; 252
     bfa:	7f 4f       	sbci	r23, 0xFF	; 255
     bfc:	80 91 02 01 	lds	r24, 0x0102
     c00:	90 e0       	ldi	r25, 0x00	; 0
     c02:	24 d3       	rcall	.+1608   	; 0x124c <u16toa_align_right>
	}
	
	printLedBuffer(0,str);
     c04:	be 01       	movw	r22, r28
     c06:	6f 5f       	subi	r22, 0xFF	; 255
     c08:	7f 4f       	sbci	r23, 0xFF	; 255
     c0a:	80 e0       	ldi	r24, 0x00	; 0
     c0c:	e4 de       	rcall	.-568    	; 0x9d6 <printLedBuffer>
	
}
     c0e:	27 96       	adiw	r28, 0x07	; 7
     c10:	0f b6       	in	r0, 0x3f	; 63
     c12:	f8 94       	cli
     c14:	de bf       	out	0x3e, r29	; 62
     c16:	0f be       	out	0x3f, r0	; 63
     c18:	cd bf       	out	0x3d, r28	; 61
     c1a:	df 91       	pop	r29
     c1c:	cf 91       	pop	r28
     c1e:	08 95       	ret

00000c20 <mf_calib1Do>:
	cpoint1_copy = cpoint1;
	cpoint2_copy = cpoint2;
}

void mf_calib1Do(void)
{
     c20:	cf 93       	push	r28
     c22:	df 93       	push	r29
     c24:	cd b7       	in	r28, 0x3d	; 61
     c26:	de b7       	in	r29, 0x3e	; 62
     c28:	27 97       	sbiw	r28, 0x07	; 7
     c2a:	0f b6       	in	r0, 0x3f	; 63
     c2c:	f8 94       	cli
     c2e:	de bf       	out	0x3e, r29	; 62
     c30:	0f be       	out	0x3f, r0	; 63
     c32:	cd bf       	out	0x3d, r28	; 61
	char str[] = {'P','1',' ',' ',' ',' ',0};
     c34:	87 e0       	ldi	r24, 0x07	; 7
     c36:	ee e6       	ldi	r30, 0x6E	; 110
     c38:	f0 e0       	ldi	r31, 0x00	; 0
     c3a:	de 01       	movw	r26, r28
     c3c:	11 96       	adiw	r26, 0x01	; 1
     c3e:	01 90       	ld	r0, Z+
     c40:	0d 92       	st	X+, r0
     c42:	8a 95       	dec	r24
     c44:	e1 f7       	brne	.-8      	; 0xc3e <mf_calib1Do+0x1e>
	
	
	if (button_state & (BD_UP | BR_UP))
     c46:	80 91 be 00 	lds	r24, 0x00BE
     c4a:	90 91 bf 00 	lds	r25, 0x00BF
     c4e:	9c 01       	movw	r18, r24
     c50:	22 70       	andi	r18, 0x02	; 2
     c52:	34 70       	andi	r19, 0x04	; 4
     c54:	23 2b       	or	r18, r19
     c56:	41 f0       	breq	.+16     	; 0xc68 <mf_calib1Do+0x48>
	{
		if (cpoint1_copy < MAX_CALIB_TEMP)
     c58:	80 91 01 01 	lds	r24, 0x0101
     c5c:	8a 3f       	cpi	r24, 0xFA	; 250
     c5e:	78 f4       	brcc	.+30     	; 0xc7e <mf_calib1Do+0x5e>
			cpoint1_copy += 1;
     c60:	8f 5f       	subi	r24, 0xFF	; 255
     c62:	80 93 01 01 	sts	0x0101, r24
     c66:	0b c0       	rjmp	.+22     	; 0xc7e <mf_calib1Do+0x5e>
	}
	else if (button_state & (BD_DOWN | BR_DOWN))
     c68:	84 70       	andi	r24, 0x04	; 4
     c6a:	98 70       	andi	r25, 0x08	; 8
     c6c:	89 2b       	or	r24, r25
     c6e:	39 f0       	breq	.+14     	; 0xc7e <mf_calib1Do+0x5e>
	{
		if (cpoint1_copy > MIN_CALIB_TEMP)
     c70:	80 91 01 01 	lds	r24, 0x0101
     c74:	8b 30       	cpi	r24, 0x0B	; 11
     c76:	18 f0       	brcs	.+6      	; 0xc7e <mf_calib1Do+0x5e>
			cpoint1_copy -= 1;
     c78:	81 50       	subi	r24, 0x01	; 1
     c7a:	80 93 01 01 	sts	0x0101, r24
	}
	
	if (userTimer.FA_GE)
     c7e:	80 91 03 01 	lds	r24, 0x0103
     c82:	84 ff       	sbrs	r24, 4
     c84:	09 c0       	rjmp	.+18     	; 0xc98 <mf_calib1Do+0x78>
	{
		u16toa_align_right(cpoint1_copy,str + 3,0x80 | 3,' ');
     c86:	20 e2       	ldi	r18, 0x20	; 32
     c88:	43 e8       	ldi	r20, 0x83	; 131
     c8a:	be 01       	movw	r22, r28
     c8c:	6c 5f       	subi	r22, 0xFC	; 252
     c8e:	7f 4f       	sbci	r23, 0xFF	; 255
     c90:	80 91 01 01 	lds	r24, 0x0101
     c94:	90 e0       	ldi	r25, 0x00	; 0
     c96:	da d2       	rcall	.+1460   	; 0x124c <u16toa_align_right>
	}
	
	printLedBuffer(0,str);
     c98:	be 01       	movw	r22, r28
     c9a:	6f 5f       	subi	r22, 0xFF	; 255
     c9c:	7f 4f       	sbci	r23, 0xFF	; 255
     c9e:	80 e0       	ldi	r24, 0x00	; 0
     ca0:	9a de       	rcall	.-716    	; 0x9d6 <printLedBuffer>
}
     ca2:	27 96       	adiw	r28, 0x07	; 7
     ca4:	0f b6       	in	r0, 0x3f	; 63
     ca6:	f8 94       	cli
     ca8:	de bf       	out	0x3e, r29	; 62
     caa:	0f be       	out	0x3f, r0	; 63
     cac:	cd bf       	out	0x3d, r28	; 61
     cae:	df 91       	pop	r29
     cb0:	cf 91       	pop	r28
     cb2:	08 95       	ret

00000cb4 <mf_autopoffDo>:

//---------------------------------------------//


void mf_autopoffDo(void)
{
     cb4:	cf 93       	push	r28
     cb6:	df 93       	push	r29
     cb8:	cd b7       	in	r28, 0x3d	; 61
     cba:	de b7       	in	r29, 0x3e	; 62
     cbc:	27 97       	sbiw	r28, 0x07	; 7
     cbe:	0f b6       	in	r0, 0x3f	; 63
     cc0:	f8 94       	cli
     cc2:	de bf       	out	0x3e, r29	; 62
     cc4:	0f be       	out	0x3f, r0	; 63
     cc6:	cd bf       	out	0x3d, r28	; 61
	char str[] = {'O','F','F',' ',' ',' ',0};
     cc8:	87 e0       	ldi	r24, 0x07	; 7
     cca:	e5 e7       	ldi	r30, 0x75	; 117
     ccc:	f0 e0       	ldi	r31, 0x00	; 0
     cce:	de 01       	movw	r26, r28
     cd0:	11 96       	adiw	r26, 0x01	; 1
     cd2:	01 90       	ld	r0, Z+
     cd4:	0d 92       	st	X+, r0
     cd6:	8a 95       	dec	r24
     cd8:	e1 f7       	brne	.-8      	; 0xcd2 <mf_autopoffDo+0x1e>
		
		
	if (button_state & (BD_UP | BR_UP))
     cda:	80 91 be 00 	lds	r24, 0x00BE
     cde:	90 91 bf 00 	lds	r25, 0x00BF
     ce2:	9c 01       	movw	r18, r24
     ce4:	22 70       	andi	r18, 0x02	; 2
     ce6:	34 70       	andi	r19, 0x04	; 4
     ce8:	23 2b       	or	r18, r19
     cea:	49 f0       	breq	.+18     	; 0xcfe <mf_autopoffDo+0x4a>
	{
		if (power_off_timeout < MAX_POWEROFF_TIMEOUT)
     cec:	80 91 e5 00 	lds	r24, 0x00E5
     cf0:	8f 35       	cpi	r24, 0x5F	; 95
     cf2:	18 f4       	brcc	.+6      	; 0xcfa <mf_autopoffDo+0x46>
			power_off_timeout += 5;
     cf4:	8b 5f       	subi	r24, 0xFB	; 251
     cf6:	80 93 e5 00 	sts	0x00E5, r24
		restartMenuTimer();
     cfa:	0a df       	rcall	.-492    	; 0xb10 <restartMenuTimer>
     cfc:	0c c0       	rjmp	.+24     	; 0xd16 <mf_autopoffDo+0x62>
	}
	else if (button_state & (BD_DOWN | BR_DOWN))
     cfe:	84 70       	andi	r24, 0x04	; 4
     d00:	98 70       	andi	r25, 0x08	; 8
     d02:	89 2b       	or	r24, r25
     d04:	41 f0       	breq	.+16     	; 0xd16 <mf_autopoffDo+0x62>
	{
		if (power_off_timeout > MIN_POWEROFF_TIMEOUT)
     d06:	80 91 e5 00 	lds	r24, 0x00E5
     d0a:	86 30       	cpi	r24, 0x06	; 6
     d0c:	18 f0       	brcs	.+6      	; 0xd14 <mf_autopoffDo+0x60>
			power_off_timeout -= 5;
     d0e:	85 50       	subi	r24, 0x05	; 5
     d10:	80 93 e5 00 	sts	0x00E5, r24
		restartMenuTimer();
     d14:	fd de       	rcall	.-518    	; 0xb10 <restartMenuTimer>
	}	
		
	if (userTimer.FA_GE)
     d16:	80 91 03 01 	lds	r24, 0x0103
     d1a:	84 ff       	sbrs	r24, 4
     d1c:	10 c0       	rjmp	.+32     	; 0xd3e <mf_autopoffDo+0x8a>
	{
		if (power_off_timeout != MAX_POWEROFF_TIMEOUT)
     d1e:	80 91 e5 00 	lds	r24, 0x00E5
     d22:	8f 35       	cpi	r24, 0x5F	; 95
     d24:	41 f0       	breq	.+16     	; 0xd36 <mf_autopoffDo+0x82>
			u16toa_align_right(power_off_timeout,str + 4,0x80 | 2,' ');	
     d26:	20 e2       	ldi	r18, 0x20	; 32
     d28:	42 e8       	ldi	r20, 0x82	; 130
     d2a:	be 01       	movw	r22, r28
     d2c:	6b 5f       	subi	r22, 0xFB	; 251
     d2e:	7f 4f       	sbci	r23, 0xFF	; 255
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	8c d2       	rcall	.+1304   	; 0x124c <u16toa_align_right>
     d34:	04 c0       	rjmp	.+8      	; 0xd3e <mf_autopoffDo+0x8a>
		else 
		{
			str[4] = 'N';
     d36:	8e e4       	ldi	r24, 0x4E	; 78
     d38:	8d 83       	std	Y+5, r24	; 0x05
			str[5] = 'O';
     d3a:	8f e4       	ldi	r24, 0x4F	; 79
     d3c:	8e 83       	std	Y+6, r24	; 0x06
		}			
	}		
		
	printLedBuffer(0,str);
     d3e:	be 01       	movw	r22, r28
     d40:	6f 5f       	subi	r22, 0xFF	; 255
     d42:	7f 4f       	sbci	r23, 0xFF	; 255
     d44:	80 e0       	ldi	r24, 0x00	; 0
     d46:	47 de       	rcall	.-882    	; 0x9d6 <printLedBuffer>
}
     d48:	27 96       	adiw	r28, 0x07	; 7
     d4a:	0f b6       	in	r0, 0x3f	; 63
     d4c:	f8 94       	cli
     d4e:	de bf       	out	0x3e, r29	; 62
     d50:	0f be       	out	0x3f, r0	; 63
     d52:	cd bf       	out	0x3d, r28	; 61
     d54:	df 91       	pop	r29
     d56:	cf 91       	pop	r28
     d58:	08 95       	ret

00000d5a <mf_realTempDo>:
{
	setExtraLeds(LED_TEMP);
}

void mf_realTempDo(void)
{
     d5a:	cf 93       	push	r28
     d5c:	df 93       	push	r29
     d5e:	cd b7       	in	r28, 0x3d	; 61
     d60:	de b7       	in	r29, 0x3e	; 62
     d62:	27 97       	sbiw	r28, 0x07	; 7
     d64:	0f b6       	in	r0, 0x3f	; 63
     d66:	f8 94       	cli
     d68:	de bf       	out	0x3e, r29	; 62
     d6a:	0f be       	out	0x3f, r0	; 63
     d6c:	cd bf       	out	0x3d, r28	; 61
	char str[] = {' ',' ',' ',' ',0xB0,'C',0};
     d6e:	87 e0       	ldi	r24, 0x07	; 7
     d70:	ec e7       	ldi	r30, 0x7C	; 124
     d72:	f0 e0       	ldi	r31, 0x00	; 0
     d74:	de 01       	movw	r26, r28
     d76:	11 96       	adiw	r26, 0x01	; 1
     d78:	01 90       	ld	r0, Z+
     d7a:	0d 92       	st	X+, r0
     d7c:	8a 95       	dec	r24
     d7e:	e1 f7       	brne	.-8      	; 0xd78 <mf_realTempDo+0x1e>
	// Output ADC result to LED
	u16toa_align_right(adc_filtered_celsius,str,0x80 | 4,' ');
     d80:	20 e2       	ldi	r18, 0x20	; 32
     d82:	44 e8       	ldi	r20, 0x84	; 132
     d84:	be 01       	movw	r22, r28
     d86:	6f 5f       	subi	r22, 0xFF	; 255
     d88:	7f 4f       	sbci	r23, 0xFF	; 255
     d8a:	80 91 dc 00 	lds	r24, 0x00DC
     d8e:	90 91 dd 00 	lds	r25, 0x00DD
     d92:	5c d2       	rcall	.+1208   	; 0x124c <u16toa_align_right>
	printLedBuffer(0,str);
     d94:	be 01       	movw	r22, r28
     d96:	6f 5f       	subi	r22, 0xFF	; 255
     d98:	7f 4f       	sbci	r23, 0xFF	; 255
     d9a:	80 e0       	ldi	r24, 0x00	; 0
     d9c:	1c de       	rcall	.-968    	; 0x9d6 <printLedBuffer>
}
     d9e:	27 96       	adiw	r28, 0x07	; 7
     da0:	0f b6       	in	r0, 0x3f	; 63
     da2:	f8 94       	cli
     da4:	de bf       	out	0x3e, r29	; 62
     da6:	0f be       	out	0x3f, r0	; 63
     da8:	cd bf       	out	0x3d, r28	; 61
     daa:	df 91       	pop	r29
     dac:	cf 91       	pop	r28
     dae:	08 95       	ret

00000db0 <mf_sndenDo>:

//---------------------------------------------//


void mf_sndenDo(void)
{
     db0:	cf 93       	push	r28
     db2:	df 93       	push	r29
     db4:	cd b7       	in	r28, 0x3d	; 61
     db6:	de b7       	in	r29, 0x3e	; 62
     db8:	27 97       	sbiw	r28, 0x07	; 7
     dba:	0f b6       	in	r0, 0x3f	; 63
     dbc:	f8 94       	cli
     dbe:	de bf       	out	0x3e, r29	; 62
     dc0:	0f be       	out	0x3f, r0	; 63
     dc2:	cd bf       	out	0x3d, r28	; 61
	char str[] = {'S','N','D',' ',' ',' ',0};
     dc4:	87 e0       	ldi	r24, 0x07	; 7
     dc6:	e3 e8       	ldi	r30, 0x83	; 131
     dc8:	f0 e0       	ldi	r31, 0x00	; 0
     dca:	de 01       	movw	r26, r28
     dcc:	11 96       	adiw	r26, 0x01	; 1
     dce:	01 90       	ld	r0, Z+
     dd0:	0d 92       	st	X+, r0
     dd2:	8a 95       	dec	r24
     dd4:	e1 f7       	brne	.-8      	; 0xdce <mf_sndenDo+0x1e>
		
	if (button_state & (BD_UP | BD_DOWN))
     dd6:	80 91 be 00 	lds	r24, 0x00BE
     dda:	90 91 bf 00 	lds	r25, 0x00BF
     dde:	86 70       	andi	r24, 0x06	; 6
     de0:	99 27       	eor	r25, r25
     de2:	89 2b       	or	r24, r25
     de4:	41 f0       	breq	.+16     	; 0xdf6 <mf_sndenDo+0x46>
	{
		sound_enable = !sound_enable;
     de6:	81 e0       	ldi	r24, 0x01	; 1
     de8:	90 91 e1 00 	lds	r25, 0x00E1
     dec:	91 11       	cpse	r25, r1
     dee:	80 e0       	ldi	r24, 0x00	; 0
     df0:	80 93 e1 00 	sts	0x00E1, r24
		restartMenuTimer();
     df4:	8d de       	rcall	.-742    	; 0xb10 <restartMenuTimer>
	}			
		
	if (userTimer.FA_GE)
     df6:	80 91 03 01 	lds	r24, 0x0103
     dfa:	84 ff       	sbrs	r24, 4
     dfc:	0e c0       	rjmp	.+28     	; 0xe1a <mf_sndenDo+0x6a>
	{
		if (sound_enable)		
     dfe:	80 91 e1 00 	lds	r24, 0x00E1
     e02:	88 23       	and	r24, r24
     e04:	29 f0       	breq	.+10     	; 0xe10 <mf_sndenDo+0x60>
		{
			str[4] = 'O';
     e06:	8f e4       	ldi	r24, 0x4F	; 79
     e08:	8d 83       	std	Y+5, r24	; 0x05
			str[5] = 'N';
     e0a:	8e e4       	ldi	r24, 0x4E	; 78
     e0c:	8e 83       	std	Y+6, r24	; 0x06
     e0e:	05 c0       	rjmp	.+10     	; 0xe1a <mf_sndenDo+0x6a>
		}
		else
		{
			str[3] = 'O';
     e10:	8f e4       	ldi	r24, 0x4F	; 79
     e12:	8c 83       	std	Y+4, r24	; 0x04
			str[4] = 'F';
     e14:	86 e4       	ldi	r24, 0x46	; 70
     e16:	8d 83       	std	Y+5, r24	; 0x05
			str[5] = 'F';
     e18:	8e 83       	std	Y+6, r24	; 0x06
		}			
	}
		
	printLedBuffer(0,str);
     e1a:	be 01       	movw	r22, r28
     e1c:	6f 5f       	subi	r22, 0xFF	; 255
     e1e:	7f 4f       	sbci	r23, 0xFF	; 255
     e20:	80 e0       	ldi	r24, 0x00	; 0
     e22:	d9 dd       	rcall	.-1102   	; 0x9d6 <printLedBuffer>
	setComma(2);
     e24:	82 e0       	ldi	r24, 0x02	; 2
     e26:	1d de       	rcall	.-966    	; 0xa62 <setComma>
}
     e28:	27 96       	adiw	r28, 0x07	; 7
     e2a:	0f b6       	in	r0, 0x3f	; 63
     e2c:	f8 94       	cli
     e2e:	de bf       	out	0x3e, r29	; 62
     e30:	0f be       	out	0x3f, r0	; 63
     e32:	cd bf       	out	0x3d, r28	; 61
     e34:	df 91       	pop	r29
     e36:	cf 91       	pop	r28
     e38:	08 95       	ret

00000e3a <mf_leafSelect>:

// Select and exit functions, common for leaf menu items 

void mf_leafSelect(void)
{
	clearExtraLeds(LED_TEMP | LED_ROLL);
     e3a:	83 e0       	ldi	r24, 0x03	; 3
     e3c:	24 de       	rcall	.-952    	; 0xa86 <clearExtraLeds>
	userTimer.FA_GE = 1;	
     e3e:	e3 e0       	ldi	r30, 0x03	; 3
     e40:	f1 e0       	ldi	r31, 0x01	; 1
     e42:	80 81       	ld	r24, Z
     e44:	80 61       	ori	r24, 0x10	; 16
     e46:	80 83       	st	Z, r24
     e48:	08 95       	ret

00000e4a <mf_calibSelect>:

//---------------------------------------------//

void mf_calibSelect(void)
{
	mf_leafSelect();
     e4a:	f7 df       	rcall	.-18     	; 0xe3a <mf_leafSelect>
	cpoint1_copy = cpoint1;
     e4c:	80 91 de 00 	lds	r24, 0x00DE
     e50:	80 93 01 01 	sts	0x0101, r24
	cpoint2_copy = cpoint2;
     e54:	80 91 e8 00 	lds	r24, 0x00E8
     e58:	80 93 02 01 	sts	0x0102, r24
     e5c:	08 95       	ret

00000e5e <mf_rollLeave>:
	printLedBuffer(0,str);
}

void mf_rollLeave(void)
{
	clearExtraLeds(LED_ROLL);
     e5e:	82 e0       	ldi	r24, 0x02	; 2
     e60:	12 de       	rcall	.-988    	; 0xa86 <clearExtraLeds>
	userTimer.Enabled = 0;
     e62:	e3 e0       	ldi	r30, 0x03	; 3
     e64:	f1 e0       	ldi	r31, 0x01	; 1
     e66:	80 81       	ld	r24, Z
     e68:	8e 7f       	andi	r24, 0xFE	; 254
     e6a:	80 83       	st	Z, r24
     e6c:	08 95       	ret

00000e6e <mf_setTempSelect>:
//---------------------------------------------//


void mf_setTempSelect(void)
{
	clearExtraLeds(LED_TEMP);
     e6e:	81 e0       	ldi	r24, 0x01	; 1
     e70:	0a de       	rcall	.-1004   	; 0xa86 <clearExtraLeds>
	mf_leafSelectAct();		// setup and start timer
     e72:	57 de       	rcall	.-850    	; 0xb22 <mf_leafSelectAct>
     e74:	08 95       	ret

00000e76 <mf_realTempLeave>:
	printLedBuffer(0,str);
}

void mf_realTempLeave(void)
{
	clearExtraLeds(LED_TEMP);
     e76:	81 e0       	ldi	r24, 0x01	; 1
     e78:	06 de       	rcall	.-1012   	; 0xa86 <clearExtraLeds>
     e7a:	08 95       	ret

00000e7c <mf_rollDo>:
	setExtraLeds(LED_ROLL);
	mf_leafSelectAct();		// setup and start timer
}

void mf_rollDo(void)
{
     e7c:	cf 93       	push	r28
     e7e:	df 93       	push	r29
     e80:	cd b7       	in	r28, 0x3d	; 61
     e82:	de b7       	in	r29, 0x3e	; 62
     e84:	27 97       	sbiw	r28, 0x07	; 7
     e86:	0f b6       	in	r0, 0x3f	; 63
     e88:	f8 94       	cli
     e8a:	de bf       	out	0x3e, r29	; 62
     e8c:	0f be       	out	0x3f, r0	; 63
     e8e:	cd bf       	out	0x3d, r28	; 61
	char str[] = {' ',' ',' ',' ',' ',' ',0};
     e90:	87 e0       	ldi	r24, 0x07	; 7
     e92:	ea e8       	ldi	r30, 0x8A	; 138
     e94:	f0 e0       	ldi	r31, 0x00	; 0
     e96:	de 01       	movw	r26, r28
     e98:	11 96       	adiw	r26, 0x01	; 1
     e9a:	01 90       	ld	r0, Z+
     e9c:	0d 92       	st	X+, r0
     e9e:	8a 95       	dec	r24
     ea0:	e1 f7       	brne	.-8      	; 0xe9a <mf_rollDo+0x1e>
		
	if (button_state & (BD_UP | BR_UP))
     ea2:	80 91 be 00 	lds	r24, 0x00BE
     ea6:	90 91 bf 00 	lds	r25, 0x00BF
     eaa:	9c 01       	movw	r18, r24
     eac:	22 70       	andi	r18, 0x02	; 2
     eae:	34 70       	andi	r19, 0x04	; 4
     eb0:	23 2b       	or	r18, r19
     eb2:	41 f0       	breq	.+16     	; 0xec4 <mf_rollDo+0x48>
	{
		if (rollCycleSet < MAX_ROLL_CYCLES)
     eb4:	80 91 e2 00 	lds	r24, 0x00E2
     eb8:	83 36       	cpi	r24, 0x63	; 99
     eba:	78 f4       	brcc	.+30     	; 0xeda <mf_rollDo+0x5e>
		rollCycleSet += 1;
     ebc:	8f 5f       	subi	r24, 0xFF	; 255
     ebe:	80 93 e2 00 	sts	0x00E2, r24
     ec2:	0b c0       	rjmp	.+22     	; 0xeda <mf_rollDo+0x5e>
	}
	else if (button_state & (BD_DOWN | BR_DOWN))
     ec4:	84 70       	andi	r24, 0x04	; 4
     ec6:	98 70       	andi	r25, 0x08	; 8
     ec8:	89 2b       	or	r24, r25
     eca:	39 f0       	breq	.+14     	; 0xeda <mf_rollDo+0x5e>
	{
		if (rollCycleSet > MIN_ROLL_CYCLES)
     ecc:	80 91 e2 00 	lds	r24, 0x00E2
     ed0:	82 30       	cpi	r24, 0x02	; 2
     ed2:	18 f0       	brcs	.+6      	; 0xeda <mf_rollDo+0x5e>
		rollCycleSet -= 1;
     ed4:	81 50       	subi	r24, 0x01	; 1
     ed6:	80 93 e2 00 	sts	0x00E2, r24
	}	
		
	u16toa_align_right(rollCycleSet,str + 4,0x80 | 2,' ');
     eda:	20 e2       	ldi	r18, 0x20	; 32
     edc:	42 e8       	ldi	r20, 0x82	; 130
     ede:	be 01       	movw	r22, r28
     ee0:	6b 5f       	subi	r22, 0xFB	; 251
     ee2:	7f 4f       	sbci	r23, 0xFF	; 255
     ee4:	80 91 e2 00 	lds	r24, 0x00E2
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	b0 d1       	rcall	.+864    	; 0x124c <u16toa_align_right>
	
	if ((!(rollState & ROLL_CYCLE)) || (userTimer.FA_GE))
     eec:	80 91 cc 00 	lds	r24, 0x00CC
     ef0:	82 ff       	sbrs	r24, 2
     ef2:	04 c0       	rjmp	.+8      	; 0xefc <mf_rollDo+0x80>
     ef4:	80 91 03 01 	lds	r24, 0x0103
     ef8:	84 ff       	sbrs	r24, 4
     efa:	09 c0       	rjmp	.+18     	; 0xf0e <mf_rollDo+0x92>
	{
		u16toa_align_right(activeRollCycle,str + 1,0x80 | 2,' ');
     efc:	20 e2       	ldi	r18, 0x20	; 32
     efe:	42 e8       	ldi	r20, 0x82	; 130
     f00:	be 01       	movw	r22, r28
     f02:	6e 5f       	subi	r22, 0xFE	; 254
     f04:	7f 4f       	sbci	r23, 0xFF	; 255
     f06:	80 91 0e 01 	lds	r24, 0x010E
     f0a:	90 e0       	ldi	r25, 0x00	; 0
     f0c:	9f d1       	rcall	.+830    	; 0x124c <u16toa_align_right>
	}
	
	str[0] = 0;
     f0e:	19 82       	std	Y+1, r1	; 0x01
	if (isTopPointValid())
     f10:	e0 d2       	rcall	.+1472   	; 0x14d2 <isTopPointValid>
     f12:	88 23       	and	r24, r24
     f14:	19 f0       	breq	.+6      	; 0xf1c <mf_rollDo+0xa0>
		str[0] |= SEGA;
     f16:	89 81       	ldd	r24, Y+1	; 0x01
     f18:	81 60       	ori	r24, 0x01	; 1
     f1a:	89 83       	std	Y+1, r24	; 0x01
	if (isBottomPointValid())
     f1c:	ea d2       	rcall	.+1492   	; 0x14f2 <isBottomPointValid>
     f1e:	88 23       	and	r24, r24
     f20:	19 f0       	breq	.+6      	; 0xf28 <mf_rollDo+0xac>
		str[0] |= SEGD;
     f22:	89 81       	ldd	r24, Y+1	; 0x01
     f24:	88 60       	ori	r24, 0x08	; 8
     f26:	89 83       	std	Y+1, r24	; 0x01
	if (str[0] == 0)
     f28:	89 81       	ldd	r24, Y+1	; 0x01
     f2a:	81 11       	cpse	r24, r1
     f2c:	02 c0       	rjmp	.+4      	; 0xf32 <mf_rollDo+0xb6>
		str[0] = ' ';
     f2e:	80 e2       	ldi	r24, 0x20	; 32
     f30:	89 83       	std	Y+1, r24	; 0x01
		
	printLedBuffer(0,str);
     f32:	be 01       	movw	r22, r28
     f34:	6f 5f       	subi	r22, 0xFF	; 255
     f36:	7f 4f       	sbci	r23, 0xFF	; 255
     f38:	80 e0       	ldi	r24, 0x00	; 0
     f3a:	4d dd       	rcall	.-1382   	; 0x9d6 <printLedBuffer>
}
     f3c:	27 96       	adiw	r28, 0x07	; 7
     f3e:	0f b6       	in	r0, 0x3f	; 63
     f40:	f8 94       	cli
     f42:	de bf       	out	0x3e, r29	; 62
     f44:	0f be       	out	0x3f, r0	; 63
     f46:	cd bf       	out	0x3d, r28	; 61
     f48:	df 91       	pop	r29
     f4a:	cf 91       	pop	r28
     f4c:	08 95       	ret

00000f4e <mf_rollSelect>:
//---------------------------------------------//
//---------------------------------------------//

void mf_rollSelect(void)
{
	setExtraLeds(LED_ROLL);
     f4e:	82 e0       	ldi	r24, 0x02	; 2
     f50:	94 dd       	rcall	.-1240   	; 0xa7a <setExtraLeds>
	mf_leafSelectAct();		// setup and start timer
     f52:	e7 dd       	rcall	.-1074   	; 0xb22 <mf_leafSelectAct>
     f54:	08 95       	ret

00000f56 <mf_setTempDo>:
	clearExtraLeds(LED_TEMP);
	mf_leafSelectAct();		// setup and start timer
}

void mf_setTempDo(void)
{
     f56:	cf 93       	push	r28
     f58:	df 93       	push	r29
     f5a:	cd b7       	in	r28, 0x3d	; 61
     f5c:	de b7       	in	r29, 0x3e	; 62
     f5e:	27 97       	sbiw	r28, 0x07	; 7
     f60:	0f b6       	in	r0, 0x3f	; 63
     f62:	f8 94       	cli
     f64:	de bf       	out	0x3e, r29	; 62
     f66:	0f be       	out	0x3f, r0	; 63
     f68:	cd bf       	out	0x3d, r28	; 61
	char str[] = {' ',' ',' ',' ',0xB0,'C',0};
     f6a:	87 e0       	ldi	r24, 0x07	; 7
     f6c:	ec e7       	ldi	r30, 0x7C	; 124
     f6e:	f0 e0       	ldi	r31, 0x00	; 0
     f70:	de 01       	movw	r26, r28
     f72:	11 96       	adiw	r26, 0x01	; 1
     f74:	01 90       	ld	r0, Z+
     f76:	0d 92       	st	X+, r0
     f78:	8a 95       	dec	r24
     f7a:	e1 f7       	brne	.-8      	; 0xf74 <mf_setTempDo+0x1e>

	
	if (button_state & (BD_UP | BR_UP))
     f7c:	80 91 be 00 	lds	r24, 0x00BE
     f80:	90 91 bf 00 	lds	r25, 0x00BF
     f84:	9c 01       	movw	r18, r24
     f86:	22 70       	andi	r18, 0x02	; 2
     f88:	34 70       	andi	r19, 0x04	; 4
     f8a:	23 2b       	or	r18, r19
     f8c:	71 f0       	breq	.+28     	; 0xfaa <mf_setTempDo+0x54>
	{
		if (setup_temp_value < MAX_SET_TEMP)
     f8e:	80 91 df 00 	lds	r24, 0x00DF
     f92:	90 91 e0 00 	lds	r25, 0x00E0
     f96:	82 3d       	cpi	r24, 0xD2	; 210
     f98:	91 05       	cpc	r25, r1
     f9a:	28 f4       	brcc	.+10     	; 0xfa6 <mf_setTempDo+0x50>
			setup_temp_value += 5;
     f9c:	05 96       	adiw	r24, 0x05	; 5
     f9e:	90 93 e0 00 	sts	0x00E0, r25
     fa2:	80 93 df 00 	sts	0x00DF, r24
		restartMenuTimer();
     fa6:	b4 dd       	rcall	.-1176   	; 0xb10 <restartMenuTimer>
     fa8:	11 c0       	rjmp	.+34     	; 0xfcc <mf_setTempDo+0x76>
	}
	else if (button_state & (BD_DOWN | BR_DOWN))
     faa:	84 70       	andi	r24, 0x04	; 4
     fac:	98 70       	andi	r25, 0x08	; 8
     fae:	89 2b       	or	r24, r25
     fb0:	69 f0       	breq	.+26     	; 0xfcc <mf_setTempDo+0x76>
	{
		if (setup_temp_value > MIN_SET_TEMP)
     fb2:	80 91 df 00 	lds	r24, 0x00DF
     fb6:	90 91 e0 00 	lds	r25, 0x00E0
     fba:	8f 31       	cpi	r24, 0x1F	; 31
     fbc:	91 05       	cpc	r25, r1
     fbe:	28 f0       	brcs	.+10     	; 0xfca <mf_setTempDo+0x74>
			setup_temp_value -= 5;
     fc0:	05 97       	sbiw	r24, 0x05	; 5
     fc2:	90 93 e0 00 	sts	0x00E0, r25
     fc6:	80 93 df 00 	sts	0x00DF, r24
		restartMenuTimer();
     fca:	a2 dd       	rcall	.-1212   	; 0xb10 <restartMenuTimer>
	}					
		
	// Output ADC result to LED
	u16toa_align_right(setup_temp_value,str,0x80 | 4,' ');
     fcc:	20 e2       	ldi	r18, 0x20	; 32
     fce:	44 e8       	ldi	r20, 0x84	; 132
     fd0:	be 01       	movw	r22, r28
     fd2:	6f 5f       	subi	r22, 0xFF	; 255
     fd4:	7f 4f       	sbci	r23, 0xFF	; 255
     fd6:	80 91 df 00 	lds	r24, 0x00DF
     fda:	90 91 e0 00 	lds	r25, 0x00E0
     fde:	36 d1       	rcall	.+620    	; 0x124c <u16toa_align_right>
	printLedBuffer(0,str);
     fe0:	be 01       	movw	r22, r28
     fe2:	6f 5f       	subi	r22, 0xFF	; 255
     fe4:	7f 4f       	sbci	r23, 0xFF	; 255
     fe6:	80 e0       	ldi	r24, 0x00	; 0
     fe8:	f6 dc       	rcall	.-1556   	; 0x9d6 <printLedBuffer>
	
	if (userTimer.FA_GE)
     fea:	80 91 03 01 	lds	r24, 0x0103
     fee:	84 ff       	sbrs	r24, 4
     ff0:	03 c0       	rjmp	.+6      	; 0xff8 <mf_setTempDo+0xa2>
		setExtraLeds(LED_TEMP);
     ff2:	81 e0       	ldi	r24, 0x01	; 1
     ff4:	42 dd       	rcall	.-1404   	; 0xa7a <setExtraLeds>
     ff6:	02 c0       	rjmp	.+4      	; 0xffc <mf_setTempDo+0xa6>
	else
		clearExtraLeds(LED_TEMP);
     ff8:	81 e0       	ldi	r24, 0x01	; 1
     ffa:	45 dd       	rcall	.-1398   	; 0xa86 <clearExtraLeds>
}
     ffc:	27 96       	adiw	r28, 0x07	; 7
     ffe:	0f b6       	in	r0, 0x3f	; 63
    1000:	f8 94       	cli
    1002:	de bf       	out	0x3e, r29	; 62
    1004:	0f be       	out	0x3f, r0	; 63
    1006:	cd bf       	out	0x3d, r28	; 61
    1008:	df 91       	pop	r29
    100a:	cf 91       	pop	r28
    100c:	08 95       	ret

0000100e <mf_realTempSelect>:
//=================================================================//


void mf_realTempSelect(void)
{
	setExtraLeds(LED_TEMP);
    100e:	81 e0       	ldi	r24, 0x01	; 1
    1010:	34 dd       	rcall	.-1432   	; 0xa7a <setExtraLeds>
    1012:	08 95       	ret

00001014 <InitMenu>:
//	Menu initialization
//	Call this function at start of your program before processMenu()
//-----------------------------------------------------------------//
void InitMenu(void)
{
	selectedMenuItemID = mi_REALTEMP;
    1014:	81 e0       	ldi	r24, 0x01	; 1
    1016:	80 93 fc 00 	sts	0x00FC, r24
    101a:	20 e0       	ldi	r18, 0x00	; 0
    101c:	30 e0       	ldi	r19, 0x00	; 0
static void getMenuFunctionRecord(uint8_t menuItemID, MenuFunctionRecord* menuRecord )
{
	uint8_t i;
	for (i = 0; i < sizeof(menuFunctionSet)/sizeof(MenuFunctionRecord); i++  )
	{
		readMenuRecord(&menuFunctionSet[i], menuRecord);
    101e:	c9 01       	movw	r24, r18
    1020:	88 0f       	add	r24, r24
    1022:	99 1f       	adc	r25, r25
    1024:	88 0f       	add	r24, r24
    1026:	99 1f       	adc	r25, r25
    1028:	88 0f       	add	r24, r24
    102a:	99 1f       	adc	r25, r25
    102c:	82 1b       	sub	r24, r18
    102e:	93 0b       	sbc	r25, r19
    1030:	88 5b       	subi	r24, 0xB8	; 184
    1032:	9e 4f       	sbci	r25, 0xFE	; 254
//		fRecPtr		- address of the function record in the FLASH
//		resPtr		- address of the record to fill in the SRAM
//-----------------------------------------------------------------//
static inline void readMenuRecord(const MenuFunctionRecord* fRecPtr, MenuFunctionRecord* resPtr )
{
	resPtr->Item = pgm_read_byte(&fRecPtr->Item);
    1034:	fc 01       	movw	r30, r24
    1036:	64 91       	lpm	r22, Z
	resPtr->SelectFunction = (FuncPtr)pgm_read_word(&fRecPtr->SelectFunction);
    1038:	31 96       	adiw	r30, 0x01	; 1
    103a:	45 91       	lpm	r20, Z+
    103c:	54 91       	lpm	r21, Z
    103e:	b4 2f       	mov	r27, r20
    1040:	a5 2f       	mov	r26, r21
	resPtr->RunFunction = (FuncPtr)pgm_read_word(&fRecPtr->RunFunction);
    1042:	fc 01       	movw	r30, r24
    1044:	33 96       	adiw	r30, 0x03	; 3
    1046:	45 91       	lpm	r20, Z+
    1048:	54 91       	lpm	r21, Z
    104a:	74 2f       	mov	r23, r20
    104c:	45 2f       	mov	r20, r21
	resPtr->LeaveFunction = (FuncPtr)pgm_read_word(&fRecPtr->LeaveFunction);
    104e:	05 96       	adiw	r24, 0x05	; 5
    1050:	fc 01       	movw	r30, r24
    1052:	85 91       	lpm	r24, Z+
    1054:	94 91       	lpm	r25, Z
    1056:	58 2f       	mov	r21, r24
{
	uint8_t i;
	for (i = 0; i < sizeof(menuFunctionSet)/sizeof(MenuFunctionRecord); i++  )
	{
		readMenuRecord(&menuFunctionSet[i], menuRecord);
		if (menuRecord->Item == menuItemID)
    1058:	61 30       	cpi	r22, 0x01	; 1
    105a:	79 f4       	brne	.+30     	; 0x107a <InitMenu+0x66>
    105c:	60 93 07 01 	sts	0x0107, r22
    1060:	e8 e0       	ldi	r30, 0x08	; 8
    1062:	f1 e0       	ldi	r31, 0x01	; 1
    1064:	b0 83       	st	Z, r27
    1066:	a1 83       	std	Z+1, r26	; 0x01
    1068:	ea e0       	ldi	r30, 0x0A	; 10
    106a:	f1 e0       	ldi	r31, 0x01	; 1
    106c:	70 83       	st	Z, r23
    106e:	41 83       	std	Z+1, r20	; 0x01
    1070:	ec e0       	ldi	r30, 0x0C	; 12
    1072:	f1 e0       	ldi	r31, 0x01	; 1
    1074:	50 83       	st	Z, r21
    1076:	91 83       	std	Z+1, r25	; 0x01
    1078:	14 c0       	rjmp	.+40     	; 0x10a2 <InitMenu+0x8e>
    107a:	2f 5f       	subi	r18, 0xFF	; 255
    107c:	3f 4f       	sbci	r19, 0xFF	; 255
//	Output:
//-----------------------------------------------------------------//
static void getMenuFunctionRecord(uint8_t menuItemID, MenuFunctionRecord* menuRecord )
{
	uint8_t i;
	for (i = 0; i < sizeof(menuFunctionSet)/sizeof(MenuFunctionRecord); i++  )
    107e:	2d 30       	cpi	r18, 0x0D	; 13
    1080:	31 05       	cpc	r19, r1
    1082:	09 f0       	breq	.+2      	; 0x1086 <InitMenu+0x72>
    1084:	cc cf       	rjmp	.-104    	; 0x101e <InitMenu+0xa>
    1086:	60 93 07 01 	sts	0x0107, r22
    108a:	e8 e0       	ldi	r30, 0x08	; 8
    108c:	f1 e0       	ldi	r31, 0x01	; 1
    108e:	b0 83       	st	Z, r27
    1090:	a1 83       	std	Z+1, r26	; 0x01
    1092:	ea e0       	ldi	r30, 0x0A	; 10
    1094:	f1 e0       	ldi	r31, 0x01	; 1
    1096:	70 83       	st	Z, r23
    1098:	41 83       	std	Z+1, r20	; 0x01
    109a:	ec e0       	ldi	r30, 0x0C	; 12
    109c:	f1 e0       	ldi	r31, 0x01	; 1
    109e:	50 83       	st	Z, r21
    10a0:	91 83       	std	Z+1, r25	; 0x01
//-----------------------------------------------------------------//
void InitMenu(void)
{
	selectedMenuItemID = mi_REALTEMP;
	getMenuFunctionRecord(selectedMenuItemID, &selectedMenuFunctionRecord);
	processItemFunction(selectedMenuFunctionRecord.SelectFunction);
    10a2:	e0 91 08 01 	lds	r30, 0x0108
    10a6:	f0 91 09 01 	lds	r31, 0x0109
//	Arguments:
//		funcAddr - address of the function to run.
//-----------------------------------------------------------------//
static inline void processItemFunction(FuncPtr funcAddr)
{
	if (funcAddr != 0)
    10aa:	30 97       	sbiw	r30, 0x00	; 0
    10ac:	09 f0       	breq	.+2      	; 0x10b0 <InitMenu+0x9c>
		((FuncPtr)funcAddr)();
    10ae:	09 95       	icall
	selectedMenuItemID = mi_REALTEMP;
	getMenuFunctionRecord(selectedMenuItemID, &selectedMenuFunctionRecord);
	processItemFunction(selectedMenuFunctionRecord.SelectFunction);
	
	// Initialize menu state timer
	menuTimer.Timer = 0;
    10b0:	10 92 fe 00 	sts	0x00FE, r1
	menuTimer.Enabled = 0;
    10b4:	ed ef       	ldi	r30, 0xFD	; 253
    10b6:	f0 e0       	ldi	r31, 0x00	; 0
    10b8:	80 81       	ld	r24, Z
	menuTimer.RunOnce = 1;
    10ba:	8e 7f       	andi	r24, 0xFE	; 254
    10bc:	82 60       	ori	r24, 0x02	; 2
    10be:	80 83       	st	Z, r24
	
	// Initialize user timer
	userTimer.Enabled = 0;
    10c0:	e3 e0       	ldi	r30, 0x03	; 3
    10c2:	f1 e0       	ldi	r31, 0x01	; 1
    10c4:	80 81       	ld	r24, Z
	userTimer.RunOnce = 0;
    10c6:	8e 7f       	andi	r24, 0xFE	; 254
    10c8:	8d 7f       	andi	r24, 0xFD	; 253
    10ca:	80 83       	st	Z, r24
    10cc:	08 95       	ret

000010ce <processMenu>:
//	Main menu control, -  state function calls, jumps 
//	between menu states and indication
//	Call this function from main() with a fixed time interval.
//-----------------------------------------------------------------//
void processMenu(void)
{
    10ce:	ff 92       	push	r15
    10d0:	0f 93       	push	r16
    10d2:	1f 93       	push	r17
    10d4:	cf 93       	push	r28
    10d6:	df 93       	push	r29
	NextItem_t nextItem;
	uint16_t jumpCondition;
	
	processSoftTimer8b(&menuTimer);	
    10d8:	8d ef       	ldi	r24, 0xFD	; 253
    10da:	90 e0       	ldi	r25, 0x00	; 0
    10dc:	35 d3       	rcall	.+1642   	; 0x1748 <processSoftTimer8b>
	
	// Compose jump condition
	jumpCondition = button_state;		
    10de:	40 91 be 00 	lds	r20, 0x00BE
    10e2:	50 91 bf 00 	lds	r21, 0x00BF
	if (menuTimer.FTop)
    10e6:	80 91 fd 00 	lds	r24, 0x00FD
    10ea:	85 fd       	sbrc	r24, 5
		jumpCondition |= TMR_EXP;
    10ec:	50 68       	ori	r21, 0x80	; 128
	
	// Get next menu item according to current state and jump conditions
	nextItem = getNextMenuItem(selectedMenuItemID, jumpCondition);
    10ee:	b0 91 fc 00 	lds	r27, 0x00FC
    10f2:	80 e0       	ldi	r24, 0x00	; 0
    10f4:	90 e0       	ldi	r25, 0x00	; 0
	MenuJumpRecord	jRecord;
	uint8_t i;
	
	for (i = 0; i < sizeof(menuJumpSet)/sizeof(MenuJumpRecord); i++  )
	{
		readJumpRecord(&menuJumpSet[i], &jRecord);		// read full jump record
    10f6:	9c 01       	movw	r18, r24
    10f8:	22 0f       	add	r18, r18
    10fa:	33 1f       	adc	r19, r19
    10fc:	22 0f       	add	r18, r18
    10fe:	33 1f       	adc	r19, r19
    1100:	28 0f       	add	r18, r24
    1102:	39 1f       	adc	r19, r25
    1104:	2d 55       	subi	r18, 0x5D	; 93
    1106:	3e 4f       	sbci	r19, 0xFE	; 254
//		jRecPtr		- address of the jump record in the FLASH
//		resPtr		- address of the record to fill in the SRAM
//-----------------------------------------------------------------//
static inline void readJumpRecord(const MenuJumpRecord* jRecPtr, MenuJumpRecord* resPtr )
{
	resPtr->Item = pgm_read_byte(&jRecPtr->Item);
    1108:	f9 01       	movw	r30, r18
    110a:	a4 91       	lpm	r26, Z
	resPtr->JumpCondition = pgm_read_word(&jRecPtr->JumpCondition);
    110c:	31 96       	adiw	r30, 0x01	; 1
    110e:	65 91       	lpm	r22, Z+
    1110:	74 91       	lpm	r23, Z
	resPtr->NextItem= pgm_read_byte(&jRecPtr->NextItem);
    1112:	f9 01       	movw	r30, r18
    1114:	33 96       	adiw	r30, 0x03	; 3
    1116:	c4 91       	lpm	r28, Z
	resPtr->Flags= pgm_read_byte(&jRecPtr->Flags);
    1118:	f9 01       	movw	r30, r18
    111a:	34 96       	adiw	r30, 0x04	; 4
    111c:	24 91       	lpm	r18, Z
	uint8_t i;
	
	for (i = 0; i < sizeof(menuJumpSet)/sizeof(MenuJumpRecord); i++  )
	{
		readJumpRecord(&menuJumpSet[i], &jRecord);		// read full jump record
		if (jRecord.Item == selectedItemId)				// If ID match,
    111e:	ba 13       	cpse	r27, r26
    1120:	15 c0       	rjmp	.+42     	; 0x114c <processMenu+0x7e>
		{
			if ((jRecord.JumpCondition & jmpCond) != 0)		// if any of jump conditions match too,
    1122:	64 23       	and	r22, r20
    1124:	75 23       	and	r23, r21
    1126:	67 2b       	or	r22, r23
    1128:	89 f0       	breq	.+34     	; 0x114c <processMenu+0x7e>
			{
				nextItem.ItemID = jRecord.NextItem;			// switch to next menu item
				nextItem.ItemTimeout = jRecord.Flags & TIMEOUT_MASK;
    112a:	d2 2f       	mov	r29, r18
    112c:	df 73       	andi	r29, 0x3F	; 63
				nextItem.ShiftRight = (jRecord.Flags & SHIFT_RIGHT) ? 1 : 0;
    112e:	26 fb       	bst	r18, 6
    1130:	00 27       	eor	r16, r16
    1132:	00 f9       	bld	r16, 0
				nextItem.ShiftLeft = (jRecord.Flags & SHIFT_LEFT) ? 1 : 0;
    1134:	f2 2e       	mov	r15, r18
    1136:	ff 1c       	adc	r15, r15
    1138:	ff 24       	eor	r15, r15
    113a:	ff 1c       	adc	r15, r15
    113c:	10 e0       	ldi	r17, 0x00	; 0
    113e:	f0 fa       	bst	r15, 0
    1140:	10 f9       	bld	r17, 0
    1142:	00 fb       	bst	r16, 0
    1144:	11 f9       	bld	r17, 1
	
	// Get next menu item according to current state and jump conditions
	nextItem = getNextMenuItem(selectedMenuItemID, jumpCondition);
	
	// If next item differs from current
	if (nextItem.ItemID != selectedMenuItemID)
    1146:	bc 13       	cpse	r27, r28
    1148:	06 c0       	rjmp	.+12     	; 0x1156 <processMenu+0x88>
    114a:	70 c0       	rjmp	.+224    	; 0x122c <processMenu+0x15e>
    114c:	01 96       	adiw	r24, 0x01	; 1
	NextItem_t nextItem;
	nextItem.ItemID = selectedItemId;
	MenuJumpRecord	jRecord;
	uint8_t i;
	
	for (i = 0; i < sizeof(menuJumpSet)/sizeof(MenuJumpRecord); i++  )
    114e:	8d 31       	cpi	r24, 0x1D	; 29
    1150:	91 05       	cpc	r25, r1
    1152:	89 f6       	brne	.-94     	; 0x10f6 <processMenu+0x28>
    1154:	6b c0       	rjmp	.+214    	; 0x122c <processMenu+0x15e>
	
	// If next item differs from current
	if (nextItem.ItemID != selectedMenuItemID)
	{		
		// Call exit function for current item
		processItemFunction(selectedMenuFunctionRecord.LeaveFunction);
    1156:	e0 91 0c 01 	lds	r30, 0x010C
    115a:	f0 91 0d 01 	lds	r31, 0x010D
//	Arguments:
//		funcAddr - address of the function to run.
//-----------------------------------------------------------------//
static inline void processItemFunction(FuncPtr funcAddr)
{
	if (funcAddr != 0)
    115e:	30 97       	sbiw	r30, 0x00	; 0
    1160:	09 f0       	breq	.+2      	; 0x1164 <processMenu+0x96>
		((FuncPtr)funcAddr)();
    1162:	09 95       	icall
		// Call exit function for current item
		processItemFunction(selectedMenuFunctionRecord.LeaveFunction);
		
		// If shifting is specified, start it before calling any 
		//	new menu item functions 
		if (nextItem.ShiftRight)
    1164:	f0 fa       	bst	r15, 0
    1166:	10 f9       	bld	r17, 0
    1168:	00 fb       	bst	r16, 0
    116a:	11 f9       	bld	r17, 1
    116c:	11 ff       	sbrs	r17, 1
    116e:	02 c0       	rjmp	.+4      	; 0x1174 <processMenu+0xa6>
			startShiftingWindowRight();
    1170:	01 dc       	rcall	.-2046   	; 0x974 <startShiftingWindowRight>
    1172:	02 c0       	rjmp	.+4      	; 0x1178 <processMenu+0xaa>
		else if (nextItem.ShiftLeft)
    1174:	10 fd       	sbrc	r17, 0
			startShiftingWindowLeft();
    1176:	f0 db       	rcall	.-2080   	; 0x958 <startShiftingWindowLeft>
		
		// Select new item
		selectedMenuItemID = nextItem.ItemID;
    1178:	c0 93 fc 00 	sts	0x00FC, r28
    117c:	20 e0       	ldi	r18, 0x00	; 0
    117e:	30 e0       	ldi	r19, 0x00	; 0
static void getMenuFunctionRecord(uint8_t menuItemID, MenuFunctionRecord* menuRecord )
{
	uint8_t i;
	for (i = 0; i < sizeof(menuFunctionSet)/sizeof(MenuFunctionRecord); i++  )
	{
		readMenuRecord(&menuFunctionSet[i], menuRecord);
    1180:	c9 01       	movw	r24, r18
    1182:	88 0f       	add	r24, r24
    1184:	99 1f       	adc	r25, r25
    1186:	88 0f       	add	r24, r24
    1188:	99 1f       	adc	r25, r25
    118a:	88 0f       	add	r24, r24
    118c:	99 1f       	adc	r25, r25
    118e:	82 1b       	sub	r24, r18
    1190:	93 0b       	sbc	r25, r19
    1192:	88 5b       	subi	r24, 0xB8	; 184
    1194:	9e 4f       	sbci	r25, 0xFE	; 254
//		fRecPtr		- address of the function record in the FLASH
//		resPtr		- address of the record to fill in the SRAM
//-----------------------------------------------------------------//
static inline void readMenuRecord(const MenuFunctionRecord* fRecPtr, MenuFunctionRecord* resPtr )
{
	resPtr->Item = pgm_read_byte(&fRecPtr->Item);
    1196:	fc 01       	movw	r30, r24
    1198:	64 91       	lpm	r22, Z
	resPtr->SelectFunction = (FuncPtr)pgm_read_word(&fRecPtr->SelectFunction);
    119a:	31 96       	adiw	r30, 0x01	; 1
    119c:	45 91       	lpm	r20, Z+
    119e:	54 91       	lpm	r21, Z
    11a0:	b4 2f       	mov	r27, r20
    11a2:	a5 2f       	mov	r26, r21
	resPtr->RunFunction = (FuncPtr)pgm_read_word(&fRecPtr->RunFunction);
    11a4:	fc 01       	movw	r30, r24
    11a6:	33 96       	adiw	r30, 0x03	; 3
    11a8:	45 91       	lpm	r20, Z+
    11aa:	54 91       	lpm	r21, Z
    11ac:	74 2f       	mov	r23, r20
    11ae:	45 2f       	mov	r20, r21
	resPtr->LeaveFunction = (FuncPtr)pgm_read_word(&fRecPtr->LeaveFunction);
    11b0:	05 96       	adiw	r24, 0x05	; 5
    11b2:	fc 01       	movw	r30, r24
    11b4:	85 91       	lpm	r24, Z+
    11b6:	94 91       	lpm	r25, Z
    11b8:	58 2f       	mov	r21, r24
{
	uint8_t i;
	for (i = 0; i < sizeof(menuFunctionSet)/sizeof(MenuFunctionRecord); i++  )
	{
		readMenuRecord(&menuFunctionSet[i], menuRecord);
		if (menuRecord->Item == menuItemID)
    11ba:	c6 13       	cpse	r28, r22
    11bc:	0f c0       	rjmp	.+30     	; 0x11dc <processMenu+0x10e>
    11be:	60 93 07 01 	sts	0x0107, r22
    11c2:	e8 e0       	ldi	r30, 0x08	; 8
    11c4:	f1 e0       	ldi	r31, 0x01	; 1
    11c6:	b0 83       	st	Z, r27
    11c8:	a1 83       	std	Z+1, r26	; 0x01
    11ca:	ea e0       	ldi	r30, 0x0A	; 10
    11cc:	f1 e0       	ldi	r31, 0x01	; 1
    11ce:	70 83       	st	Z, r23
    11d0:	41 83       	std	Z+1, r20	; 0x01
    11d2:	ec e0       	ldi	r30, 0x0C	; 12
    11d4:	f1 e0       	ldi	r31, 0x01	; 1
    11d6:	50 83       	st	Z, r21
    11d8:	91 83       	std	Z+1, r25	; 0x01
    11da:	14 c0       	rjmp	.+40     	; 0x1204 <processMenu+0x136>
    11dc:	2f 5f       	subi	r18, 0xFF	; 255
    11de:	3f 4f       	sbci	r19, 0xFF	; 255
//	Output:
//-----------------------------------------------------------------//
static void getMenuFunctionRecord(uint8_t menuItemID, MenuFunctionRecord* menuRecord )
{
	uint8_t i;
	for (i = 0; i < sizeof(menuFunctionSet)/sizeof(MenuFunctionRecord); i++  )
    11e0:	2d 30       	cpi	r18, 0x0D	; 13
    11e2:	31 05       	cpc	r19, r1
    11e4:	09 f0       	breq	.+2      	; 0x11e8 <processMenu+0x11a>
    11e6:	cc cf       	rjmp	.-104    	; 0x1180 <processMenu+0xb2>
    11e8:	60 93 07 01 	sts	0x0107, r22
    11ec:	e8 e0       	ldi	r30, 0x08	; 8
    11ee:	f1 e0       	ldi	r31, 0x01	; 1
    11f0:	b0 83       	st	Z, r27
    11f2:	a1 83       	std	Z+1, r26	; 0x01
    11f4:	ea e0       	ldi	r30, 0x0A	; 10
    11f6:	f1 e0       	ldi	r31, 0x01	; 1
    11f8:	70 83       	st	Z, r23
    11fa:	41 83       	std	Z+1, r20	; 0x01
    11fc:	ec e0       	ldi	r30, 0x0C	; 12
    11fe:	f1 e0       	ldi	r31, 0x01	; 1
    1200:	50 83       	st	Z, r21
    1202:	91 83       	std	Z+1, r25	; 0x01
		selectedMenuItemID = nextItem.ItemID;
		
		// Load from FLASH and save function pointers
		getMenuFunctionRecord(selectedMenuItemID, &selectedMenuFunctionRecord);
		// Call select function for next item
		processItemFunction(selectedMenuFunctionRecord.SelectFunction);
    1204:	e0 91 08 01 	lds	r30, 0x0108
    1208:	f0 91 09 01 	lds	r31, 0x0109
//	Arguments:
//		funcAddr - address of the function to run.
//-----------------------------------------------------------------//
static inline void processItemFunction(FuncPtr funcAddr)
{
	if (funcAddr != 0)
    120c:	30 97       	sbiw	r30, 0x00	; 0
    120e:	09 f0       	breq	.+2      	; 0x1212 <processMenu+0x144>
		((FuncPtr)funcAddr)();
    1210:	09 95       	icall
		// Load from FLASH and save function pointers
		getMenuFunctionRecord(selectedMenuItemID, &selectedMenuFunctionRecord);
		// Call select function for next item
		processItemFunction(selectedMenuFunctionRecord.SelectFunction);
		// Start timer if timeout is enabled
		if (nextItem.ItemTimeout != 0)
    1212:	dd 23       	and	r29, r29
    1214:	a9 f0       	breq	.+42     	; 0x1240 <processMenu+0x172>
		{
			menuTimer.Top = nextItem.ItemTimeout * MENU_TIMEOUT_MULT;
    1216:	dd 0f       	add	r29, r29
    1218:	d0 93 ff 00 	sts	0x00FF, r29
			menuTimer.Timer = 0;
    121c:	10 92 fe 00 	sts	0x00FE, r1
			menuTimer.Enabled = 1;	
    1220:	ed ef       	ldi	r30, 0xFD	; 253
    1222:	f0 e0       	ldi	r31, 0x00	; 0
    1224:	80 81       	ld	r24, Z
    1226:	81 60       	ori	r24, 0x01	; 1
    1228:	80 83       	st	Z, r24
    122a:	0a c0       	rjmp	.+20     	; 0x1240 <processMenu+0x172>
		}
		
	}
	else
	{
		processSoftTimer8b(&userTimer);
    122c:	83 e0       	ldi	r24, 0x03	; 3
    122e:	91 e0       	ldi	r25, 0x01	; 1
    1230:	8b d2       	rcall	.+1302   	; 0x1748 <processSoftTimer8b>
		// Stay at previous item
		processItemFunction(selectedMenuFunctionRecord.RunFunction);
    1232:	e0 91 0a 01 	lds	r30, 0x010A
    1236:	f0 91 0b 01 	lds	r31, 0x010B
//	Arguments:
//		funcAddr - address of the function to run.
//-----------------------------------------------------------------//
static inline void processItemFunction(FuncPtr funcAddr)
{
	if (funcAddr != 0)
    123a:	30 97       	sbiw	r30, 0x00	; 0
    123c:	09 f0       	breq	.+2      	; 0x1240 <processMenu+0x172>
		((FuncPtr)funcAddr)();
    123e:	09 95       	icall
	{
		processSoftTimer8b(&userTimer);
		// Stay at previous item
		processItemFunction(selectedMenuFunctionRecord.RunFunction);
	}	
}
    1240:	df 91       	pop	r29
    1242:	cf 91       	pop	r28
    1244:	1f 91       	pop	r17
    1246:	0f 91       	pop	r16
    1248:	ff 90       	pop	r15
    124a:	08 95       	ret

0000124c <u16toa_align_right>:
// Converts uint16_t value into decimal string with right alignment
// len = number of digits output (without terminating '\0')
// len[7] = 1 -> no terminating '\0' at buffer[len]
// fill_char -> char used for string padding
void u16toa_align_right(uint16_t val, char *buffer, uint8_t len,char fill_char)
{
    124c:	cf 93       	push	r28
    124e:	df 93       	push	r29
    1250:	fc 01       	movw	r30, r24
    1252:	52 2f       	mov	r21, r18
	if (len & 0x80)
    1254:	44 23       	and	r20, r20
    1256:	2c f4       	brge	.+10     	; 0x1262 <u16toa_align_right+0x16>
	{
		len = len & 0x7F;
    1258:	4f 77       	andi	r20, 0x7F	; 127
		buffer += len;	
    125a:	eb 01       	movw	r28, r22
    125c:	c4 0f       	add	r28, r20
    125e:	d1 1d       	adc	r29, r1
    1260:	04 c0       	rjmp	.+8      	; 0x126a <u16toa_align_right+0x1e>
	}
	else
	{
		buffer += len;	
    1262:	eb 01       	movw	r28, r22
    1264:	c4 0f       	add	r28, r20
    1266:	d1 1d       	adc	r29, r1
		*buffer = 0;
    1268:	18 82       	st	Y, r1
	}
	
	do
	{
		*--buffer = val % 10 + '0';
    126a:	9f 01       	movw	r18, r30
    126c:	ad ec       	ldi	r26, 0xCD	; 205
    126e:	bc ec       	ldi	r27, 0xCC	; 204
    1270:	42 d3       	rcall	.+1668   	; 0x18f6 <__umulhisi3>
    1272:	96 95       	lsr	r25
    1274:	87 95       	ror	r24
    1276:	96 95       	lsr	r25
    1278:	87 95       	ror	r24
    127a:	96 95       	lsr	r25
    127c:	87 95       	ror	r24
    127e:	dc 01       	movw	r26, r24
    1280:	aa 0f       	add	r26, r26
    1282:	bb 1f       	adc	r27, r27
    1284:	bc 01       	movw	r22, r24
    1286:	66 0f       	add	r22, r22
    1288:	77 1f       	adc	r23, r23
    128a:	66 0f       	add	r22, r22
    128c:	77 1f       	adc	r23, r23
    128e:	66 0f       	add	r22, r22
    1290:	77 1f       	adc	r23, r23
    1292:	6a 0f       	add	r22, r26
    1294:	7b 1f       	adc	r23, r27
    1296:	e6 1b       	sub	r30, r22
    1298:	f7 0b       	sbc	r31, r23
    129a:	e0 5d       	subi	r30, 0xD0	; 208
    129c:	ea 93       	st	-Y, r30
		val /= 10;
    129e:	fc 01       	movw	r30, r24
		len--;
    12a0:	41 50       	subi	r20, 0x01	; 1
	}
	while ((val != 0) && len);
    12a2:	00 97       	sbiw	r24, 0x00	; 0
    12a4:	29 f4       	brne	.+10     	; 0x12b0 <u16toa_align_right+0x64>
	
	// Padding
	while(len--)
    12a6:	84 2f       	mov	r24, r20
    12a8:	81 50       	subi	r24, 0x01	; 1
    12aa:	41 11       	cpse	r20, r1
    12ac:	04 c0       	rjmp	.+8      	; 0x12b6 <u16toa_align_right+0x6a>
    12ae:	07 c0       	rjmp	.+14     	; 0x12be <u16toa_align_right+0x72>
	{
		*--buffer = val % 10 + '0';
		val /= 10;
		len--;
	}
	while ((val != 0) && len);
    12b0:	41 11       	cpse	r20, r1
    12b2:	db cf       	rjmp	.-74     	; 0x126a <u16toa_align_right+0x1e>
    12b4:	04 c0       	rjmp	.+8      	; 0x12be <u16toa_align_right+0x72>
    12b6:	fe 01       	movw	r30, r28
	
	// Padding
	while(len--)
		*--buffer = fill_char;
    12b8:	52 93       	st	-Z, r21
		len--;
	}
	while ((val != 0) && len);
	
	// Padding
	while(len--)
    12ba:	81 50       	subi	r24, 0x01	; 1
    12bc:	e8 f7       	brcc	.-6      	; 0x12b8 <u16toa_align_right+0x6c>
		*--buffer = fill_char;
}
    12be:	df 91       	pop	r29
    12c0:	cf 91       	pop	r28
    12c2:	08 95       	ret

000012c4 <init_system>:
//extern void powTest(void);

void init_system()
{
	// Setup Port D
	PORTD = 0; //(1<<PD_SYNCA | 1<<PD_SYNCB);
    12c4:	12 ba       	out	0x12, r1	; 18
	DDRD = (1<<PD_TXD | 1<<PD_M1 | 1<<PD_M2 | 1<<PD_HEATER | 1<<PD_HEAT_INDIC );
    12c6:	8e e3       	ldi	r24, 0x3E	; 62
    12c8:	81 bb       	out	0x11, r24	; 17
	
	// Setup Port B
	PORTB = 0;
    12ca:	18 ba       	out	0x18, r1	; 24
	DDRB = (1<<PB_BEEPER | 1<<PB_LED_DOUT | 1<<PB_LED_CLK | 1<<PB_SEGF | 1<<PB_SEGG | 1<<PB_SEGH);
    12cc:	8f e3       	ldi	r24, 0x3F	; 63
    12ce:	87 bb       	out	0x17, r24	; 23
	
	PORTC = 0;
    12d0:	15 ba       	out	0x15, r1	; 21
	DDRC = (1<<PC_SEGA | 1<<PC_SEGB | 1<<PC_SEGC | 1<<PC_SEGD | 1<<PC_SEGE);	
    12d2:	8f e1       	ldi	r24, 0x1F	; 31
    12d4:	84 bb       	out	0x14, r24	; 20

	// Setup timer0
	// 1/1024 prescaler, T=64us @16MHz
	TCCR0 = (1<<CS02 | 0<<CS01 | 1<<CS00);
    12d6:	85 e0       	ldi	r24, 0x05	; 5
    12d8:	83 bf       	out	0x33, r24	; 51
	// Start 256 * 64us = 16384us interval
	TCNT0 = 0;
    12da:	12 be       	out	0x32, r1	; 50
	// Clear interrupt flag
	TIFR |= (1<<TOV0);
    12dc:	88 b7       	in	r24, 0x38	; 56
    12de:	81 60       	ori	r24, 0x01	; 1
    12e0:	88 bf       	out	0x38, r24	; 56
	// Enable interrupts from timer 0
	TIMSK |= (1<<TOIE0);
    12e2:	89 b7       	in	r24, 0x39	; 57
    12e4:	81 60       	ori	r24, 0x01	; 1
    12e6:	89 bf       	out	0x39, r24	; 57
	
	// Setup timer2 as 1ms system frequency generator
	// 1/64 prescaler, CTC mode, OC2 disconnected
	TCCR2 = (1<<CS22 | 1<<WGM21);
    12e8:	8c e0       	ldi	r24, 0x0C	; 12
    12ea:	85 bd       	out	0x25, r24	; 37
	OCR2 = 249;
    12ec:	89 ef       	ldi	r24, 0xF9	; 249
    12ee:	83 bd       	out	0x23, r24	; 35
	TIMSK |= (1<<OCIE2);
    12f0:	89 b7       	in	r24, 0x39	; 57
    12f2:	80 68       	ori	r24, 0x80	; 128
    12f4:	89 bf       	out	0x39, r24	; 57
	
	// Setup timer1 as beeper frequency generator
	// CTC mode, 1/64 prescaler
	TCCR1A = 0;
    12f6:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = (1<<WGM12 | 1<<CS11 | 1<<CS10);
    12f8:	8b e0       	ldi	r24, 0x0B	; 11
    12fa:	8e bd       	out	0x2e, r24	; 46
	// 1kHz beeper frequency default
	OCR1A = 127;
    12fc:	8f e7       	ldi	r24, 0x7F	; 127
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	9b bd       	out	0x2b, r25	; 43
    1302:	8a bd       	out	0x2a, r24	; 42

	// Setup AC sync comparator
	// Interrupt on output toggle
	ACSR |= (1<<ACI);
    1304:	44 9a       	sbi	0x08, 4	; 8
	ACSR = (1<<ACIE | 0<<ACIS1 | 0<<ACIS0);
    1306:	88 e0       	ldi	r24, 0x08	; 8
    1308:	88 b9       	out	0x08, r24	; 8
	
	// Setup ADC
	// Internal Vref + cap, input ADC5, 
	ADMUX = (1<<REFS1 | 1<<REFS0 | 0<<MUX3 | 1<<MUX2 | 0<<MUX1 | 1<<MUX0 );
    130a:	85 ec       	ldi	r24, 0xC5	; 197
    130c:	87 b9       	out	0x07, r24	; 7
	// Prescaler = 128
	ADCSRA = (1<<ADEN |/* 1<<ADFR |*/  1<<ADIE | 1<<ADPS2 | 1<<ADPS1 | 1<<ADPS0);
    130e:	8f e8       	ldi	r24, 0x8F	; 143
    1310:	86 b9       	out	0x06, r24	; 6
	
	// Setup USART
	// Double speed
	UCSRA = (1<<U2X);
    1312:	82 e0       	ldi	r24, 0x02	; 2
    1314:	8b b9       	out	0x0b, r24	; 11
	UCSRB = (1<<RXEN | 1<<TXEN | 0<<UCSZ2);
    1316:	88 e1       	ldi	r24, 0x18	; 24
    1318:	8a b9       	out	0x0a, r24	; 10
	// No parity, 1 stop bit, 8 bit
	UCSRC = (1<<URSEL | 0<<UPM1 | 0<<UPM0 | 0<<USBS | 1<<UCSZ1 | 1<<UCSZ0);
    131a:	86 e8       	ldi	r24, 0x86	; 134
    131c:	80 bd       	out	0x20, r24	; 32
	// 57600 @16MHz, 2x
	UBRRH=0x00;
    131e:	10 bc       	out	0x20, r1	; 32
	UBRRL=0x22;
    1320:	82 e2       	ldi	r24, 0x22	; 34
    1322:	89 b9       	out	0x09, r24	; 9
    1324:	08 95       	ret

00001326 <main>:




int main(void)
{
    1326:	cf 93       	push	r28
    1328:	df 93       	push	r29
    132a:	cd b7       	in	r28, 0x3d	; 61
    132c:	de b7       	in	r29, 0x3e	; 62
    132e:	2a 97       	sbiw	r28, 0x0a	; 10
    1330:	0f b6       	in	r0, 0x3f	; 63
    1332:	f8 94       	cli
    1334:	de bf       	out	0x3e, r29	; 62
    1336:	0f be       	out	0x3f, r0	; 63
    1338:	cd bf       	out	0x3d, r28	; 61
	uint16_t uart_log_counter = 0;
	
	//powTest();
	
	// Initialize IO
	init_system();
    133a:	c4 df       	rcall	.-120    	; 0x12c4 <init_system>
	
	// Restore params
	restoreGlobalParams();
    133c:	f8 d9       	rcall	.-3088   	; 0x72e <restoreGlobalParams>
	
	// Calibrate ADC coefficients using restored params
	calculateCoeffs();
    133e:	d8 d7       	rcall	.+4016   	; 0x22f0 <__data_load_end+0x8f0>
	
	// Initialize LED indicator
	initLedIndicator();
    1340:	27 db       	rcall	.-2482   	; 0x990 <initLedIndicator>
	
	// Enable interrupts
	sei();
    1342:	78 94       	sei
	
	// Beep
	SetBeeperFreq(1000);
    1344:	88 ee       	ldi	r24, 0xE8	; 232
    1346:	93 e0       	ldi	r25, 0x03	; 3
    1348:	2d d2       	rcall	.+1114   	; 0x17a4 <SetBeeperFreq>
	StartBeep(200);
    134a:	88 ec       	ldi	r24, 0xC8	; 200
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	4b d2       	rcall	.+1174   	; 0x17e6 <StartBeep>
	
	InitMenu();
    1350:	61 de       	rcall	.-830    	; 0x1014 <InitMenu>

	setMotorDirection(ROLL_FWD);
    1352:	81 e0       	ldi	r24, 0x01	; 1
    1354:	84 d0       	rcall	.+264    	; 0x145e <setMotorDirection>
	
	//button_state = BD_UP;
	//processMenu();
	
	printLedBuffer(0,"      ");
    1356:	68 e9       	ldi	r22, 0x98	; 152
    1358:	70 e0       	ldi	r23, 0x00	; 0
    135a:	80 e0       	ldi	r24, 0x00	; 0
    135c:	3c db       	rcall	.-2440   	; 0x9d6 <printLedBuffer>
int main(void)
{
	char str[10];
	uint8_t temp8u = 0x00;
	uint8_t uart_log_timeout_counter = 0;
	uint16_t uart_log_counter = 0;
    135e:	e1 2c       	mov	r14, r1
    1360:	f1 2c       	mov	r15, r1
	printLedBuffer(0,"      ");
	
    while(1)
    {
		
		if (menuUpdateTimer.FOvfl)
    1362:	03 e6       	ldi	r16, 0x63	; 99
    1364:	10 e0       	ldi	r17, 0x00	; 0
    1366:	f8 01       	movw	r30, r16
    1368:	80 81       	ld	r24, Z
    136a:	86 ff       	sbrs	r24, 6
    136c:	fc cf       	rjmp	.-8      	; 0x1366 <main+0x40>
		{
			// Get new temperature measurement - new value is pushed into ring buffer
			// once every AC line period
			update_filtered_adc();
    136e:	10 d8       	rcall	.-4064   	; 0x390 <update_filtered_adc>
			
			// Get new button state
			process_buttons();
    1370:	7a d8       	rcall	.-3852   	; 0x466 <process_buttons>
			
			// Give audio feedback
			if (button_state & BL_MENU)
    1372:	20 91 be 00 	lds	r18, 0x00BE
    1376:	30 91 bf 00 	lds	r19, 0x00BF
    137a:	31 ff       	sbrs	r19, 1
    137c:	07 c0       	rjmp	.+14     	; 0x138c <main+0x66>
			{
				SetBeeperFreq(800);
    137e:	80 e2       	ldi	r24, 0x20	; 32
    1380:	93 e0       	ldi	r25, 0x03	; 3
    1382:	10 d2       	rcall	.+1056   	; 0x17a4 <SetBeeperFreq>
				StartBeep(40);
    1384:	88 e2       	ldi	r24, 0x28	; 40
    1386:	90 e0       	ldi	r25, 0x00	; 0
    1388:	2e d2       	rcall	.+1116   	; 0x17e6 <StartBeep>
    138a:	0a c0       	rjmp	.+20     	; 0x13a0 <main+0x7a>
			}
			else if (button_action_down & (BD_MENU | BD_UP | BD_DOWN | BD_HEATCTRL))
    138c:	80 91 bd 00 	lds	r24, 0x00BD
    1390:	87 74       	andi	r24, 0x47	; 71
    1392:	31 f0       	breq	.+12     	; 0x13a0 <main+0x7a>
			{
				SetBeeperFreq(1000);
    1394:	88 ee       	ldi	r24, 0xE8	; 232
    1396:	93 e0       	ldi	r25, 0x03	; 3
    1398:	05 d2       	rcall	.+1034   	; 0x17a4 <SetBeeperFreq>
				StartBeep(40);
    139a:	88 e2       	ldi	r24, 0x28	; 40
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	23 d2       	rcall	.+1094   	; 0x17e6 <StartBeep>
			}	
			

			// Process user menu states, settings and indication
			processMenu();
    13a0:	96 de       	rcall	.-724    	; 0x10ce <processMenu>
			
			// Process cyclic rolling, direction control
			processRollControl();	
    13a2:	d4 d8       	rcall	.-3672   	; 0x54c <processRollControl>
			
			// Process heater regulation
			processHeaterControl();
    13a4:	9a d9       	rcall	.-3276   	; 0x6da <processHeaterControl>
		


			if (menuUpdateTimer.FA_TGL)
    13a6:	f8 01       	movw	r30, r16
    13a8:	80 81       	ld	r24, Z
    13aa:	82 ff       	sbrs	r24, 2
    13ac:	42 c0       	rjmp	.+132    	; 0x1432 <main+0x10c>
				//---------------------------------//
				// Function is called every 50ms
				// UART message is sent every second call
				
										
				u16toa_align_right(uart_log_counter,str,5,' ');			// log message counter
    13ae:	20 e2       	ldi	r18, 0x20	; 32
    13b0:	45 e0       	ldi	r20, 0x05	; 5
    13b2:	be 01       	movw	r22, r28
    13b4:	6f 5f       	subi	r22, 0xFF	; 255
    13b6:	7f 4f       	sbci	r23, 0xFF	; 255
    13b8:	c7 01       	movw	r24, r14
    13ba:	48 df       	rcall	.-368    	; 0x124c <u16toa_align_right>
				USART_sendstr(str);
    13bc:	ce 01       	movw	r24, r28
    13be:	01 96       	adiw	r24, 0x01	; 1
    13c0:	58 d2       	rcall	.+1200   	; 0x1872 <USART_sendstr>
				USART_sendstr("     ");
    13c2:	89 e9       	ldi	r24, 0x99	; 153
    13c4:	90 e0       	ldi	r25, 0x00	; 0
    13c6:	55 d2       	rcall	.+1194   	; 0x1872 <USART_sendstr>
				
				u16toa_align_right(adc_filtered_value,str,5,' ');		// ADC filtered value
    13c8:	20 e2       	ldi	r18, 0x20	; 32
    13ca:	45 e0       	ldi	r20, 0x05	; 5
    13cc:	be 01       	movw	r22, r28
    13ce:	6f 5f       	subi	r22, 0xFF	; 255
    13d0:	7f 4f       	sbci	r23, 0xFF	; 255
    13d2:	80 91 da 00 	lds	r24, 0x00DA
    13d6:	90 91 db 00 	lds	r25, 0x00DB
    13da:	38 df       	rcall	.-400    	; 0x124c <u16toa_align_right>
				USART_sendstr(str);
    13dc:	ce 01       	movw	r24, r28
    13de:	01 96       	adiw	r24, 0x01	; 1
    13e0:	48 d2       	rcall	.+1168   	; 0x1872 <USART_sendstr>
				USART_sendstr("     ");
    13e2:	89 e9       	ldi	r24, 0x99	; 153
    13e4:	90 e0       	ldi	r25, 0x00	; 0
    13e6:	45 d2       	rcall	.+1162   	; 0x1872 <USART_sendstr>
				
				u16toa_align_right(adc_filtered_celsius,str,5,' ');		// Celsius degree
    13e8:	20 e2       	ldi	r18, 0x20	; 32
    13ea:	45 e0       	ldi	r20, 0x05	; 5
    13ec:	be 01       	movw	r22, r28
    13ee:	6f 5f       	subi	r22, 0xFF	; 255
    13f0:	7f 4f       	sbci	r23, 0xFF	; 255
    13f2:	80 91 dc 00 	lds	r24, 0x00DC
    13f6:	90 91 dd 00 	lds	r25, 0x00DD
    13fa:	28 df       	rcall	.-432    	; 0x124c <u16toa_align_right>
				USART_sendstr(str);
    13fc:	ce 01       	movw	r24, r28
    13fe:	01 96       	adiw	r24, 0x01	; 1
    1400:	38 d2       	rcall	.+1136   	; 0x1872 <USART_sendstr>
				USART_sendstr("     ");
    1402:	89 e9       	ldi	r24, 0x99	; 153
    1404:	90 e0       	ldi	r25, 0x00	; 0
    1406:	35 d2       	rcall	.+1130   	; 0x1872 <USART_sendstr>
				
				u16toa_align_right(ctrl_heater,str,2,' ');				// Heater control (0 to 10)
    1408:	20 e2       	ldi	r18, 0x20	; 32
    140a:	42 e0       	ldi	r20, 0x02	; 2
    140c:	be 01       	movw	r22, r28
    140e:	6f 5f       	subi	r22, 0xFF	; 255
    1410:	7f 4f       	sbci	r23, 0xFF	; 255
    1412:	80 91 ce 00 	lds	r24, 0x00CE
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	19 df       	rcall	.-462    	; 0x124c <u16toa_align_right>
				USART_sendstr(str);
    141a:	ce 01       	movw	r24, r28
    141c:	01 96       	adiw	r24, 0x01	; 1
    141e:	29 d2       	rcall	.+1106   	; 0x1872 <USART_sendstr>
				USART_sendstr("     ");
    1420:	89 e9       	ldi	r24, 0x99	; 153
    1422:	90 e0       	ldi	r25, 0x00	; 0
    1424:	26 d2       	rcall	.+1100   	; 0x1872 <USART_sendstr>
				
				
				USART_sendstr("\n\r");
    1426:	8f e9       	ldi	r24, 0x9F	; 159
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	23 d2       	rcall	.+1094   	; 0x1872 <USART_sendstr>
				
				uart_log_counter++;
    142c:	ff ef       	ldi	r31, 0xFF	; 255
    142e:	ef 1a       	sub	r14, r31
    1430:	ff 0a       	sbc	r15, r31
				//---------------------------------//
				
			}
			
			
			processAutoPowerOff();	// TODO
    1432:	b8 d9       	rcall	.-3216   	; 0x7a4 <processAutoPowerOff>
			
			
			
			menuUpdateTimer.FOvfl = 0;	
    1434:	f8 01       	movw	r30, r16
    1436:	80 81       	ld	r24, Z
    1438:	8f 7b       	andi	r24, 0xBF	; 191
    143a:	80 83       	st	Z, r24
    143c:	94 cf       	rjmp	.-216    	; 0x1366 <main+0x40>

0000143e <setHeaterControl>:


// User function to control heater intensity
void setHeaterControl(uint8_t value)
{
	ctrl_heater = value;
    143e:	80 93 ce 00 	sts	0x00CE, r24
	heaterState &= ~READY_TO_UPDATE_HEATER;
    1442:	90 91 cd 00 	lds	r25, 0x00CD
    1446:	29 2f       	mov	r18, r25
    1448:	2f 77       	andi	r18, 0x7F	; 127
	
	if (ctrl_heater)
    144a:	88 23       	and	r24, r24
    144c:	21 f0       	breq	.+8      	; 0x1456 <setHeaterControl+0x18>
		heaterState |= HEATER_ENABLED;
    144e:	20 64       	ori	r18, 0x40	; 64
    1450:	20 93 cd 00 	sts	0x00CD, r18
    1454:	08 95       	ret
	else
		heaterState &= ~HEATER_ENABLED;	
    1456:	9f 73       	andi	r25, 0x3F	; 63
    1458:	90 93 cd 00 	sts	0x00CD, r25
    145c:	08 95       	ret

0000145e <setMotorDirection>:
	
// User function to control motor rotation
void setMotorDirection(uint8_t dir)
{
	// Disable interrupts from timer0 
	TIMSK &= ~(1<<TOIE0);
    145e:	99 b7       	in	r25, 0x39	; 57
    1460:	9e 7f       	andi	r25, 0xFE	; 254
    1462:	99 bf       	out	0x39, r25	; 57
		
	newDirReq = dir;	// save new direction request
    1464:	80 93 cf 00 	sts	0x00CF, r24
	
	if (dir & ROLL_FWD)
    1468:	80 ff       	sbrs	r24, 0
    146a:	09 c0       	rjmp	.+18     	; 0x147e <setMotorDirection+0x20>
		bottomPoint = rollPoint;
    146c:	80 91 d0 00 	lds	r24, 0x00D0
    1470:	90 91 d1 00 	lds	r25, 0x00D1
    1474:	90 93 d3 00 	sts	0x00D3, r25
    1478:	80 93 d2 00 	sts	0x00D2, r24
    147c:	0a c0       	rjmp	.+20     	; 0x1492 <setMotorDirection+0x34>
	else if (dir & ROLL_REV)
    147e:	81 ff       	sbrs	r24, 1
    1480:	08 c0       	rjmp	.+16     	; 0x1492 <setMotorDirection+0x34>
		topPoint = rollPoint;
    1482:	80 91 d0 00 	lds	r24, 0x00D0
    1486:	90 91 d1 00 	lds	r25, 0x00D1
    148a:	90 93 d5 00 	sts	0x00D5, r25
    148e:	80 93 d4 00 	sts	0x00D4, r24
		

	// Enable interrupts from timer 0
	TIMSK |= (1<<TOIE0);	
    1492:	89 b7       	in	r24, 0x39	; 57
    1494:	81 60       	ori	r24, 0x01	; 1
    1496:	89 bf       	out	0x39, r24	; 57
    1498:	08 95       	ret

0000149a <stopCycleRolling>:
}

void stopCycleRolling(uint8_t doResetPoints)
{
	// Disable interrupts from timer0 
	TIMSK &= ~(1<<TOIE0);
    149a:	99 b7       	in	r25, 0x39	; 57
    149c:	9e 7f       	andi	r25, 0xFE	; 254
    149e:	99 bf       	out	0x39, r25	; 57
	
	rollState &= ~ROLL_CYCLE;
    14a0:	90 91 cc 00 	lds	r25, 0x00CC
    14a4:	9b 7f       	andi	r25, 0xFB	; 251
    14a6:	90 93 cc 00 	sts	0x00CC, r25
	if (doResetPoints)
    14aa:	88 23       	and	r24, r24
    14ac:	71 f0       	breq	.+28     	; 0x14ca <stopCycleRolling+0x30>
	{
		topPoint = bottomPoint = rollPoint;
    14ae:	80 91 d0 00 	lds	r24, 0x00D0
    14b2:	90 91 d1 00 	lds	r25, 0x00D1
    14b6:	90 93 d3 00 	sts	0x00D3, r25
    14ba:	80 93 d2 00 	sts	0x00D2, r24
    14be:	90 93 d5 00 	sts	0x00D5, r25
    14c2:	80 93 d4 00 	sts	0x00D4, r24
		activeRollCycle = 0;	
    14c6:	10 92 0e 01 	sts	0x010E, r1
	}		
	
	// Enable interrupts from timer 0
	TIMSK |= (1<<TOIE0);
    14ca:	89 b7       	in	r24, 0x39	; 57
    14cc:	81 60       	ori	r24, 0x01	; 1
    14ce:	89 bf       	out	0x39, r24	; 57
    14d0:	08 95       	ret

000014d2 <isTopPointValid>:
}
*/

uint8_t isTopPointValid(void)
{
	return (	(int16_t)(topPoint - rollPoint) >= 0 );
    14d2:	80 91 d4 00 	lds	r24, 0x00D4
    14d6:	90 91 d5 00 	lds	r25, 0x00D5
    14da:	20 91 d0 00 	lds	r18, 0x00D0
    14de:	30 91 d1 00 	lds	r19, 0x00D1
    14e2:	82 1b       	sub	r24, r18
    14e4:	93 0b       	sbc	r25, r19
    14e6:	89 2f       	mov	r24, r25
    14e8:	80 95       	com	r24
}
    14ea:	88 1f       	adc	r24, r24
    14ec:	88 27       	eor	r24, r24
    14ee:	88 1f       	adc	r24, r24
    14f0:	08 95       	ret

000014f2 <isBottomPointValid>:

uint8_t isBottomPointValid(void)
{
	return (	(int16_t)(rollPoint - bottomPoint) >= 0	);
    14f2:	80 91 d0 00 	lds	r24, 0x00D0
    14f6:	90 91 d1 00 	lds	r25, 0x00D1
    14fa:	20 91 d2 00 	lds	r18, 0x00D2
    14fe:	30 91 d3 00 	lds	r19, 0x00D3
    1502:	82 1b       	sub	r24, r18
    1504:	93 0b       	sbc	r25, r19
    1506:	89 2f       	mov	r24, r25
    1508:	80 95       	com	r24
}
    150a:	88 1f       	adc	r24, r24
    150c:	88 27       	eor	r24, r24
    150e:	88 1f       	adc	r24, r24
    1510:	08 95       	ret

00001512 <startCycleRolling>:


uint8_t startCycleRolling(void)
{
	// Disable interrupts from timer0 
	TIMSK &= ~(1<<TOIE0);
    1512:	89 b7       	in	r24, 0x39	; 57
    1514:	8e 7f       	andi	r24, 0xFE	; 254
    1516:	89 bf       	out	0x39, r24	; 57
	
	if ( isTopPointValid() && isBottomPointValid() )
    1518:	dc df       	rcall	.-72     	; 0x14d2 <isTopPointValid>
    151a:	88 23       	and	r24, r24
    151c:	59 f0       	breq	.+22     	; 0x1534 <startCycleRolling+0x22>
    151e:	e9 df       	rcall	.-46     	; 0x14f2 <isBottomPointValid>
    1520:	88 23       	and	r24, r24
    1522:	41 f0       	breq	.+16     	; 0x1534 <startCycleRolling+0x22>
	{
		rollState |= ROLL_CYCLE;
    1524:	80 91 cc 00 	lds	r24, 0x00CC
    1528:	84 60       	ori	r24, 0x04	; 4
    152a:	80 93 cc 00 	sts	0x00CC, r24
		activeRollCycle = 1;
    152e:	81 e0       	ldi	r24, 0x01	; 1
    1530:	80 93 0e 01 	sts	0x010E, r24
	}
	
	// Enable interrupts from timer 0
	TIMSK |= (1<<TOIE0);
    1534:	89 b7       	in	r24, 0x39	; 57
    1536:	81 60       	ori	r24, 0x01	; 1
    1538:	89 bf       	out	0x39, r24	; 57
	
	return (rollState & ROLL_CYCLE);
    153a:	80 91 cc 00 	lds	r24, 0x00CC
}
    153e:	84 70       	andi	r24, 0x04	; 4
    1540:	08 95       	ret

00001542 <__vector_16>:




ISR(ANA_COMP_vect)
{
    1542:	1f 92       	push	r1
    1544:	0f 92       	push	r0
    1546:	0f b6       	in	r0, 0x3f	; 63
    1548:	0f 92       	push	r0
    154a:	11 24       	eor	r1, r1
    154c:	8f 93       	push	r24
    154e:	9f 93       	push	r25
	// Once triggered, disable further comparator interrupt
	ACSR &= ~(1<<ACIE);
    1550:	43 98       	cbi	0x08, 3	; 8
	// Turn on heater TRIAC
	if (heater_cnt < ctrl_heater_sync)
    1552:	90 91 d6 00 	lds	r25, 0x00D6
    1556:	80 91 d7 00 	lds	r24, 0x00D7
    155a:	98 17       	cp	r25, r24
    155c:	20 f4       	brcc	.+8      	; 0x1566 <__vector_16+0x24>
		PORTD |= (1<<PD_HEATER | 1<<PD_HEAT_INDIC);	// Direct heater indication
    155e:	82 b3       	in	r24, 0x12	; 18
    1560:	80 63       	ori	r24, 0x30	; 48
    1562:	82 bb       	out	0x12, r24	; 18
    1564:	01 c0       	rjmp	.+2      	; 0x1568 <__vector_16+0x26>
	else
		PORTD &= ~(1<<PD_HEAT_INDIC);
    1566:	95 98       	cbi	0x12, 5	; 18
	// Reprogram timer0
	TCNT0 = 256 - TRIAC_IMPULSE_TIME;		// Triac gate impulse time
    1568:	86 ef       	ldi	r24, 0xF6	; 246
    156a:	82 bf       	out	0x32, r24	; 50
	// Modify state	
	p_state &= ~STATE_MASK;					// Start new state machine cycle
    156c:	80 91 62 00 	lds	r24, 0x0062
    1570:	80 7f       	andi	r24, 0xF0	; 240
	p_state ^= HALF_PERIOD_FLAG;			// Toggle flag
    1572:	80 58       	subi	r24, 0x80	; 128
    1574:	80 93 62 00 	sts	0x0062, r24
	
}
    1578:	9f 91       	pop	r25
    157a:	8f 91       	pop	r24
    157c:	0f 90       	pop	r0
    157e:	0f be       	out	0x3f, r0	; 63
    1580:	0f 90       	pop	r0
    1582:	1f 90       	pop	r1
    1584:	18 95       	reti

00001586 <__vector_9>:



ISR(TIMER0_OVF_vect)
{
    1586:	1f 92       	push	r1
    1588:	0f 92       	push	r0
    158a:	0f b6       	in	r0, 0x3f	; 63
    158c:	0f 92       	push	r0
    158e:	11 24       	eor	r1, r1
    1590:	2f 93       	push	r18
    1592:	3f 93       	push	r19
    1594:	4f 93       	push	r20
    1596:	5f 93       	push	r21
    1598:	6f 93       	push	r22
    159a:	7f 93       	push	r23
    159c:	8f 93       	push	r24
    159e:	9f 93       	push	r25
    15a0:	af 93       	push	r26
    15a2:	bf 93       	push	r27
    15a4:	ef 93       	push	r30
    15a6:	ff 93       	push	r31
	uint8_t temp;
	
	switch(p_state & STATE_MASK)
    15a8:	80 91 62 00 	lds	r24, 0x0062
    15ac:	8f 70       	andi	r24, 0x0F	; 15
    15ae:	81 30       	cpi	r24, 0x01	; 1
    15b0:	51 f0       	breq	.+20     	; 0x15c6 <__vector_9+0x40>
    15b2:	28 f0       	brcs	.+10     	; 0x15be <__vector_9+0x38>
    15b4:	82 30       	cpi	r24, 0x02	; 2
    15b6:	79 f0       	breq	.+30     	; 0x15d6 <__vector_9+0x50>
    15b8:	83 30       	cpi	r24, 0x03	; 3
    15ba:	99 f4       	brne	.+38     	; 0x15e2 <__vector_9+0x5c>
    15bc:	11 c0       	rjmp	.+34     	; 0x15e0 <__vector_9+0x5a>
	{
		// TRIAC_IMPULSE_TIME finished
		case 0x00:
			// Turn off heater TRIAC
			PORTD &= ~(1<<PD_HEATER);
    15be:	94 98       	cbi	0x12, 4	; 18
			TCNT0 = 256 - (QUATER_PERIOD_TIME - TRIAC_IMPULSE_TIME);
    15c0:	8c eb       	ldi	r24, 0xBC	; 188
    15c2:	82 bf       	out	0x32, r24	; 50
			break;
    15c4:	0e c0       	rjmp	.+28     	; 0x15e2 <__vector_9+0x5c>
		// QUATER_PERIOD_TIME finished	
		case 0x01:	
			TCNT0 = 256 - (SYNC_IGNORE_TIME - QUATER_PERIOD_TIME);
    15c6:	82 ec       	ldi	r24, 0xC2	; 194
    15c8:	82 bf       	out	0x32, r24	; 50
			// Start ADC conversion once every AC line period
			if (!(p_state & HALF_PERIOD_FLAG))
    15ca:	80 91 62 00 	lds	r24, 0x0062
    15ce:	88 23       	and	r24, r24
    15d0:	44 f0       	brlt	.+16     	; 0x15e2 <__vector_9+0x5c>
				ADCSRA |= (1<<ADSC);
    15d2:	36 9a       	sbi	0x06, 6	; 6
    15d4:	06 c0       	rjmp	.+12     	; 0x15e2 <__vector_9+0x5c>
			break;	
		// SYNC_IGNORE_TIME finished	
		case 0x02:
			TCNT0 = 256 - SYNC_LOST_TIMEOUT;
    15d6:	80 ee       	ldi	r24, 0xE0	; 224
    15d8:	82 bf       	out	0x32, r24	; 50
			// Clear flag and enable interrupt from analog comparator
			ACSR |= (1<<ACI);
    15da:	44 9a       	sbi	0x08, 4	; 8
			ACSR |= (1<<ACIE);
    15dc:	43 9a       	sbi	0x08, 3	; 8
			break;
    15de:	01 c0       	rjmp	.+2      	; 0x15e2 <__vector_9+0x5c>
		// SYNC_LOST_TIMEOUT finished
		case 0x03:
			// Error - sync is lost. It means that device has been disconnected from AC line.
			// Disable all power-consuming devices like LEDs and save user settings to EEPROM.
			exitPowerOff();
    15e0:	e0 d8       	rcall	.-3648   	; 0x7a2 <exitPowerOff>
			// Sync is not present - TODO
			break;
	}	

	// Full period check
	if ((p_state & (HALF_PERIOD_FLAG | STATE_MASK)) == (HALF_PERIOD_FLAG | 0x01))
    15e2:	80 91 62 00 	lds	r24, 0x0062
    15e6:	8f 78       	andi	r24, 0x8F	; 143
    15e8:	81 38       	cpi	r24, 0x81	; 129
    15ea:	09 f0       	breq	.+2      	; 0x15ee <__vector_9+0x68>
    15ec:	93 c0       	rjmp	.+294    	; 0x1714 <__vector_9+0x18e>
	{
		// Full AC line period is done. Update controls.
		
		temp = PORTD;
    15ee:	92 b3       	in	r25, 0x12	; 18
		temp &= ~(1<<PD_M1 | 1<<PD_M2);
    15f0:	93 7f       	andi	r25, 0xF3	; 243
		if ( rollState & SKIP_CURRENT_MOTOR_CTRL )
    15f2:	80 91 cc 00 	lds	r24, 0x00CC
    15f6:	83 ff       	sbrs	r24, 3
    15f8:	05 c0       	rjmp	.+10     	; 0x1604 <__vector_9+0x7e>
		{
			// Direction control changed. Skip current period to allow TRIACs fully close
			rollState &= ~SKIP_CURRENT_MOTOR_CTRL;
    15fa:	87 7f       	andi	r24, 0xF7	; 247
    15fc:	80 93 cc 00 	sts	0x00CC, r24
			PORTD = temp; 	
    1600:	92 bb       	out	0x12, r25	; 18
    1602:	75 c0       	rjmp	.+234    	; 0x16ee <__vector_9+0x168>
		}
		else
		{
			// Apply direction control 
			if (rollState & ROLL_FWD)
    1604:	80 ff       	sbrs	r24, 0
    1606:	02 c0       	rjmp	.+4      	; 0x160c <__vector_9+0x86>
				temp |= (1<<PD_M1);
    1608:	94 60       	ori	r25, 0x04	; 4
    160a:	02 c0       	rjmp	.+4      	; 0x1610 <__vector_9+0x8a>
			else if (rollState & ROLL_REV)
    160c:	81 fd       	sbrc	r24, 1
				temp |= (1<<PD_M2);
    160e:	98 60       	ori	r25, 0x08	; 8
			PORTD = temp; 
    1610:	92 bb       	out	0x12, r25	; 18
// Function to process rolling - sets rotation direction for next period
// Call once per each AC line period
static inline void controlRolling()
{
	// Process cycle rolling
	switch(rollState & (ROLL_FWD | ROLL_REV | ROLL_CYCLE))
    1612:	40 91 cc 00 	lds	r20, 0x00CC
    1616:	84 2f       	mov	r24, r20
    1618:	87 70       	andi	r24, 0x07	; 7
    161a:	85 30       	cpi	r24, 0x05	; 5
    161c:	19 f0       	breq	.+6      	; 0x1624 <__vector_9+0x9e>
    161e:	86 30       	cpi	r24, 0x06	; 6
    1620:	f1 f5       	brne	.+124    	; 0x169e <__vector_9+0x118>
    1622:	1f c0       	rjmp	.+62     	; 0x1662 <__vector_9+0xdc>
//---------------------------------------------//
//---------------------------------------------//

static inline uint8_t reachedTopPoint(void)
{
	return (	(int16_t)(topPoint - rollPoint) <= 0 );
    1624:	80 91 d4 00 	lds	r24, 0x00D4
    1628:	90 91 d5 00 	lds	r25, 0x00D5
    162c:	20 91 d0 00 	lds	r18, 0x00D0
    1630:	30 91 d1 00 	lds	r19, 0x00D1
    1634:	82 1b       	sub	r24, r18
    1636:	93 0b       	sbc	r25, r19
{
	// Process cycle rolling
	switch(rollState & (ROLL_FWD | ROLL_REV | ROLL_CYCLE))
	{
		case (ROLL_FWD | ROLL_CYCLE):
			if (reachedTopPoint())
    1638:	18 16       	cp	r1, r24
    163a:	19 06       	cpc	r1, r25
    163c:	84 f1       	brlt	.+96     	; 0x169e <__vector_9+0x118>
			{
				if (activeRollCycle >= rollCycleSet)	
    163e:	80 91 0e 01 	lds	r24, 0x010E
    1642:	90 91 e2 00 	lds	r25, 0x00E2
    1646:	89 17       	cp	r24, r25
    1648:	28 f0       	brcs	.+10     	; 0x1654 <__vector_9+0xce>
				{
					// DONE!
					rollState &= ~ROLL_CYCLE;
    164a:	4b 7f       	andi	r20, 0xFB	; 251
					rollState |= CYCLE_ROLL_DONE;
    164c:	40 61       	ori	r20, 0x10	; 16
    164e:	40 93 cc 00 	sts	0x00CC, r20
    1652:	25 c0       	rjmp	.+74     	; 0x169e <__vector_9+0x118>
				}
				else
				{
					activeRollCycle++;
    1654:	8f 5f       	subi	r24, 0xFF	; 255
    1656:	80 93 0e 01 	sts	0x010E, r24
					// Change dir	
					newDirReq = ROLL_REV;				
    165a:	82 e0       	ldi	r24, 0x02	; 2
    165c:	80 93 cf 00 	sts	0x00CF, r24
    1660:	1e c0       	rjmp	.+60     	; 0x169e <__vector_9+0x118>
	return (	(int16_t)(topPoint - rollPoint) <= 0 );
}

static inline uint8_t reachedBottomPoint(void)
{
	return (	(int16_t)(rollPoint - bottomPoint) <= 0 );
    1662:	80 91 d0 00 	lds	r24, 0x00D0
    1666:	90 91 d1 00 	lds	r25, 0x00D1
    166a:	20 91 d2 00 	lds	r18, 0x00D2
    166e:	30 91 d3 00 	lds	r19, 0x00D3
    1672:	82 1b       	sub	r24, r18
    1674:	93 0b       	sbc	r25, r19
				}
			}
			break;
		
		case (ROLL_REV | ROLL_CYCLE):	
			if (reachedBottomPoint())
    1676:	18 16       	cp	r1, r24
    1678:	19 06       	cpc	r1, r25
    167a:	8c f0       	brlt	.+34     	; 0x169e <__vector_9+0x118>
			{
				if (activeRollCycle >= rollCycleSet)	
    167c:	80 91 0e 01 	lds	r24, 0x010E
    1680:	90 91 e2 00 	lds	r25, 0x00E2
    1684:	89 17       	cp	r24, r25
    1686:	28 f0       	brcs	.+10     	; 0x1692 <__vector_9+0x10c>
				{
					// DONE!
					rollState &= ~ROLL_CYCLE;
    1688:	4b 7f       	andi	r20, 0xFB	; 251
					rollState |= CYCLE_ROLL_DONE;
    168a:	40 61       	ori	r20, 0x10	; 16
    168c:	40 93 cc 00 	sts	0x00CC, r20
    1690:	06 c0       	rjmp	.+12     	; 0x169e <__vector_9+0x118>
				}
				else
				{
					activeRollCycle++;
    1692:	8f 5f       	subi	r24, 0xFF	; 255
    1694:	80 93 0e 01 	sts	0x010E, r24
					// Change dir	
					newDirReq = ROLL_FWD;
    1698:	81 e0       	ldi	r24, 0x01	; 1
    169a:	80 93 cf 00 	sts	0x00CF, r24
		default:
			break;
	}
	
	// Process direction change
	if ((rollState ^ newDirReq) & (ROLL_FWD | ROLL_REV))
    169e:	80 91 cc 00 	lds	r24, 0x00CC
    16a2:	90 91 cf 00 	lds	r25, 0x00CF
    16a6:	29 2f       	mov	r18, r25
    16a8:	28 27       	eor	r18, r24
    16aa:	23 70       	andi	r18, 0x03	; 3
    16ac:	19 f0       	breq	.+6      	; 0x16b4 <__vector_9+0x12e>
	{
		rollState |= (SKIP_CURRENT_MOTOR_CTRL | ROLL_DIR_CHANGED);
    16ae:	88 62       	ori	r24, 0x28	; 40
    16b0:	80 93 cc 00 	sts	0x00CC, r24
	}
	rollState &= ~(ROLL_FWD | ROLL_REV);
    16b4:	80 91 cc 00 	lds	r24, 0x00CC
    16b8:	8c 7f       	andi	r24, 0xFC	; 252
	rollState |= newDirReq;
    16ba:	89 2b       	or	r24, r25
    16bc:	80 93 cc 00 	sts	0x00CC, r24
	return (	(int16_t)(rollPoint - bottomPoint) <= 0 );
}

static inline void updateRollPoint(void)
{	
	if (rollState & ROLL_FWD)
    16c0:	80 ff       	sbrs	r24, 0
    16c2:	0a c0       	rjmp	.+20     	; 0x16d8 <__vector_9+0x152>
		rollPoint++;
    16c4:	80 91 d0 00 	lds	r24, 0x00D0
    16c8:	90 91 d1 00 	lds	r25, 0x00D1
    16cc:	01 96       	adiw	r24, 0x01	; 1
    16ce:	90 93 d1 00 	sts	0x00D1, r25
    16d2:	80 93 d0 00 	sts	0x00D0, r24
    16d6:	0b c0       	rjmp	.+22     	; 0x16ee <__vector_9+0x168>
	else if (rollState & ROLL_REV)
    16d8:	81 ff       	sbrs	r24, 1
    16da:	09 c0       	rjmp	.+18     	; 0x16ee <__vector_9+0x168>
		rollPoint--;	
    16dc:	80 91 d0 00 	lds	r24, 0x00D0
    16e0:	90 91 d1 00 	lds	r25, 0x00D1
    16e4:	01 97       	sbiw	r24, 0x01	; 1
    16e6:	90 93 d1 00 	sts	0x00D1, r25
    16ea:	80 93 d0 00 	sts	0x00D0, r24
			controlRolling();
		}
			

		// Process heater control counter
		if (heater_cnt == HEATER_REGULATION_PERIODS - 1)
    16ee:	80 91 d6 00 	lds	r24, 0x00D6
    16f2:	89 30       	cpi	r24, 0x09	; 9
    16f4:	61 f4       	brne	.+24     	; 0x170e <__vector_9+0x188>
		{
			heater_cnt = 0;
    16f6:	10 92 d6 00 	sts	0x00D6, r1
			ctrl_heater_sync = ctrl_heater;
    16fa:	80 91 ce 00 	lds	r24, 0x00CE
    16fe:	80 93 d7 00 	sts	0x00D7, r24
			heaterState |= READY_TO_UPDATE_HEATER;
    1702:	80 91 cd 00 	lds	r24, 0x00CD
    1706:	80 68       	ori	r24, 0x80	; 128
    1708:	80 93 cd 00 	sts	0x00CD, r24
    170c:	03 c0       	rjmp	.+6      	; 0x1714 <__vector_9+0x18e>
		}
		else
		{
			heater_cnt++;
    170e:	8f 5f       	subi	r24, 0xFF	; 255
    1710:	80 93 d6 00 	sts	0x00D6, r24
			
			
	}
	

	if ((p_state & STATE_MASK)  != 0x0F)
    1714:	80 91 62 00 	lds	r24, 0x0062
    1718:	98 2f       	mov	r25, r24
    171a:	9f 70       	andi	r25, 0x0F	; 15
    171c:	9f 30       	cpi	r25, 0x0F	; 15
    171e:	19 f0       	breq	.+6      	; 0x1726 <__vector_9+0x1a0>
		p_state++;
    1720:	8f 5f       	subi	r24, 0xFF	; 255
    1722:	80 93 62 00 	sts	0x0062, r24

}	
    1726:	ff 91       	pop	r31
    1728:	ef 91       	pop	r30
    172a:	bf 91       	pop	r27
    172c:	af 91       	pop	r26
    172e:	9f 91       	pop	r25
    1730:	8f 91       	pop	r24
    1732:	7f 91       	pop	r23
    1734:	6f 91       	pop	r22
    1736:	5f 91       	pop	r21
    1738:	4f 91       	pop	r20
    173a:	3f 91       	pop	r19
    173c:	2f 91       	pop	r18
    173e:	0f 90       	pop	r0
    1740:	0f be       	out	0x3f, r0	; 63
    1742:	0f 90       	pop	r0
    1744:	1f 90       	pop	r1
    1746:	18 95       	reti

00001748 <processSoftTimer8b>:
 
 
 
 
 void processSoftTimer8b(SoftTimer8b_t *tmr)
 {
    1748:	fc 01       	movw	r30, r24
	 uint8_t newTimerVal;

	 if (!tmr->Enabled)
    174a:	80 81       	ld	r24, Z
    174c:	80 ff       	sbrs	r24, 0
    174e:	29 c0       	rjmp	.+82     	; 0x17a2 <processSoftTimer8b+0x5a>
		return;
	 
	 tmr->FA_EQ = 0;
	 tmr->FA_GE = 0;
	 tmr->FTop = 0;
    1750:	87 7e       	andi	r24, 0xE7	; 231
    1752:	8f 7d       	andi	r24, 0xDF	; 223
    1754:	80 83       	st	Z, r24
	 
	 if (tmr->Timer >= tmr->Top)
    1756:	81 81       	ldd	r24, Z+1	; 0x01
    1758:	92 81       	ldd	r25, Z+2	; 0x02
    175a:	89 17       	cp	r24, r25
    175c:	58 f0       	brcs	.+22     	; 0x1774 <processSoftTimer8b+0x2c>
	 {
		 if (tmr->RunOnce)
    175e:	90 81       	ld	r25, Z
    1760:	91 ff       	sbrs	r25, 1
    1762:	02 c0       	rjmp	.+4      	; 0x1768 <processSoftTimer8b+0x20>
		 {
			 tmr->Enabled = 0;
    1764:	9e 7f       	andi	r25, 0xFE	; 254
    1766:	90 83       	st	Z, r25
		 }
		 tmr->FTop = 1;
    1768:	90 81       	ld	r25, Z
		 tmr->FOvfl = 1;
    176a:	90 62       	ori	r25, 0x20	; 32
    176c:	90 64       	ori	r25, 0x40	; 64
    176e:	90 83       	st	Z, r25
		 newTimerVal = 0;
    1770:	20 e0       	ldi	r18, 0x00	; 0
    1772:	02 c0       	rjmp	.+4      	; 0x1778 <processSoftTimer8b+0x30>
	 }
	 else
	 {
		 newTimerVal = tmr->Timer + 1;
    1774:	28 2f       	mov	r18, r24
    1776:	2f 5f       	subi	r18, 0xFF	; 255
	 }
	 
	 if (tmr->Timer == tmr->CompA)
    1778:	93 81       	ldd	r25, Z+3	; 0x03
    177a:	89 13       	cpse	r24, r25
    177c:	0c c0       	rjmp	.+24     	; 0x1796 <processSoftTimer8b+0x4e>
	 {
		 tmr->FA_EQ = 1;
    177e:	80 81       	ld	r24, Z
		 tmr->FA_GE = 1;
    1780:	88 60       	ori	r24, 0x08	; 8
    1782:	80 61       	ori	r24, 0x10	; 16
		 tmr->FA_TGL = !tmr->FA_TGL;
    1784:	82 fb       	bst	r24, 2
    1786:	33 27       	eor	r19, r19
    1788:	30 f9       	bld	r19, 0
    178a:	91 e0       	ldi	r25, 0x01	; 1
    178c:	93 27       	eor	r25, r19
    178e:	90 fb       	bst	r25, 0
    1790:	82 f9       	bld	r24, 2
    1792:	80 83       	st	Z, r24
    1794:	05 c0       	rjmp	.+10     	; 0x17a0 <processSoftTimer8b+0x58>
	 }
	 else if (tmr->Timer >= tmr->CompA)
    1796:	89 17       	cp	r24, r25
    1798:	18 f0       	brcs	.+6      	; 0x17a0 <processSoftTimer8b+0x58>
	 {
		 tmr->FA_GE = 1;
    179a:	80 81       	ld	r24, Z
    179c:	80 61       	ori	r24, 0x10	; 16
    179e:	80 83       	st	Z, r24
	 }
	 
	 tmr->Timer = newTimerVal; 
    17a0:	21 83       	std	Z+1, r18	; 0x01
    17a2:	08 95       	ret

000017a4 <SetBeeperFreq>:
}

// Setup beeper frequency (Hz)
void SetBeeperFreq(uint16_t freq_hz)
{
	uint16_t period_us = 1000000 / freq_hz;
    17a4:	9c 01       	movw	r18, r24
    17a6:	40 e0       	ldi	r20, 0x00	; 0
    17a8:	50 e0       	ldi	r21, 0x00	; 0
    17aa:	60 e4       	ldi	r22, 0x40	; 64
    17ac:	72 e4       	ldi	r23, 0x42	; 66
    17ae:	8f e0       	ldi	r24, 0x0F	; 15
    17b0:	90 e0       	ldi	r25, 0x00	; 0
    17b2:	86 d0       	rcall	.+268    	; 0x18c0 <__divmodsi4>
	if (period_us & 0xFFF8)
    17b4:	da 01       	movw	r26, r20
    17b6:	c9 01       	movw	r24, r18
    17b8:	88 7f       	andi	r24, 0xF8	; 248
    17ba:	aa 27       	eor	r26, r26
    17bc:	bb 27       	eor	r27, r27
    17be:	89 2b       	or	r24, r25
    17c0:	59 f0       	breq	.+22     	; 0x17d8 <SetBeeperFreq+0x34>
		OCR1A = (period_us>>3) - 1;
    17c2:	36 95       	lsr	r19
    17c4:	27 95       	ror	r18
    17c6:	36 95       	lsr	r19
    17c8:	27 95       	ror	r18
    17ca:	36 95       	lsr	r19
    17cc:	27 95       	ror	r18
    17ce:	21 50       	subi	r18, 0x01	; 1
    17d0:	31 09       	sbc	r19, r1
    17d2:	3b bd       	out	0x2b, r19	; 43
    17d4:	2a bd       	out	0x2a, r18	; 42
    17d6:	04 c0       	rjmp	.+8      	; 0x17e0 <SetBeeperFreq+0x3c>
	else
		OCR1A = 0x1;
    17d8:	81 e0       	ldi	r24, 0x01	; 1
    17da:	90 e0       	ldi	r25, 0x00	; 0
    17dc:	9b bd       	out	0x2b, r25	; 43
    17de:	8a bd       	out	0x2a, r24	; 42
	TCNT1 = 0;
    17e0:	1d bc       	out	0x2d, r1	; 45
    17e2:	1c bc       	out	0x2c, r1	; 44
    17e4:	08 95       	ret

000017e6 <StartBeep>:
}

// Beep for some time in ms
void StartBeep(uint16_t time_ms)
{
	if (sound_enable)
    17e6:	20 91 e1 00 	lds	r18, 0x00E1
    17ea:	22 23       	and	r18, r18
    17ec:	39 f0       	breq	.+14     	; 0x17fc <StartBeep+0x16>
	{
		beep_cnt = time_ms;
    17ee:	90 93 d9 00 	sts	0x00D9, r25
    17f2:	80 93 d8 00 	sts	0x00D8, r24
// Enable / disable beeper output
inline void SetBeepOutput(uint8_t val)
{
	if (val)
		// Toggle OCR1A on compare match
		TCCR1A |= (1<<COM1A0);
    17f6:	8f b5       	in	r24, 0x2f	; 47
    17f8:	80 64       	ori	r24, 0x40	; 64
    17fa:	8f bd       	out	0x2f, r24	; 47
    17fc:	08 95       	ret

000017fe <__vector_3>:
}



ISR(TIMER2_COMP_vect)
{	
    17fe:	1f 92       	push	r1
    1800:	0f 92       	push	r0
    1802:	0f b6       	in	r0, 0x3f	; 63
    1804:	0f 92       	push	r0
    1806:	11 24       	eor	r1, r1
    1808:	2f 93       	push	r18
    180a:	3f 93       	push	r19
    180c:	4f 93       	push	r20
    180e:	5f 93       	push	r21
    1810:	6f 93       	push	r22
    1812:	7f 93       	push	r23
    1814:	8f 93       	push	r24
    1816:	9f 93       	push	r25
    1818:	af 93       	push	r26
    181a:	bf 93       	push	r27
    181c:	ef 93       	push	r30
    181e:	ff 93       	push	r31
	// Manage beeper
	if (beep_cnt)
    1820:	80 91 d8 00 	lds	r24, 0x00D8
    1824:	90 91 d9 00 	lds	r25, 0x00D9
    1828:	00 97       	sbiw	r24, 0x00	; 0
    182a:	31 f0       	breq	.+12     	; 0x1838 <__vector_3+0x3a>
		beep_cnt--;
    182c:	01 97       	sbiw	r24, 0x01	; 1
    182e:	90 93 d9 00 	sts	0x00D9, r25
    1832:	80 93 d8 00 	sts	0x00D8, r24
    1836:	03 c0       	rjmp	.+6      	; 0x183e <__vector_3+0x40>
	if (val)
		// Toggle OCR1A on compare match
		TCCR1A |= (1<<COM1A0);
	else
		// Disable OCR1A output
		TCCR1A &= ~(1<<COM1A0 | 1<<COM1A1);
    1838:	8f b5       	in	r24, 0x2f	; 47
    183a:	8f 73       	andi	r24, 0x3F	; 63
    183c:	8f bd       	out	0x2f, r24	; 47
		beep_cnt--;
	else
		SetBeepOutput(0);	// done
	
	// Manage LED indicator
	processLedIndicator();
    183e:	05 d8       	rcall	.-4086   	; 0x84a <processLedIndicator>
	
	// Process menu update timer
	processSoftTimer8b(&menuUpdateTimer);	
    1840:	83 e6       	ldi	r24, 0x63	; 99
    1842:	90 e0       	ldi	r25, 0x00	; 0
    1844:	81 df       	rcall	.-254    	; 0x1748 <processSoftTimer8b>
	
}
    1846:	ff 91       	pop	r31
    1848:	ef 91       	pop	r30
    184a:	bf 91       	pop	r27
    184c:	af 91       	pop	r26
    184e:	9f 91       	pop	r25
    1850:	8f 91       	pop	r24
    1852:	7f 91       	pop	r23
    1854:	6f 91       	pop	r22
    1856:	5f 91       	pop	r21
    1858:	4f 91       	pop	r20
    185a:	3f 91       	pop	r19
    185c:	2f 91       	pop	r18
    185e:	0f 90       	pop	r0
    1860:	0f be       	out	0x3f, r0	; 63
    1862:	0f 90       	pop	r0
    1864:	1f 90       	pop	r1
    1866:	18 95       	reti

00001868 <USART_send>:



void USART_send( uint8_t data )
{
	UCSRA |= (1<<TXC);                 // Clear flag
    1868:	5e 9a       	sbi	0x0b, 6	; 11
	UDR = data;
    186a:	8c b9       	out	0x0c, r24	; 12
	while ( !(UCSRA & (1<<TXC)) );  // Wait
    186c:	5e 9b       	sbis	0x0b, 6	; 11
    186e:	fe cf       	rjmp	.-4      	; 0x186c <USART_send+0x4>
}
    1870:	08 95       	ret

00001872 <USART_sendstr>:


void USART_sendstr(char* str)
{
    1872:	1f 93       	push	r17
    1874:	cf 93       	push	r28
    1876:	df 93       	push	r29
    1878:	ec 01       	movw	r28, r24
	uint8_t i = 0;
	while (str[i])
    187a:	88 81       	ld	r24, Y
    187c:	88 23       	and	r24, r24
    187e:	49 f0       	breq	.+18     	; 0x1892 <USART_sendstr+0x20>
}


void USART_sendstr(char* str)
{
	uint8_t i = 0;
    1880:	10 e0       	ldi	r17, 0x00	; 0
	while (str[i])
	{
		USART_send(str[i++]);
    1882:	1f 5f       	subi	r17, 0xFF	; 255
    1884:	f1 df       	rcall	.-30     	; 0x1868 <USART_send>


void USART_sendstr(char* str)
{
	uint8_t i = 0;
	while (str[i])
    1886:	fe 01       	movw	r30, r28
    1888:	e1 0f       	add	r30, r17
    188a:	f1 1d       	adc	r31, r1
    188c:	80 81       	ld	r24, Z
    188e:	81 11       	cpse	r24, r1
    1890:	f8 cf       	rjmp	.-16     	; 0x1882 <USART_sendstr+0x10>
	{
		USART_send(str[i++]);
	}
}
    1892:	df 91       	pop	r29
    1894:	cf 91       	pop	r28
    1896:	1f 91       	pop	r17
    1898:	08 95       	ret

0000189a <__divmodhi4>:
    189a:	97 fb       	bst	r25, 7
    189c:	07 2e       	mov	r0, r23
    189e:	16 f4       	brtc	.+4      	; 0x18a4 <__divmodhi4+0xa>
    18a0:	00 94       	com	r0
    18a2:	06 d0       	rcall	.+12     	; 0x18b0 <__divmodhi4_neg1>
    18a4:	77 fd       	sbrc	r23, 7
    18a6:	08 d0       	rcall	.+16     	; 0x18b8 <__divmodhi4_neg2>
    18a8:	42 d0       	rcall	.+132    	; 0x192e <__udivmodhi4>
    18aa:	07 fc       	sbrc	r0, 7
    18ac:	05 d0       	rcall	.+10     	; 0x18b8 <__divmodhi4_neg2>
    18ae:	3e f4       	brtc	.+14     	; 0x18be <__divmodhi4_exit>

000018b0 <__divmodhi4_neg1>:
    18b0:	90 95       	com	r25
    18b2:	81 95       	neg	r24
    18b4:	9f 4f       	sbci	r25, 0xFF	; 255
    18b6:	08 95       	ret

000018b8 <__divmodhi4_neg2>:
    18b8:	70 95       	com	r23
    18ba:	61 95       	neg	r22
    18bc:	7f 4f       	sbci	r23, 0xFF	; 255

000018be <__divmodhi4_exit>:
    18be:	08 95       	ret

000018c0 <__divmodsi4>:
    18c0:	05 2e       	mov	r0, r21
    18c2:	97 fb       	bst	r25, 7
    18c4:	16 f4       	brtc	.+4      	; 0x18ca <__divmodsi4+0xa>
    18c6:	00 94       	com	r0
    18c8:	06 d0       	rcall	.+12     	; 0x18d6 <__divmodsi4_neg1>
    18ca:	57 fd       	sbrc	r21, 7
    18cc:	0c d0       	rcall	.+24     	; 0x18e6 <__divmodsi4_neg2>
    18ce:	43 d0       	rcall	.+134    	; 0x1956 <__udivmodsi4>
    18d0:	07 fc       	sbrc	r0, 7
    18d2:	09 d0       	rcall	.+18     	; 0x18e6 <__divmodsi4_neg2>
    18d4:	7e f4       	brtc	.+30     	; 0x18f4 <__divmodsi4_exit>

000018d6 <__divmodsi4_neg1>:
    18d6:	90 95       	com	r25
    18d8:	80 95       	com	r24
    18da:	70 95       	com	r23
    18dc:	61 95       	neg	r22
    18de:	7f 4f       	sbci	r23, 0xFF	; 255
    18e0:	8f 4f       	sbci	r24, 0xFF	; 255
    18e2:	9f 4f       	sbci	r25, 0xFF	; 255
    18e4:	08 95       	ret

000018e6 <__divmodsi4_neg2>:
    18e6:	50 95       	com	r21
    18e8:	40 95       	com	r20
    18ea:	30 95       	com	r19
    18ec:	21 95       	neg	r18
    18ee:	3f 4f       	sbci	r19, 0xFF	; 255
    18f0:	4f 4f       	sbci	r20, 0xFF	; 255
    18f2:	5f 4f       	sbci	r21, 0xFF	; 255

000018f4 <__divmodsi4_exit>:
    18f4:	08 95       	ret

000018f6 <__umulhisi3>:
    18f6:	a2 9f       	mul	r26, r18
    18f8:	b0 01       	movw	r22, r0
    18fa:	b3 9f       	mul	r27, r19
    18fc:	c0 01       	movw	r24, r0
    18fe:	a3 9f       	mul	r26, r19
    1900:	01 d0       	rcall	.+2      	; 0x1904 <__umulhisi3+0xe>
    1902:	b2 9f       	mul	r27, r18
    1904:	70 0d       	add	r23, r0
    1906:	81 1d       	adc	r24, r1
    1908:	11 24       	eor	r1, r1
    190a:	91 1d       	adc	r25, r1
    190c:	08 95       	ret

0000190e <__usmulhisi3>:
    190e:	f3 df       	rcall	.-26     	; 0x18f6 <__umulhisi3>

00001910 <__usmulhisi3_tail>:
    1910:	b7 ff       	sbrs	r27, 7
    1912:	08 95       	ret
    1914:	82 1b       	sub	r24, r18
    1916:	93 0b       	sbc	r25, r19
    1918:	08 95       	ret

0000191a <__muluhisi3>:
    191a:	ed df       	rcall	.-38     	; 0x18f6 <__umulhisi3>
    191c:	a5 9f       	mul	r26, r21
    191e:	90 0d       	add	r25, r0
    1920:	b4 9f       	mul	r27, r20
    1922:	90 0d       	add	r25, r0
    1924:	a4 9f       	mul	r26, r20
    1926:	80 0d       	add	r24, r0
    1928:	91 1d       	adc	r25, r1
    192a:	11 24       	eor	r1, r1
    192c:	08 95       	ret

0000192e <__udivmodhi4>:
    192e:	aa 1b       	sub	r26, r26
    1930:	bb 1b       	sub	r27, r27
    1932:	51 e1       	ldi	r21, 0x11	; 17
    1934:	07 c0       	rjmp	.+14     	; 0x1944 <__udivmodhi4_ep>

00001936 <__udivmodhi4_loop>:
    1936:	aa 1f       	adc	r26, r26
    1938:	bb 1f       	adc	r27, r27
    193a:	a6 17       	cp	r26, r22
    193c:	b7 07       	cpc	r27, r23
    193e:	10 f0       	brcs	.+4      	; 0x1944 <__udivmodhi4_ep>
    1940:	a6 1b       	sub	r26, r22
    1942:	b7 0b       	sbc	r27, r23

00001944 <__udivmodhi4_ep>:
    1944:	88 1f       	adc	r24, r24
    1946:	99 1f       	adc	r25, r25
    1948:	5a 95       	dec	r21
    194a:	a9 f7       	brne	.-22     	; 0x1936 <__udivmodhi4_loop>
    194c:	80 95       	com	r24
    194e:	90 95       	com	r25
    1950:	bc 01       	movw	r22, r24
    1952:	cd 01       	movw	r24, r26
    1954:	08 95       	ret

00001956 <__udivmodsi4>:
    1956:	a1 e2       	ldi	r26, 0x21	; 33
    1958:	1a 2e       	mov	r1, r26
    195a:	aa 1b       	sub	r26, r26
    195c:	bb 1b       	sub	r27, r27
    195e:	fd 01       	movw	r30, r26
    1960:	0d c0       	rjmp	.+26     	; 0x197c <__udivmodsi4_ep>

00001962 <__udivmodsi4_loop>:
    1962:	aa 1f       	adc	r26, r26
    1964:	bb 1f       	adc	r27, r27
    1966:	ee 1f       	adc	r30, r30
    1968:	ff 1f       	adc	r31, r31
    196a:	a2 17       	cp	r26, r18
    196c:	b3 07       	cpc	r27, r19
    196e:	e4 07       	cpc	r30, r20
    1970:	f5 07       	cpc	r31, r21
    1972:	20 f0       	brcs	.+8      	; 0x197c <__udivmodsi4_ep>
    1974:	a2 1b       	sub	r26, r18
    1976:	b3 0b       	sbc	r27, r19
    1978:	e4 0b       	sbc	r30, r20
    197a:	f5 0b       	sbc	r31, r21

0000197c <__udivmodsi4_ep>:
    197c:	66 1f       	adc	r22, r22
    197e:	77 1f       	adc	r23, r23
    1980:	88 1f       	adc	r24, r24
    1982:	99 1f       	adc	r25, r25
    1984:	1a 94       	dec	r1
    1986:	69 f7       	brne	.-38     	; 0x1962 <__udivmodsi4_loop>
    1988:	60 95       	com	r22
    198a:	70 95       	com	r23
    198c:	80 95       	com	r24
    198e:	90 95       	com	r25
    1990:	9b 01       	movw	r18, r22
    1992:	ac 01       	movw	r20, r24
    1994:	bd 01       	movw	r22, r26
    1996:	cf 01       	movw	r24, r30
    1998:	08 95       	ret

0000199a <__eerd_block_m8>:
    199a:	dc 01       	movw	r26, r24
    199c:	cb 01       	movw	r24, r22

0000199e <__eerd_blraw_m8>:
    199e:	fc 01       	movw	r30, r24
    19a0:	e1 99       	sbic	0x1c, 1	; 28
    19a2:	fe cf       	rjmp	.-4      	; 0x19a0 <__eerd_blraw_m8+0x2>
    19a4:	06 c0       	rjmp	.+12     	; 0x19b2 <__eerd_blraw_m8+0x14>
    19a6:	ff bb       	out	0x1f, r31	; 31
    19a8:	ee bb       	out	0x1e, r30	; 30
    19aa:	e0 9a       	sbi	0x1c, 0	; 28
    19ac:	31 96       	adiw	r30, 0x01	; 1
    19ae:	0d b2       	in	r0, 0x1d	; 29
    19b0:	0d 92       	st	X+, r0
    19b2:	41 50       	subi	r20, 0x01	; 1
    19b4:	50 40       	sbci	r21, 0x00	; 0
    19b6:	b8 f7       	brcc	.-18     	; 0x19a6 <__eerd_blraw_m8+0x8>
    19b8:	08 95       	ret

000019ba <_exit>:
    19ba:	f8 94       	cli

000019bc <__stop_program>:
    19bc:	ff cf       	rjmp	.-2      	; 0x19bc <__stop_program>
