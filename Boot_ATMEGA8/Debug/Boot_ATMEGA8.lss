
AVRASM ver. 2.1.52  E:\EXlam\AVR Projects\PDA230CN\Boot_ATMEGA8\Boot_ATMEGA8.asm Sat Apr 20 08:29:49 2013

[builtin](2): Including file 'C:\Program Files (x86)\Atmel\Atmel Studio 6.0\extensions\Atmel\AVRAssembler\2.1.51.64\AvrAssembler/Include\m8def.inc'
E:\EXlam\AVR Projects\PDA230CN\Boot_ATMEGA8\Boot_ATMEGA8.asm(7): Including file 'C:\Program Files (x86)\Atmel\Atmel Studio 6.0\extensions\Atmel\AVRAssembler\2.1.51.64\AvrAssembler/Include\m8def.inc'
                 
                  ;########################################################
                 
                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega8.xml *************
                 ;*************************************************************************
                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                 ;* 
                 ;* Number            : AVR000
                 ;* File Name         : "m8def.inc"
                 ;* Title             : Register/Bit Definitions for the ATmega8
                 ;* Date              : 2011-02-09
                 ;* Version           : 2.35
                 ;* Support E-mail    : avr@atmel.com
                 ;* Target MCU        : ATmega8
                 ;* 
                 ;* DESCRIPTION
                 ;* When including this file in the assembly program file, all I/O register 
                 ;* names and I/O register bit names appearing in the data book can be used.
                 ;* In addition, the six registers forming the three data pointers X, Y and 
                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                 ;* SRAM is also defined 
                 ;* 
                 ;* The Register names are represented by their hexadecimal address.
                 ;* 
                 ;* The Register Bit names are represented by their bit number (0-7).
                 ;* 
                 ;* Please observe the difference in using the bit names with instructions
                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                 ;* (skip if bit in register set/cleared). The following example illustrates
                 ;* this:
                 ;* 
                 ;* in    r16,PORTB             ;read PORTB latch
                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                 ;* out   PORTB,r16             ;output to PORTB
                 ;* 
                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                 ;* rjmp  TOV0_is_set           ;jump if set
                 ;* ...                         ;otherwise do something else
                 ;*************************************************************************
                 
                 #ifndef _M8DEF_INC_
                 #define _M8DEF_INC_
                 
                 
                 #pragma partinc 0
                 
                 ; ***** SPECIFY DEVICE ***************************************************
                 .device ATmega8
                 #pragma AVRPART ADMIN PART_NAME ATmega8
                 .equ	SIGNATURE_000	= 0x1e
                 .equ	SIGNATURE_001	= 0x93
                 .equ	SIGNATURE_002	= 0x07
                 
                 #pragma AVRPART CORE CORE_VERSION V2E
                 
                 
                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                 ; NOTE:
                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                 ; and cannot be used with IN/OUT instructions
                 .equ	SREG	= 0x3f
                 .equ	SPL	= 0x3d
                 .equ	SPH	= 0x3e
                 .equ	GICR	= 0x3b
                 .equ	GIFR	= 0x3a
                 .equ	TIMSK	= 0x39
                 .equ	TIFR	= 0x38
                 .equ	SPMCR	= 0x37
                 .equ	TWCR	= 0x36
                 .equ	MCUCR	= 0x35
                 .equ	MCUCSR	= 0x34
                 .equ	TCCR0	= 0x33
                 .equ	TCNT0	= 0x32
                 .equ	OSCCAL	= 0x31
                 .equ	SFIOR	= 0x30
                 .equ	TCCR1A	= 0x2f
                 .equ	TCCR1B	= 0x2e
                 .equ	TCNT1L	= 0x2c
                 .equ	TCNT1H	= 0x2d
                 .equ	OCR1AL	= 0x2a
                 .equ	OCR1AH	= 0x2b
                 .equ	OCR1BL	= 0x28
                 .equ	OCR1BH	= 0x29
                 .equ	ICR1L	= 0x26
                 .equ	ICR1H	= 0x27
                 .equ	TCCR2	= 0x25
                 .equ	TCNT2	= 0x24
                 .equ	OCR2	= 0x23
                 .equ	ASSR	= 0x22
                 .equ	WDTCR	= 0x21
                 .equ	UBRRH	= 0x20
                 .equ	UCSRC	= 0x20
                 .equ	EEARL	= 0x1e
                 .equ	EEARH	= 0x1f
                 .equ	EEDR	= 0x1d
                 .equ	EECR	= 0x1c
                 .equ	PORTB	= 0x18
                 .equ	DDRB	= 0x17
                 .equ	PINB	= 0x16
                 .equ	PORTC	= 0x15
                 .equ	DDRC	= 0x14
                 .equ	PINC	= 0x13
                 .equ	PORTD	= 0x12
                 .equ	DDRD	= 0x11
                 .equ	PIND	= 0x10
                 .equ	SPDR	= 0x0f
                 .equ	SPSR	= 0x0e
                 .equ	SPCR	= 0x0d
                 .equ	UDR	= 0x0c
                 .equ	UCSRA	= 0x0b
                 .equ	UCSRB	= 0x0a
                 .equ	UBRRL	= 0x09
                 .equ	ACSR	= 0x08
                 .equ	ADMUX	= 0x07
                 .equ	ADCSRA	= 0x06
                 .equ	ADCL	= 0x04
                 .equ	ADCH	= 0x05
                 .equ	TWDR	= 0x03
                 .equ	TWAR	= 0x02
                 .equ	TWSR	= 0x01
                 .equ	TWBR	= 0x00
                 
                 
                 ; ***** BIT DEFINITIONS **************************************************
                 
                 ; ***** ANALOG_COMPARATOR ************
                 ; SFIOR - Special Function IO Register
                 .equ	ACME	= 3	; Analog Comparator Multiplexer Enable
                 
                 ; ACSR - Analog Comparator Control And Status Register
                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                 .equ	ACO	= 5	; Analog Compare Output
                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                 .equ	ACD	= 7	; Analog Comparator Disable
                 
                 
                 ; ***** SPI **************************
                 ; SPDR - SPI Data Register
                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                 
                 ; SPSR - SPI Status Register
                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                 .equ	WCOL	= 6	; Write Collision Flag
                 .equ	SPIF	= 7	; SPI Interrupt Flag
                 
                 ; SPCR - SPI Control Register
                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                 .equ	CPHA	= 2	; Clock Phase
                 .equ	CPOL	= 3	; Clock polarity
                 .equ	MSTR	= 4	; Master/Slave Select
                 .equ	DORD	= 5	; Data Order
                 .equ	SPE	= 6	; SPI Enable
                 .equ	SPIE	= 7	; SPI Interrupt Enable
                 
                 
                 ; ***** EXTERNAL_INTERRUPT ***********
                 ; GICR - General Interrupt Control Register
                 .equ	GIMSK	= GICR	; For compatibility
                 .equ	IVCE	= 0	; Interrupt Vector Change Enable
                 .equ	IVSEL	= 1	; Interrupt Vector Select
                 .equ	INT0	= 6	; External Interrupt Request 0 Enable
                 .equ	INT1	= 7	; External Interrupt Request 1 Enable
                 
                 ; GIFR - General Interrupt Flag Register
                 .equ	INTF0	= 6	; External Interrupt Flag 0
                 .equ	INTF1	= 7	; External Interrupt Flag 1
                 
                 ; MCUCR - MCU Control Register
                 .equ	ISC00	= 0	; Interrupt Sense Control 0 Bit 0
                 .equ	ISC01	= 1	; Interrupt Sense Control 0 Bit 1
                 .equ	ISC10	= 2	; Interrupt Sense Control 1 Bit 0
                 .equ	ISC11	= 3	; Interrupt Sense Control 1 Bit 1
                 
                 
                 ; ***** TIMER_COUNTER_0 **************
                 ; TIMSK - Timer/Counter Interrupt Mask Register
                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                 
                 ; TIFR - Timer/Counter Interrupt Flag register
                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                 
                 ; TCCR0 - Timer/Counter0 Control Register
                 .equ	CS00	= 0	; Clock Select0 bit 0
                 .equ	CS01	= 1	; Clock Select0 bit 1
                 .equ	CS02	= 2	; Clock Select0 bit 2
                 
                 ; TCNT0 - Timer Counter 0
                 .equ	TCNT00	= 0	; Timer Counter 0 bit 0
                 .equ	TCNT01	= 1	; Timer Counter 0 bit 1
                 .equ	TCNT02	= 2	; Timer Counter 0 bit 2
                 .equ	TCNT03	= 3	; Timer Counter 0 bit 3
                 .equ	TCNT04	= 4	; Timer Counter 0 bit 4
                 .equ	TCNT05	= 5	; Timer Counter 0 bit 5
                 .equ	TCNT06	= 6	; Timer Counter 0 bit 6
                 .equ	TCNT07	= 7	; Timer Counter 0 bit 7
                 
                 
                 ; ***** TIMER_COUNTER_1 **************
                 ; TIMSK - Timer/Counter Interrupt Mask Register
                 .equ	TOIE1	= 2	; Timer/Counter1 Overflow Interrupt Enable
                 .equ	OCIE1B	= 3	; Timer/Counter1 Output CompareB Match Interrupt Enable
                 .equ	OCIE1A	= 4	; Timer/Counter1 Output CompareA Match Interrupt Enable
                 .equ	TICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                 
                 ; TIFR - Timer/Counter Interrupt Flag register
                 .equ	TOV1	= 2	; Timer/Counter1 Overflow Flag
                 .equ	OCF1B	= 3	; Output Compare Flag 1B
                 .equ	OCF1A	= 4	; Output Compare Flag 1A
                 .equ	ICF1	= 5	; Input Capture Flag 1
                 
                 ; TCCR1A - Timer/Counter1 Control Register A
                 .equ	WGM10	= 0	; Waveform Generation Mode
                 .equ	PWM10	= WGM10	; For compatibility
                 .equ	WGM11	= 1	; Waveform Generation Mode
                 .equ	PWM11	= WGM11	; For compatibility
                 .equ	FOC1B	= 2	; Force Output Compare 1B
                 .equ	FOC1A	= 3	; Force Output Compare 1A
                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                 .equ	COM1A0	= 6	; Compare Ouput Mode 1A, bit 0
                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                 
                 ; TCCR1B - Timer/Counter1 Control Register B
                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                 .equ	WGM12	= 3	; Waveform Generation Mode
                 .equ	CTC10	= WGM12	; For compatibility
                 .equ	CTC1	= WGM12	; For compatibility
                 .equ	WGM13	= 4	; Waveform Generation Mode
                 .equ	CTC11	= WGM13	; For compatibility
                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                 
                 
                 ; ***** TIMER_COUNTER_2 **************
                 ; TIMSK - Timer/Counter Interrupt Mask register
                 .equ	TOIE2	= 6	; Timer/Counter2 Overflow Interrupt Enable
                 .equ	OCIE2	= 7	; Timer/Counter2 Output Compare Match Interrupt Enable
                 
                 ; TIFR - Timer/Counter Interrupt Flag Register
                 .equ	TOV2	= 6	; Timer/Counter2 Overflow Flag
                 .equ	OCF2	= 7	; Output Compare Flag 2
                 
                 ; TCCR2 - Timer/Counter2 Control Register
                 .equ	CS20	= 0	; Clock Select bit 0
                 .equ	CS21	= 1	; Clock Select bit 1
                 .equ	CS22	= 2	; Clock Select bit 2
                 .equ	WGM21	= 3	; Waveform Generation Mode
                 .equ	CTC2	= WGM21	; For compatibility
                 .equ	COM20	= 4	; Compare Output Mode bit 0
                 .equ	COM21	= 5	; Compare Output Mode bit 1
                 .equ	WGM20	= 6	; Waveform Genration Mode
                 .equ	PWM2	= WGM20	; For compatibility
                 .equ	FOC2	= 7	; Force Output Compare
                 
                 ; TCNT2 - Timer/Counter2
                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                 
                 ; OCR2 - Timer/Counter2 Output Compare Register
                 .equ	OCR2_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                 .equ	OCR2_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                 .equ	OCR2_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                 .equ	OCR2_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                 .equ	OCR2_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                 .equ	OCR2_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                 .equ	OCR2_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                 .equ	OCR2_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                 
                 ; ASSR - Asynchronous Status Register
                 .equ	TCR2UB	= 0	; Timer/counter Control Register2 Update Busy
                 .equ	OCR2UB	= 1	; Output Compare Register2 Update Busy
                 .equ	TCN2UB	= 2	; Timer/Counter2 Update Busy
                 .equ	AS2	= 3	; Asynchronous Timer/counter2
                 
                 ; SFIOR - Special Function IO Register
                 .equ	PSR2	= 1	; Prescaler Reset Timer/Counter2
                 
                 
                 ; ***** USART ************************
                 ; UDR - USART I/O Data Register
                 .equ	UDR0	= 0	; USART I/O Data Register bit 0
                 .equ	UDR1	= 1	; USART I/O Data Register bit 1
                 .equ	UDR2	= 2	; USART I/O Data Register bit 2
                 .equ	UDR3	= 3	; USART I/O Data Register bit 3
                 .equ	UDR4	= 4	; USART I/O Data Register bit 4
                 .equ	UDR5	= 5	; USART I/O Data Register bit 5
                 .equ	UDR6	= 6	; USART I/O Data Register bit 6
                 .equ	UDR7	= 7	; USART I/O Data Register bit 7
                 
                 ; UCSRA - USART Control and Status Register A
                 .equ	USR	= UCSRA	; For compatibility
                 .equ	MPCM	= 0	; Multi-processor Communication Mode
                 .equ	U2X	= 1	; Double the USART transmission speed
                 .equ	UPE	= 2	; Parity Error
                 .equ	PE	= UPE	; For compatibility
                 .equ	DOR	= 3	; Data overRun
                 .equ	FE	= 4	; Framing Error
                 .equ	UDRE	= 5	; USART Data Register Empty
                 .equ	TXC	= 6	; USART Transmitt Complete
                 .equ	RXC	= 7	; USART Receive Complete
                 
                 ; UCSRB - USART Control and Status Register B
                 .equ	UCR	= UCSRB	; For compatibility
                 .equ	TXB8	= 0	; Transmit Data Bit 8
                 .equ	RXB8	= 1	; Receive Data Bit 8
                 .equ	UCSZ2	= 2	; Character Size
                 .equ	CHR9	= UCSZ2	; For compatibility
                 .equ	TXEN	= 3	; Transmitter Enable
                 .equ	RXEN	= 4	; Receiver Enable
                 .equ	UDRIE	= 5	; USART Data register Empty Interrupt Enable
                 .equ	TXCIE	= 6	; TX Complete Interrupt Enable
                 .equ	RXCIE	= 7	; RX Complete Interrupt Enable
                 
                 ; UCSRC - USART Control and Status Register C
                 .equ	UCPOL	= 0	; Clock Polarity
                 .equ	UCSZ0	= 1	; Character Size
                 .equ	UCSZ1	= 2	; Character Size
                 .equ	USBS	= 3	; Stop Bit Select
                 .equ	UPM0	= 4	; Parity Mode Bit 0
                 .equ	UPM1	= 5	; Parity Mode Bit 1
                 .equ	UMSEL	= 6	; USART Mode Select
                 .equ	URSEL	= 7	; Register Select
                 
                 .equ	UBRRHI	= UBRRH	; For compatibility
                 
                 ; ***** TWI **************************
                 ; TWBR - TWI Bit Rate register
                 .equ	I2BR	= TWBR	; For compatibility
                 .equ	TWBR0	= 0	; 
                 .equ	TWBR1	= 1	; 
                 .equ	TWBR2	= 2	; 
                 .equ	TWBR3	= 3	; 
                 .equ	TWBR4	= 4	; 
                 .equ	TWBR5	= 5	; 
                 .equ	TWBR6	= 6	; 
                 .equ	TWBR7	= 7	; 
                 
                 ; TWCR - TWI Control Register
                 .equ	I2CR	= TWCR	; For compatibility
                 .equ	TWIE	= 0	; TWI Interrupt Enable
                 .equ	I2IE	= TWIE	; For compatibility
                 .equ	TWEN	= 2	; TWI Enable Bit
                 .equ	I2EN	= TWEN	; For compatibility
                 .equ	ENI2C	= TWEN	; For compatibility
                 .equ	TWWC	= 3	; TWI Write Collition Flag
                 .equ	I2WC	= TWWC	; For compatibility
                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                 .equ	I2STO	= TWSTO	; For compatibility
                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                 .equ	I2STA	= TWSTA	; For compatibility
                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                 .equ	I2EA	= TWEA	; For compatibility
                 .equ	TWINT	= 7	; TWI Interrupt Flag
                 .equ	I2INT	= TWINT	; For compatibility
                 
                 ; TWSR - TWI Status Register
                 .equ	I2SR	= TWSR	; For compatibility
                 .equ	TWPS0	= 0	; TWI Prescaler
                 .equ	TWS0	= TWPS0	; For compatibility
                 .equ	I2GCE	= TWPS0	; For compatibility
                 .equ	TWPS1	= 1	; TWI Prescaler
                 .equ	TWS1	= TWPS1	; For compatibility
                 .equ	TWS3	= 3	; TWI Status
                 .equ	I2S3	= TWS3	; For compatibility
                 .equ	TWS4	= 4	; TWI Status
                 .equ	I2S4	= TWS4	; For compatibility
                 .equ	TWS5	= 5	; TWI Status
                 .equ	I2S5	= TWS5	; For compatibility
                 .equ	TWS6	= 6	; TWI Status
                 .equ	I2S6	= TWS6	; For compatibility
                 .equ	TWS7	= 7	; TWI Status
                 .equ	I2S7	= TWS7	; For compatibility
                 
                 ; TWDR - TWI Data register
                 .equ	I2DR	= TWDR	; For compatibility
                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                 
                 ; TWAR - TWI (Slave) Address register
                 .equ	I2AR	= TWAR	; For compatibility
                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                 
                 
                 ; ***** WATCHDOG *********************
                 ; WDTCR - Watchdog Timer Control Register
                 .equ	WDTCSR	= WDTCR	; For compatibility
                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                 .equ	WDE	= 3	; Watch Dog Enable
                 .equ	WDCE	= 4	; Watchdog Change Enable
                 .equ	WDTOE	= WDCE	; For compatibility
                 
                 
                 ; ***** PORTB ************************
                 ; PORTB - Port B Data Register
                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                 .equ	PB0	= 0	; For compatibility
                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                 .equ	PB1	= 1	; For compatibility
                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                 .equ	PB2	= 2	; For compatibility
                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                 .equ	PB3	= 3	; For compatibility
                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                 .equ	PB4	= 4	; For compatibility
                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                 .equ	PB5	= 5	; For compatibility
                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                 .equ	PB6	= 6	; For compatibility
                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                 .equ	PB7	= 7	; For compatibility
                 
                 ; DDRB - Port B Data Direction Register
                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                 
                 ; PINB - Port B Input Pins
                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                 
                 
                 ; ***** PORTC ************************
                 ; PORTC - Port C Data Register
                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                 .equ	PC0	= 0	; For compatibility
                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                 .equ	PC1	= 1	; For compatibility
                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                 .equ	PC2	= 2	; For compatibility
                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                 .equ	PC3	= 3	; For compatibility
                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                 .equ	PC4	= 4	; For compatibility
                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                 .equ	PC5	= 5	; For compatibility
                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                 .equ	PC6	= 6	; For compatibility
                 
                 ; DDRC - Port C Data Direction Register
                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                 
                 ; PINC - Port C Input Pins
                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                 
                 
                 ; ***** PORTD ************************
                 ; PORTD - Port D Data Register
                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                 .equ	PD0	= 0	; For compatibility
                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                 .equ	PD1	= 1	; For compatibility
                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                 .equ	PD2	= 2	; For compatibility
                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                 .equ	PD3	= 3	; For compatibility
                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                 .equ	PD4	= 4	; For compatibility
                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                 .equ	PD5	= 5	; For compatibility
                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                 .equ	PD6	= 6	; For compatibility
                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                 .equ	PD7	= 7	; For compatibility
                 
                 ; DDRD - Port D Data Direction Register
                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                 
                 ; PIND - Port D Input Pins
                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                 
                 
                 ; ***** EEPROM ***********************
                 ; EEDR - EEPROM Data Register
                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                 
                 ; EECR - EEPROM Control Register
                 .equ	EERE	= 0	; EEPROM Read Enable
                 .equ	EEWE	= 1	; EEPROM Write Enable
                 .equ	EEMWE	= 2	; EEPROM Master Write Enable
                 .equ	EEWEE	= EEMWE	; For compatibility
                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                 
                 
                 ; ***** CPU **************************
                 ; SREG - Status Register
                 .equ	SREG_C	= 0	; Carry Flag
                 .equ	SREG_Z	= 1	; Zero Flag
                 .equ	SREG_N	= 2	; Negative Flag
                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                 .equ	SREG_S	= 4	; Sign Bit
                 .equ	SREG_H	= 5	; Half Carry Flag
                 .equ	SREG_T	= 6	; Bit Copy Storage
                 .equ	SREG_I	= 7	; Global Interrupt Enable
                 
                 ; MCUCR - MCU Control Register
                 ;.equ	ISC00	= 0	; Interrupt Sense Control 0 Bit 0
                 ;.equ	ISC01	= 1	; Interrupt Sense Control 0 Bit 1
                 ;.equ	ISC10	= 2	; Interrupt Sense Control 1 Bit 0
                 ;.equ	ISC11	= 3	; Interrupt Sense Control 1 Bit 1
                 .equ	SM0	= 4	; Sleep Mode Select
                 .equ	SM1	= 5	; Sleep Mode Select
                 .equ	SM2	= 6	; Sleep Mode Select
                 .equ	SE	= 7	; Sleep Enable
                 
                 ; MCUCSR - MCU Control And Status Register
                 .equ	MCUSR	= MCUCSR	; For compatibility
                 .equ	PORF	= 0	; Power-on reset flag
                 .equ	EXTRF	= 1	; External Reset Flag
                 .equ	BORF	= 2	; Brown-out Reset Flag
                 .equ	WDRF	= 3	; Watchdog Reset Flag
                 
                 ; OSCCAL - Oscillator Calibration Value
                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                 
                 ; SPMCR - Store Program Memory Control Register
                 .equ	SPMEN	= 0	; Store Program Memory Enable
                 .equ	PGERS	= 1	; Page Erase
                 .equ	PGWRT	= 2	; Page Write
                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                 .equ	RWWSRE	= 4	; Read-While-Write Section Read Enable
                 .equ	RWWSB	= 6	; Read-While-Write Section Busy
                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                 
                 ; SFIOR - Special Function IO Register
                 .equ	PSR10	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                 .equ	PUD	= 2	; Pull-up Disable
                 .equ	ADHSM	= 4	; ADC High Speed Mode
                 
                 
                 ; ***** AD_CONVERTER *****************
                 ; ADMUX - The ADC multiplexer Selection Register
                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                 .equ	ADLAR	= 5	; Left Adjust Result
                 .equ	REFS0	= 6	; Reference Selection Bit 0
                 .equ	REFS1	= 7	; Reference Selection Bit 1
                 
                 ; ADCSRA - The ADC Control and Status register
                 .equ	ADCSR	= ADCSRA	; For compatibility
                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                 .equ	ADIE	= 3	; ADC Interrupt Enable
                 .equ	ADIF	= 4	; ADC Interrupt Flag
                 .equ	ADFR	= 5	; ADC  Free Running Select
                 .equ	ADSC	= 6	; ADC Start Conversion
                 .equ	ADEN	= 7	; ADC Enable
                 
                 
                 
                 ; ***** LOCKSBITS ********************************************************
                 .equ	LB1	= 0	; Lock bit
                 .equ	LB2	= 1	; Lock bit
                 .equ	BLB01	= 2	; Boot Lock bit
                 .equ	BLB02	= 3	; Boot Lock bit
                 .equ	BLB11	= 4	; Boot lock bit
                 .equ	BLB12	= 5	; Boot lock bit
                 
                 
                 ; ***** FUSES ************************************************************
                 ; LOW fuse bits
                 .equ	CKSEL0	= 0	; Select Clock Source
                 .equ	CKSEL1	= 1	; Select Clock Source
                 .equ	CKSEL2	= 2	; Select Clock Source
                 .equ	CKSEL3	= 3	; Select Clock Source
                 .equ	SUT0	= 4	; Select start-up time
                 .equ	SUT1	= 5	; Select start-up time
                 .equ	BODEN	= 6	; Brown out detector enable
                 .equ	BODLEVEL	= 7	; Brown out detector trigger level
                 
                 ; HIGH fuse bits
                 .equ	BOOTRST	= 0	; Select Reset Vector
                 .equ	BOOTSZ0	= 1	; Select Boot Size
                 .equ	BOOTSZ1	= 2	; Select Boot Size
                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                 .equ	CKOPT	= 4	; Oscillator Options
                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                 .equ	WTDON	= 6	; Enable watchdog
                 .equ	RSTDISBL	= 7	; Disable reset
                 
                 
                 
                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                 .def	XH	= r27
                 .def	XL	= r26
                 .def	YH	= r29
                 .def	YL	= r28
                 .def	ZH	= r31
                 .def	ZL	= r30
                 
                 
                 
                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                 .equ	FLASHEND	= 0x0fff	; Note: Word address
                 .equ	IOEND	= 0x003f
                 .equ	SRAM_START	= 0x0060
                 .equ	SRAM_SIZE	= 1024
                 .equ	RAMEND	= 0x045f
                 .equ	XRAMEND	= 0x0000
                 .equ	E2END	= 0x01ff
                 .equ	EEPROMEND	= 0x01ff
                 .equ	EEADRBITS	= 9
                 #pragma AVRPART MEMORY PROG_FLASH 8192
                 #pragma AVRPART MEMORY EEPROM 512
                 #pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 
                 
                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                 .equ	NRWW_START_ADDR	= 0xc00
                 .equ	NRWW_STOP_ADDR	= 0xfff
                 .equ	RWW_START_ADDR	= 0x0
                 .equ	RWW_STOP_ADDR	= 0xbff
                 .equ	PAGESIZE	= 32
                 .equ	FIRSTBOOTSTART	= 0xf80
                 .equ	SECONDBOOTSTART	= 0xf00
                 .equ	THIRDBOOTSTART	= 0xe00
                 .equ	FOURTHBOOTSTART	= 0xc00
                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                 
                 
                 
                 ; ***** INTERRUPT VECTORS ************************************************
                 .equ	INT0addr	= 0x0001	; External Interrupt Request 0
                 .equ	INT1addr	= 0x0002	; External Interrupt Request 1
                 .equ	OC2addr	= 0x0003	; Timer/Counter2 Compare Match
                 .equ	OVF2addr	= 0x0004	; Timer/Counter2 Overflow
                 .equ	ICP1addr	= 0x0005	; Timer/Counter1 Capture Event
                 .equ	OC1Aaddr	= 0x0006	; Timer/Counter1 Compare Match A
                 .equ	OC1Baddr	= 0x0007	; Timer/Counter1 Compare Match B
                 .equ	OVF1addr	= 0x0008	; Timer/Counter1 Overflow
                 .equ	OVF0addr	= 0x0009	; Timer/Counter0 Overflow
                 .equ	SPIaddr	= 0x000a	; Serial Transfer Complete
                 .equ	URXCaddr	= 0x000b	; USART, Rx Complete
                 .equ	UDREaddr	= 0x000c	; USART Data Register Empty
                 .equ	UTXCaddr	= 0x000d	; USART, Tx Complete
                 .equ	ADCCaddr	= 0x000e	; ADC Conversion Complete
                 .equ	ERDYaddr	= 0x000f	; EEPROM Ready
                 .equ	ACIaddr	= 0x0010	; Analog Comparator
                 .equ	TWIaddr	= 0x0011	; 2-wire Serial Interface
                 .equ	SPMRaddr	= 0x0012	; Store Program Memory Ready
                 
                 .equ	INT_VECTORS_SIZE	= 19	; size in words
                 
                 #pragma AVRPART CORE INSTRUCTIONS_NOT_SUPPORTED break
                 
                 #endif  /* _M8DEF_INC_ */
                 
                 ; ***** END OF FILE ******************************************************
                 
                  ;######        USART bootloader for ATMEGA8        ######
                  ;######              (c) Avega 2013                ######
                  ;######                                            ######
                  ;########################################################
                 
                 .include "m8def.inc" 
                 
                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega8.xml *************
                 ;*************************************************************************
                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                 ;* 
                 ;* Number            : AVR000
                 ;* File Name         : "m8def.inc"
                 ;* Title             : Register/Bit Definitions for the ATmega8
                 ;* Date              : 2011-02-09
                 ;* Version           : 2.35
                 ;* Support E-mail    : avr@atmel.com
                 ;* Target MCU        : ATmega8
                 ;* 
                 ;* DESCRIPTION
                 ;* When including this file in the assembly program file, all I/O register 
                 ;* names and I/O register bit names appearing in the data book can be used.
                 ;* In addition, the six registers forming the three data pointers X, Y and 
                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                 ;* SRAM is also defined 
                 ;* 
                 ;* The Register names are represented by their hexadecimal address.
                 ;* 
                 ;* The Register Bit names are represented by their bit number (0-7).
                 ;* 
                 ;* Please observe the difference in using the bit names with instructions
                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                 ;* (skip if bit in register set/cleared). The following example illustrates
                 ;* this:
                 ;* 
                 ;* in    r16,PORTB             ;read PORTB latch
                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                 ;* out   PORTB,r16             ;output to PORTB
                 ;* 
                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                 ;* rjmp  TOV0_is_set           ;jump if set
                 ;* ...                         ;otherwise do something else
                 ;*************************************************************************
                 
                 #ifndef _M8DEF_INC_
                 #endif  /* _M8DEF_INC_ */
                 
                 ; ***** END OF FILE ******************************************************
                 
                 
                 ;===== system definitions ===========
                 .def Temp=r16
                 .def CNT0=r17		;buttons reg
                 .def CNT1=r18		;switches reg
                 .def ADDRL=r19
                 .def ADDRH=r20
                 .def NumBytes=r21
                 .def Temp2=r22
                 .def Flag=r23
                 
                 .equ BUF_L = low(SRAM_START)
                 .equ BUF_H = high(SRAM_START)
                 .equ PAGESIZEBYTES = PAGESIZE*2
                 
                 ;====== IO definitions =============
                 
                 
                 ;====== protocol definitions =======
                 .equ BOOT_VERSION 		= 0x10
                 .equ OPERATION_OK 		= 'o'
                 .equ PAGE_WRITTEN 		= '1'
                 .equ PAGE_EQUAL	  		= '2'
                 .equ SIGNATURE_REQUEST 	= 's'
                 .equ WRITE_DATA_ADRESS 	= 'a'
                 .equ FILL_DATA_BUFFER  	= 'b'
                 .equ PAGE_ERASE 		= 'c'
                 .equ PAGE_WRITE			= 'w'
                 .equ PAGE_READ			= 'r'
                 .equ EEPROM_WRITE		= 'e'
                 .equ EEPROM_READ		= 'p'
                 .equ READ_FUSES			= 'f'
                 .equ EXIT				= 'q'
                 .equ BAD_COMMAND		= '?'
                 
                 
                 ;bootloader fits in 256-words space (in NRWW section)
                 ;fuses must be set to BOOTSZ1=1, BOOTSZ0=1 (for ATMEGA32)
                 ;bootloader starts if BOOT_CONDITION is true and remains until 
                 ;reset is performed or specific command to restart is received
                 ;Before call from user program make sure that interrupts are disabled
                 ;(by "cli" instruction) and peripheral devices are disabled too
                 
                     .cseg				
                 	.org SECONDBOOTSTART	
                 
                 ;************ initialization *************;
                 ;------------ stack init -----------;
000f00 e50f      	ldi Temp,low(RAMEND)		
000f01 bf0d      	out SPL,Temp	
000f02 e004      	ldi Temp,High(RAMEND)
000f03 bf0e      	out SPH,Temp
                 
                 ;------------- IO setup ------------;
                 	; PORTC - all inputs
000f04 e000      	ldi temp,0x00	
000f05 bb04      	out DDRC,temp
000f06 bb05      	out PortC,temp
                 	
                 	; PORTB - all inputs
000f07 e000      	ldi temp,0x00
000f08 bb07      	out DDRB,temp
000f09 bb08      	out PortB,temp
                 	
                 	; PORTD - all inputs
000f0a e000      	ldi temp,0x00
000f0b bb01      	out DDRD,temp
000f0c bb02      	out PortD,temp
                 	
                 
                 	// Setup USART
                 
                 	// Double speed
000f0d e002          ldi Temp,(1<<U2X)
000f0e b90b          out UCSRA,Temp 
000f0f e108          ldi Temp,(1<<RXEN | 1<<TXEN | 0<<UCSZ2)
000f10 b90a      	out UCSRB,Temp
                 	// Even parity, 1 stop bit, 8 bit
000f11 ea06      	ldi Temp,(1<<URSEL | 1<<UPM1 | 0<<UPM0 | 0<<USBS | 1<<UCSZ1 | 1<<UCSZ0)
000f12 bd00      	out UCSRC,Temp
                 	// 57600 @16MHz, 2x
000f13 e000      	ldi Temp,0x00
000f14 bd00      	out UBRRH,Temp
000f15 e202      	ldi Temp,0x22	
000f16 b909      	out UBRRL,Temp
                 
                 ;*******************************************;
                 
                 ;******* Check for BOOT_CONDITION **********;
                 	
000f17 b300      	in Temp,PinD
000f18 7001      	andi Temp,0x01
                 
000f19 f419      	brne Wait				;if BOOT_CONDITION is false,
000f1a e0e0      	ldi ZL, 0x00
000f1b e0f0      	ldi ZH, 0x00
000f1c 9409      	ijmp					;jump to start of main program
                 
                 ;*******************************************;
                 
                 	
                 Wait:
                 	;sbi PortD,LED_RED
000f1d d0c9      	rcall GetByte
                 	;cbi PortD,LED_RED
                 ;---------- signature request -------------
                 ;PC gets 4 bytes: version of program and AVR's original signature
                 NC0:
000f1e 3703      	cpi temp,SIGNATURE_REQUEST		
000f1f f411      	brne NC1
000f20 d033      	rcall SendSigVers
000f21 cffb      	rjmp Wait
                 ;------------ write data adress -----------
                 NC1:
000f22 3601      	cpi temp,WRITE_DATA_ADRESS		
000f23 f421      	brne NC2
000f24 d038      	rcall StoreAddrNum
000f25 e60f      	ldi temp,OPERATION_OK		;answer
000f26 d0c4      	rcall SendByte
000f27 cff5      	rjmp Wait
                 ;------------ fill data buffer ------------
                 NC2:
000f28 3602      	cpi temp,FILL_DATA_BUFFER
000f29 f421      	brne NC3
000f2a d039      	rcall FillPageBuffer
000f2b e60f      	ldi temp,OPERATION_OK		;answer
000f2c d0be      	rcall SendByte
000f2d cfef      	rjmp Wait
                 ;-------------- page write ----------------
                 NC3:
000f2e 3707      	cpi temp,PAGE_WRITE
000f2f f419      	brne NC4
000f30 d03b      	rcall PageBufferWriteToFLASH
000f31 d0b9      	rcall SendByte				;result = temp
000f32 cfea      	rjmp Wait
                 
                 ;-------------- page read -----------------
                 NC4:
000f33 3702      	cpi temp,PAGE_READ
000f34 f411      	brne NC5
000f35 d066      	rcall ReadSendFlashPage
000f36 cfe6      	rjmp Wait
                 
                 ;------------- EEPROM write ---------------
                 NC5:
000f37 3605      	cpi temp,EEPROM_WRITE
000f38 f419      	brne NC6
000f39 d06a      	rcall PageBufferWriteToEEPROM
000f3a d0b0      	rcall SendByte				;result = temp
000f3b cfe1      	rjmp Wait
                 ;------------- EEPROM read ----------------
                 NC6:
000f3c 3700      	cpi temp,EEPROM_READ
000f3d f411      	brne NC7
000f3e d07f      	rcall ReadSendEEPROMData
000f3f cfdd      	rjmp Wait
                 ;------- read FUSES and LOCK bits ---------
                 NC7:
000f40 3606      	cpi temp,READ_FUSES
000f41 f411      	brne NC8
000f42 d085      	rcall ReadFusesLockBits
000f43 cfd9      	rjmp Wait
                 ;-------------- EXIT ----------------------
                 NC8:
000f44 3701      	cpi temp,EXIT
000f45 f429      	brne NC9
000f46 e60f      	ldi temp,OPERATION_OK		;answer
000f47 d0a3      	rcall SendByte
000f48 e0e0      	ldi ZL, 0x00
000f49 e0f0      	ldi ZH, 0x00
000f4a 9409      	ijmp					;jump to start of main program
                 ;------------- Page erase -----------------	
                 NC9:
000f4b 3603      	cpi temp,PAGE_ERASE
000f4c f421      	brne NC10
000f4d d049      	rcall PageErase
000f4e e60f      	ldi temp,OPERATION_OK		;answer
000f4f d09b      	rcall SendByte
000f50 cfcc      	rjmp Wait
                 
                 NC10:
000f51 e30f      	ldi temp,BAD_COMMAND
000f52 d098      	rcall SendByte
000f53 cfc9      	rjmp Wait
                 
                 
                 
                 ;********** sending signature and version *************
                 ;Affects: temp
                 SendSigVers:
000f54 e100      	ldi temp,BOOT_VERSION		;bootloader's version
000f55 d095      	rcall SendByte
000f56 e10e      	ldi temp,SIGNATURE_000		;AVR'MCU signature byte 0
000f57 d093      	rcall SendByte
000f58 e903      	ldi temp,SIGNATURE_001		;AVR'MCU signature byte 1
000f59 d091      	rcall SendByte	
000f5a e007      	ldi temp,SIGNATURE_002		;AVR'MCU signature byte 2
000f5b d08f      	rcall SendByte
000f5c 9508      	ret
                 ;******************************************************
                 
                 ;**** getting and storing adress and num of bytes *****
                 ;Affects: temp
                 StoreAddrNum:
000f5d d089      	rcall GetByte		;first get number of bytes to write
000f5e 2f50      	mov NumBytes,temp
000f5f d087      	rcall GetByte		;get low adress
000f60 2f30      	mov ADDRL,temp	
000f61 d085      	rcall GetByte		;get high adress
000f62 2f40      	mov ADDRH,temp		
000f63 9508      	ret
                 ;******************************************************
                 
                 ;******* filling temporary buffer from USART **********
                 ;Purpose:	get and store in RAM program data,amount = NumBytes
                 ;Result:	filled buffer in SRAM
                 ;Affects: temp,Y,CNT0
                 FillPageBuffer:
000f64 e0d0      	ldi YH,BUF_H		
000f65 e6c0      	ldi YL,BUF_L
000f66 2f15      	mov CNT0,NumBytes	;copy number of bytes to write
                 Fill_0:
000f67 d07f      	rcall GetByte
000f68 9309      	st Y+,temp
000f69 951a      	dec CNT0
000f6a f7e1      	brne Fill_0
000f6b 9508      	ret
                 ;****************************************************
                 
                 ;********** compare and write FLASH page ************;
                 ;Purpose:	write previously got (into buffer) program data
                 ;			specified by adress ADDRL:ADDRH in bytes
                 ;			amount=NumBytes.
                 ;Returns:	temp=PAGE_EQUAL if erase and write operations were not performed
                 ;			temp=PAGE_WRITTEN if page has been written
                 ;Affects:	temp,Y,Z,CNT0,CNT1
                 PageBufferWriteToFLASH:
000f6c 2777      	eor Flag,Flag
000f6d 2711      	eor CNT0,CNT0
000f6e e0d0      	ldi YH,BUF_H
000f6f e6c0      	ldi YL,BUF_L
000f70 2ff4      	mov ZH,ADDRH
000f71 2fe3      	mov ZL,ADDRL			
                 Check_0:
000f72 9105      	lpm temp,Z+			;read present byte
000f73 8128      	ld CNT1,Y			;read data to be written
000f74 1702      	cp temp,CNT1		;compare
000f75 f029      	breq Check_1		;data is equal, get away
000f76 1715      	cp CNT0,NumBytes	;CNT0-NumBytes
000f77 f410      	brsh Check_2		;if CNT0>=NumBytes
000f78 e071      	ldi Flag,0x01		;data is not equal and CNT0<NumBytes, set flag
000f79 c001      	rjmp Check_1
                 Check_2:
000f7a 8308      	st Y,temp			;rewrite buffer data with present FLASH byte				
                 Check_1:
000f7b 9621      	adiw YH:YL,1		;inc Y
000f7c 9513      	inc CNT0
000f7d 3410      	cpi CNT0,PAGESIZEBYTES
000f7e f799      	brne Check_0
000f7f 3071      	cpi Flag,0x01
000f80 f011      	breq Check_Failed	 
000f81 e302      	ldi temp,PAGE_EQUAL	;new and present pages are equal
000f82 9508      	ret					;return
                 	
                 Check_Failed:			;now we've got to write page data
000f83 27ff      	eor ZH,ZH			;clear Z-buffer
000f84 27ee      	eor ZL,ZL			
000f85 e0d0      	ldi YH,BUF_H		
000f86 e6c0      	ldi YL,BUF_L
000f87 e410      	ldi CNT0,PAGESIZEBYTES
                 Fill_FLASH_Buffer:
000f88 9009      	ld R0,Y+			;read low byte from buffer
000f89 9019      	ld R1,Y+			;read high byte from buffer
000f8a e001      	ldi temp,0x01 		;write R1:R0 to temp buffer
000f8b d04f      	rcall Do_spm
000f8c 9632      	adiw ZH:ZL, 2		    ;inc Z by 2
000f8d 5012      	subi CNT0,2				;decrease counter by 2 
000f8e f7c9      	brne Fill_FLASH_Buffer	;repeat until specified number of words is received
000f8f 2fe3      	mov ZL,ADDRL			;adress for page to store
000f90 2ff4      	mov ZH,ADDRH
000f91 d005      	rcall	PageErase					;page erase
000f92 e005      	ldi Temp, (1<<PGWRT) | (1<<SPMEN)	;page write
000f93 d047      	rcall	Do_spm
000f94 d04c      	rcall EnableRWW
000f95 e301      	ldi temp,PAGE_WRITTEN	;data has been written
000f96 9508      	ret	
                 ;****************************************************
                 
                 ;********** FLASH page erase ************************
                 PageErase:
000f97 2fe3      	mov ZL,ADDRL			;adress for page to erase
000f98 2ff4      	mov ZH,ADDRH
000f99 e003      	ldi Temp, (1<<PGERS) | (1<<SPMEN)  ; page erase
000f9a d040      	rcall	Do_spm
000f9b 9508      	ret
                 ;****************************************************
                 
                 ;********* reading and sending page *****************
                 ;Purpose:	read page, specified by adress ADDRL:ADDRH in bytes into buffer
                 ;			amount = PAGESIZE, send it over the USART
                 ;Affects: temp,Z,Y,CNT0
                 ReadSendFlashPage:
000f9c 2ff4      	mov ZH,ADDRH
000f9d 2fe3      	mov ZL,ADDRL
                 ;	ldi ZH,0x00
                 ;	ldi ZL,0x00
000f9e 2f15      	mov CNT0,NumBytes
                 Read_0:
000f9f 9105      	lpm temp,Z+
000fa0 d04a      	rcall SendByte
000fa1 951a      	dec CNT0
000fa2 f7e1      	brne Read_0
000fa3 9508      	ret
                 ;****************************************************
                 
                 ;********* writing received data to EEPROM ************
                 PageBufferWriteToEEPROM:
000fa4 bb4f      	out EEARH,ADDRH
000fa5 bb3e      	out EEARL,ADDRL
000fa6 e0d0      	ldi YH,BUF_H		
000fa7 e6c0      	ldi YL,BUF_L
000fa8 2f15      	mov CNT0,NumBytes
000fa9 2722      	eor CNT1,CNT1
000faa 2422      	eor r2,r2
000fab 9423      	inc r2
000fac 2433      	eor r3,r3
                 EE_write:
000fad 9109      	ld temp,Y+					; data to be written
000fae 9ae0      	sbi EECR,EERE
000faf b36d      	in temp2,EEDR 				; Read data from data register
000fb0 1706      	cp temp,temp2
000fb1 f031      	breq EE_equal
000fb2 bb0d      	out EEDR,temp   			; Write data to data register
000fb3 9ae2      	sbi EECR,EEMWE  			; Write logical one to EEMWE
000fb4 9ae1       	sbi EECR,EEWE   			; Start eeprom write by setting EEWE
000fb5 99e1      	sbic EECR,EEWE  			; waiting
000fb6 cffe      	rjmp PC-1
000fb7 9523      	inc CNT1
                 EE_equal:
000fb8 951a      	dec CNT0
000fb9 f411      	brne EE_next
000fba 2f02      	mov temp,CNT1
000fbb 9508      	ret
                 EE_next:
000fbc d018      	rcall Inc_EEPROM_addr
000fbd cfef      	rjmp EE_write
                 ;******************************************************
                 
                 ;********* reading and sending EEPROM data ************
                 ReadSendEEPROMData:
000fbe bb4f      	out EEARH,ADDRH
000fbf bb3e      	out EEARL,ADDRL
000fc0 2f15      	mov CNT0,NumBytes
                 EE_read:
000fc1 9ae0      	sbi EECR,EERE
000fc2 b30d      	in temp,EEDR
000fc3 d027      	rcall SendByte
000fc4 d010      	rcall Inc_EEPROM_addr
000fc5 951a      	dec CNT0
000fc6 f7d1      	brne EE_read
000fc7 9508      	ret	
                 ;******************************************************
                 
                 ;******** reading FUSES and LOCK bits *****************
                 ReadFusesLockBits:
000fc8 27ff      	eor ZH,ZH
                 	;reading LOCK bits
000fc9 e0e1      	ldi ZL,0x01
000fca d005      	rcall GetFuseLock
                 	;reading FUSE bits low
000fcb e0e0      	ldi ZL,0x00
000fcc d003      	rcall GetFuseLock
                 	;reading FUSE bits high
000fcd e0e3      	ldi ZL,0x03
000fce d001      	rcall GetFuseLock
000fcf 9508      	ret
                 
                 GetFuseLock:
000fd0 e009      	ldi Temp, (1<<BLBSET) | (1<<SPMEN)  ; read lock bits
000fd1 bf07      	out SPMCR,temp
000fd2 9104      	lpm temp,Z
000fd3 d017      	rcall SendByte
000fd4 9508      	ret	
                 ;******************************************************
                 
                 ;******* Increment EEARH:EEARL registers **************
                 Inc_EEPROM_addr:
000fd5 b3ae      	in XL,EEARL
000fd6 b3bf      	in XH,EEARH
000fd7 9611      	adiw XH:XL,0x01
000fd8 bbae      	out EEARL,XL
000fd9 bbbf      	out EEARH,XH
000fda 9508      	ret
                 ;******************************************************
                 
                 
                 ;******* executing spm instruction ********************
                 ; input: temp determines SPM action
                 Do_spm:
000fdb bf07      	out SPMCR, temp
000fdc 95e8      	spm
                 	; wait for SPM complete
                 Wait_spm:
000fdd b707      	in temp, SPMCR
000fde fd00      	sbrc temp, SPMEN
000fdf cffd      	rjmp Wait_spm
000fe0 9508      	ret	
                 ;*******************************************************
                 
                 
                 ;****************** enable RWW section ******************
                 ; verify that RWW section is safe to read
                 EnableRWW:
000fe1 b707      	in temp, SPMCR
000fe2 ff06      	sbrs temp, RWWSB ; If RWWSB is set, the RWW section is not ready yet
000fe3 9508      	ret
                 	; re-enable the RWW section
000fe4 e101      	ldi temp, (1<<RWWSRE) | (1<<SPMEN)
000fe5 dff5      	rcall Do_spm
000fe6 cffa      	rjmp EnableRWW
                 ;********************************************************
                 
                 
                 //************ getting a byte from USART ****************//
                 GetByte:
000fe7 9b5f      	sbis UCSRA, RXC ; Wait for data to be received
000fe8 cffe      	rjmp PC-1
000fe9 b10c      	in Temp, UDR ; Get and return received data from buffer
000fea 9508      	ret
                 //*******************************************************//
                 
                 
                 //************** sending a byte by USART ****************//
                 SendByte:
000feb 9b5d      	sbis UCSRA,UDRE
000fec cffe      	rjmp PC-1
000fed b90c      	out UDR,temp
000fee 9508      	ret
                 //*******************************************************//


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega8" register use summary:
r0 :   1 r1 :   1 r2 :   3 r3 :   2 r4 :   0 r5 :   0 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:  73 r17:  15 r18:   6 r19:   7 r20:   7 r21:   6 r22:   2 r23:   4 
r24:   0 r25:   0 r26:   3 r27:   3 r28:   5 r29:   5 r30:  12 r31:  11 
x  :   0 y  :   6 z  :   3 
Registers used: 20 out of 35 (57.1%)

"ATmega8" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   0 add   :   0 adiw  :   3 and   :   0 
andi  :   1 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   0 brcs  :   0 breq  :   3 brge  :   0 brhc  :   0 brhs  :   0 
brid  :   0 brie  :   0 brlo  :   0 brlt  :   0 brmi  :   0 brne  :  17 
brpl  :   0 brsh  :   1 brtc  :   0 brts  :   0 brvc  :   0 brvs  :   0 
bset  :   0 bst   :   0 cbi   :   0 cbr   :   0 clc   :   0 clh   :   0 
cli   :   0 cln   :   0 clr   :   0 cls   :   0 clt   :   0 clv   :   0 
clz   :   0 com   :   0 cp    :   3 cpc   :   0 cpi   :  12 cpse  :   0 
dec   :   4 eor   :   8 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 
ijmp  :   2 in    :   8 inc   :   3 ld    :   4 ldd   :   0 ldi   :  43 
lds   :   0 lpm   :   4 lsl   :   0 lsr   :   0 mov   :  16 movw  :   0 
mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 or    :   0 
ori   :   0 out   :  23 pop   :   0 push  :   0 rcall :  39 ret   :  16 
reti  :   0 rjmp  :  17 rol   :   0 ror   :   0 sbc   :   0 sbci  :   0 
sbi   :   4 sbic  :   1 sbis  :   2 sbiw  :   0 sbr   :   0 sbrc  :   1 
sbrs  :   1 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   2 
st    :   2 std   :   0 sts   :   0 sub   :   0 subi  :   1 swap  :   0 
tst   :   0 wdr   :   0 
Instructions used: 28 out of 110 (25.5%)

"ATmega8" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x001e00 0x001fde    478      0    478    8192   5.8%
[.dseg] 0x000060 0x000060      0      0      0    1024   0.0%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 0 warnings
